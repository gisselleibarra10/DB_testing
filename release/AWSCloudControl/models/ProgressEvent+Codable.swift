// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CloudControlClientTypes.ProgressEvent: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case errorCode = "ErrorCode"
        case eventTime = "EventTime"
        case identifier = "Identifier"
        case operation = "Operation"
        case operationStatus = "OperationStatus"
        case requestToken = "RequestToken"
        case resourceModel = "ResourceModel"
        case retryAfter = "RetryAfter"
        case statusMessage = "StatusMessage"
        case typeName = "TypeName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let errorCode = self.errorCode {
            try encodeContainer.encode(errorCode.rawValue, forKey: .errorCode)
        }
        if let eventTime = self.eventTime {
            try encodeContainer.encode(eventTime.timeIntervalSince1970, forKey: .eventTime)
        }
        if let identifier = self.identifier {
            try encodeContainer.encode(identifier, forKey: .identifier)
        }
        if let operation = self.operation {
            try encodeContainer.encode(operation.rawValue, forKey: .operation)
        }
        if let operationStatus = self.operationStatus {
            try encodeContainer.encode(operationStatus.rawValue, forKey: .operationStatus)
        }
        if let requestToken = self.requestToken {
            try encodeContainer.encode(requestToken, forKey: .requestToken)
        }
        if let resourceModel = self.resourceModel {
            try encodeContainer.encode(resourceModel, forKey: .resourceModel)
        }
        if let retryAfter = self.retryAfter {
            try encodeContainer.encode(retryAfter.timeIntervalSince1970, forKey: .retryAfter)
        }
        if let statusMessage = self.statusMessage {
            try encodeContainer.encode(statusMessage, forKey: .statusMessage)
        }
        if let typeName = self.typeName {
            try encodeContainer.encode(typeName, forKey: .typeName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let typeNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .typeName)
        typeName = typeNameDecoded
        let identifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .identifier)
        identifier = identifierDecoded
        let requestTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .requestToken)
        requestToken = requestTokenDecoded
        let operationDecoded = try containerValues.decodeIfPresent(CloudControlClientTypes.Operation.self, forKey: .operation)
        operation = operationDecoded
        let operationStatusDecoded = try containerValues.decodeIfPresent(CloudControlClientTypes.OperationStatus.self, forKey: .operationStatus)
        operationStatus = operationStatusDecoded
        let eventTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .eventTime)
        eventTime = eventTimeDecoded
        let resourceModelDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceModel)
        resourceModel = resourceModelDecoded
        let statusMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .statusMessage)
        statusMessage = statusMessageDecoded
        let errorCodeDecoded = try containerValues.decodeIfPresent(CloudControlClientTypes.HandlerErrorCode.self, forKey: .errorCode)
        errorCode = errorCodeDecoded
        let retryAfterDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .retryAfter)
        retryAfter = retryAfterDecoded
    }
}
