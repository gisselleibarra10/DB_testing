// Code generated by smithy-swift-codegen. DO NOT EDIT!

import AWSClientRuntime
import ClientRuntime

extension DeleteResourceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteResourceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AlreadyExistsException" : self = .alreadyExistsException(try AlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ClientTokenConflictException" : self = .clientTokenConflictException(try ClientTokenConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConcurrentOperationException" : self = .concurrentOperationException(try ConcurrentOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "GeneralServiceException" : self = .generalServiceException(try GeneralServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "HandlerFailureException" : self = .handlerFailureException(try HandlerFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "HandlerInternalFailureException" : self = .handlerInternalFailureException(try HandlerInternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidCredentialsException" : self = .invalidCredentialsException(try InvalidCredentialsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NetworkFailureException" : self = .networkFailureException(try NetworkFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotStabilizedException" : self = .notStabilizedException(try NotStabilizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotUpdatableException" : self = .notUpdatableException(try NotUpdatableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PrivateTypeException" : self = .privateTypeException(try PrivateTypeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceConflictException" : self = .resourceConflictException(try ResourceConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceInternalErrorException" : self = .serviceInternalErrorException(try ServiceInternalErrorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceLimitExceededException" : self = .serviceLimitExceededException(try ServiceLimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TypeNotFoundException" : self = .typeNotFoundException(try TypeNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedActionException" : self = .unsupportedActionException(try UnsupportedActionException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}
