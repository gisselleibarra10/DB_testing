// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct InferSNOMEDCTOutputResponseBody: Swift.Equatable {
    let entities: [ComprehendMedicalClientTypes.SNOMEDCTEntity]?
    let paginationToken: Swift.String?
    let modelVersion: Swift.String?
    let sNOMEDCTDetails: ComprehendMedicalClientTypes.SNOMEDCTDetails?
    let characters: ComprehendMedicalClientTypes.Characters?
}

extension InferSNOMEDCTOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case characters = "Characters"
        case entities = "Entities"
        case modelVersion = "ModelVersion"
        case paginationToken = "PaginationToken"
        case sNOMEDCTDetails = "SNOMEDCTDetails"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let entitiesContainer = try containerValues.decodeIfPresent([ComprehendMedicalClientTypes.SNOMEDCTEntity?].self, forKey: .entities)
        var entitiesDecoded0:[ComprehendMedicalClientTypes.SNOMEDCTEntity]? = nil
        if let entitiesContainer = entitiesContainer {
            entitiesDecoded0 = [ComprehendMedicalClientTypes.SNOMEDCTEntity]()
            for structure0 in entitiesContainer {
                if let structure0 = structure0 {
                    entitiesDecoded0?.append(structure0)
                }
            }
        }
        entities = entitiesDecoded0
        let paginationTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .paginationToken)
        paginationToken = paginationTokenDecoded
        let modelVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelVersion)
        modelVersion = modelVersionDecoded
        let sNOMEDCTDetailsDecoded = try containerValues.decodeIfPresent(ComprehendMedicalClientTypes.SNOMEDCTDetails.self, forKey: .sNOMEDCTDetails)
        sNOMEDCTDetails = sNOMEDCTDetailsDecoded
        let charactersDecoded = try containerValues.decodeIfPresent(ComprehendMedicalClientTypes.Characters.self, forKey: .characters)
        characters = charactersDecoded
    }
}
