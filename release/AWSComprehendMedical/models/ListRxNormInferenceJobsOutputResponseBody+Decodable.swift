// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListRxNormInferenceJobsOutputResponseBody: Swift.Equatable {
    let comprehendMedicalAsyncJobPropertiesList: [ComprehendMedicalClientTypes.ComprehendMedicalAsyncJobProperties]?
    let nextToken: Swift.String?
}

extension ListRxNormInferenceJobsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case comprehendMedicalAsyncJobPropertiesList = "ComprehendMedicalAsyncJobPropertiesList"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let comprehendMedicalAsyncJobPropertiesListContainer = try containerValues.decodeIfPresent([ComprehendMedicalClientTypes.ComprehendMedicalAsyncJobProperties?].self, forKey: .comprehendMedicalAsyncJobPropertiesList)
        var comprehendMedicalAsyncJobPropertiesListDecoded0:[ComprehendMedicalClientTypes.ComprehendMedicalAsyncJobProperties]? = nil
        if let comprehendMedicalAsyncJobPropertiesListContainer = comprehendMedicalAsyncJobPropertiesListContainer {
            comprehendMedicalAsyncJobPropertiesListDecoded0 = [ComprehendMedicalClientTypes.ComprehendMedicalAsyncJobProperties]()
            for structure0 in comprehendMedicalAsyncJobPropertiesListContainer {
                if let structure0 = structure0 {
                    comprehendMedicalAsyncJobPropertiesListDecoded0?.append(structure0)
                }
            }
        }
        comprehendMedicalAsyncJobPropertiesList = comprehendMedicalAsyncJobPropertiesListDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
