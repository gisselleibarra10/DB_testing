// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct StartRxNormInferenceJobInputBody: Swift.Equatable {
    let inputDataConfig: ComprehendMedicalClientTypes.InputDataConfig?
    let outputDataConfig: ComprehendMedicalClientTypes.OutputDataConfig?
    let dataAccessRoleArn: Swift.String?
    let jobName: Swift.String?
    let clientRequestToken: Swift.String?
    let kMSKey: Swift.String?
    let languageCode: ComprehendMedicalClientTypes.LanguageCode?
}

extension StartRxNormInferenceJobInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientRequestToken = "ClientRequestToken"
        case dataAccessRoleArn = "DataAccessRoleArn"
        case inputDataConfig = "InputDataConfig"
        case jobName = "JobName"
        case kMSKey = "KMSKey"
        case languageCode = "LanguageCode"
        case outputDataConfig = "OutputDataConfig"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let inputDataConfigDecoded = try containerValues.decodeIfPresent(ComprehendMedicalClientTypes.InputDataConfig.self, forKey: .inputDataConfig)
        inputDataConfig = inputDataConfigDecoded
        let outputDataConfigDecoded = try containerValues.decodeIfPresent(ComprehendMedicalClientTypes.OutputDataConfig.self, forKey: .outputDataConfig)
        outputDataConfig = outputDataConfigDecoded
        let dataAccessRoleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataAccessRoleArn)
        dataAccessRoleArn = dataAccessRoleArnDecoded
        let jobNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobName)
        jobName = jobNameDecoded
        let clientRequestTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientRequestToken)
        clientRequestToken = clientRequestTokenDecoded
        let kMSKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kMSKey)
        kMSKey = kMSKeyDecoded
        let languageCodeDecoded = try containerValues.decodeIfPresent(ComprehendMedicalClientTypes.LanguageCode.self, forKey: .languageCode)
        languageCode = languageCodeDecoded
    }
}
