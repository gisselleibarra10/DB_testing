// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension BackupGatewayClientTypes.GatewayDetails: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case gatewayArn = "GatewayArn"
        case gatewayDisplayName = "GatewayDisplayName"
        case gatewayType = "GatewayType"
        case hypervisorId = "HypervisorId"
        case lastSeenTime = "LastSeenTime"
        case maintenanceStartTime = "MaintenanceStartTime"
        case nextUpdateAvailabilityTime = "NextUpdateAvailabilityTime"
        case vpcEndpoint = "VpcEndpoint"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let gatewayArn = self.gatewayArn {
            try encodeContainer.encode(gatewayArn, forKey: .gatewayArn)
        }
        if let gatewayDisplayName = self.gatewayDisplayName {
            try encodeContainer.encode(gatewayDisplayName, forKey: .gatewayDisplayName)
        }
        if let gatewayType = self.gatewayType {
            try encodeContainer.encode(gatewayType.rawValue, forKey: .gatewayType)
        }
        if let hypervisorId = self.hypervisorId {
            try encodeContainer.encode(hypervisorId, forKey: .hypervisorId)
        }
        if let lastSeenTime = self.lastSeenTime {
            try encodeContainer.encode(lastSeenTime.timeIntervalSince1970, forKey: .lastSeenTime)
        }
        if let maintenanceStartTime = self.maintenanceStartTime {
            try encodeContainer.encode(maintenanceStartTime, forKey: .maintenanceStartTime)
        }
        if let nextUpdateAvailabilityTime = self.nextUpdateAvailabilityTime {
            try encodeContainer.encode(nextUpdateAvailabilityTime.timeIntervalSince1970, forKey: .nextUpdateAvailabilityTime)
        }
        if let vpcEndpoint = self.vpcEndpoint {
            try encodeContainer.encode(vpcEndpoint, forKey: .vpcEndpoint)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let gatewayArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .gatewayArn)
        gatewayArn = gatewayArnDecoded
        let gatewayDisplayNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .gatewayDisplayName)
        gatewayDisplayName = gatewayDisplayNameDecoded
        let gatewayTypeDecoded = try containerValues.decodeIfPresent(BackupGatewayClientTypes.GatewayType.self, forKey: .gatewayType)
        gatewayType = gatewayTypeDecoded
        let hypervisorIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .hypervisorId)
        hypervisorId = hypervisorIdDecoded
        let lastSeenTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastSeenTime)
        lastSeenTime = lastSeenTimeDecoded
        let maintenanceStartTimeDecoded = try containerValues.decodeIfPresent(BackupGatewayClientTypes.MaintenanceStartTime.self, forKey: .maintenanceStartTime)
        maintenanceStartTime = maintenanceStartTimeDecoded
        let nextUpdateAvailabilityTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .nextUpdateAvailabilityTime)
        nextUpdateAvailabilityTime = nextUpdateAvailabilityTimeDecoded
        let vpcEndpointDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vpcEndpoint)
        vpcEndpoint = vpcEndpointDecoded
    }
}
