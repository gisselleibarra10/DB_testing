// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateGatewayInputBody: Swift.Equatable {
    let activationKey: Swift.String?
    let gatewayDisplayName: Swift.String?
    let gatewayType: BackupGatewayClientTypes.GatewayType?
    let tags: [BackupGatewayClientTypes.Tag]?
}

extension CreateGatewayInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case activationKey = "ActivationKey"
        case gatewayDisplayName = "GatewayDisplayName"
        case gatewayType = "GatewayType"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let activationKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .activationKey)
        activationKey = activationKeyDecoded
        let gatewayDisplayNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .gatewayDisplayName)
        gatewayDisplayName = gatewayDisplayNameDecoded
        let gatewayTypeDecoded = try containerValues.decodeIfPresent(BackupGatewayClientTypes.GatewayType.self, forKey: .gatewayType)
        gatewayType = gatewayTypeDecoded
        let tagsContainer = try containerValues.decodeIfPresent([BackupGatewayClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[BackupGatewayClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [BackupGatewayClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}
