// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// Represents the input for a request operation.
public struct DescribeScalingPoliciesInput: Swift.Equatable {
    /// A unique identifier for the fleet for which to retrieve scaling policies. You can use either the fleet ID or ARN value.
    /// This member is required.
    public var fleetId: Swift.String?
    /// The maximum number of results to return. Use this parameter with NextToken to get results as a set of sequential pages.
    public var limit: Swift.Int?
    /// The fleet location. If you don't specify this value, the response contains the scaling policies of every location in the fleet.
    public var location: Swift.String?
    /// A token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this operation. To start at the beginning of the result set, do not specify a value.
    public var nextToken: Swift.String?
    /// Scaling policy status to filter results on. A scaling policy is only in force when in an ACTIVE status.
    ///
    /// * ACTIVE -- The scaling policy is currently in force.
    ///
    /// * UPDATEREQUESTED -- A request to update the scaling policy has been received.
    ///
    /// * UPDATING -- A change is being made to the scaling policy.
    ///
    /// * DELETEREQUESTED -- A request to delete the scaling policy has been received.
    ///
    /// * DELETING -- The scaling policy is being deleted.
    ///
    /// * DELETED -- The scaling policy has been deleted.
    ///
    /// * ERROR -- An error occurred in creating the policy. It should be removed and recreated.
    public var statusFilter: GameLiftClientTypes.ScalingStatusType?

    public init (
        fleetId: Swift.String? = nil,
        limit: Swift.Int? = nil,
        location: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        statusFilter: GameLiftClientTypes.ScalingStatusType? = nil
    )
    {
        self.fleetId = fleetId
        self.limit = limit
        self.location = location
        self.nextToken = nextToken
        self.statusFilter = statusFilter
    }
}
