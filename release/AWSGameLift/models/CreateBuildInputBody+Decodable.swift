// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateBuildInputBody: Swift.Equatable {
    let name: Swift.String?
    let version: Swift.String?
    let storageLocation: GameLiftClientTypes.S3Location?
    let operatingSystem: GameLiftClientTypes.OperatingSystem?
    let tags: [GameLiftClientTypes.Tag]?
}

extension CreateBuildInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case operatingSystem = "OperatingSystem"
        case storageLocation = "StorageLocation"
        case tags = "Tags"
        case version = "Version"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let versionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .version)
        version = versionDecoded
        let storageLocationDecoded = try containerValues.decodeIfPresent(GameLiftClientTypes.S3Location.self, forKey: .storageLocation)
        storageLocation = storageLocationDecoded
        let operatingSystemDecoded = try containerValues.decodeIfPresent(GameLiftClientTypes.OperatingSystem.self, forKey: .operatingSystem)
        operatingSystem = operatingSystemDecoded
        let tagsContainer = try containerValues.decodeIfPresent([GameLiftClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[GameLiftClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [GameLiftClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}
