// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// Represents the input for a request operation.
public struct PutScalingPolicyInput: Swift.Equatable {
    /// Comparison operator to use when measuring the metric against the threshold value.
    public var comparisonOperator: GameLiftClientTypes.ComparisonOperatorType?
    /// Length of time (in minutes) the metric must be at or beyond the threshold before a scaling event is triggered.
    public var evaluationPeriods: Swift.Int?
    /// A unique identifier for the fleet to apply this policy to. You can use either the fleet ID or ARN value. The fleet cannot be in any of the following statuses: ERROR or DELETING.
    /// This member is required.
    public var fleetId: Swift.String?
    /// Name of the Amazon GameLift-defined metric that is used to trigger a scaling adjustment. For detailed descriptions of fleet metrics, see [Monitor Amazon GameLift with Amazon CloudWatch](https://docs.aws.amazon.com/gamelift/latest/developerguide/monitoring-cloudwatch.html).
    ///
    /// * ActivatingGameSessions -- Game sessions in the process of being created.
    ///
    /// * ActiveGameSessions -- Game sessions that are currently running.
    ///
    /// * ActiveInstances -- Fleet instances that are currently running at least one game session.
    ///
    /// * AvailableGameSessions -- Additional game sessions that fleet could host simultaneously, given current capacity.
    ///
    /// * AvailablePlayerSessions -- Empty player slots in currently active game sessions. This includes game sessions that are not currently accepting players. Reserved player slots are not included.
    ///
    /// * CurrentPlayerSessions -- Player slots in active game sessions that are being used by a player or are reserved for a player.
    ///
    /// * IdleInstances -- Active instances that are currently hosting zero game sessions.
    ///
    /// * PercentAvailableGameSessions -- Unused percentage of the total number of game sessions that a fleet could host simultaneously, given current capacity. Use this metric for a target-based scaling policy.
    ///
    /// * PercentIdleInstances -- Percentage of the total number of active instances that are hosting zero game sessions.
    ///
    /// * QueueDepth -- Pending game session placement requests, in any queue, where the current fleet is the top-priority destination.
    ///
    /// * WaitTime -- Current wait time for pending game session placement requests, in any queue, where the current fleet is the top-priority destination.
    /// This member is required.
    public var metricName: GameLiftClientTypes.MetricName?
    /// A descriptive label that is associated with a fleet's scaling policy. Policy names do not need to be unique. A fleet can have only one scaling policy with the same name.
    /// This member is required.
    public var name: Swift.String?
    /// The type of scaling policy to create. For a target-based policy, set the parameter MetricName to 'PercentAvailableGameSessions' and specify a TargetConfiguration. For a rule-based policy set the following parameters: MetricName, ComparisonOperator, Threshold, EvaluationPeriods, ScalingAdjustmentType, and ScalingAdjustment.
    public var policyType: GameLiftClientTypes.PolicyType?
    /// Amount of adjustment to make, based on the scaling adjustment type.
    public var scalingAdjustment: Swift.Int
    /// The type of adjustment to make to a fleet's instance count (see [FleetCapacity]):
    ///
    /// * ChangeInCapacity -- add (or subtract) the scaling adjustment value from the current instance count. Positive values scale up while negative values scale down.
    ///
    /// * ExactCapacity -- set the instance count to the scaling adjustment value.
    ///
    /// * PercentChangeInCapacity -- increase or reduce the current instance count by the scaling adjustment, read as a percentage. Positive values scale up while negative values scale down; for example, a value of "-10" scales the fleet down by 10%.
    public var scalingAdjustmentType: GameLiftClientTypes.ScalingAdjustmentType?
    /// An object that contains settings for a target-based scaling policy.
    public var targetConfiguration: GameLiftClientTypes.TargetConfiguration?
    /// Metric value used to trigger a scaling event.
    public var threshold: Swift.Double

    public init (
        comparisonOperator: GameLiftClientTypes.ComparisonOperatorType? = nil,
        evaluationPeriods: Swift.Int? = nil,
        fleetId: Swift.String? = nil,
        metricName: GameLiftClientTypes.MetricName? = nil,
        name: Swift.String? = nil,
        policyType: GameLiftClientTypes.PolicyType? = nil,
        scalingAdjustment: Swift.Int = 0,
        scalingAdjustmentType: GameLiftClientTypes.ScalingAdjustmentType? = nil,
        targetConfiguration: GameLiftClientTypes.TargetConfiguration? = nil,
        threshold: Swift.Double = 0.0
    )
    {
        self.comparisonOperator = comparisonOperator
        self.evaluationPeriods = evaluationPeriods
        self.fleetId = fleetId
        self.metricName = metricName
        self.name = name
        self.policyType = policyType
        self.scalingAdjustment = scalingAdjustment
        self.scalingAdjustmentType = scalingAdjustmentType
        self.targetConfiguration = targetConfiguration
        self.threshold = threshold
    }
}
