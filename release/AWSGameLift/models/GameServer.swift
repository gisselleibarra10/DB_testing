// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension GameLiftClientTypes {
    /// This data type is used with the GameLift FleetIQ and game server groups. Properties describing a game server that is running on an instance in a [GameServerGroup]. A game server is created by a successful call to RegisterGameServer and deleted by calling DeregisterGameServer. A game server is claimed to host a game session by calling ClaimGameServer. Related actions [RegisterGameServer] | [ListGameServers] | [ClaimGameServer] | [DescribeGameServer] | [UpdateGameServer] | [DeregisterGameServer] | [All APIs by task](https://docs.aws.amazon.com/gamelift/latest/fleetiqguide/reference-awssdk-fleetiq.html)
    public struct GameServer: Swift.Equatable {
        /// Indicates when an available game server has been reserved for gameplay but has not yet started hosting a game. Once it is claimed, the game server remains in CLAIMED status for a maximum of one minute. During this time, game clients connect to the game server to start the game and trigger the game server to update its utilization status. After one minute, the game server claim status reverts to null.
        public var claimStatus: GameLiftClientTypes.GameServerClaimStatus?
        /// The port and IP address that must be used to establish a client connection to the game server.
        public var connectionInfo: Swift.String?
        /// A set of custom game server properties, formatted as a single string value. This data is passed to a game client or service when it requests information on game servers using [ListGameServers] or [ClaimGameServer].
        public var gameServerData: Swift.String?
        /// The ARN identifier for the game server group where the game server is located.
        public var gameServerGroupArn: Swift.String?
        /// A unique identifier for the game server group where the game server is running. Use either the [GameServerGroup] name or ARN value.
        public var gameServerGroupName: Swift.String?
        /// A custom string that uniquely identifies the game server. Game server IDs are developer-defined and are unique across all game server groups in an Amazon Web Services account.
        public var gameServerId: Swift.String?
        /// The unique identifier for the instance where the game server is running. This ID is available in the instance metadata. EC2 instance IDs use a 17-character format, for example: i-1234567890abcdef0.
        public var instanceId: Swift.String?
        /// Timestamp that indicates the last time the game server was claimed with a [ClaimGameServer] request. The format is a number expressed in Unix time as milliseconds (for example "1469498468.057"). This value is used to calculate when a claimed game server's status should revert to null.
        public var lastClaimTime: ClientRuntime.Date?
        /// Timestamp that indicates the last time the game server was updated with health status using an [UpdateGameServer] request. The format is a number expressed in Unix time as milliseconds (for example "1469498468.057"). After game server registration, this property is only changed when a game server update specifies a health check value.
        public var lastHealthCheckTime: ClientRuntime.Date?
        /// Timestamp that indicates when the game server was created with a [RegisterGameServer] request. The format is a number expressed in Unix time as milliseconds (for example "1469498468.057").
        public var registrationTime: ClientRuntime.Date?
        /// Indicates whether the game server is currently available for new games or is busy. Possible statuses include:
        ///
        /// * AVAILABLE - The game server is available to be claimed. A game server that has been claimed remains in this status until it reports game hosting activity.
        ///
        /// * UTILIZED - The game server is currently hosting a game session with players.
        public var utilizationStatus: GameLiftClientTypes.GameServerUtilizationStatus?

        public init (
            claimStatus: GameLiftClientTypes.GameServerClaimStatus? = nil,
            connectionInfo: Swift.String? = nil,
            gameServerData: Swift.String? = nil,
            gameServerGroupArn: Swift.String? = nil,
            gameServerGroupName: Swift.String? = nil,
            gameServerId: Swift.String? = nil,
            instanceId: Swift.String? = nil,
            lastClaimTime: ClientRuntime.Date? = nil,
            lastHealthCheckTime: ClientRuntime.Date? = nil,
            registrationTime: ClientRuntime.Date? = nil,
            utilizationStatus: GameLiftClientTypes.GameServerUtilizationStatus? = nil
        )
        {
            self.claimStatus = claimStatus
            self.connectionInfo = connectionInfo
            self.gameServerData = gameServerData
            self.gameServerGroupArn = gameServerGroupArn
            self.gameServerGroupName = gameServerGroupName
            self.gameServerId = gameServerId
            self.instanceId = instanceId
            self.lastClaimTime = lastClaimTime
            self.lastHealthCheckTime = lastHealthCheckTime
            self.registrationTime = registrationTime
            self.utilizationStatus = utilizationStatus
        }
    }

}
