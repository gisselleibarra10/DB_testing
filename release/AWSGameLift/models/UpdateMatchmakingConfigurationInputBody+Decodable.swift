// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct UpdateMatchmakingConfigurationInputBody: Swift.Equatable {
    let name: Swift.String?
    let description: Swift.String?
    let gameSessionQueueArns: [Swift.String]?
    let requestTimeoutSeconds: Swift.Int?
    let acceptanceTimeoutSeconds: Swift.Int?
    let acceptanceRequired: Swift.Bool?
    let ruleSetName: Swift.String?
    let notificationTarget: Swift.String?
    let additionalPlayerCount: Swift.Int?
    let customEventData: Swift.String?
    let gameProperties: [GameLiftClientTypes.GameProperty]?
    let gameSessionData: Swift.String?
    let backfillMode: GameLiftClientTypes.BackfillMode?
    let flexMatchMode: GameLiftClientTypes.FlexMatchMode?
}

extension UpdateMatchmakingConfigurationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case acceptanceRequired = "AcceptanceRequired"
        case acceptanceTimeoutSeconds = "AcceptanceTimeoutSeconds"
        case additionalPlayerCount = "AdditionalPlayerCount"
        case backfillMode = "BackfillMode"
        case customEventData = "CustomEventData"
        case description = "Description"
        case flexMatchMode = "FlexMatchMode"
        case gameProperties = "GameProperties"
        case gameSessionData = "GameSessionData"
        case gameSessionQueueArns = "GameSessionQueueArns"
        case name = "Name"
        case notificationTarget = "NotificationTarget"
        case requestTimeoutSeconds = "RequestTimeoutSeconds"
        case ruleSetName = "RuleSetName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let gameSessionQueueArnsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .gameSessionQueueArns)
        var gameSessionQueueArnsDecoded0:[Swift.String]? = nil
        if let gameSessionQueueArnsContainer = gameSessionQueueArnsContainer {
            gameSessionQueueArnsDecoded0 = [Swift.String]()
            for string0 in gameSessionQueueArnsContainer {
                if let string0 = string0 {
                    gameSessionQueueArnsDecoded0?.append(string0)
                }
            }
        }
        gameSessionQueueArns = gameSessionQueueArnsDecoded0
        let requestTimeoutSecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .requestTimeoutSeconds)
        requestTimeoutSeconds = requestTimeoutSecondsDecoded
        let acceptanceTimeoutSecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .acceptanceTimeoutSeconds)
        acceptanceTimeoutSeconds = acceptanceTimeoutSecondsDecoded
        let acceptanceRequiredDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .acceptanceRequired)
        acceptanceRequired = acceptanceRequiredDecoded
        let ruleSetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ruleSetName)
        ruleSetName = ruleSetNameDecoded
        let notificationTargetDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .notificationTarget)
        notificationTarget = notificationTargetDecoded
        let additionalPlayerCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .additionalPlayerCount)
        additionalPlayerCount = additionalPlayerCountDecoded
        let customEventDataDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .customEventData)
        customEventData = customEventDataDecoded
        let gamePropertiesContainer = try containerValues.decodeIfPresent([GameLiftClientTypes.GameProperty?].self, forKey: .gameProperties)
        var gamePropertiesDecoded0:[GameLiftClientTypes.GameProperty]? = nil
        if let gamePropertiesContainer = gamePropertiesContainer {
            gamePropertiesDecoded0 = [GameLiftClientTypes.GameProperty]()
            for structure0 in gamePropertiesContainer {
                if let structure0 = structure0 {
                    gamePropertiesDecoded0?.append(structure0)
                }
            }
        }
        gameProperties = gamePropertiesDecoded0
        let gameSessionDataDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .gameSessionData)
        gameSessionData = gameSessionDataDecoded
        let backfillModeDecoded = try containerValues.decodeIfPresent(GameLiftClientTypes.BackfillMode.self, forKey: .backfillMode)
        backfillMode = backfillModeDecoded
        let flexMatchModeDecoded = try containerValues.decodeIfPresent(GameLiftClientTypes.FlexMatchMode.self, forKey: .flexMatchMode)
        flexMatchMode = flexMatchModeDecoded
    }
}
