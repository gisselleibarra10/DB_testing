// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension GameLiftClientTypes.MatchmakingConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case acceptanceRequired = "AcceptanceRequired"
        case acceptanceTimeoutSeconds = "AcceptanceTimeoutSeconds"
        case additionalPlayerCount = "AdditionalPlayerCount"
        case backfillMode = "BackfillMode"
        case configurationArn = "ConfigurationArn"
        case creationTime = "CreationTime"
        case customEventData = "CustomEventData"
        case description = "Description"
        case flexMatchMode = "FlexMatchMode"
        case gameProperties = "GameProperties"
        case gameSessionData = "GameSessionData"
        case gameSessionQueueArns = "GameSessionQueueArns"
        case name = "Name"
        case notificationTarget = "NotificationTarget"
        case requestTimeoutSeconds = "RequestTimeoutSeconds"
        case ruleSetArn = "RuleSetArn"
        case ruleSetName = "RuleSetName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let acceptanceRequired = self.acceptanceRequired {
            try encodeContainer.encode(acceptanceRequired, forKey: .acceptanceRequired)
        }
        if let acceptanceTimeoutSeconds = self.acceptanceTimeoutSeconds {
            try encodeContainer.encode(acceptanceTimeoutSeconds, forKey: .acceptanceTimeoutSeconds)
        }
        if let additionalPlayerCount = self.additionalPlayerCount {
            try encodeContainer.encode(additionalPlayerCount, forKey: .additionalPlayerCount)
        }
        if let backfillMode = self.backfillMode {
            try encodeContainer.encode(backfillMode.rawValue, forKey: .backfillMode)
        }
        if let configurationArn = self.configurationArn {
            try encodeContainer.encode(configurationArn, forKey: .configurationArn)
        }
        if let creationTime = self.creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let customEventData = self.customEventData {
            try encodeContainer.encode(customEventData, forKey: .customEventData)
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let flexMatchMode = self.flexMatchMode {
            try encodeContainer.encode(flexMatchMode.rawValue, forKey: .flexMatchMode)
        }
        if let gameProperties = gameProperties {
            var gamePropertiesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .gameProperties)
            for gamepropertylist0 in gameProperties {
                try gamePropertiesContainer.encode(gamepropertylist0)
            }
        }
        if let gameSessionData = self.gameSessionData {
            try encodeContainer.encode(gameSessionData, forKey: .gameSessionData)
        }
        if let gameSessionQueueArns = gameSessionQueueArns {
            var gameSessionQueueArnsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .gameSessionQueueArns)
            for queuearnslist0 in gameSessionQueueArns {
                try gameSessionQueueArnsContainer.encode(queuearnslist0)
            }
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let notificationTarget = self.notificationTarget {
            try encodeContainer.encode(notificationTarget, forKey: .notificationTarget)
        }
        if let requestTimeoutSeconds = self.requestTimeoutSeconds {
            try encodeContainer.encode(requestTimeoutSeconds, forKey: .requestTimeoutSeconds)
        }
        if let ruleSetArn = self.ruleSetArn {
            try encodeContainer.encode(ruleSetArn, forKey: .ruleSetArn)
        }
        if let ruleSetName = self.ruleSetName {
            try encodeContainer.encode(ruleSetName, forKey: .ruleSetName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let configurationArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .configurationArn)
        configurationArn = configurationArnDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let gameSessionQueueArnsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .gameSessionQueueArns)
        var gameSessionQueueArnsDecoded0:[Swift.String]? = nil
        if let gameSessionQueueArnsContainer = gameSessionQueueArnsContainer {
            gameSessionQueueArnsDecoded0 = [Swift.String]()
            for string0 in gameSessionQueueArnsContainer {
                if let string0 = string0 {
                    gameSessionQueueArnsDecoded0?.append(string0)
                }
            }
        }
        gameSessionQueueArns = gameSessionQueueArnsDecoded0
        let requestTimeoutSecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .requestTimeoutSeconds)
        requestTimeoutSeconds = requestTimeoutSecondsDecoded
        let acceptanceTimeoutSecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .acceptanceTimeoutSeconds)
        acceptanceTimeoutSeconds = acceptanceTimeoutSecondsDecoded
        let acceptanceRequiredDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .acceptanceRequired)
        acceptanceRequired = acceptanceRequiredDecoded
        let ruleSetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ruleSetName)
        ruleSetName = ruleSetNameDecoded
        let ruleSetArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ruleSetArn)
        ruleSetArn = ruleSetArnDecoded
        let notificationTargetDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .notificationTarget)
        notificationTarget = notificationTargetDecoded
        let additionalPlayerCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .additionalPlayerCount)
        additionalPlayerCount = additionalPlayerCountDecoded
        let customEventDataDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .customEventData)
        customEventData = customEventDataDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let gamePropertiesContainer = try containerValues.decodeIfPresent([GameLiftClientTypes.GameProperty?].self, forKey: .gameProperties)
        var gamePropertiesDecoded0:[GameLiftClientTypes.GameProperty]? = nil
        if let gamePropertiesContainer = gamePropertiesContainer {
            gamePropertiesDecoded0 = [GameLiftClientTypes.GameProperty]()
            for structure0 in gamePropertiesContainer {
                if let structure0 = structure0 {
                    gamePropertiesDecoded0?.append(structure0)
                }
            }
        }
        gameProperties = gamePropertiesDecoded0
        let gameSessionDataDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .gameSessionData)
        gameSessionData = gameSessionDataDecoded
        let backfillModeDecoded = try containerValues.decodeIfPresent(GameLiftClientTypes.BackfillMode.self, forKey: .backfillMode)
        backfillMode = backfillModeDecoded
        let flexMatchModeDecoded = try containerValues.decodeIfPresent(GameLiftClientTypes.FlexMatchMode.self, forKey: .flexMatchMode)
        flexMatchMode = flexMatchModeDecoded
    }
}
