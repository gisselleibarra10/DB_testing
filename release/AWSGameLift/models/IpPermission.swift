// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension GameLiftClientTypes {
    /// A range of IP addresses and port settings that allow inbound traffic to connect to server processes on an instance in a fleet. New game sessions are assigned an IP address/port number combination, which must fall into the fleet's allowed ranges. Fleets with custom game builds must have permissions explicitly set. For Realtime Servers fleets, GameLift automatically opens two port ranges, one for TCP messaging and one for UDP. Related actions [DescribeFleetPortSettings]
    public struct IpPermission: Swift.Equatable {
        /// A starting value for a range of allowed port numbers. For fleets using Windows and Linux builds, only ports 1026-60000 are valid.
        /// This member is required.
        public var fromPort: Swift.Int?
        /// A range of allowed IP addresses. This value must be expressed in CIDR notation. Example: "000.000.000.000/[subnet mask]" or optionally the shortened version "0.0.0.0/[subnet mask]".
        /// This member is required.
        public var ipRange: Swift.String?
        /// The network communication protocol used by the fleet.
        /// This member is required.
        public var `protocol`: GameLiftClientTypes.IpProtocol?
        /// An ending value for a range of allowed port numbers. Port numbers are end-inclusive. This value must be higher than FromPort. For fleets using Windows and Linux builds, only ports 1026-60000 are valid.
        /// This member is required.
        public var toPort: Swift.Int?

        public init (
            fromPort: Swift.Int? = nil,
            ipRange: Swift.String? = nil,
            `protocol`: GameLiftClientTypes.IpProtocol? = nil,
            toPort: Swift.Int? = nil
        )
        {
            self.fromPort = fromPort
            self.ipRange = ipRange
            self.`protocol` = `protocol`
            self.toPort = toPort
        }
    }

}
