// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension GameLiftClientTypes.GameServerGroup: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case autoScalingGroupArn = "AutoScalingGroupArn"
        case balancingStrategy = "BalancingStrategy"
        case creationTime = "CreationTime"
        case gameServerGroupArn = "GameServerGroupArn"
        case gameServerGroupName = "GameServerGroupName"
        case gameServerProtectionPolicy = "GameServerProtectionPolicy"
        case instanceDefinitions = "InstanceDefinitions"
        case lastUpdatedTime = "LastUpdatedTime"
        case roleArn = "RoleArn"
        case status = "Status"
        case statusReason = "StatusReason"
        case suspendedActions = "SuspendedActions"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let autoScalingGroupArn = self.autoScalingGroupArn {
            try encodeContainer.encode(autoScalingGroupArn, forKey: .autoScalingGroupArn)
        }
        if let balancingStrategy = self.balancingStrategy {
            try encodeContainer.encode(balancingStrategy.rawValue, forKey: .balancingStrategy)
        }
        if let creationTime = self.creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let gameServerGroupArn = self.gameServerGroupArn {
            try encodeContainer.encode(gameServerGroupArn, forKey: .gameServerGroupArn)
        }
        if let gameServerGroupName = self.gameServerGroupName {
            try encodeContainer.encode(gameServerGroupName, forKey: .gameServerGroupName)
        }
        if let gameServerProtectionPolicy = self.gameServerProtectionPolicy {
            try encodeContainer.encode(gameServerProtectionPolicy.rawValue, forKey: .gameServerProtectionPolicy)
        }
        if let instanceDefinitions = instanceDefinitions {
            var instanceDefinitionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .instanceDefinitions)
            for instancedefinitions0 in instanceDefinitions {
                try instanceDefinitionsContainer.encode(instancedefinitions0)
            }
        }
        if let lastUpdatedTime = self.lastUpdatedTime {
            try encodeContainer.encode(lastUpdatedTime.timeIntervalSince1970, forKey: .lastUpdatedTime)
        }
        if let roleArn = self.roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let statusReason = self.statusReason {
            try encodeContainer.encode(statusReason, forKey: .statusReason)
        }
        if let suspendedActions = suspendedActions {
            var suspendedActionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .suspendedActions)
            for gameservergroupactions0 in suspendedActions {
                try suspendedActionsContainer.encode(gameservergroupactions0.rawValue)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let gameServerGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .gameServerGroupName)
        gameServerGroupName = gameServerGroupNameDecoded
        let gameServerGroupArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .gameServerGroupArn)
        gameServerGroupArn = gameServerGroupArnDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let instanceDefinitionsContainer = try containerValues.decodeIfPresent([GameLiftClientTypes.InstanceDefinition?].self, forKey: .instanceDefinitions)
        var instanceDefinitionsDecoded0:[GameLiftClientTypes.InstanceDefinition]? = nil
        if let instanceDefinitionsContainer = instanceDefinitionsContainer {
            instanceDefinitionsDecoded0 = [GameLiftClientTypes.InstanceDefinition]()
            for structure0 in instanceDefinitionsContainer {
                if let structure0 = structure0 {
                    instanceDefinitionsDecoded0?.append(structure0)
                }
            }
        }
        instanceDefinitions = instanceDefinitionsDecoded0
        let balancingStrategyDecoded = try containerValues.decodeIfPresent(GameLiftClientTypes.BalancingStrategy.self, forKey: .balancingStrategy)
        balancingStrategy = balancingStrategyDecoded
        let gameServerProtectionPolicyDecoded = try containerValues.decodeIfPresent(GameLiftClientTypes.GameServerProtectionPolicy.self, forKey: .gameServerProtectionPolicy)
        gameServerProtectionPolicy = gameServerProtectionPolicyDecoded
        let autoScalingGroupArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .autoScalingGroupArn)
        autoScalingGroupArn = autoScalingGroupArnDecoded
        let statusDecoded = try containerValues.decodeIfPresent(GameLiftClientTypes.GameServerGroupStatus.self, forKey: .status)
        status = statusDecoded
        let statusReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .statusReason)
        statusReason = statusReasonDecoded
        let suspendedActionsContainer = try containerValues.decodeIfPresent([GameLiftClientTypes.GameServerGroupAction?].self, forKey: .suspendedActions)
        var suspendedActionsDecoded0:[GameLiftClientTypes.GameServerGroupAction]? = nil
        if let suspendedActionsContainer = suspendedActionsContainer {
            suspendedActionsDecoded0 = [GameLiftClientTypes.GameServerGroupAction]()
            for string0 in suspendedActionsContainer {
                if let string0 = string0 {
                    suspendedActionsDecoded0?.append(string0)
                }
            }
        }
        suspendedActions = suspendedActionsDecoded0
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let lastUpdatedTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastUpdatedTime)
        lastUpdatedTime = lastUpdatedTimeDecoded
    }
}
