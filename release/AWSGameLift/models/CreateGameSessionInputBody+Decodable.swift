// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateGameSessionInputBody: Swift.Equatable {
    let fleetId: Swift.String?
    let aliasId: Swift.String?
    let maximumPlayerSessionCount: Swift.Int?
    let name: Swift.String?
    let gameProperties: [GameLiftClientTypes.GameProperty]?
    let creatorId: Swift.String?
    let gameSessionId: Swift.String?
    let idempotencyToken: Swift.String?
    let gameSessionData: Swift.String?
    let location: Swift.String?
}

extension CreateGameSessionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case aliasId = "AliasId"
        case creatorId = "CreatorId"
        case fleetId = "FleetId"
        case gameProperties = "GameProperties"
        case gameSessionData = "GameSessionData"
        case gameSessionId = "GameSessionId"
        case idempotencyToken = "IdempotencyToken"
        case location = "Location"
        case maximumPlayerSessionCount = "MaximumPlayerSessionCount"
        case name = "Name"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fleetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fleetId)
        fleetId = fleetIdDecoded
        let aliasIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .aliasId)
        aliasId = aliasIdDecoded
        let maximumPlayerSessionCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maximumPlayerSessionCount)
        maximumPlayerSessionCount = maximumPlayerSessionCountDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let gamePropertiesContainer = try containerValues.decodeIfPresent([GameLiftClientTypes.GameProperty?].self, forKey: .gameProperties)
        var gamePropertiesDecoded0:[GameLiftClientTypes.GameProperty]? = nil
        if let gamePropertiesContainer = gamePropertiesContainer {
            gamePropertiesDecoded0 = [GameLiftClientTypes.GameProperty]()
            for structure0 in gamePropertiesContainer {
                if let structure0 = structure0 {
                    gamePropertiesDecoded0?.append(structure0)
                }
            }
        }
        gameProperties = gamePropertiesDecoded0
        let creatorIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .creatorId)
        creatorId = creatorIdDecoded
        let gameSessionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .gameSessionId)
        gameSessionId = gameSessionIdDecoded
        let idempotencyTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .idempotencyToken)
        idempotencyToken = idempotencyTokenDecoded
        let gameSessionDataDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .gameSessionData)
        gameSessionData = gameSessionDataDecoded
        let locationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .location)
        location = locationDecoded
    }
}
