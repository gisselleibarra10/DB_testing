// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// Represents the input for a request operation.
public struct UpdateGameSessionQueueInput: Swift.Equatable {
    /// Information to be added to all events that are related to this game session queue.
    public var customEventData: Swift.String?
    /// A list of fleets and/or fleet aliases that can be used to fulfill game session placement requests in the queue. Destinations are identified by either a fleet ARN or a fleet alias ARN, and are listed in order of placement preference. When updating this list, provide a complete list of destinations.
    public var destinations: [GameLiftClientTypes.GameSessionQueueDestination]?
    /// A list of locations where a queue is allowed to place new game sessions. Locations are specified in the form of Amazon Web Services Region codes, such as us-west-2. If this parameter is not set, game sessions can be placed in any queue location. To remove an existing filter configuration, pass in an empty set.
    public var filterConfiguration: GameLiftClientTypes.FilterConfiguration?
    /// A descriptive label that is associated with game session queue. Queue names must be unique within each Region. You can use either the queue ID or ARN value.
    /// This member is required.
    public var name: Swift.String?
    /// An SNS topic ARN that is set up to receive game session placement notifications. See [ Setting up notifications for game session placement](https://docs.aws.amazon.com/gamelift/latest/developerguide/queue-notification.html).
    public var notificationTarget: Swift.String?
    /// A set of policies that act as a sliding cap on player latency. FleetIQ works to deliver low latency for most players in a game session. These policies ensure that no individual player can be placed into a game with unreasonably high latency. Use multiple policies to gradually relax latency requirements a step at a time. Multiple policies are applied based on their maximum allowed latency, starting with the lowest value. When updating policies, provide a complete collection of policies.
    public var playerLatencyPolicies: [GameLiftClientTypes.PlayerLatencyPolicy]?
    /// Custom settings to use when prioritizing destinations and locations for game session placements. This configuration replaces the FleetIQ default prioritization process. Priority types that are not explicitly named will be automatically applied at the end of the prioritization process. To remove an existing priority configuration, pass in an empty set.
    public var priorityConfiguration: GameLiftClientTypes.PriorityConfiguration?
    /// The maximum time, in seconds, that a new game session placement request remains in the queue. When a request exceeds this time, the game session placement changes to a TIMED_OUT status.
    public var timeoutInSeconds: Swift.Int?

    public init (
        customEventData: Swift.String? = nil,
        destinations: [GameLiftClientTypes.GameSessionQueueDestination]? = nil,
        filterConfiguration: GameLiftClientTypes.FilterConfiguration? = nil,
        name: Swift.String? = nil,
        notificationTarget: Swift.String? = nil,
        playerLatencyPolicies: [GameLiftClientTypes.PlayerLatencyPolicy]? = nil,
        priorityConfiguration: GameLiftClientTypes.PriorityConfiguration? = nil,
        timeoutInSeconds: Swift.Int? = nil
    )
    {
        self.customEventData = customEventData
        self.destinations = destinations
        self.filterConfiguration = filterConfiguration
        self.name = name
        self.notificationTarget = notificationTarget
        self.playerLatencyPolicies = playerLatencyPolicies
        self.priorityConfiguration = priorityConfiguration
        self.timeoutInSeconds = timeoutInSeconds
    }
}
