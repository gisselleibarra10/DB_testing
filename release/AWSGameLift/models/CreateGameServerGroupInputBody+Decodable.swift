// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateGameServerGroupInputBody: Swift.Equatable {
    let gameServerGroupName: Swift.String?
    let roleArn: Swift.String?
    let minSize: Swift.Int?
    let maxSize: Swift.Int?
    let launchTemplate: GameLiftClientTypes.LaunchTemplateSpecification?
    let instanceDefinitions: [GameLiftClientTypes.InstanceDefinition]?
    let autoScalingPolicy: GameLiftClientTypes.GameServerGroupAutoScalingPolicy?
    let balancingStrategy: GameLiftClientTypes.BalancingStrategy?
    let gameServerProtectionPolicy: GameLiftClientTypes.GameServerProtectionPolicy?
    let vpcSubnets: [Swift.String]?
    let tags: [GameLiftClientTypes.Tag]?
}

extension CreateGameServerGroupInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case autoScalingPolicy = "AutoScalingPolicy"
        case balancingStrategy = "BalancingStrategy"
        case gameServerGroupName = "GameServerGroupName"
        case gameServerProtectionPolicy = "GameServerProtectionPolicy"
        case instanceDefinitions = "InstanceDefinitions"
        case launchTemplate = "LaunchTemplate"
        case maxSize = "MaxSize"
        case minSize = "MinSize"
        case roleArn = "RoleArn"
        case tags = "Tags"
        case vpcSubnets = "VpcSubnets"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let gameServerGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .gameServerGroupName)
        gameServerGroupName = gameServerGroupNameDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let minSizeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .minSize)
        minSize = minSizeDecoded
        let maxSizeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxSize)
        maxSize = maxSizeDecoded
        let launchTemplateDecoded = try containerValues.decodeIfPresent(GameLiftClientTypes.LaunchTemplateSpecification.self, forKey: .launchTemplate)
        launchTemplate = launchTemplateDecoded
        let instanceDefinitionsContainer = try containerValues.decodeIfPresent([GameLiftClientTypes.InstanceDefinition?].self, forKey: .instanceDefinitions)
        var instanceDefinitionsDecoded0:[GameLiftClientTypes.InstanceDefinition]? = nil
        if let instanceDefinitionsContainer = instanceDefinitionsContainer {
            instanceDefinitionsDecoded0 = [GameLiftClientTypes.InstanceDefinition]()
            for structure0 in instanceDefinitionsContainer {
                if let structure0 = structure0 {
                    instanceDefinitionsDecoded0?.append(structure0)
                }
            }
        }
        instanceDefinitions = instanceDefinitionsDecoded0
        let autoScalingPolicyDecoded = try containerValues.decodeIfPresent(GameLiftClientTypes.GameServerGroupAutoScalingPolicy.self, forKey: .autoScalingPolicy)
        autoScalingPolicy = autoScalingPolicyDecoded
        let balancingStrategyDecoded = try containerValues.decodeIfPresent(GameLiftClientTypes.BalancingStrategy.self, forKey: .balancingStrategy)
        balancingStrategy = balancingStrategyDecoded
        let gameServerProtectionPolicyDecoded = try containerValues.decodeIfPresent(GameLiftClientTypes.GameServerProtectionPolicy.self, forKey: .gameServerProtectionPolicy)
        gameServerProtectionPolicy = gameServerProtectionPolicyDecoded
        let vpcSubnetsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .vpcSubnets)
        var vpcSubnetsDecoded0:[Swift.String]? = nil
        if let vpcSubnetsContainer = vpcSubnetsContainer {
            vpcSubnetsDecoded0 = [Swift.String]()
            for string0 in vpcSubnetsContainer {
                if let string0 = string0 {
                    vpcSubnetsDecoded0?.append(string0)
                }
            }
        }
        vpcSubnets = vpcSubnetsDecoded0
        let tagsContainer = try containerValues.decodeIfPresent([GameLiftClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[GameLiftClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [GameLiftClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}
