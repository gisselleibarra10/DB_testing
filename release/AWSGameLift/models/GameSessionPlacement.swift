// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension GameLiftClientTypes {
    /// Object that describes a [StartGameSessionPlacement] request. This object includes the full details of the original request plus the current status and start/end time stamps. Game session placement-related operations include:
    ///
    /// * [StartGameSessionPlacement]
    ///
    /// * [DescribeGameSessionPlacement]
    ///
    /// * [StopGameSessionPlacement]
    public struct GameSessionPlacement: Swift.Equatable {
        /// The DNS identifier assigned to the instance that is running the game session. Values have the following format:
        ///
        /// * TLS-enabled fleets: ..amazongamelift.com.
        ///
        /// * Non-TLS-enabled fleets: ec2-.compute.amazonaws.com. (See [Amazon EC2 Instance IP Addressing](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-instance-addressing.html#concepts-public-addresses).)
        ///
        ///
        /// When connecting to a game session that is running on a TLS-enabled fleet, you must use the DNS name, not the IP address.
        public var dnsName: Swift.String?
        /// Time stamp indicating when this request was completed, canceled, or timed out.
        public var endTime: ClientRuntime.Date?
        /// A set of custom properties for a game session, formatted as key:value pairs. These properties are passed to a game server process in the [GameSession] object with a request to start a new game session (see [Start a Game Session](https://docs.aws.amazon.com/gamelift/latest/developerguide/gamelift-sdk-server-api.html#gamelift-sdk-server-startsession)).
        public var gameProperties: [GameLiftClientTypes.GameProperty]?
        /// Identifier for the game session created by this placement request. This value is set once the new game session is placed (placement status is FULFILLED). This identifier is unique across all Regions. You can use this value as a GameSessionId value as needed.
        public var gameSessionArn: Swift.String?
        /// A set of custom game session properties, formatted as a single string value. This data is passed to a game server process in the [GameSession] object with a request to start a new game session (see [Start a Game Session](https://docs.aws.amazon.com/gamelift/latest/developerguide/gamelift-sdk-server-api.html#gamelift-sdk-server-startsession)).
        public var gameSessionData: Swift.String?
        /// A unique identifier for the game session. This value is set once the new game session is placed (placement status is FULFILLED).
        public var gameSessionId: Swift.String?
        /// A descriptive label that is associated with a game session. Session names do not need to be unique.
        public var gameSessionName: Swift.String?
        /// A descriptive label that is associated with game session queue. Queue names must be unique within each Region.
        public var gameSessionQueueName: Swift.String?
        /// Name of the Region where the game session created by this placement request is running. This value is set once the new game session is placed (placement status is FULFILLED).
        public var gameSessionRegion: Swift.String?
        /// The IP address of the game session. To connect to a GameLift game server, an app needs both the IP address and port number. This value is set once the new game session is placed (placement status is FULFILLED).
        public var ipAddress: Swift.String?
        /// Information on the matchmaking process for this game. Data is in JSON syntax, formatted as a string. It identifies the matchmaking configuration used to create the match, and contains data on all players assigned to the match, including player attributes and team assignments. For more details on matchmaker data, see [Match Data](https://docs.aws.amazon.com/gamelift/latest/flexmatchguide/match-server.html#match-server-data).
        public var matchmakerData: Swift.String?
        /// The maximum number of players that can be connected simultaneously to the game session.
        public var maximumPlayerSessionCount: Swift.Int?
        /// A collection of information on player sessions created in response to the game session placement request. These player sessions are created only once a new game session is successfully placed (placement status is FULFILLED). This information includes the player ID (as provided in the placement request) and the corresponding player session ID. Retrieve full player sessions by calling [DescribePlayerSessions] with the player session ID.
        public var placedPlayerSessions: [GameLiftClientTypes.PlacedPlayerSession]?
        /// A unique identifier for a game session placement.
        public var placementId: Swift.String?
        /// A set of values, expressed in milliseconds, that indicates the amount of latency that a player experiences when connected to @aws; Regions.
        public var playerLatencies: [GameLiftClientTypes.PlayerLatency]?
        /// The port number for the game session. To connect to a GameLift game server, an app needs both the IP address and port number. This value is set once the new game session is placed (placement status is FULFILLED).
        public var port: Swift.Int?
        /// Time stamp indicating when this request was placed in the queue. Format is a number expressed in Unix time as milliseconds (for example "1469498468.057").
        public var startTime: ClientRuntime.Date?
        /// Current status of the game session placement request.
        ///
        /// * PENDING -- The placement request is currently in the queue waiting to be processed.
        ///
        /// * FULFILLED -- A new game session and player sessions (if requested) have been successfully created. Values for GameSessionArn and GameSessionRegion are available.
        ///
        /// * CANCELLED -- The placement request was canceled with a call to [StopGameSessionPlacement].
        ///
        /// * TIMED_OUT -- A new game session was not successfully created before the time limit expired. You can resubmit the placement request as needed.
        ///
        /// * FAILED -- GameLift is not able to complete the process of placing the game session. Common reasons are the game session terminated before the placement process was completed, or an unexpected internal error.
        public var status: GameLiftClientTypes.GameSessionPlacementState?

        public init (
            dnsName: Swift.String? = nil,
            endTime: ClientRuntime.Date? = nil,
            gameProperties: [GameLiftClientTypes.GameProperty]? = nil,
            gameSessionArn: Swift.String? = nil,
            gameSessionData: Swift.String? = nil,
            gameSessionId: Swift.String? = nil,
            gameSessionName: Swift.String? = nil,
            gameSessionQueueName: Swift.String? = nil,
            gameSessionRegion: Swift.String? = nil,
            ipAddress: Swift.String? = nil,
            matchmakerData: Swift.String? = nil,
            maximumPlayerSessionCount: Swift.Int? = nil,
            placedPlayerSessions: [GameLiftClientTypes.PlacedPlayerSession]? = nil,
            placementId: Swift.String? = nil,
            playerLatencies: [GameLiftClientTypes.PlayerLatency]? = nil,
            port: Swift.Int? = nil,
            startTime: ClientRuntime.Date? = nil,
            status: GameLiftClientTypes.GameSessionPlacementState? = nil
        )
        {
            self.dnsName = dnsName
            self.endTime = endTime
            self.gameProperties = gameProperties
            self.gameSessionArn = gameSessionArn
            self.gameSessionData = gameSessionData
            self.gameSessionId = gameSessionId
            self.gameSessionName = gameSessionName
            self.gameSessionQueueName = gameSessionQueueName
            self.gameSessionRegion = gameSessionRegion
            self.ipAddress = ipAddress
            self.matchmakerData = matchmakerData
            self.maximumPlayerSessionCount = maximumPlayerSessionCount
            self.placedPlayerSessions = placedPlayerSessions
            self.placementId = placementId
            self.playerLatencies = playerLatencies
            self.port = port
            self.startTime = startTime
            self.status = status
        }
    }

}
