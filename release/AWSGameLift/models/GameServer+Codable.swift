// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension GameLiftClientTypes.GameServer: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case claimStatus = "ClaimStatus"
        case connectionInfo = "ConnectionInfo"
        case gameServerData = "GameServerData"
        case gameServerGroupArn = "GameServerGroupArn"
        case gameServerGroupName = "GameServerGroupName"
        case gameServerId = "GameServerId"
        case instanceId = "InstanceId"
        case lastClaimTime = "LastClaimTime"
        case lastHealthCheckTime = "LastHealthCheckTime"
        case registrationTime = "RegistrationTime"
        case utilizationStatus = "UtilizationStatus"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let claimStatus = self.claimStatus {
            try encodeContainer.encode(claimStatus.rawValue, forKey: .claimStatus)
        }
        if let connectionInfo = self.connectionInfo {
            try encodeContainer.encode(connectionInfo, forKey: .connectionInfo)
        }
        if let gameServerData = self.gameServerData {
            try encodeContainer.encode(gameServerData, forKey: .gameServerData)
        }
        if let gameServerGroupArn = self.gameServerGroupArn {
            try encodeContainer.encode(gameServerGroupArn, forKey: .gameServerGroupArn)
        }
        if let gameServerGroupName = self.gameServerGroupName {
            try encodeContainer.encode(gameServerGroupName, forKey: .gameServerGroupName)
        }
        if let gameServerId = self.gameServerId {
            try encodeContainer.encode(gameServerId, forKey: .gameServerId)
        }
        if let instanceId = self.instanceId {
            try encodeContainer.encode(instanceId, forKey: .instanceId)
        }
        if let lastClaimTime = self.lastClaimTime {
            try encodeContainer.encode(lastClaimTime.timeIntervalSince1970, forKey: .lastClaimTime)
        }
        if let lastHealthCheckTime = self.lastHealthCheckTime {
            try encodeContainer.encode(lastHealthCheckTime.timeIntervalSince1970, forKey: .lastHealthCheckTime)
        }
        if let registrationTime = self.registrationTime {
            try encodeContainer.encode(registrationTime.timeIntervalSince1970, forKey: .registrationTime)
        }
        if let utilizationStatus = self.utilizationStatus {
            try encodeContainer.encode(utilizationStatus.rawValue, forKey: .utilizationStatus)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let gameServerGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .gameServerGroupName)
        gameServerGroupName = gameServerGroupNameDecoded
        let gameServerGroupArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .gameServerGroupArn)
        gameServerGroupArn = gameServerGroupArnDecoded
        let gameServerIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .gameServerId)
        gameServerId = gameServerIdDecoded
        let instanceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceId)
        instanceId = instanceIdDecoded
        let connectionInfoDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .connectionInfo)
        connectionInfo = connectionInfoDecoded
        let gameServerDataDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .gameServerData)
        gameServerData = gameServerDataDecoded
        let claimStatusDecoded = try containerValues.decodeIfPresent(GameLiftClientTypes.GameServerClaimStatus.self, forKey: .claimStatus)
        claimStatus = claimStatusDecoded
        let utilizationStatusDecoded = try containerValues.decodeIfPresent(GameLiftClientTypes.GameServerUtilizationStatus.self, forKey: .utilizationStatus)
        utilizationStatus = utilizationStatusDecoded
        let registrationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .registrationTime)
        registrationTime = registrationTimeDecoded
        let lastClaimTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastClaimTime)
        lastClaimTime = lastClaimTimeDecoded
        let lastHealthCheckTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastHealthCheckTime)
        lastHealthCheckTime = lastHealthCheckTimeDecoded
    }
}
