// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct CreateScriptInput: Swift.Equatable {
    /// A descriptive label that is associated with a script. Script names do not need to be unique. You can use [UpdateScript] to change this value later.
    public var name: Swift.String?
    /// The location of the Amazon S3 bucket where a zipped file containing your Realtime scripts is stored. The storage location must specify the Amazon S3 bucket name, the zip file name (the "key"), and a role ARN that allows Amazon GameLift to access the Amazon S3 storage location. The S3 bucket must be in the same Region where you want to create a new script. By default, Amazon GameLift uploads the latest version of the zip file; if you have S3 object versioning turned on, you can use the ObjectVersion parameter to specify an earlier version.
    public var storageLocation: GameLiftClientTypes.S3Location?
    /// A list of labels to assign to the new script resource. Tags are developer-defined key-value pairs. Tagging Amazon Web Services resources are useful for resource management, access management and cost allocation. For more information, see [ Tagging Amazon Web Services Resources](https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html) in the Amazon Web Services General Reference. Once the resource is created, you can use [TagResource], [UntagResource], and [ListTagsForResource] to add, remove, and view tags. The maximum tag limit may be lower than stated. See the Amazon Web Services General Reference for actual tagging limits.
    public var tags: [GameLiftClientTypes.Tag]?
    /// Version information that is associated with a build or script. Version strings do not need to be unique. You can use [UpdateScript] to change this value later.
    public var version: Swift.String?
    /// A data object containing your Realtime scripts and dependencies as a zip file. The zip file can have one or multiple files. Maximum size of a zip file is 5 MB. When using the Amazon Web Services CLI tool to create a script, this parameter is set to the zip file name. It must be prepended with the string "fileb://" to indicate that the file data is a binary object. For example: --zip-file fileb://myRealtimeScript.zip.
    public var zipFile: ClientRuntime.Data?

    public init (
        name: Swift.String? = nil,
        storageLocation: GameLiftClientTypes.S3Location? = nil,
        tags: [GameLiftClientTypes.Tag]? = nil,
        version: Swift.String? = nil,
        zipFile: ClientRuntime.Data? = nil
    )
    {
        self.name = name
        self.storageLocation = storageLocation
        self.tags = tags
        self.version = version
        self.zipFile = zipFile
    }
}
