// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension GameLiftClientTypes {
    /// Properties describing a game session. A game session in ACTIVE status can host players. When a game session ends, its status is set to TERMINATED. Once the session ends, the game session object is retained for 30 days. This means you can reuse idempotency token values after this time. Game session logs are retained for 14 days. Related actions [CreateGameSession] | [DescribeGameSessions] | [DescribeGameSessionDetails] | [SearchGameSessions] | [UpdateGameSession] | [GetGameSessionLogUrl] | [StartGameSessionPlacement] | [DescribeGameSessionPlacement] | [StopGameSessionPlacement] | [All APIs by task](https://docs.aws.amazon.com/gamelift/latest/developerguide/reference-awssdk.html#reference-awssdk-resources-fleets)
    public struct GameSession: Swift.Equatable {
        /// A time stamp indicating when this data object was created. Format is a number expressed in Unix time as milliseconds (for example "1469498468.057").
        public var creationTime: ClientRuntime.Date?
        /// A unique identifier for a player. This ID is used to enforce a resource protection policy (if one exists), that limits the number of game sessions a player can create.
        public var creatorId: Swift.String?
        /// Number of players currently in the game session.
        public var currentPlayerSessionCount: Swift.Int?
        /// The DNS identifier assigned to the instance that is running the game session. Values have the following format:
        ///
        /// * TLS-enabled fleets: ..amazongamelift.com.
        ///
        /// * Non-TLS-enabled fleets: ec2-.compute.amazonaws.com. (See [Amazon EC2 Instance IP Addressing](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-instance-addressing.html#concepts-public-addresses).)
        ///
        ///
        /// When connecting to a game session that is running on a TLS-enabled fleet, you must use the DNS name, not the IP address.
        public var dnsName: Swift.String?
        /// The Amazon Resource Name ([ARN](https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html)) associated with the GameLift fleet that this game session is running on.
        public var fleetArn: Swift.String?
        /// A unique identifier for the fleet that the game session is running on.
        public var fleetId: Swift.String?
        /// A set of custom properties for a game session, formatted as key:value pairs. These properties are passed to a game server process in the [GameSession] object with a request to start a new game session (see [Start a Game Session](https://docs.aws.amazon.com/gamelift/latest/developerguide/gamelift-sdk-server-api.html#gamelift-sdk-server-startsession)). You can search for active game sessions based on this custom data with [SearchGameSessions].
        public var gameProperties: [GameLiftClientTypes.GameProperty]?
        /// A set of custom game session properties, formatted as a single string value. This data is passed to a game server process in the [GameSession] object with a request to start a new game session (see [Start a Game Session](https://docs.aws.amazon.com/gamelift/latest/developerguide/gamelift-sdk-server-api.html#gamelift-sdk-server-startsession)).
        public var gameSessionData: Swift.String?
        /// A unique identifier for the game session. A game session ARN has the following format: arn:aws:gamelift:::gamesession//.
        public var gameSessionId: Swift.String?
        /// The IP address of the game session. To connect to a GameLift game server, an app needs both the IP address and port number.
        public var ipAddress: Swift.String?
        /// The fleet location where the game session is running. This value might specify the fleet's home Region or a remote location. Location is expressed as an Amazon Web Services Region code such as us-west-2.
        public var location: Swift.String?
        /// Information about the matchmaking process that was used to create the game session. It is in JSON syntax, formatted as a string. In addition the matchmaking configuration used, it contains data on all players assigned to the match, including player attributes and team assignments. For more details on matchmaker data, see [Match Data](https://docs.aws.amazon.com/gamelift/latest/flexmatchguide/match-server.html#match-server-data). Matchmaker data is useful when requesting match backfills, and is updated whenever new players are added during a successful backfill (see [StartMatchBackfill](https://docs.aws.amazon.com/gamelift/latest/apireference/API_StartMatchBackfill.html)).
        public var matchmakerData: Swift.String?
        /// The maximum number of players that can be connected simultaneously to the game session.
        public var maximumPlayerSessionCount: Swift.Int?
        /// A descriptive label that is associated with a game session. Session names do not need to be unique.
        public var name: Swift.String?
        /// Indicates whether or not the game session is accepting new players.
        public var playerSessionCreationPolicy: GameLiftClientTypes.PlayerSessionCreationPolicy?
        /// The port number for the game session. To connect to a GameLift game server, an app needs both the IP address and port number.
        public var port: Swift.Int?
        /// Current status of the game session. A game session must have an ACTIVE status to have player sessions.
        public var status: GameLiftClientTypes.GameSessionStatus?
        /// Provides additional information about game session status. INTERRUPTED indicates that the game session was hosted on a spot instance that was reclaimed, causing the active game session to be terminated.
        public var statusReason: GameLiftClientTypes.GameSessionStatusReason?
        /// A time stamp indicating when this data object was terminated. Format is a number expressed in Unix time as milliseconds (for example "1469498468.057").
        public var terminationTime: ClientRuntime.Date?

        public init (
            creationTime: ClientRuntime.Date? = nil,
            creatorId: Swift.String? = nil,
            currentPlayerSessionCount: Swift.Int? = nil,
            dnsName: Swift.String? = nil,
            fleetArn: Swift.String? = nil,
            fleetId: Swift.String? = nil,
            gameProperties: [GameLiftClientTypes.GameProperty]? = nil,
            gameSessionData: Swift.String? = nil,
            gameSessionId: Swift.String? = nil,
            ipAddress: Swift.String? = nil,
            location: Swift.String? = nil,
            matchmakerData: Swift.String? = nil,
            maximumPlayerSessionCount: Swift.Int? = nil,
            name: Swift.String? = nil,
            playerSessionCreationPolicy: GameLiftClientTypes.PlayerSessionCreationPolicy? = nil,
            port: Swift.Int? = nil,
            status: GameLiftClientTypes.GameSessionStatus? = nil,
            statusReason: GameLiftClientTypes.GameSessionStatusReason? = nil,
            terminationTime: ClientRuntime.Date? = nil
        )
        {
            self.creationTime = creationTime
            self.creatorId = creatorId
            self.currentPlayerSessionCount = currentPlayerSessionCount
            self.dnsName = dnsName
            self.fleetArn = fleetArn
            self.fleetId = fleetId
            self.gameProperties = gameProperties
            self.gameSessionData = gameSessionData
            self.gameSessionId = gameSessionId
            self.ipAddress = ipAddress
            self.location = location
            self.matchmakerData = matchmakerData
            self.maximumPlayerSessionCount = maximumPlayerSessionCount
            self.name = name
            self.playerSessionCreationPolicy = playerSessionCreationPolicy
            self.port = port
            self.status = status
            self.statusReason = statusReason
            self.terminationTime = terminationTime
        }
    }

}
