// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension GameLiftClientTypes.VpcPeeringAuthorization: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTime = "CreationTime"
        case expirationTime = "ExpirationTime"
        case gameLiftAwsAccountId = "GameLiftAwsAccountId"
        case peerVpcAwsAccountId = "PeerVpcAwsAccountId"
        case peerVpcId = "PeerVpcId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationTime = self.creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let expirationTime = self.expirationTime {
            try encodeContainer.encode(expirationTime.timeIntervalSince1970, forKey: .expirationTime)
        }
        if let gameLiftAwsAccountId = self.gameLiftAwsAccountId {
            try encodeContainer.encode(gameLiftAwsAccountId, forKey: .gameLiftAwsAccountId)
        }
        if let peerVpcAwsAccountId = self.peerVpcAwsAccountId {
            try encodeContainer.encode(peerVpcAwsAccountId, forKey: .peerVpcAwsAccountId)
        }
        if let peerVpcId = self.peerVpcId {
            try encodeContainer.encode(peerVpcId, forKey: .peerVpcId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let gameLiftAwsAccountIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .gameLiftAwsAccountId)
        gameLiftAwsAccountId = gameLiftAwsAccountIdDecoded
        let peerVpcAwsAccountIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .peerVpcAwsAccountId)
        peerVpcAwsAccountId = peerVpcAwsAccountIdDecoded
        let peerVpcIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .peerVpcId)
        peerVpcId = peerVpcIdDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let expirationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .expirationTime)
        expirationTime = expirationTimeDecoded
    }
}
