// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension GameLiftClientTypes {
    /// Guidelines for use with FlexMatch to match players into games. All matchmaking requests must specify a matchmaking configuration.
    public struct MatchmakingConfiguration: Swift.Equatable {
        /// A flag that indicates whether a match that was created with this configuration must be accepted by the matched players. To require acceptance, set to TRUE. When this option is enabled, matchmaking tickets use the status REQUIRES_ACCEPTANCE to indicate when a completed potential match is waiting for player acceptance.
        public var acceptanceRequired: Swift.Bool?
        /// The length of time (in seconds) to wait for players to accept a proposed match, if acceptance is required. If any player rejects the match or fails to accept before the timeout, the ticket continues to look for an acceptable match.
        public var acceptanceTimeoutSeconds: Swift.Int?
        /// The number of player slots in a match to keep open for future players. For example, if the configuration's rule set specifies a match for a single 12-person team, and the additional player count is set to 2, only 10 players are selected for the match. This parameter is not used when FlexMatchMode is set to STANDALONE.
        public var additionalPlayerCount: Swift.Int?
        /// The method used to backfill game sessions created with this matchmaking configuration. MANUAL indicates that the game makes backfill requests or does not use the match backfill feature. AUTOMATIC indicates that GameLift creates [StartMatchBackfill] requests whenever a game session has one or more open slots. Learn more about manual and automatic backfill in [Backfill existing games with FlexMatch](https://docs.aws.amazon.com/gamelift/latest/flexmatchguide/match-backfill.html). Automatic backfill is not available when FlexMatchMode is set to STANDALONE.
        public var backfillMode: GameLiftClientTypes.BackfillMode?
        /// The Amazon Resource Name ([ARN](https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html)) that is assigned to a GameLift matchmaking configuration resource and uniquely identifies it. ARNs are unique across all Regions. Format is arn:aws:gamelift:::matchmakingconfiguration/. In a GameLift configuration ARN, the resource ID matches the Name value.
        public var configurationArn: Swift.String?
        /// A time stamp indicating when this data object was created. Format is a number expressed in Unix time as milliseconds (for example "1469498468.057").
        public var creationTime: ClientRuntime.Date?
        /// Information to attach to all events related to the matchmaking configuration.
        public var customEventData: Swift.String?
        /// A descriptive label that is associated with matchmaking configuration.
        public var description: Swift.String?
        /// Indicates whether this matchmaking configuration is being used with GameLift hosting or as a standalone matchmaking solution.
        ///
        /// * STANDALONE - FlexMatch forms matches and returns match information, including players and team assignments, in a [ MatchmakingSucceeded](https://docs.aws.amazon.com/gamelift/latest/flexmatchguide/match-events.html#match-events-matchmakingsucceeded) event.
        ///
        /// * WITH_QUEUE - FlexMatch forms matches and uses the specified GameLift queue to start a game session for the match.
        public var flexMatchMode: GameLiftClientTypes.FlexMatchMode?
        /// A set of custom properties for a game session, formatted as key:value pairs. These properties are passed to a game server process in the [GameSession] object with a request to start a new game session (see [Start a Game Session](https://docs.aws.amazon.com/gamelift/latest/developerguide/gamelift-sdk-server-api.html#gamelift-sdk-server-startsession)). This information is added to the new [GameSession] object that is created for a successful match. This parameter is not used when FlexMatchMode is set to STANDALONE.
        public var gameProperties: [GameLiftClientTypes.GameProperty]?
        /// A set of custom game session properties, formatted as a single string value. This data is passed to a game server process in the [GameSession] object with a request to start a new game session (see [Start a Game Session](https://docs.aws.amazon.com/gamelift/latest/developerguide/gamelift-sdk-server-api.html#gamelift-sdk-server-startsession)). This information is added to the new [GameSession] object that is created for a successful match. This parameter is not used when FlexMatchMode is set to STANDALONE.
        public var gameSessionData: Swift.String?
        /// The Amazon Resource Name ([ARN](https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html)) that is assigned to a GameLift game session queue resource and uniquely identifies it. ARNs are unique across all Regions. Format is arn:aws:gamelift:::gamesessionqueue/. Queues can be located in any Region. Queues are used to start new GameLift-hosted game sessions for matches that are created with this matchmaking configuration. This property is not set when FlexMatchMode is set to STANDALONE.
        public var gameSessionQueueArns: [Swift.String]?
        /// A unique identifier for the matchmaking configuration. This name is used to identify the configuration associated with a matchmaking request or ticket.
        public var name: Swift.String?
        /// An SNS topic ARN that is set up to receive matchmaking notifications.
        public var notificationTarget: Swift.String?
        /// The maximum duration, in seconds, that a matchmaking ticket can remain in process before timing out. Requests that fail due to timing out can be resubmitted as needed.
        public var requestTimeoutSeconds: Swift.Int?
        /// The Amazon Resource Name ([ARN](https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html)) associated with the GameLift matchmaking rule set resource that this configuration uses.
        public var ruleSetArn: Swift.String?
        /// A unique identifier for the matchmaking rule set to use with this configuration. A matchmaking configuration can only use rule sets that are defined in the same Region.
        public var ruleSetName: Swift.String?

        public init (
            acceptanceRequired: Swift.Bool? = nil,
            acceptanceTimeoutSeconds: Swift.Int? = nil,
            additionalPlayerCount: Swift.Int? = nil,
            backfillMode: GameLiftClientTypes.BackfillMode? = nil,
            configurationArn: Swift.String? = nil,
            creationTime: ClientRuntime.Date? = nil,
            customEventData: Swift.String? = nil,
            description: Swift.String? = nil,
            flexMatchMode: GameLiftClientTypes.FlexMatchMode? = nil,
            gameProperties: [GameLiftClientTypes.GameProperty]? = nil,
            gameSessionData: Swift.String? = nil,
            gameSessionQueueArns: [Swift.String]? = nil,
            name: Swift.String? = nil,
            notificationTarget: Swift.String? = nil,
            requestTimeoutSeconds: Swift.Int? = nil,
            ruleSetArn: Swift.String? = nil,
            ruleSetName: Swift.String? = nil
        )
        {
            self.acceptanceRequired = acceptanceRequired
            self.acceptanceTimeoutSeconds = acceptanceTimeoutSeconds
            self.additionalPlayerCount = additionalPlayerCount
            self.backfillMode = backfillMode
            self.configurationArn = configurationArn
            self.creationTime = creationTime
            self.customEventData = customEventData
            self.description = description
            self.flexMatchMode = flexMatchMode
            self.gameProperties = gameProperties
            self.gameSessionData = gameSessionData
            self.gameSessionQueueArns = gameSessionQueueArns
            self.name = name
            self.notificationTarget = notificationTarget
            self.requestTimeoutSeconds = requestTimeoutSeconds
            self.ruleSetArn = ruleSetArn
            self.ruleSetName = ruleSetName
        }
    }

}
