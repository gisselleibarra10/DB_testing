// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// Represents the input for a request operation.
public struct StartGameSessionPlacementInput: Swift.Equatable {
    /// Set of information on each player to create a player session for.
    public var desiredPlayerSessions: [GameLiftClientTypes.DesiredPlayerSession]?
    /// A set of custom properties for a game session, formatted as key:value pairs. These properties are passed to a game server process in the [GameSession] object with a request to start a new game session (see [Start a Game Session](https://docs.aws.amazon.com/gamelift/latest/developerguide/gamelift-sdk-server-api.html#gamelift-sdk-server-startsession)).
    public var gameProperties: [GameLiftClientTypes.GameProperty]?
    /// A set of custom game session properties, formatted as a single string value. This data is passed to a game server process in the [GameSession] object with a request to start a new game session (see [Start a Game Session](https://docs.aws.amazon.com/gamelift/latest/developerguide/gamelift-sdk-server-api.html#gamelift-sdk-server-startsession)).
    public var gameSessionData: Swift.String?
    /// A descriptive label that is associated with a game session. Session names do not need to be unique.
    public var gameSessionName: Swift.String?
    /// Name of the queue to use to place the new game session. You can use either the queue name or ARN value.
    /// This member is required.
    public var gameSessionQueueName: Swift.String?
    /// The maximum number of players that can be connected simultaneously to the game session.
    /// This member is required.
    public var maximumPlayerSessionCount: Swift.Int?
    /// A unique identifier to assign to the new game session placement. This value is developer-defined. The value must be unique across all Regions and cannot be reused unless you are resubmitting a canceled or timed-out placement request.
    /// This member is required.
    public var placementId: Swift.String?
    /// A set of values, expressed in milliseconds, that indicates the amount of latency that a player experiences when connected to @aws; Regions. This information is used to try to place the new game session where it can offer the best possible gameplay experience for the players.
    public var playerLatencies: [GameLiftClientTypes.PlayerLatency]?

    public init (
        desiredPlayerSessions: [GameLiftClientTypes.DesiredPlayerSession]? = nil,
        gameProperties: [GameLiftClientTypes.GameProperty]? = nil,
        gameSessionData: Swift.String? = nil,
        gameSessionName: Swift.String? = nil,
        gameSessionQueueName: Swift.String? = nil,
        maximumPlayerSessionCount: Swift.Int? = nil,
        placementId: Swift.String? = nil,
        playerLatencies: [GameLiftClientTypes.PlayerLatency]? = nil
    )
    {
        self.desiredPlayerSessions = desiredPlayerSessions
        self.gameProperties = gameProperties
        self.gameSessionData = gameSessionData
        self.gameSessionName = gameSessionName
        self.gameSessionQueueName = gameSessionQueueName
        self.maximumPlayerSessionCount = maximumPlayerSessionCount
        self.placementId = placementId
        self.playerLatencies = playerLatencies
    }
}
