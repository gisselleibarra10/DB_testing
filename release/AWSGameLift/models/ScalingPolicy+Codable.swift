// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension GameLiftClientTypes.ScalingPolicy: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case comparisonOperator = "ComparisonOperator"
        case evaluationPeriods = "EvaluationPeriods"
        case fleetArn = "FleetArn"
        case fleetId = "FleetId"
        case location = "Location"
        case metricName = "MetricName"
        case name = "Name"
        case policyType = "PolicyType"
        case scalingAdjustment = "ScalingAdjustment"
        case scalingAdjustmentType = "ScalingAdjustmentType"
        case status = "Status"
        case targetConfiguration = "TargetConfiguration"
        case threshold = "Threshold"
        case updateStatus = "UpdateStatus"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let comparisonOperator = self.comparisonOperator {
            try encodeContainer.encode(comparisonOperator.rawValue, forKey: .comparisonOperator)
        }
        if let evaluationPeriods = self.evaluationPeriods {
            try encodeContainer.encode(evaluationPeriods, forKey: .evaluationPeriods)
        }
        if let fleetArn = self.fleetArn {
            try encodeContainer.encode(fleetArn, forKey: .fleetArn)
        }
        if let fleetId = self.fleetId {
            try encodeContainer.encode(fleetId, forKey: .fleetId)
        }
        if let location = self.location {
            try encodeContainer.encode(location, forKey: .location)
        }
        if let metricName = self.metricName {
            try encodeContainer.encode(metricName.rawValue, forKey: .metricName)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let policyType = self.policyType {
            try encodeContainer.encode(policyType.rawValue, forKey: .policyType)
        }
        if scalingAdjustment != 0 {
            try encodeContainer.encode(scalingAdjustment, forKey: .scalingAdjustment)
        }
        if let scalingAdjustmentType = self.scalingAdjustmentType {
            try encodeContainer.encode(scalingAdjustmentType.rawValue, forKey: .scalingAdjustmentType)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let targetConfiguration = self.targetConfiguration {
            try encodeContainer.encode(targetConfiguration, forKey: .targetConfiguration)
        }
        if threshold != 0.0 {
            try encodeContainer.encode(threshold, forKey: .threshold)
        }
        if let updateStatus = self.updateStatus {
            try encodeContainer.encode(updateStatus.rawValue, forKey: .updateStatus)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fleetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fleetId)
        fleetId = fleetIdDecoded
        let fleetArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fleetArn)
        fleetArn = fleetArnDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let statusDecoded = try containerValues.decodeIfPresent(GameLiftClientTypes.ScalingStatusType.self, forKey: .status)
        status = statusDecoded
        let scalingAdjustmentDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .scalingAdjustment) ?? 0
        scalingAdjustment = scalingAdjustmentDecoded
        let scalingAdjustmentTypeDecoded = try containerValues.decodeIfPresent(GameLiftClientTypes.ScalingAdjustmentType.self, forKey: .scalingAdjustmentType)
        scalingAdjustmentType = scalingAdjustmentTypeDecoded
        let comparisonOperatorDecoded = try containerValues.decodeIfPresent(GameLiftClientTypes.ComparisonOperatorType.self, forKey: .comparisonOperator)
        comparisonOperator = comparisonOperatorDecoded
        let thresholdDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .threshold) ?? 0.0
        threshold = thresholdDecoded
        let evaluationPeriodsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .evaluationPeriods)
        evaluationPeriods = evaluationPeriodsDecoded
        let metricNameDecoded = try containerValues.decodeIfPresent(GameLiftClientTypes.MetricName.self, forKey: .metricName)
        metricName = metricNameDecoded
        let policyTypeDecoded = try containerValues.decodeIfPresent(GameLiftClientTypes.PolicyType.self, forKey: .policyType)
        policyType = policyTypeDecoded
        let targetConfigurationDecoded = try containerValues.decodeIfPresent(GameLiftClientTypes.TargetConfiguration.self, forKey: .targetConfiguration)
        targetConfiguration = targetConfigurationDecoded
        let updateStatusDecoded = try containerValues.decodeIfPresent(GameLiftClientTypes.LocationUpdateStatus.self, forKey: .updateStatus)
        updateStatus = updateStatusDecoded
        let locationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .location)
        location = locationDecoded
    }
}
