// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct StartMatchBackfillInputBody: Swift.Equatable {
    let ticketId: Swift.String?
    let configurationName: Swift.String?
    let gameSessionArn: Swift.String?
    let players: [GameLiftClientTypes.Player]?
}

extension StartMatchBackfillInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configurationName = "ConfigurationName"
        case gameSessionArn = "GameSessionArn"
        case players = "Players"
        case ticketId = "TicketId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ticketIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ticketId)
        ticketId = ticketIdDecoded
        let configurationNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .configurationName)
        configurationName = configurationNameDecoded
        let gameSessionArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .gameSessionArn)
        gameSessionArn = gameSessionArnDecoded
        let playersContainer = try containerValues.decodeIfPresent([GameLiftClientTypes.Player?].self, forKey: .players)
        var playersDecoded0:[GameLiftClientTypes.Player]? = nil
        if let playersContainer = playersContainer {
            playersDecoded0 = [GameLiftClientTypes.Player]()
            for structure0 in playersContainer {
                if let structure0 = structure0 {
                    playersDecoded0?.append(structure0)
                }
            }
        }
        players = playersDecoded0
    }
}
