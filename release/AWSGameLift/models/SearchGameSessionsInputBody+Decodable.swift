// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct SearchGameSessionsInputBody: Swift.Equatable {
    let fleetId: Swift.String?
    let aliasId: Swift.String?
    let location: Swift.String?
    let filterExpression: Swift.String?
    let sortExpression: Swift.String?
    let limit: Swift.Int?
    let nextToken: Swift.String?
}

extension SearchGameSessionsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case aliasId = "AliasId"
        case filterExpression = "FilterExpression"
        case fleetId = "FleetId"
        case limit = "Limit"
        case location = "Location"
        case nextToken = "NextToken"
        case sortExpression = "SortExpression"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fleetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fleetId)
        fleetId = fleetIdDecoded
        let aliasIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .aliasId)
        aliasId = aliasIdDecoded
        let locationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .location)
        location = locationDecoded
        let filterExpressionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .filterExpression)
        filterExpression = filterExpressionDecoded
        let sortExpressionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sortExpression)
        sortExpression = sortExpressionDecoded
        let limitDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .limit)
        limit = limitDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
