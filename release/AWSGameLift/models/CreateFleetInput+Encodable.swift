// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CreateFleetInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case buildId = "BuildId"
        case certificateConfiguration = "CertificateConfiguration"
        case description = "Description"
        case eC2InboundPermissions = "EC2InboundPermissions"
        case eC2InstanceType = "EC2InstanceType"
        case fleetType = "FleetType"
        case instanceRoleArn = "InstanceRoleArn"
        case locations = "Locations"
        case logPaths = "LogPaths"
        case metricGroups = "MetricGroups"
        case name = "Name"
        case newGameSessionProtectionPolicy = "NewGameSessionProtectionPolicy"
        case peerVpcAwsAccountId = "PeerVpcAwsAccountId"
        case peerVpcId = "PeerVpcId"
        case resourceCreationLimitPolicy = "ResourceCreationLimitPolicy"
        case runtimeConfiguration = "RuntimeConfiguration"
        case scriptId = "ScriptId"
        case serverLaunchParameters = "ServerLaunchParameters"
        case serverLaunchPath = "ServerLaunchPath"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let buildId = self.buildId {
            try encodeContainer.encode(buildId, forKey: .buildId)
        }
        if let certificateConfiguration = self.certificateConfiguration {
            try encodeContainer.encode(certificateConfiguration, forKey: .certificateConfiguration)
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let eC2InboundPermissions = eC2InboundPermissions {
            var eC2InboundPermissionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .eC2InboundPermissions)
            for ippermissionslist0 in eC2InboundPermissions {
                try eC2InboundPermissionsContainer.encode(ippermissionslist0)
            }
        }
        if let eC2InstanceType = self.eC2InstanceType {
            try encodeContainer.encode(eC2InstanceType.rawValue, forKey: .eC2InstanceType)
        }
        if let fleetType = self.fleetType {
            try encodeContainer.encode(fleetType.rawValue, forKey: .fleetType)
        }
        if let instanceRoleArn = self.instanceRoleArn {
            try encodeContainer.encode(instanceRoleArn, forKey: .instanceRoleArn)
        }
        if let locations = locations {
            var locationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .locations)
            for locationconfigurationlist0 in locations {
                try locationsContainer.encode(locationconfigurationlist0)
            }
        }
        if let logPaths = logPaths {
            var logPathsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .logPaths)
            for stringlist0 in logPaths {
                try logPathsContainer.encode(stringlist0)
            }
        }
        if let metricGroups = metricGroups {
            var metricGroupsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .metricGroups)
            for metricgrouplist0 in metricGroups {
                try metricGroupsContainer.encode(metricgrouplist0)
            }
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let newGameSessionProtectionPolicy = self.newGameSessionProtectionPolicy {
            try encodeContainer.encode(newGameSessionProtectionPolicy.rawValue, forKey: .newGameSessionProtectionPolicy)
        }
        if let peerVpcAwsAccountId = self.peerVpcAwsAccountId {
            try encodeContainer.encode(peerVpcAwsAccountId, forKey: .peerVpcAwsAccountId)
        }
        if let peerVpcId = self.peerVpcId {
            try encodeContainer.encode(peerVpcId, forKey: .peerVpcId)
        }
        if let resourceCreationLimitPolicy = self.resourceCreationLimitPolicy {
            try encodeContainer.encode(resourceCreationLimitPolicy, forKey: .resourceCreationLimitPolicy)
        }
        if let runtimeConfiguration = self.runtimeConfiguration {
            try encodeContainer.encode(runtimeConfiguration, forKey: .runtimeConfiguration)
        }
        if let scriptId = self.scriptId {
            try encodeContainer.encode(scriptId, forKey: .scriptId)
        }
        if let serverLaunchParameters = self.serverLaunchParameters {
            try encodeContainer.encode(serverLaunchParameters, forKey: .serverLaunchParameters)
        }
        if let serverLaunchPath = self.serverLaunchPath {
            try encodeContainer.encode(serverLaunchPath, forKey: .serverLaunchPath)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }
}
