// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension GameLiftClientTypes {
    /// Configuration for a game session placement mechanism that processes requests for new game sessions. A queue can be used on its own or as part of a matchmaking solution. Related actions [CreateGameSessionQueue](https://docs.aws.amazon.com/gamelift/latest/apireference/API_CreateGameSessionQueue.html) | [DescribeGameSessionQueues](https://docs.aws.amazon.com/gamelift/latest/apireference/API_DescribeGameSessionQueues.html) | [UpdateGameSessionQueue](https://docs.aws.amazon.com/gamelift/latest/apireference/API_UpdateGameSessionQueue.html)
    public struct GameSessionQueue: Swift.Equatable {
        /// Information that is added to all events that are related to this game session queue.
        public var customEventData: Swift.String?
        /// A list of fleets and/or fleet aliases that can be used to fulfill game session placement requests in the queue. Destinations are identified by either a fleet ARN or a fleet alias ARN, and are listed in order of placement preference.
        public var destinations: [GameLiftClientTypes.GameSessionQueueDestination]?
        /// A list of locations where a queue is allowed to place new game sessions. Locations are specified in the form of Amazon Web Services Region codes, such as us-west-2. If this parameter is not set, game sessions can be placed in any queue location.
        public var filterConfiguration: GameLiftClientTypes.FilterConfiguration?
        /// The Amazon Resource Name ([ARN](https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html)) that is assigned to a GameLift game session queue resource and uniquely identifies it. ARNs are unique across all Regions. Format is arn:aws:gamelift:::gamesessionqueue/. In a GameLift game session queue ARN, the resource ID matches the Name value.
        public var gameSessionQueueArn: Swift.String?
        /// A descriptive label that is associated with game session queue. Queue names must be unique within each Region.
        public var name: Swift.String?
        /// An SNS topic ARN that is set up to receive game session placement notifications. See [ Setting up notifications for game session placement](https://docs.aws.amazon.com/gamelift/latest/developerguide/queue-notification.html).
        public var notificationTarget: Swift.String?
        /// A set of policies that act as a sliding cap on player latency. FleetIQ works to deliver low latency for most players in a game session. These policies ensure that no individual player can be placed into a game with unreasonably high latency. Use multiple policies to gradually relax latency requirements a step at a time. Multiple policies are applied based on their maximum allowed latency, starting with the lowest value.
        public var playerLatencyPolicies: [GameLiftClientTypes.PlayerLatencyPolicy]?
        /// Custom settings to use when prioritizing destinations and locations for game session placements. This configuration replaces the FleetIQ default prioritization process. Priority types that are not explicitly named will be automatically applied at the end of the prioritization process.
        public var priorityConfiguration: GameLiftClientTypes.PriorityConfiguration?
        /// The maximum time, in seconds, that a new game session placement request remains in the queue. When a request exceeds this time, the game session placement changes to a TIMED_OUT status.
        public var timeoutInSeconds: Swift.Int?

        public init (
            customEventData: Swift.String? = nil,
            destinations: [GameLiftClientTypes.GameSessionQueueDestination]? = nil,
            filterConfiguration: GameLiftClientTypes.FilterConfiguration? = nil,
            gameSessionQueueArn: Swift.String? = nil,
            name: Swift.String? = nil,
            notificationTarget: Swift.String? = nil,
            playerLatencyPolicies: [GameLiftClientTypes.PlayerLatencyPolicy]? = nil,
            priorityConfiguration: GameLiftClientTypes.PriorityConfiguration? = nil,
            timeoutInSeconds: Swift.Int? = nil
        )
        {
            self.customEventData = customEventData
            self.destinations = destinations
            self.filterConfiguration = filterConfiguration
            self.gameSessionQueueArn = gameSessionQueueArn
            self.name = name
            self.notificationTarget = notificationTarget
            self.playerLatencyPolicies = playerLatencyPolicies
            self.priorityConfiguration = priorityConfiguration
            self.timeoutInSeconds = timeoutInSeconds
        }
    }

}
