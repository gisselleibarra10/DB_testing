// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// Represents the input for a request operation.
public struct CreateMatchmakingConfigurationInput: Swift.Equatable {
    /// A flag that determines whether a match that was created with this configuration must be accepted by the matched players. To require acceptance, set to TRUE. With this option enabled, matchmaking tickets use the status REQUIRES_ACCEPTANCE to indicate when a completed potential match is waiting for player acceptance.
    /// This member is required.
    public var acceptanceRequired: Swift.Bool?
    /// The length of time (in seconds) to wait for players to accept a proposed match, if acceptance is required.
    public var acceptanceTimeoutSeconds: Swift.Int?
    /// The number of player slots in a match to keep open for future players. For example, if the configuration's rule set specifies a match for a single 12-person team, and the additional player count is set to 2, only 10 players are selected for the match. This parameter is not used if FlexMatchMode is set to STANDALONE.
    public var additionalPlayerCount: Swift.Int?
    /// The method used to backfill game sessions that are created with this matchmaking configuration. Specify MANUAL when your game manages backfill requests manually or does not use the match backfill feature. Specify AUTOMATIC to have GameLift create a [StartMatchBackfill] request whenever a game session has one or more open slots. Learn more about manual and automatic backfill in [ Backfill Existing Games with FlexMatch](https://docs.aws.amazon.com/gamelift/latest/flexmatchguide/match-backfill.html). Automatic backfill is not available when FlexMatchMode is set to STANDALONE.
    public var backfillMode: GameLiftClientTypes.BackfillMode?
    /// Information to be added to all events related to this matchmaking configuration.
    public var customEventData: Swift.String?
    /// A human-readable description of the matchmaking configuration.
    public var description: Swift.String?
    /// Indicates whether this matchmaking configuration is being used with GameLift hosting or as a standalone matchmaking solution.
    ///
    /// * STANDALONE - FlexMatch forms matches and returns match information, including players and team assignments, in a [ MatchmakingSucceeded](https://docs.aws.amazon.com/gamelift/latest/flexmatchguide/match-events.html#match-events-matchmakingsucceeded) event.
    ///
    /// * WITH_QUEUE - FlexMatch forms matches and uses the specified GameLift queue to start a game session for the match.
    public var flexMatchMode: GameLiftClientTypes.FlexMatchMode?
    /// A set of custom properties for a game session, formatted as key:value pairs. These properties are passed to a game server process in the [GameSession] object with a request to start a new game session (see [Start a Game Session](https://docs.aws.amazon.com/gamelift/latest/developerguide/gamelift-sdk-server-api.html#gamelift-sdk-server-startsession)). This information is added to the new [GameSession] object that is created for a successful match. This parameter is not used if FlexMatchMode is set to STANDALONE.
    public var gameProperties: [GameLiftClientTypes.GameProperty]?
    /// A set of custom game session properties, formatted as a single string value. This data is passed to a game server process in the [GameSession] object with a request to start a new game session (see [Start a Game Session](https://docs.aws.amazon.com/gamelift/latest/developerguide/gamelift-sdk-server-api.html#gamelift-sdk-server-startsession)). This information is added to the new [GameSession] object that is created for a successful match. This parameter is not used if FlexMatchMode is set to STANDALONE.
    public var gameSessionData: Swift.String?
    /// The Amazon Resource Name ([ARN](https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html)) that is assigned to a GameLift game session queue resource and uniquely identifies it. ARNs are unique across all Regions. Format is arn:aws:gamelift:::gamesessionqueue/. Queues can be located in any Region. Queues are used to start new GameLift-hosted game sessions for matches that are created with this matchmaking configuration. If FlexMatchMode is set to STANDALONE, do not set this parameter.
    public var gameSessionQueueArns: [Swift.String]?
    /// A unique identifier for the matchmaking configuration. This name is used to identify the configuration associated with a matchmaking request or ticket.
    /// This member is required.
    public var name: Swift.String?
    /// An SNS topic ARN that is set up to receive matchmaking notifications. See [ Setting up notifications for matchmaking](https://docs.aws.amazon.com/gamelift/latest/flexmatchguide/match-notification.html) for more information.
    public var notificationTarget: Swift.String?
    /// The maximum duration, in seconds, that a matchmaking ticket can remain in process before timing out. Requests that fail due to timing out can be resubmitted as needed.
    /// This member is required.
    public var requestTimeoutSeconds: Swift.Int?
    /// A unique identifier for the matchmaking rule set to use with this configuration. You can use either the rule set name or ARN value. A matchmaking configuration can only use rule sets that are defined in the same Region.
    /// This member is required.
    public var ruleSetName: Swift.String?
    /// A list of labels to assign to the new matchmaking configuration resource. Tags are developer-defined key-value pairs. Tagging Amazon Web Services resources are useful for resource management, access management and cost allocation. For more information, see [ Tagging Amazon Web Services Resources](https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html) in the Amazon Web Services General Reference. Once the resource is created, you can use [TagResource], [UntagResource], and [ListTagsForResource] to add, remove, and view tags. The maximum tag limit may be lower than stated. See the Amazon Web Services General Reference for actual tagging limits.
    public var tags: [GameLiftClientTypes.Tag]?

    public init (
        acceptanceRequired: Swift.Bool? = nil,
        acceptanceTimeoutSeconds: Swift.Int? = nil,
        additionalPlayerCount: Swift.Int? = nil,
        backfillMode: GameLiftClientTypes.BackfillMode? = nil,
        customEventData: Swift.String? = nil,
        description: Swift.String? = nil,
        flexMatchMode: GameLiftClientTypes.FlexMatchMode? = nil,
        gameProperties: [GameLiftClientTypes.GameProperty]? = nil,
        gameSessionData: Swift.String? = nil,
        gameSessionQueueArns: [Swift.String]? = nil,
        name: Swift.String? = nil,
        notificationTarget: Swift.String? = nil,
        requestTimeoutSeconds: Swift.Int? = nil,
        ruleSetName: Swift.String? = nil,
        tags: [GameLiftClientTypes.Tag]? = nil
    )
    {
        self.acceptanceRequired = acceptanceRequired
        self.acceptanceTimeoutSeconds = acceptanceTimeoutSeconds
        self.additionalPlayerCount = additionalPlayerCount
        self.backfillMode = backfillMode
        self.customEventData = customEventData
        self.description = description
        self.flexMatchMode = flexMatchMode
        self.gameProperties = gameProperties
        self.gameSessionData = gameSessionData
        self.gameSessionQueueArns = gameSessionQueueArns
        self.name = name
        self.notificationTarget = notificationTarget
        self.requestTimeoutSeconds = requestTimeoutSeconds
        self.ruleSetName = ruleSetName
        self.tags = tags
    }
}
