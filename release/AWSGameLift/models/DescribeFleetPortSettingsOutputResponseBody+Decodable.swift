// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeFleetPortSettingsOutputResponseBody: Swift.Equatable {
    let fleetId: Swift.String?
    let fleetArn: Swift.String?
    let inboundPermissions: [GameLiftClientTypes.IpPermission]?
    let updateStatus: GameLiftClientTypes.LocationUpdateStatus?
    let location: Swift.String?
}

extension DescribeFleetPortSettingsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case fleetArn = "FleetArn"
        case fleetId = "FleetId"
        case inboundPermissions = "InboundPermissions"
        case location = "Location"
        case updateStatus = "UpdateStatus"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fleetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fleetId)
        fleetId = fleetIdDecoded
        let fleetArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fleetArn)
        fleetArn = fleetArnDecoded
        let inboundPermissionsContainer = try containerValues.decodeIfPresent([GameLiftClientTypes.IpPermission?].self, forKey: .inboundPermissions)
        var inboundPermissionsDecoded0:[GameLiftClientTypes.IpPermission]? = nil
        if let inboundPermissionsContainer = inboundPermissionsContainer {
            inboundPermissionsDecoded0 = [GameLiftClientTypes.IpPermission]()
            for structure0 in inboundPermissionsContainer {
                if let structure0 = structure0 {
                    inboundPermissionsDecoded0?.append(structure0)
                }
            }
        }
        inboundPermissions = inboundPermissionsDecoded0
        let updateStatusDecoded = try containerValues.decodeIfPresent(GameLiftClientTypes.LocationUpdateStatus.self, forKey: .updateStatus)
        updateStatus = updateStatusDecoded
        let locationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .location)
        location = locationDecoded
    }
}
