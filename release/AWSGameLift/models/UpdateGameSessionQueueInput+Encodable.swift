// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension UpdateGameSessionQueueInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case customEventData = "CustomEventData"
        case destinations = "Destinations"
        case filterConfiguration = "FilterConfiguration"
        case name = "Name"
        case notificationTarget = "NotificationTarget"
        case playerLatencyPolicies = "PlayerLatencyPolicies"
        case priorityConfiguration = "PriorityConfiguration"
        case timeoutInSeconds = "TimeoutInSeconds"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let customEventData = self.customEventData {
            try encodeContainer.encode(customEventData, forKey: .customEventData)
        }
        if let destinations = destinations {
            var destinationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .destinations)
            for gamesessionqueuedestinationlist0 in destinations {
                try destinationsContainer.encode(gamesessionqueuedestinationlist0)
            }
        }
        if let filterConfiguration = self.filterConfiguration {
            try encodeContainer.encode(filterConfiguration, forKey: .filterConfiguration)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let notificationTarget = self.notificationTarget {
            try encodeContainer.encode(notificationTarget, forKey: .notificationTarget)
        }
        if let playerLatencyPolicies = playerLatencyPolicies {
            var playerLatencyPoliciesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .playerLatencyPolicies)
            for playerlatencypolicylist0 in playerLatencyPolicies {
                try playerLatencyPoliciesContainer.encode(playerlatencypolicylist0)
            }
        }
        if let priorityConfiguration = self.priorityConfiguration {
            try encodeContainer.encode(priorityConfiguration, forKey: .priorityConfiguration)
        }
        if let timeoutInSeconds = self.timeoutInSeconds {
            try encodeContainer.encode(timeoutInSeconds, forKey: .timeoutInSeconds)
        }
    }
}
