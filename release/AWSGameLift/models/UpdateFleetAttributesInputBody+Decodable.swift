// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct UpdateFleetAttributesInputBody: Swift.Equatable {
    let fleetId: Swift.String?
    let name: Swift.String?
    let description: Swift.String?
    let newGameSessionProtectionPolicy: GameLiftClientTypes.ProtectionPolicy?
    let resourceCreationLimitPolicy: GameLiftClientTypes.ResourceCreationLimitPolicy?
    let metricGroups: [Swift.String]?
}

extension UpdateFleetAttributesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description = "Description"
        case fleetId = "FleetId"
        case metricGroups = "MetricGroups"
        case name = "Name"
        case newGameSessionProtectionPolicy = "NewGameSessionProtectionPolicy"
        case resourceCreationLimitPolicy = "ResourceCreationLimitPolicy"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fleetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fleetId)
        fleetId = fleetIdDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let newGameSessionProtectionPolicyDecoded = try containerValues.decodeIfPresent(GameLiftClientTypes.ProtectionPolicy.self, forKey: .newGameSessionProtectionPolicy)
        newGameSessionProtectionPolicy = newGameSessionProtectionPolicyDecoded
        let resourceCreationLimitPolicyDecoded = try containerValues.decodeIfPresent(GameLiftClientTypes.ResourceCreationLimitPolicy.self, forKey: .resourceCreationLimitPolicy)
        resourceCreationLimitPolicy = resourceCreationLimitPolicyDecoded
        let metricGroupsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .metricGroups)
        var metricGroupsDecoded0:[Swift.String]? = nil
        if let metricGroupsContainer = metricGroupsContainer {
            metricGroupsDecoded0 = [Swift.String]()
            for string0 in metricGroupsContainer {
                if let string0 = string0 {
                    metricGroupsDecoded0?.append(string0)
                }
            }
        }
        metricGroups = metricGroupsDecoded0
    }
}
