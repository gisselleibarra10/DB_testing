// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension GameLiftClientTypes {
    /// Represents a player in matchmaking. When starting a matchmaking request, a player has a player ID, attributes, and may have latency data. Team information is added after a match has been successfully completed.
    public struct Player: Swift.Equatable {
        /// A set of values, expressed in milliseconds, that indicates the amount of latency that a player experiences when connected to @aws; Regions. If this property is present, FlexMatch considers placing the match only in Regions for which latency is reported. If a matchmaker has a rule that evaluates player latency, players must report latency in order to be matched. If no latency is reported in this scenario, FlexMatch assumes that no Regions are available to the player and the ticket is not matchable.
        public var latencyInMs: [Swift.String:Swift.Int]?
        /// A collection of key:value pairs containing player information for use in matchmaking. Player attribute keys must match the playerAttributes used in a matchmaking rule set. Example: "PlayerAttributes": {"skill": {"N": "23"}, "gameMode": {"S": "deathmatch"}}.
        public var playerAttributes: [Swift.String:GameLiftClientTypes.AttributeValue]?
        /// A unique identifier for a player
        public var playerId: Swift.String?
        /// Name of the team that the player is assigned to in a match. Team names are defined in a matchmaking rule set.
        public var team: Swift.String?

        public init (
            latencyInMs: [Swift.String:Swift.Int]? = nil,
            playerAttributes: [Swift.String:GameLiftClientTypes.AttributeValue]? = nil,
            playerId: Swift.String? = nil,
            team: Swift.String? = nil
        )
        {
            self.latencyInMs = latencyInMs
            self.playerAttributes = playerAttributes
            self.playerId = playerId
            self.team = team
        }
    }

}
