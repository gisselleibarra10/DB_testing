// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension StartGameSessionPlacementInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case desiredPlayerSessions = "DesiredPlayerSessions"
        case gameProperties = "GameProperties"
        case gameSessionData = "GameSessionData"
        case gameSessionName = "GameSessionName"
        case gameSessionQueueName = "GameSessionQueueName"
        case maximumPlayerSessionCount = "MaximumPlayerSessionCount"
        case placementId = "PlacementId"
        case playerLatencies = "PlayerLatencies"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let desiredPlayerSessions = desiredPlayerSessions {
            var desiredPlayerSessionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .desiredPlayerSessions)
            for desiredplayersessionlist0 in desiredPlayerSessions {
                try desiredPlayerSessionsContainer.encode(desiredplayersessionlist0)
            }
        }
        if let gameProperties = gameProperties {
            var gamePropertiesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .gameProperties)
            for gamepropertylist0 in gameProperties {
                try gamePropertiesContainer.encode(gamepropertylist0)
            }
        }
        if let gameSessionData = self.gameSessionData {
            try encodeContainer.encode(gameSessionData, forKey: .gameSessionData)
        }
        if let gameSessionName = self.gameSessionName {
            try encodeContainer.encode(gameSessionName, forKey: .gameSessionName)
        }
        if let gameSessionQueueName = self.gameSessionQueueName {
            try encodeContainer.encode(gameSessionQueueName, forKey: .gameSessionQueueName)
        }
        if let maximumPlayerSessionCount = self.maximumPlayerSessionCount {
            try encodeContainer.encode(maximumPlayerSessionCount, forKey: .maximumPlayerSessionCount)
        }
        if let placementId = self.placementId {
            try encodeContainer.encode(placementId, forKey: .placementId)
        }
        if let playerLatencies = playerLatencies {
            var playerLatenciesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .playerLatencies)
            for playerlatencylist0 in playerLatencies {
                try playerLatenciesContainer.encode(playerlatencylist0)
            }
        }
    }
}
