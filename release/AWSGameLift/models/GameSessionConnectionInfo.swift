// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension GameLiftClientTypes {
    /// Connection information for a new game session that is created in response to a [StartMatchmaking] request. Once a match is made, the FlexMatch engine creates a new game session for it. This information, including the game session endpoint and player sessions for each player in the original matchmaking request, is added to the [MatchmakingTicket], which can be retrieved by calling [DescribeMatchmaking].
    public struct GameSessionConnectionInfo: Swift.Equatable {
        /// The DNS identifier assigned to the instance that is running the game session. Values have the following format:
        ///
        /// * TLS-enabled fleets: ..amazongamelift.com.
        ///
        /// * Non-TLS-enabled fleets: ec2-.compute.amazonaws.com. (See [Amazon EC2 Instance IP Addressing](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-instance-addressing.html#concepts-public-addresses).)
        ///
        ///
        /// When connecting to a game session that is running on a TLS-enabled fleet, you must use the DNS name, not the IP address.
        public var dnsName: Swift.String?
        /// A unique identifier for the game session. Use the game session ID.
        public var gameSessionArn: Swift.String?
        /// The IP address of the game session. To connect to a GameLift game server, an app needs both the IP address and port number.
        public var ipAddress: Swift.String?
        /// A collection of player session IDs, one for each player ID that was included in the original matchmaking request.
        public var matchedPlayerSessions: [GameLiftClientTypes.MatchedPlayerSession]?
        /// The port number for the game session. To connect to a GameLift game server, an app needs both the IP address and port number.
        public var port: Swift.Int?

        public init (
            dnsName: Swift.String? = nil,
            gameSessionArn: Swift.String? = nil,
            ipAddress: Swift.String? = nil,
            matchedPlayerSessions: [GameLiftClientTypes.MatchedPlayerSession]? = nil,
            port: Swift.Int? = nil
        )
        {
            self.dnsName = dnsName
            self.gameSessionArn = gameSessionArn
            self.ipAddress = ipAddress
            self.matchedPlayerSessions = matchedPlayerSessions
            self.port = port
        }
    }

}
