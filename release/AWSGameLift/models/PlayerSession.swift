// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension GameLiftClientTypes {
    /// Represents a player session. Player sessions are created either for a specific game session, or as part of a game session placement or matchmaking request. A player session can represents a reserved player slot in a game session (when status is RESERVED) or actual player activity in a game session (when status is ACTIVE). A player session object, including player data, is automatically passed to a game session when the player connects to the game session and is validated. After the game session ends, player sessions information is retained for 30 days and then removed. Related actions [CreatePlayerSession] | [CreatePlayerSessions] | [DescribePlayerSessions] | [StartGameSessionPlacement] | [DescribeGameSessionPlacement] | [All APIs by task](https://docs.aws.amazon.com/gamelift/latest/developerguide/reference-awssdk.html#reference-awssdk-resources-fleets)
    public struct PlayerSession: Swift.Equatable {
        /// A time stamp indicating when this data object was created. Format is a number expressed in Unix time as milliseconds (for example "1469498468.057").
        public var creationTime: ClientRuntime.Date?
        /// The DNS identifier assigned to the instance that is running the game session. Values have the following format:
        ///
        /// * TLS-enabled fleets: ..amazongamelift.com.
        ///
        /// * Non-TLS-enabled fleets: ec2-.compute.amazonaws.com. (See [Amazon EC2 Instance IP Addressing](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-instance-addressing.html#concepts-public-addresses).)
        ///
        ///
        /// When connecting to a game session that is running on a TLS-enabled fleet, you must use the DNS name, not the IP address.
        public var dnsName: Swift.String?
        /// The Amazon Resource Name ([ARN](https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html)) associated with the GameLift fleet that the player's game session is running on.
        public var fleetArn: Swift.String?
        /// A unique identifier for the fleet that the player's game session is running on.
        public var fleetId: Swift.String?
        /// A unique identifier for the game session that the player session is connected to.
        public var gameSessionId: Swift.String?
        /// The IP address of the game session. To connect to a GameLift game server, an app needs both the IP address and port number.
        public var ipAddress: Swift.String?
        /// Developer-defined information related to a player. GameLift does not use this data, so it can be formatted as needed for use in the game.
        public var playerData: Swift.String?
        /// A unique identifier for a player that is associated with this player session.
        public var playerId: Swift.String?
        /// A unique identifier for a player session.
        public var playerSessionId: Swift.String?
        /// Port number for the game session. To connect to a Amazon GameLift server process, an app needs both the IP address and port number.
        public var port: Swift.Int?
        /// Current status of the player session. Possible player session statuses include the following:
        ///
        /// * RESERVED -- The player session request has been received, but the player has not yet connected to the server process and/or been validated.
        ///
        /// * ACTIVE -- The player has been validated by the server process and is currently connected.
        ///
        /// * COMPLETED -- The player connection has been dropped.
        ///
        /// * TIMEDOUT -- A player session request was received, but the player did not connect and/or was not validated within the timeout limit (60 seconds).
        public var status: GameLiftClientTypes.PlayerSessionStatus?
        /// A time stamp indicating when this data object was terminated. Format is a number expressed in Unix time as milliseconds (for example "1469498468.057").
        public var terminationTime: ClientRuntime.Date?

        public init (
            creationTime: ClientRuntime.Date? = nil,
            dnsName: Swift.String? = nil,
            fleetArn: Swift.String? = nil,
            fleetId: Swift.String? = nil,
            gameSessionId: Swift.String? = nil,
            ipAddress: Swift.String? = nil,
            playerData: Swift.String? = nil,
            playerId: Swift.String? = nil,
            playerSessionId: Swift.String? = nil,
            port: Swift.Int? = nil,
            status: GameLiftClientTypes.PlayerSessionStatus? = nil,
            terminationTime: ClientRuntime.Date? = nil
        )
        {
            self.creationTime = creationTime
            self.dnsName = dnsName
            self.fleetArn = fleetArn
            self.fleetId = fleetId
            self.gameSessionId = gameSessionId
            self.ipAddress = ipAddress
            self.playerData = playerData
            self.playerId = playerId
            self.playerSessionId = playerSessionId
            self.port = port
            self.status = status
            self.terminationTime = terminationTime
        }
    }

}
