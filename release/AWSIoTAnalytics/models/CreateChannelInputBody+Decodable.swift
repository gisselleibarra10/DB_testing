// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateChannelInputBody: Swift.Equatable {
    let channelName: Swift.String?
    let channelStorage: IoTAnalyticsClientTypes.ChannelStorage?
    let retentionPeriod: IoTAnalyticsClientTypes.RetentionPeriod?
    let tags: [IoTAnalyticsClientTypes.Tag]?
}

extension CreateChannelInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case channelName
        case channelStorage
        case retentionPeriod
        case tags
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let channelNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .channelName)
        channelName = channelNameDecoded
        let channelStorageDecoded = try containerValues.decodeIfPresent(IoTAnalyticsClientTypes.ChannelStorage.self, forKey: .channelStorage)
        channelStorage = channelStorageDecoded
        let retentionPeriodDecoded = try containerValues.decodeIfPresent(IoTAnalyticsClientTypes.RetentionPeriod.self, forKey: .retentionPeriod)
        retentionPeriod = retentionPeriodDecoded
        let tagsContainer = try containerValues.decodeIfPresent([IoTAnalyticsClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[IoTAnalyticsClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [IoTAnalyticsClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}
