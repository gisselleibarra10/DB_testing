// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CreateDatastoreInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case datastoreName
        case datastorePartitions
        case datastoreStorage
        case fileFormatConfiguration
        case retentionPeriod
        case tags
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let datastoreName = self.datastoreName {
            try encodeContainer.encode(datastoreName, forKey: .datastoreName)
        }
        if let datastorePartitions = self.datastorePartitions {
            try encodeContainer.encode(datastorePartitions, forKey: .datastorePartitions)
        }
        if let datastoreStorage = self.datastoreStorage {
            try encodeContainer.encode(datastoreStorage, forKey: .datastoreStorage)
        }
        if let fileFormatConfiguration = self.fileFormatConfiguration {
            try encodeContainer.encode(fileFormatConfiguration, forKey: .fileFormatConfiguration)
        }
        if let retentionPeriod = self.retentionPeriod {
            try encodeContainer.encode(retentionPeriod, forKey: .retentionPeriod)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }
}
