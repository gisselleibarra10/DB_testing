// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension IoTAnalyticsClientTypes.LambdaActivity: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case batchSize
        case lambdaName
        case name
        case next
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let batchSize = self.batchSize {
            try encodeContainer.encode(batchSize, forKey: .batchSize)
        }
        if let lambdaName = self.lambdaName {
            try encodeContainer.encode(lambdaName, forKey: .lambdaName)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let next = self.next {
            try encodeContainer.encode(next, forKey: .next)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let lambdaNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lambdaName)
        lambdaName = lambdaNameDecoded
        let batchSizeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .batchSize)
        batchSize = batchSizeDecoded
        let nextDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .next)
        next = nextDecoded
    }
}
