// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreatePipelineInputBody: Swift.Equatable {
    let pipelineName: Swift.String?
    let pipelineActivities: [IoTAnalyticsClientTypes.PipelineActivity]?
    let tags: [IoTAnalyticsClientTypes.Tag]?
}

extension CreatePipelineInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case pipelineActivities
        case pipelineName
        case tags
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pipelineNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pipelineName)
        pipelineName = pipelineNameDecoded
        let pipelineActivitiesContainer = try containerValues.decodeIfPresent([IoTAnalyticsClientTypes.PipelineActivity?].self, forKey: .pipelineActivities)
        var pipelineActivitiesDecoded0:[IoTAnalyticsClientTypes.PipelineActivity]? = nil
        if let pipelineActivitiesContainer = pipelineActivitiesContainer {
            pipelineActivitiesDecoded0 = [IoTAnalyticsClientTypes.PipelineActivity]()
            for structure0 in pipelineActivitiesContainer {
                if let structure0 = structure0 {
                    pipelineActivitiesDecoded0?.append(structure0)
                }
            }
        }
        pipelineActivities = pipelineActivitiesDecoded0
        let tagsContainer = try containerValues.decodeIfPresent([IoTAnalyticsClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[IoTAnalyticsClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [IoTAnalyticsClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}
