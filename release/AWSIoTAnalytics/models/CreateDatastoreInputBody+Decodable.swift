// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateDatastoreInputBody: Swift.Equatable {
    let datastoreName: Swift.String?
    let datastoreStorage: IoTAnalyticsClientTypes.DatastoreStorage?
    let retentionPeriod: IoTAnalyticsClientTypes.RetentionPeriod?
    let tags: [IoTAnalyticsClientTypes.Tag]?
    let fileFormatConfiguration: IoTAnalyticsClientTypes.FileFormatConfiguration?
    let datastorePartitions: IoTAnalyticsClientTypes.DatastorePartitions?
}

extension CreateDatastoreInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case datastoreName
        case datastorePartitions
        case datastoreStorage
        case fileFormatConfiguration
        case retentionPeriod
        case tags
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let datastoreNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .datastoreName)
        datastoreName = datastoreNameDecoded
        let datastoreStorageDecoded = try containerValues.decodeIfPresent(IoTAnalyticsClientTypes.DatastoreStorage.self, forKey: .datastoreStorage)
        datastoreStorage = datastoreStorageDecoded
        let retentionPeriodDecoded = try containerValues.decodeIfPresent(IoTAnalyticsClientTypes.RetentionPeriod.self, forKey: .retentionPeriod)
        retentionPeriod = retentionPeriodDecoded
        let tagsContainer = try containerValues.decodeIfPresent([IoTAnalyticsClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[IoTAnalyticsClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [IoTAnalyticsClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let fileFormatConfigurationDecoded = try containerValues.decodeIfPresent(IoTAnalyticsClientTypes.FileFormatConfiguration.self, forKey: .fileFormatConfiguration)
        fileFormatConfiguration = fileFormatConfigurationDecoded
        let datastorePartitionsDecoded = try containerValues.decodeIfPresent(IoTAnalyticsClientTypes.DatastorePartitions.self, forKey: .datastorePartitions)
        datastorePartitions = datastorePartitionsDecoded
    }
}
