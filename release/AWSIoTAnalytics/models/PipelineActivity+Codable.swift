// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension IoTAnalyticsClientTypes.PipelineActivity: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case addAttributes
        case channel
        case datastore
        case deviceRegistryEnrich
        case deviceShadowEnrich
        case filter
        case lambda
        case math
        case removeAttributes
        case selectAttributes
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let addAttributes = self.addAttributes {
            try encodeContainer.encode(addAttributes, forKey: .addAttributes)
        }
        if let channel = self.channel {
            try encodeContainer.encode(channel, forKey: .channel)
        }
        if let datastore = self.datastore {
            try encodeContainer.encode(datastore, forKey: .datastore)
        }
        if let deviceRegistryEnrich = self.deviceRegistryEnrich {
            try encodeContainer.encode(deviceRegistryEnrich, forKey: .deviceRegistryEnrich)
        }
        if let deviceShadowEnrich = self.deviceShadowEnrich {
            try encodeContainer.encode(deviceShadowEnrich, forKey: .deviceShadowEnrich)
        }
        if let filter = self.filter {
            try encodeContainer.encode(filter, forKey: .filter)
        }
        if let lambda = self.lambda {
            try encodeContainer.encode(lambda, forKey: .lambda)
        }
        if let math = self.math {
            try encodeContainer.encode(math, forKey: .math)
        }
        if let removeAttributes = self.removeAttributes {
            try encodeContainer.encode(removeAttributes, forKey: .removeAttributes)
        }
        if let selectAttributes = self.selectAttributes {
            try encodeContainer.encode(selectAttributes, forKey: .selectAttributes)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let channelDecoded = try containerValues.decodeIfPresent(IoTAnalyticsClientTypes.ChannelActivity.self, forKey: .channel)
        channel = channelDecoded
        let lambdaDecoded = try containerValues.decodeIfPresent(IoTAnalyticsClientTypes.LambdaActivity.self, forKey: .lambda)
        lambda = lambdaDecoded
        let datastoreDecoded = try containerValues.decodeIfPresent(IoTAnalyticsClientTypes.DatastoreActivity.self, forKey: .datastore)
        datastore = datastoreDecoded
        let addAttributesDecoded = try containerValues.decodeIfPresent(IoTAnalyticsClientTypes.AddAttributesActivity.self, forKey: .addAttributes)
        addAttributes = addAttributesDecoded
        let removeAttributesDecoded = try containerValues.decodeIfPresent(IoTAnalyticsClientTypes.RemoveAttributesActivity.self, forKey: .removeAttributes)
        removeAttributes = removeAttributesDecoded
        let selectAttributesDecoded = try containerValues.decodeIfPresent(IoTAnalyticsClientTypes.SelectAttributesActivity.self, forKey: .selectAttributes)
        selectAttributes = selectAttributesDecoded
        let filterDecoded = try containerValues.decodeIfPresent(IoTAnalyticsClientTypes.FilterActivity.self, forKey: .filter)
        filter = filterDecoded
        let mathDecoded = try containerValues.decodeIfPresent(IoTAnalyticsClientTypes.MathActivity.self, forKey: .math)
        math = mathDecoded
        let deviceRegistryEnrichDecoded = try containerValues.decodeIfPresent(IoTAnalyticsClientTypes.DeviceRegistryEnrichActivity.self, forKey: .deviceRegistryEnrich)
        deviceRegistryEnrich = deviceRegistryEnrichDecoded
        let deviceShadowEnrichDecoded = try containerValues.decodeIfPresent(IoTAnalyticsClientTypes.DeviceShadowEnrichActivity.self, forKey: .deviceShadowEnrich)
        deviceShadowEnrich = deviceShadowEnrichDecoded
    }
}
