// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct CreateDatastoreInput: Swift.Equatable {
    /// The name of the data store.
    /// This member is required.
    public var datastoreName: Swift.String?
    /// Contains information about the partition dimensions in a data store.
    public var datastorePartitions: IoTAnalyticsClientTypes.DatastorePartitions?
    /// Where data in a data store is stored.. You can choose serviceManagedS3 storage, customerManagedS3 storage, or iotSiteWiseMultiLayerStorage storage. The default is serviceManagedS3. You can't change the choice of Amazon S3 storage after your data store is created.
    public var datastoreStorage: IoTAnalyticsClientTypes.DatastoreStorage?
    /// Contains the configuration information of file formats. IoT Analytics data stores support JSON and [Parquet](https://parquet.apache.org/). The default file format is JSON. You can specify only one format. You can't change the file format after you create the data store.
    public var fileFormatConfiguration: IoTAnalyticsClientTypes.FileFormatConfiguration?
    /// How long, in days, message data is kept for the data store. When customerManagedS3 storage is selected, this parameter is ignored.
    public var retentionPeriod: IoTAnalyticsClientTypes.RetentionPeriod?
    /// Metadata which can be used to manage the data store.
    public var tags: [IoTAnalyticsClientTypes.Tag]?

    public init (
        datastoreName: Swift.String? = nil,
        datastorePartitions: IoTAnalyticsClientTypes.DatastorePartitions? = nil,
        datastoreStorage: IoTAnalyticsClientTypes.DatastoreStorage? = nil,
        fileFormatConfiguration: IoTAnalyticsClientTypes.FileFormatConfiguration? = nil,
        retentionPeriod: IoTAnalyticsClientTypes.RetentionPeriod? = nil,
        tags: [IoTAnalyticsClientTypes.Tag]? = nil
    )
    {
        self.datastoreName = datastoreName
        self.datastorePartitions = datastorePartitions
        self.datastoreStorage = datastoreStorage
        self.fileFormatConfiguration = fileFormatConfiguration
        self.retentionPeriod = retentionPeriod
        self.tags = tags
    }
}
