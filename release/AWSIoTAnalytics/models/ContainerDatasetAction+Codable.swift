// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension IoTAnalyticsClientTypes.ContainerDatasetAction: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case executionRoleArn
        case image
        case resourceConfiguration
        case variables
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let executionRoleArn = self.executionRoleArn {
            try encodeContainer.encode(executionRoleArn, forKey: .executionRoleArn)
        }
        if let image = self.image {
            try encodeContainer.encode(image, forKey: .image)
        }
        if let resourceConfiguration = self.resourceConfiguration {
            try encodeContainer.encode(resourceConfiguration, forKey: .resourceConfiguration)
        }
        if let variables = variables {
            var variablesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .variables)
            for variables0 in variables {
                try variablesContainer.encode(variables0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let imageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .image)
        image = imageDecoded
        let executionRoleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .executionRoleArn)
        executionRoleArn = executionRoleArnDecoded
        let resourceConfigurationDecoded = try containerValues.decodeIfPresent(IoTAnalyticsClientTypes.ResourceConfiguration.self, forKey: .resourceConfiguration)
        resourceConfiguration = resourceConfigurationDecoded
        let variablesContainer = try containerValues.decodeIfPresent([IoTAnalyticsClientTypes.Variable?].self, forKey: .variables)
        var variablesDecoded0:[IoTAnalyticsClientTypes.Variable]? = nil
        if let variablesContainer = variablesContainer {
            variablesDecoded0 = [IoTAnalyticsClientTypes.Variable]()
            for structure0 in variablesContainer {
                if let structure0 = structure0 {
                    variablesDecoded0?.append(structure0)
                }
            }
        }
        variables = variablesDecoded0
    }
}
