// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension IoTAnalyticsClientTypes.DatastoreSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTime
        case datastoreName
        case datastorePartitions
        case datastoreStorage
        case fileFormatType
        case lastMessageArrivalTime
        case lastUpdateTime
        case status
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationTime = self.creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let datastoreName = self.datastoreName {
            try encodeContainer.encode(datastoreName, forKey: .datastoreName)
        }
        if let datastorePartitions = self.datastorePartitions {
            try encodeContainer.encode(datastorePartitions, forKey: .datastorePartitions)
        }
        if let datastoreStorage = self.datastoreStorage {
            try encodeContainer.encode(datastoreStorage, forKey: .datastoreStorage)
        }
        if let fileFormatType = self.fileFormatType {
            try encodeContainer.encode(fileFormatType.rawValue, forKey: .fileFormatType)
        }
        if let lastMessageArrivalTime = self.lastMessageArrivalTime {
            try encodeContainer.encode(lastMessageArrivalTime.timeIntervalSince1970, forKey: .lastMessageArrivalTime)
        }
        if let lastUpdateTime = self.lastUpdateTime {
            try encodeContainer.encode(lastUpdateTime.timeIntervalSince1970, forKey: .lastUpdateTime)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let datastoreNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .datastoreName)
        datastoreName = datastoreNameDecoded
        let datastoreStorageDecoded = try containerValues.decodeIfPresent(IoTAnalyticsClientTypes.DatastoreStorageSummary.self, forKey: .datastoreStorage)
        datastoreStorage = datastoreStorageDecoded
        let statusDecoded = try containerValues.decodeIfPresent(IoTAnalyticsClientTypes.DatastoreStatus.self, forKey: .status)
        status = statusDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let lastUpdateTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastUpdateTime)
        lastUpdateTime = lastUpdateTimeDecoded
        let lastMessageArrivalTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastMessageArrivalTime)
        lastMessageArrivalTime = lastMessageArrivalTimeDecoded
        let fileFormatTypeDecoded = try containerValues.decodeIfPresent(IoTAnalyticsClientTypes.FileFormatType.self, forKey: .fileFormatType)
        fileFormatType = fileFormatTypeDecoded
        let datastorePartitionsDecoded = try containerValues.decodeIfPresent(IoTAnalyticsClientTypes.DatastorePartitions.self, forKey: .datastorePartitions)
        datastorePartitions = datastorePartitionsDecoded
    }
}
