// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetDASHStreamingSessionURLInputBody: Swift.Equatable {
    let streamName: Swift.String?
    let streamARN: Swift.String?
    let playbackMode: KinesisVideoArchivedMediaClientTypes.DASHPlaybackMode?
    let displayFragmentTimestamp: KinesisVideoArchivedMediaClientTypes.DASHDisplayFragmentTimestamp?
    let displayFragmentNumber: KinesisVideoArchivedMediaClientTypes.DASHDisplayFragmentNumber?
    let dASHFragmentSelector: KinesisVideoArchivedMediaClientTypes.DASHFragmentSelector?
    let expires: Swift.Int?
    let maxManifestFragmentResults: Swift.Int?
}

extension GetDASHStreamingSessionURLInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dASHFragmentSelector = "DASHFragmentSelector"
        case displayFragmentNumber = "DisplayFragmentNumber"
        case displayFragmentTimestamp = "DisplayFragmentTimestamp"
        case expires = "Expires"
        case maxManifestFragmentResults = "MaxManifestFragmentResults"
        case playbackMode = "PlaybackMode"
        case streamARN = "StreamARN"
        case streamName = "StreamName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let streamNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .streamName)
        streamName = streamNameDecoded
        let streamARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .streamARN)
        streamARN = streamARNDecoded
        let playbackModeDecoded = try containerValues.decodeIfPresent(KinesisVideoArchivedMediaClientTypes.DASHPlaybackMode.self, forKey: .playbackMode)
        playbackMode = playbackModeDecoded
        let displayFragmentTimestampDecoded = try containerValues.decodeIfPresent(KinesisVideoArchivedMediaClientTypes.DASHDisplayFragmentTimestamp.self, forKey: .displayFragmentTimestamp)
        displayFragmentTimestamp = displayFragmentTimestampDecoded
        let displayFragmentNumberDecoded = try containerValues.decodeIfPresent(KinesisVideoArchivedMediaClientTypes.DASHDisplayFragmentNumber.self, forKey: .displayFragmentNumber)
        displayFragmentNumber = displayFragmentNumberDecoded
        let dASHFragmentSelectorDecoded = try containerValues.decodeIfPresent(KinesisVideoArchivedMediaClientTypes.DASHFragmentSelector.self, forKey: .dASHFragmentSelector)
        dASHFragmentSelector = dASHFragmentSelectorDecoded
        let expiresDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .expires)
        expires = expiresDecoded
        let maxManifestFragmentResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxManifestFragmentResults)
        maxManifestFragmentResults = maxManifestFragmentResultsDecoded
    }
}
