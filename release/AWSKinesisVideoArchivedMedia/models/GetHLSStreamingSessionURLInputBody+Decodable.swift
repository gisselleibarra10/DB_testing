// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetHLSStreamingSessionURLInputBody: Swift.Equatable {
    let streamName: Swift.String?
    let streamARN: Swift.String?
    let playbackMode: KinesisVideoArchivedMediaClientTypes.HLSPlaybackMode?
    let hLSFragmentSelector: KinesisVideoArchivedMediaClientTypes.HLSFragmentSelector?
    let containerFormat: KinesisVideoArchivedMediaClientTypes.ContainerFormat?
    let discontinuityMode: KinesisVideoArchivedMediaClientTypes.HLSDiscontinuityMode?
    let displayFragmentTimestamp: KinesisVideoArchivedMediaClientTypes.HLSDisplayFragmentTimestamp?
    let expires: Swift.Int?
    let maxMediaPlaylistFragmentResults: Swift.Int?
}

extension GetHLSStreamingSessionURLInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case containerFormat = "ContainerFormat"
        case discontinuityMode = "DiscontinuityMode"
        case displayFragmentTimestamp = "DisplayFragmentTimestamp"
        case expires = "Expires"
        case hLSFragmentSelector = "HLSFragmentSelector"
        case maxMediaPlaylistFragmentResults = "MaxMediaPlaylistFragmentResults"
        case playbackMode = "PlaybackMode"
        case streamARN = "StreamARN"
        case streamName = "StreamName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let streamNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .streamName)
        streamName = streamNameDecoded
        let streamARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .streamARN)
        streamARN = streamARNDecoded
        let playbackModeDecoded = try containerValues.decodeIfPresent(KinesisVideoArchivedMediaClientTypes.HLSPlaybackMode.self, forKey: .playbackMode)
        playbackMode = playbackModeDecoded
        let hLSFragmentSelectorDecoded = try containerValues.decodeIfPresent(KinesisVideoArchivedMediaClientTypes.HLSFragmentSelector.self, forKey: .hLSFragmentSelector)
        hLSFragmentSelector = hLSFragmentSelectorDecoded
        let containerFormatDecoded = try containerValues.decodeIfPresent(KinesisVideoArchivedMediaClientTypes.ContainerFormat.self, forKey: .containerFormat)
        containerFormat = containerFormatDecoded
        let discontinuityModeDecoded = try containerValues.decodeIfPresent(KinesisVideoArchivedMediaClientTypes.HLSDiscontinuityMode.self, forKey: .discontinuityMode)
        discontinuityMode = discontinuityModeDecoded
        let displayFragmentTimestampDecoded = try containerValues.decodeIfPresent(KinesisVideoArchivedMediaClientTypes.HLSDisplayFragmentTimestamp.self, forKey: .displayFragmentTimestamp)
        displayFragmentTimestamp = displayFragmentTimestampDecoded
        let expiresDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .expires)
        expires = expiresDecoded
        let maxMediaPlaylistFragmentResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxMediaPlaylistFragmentResults)
        maxMediaPlaylistFragmentResults = maxMediaPlaylistFragmentResultsDecoded
    }
}
