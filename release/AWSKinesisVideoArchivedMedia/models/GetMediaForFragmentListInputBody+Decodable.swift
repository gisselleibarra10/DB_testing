// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetMediaForFragmentListInputBody: Swift.Equatable {
    let streamName: Swift.String?
    let streamARN: Swift.String?
    let fragments: [Swift.String]?
}

extension GetMediaForFragmentListInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case fragments = "Fragments"
        case streamARN = "StreamARN"
        case streamName = "StreamName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let streamNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .streamName)
        streamName = streamNameDecoded
        let streamARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .streamARN)
        streamARN = streamARNDecoded
        let fragmentsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .fragments)
        var fragmentsDecoded0:[Swift.String]? = nil
        if let fragmentsContainer = fragmentsContainer {
            fragmentsDecoded0 = [Swift.String]()
            for string0 in fragmentsContainer {
                if let string0 = string0 {
                    fragmentsDecoded0?.append(string0)
                }
            }
        }
        fragments = fragmentsDecoded0
    }
}
