// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension GetImagesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case endTimestamp = "EndTimestamp"
        case format = "Format"
        case formatConfig = "FormatConfig"
        case heightPixels = "HeightPixels"
        case imageSelectorType = "ImageSelectorType"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case samplingInterval = "SamplingInterval"
        case startTimestamp = "StartTimestamp"
        case streamARN = "StreamARN"
        case streamName = "StreamName"
        case widthPixels = "WidthPixels"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let endTimestamp = self.endTimestamp {
            try encodeContainer.encode(endTimestamp.timeIntervalSince1970, forKey: .endTimestamp)
        }
        if let format = self.format {
            try encodeContainer.encode(format.rawValue, forKey: .format)
        }
        if let formatConfig = formatConfig {
            var formatConfigContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .formatConfig)
            for (dictKey0, formatconfig0) in formatConfig {
                try formatConfigContainer.encode(formatconfig0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let heightPixels = self.heightPixels {
            try encodeContainer.encode(heightPixels, forKey: .heightPixels)
        }
        if let imageSelectorType = self.imageSelectorType {
            try encodeContainer.encode(imageSelectorType.rawValue, forKey: .imageSelectorType)
        }
        if let maxResults = self.maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let samplingInterval = self.samplingInterval {
            try encodeContainer.encode(samplingInterval, forKey: .samplingInterval)
        }
        if let startTimestamp = self.startTimestamp {
            try encodeContainer.encode(startTimestamp.timeIntervalSince1970, forKey: .startTimestamp)
        }
        if let streamARN = self.streamARN {
            try encodeContainer.encode(streamARN, forKey: .streamARN)
        }
        if let streamName = self.streamName {
            try encodeContainer.encode(streamName, forKey: .streamName)
        }
        if let widthPixels = self.widthPixels {
            try encodeContainer.encode(widthPixels, forKey: .widthPixels)
        }
    }
}
