// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension GetHLSStreamingSessionURLInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case containerFormat = "ContainerFormat"
        case discontinuityMode = "DiscontinuityMode"
        case displayFragmentTimestamp = "DisplayFragmentTimestamp"
        case expires = "Expires"
        case hLSFragmentSelector = "HLSFragmentSelector"
        case maxMediaPlaylistFragmentResults = "MaxMediaPlaylistFragmentResults"
        case playbackMode = "PlaybackMode"
        case streamARN = "StreamARN"
        case streamName = "StreamName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let containerFormat = self.containerFormat {
            try encodeContainer.encode(containerFormat.rawValue, forKey: .containerFormat)
        }
        if let discontinuityMode = self.discontinuityMode {
            try encodeContainer.encode(discontinuityMode.rawValue, forKey: .discontinuityMode)
        }
        if let displayFragmentTimestamp = self.displayFragmentTimestamp {
            try encodeContainer.encode(displayFragmentTimestamp.rawValue, forKey: .displayFragmentTimestamp)
        }
        if let expires = self.expires {
            try encodeContainer.encode(expires, forKey: .expires)
        }
        if let hLSFragmentSelector = self.hLSFragmentSelector {
            try encodeContainer.encode(hLSFragmentSelector, forKey: .hLSFragmentSelector)
        }
        if let maxMediaPlaylistFragmentResults = self.maxMediaPlaylistFragmentResults {
            try encodeContainer.encode(maxMediaPlaylistFragmentResults, forKey: .maxMediaPlaylistFragmentResults)
        }
        if let playbackMode = self.playbackMode {
            try encodeContainer.encode(playbackMode.rawValue, forKey: .playbackMode)
        }
        if let streamARN = self.streamARN {
            try encodeContainer.encode(streamARN, forKey: .streamARN)
        }
        if let streamName = self.streamName {
            try encodeContainer.encode(streamName, forKey: .streamName)
        }
    }
}
