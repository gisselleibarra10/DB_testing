// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetImagesInputBody: Swift.Equatable {
    let streamName: Swift.String?
    let streamARN: Swift.String?
    let imageSelectorType: KinesisVideoArchivedMediaClientTypes.ImageSelectorType?
    let startTimestamp: ClientRuntime.Date?
    let endTimestamp: ClientRuntime.Date?
    let samplingInterval: Swift.Int?
    let format: KinesisVideoArchivedMediaClientTypes.Format?
    let formatConfig: [Swift.String:Swift.String]?
    let widthPixels: Swift.Int?
    let heightPixels: Swift.Int?
    let maxResults: Swift.Int?
    let nextToken: Swift.String?
}

extension GetImagesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case endTimestamp = "EndTimestamp"
        case format = "Format"
        case formatConfig = "FormatConfig"
        case heightPixels = "HeightPixels"
        case imageSelectorType = "ImageSelectorType"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case samplingInterval = "SamplingInterval"
        case startTimestamp = "StartTimestamp"
        case streamARN = "StreamARN"
        case streamName = "StreamName"
        case widthPixels = "WidthPixels"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let streamNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .streamName)
        streamName = streamNameDecoded
        let streamARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .streamARN)
        streamARN = streamARNDecoded
        let imageSelectorTypeDecoded = try containerValues.decodeIfPresent(KinesisVideoArchivedMediaClientTypes.ImageSelectorType.self, forKey: .imageSelectorType)
        imageSelectorType = imageSelectorTypeDecoded
        let startTimestampDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .startTimestamp)
        startTimestamp = startTimestampDecoded
        let endTimestampDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .endTimestamp)
        endTimestamp = endTimestampDecoded
        let samplingIntervalDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .samplingInterval)
        samplingInterval = samplingIntervalDecoded
        let formatDecoded = try containerValues.decodeIfPresent(KinesisVideoArchivedMediaClientTypes.Format.self, forKey: .format)
        format = formatDecoded
        let formatConfigContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .formatConfig)
        var formatConfigDecoded0: [Swift.String:Swift.String]? = nil
        if let formatConfigContainer = formatConfigContainer {
            formatConfigDecoded0 = [Swift.String:Swift.String]()
            for (key0, formatconfigvalue0) in formatConfigContainer {
                if let formatconfigvalue0 = formatconfigvalue0 {
                    formatConfigDecoded0?[key0] = formatconfigvalue0
                }
            }
        }
        formatConfig = formatConfigDecoded0
        let widthPixelsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .widthPixels)
        widthPixels = widthPixelsDecoded
        let heightPixelsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .heightPixels)
        heightPixels = heightPixelsDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
