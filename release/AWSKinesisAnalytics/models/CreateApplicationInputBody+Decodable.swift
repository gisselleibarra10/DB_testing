// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateApplicationInputBody: Swift.Equatable {
    let applicationName: Swift.String?
    let applicationDescription: Swift.String?
    let inputs: [KinesisAnalyticsClientTypes.Input]?
    let outputs: [KinesisAnalyticsClientTypes.Output]?
    let cloudWatchLoggingOptions: [KinesisAnalyticsClientTypes.CloudWatchLoggingOption]?
    let applicationCode: Swift.String?
    let tags: [KinesisAnalyticsClientTypes.Tag]?
}

extension CreateApplicationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applicationCode = "ApplicationCode"
        case applicationDescription = "ApplicationDescription"
        case applicationName = "ApplicationName"
        case cloudWatchLoggingOptions = "CloudWatchLoggingOptions"
        case inputs = "Inputs"
        case outputs = "Outputs"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let applicationNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .applicationName)
        applicationName = applicationNameDecoded
        let applicationDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .applicationDescription)
        applicationDescription = applicationDescriptionDecoded
        let inputsContainer = try containerValues.decodeIfPresent([KinesisAnalyticsClientTypes.Input?].self, forKey: .inputs)
        var inputsDecoded0:[KinesisAnalyticsClientTypes.Input]? = nil
        if let inputsContainer = inputsContainer {
            inputsDecoded0 = [KinesisAnalyticsClientTypes.Input]()
            for structure0 in inputsContainer {
                if let structure0 = structure0 {
                    inputsDecoded0?.append(structure0)
                }
            }
        }
        inputs = inputsDecoded0
        let outputsContainer = try containerValues.decodeIfPresent([KinesisAnalyticsClientTypes.Output?].self, forKey: .outputs)
        var outputsDecoded0:[KinesisAnalyticsClientTypes.Output]? = nil
        if let outputsContainer = outputsContainer {
            outputsDecoded0 = [KinesisAnalyticsClientTypes.Output]()
            for structure0 in outputsContainer {
                if let structure0 = structure0 {
                    outputsDecoded0?.append(structure0)
                }
            }
        }
        outputs = outputsDecoded0
        let cloudWatchLoggingOptionsContainer = try containerValues.decodeIfPresent([KinesisAnalyticsClientTypes.CloudWatchLoggingOption?].self, forKey: .cloudWatchLoggingOptions)
        var cloudWatchLoggingOptionsDecoded0:[KinesisAnalyticsClientTypes.CloudWatchLoggingOption]? = nil
        if let cloudWatchLoggingOptionsContainer = cloudWatchLoggingOptionsContainer {
            cloudWatchLoggingOptionsDecoded0 = [KinesisAnalyticsClientTypes.CloudWatchLoggingOption]()
            for structure0 in cloudWatchLoggingOptionsContainer {
                if let structure0 = structure0 {
                    cloudWatchLoggingOptionsDecoded0?.append(structure0)
                }
            }
        }
        cloudWatchLoggingOptions = cloudWatchLoggingOptionsDecoded0
        let applicationCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .applicationCode)
        applicationCode = applicationCodeDecoded
        let tagsContainer = try containerValues.decodeIfPresent([KinesisAnalyticsClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[KinesisAnalyticsClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [KinesisAnalyticsClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}
