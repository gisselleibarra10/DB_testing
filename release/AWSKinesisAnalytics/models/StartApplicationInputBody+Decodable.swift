// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct StartApplicationInputBody: Swift.Equatable {
    let applicationName: Swift.String?
    let inputConfigurations: [KinesisAnalyticsClientTypes.InputConfiguration]?
}

extension StartApplicationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applicationName = "ApplicationName"
        case inputConfigurations = "InputConfigurations"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let applicationNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .applicationName)
        applicationName = applicationNameDecoded
        let inputConfigurationsContainer = try containerValues.decodeIfPresent([KinesisAnalyticsClientTypes.InputConfiguration?].self, forKey: .inputConfigurations)
        var inputConfigurationsDecoded0:[KinesisAnalyticsClientTypes.InputConfiguration]? = nil
        if let inputConfigurationsContainer = inputConfigurationsContainer {
            inputConfigurationsDecoded0 = [KinesisAnalyticsClientTypes.InputConfiguration]()
            for structure0 in inputConfigurationsContainer {
                if let structure0 = structure0 {
                    inputConfigurationsDecoded0?.append(structure0)
                }
            }
        }
        inputConfigurations = inputConfigurationsDecoded0
    }
}
