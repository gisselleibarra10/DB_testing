// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeScheduledActionsInputBody: Swift.Equatable {
    let scheduledActionNames: [Swift.String]?
    let serviceNamespace: ApplicationAutoScalingClientTypes.ServiceNamespace?
    let resourceId: Swift.String?
    let scalableDimension: ApplicationAutoScalingClientTypes.ScalableDimension?
    let maxResults: Swift.Int?
    let nextToken: Swift.String?
}

extension DescribeScheduledActionsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case resourceId = "ResourceId"
        case scalableDimension = "ScalableDimension"
        case scheduledActionNames = "ScheduledActionNames"
        case serviceNamespace = "ServiceNamespace"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let scheduledActionNamesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .scheduledActionNames)
        var scheduledActionNamesDecoded0:[Swift.String]? = nil
        if let scheduledActionNamesContainer = scheduledActionNamesContainer {
            scheduledActionNamesDecoded0 = [Swift.String]()
            for string0 in scheduledActionNamesContainer {
                if let string0 = string0 {
                    scheduledActionNamesDecoded0?.append(string0)
                }
            }
        }
        scheduledActionNames = scheduledActionNamesDecoded0
        let serviceNamespaceDecoded = try containerValues.decodeIfPresent(ApplicationAutoScalingClientTypes.ServiceNamespace.self, forKey: .serviceNamespace)
        serviceNamespace = serviceNamespaceDecoded
        let resourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceId)
        resourceId = resourceIdDecoded
        let scalableDimensionDecoded = try containerValues.decodeIfPresent(ApplicationAutoScalingClientTypes.ScalableDimension.self, forKey: .scalableDimension)
        scalableDimension = scalableDimensionDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
