// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct PutScheduledActionInputBody: Swift.Equatable {
    let serviceNamespace: ApplicationAutoScalingClientTypes.ServiceNamespace?
    let schedule: Swift.String?
    let timezone: Swift.String?
    let scheduledActionName: Swift.String?
    let resourceId: Swift.String?
    let scalableDimension: ApplicationAutoScalingClientTypes.ScalableDimension?
    let startTime: ClientRuntime.Date?
    let endTime: ClientRuntime.Date?
    let scalableTargetAction: ApplicationAutoScalingClientTypes.ScalableTargetAction?
}

extension PutScheduledActionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case endTime = "EndTime"
        case resourceId = "ResourceId"
        case scalableDimension = "ScalableDimension"
        case scalableTargetAction = "ScalableTargetAction"
        case schedule = "Schedule"
        case scheduledActionName = "ScheduledActionName"
        case serviceNamespace = "ServiceNamespace"
        case startTime = "StartTime"
        case timezone = "Timezone"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let serviceNamespaceDecoded = try containerValues.decodeIfPresent(ApplicationAutoScalingClientTypes.ServiceNamespace.self, forKey: .serviceNamespace)
        serviceNamespace = serviceNamespaceDecoded
        let scheduleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .schedule)
        schedule = scheduleDecoded
        let timezoneDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .timezone)
        timezone = timezoneDecoded
        let scheduledActionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .scheduledActionName)
        scheduledActionName = scheduledActionNameDecoded
        let resourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceId)
        resourceId = resourceIdDecoded
        let scalableDimensionDecoded = try containerValues.decodeIfPresent(ApplicationAutoScalingClientTypes.ScalableDimension.self, forKey: .scalableDimension)
        scalableDimension = scalableDimensionDecoded
        let startTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .startTime)
        startTime = startTimeDecoded
        let endTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .endTime)
        endTime = endTimeDecoded
        let scalableTargetActionDecoded = try containerValues.decodeIfPresent(ApplicationAutoScalingClientTypes.ScalableTargetAction.self, forKey: .scalableTargetAction)
        scalableTargetAction = scalableTargetActionDecoded
    }
}
