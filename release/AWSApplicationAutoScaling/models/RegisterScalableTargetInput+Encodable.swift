// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension RegisterScalableTargetInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxCapacity = "MaxCapacity"
        case minCapacity = "MinCapacity"
        case resourceId = "ResourceId"
        case roleARN = "RoleARN"
        case scalableDimension = "ScalableDimension"
        case serviceNamespace = "ServiceNamespace"
        case suspendedState = "SuspendedState"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let maxCapacity = self.maxCapacity {
            try encodeContainer.encode(maxCapacity, forKey: .maxCapacity)
        }
        if let minCapacity = self.minCapacity {
            try encodeContainer.encode(minCapacity, forKey: .minCapacity)
        }
        if let resourceId = self.resourceId {
            try encodeContainer.encode(resourceId, forKey: .resourceId)
        }
        if let roleARN = self.roleARN {
            try encodeContainer.encode(roleARN, forKey: .roleARN)
        }
        if let scalableDimension = self.scalableDimension {
            try encodeContainer.encode(scalableDimension.rawValue, forKey: .scalableDimension)
        }
        if let serviceNamespace = self.serviceNamespace {
            try encodeContainer.encode(serviceNamespace.rawValue, forKey: .serviceNamespace)
        }
        if let suspendedState = self.suspendedState {
            try encodeContainer.encode(suspendedState, forKey: .suspendedState)
        }
    }
}
