// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension PutScheduledActionInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case endTime = "EndTime"
        case resourceId = "ResourceId"
        case scalableDimension = "ScalableDimension"
        case scalableTargetAction = "ScalableTargetAction"
        case schedule = "Schedule"
        case scheduledActionName = "ScheduledActionName"
        case serviceNamespace = "ServiceNamespace"
        case startTime = "StartTime"
        case timezone = "Timezone"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let endTime = self.endTime {
            try encodeContainer.encode(endTime.timeIntervalSince1970, forKey: .endTime)
        }
        if let resourceId = self.resourceId {
            try encodeContainer.encode(resourceId, forKey: .resourceId)
        }
        if let scalableDimension = self.scalableDimension {
            try encodeContainer.encode(scalableDimension.rawValue, forKey: .scalableDimension)
        }
        if let scalableTargetAction = self.scalableTargetAction {
            try encodeContainer.encode(scalableTargetAction, forKey: .scalableTargetAction)
        }
        if let schedule = self.schedule {
            try encodeContainer.encode(schedule, forKey: .schedule)
        }
        if let scheduledActionName = self.scheduledActionName {
            try encodeContainer.encode(scheduledActionName, forKey: .scheduledActionName)
        }
        if let serviceNamespace = self.serviceNamespace {
            try encodeContainer.encode(serviceNamespace.rawValue, forKey: .serviceNamespace)
        }
        if let startTime = self.startTime {
            try encodeContainer.encode(startTime.timeIntervalSince1970, forKey: .startTime)
        }
        if let timezone = self.timezone {
            try encodeContainer.encode(timezone, forKey: .timezone)
        }
    }
}
