// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ApplicationAutoScalingClientTypes.ScalingPolicy: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case alarms = "Alarms"
        case creationTime = "CreationTime"
        case policyARN = "PolicyARN"
        case policyName = "PolicyName"
        case policyType = "PolicyType"
        case resourceId = "ResourceId"
        case scalableDimension = "ScalableDimension"
        case serviceNamespace = "ServiceNamespace"
        case stepScalingPolicyConfiguration = "StepScalingPolicyConfiguration"
        case targetTrackingScalingPolicyConfiguration = "TargetTrackingScalingPolicyConfiguration"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let alarms = alarms {
            var alarmsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .alarms)
            for alarms0 in alarms {
                try alarmsContainer.encode(alarms0)
            }
        }
        if let creationTime = self.creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let policyARN = self.policyARN {
            try encodeContainer.encode(policyARN, forKey: .policyARN)
        }
        if let policyName = self.policyName {
            try encodeContainer.encode(policyName, forKey: .policyName)
        }
        if let policyType = self.policyType {
            try encodeContainer.encode(policyType.rawValue, forKey: .policyType)
        }
        if let resourceId = self.resourceId {
            try encodeContainer.encode(resourceId, forKey: .resourceId)
        }
        if let scalableDimension = self.scalableDimension {
            try encodeContainer.encode(scalableDimension.rawValue, forKey: .scalableDimension)
        }
        if let serviceNamespace = self.serviceNamespace {
            try encodeContainer.encode(serviceNamespace.rawValue, forKey: .serviceNamespace)
        }
        if let stepScalingPolicyConfiguration = self.stepScalingPolicyConfiguration {
            try encodeContainer.encode(stepScalingPolicyConfiguration, forKey: .stepScalingPolicyConfiguration)
        }
        if let targetTrackingScalingPolicyConfiguration = self.targetTrackingScalingPolicyConfiguration {
            try encodeContainer.encode(targetTrackingScalingPolicyConfiguration, forKey: .targetTrackingScalingPolicyConfiguration)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let policyARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policyARN)
        policyARN = policyARNDecoded
        let policyNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policyName)
        policyName = policyNameDecoded
        let serviceNamespaceDecoded = try containerValues.decodeIfPresent(ApplicationAutoScalingClientTypes.ServiceNamespace.self, forKey: .serviceNamespace)
        serviceNamespace = serviceNamespaceDecoded
        let resourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceId)
        resourceId = resourceIdDecoded
        let scalableDimensionDecoded = try containerValues.decodeIfPresent(ApplicationAutoScalingClientTypes.ScalableDimension.self, forKey: .scalableDimension)
        scalableDimension = scalableDimensionDecoded
        let policyTypeDecoded = try containerValues.decodeIfPresent(ApplicationAutoScalingClientTypes.PolicyType.self, forKey: .policyType)
        policyType = policyTypeDecoded
        let stepScalingPolicyConfigurationDecoded = try containerValues.decodeIfPresent(ApplicationAutoScalingClientTypes.StepScalingPolicyConfiguration.self, forKey: .stepScalingPolicyConfiguration)
        stepScalingPolicyConfiguration = stepScalingPolicyConfigurationDecoded
        let targetTrackingScalingPolicyConfigurationDecoded = try containerValues.decodeIfPresent(ApplicationAutoScalingClientTypes.TargetTrackingScalingPolicyConfiguration.self, forKey: .targetTrackingScalingPolicyConfiguration)
        targetTrackingScalingPolicyConfiguration = targetTrackingScalingPolicyConfigurationDecoded
        let alarmsContainer = try containerValues.decodeIfPresent([ApplicationAutoScalingClientTypes.Alarm?].self, forKey: .alarms)
        var alarmsDecoded0:[ApplicationAutoScalingClientTypes.Alarm]? = nil
        if let alarmsContainer = alarmsContainer {
            alarmsDecoded0 = [ApplicationAutoScalingClientTypes.Alarm]()
            for structure0 in alarmsContainer {
                if let structure0 = structure0 {
                    alarmsDecoded0?.append(structure0)
                }
            }
        }
        alarms = alarmsDecoded0
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
    }
}
