// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct RegisterScalableTargetInputBody: Swift.Equatable {
    let serviceNamespace: ApplicationAutoScalingClientTypes.ServiceNamespace?
    let resourceId: Swift.String?
    let scalableDimension: ApplicationAutoScalingClientTypes.ScalableDimension?
    let minCapacity: Swift.Int?
    let maxCapacity: Swift.Int?
    let roleARN: Swift.String?
    let suspendedState: ApplicationAutoScalingClientTypes.SuspendedState?
}

extension RegisterScalableTargetInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxCapacity = "MaxCapacity"
        case minCapacity = "MinCapacity"
        case resourceId = "ResourceId"
        case roleARN = "RoleARN"
        case scalableDimension = "ScalableDimension"
        case serviceNamespace = "ServiceNamespace"
        case suspendedState = "SuspendedState"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let serviceNamespaceDecoded = try containerValues.decodeIfPresent(ApplicationAutoScalingClientTypes.ServiceNamespace.self, forKey: .serviceNamespace)
        serviceNamespace = serviceNamespaceDecoded
        let resourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceId)
        resourceId = resourceIdDecoded
        let scalableDimensionDecoded = try containerValues.decodeIfPresent(ApplicationAutoScalingClientTypes.ScalableDimension.self, forKey: .scalableDimension)
        scalableDimension = scalableDimensionDecoded
        let minCapacityDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .minCapacity)
        minCapacity = minCapacityDecoded
        let maxCapacityDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxCapacity)
        maxCapacity = maxCapacityDecoded
        let roleARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleARN)
        roleARN = roleARNDecoded
        let suspendedStateDecoded = try containerValues.decodeIfPresent(ApplicationAutoScalingClientTypes.SuspendedState.self, forKey: .suspendedState)
        suspendedState = suspendedStateDecoded
    }
}
