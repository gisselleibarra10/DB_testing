// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension ApplicationAutoScalingClientTypes {
    public enum ServiceNamespace: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case appstream
        case cassandra
        case comprehend
        case customResource
        case dynamodb
        case ec2
        case ecs
        case elasticache
        case emr
        case kafka
        case lambda
        case neptune
        case rds
        case sagemaker
        case sdkUnknown(Swift.String)

        public static var allCases: [ServiceNamespace] {
            return [
                .appstream,
                .cassandra,
                .comprehend,
                .customResource,
                .dynamodb,
                .ec2,
                .ecs,
                .elasticache,
                .emr,
                .kafka,
                .lambda,
                .neptune,
                .rds,
                .sagemaker,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .appstream: return "appstream"
            case .cassandra: return "cassandra"
            case .comprehend: return "comprehend"
            case .customResource: return "custom-resource"
            case .dynamodb: return "dynamodb"
            case .ec2: return "ec2"
            case .ecs: return "ecs"
            case .elasticache: return "elasticache"
            case .emr: return "elasticmapreduce"
            case .kafka: return "kafka"
            case .lambda: return "lambda"
            case .neptune: return "neptune"
            case .rds: return "rds"
            case .sagemaker: return "sagemaker"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ServiceNamespace(rawValue: rawValue) ?? ServiceNamespace.sdkUnknown(rawValue)
        }
    }
}
