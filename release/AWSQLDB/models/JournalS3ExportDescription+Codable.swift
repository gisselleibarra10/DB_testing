// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension QldbClientTypes.JournalS3ExportDescription: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case exclusiveEndTime = "ExclusiveEndTime"
        case exportCreationTime = "ExportCreationTime"
        case exportId = "ExportId"
        case inclusiveStartTime = "InclusiveStartTime"
        case ledgerName = "LedgerName"
        case outputFormat = "OutputFormat"
        case roleArn = "RoleArn"
        case s3ExportConfiguration = "S3ExportConfiguration"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let exclusiveEndTime = self.exclusiveEndTime {
            try encodeContainer.encode(exclusiveEndTime.timeIntervalSince1970, forKey: .exclusiveEndTime)
        }
        if let exportCreationTime = self.exportCreationTime {
            try encodeContainer.encode(exportCreationTime.timeIntervalSince1970, forKey: .exportCreationTime)
        }
        if let exportId = self.exportId {
            try encodeContainer.encode(exportId, forKey: .exportId)
        }
        if let inclusiveStartTime = self.inclusiveStartTime {
            try encodeContainer.encode(inclusiveStartTime.timeIntervalSince1970, forKey: .inclusiveStartTime)
        }
        if let ledgerName = self.ledgerName {
            try encodeContainer.encode(ledgerName, forKey: .ledgerName)
        }
        if let outputFormat = self.outputFormat {
            try encodeContainer.encode(outputFormat.rawValue, forKey: .outputFormat)
        }
        if let roleArn = self.roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let s3ExportConfiguration = self.s3ExportConfiguration {
            try encodeContainer.encode(s3ExportConfiguration, forKey: .s3ExportConfiguration)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ledgerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ledgerName)
        ledgerName = ledgerNameDecoded
        let exportIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .exportId)
        exportId = exportIdDecoded
        let exportCreationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .exportCreationTime)
        exportCreationTime = exportCreationTimeDecoded
        let statusDecoded = try containerValues.decodeIfPresent(QldbClientTypes.ExportStatus.self, forKey: .status)
        status = statusDecoded
        let inclusiveStartTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .inclusiveStartTime)
        inclusiveStartTime = inclusiveStartTimeDecoded
        let exclusiveEndTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .exclusiveEndTime)
        exclusiveEndTime = exclusiveEndTimeDecoded
        let s3ExportConfigurationDecoded = try containerValues.decodeIfPresent(QldbClientTypes.S3ExportConfiguration.self, forKey: .s3ExportConfiguration)
        s3ExportConfiguration = s3ExportConfigurationDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let outputFormatDecoded = try containerValues.decodeIfPresent(QldbClientTypes.OutputFormat.self, forKey: .outputFormat)
        outputFormat = outputFormatDecoded
    }
}
