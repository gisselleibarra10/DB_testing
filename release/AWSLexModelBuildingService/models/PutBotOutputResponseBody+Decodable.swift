// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct PutBotOutputResponseBody: Swift.Equatable {
    let name: Swift.String?
    let description: Swift.String?
    let intents: [LexModelBuildingClientTypes.Intent]?
    let enableModelImprovements: Swift.Bool?
    let nluIntentConfidenceThreshold: Swift.Double?
    let clarificationPrompt: LexModelBuildingClientTypes.Prompt?
    let abortStatement: LexModelBuildingClientTypes.Statement?
    let status: LexModelBuildingClientTypes.Status?
    let failureReason: Swift.String?
    let lastUpdatedDate: ClientRuntime.Date?
    let createdDate: ClientRuntime.Date?
    let idleSessionTTLInSeconds: Swift.Int?
    let voiceId: Swift.String?
    let checksum: Swift.String?
    let version: Swift.String?
    let locale: LexModelBuildingClientTypes.Locale?
    let childDirected: Swift.Bool?
    let createVersion: Swift.Bool?
    let detectSentiment: Swift.Bool?
    let tags: [LexModelBuildingClientTypes.Tag]?
}

extension PutBotOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case abortStatement
        case checksum
        case childDirected
        case clarificationPrompt
        case createVersion
        case createdDate
        case description
        case detectSentiment
        case enableModelImprovements
        case failureReason
        case idleSessionTTLInSeconds
        case intents
        case lastUpdatedDate
        case locale
        case name
        case nluIntentConfidenceThreshold
        case status
        case tags
        case version
        case voiceId
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let intentsContainer = try containerValues.decodeIfPresent([LexModelBuildingClientTypes.Intent?].self, forKey: .intents)
        var intentsDecoded0:[LexModelBuildingClientTypes.Intent]? = nil
        if let intentsContainer = intentsContainer {
            intentsDecoded0 = [LexModelBuildingClientTypes.Intent]()
            for structure0 in intentsContainer {
                if let structure0 = structure0 {
                    intentsDecoded0?.append(structure0)
                }
            }
        }
        intents = intentsDecoded0
        let enableModelImprovementsDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enableModelImprovements)
        enableModelImprovements = enableModelImprovementsDecoded
        let nluIntentConfidenceThresholdDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .nluIntentConfidenceThreshold)
        nluIntentConfidenceThreshold = nluIntentConfidenceThresholdDecoded
        let clarificationPromptDecoded = try containerValues.decodeIfPresent(LexModelBuildingClientTypes.Prompt.self, forKey: .clarificationPrompt)
        clarificationPrompt = clarificationPromptDecoded
        let abortStatementDecoded = try containerValues.decodeIfPresent(LexModelBuildingClientTypes.Statement.self, forKey: .abortStatement)
        abortStatement = abortStatementDecoded
        let statusDecoded = try containerValues.decodeIfPresent(LexModelBuildingClientTypes.Status.self, forKey: .status)
        status = statusDecoded
        let failureReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .failureReason)
        failureReason = failureReasonDecoded
        let lastUpdatedDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastUpdatedDate)
        lastUpdatedDate = lastUpdatedDateDecoded
        let createdDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdDate)
        createdDate = createdDateDecoded
        let idleSessionTTLInSecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .idleSessionTTLInSeconds)
        idleSessionTTLInSeconds = idleSessionTTLInSecondsDecoded
        let voiceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .voiceId)
        voiceId = voiceIdDecoded
        let checksumDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .checksum)
        checksum = checksumDecoded
        let versionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .version)
        version = versionDecoded
        let localeDecoded = try containerValues.decodeIfPresent(LexModelBuildingClientTypes.Locale.self, forKey: .locale)
        locale = localeDecoded
        let childDirectedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .childDirected)
        childDirected = childDirectedDecoded
        let createVersionDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .createVersion)
        createVersion = createVersionDecoded
        let detectSentimentDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .detectSentiment)
        detectSentiment = detectSentimentDecoded
        let tagsContainer = try containerValues.decodeIfPresent([LexModelBuildingClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[LexModelBuildingClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [LexModelBuildingClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}
