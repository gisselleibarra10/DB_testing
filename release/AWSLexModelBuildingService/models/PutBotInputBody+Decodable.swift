// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct PutBotInputBody: Swift.Equatable {
    let description: Swift.String?
    let intents: [LexModelBuildingClientTypes.Intent]?
    let enableModelImprovements: Swift.Bool?
    let nluIntentConfidenceThreshold: Swift.Double?
    let clarificationPrompt: LexModelBuildingClientTypes.Prompt?
    let abortStatement: LexModelBuildingClientTypes.Statement?
    let idleSessionTTLInSeconds: Swift.Int?
    let voiceId: Swift.String?
    let checksum: Swift.String?
    let processBehavior: LexModelBuildingClientTypes.ProcessBehavior?
    let locale: LexModelBuildingClientTypes.Locale?
    let childDirected: Swift.Bool?
    let detectSentiment: Swift.Bool?
    let createVersion: Swift.Bool?
    let tags: [LexModelBuildingClientTypes.Tag]?
}

extension PutBotInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case abortStatement
        case checksum
        case childDirected
        case clarificationPrompt
        case createVersion
        case description
        case detectSentiment
        case enableModelImprovements
        case idleSessionTTLInSeconds
        case intents
        case locale
        case nluIntentConfidenceThreshold
        case processBehavior
        case tags
        case voiceId
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let intentsContainer = try containerValues.decodeIfPresent([LexModelBuildingClientTypes.Intent?].self, forKey: .intents)
        var intentsDecoded0:[LexModelBuildingClientTypes.Intent]? = nil
        if let intentsContainer = intentsContainer {
            intentsDecoded0 = [LexModelBuildingClientTypes.Intent]()
            for structure0 in intentsContainer {
                if let structure0 = structure0 {
                    intentsDecoded0?.append(structure0)
                }
            }
        }
        intents = intentsDecoded0
        let enableModelImprovementsDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enableModelImprovements)
        enableModelImprovements = enableModelImprovementsDecoded
        let nluIntentConfidenceThresholdDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .nluIntentConfidenceThreshold)
        nluIntentConfidenceThreshold = nluIntentConfidenceThresholdDecoded
        let clarificationPromptDecoded = try containerValues.decodeIfPresent(LexModelBuildingClientTypes.Prompt.self, forKey: .clarificationPrompt)
        clarificationPrompt = clarificationPromptDecoded
        let abortStatementDecoded = try containerValues.decodeIfPresent(LexModelBuildingClientTypes.Statement.self, forKey: .abortStatement)
        abortStatement = abortStatementDecoded
        let idleSessionTTLInSecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .idleSessionTTLInSeconds)
        idleSessionTTLInSeconds = idleSessionTTLInSecondsDecoded
        let voiceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .voiceId)
        voiceId = voiceIdDecoded
        let checksumDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .checksum)
        checksum = checksumDecoded
        let processBehaviorDecoded = try containerValues.decodeIfPresent(LexModelBuildingClientTypes.ProcessBehavior.self, forKey: .processBehavior)
        processBehavior = processBehaviorDecoded
        let localeDecoded = try containerValues.decodeIfPresent(LexModelBuildingClientTypes.Locale.self, forKey: .locale)
        locale = localeDecoded
        let childDirectedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .childDirected)
        childDirected = childDirectedDecoded
        let detectSentimentDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .detectSentiment)
        detectSentiment = detectSentimentDecoded
        let createVersionDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .createVersion)
        createVersion = createVersionDecoded
        let tagsContainer = try containerValues.decodeIfPresent([LexModelBuildingClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[LexModelBuildingClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [LexModelBuildingClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}
