// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension LexModelBuildingClientTypes.Prompt: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxAttempts
        case messages
        case responseCard
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let maxAttempts = self.maxAttempts {
            try encodeContainer.encode(maxAttempts, forKey: .maxAttempts)
        }
        if let messages = messages {
            var messagesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .messages)
            for messagelist0 in messages {
                try messagesContainer.encode(messagelist0)
            }
        }
        if let responseCard = self.responseCard {
            try encodeContainer.encode(responseCard, forKey: .responseCard)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messagesContainer = try containerValues.decodeIfPresent([LexModelBuildingClientTypes.Message?].self, forKey: .messages)
        var messagesDecoded0:[LexModelBuildingClientTypes.Message]? = nil
        if let messagesContainer = messagesContainer {
            messagesDecoded0 = [LexModelBuildingClientTypes.Message]()
            for structure0 in messagesContainer {
                if let structure0 = structure0 {
                    messagesDecoded0?.append(structure0)
                }
            }
        }
        messages = messagesDecoded0
        let maxAttemptsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxAttempts)
        maxAttempts = maxAttemptsDecoded
        let responseCardDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .responseCard)
        responseCard = responseCardDecoded
    }
}
