// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetMigrationOutputResponseBody: Swift.Equatable {
    let migrationId: Swift.String?
    let v1BotName: Swift.String?
    let v1BotVersion: Swift.String?
    let v1BotLocale: LexModelBuildingClientTypes.Locale?
    let v2BotId: Swift.String?
    let v2BotRole: Swift.String?
    let migrationStatus: LexModelBuildingClientTypes.MigrationStatus?
    let migrationStrategy: LexModelBuildingClientTypes.MigrationStrategy?
    let migrationTimestamp: ClientRuntime.Date?
    let alerts: [LexModelBuildingClientTypes.MigrationAlert]?
}

extension GetMigrationOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case alerts
        case migrationId
        case migrationStatus
        case migrationStrategy
        case migrationTimestamp
        case v1BotLocale
        case v1BotName
        case v1BotVersion
        case v2BotId
        case v2BotRole
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let migrationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .migrationId)
        migrationId = migrationIdDecoded
        let v1BotNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .v1BotName)
        v1BotName = v1BotNameDecoded
        let v1BotVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .v1BotVersion)
        v1BotVersion = v1BotVersionDecoded
        let v1BotLocaleDecoded = try containerValues.decodeIfPresent(LexModelBuildingClientTypes.Locale.self, forKey: .v1BotLocale)
        v1BotLocale = v1BotLocaleDecoded
        let v2BotIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .v2BotId)
        v2BotId = v2BotIdDecoded
        let v2BotRoleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .v2BotRole)
        v2BotRole = v2BotRoleDecoded
        let migrationStatusDecoded = try containerValues.decodeIfPresent(LexModelBuildingClientTypes.MigrationStatus.self, forKey: .migrationStatus)
        migrationStatus = migrationStatusDecoded
        let migrationStrategyDecoded = try containerValues.decodeIfPresent(LexModelBuildingClientTypes.MigrationStrategy.self, forKey: .migrationStrategy)
        migrationStrategy = migrationStrategyDecoded
        let migrationTimestampDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .migrationTimestamp)
        migrationTimestamp = migrationTimestampDecoded
        let alertsContainer = try containerValues.decodeIfPresent([LexModelBuildingClientTypes.MigrationAlert?].self, forKey: .alerts)
        var alertsDecoded0:[LexModelBuildingClientTypes.MigrationAlert]? = nil
        if let alertsContainer = alertsContainer {
            alertsDecoded0 = [LexModelBuildingClientTypes.MigrationAlert]()
            for structure0 in alertsContainer {
                if let structure0 = structure0 {
                    alertsDecoded0?.append(structure0)
                }
            }
        }
        alerts = alertsDecoded0
    }
}
