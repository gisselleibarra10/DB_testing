// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct PutBotAliasInputBody: Swift.Equatable {
    let description: Swift.String?
    let botVersion: Swift.String?
    let checksum: Swift.String?
    let conversationLogs: LexModelBuildingClientTypes.ConversationLogsRequest?
    let tags: [LexModelBuildingClientTypes.Tag]?
}

extension PutBotAliasInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case botVersion
        case checksum
        case conversationLogs
        case description
        case tags
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let botVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .botVersion)
        botVersion = botVersionDecoded
        let checksumDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .checksum)
        checksum = checksumDecoded
        let conversationLogsDecoded = try containerValues.decodeIfPresent(LexModelBuildingClientTypes.ConversationLogsRequest.self, forKey: .conversationLogs)
        conversationLogs = conversationLogsDecoded
        let tagsContainer = try containerValues.decodeIfPresent([LexModelBuildingClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[LexModelBuildingClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [LexModelBuildingClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}
