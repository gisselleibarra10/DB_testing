// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension LexModelBuildingClientTypes.Slot: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case defaultValueSpec
        case description
        case name
        case obfuscationSetting
        case priority
        case responseCard
        case sampleUtterances
        case slotConstraint
        case slotType
        case slotTypeVersion
        case valueElicitationPrompt
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let defaultValueSpec = self.defaultValueSpec {
            try encodeContainer.encode(defaultValueSpec, forKey: .defaultValueSpec)
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let obfuscationSetting = self.obfuscationSetting {
            try encodeContainer.encode(obfuscationSetting.rawValue, forKey: .obfuscationSetting)
        }
        if let priority = self.priority {
            try encodeContainer.encode(priority, forKey: .priority)
        }
        if let responseCard = self.responseCard {
            try encodeContainer.encode(responseCard, forKey: .responseCard)
        }
        if let sampleUtterances = sampleUtterances {
            var sampleUtterancesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .sampleUtterances)
            for slotutterancelist0 in sampleUtterances {
                try sampleUtterancesContainer.encode(slotutterancelist0)
            }
        }
        if let slotConstraint = self.slotConstraint {
            try encodeContainer.encode(slotConstraint.rawValue, forKey: .slotConstraint)
        }
        if let slotType = self.slotType {
            try encodeContainer.encode(slotType, forKey: .slotType)
        }
        if let slotTypeVersion = self.slotTypeVersion {
            try encodeContainer.encode(slotTypeVersion, forKey: .slotTypeVersion)
        }
        if let valueElicitationPrompt = self.valueElicitationPrompt {
            try encodeContainer.encode(valueElicitationPrompt, forKey: .valueElicitationPrompt)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let slotConstraintDecoded = try containerValues.decodeIfPresent(LexModelBuildingClientTypes.SlotConstraint.self, forKey: .slotConstraint)
        slotConstraint = slotConstraintDecoded
        let slotTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .slotType)
        slotType = slotTypeDecoded
        let slotTypeVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .slotTypeVersion)
        slotTypeVersion = slotTypeVersionDecoded
        let valueElicitationPromptDecoded = try containerValues.decodeIfPresent(LexModelBuildingClientTypes.Prompt.self, forKey: .valueElicitationPrompt)
        valueElicitationPrompt = valueElicitationPromptDecoded
        let priorityDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .priority)
        priority = priorityDecoded
        let sampleUtterancesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .sampleUtterances)
        var sampleUtterancesDecoded0:[Swift.String]? = nil
        if let sampleUtterancesContainer = sampleUtterancesContainer {
            sampleUtterancesDecoded0 = [Swift.String]()
            for string0 in sampleUtterancesContainer {
                if let string0 = string0 {
                    sampleUtterancesDecoded0?.append(string0)
                }
            }
        }
        sampleUtterances = sampleUtterancesDecoded0
        let responseCardDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .responseCard)
        responseCard = responseCardDecoded
        let obfuscationSettingDecoded = try containerValues.decodeIfPresent(LexModelBuildingClientTypes.ObfuscationSetting.self, forKey: .obfuscationSetting)
        obfuscationSetting = obfuscationSettingDecoded
        let defaultValueSpecDecoded = try containerValues.decodeIfPresent(LexModelBuildingClientTypes.SlotDefaultValueSpec.self, forKey: .defaultValueSpec)
        defaultValueSpec = defaultValueSpecDecoded
    }
}
