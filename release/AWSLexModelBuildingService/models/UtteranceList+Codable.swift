// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension LexModelBuildingClientTypes.UtteranceList: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case botVersion
        case utterances
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let botVersion = self.botVersion {
            try encodeContainer.encode(botVersion, forKey: .botVersion)
        }
        if let utterances = utterances {
            var utterancesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .utterances)
            for listofutterance0 in utterances {
                try utterancesContainer.encode(listofutterance0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let botVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .botVersion)
        botVersion = botVersionDecoded
        let utterancesContainer = try containerValues.decodeIfPresent([LexModelBuildingClientTypes.UtteranceData?].self, forKey: .utterances)
        var utterancesDecoded0:[LexModelBuildingClientTypes.UtteranceData]? = nil
        if let utterancesContainer = utterancesContainer {
            utterancesDecoded0 = [LexModelBuildingClientTypes.UtteranceData]()
            for structure0 in utterancesContainer {
                if let structure0 = structure0 {
                    utterancesDecoded0?.append(structure0)
                }
            }
        }
        utterances = utterancesDecoded0
    }
}
