// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct CreateBotVersionOutputResponse: Swift.Equatable {
    /// The message that Amazon Lex uses to cancel a conversation. For more information, see [PutBot].
    public var abortStatement: LexModelBuildingClientTypes.Statement?
    /// Checksum identifying the version of the bot that was created.
    public var checksum: Swift.String?
    /// For each Amazon Lex bot created with the Amazon Lex Model Building Service, you must specify whether your use of Amazon Lex is related to a website, program, or other application that is directed or targeted, in whole or in part, to children under age 13 and subject to the Children's Online Privacy Protection Act (COPPA) by specifying true or false in the childDirected field. By specifying true in the childDirected field, you confirm that your use of Amazon Lex is related to a website, program, or other application that is directed or targeted, in whole or in part, to children under age 13 and subject to COPPA. By specifying false in the childDirected field, you confirm that your use of Amazon Lex is not related to a website, program, or other application that is directed or targeted, in whole or in part, to children under age 13 and subject to COPPA. You may not specify a default value for the childDirected field that does not accurately reflect whether your use of Amazon Lex is related to a website, program, or other application that is directed or targeted, in whole or in part, to children under age 13 and subject to COPPA. If your use of Amazon Lex relates to a website, program, or other application that is directed in whole or in part, to children under age 13, you must obtain any required verifiable parental consent under COPPA. For information regarding the use of Amazon Lex in connection with websites, programs, or other applications that are directed or targeted, in whole or in part, to children under age 13, see the [Amazon Lex FAQ.](https://aws.amazon.com/lex/faqs#data-security)
    public var childDirected: Swift.Bool?
    /// The message that Amazon Lex uses when it doesn't understand the user's request. For more information, see [PutBot].
    public var clarificationPrompt: LexModelBuildingClientTypes.Prompt?
    /// The date when the bot version was created.
    public var createdDate: ClientRuntime.Date?
    /// A description of the bot.
    public var description: Swift.String?
    /// Indicates whether utterances entered by the user should be sent to Amazon Comprehend for sentiment analysis.
    public var detectSentiment: Swift.Bool?
    /// Indicates whether the bot uses accuracy improvements. true indicates that the bot is using the improvements, otherwise, false.
    public var enableModelImprovements: Swift.Bool?
    /// If status is FAILED, Amazon Lex provides the reason that it failed to build the bot.
    public var failureReason: Swift.String?
    /// The maximum time in seconds that Amazon Lex retains the data gathered in a conversation. For more information, see [PutBot].
    public var idleSessionTTLInSeconds: Swift.Int?
    /// An array of Intent objects. For more information, see [PutBot].
    public var intents: [LexModelBuildingClientTypes.Intent]?
    /// The date when the $LATEST version of this bot was updated.
    public var lastUpdatedDate: ClientRuntime.Date?
    /// Specifies the target locale for the bot.
    public var locale: LexModelBuildingClientTypes.Locale?
    /// The name of the bot.
    public var name: Swift.String?
    /// When you send a request to create or update a bot, Amazon Lex sets the status response element to BUILDING. After Amazon Lex builds the bot, it sets status to READY. If Amazon Lex can't build the bot, it sets status to FAILED. Amazon Lex returns the reason for the failure in the failureReason response element.
    public var status: LexModelBuildingClientTypes.Status?
    /// The version of the bot.
    public var version: Swift.String?
    /// The Amazon Polly voice ID that Amazon Lex uses for voice interactions with the user.
    public var voiceId: Swift.String?

    public init (
        abortStatement: LexModelBuildingClientTypes.Statement? = nil,
        checksum: Swift.String? = nil,
        childDirected: Swift.Bool? = nil,
        clarificationPrompt: LexModelBuildingClientTypes.Prompt? = nil,
        createdDate: ClientRuntime.Date? = nil,
        description: Swift.String? = nil,
        detectSentiment: Swift.Bool? = nil,
        enableModelImprovements: Swift.Bool? = nil,
        failureReason: Swift.String? = nil,
        idleSessionTTLInSeconds: Swift.Int? = nil,
        intents: [LexModelBuildingClientTypes.Intent]? = nil,
        lastUpdatedDate: ClientRuntime.Date? = nil,
        locale: LexModelBuildingClientTypes.Locale? = nil,
        name: Swift.String? = nil,
        status: LexModelBuildingClientTypes.Status? = nil,
        version: Swift.String? = nil,
        voiceId: Swift.String? = nil
    )
    {
        self.abortStatement = abortStatement
        self.checksum = checksum
        self.childDirected = childDirected
        self.clarificationPrompt = clarificationPrompt
        self.createdDate = createdDate
        self.description = description
        self.detectSentiment = detectSentiment
        self.enableModelImprovements = enableModelImprovements
        self.failureReason = failureReason
        self.idleSessionTTLInSeconds = idleSessionTTLInSeconds
        self.intents = intents
        self.lastUpdatedDate = lastUpdatedDate
        self.locale = locale
        self.name = name
        self.status = status
        self.version = version
        self.voiceId = voiceId
    }
}
