// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct StartImportInputBody: Swift.Equatable {
    let payload: ClientRuntime.Data?
    let resourceType: LexModelBuildingClientTypes.ResourceType?
    let mergeStrategy: LexModelBuildingClientTypes.MergeStrategy?
    let tags: [LexModelBuildingClientTypes.Tag]?
}

extension StartImportInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case mergeStrategy
        case payload
        case resourceType
        case tags
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let payloadDecoded = try containerValues.decodeIfPresent(ClientRuntime.Data.self, forKey: .payload)
        payload = payloadDecoded
        let resourceTypeDecoded = try containerValues.decodeIfPresent(LexModelBuildingClientTypes.ResourceType.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let mergeStrategyDecoded = try containerValues.decodeIfPresent(LexModelBuildingClientTypes.MergeStrategy.self, forKey: .mergeStrategy)
        mergeStrategy = mergeStrategyDecoded
        let tagsContainer = try containerValues.decodeIfPresent([LexModelBuildingClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[LexModelBuildingClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [LexModelBuildingClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}
