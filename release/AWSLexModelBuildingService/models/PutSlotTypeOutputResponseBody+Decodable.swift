// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct PutSlotTypeOutputResponseBody: Swift.Equatable {
    let name: Swift.String?
    let description: Swift.String?
    let enumerationValues: [LexModelBuildingClientTypes.EnumerationValue]?
    let lastUpdatedDate: ClientRuntime.Date?
    let createdDate: ClientRuntime.Date?
    let version: Swift.String?
    let checksum: Swift.String?
    let valueSelectionStrategy: LexModelBuildingClientTypes.SlotValueSelectionStrategy?
    let createVersion: Swift.Bool?
    let parentSlotTypeSignature: Swift.String?
    let slotTypeConfigurations: [LexModelBuildingClientTypes.SlotTypeConfiguration]?
}

extension PutSlotTypeOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case checksum
        case createVersion
        case createdDate
        case description
        case enumerationValues
        case lastUpdatedDate
        case name
        case parentSlotTypeSignature
        case slotTypeConfigurations
        case valueSelectionStrategy
        case version
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let enumerationValuesContainer = try containerValues.decodeIfPresent([LexModelBuildingClientTypes.EnumerationValue?].self, forKey: .enumerationValues)
        var enumerationValuesDecoded0:[LexModelBuildingClientTypes.EnumerationValue]? = nil
        if let enumerationValuesContainer = enumerationValuesContainer {
            enumerationValuesDecoded0 = [LexModelBuildingClientTypes.EnumerationValue]()
            for structure0 in enumerationValuesContainer {
                if let structure0 = structure0 {
                    enumerationValuesDecoded0?.append(structure0)
                }
            }
        }
        enumerationValues = enumerationValuesDecoded0
        let lastUpdatedDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastUpdatedDate)
        lastUpdatedDate = lastUpdatedDateDecoded
        let createdDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdDate)
        createdDate = createdDateDecoded
        let versionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .version)
        version = versionDecoded
        let checksumDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .checksum)
        checksum = checksumDecoded
        let valueSelectionStrategyDecoded = try containerValues.decodeIfPresent(LexModelBuildingClientTypes.SlotValueSelectionStrategy.self, forKey: .valueSelectionStrategy)
        valueSelectionStrategy = valueSelectionStrategyDecoded
        let createVersionDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .createVersion)
        createVersion = createVersionDecoded
        let parentSlotTypeSignatureDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .parentSlotTypeSignature)
        parentSlotTypeSignature = parentSlotTypeSignatureDecoded
        let slotTypeConfigurationsContainer = try containerValues.decodeIfPresent([LexModelBuildingClientTypes.SlotTypeConfiguration?].self, forKey: .slotTypeConfigurations)
        var slotTypeConfigurationsDecoded0:[LexModelBuildingClientTypes.SlotTypeConfiguration]? = nil
        if let slotTypeConfigurationsContainer = slotTypeConfigurationsContainer {
            slotTypeConfigurationsDecoded0 = [LexModelBuildingClientTypes.SlotTypeConfiguration]()
            for structure0 in slotTypeConfigurationsContainer {
                if let structure0 = structure0 {
                    slotTypeConfigurationsDecoded0?.append(structure0)
                }
            }
        }
        slotTypeConfigurations = slotTypeConfigurationsDecoded0
    }
}
