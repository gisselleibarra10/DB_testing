// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct StartImportOutputResponseBody: Swift.Equatable {
    let name: Swift.String?
    let resourceType: LexModelBuildingClientTypes.ResourceType?
    let mergeStrategy: LexModelBuildingClientTypes.MergeStrategy?
    let importId: Swift.String?
    let importStatus: LexModelBuildingClientTypes.ImportStatus?
    let tags: [LexModelBuildingClientTypes.Tag]?
    let createdDate: ClientRuntime.Date?
}

extension StartImportOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createdDate
        case importId
        case importStatus
        case mergeStrategy
        case name
        case resourceType
        case tags
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let resourceTypeDecoded = try containerValues.decodeIfPresent(LexModelBuildingClientTypes.ResourceType.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let mergeStrategyDecoded = try containerValues.decodeIfPresent(LexModelBuildingClientTypes.MergeStrategy.self, forKey: .mergeStrategy)
        mergeStrategy = mergeStrategyDecoded
        let importIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .importId)
        importId = importIdDecoded
        let importStatusDecoded = try containerValues.decodeIfPresent(LexModelBuildingClientTypes.ImportStatus.self, forKey: .importStatus)
        importStatus = importStatusDecoded
        let tagsContainer = try containerValues.decodeIfPresent([LexModelBuildingClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[LexModelBuildingClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [LexModelBuildingClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let createdDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdDate)
        createdDate = createdDateDecoded
    }
}
