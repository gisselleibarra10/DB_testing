// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension LexModelBuildingClientTypes.BuiltinSlotTypeMetadata: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case signature
        case supportedLocales
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let signature = self.signature {
            try encodeContainer.encode(signature, forKey: .signature)
        }
        if let supportedLocales = supportedLocales {
            var supportedLocalesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .supportedLocales)
            for localelist0 in supportedLocales {
                try supportedLocalesContainer.encode(localelist0.rawValue)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let signatureDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .signature)
        signature = signatureDecoded
        let supportedLocalesContainer = try containerValues.decodeIfPresent([LexModelBuildingClientTypes.Locale?].self, forKey: .supportedLocales)
        var supportedLocalesDecoded0:[LexModelBuildingClientTypes.Locale]? = nil
        if let supportedLocalesContainer = supportedLocalesContainer {
            supportedLocalesDecoded0 = [LexModelBuildingClientTypes.Locale]()
            for string0 in supportedLocalesContainer {
                if let string0 = string0 {
                    supportedLocalesDecoded0?.append(string0)
                }
            }
        }
        supportedLocales = supportedLocalesDecoded0
    }
}
