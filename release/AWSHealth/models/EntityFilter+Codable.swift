// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension HealthClientTypes.EntityFilter: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case entityArns
        case entityValues
        case eventArns
        case lastUpdatedTimes
        case statusCodes
        case tags
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let entityArns = entityArns {
            var entityArnsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .entityArns)
            for entityarnlist0 in entityArns {
                try entityArnsContainer.encode(entityarnlist0)
            }
        }
        if let entityValues = entityValues {
            var entityValuesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .entityValues)
            for entityvaluelist0 in entityValues {
                try entityValuesContainer.encode(entityvaluelist0)
            }
        }
        if let eventArns = eventArns {
            var eventArnsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .eventArns)
            for eventarnlist0 in eventArns {
                try eventArnsContainer.encode(eventarnlist0)
            }
        }
        if let lastUpdatedTimes = lastUpdatedTimes {
            var lastUpdatedTimesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .lastUpdatedTimes)
            for datetimerangelist0 in lastUpdatedTimes {
                try lastUpdatedTimesContainer.encode(datetimerangelist0)
            }
        }
        if let statusCodes = statusCodes {
            var statusCodesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .statusCodes)
            for entitystatuscodelist0 in statusCodes {
                try statusCodesContainer.encode(entitystatuscodelist0.rawValue)
            }
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tagfilter0 in tags {
                var tagfilter0Container = tagsContainer.nestedContainer(keyedBy: ClientRuntime.Key.self)
                for (dictKey1, tagset1) in tagfilter0 {
                    try tagfilter0Container.encode(tagset1, forKey: ClientRuntime.Key(stringValue: dictKey1))
                }
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let eventArnsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .eventArns)
        var eventArnsDecoded0:[Swift.String]? = nil
        if let eventArnsContainer = eventArnsContainer {
            eventArnsDecoded0 = [Swift.String]()
            for string0 in eventArnsContainer {
                if let string0 = string0 {
                    eventArnsDecoded0?.append(string0)
                }
            }
        }
        eventArns = eventArnsDecoded0
        let entityArnsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .entityArns)
        var entityArnsDecoded0:[Swift.String]? = nil
        if let entityArnsContainer = entityArnsContainer {
            entityArnsDecoded0 = [Swift.String]()
            for string0 in entityArnsContainer {
                if let string0 = string0 {
                    entityArnsDecoded0?.append(string0)
                }
            }
        }
        entityArns = entityArnsDecoded0
        let entityValuesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .entityValues)
        var entityValuesDecoded0:[Swift.String]? = nil
        if let entityValuesContainer = entityValuesContainer {
            entityValuesDecoded0 = [Swift.String]()
            for string0 in entityValuesContainer {
                if let string0 = string0 {
                    entityValuesDecoded0?.append(string0)
                }
            }
        }
        entityValues = entityValuesDecoded0
        let lastUpdatedTimesContainer = try containerValues.decodeIfPresent([HealthClientTypes.DateTimeRange?].self, forKey: .lastUpdatedTimes)
        var lastUpdatedTimesDecoded0:[HealthClientTypes.DateTimeRange]? = nil
        if let lastUpdatedTimesContainer = lastUpdatedTimesContainer {
            lastUpdatedTimesDecoded0 = [HealthClientTypes.DateTimeRange]()
            for structure0 in lastUpdatedTimesContainer {
                if let structure0 = structure0 {
                    lastUpdatedTimesDecoded0?.append(structure0)
                }
            }
        }
        lastUpdatedTimes = lastUpdatedTimesDecoded0
        let tagsContainer = try containerValues.decodeIfPresent([[Swift.String: Swift.String?]?].self, forKey: .tags)
        var tagsDecoded0:[[Swift.String:Swift.String]]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [[Swift.String:Swift.String]]()
            for map0 in tagsContainer {
                var tagsContainerDecoded0: [Swift.String: Swift.String]? = nil
                if let map0 = map0 {
                    tagsContainerDecoded0 = [Swift.String: Swift.String]()
                    for (key1, tagvalue1) in map0 {
                        if let tagvalue1 = tagvalue1 {
                            tagsContainerDecoded0?[key1] = tagvalue1
                        }
                    }
                }
                if let tagsContainerDecoded0 = tagsContainerDecoded0 {
                    tagsDecoded0?.append(tagsContainerDecoded0)
                }
            }
        }
        tags = tagsDecoded0
        let statusCodesContainer = try containerValues.decodeIfPresent([HealthClientTypes.EntityStatusCode?].self, forKey: .statusCodes)
        var statusCodesDecoded0:[HealthClientTypes.EntityStatusCode]? = nil
        if let statusCodesContainer = statusCodesContainer {
            statusCodesDecoded0 = [HealthClientTypes.EntityStatusCode]()
            for string0 in statusCodesContainer {
                if let string0 = string0 {
                    statusCodesDecoded0?.append(string0)
                }
            }
        }
        statusCodes = statusCodesDecoded0
    }
}
