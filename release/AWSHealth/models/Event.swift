// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension HealthClientTypes {
    /// Summary information about an Health event. Health events can be public or account-specific:
    ///
    /// * Public events might be service events that are not specific to an Amazon Web Services account. For example, if there is an issue with an Amazon Web Services Region, Health provides information about the event, even if you don't use services or resources in that Region.
    ///
    /// * Account-specific events are specific to either your Amazon Web Services account or an account in your organization. For example, if there's an issue with Amazon Elastic Compute Cloud in a Region that you use, Health provides information about the event and the affected resources in the account.
    ///
    ///
    /// You can determine if an event is public or account-specific by using the eventScopeCode parameter. For more information, see [eventScopeCode](https://docs.aws.amazon.com/health/latest/APIReference/API_Event.html#AWSHealth-Type-Event-eventScopeCode).
    public struct Event: Swift.Equatable {
        /// The unique identifier for the event. The event ARN has the arn:aws:health:event-region::event/SERVICE/EVENT_TYPE_CODE/EVENT_TYPE_PLUS_ID  format. For example, an event ARN might look like the following: arn:aws:health:us-east-1::event/EC2/EC2_INSTANCE_RETIREMENT_SCHEDULED/EC2_INSTANCE_RETIREMENT_SCHEDULED_ABC123-DEF456
        public var arn: Swift.String?
        /// The Amazon Web Services Availability Zone of the event. For example, us-east-1a.
        public var availabilityZone: Swift.String?
        /// The date and time that the event ended.
        public var endTime: ClientRuntime.Date?
        /// This parameter specifies if the Health event is a public Amazon Web Services service event or an account-specific event.
        ///
        /// * If the eventScopeCode value is PUBLIC, then the affectedAccounts value is always empty.
        ///
        /// * If the eventScopeCode value is ACCOUNT_SPECIFIC, then the affectedAccounts value lists the affected Amazon Web Services accounts in your organization. For example, if an event affects a service such as Amazon Elastic Compute Cloud and you have Amazon Web Services accounts that use that service, those account IDs appear in the response.
        ///
        /// * If the eventScopeCode value is NONE, then the eventArn that you specified in the request is invalid or doesn't exist.
        public var eventScopeCode: HealthClientTypes.EventScopeCode?
        /// A list of event type category codes. Possible values are issue, accountNotification, or scheduledChange. Currently, the investigation value isn't supported at this time.
        public var eventTypeCategory: HealthClientTypes.EventTypeCategory?
        /// The unique identifier for the event type. The format is AWS_SERVICE_DESCRIPTION ; for example, AWS_EC2_SYSTEM_MAINTENANCE_EVENT.
        public var eventTypeCode: Swift.String?
        /// The most recent date and time that the event was updated.
        public var lastUpdatedTime: ClientRuntime.Date?
        /// The Amazon Web Services Region name of the event.
        public var region: Swift.String?
        /// The Amazon Web Services service that is affected by the event. For example, EC2, RDS.
        public var service: Swift.String?
        /// The date and time that the event began.
        public var startTime: ClientRuntime.Date?
        /// The most recent status of the event. Possible values are open, closed, and upcoming.
        public var statusCode: HealthClientTypes.EventStatusCode?

        public init (
            arn: Swift.String? = nil,
            availabilityZone: Swift.String? = nil,
            endTime: ClientRuntime.Date? = nil,
            eventScopeCode: HealthClientTypes.EventScopeCode? = nil,
            eventTypeCategory: HealthClientTypes.EventTypeCategory? = nil,
            eventTypeCode: Swift.String? = nil,
            lastUpdatedTime: ClientRuntime.Date? = nil,
            region: Swift.String? = nil,
            service: Swift.String? = nil,
            startTime: ClientRuntime.Date? = nil,
            statusCode: HealthClientTypes.EventStatusCode? = nil
        )
        {
            self.arn = arn
            self.availabilityZone = availabilityZone
            self.endTime = endTime
            self.eventScopeCode = eventScopeCode
            self.eventTypeCategory = eventTypeCategory
            self.eventTypeCode = eventTypeCode
            self.lastUpdatedTime = lastUpdatedTime
            self.region = region
            self.service = service
            self.startTime = startTime
            self.statusCode = statusCode
        }
    }

}
