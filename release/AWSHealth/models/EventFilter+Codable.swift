// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension HealthClientTypes.EventFilter: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case availabilityZones
        case endTimes
        case entityArns
        case entityValues
        case eventArns
        case eventStatusCodes
        case eventTypeCategories
        case eventTypeCodes
        case lastUpdatedTimes
        case regions
        case services
        case startTimes
        case tags
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let availabilityZones = availabilityZones {
            var availabilityZonesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .availabilityZones)
            for availabilityzones0 in availabilityZones {
                try availabilityZonesContainer.encode(availabilityzones0)
            }
        }
        if let endTimes = endTimes {
            var endTimesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .endTimes)
            for datetimerangelist0 in endTimes {
                try endTimesContainer.encode(datetimerangelist0)
            }
        }
        if let entityArns = entityArns {
            var entityArnsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .entityArns)
            for entityarnlist0 in entityArns {
                try entityArnsContainer.encode(entityarnlist0)
            }
        }
        if let entityValues = entityValues {
            var entityValuesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .entityValues)
            for entityvaluelist0 in entityValues {
                try entityValuesContainer.encode(entityvaluelist0)
            }
        }
        if let eventArns = eventArns {
            var eventArnsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .eventArns)
            for eventarnlist0 in eventArns {
                try eventArnsContainer.encode(eventarnlist0)
            }
        }
        if let eventStatusCodes = eventStatusCodes {
            var eventStatusCodesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .eventStatusCodes)
            for eventstatuscodelist0 in eventStatusCodes {
                try eventStatusCodesContainer.encode(eventstatuscodelist0.rawValue)
            }
        }
        if let eventTypeCategories = eventTypeCategories {
            var eventTypeCategoriesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .eventTypeCategories)
            for eventtypecategorylist20 in eventTypeCategories {
                try eventTypeCategoriesContainer.encode(eventtypecategorylist20.rawValue)
            }
        }
        if let eventTypeCodes = eventTypeCodes {
            var eventTypeCodesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .eventTypeCodes)
            for eventtypelist20 in eventTypeCodes {
                try eventTypeCodesContainer.encode(eventtypelist20)
            }
        }
        if let lastUpdatedTimes = lastUpdatedTimes {
            var lastUpdatedTimesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .lastUpdatedTimes)
            for datetimerangelist0 in lastUpdatedTimes {
                try lastUpdatedTimesContainer.encode(datetimerangelist0)
            }
        }
        if let regions = regions {
            var regionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .regions)
            for regionlist0 in regions {
                try regionsContainer.encode(regionlist0)
            }
        }
        if let services = services {
            var servicesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .services)
            for servicelist0 in services {
                try servicesContainer.encode(servicelist0)
            }
        }
        if let startTimes = startTimes {
            var startTimesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .startTimes)
            for datetimerangelist0 in startTimes {
                try startTimesContainer.encode(datetimerangelist0)
            }
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tagfilter0 in tags {
                var tagfilter0Container = tagsContainer.nestedContainer(keyedBy: ClientRuntime.Key.self)
                for (dictKey1, tagset1) in tagfilter0 {
                    try tagfilter0Container.encode(tagset1, forKey: ClientRuntime.Key(stringValue: dictKey1))
                }
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let eventArnsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .eventArns)
        var eventArnsDecoded0:[Swift.String]? = nil
        if let eventArnsContainer = eventArnsContainer {
            eventArnsDecoded0 = [Swift.String]()
            for string0 in eventArnsContainer {
                if let string0 = string0 {
                    eventArnsDecoded0?.append(string0)
                }
            }
        }
        eventArns = eventArnsDecoded0
        let eventTypeCodesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .eventTypeCodes)
        var eventTypeCodesDecoded0:[Swift.String]? = nil
        if let eventTypeCodesContainer = eventTypeCodesContainer {
            eventTypeCodesDecoded0 = [Swift.String]()
            for string0 in eventTypeCodesContainer {
                if let string0 = string0 {
                    eventTypeCodesDecoded0?.append(string0)
                }
            }
        }
        eventTypeCodes = eventTypeCodesDecoded0
        let servicesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .services)
        var servicesDecoded0:[Swift.String]? = nil
        if let servicesContainer = servicesContainer {
            servicesDecoded0 = [Swift.String]()
            for string0 in servicesContainer {
                if let string0 = string0 {
                    servicesDecoded0?.append(string0)
                }
            }
        }
        services = servicesDecoded0
        let regionsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .regions)
        var regionsDecoded0:[Swift.String]? = nil
        if let regionsContainer = regionsContainer {
            regionsDecoded0 = [Swift.String]()
            for string0 in regionsContainer {
                if let string0 = string0 {
                    regionsDecoded0?.append(string0)
                }
            }
        }
        regions = regionsDecoded0
        let availabilityZonesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .availabilityZones)
        var availabilityZonesDecoded0:[Swift.String]? = nil
        if let availabilityZonesContainer = availabilityZonesContainer {
            availabilityZonesDecoded0 = [Swift.String]()
            for string0 in availabilityZonesContainer {
                if let string0 = string0 {
                    availabilityZonesDecoded0?.append(string0)
                }
            }
        }
        availabilityZones = availabilityZonesDecoded0
        let startTimesContainer = try containerValues.decodeIfPresent([HealthClientTypes.DateTimeRange?].self, forKey: .startTimes)
        var startTimesDecoded0:[HealthClientTypes.DateTimeRange]? = nil
        if let startTimesContainer = startTimesContainer {
            startTimesDecoded0 = [HealthClientTypes.DateTimeRange]()
            for structure0 in startTimesContainer {
                if let structure0 = structure0 {
                    startTimesDecoded0?.append(structure0)
                }
            }
        }
        startTimes = startTimesDecoded0
        let endTimesContainer = try containerValues.decodeIfPresent([HealthClientTypes.DateTimeRange?].self, forKey: .endTimes)
        var endTimesDecoded0:[HealthClientTypes.DateTimeRange]? = nil
        if let endTimesContainer = endTimesContainer {
            endTimesDecoded0 = [HealthClientTypes.DateTimeRange]()
            for structure0 in endTimesContainer {
                if let structure0 = structure0 {
                    endTimesDecoded0?.append(structure0)
                }
            }
        }
        endTimes = endTimesDecoded0
        let lastUpdatedTimesContainer = try containerValues.decodeIfPresent([HealthClientTypes.DateTimeRange?].self, forKey: .lastUpdatedTimes)
        var lastUpdatedTimesDecoded0:[HealthClientTypes.DateTimeRange]? = nil
        if let lastUpdatedTimesContainer = lastUpdatedTimesContainer {
            lastUpdatedTimesDecoded0 = [HealthClientTypes.DateTimeRange]()
            for structure0 in lastUpdatedTimesContainer {
                if let structure0 = structure0 {
                    lastUpdatedTimesDecoded0?.append(structure0)
                }
            }
        }
        lastUpdatedTimes = lastUpdatedTimesDecoded0
        let entityArnsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .entityArns)
        var entityArnsDecoded0:[Swift.String]? = nil
        if let entityArnsContainer = entityArnsContainer {
            entityArnsDecoded0 = [Swift.String]()
            for string0 in entityArnsContainer {
                if let string0 = string0 {
                    entityArnsDecoded0?.append(string0)
                }
            }
        }
        entityArns = entityArnsDecoded0
        let entityValuesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .entityValues)
        var entityValuesDecoded0:[Swift.String]? = nil
        if let entityValuesContainer = entityValuesContainer {
            entityValuesDecoded0 = [Swift.String]()
            for string0 in entityValuesContainer {
                if let string0 = string0 {
                    entityValuesDecoded0?.append(string0)
                }
            }
        }
        entityValues = entityValuesDecoded0
        let eventTypeCategoriesContainer = try containerValues.decodeIfPresent([HealthClientTypes.EventTypeCategory?].self, forKey: .eventTypeCategories)
        var eventTypeCategoriesDecoded0:[HealthClientTypes.EventTypeCategory]? = nil
        if let eventTypeCategoriesContainer = eventTypeCategoriesContainer {
            eventTypeCategoriesDecoded0 = [HealthClientTypes.EventTypeCategory]()
            for string0 in eventTypeCategoriesContainer {
                if let string0 = string0 {
                    eventTypeCategoriesDecoded0?.append(string0)
                }
            }
        }
        eventTypeCategories = eventTypeCategoriesDecoded0
        let tagsContainer = try containerValues.decodeIfPresent([[Swift.String: Swift.String?]?].self, forKey: .tags)
        var tagsDecoded0:[[Swift.String:Swift.String]]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [[Swift.String:Swift.String]]()
            for map0 in tagsContainer {
                var tagsContainerDecoded0: [Swift.String: Swift.String]? = nil
                if let map0 = map0 {
                    tagsContainerDecoded0 = [Swift.String: Swift.String]()
                    for (key1, tagvalue1) in map0 {
                        if let tagvalue1 = tagvalue1 {
                            tagsContainerDecoded0?[key1] = tagvalue1
                        }
                    }
                }
                if let tagsContainerDecoded0 = tagsContainerDecoded0 {
                    tagsDecoded0?.append(tagsContainerDecoded0)
                }
            }
        }
        tags = tagsDecoded0
        let eventStatusCodesContainer = try containerValues.decodeIfPresent([HealthClientTypes.EventStatusCode?].self, forKey: .eventStatusCodes)
        var eventStatusCodesDecoded0:[HealthClientTypes.EventStatusCode]? = nil
        if let eventStatusCodesContainer = eventStatusCodesContainer {
            eventStatusCodesDecoded0 = [HealthClientTypes.EventStatusCode]()
            for string0 in eventStatusCodesContainer {
                if let string0 = string0 {
                    eventStatusCodesDecoded0?.append(string0)
                }
            }
        }
        eventStatusCodes = eventStatusCodesDecoded0
    }
}
