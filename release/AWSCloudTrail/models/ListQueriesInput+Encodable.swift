// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ListQueriesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case endTime = "EndTime"
        case eventDataStore = "EventDataStore"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case queryStatus = "QueryStatus"
        case startTime = "StartTime"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let endTime = self.endTime {
            try encodeContainer.encode(endTime.timeIntervalSince1970, forKey: .endTime)
        }
        if let eventDataStore = self.eventDataStore {
            try encodeContainer.encode(eventDataStore, forKey: .eventDataStore)
        }
        if let maxResults = self.maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let queryStatus = self.queryStatus {
            try encodeContainer.encode(queryStatus.rawValue, forKey: .queryStatus)
        }
        if let startTime = self.startTime {
            try encodeContainer.encode(startTime.timeIntervalSince1970, forKey: .startTime)
        }
    }
}
