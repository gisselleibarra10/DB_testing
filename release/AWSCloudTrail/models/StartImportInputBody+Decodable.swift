// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct StartImportInputBody: Swift.Equatable {
    let destinations: [Swift.String]?
    let importSource: CloudTrailClientTypes.ImportSource?
    let startEventTime: ClientRuntime.Date?
    let endEventTime: ClientRuntime.Date?
    let importId: Swift.String?
}

extension StartImportInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case destinations = "Destinations"
        case endEventTime = "EndEventTime"
        case importId = "ImportId"
        case importSource = "ImportSource"
        case startEventTime = "StartEventTime"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let destinationsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .destinations)
        var destinationsDecoded0:[Swift.String]? = nil
        if let destinationsContainer = destinationsContainer {
            destinationsDecoded0 = [Swift.String]()
            for string0 in destinationsContainer {
                if let string0 = string0 {
                    destinationsDecoded0?.append(string0)
                }
            }
        }
        destinations = destinationsDecoded0
        let importSourceDecoded = try containerValues.decodeIfPresent(CloudTrailClientTypes.ImportSource.self, forKey: .importSource)
        importSource = importSourceDecoded
        let startEventTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .startEventTime)
        startEventTime = startEventTimeDecoded
        let endEventTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .endEventTime)
        endEventTime = endEventTimeDecoded
        let importIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .importId)
        importId = importIdDecoded
    }
}
