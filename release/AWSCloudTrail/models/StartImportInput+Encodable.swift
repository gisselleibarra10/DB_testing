// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension StartImportInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case destinations = "Destinations"
        case endEventTime = "EndEventTime"
        case importId = "ImportId"
        case importSource = "ImportSource"
        case startEventTime = "StartEventTime"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let destinations = destinations {
            var destinationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .destinations)
            for importdestinations0 in destinations {
                try destinationsContainer.encode(importdestinations0)
            }
        }
        if let endEventTime = self.endEventTime {
            try encodeContainer.encode(endEventTime.timeIntervalSince1970, forKey: .endEventTime)
        }
        if let importId = self.importId {
            try encodeContainer.encode(importId, forKey: .importId)
        }
        if let importSource = self.importSource {
            try encodeContainer.encode(importSource, forKey: .importSource)
        }
        if let startEventTime = self.startEventTime {
            try encodeContainer.encode(startEventTime.timeIntervalSince1970, forKey: .startEventTime)
        }
    }
}
