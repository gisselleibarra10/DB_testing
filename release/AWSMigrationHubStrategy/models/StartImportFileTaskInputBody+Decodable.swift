// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct StartImportFileTaskInputBody: Swift.Equatable {
    let name: Swift.String?
    let s3Bucket: Swift.String?
    let s3key: Swift.String?
    let dataSourceType: MigrationHubStrategyClientTypes.DataSourceType?
    let groupId: [MigrationHubStrategyClientTypes.Group]?
    let s3bucketForReportData: Swift.String?
}

extension StartImportFileTaskInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case s3Bucket = "S3Bucket"
        case dataSourceType
        case groupId
        case name
        case s3bucketForReportData
        case s3key
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let s3BucketDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .s3Bucket)
        s3Bucket = s3BucketDecoded
        let s3keyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .s3key)
        s3key = s3keyDecoded
        let dataSourceTypeDecoded = try containerValues.decodeIfPresent(MigrationHubStrategyClientTypes.DataSourceType.self, forKey: .dataSourceType)
        dataSourceType = dataSourceTypeDecoded
        let groupIdContainer = try containerValues.decodeIfPresent([MigrationHubStrategyClientTypes.Group?].self, forKey: .groupId)
        var groupIdDecoded0:[MigrationHubStrategyClientTypes.Group]? = nil
        if let groupIdContainer = groupIdContainer {
            groupIdDecoded0 = [MigrationHubStrategyClientTypes.Group]()
            for structure0 in groupIdContainer {
                if let structure0 = structure0 {
                    groupIdDecoded0?.append(structure0)
                }
            }
        }
        groupId = groupIdDecoded0
        let s3bucketForReportDataDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .s3bucketForReportData)
        s3bucketForReportData = s3bucketForReportDataDecoded
    }
}
