// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension MigrationHubStrategyClientTypes.ImportFileTaskInformation: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case completionTime
        case id
        case importName
        case inputS3Bucket
        case inputS3Key
        case numberOfRecordsFailed
        case numberOfRecordsSuccess
        case startTime
        case status
        case statusReportS3Bucket
        case statusReportS3Key
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let completionTime = self.completionTime {
            try encodeContainer.encode(completionTime.timeIntervalSince1970, forKey: .completionTime)
        }
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let importName = self.importName {
            try encodeContainer.encode(importName, forKey: .importName)
        }
        if let inputS3Bucket = self.inputS3Bucket {
            try encodeContainer.encode(inputS3Bucket, forKey: .inputS3Bucket)
        }
        if let inputS3Key = self.inputS3Key {
            try encodeContainer.encode(inputS3Key, forKey: .inputS3Key)
        }
        if let numberOfRecordsFailed = self.numberOfRecordsFailed {
            try encodeContainer.encode(numberOfRecordsFailed, forKey: .numberOfRecordsFailed)
        }
        if let numberOfRecordsSuccess = self.numberOfRecordsSuccess {
            try encodeContainer.encode(numberOfRecordsSuccess, forKey: .numberOfRecordsSuccess)
        }
        if let startTime = self.startTime {
            try encodeContainer.encode(startTime.timeIntervalSince1970, forKey: .startTime)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let statusReportS3Bucket = self.statusReportS3Bucket {
            try encodeContainer.encode(statusReportS3Bucket, forKey: .statusReportS3Bucket)
        }
        if let statusReportS3Key = self.statusReportS3Key {
            try encodeContainer.encode(statusReportS3Key, forKey: .statusReportS3Key)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let statusDecoded = try containerValues.decodeIfPresent(MigrationHubStrategyClientTypes.ImportFileTaskStatus.self, forKey: .status)
        status = statusDecoded
        let startTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .startTime)
        startTime = startTimeDecoded
        let inputS3BucketDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .inputS3Bucket)
        inputS3Bucket = inputS3BucketDecoded
        let inputS3KeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .inputS3Key)
        inputS3Key = inputS3KeyDecoded
        let statusReportS3BucketDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .statusReportS3Bucket)
        statusReportS3Bucket = statusReportS3BucketDecoded
        let statusReportS3KeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .statusReportS3Key)
        statusReportS3Key = statusReportS3KeyDecoded
        let completionTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .completionTime)
        completionTime = completionTimeDecoded
        let numberOfRecordsSuccessDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .numberOfRecordsSuccess)
        numberOfRecordsSuccess = numberOfRecordsSuccessDecoded
        let numberOfRecordsFailedDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .numberOfRecordsFailed)
        numberOfRecordsFailed = numberOfRecordsFailedDecoded
        let importNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .importName)
        importName = importNameDecoded
    }
}
