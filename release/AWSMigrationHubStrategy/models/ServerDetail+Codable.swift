// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension MigrationHubStrategyClientTypes.ServerDetail: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case antipatternReportS3Object
        case antipatternReportStatus
        case antipatternReportStatusMessage
        case applicationComponentStrategySummary
        case dataCollectionStatus
        case id
        case lastAnalyzedTimestamp
        case listAntipatternSeveritySummary
        case name
        case recommendationSet
        case serverType
        case statusMessage
        case systemInfo
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let antipatternReportS3Object = self.antipatternReportS3Object {
            try encodeContainer.encode(antipatternReportS3Object, forKey: .antipatternReportS3Object)
        }
        if let antipatternReportStatus = self.antipatternReportStatus {
            try encodeContainer.encode(antipatternReportStatus.rawValue, forKey: .antipatternReportStatus)
        }
        if let antipatternReportStatusMessage = self.antipatternReportStatusMessage {
            try encodeContainer.encode(antipatternReportStatusMessage, forKey: .antipatternReportStatusMessage)
        }
        if let applicationComponentStrategySummary = applicationComponentStrategySummary {
            var applicationComponentStrategySummaryContainer = encodeContainer.nestedUnkeyedContainer(forKey: .applicationComponentStrategySummary)
            for liststrategysummary0 in applicationComponentStrategySummary {
                try applicationComponentStrategySummaryContainer.encode(liststrategysummary0)
            }
        }
        if let dataCollectionStatus = self.dataCollectionStatus {
            try encodeContainer.encode(dataCollectionStatus.rawValue, forKey: .dataCollectionStatus)
        }
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let lastAnalyzedTimestamp = self.lastAnalyzedTimestamp {
            try encodeContainer.encode(lastAnalyzedTimestamp.timeIntervalSince1970, forKey: .lastAnalyzedTimestamp)
        }
        if let listAntipatternSeveritySummary = listAntipatternSeveritySummary {
            var listAntipatternSeveritySummaryContainer = encodeContainer.nestedUnkeyedContainer(forKey: .listAntipatternSeveritySummary)
            for listantipatternseveritysummary0 in listAntipatternSeveritySummary {
                try listAntipatternSeveritySummaryContainer.encode(listantipatternseveritysummary0)
            }
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let recommendationSet = self.recommendationSet {
            try encodeContainer.encode(recommendationSet, forKey: .recommendationSet)
        }
        if let serverType = self.serverType {
            try encodeContainer.encode(serverType, forKey: .serverType)
        }
        if let statusMessage = self.statusMessage {
            try encodeContainer.encode(statusMessage, forKey: .statusMessage)
        }
        if let systemInfo = self.systemInfo {
            try encodeContainer.encode(systemInfo, forKey: .systemInfo)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let recommendationSetDecoded = try containerValues.decodeIfPresent(MigrationHubStrategyClientTypes.RecommendationSet.self, forKey: .recommendationSet)
        recommendationSet = recommendationSetDecoded
        let dataCollectionStatusDecoded = try containerValues.decodeIfPresent(MigrationHubStrategyClientTypes.RunTimeAssessmentStatus.self, forKey: .dataCollectionStatus)
        dataCollectionStatus = dataCollectionStatusDecoded
        let statusMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .statusMessage)
        statusMessage = statusMessageDecoded
        let listAntipatternSeveritySummaryContainer = try containerValues.decodeIfPresent([MigrationHubStrategyClientTypes.AntipatternSeveritySummary?].self, forKey: .listAntipatternSeveritySummary)
        var listAntipatternSeveritySummaryDecoded0:[MigrationHubStrategyClientTypes.AntipatternSeveritySummary]? = nil
        if let listAntipatternSeveritySummaryContainer = listAntipatternSeveritySummaryContainer {
            listAntipatternSeveritySummaryDecoded0 = [MigrationHubStrategyClientTypes.AntipatternSeveritySummary]()
            for structure0 in listAntipatternSeveritySummaryContainer {
                if let structure0 = structure0 {
                    listAntipatternSeveritySummaryDecoded0?.append(structure0)
                }
            }
        }
        listAntipatternSeveritySummary = listAntipatternSeveritySummaryDecoded0
        let systemInfoDecoded = try containerValues.decodeIfPresent(MigrationHubStrategyClientTypes.SystemInfo.self, forKey: .systemInfo)
        systemInfo = systemInfoDecoded
        let applicationComponentStrategySummaryContainer = try containerValues.decodeIfPresent([MigrationHubStrategyClientTypes.StrategySummary?].self, forKey: .applicationComponentStrategySummary)
        var applicationComponentStrategySummaryDecoded0:[MigrationHubStrategyClientTypes.StrategySummary]? = nil
        if let applicationComponentStrategySummaryContainer = applicationComponentStrategySummaryContainer {
            applicationComponentStrategySummaryDecoded0 = [MigrationHubStrategyClientTypes.StrategySummary]()
            for structure0 in applicationComponentStrategySummaryContainer {
                if let structure0 = structure0 {
                    applicationComponentStrategySummaryDecoded0?.append(structure0)
                }
            }
        }
        applicationComponentStrategySummary = applicationComponentStrategySummaryDecoded0
        let antipatternReportS3ObjectDecoded = try containerValues.decodeIfPresent(MigrationHubStrategyClientTypes.S3Object.self, forKey: .antipatternReportS3Object)
        antipatternReportS3Object = antipatternReportS3ObjectDecoded
        let antipatternReportStatusDecoded = try containerValues.decodeIfPresent(MigrationHubStrategyClientTypes.AntipatternReportStatus.self, forKey: .antipatternReportStatus)
        antipatternReportStatus = antipatternReportStatusDecoded
        let antipatternReportStatusMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .antipatternReportStatusMessage)
        antipatternReportStatusMessage = antipatternReportStatusMessageDecoded
        let serverTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serverType)
        serverType = serverTypeDecoded
        let lastAnalyzedTimestampDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastAnalyzedTimestamp)
        lastAnalyzedTimestamp = lastAnalyzedTimestampDecoded
    }
}
