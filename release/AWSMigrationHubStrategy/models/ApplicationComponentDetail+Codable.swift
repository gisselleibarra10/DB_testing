// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension MigrationHubStrategyClientTypes.ApplicationComponentDetail: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case analysisStatus
        case antipatternReportS3Object
        case antipatternReportStatus
        case antipatternReportStatusMessage
        case appType
        case associatedServerId
        case databaseConfigDetail
        case id
        case inclusionStatus
        case lastAnalyzedTimestamp
        case listAntipatternSeveritySummary
        case moreServerAssociationExists
        case name
        case osDriver
        case osVersion
        case recommendationSet
        case resourceSubType
        case sourceCodeRepositories
        case statusMessage
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let analysisStatus = self.analysisStatus {
            try encodeContainer.encode(analysisStatus.rawValue, forKey: .analysisStatus)
        }
        if let antipatternReportS3Object = self.antipatternReportS3Object {
            try encodeContainer.encode(antipatternReportS3Object, forKey: .antipatternReportS3Object)
        }
        if let antipatternReportStatus = self.antipatternReportStatus {
            try encodeContainer.encode(antipatternReportStatus.rawValue, forKey: .antipatternReportStatus)
        }
        if let antipatternReportStatusMessage = self.antipatternReportStatusMessage {
            try encodeContainer.encode(antipatternReportStatusMessage, forKey: .antipatternReportStatusMessage)
        }
        if let appType = self.appType {
            try encodeContainer.encode(appType.rawValue, forKey: .appType)
        }
        if let associatedServerId = self.associatedServerId {
            try encodeContainer.encode(associatedServerId, forKey: .associatedServerId)
        }
        if let databaseConfigDetail = self.databaseConfigDetail {
            try encodeContainer.encode(databaseConfigDetail, forKey: .databaseConfigDetail)
        }
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let inclusionStatus = self.inclusionStatus {
            try encodeContainer.encode(inclusionStatus.rawValue, forKey: .inclusionStatus)
        }
        if let lastAnalyzedTimestamp = self.lastAnalyzedTimestamp {
            try encodeContainer.encode(lastAnalyzedTimestamp.timeIntervalSince1970, forKey: .lastAnalyzedTimestamp)
        }
        if let listAntipatternSeveritySummary = listAntipatternSeveritySummary {
            var listAntipatternSeveritySummaryContainer = encodeContainer.nestedUnkeyedContainer(forKey: .listAntipatternSeveritySummary)
            for listantipatternseveritysummary0 in listAntipatternSeveritySummary {
                try listAntipatternSeveritySummaryContainer.encode(listantipatternseveritysummary0)
            }
        }
        if let moreServerAssociationExists = self.moreServerAssociationExists {
            try encodeContainer.encode(moreServerAssociationExists, forKey: .moreServerAssociationExists)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let osDriver = self.osDriver {
            try encodeContainer.encode(osDriver, forKey: .osDriver)
        }
        if let osVersion = self.osVersion {
            try encodeContainer.encode(osVersion, forKey: .osVersion)
        }
        if let recommendationSet = self.recommendationSet {
            try encodeContainer.encode(recommendationSet, forKey: .recommendationSet)
        }
        if let resourceSubType = self.resourceSubType {
            try encodeContainer.encode(resourceSubType.rawValue, forKey: .resourceSubType)
        }
        if let sourceCodeRepositories = sourceCodeRepositories {
            var sourceCodeRepositoriesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .sourceCodeRepositories)
            for sourcecoderepositories0 in sourceCodeRepositories {
                try sourceCodeRepositoriesContainer.encode(sourcecoderepositories0)
            }
        }
        if let statusMessage = self.statusMessage {
            try encodeContainer.encode(statusMessage, forKey: .statusMessage)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let recommendationSetDecoded = try containerValues.decodeIfPresent(MigrationHubStrategyClientTypes.RecommendationSet.self, forKey: .recommendationSet)
        recommendationSet = recommendationSetDecoded
        let analysisStatusDecoded = try containerValues.decodeIfPresent(MigrationHubStrategyClientTypes.SrcCodeOrDbAnalysisStatus.self, forKey: .analysisStatus)
        analysisStatus = analysisStatusDecoded
        let statusMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .statusMessage)
        statusMessage = statusMessageDecoded
        let listAntipatternSeveritySummaryContainer = try containerValues.decodeIfPresent([MigrationHubStrategyClientTypes.AntipatternSeveritySummary?].self, forKey: .listAntipatternSeveritySummary)
        var listAntipatternSeveritySummaryDecoded0:[MigrationHubStrategyClientTypes.AntipatternSeveritySummary]? = nil
        if let listAntipatternSeveritySummaryContainer = listAntipatternSeveritySummaryContainer {
            listAntipatternSeveritySummaryDecoded0 = [MigrationHubStrategyClientTypes.AntipatternSeveritySummary]()
            for structure0 in listAntipatternSeveritySummaryContainer {
                if let structure0 = structure0 {
                    listAntipatternSeveritySummaryDecoded0?.append(structure0)
                }
            }
        }
        listAntipatternSeveritySummary = listAntipatternSeveritySummaryDecoded0
        let databaseConfigDetailDecoded = try containerValues.decodeIfPresent(MigrationHubStrategyClientTypes.DatabaseConfigDetail.self, forKey: .databaseConfigDetail)
        databaseConfigDetail = databaseConfigDetailDecoded
        let sourceCodeRepositoriesContainer = try containerValues.decodeIfPresent([MigrationHubStrategyClientTypes.SourceCodeRepository?].self, forKey: .sourceCodeRepositories)
        var sourceCodeRepositoriesDecoded0:[MigrationHubStrategyClientTypes.SourceCodeRepository]? = nil
        if let sourceCodeRepositoriesContainer = sourceCodeRepositoriesContainer {
            sourceCodeRepositoriesDecoded0 = [MigrationHubStrategyClientTypes.SourceCodeRepository]()
            for structure0 in sourceCodeRepositoriesContainer {
                if let structure0 = structure0 {
                    sourceCodeRepositoriesDecoded0?.append(structure0)
                }
            }
        }
        sourceCodeRepositories = sourceCodeRepositoriesDecoded0
        let appTypeDecoded = try containerValues.decodeIfPresent(MigrationHubStrategyClientTypes.AppType.self, forKey: .appType)
        appType = appTypeDecoded
        let resourceSubTypeDecoded = try containerValues.decodeIfPresent(MigrationHubStrategyClientTypes.ResourceSubType.self, forKey: .resourceSubType)
        resourceSubType = resourceSubTypeDecoded
        let inclusionStatusDecoded = try containerValues.decodeIfPresent(MigrationHubStrategyClientTypes.InclusionStatus.self, forKey: .inclusionStatus)
        inclusionStatus = inclusionStatusDecoded
        let antipatternReportS3ObjectDecoded = try containerValues.decodeIfPresent(MigrationHubStrategyClientTypes.S3Object.self, forKey: .antipatternReportS3Object)
        antipatternReportS3Object = antipatternReportS3ObjectDecoded
        let antipatternReportStatusDecoded = try containerValues.decodeIfPresent(MigrationHubStrategyClientTypes.AntipatternReportStatus.self, forKey: .antipatternReportStatus)
        antipatternReportStatus = antipatternReportStatusDecoded
        let antipatternReportStatusMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .antipatternReportStatusMessage)
        antipatternReportStatusMessage = antipatternReportStatusMessageDecoded
        let osVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .osVersion)
        osVersion = osVersionDecoded
        let osDriverDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .osDriver)
        osDriver = osDriverDecoded
        let lastAnalyzedTimestampDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastAnalyzedTimestamp)
        lastAnalyzedTimestamp = lastAnalyzedTimestampDecoded
        let associatedServerIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .associatedServerId)
        associatedServerId = associatedServerIdDecoded
        let moreServerAssociationExistsDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .moreServerAssociationExists)
        moreServerAssociationExists = moreServerAssociationExistsDecoded
    }
}
