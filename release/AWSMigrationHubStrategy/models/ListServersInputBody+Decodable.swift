// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListServersInputBody: Swift.Equatable {
    let serverCriteria: MigrationHubStrategyClientTypes.ServerCriteria?
    let filterValue: Swift.String?
    let sort: MigrationHubStrategyClientTypes.SortOrder?
    let groupIdFilter: [MigrationHubStrategyClientTypes.Group]?
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
}

extension ListServersInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filterValue
        case groupIdFilter
        case maxResults
        case nextToken
        case serverCriteria
        case sort
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let serverCriteriaDecoded = try containerValues.decodeIfPresent(MigrationHubStrategyClientTypes.ServerCriteria.self, forKey: .serverCriteria)
        serverCriteria = serverCriteriaDecoded
        let filterValueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .filterValue)
        filterValue = filterValueDecoded
        let sortDecoded = try containerValues.decodeIfPresent(MigrationHubStrategyClientTypes.SortOrder.self, forKey: .sort)
        sort = sortDecoded
        let groupIdFilterContainer = try containerValues.decodeIfPresent([MigrationHubStrategyClientTypes.Group?].self, forKey: .groupIdFilter)
        var groupIdFilterDecoded0:[MigrationHubStrategyClientTypes.Group]? = nil
        if let groupIdFilterContainer = groupIdFilterContainer {
            groupIdFilterDecoded0 = [MigrationHubStrategyClientTypes.Group]()
            for structure0 in groupIdFilterContainer {
                if let structure0 = structure0 {
                    groupIdFilterDecoded0?.append(structure0)
                }
            }
        }
        groupIdFilter = groupIdFilterDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
    }
}
