// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension MigrationHubStrategyClientTypes {
    public enum TransformationToolName: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case app2container
        case dms
        case emp
        case inPlaceOsUpgrade
        case mgn
        case nativeSql
        case portingAssistant
        case sct
        case strategyRecommendationSupport
        case wwama
        case sdkUnknown(Swift.String)

        public static var allCases: [TransformationToolName] {
            return [
                .app2container,
                .dms,
                .emp,
                .inPlaceOsUpgrade,
                .mgn,
                .nativeSql,
                .portingAssistant,
                .sct,
                .strategyRecommendationSupport,
                .wwama,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .app2container: return "App2Container"
            case .dms: return "Database Migration Service"
            case .emp: return "End of Support Migration"
            case .inPlaceOsUpgrade: return "In Place Operating System Upgrade"
            case .mgn: return "Application Migration Service"
            case .nativeSql: return "Native SQL Server Backup/Restore"
            case .portingAssistant: return "Porting Assistant For .NET"
            case .sct: return "Schema Conversion Tool"
            case .strategyRecommendationSupport: return "Strategy Recommendation Support"
            case .wwama: return "Windows Web Application Migration Assistant"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = TransformationToolName(rawValue: rawValue) ?? TransformationToolName.sdkUnknown(rawValue)
        }
    }
}
