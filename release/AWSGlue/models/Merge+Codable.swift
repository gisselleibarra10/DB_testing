// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension GlueClientTypes.Merge: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case inputs = "Inputs"
        case name = "Name"
        case primaryKeys = "PrimaryKeys"
        case source = "Source"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let inputs = inputs {
            var inputsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .inputs)
            for twoinputs0 in inputs {
                try inputsContainer.encode(twoinputs0)
            }
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let primaryKeys = primaryKeys {
            var primaryKeysContainer = encodeContainer.nestedUnkeyedContainer(forKey: .primaryKeys)
            for gluestudiopathlist0 in primaryKeys {
                var gluestudiopathlist0Container = primaryKeysContainer.nestedUnkeyedContainer()
                for enclosedinstringproperties1 in gluestudiopathlist0 {
                    try gluestudiopathlist0Container.encode(enclosedinstringproperties1)
                }
            }
        }
        if let source = self.source {
            try encodeContainer.encode(source, forKey: .source)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let inputsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .inputs)
        var inputsDecoded0:[Swift.String]? = nil
        if let inputsContainer = inputsContainer {
            inputsDecoded0 = [Swift.String]()
            for string0 in inputsContainer {
                if let string0 = string0 {
                    inputsDecoded0?.append(string0)
                }
            }
        }
        inputs = inputsDecoded0
        let sourceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .source)
        source = sourceDecoded
        let primaryKeysContainer = try containerValues.decodeIfPresent([[Swift.String?]?].self, forKey: .primaryKeys)
        var primaryKeysDecoded0:[[Swift.String]]? = nil
        if let primaryKeysContainer = primaryKeysContainer {
            primaryKeysDecoded0 = [[Swift.String]]()
            for list0 in primaryKeysContainer {
                var list0Decoded0: [Swift.String]? = nil
                if let list0 = list0 {
                    list0Decoded0 = [Swift.String]()
                    for string1 in list0 {
                        if let string1 = string1 {
                            list0Decoded0?.append(string1)
                        }
                    }
                }
                if let list0Decoded0 = list0Decoded0 {
                    primaryKeysDecoded0?.append(list0Decoded0)
                }
            }
        }
        primaryKeys = primaryKeysDecoded0
    }
}
