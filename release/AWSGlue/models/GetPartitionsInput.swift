// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct GetPartitionsInput: Swift.Equatable {
    /// The ID of the Data Catalog where the partitions in question reside. If none is provided, the Amazon Web Services account ID is used by default.
    public var catalogId: Swift.String?
    /// The name of the catalog database where the partitions reside.
    /// This member is required.
    public var databaseName: Swift.String?
    /// When true, specifies not returning the partition column schema. Useful when you are interested only in other partition attributes such as partition values or location. This approach avoids the problem of a large response by not returning duplicate data.
    public var excludeColumnSchema: Swift.Bool?
    /// An expression that filters the partitions to be returned. The expression uses SQL syntax similar to the SQL WHERE filter clause. The SQL statement parser [JSQLParser](http://jsqlparser.sourceforge.net/home.php) parses the expression. Operators: The following are the operators that you can use in the Expression API call: = Checks whether the values of the two operands are equal; if yes, then the condition becomes true. Example: Assume 'variable a' holds 10 and 'variable b' holds 20. (a = b) is not true. < > Checks whether the values of two operands are equal; if the values are not equal, then the condition becomes true. Example: (a < > b) is true. > Checks whether the value of the left operand is greater than the value of the right operand; if yes, then the condition becomes true. Example: (a > b) is not true. < Checks whether the value of the left operand is less than the value of the right operand; if yes, then the condition becomes true. Example: (a < b) is true. >= Checks whether the value of the left operand is greater than or equal to the value of the right operand; if yes, then the condition becomes true. Example: (a >= b) is not true. <= Checks whether the value of the left operand is less than or equal to the value of the right operand; if yes, then the condition becomes true. Example: (a <= b) is true. AND, OR, IN, BETWEEN, LIKE, NOT, IS NULL Logical operators. Supported Partition Key Types: The following are the supported partition keys.
    ///
    /// * string
    ///
    /// * date
    ///
    /// * timestamp
    ///
    /// * int
    ///
    /// * bigint
    ///
    /// * long
    ///
    /// * tinyint
    ///
    /// * smallint
    ///
    /// * decimal
    ///
    ///
    /// If an type is encountered that is not valid, an exception is thrown. The following list shows the valid operators on each type. When you define a crawler, the partitionKey type is created as a STRING, to be compatible with the catalog partitions. Sample API Call:
    public var expression: Swift.String?
    /// The maximum number of partitions to return in a single response.
    public var maxResults: Swift.Int?
    /// A continuation token, if this is not the first call to retrieve these partitions.
    public var nextToken: Swift.String?
    /// The time as of when to read the partition contents. If not set, the most recent transaction commit time will be used. Cannot be specified along with TransactionId.
    public var queryAsOfTime: ClientRuntime.Date?
    /// The segment of the table's partitions to scan in this request.
    public var segment: GlueClientTypes.Segment?
    /// The name of the partitions' table.
    /// This member is required.
    public var tableName: Swift.String?
    /// The transaction ID at which to read the partition contents.
    public var transactionId: Swift.String?

    public init (
        catalogId: Swift.String? = nil,
        databaseName: Swift.String? = nil,
        excludeColumnSchema: Swift.Bool? = nil,
        expression: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        queryAsOfTime: ClientRuntime.Date? = nil,
        segment: GlueClientTypes.Segment? = nil,
        tableName: Swift.String? = nil,
        transactionId: Swift.String? = nil
    )
    {
        self.catalogId = catalogId
        self.databaseName = databaseName
        self.excludeColumnSchema = excludeColumnSchema
        self.expression = expression
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.queryAsOfTime = queryAsOfTime
        self.segment = segment
        self.tableName = tableName
        self.transactionId = transactionId
    }
}
