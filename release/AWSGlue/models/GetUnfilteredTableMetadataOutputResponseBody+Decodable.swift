// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetUnfilteredTableMetadataOutputResponseBody: Swift.Equatable {
    let table: GlueClientTypes.Table?
    let authorizedColumns: [Swift.String]?
    let isRegisteredWithLakeFormation: Swift.Bool
    let cellFilters: [GlueClientTypes.ColumnRowFilter]?
}

extension GetUnfilteredTableMetadataOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case authorizedColumns = "AuthorizedColumns"
        case cellFilters = "CellFilters"
        case isRegisteredWithLakeFormation = "IsRegisteredWithLakeFormation"
        case table = "Table"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tableDecoded = try containerValues.decodeIfPresent(GlueClientTypes.Table.self, forKey: .table)
        table = tableDecoded
        let authorizedColumnsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .authorizedColumns)
        var authorizedColumnsDecoded0:[Swift.String]? = nil
        if let authorizedColumnsContainer = authorizedColumnsContainer {
            authorizedColumnsDecoded0 = [Swift.String]()
            for string0 in authorizedColumnsContainer {
                if let string0 = string0 {
                    authorizedColumnsDecoded0?.append(string0)
                }
            }
        }
        authorizedColumns = authorizedColumnsDecoded0
        let isRegisteredWithLakeFormationDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .isRegisteredWithLakeFormation) ?? false
        isRegisteredWithLakeFormation = isRegisteredWithLakeFormationDecoded
        let cellFiltersContainer = try containerValues.decodeIfPresent([GlueClientTypes.ColumnRowFilter?].self, forKey: .cellFilters)
        var cellFiltersDecoded0:[GlueClientTypes.ColumnRowFilter]? = nil
        if let cellFiltersContainer = cellFiltersContainer {
            cellFiltersDecoded0 = [GlueClientTypes.ColumnRowFilter]()
            for structure0 in cellFiltersContainer {
                if let structure0 = structure0 {
                    cellFiltersDecoded0?.append(structure0)
                }
            }
        }
        cellFilters = cellFiltersDecoded0
    }
}
