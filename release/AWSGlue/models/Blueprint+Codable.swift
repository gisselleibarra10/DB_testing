// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension GlueClientTypes.Blueprint: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case blueprintLocation = "BlueprintLocation"
        case blueprintServiceLocation = "BlueprintServiceLocation"
        case createdOn = "CreatedOn"
        case description = "Description"
        case errorMessage = "ErrorMessage"
        case lastActiveDefinition = "LastActiveDefinition"
        case lastModifiedOn = "LastModifiedOn"
        case name = "Name"
        case parameterSpec = "ParameterSpec"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let blueprintLocation = self.blueprintLocation {
            try encodeContainer.encode(blueprintLocation, forKey: .blueprintLocation)
        }
        if let blueprintServiceLocation = self.blueprintServiceLocation {
            try encodeContainer.encode(blueprintServiceLocation, forKey: .blueprintServiceLocation)
        }
        if let createdOn = self.createdOn {
            try encodeContainer.encode(createdOn.timeIntervalSince1970, forKey: .createdOn)
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let errorMessage = self.errorMessage {
            try encodeContainer.encode(errorMessage, forKey: .errorMessage)
        }
        if let lastActiveDefinition = self.lastActiveDefinition {
            try encodeContainer.encode(lastActiveDefinition, forKey: .lastActiveDefinition)
        }
        if let lastModifiedOn = self.lastModifiedOn {
            try encodeContainer.encode(lastModifiedOn.timeIntervalSince1970, forKey: .lastModifiedOn)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let parameterSpec = self.parameterSpec {
            try encodeContainer.encode(parameterSpec, forKey: .parameterSpec)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let createdOnDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdOn)
        createdOn = createdOnDecoded
        let lastModifiedOnDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedOn)
        lastModifiedOn = lastModifiedOnDecoded
        let parameterSpecDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .parameterSpec)
        parameterSpec = parameterSpecDecoded
        let blueprintLocationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .blueprintLocation)
        blueprintLocation = blueprintLocationDecoded
        let blueprintServiceLocationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .blueprintServiceLocation)
        blueprintServiceLocation = blueprintServiceLocationDecoded
        let statusDecoded = try containerValues.decodeIfPresent(GlueClientTypes.BlueprintStatus.self, forKey: .status)
        status = statusDecoded
        let errorMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .errorMessage)
        errorMessage = errorMessageDecoded
        let lastActiveDefinitionDecoded = try containerValues.decodeIfPresent(GlueClientTypes.LastActiveDefinition.self, forKey: .lastActiveDefinition)
        lastActiveDefinition = lastActiveDefinitionDecoded
    }
}
