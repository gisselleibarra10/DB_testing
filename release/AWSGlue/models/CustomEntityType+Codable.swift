// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension GlueClientTypes.CustomEntityType: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case contextWords = "ContextWords"
        case name = "Name"
        case regexString = "RegexString"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let contextWords = contextWords {
            var contextWordsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .contextWords)
            for contextwords0 in contextWords {
                try contextWordsContainer.encode(contextwords0)
            }
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let regexString = self.regexString {
            try encodeContainer.encode(regexString, forKey: .regexString)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let regexStringDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .regexString)
        regexString = regexStringDecoded
        let contextWordsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .contextWords)
        var contextWordsDecoded0:[Swift.String]? = nil
        if let contextWordsContainer = contextWordsContainer {
            contextWordsDecoded0 = [Swift.String]()
            for string0 in contextWordsContainer {
                if let string0 = string0 {
                    contextWordsDecoded0?.append(string0)
                }
            }
        }
        contextWords = contextWordsDecoded0
    }
}
