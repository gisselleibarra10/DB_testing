// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension GlueClientTypes.ConfusionMatrix: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case numFalseNegatives = "NumFalseNegatives"
        case numFalsePositives = "NumFalsePositives"
        case numTrueNegatives = "NumTrueNegatives"
        case numTruePositives = "NumTruePositives"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let numFalseNegatives = self.numFalseNegatives {
            try encodeContainer.encode(numFalseNegatives, forKey: .numFalseNegatives)
        }
        if let numFalsePositives = self.numFalsePositives {
            try encodeContainer.encode(numFalsePositives, forKey: .numFalsePositives)
        }
        if let numTrueNegatives = self.numTrueNegatives {
            try encodeContainer.encode(numTrueNegatives, forKey: .numTrueNegatives)
        }
        if let numTruePositives = self.numTruePositives {
            try encodeContainer.encode(numTruePositives, forKey: .numTruePositives)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let numTruePositivesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .numTruePositives)
        numTruePositives = numTruePositivesDecoded
        let numFalsePositivesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .numFalsePositives)
        numFalsePositives = numFalsePositivesDecoded
        let numTrueNegativesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .numTrueNegatives)
        numTrueNegatives = numTrueNegativesDecoded
        let numFalseNegativesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .numFalseNegatives)
        numFalseNegatives = numFalseNegativesDecoded
    }
}
