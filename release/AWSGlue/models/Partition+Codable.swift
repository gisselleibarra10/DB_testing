// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension GlueClientTypes.Partition: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case catalogId = "CatalogId"
        case creationTime = "CreationTime"
        case databaseName = "DatabaseName"
        case lastAccessTime = "LastAccessTime"
        case lastAnalyzedTime = "LastAnalyzedTime"
        case parameters = "Parameters"
        case storageDescriptor = "StorageDescriptor"
        case tableName = "TableName"
        case values = "Values"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let catalogId = self.catalogId {
            try encodeContainer.encode(catalogId, forKey: .catalogId)
        }
        if let creationTime = self.creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let databaseName = self.databaseName {
            try encodeContainer.encode(databaseName, forKey: .databaseName)
        }
        if let lastAccessTime = self.lastAccessTime {
            try encodeContainer.encode(lastAccessTime.timeIntervalSince1970, forKey: .lastAccessTime)
        }
        if let lastAnalyzedTime = self.lastAnalyzedTime {
            try encodeContainer.encode(lastAnalyzedTime.timeIntervalSince1970, forKey: .lastAnalyzedTime)
        }
        if let parameters = parameters {
            var parametersContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .parameters)
            for (dictKey0, parametersmap0) in parameters {
                try parametersContainer.encode(parametersmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let storageDescriptor = self.storageDescriptor {
            try encodeContainer.encode(storageDescriptor, forKey: .storageDescriptor)
        }
        if let tableName = self.tableName {
            try encodeContainer.encode(tableName, forKey: .tableName)
        }
        if let values = values {
            var valuesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .values)
            for valuestringlist0 in values {
                try valuesContainer.encode(valuestringlist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let valuesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .values)
        var valuesDecoded0:[Swift.String]? = nil
        if let valuesContainer = valuesContainer {
            valuesDecoded0 = [Swift.String]()
            for string0 in valuesContainer {
                if let string0 = string0 {
                    valuesDecoded0?.append(string0)
                }
            }
        }
        values = valuesDecoded0
        let databaseNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .databaseName)
        databaseName = databaseNameDecoded
        let tableNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tableName)
        tableName = tableNameDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let lastAccessTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastAccessTime)
        lastAccessTime = lastAccessTimeDecoded
        let storageDescriptorDecoded = try containerValues.decodeIfPresent(GlueClientTypes.StorageDescriptor.self, forKey: .storageDescriptor)
        storageDescriptor = storageDescriptorDecoded
        let parametersContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .parameters)
        var parametersDecoded0: [Swift.String:Swift.String]? = nil
        if let parametersContainer = parametersContainer {
            parametersDecoded0 = [Swift.String:Swift.String]()
            for (key0, parametersmapvalue0) in parametersContainer {
                if let parametersmapvalue0 = parametersmapvalue0 {
                    parametersDecoded0?[key0] = parametersmapvalue0
                }
            }
        }
        parameters = parametersDecoded0
        let lastAnalyzedTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastAnalyzedTime)
        lastAnalyzedTime = lastAnalyzedTimeDecoded
        let catalogIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .catalogId)
        catalogId = catalogIdDecoded
    }
}
