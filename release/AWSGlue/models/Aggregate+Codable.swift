// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension GlueClientTypes.Aggregate: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case aggs = "Aggs"
        case groups = "Groups"
        case inputs = "Inputs"
        case name = "Name"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let aggs = aggs {
            var aggsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .aggs)
            for aggregateoperations0 in aggs {
                try aggsContainer.encode(aggregateoperations0)
            }
        }
        if let groups = groups {
            var groupsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .groups)
            for gluestudiopathlist0 in groups {
                var gluestudiopathlist0Container = groupsContainer.nestedUnkeyedContainer()
                for enclosedinstringproperties1 in gluestudiopathlist0 {
                    try gluestudiopathlist0Container.encode(enclosedinstringproperties1)
                }
            }
        }
        if let inputs = inputs {
            var inputsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .inputs)
            for oneinput0 in inputs {
                try inputsContainer.encode(oneinput0)
            }
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let inputsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .inputs)
        var inputsDecoded0:[Swift.String]? = nil
        if let inputsContainer = inputsContainer {
            inputsDecoded0 = [Swift.String]()
            for string0 in inputsContainer {
                if let string0 = string0 {
                    inputsDecoded0?.append(string0)
                }
            }
        }
        inputs = inputsDecoded0
        let groupsContainer = try containerValues.decodeIfPresent([[Swift.String?]?].self, forKey: .groups)
        var groupsDecoded0:[[Swift.String]]? = nil
        if let groupsContainer = groupsContainer {
            groupsDecoded0 = [[Swift.String]]()
            for list0 in groupsContainer {
                var list0Decoded0: [Swift.String]? = nil
                if let list0 = list0 {
                    list0Decoded0 = [Swift.String]()
                    for string1 in list0 {
                        if let string1 = string1 {
                            list0Decoded0?.append(string1)
                        }
                    }
                }
                if let list0Decoded0 = list0Decoded0 {
                    groupsDecoded0?.append(list0Decoded0)
                }
            }
        }
        groups = groupsDecoded0
        let aggsContainer = try containerValues.decodeIfPresent([GlueClientTypes.AggregateOperation?].self, forKey: .aggs)
        var aggsDecoded0:[GlueClientTypes.AggregateOperation]? = nil
        if let aggsContainer = aggsContainer {
            aggsDecoded0 = [GlueClientTypes.AggregateOperation]()
            for structure0 in aggsContainer {
                if let structure0 = structure0 {
                    aggsDecoded0?.append(structure0)
                }
            }
        }
        aggs = aggsDecoded0
    }
}
