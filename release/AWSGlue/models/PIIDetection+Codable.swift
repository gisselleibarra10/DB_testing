// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension GlueClientTypes.PIIDetection: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case entityTypesToDetect = "EntityTypesToDetect"
        case inputs = "Inputs"
        case maskValue = "MaskValue"
        case name = "Name"
        case outputColumnName = "OutputColumnName"
        case piiType = "PiiType"
        case sampleFraction = "SampleFraction"
        case thresholdFraction = "ThresholdFraction"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let entityTypesToDetect = entityTypesToDetect {
            var entityTypesToDetectContainer = encodeContainer.nestedUnkeyedContainer(forKey: .entityTypesToDetect)
            for enclosedinstringproperties0 in entityTypesToDetect {
                try entityTypesToDetectContainer.encode(enclosedinstringproperties0)
            }
        }
        if let inputs = inputs {
            var inputsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .inputs)
            for oneinput0 in inputs {
                try inputsContainer.encode(oneinput0)
            }
        }
        if let maskValue = self.maskValue {
            try encodeContainer.encode(maskValue, forKey: .maskValue)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let outputColumnName = self.outputColumnName {
            try encodeContainer.encode(outputColumnName, forKey: .outputColumnName)
        }
        if let piiType = self.piiType {
            try encodeContainer.encode(piiType.rawValue, forKey: .piiType)
        }
        if let sampleFraction = self.sampleFraction {
            try encodeContainer.encode(sampleFraction, forKey: .sampleFraction)
        }
        if let thresholdFraction = self.thresholdFraction {
            try encodeContainer.encode(thresholdFraction, forKey: .thresholdFraction)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let inputsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .inputs)
        var inputsDecoded0:[Swift.String]? = nil
        if let inputsContainer = inputsContainer {
            inputsDecoded0 = [Swift.String]()
            for string0 in inputsContainer {
                if let string0 = string0 {
                    inputsDecoded0?.append(string0)
                }
            }
        }
        inputs = inputsDecoded0
        let piiTypeDecoded = try containerValues.decodeIfPresent(GlueClientTypes.PiiType.self, forKey: .piiType)
        piiType = piiTypeDecoded
        let entityTypesToDetectContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .entityTypesToDetect)
        var entityTypesToDetectDecoded0:[Swift.String]? = nil
        if let entityTypesToDetectContainer = entityTypesToDetectContainer {
            entityTypesToDetectDecoded0 = [Swift.String]()
            for string0 in entityTypesToDetectContainer {
                if let string0 = string0 {
                    entityTypesToDetectDecoded0?.append(string0)
                }
            }
        }
        entityTypesToDetect = entityTypesToDetectDecoded0
        let outputColumnNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .outputColumnName)
        outputColumnName = outputColumnNameDecoded
        let sampleFractionDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .sampleFraction)
        sampleFraction = sampleFractionDecoded
        let thresholdFractionDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .thresholdFraction)
        thresholdFraction = thresholdFractionDecoded
        let maskValueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .maskValue)
        maskValue = maskValueDecoded
    }
}
