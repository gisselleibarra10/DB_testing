// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension GlueClientTypes.FilterExpression: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case negated = "Negated"
        case operation = "Operation"
        case values = "Values"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let negated = self.negated {
            try encodeContainer.encode(negated, forKey: .negated)
        }
        if let operation = self.operation {
            try encodeContainer.encode(operation.rawValue, forKey: .operation)
        }
        if let values = values {
            var valuesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .values)
            for filtervalues0 in values {
                try valuesContainer.encode(filtervalues0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let operationDecoded = try containerValues.decodeIfPresent(GlueClientTypes.FilterOperation.self, forKey: .operation)
        operation = operationDecoded
        let negatedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .negated)
        negated = negatedDecoded
        let valuesContainer = try containerValues.decodeIfPresent([GlueClientTypes.FilterValue?].self, forKey: .values)
        var valuesDecoded0:[GlueClientTypes.FilterValue]? = nil
        if let valuesContainer = valuesContainer {
            valuesDecoded0 = [GlueClientTypes.FilterValue]()
            for structure0 in valuesContainer {
                if let structure0 = structure0 {
                    valuesDecoded0?.append(structure0)
                }
            }
        }
        values = valuesDecoded0
    }
}
