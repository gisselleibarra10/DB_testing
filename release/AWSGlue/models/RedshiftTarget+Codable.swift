// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension GlueClientTypes.RedshiftTarget: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case database = "Database"
        case inputs = "Inputs"
        case name = "Name"
        case redshiftTmpDir = "RedshiftTmpDir"
        case table = "Table"
        case tmpDirIAMRole = "TmpDirIAMRole"
        case upsertRedshiftOptions = "UpsertRedshiftOptions"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let database = self.database {
            try encodeContainer.encode(database, forKey: .database)
        }
        if let inputs = inputs {
            var inputsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .inputs)
            for oneinput0 in inputs {
                try inputsContainer.encode(oneinput0)
            }
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let redshiftTmpDir = self.redshiftTmpDir {
            try encodeContainer.encode(redshiftTmpDir, forKey: .redshiftTmpDir)
        }
        if let table = self.table {
            try encodeContainer.encode(table, forKey: .table)
        }
        if let tmpDirIAMRole = self.tmpDirIAMRole {
            try encodeContainer.encode(tmpDirIAMRole, forKey: .tmpDirIAMRole)
        }
        if let upsertRedshiftOptions = self.upsertRedshiftOptions {
            try encodeContainer.encode(upsertRedshiftOptions, forKey: .upsertRedshiftOptions)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let inputsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .inputs)
        var inputsDecoded0:[Swift.String]? = nil
        if let inputsContainer = inputsContainer {
            inputsDecoded0 = [Swift.String]()
            for string0 in inputsContainer {
                if let string0 = string0 {
                    inputsDecoded0?.append(string0)
                }
            }
        }
        inputs = inputsDecoded0
        let databaseDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .database)
        database = databaseDecoded
        let tableDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .table)
        table = tableDecoded
        let redshiftTmpDirDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .redshiftTmpDir)
        redshiftTmpDir = redshiftTmpDirDecoded
        let tmpDirIAMRoleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tmpDirIAMRole)
        tmpDirIAMRole = tmpDirIAMRoleDecoded
        let upsertRedshiftOptionsDecoded = try containerValues.decodeIfPresent(GlueClientTypes.UpsertRedshiftTargetOptions.self, forKey: .upsertRedshiftOptions)
        upsertRedshiftOptions = upsertRedshiftOptionsDecoded
    }
}
