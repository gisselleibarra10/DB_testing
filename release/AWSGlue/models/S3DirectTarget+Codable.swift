// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension GlueClientTypes.S3DirectTarget: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case compression = "Compression"
        case format = "Format"
        case inputs = "Inputs"
        case name = "Name"
        case partitionKeys = "PartitionKeys"
        case path = "Path"
        case schemaChangePolicy = "SchemaChangePolicy"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let compression = self.compression {
            try encodeContainer.encode(compression, forKey: .compression)
        }
        if let format = self.format {
            try encodeContainer.encode(format.rawValue, forKey: .format)
        }
        if let inputs = inputs {
            var inputsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .inputs)
            for oneinput0 in inputs {
                try inputsContainer.encode(oneinput0)
            }
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let partitionKeys = partitionKeys {
            var partitionKeysContainer = encodeContainer.nestedUnkeyedContainer(forKey: .partitionKeys)
            for gluestudiopathlist0 in partitionKeys {
                var gluestudiopathlist0Container = partitionKeysContainer.nestedUnkeyedContainer()
                for enclosedinstringproperties1 in gluestudiopathlist0 {
                    try gluestudiopathlist0Container.encode(enclosedinstringproperties1)
                }
            }
        }
        if let path = self.path {
            try encodeContainer.encode(path, forKey: .path)
        }
        if let schemaChangePolicy = self.schemaChangePolicy {
            try encodeContainer.encode(schemaChangePolicy, forKey: .schemaChangePolicy)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let inputsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .inputs)
        var inputsDecoded0:[Swift.String]? = nil
        if let inputsContainer = inputsContainer {
            inputsDecoded0 = [Swift.String]()
            for string0 in inputsContainer {
                if let string0 = string0 {
                    inputsDecoded0?.append(string0)
                }
            }
        }
        inputs = inputsDecoded0
        let partitionKeysContainer = try containerValues.decodeIfPresent([[Swift.String?]?].self, forKey: .partitionKeys)
        var partitionKeysDecoded0:[[Swift.String]]? = nil
        if let partitionKeysContainer = partitionKeysContainer {
            partitionKeysDecoded0 = [[Swift.String]]()
            for list0 in partitionKeysContainer {
                var list0Decoded0: [Swift.String]? = nil
                if let list0 = list0 {
                    list0Decoded0 = [Swift.String]()
                    for string1 in list0 {
                        if let string1 = string1 {
                            list0Decoded0?.append(string1)
                        }
                    }
                }
                if let list0Decoded0 = list0Decoded0 {
                    partitionKeysDecoded0?.append(list0Decoded0)
                }
            }
        }
        partitionKeys = partitionKeysDecoded0
        let pathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .path)
        path = pathDecoded
        let compressionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .compression)
        compression = compressionDecoded
        let formatDecoded = try containerValues.decodeIfPresent(GlueClientTypes.TargetFormat.self, forKey: .format)
        format = formatDecoded
        let schemaChangePolicyDecoded = try containerValues.decodeIfPresent(GlueClientTypes.DirectSchemaChangePolicy.self, forKey: .schemaChangePolicy)
        schemaChangePolicy = schemaChangePolicyDecoded
    }
}
