// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension GlueClientTypes {
    /// Information about a specific trigger.
    public struct Trigger: Swift.Equatable {
        /// The actions initiated by this trigger.
        public var actions: [GlueClientTypes.Action]?
        /// A description of this trigger.
        public var description: Swift.String?
        /// Batch condition that must be met (specified number of events received or batch time window expired) before EventBridge event trigger fires.
        public var eventBatchingCondition: GlueClientTypes.EventBatchingCondition?
        /// Reserved for future use.
        public var id: Swift.String?
        /// The name of the trigger.
        public var name: Swift.String?
        /// The predicate of this trigger, which defines when it will fire.
        public var predicate: GlueClientTypes.Predicate?
        /// A cron expression used to specify the schedule (see [Time-Based Schedules for Jobs and Crawlers](https://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html). For example, to run something every day at 12:15 UTC, you would specify: cron(15 12 * * ? *).
        public var schedule: Swift.String?
        /// The current state of the trigger.
        public var state: GlueClientTypes.TriggerState?
        /// The type of trigger that this is.
        public var type: GlueClientTypes.TriggerType?
        /// The name of the workflow associated with the trigger.
        public var workflowName: Swift.String?

        public init (
            actions: [GlueClientTypes.Action]? = nil,
            description: Swift.String? = nil,
            eventBatchingCondition: GlueClientTypes.EventBatchingCondition? = nil,
            id: Swift.String? = nil,
            name: Swift.String? = nil,
            predicate: GlueClientTypes.Predicate? = nil,
            schedule: Swift.String? = nil,
            state: GlueClientTypes.TriggerState? = nil,
            type: GlueClientTypes.TriggerType? = nil,
            workflowName: Swift.String? = nil
        )
        {
            self.actions = actions
            self.description = description
            self.eventBatchingCondition = eventBatchingCondition
            self.id = id
            self.name = name
            self.predicate = predicate
            self.schedule = schedule
            self.state = state
            self.type = type
            self.workflowName = workflowName
        }
    }

}
