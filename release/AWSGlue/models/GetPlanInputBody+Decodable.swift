// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetPlanInputBody: Swift.Equatable {
    let mapping: [GlueClientTypes.MappingEntry]?
    let source: GlueClientTypes.CatalogEntry?
    let sinks: [GlueClientTypes.CatalogEntry]?
    let location: GlueClientTypes.Location?
    let language: GlueClientTypes.Language?
    let additionalPlanOptionsMap: [Swift.String:Swift.String]?
}

extension GetPlanInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case additionalPlanOptionsMap = "AdditionalPlanOptionsMap"
        case language = "Language"
        case location = "Location"
        case mapping = "Mapping"
        case sinks = "Sinks"
        case source = "Source"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let mappingContainer = try containerValues.decodeIfPresent([GlueClientTypes.MappingEntry?].self, forKey: .mapping)
        var mappingDecoded0:[GlueClientTypes.MappingEntry]? = nil
        if let mappingContainer = mappingContainer {
            mappingDecoded0 = [GlueClientTypes.MappingEntry]()
            for structure0 in mappingContainer {
                if let structure0 = structure0 {
                    mappingDecoded0?.append(structure0)
                }
            }
        }
        mapping = mappingDecoded0
        let sourceDecoded = try containerValues.decodeIfPresent(GlueClientTypes.CatalogEntry.self, forKey: .source)
        source = sourceDecoded
        let sinksContainer = try containerValues.decodeIfPresent([GlueClientTypes.CatalogEntry?].self, forKey: .sinks)
        var sinksDecoded0:[GlueClientTypes.CatalogEntry]? = nil
        if let sinksContainer = sinksContainer {
            sinksDecoded0 = [GlueClientTypes.CatalogEntry]()
            for structure0 in sinksContainer {
                if let structure0 = structure0 {
                    sinksDecoded0?.append(structure0)
                }
            }
        }
        sinks = sinksDecoded0
        let locationDecoded = try containerValues.decodeIfPresent(GlueClientTypes.Location.self, forKey: .location)
        location = locationDecoded
        let languageDecoded = try containerValues.decodeIfPresent(GlueClientTypes.Language.self, forKey: .language)
        language = languageDecoded
        let additionalPlanOptionsMapContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .additionalPlanOptionsMap)
        var additionalPlanOptionsMapDecoded0: [Swift.String:Swift.String]? = nil
        if let additionalPlanOptionsMapContainer = additionalPlanOptionsMapContainer {
            additionalPlanOptionsMapDecoded0 = [Swift.String:Swift.String]()
            for (key0, genericstring0) in additionalPlanOptionsMapContainer {
                if let genericstring0 = genericstring0 {
                    additionalPlanOptionsMapDecoded0?[key0] = genericstring0
                }
            }
        }
        additionalPlanOptionsMap = additionalPlanOptionsMapDecoded0
    }
}
