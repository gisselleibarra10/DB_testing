// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CreateSessionInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case command = "Command"
        case connections = "Connections"
        case defaultArguments = "DefaultArguments"
        case description = "Description"
        case glueVersion = "GlueVersion"
        case id = "Id"
        case idleTimeout = "IdleTimeout"
        case maxCapacity = "MaxCapacity"
        case numberOfWorkers = "NumberOfWorkers"
        case requestOrigin = "RequestOrigin"
        case role = "Role"
        case securityConfiguration = "SecurityConfiguration"
        case tags = "Tags"
        case timeout = "Timeout"
        case workerType = "WorkerType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let command = self.command {
            try encodeContainer.encode(command, forKey: .command)
        }
        if let connections = self.connections {
            try encodeContainer.encode(connections, forKey: .connections)
        }
        if let defaultArguments = defaultArguments {
            var defaultArgumentsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .defaultArguments)
            for (dictKey0, orchestrationargumentsmap0) in defaultArguments {
                try defaultArgumentsContainer.encode(orchestrationargumentsmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let glueVersion = self.glueVersion {
            try encodeContainer.encode(glueVersion, forKey: .glueVersion)
        }
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let idleTimeout = self.idleTimeout {
            try encodeContainer.encode(idleTimeout, forKey: .idleTimeout)
        }
        if let maxCapacity = self.maxCapacity {
            try encodeContainer.encode(maxCapacity, forKey: .maxCapacity)
        }
        if let numberOfWorkers = self.numberOfWorkers {
            try encodeContainer.encode(numberOfWorkers, forKey: .numberOfWorkers)
        }
        if let requestOrigin = self.requestOrigin {
            try encodeContainer.encode(requestOrigin, forKey: .requestOrigin)
        }
        if let role = self.role {
            try encodeContainer.encode(role, forKey: .role)
        }
        if let securityConfiguration = self.securityConfiguration {
            try encodeContainer.encode(securityConfiguration, forKey: .securityConfiguration)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, tagsmap0) in tags {
                try tagsContainer.encode(tagsmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let timeout = self.timeout {
            try encodeContainer.encode(timeout, forKey: .timeout)
        }
        if let workerType = self.workerType {
            try encodeContainer.encode(workerType.rawValue, forKey: .workerType)
        }
    }
}
