// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension GlueClientTypes.TransformFilterCriteria: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createdAfter = "CreatedAfter"
        case createdBefore = "CreatedBefore"
        case glueVersion = "GlueVersion"
        case lastModifiedAfter = "LastModifiedAfter"
        case lastModifiedBefore = "LastModifiedBefore"
        case name = "Name"
        case schema = "Schema"
        case status = "Status"
        case transformType = "TransformType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let createdAfter = self.createdAfter {
            try encodeContainer.encode(createdAfter.timeIntervalSince1970, forKey: .createdAfter)
        }
        if let createdBefore = self.createdBefore {
            try encodeContainer.encode(createdBefore.timeIntervalSince1970, forKey: .createdBefore)
        }
        if let glueVersion = self.glueVersion {
            try encodeContainer.encode(glueVersion, forKey: .glueVersion)
        }
        if let lastModifiedAfter = self.lastModifiedAfter {
            try encodeContainer.encode(lastModifiedAfter.timeIntervalSince1970, forKey: .lastModifiedAfter)
        }
        if let lastModifiedBefore = self.lastModifiedBefore {
            try encodeContainer.encode(lastModifiedBefore.timeIntervalSince1970, forKey: .lastModifiedBefore)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let schema = schema {
            var schemaContainer = encodeContainer.nestedUnkeyedContainer(forKey: .schema)
            for transformschema0 in schema {
                try schemaContainer.encode(transformschema0)
            }
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let transformType = self.transformType {
            try encodeContainer.encode(transformType.rawValue, forKey: .transformType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let transformTypeDecoded = try containerValues.decodeIfPresent(GlueClientTypes.TransformType.self, forKey: .transformType)
        transformType = transformTypeDecoded
        let statusDecoded = try containerValues.decodeIfPresent(GlueClientTypes.TransformStatusType.self, forKey: .status)
        status = statusDecoded
        let glueVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .glueVersion)
        glueVersion = glueVersionDecoded
        let createdBeforeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdBefore)
        createdBefore = createdBeforeDecoded
        let createdAfterDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdAfter)
        createdAfter = createdAfterDecoded
        let lastModifiedBeforeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedBefore)
        lastModifiedBefore = lastModifiedBeforeDecoded
        let lastModifiedAfterDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedAfter)
        lastModifiedAfter = lastModifiedAfterDecoded
        let schemaContainer = try containerValues.decodeIfPresent([GlueClientTypes.SchemaColumn?].self, forKey: .schema)
        var schemaDecoded0:[GlueClientTypes.SchemaColumn]? = nil
        if let schemaContainer = schemaContainer {
            schemaDecoded0 = [GlueClientTypes.SchemaColumn]()
            for structure0 in schemaContainer {
                if let structure0 = structure0 {
                    schemaDecoded0?.append(structure0)
                }
            }
        }
        schema = schemaDecoded0
    }
}
