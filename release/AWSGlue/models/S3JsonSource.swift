// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension GlueClientTypes {
    /// Specifies a JSON data store stored in Amazon S3.
    public struct S3JsonSource: Swift.Equatable {
        /// Specifies additional connection options.
        public var additionalOptions: GlueClientTypes.S3DirectSourceAdditionalOptions?
        /// Specifies how the data is compressed. This is generally not necessary if the data has a standard file extension. Possible values are "gzip" and "bzip").
        public var compressionType: GlueClientTypes.CompressionType?
        /// A string containing a JSON list of Unix-style glob patterns to exclude. For example, "[\"**.pdf\"]" excludes all PDF files.
        public var exclusions: [Swift.String]?
        /// Grouping files is turned on by default when the input contains more than 50,000 files. To turn on grouping with fewer than 50,000 files, set this parameter to "inPartition". To disable grouping when there are more than 50,000 files, set this parameter to "none".
        public var groupFiles: Swift.String?
        /// The target group size in bytes. The default is computed based on the input data size and the size of your cluster. When there are fewer than 50,000 input files, "groupFiles" must be set to "inPartition" for this to take effect.
        public var groupSize: Swift.String?
        /// A JsonPath string defining the JSON data.
        public var jsonPath: Swift.String?
        /// This option controls the duration in milliseconds after which the s3 listing is likely to be consistent. Files with modification timestamps falling within the last maxBand milliseconds are tracked specially when using JobBookmarks to account for Amazon S3 eventual consistency. Most users don't need to set this option. The default is 900000 milliseconds, or 15 minutes.
        public var maxBand: Swift.Int?
        /// This option specifies the maximum number of files to save from the last maxBand seconds. If this number is exceeded, extra files are skipped and only processed in the next job run.
        public var maxFilesInBand: Swift.Int?
        /// A Boolean value that specifies whether a single record can span multiple lines. This can occur when a field contains a quoted new-line character. You must set this option to True if any record spans multiple lines. The default value is False, which allows for more aggressive file-splitting during parsing.
        public var multiline: Swift.Bool?
        /// The name of the data store.
        /// This member is required.
        public var name: Swift.String?
        /// Specifies the data schema for the S3 JSON source.
        public var outputSchemas: [GlueClientTypes.GlueSchema]?
        /// A list of the Amazon S3 paths to read from.
        /// This member is required.
        public var paths: [Swift.String]?
        /// If set to true, recursively reads files in all subdirectories under the specified paths.
        public var recurse: Swift.Bool?

        public init (
            additionalOptions: GlueClientTypes.S3DirectSourceAdditionalOptions? = nil,
            compressionType: GlueClientTypes.CompressionType? = nil,
            exclusions: [Swift.String]? = nil,
            groupFiles: Swift.String? = nil,
            groupSize: Swift.String? = nil,
            jsonPath: Swift.String? = nil,
            maxBand: Swift.Int? = nil,
            maxFilesInBand: Swift.Int? = nil,
            multiline: Swift.Bool? = nil,
            name: Swift.String? = nil,
            outputSchemas: [GlueClientTypes.GlueSchema]? = nil,
            paths: [Swift.String]? = nil,
            recurse: Swift.Bool? = nil
        )
        {
            self.additionalOptions = additionalOptions
            self.compressionType = compressionType
            self.exclusions = exclusions
            self.groupFiles = groupFiles
            self.groupSize = groupSize
            self.jsonPath = jsonPath
            self.maxBand = maxBand
            self.maxFilesInBand = maxFilesInBand
            self.multiline = multiline
            self.name = name
            self.outputSchemas = outputSchemas
            self.paths = paths
            self.recurse = recurse
        }
    }

}
