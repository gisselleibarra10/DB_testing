// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension GlueClientTypes.Crawler: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case classifiers = "Classifiers"
        case configuration = "Configuration"
        case crawlElapsedTime = "CrawlElapsedTime"
        case crawlerSecurityConfiguration = "CrawlerSecurityConfiguration"
        case creationTime = "CreationTime"
        case databaseName = "DatabaseName"
        case description = "Description"
        case lakeFormationConfiguration = "LakeFormationConfiguration"
        case lastCrawl = "LastCrawl"
        case lastUpdated = "LastUpdated"
        case lineageConfiguration = "LineageConfiguration"
        case name = "Name"
        case recrawlPolicy = "RecrawlPolicy"
        case role = "Role"
        case schedule = "Schedule"
        case schemaChangePolicy = "SchemaChangePolicy"
        case state = "State"
        case tablePrefix = "TablePrefix"
        case targets = "Targets"
        case version = "Version"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let classifiers = classifiers {
            var classifiersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .classifiers)
            for classifiernamelist0 in classifiers {
                try classifiersContainer.encode(classifiernamelist0)
            }
        }
        if let configuration = self.configuration {
            try encodeContainer.encode(configuration, forKey: .configuration)
        }
        if crawlElapsedTime != 0 {
            try encodeContainer.encode(crawlElapsedTime, forKey: .crawlElapsedTime)
        }
        if let crawlerSecurityConfiguration = self.crawlerSecurityConfiguration {
            try encodeContainer.encode(crawlerSecurityConfiguration, forKey: .crawlerSecurityConfiguration)
        }
        if let creationTime = self.creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let databaseName = self.databaseName {
            try encodeContainer.encode(databaseName, forKey: .databaseName)
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let lakeFormationConfiguration = self.lakeFormationConfiguration {
            try encodeContainer.encode(lakeFormationConfiguration, forKey: .lakeFormationConfiguration)
        }
        if let lastCrawl = self.lastCrawl {
            try encodeContainer.encode(lastCrawl, forKey: .lastCrawl)
        }
        if let lastUpdated = self.lastUpdated {
            try encodeContainer.encode(lastUpdated.timeIntervalSince1970, forKey: .lastUpdated)
        }
        if let lineageConfiguration = self.lineageConfiguration {
            try encodeContainer.encode(lineageConfiguration, forKey: .lineageConfiguration)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let recrawlPolicy = self.recrawlPolicy {
            try encodeContainer.encode(recrawlPolicy, forKey: .recrawlPolicy)
        }
        if let role = self.role {
            try encodeContainer.encode(role, forKey: .role)
        }
        if let schedule = self.schedule {
            try encodeContainer.encode(schedule, forKey: .schedule)
        }
        if let schemaChangePolicy = self.schemaChangePolicy {
            try encodeContainer.encode(schemaChangePolicy, forKey: .schemaChangePolicy)
        }
        if let state = self.state {
            try encodeContainer.encode(state.rawValue, forKey: .state)
        }
        if let tablePrefix = self.tablePrefix {
            try encodeContainer.encode(tablePrefix, forKey: .tablePrefix)
        }
        if let targets = self.targets {
            try encodeContainer.encode(targets, forKey: .targets)
        }
        if version != 0 {
            try encodeContainer.encode(version, forKey: .version)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let roleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .role)
        role = roleDecoded
        let targetsDecoded = try containerValues.decodeIfPresent(GlueClientTypes.CrawlerTargets.self, forKey: .targets)
        targets = targetsDecoded
        let databaseNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .databaseName)
        databaseName = databaseNameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let classifiersContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .classifiers)
        var classifiersDecoded0:[Swift.String]? = nil
        if let classifiersContainer = classifiersContainer {
            classifiersDecoded0 = [Swift.String]()
            for string0 in classifiersContainer {
                if let string0 = string0 {
                    classifiersDecoded0?.append(string0)
                }
            }
        }
        classifiers = classifiersDecoded0
        let recrawlPolicyDecoded = try containerValues.decodeIfPresent(GlueClientTypes.RecrawlPolicy.self, forKey: .recrawlPolicy)
        recrawlPolicy = recrawlPolicyDecoded
        let schemaChangePolicyDecoded = try containerValues.decodeIfPresent(GlueClientTypes.SchemaChangePolicy.self, forKey: .schemaChangePolicy)
        schemaChangePolicy = schemaChangePolicyDecoded
        let lineageConfigurationDecoded = try containerValues.decodeIfPresent(GlueClientTypes.LineageConfiguration.self, forKey: .lineageConfiguration)
        lineageConfiguration = lineageConfigurationDecoded
        let stateDecoded = try containerValues.decodeIfPresent(GlueClientTypes.CrawlerState.self, forKey: .state)
        state = stateDecoded
        let tablePrefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tablePrefix)
        tablePrefix = tablePrefixDecoded
        let scheduleDecoded = try containerValues.decodeIfPresent(GlueClientTypes.Schedule.self, forKey: .schedule)
        schedule = scheduleDecoded
        let crawlElapsedTimeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .crawlElapsedTime) ?? 0
        crawlElapsedTime = crawlElapsedTimeDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let lastUpdatedDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastUpdated)
        lastUpdated = lastUpdatedDecoded
        let lastCrawlDecoded = try containerValues.decodeIfPresent(GlueClientTypes.LastCrawlInfo.self, forKey: .lastCrawl)
        lastCrawl = lastCrawlDecoded
        let versionDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .version) ?? 0
        version = versionDecoded
        let configurationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .configuration)
        configuration = configurationDecoded
        let crawlerSecurityConfigurationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .crawlerSecurityConfiguration)
        crawlerSecurityConfiguration = crawlerSecurityConfigurationDecoded
        let lakeFormationConfigurationDecoded = try containerValues.decodeIfPresent(GlueClientTypes.LakeFormationConfiguration.self, forKey: .lakeFormationConfiguration)
        lakeFormationConfiguration = lakeFormationConfigurationDecoded
    }
}
