// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension GlueClientTypes.Mapping: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case children = "Children"
        case dropped = "Dropped"
        case fromPath = "FromPath"
        case fromType = "FromType"
        case toKey = "ToKey"
        case toType = "ToType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let children = children {
            var childrenContainer = encodeContainer.nestedUnkeyedContainer(forKey: .children)
            for mappings0 in children {
                try childrenContainer.encode(mappings0)
            }
        }
        if let dropped = self.dropped {
            try encodeContainer.encode(dropped, forKey: .dropped)
        }
        if let fromPath = fromPath {
            var fromPathContainer = encodeContainer.nestedUnkeyedContainer(forKey: .fromPath)
            for enclosedinstringproperties0 in fromPath {
                try fromPathContainer.encode(enclosedinstringproperties0)
            }
        }
        if let fromType = self.fromType {
            try encodeContainer.encode(fromType, forKey: .fromType)
        }
        if let toKey = self.toKey {
            try encodeContainer.encode(toKey, forKey: .toKey)
        }
        if let toType = self.toType {
            try encodeContainer.encode(toType, forKey: .toType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let toKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .toKey)
        toKey = toKeyDecoded
        let fromPathContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .fromPath)
        var fromPathDecoded0:[Swift.String]? = nil
        if let fromPathContainer = fromPathContainer {
            fromPathDecoded0 = [Swift.String]()
            for string0 in fromPathContainer {
                if let string0 = string0 {
                    fromPathDecoded0?.append(string0)
                }
            }
        }
        fromPath = fromPathDecoded0
        let fromTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fromType)
        fromType = fromTypeDecoded
        let toTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .toType)
        toType = toTypeDecoded
        let droppedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .dropped)
        dropped = droppedDecoded
        let childrenContainer = try containerValues.decodeIfPresent([GlueClientTypes.Mapping?].self, forKey: .children)
        var childrenDecoded0:[GlueClientTypes.Mapping]? = nil
        if let childrenContainer = childrenContainer {
            childrenDecoded0 = [GlueClientTypes.Mapping]()
            for structure0 in childrenContainer {
                if let structure0 = structure0 {
                    childrenDecoded0?.append(structure0)
                }
            }
        }
        children = childrenDecoded0
    }
}
