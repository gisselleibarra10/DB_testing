// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension GlueClientTypes.JDBCConnectorOptions: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dataTypeMapping = "DataTypeMapping"
        case filterPredicate = "FilterPredicate"
        case jobBookmarkKeys = "JobBookmarkKeys"
        case jobBookmarkKeysSortOrder = "JobBookmarkKeysSortOrder"
        case lowerBound = "LowerBound"
        case numPartitions = "NumPartitions"
        case partitionColumn = "PartitionColumn"
        case upperBound = "UpperBound"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dataTypeMapping = dataTypeMapping {
            var dataTypeMappingContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .dataTypeMapping)
            for (dictKey0, jdbcdatatypemapping0) in dataTypeMapping {
                try dataTypeMappingContainer.encode(jdbcdatatypemapping0.rawValue, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let filterPredicate = self.filterPredicate {
            try encodeContainer.encode(filterPredicate, forKey: .filterPredicate)
        }
        if let jobBookmarkKeys = jobBookmarkKeys {
            var jobBookmarkKeysContainer = encodeContainer.nestedUnkeyedContainer(forKey: .jobBookmarkKeys)
            for enclosedinstringproperties0 in jobBookmarkKeys {
                try jobBookmarkKeysContainer.encode(enclosedinstringproperties0)
            }
        }
        if let jobBookmarkKeysSortOrder = self.jobBookmarkKeysSortOrder {
            try encodeContainer.encode(jobBookmarkKeysSortOrder, forKey: .jobBookmarkKeysSortOrder)
        }
        if let lowerBound = self.lowerBound {
            try encodeContainer.encode(lowerBound, forKey: .lowerBound)
        }
        if let numPartitions = self.numPartitions {
            try encodeContainer.encode(numPartitions, forKey: .numPartitions)
        }
        if let partitionColumn = self.partitionColumn {
            try encodeContainer.encode(partitionColumn, forKey: .partitionColumn)
        }
        if let upperBound = self.upperBound {
            try encodeContainer.encode(upperBound, forKey: .upperBound)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let filterPredicateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .filterPredicate)
        filterPredicate = filterPredicateDecoded
        let partitionColumnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .partitionColumn)
        partitionColumn = partitionColumnDecoded
        let lowerBoundDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .lowerBound)
        lowerBound = lowerBoundDecoded
        let upperBoundDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .upperBound)
        upperBound = upperBoundDecoded
        let numPartitionsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .numPartitions)
        numPartitions = numPartitionsDecoded
        let jobBookmarkKeysContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .jobBookmarkKeys)
        var jobBookmarkKeysDecoded0:[Swift.String]? = nil
        if let jobBookmarkKeysContainer = jobBookmarkKeysContainer {
            jobBookmarkKeysDecoded0 = [Swift.String]()
            for string0 in jobBookmarkKeysContainer {
                if let string0 = string0 {
                    jobBookmarkKeysDecoded0?.append(string0)
                }
            }
        }
        jobBookmarkKeys = jobBookmarkKeysDecoded0
        let jobBookmarkKeysSortOrderDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobBookmarkKeysSortOrder)
        jobBookmarkKeysSortOrder = jobBookmarkKeysSortOrderDecoded
        let dataTypeMappingContainer = try containerValues.decodeIfPresent([Swift.String: GlueClientTypes.GlueRecordType?].self, forKey: .dataTypeMapping)
        var dataTypeMappingDecoded0: [Swift.String:GlueClientTypes.GlueRecordType]? = nil
        if let dataTypeMappingContainer = dataTypeMappingContainer {
            dataTypeMappingDecoded0 = [Swift.String:GlueClientTypes.GlueRecordType]()
            for (key0, gluerecordtype0) in dataTypeMappingContainer {
                if let gluerecordtype0 = gluerecordtype0 {
                    dataTypeMappingDecoded0?[key0] = gluerecordtype0
                }
            }
        }
        dataTypeMapping = dataTypeMappingDecoded0
    }
}
