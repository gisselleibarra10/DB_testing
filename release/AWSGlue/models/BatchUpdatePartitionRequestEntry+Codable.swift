// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension GlueClientTypes.BatchUpdatePartitionRequestEntry: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case partitionInput = "PartitionInput"
        case partitionValueList = "PartitionValueList"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let partitionInput = self.partitionInput {
            try encodeContainer.encode(partitionInput, forKey: .partitionInput)
        }
        if let partitionValueList = partitionValueList {
            var partitionValueListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .partitionValueList)
            for boundedpartitionvaluelist0 in partitionValueList {
                try partitionValueListContainer.encode(boundedpartitionvaluelist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let partitionValueListContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .partitionValueList)
        var partitionValueListDecoded0:[Swift.String]? = nil
        if let partitionValueListContainer = partitionValueListContainer {
            partitionValueListDecoded0 = [Swift.String]()
            for string0 in partitionValueListContainer {
                if let string0 = string0 {
                    partitionValueListDecoded0?.append(string0)
                }
            }
        }
        partitionValueList = partitionValueListDecoded0
        let partitionInputDecoded = try containerValues.decodeIfPresent(GlueClientTypes.PartitionInput.self, forKey: .partitionInput)
        partitionInput = partitionInputDecoded
    }
}
