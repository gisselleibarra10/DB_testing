// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension GlueClientTypes.JoinColumn: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case from = "From"
        case keys = "Keys"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let from = self.from {
            try encodeContainer.encode(from, forKey: .from)
        }
        if let keys = keys {
            var keysContainer = encodeContainer.nestedUnkeyedContainer(forKey: .keys)
            for gluestudiopathlist0 in keys {
                var gluestudiopathlist0Container = keysContainer.nestedUnkeyedContainer()
                for enclosedinstringproperties1 in gluestudiopathlist0 {
                    try gluestudiopathlist0Container.encode(enclosedinstringproperties1)
                }
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fromDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .from)
        from = fromDecoded
        let keysContainer = try containerValues.decodeIfPresent([[Swift.String?]?].self, forKey: .keys)
        var keysDecoded0:[[Swift.String]]? = nil
        if let keysContainer = keysContainer {
            keysDecoded0 = [[Swift.String]]()
            for list0 in keysContainer {
                var list0Decoded0: [Swift.String]? = nil
                if let list0 = list0 {
                    list0Decoded0 = [Swift.String]()
                    for string1 in list0 {
                        if let string1 = string1 {
                            list0Decoded0?.append(string1)
                        }
                    }
                }
                if let list0Decoded0 = list0Decoded0 {
                    keysDecoded0?.append(list0Decoded0)
                }
            }
        }
        keys = keysDecoded0
    }
}
