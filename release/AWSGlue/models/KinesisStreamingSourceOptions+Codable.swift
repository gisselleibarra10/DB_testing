// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension GlueClientTypes.KinesisStreamingSourceOptions: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case addIdleTimeBetweenReads = "AddIdleTimeBetweenReads"
        case avoidEmptyBatches = "AvoidEmptyBatches"
        case classification = "Classification"
        case delimiter = "Delimiter"
        case describeShardInterval = "DescribeShardInterval"
        case endpointUrl = "EndpointUrl"
        case idleTimeBetweenReadsInMs = "IdleTimeBetweenReadsInMs"
        case maxFetchRecordsPerShard = "MaxFetchRecordsPerShard"
        case maxFetchTimeInMs = "MaxFetchTimeInMs"
        case maxRecordPerRead = "MaxRecordPerRead"
        case maxRetryIntervalMs = "MaxRetryIntervalMs"
        case numRetries = "NumRetries"
        case retryIntervalMs = "RetryIntervalMs"
        case roleArn = "RoleArn"
        case roleSessionName = "RoleSessionName"
        case startingPosition = "StartingPosition"
        case streamArn = "StreamArn"
        case streamName = "StreamName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let addIdleTimeBetweenReads = self.addIdleTimeBetweenReads {
            try encodeContainer.encode(addIdleTimeBetweenReads, forKey: .addIdleTimeBetweenReads)
        }
        if let avoidEmptyBatches = self.avoidEmptyBatches {
            try encodeContainer.encode(avoidEmptyBatches, forKey: .avoidEmptyBatches)
        }
        if let classification = self.classification {
            try encodeContainer.encode(classification, forKey: .classification)
        }
        if let delimiter = self.delimiter {
            try encodeContainer.encode(delimiter, forKey: .delimiter)
        }
        if let describeShardInterval = self.describeShardInterval {
            try encodeContainer.encode(describeShardInterval, forKey: .describeShardInterval)
        }
        if let endpointUrl = self.endpointUrl {
            try encodeContainer.encode(endpointUrl, forKey: .endpointUrl)
        }
        if let idleTimeBetweenReadsInMs = self.idleTimeBetweenReadsInMs {
            try encodeContainer.encode(idleTimeBetweenReadsInMs, forKey: .idleTimeBetweenReadsInMs)
        }
        if let maxFetchRecordsPerShard = self.maxFetchRecordsPerShard {
            try encodeContainer.encode(maxFetchRecordsPerShard, forKey: .maxFetchRecordsPerShard)
        }
        if let maxFetchTimeInMs = self.maxFetchTimeInMs {
            try encodeContainer.encode(maxFetchTimeInMs, forKey: .maxFetchTimeInMs)
        }
        if let maxRecordPerRead = self.maxRecordPerRead {
            try encodeContainer.encode(maxRecordPerRead, forKey: .maxRecordPerRead)
        }
        if let maxRetryIntervalMs = self.maxRetryIntervalMs {
            try encodeContainer.encode(maxRetryIntervalMs, forKey: .maxRetryIntervalMs)
        }
        if let numRetries = self.numRetries {
            try encodeContainer.encode(numRetries, forKey: .numRetries)
        }
        if let retryIntervalMs = self.retryIntervalMs {
            try encodeContainer.encode(retryIntervalMs, forKey: .retryIntervalMs)
        }
        if let roleArn = self.roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let roleSessionName = self.roleSessionName {
            try encodeContainer.encode(roleSessionName, forKey: .roleSessionName)
        }
        if let startingPosition = self.startingPosition {
            try encodeContainer.encode(startingPosition.rawValue, forKey: .startingPosition)
        }
        if let streamArn = self.streamArn {
            try encodeContainer.encode(streamArn, forKey: .streamArn)
        }
        if let streamName = self.streamName {
            try encodeContainer.encode(streamName, forKey: .streamName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let endpointUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .endpointUrl)
        endpointUrl = endpointUrlDecoded
        let streamNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .streamName)
        streamName = streamNameDecoded
        let classificationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .classification)
        classification = classificationDecoded
        let delimiterDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .delimiter)
        delimiter = delimiterDecoded
        let startingPositionDecoded = try containerValues.decodeIfPresent(GlueClientTypes.StartingPosition.self, forKey: .startingPosition)
        startingPosition = startingPositionDecoded
        let maxFetchTimeInMsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxFetchTimeInMs)
        maxFetchTimeInMs = maxFetchTimeInMsDecoded
        let maxFetchRecordsPerShardDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxFetchRecordsPerShard)
        maxFetchRecordsPerShard = maxFetchRecordsPerShardDecoded
        let maxRecordPerReadDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxRecordPerRead)
        maxRecordPerRead = maxRecordPerReadDecoded
        let addIdleTimeBetweenReadsDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .addIdleTimeBetweenReads)
        addIdleTimeBetweenReads = addIdleTimeBetweenReadsDecoded
        let idleTimeBetweenReadsInMsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .idleTimeBetweenReadsInMs)
        idleTimeBetweenReadsInMs = idleTimeBetweenReadsInMsDecoded
        let describeShardIntervalDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .describeShardInterval)
        describeShardInterval = describeShardIntervalDecoded
        let numRetriesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .numRetries)
        numRetries = numRetriesDecoded
        let retryIntervalMsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .retryIntervalMs)
        retryIntervalMs = retryIntervalMsDecoded
        let maxRetryIntervalMsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxRetryIntervalMs)
        maxRetryIntervalMs = maxRetryIntervalMsDecoded
        let avoidEmptyBatchesDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .avoidEmptyBatches)
        avoidEmptyBatches = avoidEmptyBatchesDecoded
        let streamArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .streamArn)
        streamArn = streamArnDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let roleSessionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleSessionName)
        roleSessionName = roleSessionNameDecoded
    }
}
