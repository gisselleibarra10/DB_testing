// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension GlueClientTypes.AggregateOperation: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case aggFunc = "AggFunc"
        case column = "Column"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let aggFunc = self.aggFunc {
            try encodeContainer.encode(aggFunc.rawValue, forKey: .aggFunc)
        }
        if let column = column {
            var columnContainer = encodeContainer.nestedUnkeyedContainer(forKey: .column)
            for enclosedinstringproperties0 in column {
                try columnContainer.encode(enclosedinstringproperties0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let columnContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .column)
        var columnDecoded0:[Swift.String]? = nil
        if let columnContainer = columnContainer {
            columnDecoded0 = [Swift.String]()
            for string0 in columnContainer {
                if let string0 = string0 {
                    columnDecoded0?.append(string0)
                }
            }
        }
        column = columnDecoded0
        let aggFuncDecoded = try containerValues.decodeIfPresent(GlueClientTypes.AggFunction.self, forKey: .aggFunc)
        aggFunc = aggFuncDecoded
    }
}
