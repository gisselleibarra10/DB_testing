// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension GlueClientTypes {
    /// CodeGenConfigurationNode enumerates all valid Node types. One and only one of its member variables can be populated.
    public struct CodeGenConfigurationNode: Swift.Equatable {
        /// Specifies a transform that groups rows by chosen fields and computes the aggregated value by specified function.
        public var aggregate: GlueClientTypes.Aggregate?
        /// Specifies a transform that maps data property keys in the data source to data property keys in the data target. You can rename keys, modify the data types for keys, and choose which keys to drop from the dataset.
        public var applyMapping: GlueClientTypes.ApplyMapping?
        /// Specifies a connector to an Amazon Athena data source.
        public var athenaConnectorSource: GlueClientTypes.AthenaConnectorSource?
        /// Specifies an Apache Kafka data store in the Data Catalog.
        public var catalogKafkaSource: GlueClientTypes.CatalogKafkaSource?
        /// Specifies a Kinesis data source in the Glue Data Catalog.
        public var catalogKinesisSource: GlueClientTypes.CatalogKinesisSource?
        /// Specifies a data store in the Glue Data Catalog.
        public var catalogSource: GlueClientTypes.CatalogSource?
        /// Specifies a target that uses a Glue Data Catalog table.
        public var catalogTarget: GlueClientTypes.BasicCatalogTarget?
        /// Specifies a transform that uses custom code you provide to perform the data transformation. The output is a collection of DynamicFrames.
        public var customCode: GlueClientTypes.CustomCode?
        /// Specifies an Apache Kafka data store.
        public var directKafkaSource: GlueClientTypes.DirectKafkaSource?
        /// Specifies a direct Amazon Kinesis data source.
        public var directKinesisSource: GlueClientTypes.DirectKinesisSource?
        /// Specifies a transform that removes rows of repeating data from a data set.
        public var dropDuplicates: GlueClientTypes.DropDuplicates?
        /// Specifies a transform that chooses the data property keys that you want to drop.
        public var dropFields: GlueClientTypes.DropFields?
        /// Specifies a transform that removes columns from the dataset if all values in the column are 'null'. By default, Glue Studio will recognize null objects, but some values such as empty strings, strings that are "null", -1 integers or other placeholders such as zeros, are not automatically recognized as nulls.
        public var dropNullFields: GlueClientTypes.DropNullFields?
        /// Specifies a DynamoDB data source in the Glue Data Catalog.
        public var dynamoDBCatalogSource: GlueClientTypes.DynamoDBCatalogSource?
        /// Specifies a transform that locates records in the dataset that have missing values and adds a new field with a value determined by imputation. The input data set is used to train the machine learning model that determines what the missing value should be.
        public var fillMissingValues: GlueClientTypes.FillMissingValues?
        /// Specifies a transform that splits a dataset into two, based on a filter condition.
        public var filter: GlueClientTypes.Filter?
        /// Specifies a data source in a goverened Data Catalog.
        public var governedCatalogSource: GlueClientTypes.GovernedCatalogSource?
        /// Specifies a data target that writes to a goverened catalog.
        public var governedCatalogTarget: GlueClientTypes.GovernedCatalogTarget?
        /// Specifies a connector to a JDBC data source.
        public var jDBCConnectorSource: GlueClientTypes.JDBCConnectorSource?
        /// Specifies a data target that writes to Amazon S3 in Apache Parquet columnar storage.
        public var jDBCConnectorTarget: GlueClientTypes.JDBCConnectorTarget?
        /// Specifies a transform that joins two datasets into one dataset using a comparison phrase on the specified data property keys. You can use inner, outer, left, right, left semi, and left anti joins.
        public var join: GlueClientTypes.Join?
        /// Specifies a transform that merges a DynamicFrame with a staging DynamicFrame based on the specified primary keys to identify records. Duplicate records (records with the same primary keys) are not de-duplicated.
        public var merge: GlueClientTypes.Merge?
        /// Specifies a Microsoft SQL server data source in the Glue Data Catalog.
        public var microsoftSQLServerCatalogSource: GlueClientTypes.MicrosoftSQLServerCatalogSource?
        /// Specifies a target that uses Microsoft SQL.
        public var microsoftSQLServerCatalogTarget: GlueClientTypes.MicrosoftSQLServerCatalogTarget?
        /// Specifies a MySQL data source in the Glue Data Catalog.
        public var mySQLCatalogSource: GlueClientTypes.MySQLCatalogSource?
        /// Specifies a target that uses MySQL.
        public var mySQLCatalogTarget: GlueClientTypes.MySQLCatalogTarget?
        /// Specifies an Oracle data source in the Glue Data Catalog.
        public var oracleSQLCatalogSource: GlueClientTypes.OracleSQLCatalogSource?
        /// Specifies a target that uses Oracle SQL.
        public var oracleSQLCatalogTarget: GlueClientTypes.OracleSQLCatalogTarget?
        /// Specifies a transform that identifies, removes or masks PII data.
        public var pIIDetection: GlueClientTypes.PIIDetection?
        /// Specifies a PostgresSQL data source in the Glue Data Catalog.
        public var postgreSQLCatalogSource: GlueClientTypes.PostgreSQLCatalogSource?
        /// Specifies a target that uses Postgres SQL.
        public var postgreSQLCatalogTarget: GlueClientTypes.PostgreSQLCatalogTarget?
        /// Specifies an Amazon Redshift data store.
        public var redshiftSource: GlueClientTypes.RedshiftSource?
        /// Specifies a target that uses Amazon Redshift.
        public var redshiftTarget: GlueClientTypes.RedshiftTarget?
        /// Specifies a Relational database data source in the Glue Data Catalog.
        public var relationalCatalogSource: GlueClientTypes.RelationalCatalogSource?
        /// Specifies a transform that renames a single data property key.
        public var renameField: GlueClientTypes.RenameField?
        /// Specifies an Amazon S3 data store in the Glue Data Catalog.
        public var s3CatalogSource: GlueClientTypes.S3CatalogSource?
        /// Specifies a data target that writes to Amazon S3 using the Glue Data Catalog.
        public var s3CatalogTarget: GlueClientTypes.S3CatalogTarget?
        /// Specifies a command-separated value (CSV) data store stored in Amazon S3.
        public var s3CsvSource: GlueClientTypes.S3CsvSource?
        /// Specifies a data target that writes to Amazon S3.
        public var s3DirectTarget: GlueClientTypes.S3DirectTarget?
        /// Specifies a data target that writes to Amazon S3 in Apache Parquet columnar storage.
        public var s3GlueParquetTarget: GlueClientTypes.S3GlueParquetTarget?
        /// Specifies a JSON data store stored in Amazon S3.
        public var s3JsonSource: GlueClientTypes.S3JsonSource?
        /// Specifies an Apache Parquet data store stored in Amazon S3.
        public var s3ParquetSource: GlueClientTypes.S3ParquetSource?
        /// Specifies a transform that chooses the data property keys that you want to keep.
        public var selectFields: GlueClientTypes.SelectFields?
        /// Specifies a transform that chooses one DynamicFrame from a collection of DynamicFrames. The output is the selected DynamicFrame
        public var selectFromCollection: GlueClientTypes.SelectFromCollection?
        /// Specifies a connector to an Apache Spark data source.
        public var sparkConnectorSource: GlueClientTypes.SparkConnectorSource?
        /// Specifies a target that uses an Apache Spark connector.
        public var sparkConnectorTarget: GlueClientTypes.SparkConnectorTarget?
        /// Specifies a transform where you enter a SQL query using Spark SQL syntax to transform the data. The output is a single DynamicFrame.
        public var sparkSQL: GlueClientTypes.SparkSQL?
        /// Specifies a transform that writes samples of the data to an Amazon S3 bucket.
        public var spigot: GlueClientTypes.Spigot?
        /// Specifies a transform that splits data property keys into two DynamicFrames. The output is a collection of DynamicFrames: one with selected data property keys, and one with the remaining data property keys.
        public var splitFields: GlueClientTypes.SplitFields?
        /// Specifies a transform that combines the rows from two or more datasets into a single result.
        public var union: GlueClientTypes.Union?

        public init (
            aggregate: GlueClientTypes.Aggregate? = nil,
            applyMapping: GlueClientTypes.ApplyMapping? = nil,
            athenaConnectorSource: GlueClientTypes.AthenaConnectorSource? = nil,
            catalogKafkaSource: GlueClientTypes.CatalogKafkaSource? = nil,
            catalogKinesisSource: GlueClientTypes.CatalogKinesisSource? = nil,
            catalogSource: GlueClientTypes.CatalogSource? = nil,
            catalogTarget: GlueClientTypes.BasicCatalogTarget? = nil,
            customCode: GlueClientTypes.CustomCode? = nil,
            directKafkaSource: GlueClientTypes.DirectKafkaSource? = nil,
            directKinesisSource: GlueClientTypes.DirectKinesisSource? = nil,
            dropDuplicates: GlueClientTypes.DropDuplicates? = nil,
            dropFields: GlueClientTypes.DropFields? = nil,
            dropNullFields: GlueClientTypes.DropNullFields? = nil,
            dynamoDBCatalogSource: GlueClientTypes.DynamoDBCatalogSource? = nil,
            fillMissingValues: GlueClientTypes.FillMissingValues? = nil,
            filter: GlueClientTypes.Filter? = nil,
            governedCatalogSource: GlueClientTypes.GovernedCatalogSource? = nil,
            governedCatalogTarget: GlueClientTypes.GovernedCatalogTarget? = nil,
            jDBCConnectorSource: GlueClientTypes.JDBCConnectorSource? = nil,
            jDBCConnectorTarget: GlueClientTypes.JDBCConnectorTarget? = nil,
            join: GlueClientTypes.Join? = nil,
            merge: GlueClientTypes.Merge? = nil,
            microsoftSQLServerCatalogSource: GlueClientTypes.MicrosoftSQLServerCatalogSource? = nil,
            microsoftSQLServerCatalogTarget: GlueClientTypes.MicrosoftSQLServerCatalogTarget? = nil,
            mySQLCatalogSource: GlueClientTypes.MySQLCatalogSource? = nil,
            mySQLCatalogTarget: GlueClientTypes.MySQLCatalogTarget? = nil,
            oracleSQLCatalogSource: GlueClientTypes.OracleSQLCatalogSource? = nil,
            oracleSQLCatalogTarget: GlueClientTypes.OracleSQLCatalogTarget? = nil,
            pIIDetection: GlueClientTypes.PIIDetection? = nil,
            postgreSQLCatalogSource: GlueClientTypes.PostgreSQLCatalogSource? = nil,
            postgreSQLCatalogTarget: GlueClientTypes.PostgreSQLCatalogTarget? = nil,
            redshiftSource: GlueClientTypes.RedshiftSource? = nil,
            redshiftTarget: GlueClientTypes.RedshiftTarget? = nil,
            relationalCatalogSource: GlueClientTypes.RelationalCatalogSource? = nil,
            renameField: GlueClientTypes.RenameField? = nil,
            s3CatalogSource: GlueClientTypes.S3CatalogSource? = nil,
            s3CatalogTarget: GlueClientTypes.S3CatalogTarget? = nil,
            s3CsvSource: GlueClientTypes.S3CsvSource? = nil,
            s3DirectTarget: GlueClientTypes.S3DirectTarget? = nil,
            s3GlueParquetTarget: GlueClientTypes.S3GlueParquetTarget? = nil,
            s3JsonSource: GlueClientTypes.S3JsonSource? = nil,
            s3ParquetSource: GlueClientTypes.S3ParquetSource? = nil,
            selectFields: GlueClientTypes.SelectFields? = nil,
            selectFromCollection: GlueClientTypes.SelectFromCollection? = nil,
            sparkConnectorSource: GlueClientTypes.SparkConnectorSource? = nil,
            sparkConnectorTarget: GlueClientTypes.SparkConnectorTarget? = nil,
            sparkSQL: GlueClientTypes.SparkSQL? = nil,
            spigot: GlueClientTypes.Spigot? = nil,
            splitFields: GlueClientTypes.SplitFields? = nil,
            union: GlueClientTypes.Union? = nil
        )
        {
            self.aggregate = aggregate
            self.applyMapping = applyMapping
            self.athenaConnectorSource = athenaConnectorSource
            self.catalogKafkaSource = catalogKafkaSource
            self.catalogKinesisSource = catalogKinesisSource
            self.catalogSource = catalogSource
            self.catalogTarget = catalogTarget
            self.customCode = customCode
            self.directKafkaSource = directKafkaSource
            self.directKinesisSource = directKinesisSource
            self.dropDuplicates = dropDuplicates
            self.dropFields = dropFields
            self.dropNullFields = dropNullFields
            self.dynamoDBCatalogSource = dynamoDBCatalogSource
            self.fillMissingValues = fillMissingValues
            self.filter = filter
            self.governedCatalogSource = governedCatalogSource
            self.governedCatalogTarget = governedCatalogTarget
            self.jDBCConnectorSource = jDBCConnectorSource
            self.jDBCConnectorTarget = jDBCConnectorTarget
            self.join = join
            self.merge = merge
            self.microsoftSQLServerCatalogSource = microsoftSQLServerCatalogSource
            self.microsoftSQLServerCatalogTarget = microsoftSQLServerCatalogTarget
            self.mySQLCatalogSource = mySQLCatalogSource
            self.mySQLCatalogTarget = mySQLCatalogTarget
            self.oracleSQLCatalogSource = oracleSQLCatalogSource
            self.oracleSQLCatalogTarget = oracleSQLCatalogTarget
            self.pIIDetection = pIIDetection
            self.postgreSQLCatalogSource = postgreSQLCatalogSource
            self.postgreSQLCatalogTarget = postgreSQLCatalogTarget
            self.redshiftSource = redshiftSource
            self.redshiftTarget = redshiftTarget
            self.relationalCatalogSource = relationalCatalogSource
            self.renameField = renameField
            self.s3CatalogSource = s3CatalogSource
            self.s3CatalogTarget = s3CatalogTarget
            self.s3CsvSource = s3CsvSource
            self.s3DirectTarget = s3DirectTarget
            self.s3GlueParquetTarget = s3GlueParquetTarget
            self.s3JsonSource = s3JsonSource
            self.s3ParquetSource = s3ParquetSource
            self.selectFields = selectFields
            self.selectFromCollection = selectFromCollection
            self.sparkConnectorSource = sparkConnectorSource
            self.sparkConnectorTarget = sparkConnectorTarget
            self.sparkSQL = sparkSQL
            self.spigot = spigot
            self.splitFields = splitFields
            self.union = union
        }
    }

}
