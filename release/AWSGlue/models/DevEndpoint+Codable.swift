// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension GlueClientTypes.DevEndpoint: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arguments = "Arguments"
        case availabilityZone = "AvailabilityZone"
        case createdTimestamp = "CreatedTimestamp"
        case endpointName = "EndpointName"
        case extraJarsS3Path = "ExtraJarsS3Path"
        case extraPythonLibsS3Path = "ExtraPythonLibsS3Path"
        case failureReason = "FailureReason"
        case glueVersion = "GlueVersion"
        case lastModifiedTimestamp = "LastModifiedTimestamp"
        case lastUpdateStatus = "LastUpdateStatus"
        case numberOfNodes = "NumberOfNodes"
        case numberOfWorkers = "NumberOfWorkers"
        case privateAddress = "PrivateAddress"
        case publicAddress = "PublicAddress"
        case publicKey = "PublicKey"
        case publicKeys = "PublicKeys"
        case roleArn = "RoleArn"
        case securityConfiguration = "SecurityConfiguration"
        case securityGroupIds = "SecurityGroupIds"
        case status = "Status"
        case subnetId = "SubnetId"
        case vpcId = "VpcId"
        case workerType = "WorkerType"
        case yarnEndpointAddress = "YarnEndpointAddress"
        case zeppelinRemoteSparkInterpreterPort = "ZeppelinRemoteSparkInterpreterPort"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arguments = arguments {
            var argumentsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .arguments)
            for (dictKey0, mapvalue0) in arguments {
                try argumentsContainer.encode(mapvalue0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let availabilityZone = self.availabilityZone {
            try encodeContainer.encode(availabilityZone, forKey: .availabilityZone)
        }
        if let createdTimestamp = self.createdTimestamp {
            try encodeContainer.encode(createdTimestamp.timeIntervalSince1970, forKey: .createdTimestamp)
        }
        if let endpointName = self.endpointName {
            try encodeContainer.encode(endpointName, forKey: .endpointName)
        }
        if let extraJarsS3Path = self.extraJarsS3Path {
            try encodeContainer.encode(extraJarsS3Path, forKey: .extraJarsS3Path)
        }
        if let extraPythonLibsS3Path = self.extraPythonLibsS3Path {
            try encodeContainer.encode(extraPythonLibsS3Path, forKey: .extraPythonLibsS3Path)
        }
        if let failureReason = self.failureReason {
            try encodeContainer.encode(failureReason, forKey: .failureReason)
        }
        if let glueVersion = self.glueVersion {
            try encodeContainer.encode(glueVersion, forKey: .glueVersion)
        }
        if let lastModifiedTimestamp = self.lastModifiedTimestamp {
            try encodeContainer.encode(lastModifiedTimestamp.timeIntervalSince1970, forKey: .lastModifiedTimestamp)
        }
        if let lastUpdateStatus = self.lastUpdateStatus {
            try encodeContainer.encode(lastUpdateStatus, forKey: .lastUpdateStatus)
        }
        if numberOfNodes != 0 {
            try encodeContainer.encode(numberOfNodes, forKey: .numberOfNodes)
        }
        if let numberOfWorkers = self.numberOfWorkers {
            try encodeContainer.encode(numberOfWorkers, forKey: .numberOfWorkers)
        }
        if let privateAddress = self.privateAddress {
            try encodeContainer.encode(privateAddress, forKey: .privateAddress)
        }
        if let publicAddress = self.publicAddress {
            try encodeContainer.encode(publicAddress, forKey: .publicAddress)
        }
        if let publicKey = self.publicKey {
            try encodeContainer.encode(publicKey, forKey: .publicKey)
        }
        if let publicKeys = publicKeys {
            var publicKeysContainer = encodeContainer.nestedUnkeyedContainer(forKey: .publicKeys)
            for publickeyslist0 in publicKeys {
                try publicKeysContainer.encode(publickeyslist0)
            }
        }
        if let roleArn = self.roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let securityConfiguration = self.securityConfiguration {
            try encodeContainer.encode(securityConfiguration, forKey: .securityConfiguration)
        }
        if let securityGroupIds = securityGroupIds {
            var securityGroupIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .securityGroupIds)
            for stringlist0 in securityGroupIds {
                try securityGroupIdsContainer.encode(stringlist0)
            }
        }
        if let status = self.status {
            try encodeContainer.encode(status, forKey: .status)
        }
        if let subnetId = self.subnetId {
            try encodeContainer.encode(subnetId, forKey: .subnetId)
        }
        if let vpcId = self.vpcId {
            try encodeContainer.encode(vpcId, forKey: .vpcId)
        }
        if let workerType = self.workerType {
            try encodeContainer.encode(workerType.rawValue, forKey: .workerType)
        }
        if let yarnEndpointAddress = self.yarnEndpointAddress {
            try encodeContainer.encode(yarnEndpointAddress, forKey: .yarnEndpointAddress)
        }
        if zeppelinRemoteSparkInterpreterPort != 0 {
            try encodeContainer.encode(zeppelinRemoteSparkInterpreterPort, forKey: .zeppelinRemoteSparkInterpreterPort)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let endpointNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .endpointName)
        endpointName = endpointNameDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let securityGroupIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .securityGroupIds)
        var securityGroupIdsDecoded0:[Swift.String]? = nil
        if let securityGroupIdsContainer = securityGroupIdsContainer {
            securityGroupIdsDecoded0 = [Swift.String]()
            for string0 in securityGroupIdsContainer {
                if let string0 = string0 {
                    securityGroupIdsDecoded0?.append(string0)
                }
            }
        }
        securityGroupIds = securityGroupIdsDecoded0
        let subnetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .subnetId)
        subnetId = subnetIdDecoded
        let yarnEndpointAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .yarnEndpointAddress)
        yarnEndpointAddress = yarnEndpointAddressDecoded
        let privateAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .privateAddress)
        privateAddress = privateAddressDecoded
        let zeppelinRemoteSparkInterpreterPortDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .zeppelinRemoteSparkInterpreterPort) ?? 0
        zeppelinRemoteSparkInterpreterPort = zeppelinRemoteSparkInterpreterPortDecoded
        let publicAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .publicAddress)
        publicAddress = publicAddressDecoded
        let statusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .status)
        status = statusDecoded
        let workerTypeDecoded = try containerValues.decodeIfPresent(GlueClientTypes.WorkerType.self, forKey: .workerType)
        workerType = workerTypeDecoded
        let glueVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .glueVersion)
        glueVersion = glueVersionDecoded
        let numberOfWorkersDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .numberOfWorkers)
        numberOfWorkers = numberOfWorkersDecoded
        let numberOfNodesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .numberOfNodes) ?? 0
        numberOfNodes = numberOfNodesDecoded
        let availabilityZoneDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .availabilityZone)
        availabilityZone = availabilityZoneDecoded
        let vpcIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vpcId)
        vpcId = vpcIdDecoded
        let extraPythonLibsS3PathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .extraPythonLibsS3Path)
        extraPythonLibsS3Path = extraPythonLibsS3PathDecoded
        let extraJarsS3PathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .extraJarsS3Path)
        extraJarsS3Path = extraJarsS3PathDecoded
        let failureReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .failureReason)
        failureReason = failureReasonDecoded
        let lastUpdateStatusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastUpdateStatus)
        lastUpdateStatus = lastUpdateStatusDecoded
        let createdTimestampDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdTimestamp)
        createdTimestamp = createdTimestampDecoded
        let lastModifiedTimestampDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedTimestamp)
        lastModifiedTimestamp = lastModifiedTimestampDecoded
        let publicKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .publicKey)
        publicKey = publicKeyDecoded
        let publicKeysContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .publicKeys)
        var publicKeysDecoded0:[Swift.String]? = nil
        if let publicKeysContainer = publicKeysContainer {
            publicKeysDecoded0 = [Swift.String]()
            for string0 in publicKeysContainer {
                if let string0 = string0 {
                    publicKeysDecoded0?.append(string0)
                }
            }
        }
        publicKeys = publicKeysDecoded0
        let securityConfigurationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .securityConfiguration)
        securityConfiguration = securityConfigurationDecoded
        let argumentsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .arguments)
        var argumentsDecoded0: [Swift.String:Swift.String]? = nil
        if let argumentsContainer = argumentsContainer {
            argumentsDecoded0 = [Swift.String:Swift.String]()
            for (key0, genericstring0) in argumentsContainer {
                if let genericstring0 = genericstring0 {
                    argumentsDecoded0?[key0] = genericstring0
                }
            }
        }
        arguments = argumentsDecoded0
    }
}
