// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateSessionInputBody: Swift.Equatable {
    let id: Swift.String?
    let description: Swift.String?
    let role: Swift.String?
    let command: GlueClientTypes.SessionCommand?
    let timeout: Swift.Int?
    let idleTimeout: Swift.Int?
    let defaultArguments: [Swift.String:Swift.String]?
    let connections: GlueClientTypes.ConnectionsList?
    let maxCapacity: Swift.Double?
    let numberOfWorkers: Swift.Int?
    let workerType: GlueClientTypes.WorkerType?
    let securityConfiguration: Swift.String?
    let glueVersion: Swift.String?
    let tags: [Swift.String:Swift.String]?
    let requestOrigin: Swift.String?
}

extension CreateSessionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case command = "Command"
        case connections = "Connections"
        case defaultArguments = "DefaultArguments"
        case description = "Description"
        case glueVersion = "GlueVersion"
        case id = "Id"
        case idleTimeout = "IdleTimeout"
        case maxCapacity = "MaxCapacity"
        case numberOfWorkers = "NumberOfWorkers"
        case requestOrigin = "RequestOrigin"
        case role = "Role"
        case securityConfiguration = "SecurityConfiguration"
        case tags = "Tags"
        case timeout = "Timeout"
        case workerType = "WorkerType"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let roleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .role)
        role = roleDecoded
        let commandDecoded = try containerValues.decodeIfPresent(GlueClientTypes.SessionCommand.self, forKey: .command)
        command = commandDecoded
        let timeoutDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .timeout)
        timeout = timeoutDecoded
        let idleTimeoutDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .idleTimeout)
        idleTimeout = idleTimeoutDecoded
        let defaultArgumentsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .defaultArguments)
        var defaultArgumentsDecoded0: [Swift.String:Swift.String]? = nil
        if let defaultArgumentsContainer = defaultArgumentsContainer {
            defaultArgumentsDecoded0 = [Swift.String:Swift.String]()
            for (key0, orchestrationargumentsvalue0) in defaultArgumentsContainer {
                if let orchestrationargumentsvalue0 = orchestrationargumentsvalue0 {
                    defaultArgumentsDecoded0?[key0] = orchestrationargumentsvalue0
                }
            }
        }
        defaultArguments = defaultArgumentsDecoded0
        let connectionsDecoded = try containerValues.decodeIfPresent(GlueClientTypes.ConnectionsList.self, forKey: .connections)
        connections = connectionsDecoded
        let maxCapacityDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .maxCapacity)
        maxCapacity = maxCapacityDecoded
        let numberOfWorkersDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .numberOfWorkers)
        numberOfWorkers = numberOfWorkersDecoded
        let workerTypeDecoded = try containerValues.decodeIfPresent(GlueClientTypes.WorkerType.self, forKey: .workerType)
        workerType = workerTypeDecoded
        let securityConfigurationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .securityConfiguration)
        securityConfiguration = securityConfigurationDecoded
        let glueVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .glueVersion)
        glueVersion = glueVersionDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
        let requestOriginDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .requestOrigin)
        requestOrigin = requestOriginDecoded
    }
}
