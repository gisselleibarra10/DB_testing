// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct CreateTriggerInput: Swift.Equatable {
    /// The actions initiated by this trigger when it fires.
    /// This member is required.
    public var actions: [GlueClientTypes.Action]?
    /// A description of the new trigger.
    public var description: Swift.String?
    /// Batch condition that must be met (specified number of events received or batch time window expired) before EventBridge event trigger fires.
    public var eventBatchingCondition: GlueClientTypes.EventBatchingCondition?
    /// The name of the trigger.
    /// This member is required.
    public var name: Swift.String?
    /// A predicate to specify when the new trigger should fire. This field is required when the trigger type is CONDITIONAL.
    public var predicate: GlueClientTypes.Predicate?
    /// A cron expression used to specify the schedule (see [Time-Based Schedules for Jobs and Crawlers](https://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html). For example, to run something every day at 12:15 UTC, you would specify: cron(15 12 * * ? *). This field is required when the trigger type is SCHEDULED.
    public var schedule: Swift.String?
    /// Set to true to start SCHEDULED and CONDITIONAL triggers when created. True is not supported for ON_DEMAND triggers.
    public var startOnCreation: Swift.Bool
    /// The tags to use with this trigger. You may use tags to limit access to the trigger. For more information about tags in Glue, see [Amazon Web Services Tags in Glue](https://docs.aws.amazon.com/glue/latest/dg/monitor-tags.html) in the developer guide.
    public var tags: [Swift.String:Swift.String]?
    /// The type of the new trigger.
    /// This member is required.
    public var type: GlueClientTypes.TriggerType?
    /// The name of the workflow associated with the trigger.
    public var workflowName: Swift.String?

    public init (
        actions: [GlueClientTypes.Action]? = nil,
        description: Swift.String? = nil,
        eventBatchingCondition: GlueClientTypes.EventBatchingCondition? = nil,
        name: Swift.String? = nil,
        predicate: GlueClientTypes.Predicate? = nil,
        schedule: Swift.String? = nil,
        startOnCreation: Swift.Bool = false,
        tags: [Swift.String:Swift.String]? = nil,
        type: GlueClientTypes.TriggerType? = nil,
        workflowName: Swift.String? = nil
    )
    {
        self.actions = actions
        self.description = description
        self.eventBatchingCondition = eventBatchingCondition
        self.name = name
        self.predicate = predicate
        self.schedule = schedule
        self.startOnCreation = startOnCreation
        self.tags = tags
        self.type = type
        self.workflowName = workflowName
    }
}
