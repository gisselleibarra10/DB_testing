// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension GlueClientTypes.Join: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case columns = "Columns"
        case inputs = "Inputs"
        case joinType = "JoinType"
        case name = "Name"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let columns = columns {
            var columnsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .columns)
            for joincolumns0 in columns {
                try columnsContainer.encode(joincolumns0)
            }
        }
        if let inputs = inputs {
            var inputsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .inputs)
            for twoinputs0 in inputs {
                try inputsContainer.encode(twoinputs0)
            }
        }
        if let joinType = self.joinType {
            try encodeContainer.encode(joinType.rawValue, forKey: .joinType)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let inputsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .inputs)
        var inputsDecoded0:[Swift.String]? = nil
        if let inputsContainer = inputsContainer {
            inputsDecoded0 = [Swift.String]()
            for string0 in inputsContainer {
                if let string0 = string0 {
                    inputsDecoded0?.append(string0)
                }
            }
        }
        inputs = inputsDecoded0
        let joinTypeDecoded = try containerValues.decodeIfPresent(GlueClientTypes.JoinType.self, forKey: .joinType)
        joinType = joinTypeDecoded
        let columnsContainer = try containerValues.decodeIfPresent([GlueClientTypes.JoinColumn?].self, forKey: .columns)
        var columnsDecoded0:[GlueClientTypes.JoinColumn]? = nil
        if let columnsContainer = columnsContainer {
            columnsDecoded0 = [GlueClientTypes.JoinColumn]()
            for structure0 in columnsContainer {
                if let structure0 = structure0 {
                    columnsDecoded0?.append(structure0)
                }
            }
        }
        columns = columnsDecoded0
    }
}
