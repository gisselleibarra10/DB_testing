// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension GlueClientTypes.S3Target: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case connectionName = "ConnectionName"
        case dlqEventQueueArn = "DlqEventQueueArn"
        case eventQueueArn = "EventQueueArn"
        case exclusions = "Exclusions"
        case path = "Path"
        case sampleSize = "SampleSize"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let connectionName = self.connectionName {
            try encodeContainer.encode(connectionName, forKey: .connectionName)
        }
        if let dlqEventQueueArn = self.dlqEventQueueArn {
            try encodeContainer.encode(dlqEventQueueArn, forKey: .dlqEventQueueArn)
        }
        if let eventQueueArn = self.eventQueueArn {
            try encodeContainer.encode(eventQueueArn, forKey: .eventQueueArn)
        }
        if let exclusions = exclusions {
            var exclusionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .exclusions)
            for pathlist0 in exclusions {
                try exclusionsContainer.encode(pathlist0)
            }
        }
        if let path = self.path {
            try encodeContainer.encode(path, forKey: .path)
        }
        if let sampleSize = self.sampleSize {
            try encodeContainer.encode(sampleSize, forKey: .sampleSize)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .path)
        path = pathDecoded
        let exclusionsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .exclusions)
        var exclusionsDecoded0:[Swift.String]? = nil
        if let exclusionsContainer = exclusionsContainer {
            exclusionsDecoded0 = [Swift.String]()
            for string0 in exclusionsContainer {
                if let string0 = string0 {
                    exclusionsDecoded0?.append(string0)
                }
            }
        }
        exclusions = exclusionsDecoded0
        let connectionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .connectionName)
        connectionName = connectionNameDecoded
        let sampleSizeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .sampleSize)
        sampleSize = sampleSizeDecoded
        let eventQueueArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .eventQueueArn)
        eventQueueArn = eventQueueArnDecoded
        let dlqEventQueueArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dlqEventQueueArn)
        dlqEventQueueArn = dlqEventQueueArnDecoded
    }
}
