// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateDevEndpointOutputResponseBody: Swift.Equatable {
    let endpointName: Swift.String?
    let status: Swift.String?
    let securityGroupIds: [Swift.String]?
    let subnetId: Swift.String?
    let roleArn: Swift.String?
    let yarnEndpointAddress: Swift.String?
    let zeppelinRemoteSparkInterpreterPort: Swift.Int
    let numberOfNodes: Swift.Int
    let workerType: GlueClientTypes.WorkerType?
    let glueVersion: Swift.String?
    let numberOfWorkers: Swift.Int?
    let availabilityZone: Swift.String?
    let vpcId: Swift.String?
    let extraPythonLibsS3Path: Swift.String?
    let extraJarsS3Path: Swift.String?
    let failureReason: Swift.String?
    let securityConfiguration: Swift.String?
    let createdTimestamp: ClientRuntime.Date?
    let arguments: [Swift.String:Swift.String]?
}

extension CreateDevEndpointOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arguments = "Arguments"
        case availabilityZone = "AvailabilityZone"
        case createdTimestamp = "CreatedTimestamp"
        case endpointName = "EndpointName"
        case extraJarsS3Path = "ExtraJarsS3Path"
        case extraPythonLibsS3Path = "ExtraPythonLibsS3Path"
        case failureReason = "FailureReason"
        case glueVersion = "GlueVersion"
        case numberOfNodes = "NumberOfNodes"
        case numberOfWorkers = "NumberOfWorkers"
        case roleArn = "RoleArn"
        case securityConfiguration = "SecurityConfiguration"
        case securityGroupIds = "SecurityGroupIds"
        case status = "Status"
        case subnetId = "SubnetId"
        case vpcId = "VpcId"
        case workerType = "WorkerType"
        case yarnEndpointAddress = "YarnEndpointAddress"
        case zeppelinRemoteSparkInterpreterPort = "ZeppelinRemoteSparkInterpreterPort"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let endpointNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .endpointName)
        endpointName = endpointNameDecoded
        let statusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .status)
        status = statusDecoded
        let securityGroupIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .securityGroupIds)
        var securityGroupIdsDecoded0:[Swift.String]? = nil
        if let securityGroupIdsContainer = securityGroupIdsContainer {
            securityGroupIdsDecoded0 = [Swift.String]()
            for string0 in securityGroupIdsContainer {
                if let string0 = string0 {
                    securityGroupIdsDecoded0?.append(string0)
                }
            }
        }
        securityGroupIds = securityGroupIdsDecoded0
        let subnetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .subnetId)
        subnetId = subnetIdDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let yarnEndpointAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .yarnEndpointAddress)
        yarnEndpointAddress = yarnEndpointAddressDecoded
        let zeppelinRemoteSparkInterpreterPortDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .zeppelinRemoteSparkInterpreterPort) ?? 0
        zeppelinRemoteSparkInterpreterPort = zeppelinRemoteSparkInterpreterPortDecoded
        let numberOfNodesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .numberOfNodes) ?? 0
        numberOfNodes = numberOfNodesDecoded
        let workerTypeDecoded = try containerValues.decodeIfPresent(GlueClientTypes.WorkerType.self, forKey: .workerType)
        workerType = workerTypeDecoded
        let glueVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .glueVersion)
        glueVersion = glueVersionDecoded
        let numberOfWorkersDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .numberOfWorkers)
        numberOfWorkers = numberOfWorkersDecoded
        let availabilityZoneDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .availabilityZone)
        availabilityZone = availabilityZoneDecoded
        let vpcIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vpcId)
        vpcId = vpcIdDecoded
        let extraPythonLibsS3PathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .extraPythonLibsS3Path)
        extraPythonLibsS3Path = extraPythonLibsS3PathDecoded
        let extraJarsS3PathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .extraJarsS3Path)
        extraJarsS3Path = extraJarsS3PathDecoded
        let failureReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .failureReason)
        failureReason = failureReasonDecoded
        let securityConfigurationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .securityConfiguration)
        securityConfiguration = securityConfigurationDecoded
        let createdTimestampDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdTimestamp)
        createdTimestamp = createdTimestampDecoded
        let argumentsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .arguments)
        var argumentsDecoded0: [Swift.String:Swift.String]? = nil
        if let argumentsContainer = argumentsContainer {
            argumentsDecoded0 = [Swift.String:Swift.String]()
            for (key0, genericstring0) in argumentsContainer {
                if let genericstring0 = genericstring0 {
                    argumentsDecoded0?[key0] = genericstring0
                }
            }
        }
        arguments = argumentsDecoded0
    }
}
