// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct CreateCrawlerInput: Swift.Equatable {
    /// A list of custom classifiers that the user has registered. By default, all built-in classifiers are included in a crawl, but these custom classifiers always override the default classifiers for a given classification.
    public var classifiers: [Swift.String]?
    /// Crawler configuration information. This versioned JSON string allows users to specify aspects of a crawler's behavior. For more information, see [Configuring a Crawler](https://docs.aws.amazon.com/glue/latest/dg/crawler-configuration.html).
    public var configuration: Swift.String?
    /// The name of the SecurityConfiguration structure to be used by this crawler.
    public var crawlerSecurityConfiguration: Swift.String?
    /// The Glue database where results are written, such as: arn:aws:daylight:us-east-1::database/sometable/*.
    public var databaseName: Swift.String?
    /// A description of the new crawler.
    public var description: Swift.String?
    /// Specifies Lake Formation configuration settings for the crawler.
    public var lakeFormationConfiguration: GlueClientTypes.LakeFormationConfiguration?
    /// Specifies data lineage configuration settings for the crawler.
    public var lineageConfiguration: GlueClientTypes.LineageConfiguration?
    /// Name of the new crawler.
    /// This member is required.
    public var name: Swift.String?
    /// A policy that specifies whether to crawl the entire dataset again, or to crawl only folders that were added since the last crawler run.
    public var recrawlPolicy: GlueClientTypes.RecrawlPolicy?
    /// The IAM role or Amazon Resource Name (ARN) of an IAM role used by the new crawler to access customer resources.
    /// This member is required.
    public var role: Swift.String?
    /// A cron expression used to specify the schedule (see [Time-Based Schedules for Jobs and Crawlers](https://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html). For example, to run something every day at 12:15 UTC, you would specify: cron(15 12 * * ? *).
    public var schedule: Swift.String?
    /// The policy for the crawler's update and deletion behavior.
    public var schemaChangePolicy: GlueClientTypes.SchemaChangePolicy?
    /// The table prefix used for catalog tables that are created.
    public var tablePrefix: Swift.String?
    /// The tags to use with this crawler request. You may use tags to limit access to the crawler. For more information about tags in Glue, see [Amazon Web Services Tags in Glue](https://docs.aws.amazon.com/glue/latest/dg/monitor-tags.html) in the developer guide.
    public var tags: [Swift.String:Swift.String]?
    /// A list of collection of targets to crawl.
    /// This member is required.
    public var targets: GlueClientTypes.CrawlerTargets?

    public init (
        classifiers: [Swift.String]? = nil,
        configuration: Swift.String? = nil,
        crawlerSecurityConfiguration: Swift.String? = nil,
        databaseName: Swift.String? = nil,
        description: Swift.String? = nil,
        lakeFormationConfiguration: GlueClientTypes.LakeFormationConfiguration? = nil,
        lineageConfiguration: GlueClientTypes.LineageConfiguration? = nil,
        name: Swift.String? = nil,
        recrawlPolicy: GlueClientTypes.RecrawlPolicy? = nil,
        role: Swift.String? = nil,
        schedule: Swift.String? = nil,
        schemaChangePolicy: GlueClientTypes.SchemaChangePolicy? = nil,
        tablePrefix: Swift.String? = nil,
        tags: [Swift.String:Swift.String]? = nil,
        targets: GlueClientTypes.CrawlerTargets? = nil
    )
    {
        self.classifiers = classifiers
        self.configuration = configuration
        self.crawlerSecurityConfiguration = crawlerSecurityConfiguration
        self.databaseName = databaseName
        self.description = description
        self.lakeFormationConfiguration = lakeFormationConfiguration
        self.lineageConfiguration = lineageConfiguration
        self.name = name
        self.recrawlPolicy = recrawlPolicy
        self.role = role
        self.schedule = schedule
        self.schemaChangePolicy = schemaChangePolicy
        self.tablePrefix = tablePrefix
        self.tags = tags
        self.targets = targets
    }
}
