// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension GlueClientTypes {
    /// Specifies a transform that identifies, removes or masks PII data.
    public struct PIIDetection: Swift.Equatable {
        /// Indicates the types of entities the PIIDetection transform will identify as PII data. PII type entities include: PERSON_NAME, DATE, USA_SNN, EMAIL, USA_ITIN, USA_PASSPORT_NUMBER, PHONE_NUMBER, BANK_ACCOUNT, IP_ADDRESS, MAC_ADDRESS, USA_CPT_CODE, USA_HCPCS_CODE, USA_NATIONAL_DRUG_CODE, USA_MEDICARE_BENEFICIARY_IDENTIFIER, USA_HEALTH_INSURANCE_CLAIM_NUMBER,CREDIT_CARD,USA_NATIONAL_PROVIDER_IDENTIFIER,USA_DEA_NUMBER,USA_DRIVING_LICENSE
        /// This member is required.
        public var entityTypesToDetect: [Swift.String]?
        /// The node ID inputs to the transform.
        /// This member is required.
        public var inputs: [Swift.String]?
        /// Indicates the value that will replace the detected entity.
        public var maskValue: Swift.String?
        /// The name of the transform node.
        /// This member is required.
        public var name: Swift.String?
        /// Indicates the output column name that will contain any entity type detected in that row.
        public var outputColumnName: Swift.String?
        /// Indicates the type of PIIDetection transform.
        /// This member is required.
        public var piiType: GlueClientTypes.PiiType?
        /// Indicates the fraction of the data to sample when scanning for PII entities.
        public var sampleFraction: Swift.Double?
        /// Indicates the fraction of the data that must be met in order for a column to be identified as PII data.
        public var thresholdFraction: Swift.Double?

        public init (
            entityTypesToDetect: [Swift.String]? = nil,
            inputs: [Swift.String]? = nil,
            maskValue: Swift.String? = nil,
            name: Swift.String? = nil,
            outputColumnName: Swift.String? = nil,
            piiType: GlueClientTypes.PiiType? = nil,
            sampleFraction: Swift.Double? = nil,
            thresholdFraction: Swift.Double? = nil
        )
        {
            self.entityTypesToDetect = entityTypesToDetect
            self.inputs = inputs
            self.maskValue = maskValue
            self.name = name
            self.outputColumnName = outputColumnName
            self.piiType = piiType
            self.sampleFraction = sampleFraction
            self.thresholdFraction = thresholdFraction
        }
    }

}
