// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateSchemaInputBody: Swift.Equatable {
    let registryId: GlueClientTypes.RegistryId?
    let schemaName: Swift.String?
    let dataFormat: GlueClientTypes.DataFormat?
    let compatibility: GlueClientTypes.Compatibility?
    let description: Swift.String?
    let tags: [Swift.String:Swift.String]?
    let schemaDefinition: Swift.String?
}

extension CreateSchemaInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case compatibility = "Compatibility"
        case dataFormat = "DataFormat"
        case description = "Description"
        case registryId = "RegistryId"
        case schemaDefinition = "SchemaDefinition"
        case schemaName = "SchemaName"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let registryIdDecoded = try containerValues.decodeIfPresent(GlueClientTypes.RegistryId.self, forKey: .registryId)
        registryId = registryIdDecoded
        let schemaNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .schemaName)
        schemaName = schemaNameDecoded
        let dataFormatDecoded = try containerValues.decodeIfPresent(GlueClientTypes.DataFormat.self, forKey: .dataFormat)
        dataFormat = dataFormatDecoded
        let compatibilityDecoded = try containerValues.decodeIfPresent(GlueClientTypes.Compatibility.self, forKey: .compatibility)
        compatibility = compatibilityDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
        let schemaDefinitionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .schemaDefinition)
        schemaDefinition = schemaDefinitionDecoded
    }
}
