// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct SearchTablesInputBody: Swift.Equatable {
    let catalogId: Swift.String?
    let nextToken: Swift.String?
    let filters: [GlueClientTypes.PropertyPredicate]?
    let searchText: Swift.String?
    let sortCriteria: [GlueClientTypes.SortCriterion]?
    let maxResults: Swift.Int?
    let resourceShareType: GlueClientTypes.ResourceShareType?
}

extension SearchTablesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case catalogId = "CatalogId"
        case filters = "Filters"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case resourceShareType = "ResourceShareType"
        case searchText = "SearchText"
        case sortCriteria = "SortCriteria"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let catalogIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .catalogId)
        catalogId = catalogIdDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let filtersContainer = try containerValues.decodeIfPresent([GlueClientTypes.PropertyPredicate?].self, forKey: .filters)
        var filtersDecoded0:[GlueClientTypes.PropertyPredicate]? = nil
        if let filtersContainer = filtersContainer {
            filtersDecoded0 = [GlueClientTypes.PropertyPredicate]()
            for structure0 in filtersContainer {
                if let structure0 = structure0 {
                    filtersDecoded0?.append(structure0)
                }
            }
        }
        filters = filtersDecoded0
        let searchTextDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .searchText)
        searchText = searchTextDecoded
        let sortCriteriaContainer = try containerValues.decodeIfPresent([GlueClientTypes.SortCriterion?].self, forKey: .sortCriteria)
        var sortCriteriaDecoded0:[GlueClientTypes.SortCriterion]? = nil
        if let sortCriteriaContainer = sortCriteriaContainer {
            sortCriteriaDecoded0 = [GlueClientTypes.SortCriterion]()
            for structure0 in sortCriteriaContainer {
                if let structure0 = structure0 {
                    sortCriteriaDecoded0?.append(structure0)
                }
            }
        }
        sortCriteria = sortCriteriaDecoded0
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let resourceShareTypeDecoded = try containerValues.decodeIfPresent(GlueClientTypes.ResourceShareType.self, forKey: .resourceShareType)
        resourceShareType = resourceShareTypeDecoded
    }
}
