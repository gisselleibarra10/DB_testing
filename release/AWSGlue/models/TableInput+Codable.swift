// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension GlueClientTypes.TableInput: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description = "Description"
        case lastAccessTime = "LastAccessTime"
        case lastAnalyzedTime = "LastAnalyzedTime"
        case name = "Name"
        case owner = "Owner"
        case parameters = "Parameters"
        case partitionKeys = "PartitionKeys"
        case retention = "Retention"
        case storageDescriptor = "StorageDescriptor"
        case tableType = "TableType"
        case targetTable = "TargetTable"
        case viewExpandedText = "ViewExpandedText"
        case viewOriginalText = "ViewOriginalText"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let lastAccessTime = self.lastAccessTime {
            try encodeContainer.encode(lastAccessTime.timeIntervalSince1970, forKey: .lastAccessTime)
        }
        if let lastAnalyzedTime = self.lastAnalyzedTime {
            try encodeContainer.encode(lastAnalyzedTime.timeIntervalSince1970, forKey: .lastAnalyzedTime)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let owner = self.owner {
            try encodeContainer.encode(owner, forKey: .owner)
        }
        if let parameters = parameters {
            var parametersContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .parameters)
            for (dictKey0, parametersmap0) in parameters {
                try parametersContainer.encode(parametersmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let partitionKeys = partitionKeys {
            var partitionKeysContainer = encodeContainer.nestedUnkeyedContainer(forKey: .partitionKeys)
            for columnlist0 in partitionKeys {
                try partitionKeysContainer.encode(columnlist0)
            }
        }
        if retention != 0 {
            try encodeContainer.encode(retention, forKey: .retention)
        }
        if let storageDescriptor = self.storageDescriptor {
            try encodeContainer.encode(storageDescriptor, forKey: .storageDescriptor)
        }
        if let tableType = self.tableType {
            try encodeContainer.encode(tableType, forKey: .tableType)
        }
        if let targetTable = self.targetTable {
            try encodeContainer.encode(targetTable, forKey: .targetTable)
        }
        if let viewExpandedText = self.viewExpandedText {
            try encodeContainer.encode(viewExpandedText, forKey: .viewExpandedText)
        }
        if let viewOriginalText = self.viewOriginalText {
            try encodeContainer.encode(viewOriginalText, forKey: .viewOriginalText)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let ownerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .owner)
        owner = ownerDecoded
        let lastAccessTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastAccessTime)
        lastAccessTime = lastAccessTimeDecoded
        let lastAnalyzedTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastAnalyzedTime)
        lastAnalyzedTime = lastAnalyzedTimeDecoded
        let retentionDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .retention) ?? 0
        retention = retentionDecoded
        let storageDescriptorDecoded = try containerValues.decodeIfPresent(GlueClientTypes.StorageDescriptor.self, forKey: .storageDescriptor)
        storageDescriptor = storageDescriptorDecoded
        let partitionKeysContainer = try containerValues.decodeIfPresent([GlueClientTypes.Column?].self, forKey: .partitionKeys)
        var partitionKeysDecoded0:[GlueClientTypes.Column]? = nil
        if let partitionKeysContainer = partitionKeysContainer {
            partitionKeysDecoded0 = [GlueClientTypes.Column]()
            for structure0 in partitionKeysContainer {
                if let structure0 = structure0 {
                    partitionKeysDecoded0?.append(structure0)
                }
            }
        }
        partitionKeys = partitionKeysDecoded0
        let viewOriginalTextDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .viewOriginalText)
        viewOriginalText = viewOriginalTextDecoded
        let viewExpandedTextDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .viewExpandedText)
        viewExpandedText = viewExpandedTextDecoded
        let tableTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tableType)
        tableType = tableTypeDecoded
        let parametersContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .parameters)
        var parametersDecoded0: [Swift.String:Swift.String]? = nil
        if let parametersContainer = parametersContainer {
            parametersDecoded0 = [Swift.String:Swift.String]()
            for (key0, parametersmapvalue0) in parametersContainer {
                if let parametersmapvalue0 = parametersmapvalue0 {
                    parametersDecoded0?[key0] = parametersmapvalue0
                }
            }
        }
        parameters = parametersDecoded0
        let targetTableDecoded = try containerValues.decodeIfPresent(GlueClientTypes.TableIdentifier.self, forKey: .targetTable)
        targetTable = targetTableDecoded
    }
}
