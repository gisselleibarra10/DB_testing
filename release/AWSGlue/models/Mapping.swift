// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension GlueClientTypes {
    /// Specifies the mapping of data property keys.
    public struct Mapping: Swift.Equatable {
        /// Only applicable to nested data structures. If you want to change the parent structure, but also one of its children, you can fill out this data strucutre. It is also Mapping, but its FromPath will be the parent's FromPath plus the FromPath from this structure. For the children part, suppose you have the structure: { "FromPath": "OuterStructure", "ToKey": "OuterStructure", "ToType": "Struct", "Dropped": false, "Chidlren": [{ "FromPath": "inner", "ToKey": "inner", "ToType": "Double", "Dropped": false, }] } You can specify a Mapping that looks like: { "FromPath": "OuterStructure", "ToKey": "OuterStructure", "ToType": "Struct", "Dropped": false, "Chidlren": [{ "FromPath": "inner", "ToKey": "inner", "ToType": "Double", "Dropped": false, }] }
        public var children: [GlueClientTypes.Mapping]?
        /// If true, then the column is removed.
        public var dropped: Swift.Bool?
        /// The table or column to be modified.
        public var fromPath: [Swift.String]?
        /// The type of the data to be modified.
        public var fromType: Swift.String?
        /// After the apply mapping, what the name of the column should be. Can be the same as FromPath.
        public var toKey: Swift.String?
        /// The data type that the data is to be modified to.
        public var toType: Swift.String?

        public init (
            children: [GlueClientTypes.Mapping]? = nil,
            dropped: Swift.Bool? = nil,
            fromPath: [Swift.String]? = nil,
            fromType: Swift.String? = nil,
            toKey: Swift.String? = nil,
            toType: Swift.String? = nil
        )
        {
            self.children = children
            self.dropped = dropped
            self.fromPath = fromPath
            self.fromType = fromType
            self.toKey = toKey
            self.toType = toType
        }
    }

}
