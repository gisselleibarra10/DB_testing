// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension GlueClientTypes.Union: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case inputs = "Inputs"
        case name = "Name"
        case unionType = "UnionType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let inputs = inputs {
            var inputsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .inputs)
            for twoinputs0 in inputs {
                try inputsContainer.encode(twoinputs0)
            }
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let unionType = self.unionType {
            try encodeContainer.encode(unionType.rawValue, forKey: .unionType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let inputsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .inputs)
        var inputsDecoded0:[Swift.String]? = nil
        if let inputsContainer = inputsContainer {
            inputsDecoded0 = [Swift.String]()
            for string0 in inputsContainer {
                if let string0 = string0 {
                    inputsDecoded0?.append(string0)
                }
            }
        }
        inputs = inputsDecoded0
        let unionTypeDecoded = try containerValues.decodeIfPresent(GlueClientTypes.UnionType.self, forKey: .unionType)
        unionType = unionTypeDecoded
    }
}
