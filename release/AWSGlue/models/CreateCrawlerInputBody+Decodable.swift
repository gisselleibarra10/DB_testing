// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateCrawlerInputBody: Swift.Equatable {
    let name: Swift.String?
    let role: Swift.String?
    let databaseName: Swift.String?
    let description: Swift.String?
    let targets: GlueClientTypes.CrawlerTargets?
    let schedule: Swift.String?
    let classifiers: [Swift.String]?
    let tablePrefix: Swift.String?
    let schemaChangePolicy: GlueClientTypes.SchemaChangePolicy?
    let recrawlPolicy: GlueClientTypes.RecrawlPolicy?
    let lineageConfiguration: GlueClientTypes.LineageConfiguration?
    let lakeFormationConfiguration: GlueClientTypes.LakeFormationConfiguration?
    let configuration: Swift.String?
    let crawlerSecurityConfiguration: Swift.String?
    let tags: [Swift.String:Swift.String]?
}

extension CreateCrawlerInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case classifiers = "Classifiers"
        case configuration = "Configuration"
        case crawlerSecurityConfiguration = "CrawlerSecurityConfiguration"
        case databaseName = "DatabaseName"
        case description = "Description"
        case lakeFormationConfiguration = "LakeFormationConfiguration"
        case lineageConfiguration = "LineageConfiguration"
        case name = "Name"
        case recrawlPolicy = "RecrawlPolicy"
        case role = "Role"
        case schedule = "Schedule"
        case schemaChangePolicy = "SchemaChangePolicy"
        case tablePrefix = "TablePrefix"
        case tags = "Tags"
        case targets = "Targets"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let roleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .role)
        role = roleDecoded
        let databaseNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .databaseName)
        databaseName = databaseNameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let targetsDecoded = try containerValues.decodeIfPresent(GlueClientTypes.CrawlerTargets.self, forKey: .targets)
        targets = targetsDecoded
        let scheduleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .schedule)
        schedule = scheduleDecoded
        let classifiersContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .classifiers)
        var classifiersDecoded0:[Swift.String]? = nil
        if let classifiersContainer = classifiersContainer {
            classifiersDecoded0 = [Swift.String]()
            for string0 in classifiersContainer {
                if let string0 = string0 {
                    classifiersDecoded0?.append(string0)
                }
            }
        }
        classifiers = classifiersDecoded0
        let tablePrefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tablePrefix)
        tablePrefix = tablePrefixDecoded
        let schemaChangePolicyDecoded = try containerValues.decodeIfPresent(GlueClientTypes.SchemaChangePolicy.self, forKey: .schemaChangePolicy)
        schemaChangePolicy = schemaChangePolicyDecoded
        let recrawlPolicyDecoded = try containerValues.decodeIfPresent(GlueClientTypes.RecrawlPolicy.self, forKey: .recrawlPolicy)
        recrawlPolicy = recrawlPolicyDecoded
        let lineageConfigurationDecoded = try containerValues.decodeIfPresent(GlueClientTypes.LineageConfiguration.self, forKey: .lineageConfiguration)
        lineageConfiguration = lineageConfigurationDecoded
        let lakeFormationConfigurationDecoded = try containerValues.decodeIfPresent(GlueClientTypes.LakeFormationConfiguration.self, forKey: .lakeFormationConfiguration)
        lakeFormationConfiguration = lakeFormationConfigurationDecoded
        let configurationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .configuration)
        configuration = configurationDecoded
        let crawlerSecurityConfigurationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .crawlerSecurityConfiguration)
        crawlerSecurityConfiguration = crawlerSecurityConfigurationDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
    }
}
