// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetUnfilteredPartitionMetadataInputBody: Swift.Equatable {
    let catalogId: Swift.String?
    let databaseName: Swift.String?
    let tableName: Swift.String?
    let partitionValues: [Swift.String]?
    let auditContext: GlueClientTypes.AuditContext?
    let supportedPermissionTypes: [GlueClientTypes.PermissionType]?
}

extension GetUnfilteredPartitionMetadataInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case auditContext = "AuditContext"
        case catalogId = "CatalogId"
        case databaseName = "DatabaseName"
        case partitionValues = "PartitionValues"
        case supportedPermissionTypes = "SupportedPermissionTypes"
        case tableName = "TableName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let catalogIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .catalogId)
        catalogId = catalogIdDecoded
        let databaseNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .databaseName)
        databaseName = databaseNameDecoded
        let tableNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tableName)
        tableName = tableNameDecoded
        let partitionValuesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .partitionValues)
        var partitionValuesDecoded0:[Swift.String]? = nil
        if let partitionValuesContainer = partitionValuesContainer {
            partitionValuesDecoded0 = [Swift.String]()
            for string0 in partitionValuesContainer {
                if let string0 = string0 {
                    partitionValuesDecoded0?.append(string0)
                }
            }
        }
        partitionValues = partitionValuesDecoded0
        let auditContextDecoded = try containerValues.decodeIfPresent(GlueClientTypes.AuditContext.self, forKey: .auditContext)
        auditContext = auditContextDecoded
        let supportedPermissionTypesContainer = try containerValues.decodeIfPresent([GlueClientTypes.PermissionType?].self, forKey: .supportedPermissionTypes)
        var supportedPermissionTypesDecoded0:[GlueClientTypes.PermissionType]? = nil
        if let supportedPermissionTypesContainer = supportedPermissionTypesContainer {
            supportedPermissionTypesDecoded0 = [GlueClientTypes.PermissionType]()
            for enum0 in supportedPermissionTypesContainer {
                if let enum0 = enum0 {
                    supportedPermissionTypesDecoded0?.append(enum0)
                }
            }
        }
        supportedPermissionTypes = supportedPermissionTypesDecoded0
    }
}
