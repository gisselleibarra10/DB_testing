// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension GlueClientTypes {
    public enum JDBCDataType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case array
        case bigint
        case binary
        case bit
        case blob
        case boolean
        case char
        case clob
        case datalink
        case date
        case decimal
        case distinct
        case double
        case float
        case integer
        case javaObject
        case longnvarchar
        case longvarbinary
        case longvarchar
        case nchar
        case nclob
        case null
        case numeric
        case nvarchar
        case other
        case real
        case ref
        case refCursor
        case rowid
        case smallint
        case sqlxml
        case `struct`
        case time
        case timestamp
        case timestampWithTimezone
        case timeWithTimezone
        case tinyint
        case varbinary
        case varchar
        case sdkUnknown(Swift.String)

        public static var allCases: [JDBCDataType] {
            return [
                .array,
                .bigint,
                .binary,
                .bit,
                .blob,
                .boolean,
                .char,
                .clob,
                .datalink,
                .date,
                .decimal,
                .distinct,
                .double,
                .float,
                .integer,
                .javaObject,
                .longnvarchar,
                .longvarbinary,
                .longvarchar,
                .nchar,
                .nclob,
                .null,
                .numeric,
                .nvarchar,
                .other,
                .real,
                .ref,
                .refCursor,
                .rowid,
                .smallint,
                .sqlxml,
                .struct,
                .time,
                .timestamp,
                .timestampWithTimezone,
                .timeWithTimezone,
                .tinyint,
                .varbinary,
                .varchar,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .array: return "ARRAY"
            case .bigint: return "BIGINT"
            case .binary: return "BINARY"
            case .bit: return "BIT"
            case .blob: return "BLOB"
            case .boolean: return "BOOLEAN"
            case .char: return "CHAR"
            case .clob: return "CLOB"
            case .datalink: return "DATALINK"
            case .date: return "DATE"
            case .decimal: return "DECIMAL"
            case .distinct: return "DISTINCT"
            case .double: return "DOUBLE"
            case .float: return "FLOAT"
            case .integer: return "INTEGER"
            case .javaObject: return "JAVA_OBJECT"
            case .longnvarchar: return "LONGNVARCHAR"
            case .longvarbinary: return "LONGVARBINARY"
            case .longvarchar: return "LONGVARCHAR"
            case .nchar: return "NCHAR"
            case .nclob: return "NCLOB"
            case .null: return "NULL"
            case .numeric: return "NUMERIC"
            case .nvarchar: return "NVARCHAR"
            case .other: return "OTHER"
            case .real: return "REAL"
            case .ref: return "REF"
            case .refCursor: return "REF_CURSOR"
            case .rowid: return "ROWID"
            case .smallint: return "SMALLINT"
            case .sqlxml: return "SQLXML"
            case .struct: return "STRUCT"
            case .time: return "TIME"
            case .timestamp: return "TIMESTAMP"
            case .timestampWithTimezone: return "TIMESTAMP_WITH_TIMEZONE"
            case .timeWithTimezone: return "TIME_WITH_TIMEZONE"
            case .tinyint: return "TINYINT"
            case .varbinary: return "VARBINARY"
            case .varchar: return "VARCHAR"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = JDBCDataType(rawValue: rawValue) ?? JDBCDataType.sdkUnknown(rawValue)
        }
    }
}
