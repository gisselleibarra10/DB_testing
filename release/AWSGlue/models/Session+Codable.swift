// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension GlueClientTypes.Session: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case command = "Command"
        case connections = "Connections"
        case createdOn = "CreatedOn"
        case defaultArguments = "DefaultArguments"
        case description = "Description"
        case errorMessage = "ErrorMessage"
        case glueVersion = "GlueVersion"
        case id = "Id"
        case maxCapacity = "MaxCapacity"
        case progress = "Progress"
        case role = "Role"
        case securityConfiguration = "SecurityConfiguration"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let command = self.command {
            try encodeContainer.encode(command, forKey: .command)
        }
        if let connections = self.connections {
            try encodeContainer.encode(connections, forKey: .connections)
        }
        if let createdOn = self.createdOn {
            try encodeContainer.encode(createdOn.timeIntervalSince1970, forKey: .createdOn)
        }
        if let defaultArguments = defaultArguments {
            var defaultArgumentsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .defaultArguments)
            for (dictKey0, orchestrationargumentsmap0) in defaultArguments {
                try defaultArgumentsContainer.encode(orchestrationargumentsmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let errorMessage = self.errorMessage {
            try encodeContainer.encode(errorMessage, forKey: .errorMessage)
        }
        if let glueVersion = self.glueVersion {
            try encodeContainer.encode(glueVersion, forKey: .glueVersion)
        }
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let maxCapacity = self.maxCapacity {
            try encodeContainer.encode(maxCapacity, forKey: .maxCapacity)
        }
        if progress != 0.0 {
            try encodeContainer.encode(progress, forKey: .progress)
        }
        if let role = self.role {
            try encodeContainer.encode(role, forKey: .role)
        }
        if let securityConfiguration = self.securityConfiguration {
            try encodeContainer.encode(securityConfiguration, forKey: .securityConfiguration)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let createdOnDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdOn)
        createdOn = createdOnDecoded
        let statusDecoded = try containerValues.decodeIfPresent(GlueClientTypes.SessionStatus.self, forKey: .status)
        status = statusDecoded
        let errorMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .errorMessage)
        errorMessage = errorMessageDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let roleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .role)
        role = roleDecoded
        let commandDecoded = try containerValues.decodeIfPresent(GlueClientTypes.SessionCommand.self, forKey: .command)
        command = commandDecoded
        let defaultArgumentsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .defaultArguments)
        var defaultArgumentsDecoded0: [Swift.String:Swift.String]? = nil
        if let defaultArgumentsContainer = defaultArgumentsContainer {
            defaultArgumentsDecoded0 = [Swift.String:Swift.String]()
            for (key0, orchestrationargumentsvalue0) in defaultArgumentsContainer {
                if let orchestrationargumentsvalue0 = orchestrationargumentsvalue0 {
                    defaultArgumentsDecoded0?[key0] = orchestrationargumentsvalue0
                }
            }
        }
        defaultArguments = defaultArgumentsDecoded0
        let connectionsDecoded = try containerValues.decodeIfPresent(GlueClientTypes.ConnectionsList.self, forKey: .connections)
        connections = connectionsDecoded
        let progressDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .progress) ?? 0.0
        progress = progressDecoded
        let maxCapacityDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .maxCapacity)
        maxCapacity = maxCapacityDecoded
        let securityConfigurationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .securityConfiguration)
        securityConfiguration = securityConfigurationDecoded
        let glueVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .glueVersion)
        glueVersion = glueVersionDecoded
    }
}
