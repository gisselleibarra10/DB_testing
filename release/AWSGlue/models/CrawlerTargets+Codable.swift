// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension GlueClientTypes.CrawlerTargets: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case catalogTargets = "CatalogTargets"
        case deltaTargets = "DeltaTargets"
        case dynamoDBTargets = "DynamoDBTargets"
        case jdbcTargets = "JdbcTargets"
        case mongoDBTargets = "MongoDBTargets"
        case s3Targets = "S3Targets"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let catalogTargets = catalogTargets {
            var catalogTargetsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .catalogTargets)
            for catalogtargetlist0 in catalogTargets {
                try catalogTargetsContainer.encode(catalogtargetlist0)
            }
        }
        if let deltaTargets = deltaTargets {
            var deltaTargetsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .deltaTargets)
            for deltatargetlist0 in deltaTargets {
                try deltaTargetsContainer.encode(deltatargetlist0)
            }
        }
        if let dynamoDBTargets = dynamoDBTargets {
            var dynamoDBTargetsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .dynamoDBTargets)
            for dynamodbtargetlist0 in dynamoDBTargets {
                try dynamoDBTargetsContainer.encode(dynamodbtargetlist0)
            }
        }
        if let jdbcTargets = jdbcTargets {
            var jdbcTargetsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .jdbcTargets)
            for jdbctargetlist0 in jdbcTargets {
                try jdbcTargetsContainer.encode(jdbctargetlist0)
            }
        }
        if let mongoDBTargets = mongoDBTargets {
            var mongoDBTargetsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .mongoDBTargets)
            for mongodbtargetlist0 in mongoDBTargets {
                try mongoDBTargetsContainer.encode(mongodbtargetlist0)
            }
        }
        if let s3Targets = s3Targets {
            var s3TargetsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .s3Targets)
            for s3targetlist0 in s3Targets {
                try s3TargetsContainer.encode(s3targetlist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let s3TargetsContainer = try containerValues.decodeIfPresent([GlueClientTypes.S3Target?].self, forKey: .s3Targets)
        var s3TargetsDecoded0:[GlueClientTypes.S3Target]? = nil
        if let s3TargetsContainer = s3TargetsContainer {
            s3TargetsDecoded0 = [GlueClientTypes.S3Target]()
            for structure0 in s3TargetsContainer {
                if let structure0 = structure0 {
                    s3TargetsDecoded0?.append(structure0)
                }
            }
        }
        s3Targets = s3TargetsDecoded0
        let jdbcTargetsContainer = try containerValues.decodeIfPresent([GlueClientTypes.JdbcTarget?].self, forKey: .jdbcTargets)
        var jdbcTargetsDecoded0:[GlueClientTypes.JdbcTarget]? = nil
        if let jdbcTargetsContainer = jdbcTargetsContainer {
            jdbcTargetsDecoded0 = [GlueClientTypes.JdbcTarget]()
            for structure0 in jdbcTargetsContainer {
                if let structure0 = structure0 {
                    jdbcTargetsDecoded0?.append(structure0)
                }
            }
        }
        jdbcTargets = jdbcTargetsDecoded0
        let mongoDBTargetsContainer = try containerValues.decodeIfPresent([GlueClientTypes.MongoDBTarget?].self, forKey: .mongoDBTargets)
        var mongoDBTargetsDecoded0:[GlueClientTypes.MongoDBTarget]? = nil
        if let mongoDBTargetsContainer = mongoDBTargetsContainer {
            mongoDBTargetsDecoded0 = [GlueClientTypes.MongoDBTarget]()
            for structure0 in mongoDBTargetsContainer {
                if let structure0 = structure0 {
                    mongoDBTargetsDecoded0?.append(structure0)
                }
            }
        }
        mongoDBTargets = mongoDBTargetsDecoded0
        let dynamoDBTargetsContainer = try containerValues.decodeIfPresent([GlueClientTypes.DynamoDBTarget?].self, forKey: .dynamoDBTargets)
        var dynamoDBTargetsDecoded0:[GlueClientTypes.DynamoDBTarget]? = nil
        if let dynamoDBTargetsContainer = dynamoDBTargetsContainer {
            dynamoDBTargetsDecoded0 = [GlueClientTypes.DynamoDBTarget]()
            for structure0 in dynamoDBTargetsContainer {
                if let structure0 = structure0 {
                    dynamoDBTargetsDecoded0?.append(structure0)
                }
            }
        }
        dynamoDBTargets = dynamoDBTargetsDecoded0
        let catalogTargetsContainer = try containerValues.decodeIfPresent([GlueClientTypes.CatalogTarget?].self, forKey: .catalogTargets)
        var catalogTargetsDecoded0:[GlueClientTypes.CatalogTarget]? = nil
        if let catalogTargetsContainer = catalogTargetsContainer {
            catalogTargetsDecoded0 = [GlueClientTypes.CatalogTarget]()
            for structure0 in catalogTargetsContainer {
                if let structure0 = structure0 {
                    catalogTargetsDecoded0?.append(structure0)
                }
            }
        }
        catalogTargets = catalogTargetsDecoded0
        let deltaTargetsContainer = try containerValues.decodeIfPresent([GlueClientTypes.DeltaTarget?].self, forKey: .deltaTargets)
        var deltaTargetsDecoded0:[GlueClientTypes.DeltaTarget]? = nil
        if let deltaTargetsContainer = deltaTargetsContainer {
            deltaTargetsDecoded0 = [GlueClientTypes.DeltaTarget]()
            for structure0 in deltaTargetsContainer {
                if let structure0 = structure0 {
                    deltaTargetsDecoded0?.append(structure0)
                }
            }
        }
        deltaTargets = deltaTargetsDecoded0
    }
}
