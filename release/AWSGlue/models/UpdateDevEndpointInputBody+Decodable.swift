// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct UpdateDevEndpointInputBody: Swift.Equatable {
    let endpointName: Swift.String?
    let publicKey: Swift.String?
    let addPublicKeys: [Swift.String]?
    let deletePublicKeys: [Swift.String]?
    let customLibraries: GlueClientTypes.DevEndpointCustomLibraries?
    let updateEtlLibraries: Swift.Bool
    let deleteArguments: [Swift.String]?
    let addArguments: [Swift.String:Swift.String]?
}

extension UpdateDevEndpointInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case addArguments = "AddArguments"
        case addPublicKeys = "AddPublicKeys"
        case customLibraries = "CustomLibraries"
        case deleteArguments = "DeleteArguments"
        case deletePublicKeys = "DeletePublicKeys"
        case endpointName = "EndpointName"
        case publicKey = "PublicKey"
        case updateEtlLibraries = "UpdateEtlLibraries"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let endpointNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .endpointName)
        endpointName = endpointNameDecoded
        let publicKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .publicKey)
        publicKey = publicKeyDecoded
        let addPublicKeysContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .addPublicKeys)
        var addPublicKeysDecoded0:[Swift.String]? = nil
        if let addPublicKeysContainer = addPublicKeysContainer {
            addPublicKeysDecoded0 = [Swift.String]()
            for string0 in addPublicKeysContainer {
                if let string0 = string0 {
                    addPublicKeysDecoded0?.append(string0)
                }
            }
        }
        addPublicKeys = addPublicKeysDecoded0
        let deletePublicKeysContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .deletePublicKeys)
        var deletePublicKeysDecoded0:[Swift.String]? = nil
        if let deletePublicKeysContainer = deletePublicKeysContainer {
            deletePublicKeysDecoded0 = [Swift.String]()
            for string0 in deletePublicKeysContainer {
                if let string0 = string0 {
                    deletePublicKeysDecoded0?.append(string0)
                }
            }
        }
        deletePublicKeys = deletePublicKeysDecoded0
        let customLibrariesDecoded = try containerValues.decodeIfPresent(GlueClientTypes.DevEndpointCustomLibraries.self, forKey: .customLibraries)
        customLibraries = customLibrariesDecoded
        let updateEtlLibrariesDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .updateEtlLibraries) ?? false
        updateEtlLibraries = updateEtlLibrariesDecoded
        let deleteArgumentsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .deleteArguments)
        var deleteArgumentsDecoded0:[Swift.String]? = nil
        if let deleteArgumentsContainer = deleteArgumentsContainer {
            deleteArgumentsDecoded0 = [Swift.String]()
            for string0 in deleteArgumentsContainer {
                if let string0 = string0 {
                    deleteArgumentsDecoded0?.append(string0)
                }
            }
        }
        deleteArguments = deleteArgumentsDecoded0
        let addArgumentsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .addArguments)
        var addArgumentsDecoded0: [Swift.String:Swift.String]? = nil
        if let addArgumentsContainer = addArgumentsContainer {
            addArgumentsDecoded0 = [Swift.String:Swift.String]()
            for (key0, genericstring0) in addArgumentsContainer {
                if let genericstring0 = genericstring0 {
                    addArgumentsDecoded0?[key0] = genericstring0
                }
            }
        }
        addArguments = addArgumentsDecoded0
    }
}
