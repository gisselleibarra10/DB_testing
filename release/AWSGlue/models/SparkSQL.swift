// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension GlueClientTypes {
    /// Specifies a transform where you enter a SQL query using Spark SQL syntax to transform the data. The output is a single DynamicFrame.
    public struct SparkSQL: Swift.Equatable {
        /// The data inputs identified by their node names. You can associate a table name with each input node to use in the SQL query. The name you choose must meet the Spark SQL naming restrictions.
        /// This member is required.
        public var inputs: [Swift.String]?
        /// The name of the transform node.
        /// This member is required.
        public var name: Swift.String?
        /// Specifies the data schema for the SparkSQL transform.
        public var outputSchemas: [GlueClientTypes.GlueSchema]?
        /// A list of aliases. An alias allows you to specify what name to use in the SQL for a given input. For example, you have a datasource named "MyDataSource". If you specify From as MyDataSource, and Alias as SqlName, then in your SQL you can do: select * from SqlName and that gets data from MyDataSource.
        /// This member is required.
        public var sqlAliases: [GlueClientTypes.SqlAlias]?
        /// A SQL query that must use Spark SQL syntax and return a single data set.
        /// This member is required.
        public var sqlQuery: Swift.String?

        public init (
            inputs: [Swift.String]? = nil,
            name: Swift.String? = nil,
            outputSchemas: [GlueClientTypes.GlueSchema]? = nil,
            sqlAliases: [GlueClientTypes.SqlAlias]? = nil,
            sqlQuery: Swift.String? = nil
        )
        {
            self.inputs = inputs
            self.name = name
            self.outputSchemas = outputSchemas
            self.sqlAliases = sqlAliases
            self.sqlQuery = sqlQuery
        }
    }

}
