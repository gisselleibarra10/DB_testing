// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension GlueClientTypes {
    /// Additional options for streaming.
    public struct KafkaStreamingSourceOptions: Swift.Equatable {
        /// The specific TopicPartitions to consume. You must specify at least one of "topicName", "assign" or "subscribePattern".
        public var assign: Swift.String?
        /// A list of bootstrap server URLs, for example, as b-1.vpc-test-2.o4q88o.c6.kafka.us-east-1.amazonaws.com:9094. This option must be specified in the API call or defined in the table metadata in the Data Catalog.
        public var bootstrapServers: Swift.String?
        /// An optional classification.
        public var classification: Swift.String?
        /// The name of the connection.
        public var connectionName: Swift.String?
        /// Specifies the delimiter character.
        public var delimiter: Swift.String?
        /// The end point when a batch query is ended. Possible values are either "latest" or a JSON string that specifies an ending offset for each TopicPartition.
        public var endingOffsets: Swift.String?
        /// The rate limit on the maximum number of offsets that are processed per trigger interval. The specified total number of offsets is proportionally split across topicPartitions of different volumes. The default value is null, which means that the consumer reads all offsets until the known latest offset.
        public var maxOffsetsPerTrigger: Swift.Int?
        /// The desired minimum number of partitions to read from Kafka. The default value is null, which means that the number of spark partitions is equal to the number of Kafka partitions.
        public var minPartitions: Swift.Int?
        /// The number of times to retry before failing to fetch Kafka offsets. The default value is 3.
        public var numRetries: Swift.Int?
        /// The timeout in milliseconds to poll data from Kafka in Spark job executors. The default value is 512.
        public var pollTimeoutMs: Swift.Int?
        /// The time in milliseconds to wait before retrying to fetch Kafka offsets. The default value is 10.
        public var retryIntervalMs: Swift.Int?
        /// The protocol used to communicate with brokers. The possible values are "SSL" or "PLAINTEXT".
        public var securityProtocol: Swift.String?
        /// The starting position in the Kafka topic to read data from. The possible values are "earliest" or "latest". The default value is "latest".
        public var startingOffsets: Swift.String?
        /// A Java regex string that identifies the topic list to subscribe to. You must specify at least one of "topicName", "assign" or "subscribePattern".
        public var subscribePattern: Swift.String?
        /// The topic name as specified in Apache Kafka. You must specify at least one of "topicName", "assign" or "subscribePattern".
        public var topicName: Swift.String?

        public init (
            assign: Swift.String? = nil,
            bootstrapServers: Swift.String? = nil,
            classification: Swift.String? = nil,
            connectionName: Swift.String? = nil,
            delimiter: Swift.String? = nil,
            endingOffsets: Swift.String? = nil,
            maxOffsetsPerTrigger: Swift.Int? = nil,
            minPartitions: Swift.Int? = nil,
            numRetries: Swift.Int? = nil,
            pollTimeoutMs: Swift.Int? = nil,
            retryIntervalMs: Swift.Int? = nil,
            securityProtocol: Swift.String? = nil,
            startingOffsets: Swift.String? = nil,
            subscribePattern: Swift.String? = nil,
            topicName: Swift.String? = nil
        )
        {
            self.assign = assign
            self.bootstrapServers = bootstrapServers
            self.classification = classification
            self.connectionName = connectionName
            self.delimiter = delimiter
            self.endingOffsets = endingOffsets
            self.maxOffsetsPerTrigger = maxOffsetsPerTrigger
            self.minPartitions = minPartitions
            self.numRetries = numRetries
            self.pollTimeoutMs = pollTimeoutMs
            self.retryIntervalMs = retryIntervalMs
            self.securityProtocol = securityProtocol
            self.startingOffsets = startingOffsets
            self.subscribePattern = subscribePattern
            self.topicName = topicName
        }
    }

}
