// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension GlueClientTypes.StatementOutput: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case data = "Data"
        case errorName = "ErrorName"
        case errorValue = "ErrorValue"
        case executionCount = "ExecutionCount"
        case status = "Status"
        case traceback = "Traceback"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let data = self.data {
            try encodeContainer.encode(data, forKey: .data)
        }
        if let errorName = self.errorName {
            try encodeContainer.encode(errorName, forKey: .errorName)
        }
        if let errorValue = self.errorValue {
            try encodeContainer.encode(errorValue, forKey: .errorValue)
        }
        if executionCount != 0 {
            try encodeContainer.encode(executionCount, forKey: .executionCount)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let traceback = traceback {
            var tracebackContainer = encodeContainer.nestedUnkeyedContainer(forKey: .traceback)
            for orchestrationstringlist0 in traceback {
                try tracebackContainer.encode(orchestrationstringlist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dataDecoded = try containerValues.decodeIfPresent(GlueClientTypes.StatementOutputData.self, forKey: .data)
        data = dataDecoded
        let executionCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .executionCount) ?? 0
        executionCount = executionCountDecoded
        let statusDecoded = try containerValues.decodeIfPresent(GlueClientTypes.StatementState.self, forKey: .status)
        status = statusDecoded
        let errorNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .errorName)
        errorName = errorNameDecoded
        let errorValueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .errorValue)
        errorValue = errorValueDecoded
        let tracebackContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .traceback)
        var tracebackDecoded0:[Swift.String]? = nil
        if let tracebackContainer = tracebackContainer {
            tracebackDecoded0 = [Swift.String]()
            for string0 in tracebackContainer {
                if let string0 = string0 {
                    tracebackDecoded0?.append(string0)
                }
            }
        }
        traceback = tracebackDecoded0
    }
}
