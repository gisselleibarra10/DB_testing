// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CreateDevEndpointInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arguments = "Arguments"
        case endpointName = "EndpointName"
        case extraJarsS3Path = "ExtraJarsS3Path"
        case extraPythonLibsS3Path = "ExtraPythonLibsS3Path"
        case glueVersion = "GlueVersion"
        case numberOfNodes = "NumberOfNodes"
        case numberOfWorkers = "NumberOfWorkers"
        case publicKey = "PublicKey"
        case publicKeys = "PublicKeys"
        case roleArn = "RoleArn"
        case securityConfiguration = "SecurityConfiguration"
        case securityGroupIds = "SecurityGroupIds"
        case subnetId = "SubnetId"
        case tags = "Tags"
        case workerType = "WorkerType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arguments = arguments {
            var argumentsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .arguments)
            for (dictKey0, mapvalue0) in arguments {
                try argumentsContainer.encode(mapvalue0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let endpointName = self.endpointName {
            try encodeContainer.encode(endpointName, forKey: .endpointName)
        }
        if let extraJarsS3Path = self.extraJarsS3Path {
            try encodeContainer.encode(extraJarsS3Path, forKey: .extraJarsS3Path)
        }
        if let extraPythonLibsS3Path = self.extraPythonLibsS3Path {
            try encodeContainer.encode(extraPythonLibsS3Path, forKey: .extraPythonLibsS3Path)
        }
        if let glueVersion = self.glueVersion {
            try encodeContainer.encode(glueVersion, forKey: .glueVersion)
        }
        if numberOfNodes != 0 {
            try encodeContainer.encode(numberOfNodes, forKey: .numberOfNodes)
        }
        if let numberOfWorkers = self.numberOfWorkers {
            try encodeContainer.encode(numberOfWorkers, forKey: .numberOfWorkers)
        }
        if let publicKey = self.publicKey {
            try encodeContainer.encode(publicKey, forKey: .publicKey)
        }
        if let publicKeys = publicKeys {
            var publicKeysContainer = encodeContainer.nestedUnkeyedContainer(forKey: .publicKeys)
            for publickeyslist0 in publicKeys {
                try publicKeysContainer.encode(publickeyslist0)
            }
        }
        if let roleArn = self.roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let securityConfiguration = self.securityConfiguration {
            try encodeContainer.encode(securityConfiguration, forKey: .securityConfiguration)
        }
        if let securityGroupIds = securityGroupIds {
            var securityGroupIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .securityGroupIds)
            for stringlist0 in securityGroupIds {
                try securityGroupIdsContainer.encode(stringlist0)
            }
        }
        if let subnetId = self.subnetId {
            try encodeContainer.encode(subnetId, forKey: .subnetId)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, tagsmap0) in tags {
                try tagsContainer.encode(tagsmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let workerType = self.workerType {
            try encodeContainer.encode(workerType.rawValue, forKey: .workerType)
        }
    }
}
