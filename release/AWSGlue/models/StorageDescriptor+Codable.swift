// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension GlueClientTypes.StorageDescriptor: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case additionalLocations = "AdditionalLocations"
        case bucketColumns = "BucketColumns"
        case columns = "Columns"
        case compressed = "Compressed"
        case inputFormat = "InputFormat"
        case location = "Location"
        case numberOfBuckets = "NumberOfBuckets"
        case outputFormat = "OutputFormat"
        case parameters = "Parameters"
        case schemaReference = "SchemaReference"
        case serdeInfo = "SerdeInfo"
        case skewedInfo = "SkewedInfo"
        case sortColumns = "SortColumns"
        case storedAsSubDirectories = "StoredAsSubDirectories"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let additionalLocations = additionalLocations {
            var additionalLocationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .additionalLocations)
            for locationstringlist0 in additionalLocations {
                try additionalLocationsContainer.encode(locationstringlist0)
            }
        }
        if let bucketColumns = bucketColumns {
            var bucketColumnsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .bucketColumns)
            for namestringlist0 in bucketColumns {
                try bucketColumnsContainer.encode(namestringlist0)
            }
        }
        if let columns = columns {
            var columnsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .columns)
            for columnlist0 in columns {
                try columnsContainer.encode(columnlist0)
            }
        }
        if compressed != false {
            try encodeContainer.encode(compressed, forKey: .compressed)
        }
        if let inputFormat = self.inputFormat {
            try encodeContainer.encode(inputFormat, forKey: .inputFormat)
        }
        if let location = self.location {
            try encodeContainer.encode(location, forKey: .location)
        }
        if numberOfBuckets != 0 {
            try encodeContainer.encode(numberOfBuckets, forKey: .numberOfBuckets)
        }
        if let outputFormat = self.outputFormat {
            try encodeContainer.encode(outputFormat, forKey: .outputFormat)
        }
        if let parameters = parameters {
            var parametersContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .parameters)
            for (dictKey0, parametersmap0) in parameters {
                try parametersContainer.encode(parametersmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let schemaReference = self.schemaReference {
            try encodeContainer.encode(schemaReference, forKey: .schemaReference)
        }
        if let serdeInfo = self.serdeInfo {
            try encodeContainer.encode(serdeInfo, forKey: .serdeInfo)
        }
        if let skewedInfo = self.skewedInfo {
            try encodeContainer.encode(skewedInfo, forKey: .skewedInfo)
        }
        if let sortColumns = sortColumns {
            var sortColumnsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .sortColumns)
            for orderlist0 in sortColumns {
                try sortColumnsContainer.encode(orderlist0)
            }
        }
        if storedAsSubDirectories != false {
            try encodeContainer.encode(storedAsSubDirectories, forKey: .storedAsSubDirectories)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let columnsContainer = try containerValues.decodeIfPresent([GlueClientTypes.Column?].self, forKey: .columns)
        var columnsDecoded0:[GlueClientTypes.Column]? = nil
        if let columnsContainer = columnsContainer {
            columnsDecoded0 = [GlueClientTypes.Column]()
            for structure0 in columnsContainer {
                if let structure0 = structure0 {
                    columnsDecoded0?.append(structure0)
                }
            }
        }
        columns = columnsDecoded0
        let locationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .location)
        location = locationDecoded
        let additionalLocationsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .additionalLocations)
        var additionalLocationsDecoded0:[Swift.String]? = nil
        if let additionalLocationsContainer = additionalLocationsContainer {
            additionalLocationsDecoded0 = [Swift.String]()
            for string0 in additionalLocationsContainer {
                if let string0 = string0 {
                    additionalLocationsDecoded0?.append(string0)
                }
            }
        }
        additionalLocations = additionalLocationsDecoded0
        let inputFormatDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .inputFormat)
        inputFormat = inputFormatDecoded
        let outputFormatDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .outputFormat)
        outputFormat = outputFormatDecoded
        let compressedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .compressed) ?? false
        compressed = compressedDecoded
        let numberOfBucketsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .numberOfBuckets) ?? 0
        numberOfBuckets = numberOfBucketsDecoded
        let serdeInfoDecoded = try containerValues.decodeIfPresent(GlueClientTypes.SerDeInfo.self, forKey: .serdeInfo)
        serdeInfo = serdeInfoDecoded
        let bucketColumnsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .bucketColumns)
        var bucketColumnsDecoded0:[Swift.String]? = nil
        if let bucketColumnsContainer = bucketColumnsContainer {
            bucketColumnsDecoded0 = [Swift.String]()
            for string0 in bucketColumnsContainer {
                if let string0 = string0 {
                    bucketColumnsDecoded0?.append(string0)
                }
            }
        }
        bucketColumns = bucketColumnsDecoded0
        let sortColumnsContainer = try containerValues.decodeIfPresent([GlueClientTypes.Order?].self, forKey: .sortColumns)
        var sortColumnsDecoded0:[GlueClientTypes.Order]? = nil
        if let sortColumnsContainer = sortColumnsContainer {
            sortColumnsDecoded0 = [GlueClientTypes.Order]()
            for structure0 in sortColumnsContainer {
                if let structure0 = structure0 {
                    sortColumnsDecoded0?.append(structure0)
                }
            }
        }
        sortColumns = sortColumnsDecoded0
        let parametersContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .parameters)
        var parametersDecoded0: [Swift.String:Swift.String]? = nil
        if let parametersContainer = parametersContainer {
            parametersDecoded0 = [Swift.String:Swift.String]()
            for (key0, parametersmapvalue0) in parametersContainer {
                if let parametersmapvalue0 = parametersmapvalue0 {
                    parametersDecoded0?[key0] = parametersmapvalue0
                }
            }
        }
        parameters = parametersDecoded0
        let skewedInfoDecoded = try containerValues.decodeIfPresent(GlueClientTypes.SkewedInfo.self, forKey: .skewedInfo)
        skewedInfo = skewedInfoDecoded
        let storedAsSubDirectoriesDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .storedAsSubDirectories) ?? false
        storedAsSubDirectories = storedAsSubDirectoriesDecoded
        let schemaReferenceDecoded = try containerValues.decodeIfPresent(GlueClientTypes.SchemaReference.self, forKey: .schemaReference)
        schemaReference = schemaReferenceDecoded
    }
}
