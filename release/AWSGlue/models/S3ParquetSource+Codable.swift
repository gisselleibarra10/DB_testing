// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension GlueClientTypes.S3ParquetSource: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case additionalOptions = "AdditionalOptions"
        case compressionType = "CompressionType"
        case exclusions = "Exclusions"
        case groupFiles = "GroupFiles"
        case groupSize = "GroupSize"
        case maxBand = "MaxBand"
        case maxFilesInBand = "MaxFilesInBand"
        case name = "Name"
        case outputSchemas = "OutputSchemas"
        case paths = "Paths"
        case recurse = "Recurse"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let additionalOptions = self.additionalOptions {
            try encodeContainer.encode(additionalOptions, forKey: .additionalOptions)
        }
        if let compressionType = self.compressionType {
            try encodeContainer.encode(compressionType.rawValue, forKey: .compressionType)
        }
        if let exclusions = exclusions {
            var exclusionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .exclusions)
            for enclosedinstringproperties0 in exclusions {
                try exclusionsContainer.encode(enclosedinstringproperties0)
            }
        }
        if let groupFiles = self.groupFiles {
            try encodeContainer.encode(groupFiles, forKey: .groupFiles)
        }
        if let groupSize = self.groupSize {
            try encodeContainer.encode(groupSize, forKey: .groupSize)
        }
        if let maxBand = self.maxBand {
            try encodeContainer.encode(maxBand, forKey: .maxBand)
        }
        if let maxFilesInBand = self.maxFilesInBand {
            try encodeContainer.encode(maxFilesInBand, forKey: .maxFilesInBand)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let outputSchemas = outputSchemas {
            var outputSchemasContainer = encodeContainer.nestedUnkeyedContainer(forKey: .outputSchemas)
            for glueschemas0 in outputSchemas {
                try outputSchemasContainer.encode(glueschemas0)
            }
        }
        if let paths = paths {
            var pathsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .paths)
            for enclosedinstringproperties0 in paths {
                try pathsContainer.encode(enclosedinstringproperties0)
            }
        }
        if let recurse = self.recurse {
            try encodeContainer.encode(recurse, forKey: .recurse)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let pathsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .paths)
        var pathsDecoded0:[Swift.String]? = nil
        if let pathsContainer = pathsContainer {
            pathsDecoded0 = [Swift.String]()
            for string0 in pathsContainer {
                if let string0 = string0 {
                    pathsDecoded0?.append(string0)
                }
            }
        }
        paths = pathsDecoded0
        let compressionTypeDecoded = try containerValues.decodeIfPresent(GlueClientTypes.ParquetCompressionType.self, forKey: .compressionType)
        compressionType = compressionTypeDecoded
        let exclusionsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .exclusions)
        var exclusionsDecoded0:[Swift.String]? = nil
        if let exclusionsContainer = exclusionsContainer {
            exclusionsDecoded0 = [Swift.String]()
            for string0 in exclusionsContainer {
                if let string0 = string0 {
                    exclusionsDecoded0?.append(string0)
                }
            }
        }
        exclusions = exclusionsDecoded0
        let groupSizeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .groupSize)
        groupSize = groupSizeDecoded
        let groupFilesDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .groupFiles)
        groupFiles = groupFilesDecoded
        let recurseDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .recurse)
        recurse = recurseDecoded
        let maxBandDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxBand)
        maxBand = maxBandDecoded
        let maxFilesInBandDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxFilesInBand)
        maxFilesInBand = maxFilesInBandDecoded
        let additionalOptionsDecoded = try containerValues.decodeIfPresent(GlueClientTypes.S3DirectSourceAdditionalOptions.self, forKey: .additionalOptions)
        additionalOptions = additionalOptionsDecoded
        let outputSchemasContainer = try containerValues.decodeIfPresent([GlueClientTypes.GlueSchema?].self, forKey: .outputSchemas)
        var outputSchemasDecoded0:[GlueClientTypes.GlueSchema]? = nil
        if let outputSchemasContainer = outputSchemasContainer {
            outputSchemasDecoded0 = [GlueClientTypes.GlueSchema]()
            for structure0 in outputSchemasContainer {
                if let structure0 = structure0 {
                    outputSchemasDecoded0?.append(structure0)
                }
            }
        }
        outputSchemas = outputSchemasDecoded0
    }
}
