// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension GlueClientTypes.JobRun: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case allocatedCapacity = "AllocatedCapacity"
        case arguments = "Arguments"
        case attempt = "Attempt"
        case completedOn = "CompletedOn"
        case dPUSeconds = "DPUSeconds"
        case errorMessage = "ErrorMessage"
        case executionClass = "ExecutionClass"
        case executionTime = "ExecutionTime"
        case glueVersion = "GlueVersion"
        case id = "Id"
        case jobName = "JobName"
        case jobRunState = "JobRunState"
        case lastModifiedOn = "LastModifiedOn"
        case logGroupName = "LogGroupName"
        case maxCapacity = "MaxCapacity"
        case notificationProperty = "NotificationProperty"
        case numberOfWorkers = "NumberOfWorkers"
        case predecessorRuns = "PredecessorRuns"
        case previousRunId = "PreviousRunId"
        case securityConfiguration = "SecurityConfiguration"
        case startedOn = "StartedOn"
        case timeout = "Timeout"
        case triggerName = "TriggerName"
        case workerType = "WorkerType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if allocatedCapacity != 0 {
            try encodeContainer.encode(allocatedCapacity, forKey: .allocatedCapacity)
        }
        if let arguments = arguments {
            var argumentsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .arguments)
            for (dictKey0, genericmap0) in arguments {
                try argumentsContainer.encode(genericmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if attempt != 0 {
            try encodeContainer.encode(attempt, forKey: .attempt)
        }
        if let completedOn = self.completedOn {
            try encodeContainer.encode(completedOn.timeIntervalSince1970, forKey: .completedOn)
        }
        if let dPUSeconds = self.dPUSeconds {
            try encodeContainer.encode(dPUSeconds, forKey: .dPUSeconds)
        }
        if let errorMessage = self.errorMessage {
            try encodeContainer.encode(errorMessage, forKey: .errorMessage)
        }
        if let executionClass = self.executionClass {
            try encodeContainer.encode(executionClass.rawValue, forKey: .executionClass)
        }
        if executionTime != 0 {
            try encodeContainer.encode(executionTime, forKey: .executionTime)
        }
        if let glueVersion = self.glueVersion {
            try encodeContainer.encode(glueVersion, forKey: .glueVersion)
        }
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let jobName = self.jobName {
            try encodeContainer.encode(jobName, forKey: .jobName)
        }
        if let jobRunState = self.jobRunState {
            try encodeContainer.encode(jobRunState.rawValue, forKey: .jobRunState)
        }
        if let lastModifiedOn = self.lastModifiedOn {
            try encodeContainer.encode(lastModifiedOn.timeIntervalSince1970, forKey: .lastModifiedOn)
        }
        if let logGroupName = self.logGroupName {
            try encodeContainer.encode(logGroupName, forKey: .logGroupName)
        }
        if let maxCapacity = self.maxCapacity {
            try encodeContainer.encode(maxCapacity, forKey: .maxCapacity)
        }
        if let notificationProperty = self.notificationProperty {
            try encodeContainer.encode(notificationProperty, forKey: .notificationProperty)
        }
        if let numberOfWorkers = self.numberOfWorkers {
            try encodeContainer.encode(numberOfWorkers, forKey: .numberOfWorkers)
        }
        if let predecessorRuns = predecessorRuns {
            var predecessorRunsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .predecessorRuns)
            for predecessorlist0 in predecessorRuns {
                try predecessorRunsContainer.encode(predecessorlist0)
            }
        }
        if let previousRunId = self.previousRunId {
            try encodeContainer.encode(previousRunId, forKey: .previousRunId)
        }
        if let securityConfiguration = self.securityConfiguration {
            try encodeContainer.encode(securityConfiguration, forKey: .securityConfiguration)
        }
        if let startedOn = self.startedOn {
            try encodeContainer.encode(startedOn.timeIntervalSince1970, forKey: .startedOn)
        }
        if let timeout = self.timeout {
            try encodeContainer.encode(timeout, forKey: .timeout)
        }
        if let triggerName = self.triggerName {
            try encodeContainer.encode(triggerName, forKey: .triggerName)
        }
        if let workerType = self.workerType {
            try encodeContainer.encode(workerType.rawValue, forKey: .workerType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let attemptDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .attempt) ?? 0
        attempt = attemptDecoded
        let previousRunIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .previousRunId)
        previousRunId = previousRunIdDecoded
        let triggerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .triggerName)
        triggerName = triggerNameDecoded
        let jobNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobName)
        jobName = jobNameDecoded
        let startedOnDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .startedOn)
        startedOn = startedOnDecoded
        let lastModifiedOnDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedOn)
        lastModifiedOn = lastModifiedOnDecoded
        let completedOnDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .completedOn)
        completedOn = completedOnDecoded
        let jobRunStateDecoded = try containerValues.decodeIfPresent(GlueClientTypes.JobRunState.self, forKey: .jobRunState)
        jobRunState = jobRunStateDecoded
        let argumentsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .arguments)
        var argumentsDecoded0: [Swift.String:Swift.String]? = nil
        if let argumentsContainer = argumentsContainer {
            argumentsDecoded0 = [Swift.String:Swift.String]()
            for (key0, genericstring0) in argumentsContainer {
                if let genericstring0 = genericstring0 {
                    argumentsDecoded0?[key0] = genericstring0
                }
            }
        }
        arguments = argumentsDecoded0
        let errorMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .errorMessage)
        errorMessage = errorMessageDecoded
        let predecessorRunsContainer = try containerValues.decodeIfPresent([GlueClientTypes.Predecessor?].self, forKey: .predecessorRuns)
        var predecessorRunsDecoded0:[GlueClientTypes.Predecessor]? = nil
        if let predecessorRunsContainer = predecessorRunsContainer {
            predecessorRunsDecoded0 = [GlueClientTypes.Predecessor]()
            for structure0 in predecessorRunsContainer {
                if let structure0 = structure0 {
                    predecessorRunsDecoded0?.append(structure0)
                }
            }
        }
        predecessorRuns = predecessorRunsDecoded0
        let allocatedCapacityDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .allocatedCapacity) ?? 0
        allocatedCapacity = allocatedCapacityDecoded
        let executionTimeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .executionTime) ?? 0
        executionTime = executionTimeDecoded
        let timeoutDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .timeout)
        timeout = timeoutDecoded
        let maxCapacityDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .maxCapacity)
        maxCapacity = maxCapacityDecoded
        let workerTypeDecoded = try containerValues.decodeIfPresent(GlueClientTypes.WorkerType.self, forKey: .workerType)
        workerType = workerTypeDecoded
        let numberOfWorkersDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .numberOfWorkers)
        numberOfWorkers = numberOfWorkersDecoded
        let securityConfigurationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .securityConfiguration)
        securityConfiguration = securityConfigurationDecoded
        let logGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logGroupName)
        logGroupName = logGroupNameDecoded
        let notificationPropertyDecoded = try containerValues.decodeIfPresent(GlueClientTypes.NotificationProperty.self, forKey: .notificationProperty)
        notificationProperty = notificationPropertyDecoded
        let glueVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .glueVersion)
        glueVersion = glueVersionDecoded
        let dPUSecondsDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .dPUSeconds)
        dPUSeconds = dPUSecondsDecoded
        let executionClassDecoded = try containerValues.decodeIfPresent(GlueClientTypes.ExecutionClass.self, forKey: .executionClass)
        executionClass = executionClassDecoded
    }
}
