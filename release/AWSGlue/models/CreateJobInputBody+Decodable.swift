// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateJobInputBody: Swift.Equatable {
    let name: Swift.String?
    let description: Swift.String?
    let logUri: Swift.String?
    let role: Swift.String?
    let executionProperty: GlueClientTypes.ExecutionProperty?
    let command: GlueClientTypes.JobCommand?
    let defaultArguments: [Swift.String:Swift.String]?
    let nonOverridableArguments: [Swift.String:Swift.String]?
    let connections: GlueClientTypes.ConnectionsList?
    let maxRetries: Swift.Int
    let allocatedCapacity: Swift.Int
    let timeout: Swift.Int?
    let maxCapacity: Swift.Double?
    let securityConfiguration: Swift.String?
    let tags: [Swift.String:Swift.String]?
    let notificationProperty: GlueClientTypes.NotificationProperty?
    let glueVersion: Swift.String?
    let numberOfWorkers: Swift.Int?
    let workerType: GlueClientTypes.WorkerType?
    let codeGenConfigurationNodes: [Swift.String:GlueClientTypes.CodeGenConfigurationNode]?
    let executionClass: GlueClientTypes.ExecutionClass?
}

extension CreateJobInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case allocatedCapacity = "AllocatedCapacity"
        case codeGenConfigurationNodes = "CodeGenConfigurationNodes"
        case command = "Command"
        case connections = "Connections"
        case defaultArguments = "DefaultArguments"
        case description = "Description"
        case executionClass = "ExecutionClass"
        case executionProperty = "ExecutionProperty"
        case glueVersion = "GlueVersion"
        case logUri = "LogUri"
        case maxCapacity = "MaxCapacity"
        case maxRetries = "MaxRetries"
        case name = "Name"
        case nonOverridableArguments = "NonOverridableArguments"
        case notificationProperty = "NotificationProperty"
        case numberOfWorkers = "NumberOfWorkers"
        case role = "Role"
        case securityConfiguration = "SecurityConfiguration"
        case tags = "Tags"
        case timeout = "Timeout"
        case workerType = "WorkerType"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let logUriDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logUri)
        logUri = logUriDecoded
        let roleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .role)
        role = roleDecoded
        let executionPropertyDecoded = try containerValues.decodeIfPresent(GlueClientTypes.ExecutionProperty.self, forKey: .executionProperty)
        executionProperty = executionPropertyDecoded
        let commandDecoded = try containerValues.decodeIfPresent(GlueClientTypes.JobCommand.self, forKey: .command)
        command = commandDecoded
        let defaultArgumentsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .defaultArguments)
        var defaultArgumentsDecoded0: [Swift.String:Swift.String]? = nil
        if let defaultArgumentsContainer = defaultArgumentsContainer {
            defaultArgumentsDecoded0 = [Swift.String:Swift.String]()
            for (key0, genericstring0) in defaultArgumentsContainer {
                if let genericstring0 = genericstring0 {
                    defaultArgumentsDecoded0?[key0] = genericstring0
                }
            }
        }
        defaultArguments = defaultArgumentsDecoded0
        let nonOverridableArgumentsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .nonOverridableArguments)
        var nonOverridableArgumentsDecoded0: [Swift.String:Swift.String]? = nil
        if let nonOverridableArgumentsContainer = nonOverridableArgumentsContainer {
            nonOverridableArgumentsDecoded0 = [Swift.String:Swift.String]()
            for (key0, genericstring0) in nonOverridableArgumentsContainer {
                if let genericstring0 = genericstring0 {
                    nonOverridableArgumentsDecoded0?[key0] = genericstring0
                }
            }
        }
        nonOverridableArguments = nonOverridableArgumentsDecoded0
        let connectionsDecoded = try containerValues.decodeIfPresent(GlueClientTypes.ConnectionsList.self, forKey: .connections)
        connections = connectionsDecoded
        let maxRetriesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxRetries) ?? 0
        maxRetries = maxRetriesDecoded
        let allocatedCapacityDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .allocatedCapacity) ?? 0
        allocatedCapacity = allocatedCapacityDecoded
        let timeoutDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .timeout)
        timeout = timeoutDecoded
        let maxCapacityDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .maxCapacity)
        maxCapacity = maxCapacityDecoded
        let securityConfigurationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .securityConfiguration)
        securityConfiguration = securityConfigurationDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
        let notificationPropertyDecoded = try containerValues.decodeIfPresent(GlueClientTypes.NotificationProperty.self, forKey: .notificationProperty)
        notificationProperty = notificationPropertyDecoded
        let glueVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .glueVersion)
        glueVersion = glueVersionDecoded
        let numberOfWorkersDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .numberOfWorkers)
        numberOfWorkers = numberOfWorkersDecoded
        let workerTypeDecoded = try containerValues.decodeIfPresent(GlueClientTypes.WorkerType.self, forKey: .workerType)
        workerType = workerTypeDecoded
        let codeGenConfigurationNodesContainer = try containerValues.decodeIfPresent([Swift.String: GlueClientTypes.CodeGenConfigurationNode?].self, forKey: .codeGenConfigurationNodes)
        var codeGenConfigurationNodesDecoded0: [Swift.String:GlueClientTypes.CodeGenConfigurationNode]? = nil
        if let codeGenConfigurationNodesContainer = codeGenConfigurationNodesContainer {
            codeGenConfigurationNodesDecoded0 = [Swift.String:GlueClientTypes.CodeGenConfigurationNode]()
            for (key0, codegenconfigurationnode0) in codeGenConfigurationNodesContainer {
                if let codegenconfigurationnode0 = codegenconfigurationnode0 {
                    codeGenConfigurationNodesDecoded0?[key0] = codegenconfigurationnode0
                }
            }
        }
        codeGenConfigurationNodes = codeGenConfigurationNodesDecoded0
        let executionClassDecoded = try containerValues.decodeIfPresent(GlueClientTypes.ExecutionClass.self, forKey: .executionClass)
        executionClass = executionClassDecoded
    }
}
