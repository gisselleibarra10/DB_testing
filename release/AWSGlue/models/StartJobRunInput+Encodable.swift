// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension StartJobRunInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case allocatedCapacity = "AllocatedCapacity"
        case arguments = "Arguments"
        case executionClass = "ExecutionClass"
        case jobName = "JobName"
        case jobRunId = "JobRunId"
        case maxCapacity = "MaxCapacity"
        case notificationProperty = "NotificationProperty"
        case numberOfWorkers = "NumberOfWorkers"
        case securityConfiguration = "SecurityConfiguration"
        case timeout = "Timeout"
        case workerType = "WorkerType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if allocatedCapacity != 0 {
            try encodeContainer.encode(allocatedCapacity, forKey: .allocatedCapacity)
        }
        if let arguments = arguments {
            var argumentsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .arguments)
            for (dictKey0, genericmap0) in arguments {
                try argumentsContainer.encode(genericmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let executionClass = self.executionClass {
            try encodeContainer.encode(executionClass.rawValue, forKey: .executionClass)
        }
        if let jobName = self.jobName {
            try encodeContainer.encode(jobName, forKey: .jobName)
        }
        if let jobRunId = self.jobRunId {
            try encodeContainer.encode(jobRunId, forKey: .jobRunId)
        }
        if let maxCapacity = self.maxCapacity {
            try encodeContainer.encode(maxCapacity, forKey: .maxCapacity)
        }
        if let notificationProperty = self.notificationProperty {
            try encodeContainer.encode(notificationProperty, forKey: .notificationProperty)
        }
        if let numberOfWorkers = self.numberOfWorkers {
            try encodeContainer.encode(numberOfWorkers, forKey: .numberOfWorkers)
        }
        if let securityConfiguration = self.securityConfiguration {
            try encodeContainer.encode(securityConfiguration, forKey: .securityConfiguration)
        }
        if let timeout = self.timeout {
            try encodeContainer.encode(timeout, forKey: .timeout)
        }
        if let workerType = self.workerType {
            try encodeContainer.encode(workerType.rawValue, forKey: .workerType)
        }
    }
}
