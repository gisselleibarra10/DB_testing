// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension GlueClientTypes.CodeGenNode: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case args = "Args"
        case id = "Id"
        case lineNumber = "LineNumber"
        case nodeType = "NodeType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let args = args {
            var argsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .args)
            for codegennodeargs0 in args {
                try argsContainer.encode(codegennodeargs0)
            }
        }
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if lineNumber != 0 {
            try encodeContainer.encode(lineNumber, forKey: .lineNumber)
        }
        if let nodeType = self.nodeType {
            try encodeContainer.encode(nodeType, forKey: .nodeType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let nodeTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nodeType)
        nodeType = nodeTypeDecoded
        let argsContainer = try containerValues.decodeIfPresent([GlueClientTypes.CodeGenNodeArg?].self, forKey: .args)
        var argsDecoded0:[GlueClientTypes.CodeGenNodeArg]? = nil
        if let argsContainer = argsContainer {
            argsDecoded0 = [GlueClientTypes.CodeGenNodeArg]()
            for structure0 in argsContainer {
                if let structure0 = structure0 {
                    argsDecoded0?.append(structure0)
                }
            }
        }
        args = argsDecoded0
        let lineNumberDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .lineNumber) ?? 0
        lineNumber = lineNumberDecoded
    }
}
