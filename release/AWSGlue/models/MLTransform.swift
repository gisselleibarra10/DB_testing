// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension GlueClientTypes {
    /// A structure for a machine learning transform.
    public struct MLTransform: Swift.Equatable {
        /// A timestamp. The time and date that this machine learning transform was created.
        public var createdOn: ClientRuntime.Date?
        /// A user-defined, long-form description text for the machine learning transform. Descriptions are not guaranteed to be unique and can be changed at any time.
        public var description: Swift.String?
        /// An EvaluationMetrics object. Evaluation metrics provide an estimate of the quality of your machine learning transform.
        public var evaluationMetrics: GlueClientTypes.EvaluationMetrics?
        /// This value determines which version of Glue this machine learning transform is compatible with. Glue 1.0 is recommended for most customers. If the value is not set, the Glue compatibility defaults to Glue 0.9. For more information, see [Glue Versions](https://docs.aws.amazon.com/glue/latest/dg/release-notes.html#release-notes-versions) in the developer guide.
        public var glueVersion: Swift.String?
        /// A list of Glue table definitions used by the transform.
        public var inputRecordTables: [GlueClientTypes.GlueTable]?
        /// A count identifier for the labeling files generated by Glue for this transform. As you create a better transform, you can iteratively download, label, and upload the labeling file.
        public var labelCount: Swift.Int
        /// A timestamp. The last point in time when this machine learning transform was modified.
        public var lastModifiedOn: ClientRuntime.Date?
        /// The number of Glue data processing units (DPUs) that are allocated to task runs for this transform. You can allocate from 2 to 100 DPUs; the default is 10. A DPU is a relative measure of processing power that consists of 4 vCPUs of compute capacity and 16 GB of memory. For more information, see the [Glue pricing page](http://aws.amazon.com/glue/pricing/). MaxCapacity is a mutually exclusive option with NumberOfWorkers and WorkerType.
        ///
        /// * If either NumberOfWorkers or WorkerType is set, then MaxCapacity cannot be set.
        ///
        /// * If MaxCapacity is set then neither NumberOfWorkers or WorkerType can be set.
        ///
        /// * If WorkerType is set, then NumberOfWorkers is required (and vice versa).
        ///
        /// * MaxCapacity and NumberOfWorkers must both be at least 1.
        ///
        ///
        /// When the WorkerType field is set to a value other than Standard, the MaxCapacity field is set automatically and becomes read-only.
        public var maxCapacity: Swift.Double?
        /// The maximum number of times to retry after an MLTaskRun of the machine learning transform fails.
        public var maxRetries: Swift.Int?
        /// A user-defined name for the machine learning transform. Names are not guaranteed unique and can be changed at any time.
        public var name: Swift.String?
        /// The number of workers of a defined workerType that are allocated when a task of the transform runs. If WorkerType is set, then NumberOfWorkers is required (and vice versa).
        public var numberOfWorkers: Swift.Int?
        /// A TransformParameters object. You can use parameters to tune (customize) the behavior of the machine learning transform by specifying what data it learns from and your preference on various tradeoffs (such as precious vs. recall, or accuracy vs. cost).
        public var parameters: GlueClientTypes.TransformParameters?
        /// The name or Amazon Resource Name (ARN) of the IAM role with the required permissions. The required permissions include both Glue service role permissions to Glue resources, and Amazon S3 permissions required by the transform.
        ///
        /// * This role needs Glue service role permissions to allow access to resources in Glue. See [Attach a Policy to IAM Users That Access Glue](https://docs.aws.amazon.com/glue/latest/dg/attach-policy-iam-user.html).
        ///
        /// * This role needs permission to your Amazon Simple Storage Service (Amazon S3) sources, targets, temporary directory, scripts, and any libraries used by the task run for this transform.
        public var role: Swift.String?
        /// A map of key-value pairs representing the columns and data types that this transform can run against. Has an upper bound of 100 columns.
        public var schema: [GlueClientTypes.SchemaColumn]?
        /// The current status of the machine learning transform.
        public var status: GlueClientTypes.TransformStatusType?
        /// The timeout in minutes of the machine learning transform.
        public var timeout: Swift.Int?
        /// The encryption-at-rest settings of the transform that apply to accessing user data. Machine learning transforms can access user data encrypted in Amazon S3 using KMS.
        public var transformEncryption: GlueClientTypes.TransformEncryption?
        /// The unique transform ID that is generated for the machine learning transform. The ID is guaranteed to be unique and does not change.
        public var transformId: Swift.String?
        /// The type of predefined worker that is allocated when a task of this transform runs. Accepts a value of Standard, G.1X, or G.2X.
        ///
        /// * For the Standard worker type, each worker provides 4 vCPU, 16 GB of memory and a 50GB disk, and 2 executors per worker.
        ///
        /// * For the G.1X worker type, each worker provides 4 vCPU, 16 GB of memory and a 64GB disk, and 1 executor per worker.
        ///
        /// * For the G.2X worker type, each worker provides 8 vCPU, 32 GB of memory and a 128GB disk, and 1 executor per worker.
        ///
        ///
        /// MaxCapacity is a mutually exclusive option with NumberOfWorkers and WorkerType.
        ///
        /// * If either NumberOfWorkers or WorkerType is set, then MaxCapacity cannot be set.
        ///
        /// * If MaxCapacity is set then neither NumberOfWorkers or WorkerType can be set.
        ///
        /// * If WorkerType is set, then NumberOfWorkers is required (and vice versa).
        ///
        /// * MaxCapacity and NumberOfWorkers must both be at least 1.
        public var workerType: GlueClientTypes.WorkerType?

        public init (
            createdOn: ClientRuntime.Date? = nil,
            description: Swift.String? = nil,
            evaluationMetrics: GlueClientTypes.EvaluationMetrics? = nil,
            glueVersion: Swift.String? = nil,
            inputRecordTables: [GlueClientTypes.GlueTable]? = nil,
            labelCount: Swift.Int = 0,
            lastModifiedOn: ClientRuntime.Date? = nil,
            maxCapacity: Swift.Double? = nil,
            maxRetries: Swift.Int? = nil,
            name: Swift.String? = nil,
            numberOfWorkers: Swift.Int? = nil,
            parameters: GlueClientTypes.TransformParameters? = nil,
            role: Swift.String? = nil,
            schema: [GlueClientTypes.SchemaColumn]? = nil,
            status: GlueClientTypes.TransformStatusType? = nil,
            timeout: Swift.Int? = nil,
            transformEncryption: GlueClientTypes.TransformEncryption? = nil,
            transformId: Swift.String? = nil,
            workerType: GlueClientTypes.WorkerType? = nil
        )
        {
            self.createdOn = createdOn
            self.description = description
            self.evaluationMetrics = evaluationMetrics
            self.glueVersion = glueVersion
            self.inputRecordTables = inputRecordTables
            self.labelCount = labelCount
            self.lastModifiedOn = lastModifiedOn
            self.maxCapacity = maxCapacity
            self.maxRetries = maxRetries
            self.name = name
            self.numberOfWorkers = numberOfWorkers
            self.parameters = parameters
            self.role = role
            self.schema = schema
            self.status = status
            self.timeout = timeout
            self.transformEncryption = transformEncryption
            self.transformId = transformId
            self.workerType = workerType
        }
    }

}
