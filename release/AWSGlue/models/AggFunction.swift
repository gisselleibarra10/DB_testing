// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension GlueClientTypes {
    public enum AggFunction: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case avg
        case count
        case countdistinct
        case first
        case kurtosis
        case last
        case max
        case min
        case skewness
        case stddevPop
        case stddevSamp
        case sum
        case sumdistinct
        case varPop
        case varSamp
        case sdkUnknown(Swift.String)

        public static var allCases: [AggFunction] {
            return [
                .avg,
                .count,
                .countdistinct,
                .first,
                .kurtosis,
                .last,
                .max,
                .min,
                .skewness,
                .stddevPop,
                .stddevSamp,
                .sum,
                .sumdistinct,
                .varPop,
                .varSamp,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .avg: return "avg"
            case .count: return "count"
            case .countdistinct: return "countDistinct"
            case .first: return "first"
            case .kurtosis: return "kurtosis"
            case .last: return "last"
            case .max: return "max"
            case .min: return "min"
            case .skewness: return "skewness"
            case .stddevPop: return "stddev_pop"
            case .stddevSamp: return "stddev_samp"
            case .sum: return "sum"
            case .sumdistinct: return "sumDistinct"
            case .varPop: return "var_pop"
            case .varSamp: return "var_samp"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = AggFunction(rawValue: rawValue) ?? AggFunction.sdkUnknown(rawValue)
        }
    }
}
