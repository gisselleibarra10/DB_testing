// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension GlueClientTypes.Statement: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case code = "Code"
        case completedOn = "CompletedOn"
        case id = "Id"
        case output = "Output"
        case progress = "Progress"
        case startedOn = "StartedOn"
        case state = "State"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let code = self.code {
            try encodeContainer.encode(code, forKey: .code)
        }
        if completedOn != 0 {
            try encodeContainer.encode(completedOn, forKey: .completedOn)
        }
        if id != 0 {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let output = self.output {
            try encodeContainer.encode(output, forKey: .output)
        }
        if progress != 0.0 {
            try encodeContainer.encode(progress, forKey: .progress)
        }
        if startedOn != 0 {
            try encodeContainer.encode(startedOn, forKey: .startedOn)
        }
        if let state = self.state {
            try encodeContainer.encode(state.rawValue, forKey: .state)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .id) ?? 0
        id = idDecoded
        let codeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .code)
        code = codeDecoded
        let stateDecoded = try containerValues.decodeIfPresent(GlueClientTypes.StatementState.self, forKey: .state)
        state = stateDecoded
        let outputDecoded = try containerValues.decodeIfPresent(GlueClientTypes.StatementOutput.self, forKey: .output)
        output = outputDecoded
        let progressDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .progress) ?? 0.0
        progress = progressDecoded
        let startedOnDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .startedOn) ?? 0
        startedOn = startedOnDecoded
        let completedOnDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .completedOn) ?? 0
        completedOn = completedOnDecoded
    }
}
