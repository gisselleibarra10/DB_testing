// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension GlueClientTypes.FindMatchesMetrics: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case areaUnderPRCurve = "AreaUnderPRCurve"
        case columnImportances = "ColumnImportances"
        case confusionMatrix = "ConfusionMatrix"
        case f1 = "F1"
        case precision = "Precision"
        case recall = "Recall"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let areaUnderPRCurve = self.areaUnderPRCurve {
            try encodeContainer.encode(areaUnderPRCurve, forKey: .areaUnderPRCurve)
        }
        if let columnImportances = columnImportances {
            var columnImportancesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .columnImportances)
            for columnimportancelist0 in columnImportances {
                try columnImportancesContainer.encode(columnimportancelist0)
            }
        }
        if let confusionMatrix = self.confusionMatrix {
            try encodeContainer.encode(confusionMatrix, forKey: .confusionMatrix)
        }
        if let f1 = self.f1 {
            try encodeContainer.encode(f1, forKey: .f1)
        }
        if let precision = self.precision {
            try encodeContainer.encode(precision, forKey: .precision)
        }
        if let recall = self.recall {
            try encodeContainer.encode(recall, forKey: .recall)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let areaUnderPRCurveDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .areaUnderPRCurve)
        areaUnderPRCurve = areaUnderPRCurveDecoded
        let precisionDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .precision)
        precision = precisionDecoded
        let recallDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .recall)
        recall = recallDecoded
        let f1Decoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .f1)
        f1 = f1Decoded
        let confusionMatrixDecoded = try containerValues.decodeIfPresent(GlueClientTypes.ConfusionMatrix.self, forKey: .confusionMatrix)
        confusionMatrix = confusionMatrixDecoded
        let columnImportancesContainer = try containerValues.decodeIfPresent([GlueClientTypes.ColumnImportance?].self, forKey: .columnImportances)
        var columnImportancesDecoded0:[GlueClientTypes.ColumnImportance]? = nil
        if let columnImportancesContainer = columnImportancesContainer {
            columnImportancesDecoded0 = [GlueClientTypes.ColumnImportance]()
            for structure0 in columnImportancesContainer {
                if let structure0 = structure0 {
                    columnImportancesDecoded0?.append(structure0)
                }
            }
        }
        columnImportances = columnImportancesDecoded0
    }
}
