// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateTriggerInputBody: Swift.Equatable {
    let name: Swift.String?
    let workflowName: Swift.String?
    let type: GlueClientTypes.TriggerType?
    let schedule: Swift.String?
    let predicate: GlueClientTypes.Predicate?
    let actions: [GlueClientTypes.Action]?
    let description: Swift.String?
    let startOnCreation: Swift.Bool
    let tags: [Swift.String:Swift.String]?
    let eventBatchingCondition: GlueClientTypes.EventBatchingCondition?
}

extension CreateTriggerInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case actions = "Actions"
        case description = "Description"
        case eventBatchingCondition = "EventBatchingCondition"
        case name = "Name"
        case predicate = "Predicate"
        case schedule = "Schedule"
        case startOnCreation = "StartOnCreation"
        case tags = "Tags"
        case type = "Type"
        case workflowName = "WorkflowName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let workflowNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .workflowName)
        workflowName = workflowNameDecoded
        let typeDecoded = try containerValues.decodeIfPresent(GlueClientTypes.TriggerType.self, forKey: .type)
        type = typeDecoded
        let scheduleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .schedule)
        schedule = scheduleDecoded
        let predicateDecoded = try containerValues.decodeIfPresent(GlueClientTypes.Predicate.self, forKey: .predicate)
        predicate = predicateDecoded
        let actionsContainer = try containerValues.decodeIfPresent([GlueClientTypes.Action?].self, forKey: .actions)
        var actionsDecoded0:[GlueClientTypes.Action]? = nil
        if let actionsContainer = actionsContainer {
            actionsDecoded0 = [GlueClientTypes.Action]()
            for structure0 in actionsContainer {
                if let structure0 = structure0 {
                    actionsDecoded0?.append(structure0)
                }
            }
        }
        actions = actionsDecoded0
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let startOnCreationDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .startOnCreation) ?? false
        startOnCreation = startOnCreationDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
        let eventBatchingConditionDecoded = try containerValues.decodeIfPresent(GlueClientTypes.EventBatchingCondition.self, forKey: .eventBatchingCondition)
        eventBatchingCondition = eventBatchingConditionDecoded
    }
}
