// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension GlueClientTypes.LongColumnStatisticsData: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maximumValue = "MaximumValue"
        case minimumValue = "MinimumValue"
        case numberOfDistinctValues = "NumberOfDistinctValues"
        case numberOfNulls = "NumberOfNulls"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if maximumValue != 0 {
            try encodeContainer.encode(maximumValue, forKey: .maximumValue)
        }
        if minimumValue != 0 {
            try encodeContainer.encode(minimumValue, forKey: .minimumValue)
        }
        if numberOfDistinctValues != 0 {
            try encodeContainer.encode(numberOfDistinctValues, forKey: .numberOfDistinctValues)
        }
        if numberOfNulls != 0 {
            try encodeContainer.encode(numberOfNulls, forKey: .numberOfNulls)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let minimumValueDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .minimumValue) ?? 0
        minimumValue = minimumValueDecoded
        let maximumValueDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maximumValue) ?? 0
        maximumValue = maximumValueDecoded
        let numberOfNullsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .numberOfNulls) ?? 0
        numberOfNulls = numberOfNullsDecoded
        let numberOfDistinctValuesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .numberOfDistinctValues) ?? 0
        numberOfDistinctValues = numberOfDistinctValuesDecoded
    }
}
