// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct UpdatePartitionInputBody: Swift.Equatable {
    let catalogId: Swift.String?
    let databaseName: Swift.String?
    let tableName: Swift.String?
    let partitionValueList: [Swift.String]?
    let partitionInput: GlueClientTypes.PartitionInput?
}

extension UpdatePartitionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case catalogId = "CatalogId"
        case databaseName = "DatabaseName"
        case partitionInput = "PartitionInput"
        case partitionValueList = "PartitionValueList"
        case tableName = "TableName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let catalogIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .catalogId)
        catalogId = catalogIdDecoded
        let databaseNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .databaseName)
        databaseName = databaseNameDecoded
        let tableNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tableName)
        tableName = tableNameDecoded
        let partitionValueListContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .partitionValueList)
        var partitionValueListDecoded0:[Swift.String]? = nil
        if let partitionValueListContainer = partitionValueListContainer {
            partitionValueListDecoded0 = [Swift.String]()
            for string0 in partitionValueListContainer {
                if let string0 = string0 {
                    partitionValueListDecoded0?.append(string0)
                }
            }
        }
        partitionValueList = partitionValueListDecoded0
        let partitionInputDecoded = try containerValues.decodeIfPresent(GlueClientTypes.PartitionInput.self, forKey: .partitionInput)
        partitionInput = partitionInputDecoded
    }
}
