// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct BatchDeletePartitionInputBody: Swift.Equatable {
    let catalogId: Swift.String?
    let databaseName: Swift.String?
    let tableName: Swift.String?
    let partitionsToDelete: [GlueClientTypes.PartitionValueList]?
}

extension BatchDeletePartitionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case catalogId = "CatalogId"
        case databaseName = "DatabaseName"
        case partitionsToDelete = "PartitionsToDelete"
        case tableName = "TableName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let catalogIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .catalogId)
        catalogId = catalogIdDecoded
        let databaseNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .databaseName)
        databaseName = databaseNameDecoded
        let tableNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tableName)
        tableName = tableNameDecoded
        let partitionsToDeleteContainer = try containerValues.decodeIfPresent([GlueClientTypes.PartitionValueList?].self, forKey: .partitionsToDelete)
        var partitionsToDeleteDecoded0:[GlueClientTypes.PartitionValueList]? = nil
        if let partitionsToDeleteContainer = partitionsToDeleteContainer {
            partitionsToDeleteDecoded0 = [GlueClientTypes.PartitionValueList]()
            for structure0 in partitionsToDeleteContainer {
                if let structure0 = structure0 {
                    partitionsToDeleteDecoded0?.append(structure0)
                }
            }
        }
        partitionsToDelete = partitionsToDeleteDecoded0
    }
}
