// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetUnfilteredPartitionsMetadataInputBody: Swift.Equatable {
    let catalogId: Swift.String?
    let databaseName: Swift.String?
    let tableName: Swift.String?
    let expression: Swift.String?
    let auditContext: GlueClientTypes.AuditContext?
    let supportedPermissionTypes: [GlueClientTypes.PermissionType]?
    let nextToken: Swift.String?
    let segment: GlueClientTypes.Segment?
    let maxResults: Swift.Int?
}

extension GetUnfilteredPartitionsMetadataInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case auditContext = "AuditContext"
        case catalogId = "CatalogId"
        case databaseName = "DatabaseName"
        case expression = "Expression"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case segment = "Segment"
        case supportedPermissionTypes = "SupportedPermissionTypes"
        case tableName = "TableName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let catalogIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .catalogId)
        catalogId = catalogIdDecoded
        let databaseNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .databaseName)
        databaseName = databaseNameDecoded
        let tableNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tableName)
        tableName = tableNameDecoded
        let expressionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .expression)
        expression = expressionDecoded
        let auditContextDecoded = try containerValues.decodeIfPresent(GlueClientTypes.AuditContext.self, forKey: .auditContext)
        auditContext = auditContextDecoded
        let supportedPermissionTypesContainer = try containerValues.decodeIfPresent([GlueClientTypes.PermissionType?].self, forKey: .supportedPermissionTypes)
        var supportedPermissionTypesDecoded0:[GlueClientTypes.PermissionType]? = nil
        if let supportedPermissionTypesContainer = supportedPermissionTypesContainer {
            supportedPermissionTypesDecoded0 = [GlueClientTypes.PermissionType]()
            for enum0 in supportedPermissionTypesContainer {
                if let enum0 = enum0 {
                    supportedPermissionTypesDecoded0?.append(enum0)
                }
            }
        }
        supportedPermissionTypes = supportedPermissionTypesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let segmentDecoded = try containerValues.decodeIfPresent(GlueClientTypes.Segment.self, forKey: .segment)
        segment = segmentDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
    }
}
