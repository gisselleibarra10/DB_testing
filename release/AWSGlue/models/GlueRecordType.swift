// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension GlueClientTypes {
    public enum GlueRecordType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case bigdecimal
        case byte
        case date
        case double
        case float
        case int
        case long
        case short
        case string
        case timestamp
        case sdkUnknown(Swift.String)

        public static var allCases: [GlueRecordType] {
            return [
                .bigdecimal,
                .byte,
                .date,
                .double,
                .float,
                .int,
                .long,
                .short,
                .string,
                .timestamp,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .bigdecimal: return "BIGDECIMAL"
            case .byte: return "BYTE"
            case .date: return "DATE"
            case .double: return "DOUBLE"
            case .float: return "FLOAT"
            case .int: return "INT"
            case .long: return "LONG"
            case .short: return "SHORT"
            case .string: return "STRING"
            case .timestamp: return "TIMESTAMP"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = GlueRecordType(rawValue: rawValue) ?? GlueRecordType.sdkUnknown(rawValue)
        }
    }
}
