// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension GlueClientTypes.CustomCode: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case className = "ClassName"
        case code = "Code"
        case inputs = "Inputs"
        case name = "Name"
        case outputSchemas = "OutputSchemas"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let className = self.className {
            try encodeContainer.encode(className, forKey: .className)
        }
        if let code = self.code {
            try encodeContainer.encode(code, forKey: .code)
        }
        if let inputs = inputs {
            var inputsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .inputs)
            for manyinputs0 in inputs {
                try inputsContainer.encode(manyinputs0)
            }
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let outputSchemas = outputSchemas {
            var outputSchemasContainer = encodeContainer.nestedUnkeyedContainer(forKey: .outputSchemas)
            for glueschemas0 in outputSchemas {
                try outputSchemasContainer.encode(glueschemas0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let inputsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .inputs)
        var inputsDecoded0:[Swift.String]? = nil
        if let inputsContainer = inputsContainer {
            inputsDecoded0 = [Swift.String]()
            for string0 in inputsContainer {
                if let string0 = string0 {
                    inputsDecoded0?.append(string0)
                }
            }
        }
        inputs = inputsDecoded0
        let codeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .code)
        code = codeDecoded
        let classNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .className)
        className = classNameDecoded
        let outputSchemasContainer = try containerValues.decodeIfPresent([GlueClientTypes.GlueSchema?].self, forKey: .outputSchemas)
        var outputSchemasDecoded0:[GlueClientTypes.GlueSchema]? = nil
        if let outputSchemasContainer = outputSchemasContainer {
            outputSchemasDecoded0 = [GlueClientTypes.GlueSchema]()
            for structure0 in outputSchemasContainer {
                if let structure0 = structure0 {
                    outputSchemasDecoded0?.append(structure0)
                }
            }
        }
        outputSchemas = outputSchemasDecoded0
    }
}
