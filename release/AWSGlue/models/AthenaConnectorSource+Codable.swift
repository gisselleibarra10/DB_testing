// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension GlueClientTypes.AthenaConnectorSource: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case connectionName = "ConnectionName"
        case connectionTable = "ConnectionTable"
        case connectionType = "ConnectionType"
        case connectorName = "ConnectorName"
        case name = "Name"
        case outputSchemas = "OutputSchemas"
        case schemaName = "SchemaName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let connectionName = self.connectionName {
            try encodeContainer.encode(connectionName, forKey: .connectionName)
        }
        if let connectionTable = self.connectionTable {
            try encodeContainer.encode(connectionTable, forKey: .connectionTable)
        }
        if let connectionType = self.connectionType {
            try encodeContainer.encode(connectionType, forKey: .connectionType)
        }
        if let connectorName = self.connectorName {
            try encodeContainer.encode(connectorName, forKey: .connectorName)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let outputSchemas = outputSchemas {
            var outputSchemasContainer = encodeContainer.nestedUnkeyedContainer(forKey: .outputSchemas)
            for glueschemas0 in outputSchemas {
                try outputSchemasContainer.encode(glueschemas0)
            }
        }
        if let schemaName = self.schemaName {
            try encodeContainer.encode(schemaName, forKey: .schemaName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let connectionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .connectionName)
        connectionName = connectionNameDecoded
        let connectorNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .connectorName)
        connectorName = connectorNameDecoded
        let connectionTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .connectionType)
        connectionType = connectionTypeDecoded
        let connectionTableDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .connectionTable)
        connectionTable = connectionTableDecoded
        let schemaNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .schemaName)
        schemaName = schemaNameDecoded
        let outputSchemasContainer = try containerValues.decodeIfPresent([GlueClientTypes.GlueSchema?].self, forKey: .outputSchemas)
        var outputSchemasDecoded0:[GlueClientTypes.GlueSchema]? = nil
        if let outputSchemasContainer = outputSchemasContainer {
            outputSchemasDecoded0 = [GlueClientTypes.GlueSchema]()
            for structure0 in outputSchemasContainer {
                if let structure0 = structure0 {
                    outputSchemasDecoded0?.append(structure0)
                }
            }
        }
        outputSchemas = outputSchemasDecoded0
    }
}
