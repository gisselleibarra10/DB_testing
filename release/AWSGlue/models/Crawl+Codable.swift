// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension GlueClientTypes.Crawl: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case completedOn = "CompletedOn"
        case errorMessage = "ErrorMessage"
        case logGroup = "LogGroup"
        case logStream = "LogStream"
        case startedOn = "StartedOn"
        case state = "State"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let completedOn = self.completedOn {
            try encodeContainer.encode(completedOn.timeIntervalSince1970, forKey: .completedOn)
        }
        if let errorMessage = self.errorMessage {
            try encodeContainer.encode(errorMessage, forKey: .errorMessage)
        }
        if let logGroup = self.logGroup {
            try encodeContainer.encode(logGroup, forKey: .logGroup)
        }
        if let logStream = self.logStream {
            try encodeContainer.encode(logStream, forKey: .logStream)
        }
        if let startedOn = self.startedOn {
            try encodeContainer.encode(startedOn.timeIntervalSince1970, forKey: .startedOn)
        }
        if let state = self.state {
            try encodeContainer.encode(state.rawValue, forKey: .state)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let stateDecoded = try containerValues.decodeIfPresent(GlueClientTypes.CrawlState.self, forKey: .state)
        state = stateDecoded
        let startedOnDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .startedOn)
        startedOn = startedOnDecoded
        let completedOnDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .completedOn)
        completedOn = completedOnDecoded
        let errorMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .errorMessage)
        errorMessage = errorMessageDecoded
        let logGroupDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logGroup)
        logGroup = logGroupDecoded
        let logStreamDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logStream)
        logStream = logStreamDecoded
    }
}
