// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension GlueClientTypes.UserDefinedFunction: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case catalogId = "CatalogId"
        case className = "ClassName"
        case createTime = "CreateTime"
        case databaseName = "DatabaseName"
        case functionName = "FunctionName"
        case ownerName = "OwnerName"
        case ownerType = "OwnerType"
        case resourceUris = "ResourceUris"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let catalogId = self.catalogId {
            try encodeContainer.encode(catalogId, forKey: .catalogId)
        }
        if let className = self.className {
            try encodeContainer.encode(className, forKey: .className)
        }
        if let createTime = self.createTime {
            try encodeContainer.encode(createTime.timeIntervalSince1970, forKey: .createTime)
        }
        if let databaseName = self.databaseName {
            try encodeContainer.encode(databaseName, forKey: .databaseName)
        }
        if let functionName = self.functionName {
            try encodeContainer.encode(functionName, forKey: .functionName)
        }
        if let ownerName = self.ownerName {
            try encodeContainer.encode(ownerName, forKey: .ownerName)
        }
        if let ownerType = self.ownerType {
            try encodeContainer.encode(ownerType.rawValue, forKey: .ownerType)
        }
        if let resourceUris = resourceUris {
            var resourceUrisContainer = encodeContainer.nestedUnkeyedContainer(forKey: .resourceUris)
            for resourceurilist0 in resourceUris {
                try resourceUrisContainer.encode(resourceurilist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let functionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .functionName)
        functionName = functionNameDecoded
        let databaseNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .databaseName)
        databaseName = databaseNameDecoded
        let classNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .className)
        className = classNameDecoded
        let ownerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ownerName)
        ownerName = ownerNameDecoded
        let ownerTypeDecoded = try containerValues.decodeIfPresent(GlueClientTypes.PrincipalType.self, forKey: .ownerType)
        ownerType = ownerTypeDecoded
        let createTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createTime)
        createTime = createTimeDecoded
        let resourceUrisContainer = try containerValues.decodeIfPresent([GlueClientTypes.ResourceUri?].self, forKey: .resourceUris)
        var resourceUrisDecoded0:[GlueClientTypes.ResourceUri]? = nil
        if let resourceUrisContainer = resourceUrisContainer {
            resourceUrisDecoded0 = [GlueClientTypes.ResourceUri]()
            for structure0 in resourceUrisContainer {
                if let structure0 = structure0 {
                    resourceUrisDecoded0?.append(structure0)
                }
            }
        }
        resourceUris = resourceUrisDecoded0
        let catalogIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .catalogId)
        catalogId = catalogIdDecoded
    }
}
