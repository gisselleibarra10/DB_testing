// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension GlueClientTypes {
    public enum JoinType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case equijoin
        case `left`
        case leftAnti
        case leftSemi
        case outer
        case `right`
        case sdkUnknown(Swift.String)

        public static var allCases: [JoinType] {
            return [
                .equijoin,
                .left,
                .leftAnti,
                .leftSemi,
                .outer,
                .right,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .equijoin: return "equijoin"
            case .left: return "left"
            case .leftAnti: return "leftanti"
            case .leftSemi: return "leftsemi"
            case .outer: return "outer"
            case .right: return "right"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = JoinType(rawValue: rawValue) ?? JoinType.sdkUnknown(rawValue)
        }
    }
}
