// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension KinesisAnalyticsV2ClientTypes.ApplicationConfigurationDescription: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applicationCodeConfigurationDescription = "ApplicationCodeConfigurationDescription"
        case applicationSnapshotConfigurationDescription = "ApplicationSnapshotConfigurationDescription"
        case environmentPropertyDescriptions = "EnvironmentPropertyDescriptions"
        case flinkApplicationConfigurationDescription = "FlinkApplicationConfigurationDescription"
        case runConfigurationDescription = "RunConfigurationDescription"
        case sqlApplicationConfigurationDescription = "SqlApplicationConfigurationDescription"
        case vpcConfigurationDescriptions = "VpcConfigurationDescriptions"
        case zeppelinApplicationConfigurationDescription = "ZeppelinApplicationConfigurationDescription"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let applicationCodeConfigurationDescription = self.applicationCodeConfigurationDescription {
            try encodeContainer.encode(applicationCodeConfigurationDescription, forKey: .applicationCodeConfigurationDescription)
        }
        if let applicationSnapshotConfigurationDescription = self.applicationSnapshotConfigurationDescription {
            try encodeContainer.encode(applicationSnapshotConfigurationDescription, forKey: .applicationSnapshotConfigurationDescription)
        }
        if let environmentPropertyDescriptions = self.environmentPropertyDescriptions {
            try encodeContainer.encode(environmentPropertyDescriptions, forKey: .environmentPropertyDescriptions)
        }
        if let flinkApplicationConfigurationDescription = self.flinkApplicationConfigurationDescription {
            try encodeContainer.encode(flinkApplicationConfigurationDescription, forKey: .flinkApplicationConfigurationDescription)
        }
        if let runConfigurationDescription = self.runConfigurationDescription {
            try encodeContainer.encode(runConfigurationDescription, forKey: .runConfigurationDescription)
        }
        if let sqlApplicationConfigurationDescription = self.sqlApplicationConfigurationDescription {
            try encodeContainer.encode(sqlApplicationConfigurationDescription, forKey: .sqlApplicationConfigurationDescription)
        }
        if let vpcConfigurationDescriptions = vpcConfigurationDescriptions {
            var vpcConfigurationDescriptionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .vpcConfigurationDescriptions)
            for vpcconfigurationdescriptions0 in vpcConfigurationDescriptions {
                try vpcConfigurationDescriptionsContainer.encode(vpcconfigurationdescriptions0)
            }
        }
        if let zeppelinApplicationConfigurationDescription = self.zeppelinApplicationConfigurationDescription {
            try encodeContainer.encode(zeppelinApplicationConfigurationDescription, forKey: .zeppelinApplicationConfigurationDescription)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sqlApplicationConfigurationDescriptionDecoded = try containerValues.decodeIfPresent(KinesisAnalyticsV2ClientTypes.SqlApplicationConfigurationDescription.self, forKey: .sqlApplicationConfigurationDescription)
        sqlApplicationConfigurationDescription = sqlApplicationConfigurationDescriptionDecoded
        let applicationCodeConfigurationDescriptionDecoded = try containerValues.decodeIfPresent(KinesisAnalyticsV2ClientTypes.ApplicationCodeConfigurationDescription.self, forKey: .applicationCodeConfigurationDescription)
        applicationCodeConfigurationDescription = applicationCodeConfigurationDescriptionDecoded
        let runConfigurationDescriptionDecoded = try containerValues.decodeIfPresent(KinesisAnalyticsV2ClientTypes.RunConfigurationDescription.self, forKey: .runConfigurationDescription)
        runConfigurationDescription = runConfigurationDescriptionDecoded
        let flinkApplicationConfigurationDescriptionDecoded = try containerValues.decodeIfPresent(KinesisAnalyticsV2ClientTypes.FlinkApplicationConfigurationDescription.self, forKey: .flinkApplicationConfigurationDescription)
        flinkApplicationConfigurationDescription = flinkApplicationConfigurationDescriptionDecoded
        let environmentPropertyDescriptionsDecoded = try containerValues.decodeIfPresent(KinesisAnalyticsV2ClientTypes.EnvironmentPropertyDescriptions.self, forKey: .environmentPropertyDescriptions)
        environmentPropertyDescriptions = environmentPropertyDescriptionsDecoded
        let applicationSnapshotConfigurationDescriptionDecoded = try containerValues.decodeIfPresent(KinesisAnalyticsV2ClientTypes.ApplicationSnapshotConfigurationDescription.self, forKey: .applicationSnapshotConfigurationDescription)
        applicationSnapshotConfigurationDescription = applicationSnapshotConfigurationDescriptionDecoded
        let vpcConfigurationDescriptionsContainer = try containerValues.decodeIfPresent([KinesisAnalyticsV2ClientTypes.VpcConfigurationDescription?].self, forKey: .vpcConfigurationDescriptions)
        var vpcConfigurationDescriptionsDecoded0:[KinesisAnalyticsV2ClientTypes.VpcConfigurationDescription]? = nil
        if let vpcConfigurationDescriptionsContainer = vpcConfigurationDescriptionsContainer {
            vpcConfigurationDescriptionsDecoded0 = [KinesisAnalyticsV2ClientTypes.VpcConfigurationDescription]()
            for structure0 in vpcConfigurationDescriptionsContainer {
                if let structure0 = structure0 {
                    vpcConfigurationDescriptionsDecoded0?.append(structure0)
                }
            }
        }
        vpcConfigurationDescriptions = vpcConfigurationDescriptionsDecoded0
        let zeppelinApplicationConfigurationDescriptionDecoded = try containerValues.decodeIfPresent(KinesisAnalyticsV2ClientTypes.ZeppelinApplicationConfigurationDescription.self, forKey: .zeppelinApplicationConfigurationDescription)
        zeppelinApplicationConfigurationDescription = zeppelinApplicationConfigurationDescriptionDecoded
    }
}
