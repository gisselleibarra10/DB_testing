// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension KinesisAnalyticsV2ClientTypes.ZeppelinApplicationConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case catalogConfiguration = "CatalogConfiguration"
        case customArtifactsConfiguration = "CustomArtifactsConfiguration"
        case deployAsApplicationConfiguration = "DeployAsApplicationConfiguration"
        case monitoringConfiguration = "MonitoringConfiguration"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let catalogConfiguration = self.catalogConfiguration {
            try encodeContainer.encode(catalogConfiguration, forKey: .catalogConfiguration)
        }
        if let customArtifactsConfiguration = customArtifactsConfiguration {
            var customArtifactsConfigurationContainer = encodeContainer.nestedUnkeyedContainer(forKey: .customArtifactsConfiguration)
            for customartifactsconfigurationlist0 in customArtifactsConfiguration {
                try customArtifactsConfigurationContainer.encode(customartifactsconfigurationlist0)
            }
        }
        if let deployAsApplicationConfiguration = self.deployAsApplicationConfiguration {
            try encodeContainer.encode(deployAsApplicationConfiguration, forKey: .deployAsApplicationConfiguration)
        }
        if let monitoringConfiguration = self.monitoringConfiguration {
            try encodeContainer.encode(monitoringConfiguration, forKey: .monitoringConfiguration)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let monitoringConfigurationDecoded = try containerValues.decodeIfPresent(KinesisAnalyticsV2ClientTypes.ZeppelinMonitoringConfiguration.self, forKey: .monitoringConfiguration)
        monitoringConfiguration = monitoringConfigurationDecoded
        let catalogConfigurationDecoded = try containerValues.decodeIfPresent(KinesisAnalyticsV2ClientTypes.CatalogConfiguration.self, forKey: .catalogConfiguration)
        catalogConfiguration = catalogConfigurationDecoded
        let deployAsApplicationConfigurationDecoded = try containerValues.decodeIfPresent(KinesisAnalyticsV2ClientTypes.DeployAsApplicationConfiguration.self, forKey: .deployAsApplicationConfiguration)
        deployAsApplicationConfiguration = deployAsApplicationConfigurationDecoded
        let customArtifactsConfigurationContainer = try containerValues.decodeIfPresent([KinesisAnalyticsV2ClientTypes.CustomArtifactConfiguration?].self, forKey: .customArtifactsConfiguration)
        var customArtifactsConfigurationDecoded0:[KinesisAnalyticsV2ClientTypes.CustomArtifactConfiguration]? = nil
        if let customArtifactsConfigurationContainer = customArtifactsConfigurationContainer {
            customArtifactsConfigurationDecoded0 = [KinesisAnalyticsV2ClientTypes.CustomArtifactConfiguration]()
            for structure0 in customArtifactsConfigurationContainer {
                if let structure0 = structure0 {
                    customArtifactsConfigurationDecoded0?.append(structure0)
                }
            }
        }
        customArtifactsConfiguration = customArtifactsConfigurationDecoded0
    }
}
