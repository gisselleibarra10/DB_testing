// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct UpdateApplicationInputBody: Swift.Equatable {
    let applicationName: Swift.String?
    let currentApplicationVersionId: Swift.Int?
    let applicationConfigurationUpdate: KinesisAnalyticsV2ClientTypes.ApplicationConfigurationUpdate?
    let serviceExecutionRoleUpdate: Swift.String?
    let runConfigurationUpdate: KinesisAnalyticsV2ClientTypes.RunConfigurationUpdate?
    let cloudWatchLoggingOptionUpdates: [KinesisAnalyticsV2ClientTypes.CloudWatchLoggingOptionUpdate]?
    let conditionalToken: Swift.String?
}

extension UpdateApplicationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applicationConfigurationUpdate = "ApplicationConfigurationUpdate"
        case applicationName = "ApplicationName"
        case cloudWatchLoggingOptionUpdates = "CloudWatchLoggingOptionUpdates"
        case conditionalToken = "ConditionalToken"
        case currentApplicationVersionId = "CurrentApplicationVersionId"
        case runConfigurationUpdate = "RunConfigurationUpdate"
        case serviceExecutionRoleUpdate = "ServiceExecutionRoleUpdate"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let applicationNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .applicationName)
        applicationName = applicationNameDecoded
        let currentApplicationVersionIdDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .currentApplicationVersionId)
        currentApplicationVersionId = currentApplicationVersionIdDecoded
        let applicationConfigurationUpdateDecoded = try containerValues.decodeIfPresent(KinesisAnalyticsV2ClientTypes.ApplicationConfigurationUpdate.self, forKey: .applicationConfigurationUpdate)
        applicationConfigurationUpdate = applicationConfigurationUpdateDecoded
        let serviceExecutionRoleUpdateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serviceExecutionRoleUpdate)
        serviceExecutionRoleUpdate = serviceExecutionRoleUpdateDecoded
        let runConfigurationUpdateDecoded = try containerValues.decodeIfPresent(KinesisAnalyticsV2ClientTypes.RunConfigurationUpdate.self, forKey: .runConfigurationUpdate)
        runConfigurationUpdate = runConfigurationUpdateDecoded
        let cloudWatchLoggingOptionUpdatesContainer = try containerValues.decodeIfPresent([KinesisAnalyticsV2ClientTypes.CloudWatchLoggingOptionUpdate?].self, forKey: .cloudWatchLoggingOptionUpdates)
        var cloudWatchLoggingOptionUpdatesDecoded0:[KinesisAnalyticsV2ClientTypes.CloudWatchLoggingOptionUpdate]? = nil
        if let cloudWatchLoggingOptionUpdatesContainer = cloudWatchLoggingOptionUpdatesContainer {
            cloudWatchLoggingOptionUpdatesDecoded0 = [KinesisAnalyticsV2ClientTypes.CloudWatchLoggingOptionUpdate]()
            for structure0 in cloudWatchLoggingOptionUpdatesContainer {
                if let structure0 = structure0 {
                    cloudWatchLoggingOptionUpdatesDecoded0?.append(structure0)
                }
            }
        }
        cloudWatchLoggingOptionUpdates = cloudWatchLoggingOptionUpdatesDecoded0
        let conditionalTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .conditionalToken)
        conditionalToken = conditionalTokenDecoded
    }
}
