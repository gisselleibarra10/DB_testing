// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateApplicationInputBody: Swift.Equatable {
    let applicationName: Swift.String?
    let applicationDescription: Swift.String?
    let runtimeEnvironment: KinesisAnalyticsV2ClientTypes.RuntimeEnvironment?
    let serviceExecutionRole: Swift.String?
    let applicationConfiguration: KinesisAnalyticsV2ClientTypes.ApplicationConfiguration?
    let cloudWatchLoggingOptions: [KinesisAnalyticsV2ClientTypes.CloudWatchLoggingOption]?
    let tags: [KinesisAnalyticsV2ClientTypes.Tag]?
    let applicationMode: KinesisAnalyticsV2ClientTypes.ApplicationMode?
}

extension CreateApplicationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applicationConfiguration = "ApplicationConfiguration"
        case applicationDescription = "ApplicationDescription"
        case applicationMode = "ApplicationMode"
        case applicationName = "ApplicationName"
        case cloudWatchLoggingOptions = "CloudWatchLoggingOptions"
        case runtimeEnvironment = "RuntimeEnvironment"
        case serviceExecutionRole = "ServiceExecutionRole"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let applicationNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .applicationName)
        applicationName = applicationNameDecoded
        let applicationDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .applicationDescription)
        applicationDescription = applicationDescriptionDecoded
        let runtimeEnvironmentDecoded = try containerValues.decodeIfPresent(KinesisAnalyticsV2ClientTypes.RuntimeEnvironment.self, forKey: .runtimeEnvironment)
        runtimeEnvironment = runtimeEnvironmentDecoded
        let serviceExecutionRoleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serviceExecutionRole)
        serviceExecutionRole = serviceExecutionRoleDecoded
        let applicationConfigurationDecoded = try containerValues.decodeIfPresent(KinesisAnalyticsV2ClientTypes.ApplicationConfiguration.self, forKey: .applicationConfiguration)
        applicationConfiguration = applicationConfigurationDecoded
        let cloudWatchLoggingOptionsContainer = try containerValues.decodeIfPresent([KinesisAnalyticsV2ClientTypes.CloudWatchLoggingOption?].self, forKey: .cloudWatchLoggingOptions)
        var cloudWatchLoggingOptionsDecoded0:[KinesisAnalyticsV2ClientTypes.CloudWatchLoggingOption]? = nil
        if let cloudWatchLoggingOptionsContainer = cloudWatchLoggingOptionsContainer {
            cloudWatchLoggingOptionsDecoded0 = [KinesisAnalyticsV2ClientTypes.CloudWatchLoggingOption]()
            for structure0 in cloudWatchLoggingOptionsContainer {
                if let structure0 = structure0 {
                    cloudWatchLoggingOptionsDecoded0?.append(structure0)
                }
            }
        }
        cloudWatchLoggingOptions = cloudWatchLoggingOptionsDecoded0
        let tagsContainer = try containerValues.decodeIfPresent([KinesisAnalyticsV2ClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[KinesisAnalyticsV2ClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [KinesisAnalyticsV2ClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let applicationModeDecoded = try containerValues.decodeIfPresent(KinesisAnalyticsV2ClientTypes.ApplicationMode.self, forKey: .applicationMode)
        applicationMode = applicationModeDecoded
    }
}
