// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension KinesisAnalyticsV2ClientTypes.ApplicationConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applicationCodeConfiguration = "ApplicationCodeConfiguration"
        case applicationSnapshotConfiguration = "ApplicationSnapshotConfiguration"
        case environmentProperties = "EnvironmentProperties"
        case flinkApplicationConfiguration = "FlinkApplicationConfiguration"
        case sqlApplicationConfiguration = "SqlApplicationConfiguration"
        case vpcConfigurations = "VpcConfigurations"
        case zeppelinApplicationConfiguration = "ZeppelinApplicationConfiguration"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let applicationCodeConfiguration = self.applicationCodeConfiguration {
            try encodeContainer.encode(applicationCodeConfiguration, forKey: .applicationCodeConfiguration)
        }
        if let applicationSnapshotConfiguration = self.applicationSnapshotConfiguration {
            try encodeContainer.encode(applicationSnapshotConfiguration, forKey: .applicationSnapshotConfiguration)
        }
        if let environmentProperties = self.environmentProperties {
            try encodeContainer.encode(environmentProperties, forKey: .environmentProperties)
        }
        if let flinkApplicationConfiguration = self.flinkApplicationConfiguration {
            try encodeContainer.encode(flinkApplicationConfiguration, forKey: .flinkApplicationConfiguration)
        }
        if let sqlApplicationConfiguration = self.sqlApplicationConfiguration {
            try encodeContainer.encode(sqlApplicationConfiguration, forKey: .sqlApplicationConfiguration)
        }
        if let vpcConfigurations = vpcConfigurations {
            var vpcConfigurationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .vpcConfigurations)
            for vpcconfigurations0 in vpcConfigurations {
                try vpcConfigurationsContainer.encode(vpcconfigurations0)
            }
        }
        if let zeppelinApplicationConfiguration = self.zeppelinApplicationConfiguration {
            try encodeContainer.encode(zeppelinApplicationConfiguration, forKey: .zeppelinApplicationConfiguration)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sqlApplicationConfigurationDecoded = try containerValues.decodeIfPresent(KinesisAnalyticsV2ClientTypes.SqlApplicationConfiguration.self, forKey: .sqlApplicationConfiguration)
        sqlApplicationConfiguration = sqlApplicationConfigurationDecoded
        let flinkApplicationConfigurationDecoded = try containerValues.decodeIfPresent(KinesisAnalyticsV2ClientTypes.FlinkApplicationConfiguration.self, forKey: .flinkApplicationConfiguration)
        flinkApplicationConfiguration = flinkApplicationConfigurationDecoded
        let environmentPropertiesDecoded = try containerValues.decodeIfPresent(KinesisAnalyticsV2ClientTypes.EnvironmentProperties.self, forKey: .environmentProperties)
        environmentProperties = environmentPropertiesDecoded
        let applicationCodeConfigurationDecoded = try containerValues.decodeIfPresent(KinesisAnalyticsV2ClientTypes.ApplicationCodeConfiguration.self, forKey: .applicationCodeConfiguration)
        applicationCodeConfiguration = applicationCodeConfigurationDecoded
        let applicationSnapshotConfigurationDecoded = try containerValues.decodeIfPresent(KinesisAnalyticsV2ClientTypes.ApplicationSnapshotConfiguration.self, forKey: .applicationSnapshotConfiguration)
        applicationSnapshotConfiguration = applicationSnapshotConfigurationDecoded
        let vpcConfigurationsContainer = try containerValues.decodeIfPresent([KinesisAnalyticsV2ClientTypes.VpcConfiguration?].self, forKey: .vpcConfigurations)
        var vpcConfigurationsDecoded0:[KinesisAnalyticsV2ClientTypes.VpcConfiguration]? = nil
        if let vpcConfigurationsContainer = vpcConfigurationsContainer {
            vpcConfigurationsDecoded0 = [KinesisAnalyticsV2ClientTypes.VpcConfiguration]()
            for structure0 in vpcConfigurationsContainer {
                if let structure0 = structure0 {
                    vpcConfigurationsDecoded0?.append(structure0)
                }
            }
        }
        vpcConfigurations = vpcConfigurationsDecoded0
        let zeppelinApplicationConfigurationDecoded = try containerValues.decodeIfPresent(KinesisAnalyticsV2ClientTypes.ZeppelinApplicationConfiguration.self, forKey: .zeppelinApplicationConfiguration)
        zeppelinApplicationConfiguration = zeppelinApplicationConfigurationDecoded
    }
}
