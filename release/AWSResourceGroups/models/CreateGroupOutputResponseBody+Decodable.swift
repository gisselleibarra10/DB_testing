// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateGroupOutputResponseBody: Swift.Equatable {
    let group: ResourceGroupsClientTypes.Group?
    let resourceQuery: ResourceGroupsClientTypes.ResourceQuery?
    let tags: [Swift.String:Swift.String]?
    let groupConfiguration: ResourceGroupsClientTypes.GroupConfiguration?
}

extension CreateGroupOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case group = "Group"
        case groupConfiguration = "GroupConfiguration"
        case resourceQuery = "ResourceQuery"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let groupDecoded = try containerValues.decodeIfPresent(ResourceGroupsClientTypes.Group.self, forKey: .group)
        group = groupDecoded
        let resourceQueryDecoded = try containerValues.decodeIfPresent(ResourceGroupsClientTypes.ResourceQuery.self, forKey: .resourceQuery)
        resourceQuery = resourceQueryDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
        let groupConfigurationDecoded = try containerValues.decodeIfPresent(ResourceGroupsClientTypes.GroupConfiguration.self, forKey: .groupConfiguration)
        groupConfiguration = groupConfigurationDecoded
    }
}
