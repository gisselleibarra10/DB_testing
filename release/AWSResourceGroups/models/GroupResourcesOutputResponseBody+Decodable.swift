// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GroupResourcesOutputResponseBody: Swift.Equatable {
    let succeeded: [Swift.String]?
    let failed: [ResourceGroupsClientTypes.FailedResource]?
    let pending: [ResourceGroupsClientTypes.PendingResource]?
}

extension GroupResourcesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case failed = "Failed"
        case pending = "Pending"
        case succeeded = "Succeeded"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let succeededContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .succeeded)
        var succeededDecoded0:[Swift.String]? = nil
        if let succeededContainer = succeededContainer {
            succeededDecoded0 = [Swift.String]()
            for string0 in succeededContainer {
                if let string0 = string0 {
                    succeededDecoded0?.append(string0)
                }
            }
        }
        succeeded = succeededDecoded0
        let failedContainer = try containerValues.decodeIfPresent([ResourceGroupsClientTypes.FailedResource?].self, forKey: .failed)
        var failedDecoded0:[ResourceGroupsClientTypes.FailedResource]? = nil
        if let failedContainer = failedContainer {
            failedDecoded0 = [ResourceGroupsClientTypes.FailedResource]()
            for structure0 in failedContainer {
                if let structure0 = structure0 {
                    failedDecoded0?.append(structure0)
                }
            }
        }
        failed = failedDecoded0
        let pendingContainer = try containerValues.decodeIfPresent([ResourceGroupsClientTypes.PendingResource?].self, forKey: .pending)
        var pendingDecoded0:[ResourceGroupsClientTypes.PendingResource]? = nil
        if let pendingContainer = pendingContainer {
            pendingDecoded0 = [ResourceGroupsClientTypes.PendingResource]()
            for structure0 in pendingContainer {
                if let structure0 = structure0 {
                    pendingDecoded0?.append(structure0)
                }
            }
        }
        pending = pendingDecoded0
    }
}
