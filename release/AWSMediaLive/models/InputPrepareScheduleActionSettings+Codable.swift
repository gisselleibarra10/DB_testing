// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension MediaLiveClientTypes.InputPrepareScheduleActionSettings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case inputAttachmentNameReference = "inputAttachmentNameReference"
        case inputClippingSettings = "inputClippingSettings"
        case urlPath = "urlPath"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let inputAttachmentNameReference = self.inputAttachmentNameReference {
            try encodeContainer.encode(inputAttachmentNameReference, forKey: .inputAttachmentNameReference)
        }
        if let inputClippingSettings = self.inputClippingSettings {
            try encodeContainer.encode(inputClippingSettings, forKey: .inputClippingSettings)
        }
        if let urlPath = urlPath {
            var urlPathContainer = encodeContainer.nestedUnkeyedContainer(forKey: .urlPath)
            for __listof__string0 in urlPath {
                try urlPathContainer.encode(__listof__string0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let inputAttachmentNameReferenceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .inputAttachmentNameReference)
        inputAttachmentNameReference = inputAttachmentNameReferenceDecoded
        let inputClippingSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.InputClippingSettings.self, forKey: .inputClippingSettings)
        inputClippingSettings = inputClippingSettingsDecoded
        let urlPathContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .urlPath)
        var urlPathDecoded0:[Swift.String]? = nil
        if let urlPathContainer = urlPathContainer {
            urlPathDecoded0 = [Swift.String]()
            for string0 in urlPathContainer {
                if let string0 = string0 {
                    urlPathDecoded0?.append(string0)
                }
            }
        }
        urlPath = urlPathDecoded0
    }
}
