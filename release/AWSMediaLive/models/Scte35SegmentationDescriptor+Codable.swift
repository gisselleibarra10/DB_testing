// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension MediaLiveClientTypes.Scte35SegmentationDescriptor: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deliveryRestrictions = "deliveryRestrictions"
        case segmentNum = "segmentNum"
        case segmentationCancelIndicator = "segmentationCancelIndicator"
        case segmentationDuration = "segmentationDuration"
        case segmentationEventId = "segmentationEventId"
        case segmentationTypeId = "segmentationTypeId"
        case segmentationUpid = "segmentationUpid"
        case segmentationUpidType = "segmentationUpidType"
        case segmentsExpected = "segmentsExpected"
        case subSegmentNum = "subSegmentNum"
        case subSegmentsExpected = "subSegmentsExpected"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let deliveryRestrictions = self.deliveryRestrictions {
            try encodeContainer.encode(deliveryRestrictions, forKey: .deliveryRestrictions)
        }
        if let segmentNum = self.segmentNum {
            try encodeContainer.encode(segmentNum, forKey: .segmentNum)
        }
        if let segmentationCancelIndicator = self.segmentationCancelIndicator {
            try encodeContainer.encode(segmentationCancelIndicator.rawValue, forKey: .segmentationCancelIndicator)
        }
        if let segmentationDuration = self.segmentationDuration {
            try encodeContainer.encode(segmentationDuration, forKey: .segmentationDuration)
        }
        if let segmentationEventId = self.segmentationEventId {
            try encodeContainer.encode(segmentationEventId, forKey: .segmentationEventId)
        }
        if let segmentationTypeId = self.segmentationTypeId {
            try encodeContainer.encode(segmentationTypeId, forKey: .segmentationTypeId)
        }
        if let segmentationUpid = self.segmentationUpid {
            try encodeContainer.encode(segmentationUpid, forKey: .segmentationUpid)
        }
        if let segmentationUpidType = self.segmentationUpidType {
            try encodeContainer.encode(segmentationUpidType, forKey: .segmentationUpidType)
        }
        if let segmentsExpected = self.segmentsExpected {
            try encodeContainer.encode(segmentsExpected, forKey: .segmentsExpected)
        }
        if let subSegmentNum = self.subSegmentNum {
            try encodeContainer.encode(subSegmentNum, forKey: .subSegmentNum)
        }
        if let subSegmentsExpected = self.subSegmentsExpected {
            try encodeContainer.encode(subSegmentsExpected, forKey: .subSegmentsExpected)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deliveryRestrictionsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.Scte35DeliveryRestrictions.self, forKey: .deliveryRestrictions)
        deliveryRestrictions = deliveryRestrictionsDecoded
        let segmentNumDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .segmentNum)
        segmentNum = segmentNumDecoded
        let segmentationCancelIndicatorDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.Scte35SegmentationCancelIndicator.self, forKey: .segmentationCancelIndicator)
        segmentationCancelIndicator = segmentationCancelIndicatorDecoded
        let segmentationDurationDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .segmentationDuration)
        segmentationDuration = segmentationDurationDecoded
        let segmentationEventIdDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .segmentationEventId)
        segmentationEventId = segmentationEventIdDecoded
        let segmentationTypeIdDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .segmentationTypeId)
        segmentationTypeId = segmentationTypeIdDecoded
        let segmentationUpidDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .segmentationUpid)
        segmentationUpid = segmentationUpidDecoded
        let segmentationUpidTypeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .segmentationUpidType)
        segmentationUpidType = segmentationUpidTypeDecoded
        let segmentsExpectedDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .segmentsExpected)
        segmentsExpected = segmentsExpectedDecoded
        let subSegmentNumDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .subSegmentNum)
        subSegmentNum = subSegmentNumDecoded
        let subSegmentsExpectedDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .subSegmentsExpected)
        subSegmentsExpected = subSegmentsExpectedDecoded
    }
}
