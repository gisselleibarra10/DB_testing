// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension MediaLiveClientTypes {
    /// Placeholder documentation for ChannelSummary
    public struct ChannelSummary: Swift.Equatable {
        /// The unique arn of the channel.
        public var arn: Swift.String?
        /// Specification of CDI inputs for this channel
        public var cdiInputSpecification: MediaLiveClientTypes.CdiInputSpecification?
        /// The class for this channel. STANDARD for a channel with two pipelines or SINGLE_PIPELINE for a channel with one pipeline.
        public var channelClass: MediaLiveClientTypes.ChannelClass?
        /// A list of destinations of the channel. For UDP outputs, there is one destination per output. For other types (HLS, for example), there is one destination per packager.
        public var destinations: [MediaLiveClientTypes.OutputDestination]?
        /// The endpoints where outgoing connections initiate from
        public var egressEndpoints: [MediaLiveClientTypes.ChannelEgressEndpoint]?
        /// The unique id of the channel.
        public var id: Swift.String?
        /// List of input attachments for channel.
        public var inputAttachments: [MediaLiveClientTypes.InputAttachment]?
        /// Specification of network and file inputs for this channel
        public var inputSpecification: MediaLiveClientTypes.InputSpecification?
        /// The log level being written to CloudWatch Logs.
        public var logLevel: MediaLiveClientTypes.LogLevel?
        /// Maintenance settings for this channel.
        public var maintenance: MediaLiveClientTypes.MaintenanceStatus?
        /// The name of the channel. (user-mutable)
        public var name: Swift.String?
        /// The number of currently healthy pipelines.
        public var pipelinesRunningCount: Swift.Int?
        /// The Amazon Resource Name (ARN) of the role assumed when running the Channel.
        public var roleArn: Swift.String?
        /// Placeholder documentation for ChannelState
        public var state: MediaLiveClientTypes.ChannelState?
        /// A collection of key-value pairs.
        public var tags: [Swift.String:Swift.String]?
        /// Settings for any VPC outputs.
        public var vpc: MediaLiveClientTypes.VpcOutputSettingsDescription?

        public init (
            arn: Swift.String? = nil,
            cdiInputSpecification: MediaLiveClientTypes.CdiInputSpecification? = nil,
            channelClass: MediaLiveClientTypes.ChannelClass? = nil,
            destinations: [MediaLiveClientTypes.OutputDestination]? = nil,
            egressEndpoints: [MediaLiveClientTypes.ChannelEgressEndpoint]? = nil,
            id: Swift.String? = nil,
            inputAttachments: [MediaLiveClientTypes.InputAttachment]? = nil,
            inputSpecification: MediaLiveClientTypes.InputSpecification? = nil,
            logLevel: MediaLiveClientTypes.LogLevel? = nil,
            maintenance: MediaLiveClientTypes.MaintenanceStatus? = nil,
            name: Swift.String? = nil,
            pipelinesRunningCount: Swift.Int? = nil,
            roleArn: Swift.String? = nil,
            state: MediaLiveClientTypes.ChannelState? = nil,
            tags: [Swift.String:Swift.String]? = nil,
            vpc: MediaLiveClientTypes.VpcOutputSettingsDescription? = nil
        )
        {
            self.arn = arn
            self.cdiInputSpecification = cdiInputSpecification
            self.channelClass = channelClass
            self.destinations = destinations
            self.egressEndpoints = egressEndpoints
            self.id = id
            self.inputAttachments = inputAttachments
            self.inputSpecification = inputSpecification
            self.logLevel = logLevel
            self.maintenance = maintenance
            self.name = name
            self.pipelinesRunningCount = pipelinesRunningCount
            self.roleArn = roleArn
            self.state = state
            self.tags = tags
            self.vpc = vpc
        }
    }

}
