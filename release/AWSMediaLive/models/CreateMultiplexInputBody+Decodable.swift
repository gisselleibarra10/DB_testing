// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateMultiplexInputBody: Swift.Equatable {
    let availabilityZones: [Swift.String]?
    let multiplexSettings: MediaLiveClientTypes.MultiplexSettings?
    let name: Swift.String?
    let requestId: Swift.String?
    let tags: [Swift.String:Swift.String]?
}

extension CreateMultiplexInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case availabilityZones = "availabilityZones"
        case multiplexSettings = "multiplexSettings"
        case name = "name"
        case requestId = "requestId"
        case tags = "tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let availabilityZonesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .availabilityZones)
        var availabilityZonesDecoded0:[Swift.String]? = nil
        if let availabilityZonesContainer = availabilityZonesContainer {
            availabilityZonesDecoded0 = [Swift.String]()
            for string0 in availabilityZonesContainer {
                if let string0 = string0 {
                    availabilityZonesDecoded0?.append(string0)
                }
            }
        }
        availabilityZones = availabilityZonesDecoded0
        let multiplexSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.MultiplexSettings.self, forKey: .multiplexSettings)
        multiplexSettings = multiplexSettingsDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let requestIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .requestId)
        requestId = requestIdDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, __string0) in tagsContainer {
                if let __string0 = __string0 {
                    tagsDecoded0?[key0] = __string0
                }
            }
        }
        tags = tagsDecoded0
    }
}
