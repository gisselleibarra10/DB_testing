// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct UpdateChannelInputBody: Swift.Equatable {
    let cdiInputSpecification: MediaLiveClientTypes.CdiInputSpecification?
    let destinations: [MediaLiveClientTypes.OutputDestination]?
    let encoderSettings: MediaLiveClientTypes.EncoderSettings?
    let inputAttachments: [MediaLiveClientTypes.InputAttachment]?
    let inputSpecification: MediaLiveClientTypes.InputSpecification?
    let logLevel: MediaLiveClientTypes.LogLevel?
    let maintenance: MediaLiveClientTypes.MaintenanceUpdateSettings?
    let name: Swift.String?
    let roleArn: Swift.String?
}

extension UpdateChannelInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cdiInputSpecification = "cdiInputSpecification"
        case destinations = "destinations"
        case encoderSettings = "encoderSettings"
        case inputAttachments = "inputAttachments"
        case inputSpecification = "inputSpecification"
        case logLevel = "logLevel"
        case maintenance = "maintenance"
        case name = "name"
        case roleArn = "roleArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let cdiInputSpecificationDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.CdiInputSpecification.self, forKey: .cdiInputSpecification)
        cdiInputSpecification = cdiInputSpecificationDecoded
        let destinationsContainer = try containerValues.decodeIfPresent([MediaLiveClientTypes.OutputDestination?].self, forKey: .destinations)
        var destinationsDecoded0:[MediaLiveClientTypes.OutputDestination]? = nil
        if let destinationsContainer = destinationsContainer {
            destinationsDecoded0 = [MediaLiveClientTypes.OutputDestination]()
            for structure0 in destinationsContainer {
                if let structure0 = structure0 {
                    destinationsDecoded0?.append(structure0)
                }
            }
        }
        destinations = destinationsDecoded0
        let encoderSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.EncoderSettings.self, forKey: .encoderSettings)
        encoderSettings = encoderSettingsDecoded
        let inputAttachmentsContainer = try containerValues.decodeIfPresent([MediaLiveClientTypes.InputAttachment?].self, forKey: .inputAttachments)
        var inputAttachmentsDecoded0:[MediaLiveClientTypes.InputAttachment]? = nil
        if let inputAttachmentsContainer = inputAttachmentsContainer {
            inputAttachmentsDecoded0 = [MediaLiveClientTypes.InputAttachment]()
            for structure0 in inputAttachmentsContainer {
                if let structure0 = structure0 {
                    inputAttachmentsDecoded0?.append(structure0)
                }
            }
        }
        inputAttachments = inputAttachmentsDecoded0
        let inputSpecificationDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.InputSpecification.self, forKey: .inputSpecification)
        inputSpecification = inputSpecificationDecoded
        let logLevelDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.LogLevel.self, forKey: .logLevel)
        logLevel = logLevelDecoded
        let maintenanceDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.MaintenanceUpdateSettings.self, forKey: .maintenance)
        maintenance = maintenanceDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
    }
}
