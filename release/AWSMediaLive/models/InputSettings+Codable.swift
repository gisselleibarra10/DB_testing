// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension MediaLiveClientTypes.InputSettings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case audioSelectors = "audioSelectors"
        case captionSelectors = "captionSelectors"
        case deblockFilter = "deblockFilter"
        case denoiseFilter = "denoiseFilter"
        case filterStrength = "filterStrength"
        case inputFilter = "inputFilter"
        case networkInputSettings = "networkInputSettings"
        case scte35Pid = "scte35Pid"
        case smpte2038DataPreference = "smpte2038DataPreference"
        case sourceEndBehavior = "sourceEndBehavior"
        case videoSelector = "videoSelector"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let audioSelectors = audioSelectors {
            var audioSelectorsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .audioSelectors)
            for __listofaudioselector0 in audioSelectors {
                try audioSelectorsContainer.encode(__listofaudioselector0)
            }
        }
        if let captionSelectors = captionSelectors {
            var captionSelectorsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .captionSelectors)
            for __listofcaptionselector0 in captionSelectors {
                try captionSelectorsContainer.encode(__listofcaptionselector0)
            }
        }
        if let deblockFilter = self.deblockFilter {
            try encodeContainer.encode(deblockFilter.rawValue, forKey: .deblockFilter)
        }
        if let denoiseFilter = self.denoiseFilter {
            try encodeContainer.encode(denoiseFilter.rawValue, forKey: .denoiseFilter)
        }
        if let filterStrength = self.filterStrength {
            try encodeContainer.encode(filterStrength, forKey: .filterStrength)
        }
        if let inputFilter = self.inputFilter {
            try encodeContainer.encode(inputFilter.rawValue, forKey: .inputFilter)
        }
        if let networkInputSettings = self.networkInputSettings {
            try encodeContainer.encode(networkInputSettings, forKey: .networkInputSettings)
        }
        if let scte35Pid = self.scte35Pid {
            try encodeContainer.encode(scte35Pid, forKey: .scte35Pid)
        }
        if let smpte2038DataPreference = self.smpte2038DataPreference {
            try encodeContainer.encode(smpte2038DataPreference.rawValue, forKey: .smpte2038DataPreference)
        }
        if let sourceEndBehavior = self.sourceEndBehavior {
            try encodeContainer.encode(sourceEndBehavior.rawValue, forKey: .sourceEndBehavior)
        }
        if let videoSelector = self.videoSelector {
            try encodeContainer.encode(videoSelector, forKey: .videoSelector)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let audioSelectorsContainer = try containerValues.decodeIfPresent([MediaLiveClientTypes.AudioSelector?].self, forKey: .audioSelectors)
        var audioSelectorsDecoded0:[MediaLiveClientTypes.AudioSelector]? = nil
        if let audioSelectorsContainer = audioSelectorsContainer {
            audioSelectorsDecoded0 = [MediaLiveClientTypes.AudioSelector]()
            for structure0 in audioSelectorsContainer {
                if let structure0 = structure0 {
                    audioSelectorsDecoded0?.append(structure0)
                }
            }
        }
        audioSelectors = audioSelectorsDecoded0
        let captionSelectorsContainer = try containerValues.decodeIfPresent([MediaLiveClientTypes.CaptionSelector?].self, forKey: .captionSelectors)
        var captionSelectorsDecoded0:[MediaLiveClientTypes.CaptionSelector]? = nil
        if let captionSelectorsContainer = captionSelectorsContainer {
            captionSelectorsDecoded0 = [MediaLiveClientTypes.CaptionSelector]()
            for structure0 in captionSelectorsContainer {
                if let structure0 = structure0 {
                    captionSelectorsDecoded0?.append(structure0)
                }
            }
        }
        captionSelectors = captionSelectorsDecoded0
        let deblockFilterDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.InputDeblockFilter.self, forKey: .deblockFilter)
        deblockFilter = deblockFilterDecoded
        let denoiseFilterDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.InputDenoiseFilter.self, forKey: .denoiseFilter)
        denoiseFilter = denoiseFilterDecoded
        let filterStrengthDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .filterStrength)
        filterStrength = filterStrengthDecoded
        let inputFilterDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.InputFilter.self, forKey: .inputFilter)
        inputFilter = inputFilterDecoded
        let networkInputSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.NetworkInputSettings.self, forKey: .networkInputSettings)
        networkInputSettings = networkInputSettingsDecoded
        let scte35PidDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .scte35Pid)
        scte35Pid = scte35PidDecoded
        let smpte2038DataPreferenceDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.Smpte2038DataPreference.self, forKey: .smpte2038DataPreference)
        smpte2038DataPreference = smpte2038DataPreferenceDecoded
        let sourceEndBehaviorDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.InputSourceEndBehavior.self, forKey: .sourceEndBehavior)
        sourceEndBehavior = sourceEndBehaviorDecoded
        let videoSelectorDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.VideoSelector.self, forKey: .videoSelector)
        videoSelector = videoSelectorDecoded
    }
}
