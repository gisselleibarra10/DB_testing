// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension MediaLiveClientTypes.GlobalConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case initialAudioGain = "initialAudioGain"
        case inputEndAction = "inputEndAction"
        case inputLossBehavior = "inputLossBehavior"
        case outputLockingMode = "outputLockingMode"
        case outputTimingSource = "outputTimingSource"
        case supportLowFramerateInputs = "supportLowFramerateInputs"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let initialAudioGain = self.initialAudioGain {
            try encodeContainer.encode(initialAudioGain, forKey: .initialAudioGain)
        }
        if let inputEndAction = self.inputEndAction {
            try encodeContainer.encode(inputEndAction.rawValue, forKey: .inputEndAction)
        }
        if let inputLossBehavior = self.inputLossBehavior {
            try encodeContainer.encode(inputLossBehavior, forKey: .inputLossBehavior)
        }
        if let outputLockingMode = self.outputLockingMode {
            try encodeContainer.encode(outputLockingMode.rawValue, forKey: .outputLockingMode)
        }
        if let outputTimingSource = self.outputTimingSource {
            try encodeContainer.encode(outputTimingSource.rawValue, forKey: .outputTimingSource)
        }
        if let supportLowFramerateInputs = self.supportLowFramerateInputs {
            try encodeContainer.encode(supportLowFramerateInputs.rawValue, forKey: .supportLowFramerateInputs)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let initialAudioGainDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .initialAudioGain)
        initialAudioGain = initialAudioGainDecoded
        let inputEndActionDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.GlobalConfigurationInputEndAction.self, forKey: .inputEndAction)
        inputEndAction = inputEndActionDecoded
        let inputLossBehaviorDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.InputLossBehavior.self, forKey: .inputLossBehavior)
        inputLossBehavior = inputLossBehaviorDecoded
        let outputLockingModeDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.GlobalConfigurationOutputLockingMode.self, forKey: .outputLockingMode)
        outputLockingMode = outputLockingModeDecoded
        let outputTimingSourceDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.GlobalConfigurationOutputTimingSource.self, forKey: .outputTimingSource)
        outputTimingSource = outputTimingSourceDecoded
        let supportLowFramerateInputsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.GlobalConfigurationLowFramerateInputs.self, forKey: .supportLowFramerateInputs)
        supportLowFramerateInputs = supportLowFramerateInputsDecoded
    }
}
