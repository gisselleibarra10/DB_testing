// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension MediaLiveClientTypes.OutputDestination: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case id = "id"
        case mediaPackageSettings = "mediaPackageSettings"
        case multiplexSettings = "multiplexSettings"
        case settings = "settings"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let mediaPackageSettings = mediaPackageSettings {
            var mediaPackageSettingsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .mediaPackageSettings)
            for __listofmediapackageoutputdestinationsettings0 in mediaPackageSettings {
                try mediaPackageSettingsContainer.encode(__listofmediapackageoutputdestinationsettings0)
            }
        }
        if let multiplexSettings = self.multiplexSettings {
            try encodeContainer.encode(multiplexSettings, forKey: .multiplexSettings)
        }
        if let settings = settings {
            var settingsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .settings)
            for __listofoutputdestinationsettings0 in settings {
                try settingsContainer.encode(__listofoutputdestinationsettings0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let mediaPackageSettingsContainer = try containerValues.decodeIfPresent([MediaLiveClientTypes.MediaPackageOutputDestinationSettings?].self, forKey: .mediaPackageSettings)
        var mediaPackageSettingsDecoded0:[MediaLiveClientTypes.MediaPackageOutputDestinationSettings]? = nil
        if let mediaPackageSettingsContainer = mediaPackageSettingsContainer {
            mediaPackageSettingsDecoded0 = [MediaLiveClientTypes.MediaPackageOutputDestinationSettings]()
            for structure0 in mediaPackageSettingsContainer {
                if let structure0 = structure0 {
                    mediaPackageSettingsDecoded0?.append(structure0)
                }
            }
        }
        mediaPackageSettings = mediaPackageSettingsDecoded0
        let multiplexSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.MultiplexProgramChannelDestinationSettings.self, forKey: .multiplexSettings)
        multiplexSettings = multiplexSettingsDecoded
        let settingsContainer = try containerValues.decodeIfPresent([MediaLiveClientTypes.OutputDestinationSettings?].self, forKey: .settings)
        var settingsDecoded0:[MediaLiveClientTypes.OutputDestinationSettings]? = nil
        if let settingsContainer = settingsContainer {
            settingsDecoded0 = [MediaLiveClientTypes.OutputDestinationSettings]()
            for structure0 in settingsContainer {
                if let structure0 = structure0 {
                    settingsDecoded0?.append(structure0)
                }
            }
        }
        settings = settingsDecoded0
    }
}
