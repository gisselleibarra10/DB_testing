// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension MediaLiveClientTypes.InputDeviceUhdSettings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case activeInput = "activeInput"
        case configuredInput = "configuredInput"
        case deviceState = "deviceState"
        case framerate = "framerate"
        case height = "height"
        case maxBitrate = "maxBitrate"
        case scanType = "scanType"
        case width = "width"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let activeInput = self.activeInput {
            try encodeContainer.encode(activeInput.rawValue, forKey: .activeInput)
        }
        if let configuredInput = self.configuredInput {
            try encodeContainer.encode(configuredInput.rawValue, forKey: .configuredInput)
        }
        if let deviceState = self.deviceState {
            try encodeContainer.encode(deviceState.rawValue, forKey: .deviceState)
        }
        if let framerate = self.framerate {
            try encodeContainer.encode(framerate, forKey: .framerate)
        }
        if let height = self.height {
            try encodeContainer.encode(height, forKey: .height)
        }
        if let maxBitrate = self.maxBitrate {
            try encodeContainer.encode(maxBitrate, forKey: .maxBitrate)
        }
        if let scanType = self.scanType {
            try encodeContainer.encode(scanType.rawValue, forKey: .scanType)
        }
        if let width = self.width {
            try encodeContainer.encode(width, forKey: .width)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let activeInputDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.InputDeviceActiveInput.self, forKey: .activeInput)
        activeInput = activeInputDecoded
        let configuredInputDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.InputDeviceConfiguredInput.self, forKey: .configuredInput)
        configuredInput = configuredInputDecoded
        let deviceStateDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.InputDeviceState.self, forKey: .deviceState)
        deviceState = deviceStateDecoded
        let framerateDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .framerate)
        framerate = framerateDecoded
        let heightDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .height)
        height = heightDecoded
        let maxBitrateDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxBitrate)
        maxBitrate = maxBitrateDecoded
        let scanTypeDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.InputDeviceScanType.self, forKey: .scanType)
        scanType = scanTypeDecoded
        let widthDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .width)
        width = widthDecoded
    }
}
