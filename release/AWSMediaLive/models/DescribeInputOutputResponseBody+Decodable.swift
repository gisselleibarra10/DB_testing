// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeInputOutputResponseBody: Swift.Equatable {
    let arn: Swift.String?
    let attachedChannels: [Swift.String]?
    let destinations: [MediaLiveClientTypes.InputDestination]?
    let id: Swift.String?
    let inputClass: MediaLiveClientTypes.InputClass?
    let inputDevices: [MediaLiveClientTypes.InputDeviceSettings]?
    let inputPartnerIds: [Swift.String]?
    let inputSourceType: MediaLiveClientTypes.InputSourceType?
    let mediaConnectFlows: [MediaLiveClientTypes.MediaConnectFlow]?
    let name: Swift.String?
    let roleArn: Swift.String?
    let securityGroups: [Swift.String]?
    let sources: [MediaLiveClientTypes.InputSource]?
    let state: MediaLiveClientTypes.InputState?
    let tags: [Swift.String:Swift.String]?
    let type: MediaLiveClientTypes.InputType?
}

extension DescribeInputOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "arn"
        case attachedChannels = "attachedChannels"
        case destinations = "destinations"
        case id = "id"
        case inputClass = "inputClass"
        case inputDevices = "inputDevices"
        case inputPartnerIds = "inputPartnerIds"
        case inputSourceType = "inputSourceType"
        case mediaConnectFlows = "mediaConnectFlows"
        case name = "name"
        case roleArn = "roleArn"
        case securityGroups = "securityGroups"
        case sources = "sources"
        case state = "state"
        case tags = "tags"
        case type = "type"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let attachedChannelsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .attachedChannels)
        var attachedChannelsDecoded0:[Swift.String]? = nil
        if let attachedChannelsContainer = attachedChannelsContainer {
            attachedChannelsDecoded0 = [Swift.String]()
            for string0 in attachedChannelsContainer {
                if let string0 = string0 {
                    attachedChannelsDecoded0?.append(string0)
                }
            }
        }
        attachedChannels = attachedChannelsDecoded0
        let destinationsContainer = try containerValues.decodeIfPresent([MediaLiveClientTypes.InputDestination?].self, forKey: .destinations)
        var destinationsDecoded0:[MediaLiveClientTypes.InputDestination]? = nil
        if let destinationsContainer = destinationsContainer {
            destinationsDecoded0 = [MediaLiveClientTypes.InputDestination]()
            for structure0 in destinationsContainer {
                if let structure0 = structure0 {
                    destinationsDecoded0?.append(structure0)
                }
            }
        }
        destinations = destinationsDecoded0
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let inputClassDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.InputClass.self, forKey: .inputClass)
        inputClass = inputClassDecoded
        let inputDevicesContainer = try containerValues.decodeIfPresent([MediaLiveClientTypes.InputDeviceSettings?].self, forKey: .inputDevices)
        var inputDevicesDecoded0:[MediaLiveClientTypes.InputDeviceSettings]? = nil
        if let inputDevicesContainer = inputDevicesContainer {
            inputDevicesDecoded0 = [MediaLiveClientTypes.InputDeviceSettings]()
            for structure0 in inputDevicesContainer {
                if let structure0 = structure0 {
                    inputDevicesDecoded0?.append(structure0)
                }
            }
        }
        inputDevices = inputDevicesDecoded0
        let inputPartnerIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .inputPartnerIds)
        var inputPartnerIdsDecoded0:[Swift.String]? = nil
        if let inputPartnerIdsContainer = inputPartnerIdsContainer {
            inputPartnerIdsDecoded0 = [Swift.String]()
            for string0 in inputPartnerIdsContainer {
                if let string0 = string0 {
                    inputPartnerIdsDecoded0?.append(string0)
                }
            }
        }
        inputPartnerIds = inputPartnerIdsDecoded0
        let inputSourceTypeDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.InputSourceType.self, forKey: .inputSourceType)
        inputSourceType = inputSourceTypeDecoded
        let mediaConnectFlowsContainer = try containerValues.decodeIfPresent([MediaLiveClientTypes.MediaConnectFlow?].self, forKey: .mediaConnectFlows)
        var mediaConnectFlowsDecoded0:[MediaLiveClientTypes.MediaConnectFlow]? = nil
        if let mediaConnectFlowsContainer = mediaConnectFlowsContainer {
            mediaConnectFlowsDecoded0 = [MediaLiveClientTypes.MediaConnectFlow]()
            for structure0 in mediaConnectFlowsContainer {
                if let structure0 = structure0 {
                    mediaConnectFlowsDecoded0?.append(structure0)
                }
            }
        }
        mediaConnectFlows = mediaConnectFlowsDecoded0
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let securityGroupsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .securityGroups)
        var securityGroupsDecoded0:[Swift.String]? = nil
        if let securityGroupsContainer = securityGroupsContainer {
            securityGroupsDecoded0 = [Swift.String]()
            for string0 in securityGroupsContainer {
                if let string0 = string0 {
                    securityGroupsDecoded0?.append(string0)
                }
            }
        }
        securityGroups = securityGroupsDecoded0
        let sourcesContainer = try containerValues.decodeIfPresent([MediaLiveClientTypes.InputSource?].self, forKey: .sources)
        var sourcesDecoded0:[MediaLiveClientTypes.InputSource]? = nil
        if let sourcesContainer = sourcesContainer {
            sourcesDecoded0 = [MediaLiveClientTypes.InputSource]()
            for structure0 in sourcesContainer {
                if let structure0 = structure0 {
                    sourcesDecoded0?.append(structure0)
                }
            }
        }
        sources = sourcesDecoded0
        let stateDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.InputState.self, forKey: .state)
        state = stateDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, __string0) in tagsContainer {
                if let __string0 = __string0 {
                    tagsDecoded0?[key0] = __string0
                }
            }
        }
        tags = tagsDecoded0
        let typeDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.InputType.self, forKey: .type)
        type = typeDecoded
    }
}
