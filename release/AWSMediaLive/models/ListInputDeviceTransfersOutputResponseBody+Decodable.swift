// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListInputDeviceTransfersOutputResponseBody: Swift.Equatable {
    let inputDeviceTransfers: [MediaLiveClientTypes.TransferringInputDeviceSummary]?
    let nextToken: Swift.String?
}

extension ListInputDeviceTransfersOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case inputDeviceTransfers = "inputDeviceTransfers"
        case nextToken = "nextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let inputDeviceTransfersContainer = try containerValues.decodeIfPresent([MediaLiveClientTypes.TransferringInputDeviceSummary?].self, forKey: .inputDeviceTransfers)
        var inputDeviceTransfersDecoded0:[MediaLiveClientTypes.TransferringInputDeviceSummary]? = nil
        if let inputDeviceTransfersContainer = inputDeviceTransfersContainer {
            inputDeviceTransfersDecoded0 = [MediaLiveClientTypes.TransferringInputDeviceSummary]()
            for structure0 in inputDeviceTransfersContainer {
                if let structure0 = structure0 {
                    inputDeviceTransfersDecoded0?.append(structure0)
                }
            }
        }
        inputDeviceTransfers = inputDeviceTransfersDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
