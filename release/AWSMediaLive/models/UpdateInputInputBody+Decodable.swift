// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct UpdateInputInputBody: Swift.Equatable {
    let destinations: [MediaLiveClientTypes.InputDestinationRequest]?
    let inputDevices: [MediaLiveClientTypes.InputDeviceRequest]?
    let inputSecurityGroups: [Swift.String]?
    let mediaConnectFlows: [MediaLiveClientTypes.MediaConnectFlowRequest]?
    let name: Swift.String?
    let roleArn: Swift.String?
    let sources: [MediaLiveClientTypes.InputSourceRequest]?
}

extension UpdateInputInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case destinations = "destinations"
        case inputDevices = "inputDevices"
        case inputSecurityGroups = "inputSecurityGroups"
        case mediaConnectFlows = "mediaConnectFlows"
        case name = "name"
        case roleArn = "roleArn"
        case sources = "sources"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let destinationsContainer = try containerValues.decodeIfPresent([MediaLiveClientTypes.InputDestinationRequest?].self, forKey: .destinations)
        var destinationsDecoded0:[MediaLiveClientTypes.InputDestinationRequest]? = nil
        if let destinationsContainer = destinationsContainer {
            destinationsDecoded0 = [MediaLiveClientTypes.InputDestinationRequest]()
            for structure0 in destinationsContainer {
                if let structure0 = structure0 {
                    destinationsDecoded0?.append(structure0)
                }
            }
        }
        destinations = destinationsDecoded0
        let inputDevicesContainer = try containerValues.decodeIfPresent([MediaLiveClientTypes.InputDeviceRequest?].self, forKey: .inputDevices)
        var inputDevicesDecoded0:[MediaLiveClientTypes.InputDeviceRequest]? = nil
        if let inputDevicesContainer = inputDevicesContainer {
            inputDevicesDecoded0 = [MediaLiveClientTypes.InputDeviceRequest]()
            for structure0 in inputDevicesContainer {
                if let structure0 = structure0 {
                    inputDevicesDecoded0?.append(structure0)
                }
            }
        }
        inputDevices = inputDevicesDecoded0
        let inputSecurityGroupsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .inputSecurityGroups)
        var inputSecurityGroupsDecoded0:[Swift.String]? = nil
        if let inputSecurityGroupsContainer = inputSecurityGroupsContainer {
            inputSecurityGroupsDecoded0 = [Swift.String]()
            for string0 in inputSecurityGroupsContainer {
                if let string0 = string0 {
                    inputSecurityGroupsDecoded0?.append(string0)
                }
            }
        }
        inputSecurityGroups = inputSecurityGroupsDecoded0
        let mediaConnectFlowsContainer = try containerValues.decodeIfPresent([MediaLiveClientTypes.MediaConnectFlowRequest?].self, forKey: .mediaConnectFlows)
        var mediaConnectFlowsDecoded0:[MediaLiveClientTypes.MediaConnectFlowRequest]? = nil
        if let mediaConnectFlowsContainer = mediaConnectFlowsContainer {
            mediaConnectFlowsDecoded0 = [MediaLiveClientTypes.MediaConnectFlowRequest]()
            for structure0 in mediaConnectFlowsContainer {
                if let structure0 = structure0 {
                    mediaConnectFlowsDecoded0?.append(structure0)
                }
            }
        }
        mediaConnectFlows = mediaConnectFlowsDecoded0
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let sourcesContainer = try containerValues.decodeIfPresent([MediaLiveClientTypes.InputSourceRequest?].self, forKey: .sources)
        var sourcesDecoded0:[MediaLiveClientTypes.InputSourceRequest]? = nil
        if let sourcesContainer = sourcesContainer {
            sourcesDecoded0 = [MediaLiveClientTypes.InputSourceRequest]()
            for structure0 in sourcesContainer {
                if let structure0 = structure0 {
                    sourcesDecoded0?.append(structure0)
                }
            }
        }
        sources = sourcesDecoded0
    }
}
