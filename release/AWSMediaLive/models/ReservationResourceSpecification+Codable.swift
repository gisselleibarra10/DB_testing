// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension MediaLiveClientTypes.ReservationResourceSpecification: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case channelClass = "channelClass"
        case codec = "codec"
        case maximumBitrate = "maximumBitrate"
        case maximumFramerate = "maximumFramerate"
        case resolution = "resolution"
        case resourceType = "resourceType"
        case specialFeature = "specialFeature"
        case videoQuality = "videoQuality"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let channelClass = self.channelClass {
            try encodeContainer.encode(channelClass.rawValue, forKey: .channelClass)
        }
        if let codec = self.codec {
            try encodeContainer.encode(codec.rawValue, forKey: .codec)
        }
        if let maximumBitrate = self.maximumBitrate {
            try encodeContainer.encode(maximumBitrate.rawValue, forKey: .maximumBitrate)
        }
        if let maximumFramerate = self.maximumFramerate {
            try encodeContainer.encode(maximumFramerate.rawValue, forKey: .maximumFramerate)
        }
        if let resolution = self.resolution {
            try encodeContainer.encode(resolution.rawValue, forKey: .resolution)
        }
        if let resourceType = self.resourceType {
            try encodeContainer.encode(resourceType.rawValue, forKey: .resourceType)
        }
        if let specialFeature = self.specialFeature {
            try encodeContainer.encode(specialFeature.rawValue, forKey: .specialFeature)
        }
        if let videoQuality = self.videoQuality {
            try encodeContainer.encode(videoQuality.rawValue, forKey: .videoQuality)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let channelClassDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.ChannelClass.self, forKey: .channelClass)
        channelClass = channelClassDecoded
        let codecDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.ReservationCodec.self, forKey: .codec)
        codec = codecDecoded
        let maximumBitrateDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.ReservationMaximumBitrate.self, forKey: .maximumBitrate)
        maximumBitrate = maximumBitrateDecoded
        let maximumFramerateDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.ReservationMaximumFramerate.self, forKey: .maximumFramerate)
        maximumFramerate = maximumFramerateDecoded
        let resolutionDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.ReservationResolution.self, forKey: .resolution)
        resolution = resolutionDecoded
        let resourceTypeDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.ReservationResourceType.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let specialFeatureDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.ReservationSpecialFeature.self, forKey: .specialFeature)
        specialFeature = specialFeatureDecoded
        let videoQualityDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.ReservationVideoQuality.self, forKey: .videoQuality)
        videoQuality = videoQualityDecoded
    }
}
