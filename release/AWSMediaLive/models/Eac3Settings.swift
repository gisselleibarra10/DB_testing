// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension MediaLiveClientTypes {
    /// Eac3 Settings
    public struct Eac3Settings: Swift.Equatable {
        /// When set to attenuate3Db, applies a 3 dB attenuation to the surround channels. Only used for 3/2 coding mode.
        public var attenuationControl: MediaLiveClientTypes.Eac3AttenuationControl?
        /// Average bitrate in bits/second. Valid bitrates depend on the coding mode.
        public var bitrate: Swift.Double?
        /// Specifies the bitstream mode (bsmod) for the emitted E-AC-3 stream. See ATSC A/52-2012 (Annex E) for background on these values.
        public var bitstreamMode: MediaLiveClientTypes.Eac3BitstreamMode?
        /// Dolby Digital Plus coding mode. Determines number of channels.
        public var codingMode: MediaLiveClientTypes.Eac3CodingMode?
        /// When set to enabled, activates a DC highpass filter for all input channels.
        public var dcFilter: MediaLiveClientTypes.Eac3DcFilter?
        /// Sets the dialnorm for the output. If blank and input audio is Dolby Digital Plus, dialnorm will be passed through.
        public var dialnorm: Swift.Int?
        /// Sets the Dolby dynamic range compression profile.
        public var drcLine: MediaLiveClientTypes.Eac3DrcLine?
        /// Sets the profile for heavy Dolby dynamic range compression, ensures that the instantaneous signal peaks do not exceed specified levels.
        public var drcRf: MediaLiveClientTypes.Eac3DrcRf?
        /// When encoding 3/2 audio, setting to lfe enables the LFE channel
        public var lfeControl: MediaLiveClientTypes.Eac3LfeControl?
        /// When set to enabled, applies a 120Hz lowpass filter to the LFE channel prior to encoding. Only valid with codingMode32 coding mode.
        public var lfeFilter: MediaLiveClientTypes.Eac3LfeFilter?
        /// Left only/Right only center mix level. Only used for 3/2 coding mode.
        public var loRoCenterMixLevel: Swift.Double?
        /// Left only/Right only surround mix level. Only used for 3/2 coding mode.
        public var loRoSurroundMixLevel: Swift.Double?
        /// Left total/Right total center mix level. Only used for 3/2 coding mode.
        public var ltRtCenterMixLevel: Swift.Double?
        /// Left total/Right total surround mix level. Only used for 3/2 coding mode.
        public var ltRtSurroundMixLevel: Swift.Double?
        /// When set to followInput, encoder metadata will be sourced from the DD, DD+, or DolbyE decoder that supplied this audio data. If audio was not supplied from one of these streams, then the static metadata settings will be used.
        public var metadataControl: MediaLiveClientTypes.Eac3MetadataControl?
        /// When set to whenPossible, input DD+ audio will be passed through if it is present on the input. This detection is dynamic over the life of the transcode. Inputs that alternate between DD+ and non-DD+ content will have a consistent DD+ output as the system alternates between passthrough and encoding.
        public var passthroughControl: MediaLiveClientTypes.Eac3PassthroughControl?
        /// When set to shift90Degrees, applies a 90-degree phase shift to the surround channels. Only used for 3/2 coding mode.
        public var phaseControl: MediaLiveClientTypes.Eac3PhaseControl?
        /// Stereo downmix preference. Only used for 3/2 coding mode.
        public var stereoDownmix: MediaLiveClientTypes.Eac3StereoDownmix?
        /// When encoding 3/2 audio, sets whether an extra center back surround channel is matrix encoded into the left and right surround channels.
        public var surroundExMode: MediaLiveClientTypes.Eac3SurroundExMode?
        /// When encoding 2/0 audio, sets whether Dolby Surround is matrix encoded into the two channels.
        public var surroundMode: MediaLiveClientTypes.Eac3SurroundMode?

        public init (
            attenuationControl: MediaLiveClientTypes.Eac3AttenuationControl? = nil,
            bitrate: Swift.Double? = nil,
            bitstreamMode: MediaLiveClientTypes.Eac3BitstreamMode? = nil,
            codingMode: MediaLiveClientTypes.Eac3CodingMode? = nil,
            dcFilter: MediaLiveClientTypes.Eac3DcFilter? = nil,
            dialnorm: Swift.Int? = nil,
            drcLine: MediaLiveClientTypes.Eac3DrcLine? = nil,
            drcRf: MediaLiveClientTypes.Eac3DrcRf? = nil,
            lfeControl: MediaLiveClientTypes.Eac3LfeControl? = nil,
            lfeFilter: MediaLiveClientTypes.Eac3LfeFilter? = nil,
            loRoCenterMixLevel: Swift.Double? = nil,
            loRoSurroundMixLevel: Swift.Double? = nil,
            ltRtCenterMixLevel: Swift.Double? = nil,
            ltRtSurroundMixLevel: Swift.Double? = nil,
            metadataControl: MediaLiveClientTypes.Eac3MetadataControl? = nil,
            passthroughControl: MediaLiveClientTypes.Eac3PassthroughControl? = nil,
            phaseControl: MediaLiveClientTypes.Eac3PhaseControl? = nil,
            stereoDownmix: MediaLiveClientTypes.Eac3StereoDownmix? = nil,
            surroundExMode: MediaLiveClientTypes.Eac3SurroundExMode? = nil,
            surroundMode: MediaLiveClientTypes.Eac3SurroundMode? = nil
        )
        {
            self.attenuationControl = attenuationControl
            self.bitrate = bitrate
            self.bitstreamMode = bitstreamMode
            self.codingMode = codingMode
            self.dcFilter = dcFilter
            self.dialnorm = dialnorm
            self.drcLine = drcLine
            self.drcRf = drcRf
            self.lfeControl = lfeControl
            self.lfeFilter = lfeFilter
            self.loRoCenterMixLevel = loRoCenterMixLevel
            self.loRoSurroundMixLevel = loRoSurroundMixLevel
            self.ltRtCenterMixLevel = ltRtCenterMixLevel
            self.ltRtSurroundMixLevel = ltRtSurroundMixLevel
            self.metadataControl = metadataControl
            self.passthroughControl = passthroughControl
            self.phaseControl = phaseControl
            self.stereoDownmix = stereoDownmix
            self.surroundExMode = surroundExMode
            self.surroundMode = surroundMode
        }
    }

}
