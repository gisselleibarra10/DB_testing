// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension MediaLiveClientTypes.M3u8Settings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case audioFramesPerPes = "audioFramesPerPes"
        case audioPids = "audioPids"
        case ecmPid = "ecmPid"
        case nielsenId3Behavior = "nielsenId3Behavior"
        case patInterval = "patInterval"
        case pcrControl = "pcrControl"
        case pcrPeriod = "pcrPeriod"
        case pcrPid = "pcrPid"
        case pmtInterval = "pmtInterval"
        case pmtPid = "pmtPid"
        case programNum = "programNum"
        case scte35Behavior = "scte35Behavior"
        case scte35Pid = "scte35Pid"
        case timedMetadataBehavior = "timedMetadataBehavior"
        case timedMetadataPid = "timedMetadataPid"
        case transportStreamId = "transportStreamId"
        case videoPid = "videoPid"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let audioFramesPerPes = self.audioFramesPerPes {
            try encodeContainer.encode(audioFramesPerPes, forKey: .audioFramesPerPes)
        }
        if let audioPids = self.audioPids {
            try encodeContainer.encode(audioPids, forKey: .audioPids)
        }
        if let ecmPid = self.ecmPid {
            try encodeContainer.encode(ecmPid, forKey: .ecmPid)
        }
        if let nielsenId3Behavior = self.nielsenId3Behavior {
            try encodeContainer.encode(nielsenId3Behavior.rawValue, forKey: .nielsenId3Behavior)
        }
        if let patInterval = self.patInterval {
            try encodeContainer.encode(patInterval, forKey: .patInterval)
        }
        if let pcrControl = self.pcrControl {
            try encodeContainer.encode(pcrControl.rawValue, forKey: .pcrControl)
        }
        if let pcrPeriod = self.pcrPeriod {
            try encodeContainer.encode(pcrPeriod, forKey: .pcrPeriod)
        }
        if let pcrPid = self.pcrPid {
            try encodeContainer.encode(pcrPid, forKey: .pcrPid)
        }
        if let pmtInterval = self.pmtInterval {
            try encodeContainer.encode(pmtInterval, forKey: .pmtInterval)
        }
        if let pmtPid = self.pmtPid {
            try encodeContainer.encode(pmtPid, forKey: .pmtPid)
        }
        if let programNum = self.programNum {
            try encodeContainer.encode(programNum, forKey: .programNum)
        }
        if let scte35Behavior = self.scte35Behavior {
            try encodeContainer.encode(scte35Behavior.rawValue, forKey: .scte35Behavior)
        }
        if let scte35Pid = self.scte35Pid {
            try encodeContainer.encode(scte35Pid, forKey: .scte35Pid)
        }
        if let timedMetadataBehavior = self.timedMetadataBehavior {
            try encodeContainer.encode(timedMetadataBehavior.rawValue, forKey: .timedMetadataBehavior)
        }
        if let timedMetadataPid = self.timedMetadataPid {
            try encodeContainer.encode(timedMetadataPid, forKey: .timedMetadataPid)
        }
        if let transportStreamId = self.transportStreamId {
            try encodeContainer.encode(transportStreamId, forKey: .transportStreamId)
        }
        if let videoPid = self.videoPid {
            try encodeContainer.encode(videoPid, forKey: .videoPid)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let audioFramesPerPesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .audioFramesPerPes)
        audioFramesPerPes = audioFramesPerPesDecoded
        let audioPidsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .audioPids)
        audioPids = audioPidsDecoded
        let ecmPidDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ecmPid)
        ecmPid = ecmPidDecoded
        let nielsenId3BehaviorDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.M3u8NielsenId3Behavior.self, forKey: .nielsenId3Behavior)
        nielsenId3Behavior = nielsenId3BehaviorDecoded
        let patIntervalDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .patInterval)
        patInterval = patIntervalDecoded
        let pcrControlDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.M3u8PcrControl.self, forKey: .pcrControl)
        pcrControl = pcrControlDecoded
        let pcrPeriodDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .pcrPeriod)
        pcrPeriod = pcrPeriodDecoded
        let pcrPidDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pcrPid)
        pcrPid = pcrPidDecoded
        let pmtIntervalDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .pmtInterval)
        pmtInterval = pmtIntervalDecoded
        let pmtPidDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pmtPid)
        pmtPid = pmtPidDecoded
        let programNumDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .programNum)
        programNum = programNumDecoded
        let scte35BehaviorDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.M3u8Scte35Behavior.self, forKey: .scte35Behavior)
        scte35Behavior = scte35BehaviorDecoded
        let scte35PidDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .scte35Pid)
        scte35Pid = scte35PidDecoded
        let timedMetadataBehaviorDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.M3u8TimedMetadataBehavior.self, forKey: .timedMetadataBehavior)
        timedMetadataBehavior = timedMetadataBehaviorDecoded
        let timedMetadataPidDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .timedMetadataPid)
        timedMetadataPid = timedMetadataPidDecoded
        let transportStreamIdDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .transportStreamId)
        transportStreamId = transportStreamIdDecoded
        let videoPidDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .videoPid)
        videoPid = videoPidDecoded
    }
}
