// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension MediaLiveClientTypes.OutputGroupSettings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case archiveGroupSettings = "archiveGroupSettings"
        case frameCaptureGroupSettings = "frameCaptureGroupSettings"
        case hlsGroupSettings = "hlsGroupSettings"
        case mediaPackageGroupSettings = "mediaPackageGroupSettings"
        case msSmoothGroupSettings = "msSmoothGroupSettings"
        case multiplexGroupSettings = "multiplexGroupSettings"
        case rtmpGroupSettings = "rtmpGroupSettings"
        case udpGroupSettings = "udpGroupSettings"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let archiveGroupSettings = self.archiveGroupSettings {
            try encodeContainer.encode(archiveGroupSettings, forKey: .archiveGroupSettings)
        }
        if let frameCaptureGroupSettings = self.frameCaptureGroupSettings {
            try encodeContainer.encode(frameCaptureGroupSettings, forKey: .frameCaptureGroupSettings)
        }
        if let hlsGroupSettings = self.hlsGroupSettings {
            try encodeContainer.encode(hlsGroupSettings, forKey: .hlsGroupSettings)
        }
        if let mediaPackageGroupSettings = self.mediaPackageGroupSettings {
            try encodeContainer.encode(mediaPackageGroupSettings, forKey: .mediaPackageGroupSettings)
        }
        if let msSmoothGroupSettings = self.msSmoothGroupSettings {
            try encodeContainer.encode(msSmoothGroupSettings, forKey: .msSmoothGroupSettings)
        }
        if let multiplexGroupSettings = self.multiplexGroupSettings {
            try encodeContainer.encode(multiplexGroupSettings, forKey: .multiplexGroupSettings)
        }
        if let rtmpGroupSettings = self.rtmpGroupSettings {
            try encodeContainer.encode(rtmpGroupSettings, forKey: .rtmpGroupSettings)
        }
        if let udpGroupSettings = self.udpGroupSettings {
            try encodeContainer.encode(udpGroupSettings, forKey: .udpGroupSettings)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let archiveGroupSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.ArchiveGroupSettings.self, forKey: .archiveGroupSettings)
        archiveGroupSettings = archiveGroupSettingsDecoded
        let frameCaptureGroupSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.FrameCaptureGroupSettings.self, forKey: .frameCaptureGroupSettings)
        frameCaptureGroupSettings = frameCaptureGroupSettingsDecoded
        let hlsGroupSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.HlsGroupSettings.self, forKey: .hlsGroupSettings)
        hlsGroupSettings = hlsGroupSettingsDecoded
        let mediaPackageGroupSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.MediaPackageGroupSettings.self, forKey: .mediaPackageGroupSettings)
        mediaPackageGroupSettings = mediaPackageGroupSettingsDecoded
        let msSmoothGroupSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.MsSmoothGroupSettings.self, forKey: .msSmoothGroupSettings)
        msSmoothGroupSettings = msSmoothGroupSettingsDecoded
        let multiplexGroupSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.MultiplexGroupSettings.self, forKey: .multiplexGroupSettings)
        multiplexGroupSettings = multiplexGroupSettingsDecoded
        let rtmpGroupSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.RtmpGroupSettings.self, forKey: .rtmpGroupSettings)
        rtmpGroupSettings = rtmpGroupSettingsDecoded
        let udpGroupSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.UdpGroupSettings.self, forKey: .udpGroupSettings)
        udpGroupSettings = udpGroupSettingsDecoded
    }
}
