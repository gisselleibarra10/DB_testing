// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension MediaLiveClientTypes.ScheduleActionSettings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case hlsId3SegmentTaggingSettings = "hlsId3SegmentTaggingSettings"
        case hlsTimedMetadataSettings = "hlsTimedMetadataSettings"
        case inputPrepareSettings = "inputPrepareSettings"
        case inputSwitchSettings = "inputSwitchSettings"
        case motionGraphicsImageActivateSettings = "motionGraphicsImageActivateSettings"
        case motionGraphicsImageDeactivateSettings = "motionGraphicsImageDeactivateSettings"
        case pauseStateSettings = "pauseStateSettings"
        case scte35ReturnToNetworkSettings = "scte35ReturnToNetworkSettings"
        case scte35SpliceInsertSettings = "scte35SpliceInsertSettings"
        case scte35TimeSignalSettings = "scte35TimeSignalSettings"
        case staticImageActivateSettings = "staticImageActivateSettings"
        case staticImageDeactivateSettings = "staticImageDeactivateSettings"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let hlsId3SegmentTaggingSettings = self.hlsId3SegmentTaggingSettings {
            try encodeContainer.encode(hlsId3SegmentTaggingSettings, forKey: .hlsId3SegmentTaggingSettings)
        }
        if let hlsTimedMetadataSettings = self.hlsTimedMetadataSettings {
            try encodeContainer.encode(hlsTimedMetadataSettings, forKey: .hlsTimedMetadataSettings)
        }
        if let inputPrepareSettings = self.inputPrepareSettings {
            try encodeContainer.encode(inputPrepareSettings, forKey: .inputPrepareSettings)
        }
        if let inputSwitchSettings = self.inputSwitchSettings {
            try encodeContainer.encode(inputSwitchSettings, forKey: .inputSwitchSettings)
        }
        if let motionGraphicsImageActivateSettings = self.motionGraphicsImageActivateSettings {
            try encodeContainer.encode(motionGraphicsImageActivateSettings, forKey: .motionGraphicsImageActivateSettings)
        }
        if let motionGraphicsImageDeactivateSettings = self.motionGraphicsImageDeactivateSettings {
            try encodeContainer.encode(motionGraphicsImageDeactivateSettings, forKey: .motionGraphicsImageDeactivateSettings)
        }
        if let pauseStateSettings = self.pauseStateSettings {
            try encodeContainer.encode(pauseStateSettings, forKey: .pauseStateSettings)
        }
        if let scte35ReturnToNetworkSettings = self.scte35ReturnToNetworkSettings {
            try encodeContainer.encode(scte35ReturnToNetworkSettings, forKey: .scte35ReturnToNetworkSettings)
        }
        if let scte35SpliceInsertSettings = self.scte35SpliceInsertSettings {
            try encodeContainer.encode(scte35SpliceInsertSettings, forKey: .scte35SpliceInsertSettings)
        }
        if let scte35TimeSignalSettings = self.scte35TimeSignalSettings {
            try encodeContainer.encode(scte35TimeSignalSettings, forKey: .scte35TimeSignalSettings)
        }
        if let staticImageActivateSettings = self.staticImageActivateSettings {
            try encodeContainer.encode(staticImageActivateSettings, forKey: .staticImageActivateSettings)
        }
        if let staticImageDeactivateSettings = self.staticImageDeactivateSettings {
            try encodeContainer.encode(staticImageDeactivateSettings, forKey: .staticImageDeactivateSettings)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let hlsId3SegmentTaggingSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.HlsId3SegmentTaggingScheduleActionSettings.self, forKey: .hlsId3SegmentTaggingSettings)
        hlsId3SegmentTaggingSettings = hlsId3SegmentTaggingSettingsDecoded
        let hlsTimedMetadataSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.HlsTimedMetadataScheduleActionSettings.self, forKey: .hlsTimedMetadataSettings)
        hlsTimedMetadataSettings = hlsTimedMetadataSettingsDecoded
        let inputPrepareSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.InputPrepareScheduleActionSettings.self, forKey: .inputPrepareSettings)
        inputPrepareSettings = inputPrepareSettingsDecoded
        let inputSwitchSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.InputSwitchScheduleActionSettings.self, forKey: .inputSwitchSettings)
        inputSwitchSettings = inputSwitchSettingsDecoded
        let motionGraphicsImageActivateSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.MotionGraphicsActivateScheduleActionSettings.self, forKey: .motionGraphicsImageActivateSettings)
        motionGraphicsImageActivateSettings = motionGraphicsImageActivateSettingsDecoded
        let motionGraphicsImageDeactivateSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.MotionGraphicsDeactivateScheduleActionSettings.self, forKey: .motionGraphicsImageDeactivateSettings)
        motionGraphicsImageDeactivateSettings = motionGraphicsImageDeactivateSettingsDecoded
        let pauseStateSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.PauseStateScheduleActionSettings.self, forKey: .pauseStateSettings)
        pauseStateSettings = pauseStateSettingsDecoded
        let scte35ReturnToNetworkSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.Scte35ReturnToNetworkScheduleActionSettings.self, forKey: .scte35ReturnToNetworkSettings)
        scte35ReturnToNetworkSettings = scte35ReturnToNetworkSettingsDecoded
        let scte35SpliceInsertSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.Scte35SpliceInsertScheduleActionSettings.self, forKey: .scte35SpliceInsertSettings)
        scte35SpliceInsertSettings = scte35SpliceInsertSettingsDecoded
        let scte35TimeSignalSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.Scte35TimeSignalScheduleActionSettings.self, forKey: .scte35TimeSignalSettings)
        scte35TimeSignalSettings = scte35TimeSignalSettingsDecoded
        let staticImageActivateSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.StaticImageActivateScheduleActionSettings.self, forKey: .staticImageActivateSettings)
        staticImageActivateSettings = staticImageActivateSettingsDecoded
        let staticImageDeactivateSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.StaticImageDeactivateScheduleActionSettings.self, forKey: .staticImageDeactivateSettings)
        staticImageDeactivateSettings = staticImageDeactivateSettingsDecoded
    }
}
