// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension MediaLiveClientTypes.AudioOnlyHlsSettings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case audioGroupId = "audioGroupId"
        case audioOnlyImage = "audioOnlyImage"
        case audioTrackType = "audioTrackType"
        case segmentType = "segmentType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let audioGroupId = self.audioGroupId {
            try encodeContainer.encode(audioGroupId, forKey: .audioGroupId)
        }
        if let audioOnlyImage = self.audioOnlyImage {
            try encodeContainer.encode(audioOnlyImage, forKey: .audioOnlyImage)
        }
        if let audioTrackType = self.audioTrackType {
            try encodeContainer.encode(audioTrackType.rawValue, forKey: .audioTrackType)
        }
        if let segmentType = self.segmentType {
            try encodeContainer.encode(segmentType.rawValue, forKey: .segmentType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let audioGroupIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .audioGroupId)
        audioGroupId = audioGroupIdDecoded
        let audioOnlyImageDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.InputLocation.self, forKey: .audioOnlyImage)
        audioOnlyImage = audioOnlyImageDecoded
        let audioTrackTypeDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.AudioOnlyHlsTrackType.self, forKey: .audioTrackType)
        audioTrackType = audioTrackTypeDecoded
        let segmentTypeDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.AudioOnlyHlsSegmentType.self, forKey: .segmentType)
        segmentType = segmentTypeDecoded
    }
}
