// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension MediaLiveClientTypes.H265Settings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case adaptiveQuantization = "adaptiveQuantization"
        case afdSignaling = "afdSignaling"
        case alternativeTransferFunction = "alternativeTransferFunction"
        case bitrate = "bitrate"
        case bufSize = "bufSize"
        case colorMetadata = "colorMetadata"
        case colorSpaceSettings = "colorSpaceSettings"
        case filterSettings = "filterSettings"
        case fixedAfd = "fixedAfd"
        case flickerAq = "flickerAq"
        case framerateDenominator = "framerateDenominator"
        case framerateNumerator = "framerateNumerator"
        case gopClosedCadence = "gopClosedCadence"
        case gopSize = "gopSize"
        case gopSizeUnits = "gopSizeUnits"
        case level = "level"
        case lookAheadRateControl = "lookAheadRateControl"
        case maxBitrate = "maxBitrate"
        case minIInterval = "minIInterval"
        case parDenominator = "parDenominator"
        case parNumerator = "parNumerator"
        case profile = "profile"
        case qvbrQualityLevel = "qvbrQualityLevel"
        case rateControlMode = "rateControlMode"
        case scanType = "scanType"
        case sceneChangeDetect = "sceneChangeDetect"
        case slices = "slices"
        case tier = "tier"
        case timecodeInsertion = "timecodeInsertion"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let adaptiveQuantization = self.adaptiveQuantization {
            try encodeContainer.encode(adaptiveQuantization.rawValue, forKey: .adaptiveQuantization)
        }
        if let afdSignaling = self.afdSignaling {
            try encodeContainer.encode(afdSignaling.rawValue, forKey: .afdSignaling)
        }
        if let alternativeTransferFunction = self.alternativeTransferFunction {
            try encodeContainer.encode(alternativeTransferFunction.rawValue, forKey: .alternativeTransferFunction)
        }
        if let bitrate = self.bitrate {
            try encodeContainer.encode(bitrate, forKey: .bitrate)
        }
        if let bufSize = self.bufSize {
            try encodeContainer.encode(bufSize, forKey: .bufSize)
        }
        if let colorMetadata = self.colorMetadata {
            try encodeContainer.encode(colorMetadata.rawValue, forKey: .colorMetadata)
        }
        if let colorSpaceSettings = self.colorSpaceSettings {
            try encodeContainer.encode(colorSpaceSettings, forKey: .colorSpaceSettings)
        }
        if let filterSettings = self.filterSettings {
            try encodeContainer.encode(filterSettings, forKey: .filterSettings)
        }
        if let fixedAfd = self.fixedAfd {
            try encodeContainer.encode(fixedAfd.rawValue, forKey: .fixedAfd)
        }
        if let flickerAq = self.flickerAq {
            try encodeContainer.encode(flickerAq.rawValue, forKey: .flickerAq)
        }
        if let framerateDenominator = self.framerateDenominator {
            try encodeContainer.encode(framerateDenominator, forKey: .framerateDenominator)
        }
        if let framerateNumerator = self.framerateNumerator {
            try encodeContainer.encode(framerateNumerator, forKey: .framerateNumerator)
        }
        if let gopClosedCadence = self.gopClosedCadence {
            try encodeContainer.encode(gopClosedCadence, forKey: .gopClosedCadence)
        }
        if let gopSize = self.gopSize {
            try encodeContainer.encode(gopSize, forKey: .gopSize)
        }
        if let gopSizeUnits = self.gopSizeUnits {
            try encodeContainer.encode(gopSizeUnits.rawValue, forKey: .gopSizeUnits)
        }
        if let level = self.level {
            try encodeContainer.encode(level.rawValue, forKey: .level)
        }
        if let lookAheadRateControl = self.lookAheadRateControl {
            try encodeContainer.encode(lookAheadRateControl.rawValue, forKey: .lookAheadRateControl)
        }
        if let maxBitrate = self.maxBitrate {
            try encodeContainer.encode(maxBitrate, forKey: .maxBitrate)
        }
        if let minIInterval = self.minIInterval {
            try encodeContainer.encode(minIInterval, forKey: .minIInterval)
        }
        if let parDenominator = self.parDenominator {
            try encodeContainer.encode(parDenominator, forKey: .parDenominator)
        }
        if let parNumerator = self.parNumerator {
            try encodeContainer.encode(parNumerator, forKey: .parNumerator)
        }
        if let profile = self.profile {
            try encodeContainer.encode(profile.rawValue, forKey: .profile)
        }
        if let qvbrQualityLevel = self.qvbrQualityLevel {
            try encodeContainer.encode(qvbrQualityLevel, forKey: .qvbrQualityLevel)
        }
        if let rateControlMode = self.rateControlMode {
            try encodeContainer.encode(rateControlMode.rawValue, forKey: .rateControlMode)
        }
        if let scanType = self.scanType {
            try encodeContainer.encode(scanType.rawValue, forKey: .scanType)
        }
        if let sceneChangeDetect = self.sceneChangeDetect {
            try encodeContainer.encode(sceneChangeDetect.rawValue, forKey: .sceneChangeDetect)
        }
        if let slices = self.slices {
            try encodeContainer.encode(slices, forKey: .slices)
        }
        if let tier = self.tier {
            try encodeContainer.encode(tier.rawValue, forKey: .tier)
        }
        if let timecodeInsertion = self.timecodeInsertion {
            try encodeContainer.encode(timecodeInsertion.rawValue, forKey: .timecodeInsertion)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let adaptiveQuantizationDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.H265AdaptiveQuantization.self, forKey: .adaptiveQuantization)
        adaptiveQuantization = adaptiveQuantizationDecoded
        let afdSignalingDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.AfdSignaling.self, forKey: .afdSignaling)
        afdSignaling = afdSignalingDecoded
        let alternativeTransferFunctionDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.H265AlternativeTransferFunction.self, forKey: .alternativeTransferFunction)
        alternativeTransferFunction = alternativeTransferFunctionDecoded
        let bitrateDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .bitrate)
        bitrate = bitrateDecoded
        let bufSizeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .bufSize)
        bufSize = bufSizeDecoded
        let colorMetadataDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.H265ColorMetadata.self, forKey: .colorMetadata)
        colorMetadata = colorMetadataDecoded
        let colorSpaceSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.H265ColorSpaceSettings.self, forKey: .colorSpaceSettings)
        colorSpaceSettings = colorSpaceSettingsDecoded
        let filterSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.H265FilterSettings.self, forKey: .filterSettings)
        filterSettings = filterSettingsDecoded
        let fixedAfdDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.FixedAfd.self, forKey: .fixedAfd)
        fixedAfd = fixedAfdDecoded
        let flickerAqDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.H265FlickerAq.self, forKey: .flickerAq)
        flickerAq = flickerAqDecoded
        let framerateDenominatorDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .framerateDenominator)
        framerateDenominator = framerateDenominatorDecoded
        let framerateNumeratorDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .framerateNumerator)
        framerateNumerator = framerateNumeratorDecoded
        let gopClosedCadenceDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .gopClosedCadence)
        gopClosedCadence = gopClosedCadenceDecoded
        let gopSizeDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .gopSize)
        gopSize = gopSizeDecoded
        let gopSizeUnitsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.H265GopSizeUnits.self, forKey: .gopSizeUnits)
        gopSizeUnits = gopSizeUnitsDecoded
        let levelDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.H265Level.self, forKey: .level)
        level = levelDecoded
        let lookAheadRateControlDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.H265LookAheadRateControl.self, forKey: .lookAheadRateControl)
        lookAheadRateControl = lookAheadRateControlDecoded
        let maxBitrateDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxBitrate)
        maxBitrate = maxBitrateDecoded
        let minIIntervalDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .minIInterval)
        minIInterval = minIIntervalDecoded
        let parDenominatorDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .parDenominator)
        parDenominator = parDenominatorDecoded
        let parNumeratorDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .parNumerator)
        parNumerator = parNumeratorDecoded
        let profileDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.H265Profile.self, forKey: .profile)
        profile = profileDecoded
        let qvbrQualityLevelDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .qvbrQualityLevel)
        qvbrQualityLevel = qvbrQualityLevelDecoded
        let rateControlModeDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.H265RateControlMode.self, forKey: .rateControlMode)
        rateControlMode = rateControlModeDecoded
        let scanTypeDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.H265ScanType.self, forKey: .scanType)
        scanType = scanTypeDecoded
        let sceneChangeDetectDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.H265SceneChangeDetect.self, forKey: .sceneChangeDetect)
        sceneChangeDetect = sceneChangeDetectDecoded
        let slicesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .slices)
        slices = slicesDecoded
        let tierDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.H265Tier.self, forKey: .tier)
        tier = tierDecoded
        let timecodeInsertionDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.H265TimecodeInsertionBehavior.self, forKey: .timecodeInsertion)
        timecodeInsertion = timecodeInsertionDecoded
    }
}
