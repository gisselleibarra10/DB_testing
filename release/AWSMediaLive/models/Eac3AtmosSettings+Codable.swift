// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension MediaLiveClientTypes.Eac3AtmosSettings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bitrate = "bitrate"
        case codingMode = "codingMode"
        case dialnorm = "dialnorm"
        case drcLine = "drcLine"
        case drcRf = "drcRf"
        case heightTrim = "heightTrim"
        case surroundTrim = "surroundTrim"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let bitrate = self.bitrate {
            try encodeContainer.encode(bitrate, forKey: .bitrate)
        }
        if let codingMode = self.codingMode {
            try encodeContainer.encode(codingMode.rawValue, forKey: .codingMode)
        }
        if let dialnorm = self.dialnorm {
            try encodeContainer.encode(dialnorm, forKey: .dialnorm)
        }
        if let drcLine = self.drcLine {
            try encodeContainer.encode(drcLine.rawValue, forKey: .drcLine)
        }
        if let drcRf = self.drcRf {
            try encodeContainer.encode(drcRf.rawValue, forKey: .drcRf)
        }
        if let heightTrim = self.heightTrim {
            try encodeContainer.encode(heightTrim, forKey: .heightTrim)
        }
        if let surroundTrim = self.surroundTrim {
            try encodeContainer.encode(surroundTrim, forKey: .surroundTrim)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let bitrateDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .bitrate)
        bitrate = bitrateDecoded
        let codingModeDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.Eac3AtmosCodingMode.self, forKey: .codingMode)
        codingMode = codingModeDecoded
        let dialnormDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .dialnorm)
        dialnorm = dialnormDecoded
        let drcLineDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.Eac3AtmosDrcLine.self, forKey: .drcLine)
        drcLine = drcLineDecoded
        let drcRfDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.Eac3AtmosDrcRf.self, forKey: .drcRf)
        drcRf = drcRfDecoded
        let heightTrimDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .heightTrim)
        heightTrim = heightTrimDecoded
        let surroundTrimDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .surroundTrim)
        surroundTrim = surroundTrimDecoded
    }
}
