// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CreateChannelInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cdiInputSpecification = "cdiInputSpecification"
        case channelClass = "channelClass"
        case destinations = "destinations"
        case encoderSettings = "encoderSettings"
        case inputAttachments = "inputAttachments"
        case inputSpecification = "inputSpecification"
        case logLevel = "logLevel"
        case maintenance = "maintenance"
        case name = "name"
        case requestId = "requestId"
        case reserved = "reserved"
        case roleArn = "roleArn"
        case tags = "tags"
        case vpc = "vpc"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cdiInputSpecification = self.cdiInputSpecification {
            try encodeContainer.encode(cdiInputSpecification, forKey: .cdiInputSpecification)
        }
        if let channelClass = self.channelClass {
            try encodeContainer.encode(channelClass.rawValue, forKey: .channelClass)
        }
        if let destinations = destinations {
            var destinationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .destinations)
            for __listofoutputdestination0 in destinations {
                try destinationsContainer.encode(__listofoutputdestination0)
            }
        }
        if let encoderSettings = self.encoderSettings {
            try encodeContainer.encode(encoderSettings, forKey: .encoderSettings)
        }
        if let inputAttachments = inputAttachments {
            var inputAttachmentsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .inputAttachments)
            for __listofinputattachment0 in inputAttachments {
                try inputAttachmentsContainer.encode(__listofinputattachment0)
            }
        }
        if let inputSpecification = self.inputSpecification {
            try encodeContainer.encode(inputSpecification, forKey: .inputSpecification)
        }
        if let logLevel = self.logLevel {
            try encodeContainer.encode(logLevel.rawValue, forKey: .logLevel)
        }
        if let maintenance = self.maintenance {
            try encodeContainer.encode(maintenance, forKey: .maintenance)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let requestId = self.requestId {
            try encodeContainer.encode(requestId, forKey: .requestId)
        }
        if let reserved = self.reserved {
            try encodeContainer.encode(reserved, forKey: .reserved)
        }
        if let roleArn = self.roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, tags0) in tags {
                try tagsContainer.encode(tags0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let vpc = self.vpc {
            try encodeContainer.encode(vpc, forKey: .vpc)
        }
    }
}
