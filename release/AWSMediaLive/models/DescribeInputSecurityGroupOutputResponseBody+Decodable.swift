// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeInputSecurityGroupOutputResponseBody: Swift.Equatable {
    let arn: Swift.String?
    let id: Swift.String?
    let inputs: [Swift.String]?
    let state: MediaLiveClientTypes.InputSecurityGroupState?
    let tags: [Swift.String:Swift.String]?
    let whitelistRules: [MediaLiveClientTypes.InputWhitelistRule]?
}

extension DescribeInputSecurityGroupOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "arn"
        case id = "id"
        case inputs = "inputs"
        case state = "state"
        case tags = "tags"
        case whitelistRules = "whitelistRules"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let inputsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .inputs)
        var inputsDecoded0:[Swift.String]? = nil
        if let inputsContainer = inputsContainer {
            inputsDecoded0 = [Swift.String]()
            for string0 in inputsContainer {
                if let string0 = string0 {
                    inputsDecoded0?.append(string0)
                }
            }
        }
        inputs = inputsDecoded0
        let stateDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.InputSecurityGroupState.self, forKey: .state)
        state = stateDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, __string0) in tagsContainer {
                if let __string0 = __string0 {
                    tagsDecoded0?[key0] = __string0
                }
            }
        }
        tags = tagsDecoded0
        let whitelistRulesContainer = try containerValues.decodeIfPresent([MediaLiveClientTypes.InputWhitelistRule?].self, forKey: .whitelistRules)
        var whitelistRulesDecoded0:[MediaLiveClientTypes.InputWhitelistRule]? = nil
        if let whitelistRulesContainer = whitelistRulesContainer {
            whitelistRulesDecoded0 = [MediaLiveClientTypes.InputWhitelistRule]()
            for structure0 in whitelistRulesContainer {
                if let structure0 = structure0 {
                    whitelistRulesDecoded0?.append(structure0)
                }
            }
        }
        whitelistRules = whitelistRulesDecoded0
    }
}
