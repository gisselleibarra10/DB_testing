// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension MediaLiveClientTypes.MsSmoothGroupSettings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case acquisitionPointId = "acquisitionPointId"
        case audioOnlyTimecodeControl = "audioOnlyTimecodeControl"
        case certificateMode = "certificateMode"
        case connectionRetryInterval = "connectionRetryInterval"
        case destination = "destination"
        case eventId = "eventId"
        case eventIdMode = "eventIdMode"
        case eventStopBehavior = "eventStopBehavior"
        case filecacheDuration = "filecacheDuration"
        case fragmentLength = "fragmentLength"
        case inputLossAction = "inputLossAction"
        case numRetries = "numRetries"
        case restartDelay = "restartDelay"
        case segmentationMode = "segmentationMode"
        case sendDelayMs = "sendDelayMs"
        case sparseTrackType = "sparseTrackType"
        case streamManifestBehavior = "streamManifestBehavior"
        case timestampOffset = "timestampOffset"
        case timestampOffsetMode = "timestampOffsetMode"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let acquisitionPointId = self.acquisitionPointId {
            try encodeContainer.encode(acquisitionPointId, forKey: .acquisitionPointId)
        }
        if let audioOnlyTimecodeControl = self.audioOnlyTimecodeControl {
            try encodeContainer.encode(audioOnlyTimecodeControl.rawValue, forKey: .audioOnlyTimecodeControl)
        }
        if let certificateMode = self.certificateMode {
            try encodeContainer.encode(certificateMode.rawValue, forKey: .certificateMode)
        }
        if let connectionRetryInterval = self.connectionRetryInterval {
            try encodeContainer.encode(connectionRetryInterval, forKey: .connectionRetryInterval)
        }
        if let destination = self.destination {
            try encodeContainer.encode(destination, forKey: .destination)
        }
        if let eventId = self.eventId {
            try encodeContainer.encode(eventId, forKey: .eventId)
        }
        if let eventIdMode = self.eventIdMode {
            try encodeContainer.encode(eventIdMode.rawValue, forKey: .eventIdMode)
        }
        if let eventStopBehavior = self.eventStopBehavior {
            try encodeContainer.encode(eventStopBehavior.rawValue, forKey: .eventStopBehavior)
        }
        if let filecacheDuration = self.filecacheDuration {
            try encodeContainer.encode(filecacheDuration, forKey: .filecacheDuration)
        }
        if let fragmentLength = self.fragmentLength {
            try encodeContainer.encode(fragmentLength, forKey: .fragmentLength)
        }
        if let inputLossAction = self.inputLossAction {
            try encodeContainer.encode(inputLossAction.rawValue, forKey: .inputLossAction)
        }
        if let numRetries = self.numRetries {
            try encodeContainer.encode(numRetries, forKey: .numRetries)
        }
        if let restartDelay = self.restartDelay {
            try encodeContainer.encode(restartDelay, forKey: .restartDelay)
        }
        if let segmentationMode = self.segmentationMode {
            try encodeContainer.encode(segmentationMode.rawValue, forKey: .segmentationMode)
        }
        if let sendDelayMs = self.sendDelayMs {
            try encodeContainer.encode(sendDelayMs, forKey: .sendDelayMs)
        }
        if let sparseTrackType = self.sparseTrackType {
            try encodeContainer.encode(sparseTrackType.rawValue, forKey: .sparseTrackType)
        }
        if let streamManifestBehavior = self.streamManifestBehavior {
            try encodeContainer.encode(streamManifestBehavior.rawValue, forKey: .streamManifestBehavior)
        }
        if let timestampOffset = self.timestampOffset {
            try encodeContainer.encode(timestampOffset, forKey: .timestampOffset)
        }
        if let timestampOffsetMode = self.timestampOffsetMode {
            try encodeContainer.encode(timestampOffsetMode.rawValue, forKey: .timestampOffsetMode)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let acquisitionPointIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .acquisitionPointId)
        acquisitionPointId = acquisitionPointIdDecoded
        let audioOnlyTimecodeControlDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.SmoothGroupAudioOnlyTimecodeControl.self, forKey: .audioOnlyTimecodeControl)
        audioOnlyTimecodeControl = audioOnlyTimecodeControlDecoded
        let certificateModeDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.SmoothGroupCertificateMode.self, forKey: .certificateMode)
        certificateMode = certificateModeDecoded
        let connectionRetryIntervalDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .connectionRetryInterval)
        connectionRetryInterval = connectionRetryIntervalDecoded
        let destinationDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.OutputLocationRef.self, forKey: .destination)
        destination = destinationDecoded
        let eventIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .eventId)
        eventId = eventIdDecoded
        let eventIdModeDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.SmoothGroupEventIdMode.self, forKey: .eventIdMode)
        eventIdMode = eventIdModeDecoded
        let eventStopBehaviorDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.SmoothGroupEventStopBehavior.self, forKey: .eventStopBehavior)
        eventStopBehavior = eventStopBehaviorDecoded
        let filecacheDurationDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .filecacheDuration)
        filecacheDuration = filecacheDurationDecoded
        let fragmentLengthDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .fragmentLength)
        fragmentLength = fragmentLengthDecoded
        let inputLossActionDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.InputLossActionForMsSmoothOut.self, forKey: .inputLossAction)
        inputLossAction = inputLossActionDecoded
        let numRetriesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .numRetries)
        numRetries = numRetriesDecoded
        let restartDelayDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .restartDelay)
        restartDelay = restartDelayDecoded
        let segmentationModeDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.SmoothGroupSegmentationMode.self, forKey: .segmentationMode)
        segmentationMode = segmentationModeDecoded
        let sendDelayMsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .sendDelayMs)
        sendDelayMs = sendDelayMsDecoded
        let sparseTrackTypeDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.SmoothGroupSparseTrackType.self, forKey: .sparseTrackType)
        sparseTrackType = sparseTrackTypeDecoded
        let streamManifestBehaviorDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.SmoothGroupStreamManifestBehavior.self, forKey: .streamManifestBehavior)
        streamManifestBehavior = streamManifestBehaviorDecoded
        let timestampOffsetDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .timestampOffset)
        timestampOffset = timestampOffsetDecoded
        let timestampOffsetModeDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.SmoothGroupTimestampOffsetMode.self, forKey: .timestampOffsetMode)
        timestampOffsetMode = timestampOffsetModeDecoded
    }
}
