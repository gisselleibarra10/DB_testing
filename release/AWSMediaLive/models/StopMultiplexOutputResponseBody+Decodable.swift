// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct StopMultiplexOutputResponseBody: Swift.Equatable {
    let arn: Swift.String?
    let availabilityZones: [Swift.String]?
    let destinations: [MediaLiveClientTypes.MultiplexOutputDestination]?
    let id: Swift.String?
    let multiplexSettings: MediaLiveClientTypes.MultiplexSettings?
    let name: Swift.String?
    let pipelinesRunningCount: Swift.Int?
    let programCount: Swift.Int?
    let state: MediaLiveClientTypes.MultiplexState?
    let tags: [Swift.String:Swift.String]?
}

extension StopMultiplexOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "arn"
        case availabilityZones = "availabilityZones"
        case destinations = "destinations"
        case id = "id"
        case multiplexSettings = "multiplexSettings"
        case name = "name"
        case pipelinesRunningCount = "pipelinesRunningCount"
        case programCount = "programCount"
        case state = "state"
        case tags = "tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let availabilityZonesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .availabilityZones)
        var availabilityZonesDecoded0:[Swift.String]? = nil
        if let availabilityZonesContainer = availabilityZonesContainer {
            availabilityZonesDecoded0 = [Swift.String]()
            for string0 in availabilityZonesContainer {
                if let string0 = string0 {
                    availabilityZonesDecoded0?.append(string0)
                }
            }
        }
        availabilityZones = availabilityZonesDecoded0
        let destinationsContainer = try containerValues.decodeIfPresent([MediaLiveClientTypes.MultiplexOutputDestination?].self, forKey: .destinations)
        var destinationsDecoded0:[MediaLiveClientTypes.MultiplexOutputDestination]? = nil
        if let destinationsContainer = destinationsContainer {
            destinationsDecoded0 = [MediaLiveClientTypes.MultiplexOutputDestination]()
            for structure0 in destinationsContainer {
                if let structure0 = structure0 {
                    destinationsDecoded0?.append(structure0)
                }
            }
        }
        destinations = destinationsDecoded0
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let multiplexSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.MultiplexSettings.self, forKey: .multiplexSettings)
        multiplexSettings = multiplexSettingsDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let pipelinesRunningCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .pipelinesRunningCount)
        pipelinesRunningCount = pipelinesRunningCountDecoded
        let programCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .programCount)
        programCount = programCountDecoded
        let stateDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.MultiplexState.self, forKey: .state)
        state = stateDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, __string0) in tagsContainer {
                if let __string0 = __string0 {
                    tagsDecoded0?[key0] = __string0
                }
            }
        }
        tags = tagsDecoded0
    }
}
