// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension MediaLiveClientTypes.AudioSelectorSettings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case audioHlsRenditionSelection = "audioHlsRenditionSelection"
        case audioLanguageSelection = "audioLanguageSelection"
        case audioPidSelection = "audioPidSelection"
        case audioTrackSelection = "audioTrackSelection"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let audioHlsRenditionSelection = self.audioHlsRenditionSelection {
            try encodeContainer.encode(audioHlsRenditionSelection, forKey: .audioHlsRenditionSelection)
        }
        if let audioLanguageSelection = self.audioLanguageSelection {
            try encodeContainer.encode(audioLanguageSelection, forKey: .audioLanguageSelection)
        }
        if let audioPidSelection = self.audioPidSelection {
            try encodeContainer.encode(audioPidSelection, forKey: .audioPidSelection)
        }
        if let audioTrackSelection = self.audioTrackSelection {
            try encodeContainer.encode(audioTrackSelection, forKey: .audioTrackSelection)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let audioHlsRenditionSelectionDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.AudioHlsRenditionSelection.self, forKey: .audioHlsRenditionSelection)
        audioHlsRenditionSelection = audioHlsRenditionSelectionDecoded
        let audioLanguageSelectionDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.AudioLanguageSelection.self, forKey: .audioLanguageSelection)
        audioLanguageSelection = audioLanguageSelectionDecoded
        let audioPidSelectionDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.AudioPidSelection.self, forKey: .audioPidSelection)
        audioPidSelection = audioPidSelectionDecoded
        let audioTrackSelectionDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.AudioTrackSelection.self, forKey: .audioTrackSelection)
        audioTrackSelection = audioTrackSelectionDecoded
    }
}
