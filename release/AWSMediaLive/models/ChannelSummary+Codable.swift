// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension MediaLiveClientTypes.ChannelSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "arn"
        case cdiInputSpecification = "cdiInputSpecification"
        case channelClass = "channelClass"
        case destinations = "destinations"
        case egressEndpoints = "egressEndpoints"
        case id = "id"
        case inputAttachments = "inputAttachments"
        case inputSpecification = "inputSpecification"
        case logLevel = "logLevel"
        case maintenance = "maintenance"
        case name = "name"
        case pipelinesRunningCount = "pipelinesRunningCount"
        case roleArn = "roleArn"
        case state = "state"
        case tags = "tags"
        case vpc = "vpc"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = self.arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let cdiInputSpecification = self.cdiInputSpecification {
            try encodeContainer.encode(cdiInputSpecification, forKey: .cdiInputSpecification)
        }
        if let channelClass = self.channelClass {
            try encodeContainer.encode(channelClass.rawValue, forKey: .channelClass)
        }
        if let destinations = destinations {
            var destinationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .destinations)
            for __listofoutputdestination0 in destinations {
                try destinationsContainer.encode(__listofoutputdestination0)
            }
        }
        if let egressEndpoints = egressEndpoints {
            var egressEndpointsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .egressEndpoints)
            for __listofchannelegressendpoint0 in egressEndpoints {
                try egressEndpointsContainer.encode(__listofchannelegressendpoint0)
            }
        }
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let inputAttachments = inputAttachments {
            var inputAttachmentsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .inputAttachments)
            for __listofinputattachment0 in inputAttachments {
                try inputAttachmentsContainer.encode(__listofinputattachment0)
            }
        }
        if let inputSpecification = self.inputSpecification {
            try encodeContainer.encode(inputSpecification, forKey: .inputSpecification)
        }
        if let logLevel = self.logLevel {
            try encodeContainer.encode(logLevel.rawValue, forKey: .logLevel)
        }
        if let maintenance = self.maintenance {
            try encodeContainer.encode(maintenance, forKey: .maintenance)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let pipelinesRunningCount = self.pipelinesRunningCount {
            try encodeContainer.encode(pipelinesRunningCount, forKey: .pipelinesRunningCount)
        }
        if let roleArn = self.roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let state = self.state {
            try encodeContainer.encode(state.rawValue, forKey: .state)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, tags0) in tags {
                try tagsContainer.encode(tags0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let vpc = self.vpc {
            try encodeContainer.encode(vpc, forKey: .vpc)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let cdiInputSpecificationDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.CdiInputSpecification.self, forKey: .cdiInputSpecification)
        cdiInputSpecification = cdiInputSpecificationDecoded
        let channelClassDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.ChannelClass.self, forKey: .channelClass)
        channelClass = channelClassDecoded
        let destinationsContainer = try containerValues.decodeIfPresent([MediaLiveClientTypes.OutputDestination?].self, forKey: .destinations)
        var destinationsDecoded0:[MediaLiveClientTypes.OutputDestination]? = nil
        if let destinationsContainer = destinationsContainer {
            destinationsDecoded0 = [MediaLiveClientTypes.OutputDestination]()
            for structure0 in destinationsContainer {
                if let structure0 = structure0 {
                    destinationsDecoded0?.append(structure0)
                }
            }
        }
        destinations = destinationsDecoded0
        let egressEndpointsContainer = try containerValues.decodeIfPresent([MediaLiveClientTypes.ChannelEgressEndpoint?].self, forKey: .egressEndpoints)
        var egressEndpointsDecoded0:[MediaLiveClientTypes.ChannelEgressEndpoint]? = nil
        if let egressEndpointsContainer = egressEndpointsContainer {
            egressEndpointsDecoded0 = [MediaLiveClientTypes.ChannelEgressEndpoint]()
            for structure0 in egressEndpointsContainer {
                if let structure0 = structure0 {
                    egressEndpointsDecoded0?.append(structure0)
                }
            }
        }
        egressEndpoints = egressEndpointsDecoded0
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let inputAttachmentsContainer = try containerValues.decodeIfPresent([MediaLiveClientTypes.InputAttachment?].self, forKey: .inputAttachments)
        var inputAttachmentsDecoded0:[MediaLiveClientTypes.InputAttachment]? = nil
        if let inputAttachmentsContainer = inputAttachmentsContainer {
            inputAttachmentsDecoded0 = [MediaLiveClientTypes.InputAttachment]()
            for structure0 in inputAttachmentsContainer {
                if let structure0 = structure0 {
                    inputAttachmentsDecoded0?.append(structure0)
                }
            }
        }
        inputAttachments = inputAttachmentsDecoded0
        let inputSpecificationDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.InputSpecification.self, forKey: .inputSpecification)
        inputSpecification = inputSpecificationDecoded
        let logLevelDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.LogLevel.self, forKey: .logLevel)
        logLevel = logLevelDecoded
        let maintenanceDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.MaintenanceStatus.self, forKey: .maintenance)
        maintenance = maintenanceDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let pipelinesRunningCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .pipelinesRunningCount)
        pipelinesRunningCount = pipelinesRunningCountDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let stateDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.ChannelState.self, forKey: .state)
        state = stateDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, __string0) in tagsContainer {
                if let __string0 = __string0 {
                    tagsDecoded0?[key0] = __string0
                }
            }
        }
        tags = tagsDecoded0
        let vpcDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.VpcOutputSettingsDescription.self, forKey: .vpc)
        vpc = vpcDecoded
    }
}
