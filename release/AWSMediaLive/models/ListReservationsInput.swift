// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// Placeholder documentation for ListReservationsRequest
public struct ListReservationsInput: Swift.Equatable {
    /// Filter by channel class, 'STANDARD' or 'SINGLE_PIPELINE'
    public var channelClass: Swift.String?
    /// Filter by codec, 'AVC', 'HEVC', 'MPEG2', 'AUDIO', or 'LINK'
    public var codec: Swift.String?
    /// Placeholder documentation for MaxResults
    public var maxResults: Swift.Int?
    /// Filter by bitrate, 'MAX_10_MBPS', 'MAX_20_MBPS', or 'MAX_50_MBPS'
    public var maximumBitrate: Swift.String?
    /// Filter by framerate, 'MAX_30_FPS' or 'MAX_60_FPS'
    public var maximumFramerate: Swift.String?
    /// Placeholder documentation for __string
    public var nextToken: Swift.String?
    /// Filter by resolution, 'SD', 'HD', 'FHD', or 'UHD'
    public var resolution: Swift.String?
    /// Filter by resource type, 'INPUT', 'OUTPUT', 'MULTIPLEX', or 'CHANNEL'
    public var resourceType: Swift.String?
    /// Filter by special feature, 'ADVANCED_AUDIO' or 'AUDIO_NORMALIZATION'
    public var specialFeature: Swift.String?
    /// Filter by video quality, 'STANDARD', 'ENHANCED', or 'PREMIUM'
    public var videoQuality: Swift.String?

    public init (
        channelClass: Swift.String? = nil,
        codec: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        maximumBitrate: Swift.String? = nil,
        maximumFramerate: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        resolution: Swift.String? = nil,
        resourceType: Swift.String? = nil,
        specialFeature: Swift.String? = nil,
        videoQuality: Swift.String? = nil
    )
    {
        self.channelClass = channelClass
        self.codec = codec
        self.maxResults = maxResults
        self.maximumBitrate = maximumBitrate
        self.maximumFramerate = maximumFramerate
        self.nextToken = nextToken
        self.resolution = resolution
        self.resourceType = resourceType
        self.specialFeature = specialFeature
        self.videoQuality = videoQuality
    }
}
