// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension MediaLiveClientTypes {
    /// Encoder Settings
    public struct EncoderSettings: Swift.Equatable {
        /// Placeholder documentation for __listOfAudioDescription
        /// This member is required.
        public var audioDescriptions: [MediaLiveClientTypes.AudioDescription]?
        /// Settings for ad avail blanking.
        public var availBlanking: MediaLiveClientTypes.AvailBlanking?
        /// Event-wide configuration settings for ad avail insertion.
        public var availConfiguration: MediaLiveClientTypes.AvailConfiguration?
        /// Settings for blackout slate.
        public var blackoutSlate: MediaLiveClientTypes.BlackoutSlate?
        /// Settings for caption decriptions
        public var captionDescriptions: [MediaLiveClientTypes.CaptionDescription]?
        /// Feature Activations
        public var featureActivations: MediaLiveClientTypes.FeatureActivations?
        /// Configuration settings that apply to the event as a whole.
        public var globalConfiguration: MediaLiveClientTypes.GlobalConfiguration?
        /// Settings for motion graphics.
        public var motionGraphicsConfiguration: MediaLiveClientTypes.MotionGraphicsConfiguration?
        /// Nielsen configuration settings.
        public var nielsenConfiguration: MediaLiveClientTypes.NielsenConfiguration?
        /// Placeholder documentation for __listOfOutputGroup
        /// This member is required.
        public var outputGroups: [MediaLiveClientTypes.OutputGroup]?
        /// Contains settings used to acquire and adjust timecode information from inputs.
        /// This member is required.
        public var timecodeConfig: MediaLiveClientTypes.TimecodeConfig?
        /// Placeholder documentation for __listOfVideoDescription
        /// This member is required.
        public var videoDescriptions: [MediaLiveClientTypes.VideoDescription]?

        public init (
            audioDescriptions: [MediaLiveClientTypes.AudioDescription]? = nil,
            availBlanking: MediaLiveClientTypes.AvailBlanking? = nil,
            availConfiguration: MediaLiveClientTypes.AvailConfiguration? = nil,
            blackoutSlate: MediaLiveClientTypes.BlackoutSlate? = nil,
            captionDescriptions: [MediaLiveClientTypes.CaptionDescription]? = nil,
            featureActivations: MediaLiveClientTypes.FeatureActivations? = nil,
            globalConfiguration: MediaLiveClientTypes.GlobalConfiguration? = nil,
            motionGraphicsConfiguration: MediaLiveClientTypes.MotionGraphicsConfiguration? = nil,
            nielsenConfiguration: MediaLiveClientTypes.NielsenConfiguration? = nil,
            outputGroups: [MediaLiveClientTypes.OutputGroup]? = nil,
            timecodeConfig: MediaLiveClientTypes.TimecodeConfig? = nil,
            videoDescriptions: [MediaLiveClientTypes.VideoDescription]? = nil
        )
        {
            self.audioDescriptions = audioDescriptions
            self.availBlanking = availBlanking
            self.availConfiguration = availConfiguration
            self.blackoutSlate = blackoutSlate
            self.captionDescriptions = captionDescriptions
            self.featureActivations = featureActivations
            self.globalConfiguration = globalConfiguration
            self.motionGraphicsConfiguration = motionGraphicsConfiguration
            self.nielsenConfiguration = nielsenConfiguration
            self.outputGroups = outputGroups
            self.timecodeConfig = timecodeConfig
            self.videoDescriptions = videoDescriptions
        }
    }

}
