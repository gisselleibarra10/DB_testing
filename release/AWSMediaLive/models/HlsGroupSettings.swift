// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension MediaLiveClientTypes {
    /// Hls Group Settings
    public struct HlsGroupSettings: Swift.Equatable {
        /// Choose one or more ad marker types to pass SCTE35 signals through to this group of Apple HLS outputs.
        public var adMarkers: [MediaLiveClientTypes.HlsAdMarkers]?
        /// A partial URI prefix that will be prepended to each output in the media .m3u8 file. Can be used if base manifest is delivered from a different URL than the main .m3u8 file.
        public var baseUrlContent: Swift.String?
        /// Optional. One value per output group. This field is required only if you are completing Base URL content A, and the downstream system has notified you that the media files for pipeline 1 of all outputs are in a location different from the media files for pipeline 0.
        public var baseUrlContent1: Swift.String?
        /// A partial URI prefix that will be prepended to each output in the media .m3u8 file. Can be used if base manifest is delivered from a different URL than the main .m3u8 file.
        public var baseUrlManifest: Swift.String?
        /// Optional. One value per output group. Complete this field only if you are completing Base URL manifest A, and the downstream system has notified you that the child manifest files for pipeline 1 of all outputs are in a location different from the child manifest files for pipeline 0.
        public var baseUrlManifest1: Swift.String?
        /// Mapping of up to 4 caption channels to caption languages. Is only meaningful if captionLanguageSetting is set to "insert".
        public var captionLanguageMappings: [MediaLiveClientTypes.CaptionLanguageMapping]?
        /// Applies only to 608 Embedded output captions. insert: Include CLOSED-CAPTIONS lines in the manifest. Specify at least one language in the CC1 Language Code field. One CLOSED-CAPTION line is added for each Language Code you specify. Make sure to specify the languages in the order in which they appear in the original source (if the source is embedded format) or the order of the caption selectors (if the source is other than embedded). Otherwise, languages in the manifest will not match up properly with the output captions. none: Include CLOSED-CAPTIONS=NONE line in the manifest. omit: Omit any CLOSED-CAPTIONS line from the manifest.
        public var captionLanguageSetting: MediaLiveClientTypes.HlsCaptionLanguageSetting?
        /// When set to "disabled", sets the #EXT-X-ALLOW-CACHE:no tag in the manifest, which prevents clients from saving media segments for later replay.
        public var clientCache: MediaLiveClientTypes.HlsClientCache?
        /// Specification to use (RFC-6381 or the default RFC-4281) during m3u8 playlist generation.
        public var codecSpecification: MediaLiveClientTypes.HlsCodecSpecification?
        /// For use with encryptionType. This is a 128-bit, 16-byte hex value represented by a 32-character text string. If ivSource is set to "explicit" then this parameter is required and is used as the IV for encryption.
        public var constantIv: Swift.String?
        /// A directory or HTTP destination for the HLS segments, manifest files, and encryption keys (if enabled).
        /// This member is required.
        public var destination: MediaLiveClientTypes.OutputLocationRef?
        /// Place segments in subdirectories.
        public var directoryStructure: MediaLiveClientTypes.HlsDirectoryStructure?
        /// Specifies whether to insert EXT-X-DISCONTINUITY tags in the HLS child manifests for this output group. Typically, choose Insert because these tags are required in the manifest (according to the HLS specification) and serve an important purpose. Choose Never Insert only if the downstream system is doing real-time failover (without using the MediaLive automatic failover feature) and only if that downstream system has advised you to exclude the tags.
        public var discontinuityTags: MediaLiveClientTypes.HlsDiscontinuityTags?
        /// Encrypts the segments with the given encryption scheme. Exclude this parameter if no encryption is desired.
        public var encryptionType: MediaLiveClientTypes.HlsEncryptionType?
        /// Parameters that control interactions with the CDN.
        public var hlsCdnSettings: MediaLiveClientTypes.HlsCdnSettings?
        /// State of HLS ID3 Segment Tagging
        public var hlsId3SegmentTagging: MediaLiveClientTypes.HlsId3SegmentTaggingState?
        /// DISABLED: Do not create an I-frame-only manifest, but do create the master and media manifests (according to the Output Selection field). STANDARD: Create an I-frame-only manifest for each output that contains video, as well as the other manifests (according to the Output Selection field). The I-frame manifest contains a #EXT-X-I-FRAMES-ONLY tag to indicate it is I-frame only, and one or more #EXT-X-BYTERANGE entries identifying the I-frame position. For example, #EXT-X-BYTERANGE:160364@1461888"
        public var iFrameOnlyPlaylists: MediaLiveClientTypes.IFrameOnlyPlaylistType?
        /// Specifies whether to include the final (incomplete) segment in the media output when the pipeline stops producing output because of a channel stop, a channel pause or a loss of input to the pipeline. Auto means that MediaLive decides whether to include the final segment, depending on the channel class and the types of output groups. Suppress means to never include the incomplete segment. We recommend you choose Auto and let MediaLive control the behavior.
        public var incompleteSegmentBehavior: MediaLiveClientTypes.HlsIncompleteSegmentBehavior?
        /// Applies only if Mode field is LIVE. Specifies the maximum number of segments in the media manifest file. After this maximum, older segments are removed from the media manifest. This number must be smaller than the number in the Keep Segments field.
        public var indexNSegments: Swift.Int?
        /// Parameter that control output group behavior on input loss.
        public var inputLossAction: MediaLiveClientTypes.InputLossActionForHlsOut?
        /// For use with encryptionType. The IV (Initialization Vector) is a 128-bit number used in conjunction with the key for encrypting blocks. If set to "include", IV is listed in the manifest, otherwise the IV is not in the manifest.
        public var ivInManifest: MediaLiveClientTypes.HlsIvInManifest?
        /// For use with encryptionType. The IV (Initialization Vector) is a 128-bit number used in conjunction with the key for encrypting blocks. If this setting is "followsSegmentNumber", it will cause the IV to change every segment (to match the segment number). If this is set to "explicit", you must enter a constantIv value.
        public var ivSource: MediaLiveClientTypes.HlsIvSource?
        /// Applies only if Mode field is LIVE. Specifies the number of media segments to retain in the destination directory. This number should be bigger than indexNSegments (Num segments). We recommend (value = (2 x indexNsegments) + 1). If this "keep segments" number is too low, the following might happen: the player is still reading a media manifest file that lists this segment, but that segment has been removed from the destination directory (as directed by indexNSegments). This situation would result in a 404 HTTP error on the player.
        public var keepSegments: Swift.Int?
        /// The value specifies how the key is represented in the resource identified by the URI. If parameter is absent, an implicit value of "identity" is used. A reverse DNS string can also be given.
        public var keyFormat: Swift.String?
        /// Either a single positive integer version value or a slash delimited list of version values (1/2/3).
        public var keyFormatVersions: Swift.String?
        /// The key provider settings.
        public var keyProviderSettings: MediaLiveClientTypes.KeyProviderSettings?
        /// When set to gzip, compresses HLS playlist.
        public var manifestCompression: MediaLiveClientTypes.HlsManifestCompression?
        /// Indicates whether the output manifest should use floating point or integer values for segment duration.
        public var manifestDurationFormat: MediaLiveClientTypes.HlsManifestDurationFormat?
        /// When set, minimumSegmentLength is enforced by looking ahead and back within the specified range for a nearby avail and extending the segment size if needed.
        public var minSegmentLength: Swift.Int?
        /// If "vod", all segments are indexed and kept permanently in the destination and manifest. If "live", only the number segments specified in keepSegments and indexNSegments are kept; newer segments replace older segments, which may prevent players from rewinding all the way to the beginning of the event. VOD mode uses HLS EXT-X-PLAYLIST-TYPE of EVENT while the channel is running, converting it to a "VOD" type manifest on completion of the stream.
        public var mode: MediaLiveClientTypes.HlsMode?
        /// MANIFESTS_AND_SEGMENTS: Generates manifests (master manifest, if applicable, and media manifests) for this output group. VARIANT_MANIFESTS_AND_SEGMENTS: Generates media manifests for this output group, but not a master manifest. SEGMENTS_ONLY: Does not generate any manifests for this output group.
        public var outputSelection: MediaLiveClientTypes.HlsOutputSelection?
        /// Includes or excludes EXT-X-PROGRAM-DATE-TIME tag in .m3u8 manifest files. The value is calculated using the program date time clock.
        public var programDateTime: MediaLiveClientTypes.HlsProgramDateTime?
        /// Specifies the algorithm used to drive the HLS EXT-X-PROGRAM-DATE-TIME clock. Options include: INITIALIZE_FROM_OUTPUT_TIMECODE: The PDT clock is initialized as a function of the first output timecode, then incremented by the EXTINF duration of each encoded segment. SYSTEM_CLOCK: The PDT clock is initialized as a function of the UTC wall clock, then incremented by the EXTINF duration of each encoded segment. If the PDT clock diverges from the wall clock by more than 500ms, it is resynchronized to the wall clock.
        public var programDateTimeClock: MediaLiveClientTypes.HlsProgramDateTimeClock?
        /// Period of insertion of EXT-X-PROGRAM-DATE-TIME entry, in seconds.
        public var programDateTimePeriod: Swift.Int?
        /// ENABLED: The master manifest (.m3u8 file) for each pipeline includes information about both pipelines: first its own media files, then the media files of the other pipeline. This feature allows playout device that support stale manifest detection to switch from one manifest to the other, when the current manifest seems to be stale. There are still two destinations and two master manifests, but both master manifests reference the media files from both pipelines. DISABLED: The master manifest (.m3u8 file) for each pipeline includes information about its own pipeline only. For an HLS output group with MediaPackage as the destination, the DISABLED behavior is always followed. MediaPackage regenerates the manifests it serves to players so a redundant manifest from MediaLive is irrelevant.
        public var redundantManifest: MediaLiveClientTypes.HlsRedundantManifest?
        /// Length of MPEG-2 Transport Stream segments to create (in seconds). Note that segments will end on the next keyframe after this number of seconds, so actual segment length may be longer.
        public var segmentLength: Swift.Int?
        /// useInputSegmentation has been deprecated. The configured segment size is always used.
        public var segmentationMode: MediaLiveClientTypes.HlsSegmentationMode?
        /// Number of segments to write to a subdirectory before starting a new one. directoryStructure must be subdirectoryPerStream for this setting to have an effect.
        public var segmentsPerSubdirectory: Swift.Int?
        /// Include or exclude RESOLUTION attribute for video in EXT-X-STREAM-INF tag of variant manifest.
        public var streamInfResolution: MediaLiveClientTypes.HlsStreamInfResolution?
        /// Indicates ID3 frame that has the timecode.
        public var timedMetadataId3Frame: MediaLiveClientTypes.HlsTimedMetadataId3Frame?
        /// Timed Metadata interval in seconds.
        public var timedMetadataId3Period: Swift.Int?
        /// Provides an extra millisecond delta offset to fine tune the timestamps.
        public var timestampDeltaMilliseconds: Swift.Int?
        /// SEGMENTED_FILES: Emit the program as segments - multiple .ts media files. SINGLE_FILE: Applies only if Mode field is VOD. Emit the program as a single .ts media file. The media manifest includes #EXT-X-BYTERANGE tags to index segments for playback. A typical use for this value is when sending the output to AWS Elemental MediaConvert, which can accept only a single media file. Playback while the channel is running is not guaranteed due to HTTP server caching.
        public var tsFileMode: MediaLiveClientTypes.HlsTsFileMode?

        public init (
            adMarkers: [MediaLiveClientTypes.HlsAdMarkers]? = nil,
            baseUrlContent: Swift.String? = nil,
            baseUrlContent1: Swift.String? = nil,
            baseUrlManifest: Swift.String? = nil,
            baseUrlManifest1: Swift.String? = nil,
            captionLanguageMappings: [MediaLiveClientTypes.CaptionLanguageMapping]? = nil,
            captionLanguageSetting: MediaLiveClientTypes.HlsCaptionLanguageSetting? = nil,
            clientCache: MediaLiveClientTypes.HlsClientCache? = nil,
            codecSpecification: MediaLiveClientTypes.HlsCodecSpecification? = nil,
            constantIv: Swift.String? = nil,
            destination: MediaLiveClientTypes.OutputLocationRef? = nil,
            directoryStructure: MediaLiveClientTypes.HlsDirectoryStructure? = nil,
            discontinuityTags: MediaLiveClientTypes.HlsDiscontinuityTags? = nil,
            encryptionType: MediaLiveClientTypes.HlsEncryptionType? = nil,
            hlsCdnSettings: MediaLiveClientTypes.HlsCdnSettings? = nil,
            hlsId3SegmentTagging: MediaLiveClientTypes.HlsId3SegmentTaggingState? = nil,
            iFrameOnlyPlaylists: MediaLiveClientTypes.IFrameOnlyPlaylistType? = nil,
            incompleteSegmentBehavior: MediaLiveClientTypes.HlsIncompleteSegmentBehavior? = nil,
            indexNSegments: Swift.Int? = nil,
            inputLossAction: MediaLiveClientTypes.InputLossActionForHlsOut? = nil,
            ivInManifest: MediaLiveClientTypes.HlsIvInManifest? = nil,
            ivSource: MediaLiveClientTypes.HlsIvSource? = nil,
            keepSegments: Swift.Int? = nil,
            keyFormat: Swift.String? = nil,
            keyFormatVersions: Swift.String? = nil,
            keyProviderSettings: MediaLiveClientTypes.KeyProviderSettings? = nil,
            manifestCompression: MediaLiveClientTypes.HlsManifestCompression? = nil,
            manifestDurationFormat: MediaLiveClientTypes.HlsManifestDurationFormat? = nil,
            minSegmentLength: Swift.Int? = nil,
            mode: MediaLiveClientTypes.HlsMode? = nil,
            outputSelection: MediaLiveClientTypes.HlsOutputSelection? = nil,
            programDateTime: MediaLiveClientTypes.HlsProgramDateTime? = nil,
            programDateTimeClock: MediaLiveClientTypes.HlsProgramDateTimeClock? = nil,
            programDateTimePeriod: Swift.Int? = nil,
            redundantManifest: MediaLiveClientTypes.HlsRedundantManifest? = nil,
            segmentLength: Swift.Int? = nil,
            segmentationMode: MediaLiveClientTypes.HlsSegmentationMode? = nil,
            segmentsPerSubdirectory: Swift.Int? = nil,
            streamInfResolution: MediaLiveClientTypes.HlsStreamInfResolution? = nil,
            timedMetadataId3Frame: MediaLiveClientTypes.HlsTimedMetadataId3Frame? = nil,
            timedMetadataId3Period: Swift.Int? = nil,
            timestampDeltaMilliseconds: Swift.Int? = nil,
            tsFileMode: MediaLiveClientTypes.HlsTsFileMode? = nil
        )
        {
            self.adMarkers = adMarkers
            self.baseUrlContent = baseUrlContent
            self.baseUrlContent1 = baseUrlContent1
            self.baseUrlManifest = baseUrlManifest
            self.baseUrlManifest1 = baseUrlManifest1
            self.captionLanguageMappings = captionLanguageMappings
            self.captionLanguageSetting = captionLanguageSetting
            self.clientCache = clientCache
            self.codecSpecification = codecSpecification
            self.constantIv = constantIv
            self.destination = destination
            self.directoryStructure = directoryStructure
            self.discontinuityTags = discontinuityTags
            self.encryptionType = encryptionType
            self.hlsCdnSettings = hlsCdnSettings
            self.hlsId3SegmentTagging = hlsId3SegmentTagging
            self.iFrameOnlyPlaylists = iFrameOnlyPlaylists
            self.incompleteSegmentBehavior = incompleteSegmentBehavior
            self.indexNSegments = indexNSegments
            self.inputLossAction = inputLossAction
            self.ivInManifest = ivInManifest
            self.ivSource = ivSource
            self.keepSegments = keepSegments
            self.keyFormat = keyFormat
            self.keyFormatVersions = keyFormatVersions
            self.keyProviderSettings = keyProviderSettings
            self.manifestCompression = manifestCompression
            self.manifestDurationFormat = manifestDurationFormat
            self.minSegmentLength = minSegmentLength
            self.mode = mode
            self.outputSelection = outputSelection
            self.programDateTime = programDateTime
            self.programDateTimeClock = programDateTimeClock
            self.programDateTimePeriod = programDateTimePeriod
            self.redundantManifest = redundantManifest
            self.segmentLength = segmentLength
            self.segmentationMode = segmentationMode
            self.segmentsPerSubdirectory = segmentsPerSubdirectory
            self.streamInfResolution = streamInfResolution
            self.timedMetadataId3Frame = timedMetadataId3Frame
            self.timedMetadataId3Period = timedMetadataId3Period
            self.timestampDeltaMilliseconds = timestampDeltaMilliseconds
            self.tsFileMode = tsFileMode
        }
    }

}
