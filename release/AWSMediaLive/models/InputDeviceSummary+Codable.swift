// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension MediaLiveClientTypes.InputDeviceSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "arn"
        case connectionState = "connectionState"
        case deviceSettingsSyncState = "deviceSettingsSyncState"
        case deviceUpdateStatus = "deviceUpdateStatus"
        case hdDeviceSettings = "hdDeviceSettings"
        case id = "id"
        case macAddress = "macAddress"
        case name = "name"
        case networkSettings = "networkSettings"
        case serialNumber = "serialNumber"
        case type = "type"
        case uhdDeviceSettings = "uhdDeviceSettings"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = self.arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let connectionState = self.connectionState {
            try encodeContainer.encode(connectionState.rawValue, forKey: .connectionState)
        }
        if let deviceSettingsSyncState = self.deviceSettingsSyncState {
            try encodeContainer.encode(deviceSettingsSyncState.rawValue, forKey: .deviceSettingsSyncState)
        }
        if let deviceUpdateStatus = self.deviceUpdateStatus {
            try encodeContainer.encode(deviceUpdateStatus.rawValue, forKey: .deviceUpdateStatus)
        }
        if let hdDeviceSettings = self.hdDeviceSettings {
            try encodeContainer.encode(hdDeviceSettings, forKey: .hdDeviceSettings)
        }
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let macAddress = self.macAddress {
            try encodeContainer.encode(macAddress, forKey: .macAddress)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let networkSettings = self.networkSettings {
            try encodeContainer.encode(networkSettings, forKey: .networkSettings)
        }
        if let serialNumber = self.serialNumber {
            try encodeContainer.encode(serialNumber, forKey: .serialNumber)
        }
        if let type = self.type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
        if let uhdDeviceSettings = self.uhdDeviceSettings {
            try encodeContainer.encode(uhdDeviceSettings, forKey: .uhdDeviceSettings)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let connectionStateDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.InputDeviceConnectionState.self, forKey: .connectionState)
        connectionState = connectionStateDecoded
        let deviceSettingsSyncStateDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.DeviceSettingsSyncState.self, forKey: .deviceSettingsSyncState)
        deviceSettingsSyncState = deviceSettingsSyncStateDecoded
        let deviceUpdateStatusDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.DeviceUpdateStatus.self, forKey: .deviceUpdateStatus)
        deviceUpdateStatus = deviceUpdateStatusDecoded
        let hdDeviceSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.InputDeviceHdSettings.self, forKey: .hdDeviceSettings)
        hdDeviceSettings = hdDeviceSettingsDecoded
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let macAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .macAddress)
        macAddress = macAddressDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let networkSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.InputDeviceNetworkSettings.self, forKey: .networkSettings)
        networkSettings = networkSettingsDecoded
        let serialNumberDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serialNumber)
        serialNumber = serialNumberDecoded
        let typeDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.InputDeviceType.self, forKey: .type)
        type = typeDecoded
        let uhdDeviceSettingsDecoded = try containerValues.decodeIfPresent(MediaLiveClientTypes.InputDeviceUhdSettings.self, forKey: .uhdDeviceSettings)
        uhdDeviceSettings = uhdDeviceSettingsDecoded
    }
}
