// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// Placeholder documentation for DescribeInputResponse
public struct DescribeInputOutputResponse: Swift.Equatable {
    /// The Unique ARN of the input (generated, immutable).
    public var arn: Swift.String?
    /// A list of channel IDs that that input is attached to (currently an input can only be attached to one channel).
    public var attachedChannels: [Swift.String]?
    /// A list of the destinations of the input (PUSH-type).
    public var destinations: [MediaLiveClientTypes.InputDestination]?
    /// The generated ID of the input (unique for user account, immutable).
    public var id: Swift.String?
    /// STANDARD - MediaLive expects two sources to be connected to this input. If the channel is also STANDARD, both sources will be ingested. If the channel is SINGLE_PIPELINE, only the first source will be ingested; the second source will always be ignored, even if the first source fails. SINGLE_PIPELINE - You can connect only one source to this input. If the ChannelClass is also SINGLE_PIPELINE, this value is valid. If the ChannelClass is STANDARD, this value is not valid because the channel requires two sources in the input.
    public var inputClass: MediaLiveClientTypes.InputClass?
    /// Settings for the input devices.
    public var inputDevices: [MediaLiveClientTypes.InputDeviceSettings]?
    /// A list of IDs for all Inputs which are partners of this one.
    public var inputPartnerIds: [Swift.String]?
    /// Certain pull input sources can be dynamic, meaning that they can have their URL's dynamically changes during input switch actions. Presently, this functionality only works with MP4_FILE and TS_FILE inputs.
    public var inputSourceType: MediaLiveClientTypes.InputSourceType?
    /// A list of MediaConnect Flows for this input.
    public var mediaConnectFlows: [MediaLiveClientTypes.MediaConnectFlow]?
    /// The user-assigned name (This is a mutable value).
    public var name: Swift.String?
    /// The Amazon Resource Name (ARN) of the role this input assumes during and after creation.
    public var roleArn: Swift.String?
    /// A list of IDs for all the Input Security Groups attached to the input.
    public var securityGroups: [Swift.String]?
    /// A list of the sources of the input (PULL-type).
    public var sources: [MediaLiveClientTypes.InputSource]?
    /// Placeholder documentation for InputState
    public var state: MediaLiveClientTypes.InputState?
    /// A collection of key-value pairs.
    public var tags: [Swift.String:Swift.String]?
    /// The different types of inputs that AWS Elemental MediaLive supports.
    public var type: MediaLiveClientTypes.InputType?

    public init (
        arn: Swift.String? = nil,
        attachedChannels: [Swift.String]? = nil,
        destinations: [MediaLiveClientTypes.InputDestination]? = nil,
        id: Swift.String? = nil,
        inputClass: MediaLiveClientTypes.InputClass? = nil,
        inputDevices: [MediaLiveClientTypes.InputDeviceSettings]? = nil,
        inputPartnerIds: [Swift.String]? = nil,
        inputSourceType: MediaLiveClientTypes.InputSourceType? = nil,
        mediaConnectFlows: [MediaLiveClientTypes.MediaConnectFlow]? = nil,
        name: Swift.String? = nil,
        roleArn: Swift.String? = nil,
        securityGroups: [Swift.String]? = nil,
        sources: [MediaLiveClientTypes.InputSource]? = nil,
        state: MediaLiveClientTypes.InputState? = nil,
        tags: [Swift.String:Swift.String]? = nil,
        type: MediaLiveClientTypes.InputType? = nil
    )
    {
        self.arn = arn
        self.attachedChannels = attachedChannels
        self.destinations = destinations
        self.id = id
        self.inputClass = inputClass
        self.inputDevices = inputDevices
        self.inputPartnerIds = inputPartnerIds
        self.inputSourceType = inputSourceType
        self.mediaConnectFlows = mediaConnectFlows
        self.name = name
        self.roleArn = roleArn
        self.securityGroups = securityGroups
        self.sources = sources
        self.state = state
        self.tags = tags
        self.type = type
    }
}
