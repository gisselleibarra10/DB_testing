// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// A structure that represents a decision task. Decision tasks are sent to deciders in order for them to make decisions.
public struct PollForDecisionTaskOutputResponse: Swift.Equatable {
    /// A paginated list of history events of the workflow execution. The decider uses this during the processing of the decision task.
    /// This member is required.
    public var events: [SwfClientTypes.HistoryEvent]?
    /// If a NextPageToken was returned by a previous call, there are more results available. To retrieve the next page of results, make the call again using the returned token in nextPageToken. Keep all other arguments unchanged. The configured maximumPageSize determines how many results can be returned in a single call.
    public var nextPageToken: Swift.String?
    /// The ID of the DecisionTaskStarted event of the previous decision task of this workflow execution that was processed by the decider. This can be used to determine the events in the history new since the last decision task received by the decider.
    public var previousStartedEventId: Swift.Int
    /// The ID of the DecisionTaskStarted event recorded in the history.
    /// This member is required.
    public var startedEventId: Swift.Int
    /// The opaque string used as a handle on the task. This token is used by workers to communicate progress and response information back to the system about the task.
    /// This member is required.
    public var taskToken: Swift.String?
    /// The workflow execution for which this decision task was created.
    /// This member is required.
    public var workflowExecution: SwfClientTypes.WorkflowExecution?
    /// The type of the workflow execution for which this decision task was created.
    /// This member is required.
    public var workflowType: SwfClientTypes.WorkflowType?

    public init (
        events: [SwfClientTypes.HistoryEvent]? = nil,
        nextPageToken: Swift.String? = nil,
        previousStartedEventId: Swift.Int = 0,
        startedEventId: Swift.Int = 0,
        taskToken: Swift.String? = nil,
        workflowExecution: SwfClientTypes.WorkflowExecution? = nil,
        workflowType: SwfClientTypes.WorkflowType? = nil
    )
    {
        self.events = events
        self.nextPageToken = nextPageToken
        self.previousStartedEventId = previousStartedEventId
        self.startedEventId = startedEventId
        self.taskToken = taskToken
        self.workflowExecution = workflowExecution
        self.workflowType = workflowType
    }
}
