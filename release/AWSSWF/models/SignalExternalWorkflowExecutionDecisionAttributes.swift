// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension SwfClientTypes {
    /// Provides the details of the SignalExternalWorkflowExecution decision. Access Control You can use IAM policies to control this decision's access to Amazon SWF resources as follows:
    ///
    /// * Use a Resource element with the domain name to limit the action to only specified domains.
    ///
    /// * Use an Action element to allow or deny permission to call this action.
    ///
    /// * You cannot use an IAM policy to constrain this action's parameters.
    ///
    ///
    /// If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's cause parameter is set to OPERATION_NOT_PERMITTED. For details and example IAM policies, see [Using IAM to Manage Access to Amazon SWF Workflows](https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html) in the Amazon SWF Developer Guide.
    public struct SignalExternalWorkflowExecutionDecisionAttributes: Swift.Equatable {
        /// The data attached to the event that can be used by the decider in subsequent decision tasks.
        public var control: Swift.String?
        /// The input data to be provided with the signal. The target workflow execution uses the signal name and input data to process the signal.
        public var input: Swift.String?
        /// The runId of the workflow execution to be signaled.
        public var runId: Swift.String?
        /// The name of the signal.The target workflow execution uses the signal name and input to process the signal.
        /// This member is required.
        public var signalName: Swift.String?
        /// The workflowId of the workflow execution to be signaled.
        /// This member is required.
        public var workflowId: Swift.String?

        public init (
            control: Swift.String? = nil,
            input: Swift.String? = nil,
            runId: Swift.String? = nil,
            signalName: Swift.String? = nil,
            workflowId: Swift.String? = nil
        )
        {
            self.control = control
            self.input = input
            self.runId = runId
            self.signalName = signalName
            self.workflowId = workflowId
        }
    }

}
