// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SwfClientTypes.LambdaFunctionScheduledEventAttributes: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case control
        case decisionTaskCompletedEventId
        case id
        case input
        case name
        case startToCloseTimeout
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let control = self.control {
            try encodeContainer.encode(control, forKey: .control)
        }
        if decisionTaskCompletedEventId != 0 {
            try encodeContainer.encode(decisionTaskCompletedEventId, forKey: .decisionTaskCompletedEventId)
        }
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let input = self.input {
            try encodeContainer.encode(input, forKey: .input)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let startToCloseTimeout = self.startToCloseTimeout {
            try encodeContainer.encode(startToCloseTimeout, forKey: .startToCloseTimeout)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let controlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .control)
        control = controlDecoded
        let inputDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .input)
        input = inputDecoded
        let startToCloseTimeoutDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .startToCloseTimeout)
        startToCloseTimeout = startToCloseTimeoutDecoded
        let decisionTaskCompletedEventIdDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .decisionTaskCompletedEventId) ?? 0
        decisionTaskCompletedEventId = decisionTaskCompletedEventIdDecoded
    }
}
