// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct RegisterActivityTypeInputBody: Swift.Equatable {
    let domain: Swift.String?
    let name: Swift.String?
    let version: Swift.String?
    let description: Swift.String?
    let defaultTaskStartToCloseTimeout: Swift.String?
    let defaultTaskHeartbeatTimeout: Swift.String?
    let defaultTaskList: SwfClientTypes.TaskList?
    let defaultTaskPriority: Swift.String?
    let defaultTaskScheduleToStartTimeout: Swift.String?
    let defaultTaskScheduleToCloseTimeout: Swift.String?
}

extension RegisterActivityTypeInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case defaultTaskHeartbeatTimeout
        case defaultTaskList
        case defaultTaskPriority
        case defaultTaskScheduleToCloseTimeout
        case defaultTaskScheduleToStartTimeout
        case defaultTaskStartToCloseTimeout
        case description
        case domain
        case name
        case version
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domain)
        domain = domainDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let versionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .version)
        version = versionDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let defaultTaskStartToCloseTimeoutDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .defaultTaskStartToCloseTimeout)
        defaultTaskStartToCloseTimeout = defaultTaskStartToCloseTimeoutDecoded
        let defaultTaskHeartbeatTimeoutDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .defaultTaskHeartbeatTimeout)
        defaultTaskHeartbeatTimeout = defaultTaskHeartbeatTimeoutDecoded
        let defaultTaskListDecoded = try containerValues.decodeIfPresent(SwfClientTypes.TaskList.self, forKey: .defaultTaskList)
        defaultTaskList = defaultTaskListDecoded
        let defaultTaskPriorityDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .defaultTaskPriority)
        defaultTaskPriority = defaultTaskPriorityDecoded
        let defaultTaskScheduleToStartTimeoutDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .defaultTaskScheduleToStartTimeout)
        defaultTaskScheduleToStartTimeout = defaultTaskScheduleToStartTimeoutDecoded
        let defaultTaskScheduleToCloseTimeoutDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .defaultTaskScheduleToCloseTimeout)
        defaultTaskScheduleToCloseTimeout = defaultTaskScheduleToCloseTimeoutDecoded
    }
}
