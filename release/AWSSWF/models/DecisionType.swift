// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension SwfClientTypes {
    public enum DecisionType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case canceltimer
        case cancelworkflowexecution
        case completeworkflowexecution
        case continueasnewworkflowexecution
        case failworkflowexecution
        case recordmarker
        case requestcancelactivitytask
        case requestcancelexternalworkflowexecution
        case scheduleactivitytask
        case schedulelambdafunction
        case signalexternalworkflowexecution
        case startchildworkflowexecution
        case starttimer
        case sdkUnknown(Swift.String)

        public static var allCases: [DecisionType] {
            return [
                .canceltimer,
                .cancelworkflowexecution,
                .completeworkflowexecution,
                .continueasnewworkflowexecution,
                .failworkflowexecution,
                .recordmarker,
                .requestcancelactivitytask,
                .requestcancelexternalworkflowexecution,
                .scheduleactivitytask,
                .schedulelambdafunction,
                .signalexternalworkflowexecution,
                .startchildworkflowexecution,
                .starttimer,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .canceltimer: return "CancelTimer"
            case .cancelworkflowexecution: return "CancelWorkflowExecution"
            case .completeworkflowexecution: return "CompleteWorkflowExecution"
            case .continueasnewworkflowexecution: return "ContinueAsNewWorkflowExecution"
            case .failworkflowexecution: return "FailWorkflowExecution"
            case .recordmarker: return "RecordMarker"
            case .requestcancelactivitytask: return "RequestCancelActivityTask"
            case .requestcancelexternalworkflowexecution: return "RequestCancelExternalWorkflowExecution"
            case .scheduleactivitytask: return "ScheduleActivityTask"
            case .schedulelambdafunction: return "ScheduleLambdaFunction"
            case .signalexternalworkflowexecution: return "SignalExternalWorkflowExecution"
            case .startchildworkflowexecution: return "StartChildWorkflowExecution"
            case .starttimer: return "StartTimer"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DecisionType(rawValue: rawValue) ?? DecisionType.sdkUnknown(rawValue)
        }
    }
}
