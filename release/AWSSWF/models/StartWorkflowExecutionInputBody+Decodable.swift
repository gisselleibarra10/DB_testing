// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct StartWorkflowExecutionInputBody: Swift.Equatable {
    let domain: Swift.String?
    let workflowId: Swift.String?
    let workflowType: SwfClientTypes.WorkflowType?
    let taskList: SwfClientTypes.TaskList?
    let taskPriority: Swift.String?
    let input: Swift.String?
    let executionStartToCloseTimeout: Swift.String?
    let tagList: [Swift.String]?
    let taskStartToCloseTimeout: Swift.String?
    let childPolicy: SwfClientTypes.ChildPolicy?
    let lambdaRole: Swift.String?
}

extension StartWorkflowExecutionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case childPolicy
        case domain
        case executionStartToCloseTimeout
        case input
        case lambdaRole
        case tagList
        case taskList
        case taskPriority
        case taskStartToCloseTimeout
        case workflowId
        case workflowType
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domain)
        domain = domainDecoded
        let workflowIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .workflowId)
        workflowId = workflowIdDecoded
        let workflowTypeDecoded = try containerValues.decodeIfPresent(SwfClientTypes.WorkflowType.self, forKey: .workflowType)
        workflowType = workflowTypeDecoded
        let taskListDecoded = try containerValues.decodeIfPresent(SwfClientTypes.TaskList.self, forKey: .taskList)
        taskList = taskListDecoded
        let taskPriorityDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .taskPriority)
        taskPriority = taskPriorityDecoded
        let inputDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .input)
        input = inputDecoded
        let executionStartToCloseTimeoutDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .executionStartToCloseTimeout)
        executionStartToCloseTimeout = executionStartToCloseTimeoutDecoded
        let tagListContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .tagList)
        var tagListDecoded0:[Swift.String]? = nil
        if let tagListContainer = tagListContainer {
            tagListDecoded0 = [Swift.String]()
            for string0 in tagListContainer {
                if let string0 = string0 {
                    tagListDecoded0?.append(string0)
                }
            }
        }
        tagList = tagListDecoded0
        let taskStartToCloseTimeoutDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .taskStartToCloseTimeout)
        taskStartToCloseTimeout = taskStartToCloseTimeoutDecoded
        let childPolicyDecoded = try containerValues.decodeIfPresent(SwfClientTypes.ChildPolicy.self, forKey: .childPolicy)
        childPolicy = childPolicyDecoded
        let lambdaRoleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lambdaRole)
        lambdaRole = lambdaRoleDecoded
    }
}
