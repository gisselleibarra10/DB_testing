// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SwfClientTypes.HistoryEvent: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case activityTaskCancelRequestedEventAttributes
        case activityTaskCanceledEventAttributes
        case activityTaskCompletedEventAttributes
        case activityTaskFailedEventAttributes
        case activityTaskScheduledEventAttributes
        case activityTaskStartedEventAttributes
        case activityTaskTimedOutEventAttributes
        case cancelTimerFailedEventAttributes
        case cancelWorkflowExecutionFailedEventAttributes
        case childWorkflowExecutionCanceledEventAttributes
        case childWorkflowExecutionCompletedEventAttributes
        case childWorkflowExecutionFailedEventAttributes
        case childWorkflowExecutionStartedEventAttributes
        case childWorkflowExecutionTerminatedEventAttributes
        case childWorkflowExecutionTimedOutEventAttributes
        case completeWorkflowExecutionFailedEventAttributes
        case continueAsNewWorkflowExecutionFailedEventAttributes
        case decisionTaskCompletedEventAttributes
        case decisionTaskScheduledEventAttributes
        case decisionTaskStartedEventAttributes
        case decisionTaskTimedOutEventAttributes
        case eventId
        case eventTimestamp
        case eventType
        case externalWorkflowExecutionCancelRequestedEventAttributes
        case externalWorkflowExecutionSignaledEventAttributes
        case failWorkflowExecutionFailedEventAttributes
        case lambdaFunctionCompletedEventAttributes
        case lambdaFunctionFailedEventAttributes
        case lambdaFunctionScheduledEventAttributes
        case lambdaFunctionStartedEventAttributes
        case lambdaFunctionTimedOutEventAttributes
        case markerRecordedEventAttributes
        case recordMarkerFailedEventAttributes
        case requestCancelActivityTaskFailedEventAttributes
        case requestCancelExternalWorkflowExecutionFailedEventAttributes
        case requestCancelExternalWorkflowExecutionInitiatedEventAttributes
        case scheduleActivityTaskFailedEventAttributes
        case scheduleLambdaFunctionFailedEventAttributes
        case signalExternalWorkflowExecutionFailedEventAttributes
        case signalExternalWorkflowExecutionInitiatedEventAttributes
        case startChildWorkflowExecutionFailedEventAttributes
        case startChildWorkflowExecutionInitiatedEventAttributes
        case startLambdaFunctionFailedEventAttributes
        case startTimerFailedEventAttributes
        case timerCanceledEventAttributes
        case timerFiredEventAttributes
        case timerStartedEventAttributes
        case workflowExecutionCancelRequestedEventAttributes
        case workflowExecutionCanceledEventAttributes
        case workflowExecutionCompletedEventAttributes
        case workflowExecutionContinuedAsNewEventAttributes
        case workflowExecutionFailedEventAttributes
        case workflowExecutionSignaledEventAttributes
        case workflowExecutionStartedEventAttributes
        case workflowExecutionTerminatedEventAttributes
        case workflowExecutionTimedOutEventAttributes
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let activityTaskCancelRequestedEventAttributes = self.activityTaskCancelRequestedEventAttributes {
            try encodeContainer.encode(activityTaskCancelRequestedEventAttributes, forKey: .activityTaskCancelRequestedEventAttributes)
        }
        if let activityTaskCanceledEventAttributes = self.activityTaskCanceledEventAttributes {
            try encodeContainer.encode(activityTaskCanceledEventAttributes, forKey: .activityTaskCanceledEventAttributes)
        }
        if let activityTaskCompletedEventAttributes = self.activityTaskCompletedEventAttributes {
            try encodeContainer.encode(activityTaskCompletedEventAttributes, forKey: .activityTaskCompletedEventAttributes)
        }
        if let activityTaskFailedEventAttributes = self.activityTaskFailedEventAttributes {
            try encodeContainer.encode(activityTaskFailedEventAttributes, forKey: .activityTaskFailedEventAttributes)
        }
        if let activityTaskScheduledEventAttributes = self.activityTaskScheduledEventAttributes {
            try encodeContainer.encode(activityTaskScheduledEventAttributes, forKey: .activityTaskScheduledEventAttributes)
        }
        if let activityTaskStartedEventAttributes = self.activityTaskStartedEventAttributes {
            try encodeContainer.encode(activityTaskStartedEventAttributes, forKey: .activityTaskStartedEventAttributes)
        }
        if let activityTaskTimedOutEventAttributes = self.activityTaskTimedOutEventAttributes {
            try encodeContainer.encode(activityTaskTimedOutEventAttributes, forKey: .activityTaskTimedOutEventAttributes)
        }
        if let cancelTimerFailedEventAttributes = self.cancelTimerFailedEventAttributes {
            try encodeContainer.encode(cancelTimerFailedEventAttributes, forKey: .cancelTimerFailedEventAttributes)
        }
        if let cancelWorkflowExecutionFailedEventAttributes = self.cancelWorkflowExecutionFailedEventAttributes {
            try encodeContainer.encode(cancelWorkflowExecutionFailedEventAttributes, forKey: .cancelWorkflowExecutionFailedEventAttributes)
        }
        if let childWorkflowExecutionCanceledEventAttributes = self.childWorkflowExecutionCanceledEventAttributes {
            try encodeContainer.encode(childWorkflowExecutionCanceledEventAttributes, forKey: .childWorkflowExecutionCanceledEventAttributes)
        }
        if let childWorkflowExecutionCompletedEventAttributes = self.childWorkflowExecutionCompletedEventAttributes {
            try encodeContainer.encode(childWorkflowExecutionCompletedEventAttributes, forKey: .childWorkflowExecutionCompletedEventAttributes)
        }
        if let childWorkflowExecutionFailedEventAttributes = self.childWorkflowExecutionFailedEventAttributes {
            try encodeContainer.encode(childWorkflowExecutionFailedEventAttributes, forKey: .childWorkflowExecutionFailedEventAttributes)
        }
        if let childWorkflowExecutionStartedEventAttributes = self.childWorkflowExecutionStartedEventAttributes {
            try encodeContainer.encode(childWorkflowExecutionStartedEventAttributes, forKey: .childWorkflowExecutionStartedEventAttributes)
        }
        if let childWorkflowExecutionTerminatedEventAttributes = self.childWorkflowExecutionTerminatedEventAttributes {
            try encodeContainer.encode(childWorkflowExecutionTerminatedEventAttributes, forKey: .childWorkflowExecutionTerminatedEventAttributes)
        }
        if let childWorkflowExecutionTimedOutEventAttributes = self.childWorkflowExecutionTimedOutEventAttributes {
            try encodeContainer.encode(childWorkflowExecutionTimedOutEventAttributes, forKey: .childWorkflowExecutionTimedOutEventAttributes)
        }
        if let completeWorkflowExecutionFailedEventAttributes = self.completeWorkflowExecutionFailedEventAttributes {
            try encodeContainer.encode(completeWorkflowExecutionFailedEventAttributes, forKey: .completeWorkflowExecutionFailedEventAttributes)
        }
        if let continueAsNewWorkflowExecutionFailedEventAttributes = self.continueAsNewWorkflowExecutionFailedEventAttributes {
            try encodeContainer.encode(continueAsNewWorkflowExecutionFailedEventAttributes, forKey: .continueAsNewWorkflowExecutionFailedEventAttributes)
        }
        if let decisionTaskCompletedEventAttributes = self.decisionTaskCompletedEventAttributes {
            try encodeContainer.encode(decisionTaskCompletedEventAttributes, forKey: .decisionTaskCompletedEventAttributes)
        }
        if let decisionTaskScheduledEventAttributes = self.decisionTaskScheduledEventAttributes {
            try encodeContainer.encode(decisionTaskScheduledEventAttributes, forKey: .decisionTaskScheduledEventAttributes)
        }
        if let decisionTaskStartedEventAttributes = self.decisionTaskStartedEventAttributes {
            try encodeContainer.encode(decisionTaskStartedEventAttributes, forKey: .decisionTaskStartedEventAttributes)
        }
        if let decisionTaskTimedOutEventAttributes = self.decisionTaskTimedOutEventAttributes {
            try encodeContainer.encode(decisionTaskTimedOutEventAttributes, forKey: .decisionTaskTimedOutEventAttributes)
        }
        if eventId != 0 {
            try encodeContainer.encode(eventId, forKey: .eventId)
        }
        if let eventTimestamp = self.eventTimestamp {
            try encodeContainer.encode(eventTimestamp.timeIntervalSince1970, forKey: .eventTimestamp)
        }
        if let eventType = self.eventType {
            try encodeContainer.encode(eventType.rawValue, forKey: .eventType)
        }
        if let externalWorkflowExecutionCancelRequestedEventAttributes = self.externalWorkflowExecutionCancelRequestedEventAttributes {
            try encodeContainer.encode(externalWorkflowExecutionCancelRequestedEventAttributes, forKey: .externalWorkflowExecutionCancelRequestedEventAttributes)
        }
        if let externalWorkflowExecutionSignaledEventAttributes = self.externalWorkflowExecutionSignaledEventAttributes {
            try encodeContainer.encode(externalWorkflowExecutionSignaledEventAttributes, forKey: .externalWorkflowExecutionSignaledEventAttributes)
        }
        if let failWorkflowExecutionFailedEventAttributes = self.failWorkflowExecutionFailedEventAttributes {
            try encodeContainer.encode(failWorkflowExecutionFailedEventAttributes, forKey: .failWorkflowExecutionFailedEventAttributes)
        }
        if let lambdaFunctionCompletedEventAttributes = self.lambdaFunctionCompletedEventAttributes {
            try encodeContainer.encode(lambdaFunctionCompletedEventAttributes, forKey: .lambdaFunctionCompletedEventAttributes)
        }
        if let lambdaFunctionFailedEventAttributes = self.lambdaFunctionFailedEventAttributes {
            try encodeContainer.encode(lambdaFunctionFailedEventAttributes, forKey: .lambdaFunctionFailedEventAttributes)
        }
        if let lambdaFunctionScheduledEventAttributes = self.lambdaFunctionScheduledEventAttributes {
            try encodeContainer.encode(lambdaFunctionScheduledEventAttributes, forKey: .lambdaFunctionScheduledEventAttributes)
        }
        if let lambdaFunctionStartedEventAttributes = self.lambdaFunctionStartedEventAttributes {
            try encodeContainer.encode(lambdaFunctionStartedEventAttributes, forKey: .lambdaFunctionStartedEventAttributes)
        }
        if let lambdaFunctionTimedOutEventAttributes = self.lambdaFunctionTimedOutEventAttributes {
            try encodeContainer.encode(lambdaFunctionTimedOutEventAttributes, forKey: .lambdaFunctionTimedOutEventAttributes)
        }
        if let markerRecordedEventAttributes = self.markerRecordedEventAttributes {
            try encodeContainer.encode(markerRecordedEventAttributes, forKey: .markerRecordedEventAttributes)
        }
        if let recordMarkerFailedEventAttributes = self.recordMarkerFailedEventAttributes {
            try encodeContainer.encode(recordMarkerFailedEventAttributes, forKey: .recordMarkerFailedEventAttributes)
        }
        if let requestCancelActivityTaskFailedEventAttributes = self.requestCancelActivityTaskFailedEventAttributes {
            try encodeContainer.encode(requestCancelActivityTaskFailedEventAttributes, forKey: .requestCancelActivityTaskFailedEventAttributes)
        }
        if let requestCancelExternalWorkflowExecutionFailedEventAttributes = self.requestCancelExternalWorkflowExecutionFailedEventAttributes {
            try encodeContainer.encode(requestCancelExternalWorkflowExecutionFailedEventAttributes, forKey: .requestCancelExternalWorkflowExecutionFailedEventAttributes)
        }
        if let requestCancelExternalWorkflowExecutionInitiatedEventAttributes = self.requestCancelExternalWorkflowExecutionInitiatedEventAttributes {
            try encodeContainer.encode(requestCancelExternalWorkflowExecutionInitiatedEventAttributes, forKey: .requestCancelExternalWorkflowExecutionInitiatedEventAttributes)
        }
        if let scheduleActivityTaskFailedEventAttributes = self.scheduleActivityTaskFailedEventAttributes {
            try encodeContainer.encode(scheduleActivityTaskFailedEventAttributes, forKey: .scheduleActivityTaskFailedEventAttributes)
        }
        if let scheduleLambdaFunctionFailedEventAttributes = self.scheduleLambdaFunctionFailedEventAttributes {
            try encodeContainer.encode(scheduleLambdaFunctionFailedEventAttributes, forKey: .scheduleLambdaFunctionFailedEventAttributes)
        }
        if let signalExternalWorkflowExecutionFailedEventAttributes = self.signalExternalWorkflowExecutionFailedEventAttributes {
            try encodeContainer.encode(signalExternalWorkflowExecutionFailedEventAttributes, forKey: .signalExternalWorkflowExecutionFailedEventAttributes)
        }
        if let signalExternalWorkflowExecutionInitiatedEventAttributes = self.signalExternalWorkflowExecutionInitiatedEventAttributes {
            try encodeContainer.encode(signalExternalWorkflowExecutionInitiatedEventAttributes, forKey: .signalExternalWorkflowExecutionInitiatedEventAttributes)
        }
        if let startChildWorkflowExecutionFailedEventAttributes = self.startChildWorkflowExecutionFailedEventAttributes {
            try encodeContainer.encode(startChildWorkflowExecutionFailedEventAttributes, forKey: .startChildWorkflowExecutionFailedEventAttributes)
        }
        if let startChildWorkflowExecutionInitiatedEventAttributes = self.startChildWorkflowExecutionInitiatedEventAttributes {
            try encodeContainer.encode(startChildWorkflowExecutionInitiatedEventAttributes, forKey: .startChildWorkflowExecutionInitiatedEventAttributes)
        }
        if let startLambdaFunctionFailedEventAttributes = self.startLambdaFunctionFailedEventAttributes {
            try encodeContainer.encode(startLambdaFunctionFailedEventAttributes, forKey: .startLambdaFunctionFailedEventAttributes)
        }
        if let startTimerFailedEventAttributes = self.startTimerFailedEventAttributes {
            try encodeContainer.encode(startTimerFailedEventAttributes, forKey: .startTimerFailedEventAttributes)
        }
        if let timerCanceledEventAttributes = self.timerCanceledEventAttributes {
            try encodeContainer.encode(timerCanceledEventAttributes, forKey: .timerCanceledEventAttributes)
        }
        if let timerFiredEventAttributes = self.timerFiredEventAttributes {
            try encodeContainer.encode(timerFiredEventAttributes, forKey: .timerFiredEventAttributes)
        }
        if let timerStartedEventAttributes = self.timerStartedEventAttributes {
            try encodeContainer.encode(timerStartedEventAttributes, forKey: .timerStartedEventAttributes)
        }
        if let workflowExecutionCancelRequestedEventAttributes = self.workflowExecutionCancelRequestedEventAttributes {
            try encodeContainer.encode(workflowExecutionCancelRequestedEventAttributes, forKey: .workflowExecutionCancelRequestedEventAttributes)
        }
        if let workflowExecutionCanceledEventAttributes = self.workflowExecutionCanceledEventAttributes {
            try encodeContainer.encode(workflowExecutionCanceledEventAttributes, forKey: .workflowExecutionCanceledEventAttributes)
        }
        if let workflowExecutionCompletedEventAttributes = self.workflowExecutionCompletedEventAttributes {
            try encodeContainer.encode(workflowExecutionCompletedEventAttributes, forKey: .workflowExecutionCompletedEventAttributes)
        }
        if let workflowExecutionContinuedAsNewEventAttributes = self.workflowExecutionContinuedAsNewEventAttributes {
            try encodeContainer.encode(workflowExecutionContinuedAsNewEventAttributes, forKey: .workflowExecutionContinuedAsNewEventAttributes)
        }
        if let workflowExecutionFailedEventAttributes = self.workflowExecutionFailedEventAttributes {
            try encodeContainer.encode(workflowExecutionFailedEventAttributes, forKey: .workflowExecutionFailedEventAttributes)
        }
        if let workflowExecutionSignaledEventAttributes = self.workflowExecutionSignaledEventAttributes {
            try encodeContainer.encode(workflowExecutionSignaledEventAttributes, forKey: .workflowExecutionSignaledEventAttributes)
        }
        if let workflowExecutionStartedEventAttributes = self.workflowExecutionStartedEventAttributes {
            try encodeContainer.encode(workflowExecutionStartedEventAttributes, forKey: .workflowExecutionStartedEventAttributes)
        }
        if let workflowExecutionTerminatedEventAttributes = self.workflowExecutionTerminatedEventAttributes {
            try encodeContainer.encode(workflowExecutionTerminatedEventAttributes, forKey: .workflowExecutionTerminatedEventAttributes)
        }
        if let workflowExecutionTimedOutEventAttributes = self.workflowExecutionTimedOutEventAttributes {
            try encodeContainer.encode(workflowExecutionTimedOutEventAttributes, forKey: .workflowExecutionTimedOutEventAttributes)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let eventTimestampDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .eventTimestamp)
        eventTimestamp = eventTimestampDecoded
        let eventTypeDecoded = try containerValues.decodeIfPresent(SwfClientTypes.EventType.self, forKey: .eventType)
        eventType = eventTypeDecoded
        let eventIdDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .eventId) ?? 0
        eventId = eventIdDecoded
        let workflowExecutionStartedEventAttributesDecoded = try containerValues.decodeIfPresent(SwfClientTypes.WorkflowExecutionStartedEventAttributes.self, forKey: .workflowExecutionStartedEventAttributes)
        workflowExecutionStartedEventAttributes = workflowExecutionStartedEventAttributesDecoded
        let workflowExecutionCompletedEventAttributesDecoded = try containerValues.decodeIfPresent(SwfClientTypes.WorkflowExecutionCompletedEventAttributes.self, forKey: .workflowExecutionCompletedEventAttributes)
        workflowExecutionCompletedEventAttributes = workflowExecutionCompletedEventAttributesDecoded
        let completeWorkflowExecutionFailedEventAttributesDecoded = try containerValues.decodeIfPresent(SwfClientTypes.CompleteWorkflowExecutionFailedEventAttributes.self, forKey: .completeWorkflowExecutionFailedEventAttributes)
        completeWorkflowExecutionFailedEventAttributes = completeWorkflowExecutionFailedEventAttributesDecoded
        let workflowExecutionFailedEventAttributesDecoded = try containerValues.decodeIfPresent(SwfClientTypes.WorkflowExecutionFailedEventAttributes.self, forKey: .workflowExecutionFailedEventAttributes)
        workflowExecutionFailedEventAttributes = workflowExecutionFailedEventAttributesDecoded
        let failWorkflowExecutionFailedEventAttributesDecoded = try containerValues.decodeIfPresent(SwfClientTypes.FailWorkflowExecutionFailedEventAttributes.self, forKey: .failWorkflowExecutionFailedEventAttributes)
        failWorkflowExecutionFailedEventAttributes = failWorkflowExecutionFailedEventAttributesDecoded
        let workflowExecutionTimedOutEventAttributesDecoded = try containerValues.decodeIfPresent(SwfClientTypes.WorkflowExecutionTimedOutEventAttributes.self, forKey: .workflowExecutionTimedOutEventAttributes)
        workflowExecutionTimedOutEventAttributes = workflowExecutionTimedOutEventAttributesDecoded
        let workflowExecutionCanceledEventAttributesDecoded = try containerValues.decodeIfPresent(SwfClientTypes.WorkflowExecutionCanceledEventAttributes.self, forKey: .workflowExecutionCanceledEventAttributes)
        workflowExecutionCanceledEventAttributes = workflowExecutionCanceledEventAttributesDecoded
        let cancelWorkflowExecutionFailedEventAttributesDecoded = try containerValues.decodeIfPresent(SwfClientTypes.CancelWorkflowExecutionFailedEventAttributes.self, forKey: .cancelWorkflowExecutionFailedEventAttributes)
        cancelWorkflowExecutionFailedEventAttributes = cancelWorkflowExecutionFailedEventAttributesDecoded
        let workflowExecutionContinuedAsNewEventAttributesDecoded = try containerValues.decodeIfPresent(SwfClientTypes.WorkflowExecutionContinuedAsNewEventAttributes.self, forKey: .workflowExecutionContinuedAsNewEventAttributes)
        workflowExecutionContinuedAsNewEventAttributes = workflowExecutionContinuedAsNewEventAttributesDecoded
        let continueAsNewWorkflowExecutionFailedEventAttributesDecoded = try containerValues.decodeIfPresent(SwfClientTypes.ContinueAsNewWorkflowExecutionFailedEventAttributes.self, forKey: .continueAsNewWorkflowExecutionFailedEventAttributes)
        continueAsNewWorkflowExecutionFailedEventAttributes = continueAsNewWorkflowExecutionFailedEventAttributesDecoded
        let workflowExecutionTerminatedEventAttributesDecoded = try containerValues.decodeIfPresent(SwfClientTypes.WorkflowExecutionTerminatedEventAttributes.self, forKey: .workflowExecutionTerminatedEventAttributes)
        workflowExecutionTerminatedEventAttributes = workflowExecutionTerminatedEventAttributesDecoded
        let workflowExecutionCancelRequestedEventAttributesDecoded = try containerValues.decodeIfPresent(SwfClientTypes.WorkflowExecutionCancelRequestedEventAttributes.self, forKey: .workflowExecutionCancelRequestedEventAttributes)
        workflowExecutionCancelRequestedEventAttributes = workflowExecutionCancelRequestedEventAttributesDecoded
        let decisionTaskScheduledEventAttributesDecoded = try containerValues.decodeIfPresent(SwfClientTypes.DecisionTaskScheduledEventAttributes.self, forKey: .decisionTaskScheduledEventAttributes)
        decisionTaskScheduledEventAttributes = decisionTaskScheduledEventAttributesDecoded
        let decisionTaskStartedEventAttributesDecoded = try containerValues.decodeIfPresent(SwfClientTypes.DecisionTaskStartedEventAttributes.self, forKey: .decisionTaskStartedEventAttributes)
        decisionTaskStartedEventAttributes = decisionTaskStartedEventAttributesDecoded
        let decisionTaskCompletedEventAttributesDecoded = try containerValues.decodeIfPresent(SwfClientTypes.DecisionTaskCompletedEventAttributes.self, forKey: .decisionTaskCompletedEventAttributes)
        decisionTaskCompletedEventAttributes = decisionTaskCompletedEventAttributesDecoded
        let decisionTaskTimedOutEventAttributesDecoded = try containerValues.decodeIfPresent(SwfClientTypes.DecisionTaskTimedOutEventAttributes.self, forKey: .decisionTaskTimedOutEventAttributes)
        decisionTaskTimedOutEventAttributes = decisionTaskTimedOutEventAttributesDecoded
        let activityTaskScheduledEventAttributesDecoded = try containerValues.decodeIfPresent(SwfClientTypes.ActivityTaskScheduledEventAttributes.self, forKey: .activityTaskScheduledEventAttributes)
        activityTaskScheduledEventAttributes = activityTaskScheduledEventAttributesDecoded
        let activityTaskStartedEventAttributesDecoded = try containerValues.decodeIfPresent(SwfClientTypes.ActivityTaskStartedEventAttributes.self, forKey: .activityTaskStartedEventAttributes)
        activityTaskStartedEventAttributes = activityTaskStartedEventAttributesDecoded
        let activityTaskCompletedEventAttributesDecoded = try containerValues.decodeIfPresent(SwfClientTypes.ActivityTaskCompletedEventAttributes.self, forKey: .activityTaskCompletedEventAttributes)
        activityTaskCompletedEventAttributes = activityTaskCompletedEventAttributesDecoded
        let activityTaskFailedEventAttributesDecoded = try containerValues.decodeIfPresent(SwfClientTypes.ActivityTaskFailedEventAttributes.self, forKey: .activityTaskFailedEventAttributes)
        activityTaskFailedEventAttributes = activityTaskFailedEventAttributesDecoded
        let activityTaskTimedOutEventAttributesDecoded = try containerValues.decodeIfPresent(SwfClientTypes.ActivityTaskTimedOutEventAttributes.self, forKey: .activityTaskTimedOutEventAttributes)
        activityTaskTimedOutEventAttributes = activityTaskTimedOutEventAttributesDecoded
        let activityTaskCanceledEventAttributesDecoded = try containerValues.decodeIfPresent(SwfClientTypes.ActivityTaskCanceledEventAttributes.self, forKey: .activityTaskCanceledEventAttributes)
        activityTaskCanceledEventAttributes = activityTaskCanceledEventAttributesDecoded
        let activityTaskCancelRequestedEventAttributesDecoded = try containerValues.decodeIfPresent(SwfClientTypes.ActivityTaskCancelRequestedEventAttributes.self, forKey: .activityTaskCancelRequestedEventAttributes)
        activityTaskCancelRequestedEventAttributes = activityTaskCancelRequestedEventAttributesDecoded
        let workflowExecutionSignaledEventAttributesDecoded = try containerValues.decodeIfPresent(SwfClientTypes.WorkflowExecutionSignaledEventAttributes.self, forKey: .workflowExecutionSignaledEventAttributes)
        workflowExecutionSignaledEventAttributes = workflowExecutionSignaledEventAttributesDecoded
        let markerRecordedEventAttributesDecoded = try containerValues.decodeIfPresent(SwfClientTypes.MarkerRecordedEventAttributes.self, forKey: .markerRecordedEventAttributes)
        markerRecordedEventAttributes = markerRecordedEventAttributesDecoded
        let recordMarkerFailedEventAttributesDecoded = try containerValues.decodeIfPresent(SwfClientTypes.RecordMarkerFailedEventAttributes.self, forKey: .recordMarkerFailedEventAttributes)
        recordMarkerFailedEventAttributes = recordMarkerFailedEventAttributesDecoded
        let timerStartedEventAttributesDecoded = try containerValues.decodeIfPresent(SwfClientTypes.TimerStartedEventAttributes.self, forKey: .timerStartedEventAttributes)
        timerStartedEventAttributes = timerStartedEventAttributesDecoded
        let timerFiredEventAttributesDecoded = try containerValues.decodeIfPresent(SwfClientTypes.TimerFiredEventAttributes.self, forKey: .timerFiredEventAttributes)
        timerFiredEventAttributes = timerFiredEventAttributesDecoded
        let timerCanceledEventAttributesDecoded = try containerValues.decodeIfPresent(SwfClientTypes.TimerCanceledEventAttributes.self, forKey: .timerCanceledEventAttributes)
        timerCanceledEventAttributes = timerCanceledEventAttributesDecoded
        let startChildWorkflowExecutionInitiatedEventAttributesDecoded = try containerValues.decodeIfPresent(SwfClientTypes.StartChildWorkflowExecutionInitiatedEventAttributes.self, forKey: .startChildWorkflowExecutionInitiatedEventAttributes)
        startChildWorkflowExecutionInitiatedEventAttributes = startChildWorkflowExecutionInitiatedEventAttributesDecoded
        let childWorkflowExecutionStartedEventAttributesDecoded = try containerValues.decodeIfPresent(SwfClientTypes.ChildWorkflowExecutionStartedEventAttributes.self, forKey: .childWorkflowExecutionStartedEventAttributes)
        childWorkflowExecutionStartedEventAttributes = childWorkflowExecutionStartedEventAttributesDecoded
        let childWorkflowExecutionCompletedEventAttributesDecoded = try containerValues.decodeIfPresent(SwfClientTypes.ChildWorkflowExecutionCompletedEventAttributes.self, forKey: .childWorkflowExecutionCompletedEventAttributes)
        childWorkflowExecutionCompletedEventAttributes = childWorkflowExecutionCompletedEventAttributesDecoded
        let childWorkflowExecutionFailedEventAttributesDecoded = try containerValues.decodeIfPresent(SwfClientTypes.ChildWorkflowExecutionFailedEventAttributes.self, forKey: .childWorkflowExecutionFailedEventAttributes)
        childWorkflowExecutionFailedEventAttributes = childWorkflowExecutionFailedEventAttributesDecoded
        let childWorkflowExecutionTimedOutEventAttributesDecoded = try containerValues.decodeIfPresent(SwfClientTypes.ChildWorkflowExecutionTimedOutEventAttributes.self, forKey: .childWorkflowExecutionTimedOutEventAttributes)
        childWorkflowExecutionTimedOutEventAttributes = childWorkflowExecutionTimedOutEventAttributesDecoded
        let childWorkflowExecutionCanceledEventAttributesDecoded = try containerValues.decodeIfPresent(SwfClientTypes.ChildWorkflowExecutionCanceledEventAttributes.self, forKey: .childWorkflowExecutionCanceledEventAttributes)
        childWorkflowExecutionCanceledEventAttributes = childWorkflowExecutionCanceledEventAttributesDecoded
        let childWorkflowExecutionTerminatedEventAttributesDecoded = try containerValues.decodeIfPresent(SwfClientTypes.ChildWorkflowExecutionTerminatedEventAttributes.self, forKey: .childWorkflowExecutionTerminatedEventAttributes)
        childWorkflowExecutionTerminatedEventAttributes = childWorkflowExecutionTerminatedEventAttributesDecoded
        let signalExternalWorkflowExecutionInitiatedEventAttributesDecoded = try containerValues.decodeIfPresent(SwfClientTypes.SignalExternalWorkflowExecutionInitiatedEventAttributes.self, forKey: .signalExternalWorkflowExecutionInitiatedEventAttributes)
        signalExternalWorkflowExecutionInitiatedEventAttributes = signalExternalWorkflowExecutionInitiatedEventAttributesDecoded
        let externalWorkflowExecutionSignaledEventAttributesDecoded = try containerValues.decodeIfPresent(SwfClientTypes.ExternalWorkflowExecutionSignaledEventAttributes.self, forKey: .externalWorkflowExecutionSignaledEventAttributes)
        externalWorkflowExecutionSignaledEventAttributes = externalWorkflowExecutionSignaledEventAttributesDecoded
        let signalExternalWorkflowExecutionFailedEventAttributesDecoded = try containerValues.decodeIfPresent(SwfClientTypes.SignalExternalWorkflowExecutionFailedEventAttributes.self, forKey: .signalExternalWorkflowExecutionFailedEventAttributes)
        signalExternalWorkflowExecutionFailedEventAttributes = signalExternalWorkflowExecutionFailedEventAttributesDecoded
        let externalWorkflowExecutionCancelRequestedEventAttributesDecoded = try containerValues.decodeIfPresent(SwfClientTypes.ExternalWorkflowExecutionCancelRequestedEventAttributes.self, forKey: .externalWorkflowExecutionCancelRequestedEventAttributes)
        externalWorkflowExecutionCancelRequestedEventAttributes = externalWorkflowExecutionCancelRequestedEventAttributesDecoded
        let requestCancelExternalWorkflowExecutionInitiatedEventAttributesDecoded = try containerValues.decodeIfPresent(SwfClientTypes.RequestCancelExternalWorkflowExecutionInitiatedEventAttributes.self, forKey: .requestCancelExternalWorkflowExecutionInitiatedEventAttributes)
        requestCancelExternalWorkflowExecutionInitiatedEventAttributes = requestCancelExternalWorkflowExecutionInitiatedEventAttributesDecoded
        let requestCancelExternalWorkflowExecutionFailedEventAttributesDecoded = try containerValues.decodeIfPresent(SwfClientTypes.RequestCancelExternalWorkflowExecutionFailedEventAttributes.self, forKey: .requestCancelExternalWorkflowExecutionFailedEventAttributes)
        requestCancelExternalWorkflowExecutionFailedEventAttributes = requestCancelExternalWorkflowExecutionFailedEventAttributesDecoded
        let scheduleActivityTaskFailedEventAttributesDecoded = try containerValues.decodeIfPresent(SwfClientTypes.ScheduleActivityTaskFailedEventAttributes.self, forKey: .scheduleActivityTaskFailedEventAttributes)
        scheduleActivityTaskFailedEventAttributes = scheduleActivityTaskFailedEventAttributesDecoded
        let requestCancelActivityTaskFailedEventAttributesDecoded = try containerValues.decodeIfPresent(SwfClientTypes.RequestCancelActivityTaskFailedEventAttributes.self, forKey: .requestCancelActivityTaskFailedEventAttributes)
        requestCancelActivityTaskFailedEventAttributes = requestCancelActivityTaskFailedEventAttributesDecoded
        let startTimerFailedEventAttributesDecoded = try containerValues.decodeIfPresent(SwfClientTypes.StartTimerFailedEventAttributes.self, forKey: .startTimerFailedEventAttributes)
        startTimerFailedEventAttributes = startTimerFailedEventAttributesDecoded
        let cancelTimerFailedEventAttributesDecoded = try containerValues.decodeIfPresent(SwfClientTypes.CancelTimerFailedEventAttributes.self, forKey: .cancelTimerFailedEventAttributes)
        cancelTimerFailedEventAttributes = cancelTimerFailedEventAttributesDecoded
        let startChildWorkflowExecutionFailedEventAttributesDecoded = try containerValues.decodeIfPresent(SwfClientTypes.StartChildWorkflowExecutionFailedEventAttributes.self, forKey: .startChildWorkflowExecutionFailedEventAttributes)
        startChildWorkflowExecutionFailedEventAttributes = startChildWorkflowExecutionFailedEventAttributesDecoded
        let lambdaFunctionScheduledEventAttributesDecoded = try containerValues.decodeIfPresent(SwfClientTypes.LambdaFunctionScheduledEventAttributes.self, forKey: .lambdaFunctionScheduledEventAttributes)
        lambdaFunctionScheduledEventAttributes = lambdaFunctionScheduledEventAttributesDecoded
        let lambdaFunctionStartedEventAttributesDecoded = try containerValues.decodeIfPresent(SwfClientTypes.LambdaFunctionStartedEventAttributes.self, forKey: .lambdaFunctionStartedEventAttributes)
        lambdaFunctionStartedEventAttributes = lambdaFunctionStartedEventAttributesDecoded
        let lambdaFunctionCompletedEventAttributesDecoded = try containerValues.decodeIfPresent(SwfClientTypes.LambdaFunctionCompletedEventAttributes.self, forKey: .lambdaFunctionCompletedEventAttributes)
        lambdaFunctionCompletedEventAttributes = lambdaFunctionCompletedEventAttributesDecoded
        let lambdaFunctionFailedEventAttributesDecoded = try containerValues.decodeIfPresent(SwfClientTypes.LambdaFunctionFailedEventAttributes.self, forKey: .lambdaFunctionFailedEventAttributes)
        lambdaFunctionFailedEventAttributes = lambdaFunctionFailedEventAttributesDecoded
        let lambdaFunctionTimedOutEventAttributesDecoded = try containerValues.decodeIfPresent(SwfClientTypes.LambdaFunctionTimedOutEventAttributes.self, forKey: .lambdaFunctionTimedOutEventAttributes)
        lambdaFunctionTimedOutEventAttributes = lambdaFunctionTimedOutEventAttributesDecoded
        let scheduleLambdaFunctionFailedEventAttributesDecoded = try containerValues.decodeIfPresent(SwfClientTypes.ScheduleLambdaFunctionFailedEventAttributes.self, forKey: .scheduleLambdaFunctionFailedEventAttributes)
        scheduleLambdaFunctionFailedEventAttributes = scheduleLambdaFunctionFailedEventAttributesDecoded
        let startLambdaFunctionFailedEventAttributesDecoded = try containerValues.decodeIfPresent(SwfClientTypes.StartLambdaFunctionFailedEventAttributes.self, forKey: .startLambdaFunctionFailedEventAttributes)
        startLambdaFunctionFailedEventAttributes = startLambdaFunctionFailedEventAttributesDecoded
    }
}
