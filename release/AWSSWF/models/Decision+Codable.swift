// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SwfClientTypes.Decision: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cancelTimerDecisionAttributes
        case cancelWorkflowExecutionDecisionAttributes
        case completeWorkflowExecutionDecisionAttributes
        case continueAsNewWorkflowExecutionDecisionAttributes
        case decisionType
        case failWorkflowExecutionDecisionAttributes
        case recordMarkerDecisionAttributes
        case requestCancelActivityTaskDecisionAttributes
        case requestCancelExternalWorkflowExecutionDecisionAttributes
        case scheduleActivityTaskDecisionAttributes
        case scheduleLambdaFunctionDecisionAttributes
        case signalExternalWorkflowExecutionDecisionAttributes
        case startChildWorkflowExecutionDecisionAttributes
        case startTimerDecisionAttributes
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cancelTimerDecisionAttributes = self.cancelTimerDecisionAttributes {
            try encodeContainer.encode(cancelTimerDecisionAttributes, forKey: .cancelTimerDecisionAttributes)
        }
        if let cancelWorkflowExecutionDecisionAttributes = self.cancelWorkflowExecutionDecisionAttributes {
            try encodeContainer.encode(cancelWorkflowExecutionDecisionAttributes, forKey: .cancelWorkflowExecutionDecisionAttributes)
        }
        if let completeWorkflowExecutionDecisionAttributes = self.completeWorkflowExecutionDecisionAttributes {
            try encodeContainer.encode(completeWorkflowExecutionDecisionAttributes, forKey: .completeWorkflowExecutionDecisionAttributes)
        }
        if let continueAsNewWorkflowExecutionDecisionAttributes = self.continueAsNewWorkflowExecutionDecisionAttributes {
            try encodeContainer.encode(continueAsNewWorkflowExecutionDecisionAttributes, forKey: .continueAsNewWorkflowExecutionDecisionAttributes)
        }
        if let decisionType = self.decisionType {
            try encodeContainer.encode(decisionType.rawValue, forKey: .decisionType)
        }
        if let failWorkflowExecutionDecisionAttributes = self.failWorkflowExecutionDecisionAttributes {
            try encodeContainer.encode(failWorkflowExecutionDecisionAttributes, forKey: .failWorkflowExecutionDecisionAttributes)
        }
        if let recordMarkerDecisionAttributes = self.recordMarkerDecisionAttributes {
            try encodeContainer.encode(recordMarkerDecisionAttributes, forKey: .recordMarkerDecisionAttributes)
        }
        if let requestCancelActivityTaskDecisionAttributes = self.requestCancelActivityTaskDecisionAttributes {
            try encodeContainer.encode(requestCancelActivityTaskDecisionAttributes, forKey: .requestCancelActivityTaskDecisionAttributes)
        }
        if let requestCancelExternalWorkflowExecutionDecisionAttributes = self.requestCancelExternalWorkflowExecutionDecisionAttributes {
            try encodeContainer.encode(requestCancelExternalWorkflowExecutionDecisionAttributes, forKey: .requestCancelExternalWorkflowExecutionDecisionAttributes)
        }
        if let scheduleActivityTaskDecisionAttributes = self.scheduleActivityTaskDecisionAttributes {
            try encodeContainer.encode(scheduleActivityTaskDecisionAttributes, forKey: .scheduleActivityTaskDecisionAttributes)
        }
        if let scheduleLambdaFunctionDecisionAttributes = self.scheduleLambdaFunctionDecisionAttributes {
            try encodeContainer.encode(scheduleLambdaFunctionDecisionAttributes, forKey: .scheduleLambdaFunctionDecisionAttributes)
        }
        if let signalExternalWorkflowExecutionDecisionAttributes = self.signalExternalWorkflowExecutionDecisionAttributes {
            try encodeContainer.encode(signalExternalWorkflowExecutionDecisionAttributes, forKey: .signalExternalWorkflowExecutionDecisionAttributes)
        }
        if let startChildWorkflowExecutionDecisionAttributes = self.startChildWorkflowExecutionDecisionAttributes {
            try encodeContainer.encode(startChildWorkflowExecutionDecisionAttributes, forKey: .startChildWorkflowExecutionDecisionAttributes)
        }
        if let startTimerDecisionAttributes = self.startTimerDecisionAttributes {
            try encodeContainer.encode(startTimerDecisionAttributes, forKey: .startTimerDecisionAttributes)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let decisionTypeDecoded = try containerValues.decodeIfPresent(SwfClientTypes.DecisionType.self, forKey: .decisionType)
        decisionType = decisionTypeDecoded
        let scheduleActivityTaskDecisionAttributesDecoded = try containerValues.decodeIfPresent(SwfClientTypes.ScheduleActivityTaskDecisionAttributes.self, forKey: .scheduleActivityTaskDecisionAttributes)
        scheduleActivityTaskDecisionAttributes = scheduleActivityTaskDecisionAttributesDecoded
        let requestCancelActivityTaskDecisionAttributesDecoded = try containerValues.decodeIfPresent(SwfClientTypes.RequestCancelActivityTaskDecisionAttributes.self, forKey: .requestCancelActivityTaskDecisionAttributes)
        requestCancelActivityTaskDecisionAttributes = requestCancelActivityTaskDecisionAttributesDecoded
        let completeWorkflowExecutionDecisionAttributesDecoded = try containerValues.decodeIfPresent(SwfClientTypes.CompleteWorkflowExecutionDecisionAttributes.self, forKey: .completeWorkflowExecutionDecisionAttributes)
        completeWorkflowExecutionDecisionAttributes = completeWorkflowExecutionDecisionAttributesDecoded
        let failWorkflowExecutionDecisionAttributesDecoded = try containerValues.decodeIfPresent(SwfClientTypes.FailWorkflowExecutionDecisionAttributes.self, forKey: .failWorkflowExecutionDecisionAttributes)
        failWorkflowExecutionDecisionAttributes = failWorkflowExecutionDecisionAttributesDecoded
        let cancelWorkflowExecutionDecisionAttributesDecoded = try containerValues.decodeIfPresent(SwfClientTypes.CancelWorkflowExecutionDecisionAttributes.self, forKey: .cancelWorkflowExecutionDecisionAttributes)
        cancelWorkflowExecutionDecisionAttributes = cancelWorkflowExecutionDecisionAttributesDecoded
        let continueAsNewWorkflowExecutionDecisionAttributesDecoded = try containerValues.decodeIfPresent(SwfClientTypes.ContinueAsNewWorkflowExecutionDecisionAttributes.self, forKey: .continueAsNewWorkflowExecutionDecisionAttributes)
        continueAsNewWorkflowExecutionDecisionAttributes = continueAsNewWorkflowExecutionDecisionAttributesDecoded
        let recordMarkerDecisionAttributesDecoded = try containerValues.decodeIfPresent(SwfClientTypes.RecordMarkerDecisionAttributes.self, forKey: .recordMarkerDecisionAttributes)
        recordMarkerDecisionAttributes = recordMarkerDecisionAttributesDecoded
        let startTimerDecisionAttributesDecoded = try containerValues.decodeIfPresent(SwfClientTypes.StartTimerDecisionAttributes.self, forKey: .startTimerDecisionAttributes)
        startTimerDecisionAttributes = startTimerDecisionAttributesDecoded
        let cancelTimerDecisionAttributesDecoded = try containerValues.decodeIfPresent(SwfClientTypes.CancelTimerDecisionAttributes.self, forKey: .cancelTimerDecisionAttributes)
        cancelTimerDecisionAttributes = cancelTimerDecisionAttributesDecoded
        let signalExternalWorkflowExecutionDecisionAttributesDecoded = try containerValues.decodeIfPresent(SwfClientTypes.SignalExternalWorkflowExecutionDecisionAttributes.self, forKey: .signalExternalWorkflowExecutionDecisionAttributes)
        signalExternalWorkflowExecutionDecisionAttributes = signalExternalWorkflowExecutionDecisionAttributesDecoded
        let requestCancelExternalWorkflowExecutionDecisionAttributesDecoded = try containerValues.decodeIfPresent(SwfClientTypes.RequestCancelExternalWorkflowExecutionDecisionAttributes.self, forKey: .requestCancelExternalWorkflowExecutionDecisionAttributes)
        requestCancelExternalWorkflowExecutionDecisionAttributes = requestCancelExternalWorkflowExecutionDecisionAttributesDecoded
        let startChildWorkflowExecutionDecisionAttributesDecoded = try containerValues.decodeIfPresent(SwfClientTypes.StartChildWorkflowExecutionDecisionAttributes.self, forKey: .startChildWorkflowExecutionDecisionAttributes)
        startChildWorkflowExecutionDecisionAttributes = startChildWorkflowExecutionDecisionAttributesDecoded
        let scheduleLambdaFunctionDecisionAttributesDecoded = try containerValues.decodeIfPresent(SwfClientTypes.ScheduleLambdaFunctionDecisionAttributes.self, forKey: .scheduleLambdaFunctionDecisionAttributes)
        scheduleLambdaFunctionDecisionAttributes = scheduleLambdaFunctionDecisionAttributesDecoded
    }
}
