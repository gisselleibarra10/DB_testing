// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension SwfClientTypes {
    /// Provides the details of the ChildWorkflowExecutionFailed event.
    public struct ChildWorkflowExecutionFailedEventAttributes: Swift.Equatable {
        /// The details of the failure (if provided).
        public var details: Swift.String?
        /// The ID of the StartChildWorkflowExecutionInitiated event corresponding to the StartChildWorkflowExecution[Decision] to start this child workflow execution. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        /// This member is required.
        public var initiatedEventId: Swift.Int
        /// The reason for the failure (if provided).
        public var reason: Swift.String?
        /// The ID of the ChildWorkflowExecutionStarted event recorded when this child workflow execution was started. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        /// This member is required.
        public var startedEventId: Swift.Int
        /// The child workflow execution that failed.
        /// This member is required.
        public var workflowExecution: SwfClientTypes.WorkflowExecution?
        /// The type of the child workflow execution.
        /// This member is required.
        public var workflowType: SwfClientTypes.WorkflowType?

        public init (
            details: Swift.String? = nil,
            initiatedEventId: Swift.Int = 0,
            reason: Swift.String? = nil,
            startedEventId: Swift.Int = 0,
            workflowExecution: SwfClientTypes.WorkflowExecution? = nil,
            workflowType: SwfClientTypes.WorkflowType? = nil
        )
        {
            self.details = details
            self.initiatedEventId = initiatedEventId
            self.reason = reason
            self.startedEventId = startedEventId
            self.workflowExecution = workflowExecution
            self.workflowType = workflowType
        }
    }

}
