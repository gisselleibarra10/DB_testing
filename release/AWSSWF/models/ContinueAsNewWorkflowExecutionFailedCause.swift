// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension SwfClientTypes {
    public enum ContinueAsNewWorkflowExecutionFailedCause: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case continueAsNewWorkflowExecutionRateExceeded
        case defaultChildPolicyUndefined
        case defaultExecutionStartToCloseTimeoutUndefined
        case defaultTaskListUndefined
        case defaultTaskStartToCloseTimeoutUndefined
        case operationNotPermitted
        case unhandledDecision
        case workflowTypeDeprecated
        case workflowTypeDoesNotExist
        case sdkUnknown(Swift.String)

        public static var allCases: [ContinueAsNewWorkflowExecutionFailedCause] {
            return [
                .continueAsNewWorkflowExecutionRateExceeded,
                .defaultChildPolicyUndefined,
                .defaultExecutionStartToCloseTimeoutUndefined,
                .defaultTaskListUndefined,
                .defaultTaskStartToCloseTimeoutUndefined,
                .operationNotPermitted,
                .unhandledDecision,
                .workflowTypeDeprecated,
                .workflowTypeDoesNotExist,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .continueAsNewWorkflowExecutionRateExceeded: return "CONTINUE_AS_NEW_WORKFLOW_EXECUTION_RATE_EXCEEDED"
            case .defaultChildPolicyUndefined: return "DEFAULT_CHILD_POLICY_UNDEFINED"
            case .defaultExecutionStartToCloseTimeoutUndefined: return "DEFAULT_EXECUTION_START_TO_CLOSE_TIMEOUT_UNDEFINED"
            case .defaultTaskListUndefined: return "DEFAULT_TASK_LIST_UNDEFINED"
            case .defaultTaskStartToCloseTimeoutUndefined: return "DEFAULT_TASK_START_TO_CLOSE_TIMEOUT_UNDEFINED"
            case .operationNotPermitted: return "OPERATION_NOT_PERMITTED"
            case .unhandledDecision: return "UNHANDLED_DECISION"
            case .workflowTypeDeprecated: return "WORKFLOW_TYPE_DEPRECATED"
            case .workflowTypeDoesNotExist: return "WORKFLOW_TYPE_DOES_NOT_EXIST"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ContinueAsNewWorkflowExecutionFailedCause(rawValue: rawValue) ?? ContinueAsNewWorkflowExecutionFailedCause.sdkUnknown(rawValue)
        }
    }
}
