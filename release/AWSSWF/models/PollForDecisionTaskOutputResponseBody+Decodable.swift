// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct PollForDecisionTaskOutputResponseBody: Swift.Equatable {
    let taskToken: Swift.String?
    let startedEventId: Swift.Int
    let workflowExecution: SwfClientTypes.WorkflowExecution?
    let workflowType: SwfClientTypes.WorkflowType?
    let events: [SwfClientTypes.HistoryEvent]?
    let nextPageToken: Swift.String?
    let previousStartedEventId: Swift.Int
}

extension PollForDecisionTaskOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case events
        case nextPageToken
        case previousStartedEventId
        case startedEventId
        case taskToken
        case workflowExecution
        case workflowType
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let taskTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .taskToken)
        taskToken = taskTokenDecoded
        let startedEventIdDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .startedEventId) ?? 0
        startedEventId = startedEventIdDecoded
        let workflowExecutionDecoded = try containerValues.decodeIfPresent(SwfClientTypes.WorkflowExecution.self, forKey: .workflowExecution)
        workflowExecution = workflowExecutionDecoded
        let workflowTypeDecoded = try containerValues.decodeIfPresent(SwfClientTypes.WorkflowType.self, forKey: .workflowType)
        workflowType = workflowTypeDecoded
        let eventsContainer = try containerValues.decodeIfPresent([SwfClientTypes.HistoryEvent?].self, forKey: .events)
        var eventsDecoded0:[SwfClientTypes.HistoryEvent]? = nil
        if let eventsContainer = eventsContainer {
            eventsDecoded0 = [SwfClientTypes.HistoryEvent]()
            for structure0 in eventsContainer {
                if let structure0 = structure0 {
                    eventsDecoded0?.append(structure0)
                }
            }
        }
        events = eventsDecoded0
        let nextPageTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextPageToken)
        nextPageToken = nextPageTokenDecoded
        let previousStartedEventIdDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .previousStartedEventId) ?? 0
        previousStartedEventId = previousStartedEventIdDecoded
    }
}
