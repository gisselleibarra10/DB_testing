// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct RegisterActivityTypeInput: Swift.Equatable {
    /// If set, specifies the default maximum time before which a worker processing a task of this type must report progress by calling [RecordActivityTaskHeartbeat]. If the timeout is exceeded, the activity task is automatically timed out. This default can be overridden when scheduling an activity task using the ScheduleActivityTask[Decision]. If the activity worker subsequently attempts to record a heartbeat or returns a result, the activity worker receives an UnknownResource fault. In this case, Amazon SWF no longer considers the activity task to be valid; the activity worker should clean up the activity task. The duration is specified in seconds, an integer greater than or equal to 0. You can use NONE to specify unlimited duration.
    public var defaultTaskHeartbeatTimeout: Swift.String?
    /// If set, specifies the default task list to use for scheduling tasks of this activity type. This default task list is used if a task list isn't provided when a task is scheduled through the ScheduleActivityTask[Decision].
    public var defaultTaskList: SwfClientTypes.TaskList?
    /// The default task priority to assign to the activity type. If not assigned, then 0 is used. Valid values are integers that range from Java's Integer.MIN_VALUE (-2147483648) to Integer.MAX_VALUE (2147483647). Higher numbers indicate higher priority. For more information about setting task priority, see [Setting Task Priority](https://docs.aws.amazon.com/amazonswf/latest/developerguide/programming-priority.html) in the in the Amazon SWF Developer Guide..
    public var defaultTaskPriority: Swift.String?
    /// If set, specifies the default maximum duration for a task of this activity type. This default can be overridden when scheduling an activity task using the ScheduleActivityTask[Decision]. The duration is specified in seconds, an integer greater than or equal to 0. You can use NONE to specify unlimited duration.
    public var defaultTaskScheduleToCloseTimeout: Swift.String?
    /// If set, specifies the default maximum duration that a task of this activity type can wait before being assigned to a worker. This default can be overridden when scheduling an activity task using the ScheduleActivityTask[Decision]. The duration is specified in seconds, an integer greater than or equal to 0. You can use NONE to specify unlimited duration.
    public var defaultTaskScheduleToStartTimeout: Swift.String?
    /// If set, specifies the default maximum duration that a worker can take to process tasks of this activity type. This default can be overridden when scheduling an activity task using the ScheduleActivityTask[Decision]. The duration is specified in seconds, an integer greater than or equal to 0. You can use NONE to specify unlimited duration.
    public var defaultTaskStartToCloseTimeout: Swift.String?
    /// A textual description of the activity type.
    public var description: Swift.String?
    /// The name of the domain in which this activity is to be registered.
    /// This member is required.
    public var domain: Swift.String?
    /// The name of the activity type within the domain. The specified string must not start or end with whitespace. It must not contain a : (colon), / (slash), | (vertical bar), or any control characters (\u0000-\u001f | \u007f-\u009f). Also, it must not be the literal string arn.
    /// This member is required.
    public var name: Swift.String?
    /// The version of the activity type. The activity type consists of the name and version, the combination of which must be unique within the domain. The specified string must not start or end with whitespace. It must not contain a : (colon), / (slash), | (vertical bar), or any control characters (\u0000-\u001f | \u007f-\u009f). Also, it must not be the literal string arn.
    /// This member is required.
    public var version: Swift.String?

    public init (
        defaultTaskHeartbeatTimeout: Swift.String? = nil,
        defaultTaskList: SwfClientTypes.TaskList? = nil,
        defaultTaskPriority: Swift.String? = nil,
        defaultTaskScheduleToCloseTimeout: Swift.String? = nil,
        defaultTaskScheduleToStartTimeout: Swift.String? = nil,
        defaultTaskStartToCloseTimeout: Swift.String? = nil,
        description: Swift.String? = nil,
        domain: Swift.String? = nil,
        name: Swift.String? = nil,
        version: Swift.String? = nil
    )
    {
        self.defaultTaskHeartbeatTimeout = defaultTaskHeartbeatTimeout
        self.defaultTaskList = defaultTaskList
        self.defaultTaskPriority = defaultTaskPriority
        self.defaultTaskScheduleToCloseTimeout = defaultTaskScheduleToCloseTimeout
        self.defaultTaskScheduleToStartTimeout = defaultTaskScheduleToStartTimeout
        self.defaultTaskStartToCloseTimeout = defaultTaskStartToCloseTimeout
        self.description = description
        self.domain = domain
        self.name = name
        self.version = version
    }
}
