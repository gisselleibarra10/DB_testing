// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension SwfClientTypes {
    public enum ScheduleActivityTaskFailedCause: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case activityCreationRateExceeded
        case activityIdAlreadyInUse
        case activityTypeDeprecated
        case activityTypeDoesNotExist
        case defaultHeartbeatTimeoutUndefined
        case defaultScheduleToCloseTimeoutUndefined
        case defaultScheduleToStartTimeoutUndefined
        case defaultStartToCloseTimeoutUndefined
        case defaultTaskListUndefined
        case openActivitiesLimitExceeded
        case operationNotPermitted
        case sdkUnknown(Swift.String)

        public static var allCases: [ScheduleActivityTaskFailedCause] {
            return [
                .activityCreationRateExceeded,
                .activityIdAlreadyInUse,
                .activityTypeDeprecated,
                .activityTypeDoesNotExist,
                .defaultHeartbeatTimeoutUndefined,
                .defaultScheduleToCloseTimeoutUndefined,
                .defaultScheduleToStartTimeoutUndefined,
                .defaultStartToCloseTimeoutUndefined,
                .defaultTaskListUndefined,
                .openActivitiesLimitExceeded,
                .operationNotPermitted,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .activityCreationRateExceeded: return "ACTIVITY_CREATION_RATE_EXCEEDED"
            case .activityIdAlreadyInUse: return "ACTIVITY_ID_ALREADY_IN_USE"
            case .activityTypeDeprecated: return "ACTIVITY_TYPE_DEPRECATED"
            case .activityTypeDoesNotExist: return "ACTIVITY_TYPE_DOES_NOT_EXIST"
            case .defaultHeartbeatTimeoutUndefined: return "DEFAULT_HEARTBEAT_TIMEOUT_UNDEFINED"
            case .defaultScheduleToCloseTimeoutUndefined: return "DEFAULT_SCHEDULE_TO_CLOSE_TIMEOUT_UNDEFINED"
            case .defaultScheduleToStartTimeoutUndefined: return "DEFAULT_SCHEDULE_TO_START_TIMEOUT_UNDEFINED"
            case .defaultStartToCloseTimeoutUndefined: return "DEFAULT_START_TO_CLOSE_TIMEOUT_UNDEFINED"
            case .defaultTaskListUndefined: return "DEFAULT_TASK_LIST_UNDEFINED"
            case .openActivitiesLimitExceeded: return "OPEN_ACTIVITIES_LIMIT_EXCEEDED"
            case .operationNotPermitted: return "OPERATION_NOT_PERMITTED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ScheduleActivityTaskFailedCause(rawValue: rawValue) ?? ScheduleActivityTaskFailedCause.sdkUnknown(rawValue)
        }
    }
}
