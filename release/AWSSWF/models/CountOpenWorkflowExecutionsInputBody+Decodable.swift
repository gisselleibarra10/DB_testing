// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CountOpenWorkflowExecutionsInputBody: Swift.Equatable {
    let domain: Swift.String?
    let startTimeFilter: SwfClientTypes.ExecutionTimeFilter?
    let typeFilter: SwfClientTypes.WorkflowTypeFilter?
    let tagFilter: SwfClientTypes.TagFilter?
    let executionFilter: SwfClientTypes.WorkflowExecutionFilter?
}

extension CountOpenWorkflowExecutionsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domain
        case executionFilter
        case startTimeFilter
        case tagFilter
        case typeFilter
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domain)
        domain = domainDecoded
        let startTimeFilterDecoded = try containerValues.decodeIfPresent(SwfClientTypes.ExecutionTimeFilter.self, forKey: .startTimeFilter)
        startTimeFilter = startTimeFilterDecoded
        let typeFilterDecoded = try containerValues.decodeIfPresent(SwfClientTypes.WorkflowTypeFilter.self, forKey: .typeFilter)
        typeFilter = typeFilterDecoded
        let tagFilterDecoded = try containerValues.decodeIfPresent(SwfClientTypes.TagFilter.self, forKey: .tagFilter)
        tagFilter = tagFilterDecoded
        let executionFilterDecoded = try containerValues.decodeIfPresent(SwfClientTypes.WorkflowExecutionFilter.self, forKey: .executionFilter)
        executionFilter = executionFilterDecoded
    }
}
