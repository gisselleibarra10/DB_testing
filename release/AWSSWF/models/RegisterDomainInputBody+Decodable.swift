// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct RegisterDomainInputBody: Swift.Equatable {
    let name: Swift.String?
    let description: Swift.String?
    let workflowExecutionRetentionPeriodInDays: Swift.String?
    let tags: [SwfClientTypes.ResourceTag]?
}

extension RegisterDomainInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description
        case name
        case tags
        case workflowExecutionRetentionPeriodInDays
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let workflowExecutionRetentionPeriodInDaysDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .workflowExecutionRetentionPeriodInDays)
        workflowExecutionRetentionPeriodInDays = workflowExecutionRetentionPeriodInDaysDecoded
        let tagsContainer = try containerValues.decodeIfPresent([SwfClientTypes.ResourceTag?].self, forKey: .tags)
        var tagsDecoded0:[SwfClientTypes.ResourceTag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [SwfClientTypes.ResourceTag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}
