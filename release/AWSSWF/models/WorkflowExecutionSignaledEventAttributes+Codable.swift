// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SwfClientTypes.WorkflowExecutionSignaledEventAttributes: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case externalInitiatedEventId
        case externalWorkflowExecution
        case input
        case signalName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if externalInitiatedEventId != 0 {
            try encodeContainer.encode(externalInitiatedEventId, forKey: .externalInitiatedEventId)
        }
        if let externalWorkflowExecution = self.externalWorkflowExecution {
            try encodeContainer.encode(externalWorkflowExecution, forKey: .externalWorkflowExecution)
        }
        if let input = self.input {
            try encodeContainer.encode(input, forKey: .input)
        }
        if let signalName = self.signalName {
            try encodeContainer.encode(signalName, forKey: .signalName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let signalNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .signalName)
        signalName = signalNameDecoded
        let inputDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .input)
        input = inputDecoded
        let externalWorkflowExecutionDecoded = try containerValues.decodeIfPresent(SwfClientTypes.WorkflowExecution.self, forKey: .externalWorkflowExecution)
        externalWorkflowExecution = externalWorkflowExecutionDecoded
        let externalInitiatedEventIdDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .externalInitiatedEventId) ?? 0
        externalInitiatedEventId = externalInitiatedEventIdDecoded
    }
}
