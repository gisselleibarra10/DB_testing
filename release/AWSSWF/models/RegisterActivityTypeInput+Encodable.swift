// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension RegisterActivityTypeInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case defaultTaskHeartbeatTimeout
        case defaultTaskList
        case defaultTaskPriority
        case defaultTaskScheduleToCloseTimeout
        case defaultTaskScheduleToStartTimeout
        case defaultTaskStartToCloseTimeout
        case description
        case domain
        case name
        case version
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let defaultTaskHeartbeatTimeout = self.defaultTaskHeartbeatTimeout {
            try encodeContainer.encode(defaultTaskHeartbeatTimeout, forKey: .defaultTaskHeartbeatTimeout)
        }
        if let defaultTaskList = self.defaultTaskList {
            try encodeContainer.encode(defaultTaskList, forKey: .defaultTaskList)
        }
        if let defaultTaskPriority = self.defaultTaskPriority {
            try encodeContainer.encode(defaultTaskPriority, forKey: .defaultTaskPriority)
        }
        if let defaultTaskScheduleToCloseTimeout = self.defaultTaskScheduleToCloseTimeout {
            try encodeContainer.encode(defaultTaskScheduleToCloseTimeout, forKey: .defaultTaskScheduleToCloseTimeout)
        }
        if let defaultTaskScheduleToStartTimeout = self.defaultTaskScheduleToStartTimeout {
            try encodeContainer.encode(defaultTaskScheduleToStartTimeout, forKey: .defaultTaskScheduleToStartTimeout)
        }
        if let defaultTaskStartToCloseTimeout = self.defaultTaskStartToCloseTimeout {
            try encodeContainer.encode(defaultTaskStartToCloseTimeout, forKey: .defaultTaskStartToCloseTimeout)
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let domain = self.domain {
            try encodeContainer.encode(domain, forKey: .domain)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let version = self.version {
            try encodeContainer.encode(version, forKey: .version)
        }
    }
}
