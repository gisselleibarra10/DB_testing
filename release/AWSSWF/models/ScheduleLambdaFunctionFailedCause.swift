// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension SwfClientTypes {
    public enum ScheduleLambdaFunctionFailedCause: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case idAlreadyInUse
        case lambdaFunctionCreationRateExceeded
        case lambdaServiceNotAvailableInRegion
        case openLambdaFunctionsLimitExceeded
        case sdkUnknown(Swift.String)

        public static var allCases: [ScheduleLambdaFunctionFailedCause] {
            return [
                .idAlreadyInUse,
                .lambdaFunctionCreationRateExceeded,
                .lambdaServiceNotAvailableInRegion,
                .openLambdaFunctionsLimitExceeded,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .idAlreadyInUse: return "ID_ALREADY_IN_USE"
            case .lambdaFunctionCreationRateExceeded: return "LAMBDA_FUNCTION_CREATION_RATE_EXCEEDED"
            case .lambdaServiceNotAvailableInRegion: return "LAMBDA_SERVICE_NOT_AVAILABLE_IN_REGION"
            case .openLambdaFunctionsLimitExceeded: return "OPEN_LAMBDA_FUNCTIONS_LIMIT_EXCEEDED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ScheduleLambdaFunctionFailedCause(rawValue: rawValue) ?? ScheduleLambdaFunctionFailedCause.sdkUnknown(rawValue)
        }
    }
}
