// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension SwfClientTypes {
    /// Provides the details of the StartChildWorkflowExecutionInitiated event.
    public struct StartChildWorkflowExecutionInitiatedEventAttributes: Swift.Equatable {
        /// The policy to use for the child workflow executions if this execution gets terminated by explicitly calling the [TerminateWorkflowExecution] action or due to an expired timeout. The supported child policies are:
        ///
        /// * TERMINATE – The child executions are terminated.
        ///
        /// * REQUEST_CANCEL – A request to cancel is attempted for each child execution by recording a WorkflowExecutionCancelRequested event in its history. It is up to the decider to take appropriate actions when it receives an execution history with this event.
        ///
        /// * ABANDON – No action is taken. The child executions continue to run.
        /// This member is required.
        public var childPolicy: SwfClientTypes.ChildPolicy?
        /// Data attached to the event that can be used by the decider in subsequent decision tasks. This data isn't sent to the activity.
        public var control: Swift.String?
        /// The ID of the DecisionTaskCompleted event corresponding to the decision task that resulted in the StartChildWorkflowExecution[Decision] to request this child workflow execution. This information can be useful for diagnosing problems by tracing back the cause of events.
        /// This member is required.
        public var decisionTaskCompletedEventId: Swift.Int
        /// The maximum duration for the child workflow execution. If the workflow execution isn't closed within this duration, it is timed out and force-terminated. The duration is specified in seconds, an integer greater than or equal to 0. You can use NONE to specify unlimited duration.
        public var executionStartToCloseTimeout: Swift.String?
        /// The inputs provided to the child workflow execution.
        public var input: Swift.String?
        /// The IAM role to attach to the child workflow execution.
        public var lambdaRole: Swift.String?
        /// The list of tags to associated with the child workflow execution.
        public var tagList: [Swift.String]?
        /// The name of the task list used for the decision tasks of the child workflow execution.
        /// This member is required.
        public var taskList: SwfClientTypes.TaskList?
        /// The priority assigned for the decision tasks for this workflow execution. Valid values are integers that range from Java's Integer.MIN_VALUE (-2147483648) to Integer.MAX_VALUE (2147483647). Higher numbers indicate higher priority. For more information about setting task priority, see [Setting Task Priority](https://docs.aws.amazon.com/amazonswf/latest/developerguide/programming-priority.html) in the Amazon SWF Developer Guide.
        public var taskPriority: Swift.String?
        /// The maximum duration allowed for the decision tasks for this workflow execution. The duration is specified in seconds, an integer greater than or equal to 0. You can use NONE to specify unlimited duration.
        public var taskStartToCloseTimeout: Swift.String?
        /// The workflowId of the child workflow execution.
        /// This member is required.
        public var workflowId: Swift.String?
        /// The type of the child workflow execution.
        /// This member is required.
        public var workflowType: SwfClientTypes.WorkflowType?

        public init (
            childPolicy: SwfClientTypes.ChildPolicy? = nil,
            control: Swift.String? = nil,
            decisionTaskCompletedEventId: Swift.Int = 0,
            executionStartToCloseTimeout: Swift.String? = nil,
            input: Swift.String? = nil,
            lambdaRole: Swift.String? = nil,
            tagList: [Swift.String]? = nil,
            taskList: SwfClientTypes.TaskList? = nil,
            taskPriority: Swift.String? = nil,
            taskStartToCloseTimeout: Swift.String? = nil,
            workflowId: Swift.String? = nil,
            workflowType: SwfClientTypes.WorkflowType? = nil
        )
        {
            self.childPolicy = childPolicy
            self.control = control
            self.decisionTaskCompletedEventId = decisionTaskCompletedEventId
            self.executionStartToCloseTimeout = executionStartToCloseTimeout
            self.input = input
            self.lambdaRole = lambdaRole
            self.tagList = tagList
            self.taskList = taskList
            self.taskPriority = taskPriority
            self.taskStartToCloseTimeout = taskStartToCloseTimeout
            self.workflowId = workflowId
            self.workflowType = workflowType
        }
    }

}
