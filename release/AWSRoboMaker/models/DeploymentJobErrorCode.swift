// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension RoboMakerClientTypes {
    public enum DeploymentJobErrorCode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case badlambdaassociated
        case badpermissionerror
        case deploymentfleetdoesnotexist
        case downloadconditionfailed
        case environmentsetuperror
        case etagmismatch
        case extractingbundlefailure
        case failurethresholdbreached
        case fleetdeploymenttimeout
        case greengrassdeploymentfailed
        case greengrassgroupversiondoesnotexist
        case internalservererror
        case invalidgreengrassgroup
        case lambdadeleted
        case missingrobotapplicationarchitecture
        case missingrobotarchitecture
        case missingrobotdeploymentresource
        case postlaunchfilefailure
        case prelaunchfilefailure
        case resourcenotfound
        case robotagentconnectiontimeout
        case robotapplicationdoesnotexist
        case robotdeploymentaborted
        case robotdeploymentnoresponse
        case sdkUnknown(Swift.String)

        public static var allCases: [DeploymentJobErrorCode] {
            return [
                .badlambdaassociated,
                .badpermissionerror,
                .deploymentfleetdoesnotexist,
                .downloadconditionfailed,
                .environmentsetuperror,
                .etagmismatch,
                .extractingbundlefailure,
                .failurethresholdbreached,
                .fleetdeploymenttimeout,
                .greengrassdeploymentfailed,
                .greengrassgroupversiondoesnotexist,
                .internalservererror,
                .invalidgreengrassgroup,
                .lambdadeleted,
                .missingrobotapplicationarchitecture,
                .missingrobotarchitecture,
                .missingrobotdeploymentresource,
                .postlaunchfilefailure,
                .prelaunchfilefailure,
                .resourcenotfound,
                .robotagentconnectiontimeout,
                .robotapplicationdoesnotexist,
                .robotdeploymentaborted,
                .robotdeploymentnoresponse,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .badlambdaassociated: return "BadLambdaAssociated"
            case .badpermissionerror: return "BadPermissionError"
            case .deploymentfleetdoesnotexist: return "DeploymentFleetDoesNotExist"
            case .downloadconditionfailed: return "DownloadConditionFailed"
            case .environmentsetuperror: return "EnvironmentSetupError"
            case .etagmismatch: return "EtagMismatch"
            case .extractingbundlefailure: return "ExtractingBundleFailure"
            case .failurethresholdbreached: return "FailureThresholdBreached"
            case .fleetdeploymenttimeout: return "FleetDeploymentTimeout"
            case .greengrassdeploymentfailed: return "GreengrassDeploymentFailed"
            case .greengrassgroupversiondoesnotexist: return "GreengrassGroupVersionDoesNotExist"
            case .internalservererror: return "InternalServerError"
            case .invalidgreengrassgroup: return "InvalidGreengrassGroup"
            case .lambdadeleted: return "LambdaDeleted"
            case .missingrobotapplicationarchitecture: return "MissingRobotApplicationArchitecture"
            case .missingrobotarchitecture: return "MissingRobotArchitecture"
            case .missingrobotdeploymentresource: return "MissingRobotDeploymentResource"
            case .postlaunchfilefailure: return "PostLaunchFileFailure"
            case .prelaunchfilefailure: return "PreLaunchFileFailure"
            case .resourcenotfound: return "ResourceNotFound"
            case .robotagentconnectiontimeout: return "RobotAgentConnectionTimeout"
            case .robotapplicationdoesnotexist: return "RobotApplicationDoesNotExist"
            case .robotdeploymentaborted: return "RobotDeploymentAborted"
            case .robotdeploymentnoresponse: return "RobotDeploymentNoResponse"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DeploymentJobErrorCode(rawValue: rawValue) ?? DeploymentJobErrorCode.sdkUnknown(rawValue)
        }
    }
}
