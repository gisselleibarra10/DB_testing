// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct StartSimulationJobBatchInputBody: Swift.Equatable {
    let clientRequestToken: Swift.String?
    let batchPolicy: RoboMakerClientTypes.BatchPolicy?
    let createSimulationJobRequests: [RoboMakerClientTypes.SimulationJobRequest]?
    let tags: [Swift.String:Swift.String]?
}

extension StartSimulationJobBatchInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case batchPolicy
        case clientRequestToken
        case createSimulationJobRequests
        case tags
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clientRequestTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientRequestToken)
        clientRequestToken = clientRequestTokenDecoded
        let batchPolicyDecoded = try containerValues.decodeIfPresent(RoboMakerClientTypes.BatchPolicy.self, forKey: .batchPolicy)
        batchPolicy = batchPolicyDecoded
        let createSimulationJobRequestsContainer = try containerValues.decodeIfPresent([RoboMakerClientTypes.SimulationJobRequest?].self, forKey: .createSimulationJobRequests)
        var createSimulationJobRequestsDecoded0:[RoboMakerClientTypes.SimulationJobRequest]? = nil
        if let createSimulationJobRequestsContainer = createSimulationJobRequestsContainer {
            createSimulationJobRequestsDecoded0 = [RoboMakerClientTypes.SimulationJobRequest]()
            for structure0 in createSimulationJobRequestsContainer {
                if let structure0 = structure0 {
                    createSimulationJobRequestsDecoded0?.append(structure0)
                }
            }
        }
        createSimulationJobRequests = createSimulationJobRequestsDecoded0
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
    }
}
