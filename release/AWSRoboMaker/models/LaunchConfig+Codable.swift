// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension RoboMakerClientTypes.LaunchConfig: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case command
        case environmentVariables
        case launchFile
        case packageName
        case portForwardingConfig
        case streamUI
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let command = command {
            var commandContainer = encodeContainer.nestedUnkeyedContainer(forKey: .command)
            for commandlist0 in command {
                try commandContainer.encode(commandlist0)
            }
        }
        if let environmentVariables = environmentVariables {
            var environmentVariablesContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .environmentVariables)
            for (dictKey0, environmentvariablemap0) in environmentVariables {
                try environmentVariablesContainer.encode(environmentvariablemap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let launchFile = self.launchFile {
            try encodeContainer.encode(launchFile, forKey: .launchFile)
        }
        if let packageName = self.packageName {
            try encodeContainer.encode(packageName, forKey: .packageName)
        }
        if let portForwardingConfig = self.portForwardingConfig {
            try encodeContainer.encode(portForwardingConfig, forKey: .portForwardingConfig)
        }
        if streamUI != false {
            try encodeContainer.encode(streamUI, forKey: .streamUI)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let packageNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .packageName)
        packageName = packageNameDecoded
        let launchFileDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .launchFile)
        launchFile = launchFileDecoded
        let environmentVariablesContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .environmentVariables)
        var environmentVariablesDecoded0: [Swift.String:Swift.String]? = nil
        if let environmentVariablesContainer = environmentVariablesContainer {
            environmentVariablesDecoded0 = [Swift.String:Swift.String]()
            for (key0, environmentvariablevalue0) in environmentVariablesContainer {
                if let environmentvariablevalue0 = environmentvariablevalue0 {
                    environmentVariablesDecoded0?[key0] = environmentvariablevalue0
                }
            }
        }
        environmentVariables = environmentVariablesDecoded0
        let portForwardingConfigDecoded = try containerValues.decodeIfPresent(RoboMakerClientTypes.PortForwardingConfig.self, forKey: .portForwardingConfig)
        portForwardingConfig = portForwardingConfigDecoded
        let streamUIDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .streamUI) ?? false
        streamUI = streamUIDecoded
        let commandContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .command)
        var commandDecoded0:[Swift.String]? = nil
        if let commandContainer = commandContainer {
            commandDecoded0 = [Swift.String]()
            for string0 in commandContainer {
                if let string0 = string0 {
                    commandDecoded0?.append(string0)
                }
            }
        }
        command = commandDecoded0
    }
}
