// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension RoboMakerClientTypes.SimulationJobRequest: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case compute
        case dataSources
        case failureBehavior
        case iamRole
        case loggingConfig
        case maxJobDurationInSeconds
        case outputLocation
        case robotApplications
        case simulationApplications
        case tags
        case useDefaultApplications
        case vpcConfig
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let compute = self.compute {
            try encodeContainer.encode(compute, forKey: .compute)
        }
        if let dataSources = dataSources {
            var dataSourcesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .dataSources)
            for datasourceconfigs0 in dataSources {
                try dataSourcesContainer.encode(datasourceconfigs0)
            }
        }
        if let failureBehavior = self.failureBehavior {
            try encodeContainer.encode(failureBehavior.rawValue, forKey: .failureBehavior)
        }
        if let iamRole = self.iamRole {
            try encodeContainer.encode(iamRole, forKey: .iamRole)
        }
        if let loggingConfig = self.loggingConfig {
            try encodeContainer.encode(loggingConfig, forKey: .loggingConfig)
        }
        if maxJobDurationInSeconds != 0 {
            try encodeContainer.encode(maxJobDurationInSeconds, forKey: .maxJobDurationInSeconds)
        }
        if let outputLocation = self.outputLocation {
            try encodeContainer.encode(outputLocation, forKey: .outputLocation)
        }
        if let robotApplications = robotApplications {
            var robotApplicationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .robotApplications)
            for robotapplicationconfigs0 in robotApplications {
                try robotApplicationsContainer.encode(robotapplicationconfigs0)
            }
        }
        if let simulationApplications = simulationApplications {
            var simulationApplicationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .simulationApplications)
            for simulationapplicationconfigs0 in simulationApplications {
                try simulationApplicationsContainer.encode(simulationapplicationconfigs0)
            }
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, tagmap0) in tags {
                try tagsContainer.encode(tagmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let useDefaultApplications = self.useDefaultApplications {
            try encodeContainer.encode(useDefaultApplications, forKey: .useDefaultApplications)
        }
        if let vpcConfig = self.vpcConfig {
            try encodeContainer.encode(vpcConfig, forKey: .vpcConfig)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let outputLocationDecoded = try containerValues.decodeIfPresent(RoboMakerClientTypes.OutputLocation.self, forKey: .outputLocation)
        outputLocation = outputLocationDecoded
        let loggingConfigDecoded = try containerValues.decodeIfPresent(RoboMakerClientTypes.LoggingConfig.self, forKey: .loggingConfig)
        loggingConfig = loggingConfigDecoded
        let maxJobDurationInSecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxJobDurationInSeconds) ?? 0
        maxJobDurationInSeconds = maxJobDurationInSecondsDecoded
        let iamRoleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .iamRole)
        iamRole = iamRoleDecoded
        let failureBehaviorDecoded = try containerValues.decodeIfPresent(RoboMakerClientTypes.FailureBehavior.self, forKey: .failureBehavior)
        failureBehavior = failureBehaviorDecoded
        let useDefaultApplicationsDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .useDefaultApplications)
        useDefaultApplications = useDefaultApplicationsDecoded
        let robotApplicationsContainer = try containerValues.decodeIfPresent([RoboMakerClientTypes.RobotApplicationConfig?].self, forKey: .robotApplications)
        var robotApplicationsDecoded0:[RoboMakerClientTypes.RobotApplicationConfig]? = nil
        if let robotApplicationsContainer = robotApplicationsContainer {
            robotApplicationsDecoded0 = [RoboMakerClientTypes.RobotApplicationConfig]()
            for structure0 in robotApplicationsContainer {
                if let structure0 = structure0 {
                    robotApplicationsDecoded0?.append(structure0)
                }
            }
        }
        robotApplications = robotApplicationsDecoded0
        let simulationApplicationsContainer = try containerValues.decodeIfPresent([RoboMakerClientTypes.SimulationApplicationConfig?].self, forKey: .simulationApplications)
        var simulationApplicationsDecoded0:[RoboMakerClientTypes.SimulationApplicationConfig]? = nil
        if let simulationApplicationsContainer = simulationApplicationsContainer {
            simulationApplicationsDecoded0 = [RoboMakerClientTypes.SimulationApplicationConfig]()
            for structure0 in simulationApplicationsContainer {
                if let structure0 = structure0 {
                    simulationApplicationsDecoded0?.append(structure0)
                }
            }
        }
        simulationApplications = simulationApplicationsDecoded0
        let dataSourcesContainer = try containerValues.decodeIfPresent([RoboMakerClientTypes.DataSourceConfig?].self, forKey: .dataSources)
        var dataSourcesDecoded0:[RoboMakerClientTypes.DataSourceConfig]? = nil
        if let dataSourcesContainer = dataSourcesContainer {
            dataSourcesDecoded0 = [RoboMakerClientTypes.DataSourceConfig]()
            for structure0 in dataSourcesContainer {
                if let structure0 = structure0 {
                    dataSourcesDecoded0?.append(structure0)
                }
            }
        }
        dataSources = dataSourcesDecoded0
        let vpcConfigDecoded = try containerValues.decodeIfPresent(RoboMakerClientTypes.VPCConfig.self, forKey: .vpcConfig)
        vpcConfig = vpcConfigDecoded
        let computeDecoded = try containerValues.decodeIfPresent(RoboMakerClientTypes.Compute.self, forKey: .compute)
        compute = computeDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
    }
}
