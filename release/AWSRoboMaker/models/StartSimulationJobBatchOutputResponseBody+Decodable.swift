// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct StartSimulationJobBatchOutputResponseBody: Swift.Equatable {
    let arn: Swift.String?
    let status: RoboMakerClientTypes.SimulationJobBatchStatus?
    let createdAt: ClientRuntime.Date?
    let clientRequestToken: Swift.String?
    let batchPolicy: RoboMakerClientTypes.BatchPolicy?
    let failureCode: RoboMakerClientTypes.SimulationJobBatchErrorCode?
    let failureReason: Swift.String?
    let failedRequests: [RoboMakerClientTypes.FailedCreateSimulationJobRequest]?
    let pendingRequests: [RoboMakerClientTypes.SimulationJobRequest]?
    let createdRequests: [RoboMakerClientTypes.SimulationJobSummary]?
    let tags: [Swift.String:Swift.String]?
}

extension StartSimulationJobBatchOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn
        case batchPolicy
        case clientRequestToken
        case createdAt
        case createdRequests
        case failedRequests
        case failureCode
        case failureReason
        case pendingRequests
        case status
        case tags
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let statusDecoded = try containerValues.decodeIfPresent(RoboMakerClientTypes.SimulationJobBatchStatus.self, forKey: .status)
        status = statusDecoded
        let createdAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdAt)
        createdAt = createdAtDecoded
        let clientRequestTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientRequestToken)
        clientRequestToken = clientRequestTokenDecoded
        let batchPolicyDecoded = try containerValues.decodeIfPresent(RoboMakerClientTypes.BatchPolicy.self, forKey: .batchPolicy)
        batchPolicy = batchPolicyDecoded
        let failureCodeDecoded = try containerValues.decodeIfPresent(RoboMakerClientTypes.SimulationJobBatchErrorCode.self, forKey: .failureCode)
        failureCode = failureCodeDecoded
        let failureReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .failureReason)
        failureReason = failureReasonDecoded
        let failedRequestsContainer = try containerValues.decodeIfPresent([RoboMakerClientTypes.FailedCreateSimulationJobRequest?].self, forKey: .failedRequests)
        var failedRequestsDecoded0:[RoboMakerClientTypes.FailedCreateSimulationJobRequest]? = nil
        if let failedRequestsContainer = failedRequestsContainer {
            failedRequestsDecoded0 = [RoboMakerClientTypes.FailedCreateSimulationJobRequest]()
            for structure0 in failedRequestsContainer {
                if let structure0 = structure0 {
                    failedRequestsDecoded0?.append(structure0)
                }
            }
        }
        failedRequests = failedRequestsDecoded0
        let pendingRequestsContainer = try containerValues.decodeIfPresent([RoboMakerClientTypes.SimulationJobRequest?].self, forKey: .pendingRequests)
        var pendingRequestsDecoded0:[RoboMakerClientTypes.SimulationJobRequest]? = nil
        if let pendingRequestsContainer = pendingRequestsContainer {
            pendingRequestsDecoded0 = [RoboMakerClientTypes.SimulationJobRequest]()
            for structure0 in pendingRequestsContainer {
                if let structure0 = structure0 {
                    pendingRequestsDecoded0?.append(structure0)
                }
            }
        }
        pendingRequests = pendingRequestsDecoded0
        let createdRequestsContainer = try containerValues.decodeIfPresent([RoboMakerClientTypes.SimulationJobSummary?].self, forKey: .createdRequests)
        var createdRequestsDecoded0:[RoboMakerClientTypes.SimulationJobSummary]? = nil
        if let createdRequestsContainer = createdRequestsContainer {
            createdRequestsDecoded0 = [RoboMakerClientTypes.SimulationJobSummary]()
            for structure0 in createdRequestsContainer {
                if let structure0 = structure0 {
                    createdRequestsDecoded0?.append(structure0)
                }
            }
        }
        createdRequests = createdRequestsDecoded0
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
    }
}
