// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ApiGatewayV2ClientTypes.Integration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case apiGatewayManaged = "apiGatewayManaged"
        case connectionId = "connectionId"
        case connectionType = "connectionType"
        case contentHandlingStrategy = "contentHandlingStrategy"
        case credentialsArn = "credentialsArn"
        case description = "description"
        case integrationId = "integrationId"
        case integrationMethod = "integrationMethod"
        case integrationResponseSelectionExpression = "integrationResponseSelectionExpression"
        case integrationSubtype = "integrationSubtype"
        case integrationType = "integrationType"
        case integrationUri = "integrationUri"
        case passthroughBehavior = "passthroughBehavior"
        case payloadFormatVersion = "payloadFormatVersion"
        case requestParameters = "requestParameters"
        case requestTemplates = "requestTemplates"
        case responseParameters = "responseParameters"
        case templateSelectionExpression = "templateSelectionExpression"
        case timeoutInMillis = "timeoutInMillis"
        case tlsConfig = "tlsConfig"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let apiGatewayManaged = self.apiGatewayManaged {
            try encodeContainer.encode(apiGatewayManaged, forKey: .apiGatewayManaged)
        }
        if let connectionId = self.connectionId {
            try encodeContainer.encode(connectionId, forKey: .connectionId)
        }
        if let connectionType = self.connectionType {
            try encodeContainer.encode(connectionType.rawValue, forKey: .connectionType)
        }
        if let contentHandlingStrategy = self.contentHandlingStrategy {
            try encodeContainer.encode(contentHandlingStrategy.rawValue, forKey: .contentHandlingStrategy)
        }
        if let credentialsArn = self.credentialsArn {
            try encodeContainer.encode(credentialsArn, forKey: .credentialsArn)
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let integrationId = self.integrationId {
            try encodeContainer.encode(integrationId, forKey: .integrationId)
        }
        if let integrationMethod = self.integrationMethod {
            try encodeContainer.encode(integrationMethod, forKey: .integrationMethod)
        }
        if let integrationResponseSelectionExpression = self.integrationResponseSelectionExpression {
            try encodeContainer.encode(integrationResponseSelectionExpression, forKey: .integrationResponseSelectionExpression)
        }
        if let integrationSubtype = self.integrationSubtype {
            try encodeContainer.encode(integrationSubtype, forKey: .integrationSubtype)
        }
        if let integrationType = self.integrationType {
            try encodeContainer.encode(integrationType.rawValue, forKey: .integrationType)
        }
        if let integrationUri = self.integrationUri {
            try encodeContainer.encode(integrationUri, forKey: .integrationUri)
        }
        if let passthroughBehavior = self.passthroughBehavior {
            try encodeContainer.encode(passthroughBehavior.rawValue, forKey: .passthroughBehavior)
        }
        if let payloadFormatVersion = self.payloadFormatVersion {
            try encodeContainer.encode(payloadFormatVersion, forKey: .payloadFormatVersion)
        }
        if let requestParameters = requestParameters {
            var requestParametersContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .requestParameters)
            for (dictKey0, integrationparameters0) in requestParameters {
                try requestParametersContainer.encode(integrationparameters0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let requestTemplates = requestTemplates {
            var requestTemplatesContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .requestTemplates)
            for (dictKey0, templatemap0) in requestTemplates {
                try requestTemplatesContainer.encode(templatemap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let responseParameters = responseParameters {
            var responseParametersContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .responseParameters)
            for (dictKey0, responseparameters0) in responseParameters {
                try responseParametersContainer.encode(responseparameters0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let templateSelectionExpression = self.templateSelectionExpression {
            try encodeContainer.encode(templateSelectionExpression, forKey: .templateSelectionExpression)
        }
        if let timeoutInMillis = self.timeoutInMillis {
            try encodeContainer.encode(timeoutInMillis, forKey: .timeoutInMillis)
        }
        if let tlsConfig = self.tlsConfig {
            try encodeContainer.encode(tlsConfig, forKey: .tlsConfig)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let apiGatewayManagedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .apiGatewayManaged)
        apiGatewayManaged = apiGatewayManagedDecoded
        let connectionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .connectionId)
        connectionId = connectionIdDecoded
        let connectionTypeDecoded = try containerValues.decodeIfPresent(ApiGatewayV2ClientTypes.ConnectionType.self, forKey: .connectionType)
        connectionType = connectionTypeDecoded
        let contentHandlingStrategyDecoded = try containerValues.decodeIfPresent(ApiGatewayV2ClientTypes.ContentHandlingStrategy.self, forKey: .contentHandlingStrategy)
        contentHandlingStrategy = contentHandlingStrategyDecoded
        let credentialsArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .credentialsArn)
        credentialsArn = credentialsArnDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let integrationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .integrationId)
        integrationId = integrationIdDecoded
        let integrationMethodDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .integrationMethod)
        integrationMethod = integrationMethodDecoded
        let integrationResponseSelectionExpressionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .integrationResponseSelectionExpression)
        integrationResponseSelectionExpression = integrationResponseSelectionExpressionDecoded
        let integrationSubtypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .integrationSubtype)
        integrationSubtype = integrationSubtypeDecoded
        let integrationTypeDecoded = try containerValues.decodeIfPresent(ApiGatewayV2ClientTypes.IntegrationType.self, forKey: .integrationType)
        integrationType = integrationTypeDecoded
        let integrationUriDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .integrationUri)
        integrationUri = integrationUriDecoded
        let passthroughBehaviorDecoded = try containerValues.decodeIfPresent(ApiGatewayV2ClientTypes.PassthroughBehavior.self, forKey: .passthroughBehavior)
        passthroughBehavior = passthroughBehaviorDecoded
        let payloadFormatVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .payloadFormatVersion)
        payloadFormatVersion = payloadFormatVersionDecoded
        let requestParametersContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .requestParameters)
        var requestParametersDecoded0: [Swift.String:Swift.String]? = nil
        if let requestParametersContainer = requestParametersContainer {
            requestParametersDecoded0 = [Swift.String:Swift.String]()
            for (key0, stringwithlengthbetween1and5120) in requestParametersContainer {
                if let stringwithlengthbetween1and5120 = stringwithlengthbetween1and5120 {
                    requestParametersDecoded0?[key0] = stringwithlengthbetween1and5120
                }
            }
        }
        requestParameters = requestParametersDecoded0
        let requestTemplatesContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .requestTemplates)
        var requestTemplatesDecoded0: [Swift.String:Swift.String]? = nil
        if let requestTemplatesContainer = requestTemplatesContainer {
            requestTemplatesDecoded0 = [Swift.String:Swift.String]()
            for (key0, stringwithlengthbetween0and32k0) in requestTemplatesContainer {
                if let stringwithlengthbetween0and32k0 = stringwithlengthbetween0and32k0 {
                    requestTemplatesDecoded0?[key0] = stringwithlengthbetween0and32k0
                }
            }
        }
        requestTemplates = requestTemplatesDecoded0
        let responseParametersContainer = try containerValues.decodeIfPresent([Swift.String: [Swift.String: Swift.String?]?].self, forKey: .responseParameters)
        var responseParametersDecoded0: [Swift.String:[Swift.String:Swift.String]]? = nil
        if let responseParametersContainer = responseParametersContainer {
            responseParametersDecoded0 = [Swift.String:[Swift.String:Swift.String]]()
            for (key0, integrationparameters0) in responseParametersContainer {
                var integrationparameters0Decoded0: [Swift.String: Swift.String]? = nil
                if let integrationparameters0 = integrationparameters0 {
                    integrationparameters0Decoded0 = [Swift.String: Swift.String]()
                    for (key1, stringwithlengthbetween1and5121) in integrationparameters0 {
                        if let stringwithlengthbetween1and5121 = stringwithlengthbetween1and5121 {
                            integrationparameters0Decoded0?[key1] = stringwithlengthbetween1and5121
                        }
                    }
                }
                responseParametersDecoded0?[key0] = integrationparameters0Decoded0
            }
        }
        responseParameters = responseParametersDecoded0
        let templateSelectionExpressionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateSelectionExpression)
        templateSelectionExpression = templateSelectionExpressionDecoded
        let timeoutInMillisDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .timeoutInMillis)
        timeoutInMillis = timeoutInMillisDecoded
        let tlsConfigDecoded = try containerValues.decodeIfPresent(ApiGatewayV2ClientTypes.TlsConfig.self, forKey: .tlsConfig)
        tlsConfig = tlsConfigDecoded
    }
}
