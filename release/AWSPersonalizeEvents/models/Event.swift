// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension PersonalizeEventsClientTypes {
    /// Represents user interaction event information sent using the PutEvents API.
    public struct Event: Swift.Equatable {
        /// An ID associated with the event. If an event ID is not provided, Amazon Personalize generates a unique ID for the event. An event ID is not used as an input to the model. Amazon Personalize uses the event ID to distinquish unique events. Any subsequent events after the first with the same event ID are not used in model training.
        public var eventId: Swift.String?
        /// The type of event, such as click or download. This property corresponds to the EVENT_TYPE field of your Interactions schema and depends on the types of events you are tracking.
        /// This member is required.
        public var eventType: Swift.String?
        /// The event value that corresponds to the EVENT_VALUE field of the Interactions schema.
        public var eventValue: Swift.Float?
        /// A list of item IDs that represents the sequence of items you have shown the user. For example, ["itemId1", "itemId2", "itemId3"].
        public var impression: [Swift.String]?
        /// The item ID key that corresponds to the ITEM_ID field of the Interactions schema.
        public var itemId: Swift.String?
        /// A string map of event-specific data that you might choose to record. For example, if a user rates a movie on your site, other than movie ID (itemId) and rating (eventValue) , you might also send the number of movie ratings made by the user. Each item in the map consists of a key-value pair. For example, {"numberOfRatings": "12"} The keys use camel case names that match the fields in the Interactions schema. In the above example, the numberOfRatings would match the 'NUMBER_OF_RATINGS' field defined in the Interactions schema.
        public var properties: Swift.String?
        /// The ID of the recommendation.
        public var recommendationId: Swift.String?
        /// The timestamp (in Unix time) on the client side when the event occurred.
        /// This member is required.
        public var sentAt: ClientRuntime.Date?

        public init (
            eventId: Swift.String? = nil,
            eventType: Swift.String? = nil,
            eventValue: Swift.Float? = nil,
            impression: [Swift.String]? = nil,
            itemId: Swift.String? = nil,
            properties: Swift.String? = nil,
            recommendationId: Swift.String? = nil,
            sentAt: ClientRuntime.Date? = nil
        )
        {
            self.eventId = eventId
            self.eventType = eventType
            self.eventValue = eventValue
            self.impression = impression
            self.itemId = itemId
            self.properties = properties
            self.recommendationId = recommendationId
            self.sentAt = sentAt
        }
    }

}
