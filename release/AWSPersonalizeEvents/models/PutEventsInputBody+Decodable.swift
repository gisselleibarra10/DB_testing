// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct PutEventsInputBody: Swift.Equatable {
    let trackingId: Swift.String?
    let userId: Swift.String?
    let sessionId: Swift.String?
    let eventList: [PersonalizeEventsClientTypes.Event]?
}

extension PutEventsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case eventList
        case sessionId
        case trackingId
        case userId
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let trackingIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .trackingId)
        trackingId = trackingIdDecoded
        let userIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userId)
        userId = userIdDecoded
        let sessionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sessionId)
        sessionId = sessionIdDecoded
        let eventListContainer = try containerValues.decodeIfPresent([PersonalizeEventsClientTypes.Event?].self, forKey: .eventList)
        var eventListDecoded0:[PersonalizeEventsClientTypes.Event]? = nil
        if let eventListContainer = eventListContainer {
            eventListDecoded0 = [PersonalizeEventsClientTypes.Event]()
            for structure0 in eventListContainer {
                if let structure0 = structure0 {
                    eventListDecoded0?.append(structure0)
                }
            }
        }
        eventList = eventListDecoded0
    }
}
