// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension PersonalizeEventsClientTypes.Event: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case eventId
        case eventType
        case eventValue
        case impression
        case itemId
        case properties
        case recommendationId
        case sentAt
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let eventId = self.eventId {
            try encodeContainer.encode(eventId, forKey: .eventId)
        }
        if let eventType = self.eventType {
            try encodeContainer.encode(eventType, forKey: .eventType)
        }
        if let eventValue = self.eventValue {
            try encodeContainer.encode(eventValue, forKey: .eventValue)
        }
        if let impression = impression {
            var impressionContainer = encodeContainer.nestedUnkeyedContainer(forKey: .impression)
            for impression0 in impression {
                try impressionContainer.encode(impression0)
            }
        }
        if let itemId = self.itemId {
            try encodeContainer.encode(itemId, forKey: .itemId)
        }
        if let properties = self.properties {
            try encodeContainer.encode(properties, forKey: .properties)
        }
        if let recommendationId = self.recommendationId {
            try encodeContainer.encode(recommendationId, forKey: .recommendationId)
        }
        if let sentAt = self.sentAt {
            try encodeContainer.encode(sentAt.timeIntervalSince1970, forKey: .sentAt)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let eventIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .eventId)
        eventId = eventIdDecoded
        let eventTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .eventType)
        eventType = eventTypeDecoded
        let eventValueDecoded = try containerValues.decodeIfPresent(Swift.Float.self, forKey: .eventValue)
        eventValue = eventValueDecoded
        let itemIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .itemId)
        itemId = itemIdDecoded
        let propertiesDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .properties)
        properties = propertiesDecoded
        let sentAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .sentAt)
        sentAt = sentAtDecoded
        let recommendationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .recommendationId)
        recommendationId = recommendationIdDecoded
        let impressionContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .impression)
        var impressionDecoded0:[Swift.String]? = nil
        if let impressionContainer = impressionContainer {
            impressionDecoded0 = [Swift.String]()
            for string0 in impressionContainer {
                if let string0 = string0 {
                    impressionDecoded0?.append(string0)
                }
            }
        }
        impression = impressionDecoded0
    }
}
