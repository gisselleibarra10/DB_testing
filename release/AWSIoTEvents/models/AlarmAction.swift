// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension IotEventsClientTypes {
    /// Specifies one of the following actions to receive notifications when the alarm state changes.
    public struct AlarmAction: Swift.Equatable {
        /// Defines an action to write to the Amazon DynamoDB table that you created. The standard action payload contains all the information about the detector model instance and the event that triggered the action. You can customize the [payload](https://docs.aws.amazon.com/iotevents/latest/apireference/API_Payload.html). One column of the DynamoDB table receives all attribute-value pairs in the payload that you specify. You must use expressions for all parameters in DynamoDBAction. The expressions accept literals, operators, functions, references, and substitution templates. Examples
        ///
        /// * For literal values, the expressions must contain single quotes. For example, the value for the hashKeyType parameter can be 'STRING'.
        ///
        /// * For references, you must specify either variables or input values. For example, the value for the hashKeyField parameter can be $input.GreenhouseInput.name.
        ///
        /// * For a substitution template, you must use ${}, and the template must be in single quotes. A substitution template can also contain a combination of literals, operators, functions, references, and substitution templates. In the following example, the value for the hashKeyValue parameter uses a substitution template. '${$input.GreenhouseInput.temperature * 6 / 5 + 32} in Fahrenheit'
        ///
        /// * For a string concatenation, you must use +. A string concatenation can also contain a combination of literals, operators, functions, references, and substitution templates. In the following example, the value for the tableName parameter uses a string concatenation. 'GreenhouseTemperatureTable ' + $input.GreenhouseInput.date
        ///
        ///
        /// For more information, see [Expressions](https://docs.aws.amazon.com/iotevents/latest/developerguide/iotevents-expressions.html) in the AWS IoT Events Developer Guide. If the defined payload type is a string, DynamoDBAction writes non-JSON data to the DynamoDB table as binary data. The DynamoDB console displays the data as Base64-encoded text. The value for the payloadField parameter is _raw.
        public var dynamoDB: IotEventsClientTypes.DynamoDBAction?
        /// Defines an action to write to the Amazon DynamoDB table that you created. The default action payload contains all the information about the detector model instance and the event that triggered the action. You can customize the [payload](https://docs.aws.amazon.com/iotevents/latest/apireference/API_Payload.html). A separate column of the DynamoDB table receives one attribute-value pair in the payload that you specify. You must use expressions for all parameters in DynamoDBv2Action. The expressions accept literals, operators, functions, references, and substitution templates. Examples
        ///
        /// * For literal values, the expressions must contain single quotes. For example, the value for the tableName parameter can be 'GreenhouseTemperatureTable'.
        ///
        /// * For references, you must specify either variables or input values. For example, the value for the tableName parameter can be $variable.ddbtableName.
        ///
        /// * For a substitution template, you must use ${}, and the template must be in single quotes. A substitution template can also contain a combination of literals, operators, functions, references, and substitution templates. In the following example, the value for the contentExpression parameter in Payload uses a substitution template. '{\"sensorID\": \"${$input.GreenhouseInput.sensor_id}\", \"temperature\": \"${$input.GreenhouseInput.temperature * 9 / 5 + 32}\"}'
        ///
        /// * For a string concatenation, you must use +. A string concatenation can also contain a combination of literals, operators, functions, references, and substitution templates. In the following example, the value for the tableName parameter uses a string concatenation. 'GreenhouseTemperatureTable ' + $input.GreenhouseInput.date
        ///
        ///
        /// For more information, see [Expressions](https://docs.aws.amazon.com/iotevents/latest/developerguide/iotevents-expressions.html) in the AWS IoT Events Developer Guide. The value for the type parameter in Payload must be JSON.
        public var dynamoDBv2: IotEventsClientTypes.DynamoDBv2Action?
        /// Sends information about the detector model instance and the event that triggered the action to an Amazon Kinesis Data Firehose delivery stream.
        public var firehose: IotEventsClientTypes.FirehoseAction?
        /// Sends an AWS IoT Events input, passing in information about the detector model instance and the event that triggered the action.
        public var iotEvents: IotEventsClientTypes.IotEventsAction?
        /// Sends information about the detector model instance and the event that triggered the action to a specified asset property in AWS IoT SiteWise. You must use expressions for all parameters in IotSiteWiseAction. The expressions accept literals, operators, functions, references, and substitutions templates. Examples
        ///
        /// * For literal values, the expressions must contain single quotes. For example, the value for the propertyAlias parameter can be '/company/windfarm/3/turbine/7/temperature'.
        ///
        /// * For references, you must specify either variables or input values. For example, the value for the assetId parameter can be $input.TurbineInput.assetId1.
        ///
        /// * For a substitution template, you must use ${}, and the template must be in single quotes. A substitution template can also contain a combination of literals, operators, functions, references, and substitution templates. In the following example, the value for the propertyAlias parameter uses a substitution template. 'company/windfarm/${$input.TemperatureInput.sensorData.windfarmID}/turbine/ ${$input.TemperatureInput.sensorData.turbineID}/temperature'
        ///
        ///
        /// You must specify either propertyAlias or both assetId and propertyId to identify the target asset property in AWS IoT SiteWise. For more information, see [Expressions](https://docs.aws.amazon.com/iotevents/latest/developerguide/iotevents-expressions.html) in the AWS IoT Events Developer Guide.
        public var iotSiteWise: IotEventsClientTypes.IotSiteWiseAction?
        /// Information required to publish the MQTT message through the AWS IoT message broker.
        public var iotTopicPublish: IotEventsClientTypes.IotTopicPublishAction?
        /// Calls a Lambda function, passing in information about the detector model instance and the event that triggered the action.
        public var lambda: IotEventsClientTypes.LambdaAction?
        /// Information required to publish the Amazon SNS message.
        public var sns: IotEventsClientTypes.SNSTopicPublishAction?
        /// Sends information about the detector model instance and the event that triggered the action to an Amazon SQS queue.
        public var sqs: IotEventsClientTypes.SqsAction?

        public init (
            dynamoDB: IotEventsClientTypes.DynamoDBAction? = nil,
            dynamoDBv2: IotEventsClientTypes.DynamoDBv2Action? = nil,
            firehose: IotEventsClientTypes.FirehoseAction? = nil,
            iotEvents: IotEventsClientTypes.IotEventsAction? = nil,
            iotSiteWise: IotEventsClientTypes.IotSiteWiseAction? = nil,
            iotTopicPublish: IotEventsClientTypes.IotTopicPublishAction? = nil,
            lambda: IotEventsClientTypes.LambdaAction? = nil,
            sns: IotEventsClientTypes.SNSTopicPublishAction? = nil,
            sqs: IotEventsClientTypes.SqsAction? = nil
        )
        {
            self.dynamoDB = dynamoDB
            self.dynamoDBv2 = dynamoDBv2
            self.firehose = firehose
            self.iotEvents = iotEvents
            self.iotSiteWise = iotSiteWise
            self.iotTopicPublish = iotTopicPublish
            self.lambda = lambda
            self.sns = sns
            self.sqs = sqs
        }
    }

}
