// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension IotEventsClientTypes.DynamoDBAction: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case hashKeyField
        case hashKeyType
        case hashKeyValue
        case operation
        case payload
        case payloadField
        case rangeKeyField
        case rangeKeyType
        case rangeKeyValue
        case tableName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let hashKeyField = self.hashKeyField {
            try encodeContainer.encode(hashKeyField, forKey: .hashKeyField)
        }
        if let hashKeyType = self.hashKeyType {
            try encodeContainer.encode(hashKeyType, forKey: .hashKeyType)
        }
        if let hashKeyValue = self.hashKeyValue {
            try encodeContainer.encode(hashKeyValue, forKey: .hashKeyValue)
        }
        if let operation = self.operation {
            try encodeContainer.encode(operation, forKey: .operation)
        }
        if let payload = self.payload {
            try encodeContainer.encode(payload, forKey: .payload)
        }
        if let payloadField = self.payloadField {
            try encodeContainer.encode(payloadField, forKey: .payloadField)
        }
        if let rangeKeyField = self.rangeKeyField {
            try encodeContainer.encode(rangeKeyField, forKey: .rangeKeyField)
        }
        if let rangeKeyType = self.rangeKeyType {
            try encodeContainer.encode(rangeKeyType, forKey: .rangeKeyType)
        }
        if let rangeKeyValue = self.rangeKeyValue {
            try encodeContainer.encode(rangeKeyValue, forKey: .rangeKeyValue)
        }
        if let tableName = self.tableName {
            try encodeContainer.encode(tableName, forKey: .tableName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let hashKeyTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .hashKeyType)
        hashKeyType = hashKeyTypeDecoded
        let hashKeyFieldDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .hashKeyField)
        hashKeyField = hashKeyFieldDecoded
        let hashKeyValueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .hashKeyValue)
        hashKeyValue = hashKeyValueDecoded
        let rangeKeyTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .rangeKeyType)
        rangeKeyType = rangeKeyTypeDecoded
        let rangeKeyFieldDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .rangeKeyField)
        rangeKeyField = rangeKeyFieldDecoded
        let rangeKeyValueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .rangeKeyValue)
        rangeKeyValue = rangeKeyValueDecoded
        let operationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .operation)
        operation = operationDecoded
        let payloadFieldDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .payloadField)
        payloadField = payloadFieldDecoded
        let tableNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tableName)
        tableName = tableNameDecoded
        let payloadDecoded = try containerValues.decodeIfPresent(IotEventsClientTypes.Payload.self, forKey: .payload)
        payload = payloadDecoded
    }
}
