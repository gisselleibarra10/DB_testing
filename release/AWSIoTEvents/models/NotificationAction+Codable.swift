// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension IotEventsClientTypes.NotificationAction: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case action
        case emailConfigurations
        case smsConfigurations
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let action = self.action {
            try encodeContainer.encode(action, forKey: .action)
        }
        if let emailConfigurations = emailConfigurations {
            var emailConfigurationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .emailConfigurations)
            for emailconfigurations0 in emailConfigurations {
                try emailConfigurationsContainer.encode(emailconfigurations0)
            }
        }
        if let smsConfigurations = smsConfigurations {
            var smsConfigurationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .smsConfigurations)
            for smsconfigurations0 in smsConfigurations {
                try smsConfigurationsContainer.encode(smsconfigurations0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let actionDecoded = try containerValues.decodeIfPresent(IotEventsClientTypes.NotificationTargetActions.self, forKey: .action)
        action = actionDecoded
        let smsConfigurationsContainer = try containerValues.decodeIfPresent([IotEventsClientTypes.SMSConfiguration?].self, forKey: .smsConfigurations)
        var smsConfigurationsDecoded0:[IotEventsClientTypes.SMSConfiguration]? = nil
        if let smsConfigurationsContainer = smsConfigurationsContainer {
            smsConfigurationsDecoded0 = [IotEventsClientTypes.SMSConfiguration]()
            for structure0 in smsConfigurationsContainer {
                if let structure0 = structure0 {
                    smsConfigurationsDecoded0?.append(structure0)
                }
            }
        }
        smsConfigurations = smsConfigurationsDecoded0
        let emailConfigurationsContainer = try containerValues.decodeIfPresent([IotEventsClientTypes.EmailConfiguration?].self, forKey: .emailConfigurations)
        var emailConfigurationsDecoded0:[IotEventsClientTypes.EmailConfiguration]? = nil
        if let emailConfigurationsContainer = emailConfigurationsContainer {
            emailConfigurationsDecoded0 = [IotEventsClientTypes.EmailConfiguration]()
            for structure0 in emailConfigurationsContainer {
                if let structure0 = structure0 {
                    emailConfigurationsDecoded0?.append(structure0)
                }
            }
        }
        emailConfigurations = emailConfigurationsDecoded0
    }
}
