// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateDetectorModelInputBody: Swift.Equatable {
    let detectorModelName: Swift.String?
    let detectorModelDefinition: IotEventsClientTypes.DetectorModelDefinition?
    let detectorModelDescription: Swift.String?
    let key: Swift.String?
    let roleArn: Swift.String?
    let tags: [IotEventsClientTypes.Tag]?
    let evaluationMethod: IotEventsClientTypes.EvaluationMethod?
}

extension CreateDetectorModelInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case detectorModelDefinition
        case detectorModelDescription
        case detectorModelName
        case evaluationMethod
        case key
        case roleArn
        case tags
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let detectorModelNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .detectorModelName)
        detectorModelName = detectorModelNameDecoded
        let detectorModelDefinitionDecoded = try containerValues.decodeIfPresent(IotEventsClientTypes.DetectorModelDefinition.self, forKey: .detectorModelDefinition)
        detectorModelDefinition = detectorModelDefinitionDecoded
        let detectorModelDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .detectorModelDescription)
        detectorModelDescription = detectorModelDescriptionDecoded
        let keyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .key)
        key = keyDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let tagsContainer = try containerValues.decodeIfPresent([IotEventsClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[IotEventsClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [IotEventsClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let evaluationMethodDecoded = try containerValues.decodeIfPresent(IotEventsClientTypes.EvaluationMethod.self, forKey: .evaluationMethod)
        evaluationMethod = evaluationMethodDecoded
    }
}
