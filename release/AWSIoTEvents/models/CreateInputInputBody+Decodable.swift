// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateInputInputBody: Swift.Equatable {
    let inputName: Swift.String?
    let inputDescription: Swift.String?
    let inputDefinition: IotEventsClientTypes.InputDefinition?
    let tags: [IotEventsClientTypes.Tag]?
}

extension CreateInputInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case inputDefinition
        case inputDescription
        case inputName
        case tags
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let inputNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .inputName)
        inputName = inputNameDecoded
        let inputDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .inputDescription)
        inputDescription = inputDescriptionDecoded
        let inputDefinitionDecoded = try containerValues.decodeIfPresent(IotEventsClientTypes.InputDefinition.self, forKey: .inputDefinition)
        inputDefinition = inputDefinitionDecoded
        let tagsContainer = try containerValues.decodeIfPresent([IotEventsClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[IotEventsClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [IotEventsClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}
