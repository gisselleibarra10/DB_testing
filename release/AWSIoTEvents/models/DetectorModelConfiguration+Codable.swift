// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension IotEventsClientTypes.DetectorModelConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTime
        case detectorModelArn
        case detectorModelDescription
        case detectorModelName
        case detectorModelVersion
        case evaluationMethod
        case key
        case lastUpdateTime
        case roleArn
        case status
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationTime = self.creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let detectorModelArn = self.detectorModelArn {
            try encodeContainer.encode(detectorModelArn, forKey: .detectorModelArn)
        }
        if let detectorModelDescription = self.detectorModelDescription {
            try encodeContainer.encode(detectorModelDescription, forKey: .detectorModelDescription)
        }
        if let detectorModelName = self.detectorModelName {
            try encodeContainer.encode(detectorModelName, forKey: .detectorModelName)
        }
        if let detectorModelVersion = self.detectorModelVersion {
            try encodeContainer.encode(detectorModelVersion, forKey: .detectorModelVersion)
        }
        if let evaluationMethod = self.evaluationMethod {
            try encodeContainer.encode(evaluationMethod.rawValue, forKey: .evaluationMethod)
        }
        if let key = self.key {
            try encodeContainer.encode(key, forKey: .key)
        }
        if let lastUpdateTime = self.lastUpdateTime {
            try encodeContainer.encode(lastUpdateTime.timeIntervalSince1970, forKey: .lastUpdateTime)
        }
        if let roleArn = self.roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let detectorModelNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .detectorModelName)
        detectorModelName = detectorModelNameDecoded
        let detectorModelVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .detectorModelVersion)
        detectorModelVersion = detectorModelVersionDecoded
        let detectorModelDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .detectorModelDescription)
        detectorModelDescription = detectorModelDescriptionDecoded
        let detectorModelArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .detectorModelArn)
        detectorModelArn = detectorModelArnDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let lastUpdateTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastUpdateTime)
        lastUpdateTime = lastUpdateTimeDecoded
        let statusDecoded = try containerValues.decodeIfPresent(IotEventsClientTypes.DetectorModelVersionStatus.self, forKey: .status)
        status = statusDecoded
        let keyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .key)
        key = keyDecoded
        let evaluationMethodDecoded = try containerValues.decodeIfPresent(IotEventsClientTypes.EvaluationMethod.self, forKey: .evaluationMethod)
        evaluationMethod = evaluationMethodDecoded
    }
}
