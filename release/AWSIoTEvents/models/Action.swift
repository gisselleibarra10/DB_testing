// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension IotEventsClientTypes {
    /// An action to be performed when the condition is TRUE.
    public struct Action: Swift.Equatable {
        /// Information needed to clear the timer.
        public var clearTimer: IotEventsClientTypes.ClearTimerAction?
        /// Writes to the DynamoDB table that you created. The default action payload contains all attribute-value pairs that have the information about the detector model instance and the event that triggered the action. You can customize the [payload](https://docs.aws.amazon.com/iotevents/latest/apireference/API_Payload.html). One column of the DynamoDB table receives all attribute-value pairs in the payload that you specify. For more information, see [Actions](https://docs.aws.amazon.com/iotevents/latest/developerguide/iotevents-event-actions.html) in AWS IoT Events Developer Guide.
        public var dynamoDB: IotEventsClientTypes.DynamoDBAction?
        /// Writes to the DynamoDB table that you created. The default action payload contains all attribute-value pairs that have the information about the detector model instance and the event that triggered the action. You can customize the [payload](https://docs.aws.amazon.com/iotevents/latest/apireference/API_Payload.html). A separate column of the DynamoDB table receives one attribute-value pair in the payload that you specify. For more information, see [Actions](https://docs.aws.amazon.com/iotevents/latest/developerguide/iotevents-event-actions.html) in AWS IoT Events Developer Guide.
        public var dynamoDBv2: IotEventsClientTypes.DynamoDBv2Action?
        /// Sends information about the detector model instance and the event that triggered the action to an Amazon Kinesis Data Firehose delivery stream.
        public var firehose: IotEventsClientTypes.FirehoseAction?
        /// Sends AWS IoT Events input, which passes information about the detector model instance and the event that triggered the action.
        public var iotEvents: IotEventsClientTypes.IotEventsAction?
        /// Sends information about the detector model instance and the event that triggered the action to an asset property in AWS IoT SiteWise .
        public var iotSiteWise: IotEventsClientTypes.IotSiteWiseAction?
        /// Publishes an MQTT message with the given topic to the AWS IoT message broker.
        public var iotTopicPublish: IotEventsClientTypes.IotTopicPublishAction?
        /// Calls a Lambda function, passing in information about the detector model instance and the event that triggered the action.
        public var lambda: IotEventsClientTypes.LambdaAction?
        /// Information needed to reset the timer.
        public var resetTimer: IotEventsClientTypes.ResetTimerAction?
        /// Information needed to set the timer.
        public var setTimer: IotEventsClientTypes.SetTimerAction?
        /// Sets a variable to a specified value.
        public var setVariable: IotEventsClientTypes.SetVariableAction?
        /// Sends an Amazon SNS message.
        public var sns: IotEventsClientTypes.SNSTopicPublishAction?
        /// Sends information about the detector model instance and the event that triggered the action to an Amazon SQS queue.
        public var sqs: IotEventsClientTypes.SqsAction?

        public init (
            clearTimer: IotEventsClientTypes.ClearTimerAction? = nil,
            dynamoDB: IotEventsClientTypes.DynamoDBAction? = nil,
            dynamoDBv2: IotEventsClientTypes.DynamoDBv2Action? = nil,
            firehose: IotEventsClientTypes.FirehoseAction? = nil,
            iotEvents: IotEventsClientTypes.IotEventsAction? = nil,
            iotSiteWise: IotEventsClientTypes.IotSiteWiseAction? = nil,
            iotTopicPublish: IotEventsClientTypes.IotTopicPublishAction? = nil,
            lambda: IotEventsClientTypes.LambdaAction? = nil,
            resetTimer: IotEventsClientTypes.ResetTimerAction? = nil,
            setTimer: IotEventsClientTypes.SetTimerAction? = nil,
            setVariable: IotEventsClientTypes.SetVariableAction? = nil,
            sns: IotEventsClientTypes.SNSTopicPublishAction? = nil,
            sqs: IotEventsClientTypes.SqsAction? = nil
        )
        {
            self.clearTimer = clearTimer
            self.dynamoDB = dynamoDB
            self.dynamoDBv2 = dynamoDBv2
            self.firehose = firehose
            self.iotEvents = iotEvents
            self.iotSiteWise = iotSiteWise
            self.iotTopicPublish = iotTopicPublish
            self.lambda = lambda
            self.resetTimer = resetTimer
            self.setTimer = setTimer
            self.setVariable = setVariable
            self.sns = sns
            self.sqs = sqs
        }
    }

}
