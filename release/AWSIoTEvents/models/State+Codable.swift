// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension IotEventsClientTypes.State: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case onEnter
        case onExit
        case onInput
        case stateName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let onEnter = self.onEnter {
            try encodeContainer.encode(onEnter, forKey: .onEnter)
        }
        if let onExit = self.onExit {
            try encodeContainer.encode(onExit, forKey: .onExit)
        }
        if let onInput = self.onInput {
            try encodeContainer.encode(onInput, forKey: .onInput)
        }
        if let stateName = self.stateName {
            try encodeContainer.encode(stateName, forKey: .stateName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let stateNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stateName)
        stateName = stateNameDecoded
        let onInputDecoded = try containerValues.decodeIfPresent(IotEventsClientTypes.OnInputLifecycle.self, forKey: .onInput)
        onInput = onInputDecoded
        let onEnterDecoded = try containerValues.decodeIfPresent(IotEventsClientTypes.OnEnterLifecycle.self, forKey: .onEnter)
        onEnter = onEnterDecoded
        let onExitDecoded = try containerValues.decodeIfPresent(IotEventsClientTypes.OnExitLifecycle.self, forKey: .onExit)
        onExit = onExitDecoded
    }
}
