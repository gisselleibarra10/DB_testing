// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension DeviceFarmClientTypes.DevicePoolCompatibilityResult: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case compatible
        case device
        case incompatibilityMessages
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let compatible = self.compatible {
            try encodeContainer.encode(compatible, forKey: .compatible)
        }
        if let device = self.device {
            try encodeContainer.encode(device, forKey: .device)
        }
        if let incompatibilityMessages = incompatibilityMessages {
            var incompatibilityMessagesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .incompatibilityMessages)
            for incompatibilitymessages0 in incompatibilityMessages {
                try incompatibilityMessagesContainer.encode(incompatibilitymessages0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deviceDecoded = try containerValues.decodeIfPresent(DeviceFarmClientTypes.Device.self, forKey: .device)
        device = deviceDecoded
        let compatibleDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .compatible)
        compatible = compatibleDecoded
        let incompatibilityMessagesContainer = try containerValues.decodeIfPresent([DeviceFarmClientTypes.IncompatibilityMessage?].self, forKey: .incompatibilityMessages)
        var incompatibilityMessagesDecoded0:[DeviceFarmClientTypes.IncompatibilityMessage]? = nil
        if let incompatibilityMessagesContainer = incompatibilityMessagesContainer {
            incompatibilityMessagesDecoded0 = [DeviceFarmClientTypes.IncompatibilityMessage]()
            for structure0 in incompatibilityMessagesContainer {
                if let structure0 = structure0 {
                    incompatibilityMessagesDecoded0?.append(structure0)
                }
            }
        }
        incompatibilityMessages = incompatibilityMessagesDecoded0
    }
}
