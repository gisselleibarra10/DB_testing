// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension DeviceFarmClientTypes.Job: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn
        case counters
        case created
        case device
        case deviceMinutes
        case instanceArn
        case message
        case name
        case result
        case started
        case status
        case stopped
        case type
        case videoCapture
        case videoEndpoint
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = self.arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let counters = self.counters {
            try encodeContainer.encode(counters, forKey: .counters)
        }
        if let created = self.created {
            try encodeContainer.encode(created.timeIntervalSince1970, forKey: .created)
        }
        if let device = self.device {
            try encodeContainer.encode(device, forKey: .device)
        }
        if let deviceMinutes = self.deviceMinutes {
            try encodeContainer.encode(deviceMinutes, forKey: .deviceMinutes)
        }
        if let instanceArn = self.instanceArn {
            try encodeContainer.encode(instanceArn, forKey: .instanceArn)
        }
        if let message = self.message {
            try encodeContainer.encode(message, forKey: .message)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let result = self.result {
            try encodeContainer.encode(result.rawValue, forKey: .result)
        }
        if let started = self.started {
            try encodeContainer.encode(started.timeIntervalSince1970, forKey: .started)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let stopped = self.stopped {
            try encodeContainer.encode(stopped.timeIntervalSince1970, forKey: .stopped)
        }
        if let type = self.type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
        if let videoCapture = self.videoCapture {
            try encodeContainer.encode(videoCapture, forKey: .videoCapture)
        }
        if let videoEndpoint = self.videoEndpoint {
            try encodeContainer.encode(videoEndpoint, forKey: .videoEndpoint)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let typeDecoded = try containerValues.decodeIfPresent(DeviceFarmClientTypes.TestType.self, forKey: .type)
        type = typeDecoded
        let createdDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .created)
        created = createdDecoded
        let statusDecoded = try containerValues.decodeIfPresent(DeviceFarmClientTypes.ExecutionStatus.self, forKey: .status)
        status = statusDecoded
        let resultDecoded = try containerValues.decodeIfPresent(DeviceFarmClientTypes.ExecutionResult.self, forKey: .result)
        result = resultDecoded
        let startedDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .started)
        started = startedDecoded
        let stoppedDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .stopped)
        stopped = stoppedDecoded
        let countersDecoded = try containerValues.decodeIfPresent(DeviceFarmClientTypes.Counters.self, forKey: .counters)
        counters = countersDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let deviceDecoded = try containerValues.decodeIfPresent(DeviceFarmClientTypes.Device.self, forKey: .device)
        device = deviceDecoded
        let instanceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceArn)
        instanceArn = instanceArnDecoded
        let deviceMinutesDecoded = try containerValues.decodeIfPresent(DeviceFarmClientTypes.DeviceMinutes.self, forKey: .deviceMinutes)
        deviceMinutes = deviceMinutesDecoded
        let videoEndpointDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .videoEndpoint)
        videoEndpoint = videoEndpointDecoded
        let videoCaptureDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .videoCapture)
        videoCapture = videoCaptureDecoded
    }
}
