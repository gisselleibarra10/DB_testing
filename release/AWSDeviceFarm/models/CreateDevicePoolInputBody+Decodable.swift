// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateDevicePoolInputBody: Swift.Equatable {
    let projectArn: Swift.String?
    let name: Swift.String?
    let description: Swift.String?
    let rules: [DeviceFarmClientTypes.Rule]?
    let maxDevices: Swift.Int?
}

extension CreateDevicePoolInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description
        case maxDevices
        case name
        case projectArn
        case rules
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let projectArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .projectArn)
        projectArn = projectArnDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let rulesContainer = try containerValues.decodeIfPresent([DeviceFarmClientTypes.Rule?].self, forKey: .rules)
        var rulesDecoded0:[DeviceFarmClientTypes.Rule]? = nil
        if let rulesContainer = rulesContainer {
            rulesDecoded0 = [DeviceFarmClientTypes.Rule]()
            for structure0 in rulesContainer {
                if let structure0 = structure0 {
                    rulesDecoded0?.append(structure0)
                }
            }
        }
        rules = rulesDecoded0
        let maxDevicesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxDevices)
        maxDevices = maxDevicesDecoded
    }
}
