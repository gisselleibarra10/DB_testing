// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension DeviceFarmClientTypes.ScheduleRunTest: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filter
        case parameters
        case testPackageArn
        case testSpecArn
        case type
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let filter = self.filter {
            try encodeContainer.encode(filter, forKey: .filter)
        }
        if let parameters = parameters {
            var parametersContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .parameters)
            for (dictKey0, testparameters0) in parameters {
                try parametersContainer.encode(testparameters0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let testPackageArn = self.testPackageArn {
            try encodeContainer.encode(testPackageArn, forKey: .testPackageArn)
        }
        if let testSpecArn = self.testSpecArn {
            try encodeContainer.encode(testSpecArn, forKey: .testSpecArn)
        }
        if let type = self.type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let typeDecoded = try containerValues.decodeIfPresent(DeviceFarmClientTypes.TestType.self, forKey: .type)
        type = typeDecoded
        let testPackageArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .testPackageArn)
        testPackageArn = testPackageArnDecoded
        let testSpecArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .testSpecArn)
        testSpecArn = testSpecArnDecoded
        let filterDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .filter)
        filter = filterDecoded
        let parametersContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .parameters)
        var parametersDecoded0: [Swift.String:Swift.String]? = nil
        if let parametersContainer = parametersContainer {
            parametersDecoded0 = [Swift.String:Swift.String]()
            for (key0, string0) in parametersContainer {
                if let string0 = string0 {
                    parametersDecoded0?[key0] = string0
                }
            }
        }
        parameters = parametersDecoded0
    }
}
