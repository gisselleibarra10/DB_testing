// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CreateRemoteAccessSessionInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientId
        case configuration
        case deviceArn
        case instanceArn
        case interactionMode
        case name
        case projectArn
        case remoteDebugEnabled
        case remoteRecordAppArn
        case remoteRecordEnabled
        case skipAppResign
        case sshPublicKey
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientId = self.clientId {
            try encodeContainer.encode(clientId, forKey: .clientId)
        }
        if let configuration = self.configuration {
            try encodeContainer.encode(configuration, forKey: .configuration)
        }
        if let deviceArn = self.deviceArn {
            try encodeContainer.encode(deviceArn, forKey: .deviceArn)
        }
        if let instanceArn = self.instanceArn {
            try encodeContainer.encode(instanceArn, forKey: .instanceArn)
        }
        if let interactionMode = self.interactionMode {
            try encodeContainer.encode(interactionMode.rawValue, forKey: .interactionMode)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let projectArn = self.projectArn {
            try encodeContainer.encode(projectArn, forKey: .projectArn)
        }
        if let remoteDebugEnabled = self.remoteDebugEnabled {
            try encodeContainer.encode(remoteDebugEnabled, forKey: .remoteDebugEnabled)
        }
        if let remoteRecordAppArn = self.remoteRecordAppArn {
            try encodeContainer.encode(remoteRecordAppArn, forKey: .remoteRecordAppArn)
        }
        if let remoteRecordEnabled = self.remoteRecordEnabled {
            try encodeContainer.encode(remoteRecordEnabled, forKey: .remoteRecordEnabled)
        }
        if let skipAppResign = self.skipAppResign {
            try encodeContainer.encode(skipAppResign, forKey: .skipAppResign)
        }
        if let sshPublicKey = self.sshPublicKey {
            try encodeContainer.encode(sshPublicKey, forKey: .sshPublicKey)
        }
    }
}
