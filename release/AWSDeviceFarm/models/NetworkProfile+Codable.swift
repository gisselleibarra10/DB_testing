// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension DeviceFarmClientTypes.NetworkProfile: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn
        case description
        case downlinkBandwidthBits
        case downlinkDelayMs
        case downlinkJitterMs
        case downlinkLossPercent
        case name
        case type
        case uplinkBandwidthBits
        case uplinkDelayMs
        case uplinkJitterMs
        case uplinkLossPercent
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = self.arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let downlinkBandwidthBits = self.downlinkBandwidthBits {
            try encodeContainer.encode(downlinkBandwidthBits, forKey: .downlinkBandwidthBits)
        }
        if let downlinkDelayMs = self.downlinkDelayMs {
            try encodeContainer.encode(downlinkDelayMs, forKey: .downlinkDelayMs)
        }
        if let downlinkJitterMs = self.downlinkJitterMs {
            try encodeContainer.encode(downlinkJitterMs, forKey: .downlinkJitterMs)
        }
        if downlinkLossPercent != 0 {
            try encodeContainer.encode(downlinkLossPercent, forKey: .downlinkLossPercent)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let type = self.type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
        if let uplinkBandwidthBits = self.uplinkBandwidthBits {
            try encodeContainer.encode(uplinkBandwidthBits, forKey: .uplinkBandwidthBits)
        }
        if let uplinkDelayMs = self.uplinkDelayMs {
            try encodeContainer.encode(uplinkDelayMs, forKey: .uplinkDelayMs)
        }
        if let uplinkJitterMs = self.uplinkJitterMs {
            try encodeContainer.encode(uplinkJitterMs, forKey: .uplinkJitterMs)
        }
        if uplinkLossPercent != 0 {
            try encodeContainer.encode(uplinkLossPercent, forKey: .uplinkLossPercent)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let typeDecoded = try containerValues.decodeIfPresent(DeviceFarmClientTypes.NetworkProfileType.self, forKey: .type)
        type = typeDecoded
        let uplinkBandwidthBitsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .uplinkBandwidthBits)
        uplinkBandwidthBits = uplinkBandwidthBitsDecoded
        let downlinkBandwidthBitsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .downlinkBandwidthBits)
        downlinkBandwidthBits = downlinkBandwidthBitsDecoded
        let uplinkDelayMsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .uplinkDelayMs)
        uplinkDelayMs = uplinkDelayMsDecoded
        let downlinkDelayMsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .downlinkDelayMs)
        downlinkDelayMs = downlinkDelayMsDecoded
        let uplinkJitterMsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .uplinkJitterMs)
        uplinkJitterMs = uplinkJitterMsDecoded
        let downlinkJitterMsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .downlinkJitterMs)
        downlinkJitterMs = downlinkJitterMsDecoded
        let uplinkLossPercentDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .uplinkLossPercent) ?? 0
        uplinkLossPercent = uplinkLossPercentDecoded
        let downlinkLossPercentDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .downlinkLossPercent) ?? 0
        downlinkLossPercent = downlinkLossPercentDecoded
    }
}
