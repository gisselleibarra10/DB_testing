// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListUniqueProblemsOutputResponseBody: Swift.Equatable {
    let uniqueProblems: [Swift.String:[DeviceFarmClientTypes.UniqueProblem]]?
    let nextToken: Swift.String?
}

extension ListUniqueProblemsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken
        case uniqueProblems
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let uniqueProblemsContainer = try containerValues.decodeIfPresent([Swift.String: [DeviceFarmClientTypes.UniqueProblem?]?].self, forKey: .uniqueProblems)
        var uniqueProblemsDecoded0: [Swift.String:[DeviceFarmClientTypes.UniqueProblem]]? = nil
        if let uniqueProblemsContainer = uniqueProblemsContainer {
            uniqueProblemsDecoded0 = [Swift.String:[DeviceFarmClientTypes.UniqueProblem]]()
            for (key0, uniqueproblems0) in uniqueProblemsContainer {
                var uniqueproblems0Decoded0: [DeviceFarmClientTypes.UniqueProblem]? = nil
                if let uniqueproblems0 = uniqueproblems0 {
                    uniqueproblems0Decoded0 = [DeviceFarmClientTypes.UniqueProblem]()
                    for structure1 in uniqueproblems0 {
                        if let structure1 = structure1 {
                            uniqueproblems0Decoded0?.append(structure1)
                        }
                    }
                }
                uniqueProblemsDecoded0?[key0] = uniqueproblems0Decoded0
            }
        }
        uniqueProblems = uniqueProblemsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
