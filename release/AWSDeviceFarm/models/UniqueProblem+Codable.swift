// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension DeviceFarmClientTypes.UniqueProblem: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
        case problems
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let message = self.message {
            try encodeContainer.encode(message, forKey: .message)
        }
        if let problems = problems {
            var problemsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .problems)
            for problems0 in problems {
                try problemsContainer.encode(problems0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let problemsContainer = try containerValues.decodeIfPresent([DeviceFarmClientTypes.Problem?].self, forKey: .problems)
        var problemsDecoded0:[DeviceFarmClientTypes.Problem]? = nil
        if let problemsContainer = problemsContainer {
            problemsDecoded0 = [DeviceFarmClientTypes.Problem]()
            for structure0 in problemsContainer {
                if let structure0 = structure0 {
                    problemsDecoded0?.append(structure0)
                }
            }
        }
        problems = problemsDecoded0
    }
}
