// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension DeviceFarmClientTypes {
    /// Represents information about the remote access session.
    public struct RemoteAccessSession: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the remote access session.
        public var arn: Swift.String?
        /// The billing method of the remote access session. Possible values include METERED or UNMETERED. For more information about metered devices, see [AWS Device Farm terminology](https://docs.aws.amazon.com/devicefarm/latest/developerguide/welcome.html#welcome-terminology).
        public var billingMethod: DeviceFarmClientTypes.BillingMethod?
        /// Unique identifier of your client for the remote access session. Only returned if remote debugging is enabled for the remote access session. Remote debugging is [no longer supported](https://docs.aws.amazon.com/devicefarm/latest/developerguide/history.html).
        public var clientId: Swift.String?
        /// The date and time the remote access session was created.
        public var created: ClientRuntime.Date?
        /// The device (phone or tablet) used in the remote access session.
        public var device: DeviceFarmClientTypes.Device?
        /// The number of minutes a device is used in a remote access session (including setup and teardown minutes).
        public var deviceMinutes: DeviceFarmClientTypes.DeviceMinutes?
        /// Unique device identifier for the remote device. Only returned if remote debugging is enabled for the remote access session. Remote debugging is [no longer supported](https://docs.aws.amazon.com/devicefarm/latest/developerguide/history.html).
        public var deviceUdid: Swift.String?
        /// The endpoint for the remote access sesssion.
        public var endpoint: Swift.String?
        /// IP address of the EC2 host where you need to connect to remotely debug devices. Only returned if remote debugging is enabled for the remote access session. Remote debugging is [no longer supported](https://docs.aws.amazon.com/devicefarm/latest/developerguide/history.html).
        public var hostAddress: Swift.String?
        /// The ARN of the instance.
        public var instanceArn: Swift.String?
        /// The interaction mode of the remote access session. Valid values are:
        ///
        /// * INTERACTIVE: You can interact with the iOS device by viewing, touching, and rotating the screen. You cannot run XCUITest framework-based tests in this mode.
        ///
        /// * NO_VIDEO: You are connected to the device, but cannot interact with it or view the screen. This mode has the fastest test execution speed. You can run XCUITest framework-based tests in this mode.
        ///
        /// * VIDEO_ONLY: You can view the screen, but cannot touch or rotate it. You can run XCUITest framework-based tests and watch the screen in this mode.
        public var interactionMode: DeviceFarmClientTypes.InteractionMode?
        /// A message about the remote access session.
        public var message: Swift.String?
        /// The name of the remote access session.
        public var name: Swift.String?
        /// This flag is set to true if remote debugging is enabled for the remote access session. Remote debugging is [no longer supported](https://docs.aws.amazon.com/devicefarm/latest/developerguide/history.html).
        public var remoteDebugEnabled: Swift.Bool?
        /// The ARN for the app to be recorded in the remote access session.
        public var remoteRecordAppArn: Swift.String?
        /// This flag is set to true if remote recording is enabled for the remote access session.
        public var remoteRecordEnabled: Swift.Bool?
        /// The result of the remote access session. Can be any of the following:
        ///
        /// * PENDING.
        ///
        /// * PASSED.
        ///
        /// * WARNED.
        ///
        /// * FAILED.
        ///
        /// * SKIPPED.
        ///
        /// * ERRORED.
        ///
        /// * STOPPED.
        public var result: DeviceFarmClientTypes.ExecutionResult?
        /// When set to true, for private devices, Device Farm does not sign your app again. For public devices, Device Farm always signs your apps again. For more information about how Device Farm re-signs your apps, see [Do you modify my app?](http://aws.amazon.com/device-farm/faqs/) in the AWS Device Farm FAQs.
        public var skipAppResign: Swift.Bool?
        /// The date and time the remote access session was started.
        public var started: ClientRuntime.Date?
        /// The status of the remote access session. Can be any of the following:
        ///
        /// * PENDING.
        ///
        /// * PENDING_CONCURRENCY.
        ///
        /// * PENDING_DEVICE.
        ///
        /// * PROCESSING.
        ///
        /// * SCHEDULING.
        ///
        /// * PREPARING.
        ///
        /// * RUNNING.
        ///
        /// * COMPLETED.
        ///
        /// * STOPPING.
        public var status: DeviceFarmClientTypes.ExecutionStatus?
        /// The date and time the remote access session was stopped.
        public var stopped: ClientRuntime.Date?
        /// The VPC security groups and subnets that are attached to a project.
        public var vpcConfig: DeviceFarmClientTypes.VpcConfig?

        public init (
            arn: Swift.String? = nil,
            billingMethod: DeviceFarmClientTypes.BillingMethod? = nil,
            clientId: Swift.String? = nil,
            created: ClientRuntime.Date? = nil,
            device: DeviceFarmClientTypes.Device? = nil,
            deviceMinutes: DeviceFarmClientTypes.DeviceMinutes? = nil,
            deviceUdid: Swift.String? = nil,
            endpoint: Swift.String? = nil,
            hostAddress: Swift.String? = nil,
            instanceArn: Swift.String? = nil,
            interactionMode: DeviceFarmClientTypes.InteractionMode? = nil,
            message: Swift.String? = nil,
            name: Swift.String? = nil,
            remoteDebugEnabled: Swift.Bool? = nil,
            remoteRecordAppArn: Swift.String? = nil,
            remoteRecordEnabled: Swift.Bool? = nil,
            result: DeviceFarmClientTypes.ExecutionResult? = nil,
            skipAppResign: Swift.Bool? = nil,
            started: ClientRuntime.Date? = nil,
            status: DeviceFarmClientTypes.ExecutionStatus? = nil,
            stopped: ClientRuntime.Date? = nil,
            vpcConfig: DeviceFarmClientTypes.VpcConfig? = nil
        )
        {
            self.arn = arn
            self.billingMethod = billingMethod
            self.clientId = clientId
            self.created = created
            self.device = device
            self.deviceMinutes = deviceMinutes
            self.deviceUdid = deviceUdid
            self.endpoint = endpoint
            self.hostAddress = hostAddress
            self.instanceArn = instanceArn
            self.interactionMode = interactionMode
            self.message = message
            self.name = name
            self.remoteDebugEnabled = remoteDebugEnabled
            self.remoteRecordAppArn = remoteRecordAppArn
            self.remoteRecordEnabled = remoteRecordEnabled
            self.result = result
            self.skipAppResign = skipAppResign
            self.started = started
            self.status = status
            self.stopped = stopped
            self.vpcConfig = vpcConfig
        }
    }

}
