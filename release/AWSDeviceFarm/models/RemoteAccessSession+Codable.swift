// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension DeviceFarmClientTypes.RemoteAccessSession: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn
        case billingMethod
        case clientId
        case created
        case device
        case deviceMinutes
        case deviceUdid
        case endpoint
        case hostAddress
        case instanceArn
        case interactionMode
        case message
        case name
        case remoteDebugEnabled
        case remoteRecordAppArn
        case remoteRecordEnabled
        case result
        case skipAppResign
        case started
        case status
        case stopped
        case vpcConfig
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = self.arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let billingMethod = self.billingMethod {
            try encodeContainer.encode(billingMethod.rawValue, forKey: .billingMethod)
        }
        if let clientId = self.clientId {
            try encodeContainer.encode(clientId, forKey: .clientId)
        }
        if let created = self.created {
            try encodeContainer.encode(created.timeIntervalSince1970, forKey: .created)
        }
        if let device = self.device {
            try encodeContainer.encode(device, forKey: .device)
        }
        if let deviceMinutes = self.deviceMinutes {
            try encodeContainer.encode(deviceMinutes, forKey: .deviceMinutes)
        }
        if let deviceUdid = self.deviceUdid {
            try encodeContainer.encode(deviceUdid, forKey: .deviceUdid)
        }
        if let endpoint = self.endpoint {
            try encodeContainer.encode(endpoint, forKey: .endpoint)
        }
        if let hostAddress = self.hostAddress {
            try encodeContainer.encode(hostAddress, forKey: .hostAddress)
        }
        if let instanceArn = self.instanceArn {
            try encodeContainer.encode(instanceArn, forKey: .instanceArn)
        }
        if let interactionMode = self.interactionMode {
            try encodeContainer.encode(interactionMode.rawValue, forKey: .interactionMode)
        }
        if let message = self.message {
            try encodeContainer.encode(message, forKey: .message)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let remoteDebugEnabled = self.remoteDebugEnabled {
            try encodeContainer.encode(remoteDebugEnabled, forKey: .remoteDebugEnabled)
        }
        if let remoteRecordAppArn = self.remoteRecordAppArn {
            try encodeContainer.encode(remoteRecordAppArn, forKey: .remoteRecordAppArn)
        }
        if let remoteRecordEnabled = self.remoteRecordEnabled {
            try encodeContainer.encode(remoteRecordEnabled, forKey: .remoteRecordEnabled)
        }
        if let result = self.result {
            try encodeContainer.encode(result.rawValue, forKey: .result)
        }
        if let skipAppResign = self.skipAppResign {
            try encodeContainer.encode(skipAppResign, forKey: .skipAppResign)
        }
        if let started = self.started {
            try encodeContainer.encode(started.timeIntervalSince1970, forKey: .started)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let stopped = self.stopped {
            try encodeContainer.encode(stopped.timeIntervalSince1970, forKey: .stopped)
        }
        if let vpcConfig = self.vpcConfig {
            try encodeContainer.encode(vpcConfig, forKey: .vpcConfig)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let createdDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .created)
        created = createdDecoded
        let statusDecoded = try containerValues.decodeIfPresent(DeviceFarmClientTypes.ExecutionStatus.self, forKey: .status)
        status = statusDecoded
        let resultDecoded = try containerValues.decodeIfPresent(DeviceFarmClientTypes.ExecutionResult.self, forKey: .result)
        result = resultDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let startedDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .started)
        started = startedDecoded
        let stoppedDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .stopped)
        stopped = stoppedDecoded
        let deviceDecoded = try containerValues.decodeIfPresent(DeviceFarmClientTypes.Device.self, forKey: .device)
        device = deviceDecoded
        let instanceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceArn)
        instanceArn = instanceArnDecoded
        let remoteDebugEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .remoteDebugEnabled)
        remoteDebugEnabled = remoteDebugEnabledDecoded
        let remoteRecordEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .remoteRecordEnabled)
        remoteRecordEnabled = remoteRecordEnabledDecoded
        let remoteRecordAppArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .remoteRecordAppArn)
        remoteRecordAppArn = remoteRecordAppArnDecoded
        let hostAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .hostAddress)
        hostAddress = hostAddressDecoded
        let clientIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientId)
        clientId = clientIdDecoded
        let billingMethodDecoded = try containerValues.decodeIfPresent(DeviceFarmClientTypes.BillingMethod.self, forKey: .billingMethod)
        billingMethod = billingMethodDecoded
        let deviceMinutesDecoded = try containerValues.decodeIfPresent(DeviceFarmClientTypes.DeviceMinutes.self, forKey: .deviceMinutes)
        deviceMinutes = deviceMinutesDecoded
        let endpointDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .endpoint)
        endpoint = endpointDecoded
        let deviceUdidDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deviceUdid)
        deviceUdid = deviceUdidDecoded
        let interactionModeDecoded = try containerValues.decodeIfPresent(DeviceFarmClientTypes.InteractionMode.self, forKey: .interactionMode)
        interactionMode = interactionModeDecoded
        let skipAppResignDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .skipAppResign)
        skipAppResign = skipAppResignDecoded
        let vpcConfigDecoded = try containerValues.decodeIfPresent(DeviceFarmClientTypes.VpcConfig.self, forKey: .vpcConfig)
        vpcConfig = vpcConfigDecoded
    }
}
