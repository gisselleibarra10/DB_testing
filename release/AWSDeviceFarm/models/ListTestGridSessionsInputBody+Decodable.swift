// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListTestGridSessionsInputBody: Swift.Equatable {
    let projectArn: Swift.String?
    let status: DeviceFarmClientTypes.TestGridSessionStatus?
    let creationTimeAfter: ClientRuntime.Date?
    let creationTimeBefore: ClientRuntime.Date?
    let endTimeAfter: ClientRuntime.Date?
    let endTimeBefore: ClientRuntime.Date?
    let maxResult: Swift.Int?
    let nextToken: Swift.String?
}

extension ListTestGridSessionsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTimeAfter
        case creationTimeBefore
        case endTimeAfter
        case endTimeBefore
        case maxResult
        case nextToken
        case projectArn
        case status
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let projectArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .projectArn)
        projectArn = projectArnDecoded
        let statusDecoded = try containerValues.decodeIfPresent(DeviceFarmClientTypes.TestGridSessionStatus.self, forKey: .status)
        status = statusDecoded
        let creationTimeAfterDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTimeAfter)
        creationTimeAfter = creationTimeAfterDecoded
        let creationTimeBeforeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTimeBefore)
        creationTimeBefore = creationTimeBeforeDecoded
        let endTimeAfterDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .endTimeAfter)
        endTimeAfter = endTimeAfterDecoded
        let endTimeBeforeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .endTimeBefore)
        endTimeBefore = endTimeBeforeDecoded
        let maxResultDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResult)
        maxResult = maxResultDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
