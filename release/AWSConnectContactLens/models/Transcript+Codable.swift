// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ConnectContactLensClientTypes.Transcript: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case beginOffsetMillis = "BeginOffsetMillis"
        case content = "Content"
        case endOffsetMillis = "EndOffsetMillis"
        case id = "Id"
        case issuesDetected = "IssuesDetected"
        case participantId = "ParticipantId"
        case participantRole = "ParticipantRole"
        case sentiment = "Sentiment"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if beginOffsetMillis != 0 {
            try encodeContainer.encode(beginOffsetMillis, forKey: .beginOffsetMillis)
        }
        if let content = self.content {
            try encodeContainer.encode(content, forKey: .content)
        }
        if endOffsetMillis != 0 {
            try encodeContainer.encode(endOffsetMillis, forKey: .endOffsetMillis)
        }
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let issuesDetected = issuesDetected {
            var issuesDetectedContainer = encodeContainer.nestedUnkeyedContainer(forKey: .issuesDetected)
            for issuesdetected0 in issuesDetected {
                try issuesDetectedContainer.encode(issuesdetected0)
            }
        }
        if let participantId = self.participantId {
            try encodeContainer.encode(participantId, forKey: .participantId)
        }
        if let participantRole = self.participantRole {
            try encodeContainer.encode(participantRole, forKey: .participantRole)
        }
        if let sentiment = self.sentiment {
            try encodeContainer.encode(sentiment.rawValue, forKey: .sentiment)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let participantIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .participantId)
        participantId = participantIdDecoded
        let participantRoleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .participantRole)
        participantRole = participantRoleDecoded
        let contentDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .content)
        content = contentDecoded
        let beginOffsetMillisDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .beginOffsetMillis) ?? 0
        beginOffsetMillis = beginOffsetMillisDecoded
        let endOffsetMillisDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .endOffsetMillis) ?? 0
        endOffsetMillis = endOffsetMillisDecoded
        let sentimentDecoded = try containerValues.decodeIfPresent(ConnectContactLensClientTypes.SentimentValue.self, forKey: .sentiment)
        sentiment = sentimentDecoded
        let issuesDetectedContainer = try containerValues.decodeIfPresent([ConnectContactLensClientTypes.IssueDetected?].self, forKey: .issuesDetected)
        var issuesDetectedDecoded0:[ConnectContactLensClientTypes.IssueDetected]? = nil
        if let issuesDetectedContainer = issuesDetectedContainer {
            issuesDetectedDecoded0 = [ConnectContactLensClientTypes.IssueDetected]()
            for structure0 in issuesDetectedContainer {
                if let structure0 = structure0 {
                    issuesDetectedDecoded0?.append(structure0)
                }
            }
        }
        issuesDetected = issuesDetectedDecoded0
    }
}
