// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListBackendEnvironmentsOutputResponseBody: Swift.Equatable {
    let backendEnvironments: [AmplifyClientTypes.BackendEnvironment]?
    let nextToken: Swift.String?
}

extension ListBackendEnvironmentsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case backendEnvironments
        case nextToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let backendEnvironmentsContainer = try containerValues.decodeIfPresent([AmplifyClientTypes.BackendEnvironment?].self, forKey: .backendEnvironments)
        var backendEnvironmentsDecoded0:[AmplifyClientTypes.BackendEnvironment]? = nil
        if let backendEnvironmentsContainer = backendEnvironmentsContainer {
            backendEnvironmentsDecoded0 = [AmplifyClientTypes.BackendEnvironment]()
            for structure0 in backendEnvironmentsContainer {
                if let structure0 = structure0 {
                    backendEnvironmentsDecoded0?.append(structure0)
                }
            }
        }
        backendEnvironments = backendEnvironmentsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
