// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AmplifyClientTypes.Step: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case artifactsUrl
        case context
        case endTime
        case logUrl
        case screenshots
        case startTime
        case status
        case statusReason
        case stepName
        case testArtifactsUrl
        case testConfigUrl
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let artifactsUrl = self.artifactsUrl {
            try encodeContainer.encode(artifactsUrl, forKey: .artifactsUrl)
        }
        if let context = self.context {
            try encodeContainer.encode(context, forKey: .context)
        }
        if let endTime = self.endTime {
            try encodeContainer.encode(endTime.timeIntervalSince1970, forKey: .endTime)
        }
        if let logUrl = self.logUrl {
            try encodeContainer.encode(logUrl, forKey: .logUrl)
        }
        if let screenshots = screenshots {
            var screenshotsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .screenshots)
            for (dictKey0, screenshots0) in screenshots {
                try screenshotsContainer.encode(screenshots0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let startTime = self.startTime {
            try encodeContainer.encode(startTime.timeIntervalSince1970, forKey: .startTime)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let statusReason = self.statusReason {
            try encodeContainer.encode(statusReason, forKey: .statusReason)
        }
        if let stepName = self.stepName {
            try encodeContainer.encode(stepName, forKey: .stepName)
        }
        if let testArtifactsUrl = self.testArtifactsUrl {
            try encodeContainer.encode(testArtifactsUrl, forKey: .testArtifactsUrl)
        }
        if let testConfigUrl = self.testConfigUrl {
            try encodeContainer.encode(testConfigUrl, forKey: .testConfigUrl)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let stepNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stepName)
        stepName = stepNameDecoded
        let startTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .startTime)
        startTime = startTimeDecoded
        let statusDecoded = try containerValues.decodeIfPresent(AmplifyClientTypes.JobStatus.self, forKey: .status)
        status = statusDecoded
        let endTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .endTime)
        endTime = endTimeDecoded
        let logUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logUrl)
        logUrl = logUrlDecoded
        let artifactsUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .artifactsUrl)
        artifactsUrl = artifactsUrlDecoded
        let testArtifactsUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .testArtifactsUrl)
        testArtifactsUrl = testArtifactsUrlDecoded
        let testConfigUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .testConfigUrl)
        testConfigUrl = testConfigUrlDecoded
        let screenshotsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .screenshots)
        var screenshotsDecoded0: [Swift.String:Swift.String]? = nil
        if let screenshotsContainer = screenshotsContainer {
            screenshotsDecoded0 = [Swift.String:Swift.String]()
            for (key0, thumbnailurl0) in screenshotsContainer {
                if let thumbnailurl0 = thumbnailurl0 {
                    screenshotsDecoded0?[key0] = thumbnailurl0
                }
            }
        }
        screenshots = screenshotsDecoded0
        let statusReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .statusReason)
        statusReason = statusReasonDecoded
        let contextDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .context)
        context = contextDecoded
    }
}
