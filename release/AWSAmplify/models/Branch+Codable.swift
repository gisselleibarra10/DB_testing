// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AmplifyClientTypes.Branch: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case activeJobId
        case associatedResources
        case backendEnvironmentArn
        case basicAuthCredentials
        case branchArn
        case branchName
        case buildSpec
        case createTime
        case customDomains
        case description
        case destinationBranch
        case displayName
        case enableAutoBuild
        case enableBasicAuth
        case enableNotification
        case enablePerformanceMode
        case enablePullRequestPreview
        case environmentVariables
        case framework
        case pullRequestEnvironmentName
        case sourceBranch
        case stage
        case tags
        case thumbnailUrl
        case totalNumberOfJobs
        case ttl
        case updateTime
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let activeJobId = self.activeJobId {
            try encodeContainer.encode(activeJobId, forKey: .activeJobId)
        }
        if let associatedResources = associatedResources {
            var associatedResourcesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .associatedResources)
            for associatedresources0 in associatedResources {
                try associatedResourcesContainer.encode(associatedresources0)
            }
        }
        if let backendEnvironmentArn = self.backendEnvironmentArn {
            try encodeContainer.encode(backendEnvironmentArn, forKey: .backendEnvironmentArn)
        }
        if let basicAuthCredentials = self.basicAuthCredentials {
            try encodeContainer.encode(basicAuthCredentials, forKey: .basicAuthCredentials)
        }
        if let branchArn = self.branchArn {
            try encodeContainer.encode(branchArn, forKey: .branchArn)
        }
        if let branchName = self.branchName {
            try encodeContainer.encode(branchName, forKey: .branchName)
        }
        if let buildSpec = self.buildSpec {
            try encodeContainer.encode(buildSpec, forKey: .buildSpec)
        }
        if let createTime = self.createTime {
            try encodeContainer.encode(createTime.timeIntervalSince1970, forKey: .createTime)
        }
        if let customDomains = customDomains {
            var customDomainsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .customDomains)
            for customdomains0 in customDomains {
                try customDomainsContainer.encode(customdomains0)
            }
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let destinationBranch = self.destinationBranch {
            try encodeContainer.encode(destinationBranch, forKey: .destinationBranch)
        }
        if let displayName = self.displayName {
            try encodeContainer.encode(displayName, forKey: .displayName)
        }
        if let enableAutoBuild = self.enableAutoBuild {
            try encodeContainer.encode(enableAutoBuild, forKey: .enableAutoBuild)
        }
        if let enableBasicAuth = self.enableBasicAuth {
            try encodeContainer.encode(enableBasicAuth, forKey: .enableBasicAuth)
        }
        if let enableNotification = self.enableNotification {
            try encodeContainer.encode(enableNotification, forKey: .enableNotification)
        }
        if let enablePerformanceMode = self.enablePerformanceMode {
            try encodeContainer.encode(enablePerformanceMode, forKey: .enablePerformanceMode)
        }
        if let enablePullRequestPreview = self.enablePullRequestPreview {
            try encodeContainer.encode(enablePullRequestPreview, forKey: .enablePullRequestPreview)
        }
        if let environmentVariables = environmentVariables {
            var environmentVariablesContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .environmentVariables)
            for (dictKey0, environmentvariables0) in environmentVariables {
                try environmentVariablesContainer.encode(environmentvariables0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let framework = self.framework {
            try encodeContainer.encode(framework, forKey: .framework)
        }
        if let pullRequestEnvironmentName = self.pullRequestEnvironmentName {
            try encodeContainer.encode(pullRequestEnvironmentName, forKey: .pullRequestEnvironmentName)
        }
        if let sourceBranch = self.sourceBranch {
            try encodeContainer.encode(sourceBranch, forKey: .sourceBranch)
        }
        if let stage = self.stage {
            try encodeContainer.encode(stage.rawValue, forKey: .stage)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, tagmap0) in tags {
                try tagsContainer.encode(tagmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let thumbnailUrl = self.thumbnailUrl {
            try encodeContainer.encode(thumbnailUrl, forKey: .thumbnailUrl)
        }
        if let totalNumberOfJobs = self.totalNumberOfJobs {
            try encodeContainer.encode(totalNumberOfJobs, forKey: .totalNumberOfJobs)
        }
        if let ttl = self.ttl {
            try encodeContainer.encode(ttl, forKey: .ttl)
        }
        if let updateTime = self.updateTime {
            try encodeContainer.encode(updateTime.timeIntervalSince1970, forKey: .updateTime)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let branchArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .branchArn)
        branchArn = branchArnDecoded
        let branchNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .branchName)
        branchName = branchNameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
        let stageDecoded = try containerValues.decodeIfPresent(AmplifyClientTypes.Stage.self, forKey: .stage)
        stage = stageDecoded
        let displayNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .displayName)
        displayName = displayNameDecoded
        let enableNotificationDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enableNotification)
        enableNotification = enableNotificationDecoded
        let createTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createTime)
        createTime = createTimeDecoded
        let updateTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .updateTime)
        updateTime = updateTimeDecoded
        let environmentVariablesContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .environmentVariables)
        var environmentVariablesDecoded0: [Swift.String:Swift.String]? = nil
        if let environmentVariablesContainer = environmentVariablesContainer {
            environmentVariablesDecoded0 = [Swift.String:Swift.String]()
            for (key0, envvalue0) in environmentVariablesContainer {
                if let envvalue0 = envvalue0 {
                    environmentVariablesDecoded0?[key0] = envvalue0
                }
            }
        }
        environmentVariables = environmentVariablesDecoded0
        let enableAutoBuildDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enableAutoBuild)
        enableAutoBuild = enableAutoBuildDecoded
        let customDomainsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .customDomains)
        var customDomainsDecoded0:[Swift.String]? = nil
        if let customDomainsContainer = customDomainsContainer {
            customDomainsDecoded0 = [Swift.String]()
            for string0 in customDomainsContainer {
                if let string0 = string0 {
                    customDomainsDecoded0?.append(string0)
                }
            }
        }
        customDomains = customDomainsDecoded0
        let frameworkDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .framework)
        framework = frameworkDecoded
        let activeJobIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .activeJobId)
        activeJobId = activeJobIdDecoded
        let totalNumberOfJobsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .totalNumberOfJobs)
        totalNumberOfJobs = totalNumberOfJobsDecoded
        let enableBasicAuthDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enableBasicAuth)
        enableBasicAuth = enableBasicAuthDecoded
        let enablePerformanceModeDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enablePerformanceMode)
        enablePerformanceMode = enablePerformanceModeDecoded
        let thumbnailUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .thumbnailUrl)
        thumbnailUrl = thumbnailUrlDecoded
        let basicAuthCredentialsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .basicAuthCredentials)
        basicAuthCredentials = basicAuthCredentialsDecoded
        let buildSpecDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .buildSpec)
        buildSpec = buildSpecDecoded
        let ttlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ttl)
        ttl = ttlDecoded
        let associatedResourcesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .associatedResources)
        var associatedResourcesDecoded0:[Swift.String]? = nil
        if let associatedResourcesContainer = associatedResourcesContainer {
            associatedResourcesDecoded0 = [Swift.String]()
            for string0 in associatedResourcesContainer {
                if let string0 = string0 {
                    associatedResourcesDecoded0?.append(string0)
                }
            }
        }
        associatedResources = associatedResourcesDecoded0
        let enablePullRequestPreviewDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enablePullRequestPreview)
        enablePullRequestPreview = enablePullRequestPreviewDecoded
        let pullRequestEnvironmentNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pullRequestEnvironmentName)
        pullRequestEnvironmentName = pullRequestEnvironmentNameDecoded
        let destinationBranchDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .destinationBranch)
        destinationBranch = destinationBranchDecoded
        let sourceBranchDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceBranch)
        sourceBranch = sourceBranchDecoded
        let backendEnvironmentArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .backendEnvironmentArn)
        backendEnvironmentArn = backendEnvironmentArnDecoded
    }
}
