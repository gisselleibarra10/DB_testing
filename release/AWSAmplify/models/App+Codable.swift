// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AmplifyClientTypes.App: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case appArn
        case appId
        case autoBranchCreationConfig
        case autoBranchCreationPatterns
        case basicAuthCredentials
        case buildSpec
        case createTime
        case customHeaders
        case customRules
        case defaultDomain
        case description
        case enableAutoBranchCreation
        case enableBasicAuth
        case enableBranchAutoBuild
        case enableBranchAutoDeletion
        case environmentVariables
        case iamServiceRoleArn
        case name
        case platform
        case productionBranch
        case repository
        case repositoryCloneMethod
        case tags
        case updateTime
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let appArn = self.appArn {
            try encodeContainer.encode(appArn, forKey: .appArn)
        }
        if let appId = self.appId {
            try encodeContainer.encode(appId, forKey: .appId)
        }
        if let autoBranchCreationConfig = self.autoBranchCreationConfig {
            try encodeContainer.encode(autoBranchCreationConfig, forKey: .autoBranchCreationConfig)
        }
        if let autoBranchCreationPatterns = autoBranchCreationPatterns {
            var autoBranchCreationPatternsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .autoBranchCreationPatterns)
            for autobranchcreationpatterns0 in autoBranchCreationPatterns {
                try autoBranchCreationPatternsContainer.encode(autobranchcreationpatterns0)
            }
        }
        if let basicAuthCredentials = self.basicAuthCredentials {
            try encodeContainer.encode(basicAuthCredentials, forKey: .basicAuthCredentials)
        }
        if let buildSpec = self.buildSpec {
            try encodeContainer.encode(buildSpec, forKey: .buildSpec)
        }
        if let createTime = self.createTime {
            try encodeContainer.encode(createTime.timeIntervalSince1970, forKey: .createTime)
        }
        if let customHeaders = self.customHeaders {
            try encodeContainer.encode(customHeaders, forKey: .customHeaders)
        }
        if let customRules = customRules {
            var customRulesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .customRules)
            for customrules0 in customRules {
                try customRulesContainer.encode(customrules0)
            }
        }
        if let defaultDomain = self.defaultDomain {
            try encodeContainer.encode(defaultDomain, forKey: .defaultDomain)
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let enableAutoBranchCreation = self.enableAutoBranchCreation {
            try encodeContainer.encode(enableAutoBranchCreation, forKey: .enableAutoBranchCreation)
        }
        if let enableBasicAuth = self.enableBasicAuth {
            try encodeContainer.encode(enableBasicAuth, forKey: .enableBasicAuth)
        }
        if let enableBranchAutoBuild = self.enableBranchAutoBuild {
            try encodeContainer.encode(enableBranchAutoBuild, forKey: .enableBranchAutoBuild)
        }
        if let enableBranchAutoDeletion = self.enableBranchAutoDeletion {
            try encodeContainer.encode(enableBranchAutoDeletion, forKey: .enableBranchAutoDeletion)
        }
        if let environmentVariables = environmentVariables {
            var environmentVariablesContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .environmentVariables)
            for (dictKey0, environmentvariables0) in environmentVariables {
                try environmentVariablesContainer.encode(environmentvariables0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let iamServiceRoleArn = self.iamServiceRoleArn {
            try encodeContainer.encode(iamServiceRoleArn, forKey: .iamServiceRoleArn)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let platform = self.platform {
            try encodeContainer.encode(platform.rawValue, forKey: .platform)
        }
        if let productionBranch = self.productionBranch {
            try encodeContainer.encode(productionBranch, forKey: .productionBranch)
        }
        if let repository = self.repository {
            try encodeContainer.encode(repository, forKey: .repository)
        }
        if let repositoryCloneMethod = self.repositoryCloneMethod {
            try encodeContainer.encode(repositoryCloneMethod.rawValue, forKey: .repositoryCloneMethod)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, tagmap0) in tags {
                try tagsContainer.encode(tagmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let updateTime = self.updateTime {
            try encodeContainer.encode(updateTime.timeIntervalSince1970, forKey: .updateTime)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let appIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .appId)
        appId = appIdDecoded
        let appArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .appArn)
        appArn = appArnDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let repositoryDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .repository)
        repository = repositoryDecoded
        let platformDecoded = try containerValues.decodeIfPresent(AmplifyClientTypes.Platform.self, forKey: .platform)
        platform = platformDecoded
        let createTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createTime)
        createTime = createTimeDecoded
        let updateTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .updateTime)
        updateTime = updateTimeDecoded
        let iamServiceRoleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .iamServiceRoleArn)
        iamServiceRoleArn = iamServiceRoleArnDecoded
        let environmentVariablesContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .environmentVariables)
        var environmentVariablesDecoded0: [Swift.String:Swift.String]? = nil
        if let environmentVariablesContainer = environmentVariablesContainer {
            environmentVariablesDecoded0 = [Swift.String:Swift.String]()
            for (key0, envvalue0) in environmentVariablesContainer {
                if let envvalue0 = envvalue0 {
                    environmentVariablesDecoded0?[key0] = envvalue0
                }
            }
        }
        environmentVariables = environmentVariablesDecoded0
        let defaultDomainDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .defaultDomain)
        defaultDomain = defaultDomainDecoded
        let enableBranchAutoBuildDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enableBranchAutoBuild)
        enableBranchAutoBuild = enableBranchAutoBuildDecoded
        let enableBranchAutoDeletionDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enableBranchAutoDeletion)
        enableBranchAutoDeletion = enableBranchAutoDeletionDecoded
        let enableBasicAuthDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enableBasicAuth)
        enableBasicAuth = enableBasicAuthDecoded
        let basicAuthCredentialsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .basicAuthCredentials)
        basicAuthCredentials = basicAuthCredentialsDecoded
        let customRulesContainer = try containerValues.decodeIfPresent([AmplifyClientTypes.CustomRule?].self, forKey: .customRules)
        var customRulesDecoded0:[AmplifyClientTypes.CustomRule]? = nil
        if let customRulesContainer = customRulesContainer {
            customRulesDecoded0 = [AmplifyClientTypes.CustomRule]()
            for structure0 in customRulesContainer {
                if let structure0 = structure0 {
                    customRulesDecoded0?.append(structure0)
                }
            }
        }
        customRules = customRulesDecoded0
        let productionBranchDecoded = try containerValues.decodeIfPresent(AmplifyClientTypes.ProductionBranch.self, forKey: .productionBranch)
        productionBranch = productionBranchDecoded
        let buildSpecDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .buildSpec)
        buildSpec = buildSpecDecoded
        let customHeadersDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .customHeaders)
        customHeaders = customHeadersDecoded
        let enableAutoBranchCreationDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enableAutoBranchCreation)
        enableAutoBranchCreation = enableAutoBranchCreationDecoded
        let autoBranchCreationPatternsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .autoBranchCreationPatterns)
        var autoBranchCreationPatternsDecoded0:[Swift.String]? = nil
        if let autoBranchCreationPatternsContainer = autoBranchCreationPatternsContainer {
            autoBranchCreationPatternsDecoded0 = [Swift.String]()
            for string0 in autoBranchCreationPatternsContainer {
                if let string0 = string0 {
                    autoBranchCreationPatternsDecoded0?.append(string0)
                }
            }
        }
        autoBranchCreationPatterns = autoBranchCreationPatternsDecoded0
        let autoBranchCreationConfigDecoded = try containerValues.decodeIfPresent(AmplifyClientTypes.AutoBranchCreationConfig.self, forKey: .autoBranchCreationConfig)
        autoBranchCreationConfig = autoBranchCreationConfigDecoded
        let repositoryCloneMethodDecoded = try containerValues.decodeIfPresent(AmplifyClientTypes.RepositoryCloneMethod.self, forKey: .repositoryCloneMethod)
        repositoryCloneMethod = repositoryCloneMethodDecoded
    }
}
