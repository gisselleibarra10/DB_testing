// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateBranchInputBody: Swift.Equatable {
    let branchName: Swift.String?
    let description: Swift.String?
    let stage: AmplifyClientTypes.Stage?
    let framework: Swift.String?
    let enableNotification: Swift.Bool?
    let enableAutoBuild: Swift.Bool?
    let environmentVariables: [Swift.String:Swift.String]?
    let basicAuthCredentials: Swift.String?
    let enableBasicAuth: Swift.Bool?
    let enablePerformanceMode: Swift.Bool?
    let tags: [Swift.String:Swift.String]?
    let buildSpec: Swift.String?
    let ttl: Swift.String?
    let displayName: Swift.String?
    let enablePullRequestPreview: Swift.Bool?
    let pullRequestEnvironmentName: Swift.String?
    let backendEnvironmentArn: Swift.String?
}

extension CreateBranchInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case backendEnvironmentArn
        case basicAuthCredentials
        case branchName
        case buildSpec
        case description
        case displayName
        case enableAutoBuild
        case enableBasicAuth
        case enableNotification
        case enablePerformanceMode
        case enablePullRequestPreview
        case environmentVariables
        case framework
        case pullRequestEnvironmentName
        case stage
        case tags
        case ttl
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let branchNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .branchName)
        branchName = branchNameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let stageDecoded = try containerValues.decodeIfPresent(AmplifyClientTypes.Stage.self, forKey: .stage)
        stage = stageDecoded
        let frameworkDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .framework)
        framework = frameworkDecoded
        let enableNotificationDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enableNotification)
        enableNotification = enableNotificationDecoded
        let enableAutoBuildDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enableAutoBuild)
        enableAutoBuild = enableAutoBuildDecoded
        let environmentVariablesContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .environmentVariables)
        var environmentVariablesDecoded0: [Swift.String:Swift.String]? = nil
        if let environmentVariablesContainer = environmentVariablesContainer {
            environmentVariablesDecoded0 = [Swift.String:Swift.String]()
            for (key0, envvalue0) in environmentVariablesContainer {
                if let envvalue0 = envvalue0 {
                    environmentVariablesDecoded0?[key0] = envvalue0
                }
            }
        }
        environmentVariables = environmentVariablesDecoded0
        let basicAuthCredentialsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .basicAuthCredentials)
        basicAuthCredentials = basicAuthCredentialsDecoded
        let enableBasicAuthDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enableBasicAuth)
        enableBasicAuth = enableBasicAuthDecoded
        let enablePerformanceModeDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enablePerformanceMode)
        enablePerformanceMode = enablePerformanceModeDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
        let buildSpecDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .buildSpec)
        buildSpec = buildSpecDecoded
        let ttlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ttl)
        ttl = ttlDecoded
        let displayNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .displayName)
        displayName = displayNameDecoded
        let enablePullRequestPreviewDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enablePullRequestPreview)
        enablePullRequestPreview = enablePullRequestPreviewDecoded
        let pullRequestEnvironmentNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pullRequestEnvironmentName)
        pullRequestEnvironmentName = pullRequestEnvironmentNameDecoded
        let backendEnvironmentArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .backendEnvironmentArn)
        backendEnvironmentArn = backendEnvironmentArnDecoded
    }
}
