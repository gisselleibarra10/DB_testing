// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct UpdateAppInputBody: Swift.Equatable {
    let name: Swift.String?
    let description: Swift.String?
    let platform: AmplifyClientTypes.Platform?
    let iamServiceRoleArn: Swift.String?
    let environmentVariables: [Swift.String:Swift.String]?
    let enableBranchAutoBuild: Swift.Bool?
    let enableBranchAutoDeletion: Swift.Bool?
    let enableBasicAuth: Swift.Bool?
    let basicAuthCredentials: Swift.String?
    let customRules: [AmplifyClientTypes.CustomRule]?
    let buildSpec: Swift.String?
    let customHeaders: Swift.String?
    let enableAutoBranchCreation: Swift.Bool?
    let autoBranchCreationPatterns: [Swift.String]?
    let autoBranchCreationConfig: AmplifyClientTypes.AutoBranchCreationConfig?
    let repository: Swift.String?
    let oauthToken: Swift.String?
    let accessToken: Swift.String?
}

extension UpdateAppInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accessToken
        case autoBranchCreationConfig
        case autoBranchCreationPatterns
        case basicAuthCredentials
        case buildSpec
        case customHeaders
        case customRules
        case description
        case enableAutoBranchCreation
        case enableBasicAuth
        case enableBranchAutoBuild
        case enableBranchAutoDeletion
        case environmentVariables
        case iamServiceRoleArn
        case name
        case oauthToken
        case platform
        case repository
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let platformDecoded = try containerValues.decodeIfPresent(AmplifyClientTypes.Platform.self, forKey: .platform)
        platform = platformDecoded
        let iamServiceRoleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .iamServiceRoleArn)
        iamServiceRoleArn = iamServiceRoleArnDecoded
        let environmentVariablesContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .environmentVariables)
        var environmentVariablesDecoded0: [Swift.String:Swift.String]? = nil
        if let environmentVariablesContainer = environmentVariablesContainer {
            environmentVariablesDecoded0 = [Swift.String:Swift.String]()
            for (key0, envvalue0) in environmentVariablesContainer {
                if let envvalue0 = envvalue0 {
                    environmentVariablesDecoded0?[key0] = envvalue0
                }
            }
        }
        environmentVariables = environmentVariablesDecoded0
        let enableBranchAutoBuildDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enableBranchAutoBuild)
        enableBranchAutoBuild = enableBranchAutoBuildDecoded
        let enableBranchAutoDeletionDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enableBranchAutoDeletion)
        enableBranchAutoDeletion = enableBranchAutoDeletionDecoded
        let enableBasicAuthDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enableBasicAuth)
        enableBasicAuth = enableBasicAuthDecoded
        let basicAuthCredentialsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .basicAuthCredentials)
        basicAuthCredentials = basicAuthCredentialsDecoded
        let customRulesContainer = try containerValues.decodeIfPresent([AmplifyClientTypes.CustomRule?].self, forKey: .customRules)
        var customRulesDecoded0:[AmplifyClientTypes.CustomRule]? = nil
        if let customRulesContainer = customRulesContainer {
            customRulesDecoded0 = [AmplifyClientTypes.CustomRule]()
            for structure0 in customRulesContainer {
                if let structure0 = structure0 {
                    customRulesDecoded0?.append(structure0)
                }
            }
        }
        customRules = customRulesDecoded0
        let buildSpecDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .buildSpec)
        buildSpec = buildSpecDecoded
        let customHeadersDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .customHeaders)
        customHeaders = customHeadersDecoded
        let enableAutoBranchCreationDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enableAutoBranchCreation)
        enableAutoBranchCreation = enableAutoBranchCreationDecoded
        let autoBranchCreationPatternsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .autoBranchCreationPatterns)
        var autoBranchCreationPatternsDecoded0:[Swift.String]? = nil
        if let autoBranchCreationPatternsContainer = autoBranchCreationPatternsContainer {
            autoBranchCreationPatternsDecoded0 = [Swift.String]()
            for string0 in autoBranchCreationPatternsContainer {
                if let string0 = string0 {
                    autoBranchCreationPatternsDecoded0?.append(string0)
                }
            }
        }
        autoBranchCreationPatterns = autoBranchCreationPatternsDecoded0
        let autoBranchCreationConfigDecoded = try containerValues.decodeIfPresent(AmplifyClientTypes.AutoBranchCreationConfig.self, forKey: .autoBranchCreationConfig)
        autoBranchCreationConfig = autoBranchCreationConfigDecoded
        let repositoryDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .repository)
        repository = repositoryDecoded
        let oauthTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .oauthToken)
        oauthToken = oauthTokenDecoded
        let accessTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .accessToken)
        accessToken = accessTokenDecoded
    }
}
