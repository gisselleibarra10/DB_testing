// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ManagedBlockchainClientTypes.Network: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "Arn"
        case creationDate = "CreationDate"
        case description = "Description"
        case framework = "Framework"
        case frameworkAttributes = "FrameworkAttributes"
        case frameworkVersion = "FrameworkVersion"
        case id = "Id"
        case name = "Name"
        case status = "Status"
        case tags = "Tags"
        case votingPolicy = "VotingPolicy"
        case vpcEndpointServiceName = "VpcEndpointServiceName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = self.arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let creationDate = self.creationDate {
            try encodeContainer.encode(creationDate.timeIntervalSince1970, forKey: .creationDate)
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let framework = self.framework {
            try encodeContainer.encode(framework.rawValue, forKey: .framework)
        }
        if let frameworkAttributes = self.frameworkAttributes {
            try encodeContainer.encode(frameworkAttributes, forKey: .frameworkAttributes)
        }
        if let frameworkVersion = self.frameworkVersion {
            try encodeContainer.encode(frameworkVersion, forKey: .frameworkVersion)
        }
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, outputtagmap0) in tags {
                try tagsContainer.encode(outputtagmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let votingPolicy = self.votingPolicy {
            try encodeContainer.encode(votingPolicy, forKey: .votingPolicy)
        }
        if let vpcEndpointServiceName = self.vpcEndpointServiceName {
            try encodeContainer.encode(vpcEndpointServiceName, forKey: .vpcEndpointServiceName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let frameworkDecoded = try containerValues.decodeIfPresent(ManagedBlockchainClientTypes.Framework.self, forKey: .framework)
        framework = frameworkDecoded
        let frameworkVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .frameworkVersion)
        frameworkVersion = frameworkVersionDecoded
        let frameworkAttributesDecoded = try containerValues.decodeIfPresent(ManagedBlockchainClientTypes.NetworkFrameworkAttributes.self, forKey: .frameworkAttributes)
        frameworkAttributes = frameworkAttributesDecoded
        let vpcEndpointServiceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vpcEndpointServiceName)
        vpcEndpointServiceName = vpcEndpointServiceNameDecoded
        let votingPolicyDecoded = try containerValues.decodeIfPresent(ManagedBlockchainClientTypes.VotingPolicy.self, forKey: .votingPolicy)
        votingPolicy = votingPolicyDecoded
        let statusDecoded = try containerValues.decodeIfPresent(ManagedBlockchainClientTypes.NetworkStatus.self, forKey: .status)
        status = statusDecoded
        let creationDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationDate)
        creationDate = creationDateDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
    }
}
