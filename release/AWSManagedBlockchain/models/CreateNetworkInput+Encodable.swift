// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CreateNetworkInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientRequestToken = "ClientRequestToken"
        case description = "Description"
        case framework = "Framework"
        case frameworkConfiguration = "FrameworkConfiguration"
        case frameworkVersion = "FrameworkVersion"
        case memberConfiguration = "MemberConfiguration"
        case name = "Name"
        case tags = "Tags"
        case votingPolicy = "VotingPolicy"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientRequestToken = self.clientRequestToken {
            try encodeContainer.encode(clientRequestToken, forKey: .clientRequestToken)
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let framework = self.framework {
            try encodeContainer.encode(framework.rawValue, forKey: .framework)
        }
        if let frameworkConfiguration = self.frameworkConfiguration {
            try encodeContainer.encode(frameworkConfiguration, forKey: .frameworkConfiguration)
        }
        if let frameworkVersion = self.frameworkVersion {
            try encodeContainer.encode(frameworkVersion, forKey: .frameworkVersion)
        }
        if let memberConfiguration = self.memberConfiguration {
            try encodeContainer.encode(memberConfiguration, forKey: .memberConfiguration)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, inputtagmap0) in tags {
                try tagsContainer.encode(inputtagmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let votingPolicy = self.votingPolicy {
            try encodeContainer.encode(votingPolicy, forKey: .votingPolicy)
        }
    }
}
