// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListProposalVotesOutputResponseBody: Swift.Equatable {
    let proposalVotes: [ManagedBlockchainClientTypes.VoteSummary]?
    let nextToken: Swift.String?
}

extension ListProposalVotesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case proposalVotes = "ProposalVotes"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let proposalVotesContainer = try containerValues.decodeIfPresent([ManagedBlockchainClientTypes.VoteSummary?].self, forKey: .proposalVotes)
        var proposalVotesDecoded0:[ManagedBlockchainClientTypes.VoteSummary]? = nil
        if let proposalVotesContainer = proposalVotesContainer {
            proposalVotesDecoded0 = [ManagedBlockchainClientTypes.VoteSummary]()
            for structure0 in proposalVotesContainer {
                if let structure0 = structure0 {
                    proposalVotesDecoded0?.append(structure0)
                }
            }
        }
        proposalVotes = proposalVotesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
