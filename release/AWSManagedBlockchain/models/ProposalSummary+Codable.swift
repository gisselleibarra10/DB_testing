// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ManagedBlockchainClientTypes.ProposalSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "Arn"
        case creationDate = "CreationDate"
        case description = "Description"
        case expirationDate = "ExpirationDate"
        case proposalId = "ProposalId"
        case proposedByMemberId = "ProposedByMemberId"
        case proposedByMemberName = "ProposedByMemberName"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = self.arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let creationDate = self.creationDate {
            try encodeContainer.encode(creationDate.timeIntervalSince1970, forKey: .creationDate)
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let expirationDate = self.expirationDate {
            try encodeContainer.encode(expirationDate.timeIntervalSince1970, forKey: .expirationDate)
        }
        if let proposalId = self.proposalId {
            try encodeContainer.encode(proposalId, forKey: .proposalId)
        }
        if let proposedByMemberId = self.proposedByMemberId {
            try encodeContainer.encode(proposedByMemberId, forKey: .proposedByMemberId)
        }
        if let proposedByMemberName = self.proposedByMemberName {
            try encodeContainer.encode(proposedByMemberName, forKey: .proposedByMemberName)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let proposalIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .proposalId)
        proposalId = proposalIdDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let proposedByMemberIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .proposedByMemberId)
        proposedByMemberId = proposedByMemberIdDecoded
        let proposedByMemberNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .proposedByMemberName)
        proposedByMemberName = proposedByMemberNameDecoded
        let statusDecoded = try containerValues.decodeIfPresent(ManagedBlockchainClientTypes.ProposalStatus.self, forKey: .status)
        status = statusDecoded
        let creationDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationDate)
        creationDate = creationDateDecoded
        let expirationDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .expirationDate)
        expirationDate = expirationDateDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
    }
}
