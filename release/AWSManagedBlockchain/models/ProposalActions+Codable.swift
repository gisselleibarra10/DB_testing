// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ManagedBlockchainClientTypes.ProposalActions: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case invitations = "Invitations"
        case removals = "Removals"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let invitations = invitations {
            var invitationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .invitations)
            for inviteactionlist0 in invitations {
                try invitationsContainer.encode(inviteactionlist0)
            }
        }
        if let removals = removals {
            var removalsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .removals)
            for removeactionlist0 in removals {
                try removalsContainer.encode(removeactionlist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let invitationsContainer = try containerValues.decodeIfPresent([ManagedBlockchainClientTypes.InviteAction?].self, forKey: .invitations)
        var invitationsDecoded0:[ManagedBlockchainClientTypes.InviteAction]? = nil
        if let invitationsContainer = invitationsContainer {
            invitationsDecoded0 = [ManagedBlockchainClientTypes.InviteAction]()
            for structure0 in invitationsContainer {
                if let structure0 = structure0 {
                    invitationsDecoded0?.append(structure0)
                }
            }
        }
        invitations = invitationsDecoded0
        let removalsContainer = try containerValues.decodeIfPresent([ManagedBlockchainClientTypes.RemoveAction?].self, forKey: .removals)
        var removalsDecoded0:[ManagedBlockchainClientTypes.RemoveAction]? = nil
        if let removalsContainer = removalsContainer {
            removalsDecoded0 = [ManagedBlockchainClientTypes.RemoveAction]()
            for structure0 in removalsContainer {
                if let structure0 = structure0 {
                    removalsDecoded0?.append(structure0)
                }
            }
        }
        removals = removalsDecoded0
    }
}
