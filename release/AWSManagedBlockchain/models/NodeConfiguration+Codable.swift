// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ManagedBlockchainClientTypes.NodeConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case availabilityZone = "AvailabilityZone"
        case instanceType = "InstanceType"
        case logPublishingConfiguration = "LogPublishingConfiguration"
        case stateDB = "StateDB"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let availabilityZone = self.availabilityZone {
            try encodeContainer.encode(availabilityZone, forKey: .availabilityZone)
        }
        if let instanceType = self.instanceType {
            try encodeContainer.encode(instanceType, forKey: .instanceType)
        }
        if let logPublishingConfiguration = self.logPublishingConfiguration {
            try encodeContainer.encode(logPublishingConfiguration, forKey: .logPublishingConfiguration)
        }
        if let stateDB = self.stateDB {
            try encodeContainer.encode(stateDB.rawValue, forKey: .stateDB)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instanceTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceType)
        instanceType = instanceTypeDecoded
        let availabilityZoneDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .availabilityZone)
        availabilityZone = availabilityZoneDecoded
        let logPublishingConfigurationDecoded = try containerValues.decodeIfPresent(ManagedBlockchainClientTypes.NodeLogPublishingConfiguration.self, forKey: .logPublishingConfiguration)
        logPublishingConfiguration = logPublishingConfigurationDecoded
        let stateDBDecoded = try containerValues.decodeIfPresent(ManagedBlockchainClientTypes.StateDBType.self, forKey: .stateDB)
        stateDB = stateDBDecoded
    }
}
