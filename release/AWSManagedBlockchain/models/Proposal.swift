// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ManagedBlockchainClientTypes {
    /// Properties of a proposal on a Managed Blockchain network. Applies only to Hyperledger Fabric.
    public struct Proposal: Swift.Equatable {
        /// The actions to perform on the network if the proposal is APPROVED.
        public var actions: ManagedBlockchainClientTypes.ProposalActions?
        /// The Amazon Resource Name (ARN) of the proposal. For more information about ARNs and their format, see [Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the AWS General Reference.
        public var arn: Swift.String?
        /// The date and time that the proposal was created.
        public var creationDate: ClientRuntime.Date?
        /// The description of the proposal.
        public var description: Swift.String?
        /// The date and time that the proposal expires. This is the CreationDate plus the ProposalDurationInHours that is specified in the ProposalThresholdPolicy. After this date and time, if members have not cast enough votes to determine the outcome according to the voting policy, the proposal is EXPIRED and Actions are not carried out.
        public var expirationDate: ClientRuntime.Date?
        /// The unique identifier of the network for which the proposal is made.
        public var networkId: Swift.String?
        /// The current total of NO votes cast on the proposal by members.
        public var noVoteCount: Swift.Int?
        /// The number of votes remaining to be cast on the proposal by members. In other words, the number of members minus the sum of YES votes and NO votes.
        public var outstandingVoteCount: Swift.Int?
        /// The unique identifier of the proposal.
        public var proposalId: Swift.String?
        /// The unique identifier of the member that created the proposal.
        public var proposedByMemberId: Swift.String?
        /// The name of the member that created the proposal.
        public var proposedByMemberName: Swift.String?
        /// The status of the proposal. Values are as follows:
        ///
        /// * IN_PROGRESS - The proposal is active and open for member voting.
        ///
        /// * APPROVED - The proposal was approved with sufficient YES votes among members according to the VotingPolicy specified for the Network. The specified proposal actions are carried out.
        ///
        /// * REJECTED - The proposal was rejected with insufficient YES votes among members according to the VotingPolicy specified for the Network. The specified ProposalActions are not carried out.
        ///
        /// * EXPIRED - Members did not cast the number of votes required to determine the proposal outcome before the proposal expired. The specified ProposalActions are not carried out.
        ///
        /// * ACTION_FAILED - One or more of the specified ProposalActions in a proposal that was approved could not be completed because of an error. The ACTION_FAILED status occurs even if only one ProposalAction fails and other actions are successful.
        public var status: ManagedBlockchainClientTypes.ProposalStatus?
        /// Tags assigned to the proposal. Each tag consists of a key and optional value. For more information about tags, see [Tagging Resources](https://docs.aws.amazon.com/managed-blockchain/latest/ethereum-dev/tagging-resources.html) in the Amazon Managed Blockchain Ethereum Developer Guide, or [Tagging Resources](https://docs.aws.amazon.com/managed-blockchain/latest/hyperledger-fabric-dev/tagging-resources.html) in the Amazon Managed Blockchain Hyperledger Fabric Developer Guide.
        public var tags: [Swift.String:Swift.String]?
        /// The current total of YES votes cast on the proposal by members.
        public var yesVoteCount: Swift.Int?

        public init (
            actions: ManagedBlockchainClientTypes.ProposalActions? = nil,
            arn: Swift.String? = nil,
            creationDate: ClientRuntime.Date? = nil,
            description: Swift.String? = nil,
            expirationDate: ClientRuntime.Date? = nil,
            networkId: Swift.String? = nil,
            noVoteCount: Swift.Int? = nil,
            outstandingVoteCount: Swift.Int? = nil,
            proposalId: Swift.String? = nil,
            proposedByMemberId: Swift.String? = nil,
            proposedByMemberName: Swift.String? = nil,
            status: ManagedBlockchainClientTypes.ProposalStatus? = nil,
            tags: [Swift.String:Swift.String]? = nil,
            yesVoteCount: Swift.Int? = nil
        )
        {
            self.actions = actions
            self.arn = arn
            self.creationDate = creationDate
            self.description = description
            self.expirationDate = expirationDate
            self.networkId = networkId
            self.noVoteCount = noVoteCount
            self.outstandingVoteCount = outstandingVoteCount
            self.proposalId = proposalId
            self.proposedByMemberId = proposedByMemberId
            self.proposedByMemberName = proposedByMemberName
            self.status = status
            self.tags = tags
            self.yesVoteCount = yesVoteCount
        }
    }

}
