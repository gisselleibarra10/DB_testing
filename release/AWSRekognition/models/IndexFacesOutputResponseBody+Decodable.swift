// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct IndexFacesOutputResponseBody: Swift.Equatable {
    let faceRecords: [RekognitionClientTypes.FaceRecord]?
    let orientationCorrection: RekognitionClientTypes.OrientationCorrection?
    let faceModelVersion: Swift.String?
    let unindexedFaces: [RekognitionClientTypes.UnindexedFace]?
}

extension IndexFacesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case faceModelVersion = "FaceModelVersion"
        case faceRecords = "FaceRecords"
        case orientationCorrection = "OrientationCorrection"
        case unindexedFaces = "UnindexedFaces"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let faceRecordsContainer = try containerValues.decodeIfPresent([RekognitionClientTypes.FaceRecord?].self, forKey: .faceRecords)
        var faceRecordsDecoded0:[RekognitionClientTypes.FaceRecord]? = nil
        if let faceRecordsContainer = faceRecordsContainer {
            faceRecordsDecoded0 = [RekognitionClientTypes.FaceRecord]()
            for structure0 in faceRecordsContainer {
                if let structure0 = structure0 {
                    faceRecordsDecoded0?.append(structure0)
                }
            }
        }
        faceRecords = faceRecordsDecoded0
        let orientationCorrectionDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.OrientationCorrection.self, forKey: .orientationCorrection)
        orientationCorrection = orientationCorrectionDecoded
        let faceModelVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .faceModelVersion)
        faceModelVersion = faceModelVersionDecoded
        let unindexedFacesContainer = try containerValues.decodeIfPresent([RekognitionClientTypes.UnindexedFace?].self, forKey: .unindexedFaces)
        var unindexedFacesDecoded0:[RekognitionClientTypes.UnindexedFace]? = nil
        if let unindexedFacesContainer = unindexedFacesContainer {
            unindexedFacesDecoded0 = [RekognitionClientTypes.UnindexedFace]()
            for structure0 in unindexedFacesContainer {
                if let structure0 = structure0 {
                    unindexedFacesDecoded0?.append(structure0)
                }
            }
        }
        unindexedFaces = unindexedFacesDecoded0
    }
}
