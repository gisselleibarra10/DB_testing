// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct StartSegmentDetectionInput: Swift.Equatable {
    /// Idempotent token used to identify the start request. If you use the same token with multiple StartSegmentDetection requests, the same JobId is returned. Use ClientRequestToken to prevent the same job from being accidently started more than once.
    public var clientRequestToken: Swift.String?
    /// Filters for technical cue or shot detection.
    public var filters: RekognitionClientTypes.StartSegmentDetectionFilters?
    /// An identifier you specify that's returned in the completion notification that's published to your Amazon Simple Notification Service topic. For example, you can use JobTag to group related jobs and identify them in the completion notification.
    public var jobTag: Swift.String?
    /// The ARN of the Amazon SNS topic to which you want Amazon Rekognition Video to publish the completion status of the segment detection operation. Note that the Amazon SNS topic must have a topic name that begins with AmazonRekognition if you are using the AmazonRekognitionServiceRole permissions policy to access the topic.
    public var notificationChannel: RekognitionClientTypes.NotificationChannel?
    /// An array of segment types to detect in the video. Valid values are TECHNICAL_CUE and SHOT.
    /// This member is required.
    public var segmentTypes: [RekognitionClientTypes.SegmentType]?
    /// Video file stored in an Amazon S3 bucket. Amazon Rekognition video start operations such as [StartLabelDetection] use Video to specify a video for analysis. The supported file formats are .mp4, .mov and .avi.
    /// This member is required.
    public var video: RekognitionClientTypes.Video?

    public init (
        clientRequestToken: Swift.String? = nil,
        filters: RekognitionClientTypes.StartSegmentDetectionFilters? = nil,
        jobTag: Swift.String? = nil,
        notificationChannel: RekognitionClientTypes.NotificationChannel? = nil,
        segmentTypes: [RekognitionClientTypes.SegmentType]? = nil,
        video: RekognitionClientTypes.Video? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.filters = filters
        self.jobTag = jobTag
        self.notificationChannel = notificationChannel
        self.segmentTypes = segmentTypes
        self.video = video
    }
}
