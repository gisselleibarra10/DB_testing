// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension IndexFacesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case collectionId = "CollectionId"
        case detectionAttributes = "DetectionAttributes"
        case externalImageId = "ExternalImageId"
        case image = "Image"
        case maxFaces = "MaxFaces"
        case qualityFilter = "QualityFilter"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let collectionId = self.collectionId {
            try encodeContainer.encode(collectionId, forKey: .collectionId)
        }
        if let detectionAttributes = detectionAttributes {
            var detectionAttributesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .detectionAttributes)
            for attributes0 in detectionAttributes {
                try detectionAttributesContainer.encode(attributes0.rawValue)
            }
        }
        if let externalImageId = self.externalImageId {
            try encodeContainer.encode(externalImageId, forKey: .externalImageId)
        }
        if let image = self.image {
            try encodeContainer.encode(image, forKey: .image)
        }
        if let maxFaces = self.maxFaces {
            try encodeContainer.encode(maxFaces, forKey: .maxFaces)
        }
        if let qualityFilter = self.qualityFilter {
            try encodeContainer.encode(qualityFilter.rawValue, forKey: .qualityFilter)
        }
    }
}
