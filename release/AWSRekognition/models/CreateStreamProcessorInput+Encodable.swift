// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CreateStreamProcessorInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dataSharingPreference = "DataSharingPreference"
        case input = "Input"
        case kmsKeyId = "KmsKeyId"
        case name = "Name"
        case notificationChannel = "NotificationChannel"
        case output = "Output"
        case regionsOfInterest = "RegionsOfInterest"
        case roleArn = "RoleArn"
        case settings = "Settings"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dataSharingPreference = self.dataSharingPreference {
            try encodeContainer.encode(dataSharingPreference, forKey: .dataSharingPreference)
        }
        if let input = self.input {
            try encodeContainer.encode(input, forKey: .input)
        }
        if let kmsKeyId = self.kmsKeyId {
            try encodeContainer.encode(kmsKeyId, forKey: .kmsKeyId)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let notificationChannel = self.notificationChannel {
            try encodeContainer.encode(notificationChannel, forKey: .notificationChannel)
        }
        if let output = self.output {
            try encodeContainer.encode(output, forKey: .output)
        }
        if let regionsOfInterest = regionsOfInterest {
            var regionsOfInterestContainer = encodeContainer.nestedUnkeyedContainer(forKey: .regionsOfInterest)
            for regionsofinterest0 in regionsOfInterest {
                try regionsOfInterestContainer.encode(regionsofinterest0)
            }
        }
        if let roleArn = self.roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let settings = self.settings {
            try encodeContainer.encode(settings, forKey: .settings)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, tagmap0) in tags {
                try tagsContainer.encode(tagmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }
}
