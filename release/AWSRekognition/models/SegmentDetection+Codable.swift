// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension RekognitionClientTypes.SegmentDetection: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case durationFrames = "DurationFrames"
        case durationMillis = "DurationMillis"
        case durationSMPTE = "DurationSMPTE"
        case endFrameNumber = "EndFrameNumber"
        case endTimecodeSMPTE = "EndTimecodeSMPTE"
        case endTimestampMillis = "EndTimestampMillis"
        case shotSegment = "ShotSegment"
        case startFrameNumber = "StartFrameNumber"
        case startTimecodeSMPTE = "StartTimecodeSMPTE"
        case startTimestampMillis = "StartTimestampMillis"
        case technicalCueSegment = "TechnicalCueSegment"
        case type = "Type"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let durationFrames = self.durationFrames {
            try encodeContainer.encode(durationFrames, forKey: .durationFrames)
        }
        if let durationMillis = self.durationMillis {
            try encodeContainer.encode(durationMillis, forKey: .durationMillis)
        }
        if let durationSMPTE = self.durationSMPTE {
            try encodeContainer.encode(durationSMPTE, forKey: .durationSMPTE)
        }
        if let endFrameNumber = self.endFrameNumber {
            try encodeContainer.encode(endFrameNumber, forKey: .endFrameNumber)
        }
        if let endTimecodeSMPTE = self.endTimecodeSMPTE {
            try encodeContainer.encode(endTimecodeSMPTE, forKey: .endTimecodeSMPTE)
        }
        if endTimestampMillis != 0 {
            try encodeContainer.encode(endTimestampMillis, forKey: .endTimestampMillis)
        }
        if let shotSegment = self.shotSegment {
            try encodeContainer.encode(shotSegment, forKey: .shotSegment)
        }
        if let startFrameNumber = self.startFrameNumber {
            try encodeContainer.encode(startFrameNumber, forKey: .startFrameNumber)
        }
        if let startTimecodeSMPTE = self.startTimecodeSMPTE {
            try encodeContainer.encode(startTimecodeSMPTE, forKey: .startTimecodeSMPTE)
        }
        if startTimestampMillis != 0 {
            try encodeContainer.encode(startTimestampMillis, forKey: .startTimestampMillis)
        }
        if let technicalCueSegment = self.technicalCueSegment {
            try encodeContainer.encode(technicalCueSegment, forKey: .technicalCueSegment)
        }
        if let type = self.type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let typeDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.SegmentType.self, forKey: .type)
        type = typeDecoded
        let startTimestampMillisDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .startTimestampMillis) ?? 0
        startTimestampMillis = startTimestampMillisDecoded
        let endTimestampMillisDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .endTimestampMillis) ?? 0
        endTimestampMillis = endTimestampMillisDecoded
        let durationMillisDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .durationMillis)
        durationMillis = durationMillisDecoded
        let startTimecodeSMPTEDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .startTimecodeSMPTE)
        startTimecodeSMPTE = startTimecodeSMPTEDecoded
        let endTimecodeSMPTEDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .endTimecodeSMPTE)
        endTimecodeSMPTE = endTimecodeSMPTEDecoded
        let durationSMPTEDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .durationSMPTE)
        durationSMPTE = durationSMPTEDecoded
        let technicalCueSegmentDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.TechnicalCueSegment.self, forKey: .technicalCueSegment)
        technicalCueSegment = technicalCueSegmentDecoded
        let shotSegmentDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.ShotSegment.self, forKey: .shotSegment)
        shotSegment = shotSegmentDecoded
        let startFrameNumberDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .startFrameNumber)
        startFrameNumber = startFrameNumberDecoded
        let endFrameNumberDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .endFrameNumber)
        endFrameNumber = endFrameNumberDecoded
        let durationFramesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .durationFrames)
        durationFrames = durationFramesDecoded
    }
}
