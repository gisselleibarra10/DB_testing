// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct DescribeStreamProcessorOutputResponse: Swift.Equatable {
    /// Date and time the stream processor was created
    public var creationTimestamp: ClientRuntime.Date?
    /// Shows whether you are sharing data with Rekognition to improve model performance. You can choose this option at the account level or on a per-stream basis. Note that if you opt out at the account level this setting is ignored on individual streams.
    public var dataSharingPreference: RekognitionClientTypes.StreamProcessorDataSharingPreference?
    /// Kinesis video stream that provides the source streaming video.
    public var input: RekognitionClientTypes.StreamProcessorInput?
    /// The identifier for your AWS Key Management Service key (AWS KMS key). This is an optional parameter for label detection stream processors.
    public var kmsKeyId: Swift.String?
    /// The time, in Unix format, the stream processor was last updated. For example, when the stream processor moves from a running state to a failed state, or when the user starts or stops the stream processor.
    public var lastUpdateTimestamp: ClientRuntime.Date?
    /// Name of the stream processor.
    public var name: Swift.String?
    /// The Amazon Simple Notification Service topic to which Amazon Rekognition publishes the object detection results and completion status of a video analysis operation. Amazon Rekognition publishes a notification the first time an object of interest or a person is detected in the video stream. For example, if Amazon Rekognition detects a person at second 2, a pet at second 4, and a person again at second 5, Amazon Rekognition sends 2 object class detected notifications, one for a person at second 2 and one for a pet at second 4. Amazon Rekognition also publishes an an end-of-session notification with a summary when the stream processing session is complete.
    public var notificationChannel: RekognitionClientTypes.StreamProcessorNotificationChannel?
    /// Kinesis data stream to which Amazon Rekognition Video puts the analysis results.
    public var output: RekognitionClientTypes.StreamProcessorOutput?
    /// Specifies locations in the frames where Amazon Rekognition checks for objects or people. This is an optional parameter for label detection stream processors.
    public var regionsOfInterest: [RekognitionClientTypes.RegionOfInterest]?
    /// ARN of the IAM role that allows access to the stream processor.
    public var roleArn: Swift.String?
    /// Input parameters used in a streaming video analyzed by a stream processor. You can use FaceSearch to recognize faces in a streaming video, or you can use ConnectedHome to detect labels.
    public var settings: RekognitionClientTypes.StreamProcessorSettings?
    /// Current status of the stream processor.
    public var status: RekognitionClientTypes.StreamProcessorStatus?
    /// Detailed status message about the stream processor.
    public var statusMessage: Swift.String?
    /// ARN of the stream processor.
    public var streamProcessorArn: Swift.String?

    public init (
        creationTimestamp: ClientRuntime.Date? = nil,
        dataSharingPreference: RekognitionClientTypes.StreamProcessorDataSharingPreference? = nil,
        input: RekognitionClientTypes.StreamProcessorInput? = nil,
        kmsKeyId: Swift.String? = nil,
        lastUpdateTimestamp: ClientRuntime.Date? = nil,
        name: Swift.String? = nil,
        notificationChannel: RekognitionClientTypes.StreamProcessorNotificationChannel? = nil,
        output: RekognitionClientTypes.StreamProcessorOutput? = nil,
        regionsOfInterest: [RekognitionClientTypes.RegionOfInterest]? = nil,
        roleArn: Swift.String? = nil,
        settings: RekognitionClientTypes.StreamProcessorSettings? = nil,
        status: RekognitionClientTypes.StreamProcessorStatus? = nil,
        statusMessage: Swift.String? = nil,
        streamProcessorArn: Swift.String? = nil
    )
    {
        self.creationTimestamp = creationTimestamp
        self.dataSharingPreference = dataSharingPreference
        self.input = input
        self.kmsKeyId = kmsKeyId
        self.lastUpdateTimestamp = lastUpdateTimestamp
        self.name = name
        self.notificationChannel = notificationChannel
        self.output = output
        self.regionsOfInterest = regionsOfInterest
        self.roleArn = roleArn
        self.settings = settings
        self.status = status
        self.statusMessage = statusMessage
        self.streamProcessorArn = streamProcessorArn
    }
}
