// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension RekognitionClientTypes.DetectionFilter: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case minBoundingBoxHeight = "MinBoundingBoxHeight"
        case minBoundingBoxWidth = "MinBoundingBoxWidth"
        case minConfidence = "MinConfidence"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let minBoundingBoxHeight = self.minBoundingBoxHeight {
            try encodeContainer.encode(minBoundingBoxHeight, forKey: .minBoundingBoxHeight)
        }
        if let minBoundingBoxWidth = self.minBoundingBoxWidth {
            try encodeContainer.encode(minBoundingBoxWidth, forKey: .minBoundingBoxWidth)
        }
        if let minConfidence = self.minConfidence {
            try encodeContainer.encode(minConfidence, forKey: .minConfidence)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let minConfidenceDecoded = try containerValues.decodeIfPresent(Swift.Float.self, forKey: .minConfidence)
        minConfidence = minConfidenceDecoded
        let minBoundingBoxHeightDecoded = try containerValues.decodeIfPresent(Swift.Float.self, forKey: .minBoundingBoxHeight)
        minBoundingBoxHeight = minBoundingBoxHeightDecoded
        let minBoundingBoxWidthDecoded = try containerValues.decodeIfPresent(Swift.Float.self, forKey: .minBoundingBoxWidth)
        minBoundingBoxWidth = minBoundingBoxWidthDecoded
    }
}
