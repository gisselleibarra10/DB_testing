// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CompareFacesOutputResponseBody: Swift.Equatable {
    let sourceImageFace: RekognitionClientTypes.ComparedSourceImageFace?
    let faceMatches: [RekognitionClientTypes.CompareFacesMatch]?
    let unmatchedFaces: [RekognitionClientTypes.ComparedFace]?
    let sourceImageOrientationCorrection: RekognitionClientTypes.OrientationCorrection?
    let targetImageOrientationCorrection: RekognitionClientTypes.OrientationCorrection?
}

extension CompareFacesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case faceMatches = "FaceMatches"
        case sourceImageFace = "SourceImageFace"
        case sourceImageOrientationCorrection = "SourceImageOrientationCorrection"
        case targetImageOrientationCorrection = "TargetImageOrientationCorrection"
        case unmatchedFaces = "UnmatchedFaces"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sourceImageFaceDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.ComparedSourceImageFace.self, forKey: .sourceImageFace)
        sourceImageFace = sourceImageFaceDecoded
        let faceMatchesContainer = try containerValues.decodeIfPresent([RekognitionClientTypes.CompareFacesMatch?].self, forKey: .faceMatches)
        var faceMatchesDecoded0:[RekognitionClientTypes.CompareFacesMatch]? = nil
        if let faceMatchesContainer = faceMatchesContainer {
            faceMatchesDecoded0 = [RekognitionClientTypes.CompareFacesMatch]()
            for structure0 in faceMatchesContainer {
                if let structure0 = structure0 {
                    faceMatchesDecoded0?.append(structure0)
                }
            }
        }
        faceMatches = faceMatchesDecoded0
        let unmatchedFacesContainer = try containerValues.decodeIfPresent([RekognitionClientTypes.ComparedFace?].self, forKey: .unmatchedFaces)
        var unmatchedFacesDecoded0:[RekognitionClientTypes.ComparedFace]? = nil
        if let unmatchedFacesContainer = unmatchedFacesContainer {
            unmatchedFacesDecoded0 = [RekognitionClientTypes.ComparedFace]()
            for structure0 in unmatchedFacesContainer {
                if let structure0 = structure0 {
                    unmatchedFacesDecoded0?.append(structure0)
                }
            }
        }
        unmatchedFaces = unmatchedFacesDecoded0
        let sourceImageOrientationCorrectionDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.OrientationCorrection.self, forKey: .sourceImageOrientationCorrection)
        sourceImageOrientationCorrection = sourceImageOrientationCorrectionDecoded
        let targetImageOrientationCorrectionDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.OrientationCorrection.self, forKey: .targetImageOrientationCorrection)
        targetImageOrientationCorrection = targetImageOrientationCorrectionDecoded
    }
}
