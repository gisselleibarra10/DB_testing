// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct UpdateStreamProcessorInputBody: Swift.Equatable {
    let name: Swift.String?
    let settingsForUpdate: RekognitionClientTypes.StreamProcessorSettingsForUpdate?
    let regionsOfInterestForUpdate: [RekognitionClientTypes.RegionOfInterest]?
    let dataSharingPreferenceForUpdate: RekognitionClientTypes.StreamProcessorDataSharingPreference?
    let parametersToDelete: [RekognitionClientTypes.StreamProcessorParameterToDelete]?
}

extension UpdateStreamProcessorInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dataSharingPreferenceForUpdate = "DataSharingPreferenceForUpdate"
        case name = "Name"
        case parametersToDelete = "ParametersToDelete"
        case regionsOfInterestForUpdate = "RegionsOfInterestForUpdate"
        case settingsForUpdate = "SettingsForUpdate"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let settingsForUpdateDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.StreamProcessorSettingsForUpdate.self, forKey: .settingsForUpdate)
        settingsForUpdate = settingsForUpdateDecoded
        let regionsOfInterestForUpdateContainer = try containerValues.decodeIfPresent([RekognitionClientTypes.RegionOfInterest?].self, forKey: .regionsOfInterestForUpdate)
        var regionsOfInterestForUpdateDecoded0:[RekognitionClientTypes.RegionOfInterest]? = nil
        if let regionsOfInterestForUpdateContainer = regionsOfInterestForUpdateContainer {
            regionsOfInterestForUpdateDecoded0 = [RekognitionClientTypes.RegionOfInterest]()
            for structure0 in regionsOfInterestForUpdateContainer {
                if let structure0 = structure0 {
                    regionsOfInterestForUpdateDecoded0?.append(structure0)
                }
            }
        }
        regionsOfInterestForUpdate = regionsOfInterestForUpdateDecoded0
        let dataSharingPreferenceForUpdateDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.StreamProcessorDataSharingPreference.self, forKey: .dataSharingPreferenceForUpdate)
        dataSharingPreferenceForUpdate = dataSharingPreferenceForUpdateDecoded
        let parametersToDeleteContainer = try containerValues.decodeIfPresent([RekognitionClientTypes.StreamProcessorParameterToDelete?].self, forKey: .parametersToDelete)
        var parametersToDeleteDecoded0:[RekognitionClientTypes.StreamProcessorParameterToDelete]? = nil
        if let parametersToDeleteContainer = parametersToDeleteContainer {
            parametersToDeleteDecoded0 = [RekognitionClientTypes.StreamProcessorParameterToDelete]()
            for string0 in parametersToDeleteContainer {
                if let string0 = string0 {
                    parametersToDeleteDecoded0?.append(string0)
                }
            }
        }
        parametersToDelete = parametersToDeleteDecoded0
    }
}
