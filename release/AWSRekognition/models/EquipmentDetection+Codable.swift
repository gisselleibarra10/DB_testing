// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension RekognitionClientTypes.EquipmentDetection: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case boundingBox = "BoundingBox"
        case confidence = "Confidence"
        case coversBodyPart = "CoversBodyPart"
        case type = "Type"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let boundingBox = self.boundingBox {
            try encodeContainer.encode(boundingBox, forKey: .boundingBox)
        }
        if let confidence = self.confidence {
            try encodeContainer.encode(confidence, forKey: .confidence)
        }
        if let coversBodyPart = self.coversBodyPart {
            try encodeContainer.encode(coversBodyPart, forKey: .coversBodyPart)
        }
        if let type = self.type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let boundingBoxDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.BoundingBox.self, forKey: .boundingBox)
        boundingBox = boundingBoxDecoded
        let confidenceDecoded = try containerValues.decodeIfPresent(Swift.Float.self, forKey: .confidence)
        confidence = confidenceDecoded
        let typeDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.ProtectiveEquipmentType.self, forKey: .type)
        type = typeDecoded
        let coversBodyPartDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.CoversBodyPart.self, forKey: .coversBodyPart)
        coversBodyPart = coversBodyPartDecoded
    }
}
