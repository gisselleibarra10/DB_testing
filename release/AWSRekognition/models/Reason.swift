// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension RekognitionClientTypes {
    public enum Reason: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case exceedsMaxFaces
        case extremePose
        case lowBrightness
        case lowConfidence
        case lowFaceQuality
        case lowSharpness
        case smallBoundingBox
        case sdkUnknown(Swift.String)

        public static var allCases: [Reason] {
            return [
                .exceedsMaxFaces,
                .extremePose,
                .lowBrightness,
                .lowConfidence,
                .lowFaceQuality,
                .lowSharpness,
                .smallBoundingBox,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .exceedsMaxFaces: return "EXCEEDS_MAX_FACES"
            case .extremePose: return "EXTREME_POSE"
            case .lowBrightness: return "LOW_BRIGHTNESS"
            case .lowConfidence: return "LOW_CONFIDENCE"
            case .lowFaceQuality: return "LOW_FACE_QUALITY"
            case .lowSharpness: return "LOW_SHARPNESS"
            case .smallBoundingBox: return "SMALL_BOUNDING_BOX"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = Reason(rawValue: rawValue) ?? Reason.sdkUnknown(rawValue)
        }
    }
}
