// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct CreateStreamProcessorInput: Swift.Equatable {
    /// Shows whether you are sharing data with Rekognition to improve model performance. You can choose this option at the account level or on a per-stream basis. Note that if you opt out at the account level this setting is ignored on individual streams.
    public var dataSharingPreference: RekognitionClientTypes.StreamProcessorDataSharingPreference?
    /// Kinesis video stream stream that provides the source streaming video. If you are using the AWS CLI, the parameter name is StreamProcessorInput. This is required for both face search and label detection stream processors.
    /// This member is required.
    public var input: RekognitionClientTypes.StreamProcessorInput?
    /// The identifier for your AWS Key Management Service key (AWS KMS key). This is an optional parameter for label detection stream processors and should not be used to create a face search stream processor. You can supply the Amazon Resource Name (ARN) of your KMS key, the ID of your KMS key, an alias for your KMS key, or an alias ARN. The key is used to encrypt results and data published to your Amazon S3 bucket, which includes image frames and hero images. Your source images are unaffected.
    public var kmsKeyId: Swift.String?
    /// An identifier you assign to the stream processor. You can use Name to manage the stream processor. For example, you can get the current status of the stream processor by calling [DescribeStreamProcessor]. Name is idempotent. This is required for both face search and label detection stream processors.
    /// This member is required.
    public var name: Swift.String?
    /// The Amazon Simple Notification Service topic to which Amazon Rekognition publishes the object detection results and completion status of a video analysis operation. Amazon Rekognition publishes a notification the first time an object of interest or a person is detected in the video stream. For example, if Amazon Rekognition detects a person at second 2, a pet at second 4, and a person again at second 5, Amazon Rekognition sends 2 object class detected notifications, one for a person at second 2 and one for a pet at second 4. Amazon Rekognition also publishes an an end-of-session notification with a summary when the stream processing session is complete.
    public var notificationChannel: RekognitionClientTypes.StreamProcessorNotificationChannel?
    /// Kinesis data stream stream or Amazon S3 bucket location to which Amazon Rekognition Video puts the analysis results. If you are using the AWS CLI, the parameter name is StreamProcessorOutput. This must be a [S3Destination] of an Amazon S3 bucket that you own for a label detection stream processor or a Kinesis data stream ARN for a face search stream processor.
    /// This member is required.
    public var output: RekognitionClientTypes.StreamProcessorOutput?
    /// Specifies locations in the frames where Amazon Rekognition checks for objects or people. You can specify up to 10 regions of interest, and each region has either a polygon or a bounding box. This is an optional parameter for label detection stream processors and should not be used to create a face search stream processor.
    public var regionsOfInterest: [RekognitionClientTypes.RegionOfInterest]?
    /// The Amazon Resource Number (ARN) of the IAM role that allows access to the stream processor. The IAM role provides Rekognition read permissions for a Kinesis stream. It also provides write permissions to an Amazon S3 bucket and Amazon Simple Notification Service topic for a label detection stream processor. This is required for both face search and label detection stream processors.
    /// This member is required.
    public var roleArn: Swift.String?
    /// Input parameters used in a streaming video analyzed by a stream processor. You can use FaceSearch to recognize faces in a streaming video, or you can use ConnectedHome to detect labels.
    /// This member is required.
    public var settings: RekognitionClientTypes.StreamProcessorSettings?
    /// A set of tags (key-value pairs) that you want to attach to the stream processor.
    public var tags: [Swift.String:Swift.String]?

    public init (
        dataSharingPreference: RekognitionClientTypes.StreamProcessorDataSharingPreference? = nil,
        input: RekognitionClientTypes.StreamProcessorInput? = nil,
        kmsKeyId: Swift.String? = nil,
        name: Swift.String? = nil,
        notificationChannel: RekognitionClientTypes.StreamProcessorNotificationChannel? = nil,
        output: RekognitionClientTypes.StreamProcessorOutput? = nil,
        regionsOfInterest: [RekognitionClientTypes.RegionOfInterest]? = nil,
        roleArn: Swift.String? = nil,
        settings: RekognitionClientTypes.StreamProcessorSettings? = nil,
        tags: [Swift.String:Swift.String]? = nil
    )
    {
        self.dataSharingPreference = dataSharingPreference
        self.input = input
        self.kmsKeyId = kmsKeyId
        self.name = name
        self.notificationChannel = notificationChannel
        self.output = output
        self.regionsOfInterest = regionsOfInterest
        self.roleArn = roleArn
        self.settings = settings
        self.tags = tags
    }
}
