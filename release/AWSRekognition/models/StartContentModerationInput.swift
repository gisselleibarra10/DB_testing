// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct StartContentModerationInput: Swift.Equatable {
    /// Idempotent token used to identify the start request. If you use the same token with multiple StartContentModeration requests, the same JobId is returned. Use ClientRequestToken to prevent the same job from being accidently started more than once.
    public var clientRequestToken: Swift.String?
    /// An identifier you specify that's returned in the completion notification that's published to your Amazon Simple Notification Service topic. For example, you can use JobTag to group related jobs and identify them in the completion notification.
    public var jobTag: Swift.String?
    /// Specifies the minimum confidence that Amazon Rekognition must have in order to return a moderated content label. Confidence represents how certain Amazon Rekognition is that the moderated content is correctly identified. 0 is the lowest confidence. 100 is the highest confidence. Amazon Rekognition doesn't return any moderated content labels with a confidence level lower than this specified value. If you don't specify MinConfidence, GetContentModeration returns labels with confidence values greater than or equal to 50 percent.
    public var minConfidence: Swift.Float?
    /// The Amazon SNS topic ARN that you want Amazon Rekognition Video to publish the completion status of the content analysis to. The Amazon SNS topic must have a topic name that begins with AmazonRekognition if you are using the AmazonRekognitionServiceRole permissions policy to access the topic.
    public var notificationChannel: RekognitionClientTypes.NotificationChannel?
    /// The video in which you want to detect inappropriate, unwanted, or offensive content. The video must be stored in an Amazon S3 bucket.
    /// This member is required.
    public var video: RekognitionClientTypes.Video?

    public init (
        clientRequestToken: Swift.String? = nil,
        jobTag: Swift.String? = nil,
        minConfidence: Swift.Float? = nil,
        notificationChannel: RekognitionClientTypes.NotificationChannel? = nil,
        video: RekognitionClientTypes.Video? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.jobTag = jobTag
        self.minConfidence = minConfidence
        self.notificationChannel = notificationChannel
        self.video = video
    }
}
