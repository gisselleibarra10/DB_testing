// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension RekognitionClientTypes.Celebrity: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case face = "Face"
        case id = "Id"
        case knownGender = "KnownGender"
        case matchConfidence = "MatchConfidence"
        case name = "Name"
        case urls = "Urls"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let face = self.face {
            try encodeContainer.encode(face, forKey: .face)
        }
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let knownGender = self.knownGender {
            try encodeContainer.encode(knownGender, forKey: .knownGender)
        }
        if let matchConfidence = self.matchConfidence {
            try encodeContainer.encode(matchConfidence, forKey: .matchConfidence)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let urls = urls {
            var urlsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .urls)
            for urls0 in urls {
                try urlsContainer.encode(urls0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let urlsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .urls)
        var urlsDecoded0:[Swift.String]? = nil
        if let urlsContainer = urlsContainer {
            urlsDecoded0 = [Swift.String]()
            for string0 in urlsContainer {
                if let string0 = string0 {
                    urlsDecoded0?.append(string0)
                }
            }
        }
        urls = urlsDecoded0
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let faceDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.ComparedFace.self, forKey: .face)
        face = faceDecoded
        let matchConfidenceDecoded = try containerValues.decodeIfPresent(Swift.Float.self, forKey: .matchConfidence)
        matchConfidence = matchConfidenceDecoded
        let knownGenderDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.KnownGender.self, forKey: .knownGender)
        knownGender = knownGenderDecoded
    }
}
