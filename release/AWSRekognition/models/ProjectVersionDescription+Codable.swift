// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension RekognitionClientTypes.ProjectVersionDescription: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case billableTrainingTimeInSeconds = "BillableTrainingTimeInSeconds"
        case creationTimestamp = "CreationTimestamp"
        case evaluationResult = "EvaluationResult"
        case kmsKeyId = "KmsKeyId"
        case manifestSummary = "ManifestSummary"
        case maxInferenceUnits = "MaxInferenceUnits"
        case minInferenceUnits = "MinInferenceUnits"
        case outputConfig = "OutputConfig"
        case projectVersionArn = "ProjectVersionArn"
        case sourceProjectVersionArn = "SourceProjectVersionArn"
        case status = "Status"
        case statusMessage = "StatusMessage"
        case testingDataResult = "TestingDataResult"
        case trainingDataResult = "TrainingDataResult"
        case trainingEndTimestamp = "TrainingEndTimestamp"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let billableTrainingTimeInSeconds = self.billableTrainingTimeInSeconds {
            try encodeContainer.encode(billableTrainingTimeInSeconds, forKey: .billableTrainingTimeInSeconds)
        }
        if let creationTimestamp = self.creationTimestamp {
            try encodeContainer.encode(creationTimestamp.timeIntervalSince1970, forKey: .creationTimestamp)
        }
        if let evaluationResult = self.evaluationResult {
            try encodeContainer.encode(evaluationResult, forKey: .evaluationResult)
        }
        if let kmsKeyId = self.kmsKeyId {
            try encodeContainer.encode(kmsKeyId, forKey: .kmsKeyId)
        }
        if let manifestSummary = self.manifestSummary {
            try encodeContainer.encode(manifestSummary, forKey: .manifestSummary)
        }
        if let maxInferenceUnits = self.maxInferenceUnits {
            try encodeContainer.encode(maxInferenceUnits, forKey: .maxInferenceUnits)
        }
        if let minInferenceUnits = self.minInferenceUnits {
            try encodeContainer.encode(minInferenceUnits, forKey: .minInferenceUnits)
        }
        if let outputConfig = self.outputConfig {
            try encodeContainer.encode(outputConfig, forKey: .outputConfig)
        }
        if let projectVersionArn = self.projectVersionArn {
            try encodeContainer.encode(projectVersionArn, forKey: .projectVersionArn)
        }
        if let sourceProjectVersionArn = self.sourceProjectVersionArn {
            try encodeContainer.encode(sourceProjectVersionArn, forKey: .sourceProjectVersionArn)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let statusMessage = self.statusMessage {
            try encodeContainer.encode(statusMessage, forKey: .statusMessage)
        }
        if let testingDataResult = self.testingDataResult {
            try encodeContainer.encode(testingDataResult, forKey: .testingDataResult)
        }
        if let trainingDataResult = self.trainingDataResult {
            try encodeContainer.encode(trainingDataResult, forKey: .trainingDataResult)
        }
        if let trainingEndTimestamp = self.trainingEndTimestamp {
            try encodeContainer.encode(trainingEndTimestamp.timeIntervalSince1970, forKey: .trainingEndTimestamp)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let projectVersionArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .projectVersionArn)
        projectVersionArn = projectVersionArnDecoded
        let creationTimestampDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTimestamp)
        creationTimestamp = creationTimestampDecoded
        let minInferenceUnitsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .minInferenceUnits)
        minInferenceUnits = minInferenceUnitsDecoded
        let statusDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.ProjectVersionStatus.self, forKey: .status)
        status = statusDecoded
        let statusMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .statusMessage)
        statusMessage = statusMessageDecoded
        let billableTrainingTimeInSecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .billableTrainingTimeInSeconds)
        billableTrainingTimeInSeconds = billableTrainingTimeInSecondsDecoded
        let trainingEndTimestampDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .trainingEndTimestamp)
        trainingEndTimestamp = trainingEndTimestampDecoded
        let outputConfigDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.OutputConfig.self, forKey: .outputConfig)
        outputConfig = outputConfigDecoded
        let trainingDataResultDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.TrainingDataResult.self, forKey: .trainingDataResult)
        trainingDataResult = trainingDataResultDecoded
        let testingDataResultDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.TestingDataResult.self, forKey: .testingDataResult)
        testingDataResult = testingDataResultDecoded
        let evaluationResultDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.EvaluationResult.self, forKey: .evaluationResult)
        evaluationResult = evaluationResultDecoded
        let manifestSummaryDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.GroundTruthManifest.self, forKey: .manifestSummary)
        manifestSummary = manifestSummaryDecoded
        let kmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kmsKeyId)
        kmsKeyId = kmsKeyIdDecoded
        let maxInferenceUnitsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxInferenceUnits)
        maxInferenceUnits = maxInferenceUnitsDecoded
        let sourceProjectVersionArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceProjectVersionArn)
        sourceProjectVersionArn = sourceProjectVersionArnDecoded
    }
}
