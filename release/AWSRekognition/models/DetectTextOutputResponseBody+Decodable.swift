// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DetectTextOutputResponseBody: Swift.Equatable {
    let textDetections: [RekognitionClientTypes.TextDetection]?
    let textModelVersion: Swift.String?
}

extension DetectTextOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case textDetections = "TextDetections"
        case textModelVersion = "TextModelVersion"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let textDetectionsContainer = try containerValues.decodeIfPresent([RekognitionClientTypes.TextDetection?].self, forKey: .textDetections)
        var textDetectionsDecoded0:[RekognitionClientTypes.TextDetection]? = nil
        if let textDetectionsContainer = textDetectionsContainer {
            textDetectionsDecoded0 = [RekognitionClientTypes.TextDetection]()
            for structure0 in textDetectionsContainer {
                if let structure0 = structure0 {
                    textDetectionsDecoded0?.append(structure0)
                }
            }
        }
        textDetections = textDetectionsDecoded0
        let textModelVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .textModelVersion)
        textModelVersion = textModelVersionDecoded
    }
}
