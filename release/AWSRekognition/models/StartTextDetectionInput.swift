// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct StartTextDetectionInput: Swift.Equatable {
    /// Idempotent token used to identify the start request. If you use the same token with multiple StartTextDetection requests, the same JobId is returned. Use ClientRequestToken to prevent the same job from being accidentaly started more than once.
    public var clientRequestToken: Swift.String?
    /// Optional parameters that let you set criteria the text must meet to be included in your response.
    public var filters: RekognitionClientTypes.StartTextDetectionFilters?
    /// An identifier returned in the completion status published by your Amazon Simple Notification Service topic. For example, you can use JobTag to group related jobs and identify them in the completion notification.
    public var jobTag: Swift.String?
    /// The Amazon Simple Notification Service topic to which Amazon Rekognition publishes the completion status of a video analysis operation. For more information, see [Calling Amazon Rekognition Video operations](https://docs.aws.amazon.com/rekognition/latest/dg/api-video.html). Note that the Amazon SNS topic must have a topic name that begins with AmazonRekognition if you are using the AmazonRekognitionServiceRole permissions policy to access the topic. For more information, see [Giving access to multiple Amazon SNS topics](https://docs.aws.amazon.com/rekognition/latest/dg/api-video-roles.html#api-video-roles-all-topics).
    public var notificationChannel: RekognitionClientTypes.NotificationChannel?
    /// Video file stored in an Amazon S3 bucket. Amazon Rekognition video start operations such as [StartLabelDetection] use Video to specify a video for analysis. The supported file formats are .mp4, .mov and .avi.
    /// This member is required.
    public var video: RekognitionClientTypes.Video?

    public init (
        clientRequestToken: Swift.String? = nil,
        filters: RekognitionClientTypes.StartTextDetectionFilters? = nil,
        jobTag: Swift.String? = nil,
        notificationChannel: RekognitionClientTypes.NotificationChannel? = nil,
        video: RekognitionClientTypes.Video? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.filters = filters
        self.jobTag = jobTag
        self.notificationChannel = notificationChannel
        self.video = video
    }
}
