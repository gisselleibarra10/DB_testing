// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DetectProtectiveEquipmentOutputResponseBody: Swift.Equatable {
    let protectiveEquipmentModelVersion: Swift.String?
    let persons: [RekognitionClientTypes.ProtectiveEquipmentPerson]?
    let summary: RekognitionClientTypes.ProtectiveEquipmentSummary?
}

extension DetectProtectiveEquipmentOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case persons = "Persons"
        case protectiveEquipmentModelVersion = "ProtectiveEquipmentModelVersion"
        case summary = "Summary"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let protectiveEquipmentModelVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .protectiveEquipmentModelVersion)
        protectiveEquipmentModelVersion = protectiveEquipmentModelVersionDecoded
        let personsContainer = try containerValues.decodeIfPresent([RekognitionClientTypes.ProtectiveEquipmentPerson?].self, forKey: .persons)
        var personsDecoded0:[RekognitionClientTypes.ProtectiveEquipmentPerson]? = nil
        if let personsContainer = personsContainer {
            personsDecoded0 = [RekognitionClientTypes.ProtectiveEquipmentPerson]()
            for structure0 in personsContainer {
                if let structure0 = structure0 {
                    personsDecoded0?.append(structure0)
                }
            }
        }
        persons = personsDecoded0
        let summaryDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.ProtectiveEquipmentSummary.self, forKey: .summary)
        summary = summaryDecoded
    }
}
