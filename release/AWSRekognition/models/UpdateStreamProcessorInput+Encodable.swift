// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension UpdateStreamProcessorInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dataSharingPreferenceForUpdate = "DataSharingPreferenceForUpdate"
        case name = "Name"
        case parametersToDelete = "ParametersToDelete"
        case regionsOfInterestForUpdate = "RegionsOfInterestForUpdate"
        case settingsForUpdate = "SettingsForUpdate"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dataSharingPreferenceForUpdate = self.dataSharingPreferenceForUpdate {
            try encodeContainer.encode(dataSharingPreferenceForUpdate, forKey: .dataSharingPreferenceForUpdate)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let parametersToDelete = parametersToDelete {
            var parametersToDeleteContainer = encodeContainer.nestedUnkeyedContainer(forKey: .parametersToDelete)
            for streamprocessorparameterstodelete0 in parametersToDelete {
                try parametersToDeleteContainer.encode(streamprocessorparameterstodelete0.rawValue)
            }
        }
        if let regionsOfInterestForUpdate = regionsOfInterestForUpdate {
            var regionsOfInterestForUpdateContainer = encodeContainer.nestedUnkeyedContainer(forKey: .regionsOfInterestForUpdate)
            for regionsofinterest0 in regionsOfInterestForUpdate {
                try regionsOfInterestForUpdateContainer.encode(regionsofinterest0)
            }
        }
        if let settingsForUpdate = self.settingsForUpdate {
            try encodeContainer.encode(settingsForUpdate, forKey: .settingsForUpdate)
        }
    }
}
