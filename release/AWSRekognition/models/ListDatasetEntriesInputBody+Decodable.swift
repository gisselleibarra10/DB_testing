// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListDatasetEntriesInputBody: Swift.Equatable {
    let datasetArn: Swift.String?
    let containsLabels: [Swift.String]?
    let labeled: Swift.Bool?
    let sourceRefContains: Swift.String?
    let hasErrors: Swift.Bool?
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
}

extension ListDatasetEntriesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case containsLabels = "ContainsLabels"
        case datasetArn = "DatasetArn"
        case hasErrors = "HasErrors"
        case labeled = "Labeled"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case sourceRefContains = "SourceRefContains"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let datasetArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .datasetArn)
        datasetArn = datasetArnDecoded
        let containsLabelsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .containsLabels)
        var containsLabelsDecoded0:[Swift.String]? = nil
        if let containsLabelsContainer = containsLabelsContainer {
            containsLabelsDecoded0 = [Swift.String]()
            for string0 in containsLabelsContainer {
                if let string0 = string0 {
                    containsLabelsDecoded0?.append(string0)
                }
            }
        }
        containsLabels = containsLabelsDecoded0
        let labeledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .labeled)
        labeled = labeledDecoded
        let sourceRefContainsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceRefContains)
        sourceRefContains = sourceRefContainsDecoded
        let hasErrorsDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .hasErrors)
        hasErrors = hasErrorsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
    }
}
