// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension RekognitionClientTypes.ProtectiveEquipmentSummarizationAttributes: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case minConfidence = "MinConfidence"
        case requiredEquipmentTypes = "RequiredEquipmentTypes"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let minConfidence = self.minConfidence {
            try encodeContainer.encode(minConfidence, forKey: .minConfidence)
        }
        if let requiredEquipmentTypes = requiredEquipmentTypes {
            var requiredEquipmentTypesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .requiredEquipmentTypes)
            for protectiveequipmenttypes0 in requiredEquipmentTypes {
                try requiredEquipmentTypesContainer.encode(protectiveequipmenttypes0.rawValue)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let minConfidenceDecoded = try containerValues.decodeIfPresent(Swift.Float.self, forKey: .minConfidence)
        minConfidence = minConfidenceDecoded
        let requiredEquipmentTypesContainer = try containerValues.decodeIfPresent([RekognitionClientTypes.ProtectiveEquipmentType?].self, forKey: .requiredEquipmentTypes)
        var requiredEquipmentTypesDecoded0:[RekognitionClientTypes.ProtectiveEquipmentType]? = nil
        if let requiredEquipmentTypesContainer = requiredEquipmentTypesContainer {
            requiredEquipmentTypesDecoded0 = [RekognitionClientTypes.ProtectiveEquipmentType]()
            for string0 in requiredEquipmentTypesContainer {
                if let string0 = string0 {
                    requiredEquipmentTypesDecoded0?.append(string0)
                }
            }
        }
        requiredEquipmentTypes = requiredEquipmentTypesDecoded0
    }
}
