// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension RekognitionClientTypes.FaceDetail: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case ageRange = "AgeRange"
        case beard = "Beard"
        case boundingBox = "BoundingBox"
        case confidence = "Confidence"
        case emotions = "Emotions"
        case eyeglasses = "Eyeglasses"
        case eyesOpen = "EyesOpen"
        case gender = "Gender"
        case landmarks = "Landmarks"
        case mouthOpen = "MouthOpen"
        case mustache = "Mustache"
        case pose = "Pose"
        case quality = "Quality"
        case smile = "Smile"
        case sunglasses = "Sunglasses"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let ageRange = self.ageRange {
            try encodeContainer.encode(ageRange, forKey: .ageRange)
        }
        if let beard = self.beard {
            try encodeContainer.encode(beard, forKey: .beard)
        }
        if let boundingBox = self.boundingBox {
            try encodeContainer.encode(boundingBox, forKey: .boundingBox)
        }
        if let confidence = self.confidence {
            try encodeContainer.encode(confidence, forKey: .confidence)
        }
        if let emotions = emotions {
            var emotionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .emotions)
            for emotions0 in emotions {
                try emotionsContainer.encode(emotions0)
            }
        }
        if let eyeglasses = self.eyeglasses {
            try encodeContainer.encode(eyeglasses, forKey: .eyeglasses)
        }
        if let eyesOpen = self.eyesOpen {
            try encodeContainer.encode(eyesOpen, forKey: .eyesOpen)
        }
        if let gender = self.gender {
            try encodeContainer.encode(gender, forKey: .gender)
        }
        if let landmarks = landmarks {
            var landmarksContainer = encodeContainer.nestedUnkeyedContainer(forKey: .landmarks)
            for landmarks0 in landmarks {
                try landmarksContainer.encode(landmarks0)
            }
        }
        if let mouthOpen = self.mouthOpen {
            try encodeContainer.encode(mouthOpen, forKey: .mouthOpen)
        }
        if let mustache = self.mustache {
            try encodeContainer.encode(mustache, forKey: .mustache)
        }
        if let pose = self.pose {
            try encodeContainer.encode(pose, forKey: .pose)
        }
        if let quality = self.quality {
            try encodeContainer.encode(quality, forKey: .quality)
        }
        if let smile = self.smile {
            try encodeContainer.encode(smile, forKey: .smile)
        }
        if let sunglasses = self.sunglasses {
            try encodeContainer.encode(sunglasses, forKey: .sunglasses)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let boundingBoxDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.BoundingBox.self, forKey: .boundingBox)
        boundingBox = boundingBoxDecoded
        let ageRangeDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.AgeRange.self, forKey: .ageRange)
        ageRange = ageRangeDecoded
        let smileDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.Smile.self, forKey: .smile)
        smile = smileDecoded
        let eyeglassesDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.Eyeglasses.self, forKey: .eyeglasses)
        eyeglasses = eyeglassesDecoded
        let sunglassesDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.Sunglasses.self, forKey: .sunglasses)
        sunglasses = sunglassesDecoded
        let genderDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.Gender.self, forKey: .gender)
        gender = genderDecoded
        let beardDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.Beard.self, forKey: .beard)
        beard = beardDecoded
        let mustacheDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.Mustache.self, forKey: .mustache)
        mustache = mustacheDecoded
        let eyesOpenDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.EyeOpen.self, forKey: .eyesOpen)
        eyesOpen = eyesOpenDecoded
        let mouthOpenDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.MouthOpen.self, forKey: .mouthOpen)
        mouthOpen = mouthOpenDecoded
        let emotionsContainer = try containerValues.decodeIfPresent([RekognitionClientTypes.Emotion?].self, forKey: .emotions)
        var emotionsDecoded0:[RekognitionClientTypes.Emotion]? = nil
        if let emotionsContainer = emotionsContainer {
            emotionsDecoded0 = [RekognitionClientTypes.Emotion]()
            for structure0 in emotionsContainer {
                if let structure0 = structure0 {
                    emotionsDecoded0?.append(structure0)
                }
            }
        }
        emotions = emotionsDecoded0
        let landmarksContainer = try containerValues.decodeIfPresent([RekognitionClientTypes.Landmark?].self, forKey: .landmarks)
        var landmarksDecoded0:[RekognitionClientTypes.Landmark]? = nil
        if let landmarksContainer = landmarksContainer {
            landmarksDecoded0 = [RekognitionClientTypes.Landmark]()
            for structure0 in landmarksContainer {
                if let structure0 = structure0 {
                    landmarksDecoded0?.append(structure0)
                }
            }
        }
        landmarks = landmarksDecoded0
        let poseDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.Pose.self, forKey: .pose)
        pose = poseDecoded
        let qualityDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.ImageQuality.self, forKey: .quality)
        quality = qualityDecoded
        let confidenceDecoded = try containerValues.decodeIfPresent(Swift.Float.self, forKey: .confidence)
        confidence = confidenceDecoded
    }
}
