// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ListDatasetEntriesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case containsLabels = "ContainsLabels"
        case datasetArn = "DatasetArn"
        case hasErrors = "HasErrors"
        case labeled = "Labeled"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case sourceRefContains = "SourceRefContains"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let containsLabels = containsLabels {
            var containsLabelsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .containsLabels)
            for datasetlabels0 in containsLabels {
                try containsLabelsContainer.encode(datasetlabels0)
            }
        }
        if let datasetArn = self.datasetArn {
            try encodeContainer.encode(datasetArn, forKey: .datasetArn)
        }
        if let hasErrors = self.hasErrors {
            try encodeContainer.encode(hasErrors, forKey: .hasErrors)
        }
        if let labeled = self.labeled {
            try encodeContainer.encode(labeled, forKey: .labeled)
        }
        if let maxResults = self.maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let sourceRefContains = self.sourceRefContains {
            try encodeContainer.encode(sourceRefContains, forKey: .sourceRefContains)
        }
    }
}
