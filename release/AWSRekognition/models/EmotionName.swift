// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension RekognitionClientTypes {
    public enum EmotionName: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case angry
        case calm
        case confused
        case disgusted
        case fear
        case happy
        case sad
        case surprised
        case unknown
        case sdkUnknown(Swift.String)

        public static var allCases: [EmotionName] {
            return [
                .angry,
                .calm,
                .confused,
                .disgusted,
                .fear,
                .happy,
                .sad,
                .surprised,
                .unknown,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .angry: return "ANGRY"
            case .calm: return "CALM"
            case .confused: return "CONFUSED"
            case .disgusted: return "DISGUSTED"
            case .fear: return "FEAR"
            case .happy: return "HAPPY"
            case .sad: return "SAD"
            case .surprised: return "SURPRISED"
            case .unknown: return "UNKNOWN"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = EmotionName(rawValue: rawValue) ?? EmotionName.sdkUnknown(rawValue)
        }
    }
}
