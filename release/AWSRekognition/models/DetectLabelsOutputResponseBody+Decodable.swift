// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DetectLabelsOutputResponseBody: Swift.Equatable {
    let labels: [RekognitionClientTypes.Label]?
    let orientationCorrection: RekognitionClientTypes.OrientationCorrection?
    let labelModelVersion: Swift.String?
}

extension DetectLabelsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case labelModelVersion = "LabelModelVersion"
        case labels = "Labels"
        case orientationCorrection = "OrientationCorrection"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let labelsContainer = try containerValues.decodeIfPresent([RekognitionClientTypes.Label?].self, forKey: .labels)
        var labelsDecoded0:[RekognitionClientTypes.Label]? = nil
        if let labelsContainer = labelsContainer {
            labelsDecoded0 = [RekognitionClientTypes.Label]()
            for structure0 in labelsContainer {
                if let structure0 = structure0 {
                    labelsDecoded0?.append(structure0)
                }
            }
        }
        labels = labelsDecoded0
        let orientationCorrectionDecoded = try containerValues.decodeIfPresent(RekognitionClientTypes.OrientationCorrection.self, forKey: .orientationCorrection)
        orientationCorrection = orientationCorrectionDecoded
        let labelModelVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .labelModelVersion)
        labelModelVersion = labelModelVersionDecoded
    }
}
