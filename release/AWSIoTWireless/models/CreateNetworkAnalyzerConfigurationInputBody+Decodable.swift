// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateNetworkAnalyzerConfigurationInputBody: Swift.Equatable {
    let name: Swift.String?
    let traceContent: IotWirelessClientTypes.TraceContent?
    let wirelessDevices: [Swift.String]?
    let wirelessGateways: [Swift.String]?
    let description: Swift.String?
    let tags: [IotWirelessClientTypes.Tag]?
    let clientRequestToken: Swift.String?
}

extension CreateNetworkAnalyzerConfigurationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientRequestToken = "ClientRequestToken"
        case description = "Description"
        case name = "Name"
        case tags = "Tags"
        case traceContent = "TraceContent"
        case wirelessDevices = "WirelessDevices"
        case wirelessGateways = "WirelessGateways"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let traceContentDecoded = try containerValues.decodeIfPresent(IotWirelessClientTypes.TraceContent.self, forKey: .traceContent)
        traceContent = traceContentDecoded
        let wirelessDevicesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .wirelessDevices)
        var wirelessDevicesDecoded0:[Swift.String]? = nil
        if let wirelessDevicesContainer = wirelessDevicesContainer {
            wirelessDevicesDecoded0 = [Swift.String]()
            for string0 in wirelessDevicesContainer {
                if let string0 = string0 {
                    wirelessDevicesDecoded0?.append(string0)
                }
            }
        }
        wirelessDevices = wirelessDevicesDecoded0
        let wirelessGatewaysContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .wirelessGateways)
        var wirelessGatewaysDecoded0:[Swift.String]? = nil
        if let wirelessGatewaysContainer = wirelessGatewaysContainer {
            wirelessGatewaysDecoded0 = [Swift.String]()
            for string0 in wirelessGatewaysContainer {
                if let string0 = string0 {
                    wirelessGatewaysDecoded0?.append(string0)
                }
            }
        }
        wirelessGateways = wirelessGatewaysDecoded0
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let tagsContainer = try containerValues.decodeIfPresent([IotWirelessClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[IotWirelessClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [IotWirelessClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let clientRequestTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientRequestToken)
        clientRequestToken = clientRequestTokenDecoded
    }
}
