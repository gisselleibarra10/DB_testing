// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct UpdateNetworkAnalyzerConfigurationInputBody: Swift.Equatable {
    let traceContent: IotWirelessClientTypes.TraceContent?
    let wirelessDevicesToAdd: [Swift.String]?
    let wirelessDevicesToRemove: [Swift.String]?
    let wirelessGatewaysToAdd: [Swift.String]?
    let wirelessGatewaysToRemove: [Swift.String]?
    let description: Swift.String?
}

extension UpdateNetworkAnalyzerConfigurationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description = "Description"
        case traceContent = "TraceContent"
        case wirelessDevicesToAdd = "WirelessDevicesToAdd"
        case wirelessDevicesToRemove = "WirelessDevicesToRemove"
        case wirelessGatewaysToAdd = "WirelessGatewaysToAdd"
        case wirelessGatewaysToRemove = "WirelessGatewaysToRemove"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let traceContentDecoded = try containerValues.decodeIfPresent(IotWirelessClientTypes.TraceContent.self, forKey: .traceContent)
        traceContent = traceContentDecoded
        let wirelessDevicesToAddContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .wirelessDevicesToAdd)
        var wirelessDevicesToAddDecoded0:[Swift.String]? = nil
        if let wirelessDevicesToAddContainer = wirelessDevicesToAddContainer {
            wirelessDevicesToAddDecoded0 = [Swift.String]()
            for string0 in wirelessDevicesToAddContainer {
                if let string0 = string0 {
                    wirelessDevicesToAddDecoded0?.append(string0)
                }
            }
        }
        wirelessDevicesToAdd = wirelessDevicesToAddDecoded0
        let wirelessDevicesToRemoveContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .wirelessDevicesToRemove)
        var wirelessDevicesToRemoveDecoded0:[Swift.String]? = nil
        if let wirelessDevicesToRemoveContainer = wirelessDevicesToRemoveContainer {
            wirelessDevicesToRemoveDecoded0 = [Swift.String]()
            for string0 in wirelessDevicesToRemoveContainer {
                if let string0 = string0 {
                    wirelessDevicesToRemoveDecoded0?.append(string0)
                }
            }
        }
        wirelessDevicesToRemove = wirelessDevicesToRemoveDecoded0
        let wirelessGatewaysToAddContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .wirelessGatewaysToAdd)
        var wirelessGatewaysToAddDecoded0:[Swift.String]? = nil
        if let wirelessGatewaysToAddContainer = wirelessGatewaysToAddContainer {
            wirelessGatewaysToAddDecoded0 = [Swift.String]()
            for string0 in wirelessGatewaysToAddContainer {
                if let string0 = string0 {
                    wirelessGatewaysToAddDecoded0?.append(string0)
                }
            }
        }
        wirelessGatewaysToAdd = wirelessGatewaysToAddDecoded0
        let wirelessGatewaysToRemoveContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .wirelessGatewaysToRemove)
        var wirelessGatewaysToRemoveDecoded0:[Swift.String]? = nil
        if let wirelessGatewaysToRemoveContainer = wirelessGatewaysToRemoveContainer {
            wirelessGatewaysToRemoveDecoded0 = [Swift.String]()
            for string0 in wirelessGatewaysToRemoveContainer {
                if let string0 = string0 {
                    wirelessGatewaysToRemoveDecoded0?.append(string0)
                }
            }
        }
        wirelessGatewaysToRemove = wirelessGatewaysToRemoveDecoded0
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
    }
}
