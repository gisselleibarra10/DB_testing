// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetPositionOutputResponseBody: Swift.Equatable {
    let position: [Swift.Float]?
    let accuracy: IotWirelessClientTypes.Accuracy?
    let solverType: IotWirelessClientTypes.PositionSolverType?
    let solverProvider: IotWirelessClientTypes.PositionSolverProvider?
    let solverVersion: Swift.String?
    let timestamp: Swift.String?
}

extension GetPositionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accuracy = "Accuracy"
        case position = "Position"
        case solverProvider = "SolverProvider"
        case solverType = "SolverType"
        case solverVersion = "SolverVersion"
        case timestamp = "Timestamp"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let positionContainer = try containerValues.decodeIfPresent([Swift.Float?].self, forKey: .position)
        var positionDecoded0:[Swift.Float]? = nil
        if let positionContainer = positionContainer {
            positionDecoded0 = [Swift.Float]()
            for float0 in positionContainer {
                if let float0 = float0 {
                    positionDecoded0?.append(float0)
                }
            }
        }
        position = positionDecoded0
        let accuracyDecoded = try containerValues.decodeIfPresent(IotWirelessClientTypes.Accuracy.self, forKey: .accuracy)
        accuracy = accuracyDecoded
        let solverTypeDecoded = try containerValues.decodeIfPresent(IotWirelessClientTypes.PositionSolverType.self, forKey: .solverType)
        solverType = solverTypeDecoded
        let solverProviderDecoded = try containerValues.decodeIfPresent(IotWirelessClientTypes.PositionSolverProvider.self, forKey: .solverProvider)
        solverProvider = solverProviderDecoded
        let solverVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .solverVersion)
        solverVersion = solverVersionDecoded
        let timestampDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .timestamp)
        timestamp = timestampDecoded
    }
}
