// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension IotWirelessClientTypes.Beaconing: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dataRate = "DataRate"
        case frequencies = "Frequencies"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dataRate = self.dataRate {
            try encodeContainer.encode(dataRate, forKey: .dataRate)
        }
        if let frequencies = frequencies {
            var frequenciesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .frequencies)
            for beaconingfrequencies0 in frequencies {
                try frequenciesContainer.encode(beaconingfrequencies0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dataRateDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .dataRate)
        dataRate = dataRateDecoded
        let frequenciesContainer = try containerValues.decodeIfPresent([Swift.Int?].self, forKey: .frequencies)
        var frequenciesDecoded0:[Swift.Int]? = nil
        if let frequenciesContainer = frequenciesContainer {
            frequenciesDecoded0 = [Swift.Int]()
            for integer0 in frequenciesContainer {
                if let integer0 = integer0 {
                    frequenciesDecoded0?.append(integer0)
                }
            }
        }
        frequencies = frequenciesDecoded0
    }
}
