// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension IotWirelessClientTypes.ParticipatingGateways: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case downlinkMode = "DownlinkMode"
        case gatewayList = "GatewayList"
        case transmissionInterval = "TransmissionInterval"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let downlinkMode = self.downlinkMode {
            try encodeContainer.encode(downlinkMode.rawValue, forKey: .downlinkMode)
        }
        if let gatewayList = gatewayList {
            var gatewayListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .gatewayList)
            for gatewaylist0 in gatewayList {
                try gatewayListContainer.encode(gatewaylist0)
            }
        }
        if let transmissionInterval = self.transmissionInterval {
            try encodeContainer.encode(transmissionInterval, forKey: .transmissionInterval)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let downlinkModeDecoded = try containerValues.decodeIfPresent(IotWirelessClientTypes.DownlinkMode.self, forKey: .downlinkMode)
        downlinkMode = downlinkModeDecoded
        let gatewayListContainer = try containerValues.decodeIfPresent([IotWirelessClientTypes.GatewayListItem?].self, forKey: .gatewayList)
        var gatewayListDecoded0:[IotWirelessClientTypes.GatewayListItem]? = nil
        if let gatewayListContainer = gatewayListContainer {
            gatewayListDecoded0 = [IotWirelessClientTypes.GatewayListItem]()
            for structure0 in gatewayListContainer {
                if let structure0 = structure0 {
                    gatewayListDecoded0?.append(structure0)
                }
            }
        }
        gatewayList = gatewayListDecoded0
        let transmissionIntervalDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .transmissionInterval)
        transmissionInterval = transmissionIntervalDecoded
    }
}
