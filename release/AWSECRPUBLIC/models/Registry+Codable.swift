// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension EcrPublicClientTypes.Registry: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case aliases
        case registryArn
        case registryId
        case registryUri
        case verified
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let aliases = aliases {
            var aliasesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .aliases)
            for registryaliaslist0 in aliases {
                try aliasesContainer.encode(registryaliaslist0)
            }
        }
        if let registryArn = self.registryArn {
            try encodeContainer.encode(registryArn, forKey: .registryArn)
        }
        if let registryId = self.registryId {
            try encodeContainer.encode(registryId, forKey: .registryId)
        }
        if let registryUri = self.registryUri {
            try encodeContainer.encode(registryUri, forKey: .registryUri)
        }
        if let verified = self.verified {
            try encodeContainer.encode(verified, forKey: .verified)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let registryIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .registryId)
        registryId = registryIdDecoded
        let registryArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .registryArn)
        registryArn = registryArnDecoded
        let registryUriDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .registryUri)
        registryUri = registryUriDecoded
        let verifiedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .verified)
        verified = verifiedDecoded
        let aliasesContainer = try containerValues.decodeIfPresent([EcrPublicClientTypes.RegistryAlias?].self, forKey: .aliases)
        var aliasesDecoded0:[EcrPublicClientTypes.RegistryAlias]? = nil
        if let aliasesContainer = aliasesContainer {
            aliasesDecoded0 = [EcrPublicClientTypes.RegistryAlias]()
            for structure0 in aliasesContainer {
                if let structure0 = structure0 {
                    aliasesDecoded0?.append(structure0)
                }
            }
        }
        aliases = aliasesDecoded0
    }
}
