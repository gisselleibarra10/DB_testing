// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateRepositoryInputBody: Swift.Equatable {
    let repositoryName: Swift.String?
    let catalogData: EcrPublicClientTypes.RepositoryCatalogDataInput?
    let tags: [EcrPublicClientTypes.Tag]?
}

extension CreateRepositoryInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case catalogData
        case repositoryName
        case tags
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let repositoryNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .repositoryName)
        repositoryName = repositoryNameDecoded
        let catalogDataDecoded = try containerValues.decodeIfPresent(EcrPublicClientTypes.RepositoryCatalogDataInput.self, forKey: .catalogData)
        catalogData = catalogDataDecoded
        let tagsContainer = try containerValues.decodeIfPresent([EcrPublicClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[EcrPublicClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [EcrPublicClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}
