// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CreateJobInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case algorithmSpecification
        case checkpointConfig
        case clientToken
        case deviceConfig
        case hyperParameters
        case inputDataConfig
        case instanceConfig
        case jobName
        case outputDataConfig
        case roleArn
        case stoppingCondition
        case tags
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let algorithmSpecification = self.algorithmSpecification {
            try encodeContainer.encode(algorithmSpecification, forKey: .algorithmSpecification)
        }
        if let checkpointConfig = self.checkpointConfig {
            try encodeContainer.encode(checkpointConfig, forKey: .checkpointConfig)
        }
        if let clientToken = self.clientToken {
            try encodeContainer.encode(clientToken, forKey: .clientToken)
        }
        if let deviceConfig = self.deviceConfig {
            try encodeContainer.encode(deviceConfig, forKey: .deviceConfig)
        }
        if let hyperParameters = hyperParameters {
            var hyperParametersContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .hyperParameters)
            for (dictKey0, hyperparameters0) in hyperParameters {
                try hyperParametersContainer.encode(hyperparameters0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let inputDataConfig = inputDataConfig {
            var inputDataConfigContainer = encodeContainer.nestedUnkeyedContainer(forKey: .inputDataConfig)
            for inputconfiglist0 in inputDataConfig {
                try inputDataConfigContainer.encode(inputconfiglist0)
            }
        }
        if let instanceConfig = self.instanceConfig {
            try encodeContainer.encode(instanceConfig, forKey: .instanceConfig)
        }
        if let jobName = self.jobName {
            try encodeContainer.encode(jobName, forKey: .jobName)
        }
        if let outputDataConfig = self.outputDataConfig {
            try encodeContainer.encode(outputDataConfig, forKey: .outputDataConfig)
        }
        if let roleArn = self.roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let stoppingCondition = self.stoppingCondition {
            try encodeContainer.encode(stoppingCondition, forKey: .stoppingCondition)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, tagsmap0) in tags {
                try tagsContainer.encode(tagsmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }
}
