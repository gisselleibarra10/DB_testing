// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateJobInputBody: Swift.Equatable {
    let clientToken: Swift.String?
    let algorithmSpecification: BraketClientTypes.AlgorithmSpecification?
    let inputDataConfig: [BraketClientTypes.InputFileConfig]?
    let outputDataConfig: BraketClientTypes.JobOutputDataConfig?
    let checkpointConfig: BraketClientTypes.JobCheckpointConfig?
    let jobName: Swift.String?
    let roleArn: Swift.String?
    let stoppingCondition: BraketClientTypes.JobStoppingCondition?
    let instanceConfig: BraketClientTypes.InstanceConfig?
    let hyperParameters: [Swift.String:Swift.String]?
    let deviceConfig: BraketClientTypes.DeviceConfig?
    let tags: [Swift.String:Swift.String]?
}

extension CreateJobInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case algorithmSpecification
        case checkpointConfig
        case clientToken
        case deviceConfig
        case hyperParameters
        case inputDataConfig
        case instanceConfig
        case jobName
        case outputDataConfig
        case roleArn
        case stoppingCondition
        case tags
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clientTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientToken)
        clientToken = clientTokenDecoded
        let algorithmSpecificationDecoded = try containerValues.decodeIfPresent(BraketClientTypes.AlgorithmSpecification.self, forKey: .algorithmSpecification)
        algorithmSpecification = algorithmSpecificationDecoded
        let inputDataConfigContainer = try containerValues.decodeIfPresent([BraketClientTypes.InputFileConfig?].self, forKey: .inputDataConfig)
        var inputDataConfigDecoded0:[BraketClientTypes.InputFileConfig]? = nil
        if let inputDataConfigContainer = inputDataConfigContainer {
            inputDataConfigDecoded0 = [BraketClientTypes.InputFileConfig]()
            for structure0 in inputDataConfigContainer {
                if let structure0 = structure0 {
                    inputDataConfigDecoded0?.append(structure0)
                }
            }
        }
        inputDataConfig = inputDataConfigDecoded0
        let outputDataConfigDecoded = try containerValues.decodeIfPresent(BraketClientTypes.JobOutputDataConfig.self, forKey: .outputDataConfig)
        outputDataConfig = outputDataConfigDecoded
        let checkpointConfigDecoded = try containerValues.decodeIfPresent(BraketClientTypes.JobCheckpointConfig.self, forKey: .checkpointConfig)
        checkpointConfig = checkpointConfigDecoded
        let jobNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobName)
        jobName = jobNameDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let stoppingConditionDecoded = try containerValues.decodeIfPresent(BraketClientTypes.JobStoppingCondition.self, forKey: .stoppingCondition)
        stoppingCondition = stoppingConditionDecoded
        let instanceConfigDecoded = try containerValues.decodeIfPresent(BraketClientTypes.InstanceConfig.self, forKey: .instanceConfig)
        instanceConfig = instanceConfigDecoded
        let hyperParametersContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .hyperParameters)
        var hyperParametersDecoded0: [Swift.String:Swift.String]? = nil
        if let hyperParametersContainer = hyperParametersContainer {
            hyperParametersDecoded0 = [Swift.String:Swift.String]()
            for (key0, string0) in hyperParametersContainer {
                if let string0 = string0 {
                    hyperParametersDecoded0?[key0] = string0
                }
            }
        }
        hyperParameters = hyperParametersDecoded0
        let deviceConfigDecoded = try containerValues.decodeIfPresent(BraketClientTypes.DeviceConfig.self, forKey: .deviceConfig)
        deviceConfig = deviceConfigDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, string0) in tagsContainer {
                if let string0 = string0 {
                    tagsDecoded0?[key0] = string0
                }
            }
        }
        tags = tagsDecoded0
    }
}
