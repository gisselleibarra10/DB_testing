// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetQuantumTaskOutputResponseBody: Swift.Equatable {
    let quantumTaskArn: Swift.String?
    let status: BraketClientTypes.QuantumTaskStatus?
    let failureReason: Swift.String?
    let deviceArn: Swift.String?
    let deviceParameters: Swift.String?
    let shots: Swift.Int?
    let outputS3Bucket: Swift.String?
    let outputS3Directory: Swift.String?
    let createdAt: ClientRuntime.Date?
    let endedAt: ClientRuntime.Date?
    let tags: [Swift.String:Swift.String]?
    let jobArn: Swift.String?
}

extension GetQuantumTaskOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createdAt
        case deviceArn
        case deviceParameters
        case endedAt
        case failureReason
        case jobArn
        case outputS3Bucket
        case outputS3Directory
        case quantumTaskArn
        case shots
        case status
        case tags
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let quantumTaskArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .quantumTaskArn)
        quantumTaskArn = quantumTaskArnDecoded
        let statusDecoded = try containerValues.decodeIfPresent(BraketClientTypes.QuantumTaskStatus.self, forKey: .status)
        status = statusDecoded
        let failureReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .failureReason)
        failureReason = failureReasonDecoded
        let deviceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deviceArn)
        deviceArn = deviceArnDecoded
        let deviceParametersDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deviceParameters)
        deviceParameters = deviceParametersDecoded
        let shotsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .shots)
        shots = shotsDecoded
        let outputS3BucketDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .outputS3Bucket)
        outputS3Bucket = outputS3BucketDecoded
        let outputS3DirectoryDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .outputS3Directory)
        outputS3Directory = outputS3DirectoryDecoded
        let createdAtDateString = try containerValues.decodeIfPresent(Swift.String.self, forKey: .createdAt)
        var createdAtDecoded: ClientRuntime.Date? = nil
        if let createdAtDateString = createdAtDateString {
            let createdAtFormatter = ClientRuntime.DateFormatter.iso8601DateFormatterWithoutFractionalSeconds
            createdAtDecoded = createdAtFormatter.date(from: createdAtDateString)
        }
        createdAt = createdAtDecoded
        let endedAtDateString = try containerValues.decodeIfPresent(Swift.String.self, forKey: .endedAt)
        var endedAtDecoded: ClientRuntime.Date? = nil
        if let endedAtDateString = endedAtDateString {
            let endedAtFormatter = ClientRuntime.DateFormatter.iso8601DateFormatterWithoutFractionalSeconds
            endedAtDecoded = endedAtFormatter.date(from: endedAtDateString)
        }
        endedAt = endedAtDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, string0) in tagsContainer {
                if let string0 = string0 {
                    tagsDecoded0?[key0] = string0
                }
            }
        }
        tags = tagsDecoded0
        let jobArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobArn)
        jobArn = jobArnDecoded
    }
}
