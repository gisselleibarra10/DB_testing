// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetJobOutputResponseBody: Swift.Equatable {
    let status: BraketClientTypes.JobPrimaryStatus?
    let jobArn: Swift.String?
    let roleArn: Swift.String?
    let failureReason: Swift.String?
    let jobName: Swift.String?
    let hyperParameters: [Swift.String:Swift.String]?
    let inputDataConfig: [BraketClientTypes.InputFileConfig]?
    let outputDataConfig: BraketClientTypes.JobOutputDataConfig?
    let stoppingCondition: BraketClientTypes.JobStoppingCondition?
    let checkpointConfig: BraketClientTypes.JobCheckpointConfig?
    let algorithmSpecification: BraketClientTypes.AlgorithmSpecification?
    let instanceConfig: BraketClientTypes.InstanceConfig?
    let createdAt: ClientRuntime.Date?
    let startedAt: ClientRuntime.Date?
    let endedAt: ClientRuntime.Date?
    let billableDuration: Swift.Int?
    let deviceConfig: BraketClientTypes.DeviceConfig?
    let events: [BraketClientTypes.JobEventDetails]?
    let tags: [Swift.String:Swift.String]?
}

extension GetJobOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case algorithmSpecification
        case billableDuration
        case checkpointConfig
        case createdAt
        case deviceConfig
        case endedAt
        case events
        case failureReason
        case hyperParameters
        case inputDataConfig
        case instanceConfig
        case jobArn
        case jobName
        case outputDataConfig
        case roleArn
        case startedAt
        case status
        case stoppingCondition
        case tags
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statusDecoded = try containerValues.decodeIfPresent(BraketClientTypes.JobPrimaryStatus.self, forKey: .status)
        status = statusDecoded
        let jobArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobArn)
        jobArn = jobArnDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let failureReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .failureReason)
        failureReason = failureReasonDecoded
        let jobNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobName)
        jobName = jobNameDecoded
        let hyperParametersContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .hyperParameters)
        var hyperParametersDecoded0: [Swift.String:Swift.String]? = nil
        if let hyperParametersContainer = hyperParametersContainer {
            hyperParametersDecoded0 = [Swift.String:Swift.String]()
            for (key0, string0) in hyperParametersContainer {
                if let string0 = string0 {
                    hyperParametersDecoded0?[key0] = string0
                }
            }
        }
        hyperParameters = hyperParametersDecoded0
        let inputDataConfigContainer = try containerValues.decodeIfPresent([BraketClientTypes.InputFileConfig?].self, forKey: .inputDataConfig)
        var inputDataConfigDecoded0:[BraketClientTypes.InputFileConfig]? = nil
        if let inputDataConfigContainer = inputDataConfigContainer {
            inputDataConfigDecoded0 = [BraketClientTypes.InputFileConfig]()
            for structure0 in inputDataConfigContainer {
                if let structure0 = structure0 {
                    inputDataConfigDecoded0?.append(structure0)
                }
            }
        }
        inputDataConfig = inputDataConfigDecoded0
        let outputDataConfigDecoded = try containerValues.decodeIfPresent(BraketClientTypes.JobOutputDataConfig.self, forKey: .outputDataConfig)
        outputDataConfig = outputDataConfigDecoded
        let stoppingConditionDecoded = try containerValues.decodeIfPresent(BraketClientTypes.JobStoppingCondition.self, forKey: .stoppingCondition)
        stoppingCondition = stoppingConditionDecoded
        let checkpointConfigDecoded = try containerValues.decodeIfPresent(BraketClientTypes.JobCheckpointConfig.self, forKey: .checkpointConfig)
        checkpointConfig = checkpointConfigDecoded
        let algorithmSpecificationDecoded = try containerValues.decodeIfPresent(BraketClientTypes.AlgorithmSpecification.self, forKey: .algorithmSpecification)
        algorithmSpecification = algorithmSpecificationDecoded
        let instanceConfigDecoded = try containerValues.decodeIfPresent(BraketClientTypes.InstanceConfig.self, forKey: .instanceConfig)
        instanceConfig = instanceConfigDecoded
        let createdAtDateString = try containerValues.decodeIfPresent(Swift.String.self, forKey: .createdAt)
        var createdAtDecoded: ClientRuntime.Date? = nil
        if let createdAtDateString = createdAtDateString {
            let createdAtFormatter = ClientRuntime.DateFormatter.iso8601DateFormatterWithoutFractionalSeconds
            createdAtDecoded = createdAtFormatter.date(from: createdAtDateString)
        }
        createdAt = createdAtDecoded
        let startedAtDateString = try containerValues.decodeIfPresent(Swift.String.self, forKey: .startedAt)
        var startedAtDecoded: ClientRuntime.Date? = nil
        if let startedAtDateString = startedAtDateString {
            let startedAtFormatter = ClientRuntime.DateFormatter.iso8601DateFormatterWithoutFractionalSeconds
            startedAtDecoded = startedAtFormatter.date(from: startedAtDateString)
        }
        startedAt = startedAtDecoded
        let endedAtDateString = try containerValues.decodeIfPresent(Swift.String.self, forKey: .endedAt)
        var endedAtDecoded: ClientRuntime.Date? = nil
        if let endedAtDateString = endedAtDateString {
            let endedAtFormatter = ClientRuntime.DateFormatter.iso8601DateFormatterWithoutFractionalSeconds
            endedAtDecoded = endedAtFormatter.date(from: endedAtDateString)
        }
        endedAt = endedAtDecoded
        let billableDurationDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .billableDuration)
        billableDuration = billableDurationDecoded
        let deviceConfigDecoded = try containerValues.decodeIfPresent(BraketClientTypes.DeviceConfig.self, forKey: .deviceConfig)
        deviceConfig = deviceConfigDecoded
        let eventsContainer = try containerValues.decodeIfPresent([BraketClientTypes.JobEventDetails?].self, forKey: .events)
        var eventsDecoded0:[BraketClientTypes.JobEventDetails]? = nil
        if let eventsContainer = eventsContainer {
            eventsDecoded0 = [BraketClientTypes.JobEventDetails]()
            for structure0 in eventsContainer {
                if let structure0 = structure0 {
                    eventsDecoded0?.append(structure0)
                }
            }
        }
        events = eventsDecoded0
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, string0) in tagsContainer {
                if let string0 = string0 {
                    tagsDecoded0?[key0] = string0
                }
            }
        }
        tags = tagsDecoded0
    }
}
