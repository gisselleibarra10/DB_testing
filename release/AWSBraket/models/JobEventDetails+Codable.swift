// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension BraketClientTypes.JobEventDetails: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case eventType
        case message
        case timeOfEvent
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let eventType = self.eventType {
            try encodeContainer.encode(eventType.rawValue, forKey: .eventType)
        }
        if let message = self.message {
            try encodeContainer.encode(message, forKey: .message)
        }
        if let timeOfEvent = self.timeOfEvent {
            try encodeContainer.encode(timeOfEvent.iso8601WithoutFractionalSeconds(), forKey: .timeOfEvent)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let eventTypeDecoded = try containerValues.decodeIfPresent(BraketClientTypes.JobEventType.self, forKey: .eventType)
        eventType = eventTypeDecoded
        let timeOfEventDateString = try containerValues.decodeIfPresent(Swift.String.self, forKey: .timeOfEvent)
        var timeOfEventDecoded: ClientRuntime.Date? = nil
        if let timeOfEventDateString = timeOfEventDateString {
            let timeOfEventFormatter = ClientRuntime.DateFormatter.iso8601DateFormatterWithoutFractionalSeconds
            timeOfEventDecoded = timeOfEventFormatter.date(from: timeOfEventDateString)
        }
        timeOfEvent = timeOfEventDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}
