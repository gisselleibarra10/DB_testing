// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension LambdaClientTypes.LayerVersionsListItem: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case compatibleArchitectures = "CompatibleArchitectures"
        case compatibleRuntimes = "CompatibleRuntimes"
        case createdDate = "CreatedDate"
        case description = "Description"
        case layerVersionArn = "LayerVersionArn"
        case licenseInfo = "LicenseInfo"
        case version = "Version"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let compatibleArchitectures = compatibleArchitectures {
            var compatibleArchitecturesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .compatibleArchitectures)
            for compatiblearchitectures0 in compatibleArchitectures {
                try compatibleArchitecturesContainer.encode(compatiblearchitectures0.rawValue)
            }
        }
        if let compatibleRuntimes = compatibleRuntimes {
            var compatibleRuntimesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .compatibleRuntimes)
            for compatibleruntimes0 in compatibleRuntimes {
                try compatibleRuntimesContainer.encode(compatibleruntimes0.rawValue)
            }
        }
        if let createdDate = self.createdDate {
            try encodeContainer.encode(createdDate, forKey: .createdDate)
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let layerVersionArn = self.layerVersionArn {
            try encodeContainer.encode(layerVersionArn, forKey: .layerVersionArn)
        }
        if let licenseInfo = self.licenseInfo {
            try encodeContainer.encode(licenseInfo, forKey: .licenseInfo)
        }
        if version != 0 {
            try encodeContainer.encode(version, forKey: .version)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let layerVersionArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .layerVersionArn)
        layerVersionArn = layerVersionArnDecoded
        let versionDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .version) ?? 0
        version = versionDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let createdDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .createdDate)
        createdDate = createdDateDecoded
        let compatibleRuntimesContainer = try containerValues.decodeIfPresent([LambdaClientTypes.Runtime?].self, forKey: .compatibleRuntimes)
        var compatibleRuntimesDecoded0:[LambdaClientTypes.Runtime]? = nil
        if let compatibleRuntimesContainer = compatibleRuntimesContainer {
            compatibleRuntimesDecoded0 = [LambdaClientTypes.Runtime]()
            for string0 in compatibleRuntimesContainer {
                if let string0 = string0 {
                    compatibleRuntimesDecoded0?.append(string0)
                }
            }
        }
        compatibleRuntimes = compatibleRuntimesDecoded0
        let licenseInfoDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .licenseInfo)
        licenseInfo = licenseInfoDecoded
        let compatibleArchitecturesContainer = try containerValues.decodeIfPresent([LambdaClientTypes.Architecture?].self, forKey: .compatibleArchitectures)
        var compatibleArchitecturesDecoded0:[LambdaClientTypes.Architecture]? = nil
        if let compatibleArchitecturesContainer = compatibleArchitecturesContainer {
            compatibleArchitecturesDecoded0 = [LambdaClientTypes.Architecture]()
            for string0 in compatibleArchitecturesContainer {
                if let string0 = string0 {
                    compatibleArchitecturesDecoded0?.append(string0)
                }
            }
        }
        compatibleArchitectures = compatibleArchitecturesDecoded0
    }
}
