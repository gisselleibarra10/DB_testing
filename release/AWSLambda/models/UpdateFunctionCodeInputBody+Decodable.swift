// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct UpdateFunctionCodeInputBody: Swift.Equatable {
    let zipFile: ClientRuntime.Data?
    let s3Bucket: Swift.String?
    let s3Key: Swift.String?
    let s3ObjectVersion: Swift.String?
    let imageUri: Swift.String?
    let publish: Swift.Bool
    let dryRun: Swift.Bool
    let revisionId: Swift.String?
    let architectures: [LambdaClientTypes.Architecture]?
}

extension UpdateFunctionCodeInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case architectures = "Architectures"
        case dryRun = "DryRun"
        case imageUri = "ImageUri"
        case publish = "Publish"
        case revisionId = "RevisionId"
        case s3Bucket = "S3Bucket"
        case s3Key = "S3Key"
        case s3ObjectVersion = "S3ObjectVersion"
        case zipFile = "ZipFile"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let zipFileDecoded = try containerValues.decodeIfPresent(ClientRuntime.Data.self, forKey: .zipFile)
        zipFile = zipFileDecoded
        let s3BucketDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .s3Bucket)
        s3Bucket = s3BucketDecoded
        let s3KeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .s3Key)
        s3Key = s3KeyDecoded
        let s3ObjectVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .s3ObjectVersion)
        s3ObjectVersion = s3ObjectVersionDecoded
        let imageUriDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .imageUri)
        imageUri = imageUriDecoded
        let publishDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .publish) ?? false
        publish = publishDecoded
        let dryRunDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .dryRun) ?? false
        dryRun = dryRunDecoded
        let revisionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .revisionId)
        revisionId = revisionIdDecoded
        let architecturesContainer = try containerValues.decodeIfPresent([LambdaClientTypes.Architecture?].self, forKey: .architectures)
        var architecturesDecoded0:[LambdaClientTypes.Architecture]? = nil
        if let architecturesContainer = architecturesContainer {
            architecturesDecoded0 = [LambdaClientTypes.Architecture]()
            for string0 in architecturesContainer {
                if let string0 = string0 {
                    architecturesDecoded0?.append(string0)
                }
            }
        }
        architectures = architecturesDecoded0
    }
}
