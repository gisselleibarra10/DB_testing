// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension LambdaClientTypes.FunctionUrlConfig: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case authType = "AuthType"
        case cors = "Cors"
        case creationTime = "CreationTime"
        case functionArn = "FunctionArn"
        case functionUrl = "FunctionUrl"
        case lastModifiedTime = "LastModifiedTime"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let authType = self.authType {
            try encodeContainer.encode(authType.rawValue, forKey: .authType)
        }
        if let cors = self.cors {
            try encodeContainer.encode(cors, forKey: .cors)
        }
        if let creationTime = self.creationTime {
            try encodeContainer.encode(creationTime, forKey: .creationTime)
        }
        if let functionArn = self.functionArn {
            try encodeContainer.encode(functionArn, forKey: .functionArn)
        }
        if let functionUrl = self.functionUrl {
            try encodeContainer.encode(functionUrl, forKey: .functionUrl)
        }
        if let lastModifiedTime = self.lastModifiedTime {
            try encodeContainer.encode(lastModifiedTime, forKey: .lastModifiedTime)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let functionUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .functionUrl)
        functionUrl = functionUrlDecoded
        let functionArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .functionArn)
        functionArn = functionArnDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let lastModifiedTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastModifiedTime)
        lastModifiedTime = lastModifiedTimeDecoded
        let corsDecoded = try containerValues.decodeIfPresent(LambdaClientTypes.Cors.self, forKey: .cors)
        cors = corsDecoded
        let authTypeDecoded = try containerValues.decodeIfPresent(LambdaClientTypes.FunctionUrlAuthType.self, forKey: .authType)
        authType = authTypeDecoded
    }
}
