// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct UpdateEventSourceMappingOutputResponseBody: Swift.Equatable {
    let uUID: Swift.String?
    let startingPosition: LambdaClientTypes.EventSourcePosition?
    let startingPositionTimestamp: ClientRuntime.Date?
    let batchSize: Swift.Int?
    let maximumBatchingWindowInSeconds: Swift.Int?
    let parallelizationFactor: Swift.Int?
    let eventSourceArn: Swift.String?
    let filterCriteria: LambdaClientTypes.FilterCriteria?
    let functionArn: Swift.String?
    let lastModified: ClientRuntime.Date?
    let lastProcessingResult: Swift.String?
    let state: Swift.String?
    let stateTransitionReason: Swift.String?
    let destinationConfig: LambdaClientTypes.DestinationConfig?
    let topics: [Swift.String]?
    let queues: [Swift.String]?
    let sourceAccessConfigurations: [LambdaClientTypes.SourceAccessConfiguration]?
    let selfManagedEventSource: LambdaClientTypes.SelfManagedEventSource?
    let maximumRecordAgeInSeconds: Swift.Int?
    let bisectBatchOnFunctionError: Swift.Bool?
    let maximumRetryAttempts: Swift.Int?
    let tumblingWindowInSeconds: Swift.Int?
    let functionResponseTypes: [LambdaClientTypes.FunctionResponseType]?
    let amazonManagedKafkaEventSourceConfig: LambdaClientTypes.AmazonManagedKafkaEventSourceConfig?
    let selfManagedKafkaEventSourceConfig: LambdaClientTypes.SelfManagedKafkaEventSourceConfig?
}

extension UpdateEventSourceMappingOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case amazonManagedKafkaEventSourceConfig = "AmazonManagedKafkaEventSourceConfig"
        case batchSize = "BatchSize"
        case bisectBatchOnFunctionError = "BisectBatchOnFunctionError"
        case destinationConfig = "DestinationConfig"
        case eventSourceArn = "EventSourceArn"
        case filterCriteria = "FilterCriteria"
        case functionArn = "FunctionArn"
        case functionResponseTypes = "FunctionResponseTypes"
        case lastModified = "LastModified"
        case lastProcessingResult = "LastProcessingResult"
        case maximumBatchingWindowInSeconds = "MaximumBatchingWindowInSeconds"
        case maximumRecordAgeInSeconds = "MaximumRecordAgeInSeconds"
        case maximumRetryAttempts = "MaximumRetryAttempts"
        case parallelizationFactor = "ParallelizationFactor"
        case queues = "Queues"
        case selfManagedEventSource = "SelfManagedEventSource"
        case selfManagedKafkaEventSourceConfig = "SelfManagedKafkaEventSourceConfig"
        case sourceAccessConfigurations = "SourceAccessConfigurations"
        case startingPosition = "StartingPosition"
        case startingPositionTimestamp = "StartingPositionTimestamp"
        case state = "State"
        case stateTransitionReason = "StateTransitionReason"
        case topics = "Topics"
        case tumblingWindowInSeconds = "TumblingWindowInSeconds"
        case uUID = "UUID"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let uUIDDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .uUID)
        uUID = uUIDDecoded
        let startingPositionDecoded = try containerValues.decodeIfPresent(LambdaClientTypes.EventSourcePosition.self, forKey: .startingPosition)
        startingPosition = startingPositionDecoded
        let startingPositionTimestampDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .startingPositionTimestamp)
        startingPositionTimestamp = startingPositionTimestampDecoded
        let batchSizeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .batchSize)
        batchSize = batchSizeDecoded
        let maximumBatchingWindowInSecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maximumBatchingWindowInSeconds)
        maximumBatchingWindowInSeconds = maximumBatchingWindowInSecondsDecoded
        let parallelizationFactorDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .parallelizationFactor)
        parallelizationFactor = parallelizationFactorDecoded
        let eventSourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .eventSourceArn)
        eventSourceArn = eventSourceArnDecoded
        let filterCriteriaDecoded = try containerValues.decodeIfPresent(LambdaClientTypes.FilterCriteria.self, forKey: .filterCriteria)
        filterCriteria = filterCriteriaDecoded
        let functionArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .functionArn)
        functionArn = functionArnDecoded
        let lastModifiedDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModified)
        lastModified = lastModifiedDecoded
        let lastProcessingResultDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastProcessingResult)
        lastProcessingResult = lastProcessingResultDecoded
        let stateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .state)
        state = stateDecoded
        let stateTransitionReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stateTransitionReason)
        stateTransitionReason = stateTransitionReasonDecoded
        let destinationConfigDecoded = try containerValues.decodeIfPresent(LambdaClientTypes.DestinationConfig.self, forKey: .destinationConfig)
        destinationConfig = destinationConfigDecoded
        let topicsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .topics)
        var topicsDecoded0:[Swift.String]? = nil
        if let topicsContainer = topicsContainer {
            topicsDecoded0 = [Swift.String]()
            for string0 in topicsContainer {
                if let string0 = string0 {
                    topicsDecoded0?.append(string0)
                }
            }
        }
        topics = topicsDecoded0
        let queuesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .queues)
        var queuesDecoded0:[Swift.String]? = nil
        if let queuesContainer = queuesContainer {
            queuesDecoded0 = [Swift.String]()
            for string0 in queuesContainer {
                if let string0 = string0 {
                    queuesDecoded0?.append(string0)
                }
            }
        }
        queues = queuesDecoded0
        let sourceAccessConfigurationsContainer = try containerValues.decodeIfPresent([LambdaClientTypes.SourceAccessConfiguration?].self, forKey: .sourceAccessConfigurations)
        var sourceAccessConfigurationsDecoded0:[LambdaClientTypes.SourceAccessConfiguration]? = nil
        if let sourceAccessConfigurationsContainer = sourceAccessConfigurationsContainer {
            sourceAccessConfigurationsDecoded0 = [LambdaClientTypes.SourceAccessConfiguration]()
            for structure0 in sourceAccessConfigurationsContainer {
                if let structure0 = structure0 {
                    sourceAccessConfigurationsDecoded0?.append(structure0)
                }
            }
        }
        sourceAccessConfigurations = sourceAccessConfigurationsDecoded0
        let selfManagedEventSourceDecoded = try containerValues.decodeIfPresent(LambdaClientTypes.SelfManagedEventSource.self, forKey: .selfManagedEventSource)
        selfManagedEventSource = selfManagedEventSourceDecoded
        let maximumRecordAgeInSecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maximumRecordAgeInSeconds)
        maximumRecordAgeInSeconds = maximumRecordAgeInSecondsDecoded
        let bisectBatchOnFunctionErrorDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .bisectBatchOnFunctionError)
        bisectBatchOnFunctionError = bisectBatchOnFunctionErrorDecoded
        let maximumRetryAttemptsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maximumRetryAttempts)
        maximumRetryAttempts = maximumRetryAttemptsDecoded
        let tumblingWindowInSecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .tumblingWindowInSeconds)
        tumblingWindowInSeconds = tumblingWindowInSecondsDecoded
        let functionResponseTypesContainer = try containerValues.decodeIfPresent([LambdaClientTypes.FunctionResponseType?].self, forKey: .functionResponseTypes)
        var functionResponseTypesDecoded0:[LambdaClientTypes.FunctionResponseType]? = nil
        if let functionResponseTypesContainer = functionResponseTypesContainer {
            functionResponseTypesDecoded0 = [LambdaClientTypes.FunctionResponseType]()
            for string0 in functionResponseTypesContainer {
                if let string0 = string0 {
                    functionResponseTypesDecoded0?.append(string0)
                }
            }
        }
        functionResponseTypes = functionResponseTypesDecoded0
        let amazonManagedKafkaEventSourceConfigDecoded = try containerValues.decodeIfPresent(LambdaClientTypes.AmazonManagedKafkaEventSourceConfig.self, forKey: .amazonManagedKafkaEventSourceConfig)
        amazonManagedKafkaEventSourceConfig = amazonManagedKafkaEventSourceConfigDecoded
        let selfManagedKafkaEventSourceConfigDecoded = try containerValues.decodeIfPresent(LambdaClientTypes.SelfManagedKafkaEventSourceConfig.self, forKey: .selfManagedKafkaEventSourceConfig)
        selfManagedKafkaEventSourceConfig = selfManagedKafkaEventSourceConfigDecoded
    }
}
