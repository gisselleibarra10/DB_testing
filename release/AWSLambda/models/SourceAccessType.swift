// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension LambdaClientTypes {
    public enum SourceAccessType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case basicAuth
        case clientCertificateTlsAuth
        case saslScram256Auth
        case saslScram512Auth
        case serverRootCaCertificate
        case virtualHost
        case vpcSecurityGroup
        case vpcSubnet
        case sdkUnknown(Swift.String)

        public static var allCases: [SourceAccessType] {
            return [
                .basicAuth,
                .clientCertificateTlsAuth,
                .saslScram256Auth,
                .saslScram512Auth,
                .serverRootCaCertificate,
                .virtualHost,
                .vpcSecurityGroup,
                .vpcSubnet,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .basicAuth: return "BASIC_AUTH"
            case .clientCertificateTlsAuth: return "CLIENT_CERTIFICATE_TLS_AUTH"
            case .saslScram256Auth: return "SASL_SCRAM_256_AUTH"
            case .saslScram512Auth: return "SASL_SCRAM_512_AUTH"
            case .serverRootCaCertificate: return "SERVER_ROOT_CA_CERTIFICATE"
            case .virtualHost: return "VIRTUAL_HOST"
            case .vpcSecurityGroup: return "VPC_SECURITY_GROUP"
            case .vpcSubnet: return "VPC_SUBNET"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = SourceAccessType(rawValue: rawValue) ?? SourceAccessType.sdkUnknown(rawValue)
        }
    }
}
