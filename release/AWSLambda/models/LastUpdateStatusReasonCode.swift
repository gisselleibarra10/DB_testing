// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension LambdaClientTypes {
    public enum LastUpdateStatusReasonCode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case enilimitexceeded
        case imageaccessdenied
        case imagedeleted
        case insufficientrolepermissions
        case internalerror
        case invalidconfiguration
        case invalidimage
        case invalidsecuritygroup
        case invalidsubnet
        case subnetoutofipaddresses
        case sdkUnknown(Swift.String)

        public static var allCases: [LastUpdateStatusReasonCode] {
            return [
                .enilimitexceeded,
                .imageaccessdenied,
                .imagedeleted,
                .insufficientrolepermissions,
                .internalerror,
                .invalidconfiguration,
                .invalidimage,
                .invalidsecuritygroup,
                .invalidsubnet,
                .subnetoutofipaddresses,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .enilimitexceeded: return "EniLimitExceeded"
            case .imageaccessdenied: return "ImageAccessDenied"
            case .imagedeleted: return "ImageDeleted"
            case .insufficientrolepermissions: return "InsufficientRolePermissions"
            case .internalerror: return "InternalError"
            case .invalidconfiguration: return "InvalidConfiguration"
            case .invalidimage: return "InvalidImage"
            case .invalidsecuritygroup: return "InvalidSecurityGroup"
            case .invalidsubnet: return "InvalidSubnet"
            case .subnetoutofipaddresses: return "SubnetOutOfIPAddresses"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = LastUpdateStatusReasonCode(rawValue: rawValue) ?? LastUpdateStatusReasonCode.sdkUnknown(rawValue)
        }
    }
}
