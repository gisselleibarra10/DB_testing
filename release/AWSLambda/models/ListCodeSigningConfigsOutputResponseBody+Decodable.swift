// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListCodeSigningConfigsOutputResponseBody: Swift.Equatable {
    let nextMarker: Swift.String?
    let codeSigningConfigs: [LambdaClientTypes.CodeSigningConfig]?
}

extension ListCodeSigningConfigsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case codeSigningConfigs = "CodeSigningConfigs"
        case nextMarker = "NextMarker"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextMarkerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextMarker)
        nextMarker = nextMarkerDecoded
        let codeSigningConfigsContainer = try containerValues.decodeIfPresent([LambdaClientTypes.CodeSigningConfig?].self, forKey: .codeSigningConfigs)
        var codeSigningConfigsDecoded0:[LambdaClientTypes.CodeSigningConfig]? = nil
        if let codeSigningConfigsContainer = codeSigningConfigsContainer {
            codeSigningConfigsDecoded0 = [LambdaClientTypes.CodeSigningConfig]()
            for structure0 in codeSigningConfigsContainer {
                if let structure0 = structure0 {
                    codeSigningConfigsDecoded0?.append(structure0)
                }
            }
        }
        codeSigningConfigs = codeSigningConfigsDecoded0
    }
}
