// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListEventSourceMappingsOutputResponseBody: Swift.Equatable {
    let nextMarker: Swift.String?
    let eventSourceMappings: [LambdaClientTypes.EventSourceMappingConfiguration]?
}

extension ListEventSourceMappingsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case eventSourceMappings = "EventSourceMappings"
        case nextMarker = "NextMarker"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextMarkerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextMarker)
        nextMarker = nextMarkerDecoded
        let eventSourceMappingsContainer = try containerValues.decodeIfPresent([LambdaClientTypes.EventSourceMappingConfiguration?].self, forKey: .eventSourceMappings)
        var eventSourceMappingsDecoded0:[LambdaClientTypes.EventSourceMappingConfiguration]? = nil
        if let eventSourceMappingsContainer = eventSourceMappingsContainer {
            eventSourceMappingsDecoded0 = [LambdaClientTypes.EventSourceMappingConfiguration]()
            for structure0 in eventSourceMappingsContainer {
                if let structure0 = structure0 {
                    eventSourceMappingsDecoded0?.append(structure0)
                }
            }
        }
        eventSourceMappings = eventSourceMappingsDecoded0
    }
}
