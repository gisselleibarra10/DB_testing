// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension UpdateEventSourceMappingInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case batchSize = "BatchSize"
        case bisectBatchOnFunctionError = "BisectBatchOnFunctionError"
        case destinationConfig = "DestinationConfig"
        case enabled = "Enabled"
        case filterCriteria = "FilterCriteria"
        case functionName = "FunctionName"
        case functionResponseTypes = "FunctionResponseTypes"
        case maximumBatchingWindowInSeconds = "MaximumBatchingWindowInSeconds"
        case maximumRecordAgeInSeconds = "MaximumRecordAgeInSeconds"
        case maximumRetryAttempts = "MaximumRetryAttempts"
        case parallelizationFactor = "ParallelizationFactor"
        case sourceAccessConfigurations = "SourceAccessConfigurations"
        case tumblingWindowInSeconds = "TumblingWindowInSeconds"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let batchSize = self.batchSize {
            try encodeContainer.encode(batchSize, forKey: .batchSize)
        }
        if let bisectBatchOnFunctionError = self.bisectBatchOnFunctionError {
            try encodeContainer.encode(bisectBatchOnFunctionError, forKey: .bisectBatchOnFunctionError)
        }
        if let destinationConfig = self.destinationConfig {
            try encodeContainer.encode(destinationConfig, forKey: .destinationConfig)
        }
        if let enabled = self.enabled {
            try encodeContainer.encode(enabled, forKey: .enabled)
        }
        if let filterCriteria = self.filterCriteria {
            try encodeContainer.encode(filterCriteria, forKey: .filterCriteria)
        }
        if let functionName = self.functionName {
            try encodeContainer.encode(functionName, forKey: .functionName)
        }
        if let functionResponseTypes = functionResponseTypes {
            var functionResponseTypesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .functionResponseTypes)
            for functionresponsetypelist0 in functionResponseTypes {
                try functionResponseTypesContainer.encode(functionresponsetypelist0.rawValue)
            }
        }
        if let maximumBatchingWindowInSeconds = self.maximumBatchingWindowInSeconds {
            try encodeContainer.encode(maximumBatchingWindowInSeconds, forKey: .maximumBatchingWindowInSeconds)
        }
        if let maximumRecordAgeInSeconds = self.maximumRecordAgeInSeconds {
            try encodeContainer.encode(maximumRecordAgeInSeconds, forKey: .maximumRecordAgeInSeconds)
        }
        if let maximumRetryAttempts = self.maximumRetryAttempts {
            try encodeContainer.encode(maximumRetryAttempts, forKey: .maximumRetryAttempts)
        }
        if let parallelizationFactor = self.parallelizationFactor {
            try encodeContainer.encode(parallelizationFactor, forKey: .parallelizationFactor)
        }
        if let sourceAccessConfigurations = sourceAccessConfigurations {
            var sourceAccessConfigurationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .sourceAccessConfigurations)
            for sourceaccessconfigurations0 in sourceAccessConfigurations {
                try sourceAccessConfigurationsContainer.encode(sourceaccessconfigurations0)
            }
        }
        if let tumblingWindowInSeconds = self.tumblingWindowInSeconds {
            try encodeContainer.encode(tumblingWindowInSeconds, forKey: .tumblingWindowInSeconds)
        }
    }
}
