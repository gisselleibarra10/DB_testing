// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListVersionsByFunctionOutputResponseBody: Swift.Equatable {
    let nextMarker: Swift.String?
    let versions: [LambdaClientTypes.FunctionConfiguration]?
}

extension ListVersionsByFunctionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextMarker = "NextMarker"
        case versions = "Versions"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextMarkerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextMarker)
        nextMarker = nextMarkerDecoded
        let versionsContainer = try containerValues.decodeIfPresent([LambdaClientTypes.FunctionConfiguration?].self, forKey: .versions)
        var versionsDecoded0:[LambdaClientTypes.FunctionConfiguration]? = nil
        if let versionsContainer = versionsContainer {
            versionsDecoded0 = [LambdaClientTypes.FunctionConfiguration]()
            for structure0 in versionsContainer {
                if let structure0 = structure0 {
                    versionsDecoded0?.append(structure0)
                }
            }
        }
        versions = versionsDecoded0
    }
}
