// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct CreateEventSourceMappingInput: Swift.Equatable {
    /// Specific configuration settings for an Amazon Managed Streaming for Apache Kafka (Amazon MSK) event source.
    public var amazonManagedKafkaEventSourceConfig: LambdaClientTypes.AmazonManagedKafkaEventSourceConfig?
    /// The maximum number of records in each batch that Lambda pulls from your stream or queue and sends to your function. Lambda passes all of the records in the batch to the function in a single call, up to the payload limit for synchronous invocation (6 MB).
    ///
    /// * Amazon Kinesis - Default 100. Max 10,000.
    ///
    /// * Amazon DynamoDB Streams - Default 100. Max 10,000.
    ///
    /// * Amazon Simple Queue Service - Default 10. For standard queues the max is 10,000. For FIFO queues the max is 10.
    ///
    /// * Amazon Managed Streaming for Apache Kafka - Default 100. Max 10,000.
    ///
    /// * Self-managed Apache Kafka - Default 100. Max 10,000.
    ///
    /// * Amazon MQ (ActiveMQ and RabbitMQ) - Default 100. Max 10,000.
    public var batchSize: Swift.Int?
    /// (Streams only) If the function returns an error, split the batch in two and retry.
    public var bisectBatchOnFunctionError: Swift.Bool?
    /// (Streams only) An Amazon SQS queue or Amazon SNS topic destination for discarded records.
    public var destinationConfig: LambdaClientTypes.DestinationConfig?
    /// When true, the event source mapping is active. When false, Lambda pauses polling and invocation. Default: True
    public var enabled: Swift.Bool?
    /// The Amazon Resource Name (ARN) of the event source.
    ///
    /// * Amazon Kinesis - The ARN of the data stream or a stream consumer.
    ///
    /// * Amazon DynamoDB Streams - The ARN of the stream.
    ///
    /// * Amazon Simple Queue Service - The ARN of the queue.
    ///
    /// * Amazon Managed Streaming for Apache Kafka - The ARN of the cluster.
    public var eventSourceArn: Swift.String?
    /// (Streams and Amazon SQS) An object that defines the filter criteria that determine whether Lambda should process an event. For more information, see [Lambda event filtering](https://docs.aws.amazon.com/lambda/latest/dg/invocation-eventfiltering.html).
    public var filterCriteria: LambdaClientTypes.FilterCriteria?
    /// The name of the Lambda function. Name formats
    ///
    /// * Function name - MyFunction.
    ///
    /// * Function ARN - arn:aws:lambda:us-west-2:123456789012:function:MyFunction.
    ///
    /// * Version or Alias ARN - arn:aws:lambda:us-west-2:123456789012:function:MyFunction:PROD.
    ///
    /// * Partial ARN - 123456789012:function:MyFunction.
    ///
    ///
    /// The length constraint applies only to the full ARN. If you specify only the function name, it's limited to 64 characters in length.
    /// This member is required.
    public var functionName: Swift.String?
    /// (Streams and Amazon SQS) A list of current response type enums applied to the event source mapping.
    public var functionResponseTypes: [LambdaClientTypes.FunctionResponseType]?
    /// (Streams and Amazon SQS standard queues) The maximum amount of time, in seconds, that Lambda spends gathering records before invoking the function. Default: 0 Related setting: When you set BatchSize to a value greater than 10, you must set MaximumBatchingWindowInSeconds to at least 1.
    public var maximumBatchingWindowInSeconds: Swift.Int?
    /// (Streams only) Discard records older than the specified age. The default value is infinite (-1).
    public var maximumRecordAgeInSeconds: Swift.Int?
    /// (Streams only) Discard records after the specified number of retries. The default value is infinite (-1). When set to infinite (-1), failed records are retried until the record expires.
    public var maximumRetryAttempts: Swift.Int?
    /// (Streams only) The number of batches to process from each shard concurrently.
    public var parallelizationFactor: Swift.Int?
    /// (MQ) The name of the Amazon MQ broker destination queue to consume.
    public var queues: [Swift.String]?
    /// The self-managed Apache Kafka cluster to receive records from.
    public var selfManagedEventSource: LambdaClientTypes.SelfManagedEventSource?
    /// Specific configuration settings for a self-managed Apache Kafka event source.
    public var selfManagedKafkaEventSourceConfig: LambdaClientTypes.SelfManagedKafkaEventSourceConfig?
    /// An array of authentication protocols or VPC components required to secure your event source.
    public var sourceAccessConfigurations: [LambdaClientTypes.SourceAccessConfiguration]?
    /// The position in a stream from which to start reading. Required for Amazon Kinesis, Amazon DynamoDB, and Amazon MSK Streams sources. AT_TIMESTAMP is supported only for Amazon Kinesis streams.
    public var startingPosition: LambdaClientTypes.EventSourcePosition?
    /// With StartingPosition set to AT_TIMESTAMP, the time from which to start reading.
    public var startingPositionTimestamp: ClientRuntime.Date?
    /// The name of the Kafka topic.
    public var topics: [Swift.String]?
    /// (Streams only) The duration in seconds of a processing window. The range is between 1 second and 900 seconds.
    public var tumblingWindowInSeconds: Swift.Int?

    public init (
        amazonManagedKafkaEventSourceConfig: LambdaClientTypes.AmazonManagedKafkaEventSourceConfig? = nil,
        batchSize: Swift.Int? = nil,
        bisectBatchOnFunctionError: Swift.Bool? = nil,
        destinationConfig: LambdaClientTypes.DestinationConfig? = nil,
        enabled: Swift.Bool? = nil,
        eventSourceArn: Swift.String? = nil,
        filterCriteria: LambdaClientTypes.FilterCriteria? = nil,
        functionName: Swift.String? = nil,
        functionResponseTypes: [LambdaClientTypes.FunctionResponseType]? = nil,
        maximumBatchingWindowInSeconds: Swift.Int? = nil,
        maximumRecordAgeInSeconds: Swift.Int? = nil,
        maximumRetryAttempts: Swift.Int? = nil,
        parallelizationFactor: Swift.Int? = nil,
        queues: [Swift.String]? = nil,
        selfManagedEventSource: LambdaClientTypes.SelfManagedEventSource? = nil,
        selfManagedKafkaEventSourceConfig: LambdaClientTypes.SelfManagedKafkaEventSourceConfig? = nil,
        sourceAccessConfigurations: [LambdaClientTypes.SourceAccessConfiguration]? = nil,
        startingPosition: LambdaClientTypes.EventSourcePosition? = nil,
        startingPositionTimestamp: ClientRuntime.Date? = nil,
        topics: [Swift.String]? = nil,
        tumblingWindowInSeconds: Swift.Int? = nil
    )
    {
        self.amazonManagedKafkaEventSourceConfig = amazonManagedKafkaEventSourceConfig
        self.batchSize = batchSize
        self.bisectBatchOnFunctionError = bisectBatchOnFunctionError
        self.destinationConfig = destinationConfig
        self.enabled = enabled
        self.eventSourceArn = eventSourceArn
        self.filterCriteria = filterCriteria
        self.functionName = functionName
        self.functionResponseTypes = functionResponseTypes
        self.maximumBatchingWindowInSeconds = maximumBatchingWindowInSeconds
        self.maximumRecordAgeInSeconds = maximumRecordAgeInSeconds
        self.maximumRetryAttempts = maximumRetryAttempts
        self.parallelizationFactor = parallelizationFactor
        self.queues = queues
        self.selfManagedEventSource = selfManagedEventSource
        self.selfManagedKafkaEventSourceConfig = selfManagedKafkaEventSourceConfig
        self.sourceAccessConfigurations = sourceAccessConfigurations
        self.startingPosition = startingPosition
        self.startingPositionTimestamp = startingPositionTimestamp
        self.topics = topics
        self.tumblingWindowInSeconds = tumblingWindowInSeconds
    }
}
