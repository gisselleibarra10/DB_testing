// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct AddPermissionInputBody: Swift.Equatable {
    let statementId: Swift.String?
    let action: Swift.String?
    let principal: Swift.String?
    let sourceArn: Swift.String?
    let sourceAccount: Swift.String?
    let eventSourceToken: Swift.String?
    let revisionId: Swift.String?
    let principalOrgID: Swift.String?
    let functionUrlAuthType: LambdaClientTypes.FunctionUrlAuthType?
}

extension AddPermissionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case action = "Action"
        case eventSourceToken = "EventSourceToken"
        case functionUrlAuthType = "FunctionUrlAuthType"
        case principal = "Principal"
        case principalOrgID = "PrincipalOrgID"
        case revisionId = "RevisionId"
        case sourceAccount = "SourceAccount"
        case sourceArn = "SourceArn"
        case statementId = "StatementId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statementIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .statementId)
        statementId = statementIdDecoded
        let actionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .action)
        action = actionDecoded
        let principalDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .principal)
        principal = principalDecoded
        let sourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceArn)
        sourceArn = sourceArnDecoded
        let sourceAccountDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceAccount)
        sourceAccount = sourceAccountDecoded
        let eventSourceTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .eventSourceToken)
        eventSourceToken = eventSourceTokenDecoded
        let revisionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .revisionId)
        revisionId = revisionIdDecoded
        let principalOrgIDDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .principalOrgID)
        principalOrgID = principalOrgIDDecoded
        let functionUrlAuthTypeDecoded = try containerValues.decodeIfPresent(LambdaClientTypes.FunctionUrlAuthType.self, forKey: .functionUrlAuthType)
        functionUrlAuthType = functionUrlAuthTypeDecoded
    }
}
