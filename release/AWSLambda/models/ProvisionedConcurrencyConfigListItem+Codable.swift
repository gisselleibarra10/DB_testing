// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension LambdaClientTypes.ProvisionedConcurrencyConfigListItem: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case allocatedProvisionedConcurrentExecutions = "AllocatedProvisionedConcurrentExecutions"
        case availableProvisionedConcurrentExecutions = "AvailableProvisionedConcurrentExecutions"
        case functionArn = "FunctionArn"
        case lastModified = "LastModified"
        case requestedProvisionedConcurrentExecutions = "RequestedProvisionedConcurrentExecutions"
        case status = "Status"
        case statusReason = "StatusReason"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let allocatedProvisionedConcurrentExecutions = self.allocatedProvisionedConcurrentExecutions {
            try encodeContainer.encode(allocatedProvisionedConcurrentExecutions, forKey: .allocatedProvisionedConcurrentExecutions)
        }
        if let availableProvisionedConcurrentExecutions = self.availableProvisionedConcurrentExecutions {
            try encodeContainer.encode(availableProvisionedConcurrentExecutions, forKey: .availableProvisionedConcurrentExecutions)
        }
        if let functionArn = self.functionArn {
            try encodeContainer.encode(functionArn, forKey: .functionArn)
        }
        if let lastModified = self.lastModified {
            try encodeContainer.encode(lastModified, forKey: .lastModified)
        }
        if let requestedProvisionedConcurrentExecutions = self.requestedProvisionedConcurrentExecutions {
            try encodeContainer.encode(requestedProvisionedConcurrentExecutions, forKey: .requestedProvisionedConcurrentExecutions)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let statusReason = self.statusReason {
            try encodeContainer.encode(statusReason, forKey: .statusReason)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let functionArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .functionArn)
        functionArn = functionArnDecoded
        let requestedProvisionedConcurrentExecutionsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .requestedProvisionedConcurrentExecutions)
        requestedProvisionedConcurrentExecutions = requestedProvisionedConcurrentExecutionsDecoded
        let availableProvisionedConcurrentExecutionsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .availableProvisionedConcurrentExecutions)
        availableProvisionedConcurrentExecutions = availableProvisionedConcurrentExecutionsDecoded
        let allocatedProvisionedConcurrentExecutionsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .allocatedProvisionedConcurrentExecutions)
        allocatedProvisionedConcurrentExecutions = allocatedProvisionedConcurrentExecutionsDecoded
        let statusDecoded = try containerValues.decodeIfPresent(LambdaClientTypes.ProvisionedConcurrencyStatusEnum.self, forKey: .status)
        status = statusDecoded
        let statusReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .statusReason)
        statusReason = statusReasonDecoded
        let lastModifiedDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastModified)
        lastModified = lastModifiedDecoded
    }
}
