// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListLayersOutputResponseBody: Swift.Equatable {
    let nextMarker: Swift.String?
    let layers: [LambdaClientTypes.LayersListItem]?
}

extension ListLayersOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case layers = "Layers"
        case nextMarker = "NextMarker"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextMarkerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextMarker)
        nextMarker = nextMarkerDecoded
        let layersContainer = try containerValues.decodeIfPresent([LambdaClientTypes.LayersListItem?].self, forKey: .layers)
        var layersDecoded0:[LambdaClientTypes.LayersListItem]? = nil
        if let layersContainer = layersContainer {
            layersDecoded0 = [LambdaClientTypes.LayersListItem]()
            for structure0 in layersContainer {
                if let structure0 = structure0 {
                    layersDecoded0?.append(structure0)
                }
            }
        }
        layers = layersDecoded0
    }
}
