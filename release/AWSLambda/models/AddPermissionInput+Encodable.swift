// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AddPermissionInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case action = "Action"
        case eventSourceToken = "EventSourceToken"
        case functionUrlAuthType = "FunctionUrlAuthType"
        case principal = "Principal"
        case principalOrgID = "PrincipalOrgID"
        case revisionId = "RevisionId"
        case sourceAccount = "SourceAccount"
        case sourceArn = "SourceArn"
        case statementId = "StatementId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let action = self.action {
            try encodeContainer.encode(action, forKey: .action)
        }
        if let eventSourceToken = self.eventSourceToken {
            try encodeContainer.encode(eventSourceToken, forKey: .eventSourceToken)
        }
        if let functionUrlAuthType = self.functionUrlAuthType {
            try encodeContainer.encode(functionUrlAuthType.rawValue, forKey: .functionUrlAuthType)
        }
        if let principal = self.principal {
            try encodeContainer.encode(principal, forKey: .principal)
        }
        if let principalOrgID = self.principalOrgID {
            try encodeContainer.encode(principalOrgID, forKey: .principalOrgID)
        }
        if let revisionId = self.revisionId {
            try encodeContainer.encode(revisionId, forKey: .revisionId)
        }
        if let sourceAccount = self.sourceAccount {
            try encodeContainer.encode(sourceAccount, forKey: .sourceAccount)
        }
        if let sourceArn = self.sourceArn {
            try encodeContainer.encode(sourceArn, forKey: .sourceArn)
        }
        if let statementId = self.statementId {
            try encodeContainer.encode(statementId, forKey: .statementId)
        }
    }
}
