// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetFunctionConfigurationOutputResponseBody: Swift.Equatable {
    let functionName: Swift.String?
    let functionArn: Swift.String?
    let runtime: LambdaClientTypes.Runtime?
    let role: Swift.String?
    let handler: Swift.String?
    let codeSize: Swift.Int
    let description: Swift.String?
    let timeout: Swift.Int?
    let memorySize: Swift.Int?
    let lastModified: Swift.String?
    let codeSha256: Swift.String?
    let version: Swift.String?
    let vpcConfig: LambdaClientTypes.VpcConfigResponse?
    let deadLetterConfig: LambdaClientTypes.DeadLetterConfig?
    let environment: LambdaClientTypes.EnvironmentResponse?
    let kMSKeyArn: Swift.String?
    let tracingConfig: LambdaClientTypes.TracingConfigResponse?
    let masterArn: Swift.String?
    let revisionId: Swift.String?
    let layers: [LambdaClientTypes.Layer]?
    let state: LambdaClientTypes.State?
    let stateReason: Swift.String?
    let stateReasonCode: LambdaClientTypes.StateReasonCode?
    let lastUpdateStatus: LambdaClientTypes.LastUpdateStatus?
    let lastUpdateStatusReason: Swift.String?
    let lastUpdateStatusReasonCode: LambdaClientTypes.LastUpdateStatusReasonCode?
    let fileSystemConfigs: [LambdaClientTypes.FileSystemConfig]?
    let packageType: LambdaClientTypes.PackageType?
    let imageConfigResponse: LambdaClientTypes.ImageConfigResponse?
    let signingProfileVersionArn: Swift.String?
    let signingJobArn: Swift.String?
    let architectures: [LambdaClientTypes.Architecture]?
    let ephemeralStorage: LambdaClientTypes.EphemeralStorage?
}

extension GetFunctionConfigurationOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case architectures = "Architectures"
        case codeSha256 = "CodeSha256"
        case codeSize = "CodeSize"
        case deadLetterConfig = "DeadLetterConfig"
        case description = "Description"
        case environment = "Environment"
        case ephemeralStorage = "EphemeralStorage"
        case fileSystemConfigs = "FileSystemConfigs"
        case functionArn = "FunctionArn"
        case functionName = "FunctionName"
        case handler = "Handler"
        case imageConfigResponse = "ImageConfigResponse"
        case kMSKeyArn = "KMSKeyArn"
        case lastModified = "LastModified"
        case lastUpdateStatus = "LastUpdateStatus"
        case lastUpdateStatusReason = "LastUpdateStatusReason"
        case lastUpdateStatusReasonCode = "LastUpdateStatusReasonCode"
        case layers = "Layers"
        case masterArn = "MasterArn"
        case memorySize = "MemorySize"
        case packageType = "PackageType"
        case revisionId = "RevisionId"
        case role = "Role"
        case runtime = "Runtime"
        case signingJobArn = "SigningJobArn"
        case signingProfileVersionArn = "SigningProfileVersionArn"
        case state = "State"
        case stateReason = "StateReason"
        case stateReasonCode = "StateReasonCode"
        case timeout = "Timeout"
        case tracingConfig = "TracingConfig"
        case version = "Version"
        case vpcConfig = "VpcConfig"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let functionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .functionName)
        functionName = functionNameDecoded
        let functionArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .functionArn)
        functionArn = functionArnDecoded
        let runtimeDecoded = try containerValues.decodeIfPresent(LambdaClientTypes.Runtime.self, forKey: .runtime)
        runtime = runtimeDecoded
        let roleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .role)
        role = roleDecoded
        let handlerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .handler)
        handler = handlerDecoded
        let codeSizeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .codeSize) ?? 0
        codeSize = codeSizeDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let timeoutDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .timeout)
        timeout = timeoutDecoded
        let memorySizeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .memorySize)
        memorySize = memorySizeDecoded
        let lastModifiedDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastModified)
        lastModified = lastModifiedDecoded
        let codeSha256Decoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .codeSha256)
        codeSha256 = codeSha256Decoded
        let versionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .version)
        version = versionDecoded
        let vpcConfigDecoded = try containerValues.decodeIfPresent(LambdaClientTypes.VpcConfigResponse.self, forKey: .vpcConfig)
        vpcConfig = vpcConfigDecoded
        let deadLetterConfigDecoded = try containerValues.decodeIfPresent(LambdaClientTypes.DeadLetterConfig.self, forKey: .deadLetterConfig)
        deadLetterConfig = deadLetterConfigDecoded
        let environmentDecoded = try containerValues.decodeIfPresent(LambdaClientTypes.EnvironmentResponse.self, forKey: .environment)
        environment = environmentDecoded
        let kMSKeyArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kMSKeyArn)
        kMSKeyArn = kMSKeyArnDecoded
        let tracingConfigDecoded = try containerValues.decodeIfPresent(LambdaClientTypes.TracingConfigResponse.self, forKey: .tracingConfig)
        tracingConfig = tracingConfigDecoded
        let masterArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .masterArn)
        masterArn = masterArnDecoded
        let revisionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .revisionId)
        revisionId = revisionIdDecoded
        let layersContainer = try containerValues.decodeIfPresent([LambdaClientTypes.Layer?].self, forKey: .layers)
        var layersDecoded0:[LambdaClientTypes.Layer]? = nil
        if let layersContainer = layersContainer {
            layersDecoded0 = [LambdaClientTypes.Layer]()
            for structure0 in layersContainer {
                if let structure0 = structure0 {
                    layersDecoded0?.append(structure0)
                }
            }
        }
        layers = layersDecoded0
        let stateDecoded = try containerValues.decodeIfPresent(LambdaClientTypes.State.self, forKey: .state)
        state = stateDecoded
        let stateReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stateReason)
        stateReason = stateReasonDecoded
        let stateReasonCodeDecoded = try containerValues.decodeIfPresent(LambdaClientTypes.StateReasonCode.self, forKey: .stateReasonCode)
        stateReasonCode = stateReasonCodeDecoded
        let lastUpdateStatusDecoded = try containerValues.decodeIfPresent(LambdaClientTypes.LastUpdateStatus.self, forKey: .lastUpdateStatus)
        lastUpdateStatus = lastUpdateStatusDecoded
        let lastUpdateStatusReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastUpdateStatusReason)
        lastUpdateStatusReason = lastUpdateStatusReasonDecoded
        let lastUpdateStatusReasonCodeDecoded = try containerValues.decodeIfPresent(LambdaClientTypes.LastUpdateStatusReasonCode.self, forKey: .lastUpdateStatusReasonCode)
        lastUpdateStatusReasonCode = lastUpdateStatusReasonCodeDecoded
        let fileSystemConfigsContainer = try containerValues.decodeIfPresent([LambdaClientTypes.FileSystemConfig?].self, forKey: .fileSystemConfigs)
        var fileSystemConfigsDecoded0:[LambdaClientTypes.FileSystemConfig]? = nil
        if let fileSystemConfigsContainer = fileSystemConfigsContainer {
            fileSystemConfigsDecoded0 = [LambdaClientTypes.FileSystemConfig]()
            for structure0 in fileSystemConfigsContainer {
                if let structure0 = structure0 {
                    fileSystemConfigsDecoded0?.append(structure0)
                }
            }
        }
        fileSystemConfigs = fileSystemConfigsDecoded0
        let packageTypeDecoded = try containerValues.decodeIfPresent(LambdaClientTypes.PackageType.self, forKey: .packageType)
        packageType = packageTypeDecoded
        let imageConfigResponseDecoded = try containerValues.decodeIfPresent(LambdaClientTypes.ImageConfigResponse.self, forKey: .imageConfigResponse)
        imageConfigResponse = imageConfigResponseDecoded
        let signingProfileVersionArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .signingProfileVersionArn)
        signingProfileVersionArn = signingProfileVersionArnDecoded
        let signingJobArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .signingJobArn)
        signingJobArn = signingJobArnDecoded
        let architecturesContainer = try containerValues.decodeIfPresent([LambdaClientTypes.Architecture?].self, forKey: .architectures)
        var architecturesDecoded0:[LambdaClientTypes.Architecture]? = nil
        if let architecturesContainer = architecturesContainer {
            architecturesDecoded0 = [LambdaClientTypes.Architecture]()
            for string0 in architecturesContainer {
                if let string0 = string0 {
                    architecturesDecoded0?.append(string0)
                }
            }
        }
        architectures = architecturesDecoded0
        let ephemeralStorageDecoded = try containerValues.decodeIfPresent(LambdaClientTypes.EphemeralStorage.self, forKey: .ephemeralStorage)
        ephemeralStorage = ephemeralStorageDecoded
    }
}
