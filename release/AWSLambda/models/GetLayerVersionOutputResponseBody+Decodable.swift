// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetLayerVersionOutputResponseBody: Swift.Equatable {
    let content: LambdaClientTypes.LayerVersionContentOutput?
    let layerArn: Swift.String?
    let layerVersionArn: Swift.String?
    let description: Swift.String?
    let createdDate: Swift.String?
    let version: Swift.Int
    let compatibleRuntimes: [LambdaClientTypes.Runtime]?
    let licenseInfo: Swift.String?
    let compatibleArchitectures: [LambdaClientTypes.Architecture]?
}

extension GetLayerVersionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case compatibleArchitectures = "CompatibleArchitectures"
        case compatibleRuntimes = "CompatibleRuntimes"
        case content = "Content"
        case createdDate = "CreatedDate"
        case description = "Description"
        case layerArn = "LayerArn"
        case layerVersionArn = "LayerVersionArn"
        case licenseInfo = "LicenseInfo"
        case version = "Version"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let contentDecoded = try containerValues.decodeIfPresent(LambdaClientTypes.LayerVersionContentOutput.self, forKey: .content)
        content = contentDecoded
        let layerArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .layerArn)
        layerArn = layerArnDecoded
        let layerVersionArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .layerVersionArn)
        layerVersionArn = layerVersionArnDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let createdDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .createdDate)
        createdDate = createdDateDecoded
        let versionDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .version) ?? 0
        version = versionDecoded
        let compatibleRuntimesContainer = try containerValues.decodeIfPresent([LambdaClientTypes.Runtime?].self, forKey: .compatibleRuntimes)
        var compatibleRuntimesDecoded0:[LambdaClientTypes.Runtime]? = nil
        if let compatibleRuntimesContainer = compatibleRuntimesContainer {
            compatibleRuntimesDecoded0 = [LambdaClientTypes.Runtime]()
            for string0 in compatibleRuntimesContainer {
                if let string0 = string0 {
                    compatibleRuntimesDecoded0?.append(string0)
                }
            }
        }
        compatibleRuntimes = compatibleRuntimesDecoded0
        let licenseInfoDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .licenseInfo)
        licenseInfo = licenseInfoDecoded
        let compatibleArchitecturesContainer = try containerValues.decodeIfPresent([LambdaClientTypes.Architecture?].self, forKey: .compatibleArchitectures)
        var compatibleArchitecturesDecoded0:[LambdaClientTypes.Architecture]? = nil
        if let compatibleArchitecturesContainer = compatibleArchitecturesContainer {
            compatibleArchitecturesDecoded0 = [LambdaClientTypes.Architecture]()
            for string0 in compatibleArchitecturesContainer {
                if let string0 = string0 {
                    compatibleArchitecturesDecoded0?.append(string0)
                }
            }
        }
        compatibleArchitectures = compatibleArchitecturesDecoded0
    }
}
