// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension MediaConnectClientTypes {
    /// A single track or stream of media that contains video, audio, or ancillary data. After you add a media stream to a flow, you can associate it with sources and outputs on that flow, as long as they use the CDI protocol or the ST 2110 JPEG XS protocol. Each source or output can consist of one or many media streams.
    public struct MediaStream: Swift.Equatable {
        /// Attributes that are related to the media stream.
        public var attributes: MediaConnectClientTypes.MediaStreamAttributes?
        /// The sample rate for the stream. This value is measured in Hz.
        public var clockRate: Swift.Int?
        /// A description that can help you quickly identify what your media stream is used for.
        public var description: Swift.String?
        /// The format type number (sometimes referred to as RTP payload type) of the media stream. MediaConnect assigns this value to the media stream. For ST 2110 JPEG XS outputs, you need to provide this value to the receiver.
        /// This member is required.
        public var fmt: Swift.Int?
        /// A unique identifier for the media stream.
        /// This member is required.
        public var mediaStreamId: Swift.Int?
        /// A name that helps you distinguish one media stream from another.
        /// This member is required.
        public var mediaStreamName: Swift.String?
        /// The type of media stream.
        /// This member is required.
        public var mediaStreamType: MediaConnectClientTypes.MediaStreamType?
        /// The resolution of the video.
        public var videoFormat: Swift.String?

        public init (
            attributes: MediaConnectClientTypes.MediaStreamAttributes? = nil,
            clockRate: Swift.Int? = nil,
            description: Swift.String? = nil,
            fmt: Swift.Int? = nil,
            mediaStreamId: Swift.Int? = nil,
            mediaStreamName: Swift.String? = nil,
            mediaStreamType: MediaConnectClientTypes.MediaStreamType? = nil,
            videoFormat: Swift.String? = nil
        )
        {
            self.attributes = attributes
            self.clockRate = clockRate
            self.description = description
            self.fmt = fmt
            self.mediaStreamId = mediaStreamId
            self.mediaStreamName = mediaStreamName
            self.mediaStreamType = mediaStreamType
            self.videoFormat = videoFormat
        }
    }

}
