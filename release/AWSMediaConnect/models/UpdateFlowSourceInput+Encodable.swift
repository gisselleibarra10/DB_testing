// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension UpdateFlowSourceInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case decryption = "decryption"
        case description = "description"
        case entitlementArn = "entitlementArn"
        case ingestPort = "ingestPort"
        case maxBitrate = "maxBitrate"
        case maxLatency = "maxLatency"
        case maxSyncBuffer = "maxSyncBuffer"
        case mediaStreamSourceConfigurations = "mediaStreamSourceConfigurations"
        case minLatency = "minLatency"
        case `protocol` = "protocol"
        case senderControlPort = "senderControlPort"
        case senderIpAddress = "senderIpAddress"
        case sourceListenerAddress = "sourceListenerAddress"
        case sourceListenerPort = "sourceListenerPort"
        case streamId = "streamId"
        case vpcInterfaceName = "vpcInterfaceName"
        case whitelistCidr = "whitelistCidr"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let decryption = self.decryption {
            try encodeContainer.encode(decryption, forKey: .decryption)
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let entitlementArn = self.entitlementArn {
            try encodeContainer.encode(entitlementArn, forKey: .entitlementArn)
        }
        if let ingestPort = self.ingestPort {
            try encodeContainer.encode(ingestPort, forKey: .ingestPort)
        }
        if let maxBitrate = self.maxBitrate {
            try encodeContainer.encode(maxBitrate, forKey: .maxBitrate)
        }
        if let maxLatency = self.maxLatency {
            try encodeContainer.encode(maxLatency, forKey: .maxLatency)
        }
        if let maxSyncBuffer = self.maxSyncBuffer {
            try encodeContainer.encode(maxSyncBuffer, forKey: .maxSyncBuffer)
        }
        if let mediaStreamSourceConfigurations = mediaStreamSourceConfigurations {
            var mediaStreamSourceConfigurationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .mediaStreamSourceConfigurations)
            for __listofmediastreamsourceconfigurationrequest0 in mediaStreamSourceConfigurations {
                try mediaStreamSourceConfigurationsContainer.encode(__listofmediastreamsourceconfigurationrequest0)
            }
        }
        if let minLatency = self.minLatency {
            try encodeContainer.encode(minLatency, forKey: .minLatency)
        }
        if let `protocol` = self.`protocol` {
            try encodeContainer.encode(`protocol`.rawValue, forKey: .`protocol`)
        }
        if let senderControlPort = self.senderControlPort {
            try encodeContainer.encode(senderControlPort, forKey: .senderControlPort)
        }
        if let senderIpAddress = self.senderIpAddress {
            try encodeContainer.encode(senderIpAddress, forKey: .senderIpAddress)
        }
        if let sourceListenerAddress = self.sourceListenerAddress {
            try encodeContainer.encode(sourceListenerAddress, forKey: .sourceListenerAddress)
        }
        if let sourceListenerPort = self.sourceListenerPort {
            try encodeContainer.encode(sourceListenerPort, forKey: .sourceListenerPort)
        }
        if let streamId = self.streamId {
            try encodeContainer.encode(streamId, forKey: .streamId)
        }
        if let vpcInterfaceName = self.vpcInterfaceName {
            try encodeContainer.encode(vpcInterfaceName, forKey: .vpcInterfaceName)
        }
        if let whitelistCidr = self.whitelistCidr {
            try encodeContainer.encode(whitelistCidr, forKey: .whitelistCidr)
        }
    }
}
