// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension MediaConnectClientTypes.Source: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dataTransferSubscriberFeePercent = "dataTransferSubscriberFeePercent"
        case decryption = "decryption"
        case description = "description"
        case entitlementArn = "entitlementArn"
        case ingestIp = "ingestIp"
        case ingestPort = "ingestPort"
        case mediaStreamSourceConfigurations = "mediaStreamSourceConfigurations"
        case name = "name"
        case senderControlPort = "senderControlPort"
        case senderIpAddress = "senderIpAddress"
        case sourceArn = "sourceArn"
        case transport = "transport"
        case vpcInterfaceName = "vpcInterfaceName"
        case whitelistCidr = "whitelistCidr"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dataTransferSubscriberFeePercent = self.dataTransferSubscriberFeePercent {
            try encodeContainer.encode(dataTransferSubscriberFeePercent, forKey: .dataTransferSubscriberFeePercent)
        }
        if let decryption = self.decryption {
            try encodeContainer.encode(decryption, forKey: .decryption)
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let entitlementArn = self.entitlementArn {
            try encodeContainer.encode(entitlementArn, forKey: .entitlementArn)
        }
        if let ingestIp = self.ingestIp {
            try encodeContainer.encode(ingestIp, forKey: .ingestIp)
        }
        if let ingestPort = self.ingestPort {
            try encodeContainer.encode(ingestPort, forKey: .ingestPort)
        }
        if let mediaStreamSourceConfigurations = mediaStreamSourceConfigurations {
            var mediaStreamSourceConfigurationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .mediaStreamSourceConfigurations)
            for __listofmediastreamsourceconfiguration0 in mediaStreamSourceConfigurations {
                try mediaStreamSourceConfigurationsContainer.encode(__listofmediastreamsourceconfiguration0)
            }
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let senderControlPort = self.senderControlPort {
            try encodeContainer.encode(senderControlPort, forKey: .senderControlPort)
        }
        if let senderIpAddress = self.senderIpAddress {
            try encodeContainer.encode(senderIpAddress, forKey: .senderIpAddress)
        }
        if let sourceArn = self.sourceArn {
            try encodeContainer.encode(sourceArn, forKey: .sourceArn)
        }
        if let transport = self.transport {
            try encodeContainer.encode(transport, forKey: .transport)
        }
        if let vpcInterfaceName = self.vpcInterfaceName {
            try encodeContainer.encode(vpcInterfaceName, forKey: .vpcInterfaceName)
        }
        if let whitelistCidr = self.whitelistCidr {
            try encodeContainer.encode(whitelistCidr, forKey: .whitelistCidr)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dataTransferSubscriberFeePercentDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .dataTransferSubscriberFeePercent)
        dataTransferSubscriberFeePercent = dataTransferSubscriberFeePercentDecoded
        let decryptionDecoded = try containerValues.decodeIfPresent(MediaConnectClientTypes.Encryption.self, forKey: .decryption)
        decryption = decryptionDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let entitlementArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .entitlementArn)
        entitlementArn = entitlementArnDecoded
        let ingestIpDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ingestIp)
        ingestIp = ingestIpDecoded
        let ingestPortDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .ingestPort)
        ingestPort = ingestPortDecoded
        let mediaStreamSourceConfigurationsContainer = try containerValues.decodeIfPresent([MediaConnectClientTypes.MediaStreamSourceConfiguration?].self, forKey: .mediaStreamSourceConfigurations)
        var mediaStreamSourceConfigurationsDecoded0:[MediaConnectClientTypes.MediaStreamSourceConfiguration]? = nil
        if let mediaStreamSourceConfigurationsContainer = mediaStreamSourceConfigurationsContainer {
            mediaStreamSourceConfigurationsDecoded0 = [MediaConnectClientTypes.MediaStreamSourceConfiguration]()
            for structure0 in mediaStreamSourceConfigurationsContainer {
                if let structure0 = structure0 {
                    mediaStreamSourceConfigurationsDecoded0?.append(structure0)
                }
            }
        }
        mediaStreamSourceConfigurations = mediaStreamSourceConfigurationsDecoded0
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let senderControlPortDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .senderControlPort)
        senderControlPort = senderControlPortDecoded
        let senderIpAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .senderIpAddress)
        senderIpAddress = senderIpAddressDecoded
        let sourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceArn)
        sourceArn = sourceArnDecoded
        let transportDecoded = try containerValues.decodeIfPresent(MediaConnectClientTypes.Transport.self, forKey: .transport)
        transport = transportDecoded
        let vpcInterfaceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vpcInterfaceName)
        vpcInterfaceName = vpcInterfaceNameDecoded
        let whitelistCidrDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .whitelistCidr)
        whitelistCidr = whitelistCidrDecoded
    }
}
