// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct UpdateFlowSourceInputBody: Swift.Equatable {
    let decryption: MediaConnectClientTypes.UpdateEncryption?
    let description: Swift.String?
    let entitlementArn: Swift.String?
    let ingestPort: Swift.Int?
    let maxBitrate: Swift.Int?
    let maxLatency: Swift.Int?
    let maxSyncBuffer: Swift.Int?
    let mediaStreamSourceConfigurations: [MediaConnectClientTypes.MediaStreamSourceConfigurationRequest]?
    let minLatency: Swift.Int?
    let `protocol`: MediaConnectClientTypes.ModelProtocol?
    let senderControlPort: Swift.Int?
    let senderIpAddress: Swift.String?
    let sourceListenerAddress: Swift.String?
    let sourceListenerPort: Swift.Int?
    let streamId: Swift.String?
    let vpcInterfaceName: Swift.String?
    let whitelistCidr: Swift.String?
}

extension UpdateFlowSourceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case decryption = "decryption"
        case description = "description"
        case entitlementArn = "entitlementArn"
        case ingestPort = "ingestPort"
        case maxBitrate = "maxBitrate"
        case maxLatency = "maxLatency"
        case maxSyncBuffer = "maxSyncBuffer"
        case mediaStreamSourceConfigurations = "mediaStreamSourceConfigurations"
        case minLatency = "minLatency"
        case `protocol` = "protocol"
        case senderControlPort = "senderControlPort"
        case senderIpAddress = "senderIpAddress"
        case sourceListenerAddress = "sourceListenerAddress"
        case sourceListenerPort = "sourceListenerPort"
        case streamId = "streamId"
        case vpcInterfaceName = "vpcInterfaceName"
        case whitelistCidr = "whitelistCidr"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let decryptionDecoded = try containerValues.decodeIfPresent(MediaConnectClientTypes.UpdateEncryption.self, forKey: .decryption)
        decryption = decryptionDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let entitlementArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .entitlementArn)
        entitlementArn = entitlementArnDecoded
        let ingestPortDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .ingestPort)
        ingestPort = ingestPortDecoded
        let maxBitrateDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxBitrate)
        maxBitrate = maxBitrateDecoded
        let maxLatencyDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxLatency)
        maxLatency = maxLatencyDecoded
        let maxSyncBufferDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxSyncBuffer)
        maxSyncBuffer = maxSyncBufferDecoded
        let mediaStreamSourceConfigurationsContainer = try containerValues.decodeIfPresent([MediaConnectClientTypes.MediaStreamSourceConfigurationRequest?].self, forKey: .mediaStreamSourceConfigurations)
        var mediaStreamSourceConfigurationsDecoded0:[MediaConnectClientTypes.MediaStreamSourceConfigurationRequest]? = nil
        if let mediaStreamSourceConfigurationsContainer = mediaStreamSourceConfigurationsContainer {
            mediaStreamSourceConfigurationsDecoded0 = [MediaConnectClientTypes.MediaStreamSourceConfigurationRequest]()
            for structure0 in mediaStreamSourceConfigurationsContainer {
                if let structure0 = structure0 {
                    mediaStreamSourceConfigurationsDecoded0?.append(structure0)
                }
            }
        }
        mediaStreamSourceConfigurations = mediaStreamSourceConfigurationsDecoded0
        let minLatencyDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .minLatency)
        minLatency = minLatencyDecoded
        let protocolDecoded = try containerValues.decodeIfPresent(MediaConnectClientTypes.ModelProtocol.self, forKey: .protocol)
        `protocol` = protocolDecoded
        let senderControlPortDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .senderControlPort)
        senderControlPort = senderControlPortDecoded
        let senderIpAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .senderIpAddress)
        senderIpAddress = senderIpAddressDecoded
        let sourceListenerAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceListenerAddress)
        sourceListenerAddress = sourceListenerAddressDecoded
        let sourceListenerPortDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .sourceListenerPort)
        sourceListenerPort = sourceListenerPortDecoded
        let streamIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .streamId)
        streamId = streamIdDecoded
        let vpcInterfaceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vpcInterfaceName)
        vpcInterfaceName = vpcInterfaceNameDecoded
        let whitelistCidrDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .whitelistCidr)
        whitelistCidr = whitelistCidrDecoded
    }
}
