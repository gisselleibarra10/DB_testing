// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// The fields that you want to update in the output.
public struct UpdateFlowOutputInput: Swift.Equatable {
    /// The range of IP addresses that should be allowed to initiate output requests to this flow. These IP addresses should be in the form of a Classless Inter-Domain Routing (CIDR) block; for example, 10.0.0.0/16.
    public var cidrAllowList: [Swift.String]?
    /// A description of the output. This description appears only on the AWS Elemental MediaConnect console and will not be seen by the end user.
    public var description: Swift.String?
    /// The IP address where you want to send the output.
    public var destination: Swift.String?
    /// The type of key used for the encryption. If no keyType is provided, the service will use the default setting (static-key).
    public var encryption: MediaConnectClientTypes.UpdateEncryption?
    /// The flow that is associated with the output that you want to update.
    /// This member is required.
    public var flowArn: Swift.String?
    /// The maximum latency in milliseconds. This parameter applies only to RIST-based, Zixi-based, and Fujitsu-based streams.
    public var maxLatency: Swift.Int?
    /// The media streams that are associated with the output, and the parameters for those associations.
    public var mediaStreamOutputConfigurations: [MediaConnectClientTypes.MediaStreamOutputConfigurationRequest]?
    /// The minimum latency in milliseconds for SRT-based streams. In streams that use the SRT protocol, this value that you set on your MediaConnect source or output represents the minimal potential latency of that connection. The latency of the stream is set to the highest number between the sender’s minimum latency and the receiver’s minimum latency.
    public var minLatency: Swift.Int?
    /// The ARN of the output that you want to update.
    /// This member is required.
    public var outputArn: Swift.String?
    /// The port to use when content is distributed to this output.
    public var port: Swift.Int?
    /// The protocol to use for the output.
    public var `protocol`: MediaConnectClientTypes.ModelProtocol?
    /// The remote ID for the Zixi-pull stream.
    public var remoteId: Swift.String?
    /// The port that the flow uses to send outbound requests to initiate connection with the sender.
    public var senderControlPort: Swift.Int?
    /// The IP address that the flow communicates with to initiate connection with the sender.
    public var senderIpAddress: Swift.String?
    /// The smoothing latency in milliseconds for RIST, RTP, and RTP-FEC streams.
    public var smoothingLatency: Swift.Int?
    /// The stream ID that you want to use for this transport. This parameter applies only to Zixi-based streams.
    public var streamId: Swift.String?
    /// The name of the VPC interface attachment to use for this output.
    public var vpcInterfaceAttachment: MediaConnectClientTypes.VpcInterfaceAttachment?

    public init (
        cidrAllowList: [Swift.String]? = nil,
        description: Swift.String? = nil,
        destination: Swift.String? = nil,
        encryption: MediaConnectClientTypes.UpdateEncryption? = nil,
        flowArn: Swift.String? = nil,
        maxLatency: Swift.Int? = nil,
        mediaStreamOutputConfigurations: [MediaConnectClientTypes.MediaStreamOutputConfigurationRequest]? = nil,
        minLatency: Swift.Int? = nil,
        outputArn: Swift.String? = nil,
        port: Swift.Int? = nil,
        `protocol`: MediaConnectClientTypes.ModelProtocol? = nil,
        remoteId: Swift.String? = nil,
        senderControlPort: Swift.Int? = nil,
        senderIpAddress: Swift.String? = nil,
        smoothingLatency: Swift.Int? = nil,
        streamId: Swift.String? = nil,
        vpcInterfaceAttachment: MediaConnectClientTypes.VpcInterfaceAttachment? = nil
    )
    {
        self.cidrAllowList = cidrAllowList
        self.description = description
        self.destination = destination
        self.encryption = encryption
        self.flowArn = flowArn
        self.maxLatency = maxLatency
        self.mediaStreamOutputConfigurations = mediaStreamOutputConfigurations
        self.minLatency = minLatency
        self.outputArn = outputArn
        self.port = port
        self.`protocol` = `protocol`
        self.remoteId = remoteId
        self.senderControlPort = senderControlPort
        self.senderIpAddress = senderIpAddress
        self.smoothingLatency = smoothingLatency
        self.streamId = streamId
        self.vpcInterfaceAttachment = vpcInterfaceAttachment
    }
}
