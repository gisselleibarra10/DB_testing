// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension MediaConnectClientTypes {
    /// The settings for a flow entitlement.
    public struct Entitlement: Swift.Equatable {
        /// Percentage from 0-100 of the data transfer cost to be billed to the subscriber.
        public var dataTransferSubscriberFeePercent: Swift.Int?
        /// A description of the entitlement.
        public var description: Swift.String?
        /// The type of encryption that will be used on the output that is associated with this entitlement.
        public var encryption: MediaConnectClientTypes.Encryption?
        /// The ARN of the entitlement.
        /// This member is required.
        public var entitlementArn: Swift.String?
        /// An indication of whether the entitlement is enabled.
        public var entitlementStatus: MediaConnectClientTypes.EntitlementStatus?
        /// The name of the entitlement.
        /// This member is required.
        public var name: Swift.String?
        /// The AWS account IDs that you want to share your content with. The receiving accounts (subscribers) will be allowed to create their own flow using your content as the source.
        /// This member is required.
        public var subscribers: [Swift.String]?

        public init (
            dataTransferSubscriberFeePercent: Swift.Int? = nil,
            description: Swift.String? = nil,
            encryption: MediaConnectClientTypes.Encryption? = nil,
            entitlementArn: Swift.String? = nil,
            entitlementStatus: MediaConnectClientTypes.EntitlementStatus? = nil,
            name: Swift.String? = nil,
            subscribers: [Swift.String]? = nil
        )
        {
            self.dataTransferSubscriberFeePercent = dataTransferSubscriberFeePercent
            self.description = description
            self.encryption = encryption
            self.entitlementArn = entitlementArn
            self.entitlementStatus = entitlementStatus
            self.name = name
            self.subscribers = subscribers
        }
    }

}
