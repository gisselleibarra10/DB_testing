// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension MediaConnectClientTypes.MediaStreamOutputConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case destinationConfigurations = "destinationConfigurations"
        case encodingName = "encodingName"
        case encodingParameters = "encodingParameters"
        case mediaStreamName = "mediaStreamName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let destinationConfigurations = destinationConfigurations {
            var destinationConfigurationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .destinationConfigurations)
            for __listofdestinationconfiguration0 in destinationConfigurations {
                try destinationConfigurationsContainer.encode(__listofdestinationconfiguration0)
            }
        }
        if let encodingName = self.encodingName {
            try encodeContainer.encode(encodingName.rawValue, forKey: .encodingName)
        }
        if let encodingParameters = self.encodingParameters {
            try encodeContainer.encode(encodingParameters, forKey: .encodingParameters)
        }
        if let mediaStreamName = self.mediaStreamName {
            try encodeContainer.encode(mediaStreamName, forKey: .mediaStreamName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let destinationConfigurationsContainer = try containerValues.decodeIfPresent([MediaConnectClientTypes.DestinationConfiguration?].self, forKey: .destinationConfigurations)
        var destinationConfigurationsDecoded0:[MediaConnectClientTypes.DestinationConfiguration]? = nil
        if let destinationConfigurationsContainer = destinationConfigurationsContainer {
            destinationConfigurationsDecoded0 = [MediaConnectClientTypes.DestinationConfiguration]()
            for structure0 in destinationConfigurationsContainer {
                if let structure0 = structure0 {
                    destinationConfigurationsDecoded0?.append(structure0)
                }
            }
        }
        destinationConfigurations = destinationConfigurationsDecoded0
        let encodingNameDecoded = try containerValues.decodeIfPresent(MediaConnectClientTypes.EncodingName.self, forKey: .encodingName)
        encodingName = encodingNameDecoded
        let encodingParametersDecoded = try containerValues.decodeIfPresent(MediaConnectClientTypes.EncodingParameters.self, forKey: .encodingParameters)
        encodingParameters = encodingParametersDecoded
        let mediaStreamNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .mediaStreamName)
        mediaStreamName = mediaStreamNameDecoded
    }
}
