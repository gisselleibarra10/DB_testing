// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateFlowInputBody: Swift.Equatable {
    let availabilityZone: Swift.String?
    let entitlements: [MediaConnectClientTypes.GrantEntitlementRequest]?
    let mediaStreams: [MediaConnectClientTypes.AddMediaStreamRequest]?
    let name: Swift.String?
    let outputs: [MediaConnectClientTypes.AddOutputRequest]?
    let source: MediaConnectClientTypes.SetSourceRequest?
    let sourceFailoverConfig: MediaConnectClientTypes.FailoverConfig?
    let sources: [MediaConnectClientTypes.SetSourceRequest]?
    let vpcInterfaces: [MediaConnectClientTypes.VpcInterfaceRequest]?
    let maintenance: MediaConnectClientTypes.AddMaintenance?
}

extension CreateFlowInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case availabilityZone = "availabilityZone"
        case entitlements = "entitlements"
        case maintenance = "maintenance"
        case mediaStreams = "mediaStreams"
        case name = "name"
        case outputs = "outputs"
        case source = "source"
        case sourceFailoverConfig = "sourceFailoverConfig"
        case sources = "sources"
        case vpcInterfaces = "vpcInterfaces"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let availabilityZoneDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .availabilityZone)
        availabilityZone = availabilityZoneDecoded
        let entitlementsContainer = try containerValues.decodeIfPresent([MediaConnectClientTypes.GrantEntitlementRequest?].self, forKey: .entitlements)
        var entitlementsDecoded0:[MediaConnectClientTypes.GrantEntitlementRequest]? = nil
        if let entitlementsContainer = entitlementsContainer {
            entitlementsDecoded0 = [MediaConnectClientTypes.GrantEntitlementRequest]()
            for structure0 in entitlementsContainer {
                if let structure0 = structure0 {
                    entitlementsDecoded0?.append(structure0)
                }
            }
        }
        entitlements = entitlementsDecoded0
        let mediaStreamsContainer = try containerValues.decodeIfPresent([MediaConnectClientTypes.AddMediaStreamRequest?].self, forKey: .mediaStreams)
        var mediaStreamsDecoded0:[MediaConnectClientTypes.AddMediaStreamRequest]? = nil
        if let mediaStreamsContainer = mediaStreamsContainer {
            mediaStreamsDecoded0 = [MediaConnectClientTypes.AddMediaStreamRequest]()
            for structure0 in mediaStreamsContainer {
                if let structure0 = structure0 {
                    mediaStreamsDecoded0?.append(structure0)
                }
            }
        }
        mediaStreams = mediaStreamsDecoded0
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let outputsContainer = try containerValues.decodeIfPresent([MediaConnectClientTypes.AddOutputRequest?].self, forKey: .outputs)
        var outputsDecoded0:[MediaConnectClientTypes.AddOutputRequest]? = nil
        if let outputsContainer = outputsContainer {
            outputsDecoded0 = [MediaConnectClientTypes.AddOutputRequest]()
            for structure0 in outputsContainer {
                if let structure0 = structure0 {
                    outputsDecoded0?.append(structure0)
                }
            }
        }
        outputs = outputsDecoded0
        let sourceDecoded = try containerValues.decodeIfPresent(MediaConnectClientTypes.SetSourceRequest.self, forKey: .source)
        source = sourceDecoded
        let sourceFailoverConfigDecoded = try containerValues.decodeIfPresent(MediaConnectClientTypes.FailoverConfig.self, forKey: .sourceFailoverConfig)
        sourceFailoverConfig = sourceFailoverConfigDecoded
        let sourcesContainer = try containerValues.decodeIfPresent([MediaConnectClientTypes.SetSourceRequest?].self, forKey: .sources)
        var sourcesDecoded0:[MediaConnectClientTypes.SetSourceRequest]? = nil
        if let sourcesContainer = sourcesContainer {
            sourcesDecoded0 = [MediaConnectClientTypes.SetSourceRequest]()
            for structure0 in sourcesContainer {
                if let structure0 = structure0 {
                    sourcesDecoded0?.append(structure0)
                }
            }
        }
        sources = sourcesDecoded0
        let vpcInterfacesContainer = try containerValues.decodeIfPresent([MediaConnectClientTypes.VpcInterfaceRequest?].self, forKey: .vpcInterfaces)
        var vpcInterfacesDecoded0:[MediaConnectClientTypes.VpcInterfaceRequest]? = nil
        if let vpcInterfacesContainer = vpcInterfacesContainer {
            vpcInterfacesDecoded0 = [MediaConnectClientTypes.VpcInterfaceRequest]()
            for structure0 in vpcInterfacesContainer {
                if let structure0 = structure0 {
                    vpcInterfacesDecoded0?.append(structure0)
                }
            }
        }
        vpcInterfaces = vpcInterfacesDecoded0
        let maintenanceDecoded = try containerValues.decodeIfPresent(MediaConnectClientTypes.AddMaintenance.self, forKey: .maintenance)
        maintenance = maintenanceDecoded
    }
}
