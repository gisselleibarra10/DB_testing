// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct UpdateFlowOutputInputBody: Swift.Equatable {
    let cidrAllowList: [Swift.String]?
    let description: Swift.String?
    let destination: Swift.String?
    let encryption: MediaConnectClientTypes.UpdateEncryption?
    let maxLatency: Swift.Int?
    let mediaStreamOutputConfigurations: [MediaConnectClientTypes.MediaStreamOutputConfigurationRequest]?
    let minLatency: Swift.Int?
    let port: Swift.Int?
    let `protocol`: MediaConnectClientTypes.ModelProtocol?
    let remoteId: Swift.String?
    let senderControlPort: Swift.Int?
    let senderIpAddress: Swift.String?
    let smoothingLatency: Swift.Int?
    let streamId: Swift.String?
    let vpcInterfaceAttachment: MediaConnectClientTypes.VpcInterfaceAttachment?
}

extension UpdateFlowOutputInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cidrAllowList = "cidrAllowList"
        case description = "description"
        case destination = "destination"
        case encryption = "encryption"
        case maxLatency = "maxLatency"
        case mediaStreamOutputConfigurations = "mediaStreamOutputConfigurations"
        case minLatency = "minLatency"
        case port = "port"
        case `protocol` = "protocol"
        case remoteId = "remoteId"
        case senderControlPort = "senderControlPort"
        case senderIpAddress = "senderIpAddress"
        case smoothingLatency = "smoothingLatency"
        case streamId = "streamId"
        case vpcInterfaceAttachment = "vpcInterfaceAttachment"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let cidrAllowListContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .cidrAllowList)
        var cidrAllowListDecoded0:[Swift.String]? = nil
        if let cidrAllowListContainer = cidrAllowListContainer {
            cidrAllowListDecoded0 = [Swift.String]()
            for string0 in cidrAllowListContainer {
                if let string0 = string0 {
                    cidrAllowListDecoded0?.append(string0)
                }
            }
        }
        cidrAllowList = cidrAllowListDecoded0
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let destinationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .destination)
        destination = destinationDecoded
        let encryptionDecoded = try containerValues.decodeIfPresent(MediaConnectClientTypes.UpdateEncryption.self, forKey: .encryption)
        encryption = encryptionDecoded
        let maxLatencyDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxLatency)
        maxLatency = maxLatencyDecoded
        let mediaStreamOutputConfigurationsContainer = try containerValues.decodeIfPresent([MediaConnectClientTypes.MediaStreamOutputConfigurationRequest?].self, forKey: .mediaStreamOutputConfigurations)
        var mediaStreamOutputConfigurationsDecoded0:[MediaConnectClientTypes.MediaStreamOutputConfigurationRequest]? = nil
        if let mediaStreamOutputConfigurationsContainer = mediaStreamOutputConfigurationsContainer {
            mediaStreamOutputConfigurationsDecoded0 = [MediaConnectClientTypes.MediaStreamOutputConfigurationRequest]()
            for structure0 in mediaStreamOutputConfigurationsContainer {
                if let structure0 = structure0 {
                    mediaStreamOutputConfigurationsDecoded0?.append(structure0)
                }
            }
        }
        mediaStreamOutputConfigurations = mediaStreamOutputConfigurationsDecoded0
        let minLatencyDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .minLatency)
        minLatency = minLatencyDecoded
        let portDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .port)
        port = portDecoded
        let protocolDecoded = try containerValues.decodeIfPresent(MediaConnectClientTypes.ModelProtocol.self, forKey: .protocol)
        `protocol` = protocolDecoded
        let remoteIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .remoteId)
        remoteId = remoteIdDecoded
        let senderControlPortDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .senderControlPort)
        senderControlPort = senderControlPortDecoded
        let senderIpAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .senderIpAddress)
        senderIpAddress = senderIpAddressDecoded
        let smoothingLatencyDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .smoothingLatency)
        smoothingLatency = smoothingLatencyDecoded
        let streamIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .streamId)
        streamId = streamIdDecoded
        let vpcInterfaceAttachmentDecoded = try containerValues.decodeIfPresent(MediaConnectClientTypes.VpcInterfaceAttachment.self, forKey: .vpcInterfaceAttachment)
        vpcInterfaceAttachment = vpcInterfaceAttachmentDecoded
    }
}
