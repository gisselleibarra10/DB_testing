// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension MediaConnectClientTypes {
    /// The settings for the source of the flow.
    public struct SetSourceRequest: Swift.Equatable {
        /// The type of encryption that is used on the content ingested from this source.
        public var decryption: MediaConnectClientTypes.Encryption?
        /// A description for the source. This value is not used or seen outside of the current AWS Elemental MediaConnect account.
        public var description: Swift.String?
        /// The ARN of the entitlement that allows you to subscribe to this flow. The entitlement is set by the flow originator, and the ARN is generated as part of the originator's flow.
        public var entitlementArn: Swift.String?
        /// The port that the flow will be listening on for incoming content.
        public var ingestPort: Swift.Int?
        /// The smoothing max bitrate for RIST, RTP, and RTP-FEC streams.
        public var maxBitrate: Swift.Int?
        /// The maximum latency in milliseconds. This parameter applies only to RIST-based, Zixi-based, and Fujitsu-based streams.
        public var maxLatency: Swift.Int?
        /// The size of the buffer (in milliseconds) to use to sync incoming source data.
        public var maxSyncBuffer: Swift.Int?
        /// The media streams that are associated with the source, and the parameters for those associations.
        public var mediaStreamSourceConfigurations: [MediaConnectClientTypes.MediaStreamSourceConfigurationRequest]?
        /// The minimum latency in milliseconds for SRT-based streams. In streams that use the SRT protocol, this value that you set on your MediaConnect source or output represents the minimal potential latency of that connection. The latency of the stream is set to the highest number between the sender’s minimum latency and the receiver’s minimum latency.
        public var minLatency: Swift.Int?
        /// The name of the source.
        public var name: Swift.String?
        /// The protocol that is used by the source.
        public var `protocol`: MediaConnectClientTypes.ModelProtocol?
        /// The port that the flow uses to send outbound requests to initiate connection with the sender.
        public var senderControlPort: Swift.Int?
        /// The IP address that the flow communicates with to initiate connection with the sender.
        public var senderIpAddress: Swift.String?
        /// Source IP or domain name for SRT-caller protocol.
        public var sourceListenerAddress: Swift.String?
        /// Source port for SRT-caller protocol.
        public var sourceListenerPort: Swift.Int?
        /// The stream ID that you want to use for this transport. This parameter applies only to Zixi-based streams.
        public var streamId: Swift.String?
        /// The name of the VPC interface to use for this source.
        public var vpcInterfaceName: Swift.String?
        /// The range of IP addresses that should be allowed to contribute content to your source. These IP addresses should be in the form of a Classless Inter-Domain Routing (CIDR) block; for example, 10.0.0.0/16.
        public var whitelistCidr: Swift.String?

        public init (
            decryption: MediaConnectClientTypes.Encryption? = nil,
            description: Swift.String? = nil,
            entitlementArn: Swift.String? = nil,
            ingestPort: Swift.Int? = nil,
            maxBitrate: Swift.Int? = nil,
            maxLatency: Swift.Int? = nil,
            maxSyncBuffer: Swift.Int? = nil,
            mediaStreamSourceConfigurations: [MediaConnectClientTypes.MediaStreamSourceConfigurationRequest]? = nil,
            minLatency: Swift.Int? = nil,
            name: Swift.String? = nil,
            `protocol`: MediaConnectClientTypes.ModelProtocol? = nil,
            senderControlPort: Swift.Int? = nil,
            senderIpAddress: Swift.String? = nil,
            sourceListenerAddress: Swift.String? = nil,
            sourceListenerPort: Swift.Int? = nil,
            streamId: Swift.String? = nil,
            vpcInterfaceName: Swift.String? = nil,
            whitelistCidr: Swift.String? = nil
        )
        {
            self.decryption = decryption
            self.description = description
            self.entitlementArn = entitlementArn
            self.ingestPort = ingestPort
            self.maxBitrate = maxBitrate
            self.maxLatency = maxLatency
            self.maxSyncBuffer = maxSyncBuffer
            self.mediaStreamSourceConfigurations = mediaStreamSourceConfigurations
            self.minLatency = minLatency
            self.name = name
            self.`protocol` = `protocol`
            self.senderControlPort = senderControlPort
            self.senderIpAddress = senderIpAddress
            self.sourceListenerAddress = sourceListenerAddress
            self.sourceListenerPort = sourceListenerPort
            self.streamId = streamId
            self.vpcInterfaceName = vpcInterfaceName
            self.whitelistCidr = whitelistCidr
        }
    }

}
