// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension MediaConnectClientTypes.FailoverConfig: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case failoverMode = "failoverMode"
        case recoveryWindow = "recoveryWindow"
        case sourcePriority = "sourcePriority"
        case state = "state"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let failoverMode = self.failoverMode {
            try encodeContainer.encode(failoverMode.rawValue, forKey: .failoverMode)
        }
        if let recoveryWindow = self.recoveryWindow {
            try encodeContainer.encode(recoveryWindow, forKey: .recoveryWindow)
        }
        if let sourcePriority = self.sourcePriority {
            try encodeContainer.encode(sourcePriority, forKey: .sourcePriority)
        }
        if let state = self.state {
            try encodeContainer.encode(state.rawValue, forKey: .state)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let failoverModeDecoded = try containerValues.decodeIfPresent(MediaConnectClientTypes.FailoverMode.self, forKey: .failoverMode)
        failoverMode = failoverModeDecoded
        let recoveryWindowDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .recoveryWindow)
        recoveryWindow = recoveryWindowDecoded
        let sourcePriorityDecoded = try containerValues.decodeIfPresent(MediaConnectClientTypes.SourcePriority.self, forKey: .sourcePriority)
        sourcePriority = sourcePriorityDecoded
        let stateDecoded = try containerValues.decodeIfPresent(MediaConnectClientTypes.State.self, forKey: .state)
        state = stateDecoded
    }
}
