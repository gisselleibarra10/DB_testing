// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension TextractClientTypes.ExpenseDocument: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case expenseIndex = "ExpenseIndex"
        case lineItemGroups = "LineItemGroups"
        case summaryFields = "SummaryFields"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let expenseIndex = self.expenseIndex {
            try encodeContainer.encode(expenseIndex, forKey: .expenseIndex)
        }
        if let lineItemGroups = lineItemGroups {
            var lineItemGroupsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .lineItemGroups)
            for lineitemgrouplist0 in lineItemGroups {
                try lineItemGroupsContainer.encode(lineitemgrouplist0)
            }
        }
        if let summaryFields = summaryFields {
            var summaryFieldsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .summaryFields)
            for expensefieldlist0 in summaryFields {
                try summaryFieldsContainer.encode(expensefieldlist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let expenseIndexDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .expenseIndex)
        expenseIndex = expenseIndexDecoded
        let summaryFieldsContainer = try containerValues.decodeIfPresent([TextractClientTypes.ExpenseField?].self, forKey: .summaryFields)
        var summaryFieldsDecoded0:[TextractClientTypes.ExpenseField]? = nil
        if let summaryFieldsContainer = summaryFieldsContainer {
            summaryFieldsDecoded0 = [TextractClientTypes.ExpenseField]()
            for structure0 in summaryFieldsContainer {
                if let structure0 = structure0 {
                    summaryFieldsDecoded0?.append(structure0)
                }
            }
        }
        summaryFields = summaryFieldsDecoded0
        let lineItemGroupsContainer = try containerValues.decodeIfPresent([TextractClientTypes.LineItemGroup?].self, forKey: .lineItemGroups)
        var lineItemGroupsDecoded0:[TextractClientTypes.LineItemGroup]? = nil
        if let lineItemGroupsContainer = lineItemGroupsContainer {
            lineItemGroupsDecoded0 = [TextractClientTypes.LineItemGroup]()
            for structure0 in lineItemGroupsContainer {
                if let structure0 = structure0 {
                    lineItemGroupsDecoded0?.append(structure0)
                }
            }
        }
        lineItemGroups = lineItemGroupsDecoded0
    }
}
