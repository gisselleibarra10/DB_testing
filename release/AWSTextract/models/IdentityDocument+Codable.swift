// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension TextractClientTypes.IdentityDocument: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case documentIndex = "DocumentIndex"
        case identityDocumentFields = "IdentityDocumentFields"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let documentIndex = self.documentIndex {
            try encodeContainer.encode(documentIndex, forKey: .documentIndex)
        }
        if let identityDocumentFields = identityDocumentFields {
            var identityDocumentFieldsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .identityDocumentFields)
            for identitydocumentfieldlist0 in identityDocumentFields {
                try identityDocumentFieldsContainer.encode(identitydocumentfieldlist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let documentIndexDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .documentIndex)
        documentIndex = documentIndexDecoded
        let identityDocumentFieldsContainer = try containerValues.decodeIfPresent([TextractClientTypes.IdentityDocumentField?].self, forKey: .identityDocumentFields)
        var identityDocumentFieldsDecoded0:[TextractClientTypes.IdentityDocumentField]? = nil
        if let identityDocumentFieldsContainer = identityDocumentFieldsContainer {
            identityDocumentFieldsDecoded0 = [TextractClientTypes.IdentityDocumentField]()
            for structure0 in identityDocumentFieldsContainer {
                if let structure0 = structure0 {
                    identityDocumentFieldsDecoded0?.append(structure0)
                }
            }
        }
        identityDocumentFields = identityDocumentFieldsDecoded0
    }
}
