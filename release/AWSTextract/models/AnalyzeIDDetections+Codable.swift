// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension TextractClientTypes.AnalyzeIDDetections: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case confidence = "Confidence"
        case normalizedValue = "NormalizedValue"
        case text = "Text"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let confidence = self.confidence {
            try encodeContainer.encode(confidence, forKey: .confidence)
        }
        if let normalizedValue = self.normalizedValue {
            try encodeContainer.encode(normalizedValue, forKey: .normalizedValue)
        }
        if let text = self.text {
            try encodeContainer.encode(text, forKey: .text)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let textDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .text)
        text = textDecoded
        let normalizedValueDecoded = try containerValues.decodeIfPresent(TextractClientTypes.NormalizedValue.self, forKey: .normalizedValue)
        normalizedValue = normalizedValueDecoded
        let confidenceDecoded = try containerValues.decodeIfPresent(Swift.Float.self, forKey: .confidence)
        confidence = confidenceDecoded
    }
}
