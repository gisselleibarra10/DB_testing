// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension TextractClientTypes.Query: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case alias = "Alias"
        case pages = "Pages"
        case text = "Text"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let alias = self.alias {
            try encodeContainer.encode(alias, forKey: .alias)
        }
        if let pages = pages {
            var pagesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .pages)
            for querypages0 in pages {
                try pagesContainer.encode(querypages0)
            }
        }
        if let text = self.text {
            try encodeContainer.encode(text, forKey: .text)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let textDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .text)
        text = textDecoded
        let aliasDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .alias)
        alias = aliasDecoded
        let pagesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .pages)
        var pagesDecoded0:[Swift.String]? = nil
        if let pagesContainer = pagesContainer {
            pagesDecoded0 = [Swift.String]()
            for string0 in pagesContainer {
                if let string0 = string0 {
                    pagesDecoded0?.append(string0)
                }
            }
        }
        pages = pagesDecoded0
    }
}
