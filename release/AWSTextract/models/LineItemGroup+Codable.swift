// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension TextractClientTypes.LineItemGroup: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case lineItemGroupIndex = "LineItemGroupIndex"
        case lineItems = "LineItems"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let lineItemGroupIndex = self.lineItemGroupIndex {
            try encodeContainer.encode(lineItemGroupIndex, forKey: .lineItemGroupIndex)
        }
        if let lineItems = lineItems {
            var lineItemsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .lineItems)
            for lineitemlist0 in lineItems {
                try lineItemsContainer.encode(lineitemlist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let lineItemGroupIndexDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .lineItemGroupIndex)
        lineItemGroupIndex = lineItemGroupIndexDecoded
        let lineItemsContainer = try containerValues.decodeIfPresent([TextractClientTypes.LineItemFields?].self, forKey: .lineItems)
        var lineItemsDecoded0:[TextractClientTypes.LineItemFields]? = nil
        if let lineItemsContainer = lineItemsContainer {
            lineItemsDecoded0 = [TextractClientTypes.LineItemFields]()
            for structure0 in lineItemsContainer {
                if let structure0 = structure0 {
                    lineItemsDecoded0?.append(structure0)
                }
            }
        }
        lineItems = lineItemsDecoded0
    }
}
