// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension TextractClientTypes {
    public enum BlockType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case cell
        case keyValueSet
        case line
        case mergedCell
        case page
        case query
        case queryResult
        case selectionElement
        case table
        case title
        case word
        case sdkUnknown(Swift.String)

        public static var allCases: [BlockType] {
            return [
                .cell,
                .keyValueSet,
                .line,
                .mergedCell,
                .page,
                .query,
                .queryResult,
                .selectionElement,
                .table,
                .title,
                .word,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .cell: return "CELL"
            case .keyValueSet: return "KEY_VALUE_SET"
            case .line: return "LINE"
            case .mergedCell: return "MERGED_CELL"
            case .page: return "PAGE"
            case .query: return "QUERY"
            case .queryResult: return "QUERY_RESULT"
            case .selectionElement: return "SELECTION_ELEMENT"
            case .table: return "TABLE"
            case .title: return "TITLE"
            case .word: return "WORD"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = BlockType(rawValue: rawValue) ?? BlockType.sdkUnknown(rawValue)
        }
    }
}
