// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct AnalyzeExpenseOutputResponseBody: Swift.Equatable {
    let documentMetadata: TextractClientTypes.DocumentMetadata?
    let expenseDocuments: [TextractClientTypes.ExpenseDocument]?
}

extension AnalyzeExpenseOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case documentMetadata = "DocumentMetadata"
        case expenseDocuments = "ExpenseDocuments"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let documentMetadataDecoded = try containerValues.decodeIfPresent(TextractClientTypes.DocumentMetadata.self, forKey: .documentMetadata)
        documentMetadata = documentMetadataDecoded
        let expenseDocumentsContainer = try containerValues.decodeIfPresent([TextractClientTypes.ExpenseDocument?].self, forKey: .expenseDocuments)
        var expenseDocumentsDecoded0:[TextractClientTypes.ExpenseDocument]? = nil
        if let expenseDocumentsContainer = expenseDocumentsContainer {
            expenseDocumentsDecoded0 = [TextractClientTypes.ExpenseDocument]()
            for structure0 in expenseDocumentsContainer {
                if let structure0 = structure0 {
                    expenseDocumentsDecoded0?.append(structure0)
                }
            }
        }
        expenseDocuments = expenseDocumentsDecoded0
    }
}
