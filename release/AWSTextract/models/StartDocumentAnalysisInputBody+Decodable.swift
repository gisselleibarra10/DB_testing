// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct StartDocumentAnalysisInputBody: Swift.Equatable {
    let documentLocation: TextractClientTypes.DocumentLocation?
    let featureTypes: [TextractClientTypes.FeatureType]?
    let clientRequestToken: Swift.String?
    let jobTag: Swift.String?
    let notificationChannel: TextractClientTypes.NotificationChannel?
    let outputConfig: TextractClientTypes.OutputConfig?
    let kMSKeyId: Swift.String?
    let queriesConfig: TextractClientTypes.QueriesConfig?
}

extension StartDocumentAnalysisInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientRequestToken = "ClientRequestToken"
        case documentLocation = "DocumentLocation"
        case featureTypes = "FeatureTypes"
        case jobTag = "JobTag"
        case kMSKeyId = "KMSKeyId"
        case notificationChannel = "NotificationChannel"
        case outputConfig = "OutputConfig"
        case queriesConfig = "QueriesConfig"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let documentLocationDecoded = try containerValues.decodeIfPresent(TextractClientTypes.DocumentLocation.self, forKey: .documentLocation)
        documentLocation = documentLocationDecoded
        let featureTypesContainer = try containerValues.decodeIfPresent([TextractClientTypes.FeatureType?].self, forKey: .featureTypes)
        var featureTypesDecoded0:[TextractClientTypes.FeatureType]? = nil
        if let featureTypesContainer = featureTypesContainer {
            featureTypesDecoded0 = [TextractClientTypes.FeatureType]()
            for string0 in featureTypesContainer {
                if let string0 = string0 {
                    featureTypesDecoded0?.append(string0)
                }
            }
        }
        featureTypes = featureTypesDecoded0
        let clientRequestTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientRequestToken)
        clientRequestToken = clientRequestTokenDecoded
        let jobTagDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobTag)
        jobTag = jobTagDecoded
        let notificationChannelDecoded = try containerValues.decodeIfPresent(TextractClientTypes.NotificationChannel.self, forKey: .notificationChannel)
        notificationChannel = notificationChannelDecoded
        let outputConfigDecoded = try containerValues.decodeIfPresent(TextractClientTypes.OutputConfig.self, forKey: .outputConfig)
        outputConfig = outputConfigDecoded
        let kMSKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kMSKeyId)
        kMSKeyId = kMSKeyIdDecoded
        let queriesConfigDecoded = try containerValues.decodeIfPresent(TextractClientTypes.QueriesConfig.self, forKey: .queriesConfig)
        queriesConfig = queriesConfigDecoded
    }
}
