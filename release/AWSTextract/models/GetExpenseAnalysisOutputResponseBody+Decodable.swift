// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetExpenseAnalysisOutputResponseBody: Swift.Equatable {
    let documentMetadata: TextractClientTypes.DocumentMetadata?
    let jobStatus: TextractClientTypes.JobStatus?
    let nextToken: Swift.String?
    let expenseDocuments: [TextractClientTypes.ExpenseDocument]?
    let warnings: [TextractClientTypes.Warning]?
    let statusMessage: Swift.String?
    let analyzeExpenseModelVersion: Swift.String?
}

extension GetExpenseAnalysisOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case analyzeExpenseModelVersion = "AnalyzeExpenseModelVersion"
        case documentMetadata = "DocumentMetadata"
        case expenseDocuments = "ExpenseDocuments"
        case jobStatus = "JobStatus"
        case nextToken = "NextToken"
        case statusMessage = "StatusMessage"
        case warnings = "Warnings"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let documentMetadataDecoded = try containerValues.decodeIfPresent(TextractClientTypes.DocumentMetadata.self, forKey: .documentMetadata)
        documentMetadata = documentMetadataDecoded
        let jobStatusDecoded = try containerValues.decodeIfPresent(TextractClientTypes.JobStatus.self, forKey: .jobStatus)
        jobStatus = jobStatusDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let expenseDocumentsContainer = try containerValues.decodeIfPresent([TextractClientTypes.ExpenseDocument?].self, forKey: .expenseDocuments)
        var expenseDocumentsDecoded0:[TextractClientTypes.ExpenseDocument]? = nil
        if let expenseDocumentsContainer = expenseDocumentsContainer {
            expenseDocumentsDecoded0 = [TextractClientTypes.ExpenseDocument]()
            for structure0 in expenseDocumentsContainer {
                if let structure0 = structure0 {
                    expenseDocumentsDecoded0?.append(structure0)
                }
            }
        }
        expenseDocuments = expenseDocumentsDecoded0
        let warningsContainer = try containerValues.decodeIfPresent([TextractClientTypes.Warning?].self, forKey: .warnings)
        var warningsDecoded0:[TextractClientTypes.Warning]? = nil
        if let warningsContainer = warningsContainer {
            warningsDecoded0 = [TextractClientTypes.Warning]()
            for structure0 in warningsContainer {
                if let structure0 = structure0 {
                    warningsDecoded0?.append(structure0)
                }
            }
        }
        warnings = warningsDecoded0
        let statusMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .statusMessage)
        statusMessage = statusMessageDecoded
        let analyzeExpenseModelVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .analyzeExpenseModelVersion)
        analyzeExpenseModelVersion = analyzeExpenseModelVersionDecoded
    }
}
