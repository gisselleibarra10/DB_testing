// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SecurityHubClientTypes.StandardsControl: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case controlId = "ControlId"
        case controlStatus = "ControlStatus"
        case controlStatusUpdatedAt = "ControlStatusUpdatedAt"
        case description = "Description"
        case disabledReason = "DisabledReason"
        case relatedRequirements = "RelatedRequirements"
        case remediationUrl = "RemediationUrl"
        case severityRating = "SeverityRating"
        case standardsControlArn = "StandardsControlArn"
        case title = "Title"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let controlId = self.controlId {
            try encodeContainer.encode(controlId, forKey: .controlId)
        }
        if let controlStatus = self.controlStatus {
            try encodeContainer.encode(controlStatus.rawValue, forKey: .controlStatus)
        }
        if let controlStatusUpdatedAt = self.controlStatusUpdatedAt {
            try encodeContainer.encode(controlStatusUpdatedAt.timeIntervalSince1970, forKey: .controlStatusUpdatedAt)
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let disabledReason = self.disabledReason {
            try encodeContainer.encode(disabledReason, forKey: .disabledReason)
        }
        if let relatedRequirements = relatedRequirements {
            var relatedRequirementsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .relatedRequirements)
            for relatedrequirementslist0 in relatedRequirements {
                try relatedRequirementsContainer.encode(relatedrequirementslist0)
            }
        }
        if let remediationUrl = self.remediationUrl {
            try encodeContainer.encode(remediationUrl, forKey: .remediationUrl)
        }
        if let severityRating = self.severityRating {
            try encodeContainer.encode(severityRating.rawValue, forKey: .severityRating)
        }
        if let standardsControlArn = self.standardsControlArn {
            try encodeContainer.encode(standardsControlArn, forKey: .standardsControlArn)
        }
        if let title = self.title {
            try encodeContainer.encode(title, forKey: .title)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let standardsControlArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .standardsControlArn)
        standardsControlArn = standardsControlArnDecoded
        let controlStatusDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.ControlStatus.self, forKey: .controlStatus)
        controlStatus = controlStatusDecoded
        let disabledReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .disabledReason)
        disabledReason = disabledReasonDecoded
        let controlStatusUpdatedAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .controlStatusUpdatedAt)
        controlStatusUpdatedAt = controlStatusUpdatedAtDecoded
        let controlIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .controlId)
        controlId = controlIdDecoded
        let titleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .title)
        title = titleDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let remediationUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .remediationUrl)
        remediationUrl = remediationUrlDecoded
        let severityRatingDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.SeverityRating.self, forKey: .severityRating)
        severityRating = severityRatingDecoded
        let relatedRequirementsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .relatedRequirements)
        var relatedRequirementsDecoded0:[Swift.String]? = nil
        if let relatedRequirementsContainer = relatedRequirementsContainer {
            relatedRequirementsDecoded0 = [Swift.String]()
            for string0 in relatedRequirementsContainer {
                if let string0 = string0 {
                    relatedRequirementsDecoded0?.append(string0)
                }
            }
        }
        relatedRequirements = relatedRequirementsDecoded0
    }
}
