// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SecurityHubClientTypes.AwsSsmComplianceSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case complianceType = "ComplianceType"
        case compliantCriticalCount = "CompliantCriticalCount"
        case compliantHighCount = "CompliantHighCount"
        case compliantInformationalCount = "CompliantInformationalCount"
        case compliantLowCount = "CompliantLowCount"
        case compliantMediumCount = "CompliantMediumCount"
        case compliantUnspecifiedCount = "CompliantUnspecifiedCount"
        case executionType = "ExecutionType"
        case nonCompliantCriticalCount = "NonCompliantCriticalCount"
        case nonCompliantHighCount = "NonCompliantHighCount"
        case nonCompliantInformationalCount = "NonCompliantInformationalCount"
        case nonCompliantLowCount = "NonCompliantLowCount"
        case nonCompliantMediumCount = "NonCompliantMediumCount"
        case nonCompliantUnspecifiedCount = "NonCompliantUnspecifiedCount"
        case overallSeverity = "OverallSeverity"
        case patchBaselineId = "PatchBaselineId"
        case patchGroup = "PatchGroup"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let complianceType = self.complianceType {
            try encodeContainer.encode(complianceType, forKey: .complianceType)
        }
        if compliantCriticalCount != 0 {
            try encodeContainer.encode(compliantCriticalCount, forKey: .compliantCriticalCount)
        }
        if compliantHighCount != 0 {
            try encodeContainer.encode(compliantHighCount, forKey: .compliantHighCount)
        }
        if compliantInformationalCount != 0 {
            try encodeContainer.encode(compliantInformationalCount, forKey: .compliantInformationalCount)
        }
        if compliantLowCount != 0 {
            try encodeContainer.encode(compliantLowCount, forKey: .compliantLowCount)
        }
        if compliantMediumCount != 0 {
            try encodeContainer.encode(compliantMediumCount, forKey: .compliantMediumCount)
        }
        if compliantUnspecifiedCount != 0 {
            try encodeContainer.encode(compliantUnspecifiedCount, forKey: .compliantUnspecifiedCount)
        }
        if let executionType = self.executionType {
            try encodeContainer.encode(executionType, forKey: .executionType)
        }
        if nonCompliantCriticalCount != 0 {
            try encodeContainer.encode(nonCompliantCriticalCount, forKey: .nonCompliantCriticalCount)
        }
        if nonCompliantHighCount != 0 {
            try encodeContainer.encode(nonCompliantHighCount, forKey: .nonCompliantHighCount)
        }
        if nonCompliantInformationalCount != 0 {
            try encodeContainer.encode(nonCompliantInformationalCount, forKey: .nonCompliantInformationalCount)
        }
        if nonCompliantLowCount != 0 {
            try encodeContainer.encode(nonCompliantLowCount, forKey: .nonCompliantLowCount)
        }
        if nonCompliantMediumCount != 0 {
            try encodeContainer.encode(nonCompliantMediumCount, forKey: .nonCompliantMediumCount)
        }
        if nonCompliantUnspecifiedCount != 0 {
            try encodeContainer.encode(nonCompliantUnspecifiedCount, forKey: .nonCompliantUnspecifiedCount)
        }
        if let overallSeverity = self.overallSeverity {
            try encodeContainer.encode(overallSeverity, forKey: .overallSeverity)
        }
        if let patchBaselineId = self.patchBaselineId {
            try encodeContainer.encode(patchBaselineId, forKey: .patchBaselineId)
        }
        if let patchGroup = self.patchGroup {
            try encodeContainer.encode(patchGroup, forKey: .patchGroup)
        }
        if let status = self.status {
            try encodeContainer.encode(status, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .status)
        status = statusDecoded
        let compliantCriticalCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .compliantCriticalCount) ?? 0
        compliantCriticalCount = compliantCriticalCountDecoded
        let compliantHighCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .compliantHighCount) ?? 0
        compliantHighCount = compliantHighCountDecoded
        let compliantMediumCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .compliantMediumCount) ?? 0
        compliantMediumCount = compliantMediumCountDecoded
        let executionTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .executionType)
        executionType = executionTypeDecoded
        let nonCompliantCriticalCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .nonCompliantCriticalCount) ?? 0
        nonCompliantCriticalCount = nonCompliantCriticalCountDecoded
        let compliantInformationalCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .compliantInformationalCount) ?? 0
        compliantInformationalCount = compliantInformationalCountDecoded
        let nonCompliantInformationalCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .nonCompliantInformationalCount) ?? 0
        nonCompliantInformationalCount = nonCompliantInformationalCountDecoded
        let compliantUnspecifiedCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .compliantUnspecifiedCount) ?? 0
        compliantUnspecifiedCount = compliantUnspecifiedCountDecoded
        let nonCompliantLowCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .nonCompliantLowCount) ?? 0
        nonCompliantLowCount = nonCompliantLowCountDecoded
        let nonCompliantHighCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .nonCompliantHighCount) ?? 0
        nonCompliantHighCount = nonCompliantHighCountDecoded
        let compliantLowCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .compliantLowCount) ?? 0
        compliantLowCount = compliantLowCountDecoded
        let complianceTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .complianceType)
        complianceType = complianceTypeDecoded
        let patchBaselineIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .patchBaselineId)
        patchBaselineId = patchBaselineIdDecoded
        let overallSeverityDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .overallSeverity)
        overallSeverity = overallSeverityDecoded
        let nonCompliantMediumCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .nonCompliantMediumCount) ?? 0
        nonCompliantMediumCount = nonCompliantMediumCountDecoded
        let nonCompliantUnspecifiedCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .nonCompliantUnspecifiedCount) ?? 0
        nonCompliantUnspecifiedCount = nonCompliantUnspecifiedCountDecoded
        let patchGroupDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .patchGroup)
        patchGroup = patchGroupDecoded
    }
}
