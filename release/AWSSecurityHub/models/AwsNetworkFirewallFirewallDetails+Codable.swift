// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SecurityHubClientTypes.AwsNetworkFirewallFirewallDetails: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deleteProtection = "DeleteProtection"
        case description = "Description"
        case firewallArn = "FirewallArn"
        case firewallId = "FirewallId"
        case firewallName = "FirewallName"
        case firewallPolicyArn = "FirewallPolicyArn"
        case firewallPolicyChangeProtection = "FirewallPolicyChangeProtection"
        case subnetChangeProtection = "SubnetChangeProtection"
        case subnetMappings = "SubnetMappings"
        case vpcId = "VpcId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if deleteProtection != false {
            try encodeContainer.encode(deleteProtection, forKey: .deleteProtection)
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let firewallArn = self.firewallArn {
            try encodeContainer.encode(firewallArn, forKey: .firewallArn)
        }
        if let firewallId = self.firewallId {
            try encodeContainer.encode(firewallId, forKey: .firewallId)
        }
        if let firewallName = self.firewallName {
            try encodeContainer.encode(firewallName, forKey: .firewallName)
        }
        if let firewallPolicyArn = self.firewallPolicyArn {
            try encodeContainer.encode(firewallPolicyArn, forKey: .firewallPolicyArn)
        }
        if firewallPolicyChangeProtection != false {
            try encodeContainer.encode(firewallPolicyChangeProtection, forKey: .firewallPolicyChangeProtection)
        }
        if subnetChangeProtection != false {
            try encodeContainer.encode(subnetChangeProtection, forKey: .subnetChangeProtection)
        }
        if let subnetMappings = subnetMappings {
            var subnetMappingsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .subnetMappings)
            for awsnetworkfirewallfirewallsubnetmappingslist0 in subnetMappings {
                try subnetMappingsContainer.encode(awsnetworkfirewallfirewallsubnetmappingslist0)
            }
        }
        if let vpcId = self.vpcId {
            try encodeContainer.encode(vpcId, forKey: .vpcId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deleteProtectionDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .deleteProtection) ?? false
        deleteProtection = deleteProtectionDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let firewallArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .firewallArn)
        firewallArn = firewallArnDecoded
        let firewallIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .firewallId)
        firewallId = firewallIdDecoded
        let firewallNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .firewallName)
        firewallName = firewallNameDecoded
        let firewallPolicyArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .firewallPolicyArn)
        firewallPolicyArn = firewallPolicyArnDecoded
        let firewallPolicyChangeProtectionDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .firewallPolicyChangeProtection) ?? false
        firewallPolicyChangeProtection = firewallPolicyChangeProtectionDecoded
        let subnetChangeProtectionDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .subnetChangeProtection) ?? false
        subnetChangeProtection = subnetChangeProtectionDecoded
        let subnetMappingsContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.AwsNetworkFirewallFirewallSubnetMappingsDetails?].self, forKey: .subnetMappings)
        var subnetMappingsDecoded0:[SecurityHubClientTypes.AwsNetworkFirewallFirewallSubnetMappingsDetails]? = nil
        if let subnetMappingsContainer = subnetMappingsContainer {
            subnetMappingsDecoded0 = [SecurityHubClientTypes.AwsNetworkFirewallFirewallSubnetMappingsDetails]()
            for structure0 in subnetMappingsContainer {
                if let structure0 = structure0 {
                    subnetMappingsDecoded0?.append(structure0)
                }
            }
        }
        subnetMappings = subnetMappingsDecoded0
        let vpcIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vpcId)
        vpcId = vpcIdDecoded
    }
}
