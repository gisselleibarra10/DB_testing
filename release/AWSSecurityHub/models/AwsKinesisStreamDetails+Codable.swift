// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SecurityHubClientTypes.AwsKinesisStreamDetails: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "Arn"
        case name = "Name"
        case retentionPeriodHours = "RetentionPeriodHours"
        case shardCount = "ShardCount"
        case streamEncryption = "StreamEncryption"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = self.arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if retentionPeriodHours != 0 {
            try encodeContainer.encode(retentionPeriodHours, forKey: .retentionPeriodHours)
        }
        if shardCount != 0 {
            try encodeContainer.encode(shardCount, forKey: .shardCount)
        }
        if let streamEncryption = self.streamEncryption {
            try encodeContainer.encode(streamEncryption, forKey: .streamEncryption)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let streamEncryptionDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsKinesisStreamStreamEncryptionDetails.self, forKey: .streamEncryption)
        streamEncryption = streamEncryptionDecoded
        let shardCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .shardCount) ?? 0
        shardCount = shardCountDecoded
        let retentionPeriodHoursDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .retentionPeriodHours) ?? 0
        retentionPeriodHours = retentionPeriodHoursDecoded
    }
}
