// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SecurityHubClientTypes.AwsRedshiftClusterClusterParameterGroup: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterParameterStatusList = "ClusterParameterStatusList"
        case parameterApplyStatus = "ParameterApplyStatus"
        case parameterGroupName = "ParameterGroupName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clusterParameterStatusList = clusterParameterStatusList {
            var clusterParameterStatusListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .clusterParameterStatusList)
            for awsredshiftclusterclusterparameterstatuslist0 in clusterParameterStatusList {
                try clusterParameterStatusListContainer.encode(awsredshiftclusterclusterparameterstatuslist0)
            }
        }
        if let parameterApplyStatus = self.parameterApplyStatus {
            try encodeContainer.encode(parameterApplyStatus, forKey: .parameterApplyStatus)
        }
        if let parameterGroupName = self.parameterGroupName {
            try encodeContainer.encode(parameterGroupName, forKey: .parameterGroupName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clusterParameterStatusListContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.AwsRedshiftClusterClusterParameterStatus?].self, forKey: .clusterParameterStatusList)
        var clusterParameterStatusListDecoded0:[SecurityHubClientTypes.AwsRedshiftClusterClusterParameterStatus]? = nil
        if let clusterParameterStatusListContainer = clusterParameterStatusListContainer {
            clusterParameterStatusListDecoded0 = [SecurityHubClientTypes.AwsRedshiftClusterClusterParameterStatus]()
            for structure0 in clusterParameterStatusListContainer {
                if let structure0 = structure0 {
                    clusterParameterStatusListDecoded0?.append(structure0)
                }
            }
        }
        clusterParameterStatusList = clusterParameterStatusListDecoded0
        let parameterApplyStatusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .parameterApplyStatus)
        parameterApplyStatus = parameterApplyStatusDecoded
        let parameterGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .parameterGroupName)
        parameterGroupName = parameterGroupNameDecoded
    }
}
