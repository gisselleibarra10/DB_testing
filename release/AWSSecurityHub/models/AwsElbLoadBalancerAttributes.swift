// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension SecurityHubClientTypes {
    /// Contains attributes for the load balancer.
    public struct AwsElbLoadBalancerAttributes: Swift.Equatable {
        /// Information about the access log configuration for the load balancer. If the access log is enabled, the load balancer captures detailed information about all requests. It delivers the information to a specified S3 bucket.
        public var accessLog: SecurityHubClientTypes.AwsElbLoadBalancerAccessLog?
        /// Any additional attributes for a load balancer.
        public var additionalAttributes: [SecurityHubClientTypes.AwsElbLoadBalancerAdditionalAttribute]?
        /// Information about the connection draining configuration for the load balancer. If connection draining is enabled, the load balancer allows existing requests to complete before it shifts traffic away from a deregistered or unhealthy instance.
        public var connectionDraining: SecurityHubClientTypes.AwsElbLoadBalancerConnectionDraining?
        /// Connection settings for the load balancer. If an idle timeout is configured, the load balancer allows connections to remain idle for the specified duration. When a connection is idle, no data is sent over the connection.
        public var connectionSettings: SecurityHubClientTypes.AwsElbLoadBalancerConnectionSettings?
        /// Cross-zone load balancing settings for the load balancer. If cross-zone load balancing is enabled, the load balancer routes the request traffic evenly across all instances regardless of the Availability Zones.
        public var crossZoneLoadBalancing: SecurityHubClientTypes.AwsElbLoadBalancerCrossZoneLoadBalancing?

        public init (
            accessLog: SecurityHubClientTypes.AwsElbLoadBalancerAccessLog? = nil,
            additionalAttributes: [SecurityHubClientTypes.AwsElbLoadBalancerAdditionalAttribute]? = nil,
            connectionDraining: SecurityHubClientTypes.AwsElbLoadBalancerConnectionDraining? = nil,
            connectionSettings: SecurityHubClientTypes.AwsElbLoadBalancerConnectionSettings? = nil,
            crossZoneLoadBalancing: SecurityHubClientTypes.AwsElbLoadBalancerCrossZoneLoadBalancing? = nil
        )
        {
            self.accessLog = accessLog
            self.additionalAttributes = additionalAttributes
            self.connectionDraining = connectionDraining
            self.connectionSettings = connectionSettings
            self.crossZoneLoadBalancing = crossZoneLoadBalancing
        }
    }

}
