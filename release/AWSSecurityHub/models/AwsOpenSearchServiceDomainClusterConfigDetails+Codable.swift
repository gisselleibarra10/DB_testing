// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SecurityHubClientTypes.AwsOpenSearchServiceDomainClusterConfigDetails: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dedicatedMasterCount = "DedicatedMasterCount"
        case dedicatedMasterEnabled = "DedicatedMasterEnabled"
        case dedicatedMasterType = "DedicatedMasterType"
        case instanceCount = "InstanceCount"
        case instanceType = "InstanceType"
        case warmCount = "WarmCount"
        case warmEnabled = "WarmEnabled"
        case warmType = "WarmType"
        case zoneAwarenessConfig = "ZoneAwarenessConfig"
        case zoneAwarenessEnabled = "ZoneAwarenessEnabled"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if dedicatedMasterCount != 0 {
            try encodeContainer.encode(dedicatedMasterCount, forKey: .dedicatedMasterCount)
        }
        if dedicatedMasterEnabled != false {
            try encodeContainer.encode(dedicatedMasterEnabled, forKey: .dedicatedMasterEnabled)
        }
        if let dedicatedMasterType = self.dedicatedMasterType {
            try encodeContainer.encode(dedicatedMasterType, forKey: .dedicatedMasterType)
        }
        if instanceCount != 0 {
            try encodeContainer.encode(instanceCount, forKey: .instanceCount)
        }
        if let instanceType = self.instanceType {
            try encodeContainer.encode(instanceType, forKey: .instanceType)
        }
        if warmCount != 0 {
            try encodeContainer.encode(warmCount, forKey: .warmCount)
        }
        if warmEnabled != false {
            try encodeContainer.encode(warmEnabled, forKey: .warmEnabled)
        }
        if let warmType = self.warmType {
            try encodeContainer.encode(warmType, forKey: .warmType)
        }
        if let zoneAwarenessConfig = self.zoneAwarenessConfig {
            try encodeContainer.encode(zoneAwarenessConfig, forKey: .zoneAwarenessConfig)
        }
        if zoneAwarenessEnabled != false {
            try encodeContainer.encode(zoneAwarenessEnabled, forKey: .zoneAwarenessEnabled)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instanceCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .instanceCount) ?? 0
        instanceCount = instanceCountDecoded
        let warmEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .warmEnabled) ?? false
        warmEnabled = warmEnabledDecoded
        let warmCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .warmCount) ?? 0
        warmCount = warmCountDecoded
        let dedicatedMasterEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .dedicatedMasterEnabled) ?? false
        dedicatedMasterEnabled = dedicatedMasterEnabledDecoded
        let zoneAwarenessConfigDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsOpenSearchServiceDomainClusterConfigZoneAwarenessConfigDetails.self, forKey: .zoneAwarenessConfig)
        zoneAwarenessConfig = zoneAwarenessConfigDecoded
        let dedicatedMasterCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .dedicatedMasterCount) ?? 0
        dedicatedMasterCount = dedicatedMasterCountDecoded
        let instanceTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceType)
        instanceType = instanceTypeDecoded
        let warmTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .warmType)
        warmType = warmTypeDecoded
        let zoneAwarenessEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .zoneAwarenessEnabled) ?? false
        zoneAwarenessEnabled = zoneAwarenessEnabledDecoded
        let dedicatedMasterTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dedicatedMasterType)
        dedicatedMasterType = dedicatedMasterTypeDecoded
    }
}
