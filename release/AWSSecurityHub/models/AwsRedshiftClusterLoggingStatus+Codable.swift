// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SecurityHubClientTypes.AwsRedshiftClusterLoggingStatus: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bucketName = "BucketName"
        case lastFailureMessage = "LastFailureMessage"
        case lastFailureTime = "LastFailureTime"
        case lastSuccessfulDeliveryTime = "LastSuccessfulDeliveryTime"
        case loggingEnabled = "LoggingEnabled"
        case s3KeyPrefix = "S3KeyPrefix"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let bucketName = self.bucketName {
            try encodeContainer.encode(bucketName, forKey: .bucketName)
        }
        if let lastFailureMessage = self.lastFailureMessage {
            try encodeContainer.encode(lastFailureMessage, forKey: .lastFailureMessage)
        }
        if let lastFailureTime = self.lastFailureTime {
            try encodeContainer.encode(lastFailureTime, forKey: .lastFailureTime)
        }
        if let lastSuccessfulDeliveryTime = self.lastSuccessfulDeliveryTime {
            try encodeContainer.encode(lastSuccessfulDeliveryTime, forKey: .lastSuccessfulDeliveryTime)
        }
        if loggingEnabled != false {
            try encodeContainer.encode(loggingEnabled, forKey: .loggingEnabled)
        }
        if let s3KeyPrefix = self.s3KeyPrefix {
            try encodeContainer.encode(s3KeyPrefix, forKey: .s3KeyPrefix)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let bucketNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .bucketName)
        bucketName = bucketNameDecoded
        let lastFailureMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastFailureMessage)
        lastFailureMessage = lastFailureMessageDecoded
        let lastFailureTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastFailureTime)
        lastFailureTime = lastFailureTimeDecoded
        let lastSuccessfulDeliveryTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastSuccessfulDeliveryTime)
        lastSuccessfulDeliveryTime = lastSuccessfulDeliveryTimeDecoded
        let loggingEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .loggingEnabled) ?? false
        loggingEnabled = loggingEnabledDecoded
        let s3KeyPrefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .s3KeyPrefix)
        s3KeyPrefix = s3KeyPrefixDecoded
    }
}
