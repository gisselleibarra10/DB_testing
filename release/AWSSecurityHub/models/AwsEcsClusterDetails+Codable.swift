// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SecurityHubClientTypes.AwsEcsClusterDetails: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case activeServicesCount = "ActiveServicesCount"
        case capacityProviders = "CapacityProviders"
        case clusterArn = "ClusterArn"
        case clusterName = "ClusterName"
        case clusterSettings = "ClusterSettings"
        case configuration = "Configuration"
        case defaultCapacityProviderStrategy = "DefaultCapacityProviderStrategy"
        case registeredContainerInstancesCount = "RegisteredContainerInstancesCount"
        case runningTasksCount = "RunningTasksCount"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if activeServicesCount != 0 {
            try encodeContainer.encode(activeServicesCount, forKey: .activeServicesCount)
        }
        if let capacityProviders = capacityProviders {
            var capacityProvidersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .capacityProviders)
            for nonemptystringlist0 in capacityProviders {
                try capacityProvidersContainer.encode(nonemptystringlist0)
            }
        }
        if let clusterArn = self.clusterArn {
            try encodeContainer.encode(clusterArn, forKey: .clusterArn)
        }
        if let clusterName = self.clusterName {
            try encodeContainer.encode(clusterName, forKey: .clusterName)
        }
        if let clusterSettings = clusterSettings {
            var clusterSettingsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .clusterSettings)
            for awsecsclusterclustersettingslist0 in clusterSettings {
                try clusterSettingsContainer.encode(awsecsclusterclustersettingslist0)
            }
        }
        if let configuration = self.configuration {
            try encodeContainer.encode(configuration, forKey: .configuration)
        }
        if let defaultCapacityProviderStrategy = defaultCapacityProviderStrategy {
            var defaultCapacityProviderStrategyContainer = encodeContainer.nestedUnkeyedContainer(forKey: .defaultCapacityProviderStrategy)
            for awsecsclusterdefaultcapacityproviderstrategylist0 in defaultCapacityProviderStrategy {
                try defaultCapacityProviderStrategyContainer.encode(awsecsclusterdefaultcapacityproviderstrategylist0)
            }
        }
        if registeredContainerInstancesCount != 0 {
            try encodeContainer.encode(registeredContainerInstancesCount, forKey: .registeredContainerInstancesCount)
        }
        if runningTasksCount != 0 {
            try encodeContainer.encode(runningTasksCount, forKey: .runningTasksCount)
        }
        if let status = self.status {
            try encodeContainer.encode(status, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clusterArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterArn)
        clusterArn = clusterArnDecoded
        let activeServicesCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .activeServicesCount) ?? 0
        activeServicesCount = activeServicesCountDecoded
        let capacityProvidersContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .capacityProviders)
        var capacityProvidersDecoded0:[Swift.String]? = nil
        if let capacityProvidersContainer = capacityProvidersContainer {
            capacityProvidersDecoded0 = [Swift.String]()
            for string0 in capacityProvidersContainer {
                if let string0 = string0 {
                    capacityProvidersDecoded0?.append(string0)
                }
            }
        }
        capacityProviders = capacityProvidersDecoded0
        let clusterSettingsContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.AwsEcsClusterClusterSettingsDetails?].self, forKey: .clusterSettings)
        var clusterSettingsDecoded0:[SecurityHubClientTypes.AwsEcsClusterClusterSettingsDetails]? = nil
        if let clusterSettingsContainer = clusterSettingsContainer {
            clusterSettingsDecoded0 = [SecurityHubClientTypes.AwsEcsClusterClusterSettingsDetails]()
            for structure0 in clusterSettingsContainer {
                if let structure0 = structure0 {
                    clusterSettingsDecoded0?.append(structure0)
                }
            }
        }
        clusterSettings = clusterSettingsDecoded0
        let configurationDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsEcsClusterConfigurationDetails.self, forKey: .configuration)
        configuration = configurationDecoded
        let defaultCapacityProviderStrategyContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.AwsEcsClusterDefaultCapacityProviderStrategyDetails?].self, forKey: .defaultCapacityProviderStrategy)
        var defaultCapacityProviderStrategyDecoded0:[SecurityHubClientTypes.AwsEcsClusterDefaultCapacityProviderStrategyDetails]? = nil
        if let defaultCapacityProviderStrategyContainer = defaultCapacityProviderStrategyContainer {
            defaultCapacityProviderStrategyDecoded0 = [SecurityHubClientTypes.AwsEcsClusterDefaultCapacityProviderStrategyDetails]()
            for structure0 in defaultCapacityProviderStrategyContainer {
                if let structure0 = structure0 {
                    defaultCapacityProviderStrategyDecoded0?.append(structure0)
                }
            }
        }
        defaultCapacityProviderStrategy = defaultCapacityProviderStrategyDecoded0
        let clusterNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterName)
        clusterName = clusterNameDecoded
        let registeredContainerInstancesCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .registeredContainerInstancesCount) ?? 0
        registeredContainerInstancesCount = registeredContainerInstancesCountDecoded
        let runningTasksCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .runningTasksCount) ?? 0
        runningTasksCount = runningTasksCountDecoded
        let statusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .status)
        status = statusDecoded
    }
}
