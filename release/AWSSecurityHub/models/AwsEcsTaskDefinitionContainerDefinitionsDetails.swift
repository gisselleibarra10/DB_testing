// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension SecurityHubClientTypes {
    /// A container definition that describes a container in the task.
    public struct AwsEcsTaskDefinitionContainerDefinitionsDetails: Swift.Equatable {
        /// The command that is passed to the container.
        public var command: [Swift.String]?
        /// The number of CPU units reserved for the container.
        public var cpu: Swift.Int
        /// The dependencies that are defined for container startup and shutdown.
        public var dependsOn: [SecurityHubClientTypes.AwsEcsTaskDefinitionContainerDefinitionsDependsOnDetails]?
        /// Whether to disable networking within the container.
        public var disableNetworking: Swift.Bool
        /// A list of DNS search domains that are presented to the container.
        public var dnsSearchDomains: [Swift.String]?
        /// A list of DNS servers that are presented to the container.
        public var dnsServers: [Swift.String]?
        /// A key-value map of labels to add to the container.
        public var dockerLabels: [Swift.String:Swift.String]?
        /// A list of strings to provide custom labels for SELinux and AppArmor multi-level security systems.
        public var dockerSecurityOptions: [Swift.String]?
        /// The entry point that is passed to the container.
        public var entryPoint: [Swift.String]?
        /// The environment variables to pass to a container.
        public var environment: [SecurityHubClientTypes.AwsEcsTaskDefinitionContainerDefinitionsEnvironmentDetails]?
        /// A list of files containing the environment variables to pass to a container.
        public var environmentFiles: [SecurityHubClientTypes.AwsEcsTaskDefinitionContainerDefinitionsEnvironmentFilesDetails]?
        /// Whether the container is essential. All tasks must have at least one essential container.
        public var essential: Swift.Bool
        /// A list of hostnames and IP address mappings to append to the /etc/hosts file on the container.
        public var extraHosts: [SecurityHubClientTypes.AwsEcsTaskDefinitionContainerDefinitionsExtraHostsDetails]?
        /// The FireLens configuration for the container. Specifies and configures a log router for container logs.
        public var firelensConfiguration: SecurityHubClientTypes.AwsEcsTaskDefinitionContainerDefinitionsFirelensConfigurationDetails?
        /// The container health check command and associated configuration parameters for the container.
        public var healthCheck: SecurityHubClientTypes.AwsEcsTaskDefinitionContainerDefinitionsHealthCheckDetails?
        /// The hostname to use for the container.
        public var hostname: Swift.String?
        /// The image used to start the container.
        public var image: Swift.String?
        /// If set to true, then containerized applications can be deployed that require stdin or a tty to be allocated.
        public var interactive: Swift.Bool
        /// A list of links for the container in the form  container_name:alias . Allows containers to communicate with each other without the need for port mappings.
        public var links: [Swift.String]?
        /// Linux-specific modifications that are applied to the container, such as Linux kernel capabilities.
        public var linuxParameters: SecurityHubClientTypes.AwsEcsTaskDefinitionContainerDefinitionsLinuxParametersDetails?
        /// The log configuration specification for the container.
        public var logConfiguration: SecurityHubClientTypes.AwsEcsTaskDefinitionContainerDefinitionsLogConfigurationDetails?
        /// The amount (in MiB) of memory to present to the container. If the container attempts to exceed the memory specified here, the container is shut down. The total amount of memory reserved for all containers within a task must be lower than the task memory value, if one is specified.
        public var memory: Swift.Int
        /// The soft limit (in MiB) of memory to reserve for the container.
        public var memoryReservation: Swift.Int
        /// The mount points for the data volumes in the container.
        public var mountPoints: [SecurityHubClientTypes.AwsEcsTaskDefinitionContainerDefinitionsMountPointsDetails]?
        /// The name of the container.
        public var name: Swift.String?
        /// The list of port mappings for the container.
        public var portMappings: [SecurityHubClientTypes.AwsEcsTaskDefinitionContainerDefinitionsPortMappingsDetails]?
        /// Whether the container is given elevated privileges on the host container instance. The elevated privileges are similar to the root user.
        public var privileged: Swift.Bool
        /// Whether to allocate a TTY to the container.
        public var pseudoTerminal: Swift.Bool
        /// Whether the container is given read-only access to its root file system.
        public var readonlyRootFilesystem: Swift.Bool
        /// The private repository authentication credentials to use.
        public var repositoryCredentials: SecurityHubClientTypes.AwsEcsTaskDefinitionContainerDefinitionsRepositoryCredentialsDetails?
        /// The type and amount of a resource to assign to a container. The only supported resource is a GPU.
        public var resourceRequirements: [SecurityHubClientTypes.AwsEcsTaskDefinitionContainerDefinitionsResourceRequirementsDetails]?
        /// The secrets to pass to the container.
        public var secrets: [SecurityHubClientTypes.AwsEcsTaskDefinitionContainerDefinitionsSecretsDetails]?
        /// The number of seconds to wait before giving up on resolving dependencies for a container.
        public var startTimeout: Swift.Int
        /// The number of seconds to wait before the container is stopped if it doesn't shut down normally on its own.
        public var stopTimeout: Swift.Int
        /// A list of namespaced kernel parameters to set in the container.
        public var systemControls: [SecurityHubClientTypes.AwsEcsTaskDefinitionContainerDefinitionsSystemControlsDetails]?
        /// A list of ulimits to set in the container.
        public var ulimits: [SecurityHubClientTypes.AwsEcsTaskDefinitionContainerDefinitionsUlimitsDetails]?
        /// The user to use inside the container. The value can use one of the following formats.
        ///
        /// * user
        ///
        /// * user : group
        ///
        /// * uid
        ///
        /// * uid : gid
        ///
        /// * user : gid
        ///
        /// * uid : group
        public var user: Swift.String?
        /// Data volumes to mount from another container.
        public var volumesFrom: [SecurityHubClientTypes.AwsEcsTaskDefinitionContainerDefinitionsVolumesFromDetails]?
        /// The working directory in which to run commands inside the container.
        public var workingDirectory: Swift.String?

        public init (
            command: [Swift.String]? = nil,
            cpu: Swift.Int = 0,
            dependsOn: [SecurityHubClientTypes.AwsEcsTaskDefinitionContainerDefinitionsDependsOnDetails]? = nil,
            disableNetworking: Swift.Bool = false,
            dnsSearchDomains: [Swift.String]? = nil,
            dnsServers: [Swift.String]? = nil,
            dockerLabels: [Swift.String:Swift.String]? = nil,
            dockerSecurityOptions: [Swift.String]? = nil,
            entryPoint: [Swift.String]? = nil,
            environment: [SecurityHubClientTypes.AwsEcsTaskDefinitionContainerDefinitionsEnvironmentDetails]? = nil,
            environmentFiles: [SecurityHubClientTypes.AwsEcsTaskDefinitionContainerDefinitionsEnvironmentFilesDetails]? = nil,
            essential: Swift.Bool = false,
            extraHosts: [SecurityHubClientTypes.AwsEcsTaskDefinitionContainerDefinitionsExtraHostsDetails]? = nil,
            firelensConfiguration: SecurityHubClientTypes.AwsEcsTaskDefinitionContainerDefinitionsFirelensConfigurationDetails? = nil,
            healthCheck: SecurityHubClientTypes.AwsEcsTaskDefinitionContainerDefinitionsHealthCheckDetails? = nil,
            hostname: Swift.String? = nil,
            image: Swift.String? = nil,
            interactive: Swift.Bool = false,
            links: [Swift.String]? = nil,
            linuxParameters: SecurityHubClientTypes.AwsEcsTaskDefinitionContainerDefinitionsLinuxParametersDetails? = nil,
            logConfiguration: SecurityHubClientTypes.AwsEcsTaskDefinitionContainerDefinitionsLogConfigurationDetails? = nil,
            memory: Swift.Int = 0,
            memoryReservation: Swift.Int = 0,
            mountPoints: [SecurityHubClientTypes.AwsEcsTaskDefinitionContainerDefinitionsMountPointsDetails]? = nil,
            name: Swift.String? = nil,
            portMappings: [SecurityHubClientTypes.AwsEcsTaskDefinitionContainerDefinitionsPortMappingsDetails]? = nil,
            privileged: Swift.Bool = false,
            pseudoTerminal: Swift.Bool = false,
            readonlyRootFilesystem: Swift.Bool = false,
            repositoryCredentials: SecurityHubClientTypes.AwsEcsTaskDefinitionContainerDefinitionsRepositoryCredentialsDetails? = nil,
            resourceRequirements: [SecurityHubClientTypes.AwsEcsTaskDefinitionContainerDefinitionsResourceRequirementsDetails]? = nil,
            secrets: [SecurityHubClientTypes.AwsEcsTaskDefinitionContainerDefinitionsSecretsDetails]? = nil,
            startTimeout: Swift.Int = 0,
            stopTimeout: Swift.Int = 0,
            systemControls: [SecurityHubClientTypes.AwsEcsTaskDefinitionContainerDefinitionsSystemControlsDetails]? = nil,
            ulimits: [SecurityHubClientTypes.AwsEcsTaskDefinitionContainerDefinitionsUlimitsDetails]? = nil,
            user: Swift.String? = nil,
            volumesFrom: [SecurityHubClientTypes.AwsEcsTaskDefinitionContainerDefinitionsVolumesFromDetails]? = nil,
            workingDirectory: Swift.String? = nil
        )
        {
            self.command = command
            self.cpu = cpu
            self.dependsOn = dependsOn
            self.disableNetworking = disableNetworking
            self.dnsSearchDomains = dnsSearchDomains
            self.dnsServers = dnsServers
            self.dockerLabels = dockerLabels
            self.dockerSecurityOptions = dockerSecurityOptions
            self.entryPoint = entryPoint
            self.environment = environment
            self.environmentFiles = environmentFiles
            self.essential = essential
            self.extraHosts = extraHosts
            self.firelensConfiguration = firelensConfiguration
            self.healthCheck = healthCheck
            self.hostname = hostname
            self.image = image
            self.interactive = interactive
            self.links = links
            self.linuxParameters = linuxParameters
            self.logConfiguration = logConfiguration
            self.memory = memory
            self.memoryReservation = memoryReservation
            self.mountPoints = mountPoints
            self.name = name
            self.portMappings = portMappings
            self.privileged = privileged
            self.pseudoTerminal = pseudoTerminal
            self.readonlyRootFilesystem = readonlyRootFilesystem
            self.repositoryCredentials = repositoryCredentials
            self.resourceRequirements = resourceRequirements
            self.secrets = secrets
            self.startTimeout = startTimeout
            self.stopTimeout = stopTimeout
            self.systemControls = systemControls
            self.ulimits = ulimits
            self.user = user
            self.volumesFrom = volumesFrom
            self.workingDirectory = workingDirectory
        }
    }

}
