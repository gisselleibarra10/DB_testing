// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SecurityHubClientTypes.AwsEcsTaskDefinitionContainerDefinitionsDetails: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case command = "Command"
        case cpu = "Cpu"
        case dependsOn = "DependsOn"
        case disableNetworking = "DisableNetworking"
        case dnsSearchDomains = "DnsSearchDomains"
        case dnsServers = "DnsServers"
        case dockerLabels = "DockerLabels"
        case dockerSecurityOptions = "DockerSecurityOptions"
        case entryPoint = "EntryPoint"
        case environment = "Environment"
        case environmentFiles = "EnvironmentFiles"
        case essential = "Essential"
        case extraHosts = "ExtraHosts"
        case firelensConfiguration = "FirelensConfiguration"
        case healthCheck = "HealthCheck"
        case hostname = "Hostname"
        case image = "Image"
        case interactive = "Interactive"
        case links = "Links"
        case linuxParameters = "LinuxParameters"
        case logConfiguration = "LogConfiguration"
        case memory = "Memory"
        case memoryReservation = "MemoryReservation"
        case mountPoints = "MountPoints"
        case name = "Name"
        case portMappings = "PortMappings"
        case privileged = "Privileged"
        case pseudoTerminal = "PseudoTerminal"
        case readonlyRootFilesystem = "ReadonlyRootFilesystem"
        case repositoryCredentials = "RepositoryCredentials"
        case resourceRequirements = "ResourceRequirements"
        case secrets = "Secrets"
        case startTimeout = "StartTimeout"
        case stopTimeout = "StopTimeout"
        case systemControls = "SystemControls"
        case ulimits = "Ulimits"
        case user = "User"
        case volumesFrom = "VolumesFrom"
        case workingDirectory = "WorkingDirectory"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let command = command {
            var commandContainer = encodeContainer.nestedUnkeyedContainer(forKey: .command)
            for nonemptystringlist0 in command {
                try commandContainer.encode(nonemptystringlist0)
            }
        }
        if cpu != 0 {
            try encodeContainer.encode(cpu, forKey: .cpu)
        }
        if let dependsOn = dependsOn {
            var dependsOnContainer = encodeContainer.nestedUnkeyedContainer(forKey: .dependsOn)
            for awsecstaskdefinitioncontainerdefinitionsdependsonlist0 in dependsOn {
                try dependsOnContainer.encode(awsecstaskdefinitioncontainerdefinitionsdependsonlist0)
            }
        }
        if disableNetworking != false {
            try encodeContainer.encode(disableNetworking, forKey: .disableNetworking)
        }
        if let dnsSearchDomains = dnsSearchDomains {
            var dnsSearchDomainsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .dnsSearchDomains)
            for nonemptystringlist0 in dnsSearchDomains {
                try dnsSearchDomainsContainer.encode(nonemptystringlist0)
            }
        }
        if let dnsServers = dnsServers {
            var dnsServersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .dnsServers)
            for nonemptystringlist0 in dnsServers {
                try dnsServersContainer.encode(nonemptystringlist0)
            }
        }
        if let dockerLabels = dockerLabels {
            var dockerLabelsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .dockerLabels)
            for (dictKey0, fieldmap0) in dockerLabels {
                try dockerLabelsContainer.encode(fieldmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let dockerSecurityOptions = dockerSecurityOptions {
            var dockerSecurityOptionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .dockerSecurityOptions)
            for nonemptystringlist0 in dockerSecurityOptions {
                try dockerSecurityOptionsContainer.encode(nonemptystringlist0)
            }
        }
        if let entryPoint = entryPoint {
            var entryPointContainer = encodeContainer.nestedUnkeyedContainer(forKey: .entryPoint)
            for nonemptystringlist0 in entryPoint {
                try entryPointContainer.encode(nonemptystringlist0)
            }
        }
        if let environment = environment {
            var environmentContainer = encodeContainer.nestedUnkeyedContainer(forKey: .environment)
            for awsecstaskdefinitioncontainerdefinitionsenvironmentlist0 in environment {
                try environmentContainer.encode(awsecstaskdefinitioncontainerdefinitionsenvironmentlist0)
            }
        }
        if let environmentFiles = environmentFiles {
            var environmentFilesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .environmentFiles)
            for awsecstaskdefinitioncontainerdefinitionsenvironmentfileslist0 in environmentFiles {
                try environmentFilesContainer.encode(awsecstaskdefinitioncontainerdefinitionsenvironmentfileslist0)
            }
        }
        if essential != false {
            try encodeContainer.encode(essential, forKey: .essential)
        }
        if let extraHosts = extraHosts {
            var extraHostsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .extraHosts)
            for awsecstaskdefinitioncontainerdefinitionsextrahostslist0 in extraHosts {
                try extraHostsContainer.encode(awsecstaskdefinitioncontainerdefinitionsextrahostslist0)
            }
        }
        if let firelensConfiguration = self.firelensConfiguration {
            try encodeContainer.encode(firelensConfiguration, forKey: .firelensConfiguration)
        }
        if let healthCheck = self.healthCheck {
            try encodeContainer.encode(healthCheck, forKey: .healthCheck)
        }
        if let hostname = self.hostname {
            try encodeContainer.encode(hostname, forKey: .hostname)
        }
        if let image = self.image {
            try encodeContainer.encode(image, forKey: .image)
        }
        if interactive != false {
            try encodeContainer.encode(interactive, forKey: .interactive)
        }
        if let links = links {
            var linksContainer = encodeContainer.nestedUnkeyedContainer(forKey: .links)
            for nonemptystringlist0 in links {
                try linksContainer.encode(nonemptystringlist0)
            }
        }
        if let linuxParameters = self.linuxParameters {
            try encodeContainer.encode(linuxParameters, forKey: .linuxParameters)
        }
        if let logConfiguration = self.logConfiguration {
            try encodeContainer.encode(logConfiguration, forKey: .logConfiguration)
        }
        if memory != 0 {
            try encodeContainer.encode(memory, forKey: .memory)
        }
        if memoryReservation != 0 {
            try encodeContainer.encode(memoryReservation, forKey: .memoryReservation)
        }
        if let mountPoints = mountPoints {
            var mountPointsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .mountPoints)
            for awsecstaskdefinitioncontainerdefinitionsmountpointslist0 in mountPoints {
                try mountPointsContainer.encode(awsecstaskdefinitioncontainerdefinitionsmountpointslist0)
            }
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let portMappings = portMappings {
            var portMappingsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .portMappings)
            for awsecstaskdefinitioncontainerdefinitionsportmappingslist0 in portMappings {
                try portMappingsContainer.encode(awsecstaskdefinitioncontainerdefinitionsportmappingslist0)
            }
        }
        if privileged != false {
            try encodeContainer.encode(privileged, forKey: .privileged)
        }
        if pseudoTerminal != false {
            try encodeContainer.encode(pseudoTerminal, forKey: .pseudoTerminal)
        }
        if readonlyRootFilesystem != false {
            try encodeContainer.encode(readonlyRootFilesystem, forKey: .readonlyRootFilesystem)
        }
        if let repositoryCredentials = self.repositoryCredentials {
            try encodeContainer.encode(repositoryCredentials, forKey: .repositoryCredentials)
        }
        if let resourceRequirements = resourceRequirements {
            var resourceRequirementsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .resourceRequirements)
            for awsecstaskdefinitioncontainerdefinitionsresourcerequirementslist0 in resourceRequirements {
                try resourceRequirementsContainer.encode(awsecstaskdefinitioncontainerdefinitionsresourcerequirementslist0)
            }
        }
        if let secrets = secrets {
            var secretsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .secrets)
            for awsecstaskdefinitioncontainerdefinitionssecretslist0 in secrets {
                try secretsContainer.encode(awsecstaskdefinitioncontainerdefinitionssecretslist0)
            }
        }
        if startTimeout != 0 {
            try encodeContainer.encode(startTimeout, forKey: .startTimeout)
        }
        if stopTimeout != 0 {
            try encodeContainer.encode(stopTimeout, forKey: .stopTimeout)
        }
        if let systemControls = systemControls {
            var systemControlsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .systemControls)
            for awsecstaskdefinitioncontainerdefinitionssystemcontrolslist0 in systemControls {
                try systemControlsContainer.encode(awsecstaskdefinitioncontainerdefinitionssystemcontrolslist0)
            }
        }
        if let ulimits = ulimits {
            var ulimitsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .ulimits)
            for awsecstaskdefinitioncontainerdefinitionsulimitslist0 in ulimits {
                try ulimitsContainer.encode(awsecstaskdefinitioncontainerdefinitionsulimitslist0)
            }
        }
        if let user = self.user {
            try encodeContainer.encode(user, forKey: .user)
        }
        if let volumesFrom = volumesFrom {
            var volumesFromContainer = encodeContainer.nestedUnkeyedContainer(forKey: .volumesFrom)
            for awsecstaskdefinitioncontainerdefinitionsvolumesfromlist0 in volumesFrom {
                try volumesFromContainer.encode(awsecstaskdefinitioncontainerdefinitionsvolumesfromlist0)
            }
        }
        if let workingDirectory = self.workingDirectory {
            try encodeContainer.encode(workingDirectory, forKey: .workingDirectory)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let commandContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .command)
        var commandDecoded0:[Swift.String]? = nil
        if let commandContainer = commandContainer {
            commandDecoded0 = [Swift.String]()
            for string0 in commandContainer {
                if let string0 = string0 {
                    commandDecoded0?.append(string0)
                }
            }
        }
        command = commandDecoded0
        let cpuDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .cpu) ?? 0
        cpu = cpuDecoded
        let dependsOnContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.AwsEcsTaskDefinitionContainerDefinitionsDependsOnDetails?].self, forKey: .dependsOn)
        var dependsOnDecoded0:[SecurityHubClientTypes.AwsEcsTaskDefinitionContainerDefinitionsDependsOnDetails]? = nil
        if let dependsOnContainer = dependsOnContainer {
            dependsOnDecoded0 = [SecurityHubClientTypes.AwsEcsTaskDefinitionContainerDefinitionsDependsOnDetails]()
            for structure0 in dependsOnContainer {
                if let structure0 = structure0 {
                    dependsOnDecoded0?.append(structure0)
                }
            }
        }
        dependsOn = dependsOnDecoded0
        let disableNetworkingDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .disableNetworking) ?? false
        disableNetworking = disableNetworkingDecoded
        let dnsSearchDomainsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .dnsSearchDomains)
        var dnsSearchDomainsDecoded0:[Swift.String]? = nil
        if let dnsSearchDomainsContainer = dnsSearchDomainsContainer {
            dnsSearchDomainsDecoded0 = [Swift.String]()
            for string0 in dnsSearchDomainsContainer {
                if let string0 = string0 {
                    dnsSearchDomainsDecoded0?.append(string0)
                }
            }
        }
        dnsSearchDomains = dnsSearchDomainsDecoded0
        let dnsServersContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .dnsServers)
        var dnsServersDecoded0:[Swift.String]? = nil
        if let dnsServersContainer = dnsServersContainer {
            dnsServersDecoded0 = [Swift.String]()
            for string0 in dnsServersContainer {
                if let string0 = string0 {
                    dnsServersDecoded0?.append(string0)
                }
            }
        }
        dnsServers = dnsServersDecoded0
        let dockerLabelsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .dockerLabels)
        var dockerLabelsDecoded0: [Swift.String:Swift.String]? = nil
        if let dockerLabelsContainer = dockerLabelsContainer {
            dockerLabelsDecoded0 = [Swift.String:Swift.String]()
            for (key0, nonemptystring0) in dockerLabelsContainer {
                if let nonemptystring0 = nonemptystring0 {
                    dockerLabelsDecoded0?[key0] = nonemptystring0
                }
            }
        }
        dockerLabels = dockerLabelsDecoded0
        let dockerSecurityOptionsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .dockerSecurityOptions)
        var dockerSecurityOptionsDecoded0:[Swift.String]? = nil
        if let dockerSecurityOptionsContainer = dockerSecurityOptionsContainer {
            dockerSecurityOptionsDecoded0 = [Swift.String]()
            for string0 in dockerSecurityOptionsContainer {
                if let string0 = string0 {
                    dockerSecurityOptionsDecoded0?.append(string0)
                }
            }
        }
        dockerSecurityOptions = dockerSecurityOptionsDecoded0
        let entryPointContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .entryPoint)
        var entryPointDecoded0:[Swift.String]? = nil
        if let entryPointContainer = entryPointContainer {
            entryPointDecoded0 = [Swift.String]()
            for string0 in entryPointContainer {
                if let string0 = string0 {
                    entryPointDecoded0?.append(string0)
                }
            }
        }
        entryPoint = entryPointDecoded0
        let environmentContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.AwsEcsTaskDefinitionContainerDefinitionsEnvironmentDetails?].self, forKey: .environment)
        var environmentDecoded0:[SecurityHubClientTypes.AwsEcsTaskDefinitionContainerDefinitionsEnvironmentDetails]? = nil
        if let environmentContainer = environmentContainer {
            environmentDecoded0 = [SecurityHubClientTypes.AwsEcsTaskDefinitionContainerDefinitionsEnvironmentDetails]()
            for structure0 in environmentContainer {
                if let structure0 = structure0 {
                    environmentDecoded0?.append(structure0)
                }
            }
        }
        environment = environmentDecoded0
        let environmentFilesContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.AwsEcsTaskDefinitionContainerDefinitionsEnvironmentFilesDetails?].self, forKey: .environmentFiles)
        var environmentFilesDecoded0:[SecurityHubClientTypes.AwsEcsTaskDefinitionContainerDefinitionsEnvironmentFilesDetails]? = nil
        if let environmentFilesContainer = environmentFilesContainer {
            environmentFilesDecoded0 = [SecurityHubClientTypes.AwsEcsTaskDefinitionContainerDefinitionsEnvironmentFilesDetails]()
            for structure0 in environmentFilesContainer {
                if let structure0 = structure0 {
                    environmentFilesDecoded0?.append(structure0)
                }
            }
        }
        environmentFiles = environmentFilesDecoded0
        let essentialDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .essential) ?? false
        essential = essentialDecoded
        let extraHostsContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.AwsEcsTaskDefinitionContainerDefinitionsExtraHostsDetails?].self, forKey: .extraHosts)
        var extraHostsDecoded0:[SecurityHubClientTypes.AwsEcsTaskDefinitionContainerDefinitionsExtraHostsDetails]? = nil
        if let extraHostsContainer = extraHostsContainer {
            extraHostsDecoded0 = [SecurityHubClientTypes.AwsEcsTaskDefinitionContainerDefinitionsExtraHostsDetails]()
            for structure0 in extraHostsContainer {
                if let structure0 = structure0 {
                    extraHostsDecoded0?.append(structure0)
                }
            }
        }
        extraHosts = extraHostsDecoded0
        let firelensConfigurationDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsEcsTaskDefinitionContainerDefinitionsFirelensConfigurationDetails.self, forKey: .firelensConfiguration)
        firelensConfiguration = firelensConfigurationDecoded
        let healthCheckDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsEcsTaskDefinitionContainerDefinitionsHealthCheckDetails.self, forKey: .healthCheck)
        healthCheck = healthCheckDecoded
        let hostnameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .hostname)
        hostname = hostnameDecoded
        let imageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .image)
        image = imageDecoded
        let interactiveDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .interactive) ?? false
        interactive = interactiveDecoded
        let linksContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .links)
        var linksDecoded0:[Swift.String]? = nil
        if let linksContainer = linksContainer {
            linksDecoded0 = [Swift.String]()
            for string0 in linksContainer {
                if let string0 = string0 {
                    linksDecoded0?.append(string0)
                }
            }
        }
        links = linksDecoded0
        let linuxParametersDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsEcsTaskDefinitionContainerDefinitionsLinuxParametersDetails.self, forKey: .linuxParameters)
        linuxParameters = linuxParametersDecoded
        let logConfigurationDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsEcsTaskDefinitionContainerDefinitionsLogConfigurationDetails.self, forKey: .logConfiguration)
        logConfiguration = logConfigurationDecoded
        let memoryDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .memory) ?? 0
        memory = memoryDecoded
        let memoryReservationDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .memoryReservation) ?? 0
        memoryReservation = memoryReservationDecoded
        let mountPointsContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.AwsEcsTaskDefinitionContainerDefinitionsMountPointsDetails?].self, forKey: .mountPoints)
        var mountPointsDecoded0:[SecurityHubClientTypes.AwsEcsTaskDefinitionContainerDefinitionsMountPointsDetails]? = nil
        if let mountPointsContainer = mountPointsContainer {
            mountPointsDecoded0 = [SecurityHubClientTypes.AwsEcsTaskDefinitionContainerDefinitionsMountPointsDetails]()
            for structure0 in mountPointsContainer {
                if let structure0 = structure0 {
                    mountPointsDecoded0?.append(structure0)
                }
            }
        }
        mountPoints = mountPointsDecoded0
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let portMappingsContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.AwsEcsTaskDefinitionContainerDefinitionsPortMappingsDetails?].self, forKey: .portMappings)
        var portMappingsDecoded0:[SecurityHubClientTypes.AwsEcsTaskDefinitionContainerDefinitionsPortMappingsDetails]? = nil
        if let portMappingsContainer = portMappingsContainer {
            portMappingsDecoded0 = [SecurityHubClientTypes.AwsEcsTaskDefinitionContainerDefinitionsPortMappingsDetails]()
            for structure0 in portMappingsContainer {
                if let structure0 = structure0 {
                    portMappingsDecoded0?.append(structure0)
                }
            }
        }
        portMappings = portMappingsDecoded0
        let privilegedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .privileged) ?? false
        privileged = privilegedDecoded
        let pseudoTerminalDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .pseudoTerminal) ?? false
        pseudoTerminal = pseudoTerminalDecoded
        let readonlyRootFilesystemDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .readonlyRootFilesystem) ?? false
        readonlyRootFilesystem = readonlyRootFilesystemDecoded
        let repositoryCredentialsDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsEcsTaskDefinitionContainerDefinitionsRepositoryCredentialsDetails.self, forKey: .repositoryCredentials)
        repositoryCredentials = repositoryCredentialsDecoded
        let resourceRequirementsContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.AwsEcsTaskDefinitionContainerDefinitionsResourceRequirementsDetails?].self, forKey: .resourceRequirements)
        var resourceRequirementsDecoded0:[SecurityHubClientTypes.AwsEcsTaskDefinitionContainerDefinitionsResourceRequirementsDetails]? = nil
        if let resourceRequirementsContainer = resourceRequirementsContainer {
            resourceRequirementsDecoded0 = [SecurityHubClientTypes.AwsEcsTaskDefinitionContainerDefinitionsResourceRequirementsDetails]()
            for structure0 in resourceRequirementsContainer {
                if let structure0 = structure0 {
                    resourceRequirementsDecoded0?.append(structure0)
                }
            }
        }
        resourceRequirements = resourceRequirementsDecoded0
        let secretsContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.AwsEcsTaskDefinitionContainerDefinitionsSecretsDetails?].self, forKey: .secrets)
        var secretsDecoded0:[SecurityHubClientTypes.AwsEcsTaskDefinitionContainerDefinitionsSecretsDetails]? = nil
        if let secretsContainer = secretsContainer {
            secretsDecoded0 = [SecurityHubClientTypes.AwsEcsTaskDefinitionContainerDefinitionsSecretsDetails]()
            for structure0 in secretsContainer {
                if let structure0 = structure0 {
                    secretsDecoded0?.append(structure0)
                }
            }
        }
        secrets = secretsDecoded0
        let startTimeoutDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .startTimeout) ?? 0
        startTimeout = startTimeoutDecoded
        let stopTimeoutDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .stopTimeout) ?? 0
        stopTimeout = stopTimeoutDecoded
        let systemControlsContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.AwsEcsTaskDefinitionContainerDefinitionsSystemControlsDetails?].self, forKey: .systemControls)
        var systemControlsDecoded0:[SecurityHubClientTypes.AwsEcsTaskDefinitionContainerDefinitionsSystemControlsDetails]? = nil
        if let systemControlsContainer = systemControlsContainer {
            systemControlsDecoded0 = [SecurityHubClientTypes.AwsEcsTaskDefinitionContainerDefinitionsSystemControlsDetails]()
            for structure0 in systemControlsContainer {
                if let structure0 = structure0 {
                    systemControlsDecoded0?.append(structure0)
                }
            }
        }
        systemControls = systemControlsDecoded0
        let ulimitsContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.AwsEcsTaskDefinitionContainerDefinitionsUlimitsDetails?].self, forKey: .ulimits)
        var ulimitsDecoded0:[SecurityHubClientTypes.AwsEcsTaskDefinitionContainerDefinitionsUlimitsDetails]? = nil
        if let ulimitsContainer = ulimitsContainer {
            ulimitsDecoded0 = [SecurityHubClientTypes.AwsEcsTaskDefinitionContainerDefinitionsUlimitsDetails]()
            for structure0 in ulimitsContainer {
                if let structure0 = structure0 {
                    ulimitsDecoded0?.append(structure0)
                }
            }
        }
        ulimits = ulimitsDecoded0
        let userDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .user)
        user = userDecoded
        let volumesFromContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.AwsEcsTaskDefinitionContainerDefinitionsVolumesFromDetails?].self, forKey: .volumesFrom)
        var volumesFromDecoded0:[SecurityHubClientTypes.AwsEcsTaskDefinitionContainerDefinitionsVolumesFromDetails]? = nil
        if let volumesFromContainer = volumesFromContainer {
            volumesFromDecoded0 = [SecurityHubClientTypes.AwsEcsTaskDefinitionContainerDefinitionsVolumesFromDetails]()
            for structure0 in volumesFromContainer {
                if let structure0 = structure0 {
                    volumesFromDecoded0?.append(structure0)
                }
            }
        }
        volumesFrom = volumesFromDecoded0
        let workingDirectoryDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .workingDirectory)
        workingDirectory = workingDirectoryDecoded
    }
}
