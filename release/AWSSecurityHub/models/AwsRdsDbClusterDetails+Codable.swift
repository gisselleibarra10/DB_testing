// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SecurityHubClientTypes.AwsRdsDbClusterDetails: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case activityStreamStatus = "ActivityStreamStatus"
        case allocatedStorage = "AllocatedStorage"
        case associatedRoles = "AssociatedRoles"
        case availabilityZones = "AvailabilityZones"
        case backupRetentionPeriod = "BackupRetentionPeriod"
        case clusterCreateTime = "ClusterCreateTime"
        case copyTagsToSnapshot = "CopyTagsToSnapshot"
        case crossAccountClone = "CrossAccountClone"
        case customEndpoints = "CustomEndpoints"
        case databaseName = "DatabaseName"
        case dbClusterIdentifier = "DbClusterIdentifier"
        case dbClusterMembers = "DbClusterMembers"
        case dbClusterOptionGroupMemberships = "DbClusterOptionGroupMemberships"
        case dbClusterParameterGroup = "DbClusterParameterGroup"
        case dbClusterResourceId = "DbClusterResourceId"
        case dbSubnetGroup = "DbSubnetGroup"
        case deletionProtection = "DeletionProtection"
        case domainMemberships = "DomainMemberships"
        case enabledCloudWatchLogsExports = "EnabledCloudWatchLogsExports"
        case endpoint = "Endpoint"
        case engine = "Engine"
        case engineMode = "EngineMode"
        case engineVersion = "EngineVersion"
        case hostedZoneId = "HostedZoneId"
        case httpEndpointEnabled = "HttpEndpointEnabled"
        case iamDatabaseAuthenticationEnabled = "IamDatabaseAuthenticationEnabled"
        case kmsKeyId = "KmsKeyId"
        case masterUsername = "MasterUsername"
        case multiAz = "MultiAz"
        case port = "Port"
        case preferredBackupWindow = "PreferredBackupWindow"
        case preferredMaintenanceWindow = "PreferredMaintenanceWindow"
        case readReplicaIdentifiers = "ReadReplicaIdentifiers"
        case readerEndpoint = "ReaderEndpoint"
        case status = "Status"
        case storageEncrypted = "StorageEncrypted"
        case vpcSecurityGroups = "VpcSecurityGroups"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let activityStreamStatus = self.activityStreamStatus {
            try encodeContainer.encode(activityStreamStatus, forKey: .activityStreamStatus)
        }
        if allocatedStorage != 0 {
            try encodeContainer.encode(allocatedStorage, forKey: .allocatedStorage)
        }
        if let associatedRoles = associatedRoles {
            var associatedRolesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .associatedRoles)
            for awsrdsdbclusterassociatedroles0 in associatedRoles {
                try associatedRolesContainer.encode(awsrdsdbclusterassociatedroles0)
            }
        }
        if let availabilityZones = availabilityZones {
            var availabilityZonesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .availabilityZones)
            for stringlist0 in availabilityZones {
                try availabilityZonesContainer.encode(stringlist0)
            }
        }
        if backupRetentionPeriod != 0 {
            try encodeContainer.encode(backupRetentionPeriod, forKey: .backupRetentionPeriod)
        }
        if let clusterCreateTime = self.clusterCreateTime {
            try encodeContainer.encode(clusterCreateTime, forKey: .clusterCreateTime)
        }
        if copyTagsToSnapshot != false {
            try encodeContainer.encode(copyTagsToSnapshot, forKey: .copyTagsToSnapshot)
        }
        if crossAccountClone != false {
            try encodeContainer.encode(crossAccountClone, forKey: .crossAccountClone)
        }
        if let customEndpoints = customEndpoints {
            var customEndpointsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .customEndpoints)
            for stringlist0 in customEndpoints {
                try customEndpointsContainer.encode(stringlist0)
            }
        }
        if let databaseName = self.databaseName {
            try encodeContainer.encode(databaseName, forKey: .databaseName)
        }
        if let dbClusterIdentifier = self.dbClusterIdentifier {
            try encodeContainer.encode(dbClusterIdentifier, forKey: .dbClusterIdentifier)
        }
        if let dbClusterMembers = dbClusterMembers {
            var dbClusterMembersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .dbClusterMembers)
            for awsrdsdbclustermembers0 in dbClusterMembers {
                try dbClusterMembersContainer.encode(awsrdsdbclustermembers0)
            }
        }
        if let dbClusterOptionGroupMemberships = dbClusterOptionGroupMemberships {
            var dbClusterOptionGroupMembershipsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .dbClusterOptionGroupMemberships)
            for awsrdsdbclusteroptiongroupmemberships0 in dbClusterOptionGroupMemberships {
                try dbClusterOptionGroupMembershipsContainer.encode(awsrdsdbclusteroptiongroupmemberships0)
            }
        }
        if let dbClusterParameterGroup = self.dbClusterParameterGroup {
            try encodeContainer.encode(dbClusterParameterGroup, forKey: .dbClusterParameterGroup)
        }
        if let dbClusterResourceId = self.dbClusterResourceId {
            try encodeContainer.encode(dbClusterResourceId, forKey: .dbClusterResourceId)
        }
        if let dbSubnetGroup = self.dbSubnetGroup {
            try encodeContainer.encode(dbSubnetGroup, forKey: .dbSubnetGroup)
        }
        if deletionProtection != false {
            try encodeContainer.encode(deletionProtection, forKey: .deletionProtection)
        }
        if let domainMemberships = domainMemberships {
            var domainMembershipsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .domainMemberships)
            for awsrdsdbdomainmemberships0 in domainMemberships {
                try domainMembershipsContainer.encode(awsrdsdbdomainmemberships0)
            }
        }
        if let enabledCloudWatchLogsExports = enabledCloudWatchLogsExports {
            var enabledCloudWatchLogsExportsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .enabledCloudWatchLogsExports)
            for stringlist0 in enabledCloudWatchLogsExports {
                try enabledCloudWatchLogsExportsContainer.encode(stringlist0)
            }
        }
        if let endpoint = self.endpoint {
            try encodeContainer.encode(endpoint, forKey: .endpoint)
        }
        if let engine = self.engine {
            try encodeContainer.encode(engine, forKey: .engine)
        }
        if let engineMode = self.engineMode {
            try encodeContainer.encode(engineMode, forKey: .engineMode)
        }
        if let engineVersion = self.engineVersion {
            try encodeContainer.encode(engineVersion, forKey: .engineVersion)
        }
        if let hostedZoneId = self.hostedZoneId {
            try encodeContainer.encode(hostedZoneId, forKey: .hostedZoneId)
        }
        if httpEndpointEnabled != false {
            try encodeContainer.encode(httpEndpointEnabled, forKey: .httpEndpointEnabled)
        }
        if iamDatabaseAuthenticationEnabled != false {
            try encodeContainer.encode(iamDatabaseAuthenticationEnabled, forKey: .iamDatabaseAuthenticationEnabled)
        }
        if let kmsKeyId = self.kmsKeyId {
            try encodeContainer.encode(kmsKeyId, forKey: .kmsKeyId)
        }
        if let masterUsername = self.masterUsername {
            try encodeContainer.encode(masterUsername, forKey: .masterUsername)
        }
        if multiAz != false {
            try encodeContainer.encode(multiAz, forKey: .multiAz)
        }
        if port != 0 {
            try encodeContainer.encode(port, forKey: .port)
        }
        if let preferredBackupWindow = self.preferredBackupWindow {
            try encodeContainer.encode(preferredBackupWindow, forKey: .preferredBackupWindow)
        }
        if let preferredMaintenanceWindow = self.preferredMaintenanceWindow {
            try encodeContainer.encode(preferredMaintenanceWindow, forKey: .preferredMaintenanceWindow)
        }
        if let readReplicaIdentifiers = readReplicaIdentifiers {
            var readReplicaIdentifiersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .readReplicaIdentifiers)
            for stringlist0 in readReplicaIdentifiers {
                try readReplicaIdentifiersContainer.encode(stringlist0)
            }
        }
        if let readerEndpoint = self.readerEndpoint {
            try encodeContainer.encode(readerEndpoint, forKey: .readerEndpoint)
        }
        if let status = self.status {
            try encodeContainer.encode(status, forKey: .status)
        }
        if storageEncrypted != false {
            try encodeContainer.encode(storageEncrypted, forKey: .storageEncrypted)
        }
        if let vpcSecurityGroups = vpcSecurityGroups {
            var vpcSecurityGroupsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .vpcSecurityGroups)
            for awsrdsdbinstancevpcsecuritygroups0 in vpcSecurityGroups {
                try vpcSecurityGroupsContainer.encode(awsrdsdbinstancevpcsecuritygroups0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let allocatedStorageDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .allocatedStorage) ?? 0
        allocatedStorage = allocatedStorageDecoded
        let availabilityZonesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .availabilityZones)
        var availabilityZonesDecoded0:[Swift.String]? = nil
        if let availabilityZonesContainer = availabilityZonesContainer {
            availabilityZonesDecoded0 = [Swift.String]()
            for string0 in availabilityZonesContainer {
                if let string0 = string0 {
                    availabilityZonesDecoded0?.append(string0)
                }
            }
        }
        availabilityZones = availabilityZonesDecoded0
        let backupRetentionPeriodDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .backupRetentionPeriod) ?? 0
        backupRetentionPeriod = backupRetentionPeriodDecoded
        let databaseNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .databaseName)
        databaseName = databaseNameDecoded
        let statusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .status)
        status = statusDecoded
        let endpointDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .endpoint)
        endpoint = endpointDecoded
        let readerEndpointDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .readerEndpoint)
        readerEndpoint = readerEndpointDecoded
        let customEndpointsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .customEndpoints)
        var customEndpointsDecoded0:[Swift.String]? = nil
        if let customEndpointsContainer = customEndpointsContainer {
            customEndpointsDecoded0 = [Swift.String]()
            for string0 in customEndpointsContainer {
                if let string0 = string0 {
                    customEndpointsDecoded0?.append(string0)
                }
            }
        }
        customEndpoints = customEndpointsDecoded0
        let multiAzDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .multiAz) ?? false
        multiAz = multiAzDecoded
        let engineDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .engine)
        engine = engineDecoded
        let engineVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .engineVersion)
        engineVersion = engineVersionDecoded
        let portDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .port) ?? 0
        port = portDecoded
        let masterUsernameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .masterUsername)
        masterUsername = masterUsernameDecoded
        let preferredBackupWindowDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .preferredBackupWindow)
        preferredBackupWindow = preferredBackupWindowDecoded
        let preferredMaintenanceWindowDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .preferredMaintenanceWindow)
        preferredMaintenanceWindow = preferredMaintenanceWindowDecoded
        let readReplicaIdentifiersContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .readReplicaIdentifiers)
        var readReplicaIdentifiersDecoded0:[Swift.String]? = nil
        if let readReplicaIdentifiersContainer = readReplicaIdentifiersContainer {
            readReplicaIdentifiersDecoded0 = [Swift.String]()
            for string0 in readReplicaIdentifiersContainer {
                if let string0 = string0 {
                    readReplicaIdentifiersDecoded0?.append(string0)
                }
            }
        }
        readReplicaIdentifiers = readReplicaIdentifiersDecoded0
        let vpcSecurityGroupsContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.AwsRdsDbInstanceVpcSecurityGroup?].self, forKey: .vpcSecurityGroups)
        var vpcSecurityGroupsDecoded0:[SecurityHubClientTypes.AwsRdsDbInstanceVpcSecurityGroup]? = nil
        if let vpcSecurityGroupsContainer = vpcSecurityGroupsContainer {
            vpcSecurityGroupsDecoded0 = [SecurityHubClientTypes.AwsRdsDbInstanceVpcSecurityGroup]()
            for structure0 in vpcSecurityGroupsContainer {
                if let structure0 = structure0 {
                    vpcSecurityGroupsDecoded0?.append(structure0)
                }
            }
        }
        vpcSecurityGroups = vpcSecurityGroupsDecoded0
        let hostedZoneIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .hostedZoneId)
        hostedZoneId = hostedZoneIdDecoded
        let storageEncryptedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .storageEncrypted) ?? false
        storageEncrypted = storageEncryptedDecoded
        let kmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kmsKeyId)
        kmsKeyId = kmsKeyIdDecoded
        let dbClusterResourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dbClusterResourceId)
        dbClusterResourceId = dbClusterResourceIdDecoded
        let associatedRolesContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.AwsRdsDbClusterAssociatedRole?].self, forKey: .associatedRoles)
        var associatedRolesDecoded0:[SecurityHubClientTypes.AwsRdsDbClusterAssociatedRole]? = nil
        if let associatedRolesContainer = associatedRolesContainer {
            associatedRolesDecoded0 = [SecurityHubClientTypes.AwsRdsDbClusterAssociatedRole]()
            for structure0 in associatedRolesContainer {
                if let structure0 = structure0 {
                    associatedRolesDecoded0?.append(structure0)
                }
            }
        }
        associatedRoles = associatedRolesDecoded0
        let clusterCreateTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterCreateTime)
        clusterCreateTime = clusterCreateTimeDecoded
        let enabledCloudWatchLogsExportsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .enabledCloudWatchLogsExports)
        var enabledCloudWatchLogsExportsDecoded0:[Swift.String]? = nil
        if let enabledCloudWatchLogsExportsContainer = enabledCloudWatchLogsExportsContainer {
            enabledCloudWatchLogsExportsDecoded0 = [Swift.String]()
            for string0 in enabledCloudWatchLogsExportsContainer {
                if let string0 = string0 {
                    enabledCloudWatchLogsExportsDecoded0?.append(string0)
                }
            }
        }
        enabledCloudWatchLogsExports = enabledCloudWatchLogsExportsDecoded0
        let engineModeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .engineMode)
        engineMode = engineModeDecoded
        let deletionProtectionDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .deletionProtection) ?? false
        deletionProtection = deletionProtectionDecoded
        let httpEndpointEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .httpEndpointEnabled) ?? false
        httpEndpointEnabled = httpEndpointEnabledDecoded
        let activityStreamStatusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .activityStreamStatus)
        activityStreamStatus = activityStreamStatusDecoded
        let copyTagsToSnapshotDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .copyTagsToSnapshot) ?? false
        copyTagsToSnapshot = copyTagsToSnapshotDecoded
        let crossAccountCloneDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .crossAccountClone) ?? false
        crossAccountClone = crossAccountCloneDecoded
        let domainMembershipsContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.AwsRdsDbDomainMembership?].self, forKey: .domainMemberships)
        var domainMembershipsDecoded0:[SecurityHubClientTypes.AwsRdsDbDomainMembership]? = nil
        if let domainMembershipsContainer = domainMembershipsContainer {
            domainMembershipsDecoded0 = [SecurityHubClientTypes.AwsRdsDbDomainMembership]()
            for structure0 in domainMembershipsContainer {
                if let structure0 = structure0 {
                    domainMembershipsDecoded0?.append(structure0)
                }
            }
        }
        domainMemberships = domainMembershipsDecoded0
        let dbClusterParameterGroupDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dbClusterParameterGroup)
        dbClusterParameterGroup = dbClusterParameterGroupDecoded
        let dbSubnetGroupDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dbSubnetGroup)
        dbSubnetGroup = dbSubnetGroupDecoded
        let dbClusterOptionGroupMembershipsContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.AwsRdsDbClusterOptionGroupMembership?].self, forKey: .dbClusterOptionGroupMemberships)
        var dbClusterOptionGroupMembershipsDecoded0:[SecurityHubClientTypes.AwsRdsDbClusterOptionGroupMembership]? = nil
        if let dbClusterOptionGroupMembershipsContainer = dbClusterOptionGroupMembershipsContainer {
            dbClusterOptionGroupMembershipsDecoded0 = [SecurityHubClientTypes.AwsRdsDbClusterOptionGroupMembership]()
            for structure0 in dbClusterOptionGroupMembershipsContainer {
                if let structure0 = structure0 {
                    dbClusterOptionGroupMembershipsDecoded0?.append(structure0)
                }
            }
        }
        dbClusterOptionGroupMemberships = dbClusterOptionGroupMembershipsDecoded0
        let dbClusterIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dbClusterIdentifier)
        dbClusterIdentifier = dbClusterIdentifierDecoded
        let dbClusterMembersContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.AwsRdsDbClusterMember?].self, forKey: .dbClusterMembers)
        var dbClusterMembersDecoded0:[SecurityHubClientTypes.AwsRdsDbClusterMember]? = nil
        if let dbClusterMembersContainer = dbClusterMembersContainer {
            dbClusterMembersDecoded0 = [SecurityHubClientTypes.AwsRdsDbClusterMember]()
            for structure0 in dbClusterMembersContainer {
                if let structure0 = structure0 {
                    dbClusterMembersDecoded0?.append(structure0)
                }
            }
        }
        dbClusterMembers = dbClusterMembersDecoded0
        let iamDatabaseAuthenticationEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .iamDatabaseAuthenticationEnabled) ?? false
        iamDatabaseAuthenticationEnabled = iamDatabaseAuthenticationEnabledDecoded
    }
}
