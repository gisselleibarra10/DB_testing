// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SecurityHubClientTypes.AwsSecurityFindingFilters: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case awsAccountId = "AwsAccountId"
        case companyName = "CompanyName"
        case complianceStatus = "ComplianceStatus"
        case confidence = "Confidence"
        case createdAt = "CreatedAt"
        case criticality = "Criticality"
        case description = "Description"
        case findingProviderFieldsConfidence = "FindingProviderFieldsConfidence"
        case findingProviderFieldsCriticality = "FindingProviderFieldsCriticality"
        case findingProviderFieldsRelatedFindingsId = "FindingProviderFieldsRelatedFindingsId"
        case findingProviderFieldsRelatedFindingsProductArn = "FindingProviderFieldsRelatedFindingsProductArn"
        case findingProviderFieldsSeverityLabel = "FindingProviderFieldsSeverityLabel"
        case findingProviderFieldsSeverityOriginal = "FindingProviderFieldsSeverityOriginal"
        case findingProviderFieldsTypes = "FindingProviderFieldsTypes"
        case firstObservedAt = "FirstObservedAt"
        case generatorId = "GeneratorId"
        case id = "Id"
        case keyword = "Keyword"
        case lastObservedAt = "LastObservedAt"
        case malwareName = "MalwareName"
        case malwarePath = "MalwarePath"
        case malwareState = "MalwareState"
        case malwareType = "MalwareType"
        case networkDestinationDomain = "NetworkDestinationDomain"
        case networkDestinationIpV4 = "NetworkDestinationIpV4"
        case networkDestinationIpV6 = "NetworkDestinationIpV6"
        case networkDestinationPort = "NetworkDestinationPort"
        case networkDirection = "NetworkDirection"
        case networkProtocol = "NetworkProtocol"
        case networkSourceDomain = "NetworkSourceDomain"
        case networkSourceIpV4 = "NetworkSourceIpV4"
        case networkSourceIpV6 = "NetworkSourceIpV6"
        case networkSourceMac = "NetworkSourceMac"
        case networkSourcePort = "NetworkSourcePort"
        case noteText = "NoteText"
        case noteUpdatedAt = "NoteUpdatedAt"
        case noteUpdatedBy = "NoteUpdatedBy"
        case processLaunchedAt = "ProcessLaunchedAt"
        case processName = "ProcessName"
        case processParentPid = "ProcessParentPid"
        case processPath = "ProcessPath"
        case processPid = "ProcessPid"
        case processTerminatedAt = "ProcessTerminatedAt"
        case productArn = "ProductArn"
        case productFields = "ProductFields"
        case productName = "ProductName"
        case recommendationText = "RecommendationText"
        case recordState = "RecordState"
        case region = "Region"
        case relatedFindingsId = "RelatedFindingsId"
        case relatedFindingsProductArn = "RelatedFindingsProductArn"
        case resourceAwsEc2InstanceIamInstanceProfileArn = "ResourceAwsEc2InstanceIamInstanceProfileArn"
        case resourceAwsEc2InstanceImageId = "ResourceAwsEc2InstanceImageId"
        case resourceAwsEc2InstanceIpV4Addresses = "ResourceAwsEc2InstanceIpV4Addresses"
        case resourceAwsEc2InstanceIpV6Addresses = "ResourceAwsEc2InstanceIpV6Addresses"
        case resourceAwsEc2InstanceKeyName = "ResourceAwsEc2InstanceKeyName"
        case resourceAwsEc2InstanceLaunchedAt = "ResourceAwsEc2InstanceLaunchedAt"
        case resourceAwsEc2InstanceSubnetId = "ResourceAwsEc2InstanceSubnetId"
        case resourceAwsEc2InstanceType = "ResourceAwsEc2InstanceType"
        case resourceAwsEc2InstanceVpcId = "ResourceAwsEc2InstanceVpcId"
        case resourceAwsIamAccessKeyCreatedAt = "ResourceAwsIamAccessKeyCreatedAt"
        case resourceAwsIamAccessKeyPrincipalName = "ResourceAwsIamAccessKeyPrincipalName"
        case resourceAwsIamAccessKeyStatus = "ResourceAwsIamAccessKeyStatus"
        case resourceAwsIamAccessKeyUserName = "ResourceAwsIamAccessKeyUserName"
        case resourceAwsIamUserUserName = "ResourceAwsIamUserUserName"
        case resourceAwsS3BucketOwnerId = "ResourceAwsS3BucketOwnerId"
        case resourceAwsS3BucketOwnerName = "ResourceAwsS3BucketOwnerName"
        case resourceContainerImageId = "ResourceContainerImageId"
        case resourceContainerImageName = "ResourceContainerImageName"
        case resourceContainerLaunchedAt = "ResourceContainerLaunchedAt"
        case resourceContainerName = "ResourceContainerName"
        case resourceDetailsOther = "ResourceDetailsOther"
        case resourceId = "ResourceId"
        case resourcePartition = "ResourcePartition"
        case resourceRegion = "ResourceRegion"
        case resourceTags = "ResourceTags"
        case resourceType = "ResourceType"
        case sample = "Sample"
        case severityLabel = "SeverityLabel"
        case severityNormalized = "SeverityNormalized"
        case severityProduct = "SeverityProduct"
        case sourceUrl = "SourceUrl"
        case threatIntelIndicatorCategory = "ThreatIntelIndicatorCategory"
        case threatIntelIndicatorLastObservedAt = "ThreatIntelIndicatorLastObservedAt"
        case threatIntelIndicatorSource = "ThreatIntelIndicatorSource"
        case threatIntelIndicatorSourceUrl = "ThreatIntelIndicatorSourceUrl"
        case threatIntelIndicatorType = "ThreatIntelIndicatorType"
        case threatIntelIndicatorValue = "ThreatIntelIndicatorValue"
        case title = "Title"
        case type = "Type"
        case updatedAt = "UpdatedAt"
        case userDefinedFields = "UserDefinedFields"
        case verificationState = "VerificationState"
        case workflowState = "WorkflowState"
        case workflowStatus = "WorkflowStatus"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let awsAccountId = awsAccountId {
            var awsAccountIdContainer = encodeContainer.nestedUnkeyedContainer(forKey: .awsAccountId)
            for stringfilterlist0 in awsAccountId {
                try awsAccountIdContainer.encode(stringfilterlist0)
            }
        }
        if let companyName = companyName {
            var companyNameContainer = encodeContainer.nestedUnkeyedContainer(forKey: .companyName)
            for stringfilterlist0 in companyName {
                try companyNameContainer.encode(stringfilterlist0)
            }
        }
        if let complianceStatus = complianceStatus {
            var complianceStatusContainer = encodeContainer.nestedUnkeyedContainer(forKey: .complianceStatus)
            for stringfilterlist0 in complianceStatus {
                try complianceStatusContainer.encode(stringfilterlist0)
            }
        }
        if let confidence = confidence {
            var confidenceContainer = encodeContainer.nestedUnkeyedContainer(forKey: .confidence)
            for numberfilterlist0 in confidence {
                try confidenceContainer.encode(numberfilterlist0)
            }
        }
        if let createdAt = createdAt {
            var createdAtContainer = encodeContainer.nestedUnkeyedContainer(forKey: .createdAt)
            for datefilterlist0 in createdAt {
                try createdAtContainer.encode(datefilterlist0)
            }
        }
        if let criticality = criticality {
            var criticalityContainer = encodeContainer.nestedUnkeyedContainer(forKey: .criticality)
            for numberfilterlist0 in criticality {
                try criticalityContainer.encode(numberfilterlist0)
            }
        }
        if let description = description {
            var descriptionContainer = encodeContainer.nestedUnkeyedContainer(forKey: .description)
            for stringfilterlist0 in description {
                try descriptionContainer.encode(stringfilterlist0)
            }
        }
        if let findingProviderFieldsConfidence = findingProviderFieldsConfidence {
            var findingProviderFieldsConfidenceContainer = encodeContainer.nestedUnkeyedContainer(forKey: .findingProviderFieldsConfidence)
            for numberfilterlist0 in findingProviderFieldsConfidence {
                try findingProviderFieldsConfidenceContainer.encode(numberfilterlist0)
            }
        }
        if let findingProviderFieldsCriticality = findingProviderFieldsCriticality {
            var findingProviderFieldsCriticalityContainer = encodeContainer.nestedUnkeyedContainer(forKey: .findingProviderFieldsCriticality)
            for numberfilterlist0 in findingProviderFieldsCriticality {
                try findingProviderFieldsCriticalityContainer.encode(numberfilterlist0)
            }
        }
        if let findingProviderFieldsRelatedFindingsId = findingProviderFieldsRelatedFindingsId {
            var findingProviderFieldsRelatedFindingsIdContainer = encodeContainer.nestedUnkeyedContainer(forKey: .findingProviderFieldsRelatedFindingsId)
            for stringfilterlist0 in findingProviderFieldsRelatedFindingsId {
                try findingProviderFieldsRelatedFindingsIdContainer.encode(stringfilterlist0)
            }
        }
        if let findingProviderFieldsRelatedFindingsProductArn = findingProviderFieldsRelatedFindingsProductArn {
            var findingProviderFieldsRelatedFindingsProductArnContainer = encodeContainer.nestedUnkeyedContainer(forKey: .findingProviderFieldsRelatedFindingsProductArn)
            for stringfilterlist0 in findingProviderFieldsRelatedFindingsProductArn {
                try findingProviderFieldsRelatedFindingsProductArnContainer.encode(stringfilterlist0)
            }
        }
        if let findingProviderFieldsSeverityLabel = findingProviderFieldsSeverityLabel {
            var findingProviderFieldsSeverityLabelContainer = encodeContainer.nestedUnkeyedContainer(forKey: .findingProviderFieldsSeverityLabel)
            for stringfilterlist0 in findingProviderFieldsSeverityLabel {
                try findingProviderFieldsSeverityLabelContainer.encode(stringfilterlist0)
            }
        }
        if let findingProviderFieldsSeverityOriginal = findingProviderFieldsSeverityOriginal {
            var findingProviderFieldsSeverityOriginalContainer = encodeContainer.nestedUnkeyedContainer(forKey: .findingProviderFieldsSeverityOriginal)
            for stringfilterlist0 in findingProviderFieldsSeverityOriginal {
                try findingProviderFieldsSeverityOriginalContainer.encode(stringfilterlist0)
            }
        }
        if let findingProviderFieldsTypes = findingProviderFieldsTypes {
            var findingProviderFieldsTypesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .findingProviderFieldsTypes)
            for stringfilterlist0 in findingProviderFieldsTypes {
                try findingProviderFieldsTypesContainer.encode(stringfilterlist0)
            }
        }
        if let firstObservedAt = firstObservedAt {
            var firstObservedAtContainer = encodeContainer.nestedUnkeyedContainer(forKey: .firstObservedAt)
            for datefilterlist0 in firstObservedAt {
                try firstObservedAtContainer.encode(datefilterlist0)
            }
        }
        if let generatorId = generatorId {
            var generatorIdContainer = encodeContainer.nestedUnkeyedContainer(forKey: .generatorId)
            for stringfilterlist0 in generatorId {
                try generatorIdContainer.encode(stringfilterlist0)
            }
        }
        if let id = id {
            var idContainer = encodeContainer.nestedUnkeyedContainer(forKey: .id)
            for stringfilterlist0 in id {
                try idContainer.encode(stringfilterlist0)
            }
        }
        if let keyword = keyword {
            var keywordContainer = encodeContainer.nestedUnkeyedContainer(forKey: .keyword)
            for keywordfilterlist0 in keyword {
                try keywordContainer.encode(keywordfilterlist0)
            }
        }
        if let lastObservedAt = lastObservedAt {
            var lastObservedAtContainer = encodeContainer.nestedUnkeyedContainer(forKey: .lastObservedAt)
            for datefilterlist0 in lastObservedAt {
                try lastObservedAtContainer.encode(datefilterlist0)
            }
        }
        if let malwareName = malwareName {
            var malwareNameContainer = encodeContainer.nestedUnkeyedContainer(forKey: .malwareName)
            for stringfilterlist0 in malwareName {
                try malwareNameContainer.encode(stringfilterlist0)
            }
        }
        if let malwarePath = malwarePath {
            var malwarePathContainer = encodeContainer.nestedUnkeyedContainer(forKey: .malwarePath)
            for stringfilterlist0 in malwarePath {
                try malwarePathContainer.encode(stringfilterlist0)
            }
        }
        if let malwareState = malwareState {
            var malwareStateContainer = encodeContainer.nestedUnkeyedContainer(forKey: .malwareState)
            for stringfilterlist0 in malwareState {
                try malwareStateContainer.encode(stringfilterlist0)
            }
        }
        if let malwareType = malwareType {
            var malwareTypeContainer = encodeContainer.nestedUnkeyedContainer(forKey: .malwareType)
            for stringfilterlist0 in malwareType {
                try malwareTypeContainer.encode(stringfilterlist0)
            }
        }
        if let networkDestinationDomain = networkDestinationDomain {
            var networkDestinationDomainContainer = encodeContainer.nestedUnkeyedContainer(forKey: .networkDestinationDomain)
            for stringfilterlist0 in networkDestinationDomain {
                try networkDestinationDomainContainer.encode(stringfilterlist0)
            }
        }
        if let networkDestinationIpV4 = networkDestinationIpV4 {
            var networkDestinationIpV4Container = encodeContainer.nestedUnkeyedContainer(forKey: .networkDestinationIpV4)
            for ipfilterlist0 in networkDestinationIpV4 {
                try networkDestinationIpV4Container.encode(ipfilterlist0)
            }
        }
        if let networkDestinationIpV6 = networkDestinationIpV6 {
            var networkDestinationIpV6Container = encodeContainer.nestedUnkeyedContainer(forKey: .networkDestinationIpV6)
            for ipfilterlist0 in networkDestinationIpV6 {
                try networkDestinationIpV6Container.encode(ipfilterlist0)
            }
        }
        if let networkDestinationPort = networkDestinationPort {
            var networkDestinationPortContainer = encodeContainer.nestedUnkeyedContainer(forKey: .networkDestinationPort)
            for numberfilterlist0 in networkDestinationPort {
                try networkDestinationPortContainer.encode(numberfilterlist0)
            }
        }
        if let networkDirection = networkDirection {
            var networkDirectionContainer = encodeContainer.nestedUnkeyedContainer(forKey: .networkDirection)
            for stringfilterlist0 in networkDirection {
                try networkDirectionContainer.encode(stringfilterlist0)
            }
        }
        if let networkProtocol = networkProtocol {
            var networkProtocolContainer = encodeContainer.nestedUnkeyedContainer(forKey: .networkProtocol)
            for stringfilterlist0 in networkProtocol {
                try networkProtocolContainer.encode(stringfilterlist0)
            }
        }
        if let networkSourceDomain = networkSourceDomain {
            var networkSourceDomainContainer = encodeContainer.nestedUnkeyedContainer(forKey: .networkSourceDomain)
            for stringfilterlist0 in networkSourceDomain {
                try networkSourceDomainContainer.encode(stringfilterlist0)
            }
        }
        if let networkSourceIpV4 = networkSourceIpV4 {
            var networkSourceIpV4Container = encodeContainer.nestedUnkeyedContainer(forKey: .networkSourceIpV4)
            for ipfilterlist0 in networkSourceIpV4 {
                try networkSourceIpV4Container.encode(ipfilterlist0)
            }
        }
        if let networkSourceIpV6 = networkSourceIpV6 {
            var networkSourceIpV6Container = encodeContainer.nestedUnkeyedContainer(forKey: .networkSourceIpV6)
            for ipfilterlist0 in networkSourceIpV6 {
                try networkSourceIpV6Container.encode(ipfilterlist0)
            }
        }
        if let networkSourceMac = networkSourceMac {
            var networkSourceMacContainer = encodeContainer.nestedUnkeyedContainer(forKey: .networkSourceMac)
            for stringfilterlist0 in networkSourceMac {
                try networkSourceMacContainer.encode(stringfilterlist0)
            }
        }
        if let networkSourcePort = networkSourcePort {
            var networkSourcePortContainer = encodeContainer.nestedUnkeyedContainer(forKey: .networkSourcePort)
            for numberfilterlist0 in networkSourcePort {
                try networkSourcePortContainer.encode(numberfilterlist0)
            }
        }
        if let noteText = noteText {
            var noteTextContainer = encodeContainer.nestedUnkeyedContainer(forKey: .noteText)
            for stringfilterlist0 in noteText {
                try noteTextContainer.encode(stringfilterlist0)
            }
        }
        if let noteUpdatedAt = noteUpdatedAt {
            var noteUpdatedAtContainer = encodeContainer.nestedUnkeyedContainer(forKey: .noteUpdatedAt)
            for datefilterlist0 in noteUpdatedAt {
                try noteUpdatedAtContainer.encode(datefilterlist0)
            }
        }
        if let noteUpdatedBy = noteUpdatedBy {
            var noteUpdatedByContainer = encodeContainer.nestedUnkeyedContainer(forKey: .noteUpdatedBy)
            for stringfilterlist0 in noteUpdatedBy {
                try noteUpdatedByContainer.encode(stringfilterlist0)
            }
        }
        if let processLaunchedAt = processLaunchedAt {
            var processLaunchedAtContainer = encodeContainer.nestedUnkeyedContainer(forKey: .processLaunchedAt)
            for datefilterlist0 in processLaunchedAt {
                try processLaunchedAtContainer.encode(datefilterlist0)
            }
        }
        if let processName = processName {
            var processNameContainer = encodeContainer.nestedUnkeyedContainer(forKey: .processName)
            for stringfilterlist0 in processName {
                try processNameContainer.encode(stringfilterlist0)
            }
        }
        if let processParentPid = processParentPid {
            var processParentPidContainer = encodeContainer.nestedUnkeyedContainer(forKey: .processParentPid)
            for numberfilterlist0 in processParentPid {
                try processParentPidContainer.encode(numberfilterlist0)
            }
        }
        if let processPath = processPath {
            var processPathContainer = encodeContainer.nestedUnkeyedContainer(forKey: .processPath)
            for stringfilterlist0 in processPath {
                try processPathContainer.encode(stringfilterlist0)
            }
        }
        if let processPid = processPid {
            var processPidContainer = encodeContainer.nestedUnkeyedContainer(forKey: .processPid)
            for numberfilterlist0 in processPid {
                try processPidContainer.encode(numberfilterlist0)
            }
        }
        if let processTerminatedAt = processTerminatedAt {
            var processTerminatedAtContainer = encodeContainer.nestedUnkeyedContainer(forKey: .processTerminatedAt)
            for datefilterlist0 in processTerminatedAt {
                try processTerminatedAtContainer.encode(datefilterlist0)
            }
        }
        if let productArn = productArn {
            var productArnContainer = encodeContainer.nestedUnkeyedContainer(forKey: .productArn)
            for stringfilterlist0 in productArn {
                try productArnContainer.encode(stringfilterlist0)
            }
        }
        if let productFields = productFields {
            var productFieldsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .productFields)
            for mapfilterlist0 in productFields {
                try productFieldsContainer.encode(mapfilterlist0)
            }
        }
        if let productName = productName {
            var productNameContainer = encodeContainer.nestedUnkeyedContainer(forKey: .productName)
            for stringfilterlist0 in productName {
                try productNameContainer.encode(stringfilterlist0)
            }
        }
        if let recommendationText = recommendationText {
            var recommendationTextContainer = encodeContainer.nestedUnkeyedContainer(forKey: .recommendationText)
            for stringfilterlist0 in recommendationText {
                try recommendationTextContainer.encode(stringfilterlist0)
            }
        }
        if let recordState = recordState {
            var recordStateContainer = encodeContainer.nestedUnkeyedContainer(forKey: .recordState)
            for stringfilterlist0 in recordState {
                try recordStateContainer.encode(stringfilterlist0)
            }
        }
        if let region = region {
            var regionContainer = encodeContainer.nestedUnkeyedContainer(forKey: .region)
            for stringfilterlist0 in region {
                try regionContainer.encode(stringfilterlist0)
            }
        }
        if let relatedFindingsId = relatedFindingsId {
            var relatedFindingsIdContainer = encodeContainer.nestedUnkeyedContainer(forKey: .relatedFindingsId)
            for stringfilterlist0 in relatedFindingsId {
                try relatedFindingsIdContainer.encode(stringfilterlist0)
            }
        }
        if let relatedFindingsProductArn = relatedFindingsProductArn {
            var relatedFindingsProductArnContainer = encodeContainer.nestedUnkeyedContainer(forKey: .relatedFindingsProductArn)
            for stringfilterlist0 in relatedFindingsProductArn {
                try relatedFindingsProductArnContainer.encode(stringfilterlist0)
            }
        }
        if let resourceAwsEc2InstanceIamInstanceProfileArn = resourceAwsEc2InstanceIamInstanceProfileArn {
            var resourceAwsEc2InstanceIamInstanceProfileArnContainer = encodeContainer.nestedUnkeyedContainer(forKey: .resourceAwsEc2InstanceIamInstanceProfileArn)
            for stringfilterlist0 in resourceAwsEc2InstanceIamInstanceProfileArn {
                try resourceAwsEc2InstanceIamInstanceProfileArnContainer.encode(stringfilterlist0)
            }
        }
        if let resourceAwsEc2InstanceImageId = resourceAwsEc2InstanceImageId {
            var resourceAwsEc2InstanceImageIdContainer = encodeContainer.nestedUnkeyedContainer(forKey: .resourceAwsEc2InstanceImageId)
            for stringfilterlist0 in resourceAwsEc2InstanceImageId {
                try resourceAwsEc2InstanceImageIdContainer.encode(stringfilterlist0)
            }
        }
        if let resourceAwsEc2InstanceIpV4Addresses = resourceAwsEc2InstanceIpV4Addresses {
            var resourceAwsEc2InstanceIpV4AddressesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .resourceAwsEc2InstanceIpV4Addresses)
            for ipfilterlist0 in resourceAwsEc2InstanceIpV4Addresses {
                try resourceAwsEc2InstanceIpV4AddressesContainer.encode(ipfilterlist0)
            }
        }
        if let resourceAwsEc2InstanceIpV6Addresses = resourceAwsEc2InstanceIpV6Addresses {
            var resourceAwsEc2InstanceIpV6AddressesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .resourceAwsEc2InstanceIpV6Addresses)
            for ipfilterlist0 in resourceAwsEc2InstanceIpV6Addresses {
                try resourceAwsEc2InstanceIpV6AddressesContainer.encode(ipfilterlist0)
            }
        }
        if let resourceAwsEc2InstanceKeyName = resourceAwsEc2InstanceKeyName {
            var resourceAwsEc2InstanceKeyNameContainer = encodeContainer.nestedUnkeyedContainer(forKey: .resourceAwsEc2InstanceKeyName)
            for stringfilterlist0 in resourceAwsEc2InstanceKeyName {
                try resourceAwsEc2InstanceKeyNameContainer.encode(stringfilterlist0)
            }
        }
        if let resourceAwsEc2InstanceLaunchedAt = resourceAwsEc2InstanceLaunchedAt {
            var resourceAwsEc2InstanceLaunchedAtContainer = encodeContainer.nestedUnkeyedContainer(forKey: .resourceAwsEc2InstanceLaunchedAt)
            for datefilterlist0 in resourceAwsEc2InstanceLaunchedAt {
                try resourceAwsEc2InstanceLaunchedAtContainer.encode(datefilterlist0)
            }
        }
        if let resourceAwsEc2InstanceSubnetId = resourceAwsEc2InstanceSubnetId {
            var resourceAwsEc2InstanceSubnetIdContainer = encodeContainer.nestedUnkeyedContainer(forKey: .resourceAwsEc2InstanceSubnetId)
            for stringfilterlist0 in resourceAwsEc2InstanceSubnetId {
                try resourceAwsEc2InstanceSubnetIdContainer.encode(stringfilterlist0)
            }
        }
        if let resourceAwsEc2InstanceType = resourceAwsEc2InstanceType {
            var resourceAwsEc2InstanceTypeContainer = encodeContainer.nestedUnkeyedContainer(forKey: .resourceAwsEc2InstanceType)
            for stringfilterlist0 in resourceAwsEc2InstanceType {
                try resourceAwsEc2InstanceTypeContainer.encode(stringfilterlist0)
            }
        }
        if let resourceAwsEc2InstanceVpcId = resourceAwsEc2InstanceVpcId {
            var resourceAwsEc2InstanceVpcIdContainer = encodeContainer.nestedUnkeyedContainer(forKey: .resourceAwsEc2InstanceVpcId)
            for stringfilterlist0 in resourceAwsEc2InstanceVpcId {
                try resourceAwsEc2InstanceVpcIdContainer.encode(stringfilterlist0)
            }
        }
        if let resourceAwsIamAccessKeyCreatedAt = resourceAwsIamAccessKeyCreatedAt {
            var resourceAwsIamAccessKeyCreatedAtContainer = encodeContainer.nestedUnkeyedContainer(forKey: .resourceAwsIamAccessKeyCreatedAt)
            for datefilterlist0 in resourceAwsIamAccessKeyCreatedAt {
                try resourceAwsIamAccessKeyCreatedAtContainer.encode(datefilterlist0)
            }
        }
        if let resourceAwsIamAccessKeyPrincipalName = resourceAwsIamAccessKeyPrincipalName {
            var resourceAwsIamAccessKeyPrincipalNameContainer = encodeContainer.nestedUnkeyedContainer(forKey: .resourceAwsIamAccessKeyPrincipalName)
            for stringfilterlist0 in resourceAwsIamAccessKeyPrincipalName {
                try resourceAwsIamAccessKeyPrincipalNameContainer.encode(stringfilterlist0)
            }
        }
        if let resourceAwsIamAccessKeyStatus = resourceAwsIamAccessKeyStatus {
            var resourceAwsIamAccessKeyStatusContainer = encodeContainer.nestedUnkeyedContainer(forKey: .resourceAwsIamAccessKeyStatus)
            for stringfilterlist0 in resourceAwsIamAccessKeyStatus {
                try resourceAwsIamAccessKeyStatusContainer.encode(stringfilterlist0)
            }
        }
        if let resourceAwsIamAccessKeyUserName = resourceAwsIamAccessKeyUserName {
            var resourceAwsIamAccessKeyUserNameContainer = encodeContainer.nestedUnkeyedContainer(forKey: .resourceAwsIamAccessKeyUserName)
            for stringfilterlist0 in resourceAwsIamAccessKeyUserName {
                try resourceAwsIamAccessKeyUserNameContainer.encode(stringfilterlist0)
            }
        }
        if let resourceAwsIamUserUserName = resourceAwsIamUserUserName {
            var resourceAwsIamUserUserNameContainer = encodeContainer.nestedUnkeyedContainer(forKey: .resourceAwsIamUserUserName)
            for stringfilterlist0 in resourceAwsIamUserUserName {
                try resourceAwsIamUserUserNameContainer.encode(stringfilterlist0)
            }
        }
        if let resourceAwsS3BucketOwnerId = resourceAwsS3BucketOwnerId {
            var resourceAwsS3BucketOwnerIdContainer = encodeContainer.nestedUnkeyedContainer(forKey: .resourceAwsS3BucketOwnerId)
            for stringfilterlist0 in resourceAwsS3BucketOwnerId {
                try resourceAwsS3BucketOwnerIdContainer.encode(stringfilterlist0)
            }
        }
        if let resourceAwsS3BucketOwnerName = resourceAwsS3BucketOwnerName {
            var resourceAwsS3BucketOwnerNameContainer = encodeContainer.nestedUnkeyedContainer(forKey: .resourceAwsS3BucketOwnerName)
            for stringfilterlist0 in resourceAwsS3BucketOwnerName {
                try resourceAwsS3BucketOwnerNameContainer.encode(stringfilterlist0)
            }
        }
        if let resourceContainerImageId = resourceContainerImageId {
            var resourceContainerImageIdContainer = encodeContainer.nestedUnkeyedContainer(forKey: .resourceContainerImageId)
            for stringfilterlist0 in resourceContainerImageId {
                try resourceContainerImageIdContainer.encode(stringfilterlist0)
            }
        }
        if let resourceContainerImageName = resourceContainerImageName {
            var resourceContainerImageNameContainer = encodeContainer.nestedUnkeyedContainer(forKey: .resourceContainerImageName)
            for stringfilterlist0 in resourceContainerImageName {
                try resourceContainerImageNameContainer.encode(stringfilterlist0)
            }
        }
        if let resourceContainerLaunchedAt = resourceContainerLaunchedAt {
            var resourceContainerLaunchedAtContainer = encodeContainer.nestedUnkeyedContainer(forKey: .resourceContainerLaunchedAt)
            for datefilterlist0 in resourceContainerLaunchedAt {
                try resourceContainerLaunchedAtContainer.encode(datefilterlist0)
            }
        }
        if let resourceContainerName = resourceContainerName {
            var resourceContainerNameContainer = encodeContainer.nestedUnkeyedContainer(forKey: .resourceContainerName)
            for stringfilterlist0 in resourceContainerName {
                try resourceContainerNameContainer.encode(stringfilterlist0)
            }
        }
        if let resourceDetailsOther = resourceDetailsOther {
            var resourceDetailsOtherContainer = encodeContainer.nestedUnkeyedContainer(forKey: .resourceDetailsOther)
            for mapfilterlist0 in resourceDetailsOther {
                try resourceDetailsOtherContainer.encode(mapfilterlist0)
            }
        }
        if let resourceId = resourceId {
            var resourceIdContainer = encodeContainer.nestedUnkeyedContainer(forKey: .resourceId)
            for stringfilterlist0 in resourceId {
                try resourceIdContainer.encode(stringfilterlist0)
            }
        }
        if let resourcePartition = resourcePartition {
            var resourcePartitionContainer = encodeContainer.nestedUnkeyedContainer(forKey: .resourcePartition)
            for stringfilterlist0 in resourcePartition {
                try resourcePartitionContainer.encode(stringfilterlist0)
            }
        }
        if let resourceRegion = resourceRegion {
            var resourceRegionContainer = encodeContainer.nestedUnkeyedContainer(forKey: .resourceRegion)
            for stringfilterlist0 in resourceRegion {
                try resourceRegionContainer.encode(stringfilterlist0)
            }
        }
        if let resourceTags = resourceTags {
            var resourceTagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .resourceTags)
            for mapfilterlist0 in resourceTags {
                try resourceTagsContainer.encode(mapfilterlist0)
            }
        }
        if let resourceType = resourceType {
            var resourceTypeContainer = encodeContainer.nestedUnkeyedContainer(forKey: .resourceType)
            for stringfilterlist0 in resourceType {
                try resourceTypeContainer.encode(stringfilterlist0)
            }
        }
        if let sample = sample {
            var sampleContainer = encodeContainer.nestedUnkeyedContainer(forKey: .sample)
            for booleanfilterlist0 in sample {
                try sampleContainer.encode(booleanfilterlist0)
            }
        }
        if let severityLabel = severityLabel {
            var severityLabelContainer = encodeContainer.nestedUnkeyedContainer(forKey: .severityLabel)
            for stringfilterlist0 in severityLabel {
                try severityLabelContainer.encode(stringfilterlist0)
            }
        }
        if let severityNormalized = severityNormalized {
            var severityNormalizedContainer = encodeContainer.nestedUnkeyedContainer(forKey: .severityNormalized)
            for numberfilterlist0 in severityNormalized {
                try severityNormalizedContainer.encode(numberfilterlist0)
            }
        }
        if let severityProduct = severityProduct {
            var severityProductContainer = encodeContainer.nestedUnkeyedContainer(forKey: .severityProduct)
            for numberfilterlist0 in severityProduct {
                try severityProductContainer.encode(numberfilterlist0)
            }
        }
        if let sourceUrl = sourceUrl {
            var sourceUrlContainer = encodeContainer.nestedUnkeyedContainer(forKey: .sourceUrl)
            for stringfilterlist0 in sourceUrl {
                try sourceUrlContainer.encode(stringfilterlist0)
            }
        }
        if let threatIntelIndicatorCategory = threatIntelIndicatorCategory {
            var threatIntelIndicatorCategoryContainer = encodeContainer.nestedUnkeyedContainer(forKey: .threatIntelIndicatorCategory)
            for stringfilterlist0 in threatIntelIndicatorCategory {
                try threatIntelIndicatorCategoryContainer.encode(stringfilterlist0)
            }
        }
        if let threatIntelIndicatorLastObservedAt = threatIntelIndicatorLastObservedAt {
            var threatIntelIndicatorLastObservedAtContainer = encodeContainer.nestedUnkeyedContainer(forKey: .threatIntelIndicatorLastObservedAt)
            for datefilterlist0 in threatIntelIndicatorLastObservedAt {
                try threatIntelIndicatorLastObservedAtContainer.encode(datefilterlist0)
            }
        }
        if let threatIntelIndicatorSource = threatIntelIndicatorSource {
            var threatIntelIndicatorSourceContainer = encodeContainer.nestedUnkeyedContainer(forKey: .threatIntelIndicatorSource)
            for stringfilterlist0 in threatIntelIndicatorSource {
                try threatIntelIndicatorSourceContainer.encode(stringfilterlist0)
            }
        }
        if let threatIntelIndicatorSourceUrl = threatIntelIndicatorSourceUrl {
            var threatIntelIndicatorSourceUrlContainer = encodeContainer.nestedUnkeyedContainer(forKey: .threatIntelIndicatorSourceUrl)
            for stringfilterlist0 in threatIntelIndicatorSourceUrl {
                try threatIntelIndicatorSourceUrlContainer.encode(stringfilterlist0)
            }
        }
        if let threatIntelIndicatorType = threatIntelIndicatorType {
            var threatIntelIndicatorTypeContainer = encodeContainer.nestedUnkeyedContainer(forKey: .threatIntelIndicatorType)
            for stringfilterlist0 in threatIntelIndicatorType {
                try threatIntelIndicatorTypeContainer.encode(stringfilterlist0)
            }
        }
        if let threatIntelIndicatorValue = threatIntelIndicatorValue {
            var threatIntelIndicatorValueContainer = encodeContainer.nestedUnkeyedContainer(forKey: .threatIntelIndicatorValue)
            for stringfilterlist0 in threatIntelIndicatorValue {
                try threatIntelIndicatorValueContainer.encode(stringfilterlist0)
            }
        }
        if let title = title {
            var titleContainer = encodeContainer.nestedUnkeyedContainer(forKey: .title)
            for stringfilterlist0 in title {
                try titleContainer.encode(stringfilterlist0)
            }
        }
        if let type = type {
            var typeContainer = encodeContainer.nestedUnkeyedContainer(forKey: .type)
            for stringfilterlist0 in type {
                try typeContainer.encode(stringfilterlist0)
            }
        }
        if let updatedAt = updatedAt {
            var updatedAtContainer = encodeContainer.nestedUnkeyedContainer(forKey: .updatedAt)
            for datefilterlist0 in updatedAt {
                try updatedAtContainer.encode(datefilterlist0)
            }
        }
        if let userDefinedFields = userDefinedFields {
            var userDefinedFieldsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .userDefinedFields)
            for mapfilterlist0 in userDefinedFields {
                try userDefinedFieldsContainer.encode(mapfilterlist0)
            }
        }
        if let verificationState = verificationState {
            var verificationStateContainer = encodeContainer.nestedUnkeyedContainer(forKey: .verificationState)
            for stringfilterlist0 in verificationState {
                try verificationStateContainer.encode(stringfilterlist0)
            }
        }
        if let workflowState = workflowState {
            var workflowStateContainer = encodeContainer.nestedUnkeyedContainer(forKey: .workflowState)
            for stringfilterlist0 in workflowState {
                try workflowStateContainer.encode(stringfilterlist0)
            }
        }
        if let workflowStatus = workflowStatus {
            var workflowStatusContainer = encodeContainer.nestedUnkeyedContainer(forKey: .workflowStatus)
            for stringfilterlist0 in workflowStatus {
                try workflowStatusContainer.encode(stringfilterlist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let productArnContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.StringFilter?].self, forKey: .productArn)
        var productArnDecoded0:[SecurityHubClientTypes.StringFilter]? = nil
        if let productArnContainer = productArnContainer {
            productArnDecoded0 = [SecurityHubClientTypes.StringFilter]()
            for structure0 in productArnContainer {
                if let structure0 = structure0 {
                    productArnDecoded0?.append(structure0)
                }
            }
        }
        productArn = productArnDecoded0
        let awsAccountIdContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.StringFilter?].self, forKey: .awsAccountId)
        var awsAccountIdDecoded0:[SecurityHubClientTypes.StringFilter]? = nil
        if let awsAccountIdContainer = awsAccountIdContainer {
            awsAccountIdDecoded0 = [SecurityHubClientTypes.StringFilter]()
            for structure0 in awsAccountIdContainer {
                if let structure0 = structure0 {
                    awsAccountIdDecoded0?.append(structure0)
                }
            }
        }
        awsAccountId = awsAccountIdDecoded0
        let idContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.StringFilter?].self, forKey: .id)
        var idDecoded0:[SecurityHubClientTypes.StringFilter]? = nil
        if let idContainer = idContainer {
            idDecoded0 = [SecurityHubClientTypes.StringFilter]()
            for structure0 in idContainer {
                if let structure0 = structure0 {
                    idDecoded0?.append(structure0)
                }
            }
        }
        id = idDecoded0
        let generatorIdContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.StringFilter?].self, forKey: .generatorId)
        var generatorIdDecoded0:[SecurityHubClientTypes.StringFilter]? = nil
        if let generatorIdContainer = generatorIdContainer {
            generatorIdDecoded0 = [SecurityHubClientTypes.StringFilter]()
            for structure0 in generatorIdContainer {
                if let structure0 = structure0 {
                    generatorIdDecoded0?.append(structure0)
                }
            }
        }
        generatorId = generatorIdDecoded0
        let regionContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.StringFilter?].self, forKey: .region)
        var regionDecoded0:[SecurityHubClientTypes.StringFilter]? = nil
        if let regionContainer = regionContainer {
            regionDecoded0 = [SecurityHubClientTypes.StringFilter]()
            for structure0 in regionContainer {
                if let structure0 = structure0 {
                    regionDecoded0?.append(structure0)
                }
            }
        }
        region = regionDecoded0
        let typeContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.StringFilter?].self, forKey: .type)
        var typeDecoded0:[SecurityHubClientTypes.StringFilter]? = nil
        if let typeContainer = typeContainer {
            typeDecoded0 = [SecurityHubClientTypes.StringFilter]()
            for structure0 in typeContainer {
                if let structure0 = structure0 {
                    typeDecoded0?.append(structure0)
                }
            }
        }
        type = typeDecoded0
        let firstObservedAtContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.DateFilter?].self, forKey: .firstObservedAt)
        var firstObservedAtDecoded0:[SecurityHubClientTypes.DateFilter]? = nil
        if let firstObservedAtContainer = firstObservedAtContainer {
            firstObservedAtDecoded0 = [SecurityHubClientTypes.DateFilter]()
            for structure0 in firstObservedAtContainer {
                if let structure0 = structure0 {
                    firstObservedAtDecoded0?.append(structure0)
                }
            }
        }
        firstObservedAt = firstObservedAtDecoded0
        let lastObservedAtContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.DateFilter?].self, forKey: .lastObservedAt)
        var lastObservedAtDecoded0:[SecurityHubClientTypes.DateFilter]? = nil
        if let lastObservedAtContainer = lastObservedAtContainer {
            lastObservedAtDecoded0 = [SecurityHubClientTypes.DateFilter]()
            for structure0 in lastObservedAtContainer {
                if let structure0 = structure0 {
                    lastObservedAtDecoded0?.append(structure0)
                }
            }
        }
        lastObservedAt = lastObservedAtDecoded0
        let createdAtContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.DateFilter?].self, forKey: .createdAt)
        var createdAtDecoded0:[SecurityHubClientTypes.DateFilter]? = nil
        if let createdAtContainer = createdAtContainer {
            createdAtDecoded0 = [SecurityHubClientTypes.DateFilter]()
            for structure0 in createdAtContainer {
                if let structure0 = structure0 {
                    createdAtDecoded0?.append(structure0)
                }
            }
        }
        createdAt = createdAtDecoded0
        let updatedAtContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.DateFilter?].self, forKey: .updatedAt)
        var updatedAtDecoded0:[SecurityHubClientTypes.DateFilter]? = nil
        if let updatedAtContainer = updatedAtContainer {
            updatedAtDecoded0 = [SecurityHubClientTypes.DateFilter]()
            for structure0 in updatedAtContainer {
                if let structure0 = structure0 {
                    updatedAtDecoded0?.append(structure0)
                }
            }
        }
        updatedAt = updatedAtDecoded0
        let severityProductContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.NumberFilter?].self, forKey: .severityProduct)
        var severityProductDecoded0:[SecurityHubClientTypes.NumberFilter]? = nil
        if let severityProductContainer = severityProductContainer {
            severityProductDecoded0 = [SecurityHubClientTypes.NumberFilter]()
            for structure0 in severityProductContainer {
                if let structure0 = structure0 {
                    severityProductDecoded0?.append(structure0)
                }
            }
        }
        severityProduct = severityProductDecoded0
        let severityNormalizedContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.NumberFilter?].self, forKey: .severityNormalized)
        var severityNormalizedDecoded0:[SecurityHubClientTypes.NumberFilter]? = nil
        if let severityNormalizedContainer = severityNormalizedContainer {
            severityNormalizedDecoded0 = [SecurityHubClientTypes.NumberFilter]()
            for structure0 in severityNormalizedContainer {
                if let structure0 = structure0 {
                    severityNormalizedDecoded0?.append(structure0)
                }
            }
        }
        severityNormalized = severityNormalizedDecoded0
        let severityLabelContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.StringFilter?].self, forKey: .severityLabel)
        var severityLabelDecoded0:[SecurityHubClientTypes.StringFilter]? = nil
        if let severityLabelContainer = severityLabelContainer {
            severityLabelDecoded0 = [SecurityHubClientTypes.StringFilter]()
            for structure0 in severityLabelContainer {
                if let structure0 = structure0 {
                    severityLabelDecoded0?.append(structure0)
                }
            }
        }
        severityLabel = severityLabelDecoded0
        let confidenceContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.NumberFilter?].self, forKey: .confidence)
        var confidenceDecoded0:[SecurityHubClientTypes.NumberFilter]? = nil
        if let confidenceContainer = confidenceContainer {
            confidenceDecoded0 = [SecurityHubClientTypes.NumberFilter]()
            for structure0 in confidenceContainer {
                if let structure0 = structure0 {
                    confidenceDecoded0?.append(structure0)
                }
            }
        }
        confidence = confidenceDecoded0
        let criticalityContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.NumberFilter?].self, forKey: .criticality)
        var criticalityDecoded0:[SecurityHubClientTypes.NumberFilter]? = nil
        if let criticalityContainer = criticalityContainer {
            criticalityDecoded0 = [SecurityHubClientTypes.NumberFilter]()
            for structure0 in criticalityContainer {
                if let structure0 = structure0 {
                    criticalityDecoded0?.append(structure0)
                }
            }
        }
        criticality = criticalityDecoded0
        let titleContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.StringFilter?].self, forKey: .title)
        var titleDecoded0:[SecurityHubClientTypes.StringFilter]? = nil
        if let titleContainer = titleContainer {
            titleDecoded0 = [SecurityHubClientTypes.StringFilter]()
            for structure0 in titleContainer {
                if let structure0 = structure0 {
                    titleDecoded0?.append(structure0)
                }
            }
        }
        title = titleDecoded0
        let descriptionContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.StringFilter?].self, forKey: .description)
        var descriptionDecoded0:[SecurityHubClientTypes.StringFilter]? = nil
        if let descriptionContainer = descriptionContainer {
            descriptionDecoded0 = [SecurityHubClientTypes.StringFilter]()
            for structure0 in descriptionContainer {
                if let structure0 = structure0 {
                    descriptionDecoded0?.append(structure0)
                }
            }
        }
        description = descriptionDecoded0
        let recommendationTextContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.StringFilter?].self, forKey: .recommendationText)
        var recommendationTextDecoded0:[SecurityHubClientTypes.StringFilter]? = nil
        if let recommendationTextContainer = recommendationTextContainer {
            recommendationTextDecoded0 = [SecurityHubClientTypes.StringFilter]()
            for structure0 in recommendationTextContainer {
                if let structure0 = structure0 {
                    recommendationTextDecoded0?.append(structure0)
                }
            }
        }
        recommendationText = recommendationTextDecoded0
        let sourceUrlContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.StringFilter?].self, forKey: .sourceUrl)
        var sourceUrlDecoded0:[SecurityHubClientTypes.StringFilter]? = nil
        if let sourceUrlContainer = sourceUrlContainer {
            sourceUrlDecoded0 = [SecurityHubClientTypes.StringFilter]()
            for structure0 in sourceUrlContainer {
                if let structure0 = structure0 {
                    sourceUrlDecoded0?.append(structure0)
                }
            }
        }
        sourceUrl = sourceUrlDecoded0
        let productFieldsContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.MapFilter?].self, forKey: .productFields)
        var productFieldsDecoded0:[SecurityHubClientTypes.MapFilter]? = nil
        if let productFieldsContainer = productFieldsContainer {
            productFieldsDecoded0 = [SecurityHubClientTypes.MapFilter]()
            for structure0 in productFieldsContainer {
                if let structure0 = structure0 {
                    productFieldsDecoded0?.append(structure0)
                }
            }
        }
        productFields = productFieldsDecoded0
        let productNameContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.StringFilter?].self, forKey: .productName)
        var productNameDecoded0:[SecurityHubClientTypes.StringFilter]? = nil
        if let productNameContainer = productNameContainer {
            productNameDecoded0 = [SecurityHubClientTypes.StringFilter]()
            for structure0 in productNameContainer {
                if let structure0 = structure0 {
                    productNameDecoded0?.append(structure0)
                }
            }
        }
        productName = productNameDecoded0
        let companyNameContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.StringFilter?].self, forKey: .companyName)
        var companyNameDecoded0:[SecurityHubClientTypes.StringFilter]? = nil
        if let companyNameContainer = companyNameContainer {
            companyNameDecoded0 = [SecurityHubClientTypes.StringFilter]()
            for structure0 in companyNameContainer {
                if let structure0 = structure0 {
                    companyNameDecoded0?.append(structure0)
                }
            }
        }
        companyName = companyNameDecoded0
        let userDefinedFieldsContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.MapFilter?].self, forKey: .userDefinedFields)
        var userDefinedFieldsDecoded0:[SecurityHubClientTypes.MapFilter]? = nil
        if let userDefinedFieldsContainer = userDefinedFieldsContainer {
            userDefinedFieldsDecoded0 = [SecurityHubClientTypes.MapFilter]()
            for structure0 in userDefinedFieldsContainer {
                if let structure0 = structure0 {
                    userDefinedFieldsDecoded0?.append(structure0)
                }
            }
        }
        userDefinedFields = userDefinedFieldsDecoded0
        let malwareNameContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.StringFilter?].self, forKey: .malwareName)
        var malwareNameDecoded0:[SecurityHubClientTypes.StringFilter]? = nil
        if let malwareNameContainer = malwareNameContainer {
            malwareNameDecoded0 = [SecurityHubClientTypes.StringFilter]()
            for structure0 in malwareNameContainer {
                if let structure0 = structure0 {
                    malwareNameDecoded0?.append(structure0)
                }
            }
        }
        malwareName = malwareNameDecoded0
        let malwareTypeContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.StringFilter?].self, forKey: .malwareType)
        var malwareTypeDecoded0:[SecurityHubClientTypes.StringFilter]? = nil
        if let malwareTypeContainer = malwareTypeContainer {
            malwareTypeDecoded0 = [SecurityHubClientTypes.StringFilter]()
            for structure0 in malwareTypeContainer {
                if let structure0 = structure0 {
                    malwareTypeDecoded0?.append(structure0)
                }
            }
        }
        malwareType = malwareTypeDecoded0
        let malwarePathContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.StringFilter?].self, forKey: .malwarePath)
        var malwarePathDecoded0:[SecurityHubClientTypes.StringFilter]? = nil
        if let malwarePathContainer = malwarePathContainer {
            malwarePathDecoded0 = [SecurityHubClientTypes.StringFilter]()
            for structure0 in malwarePathContainer {
                if let structure0 = structure0 {
                    malwarePathDecoded0?.append(structure0)
                }
            }
        }
        malwarePath = malwarePathDecoded0
        let malwareStateContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.StringFilter?].self, forKey: .malwareState)
        var malwareStateDecoded0:[SecurityHubClientTypes.StringFilter]? = nil
        if let malwareStateContainer = malwareStateContainer {
            malwareStateDecoded0 = [SecurityHubClientTypes.StringFilter]()
            for structure0 in malwareStateContainer {
                if let structure0 = structure0 {
                    malwareStateDecoded0?.append(structure0)
                }
            }
        }
        malwareState = malwareStateDecoded0
        let networkDirectionContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.StringFilter?].self, forKey: .networkDirection)
        var networkDirectionDecoded0:[SecurityHubClientTypes.StringFilter]? = nil
        if let networkDirectionContainer = networkDirectionContainer {
            networkDirectionDecoded0 = [SecurityHubClientTypes.StringFilter]()
            for structure0 in networkDirectionContainer {
                if let structure0 = structure0 {
                    networkDirectionDecoded0?.append(structure0)
                }
            }
        }
        networkDirection = networkDirectionDecoded0
        let networkProtocolContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.StringFilter?].self, forKey: .networkProtocol)
        var networkProtocolDecoded0:[SecurityHubClientTypes.StringFilter]? = nil
        if let networkProtocolContainer = networkProtocolContainer {
            networkProtocolDecoded0 = [SecurityHubClientTypes.StringFilter]()
            for structure0 in networkProtocolContainer {
                if let structure0 = structure0 {
                    networkProtocolDecoded0?.append(structure0)
                }
            }
        }
        networkProtocol = networkProtocolDecoded0
        let networkSourceIpV4Container = try containerValues.decodeIfPresent([SecurityHubClientTypes.IpFilter?].self, forKey: .networkSourceIpV4)
        var networkSourceIpV4Decoded0:[SecurityHubClientTypes.IpFilter]? = nil
        if let networkSourceIpV4Container = networkSourceIpV4Container {
            networkSourceIpV4Decoded0 = [SecurityHubClientTypes.IpFilter]()
            for structure0 in networkSourceIpV4Container {
                if let structure0 = structure0 {
                    networkSourceIpV4Decoded0?.append(structure0)
                }
            }
        }
        networkSourceIpV4 = networkSourceIpV4Decoded0
        let networkSourceIpV6Container = try containerValues.decodeIfPresent([SecurityHubClientTypes.IpFilter?].self, forKey: .networkSourceIpV6)
        var networkSourceIpV6Decoded0:[SecurityHubClientTypes.IpFilter]? = nil
        if let networkSourceIpV6Container = networkSourceIpV6Container {
            networkSourceIpV6Decoded0 = [SecurityHubClientTypes.IpFilter]()
            for structure0 in networkSourceIpV6Container {
                if let structure0 = structure0 {
                    networkSourceIpV6Decoded0?.append(structure0)
                }
            }
        }
        networkSourceIpV6 = networkSourceIpV6Decoded0
        let networkSourcePortContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.NumberFilter?].self, forKey: .networkSourcePort)
        var networkSourcePortDecoded0:[SecurityHubClientTypes.NumberFilter]? = nil
        if let networkSourcePortContainer = networkSourcePortContainer {
            networkSourcePortDecoded0 = [SecurityHubClientTypes.NumberFilter]()
            for structure0 in networkSourcePortContainer {
                if let structure0 = structure0 {
                    networkSourcePortDecoded0?.append(structure0)
                }
            }
        }
        networkSourcePort = networkSourcePortDecoded0
        let networkSourceDomainContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.StringFilter?].self, forKey: .networkSourceDomain)
        var networkSourceDomainDecoded0:[SecurityHubClientTypes.StringFilter]? = nil
        if let networkSourceDomainContainer = networkSourceDomainContainer {
            networkSourceDomainDecoded0 = [SecurityHubClientTypes.StringFilter]()
            for structure0 in networkSourceDomainContainer {
                if let structure0 = structure0 {
                    networkSourceDomainDecoded0?.append(structure0)
                }
            }
        }
        networkSourceDomain = networkSourceDomainDecoded0
        let networkSourceMacContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.StringFilter?].self, forKey: .networkSourceMac)
        var networkSourceMacDecoded0:[SecurityHubClientTypes.StringFilter]? = nil
        if let networkSourceMacContainer = networkSourceMacContainer {
            networkSourceMacDecoded0 = [SecurityHubClientTypes.StringFilter]()
            for structure0 in networkSourceMacContainer {
                if let structure0 = structure0 {
                    networkSourceMacDecoded0?.append(structure0)
                }
            }
        }
        networkSourceMac = networkSourceMacDecoded0
        let networkDestinationIpV4Container = try containerValues.decodeIfPresent([SecurityHubClientTypes.IpFilter?].self, forKey: .networkDestinationIpV4)
        var networkDestinationIpV4Decoded0:[SecurityHubClientTypes.IpFilter]? = nil
        if let networkDestinationIpV4Container = networkDestinationIpV4Container {
            networkDestinationIpV4Decoded0 = [SecurityHubClientTypes.IpFilter]()
            for structure0 in networkDestinationIpV4Container {
                if let structure0 = structure0 {
                    networkDestinationIpV4Decoded0?.append(structure0)
                }
            }
        }
        networkDestinationIpV4 = networkDestinationIpV4Decoded0
        let networkDestinationIpV6Container = try containerValues.decodeIfPresent([SecurityHubClientTypes.IpFilter?].self, forKey: .networkDestinationIpV6)
        var networkDestinationIpV6Decoded0:[SecurityHubClientTypes.IpFilter]? = nil
        if let networkDestinationIpV6Container = networkDestinationIpV6Container {
            networkDestinationIpV6Decoded0 = [SecurityHubClientTypes.IpFilter]()
            for structure0 in networkDestinationIpV6Container {
                if let structure0 = structure0 {
                    networkDestinationIpV6Decoded0?.append(structure0)
                }
            }
        }
        networkDestinationIpV6 = networkDestinationIpV6Decoded0
        let networkDestinationPortContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.NumberFilter?].self, forKey: .networkDestinationPort)
        var networkDestinationPortDecoded0:[SecurityHubClientTypes.NumberFilter]? = nil
        if let networkDestinationPortContainer = networkDestinationPortContainer {
            networkDestinationPortDecoded0 = [SecurityHubClientTypes.NumberFilter]()
            for structure0 in networkDestinationPortContainer {
                if let structure0 = structure0 {
                    networkDestinationPortDecoded0?.append(structure0)
                }
            }
        }
        networkDestinationPort = networkDestinationPortDecoded0
        let networkDestinationDomainContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.StringFilter?].self, forKey: .networkDestinationDomain)
        var networkDestinationDomainDecoded0:[SecurityHubClientTypes.StringFilter]? = nil
        if let networkDestinationDomainContainer = networkDestinationDomainContainer {
            networkDestinationDomainDecoded0 = [SecurityHubClientTypes.StringFilter]()
            for structure0 in networkDestinationDomainContainer {
                if let structure0 = structure0 {
                    networkDestinationDomainDecoded0?.append(structure0)
                }
            }
        }
        networkDestinationDomain = networkDestinationDomainDecoded0
        let processNameContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.StringFilter?].self, forKey: .processName)
        var processNameDecoded0:[SecurityHubClientTypes.StringFilter]? = nil
        if let processNameContainer = processNameContainer {
            processNameDecoded0 = [SecurityHubClientTypes.StringFilter]()
            for structure0 in processNameContainer {
                if let structure0 = structure0 {
                    processNameDecoded0?.append(structure0)
                }
            }
        }
        processName = processNameDecoded0
        let processPathContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.StringFilter?].self, forKey: .processPath)
        var processPathDecoded0:[SecurityHubClientTypes.StringFilter]? = nil
        if let processPathContainer = processPathContainer {
            processPathDecoded0 = [SecurityHubClientTypes.StringFilter]()
            for structure0 in processPathContainer {
                if let structure0 = structure0 {
                    processPathDecoded0?.append(structure0)
                }
            }
        }
        processPath = processPathDecoded0
        let processPidContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.NumberFilter?].self, forKey: .processPid)
        var processPidDecoded0:[SecurityHubClientTypes.NumberFilter]? = nil
        if let processPidContainer = processPidContainer {
            processPidDecoded0 = [SecurityHubClientTypes.NumberFilter]()
            for structure0 in processPidContainer {
                if let structure0 = structure0 {
                    processPidDecoded0?.append(structure0)
                }
            }
        }
        processPid = processPidDecoded0
        let processParentPidContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.NumberFilter?].self, forKey: .processParentPid)
        var processParentPidDecoded0:[SecurityHubClientTypes.NumberFilter]? = nil
        if let processParentPidContainer = processParentPidContainer {
            processParentPidDecoded0 = [SecurityHubClientTypes.NumberFilter]()
            for structure0 in processParentPidContainer {
                if let structure0 = structure0 {
                    processParentPidDecoded0?.append(structure0)
                }
            }
        }
        processParentPid = processParentPidDecoded0
        let processLaunchedAtContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.DateFilter?].self, forKey: .processLaunchedAt)
        var processLaunchedAtDecoded0:[SecurityHubClientTypes.DateFilter]? = nil
        if let processLaunchedAtContainer = processLaunchedAtContainer {
            processLaunchedAtDecoded0 = [SecurityHubClientTypes.DateFilter]()
            for structure0 in processLaunchedAtContainer {
                if let structure0 = structure0 {
                    processLaunchedAtDecoded0?.append(structure0)
                }
            }
        }
        processLaunchedAt = processLaunchedAtDecoded0
        let processTerminatedAtContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.DateFilter?].self, forKey: .processTerminatedAt)
        var processTerminatedAtDecoded0:[SecurityHubClientTypes.DateFilter]? = nil
        if let processTerminatedAtContainer = processTerminatedAtContainer {
            processTerminatedAtDecoded0 = [SecurityHubClientTypes.DateFilter]()
            for structure0 in processTerminatedAtContainer {
                if let structure0 = structure0 {
                    processTerminatedAtDecoded0?.append(structure0)
                }
            }
        }
        processTerminatedAt = processTerminatedAtDecoded0
        let threatIntelIndicatorTypeContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.StringFilter?].self, forKey: .threatIntelIndicatorType)
        var threatIntelIndicatorTypeDecoded0:[SecurityHubClientTypes.StringFilter]? = nil
        if let threatIntelIndicatorTypeContainer = threatIntelIndicatorTypeContainer {
            threatIntelIndicatorTypeDecoded0 = [SecurityHubClientTypes.StringFilter]()
            for structure0 in threatIntelIndicatorTypeContainer {
                if let structure0 = structure0 {
                    threatIntelIndicatorTypeDecoded0?.append(structure0)
                }
            }
        }
        threatIntelIndicatorType = threatIntelIndicatorTypeDecoded0
        let threatIntelIndicatorValueContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.StringFilter?].self, forKey: .threatIntelIndicatorValue)
        var threatIntelIndicatorValueDecoded0:[SecurityHubClientTypes.StringFilter]? = nil
        if let threatIntelIndicatorValueContainer = threatIntelIndicatorValueContainer {
            threatIntelIndicatorValueDecoded0 = [SecurityHubClientTypes.StringFilter]()
            for structure0 in threatIntelIndicatorValueContainer {
                if let structure0 = structure0 {
                    threatIntelIndicatorValueDecoded0?.append(structure0)
                }
            }
        }
        threatIntelIndicatorValue = threatIntelIndicatorValueDecoded0
        let threatIntelIndicatorCategoryContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.StringFilter?].self, forKey: .threatIntelIndicatorCategory)
        var threatIntelIndicatorCategoryDecoded0:[SecurityHubClientTypes.StringFilter]? = nil
        if let threatIntelIndicatorCategoryContainer = threatIntelIndicatorCategoryContainer {
            threatIntelIndicatorCategoryDecoded0 = [SecurityHubClientTypes.StringFilter]()
            for structure0 in threatIntelIndicatorCategoryContainer {
                if let structure0 = structure0 {
                    threatIntelIndicatorCategoryDecoded0?.append(structure0)
                }
            }
        }
        threatIntelIndicatorCategory = threatIntelIndicatorCategoryDecoded0
        let threatIntelIndicatorLastObservedAtContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.DateFilter?].self, forKey: .threatIntelIndicatorLastObservedAt)
        var threatIntelIndicatorLastObservedAtDecoded0:[SecurityHubClientTypes.DateFilter]? = nil
        if let threatIntelIndicatorLastObservedAtContainer = threatIntelIndicatorLastObservedAtContainer {
            threatIntelIndicatorLastObservedAtDecoded0 = [SecurityHubClientTypes.DateFilter]()
            for structure0 in threatIntelIndicatorLastObservedAtContainer {
                if let structure0 = structure0 {
                    threatIntelIndicatorLastObservedAtDecoded0?.append(structure0)
                }
            }
        }
        threatIntelIndicatorLastObservedAt = threatIntelIndicatorLastObservedAtDecoded0
        let threatIntelIndicatorSourceContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.StringFilter?].self, forKey: .threatIntelIndicatorSource)
        var threatIntelIndicatorSourceDecoded0:[SecurityHubClientTypes.StringFilter]? = nil
        if let threatIntelIndicatorSourceContainer = threatIntelIndicatorSourceContainer {
            threatIntelIndicatorSourceDecoded0 = [SecurityHubClientTypes.StringFilter]()
            for structure0 in threatIntelIndicatorSourceContainer {
                if let structure0 = structure0 {
                    threatIntelIndicatorSourceDecoded0?.append(structure0)
                }
            }
        }
        threatIntelIndicatorSource = threatIntelIndicatorSourceDecoded0
        let threatIntelIndicatorSourceUrlContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.StringFilter?].self, forKey: .threatIntelIndicatorSourceUrl)
        var threatIntelIndicatorSourceUrlDecoded0:[SecurityHubClientTypes.StringFilter]? = nil
        if let threatIntelIndicatorSourceUrlContainer = threatIntelIndicatorSourceUrlContainer {
            threatIntelIndicatorSourceUrlDecoded0 = [SecurityHubClientTypes.StringFilter]()
            for structure0 in threatIntelIndicatorSourceUrlContainer {
                if let structure0 = structure0 {
                    threatIntelIndicatorSourceUrlDecoded0?.append(structure0)
                }
            }
        }
        threatIntelIndicatorSourceUrl = threatIntelIndicatorSourceUrlDecoded0
        let resourceTypeContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.StringFilter?].self, forKey: .resourceType)
        var resourceTypeDecoded0:[SecurityHubClientTypes.StringFilter]? = nil
        if let resourceTypeContainer = resourceTypeContainer {
            resourceTypeDecoded0 = [SecurityHubClientTypes.StringFilter]()
            for structure0 in resourceTypeContainer {
                if let structure0 = structure0 {
                    resourceTypeDecoded0?.append(structure0)
                }
            }
        }
        resourceType = resourceTypeDecoded0
        let resourceIdContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.StringFilter?].self, forKey: .resourceId)
        var resourceIdDecoded0:[SecurityHubClientTypes.StringFilter]? = nil
        if let resourceIdContainer = resourceIdContainer {
            resourceIdDecoded0 = [SecurityHubClientTypes.StringFilter]()
            for structure0 in resourceIdContainer {
                if let structure0 = structure0 {
                    resourceIdDecoded0?.append(structure0)
                }
            }
        }
        resourceId = resourceIdDecoded0
        let resourcePartitionContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.StringFilter?].self, forKey: .resourcePartition)
        var resourcePartitionDecoded0:[SecurityHubClientTypes.StringFilter]? = nil
        if let resourcePartitionContainer = resourcePartitionContainer {
            resourcePartitionDecoded0 = [SecurityHubClientTypes.StringFilter]()
            for structure0 in resourcePartitionContainer {
                if let structure0 = structure0 {
                    resourcePartitionDecoded0?.append(structure0)
                }
            }
        }
        resourcePartition = resourcePartitionDecoded0
        let resourceRegionContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.StringFilter?].self, forKey: .resourceRegion)
        var resourceRegionDecoded0:[SecurityHubClientTypes.StringFilter]? = nil
        if let resourceRegionContainer = resourceRegionContainer {
            resourceRegionDecoded0 = [SecurityHubClientTypes.StringFilter]()
            for structure0 in resourceRegionContainer {
                if let structure0 = structure0 {
                    resourceRegionDecoded0?.append(structure0)
                }
            }
        }
        resourceRegion = resourceRegionDecoded0
        let resourceTagsContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.MapFilter?].self, forKey: .resourceTags)
        var resourceTagsDecoded0:[SecurityHubClientTypes.MapFilter]? = nil
        if let resourceTagsContainer = resourceTagsContainer {
            resourceTagsDecoded0 = [SecurityHubClientTypes.MapFilter]()
            for structure0 in resourceTagsContainer {
                if let structure0 = structure0 {
                    resourceTagsDecoded0?.append(structure0)
                }
            }
        }
        resourceTags = resourceTagsDecoded0
        let resourceAwsEc2InstanceTypeContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.StringFilter?].self, forKey: .resourceAwsEc2InstanceType)
        var resourceAwsEc2InstanceTypeDecoded0:[SecurityHubClientTypes.StringFilter]? = nil
        if let resourceAwsEc2InstanceTypeContainer = resourceAwsEc2InstanceTypeContainer {
            resourceAwsEc2InstanceTypeDecoded0 = [SecurityHubClientTypes.StringFilter]()
            for structure0 in resourceAwsEc2InstanceTypeContainer {
                if let structure0 = structure0 {
                    resourceAwsEc2InstanceTypeDecoded0?.append(structure0)
                }
            }
        }
        resourceAwsEc2InstanceType = resourceAwsEc2InstanceTypeDecoded0
        let resourceAwsEc2InstanceImageIdContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.StringFilter?].self, forKey: .resourceAwsEc2InstanceImageId)
        var resourceAwsEc2InstanceImageIdDecoded0:[SecurityHubClientTypes.StringFilter]? = nil
        if let resourceAwsEc2InstanceImageIdContainer = resourceAwsEc2InstanceImageIdContainer {
            resourceAwsEc2InstanceImageIdDecoded0 = [SecurityHubClientTypes.StringFilter]()
            for structure0 in resourceAwsEc2InstanceImageIdContainer {
                if let structure0 = structure0 {
                    resourceAwsEc2InstanceImageIdDecoded0?.append(structure0)
                }
            }
        }
        resourceAwsEc2InstanceImageId = resourceAwsEc2InstanceImageIdDecoded0
        let resourceAwsEc2InstanceIpV4AddressesContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.IpFilter?].self, forKey: .resourceAwsEc2InstanceIpV4Addresses)
        var resourceAwsEc2InstanceIpV4AddressesDecoded0:[SecurityHubClientTypes.IpFilter]? = nil
        if let resourceAwsEc2InstanceIpV4AddressesContainer = resourceAwsEc2InstanceIpV4AddressesContainer {
            resourceAwsEc2InstanceIpV4AddressesDecoded0 = [SecurityHubClientTypes.IpFilter]()
            for structure0 in resourceAwsEc2InstanceIpV4AddressesContainer {
                if let structure0 = structure0 {
                    resourceAwsEc2InstanceIpV4AddressesDecoded0?.append(structure0)
                }
            }
        }
        resourceAwsEc2InstanceIpV4Addresses = resourceAwsEc2InstanceIpV4AddressesDecoded0
        let resourceAwsEc2InstanceIpV6AddressesContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.IpFilter?].self, forKey: .resourceAwsEc2InstanceIpV6Addresses)
        var resourceAwsEc2InstanceIpV6AddressesDecoded0:[SecurityHubClientTypes.IpFilter]? = nil
        if let resourceAwsEc2InstanceIpV6AddressesContainer = resourceAwsEc2InstanceIpV6AddressesContainer {
            resourceAwsEc2InstanceIpV6AddressesDecoded0 = [SecurityHubClientTypes.IpFilter]()
            for structure0 in resourceAwsEc2InstanceIpV6AddressesContainer {
                if let structure0 = structure0 {
                    resourceAwsEc2InstanceIpV6AddressesDecoded0?.append(structure0)
                }
            }
        }
        resourceAwsEc2InstanceIpV6Addresses = resourceAwsEc2InstanceIpV6AddressesDecoded0
        let resourceAwsEc2InstanceKeyNameContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.StringFilter?].self, forKey: .resourceAwsEc2InstanceKeyName)
        var resourceAwsEc2InstanceKeyNameDecoded0:[SecurityHubClientTypes.StringFilter]? = nil
        if let resourceAwsEc2InstanceKeyNameContainer = resourceAwsEc2InstanceKeyNameContainer {
            resourceAwsEc2InstanceKeyNameDecoded0 = [SecurityHubClientTypes.StringFilter]()
            for structure0 in resourceAwsEc2InstanceKeyNameContainer {
                if let structure0 = structure0 {
                    resourceAwsEc2InstanceKeyNameDecoded0?.append(structure0)
                }
            }
        }
        resourceAwsEc2InstanceKeyName = resourceAwsEc2InstanceKeyNameDecoded0
        let resourceAwsEc2InstanceIamInstanceProfileArnContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.StringFilter?].self, forKey: .resourceAwsEc2InstanceIamInstanceProfileArn)
        var resourceAwsEc2InstanceIamInstanceProfileArnDecoded0:[SecurityHubClientTypes.StringFilter]? = nil
        if let resourceAwsEc2InstanceIamInstanceProfileArnContainer = resourceAwsEc2InstanceIamInstanceProfileArnContainer {
            resourceAwsEc2InstanceIamInstanceProfileArnDecoded0 = [SecurityHubClientTypes.StringFilter]()
            for structure0 in resourceAwsEc2InstanceIamInstanceProfileArnContainer {
                if let structure0 = structure0 {
                    resourceAwsEc2InstanceIamInstanceProfileArnDecoded0?.append(structure0)
                }
            }
        }
        resourceAwsEc2InstanceIamInstanceProfileArn = resourceAwsEc2InstanceIamInstanceProfileArnDecoded0
        let resourceAwsEc2InstanceVpcIdContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.StringFilter?].self, forKey: .resourceAwsEc2InstanceVpcId)
        var resourceAwsEc2InstanceVpcIdDecoded0:[SecurityHubClientTypes.StringFilter]? = nil
        if let resourceAwsEc2InstanceVpcIdContainer = resourceAwsEc2InstanceVpcIdContainer {
            resourceAwsEc2InstanceVpcIdDecoded0 = [SecurityHubClientTypes.StringFilter]()
            for structure0 in resourceAwsEc2InstanceVpcIdContainer {
                if let structure0 = structure0 {
                    resourceAwsEc2InstanceVpcIdDecoded0?.append(structure0)
                }
            }
        }
        resourceAwsEc2InstanceVpcId = resourceAwsEc2InstanceVpcIdDecoded0
        let resourceAwsEc2InstanceSubnetIdContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.StringFilter?].self, forKey: .resourceAwsEc2InstanceSubnetId)
        var resourceAwsEc2InstanceSubnetIdDecoded0:[SecurityHubClientTypes.StringFilter]? = nil
        if let resourceAwsEc2InstanceSubnetIdContainer = resourceAwsEc2InstanceSubnetIdContainer {
            resourceAwsEc2InstanceSubnetIdDecoded0 = [SecurityHubClientTypes.StringFilter]()
            for structure0 in resourceAwsEc2InstanceSubnetIdContainer {
                if let structure0 = structure0 {
                    resourceAwsEc2InstanceSubnetIdDecoded0?.append(structure0)
                }
            }
        }
        resourceAwsEc2InstanceSubnetId = resourceAwsEc2InstanceSubnetIdDecoded0
        let resourceAwsEc2InstanceLaunchedAtContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.DateFilter?].self, forKey: .resourceAwsEc2InstanceLaunchedAt)
        var resourceAwsEc2InstanceLaunchedAtDecoded0:[SecurityHubClientTypes.DateFilter]? = nil
        if let resourceAwsEc2InstanceLaunchedAtContainer = resourceAwsEc2InstanceLaunchedAtContainer {
            resourceAwsEc2InstanceLaunchedAtDecoded0 = [SecurityHubClientTypes.DateFilter]()
            for structure0 in resourceAwsEc2InstanceLaunchedAtContainer {
                if let structure0 = structure0 {
                    resourceAwsEc2InstanceLaunchedAtDecoded0?.append(structure0)
                }
            }
        }
        resourceAwsEc2InstanceLaunchedAt = resourceAwsEc2InstanceLaunchedAtDecoded0
        let resourceAwsS3BucketOwnerIdContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.StringFilter?].self, forKey: .resourceAwsS3BucketOwnerId)
        var resourceAwsS3BucketOwnerIdDecoded0:[SecurityHubClientTypes.StringFilter]? = nil
        if let resourceAwsS3BucketOwnerIdContainer = resourceAwsS3BucketOwnerIdContainer {
            resourceAwsS3BucketOwnerIdDecoded0 = [SecurityHubClientTypes.StringFilter]()
            for structure0 in resourceAwsS3BucketOwnerIdContainer {
                if let structure0 = structure0 {
                    resourceAwsS3BucketOwnerIdDecoded0?.append(structure0)
                }
            }
        }
        resourceAwsS3BucketOwnerId = resourceAwsS3BucketOwnerIdDecoded0
        let resourceAwsS3BucketOwnerNameContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.StringFilter?].self, forKey: .resourceAwsS3BucketOwnerName)
        var resourceAwsS3BucketOwnerNameDecoded0:[SecurityHubClientTypes.StringFilter]? = nil
        if let resourceAwsS3BucketOwnerNameContainer = resourceAwsS3BucketOwnerNameContainer {
            resourceAwsS3BucketOwnerNameDecoded0 = [SecurityHubClientTypes.StringFilter]()
            for structure0 in resourceAwsS3BucketOwnerNameContainer {
                if let structure0 = structure0 {
                    resourceAwsS3BucketOwnerNameDecoded0?.append(structure0)
                }
            }
        }
        resourceAwsS3BucketOwnerName = resourceAwsS3BucketOwnerNameDecoded0
        let resourceAwsIamAccessKeyUserNameContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.StringFilter?].self, forKey: .resourceAwsIamAccessKeyUserName)
        var resourceAwsIamAccessKeyUserNameDecoded0:[SecurityHubClientTypes.StringFilter]? = nil
        if let resourceAwsIamAccessKeyUserNameContainer = resourceAwsIamAccessKeyUserNameContainer {
            resourceAwsIamAccessKeyUserNameDecoded0 = [SecurityHubClientTypes.StringFilter]()
            for structure0 in resourceAwsIamAccessKeyUserNameContainer {
                if let structure0 = structure0 {
                    resourceAwsIamAccessKeyUserNameDecoded0?.append(structure0)
                }
            }
        }
        resourceAwsIamAccessKeyUserName = resourceAwsIamAccessKeyUserNameDecoded0
        let resourceAwsIamAccessKeyPrincipalNameContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.StringFilter?].self, forKey: .resourceAwsIamAccessKeyPrincipalName)
        var resourceAwsIamAccessKeyPrincipalNameDecoded0:[SecurityHubClientTypes.StringFilter]? = nil
        if let resourceAwsIamAccessKeyPrincipalNameContainer = resourceAwsIamAccessKeyPrincipalNameContainer {
            resourceAwsIamAccessKeyPrincipalNameDecoded0 = [SecurityHubClientTypes.StringFilter]()
            for structure0 in resourceAwsIamAccessKeyPrincipalNameContainer {
                if let structure0 = structure0 {
                    resourceAwsIamAccessKeyPrincipalNameDecoded0?.append(structure0)
                }
            }
        }
        resourceAwsIamAccessKeyPrincipalName = resourceAwsIamAccessKeyPrincipalNameDecoded0
        let resourceAwsIamAccessKeyStatusContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.StringFilter?].self, forKey: .resourceAwsIamAccessKeyStatus)
        var resourceAwsIamAccessKeyStatusDecoded0:[SecurityHubClientTypes.StringFilter]? = nil
        if let resourceAwsIamAccessKeyStatusContainer = resourceAwsIamAccessKeyStatusContainer {
            resourceAwsIamAccessKeyStatusDecoded0 = [SecurityHubClientTypes.StringFilter]()
            for structure0 in resourceAwsIamAccessKeyStatusContainer {
                if let structure0 = structure0 {
                    resourceAwsIamAccessKeyStatusDecoded0?.append(structure0)
                }
            }
        }
        resourceAwsIamAccessKeyStatus = resourceAwsIamAccessKeyStatusDecoded0
        let resourceAwsIamAccessKeyCreatedAtContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.DateFilter?].self, forKey: .resourceAwsIamAccessKeyCreatedAt)
        var resourceAwsIamAccessKeyCreatedAtDecoded0:[SecurityHubClientTypes.DateFilter]? = nil
        if let resourceAwsIamAccessKeyCreatedAtContainer = resourceAwsIamAccessKeyCreatedAtContainer {
            resourceAwsIamAccessKeyCreatedAtDecoded0 = [SecurityHubClientTypes.DateFilter]()
            for structure0 in resourceAwsIamAccessKeyCreatedAtContainer {
                if let structure0 = structure0 {
                    resourceAwsIamAccessKeyCreatedAtDecoded0?.append(structure0)
                }
            }
        }
        resourceAwsIamAccessKeyCreatedAt = resourceAwsIamAccessKeyCreatedAtDecoded0
        let resourceAwsIamUserUserNameContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.StringFilter?].self, forKey: .resourceAwsIamUserUserName)
        var resourceAwsIamUserUserNameDecoded0:[SecurityHubClientTypes.StringFilter]? = nil
        if let resourceAwsIamUserUserNameContainer = resourceAwsIamUserUserNameContainer {
            resourceAwsIamUserUserNameDecoded0 = [SecurityHubClientTypes.StringFilter]()
            for structure0 in resourceAwsIamUserUserNameContainer {
                if let structure0 = structure0 {
                    resourceAwsIamUserUserNameDecoded0?.append(structure0)
                }
            }
        }
        resourceAwsIamUserUserName = resourceAwsIamUserUserNameDecoded0
        let resourceContainerNameContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.StringFilter?].self, forKey: .resourceContainerName)
        var resourceContainerNameDecoded0:[SecurityHubClientTypes.StringFilter]? = nil
        if let resourceContainerNameContainer = resourceContainerNameContainer {
            resourceContainerNameDecoded0 = [SecurityHubClientTypes.StringFilter]()
            for structure0 in resourceContainerNameContainer {
                if let structure0 = structure0 {
                    resourceContainerNameDecoded0?.append(structure0)
                }
            }
        }
        resourceContainerName = resourceContainerNameDecoded0
        let resourceContainerImageIdContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.StringFilter?].self, forKey: .resourceContainerImageId)
        var resourceContainerImageIdDecoded0:[SecurityHubClientTypes.StringFilter]? = nil
        if let resourceContainerImageIdContainer = resourceContainerImageIdContainer {
            resourceContainerImageIdDecoded0 = [SecurityHubClientTypes.StringFilter]()
            for structure0 in resourceContainerImageIdContainer {
                if let structure0 = structure0 {
                    resourceContainerImageIdDecoded0?.append(structure0)
                }
            }
        }
        resourceContainerImageId = resourceContainerImageIdDecoded0
        let resourceContainerImageNameContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.StringFilter?].self, forKey: .resourceContainerImageName)
        var resourceContainerImageNameDecoded0:[SecurityHubClientTypes.StringFilter]? = nil
        if let resourceContainerImageNameContainer = resourceContainerImageNameContainer {
            resourceContainerImageNameDecoded0 = [SecurityHubClientTypes.StringFilter]()
            for structure0 in resourceContainerImageNameContainer {
                if let structure0 = structure0 {
                    resourceContainerImageNameDecoded0?.append(structure0)
                }
            }
        }
        resourceContainerImageName = resourceContainerImageNameDecoded0
        let resourceContainerLaunchedAtContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.DateFilter?].self, forKey: .resourceContainerLaunchedAt)
        var resourceContainerLaunchedAtDecoded0:[SecurityHubClientTypes.DateFilter]? = nil
        if let resourceContainerLaunchedAtContainer = resourceContainerLaunchedAtContainer {
            resourceContainerLaunchedAtDecoded0 = [SecurityHubClientTypes.DateFilter]()
            for structure0 in resourceContainerLaunchedAtContainer {
                if let structure0 = structure0 {
                    resourceContainerLaunchedAtDecoded0?.append(structure0)
                }
            }
        }
        resourceContainerLaunchedAt = resourceContainerLaunchedAtDecoded0
        let resourceDetailsOtherContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.MapFilter?].self, forKey: .resourceDetailsOther)
        var resourceDetailsOtherDecoded0:[SecurityHubClientTypes.MapFilter]? = nil
        if let resourceDetailsOtherContainer = resourceDetailsOtherContainer {
            resourceDetailsOtherDecoded0 = [SecurityHubClientTypes.MapFilter]()
            for structure0 in resourceDetailsOtherContainer {
                if let structure0 = structure0 {
                    resourceDetailsOtherDecoded0?.append(structure0)
                }
            }
        }
        resourceDetailsOther = resourceDetailsOtherDecoded0
        let complianceStatusContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.StringFilter?].self, forKey: .complianceStatus)
        var complianceStatusDecoded0:[SecurityHubClientTypes.StringFilter]? = nil
        if let complianceStatusContainer = complianceStatusContainer {
            complianceStatusDecoded0 = [SecurityHubClientTypes.StringFilter]()
            for structure0 in complianceStatusContainer {
                if let structure0 = structure0 {
                    complianceStatusDecoded0?.append(structure0)
                }
            }
        }
        complianceStatus = complianceStatusDecoded0
        let verificationStateContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.StringFilter?].self, forKey: .verificationState)
        var verificationStateDecoded0:[SecurityHubClientTypes.StringFilter]? = nil
        if let verificationStateContainer = verificationStateContainer {
            verificationStateDecoded0 = [SecurityHubClientTypes.StringFilter]()
            for structure0 in verificationStateContainer {
                if let structure0 = structure0 {
                    verificationStateDecoded0?.append(structure0)
                }
            }
        }
        verificationState = verificationStateDecoded0
        let workflowStateContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.StringFilter?].self, forKey: .workflowState)
        var workflowStateDecoded0:[SecurityHubClientTypes.StringFilter]? = nil
        if let workflowStateContainer = workflowStateContainer {
            workflowStateDecoded0 = [SecurityHubClientTypes.StringFilter]()
            for structure0 in workflowStateContainer {
                if let structure0 = structure0 {
                    workflowStateDecoded0?.append(structure0)
                }
            }
        }
        workflowState = workflowStateDecoded0
        let workflowStatusContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.StringFilter?].self, forKey: .workflowStatus)
        var workflowStatusDecoded0:[SecurityHubClientTypes.StringFilter]? = nil
        if let workflowStatusContainer = workflowStatusContainer {
            workflowStatusDecoded0 = [SecurityHubClientTypes.StringFilter]()
            for structure0 in workflowStatusContainer {
                if let structure0 = structure0 {
                    workflowStatusDecoded0?.append(structure0)
                }
            }
        }
        workflowStatus = workflowStatusDecoded0
        let recordStateContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.StringFilter?].self, forKey: .recordState)
        var recordStateDecoded0:[SecurityHubClientTypes.StringFilter]? = nil
        if let recordStateContainer = recordStateContainer {
            recordStateDecoded0 = [SecurityHubClientTypes.StringFilter]()
            for structure0 in recordStateContainer {
                if let structure0 = structure0 {
                    recordStateDecoded0?.append(structure0)
                }
            }
        }
        recordState = recordStateDecoded0
        let relatedFindingsProductArnContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.StringFilter?].self, forKey: .relatedFindingsProductArn)
        var relatedFindingsProductArnDecoded0:[SecurityHubClientTypes.StringFilter]? = nil
        if let relatedFindingsProductArnContainer = relatedFindingsProductArnContainer {
            relatedFindingsProductArnDecoded0 = [SecurityHubClientTypes.StringFilter]()
            for structure0 in relatedFindingsProductArnContainer {
                if let structure0 = structure0 {
                    relatedFindingsProductArnDecoded0?.append(structure0)
                }
            }
        }
        relatedFindingsProductArn = relatedFindingsProductArnDecoded0
        let relatedFindingsIdContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.StringFilter?].self, forKey: .relatedFindingsId)
        var relatedFindingsIdDecoded0:[SecurityHubClientTypes.StringFilter]? = nil
        if let relatedFindingsIdContainer = relatedFindingsIdContainer {
            relatedFindingsIdDecoded0 = [SecurityHubClientTypes.StringFilter]()
            for structure0 in relatedFindingsIdContainer {
                if let structure0 = structure0 {
                    relatedFindingsIdDecoded0?.append(structure0)
                }
            }
        }
        relatedFindingsId = relatedFindingsIdDecoded0
        let noteTextContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.StringFilter?].self, forKey: .noteText)
        var noteTextDecoded0:[SecurityHubClientTypes.StringFilter]? = nil
        if let noteTextContainer = noteTextContainer {
            noteTextDecoded0 = [SecurityHubClientTypes.StringFilter]()
            for structure0 in noteTextContainer {
                if let structure0 = structure0 {
                    noteTextDecoded0?.append(structure0)
                }
            }
        }
        noteText = noteTextDecoded0
        let noteUpdatedAtContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.DateFilter?].self, forKey: .noteUpdatedAt)
        var noteUpdatedAtDecoded0:[SecurityHubClientTypes.DateFilter]? = nil
        if let noteUpdatedAtContainer = noteUpdatedAtContainer {
            noteUpdatedAtDecoded0 = [SecurityHubClientTypes.DateFilter]()
            for structure0 in noteUpdatedAtContainer {
                if let structure0 = structure0 {
                    noteUpdatedAtDecoded0?.append(structure0)
                }
            }
        }
        noteUpdatedAt = noteUpdatedAtDecoded0
        let noteUpdatedByContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.StringFilter?].self, forKey: .noteUpdatedBy)
        var noteUpdatedByDecoded0:[SecurityHubClientTypes.StringFilter]? = nil
        if let noteUpdatedByContainer = noteUpdatedByContainer {
            noteUpdatedByDecoded0 = [SecurityHubClientTypes.StringFilter]()
            for structure0 in noteUpdatedByContainer {
                if let structure0 = structure0 {
                    noteUpdatedByDecoded0?.append(structure0)
                }
            }
        }
        noteUpdatedBy = noteUpdatedByDecoded0
        let keywordContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.KeywordFilter?].self, forKey: .keyword)
        var keywordDecoded0:[SecurityHubClientTypes.KeywordFilter]? = nil
        if let keywordContainer = keywordContainer {
            keywordDecoded0 = [SecurityHubClientTypes.KeywordFilter]()
            for structure0 in keywordContainer {
                if let structure0 = structure0 {
                    keywordDecoded0?.append(structure0)
                }
            }
        }
        keyword = keywordDecoded0
        let findingProviderFieldsConfidenceContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.NumberFilter?].self, forKey: .findingProviderFieldsConfidence)
        var findingProviderFieldsConfidenceDecoded0:[SecurityHubClientTypes.NumberFilter]? = nil
        if let findingProviderFieldsConfidenceContainer = findingProviderFieldsConfidenceContainer {
            findingProviderFieldsConfidenceDecoded0 = [SecurityHubClientTypes.NumberFilter]()
            for structure0 in findingProviderFieldsConfidenceContainer {
                if let structure0 = structure0 {
                    findingProviderFieldsConfidenceDecoded0?.append(structure0)
                }
            }
        }
        findingProviderFieldsConfidence = findingProviderFieldsConfidenceDecoded0
        let findingProviderFieldsCriticalityContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.NumberFilter?].self, forKey: .findingProviderFieldsCriticality)
        var findingProviderFieldsCriticalityDecoded0:[SecurityHubClientTypes.NumberFilter]? = nil
        if let findingProviderFieldsCriticalityContainer = findingProviderFieldsCriticalityContainer {
            findingProviderFieldsCriticalityDecoded0 = [SecurityHubClientTypes.NumberFilter]()
            for structure0 in findingProviderFieldsCriticalityContainer {
                if let structure0 = structure0 {
                    findingProviderFieldsCriticalityDecoded0?.append(structure0)
                }
            }
        }
        findingProviderFieldsCriticality = findingProviderFieldsCriticalityDecoded0
        let findingProviderFieldsRelatedFindingsIdContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.StringFilter?].self, forKey: .findingProviderFieldsRelatedFindingsId)
        var findingProviderFieldsRelatedFindingsIdDecoded0:[SecurityHubClientTypes.StringFilter]? = nil
        if let findingProviderFieldsRelatedFindingsIdContainer = findingProviderFieldsRelatedFindingsIdContainer {
            findingProviderFieldsRelatedFindingsIdDecoded0 = [SecurityHubClientTypes.StringFilter]()
            for structure0 in findingProviderFieldsRelatedFindingsIdContainer {
                if let structure0 = structure0 {
                    findingProviderFieldsRelatedFindingsIdDecoded0?.append(structure0)
                }
            }
        }
        findingProviderFieldsRelatedFindingsId = findingProviderFieldsRelatedFindingsIdDecoded0
        let findingProviderFieldsRelatedFindingsProductArnContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.StringFilter?].self, forKey: .findingProviderFieldsRelatedFindingsProductArn)
        var findingProviderFieldsRelatedFindingsProductArnDecoded0:[SecurityHubClientTypes.StringFilter]? = nil
        if let findingProviderFieldsRelatedFindingsProductArnContainer = findingProviderFieldsRelatedFindingsProductArnContainer {
            findingProviderFieldsRelatedFindingsProductArnDecoded0 = [SecurityHubClientTypes.StringFilter]()
            for structure0 in findingProviderFieldsRelatedFindingsProductArnContainer {
                if let structure0 = structure0 {
                    findingProviderFieldsRelatedFindingsProductArnDecoded0?.append(structure0)
                }
            }
        }
        findingProviderFieldsRelatedFindingsProductArn = findingProviderFieldsRelatedFindingsProductArnDecoded0
        let findingProviderFieldsSeverityLabelContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.StringFilter?].self, forKey: .findingProviderFieldsSeverityLabel)
        var findingProviderFieldsSeverityLabelDecoded0:[SecurityHubClientTypes.StringFilter]? = nil
        if let findingProviderFieldsSeverityLabelContainer = findingProviderFieldsSeverityLabelContainer {
            findingProviderFieldsSeverityLabelDecoded0 = [SecurityHubClientTypes.StringFilter]()
            for structure0 in findingProviderFieldsSeverityLabelContainer {
                if let structure0 = structure0 {
                    findingProviderFieldsSeverityLabelDecoded0?.append(structure0)
                }
            }
        }
        findingProviderFieldsSeverityLabel = findingProviderFieldsSeverityLabelDecoded0
        let findingProviderFieldsSeverityOriginalContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.StringFilter?].self, forKey: .findingProviderFieldsSeverityOriginal)
        var findingProviderFieldsSeverityOriginalDecoded0:[SecurityHubClientTypes.StringFilter]? = nil
        if let findingProviderFieldsSeverityOriginalContainer = findingProviderFieldsSeverityOriginalContainer {
            findingProviderFieldsSeverityOriginalDecoded0 = [SecurityHubClientTypes.StringFilter]()
            for structure0 in findingProviderFieldsSeverityOriginalContainer {
                if let structure0 = structure0 {
                    findingProviderFieldsSeverityOriginalDecoded0?.append(structure0)
                }
            }
        }
        findingProviderFieldsSeverityOriginal = findingProviderFieldsSeverityOriginalDecoded0
        let findingProviderFieldsTypesContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.StringFilter?].self, forKey: .findingProviderFieldsTypes)
        var findingProviderFieldsTypesDecoded0:[SecurityHubClientTypes.StringFilter]? = nil
        if let findingProviderFieldsTypesContainer = findingProviderFieldsTypesContainer {
            findingProviderFieldsTypesDecoded0 = [SecurityHubClientTypes.StringFilter]()
            for structure0 in findingProviderFieldsTypesContainer {
                if let structure0 = structure0 {
                    findingProviderFieldsTypesDecoded0?.append(structure0)
                }
            }
        }
        findingProviderFieldsTypes = findingProviderFieldsTypesDecoded0
        let sampleContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.BooleanFilter?].self, forKey: .sample)
        var sampleDecoded0:[SecurityHubClientTypes.BooleanFilter]? = nil
        if let sampleContainer = sampleContainer {
            sampleDecoded0 = [SecurityHubClientTypes.BooleanFilter]()
            for structure0 in sampleContainer {
                if let structure0 = structure0 {
                    sampleDecoded0?.append(structure0)
                }
            }
        }
        sample = sampleDecoded0
    }
}
