// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SecurityHubClientTypes.AwsEc2VpcPeeringConnectionVpcInfoDetails: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cidrBlock = "CidrBlock"
        case cidrBlockSet = "CidrBlockSet"
        case ipv6CidrBlockSet = "Ipv6CidrBlockSet"
        case ownerId = "OwnerId"
        case peeringOptions = "PeeringOptions"
        case region = "Region"
        case vpcId = "VpcId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cidrBlock = self.cidrBlock {
            try encodeContainer.encode(cidrBlock, forKey: .cidrBlock)
        }
        if let cidrBlockSet = cidrBlockSet {
            var cidrBlockSetContainer = encodeContainer.nestedUnkeyedContainer(forKey: .cidrBlockSet)
            for vpcinfocidrblocksetlist0 in cidrBlockSet {
                try cidrBlockSetContainer.encode(vpcinfocidrblocksetlist0)
            }
        }
        if let ipv6CidrBlockSet = ipv6CidrBlockSet {
            var ipv6CidrBlockSetContainer = encodeContainer.nestedUnkeyedContainer(forKey: .ipv6CidrBlockSet)
            for vpcinfoipv6cidrblocksetlist0 in ipv6CidrBlockSet {
                try ipv6CidrBlockSetContainer.encode(vpcinfoipv6cidrblocksetlist0)
            }
        }
        if let ownerId = self.ownerId {
            try encodeContainer.encode(ownerId, forKey: .ownerId)
        }
        if let peeringOptions = self.peeringOptions {
            try encodeContainer.encode(peeringOptions, forKey: .peeringOptions)
        }
        if let region = self.region {
            try encodeContainer.encode(region, forKey: .region)
        }
        if let vpcId = self.vpcId {
            try encodeContainer.encode(vpcId, forKey: .vpcId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let cidrBlockDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cidrBlock)
        cidrBlock = cidrBlockDecoded
        let cidrBlockSetContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.VpcInfoCidrBlockSetDetails?].self, forKey: .cidrBlockSet)
        var cidrBlockSetDecoded0:[SecurityHubClientTypes.VpcInfoCidrBlockSetDetails]? = nil
        if let cidrBlockSetContainer = cidrBlockSetContainer {
            cidrBlockSetDecoded0 = [SecurityHubClientTypes.VpcInfoCidrBlockSetDetails]()
            for structure0 in cidrBlockSetContainer {
                if let structure0 = structure0 {
                    cidrBlockSetDecoded0?.append(structure0)
                }
            }
        }
        cidrBlockSet = cidrBlockSetDecoded0
        let ipv6CidrBlockSetContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.VpcInfoIpv6CidrBlockSetDetails?].self, forKey: .ipv6CidrBlockSet)
        var ipv6CidrBlockSetDecoded0:[SecurityHubClientTypes.VpcInfoIpv6CidrBlockSetDetails]? = nil
        if let ipv6CidrBlockSetContainer = ipv6CidrBlockSetContainer {
            ipv6CidrBlockSetDecoded0 = [SecurityHubClientTypes.VpcInfoIpv6CidrBlockSetDetails]()
            for structure0 in ipv6CidrBlockSetContainer {
                if let structure0 = structure0 {
                    ipv6CidrBlockSetDecoded0?.append(structure0)
                }
            }
        }
        ipv6CidrBlockSet = ipv6CidrBlockSetDecoded0
        let ownerIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ownerId)
        ownerId = ownerIdDecoded
        let peeringOptionsDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.VpcInfoPeeringOptionsDetails.self, forKey: .peeringOptions)
        peeringOptions = peeringOptionsDecoded
        let regionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .region)
        region = regionDecoded
        let vpcIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vpcId)
        vpcId = vpcIdDecoded
    }
}
