// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct UpdateFindingAggregatorInputBody: Swift.Equatable {
    let findingAggregatorArn: Swift.String?
    let regionLinkingMode: Swift.String?
    let regions: [Swift.String]?
}

extension UpdateFindingAggregatorInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case findingAggregatorArn = "FindingAggregatorArn"
        case regionLinkingMode = "RegionLinkingMode"
        case regions = "Regions"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let findingAggregatorArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .findingAggregatorArn)
        findingAggregatorArn = findingAggregatorArnDecoded
        let regionLinkingModeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .regionLinkingMode)
        regionLinkingMode = regionLinkingModeDecoded
        let regionsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .regions)
        var regionsDecoded0:[Swift.String]? = nil
        if let regionsContainer = regionsContainer {
            regionsDecoded0 = [Swift.String]()
            for string0 in regionsContainer {
                if let string0 = string0 {
                    regionsDecoded0?.append(string0)
                }
            }
        }
        regions = regionsDecoded0
    }
}
