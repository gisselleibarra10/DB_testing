// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SecurityHubClientTypes.AwsEcsTaskDefinitionContainerDefinitionsLinuxParametersDevicesDetails: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case containerPath = "ContainerPath"
        case hostPath = "HostPath"
        case permissions = "Permissions"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let containerPath = self.containerPath {
            try encodeContainer.encode(containerPath, forKey: .containerPath)
        }
        if let hostPath = self.hostPath {
            try encodeContainer.encode(hostPath, forKey: .hostPath)
        }
        if let permissions = permissions {
            var permissionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .permissions)
            for nonemptystringlist0 in permissions {
                try permissionsContainer.encode(nonemptystringlist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let containerPathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .containerPath)
        containerPath = containerPathDecoded
        let hostPathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .hostPath)
        hostPath = hostPathDecoded
        let permissionsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .permissions)
        var permissionsDecoded0:[Swift.String]? = nil
        if let permissionsContainer = permissionsContainer {
            permissionsDecoded0 = [Swift.String]()
            for string0 in permissionsContainer {
                if let string0 = string0 {
                    permissionsDecoded0?.append(string0)
                }
            }
        }
        permissions = permissionsDecoded0
    }
}
