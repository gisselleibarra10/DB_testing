// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SecurityHubClientTypes.AwsWafRuleDetails: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case metricName = "MetricName"
        case name = "Name"
        case predicateList = "PredicateList"
        case ruleId = "RuleId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let metricName = self.metricName {
            try encodeContainer.encode(metricName, forKey: .metricName)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let predicateList = predicateList {
            var predicateListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .predicateList)
            for awswafrulepredicatelist0 in predicateList {
                try predicateListContainer.encode(awswafrulepredicatelist0)
            }
        }
        if let ruleId = self.ruleId {
            try encodeContainer.encode(ruleId, forKey: .ruleId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let metricNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .metricName)
        metricName = metricNameDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let predicateListContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.AwsWafRulePredicateListDetails?].self, forKey: .predicateList)
        var predicateListDecoded0:[SecurityHubClientTypes.AwsWafRulePredicateListDetails]? = nil
        if let predicateListContainer = predicateListContainer {
            predicateListDecoded0 = [SecurityHubClientTypes.AwsWafRulePredicateListDetails]()
            for structure0 in predicateListContainer {
                if let structure0 = structure0 {
                    predicateListDecoded0?.append(structure0)
                }
            }
        }
        predicateList = predicateListDecoded0
        let ruleIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ruleId)
        ruleId = ruleIdDecoded
    }
}
