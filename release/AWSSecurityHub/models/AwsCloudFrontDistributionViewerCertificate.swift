// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension SecurityHubClientTypes {
    /// Provides information about the TLS/SSL configuration that the CloudFront distribution uses to communicate with viewers.
    public struct AwsCloudFrontDistributionViewerCertificate: Swift.Equatable {
        /// The ARN of the ACM certificate. Used if the certificate is stored in ACM. If you provide an ACM certificate ARN, you must also provide MinimumCertificateVersion and SslSupportMethod.
        public var acmCertificateArn: Swift.String?
        /// The identifier of the certificate. Note that in CloudFront, this attribute is deprecated.
        public var certificate: Swift.String?
        /// The source of the certificate identified by Certificate. Note that in CloudFront, this attribute is deprecated.
        public var certificateSource: Swift.String?
        /// Whether the distribution uses the CloudFront domain name. If set to false, then you provide either AcmCertificateArn or IamCertificateId.
        public var cloudFrontDefaultCertificate: Swift.Bool
        /// The identifier of the IAM certificate. Used if the certificate is stored in IAM. If you provide IamCertificateId, then you also must provide MinimumProtocolVersion and SslSupportMethod.
        public var iamCertificateId: Swift.String?
        /// The security policy that CloudFront uses for HTTPS connections with viewers. If SslSupportMethod is sni-only, then MinimumProtocolVersion must be TLSv1 or higher.
        public var minimumProtocolVersion: Swift.String?
        /// The viewers that the distribution accepts HTTPS connections from.
        public var sslSupportMethod: Swift.String?

        public init (
            acmCertificateArn: Swift.String? = nil,
            certificate: Swift.String? = nil,
            certificateSource: Swift.String? = nil,
            cloudFrontDefaultCertificate: Swift.Bool = false,
            iamCertificateId: Swift.String? = nil,
            minimumProtocolVersion: Swift.String? = nil,
            sslSupportMethod: Swift.String? = nil
        )
        {
            self.acmCertificateArn = acmCertificateArn
            self.certificate = certificate
            self.certificateSource = certificateSource
            self.cloudFrontDefaultCertificate = cloudFrontDefaultCertificate
            self.iamCertificateId = iamCertificateId
            self.minimumProtocolVersion = minimumProtocolVersion
            self.sslSupportMethod = sslSupportMethod
        }
    }

}
