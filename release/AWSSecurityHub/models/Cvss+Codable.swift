// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SecurityHubClientTypes.Cvss: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case adjustments = "Adjustments"
        case baseScore = "BaseScore"
        case baseVector = "BaseVector"
        case source = "Source"
        case version = "Version"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let adjustments = adjustments {
            var adjustmentsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .adjustments)
            for adjustmentlist0 in adjustments {
                try adjustmentsContainer.encode(adjustmentlist0)
            }
        }
        if baseScore != 0.0 {
            try encodeContainer.encode(baseScore, forKey: .baseScore)
        }
        if let baseVector = self.baseVector {
            try encodeContainer.encode(baseVector, forKey: .baseVector)
        }
        if let source = self.source {
            try encodeContainer.encode(source, forKey: .source)
        }
        if let version = self.version {
            try encodeContainer.encode(version, forKey: .version)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let versionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .version)
        version = versionDecoded
        let baseScoreDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .baseScore) ?? 0.0
        baseScore = baseScoreDecoded
        let baseVectorDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .baseVector)
        baseVector = baseVectorDecoded
        let sourceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .source)
        source = sourceDecoded
        let adjustmentsContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.Adjustment?].self, forKey: .adjustments)
        var adjustmentsDecoded0:[SecurityHubClientTypes.Adjustment]? = nil
        if let adjustmentsContainer = adjustmentsContainer {
            adjustmentsDecoded0 = [SecurityHubClientTypes.Adjustment]()
            for structure0 in adjustmentsContainer {
                if let structure0 = structure0 {
                    adjustmentsDecoded0?.append(structure0)
                }
            }
        }
        adjustments = adjustmentsDecoded0
    }
}
