// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SecurityHubClientTypes.AwsEc2SecurityGroupDetails: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case groupId = "GroupId"
        case groupName = "GroupName"
        case ipPermissions = "IpPermissions"
        case ipPermissionsEgress = "IpPermissionsEgress"
        case ownerId = "OwnerId"
        case vpcId = "VpcId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let groupId = self.groupId {
            try encodeContainer.encode(groupId, forKey: .groupId)
        }
        if let groupName = self.groupName {
            try encodeContainer.encode(groupName, forKey: .groupName)
        }
        if let ipPermissions = ipPermissions {
            var ipPermissionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .ipPermissions)
            for awsec2securitygroupippermissionlist0 in ipPermissions {
                try ipPermissionsContainer.encode(awsec2securitygroupippermissionlist0)
            }
        }
        if let ipPermissionsEgress = ipPermissionsEgress {
            var ipPermissionsEgressContainer = encodeContainer.nestedUnkeyedContainer(forKey: .ipPermissionsEgress)
            for awsec2securitygroupippermissionlist0 in ipPermissionsEgress {
                try ipPermissionsEgressContainer.encode(awsec2securitygroupippermissionlist0)
            }
        }
        if let ownerId = self.ownerId {
            try encodeContainer.encode(ownerId, forKey: .ownerId)
        }
        if let vpcId = self.vpcId {
            try encodeContainer.encode(vpcId, forKey: .vpcId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let groupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .groupName)
        groupName = groupNameDecoded
        let groupIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .groupId)
        groupId = groupIdDecoded
        let ownerIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ownerId)
        ownerId = ownerIdDecoded
        let vpcIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vpcId)
        vpcId = vpcIdDecoded
        let ipPermissionsContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.AwsEc2SecurityGroupIpPermission?].self, forKey: .ipPermissions)
        var ipPermissionsDecoded0:[SecurityHubClientTypes.AwsEc2SecurityGroupIpPermission]? = nil
        if let ipPermissionsContainer = ipPermissionsContainer {
            ipPermissionsDecoded0 = [SecurityHubClientTypes.AwsEc2SecurityGroupIpPermission]()
            for structure0 in ipPermissionsContainer {
                if let structure0 = structure0 {
                    ipPermissionsDecoded0?.append(structure0)
                }
            }
        }
        ipPermissions = ipPermissionsDecoded0
        let ipPermissionsEgressContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.AwsEc2SecurityGroupIpPermission?].self, forKey: .ipPermissionsEgress)
        var ipPermissionsEgressDecoded0:[SecurityHubClientTypes.AwsEc2SecurityGroupIpPermission]? = nil
        if let ipPermissionsEgressContainer = ipPermissionsEgressContainer {
            ipPermissionsEgressDecoded0 = [SecurityHubClientTypes.AwsEc2SecurityGroupIpPermission]()
            for structure0 in ipPermissionsEgressContainer {
                if let structure0 = structure0 {
                    ipPermissionsEgressDecoded0?.append(structure0)
                }
            }
        }
        ipPermissionsEgress = ipPermissionsEgressDecoded0
    }
}
