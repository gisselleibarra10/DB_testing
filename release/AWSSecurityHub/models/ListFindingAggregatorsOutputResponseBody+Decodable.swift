// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListFindingAggregatorsOutputResponseBody: Swift.Equatable {
    let findingAggregators: [SecurityHubClientTypes.FindingAggregator]?
    let nextToken: Swift.String?
}

extension ListFindingAggregatorsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case findingAggregators = "FindingAggregators"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let findingAggregatorsContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.FindingAggregator?].self, forKey: .findingAggregators)
        var findingAggregatorsDecoded0:[SecurityHubClientTypes.FindingAggregator]? = nil
        if let findingAggregatorsContainer = findingAggregatorsContainer {
            findingAggregatorsDecoded0 = [SecurityHubClientTypes.FindingAggregator]()
            for structure0 in findingAggregatorsContainer {
                if let structure0 = structure0 {
                    findingAggregatorsDecoded0?.append(structure0)
                }
            }
        }
        findingAggregators = findingAggregatorsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
