// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SecurityHubClientTypes.AwsEc2VpcDetails: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cidrBlockAssociationSet = "CidrBlockAssociationSet"
        case dhcpOptionsId = "DhcpOptionsId"
        case ipv6CidrBlockAssociationSet = "Ipv6CidrBlockAssociationSet"
        case state = "State"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cidrBlockAssociationSet = cidrBlockAssociationSet {
            var cidrBlockAssociationSetContainer = encodeContainer.nestedUnkeyedContainer(forKey: .cidrBlockAssociationSet)
            for cidrblockassociationlist0 in cidrBlockAssociationSet {
                try cidrBlockAssociationSetContainer.encode(cidrblockassociationlist0)
            }
        }
        if let dhcpOptionsId = self.dhcpOptionsId {
            try encodeContainer.encode(dhcpOptionsId, forKey: .dhcpOptionsId)
        }
        if let ipv6CidrBlockAssociationSet = ipv6CidrBlockAssociationSet {
            var ipv6CidrBlockAssociationSetContainer = encodeContainer.nestedUnkeyedContainer(forKey: .ipv6CidrBlockAssociationSet)
            for ipv6cidrblockassociationlist0 in ipv6CidrBlockAssociationSet {
                try ipv6CidrBlockAssociationSetContainer.encode(ipv6cidrblockassociationlist0)
            }
        }
        if let state = self.state {
            try encodeContainer.encode(state, forKey: .state)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let cidrBlockAssociationSetContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.CidrBlockAssociation?].self, forKey: .cidrBlockAssociationSet)
        var cidrBlockAssociationSetDecoded0:[SecurityHubClientTypes.CidrBlockAssociation]? = nil
        if let cidrBlockAssociationSetContainer = cidrBlockAssociationSetContainer {
            cidrBlockAssociationSetDecoded0 = [SecurityHubClientTypes.CidrBlockAssociation]()
            for structure0 in cidrBlockAssociationSetContainer {
                if let structure0 = structure0 {
                    cidrBlockAssociationSetDecoded0?.append(structure0)
                }
            }
        }
        cidrBlockAssociationSet = cidrBlockAssociationSetDecoded0
        let ipv6CidrBlockAssociationSetContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.Ipv6CidrBlockAssociation?].self, forKey: .ipv6CidrBlockAssociationSet)
        var ipv6CidrBlockAssociationSetDecoded0:[SecurityHubClientTypes.Ipv6CidrBlockAssociation]? = nil
        if let ipv6CidrBlockAssociationSetContainer = ipv6CidrBlockAssociationSetContainer {
            ipv6CidrBlockAssociationSetDecoded0 = [SecurityHubClientTypes.Ipv6CidrBlockAssociation]()
            for structure0 in ipv6CidrBlockAssociationSetContainer {
                if let structure0 = structure0 {
                    ipv6CidrBlockAssociationSetDecoded0?.append(structure0)
                }
            }
        }
        ipv6CidrBlockAssociationSet = ipv6CidrBlockAssociationSetDecoded0
        let dhcpOptionsIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dhcpOptionsId)
        dhcpOptionsId = dhcpOptionsIdDecoded
        let stateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .state)
        state = stateDecoded
    }
}
