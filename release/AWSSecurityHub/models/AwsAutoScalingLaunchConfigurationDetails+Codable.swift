// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SecurityHubClientTypes.AwsAutoScalingLaunchConfigurationDetails: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case associatePublicIpAddress = "AssociatePublicIpAddress"
        case blockDeviceMappings = "BlockDeviceMappings"
        case classicLinkVpcId = "ClassicLinkVpcId"
        case classicLinkVpcSecurityGroups = "ClassicLinkVpcSecurityGroups"
        case createdTime = "CreatedTime"
        case ebsOptimized = "EbsOptimized"
        case iamInstanceProfile = "IamInstanceProfile"
        case imageId = "ImageId"
        case instanceMonitoring = "InstanceMonitoring"
        case instanceType = "InstanceType"
        case kernelId = "KernelId"
        case keyName = "KeyName"
        case launchConfigurationName = "LaunchConfigurationName"
        case metadataOptions = "MetadataOptions"
        case placementTenancy = "PlacementTenancy"
        case ramdiskId = "RamdiskId"
        case securityGroups = "SecurityGroups"
        case spotPrice = "SpotPrice"
        case userData = "UserData"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if associatePublicIpAddress != false {
            try encodeContainer.encode(associatePublicIpAddress, forKey: .associatePublicIpAddress)
        }
        if let blockDeviceMappings = blockDeviceMappings {
            var blockDeviceMappingsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .blockDeviceMappings)
            for awsautoscalinglaunchconfigurationblockdevicemappingslist0 in blockDeviceMappings {
                try blockDeviceMappingsContainer.encode(awsautoscalinglaunchconfigurationblockdevicemappingslist0)
            }
        }
        if let classicLinkVpcId = self.classicLinkVpcId {
            try encodeContainer.encode(classicLinkVpcId, forKey: .classicLinkVpcId)
        }
        if let classicLinkVpcSecurityGroups = classicLinkVpcSecurityGroups {
            var classicLinkVpcSecurityGroupsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .classicLinkVpcSecurityGroups)
            for nonemptystringlist0 in classicLinkVpcSecurityGroups {
                try classicLinkVpcSecurityGroupsContainer.encode(nonemptystringlist0)
            }
        }
        if let createdTime = self.createdTime {
            try encodeContainer.encode(createdTime, forKey: .createdTime)
        }
        if ebsOptimized != false {
            try encodeContainer.encode(ebsOptimized, forKey: .ebsOptimized)
        }
        if let iamInstanceProfile = self.iamInstanceProfile {
            try encodeContainer.encode(iamInstanceProfile, forKey: .iamInstanceProfile)
        }
        if let imageId = self.imageId {
            try encodeContainer.encode(imageId, forKey: .imageId)
        }
        if let instanceMonitoring = self.instanceMonitoring {
            try encodeContainer.encode(instanceMonitoring, forKey: .instanceMonitoring)
        }
        if let instanceType = self.instanceType {
            try encodeContainer.encode(instanceType, forKey: .instanceType)
        }
        if let kernelId = self.kernelId {
            try encodeContainer.encode(kernelId, forKey: .kernelId)
        }
        if let keyName = self.keyName {
            try encodeContainer.encode(keyName, forKey: .keyName)
        }
        if let launchConfigurationName = self.launchConfigurationName {
            try encodeContainer.encode(launchConfigurationName, forKey: .launchConfigurationName)
        }
        if let metadataOptions = self.metadataOptions {
            try encodeContainer.encode(metadataOptions, forKey: .metadataOptions)
        }
        if let placementTenancy = self.placementTenancy {
            try encodeContainer.encode(placementTenancy, forKey: .placementTenancy)
        }
        if let ramdiskId = self.ramdiskId {
            try encodeContainer.encode(ramdiskId, forKey: .ramdiskId)
        }
        if let securityGroups = securityGroups {
            var securityGroupsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .securityGroups)
            for nonemptystringlist0 in securityGroups {
                try securityGroupsContainer.encode(nonemptystringlist0)
            }
        }
        if let spotPrice = self.spotPrice {
            try encodeContainer.encode(spotPrice, forKey: .spotPrice)
        }
        if let userData = self.userData {
            try encodeContainer.encode(userData, forKey: .userData)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let associatePublicIpAddressDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .associatePublicIpAddress) ?? false
        associatePublicIpAddress = associatePublicIpAddressDecoded
        let blockDeviceMappingsContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.AwsAutoScalingLaunchConfigurationBlockDeviceMappingsDetails?].self, forKey: .blockDeviceMappings)
        var blockDeviceMappingsDecoded0:[SecurityHubClientTypes.AwsAutoScalingLaunchConfigurationBlockDeviceMappingsDetails]? = nil
        if let blockDeviceMappingsContainer = blockDeviceMappingsContainer {
            blockDeviceMappingsDecoded0 = [SecurityHubClientTypes.AwsAutoScalingLaunchConfigurationBlockDeviceMappingsDetails]()
            for structure0 in blockDeviceMappingsContainer {
                if let structure0 = structure0 {
                    blockDeviceMappingsDecoded0?.append(structure0)
                }
            }
        }
        blockDeviceMappings = blockDeviceMappingsDecoded0
        let classicLinkVpcIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .classicLinkVpcId)
        classicLinkVpcId = classicLinkVpcIdDecoded
        let classicLinkVpcSecurityGroupsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .classicLinkVpcSecurityGroups)
        var classicLinkVpcSecurityGroupsDecoded0:[Swift.String]? = nil
        if let classicLinkVpcSecurityGroupsContainer = classicLinkVpcSecurityGroupsContainer {
            classicLinkVpcSecurityGroupsDecoded0 = [Swift.String]()
            for string0 in classicLinkVpcSecurityGroupsContainer {
                if let string0 = string0 {
                    classicLinkVpcSecurityGroupsDecoded0?.append(string0)
                }
            }
        }
        classicLinkVpcSecurityGroups = classicLinkVpcSecurityGroupsDecoded0
        let createdTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .createdTime)
        createdTime = createdTimeDecoded
        let ebsOptimizedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .ebsOptimized) ?? false
        ebsOptimized = ebsOptimizedDecoded
        let iamInstanceProfileDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .iamInstanceProfile)
        iamInstanceProfile = iamInstanceProfileDecoded
        let imageIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .imageId)
        imageId = imageIdDecoded
        let instanceMonitoringDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsAutoScalingLaunchConfigurationInstanceMonitoringDetails.self, forKey: .instanceMonitoring)
        instanceMonitoring = instanceMonitoringDecoded
        let instanceTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceType)
        instanceType = instanceTypeDecoded
        let kernelIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kernelId)
        kernelId = kernelIdDecoded
        let keyNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyName)
        keyName = keyNameDecoded
        let launchConfigurationNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .launchConfigurationName)
        launchConfigurationName = launchConfigurationNameDecoded
        let placementTenancyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .placementTenancy)
        placementTenancy = placementTenancyDecoded
        let ramdiskIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ramdiskId)
        ramdiskId = ramdiskIdDecoded
        let securityGroupsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .securityGroups)
        var securityGroupsDecoded0:[Swift.String]? = nil
        if let securityGroupsContainer = securityGroupsContainer {
            securityGroupsDecoded0 = [Swift.String]()
            for string0 in securityGroupsContainer {
                if let string0 = string0 {
                    securityGroupsDecoded0?.append(string0)
                }
            }
        }
        securityGroups = securityGroupsDecoded0
        let spotPriceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .spotPrice)
        spotPrice = spotPriceDecoded
        let userDataDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userData)
        userData = userDataDecoded
        let metadataOptionsDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsAutoScalingLaunchConfigurationMetadataOptions.self, forKey: .metadataOptions)
        metadataOptions = metadataOptionsDecoded
    }
}
