// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SecurityHubClientTypes.AwsElbLoadBalancerDetails: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case availabilityZones = "AvailabilityZones"
        case backendServerDescriptions = "BackendServerDescriptions"
        case canonicalHostedZoneName = "CanonicalHostedZoneName"
        case canonicalHostedZoneNameID = "CanonicalHostedZoneNameID"
        case createdTime = "CreatedTime"
        case dnsName = "DnsName"
        case healthCheck = "HealthCheck"
        case instances = "Instances"
        case listenerDescriptions = "ListenerDescriptions"
        case loadBalancerAttributes = "LoadBalancerAttributes"
        case loadBalancerName = "LoadBalancerName"
        case policies = "Policies"
        case scheme = "Scheme"
        case securityGroups = "SecurityGroups"
        case sourceSecurityGroup = "SourceSecurityGroup"
        case subnets = "Subnets"
        case vpcId = "VpcId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let availabilityZones = availabilityZones {
            var availabilityZonesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .availabilityZones)
            for stringlist0 in availabilityZones {
                try availabilityZonesContainer.encode(stringlist0)
            }
        }
        if let backendServerDescriptions = backendServerDescriptions {
            var backendServerDescriptionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .backendServerDescriptions)
            for awselbloadbalancerbackendserverdescriptions0 in backendServerDescriptions {
                try backendServerDescriptionsContainer.encode(awselbloadbalancerbackendserverdescriptions0)
            }
        }
        if let canonicalHostedZoneName = self.canonicalHostedZoneName {
            try encodeContainer.encode(canonicalHostedZoneName, forKey: .canonicalHostedZoneName)
        }
        if let canonicalHostedZoneNameID = self.canonicalHostedZoneNameID {
            try encodeContainer.encode(canonicalHostedZoneNameID, forKey: .canonicalHostedZoneNameID)
        }
        if let createdTime = self.createdTime {
            try encodeContainer.encode(createdTime, forKey: .createdTime)
        }
        if let dnsName = self.dnsName {
            try encodeContainer.encode(dnsName, forKey: .dnsName)
        }
        if let healthCheck = self.healthCheck {
            try encodeContainer.encode(healthCheck, forKey: .healthCheck)
        }
        if let instances = instances {
            var instancesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .instances)
            for awselbloadbalancerinstances0 in instances {
                try instancesContainer.encode(awselbloadbalancerinstances0)
            }
        }
        if let listenerDescriptions = listenerDescriptions {
            var listenerDescriptionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .listenerDescriptions)
            for awselbloadbalancerlistenerdescriptions0 in listenerDescriptions {
                try listenerDescriptionsContainer.encode(awselbloadbalancerlistenerdescriptions0)
            }
        }
        if let loadBalancerAttributes = self.loadBalancerAttributes {
            try encodeContainer.encode(loadBalancerAttributes, forKey: .loadBalancerAttributes)
        }
        if let loadBalancerName = self.loadBalancerName {
            try encodeContainer.encode(loadBalancerName, forKey: .loadBalancerName)
        }
        if let policies = self.policies {
            try encodeContainer.encode(policies, forKey: .policies)
        }
        if let scheme = self.scheme {
            try encodeContainer.encode(scheme, forKey: .scheme)
        }
        if let securityGroups = securityGroups {
            var securityGroupsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .securityGroups)
            for stringlist0 in securityGroups {
                try securityGroupsContainer.encode(stringlist0)
            }
        }
        if let sourceSecurityGroup = self.sourceSecurityGroup {
            try encodeContainer.encode(sourceSecurityGroup, forKey: .sourceSecurityGroup)
        }
        if let subnets = subnets {
            var subnetsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .subnets)
            for stringlist0 in subnets {
                try subnetsContainer.encode(stringlist0)
            }
        }
        if let vpcId = self.vpcId {
            try encodeContainer.encode(vpcId, forKey: .vpcId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let availabilityZonesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .availabilityZones)
        var availabilityZonesDecoded0:[Swift.String]? = nil
        if let availabilityZonesContainer = availabilityZonesContainer {
            availabilityZonesDecoded0 = [Swift.String]()
            for string0 in availabilityZonesContainer {
                if let string0 = string0 {
                    availabilityZonesDecoded0?.append(string0)
                }
            }
        }
        availabilityZones = availabilityZonesDecoded0
        let backendServerDescriptionsContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.AwsElbLoadBalancerBackendServerDescription?].self, forKey: .backendServerDescriptions)
        var backendServerDescriptionsDecoded0:[SecurityHubClientTypes.AwsElbLoadBalancerBackendServerDescription]? = nil
        if let backendServerDescriptionsContainer = backendServerDescriptionsContainer {
            backendServerDescriptionsDecoded0 = [SecurityHubClientTypes.AwsElbLoadBalancerBackendServerDescription]()
            for structure0 in backendServerDescriptionsContainer {
                if let structure0 = structure0 {
                    backendServerDescriptionsDecoded0?.append(structure0)
                }
            }
        }
        backendServerDescriptions = backendServerDescriptionsDecoded0
        let canonicalHostedZoneNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .canonicalHostedZoneName)
        canonicalHostedZoneName = canonicalHostedZoneNameDecoded
        let canonicalHostedZoneNameIDDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .canonicalHostedZoneNameID)
        canonicalHostedZoneNameID = canonicalHostedZoneNameIDDecoded
        let createdTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .createdTime)
        createdTime = createdTimeDecoded
        let dnsNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dnsName)
        dnsName = dnsNameDecoded
        let healthCheckDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsElbLoadBalancerHealthCheck.self, forKey: .healthCheck)
        healthCheck = healthCheckDecoded
        let instancesContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.AwsElbLoadBalancerInstance?].self, forKey: .instances)
        var instancesDecoded0:[SecurityHubClientTypes.AwsElbLoadBalancerInstance]? = nil
        if let instancesContainer = instancesContainer {
            instancesDecoded0 = [SecurityHubClientTypes.AwsElbLoadBalancerInstance]()
            for structure0 in instancesContainer {
                if let structure0 = structure0 {
                    instancesDecoded0?.append(structure0)
                }
            }
        }
        instances = instancesDecoded0
        let listenerDescriptionsContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.AwsElbLoadBalancerListenerDescription?].self, forKey: .listenerDescriptions)
        var listenerDescriptionsDecoded0:[SecurityHubClientTypes.AwsElbLoadBalancerListenerDescription]? = nil
        if let listenerDescriptionsContainer = listenerDescriptionsContainer {
            listenerDescriptionsDecoded0 = [SecurityHubClientTypes.AwsElbLoadBalancerListenerDescription]()
            for structure0 in listenerDescriptionsContainer {
                if let structure0 = structure0 {
                    listenerDescriptionsDecoded0?.append(structure0)
                }
            }
        }
        listenerDescriptions = listenerDescriptionsDecoded0
        let loadBalancerAttributesDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsElbLoadBalancerAttributes.self, forKey: .loadBalancerAttributes)
        loadBalancerAttributes = loadBalancerAttributesDecoded
        let loadBalancerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .loadBalancerName)
        loadBalancerName = loadBalancerNameDecoded
        let policiesDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsElbLoadBalancerPolicies.self, forKey: .policies)
        policies = policiesDecoded
        let schemeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .scheme)
        scheme = schemeDecoded
        let securityGroupsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .securityGroups)
        var securityGroupsDecoded0:[Swift.String]? = nil
        if let securityGroupsContainer = securityGroupsContainer {
            securityGroupsDecoded0 = [Swift.String]()
            for string0 in securityGroupsContainer {
                if let string0 = string0 {
                    securityGroupsDecoded0?.append(string0)
                }
            }
        }
        securityGroups = securityGroupsDecoded0
        let sourceSecurityGroupDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsElbLoadBalancerSourceSecurityGroup.self, forKey: .sourceSecurityGroup)
        sourceSecurityGroup = sourceSecurityGroupDecoded
        let subnetsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .subnets)
        var subnetsDecoded0:[Swift.String]? = nil
        if let subnetsContainer = subnetsContainer {
            subnetsDecoded0 = [Swift.String]()
            for string0 in subnetsContainer {
                if let string0 = string0 {
                    subnetsDecoded0?.append(string0)
                }
            }
        }
        subnets = subnetsDecoded0
        let vpcIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vpcId)
        vpcId = vpcIdDecoded
    }
}
