// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SecurityHubClientTypes.AwsIamGroupDetails: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attachedManagedPolicies = "AttachedManagedPolicies"
        case createDate = "CreateDate"
        case groupId = "GroupId"
        case groupName = "GroupName"
        case groupPolicyList = "GroupPolicyList"
        case path = "Path"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let attachedManagedPolicies = attachedManagedPolicies {
            var attachedManagedPoliciesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .attachedManagedPolicies)
            for awsiamattachedmanagedpolicylist0 in attachedManagedPolicies {
                try attachedManagedPoliciesContainer.encode(awsiamattachedmanagedpolicylist0)
            }
        }
        if let createDate = self.createDate {
            try encodeContainer.encode(createDate, forKey: .createDate)
        }
        if let groupId = self.groupId {
            try encodeContainer.encode(groupId, forKey: .groupId)
        }
        if let groupName = self.groupName {
            try encodeContainer.encode(groupName, forKey: .groupName)
        }
        if let groupPolicyList = groupPolicyList {
            var groupPolicyListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .groupPolicyList)
            for awsiamgrouppolicylist0 in groupPolicyList {
                try groupPolicyListContainer.encode(awsiamgrouppolicylist0)
            }
        }
        if let path = self.path {
            try encodeContainer.encode(path, forKey: .path)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let attachedManagedPoliciesContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.AwsIamAttachedManagedPolicy?].self, forKey: .attachedManagedPolicies)
        var attachedManagedPoliciesDecoded0:[SecurityHubClientTypes.AwsIamAttachedManagedPolicy]? = nil
        if let attachedManagedPoliciesContainer = attachedManagedPoliciesContainer {
            attachedManagedPoliciesDecoded0 = [SecurityHubClientTypes.AwsIamAttachedManagedPolicy]()
            for structure0 in attachedManagedPoliciesContainer {
                if let structure0 = structure0 {
                    attachedManagedPoliciesDecoded0?.append(structure0)
                }
            }
        }
        attachedManagedPolicies = attachedManagedPoliciesDecoded0
        let createDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .createDate)
        createDate = createDateDecoded
        let groupIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .groupId)
        groupId = groupIdDecoded
        let groupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .groupName)
        groupName = groupNameDecoded
        let groupPolicyListContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.AwsIamGroupPolicy?].self, forKey: .groupPolicyList)
        var groupPolicyListDecoded0:[SecurityHubClientTypes.AwsIamGroupPolicy]? = nil
        if let groupPolicyListContainer = groupPolicyListContainer {
            groupPolicyListDecoded0 = [SecurityHubClientTypes.AwsIamGroupPolicy]()
            for structure0 in groupPolicyListContainer {
                if let structure0 = structure0 {
                    groupPolicyListDecoded0?.append(structure0)
                }
            }
        }
        groupPolicyList = groupPolicyListDecoded0
        let pathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .path)
        path = pathDecoded
    }
}
