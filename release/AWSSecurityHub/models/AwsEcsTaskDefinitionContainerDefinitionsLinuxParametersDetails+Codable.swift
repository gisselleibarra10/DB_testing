// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SecurityHubClientTypes.AwsEcsTaskDefinitionContainerDefinitionsLinuxParametersDetails: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case capabilities = "Capabilities"
        case devices = "Devices"
        case initProcessEnabled = "InitProcessEnabled"
        case maxSwap = "MaxSwap"
        case sharedMemorySize = "SharedMemorySize"
        case swappiness = "Swappiness"
        case tmpfs = "Tmpfs"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let capabilities = self.capabilities {
            try encodeContainer.encode(capabilities, forKey: .capabilities)
        }
        if let devices = devices {
            var devicesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .devices)
            for awsecstaskdefinitioncontainerdefinitionslinuxparametersdeviceslist0 in devices {
                try devicesContainer.encode(awsecstaskdefinitioncontainerdefinitionslinuxparametersdeviceslist0)
            }
        }
        if initProcessEnabled != false {
            try encodeContainer.encode(initProcessEnabled, forKey: .initProcessEnabled)
        }
        if maxSwap != 0 {
            try encodeContainer.encode(maxSwap, forKey: .maxSwap)
        }
        if sharedMemorySize != 0 {
            try encodeContainer.encode(sharedMemorySize, forKey: .sharedMemorySize)
        }
        if swappiness != 0 {
            try encodeContainer.encode(swappiness, forKey: .swappiness)
        }
        if let tmpfs = tmpfs {
            var tmpfsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tmpfs)
            for awsecstaskdefinitioncontainerdefinitionslinuxparameterstmpfslist0 in tmpfs {
                try tmpfsContainer.encode(awsecstaskdefinitioncontainerdefinitionslinuxparameterstmpfslist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let capabilitiesDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsEcsTaskDefinitionContainerDefinitionsLinuxParametersCapabilitiesDetails.self, forKey: .capabilities)
        capabilities = capabilitiesDecoded
        let devicesContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.AwsEcsTaskDefinitionContainerDefinitionsLinuxParametersDevicesDetails?].self, forKey: .devices)
        var devicesDecoded0:[SecurityHubClientTypes.AwsEcsTaskDefinitionContainerDefinitionsLinuxParametersDevicesDetails]? = nil
        if let devicesContainer = devicesContainer {
            devicesDecoded0 = [SecurityHubClientTypes.AwsEcsTaskDefinitionContainerDefinitionsLinuxParametersDevicesDetails]()
            for structure0 in devicesContainer {
                if let structure0 = structure0 {
                    devicesDecoded0?.append(structure0)
                }
            }
        }
        devices = devicesDecoded0
        let initProcessEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .initProcessEnabled) ?? false
        initProcessEnabled = initProcessEnabledDecoded
        let maxSwapDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxSwap) ?? 0
        maxSwap = maxSwapDecoded
        let sharedMemorySizeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .sharedMemorySize) ?? 0
        sharedMemorySize = sharedMemorySizeDecoded
        let swappinessDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .swappiness) ?? 0
        swappiness = swappinessDecoded
        let tmpfsContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.AwsEcsTaskDefinitionContainerDefinitionsLinuxParametersTmpfsDetails?].self, forKey: .tmpfs)
        var tmpfsDecoded0:[SecurityHubClientTypes.AwsEcsTaskDefinitionContainerDefinitionsLinuxParametersTmpfsDetails]? = nil
        if let tmpfsContainer = tmpfsContainer {
            tmpfsDecoded0 = [SecurityHubClientTypes.AwsEcsTaskDefinitionContainerDefinitionsLinuxParametersTmpfsDetails]()
            for structure0 in tmpfsContainer {
                if let structure0 = structure0 {
                    tmpfsDecoded0?.append(structure0)
                }
            }
        }
        tmpfs = tmpfsDecoded0
    }
}
