// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SecurityHubClientTypes.AwsEcsTaskDefinitionContainerDefinitionsHealthCheckDetails: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case command = "Command"
        case interval = "Interval"
        case retries = "Retries"
        case startPeriod = "StartPeriod"
        case timeout = "Timeout"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let command = command {
            var commandContainer = encodeContainer.nestedUnkeyedContainer(forKey: .command)
            for nonemptystringlist0 in command {
                try commandContainer.encode(nonemptystringlist0)
            }
        }
        if interval != 0 {
            try encodeContainer.encode(interval, forKey: .interval)
        }
        if retries != 0 {
            try encodeContainer.encode(retries, forKey: .retries)
        }
        if startPeriod != 0 {
            try encodeContainer.encode(startPeriod, forKey: .startPeriod)
        }
        if timeout != 0 {
            try encodeContainer.encode(timeout, forKey: .timeout)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let commandContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .command)
        var commandDecoded0:[Swift.String]? = nil
        if let commandContainer = commandContainer {
            commandDecoded0 = [Swift.String]()
            for string0 in commandContainer {
                if let string0 = string0 {
                    commandDecoded0?.append(string0)
                }
            }
        }
        command = commandDecoded0
        let intervalDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .interval) ?? 0
        interval = intervalDecoded
        let retriesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .retries) ?? 0
        retries = retriesDecoded
        let startPeriodDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .startPeriod) ?? 0
        startPeriod = startPeriodDecoded
        let timeoutDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .timeout) ?? 0
        timeout = timeoutDecoded
    }
}
