// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension SecurityHubClientTypes {
    /// Defines settings for a method for the stage.
    public struct AwsApiGatewayMethodSettings: Swift.Equatable {
        /// Indicates whether the cached responses are encrypted.
        public var cacheDataEncrypted: Swift.Bool
        /// Specifies the time to live (TTL), in seconds, for cached responses. The higher the TTL, the longer the response is cached.
        public var cacheTtlInSeconds: Swift.Int
        /// Indicates whether responses are cached and returned for requests. For responses to be cached, a cache cluster must be enabled on the stage.
        public var cachingEnabled: Swift.Bool
        /// Indicates whether data trace logging is enabled for the method. Data trace logging affects the log entries that are pushed to CloudWatch Logs.
        public var dataTraceEnabled: Swift.Bool
        /// The HTTP method. You can use an asterisk (*) as a wildcard to apply method settings to multiple methods.
        public var httpMethod: Swift.String?
        /// The logging level for this method. The logging level affects the log entries that are pushed to CloudWatch Logs. If the logging level is ERROR, then the logs only include error-level entries. If the logging level is INFO, then the logs include both ERROR events and extra informational events. Valid values: OFF | ERROR | INFO
        public var loggingLevel: Swift.String?
        /// Indicates whether CloudWatch metrics are enabled for the method.
        public var metricsEnabled: Swift.Bool
        /// Indicates whether authorization is required for a cache invalidation request.
        public var requireAuthorizationForCacheControl: Swift.Bool
        /// The resource path for this method. Forward slashes (/) are encoded as ~1 . The initial slash must include a forward slash. For example, the path value /resource/subresource must be encoded as /~1resource~1subresource. To specify the root path, use only a slash (/). You can use an asterisk (*) as a wildcard to apply method settings to multiple methods.
        public var resourcePath: Swift.String?
        /// The throttling burst limit for the method.
        public var throttlingBurstLimit: Swift.Int
        /// The throttling rate limit for the method.
        public var throttlingRateLimit: Swift.Double
        /// Indicates how to handle unauthorized requests for cache invalidation. Valid values: FAIL_WITH_403 | SUCCEED_WITH_RESPONSE_HEADER | SUCCEED_WITHOUT_RESPONSE_HEADER
        public var unauthorizedCacheControlHeaderStrategy: Swift.String?

        public init (
            cacheDataEncrypted: Swift.Bool = false,
            cacheTtlInSeconds: Swift.Int = 0,
            cachingEnabled: Swift.Bool = false,
            dataTraceEnabled: Swift.Bool = false,
            httpMethod: Swift.String? = nil,
            loggingLevel: Swift.String? = nil,
            metricsEnabled: Swift.Bool = false,
            requireAuthorizationForCacheControl: Swift.Bool = false,
            resourcePath: Swift.String? = nil,
            throttlingBurstLimit: Swift.Int = 0,
            throttlingRateLimit: Swift.Double = 0.0,
            unauthorizedCacheControlHeaderStrategy: Swift.String? = nil
        )
        {
            self.cacheDataEncrypted = cacheDataEncrypted
            self.cacheTtlInSeconds = cacheTtlInSeconds
            self.cachingEnabled = cachingEnabled
            self.dataTraceEnabled = dataTraceEnabled
            self.httpMethod = httpMethod
            self.loggingLevel = loggingLevel
            self.metricsEnabled = metricsEnabled
            self.requireAuthorizationForCacheControl = requireAuthorizationForCacheControl
            self.resourcePath = resourcePath
            self.throttlingBurstLimit = throttlingBurstLimit
            self.throttlingRateLimit = throttlingRateLimit
            self.unauthorizedCacheControlHeaderStrategy = unauthorizedCacheControlHeaderStrategy
        }
    }

}
