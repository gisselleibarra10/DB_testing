// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SecurityHubClientTypes.Vulnerability: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cvss = "Cvss"
        case fixAvailable = "FixAvailable"
        case id = "Id"
        case referenceUrls = "ReferenceUrls"
        case relatedVulnerabilities = "RelatedVulnerabilities"
        case vendor = "Vendor"
        case vulnerablePackages = "VulnerablePackages"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cvss = cvss {
            var cvssContainer = encodeContainer.nestedUnkeyedContainer(forKey: .cvss)
            for cvsslist0 in cvss {
                try cvssContainer.encode(cvsslist0)
            }
        }
        if let fixAvailable = self.fixAvailable {
            try encodeContainer.encode(fixAvailable.rawValue, forKey: .fixAvailable)
        }
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let referenceUrls = referenceUrls {
            var referenceUrlsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .referenceUrls)
            for stringlist0 in referenceUrls {
                try referenceUrlsContainer.encode(stringlist0)
            }
        }
        if let relatedVulnerabilities = relatedVulnerabilities {
            var relatedVulnerabilitiesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .relatedVulnerabilities)
            for stringlist0 in relatedVulnerabilities {
                try relatedVulnerabilitiesContainer.encode(stringlist0)
            }
        }
        if let vendor = self.vendor {
            try encodeContainer.encode(vendor, forKey: .vendor)
        }
        if let vulnerablePackages = vulnerablePackages {
            var vulnerablePackagesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .vulnerablePackages)
            for softwarepackagelist0 in vulnerablePackages {
                try vulnerablePackagesContainer.encode(softwarepackagelist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let vulnerablePackagesContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.SoftwarePackage?].self, forKey: .vulnerablePackages)
        var vulnerablePackagesDecoded0:[SecurityHubClientTypes.SoftwarePackage]? = nil
        if let vulnerablePackagesContainer = vulnerablePackagesContainer {
            vulnerablePackagesDecoded0 = [SecurityHubClientTypes.SoftwarePackage]()
            for structure0 in vulnerablePackagesContainer {
                if let structure0 = structure0 {
                    vulnerablePackagesDecoded0?.append(structure0)
                }
            }
        }
        vulnerablePackages = vulnerablePackagesDecoded0
        let cvssContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.Cvss?].self, forKey: .cvss)
        var cvssDecoded0:[SecurityHubClientTypes.Cvss]? = nil
        if let cvssContainer = cvssContainer {
            cvssDecoded0 = [SecurityHubClientTypes.Cvss]()
            for structure0 in cvssContainer {
                if let structure0 = structure0 {
                    cvssDecoded0?.append(structure0)
                }
            }
        }
        cvss = cvssDecoded0
        let relatedVulnerabilitiesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .relatedVulnerabilities)
        var relatedVulnerabilitiesDecoded0:[Swift.String]? = nil
        if let relatedVulnerabilitiesContainer = relatedVulnerabilitiesContainer {
            relatedVulnerabilitiesDecoded0 = [Swift.String]()
            for string0 in relatedVulnerabilitiesContainer {
                if let string0 = string0 {
                    relatedVulnerabilitiesDecoded0?.append(string0)
                }
            }
        }
        relatedVulnerabilities = relatedVulnerabilitiesDecoded0
        let vendorDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.VulnerabilityVendor.self, forKey: .vendor)
        vendor = vendorDecoded
        let referenceUrlsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .referenceUrls)
        var referenceUrlsDecoded0:[Swift.String]? = nil
        if let referenceUrlsContainer = referenceUrlsContainer {
            referenceUrlsDecoded0 = [Swift.String]()
            for string0 in referenceUrlsContainer {
                if let string0 = string0 {
                    referenceUrlsDecoded0?.append(string0)
                }
            }
        }
        referenceUrls = referenceUrlsDecoded0
        let fixAvailableDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.VulnerabilityFixAvailable.self, forKey: .fixAvailable)
        fixAvailable = fixAvailableDecoded
    }
}
