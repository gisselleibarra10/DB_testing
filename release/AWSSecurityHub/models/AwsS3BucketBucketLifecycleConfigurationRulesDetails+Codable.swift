// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SecurityHubClientTypes.AwsS3BucketBucketLifecycleConfigurationRulesDetails: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case abortIncompleteMultipartUpload = "AbortIncompleteMultipartUpload"
        case expirationDate = "ExpirationDate"
        case expirationInDays = "ExpirationInDays"
        case expiredObjectDeleteMarker = "ExpiredObjectDeleteMarker"
        case filter = "Filter"
        case iD = "ID"
        case noncurrentVersionExpirationInDays = "NoncurrentVersionExpirationInDays"
        case noncurrentVersionTransitions = "NoncurrentVersionTransitions"
        case `prefix` = "Prefix"
        case status = "Status"
        case transitions = "Transitions"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let abortIncompleteMultipartUpload = self.abortIncompleteMultipartUpload {
            try encodeContainer.encode(abortIncompleteMultipartUpload, forKey: .abortIncompleteMultipartUpload)
        }
        if let expirationDate = self.expirationDate {
            try encodeContainer.encode(expirationDate, forKey: .expirationDate)
        }
        if expirationInDays != 0 {
            try encodeContainer.encode(expirationInDays, forKey: .expirationInDays)
        }
        if expiredObjectDeleteMarker != false {
            try encodeContainer.encode(expiredObjectDeleteMarker, forKey: .expiredObjectDeleteMarker)
        }
        if let filter = self.filter {
            try encodeContainer.encode(filter, forKey: .filter)
        }
        if let iD = self.iD {
            try encodeContainer.encode(iD, forKey: .iD)
        }
        if noncurrentVersionExpirationInDays != 0 {
            try encodeContainer.encode(noncurrentVersionExpirationInDays, forKey: .noncurrentVersionExpirationInDays)
        }
        if let noncurrentVersionTransitions = noncurrentVersionTransitions {
            var noncurrentVersionTransitionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .noncurrentVersionTransitions)
            for awss3bucketbucketlifecycleconfigurationrulesnoncurrentversiontransitionslist0 in noncurrentVersionTransitions {
                try noncurrentVersionTransitionsContainer.encode(awss3bucketbucketlifecycleconfigurationrulesnoncurrentversiontransitionslist0)
            }
        }
        if let `prefix` = self.`prefix` {
            try encodeContainer.encode(`prefix`, forKey: .`prefix`)
        }
        if let status = self.status {
            try encodeContainer.encode(status, forKey: .status)
        }
        if let transitions = transitions {
            var transitionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .transitions)
            for awss3bucketbucketlifecycleconfigurationrulestransitionslist0 in transitions {
                try transitionsContainer.encode(awss3bucketbucketlifecycleconfigurationrulestransitionslist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let abortIncompleteMultipartUploadDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsS3BucketBucketLifecycleConfigurationRulesAbortIncompleteMultipartUploadDetails.self, forKey: .abortIncompleteMultipartUpload)
        abortIncompleteMultipartUpload = abortIncompleteMultipartUploadDecoded
        let expirationDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .expirationDate)
        expirationDate = expirationDateDecoded
        let expirationInDaysDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .expirationInDays) ?? 0
        expirationInDays = expirationInDaysDecoded
        let expiredObjectDeleteMarkerDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .expiredObjectDeleteMarker) ?? false
        expiredObjectDeleteMarker = expiredObjectDeleteMarkerDecoded
        let filterDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsS3BucketBucketLifecycleConfigurationRulesFilterDetails.self, forKey: .filter)
        filter = filterDecoded
        let iDDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .iD)
        iD = iDDecoded
        let noncurrentVersionExpirationInDaysDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .noncurrentVersionExpirationInDays) ?? 0
        noncurrentVersionExpirationInDays = noncurrentVersionExpirationInDaysDecoded
        let noncurrentVersionTransitionsContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.AwsS3BucketBucketLifecycleConfigurationRulesNoncurrentVersionTransitionsDetails?].self, forKey: .noncurrentVersionTransitions)
        var noncurrentVersionTransitionsDecoded0:[SecurityHubClientTypes.AwsS3BucketBucketLifecycleConfigurationRulesNoncurrentVersionTransitionsDetails]? = nil
        if let noncurrentVersionTransitionsContainer = noncurrentVersionTransitionsContainer {
            noncurrentVersionTransitionsDecoded0 = [SecurityHubClientTypes.AwsS3BucketBucketLifecycleConfigurationRulesNoncurrentVersionTransitionsDetails]()
            for structure0 in noncurrentVersionTransitionsContainer {
                if let structure0 = structure0 {
                    noncurrentVersionTransitionsDecoded0?.append(structure0)
                }
            }
        }
        noncurrentVersionTransitions = noncurrentVersionTransitionsDecoded0
        let prefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .prefix)
        `prefix` = prefixDecoded
        let statusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .status)
        status = statusDecoded
        let transitionsContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.AwsS3BucketBucketLifecycleConfigurationRulesTransitionsDetails?].self, forKey: .transitions)
        var transitionsDecoded0:[SecurityHubClientTypes.AwsS3BucketBucketLifecycleConfigurationRulesTransitionsDetails]? = nil
        if let transitionsContainer = transitionsContainer {
            transitionsDecoded0 = [SecurityHubClientTypes.AwsS3BucketBucketLifecycleConfigurationRulesTransitionsDetails]()
            for structure0 in transitionsContainer {
                if let structure0 = structure0 {
                    transitionsDecoded0?.append(structure0)
                }
            }
        }
        transitions = transitionsDecoded0
    }
}
