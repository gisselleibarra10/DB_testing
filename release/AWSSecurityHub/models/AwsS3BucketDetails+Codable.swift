// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SecurityHubClientTypes.AwsS3BucketDetails: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accessControlList = "AccessControlList"
        case bucketLifecycleConfiguration = "BucketLifecycleConfiguration"
        case bucketLoggingConfiguration = "BucketLoggingConfiguration"
        case bucketNotificationConfiguration = "BucketNotificationConfiguration"
        case bucketVersioningConfiguration = "BucketVersioningConfiguration"
        case bucketWebsiteConfiguration = "BucketWebsiteConfiguration"
        case createdAt = "CreatedAt"
        case ownerAccountId = "OwnerAccountId"
        case ownerId = "OwnerId"
        case ownerName = "OwnerName"
        case publicAccessBlockConfiguration = "PublicAccessBlockConfiguration"
        case serverSideEncryptionConfiguration = "ServerSideEncryptionConfiguration"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accessControlList = self.accessControlList {
            try encodeContainer.encode(accessControlList, forKey: .accessControlList)
        }
        if let bucketLifecycleConfiguration = self.bucketLifecycleConfiguration {
            try encodeContainer.encode(bucketLifecycleConfiguration, forKey: .bucketLifecycleConfiguration)
        }
        if let bucketLoggingConfiguration = self.bucketLoggingConfiguration {
            try encodeContainer.encode(bucketLoggingConfiguration, forKey: .bucketLoggingConfiguration)
        }
        if let bucketNotificationConfiguration = self.bucketNotificationConfiguration {
            try encodeContainer.encode(bucketNotificationConfiguration, forKey: .bucketNotificationConfiguration)
        }
        if let bucketVersioningConfiguration = self.bucketVersioningConfiguration {
            try encodeContainer.encode(bucketVersioningConfiguration, forKey: .bucketVersioningConfiguration)
        }
        if let bucketWebsiteConfiguration = self.bucketWebsiteConfiguration {
            try encodeContainer.encode(bucketWebsiteConfiguration, forKey: .bucketWebsiteConfiguration)
        }
        if let createdAt = self.createdAt {
            try encodeContainer.encode(createdAt, forKey: .createdAt)
        }
        if let ownerAccountId = self.ownerAccountId {
            try encodeContainer.encode(ownerAccountId, forKey: .ownerAccountId)
        }
        if let ownerId = self.ownerId {
            try encodeContainer.encode(ownerId, forKey: .ownerId)
        }
        if let ownerName = self.ownerName {
            try encodeContainer.encode(ownerName, forKey: .ownerName)
        }
        if let publicAccessBlockConfiguration = self.publicAccessBlockConfiguration {
            try encodeContainer.encode(publicAccessBlockConfiguration, forKey: .publicAccessBlockConfiguration)
        }
        if let serverSideEncryptionConfiguration = self.serverSideEncryptionConfiguration {
            try encodeContainer.encode(serverSideEncryptionConfiguration, forKey: .serverSideEncryptionConfiguration)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ownerIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ownerId)
        ownerId = ownerIdDecoded
        let ownerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ownerName)
        ownerName = ownerNameDecoded
        let ownerAccountIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ownerAccountId)
        ownerAccountId = ownerAccountIdDecoded
        let createdAtDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .createdAt)
        createdAt = createdAtDecoded
        let serverSideEncryptionConfigurationDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsS3BucketServerSideEncryptionConfiguration.self, forKey: .serverSideEncryptionConfiguration)
        serverSideEncryptionConfiguration = serverSideEncryptionConfigurationDecoded
        let bucketLifecycleConfigurationDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsS3BucketBucketLifecycleConfigurationDetails.self, forKey: .bucketLifecycleConfiguration)
        bucketLifecycleConfiguration = bucketLifecycleConfigurationDecoded
        let publicAccessBlockConfigurationDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsS3AccountPublicAccessBlockDetails.self, forKey: .publicAccessBlockConfiguration)
        publicAccessBlockConfiguration = publicAccessBlockConfigurationDecoded
        let accessControlListDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .accessControlList)
        accessControlList = accessControlListDecoded
        let bucketLoggingConfigurationDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsS3BucketLoggingConfiguration.self, forKey: .bucketLoggingConfiguration)
        bucketLoggingConfiguration = bucketLoggingConfigurationDecoded
        let bucketWebsiteConfigurationDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsS3BucketWebsiteConfiguration.self, forKey: .bucketWebsiteConfiguration)
        bucketWebsiteConfiguration = bucketWebsiteConfigurationDecoded
        let bucketNotificationConfigurationDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsS3BucketNotificationConfiguration.self, forKey: .bucketNotificationConfiguration)
        bucketNotificationConfiguration = bucketNotificationConfigurationDecoded
        let bucketVersioningConfigurationDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsS3BucketBucketVersioningConfiguration.self, forKey: .bucketVersioningConfiguration)
        bucketVersioningConfiguration = bucketVersioningConfigurationDecoded
    }
}
