// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SecurityHubClientTypes.AwsSecurityFinding: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case action = "Action"
        case awsAccountId = "AwsAccountId"
        case companyName = "CompanyName"
        case compliance = "Compliance"
        case confidence = "Confidence"
        case createdAt = "CreatedAt"
        case criticality = "Criticality"
        case description = "Description"
        case findingProviderFields = "FindingProviderFields"
        case firstObservedAt = "FirstObservedAt"
        case generatorId = "GeneratorId"
        case id = "Id"
        case lastObservedAt = "LastObservedAt"
        case malware = "Malware"
        case network = "Network"
        case networkPath = "NetworkPath"
        case note = "Note"
        case patchSummary = "PatchSummary"
        case process = "Process"
        case productArn = "ProductArn"
        case productFields = "ProductFields"
        case productName = "ProductName"
        case recordState = "RecordState"
        case region = "Region"
        case relatedFindings = "RelatedFindings"
        case remediation = "Remediation"
        case resources = "Resources"
        case sample = "Sample"
        case schemaVersion = "SchemaVersion"
        case severity = "Severity"
        case sourceUrl = "SourceUrl"
        case threatIntelIndicators = "ThreatIntelIndicators"
        case threats = "Threats"
        case title = "Title"
        case types = "Types"
        case updatedAt = "UpdatedAt"
        case userDefinedFields = "UserDefinedFields"
        case verificationState = "VerificationState"
        case vulnerabilities = "Vulnerabilities"
        case workflow = "Workflow"
        case workflowState = "WorkflowState"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let action = self.action {
            try encodeContainer.encode(action, forKey: .action)
        }
        if let awsAccountId = self.awsAccountId {
            try encodeContainer.encode(awsAccountId, forKey: .awsAccountId)
        }
        if let companyName = self.companyName {
            try encodeContainer.encode(companyName, forKey: .companyName)
        }
        if let compliance = self.compliance {
            try encodeContainer.encode(compliance, forKey: .compliance)
        }
        if confidence != 0 {
            try encodeContainer.encode(confidence, forKey: .confidence)
        }
        if let createdAt = self.createdAt {
            try encodeContainer.encode(createdAt, forKey: .createdAt)
        }
        if criticality != 0 {
            try encodeContainer.encode(criticality, forKey: .criticality)
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let findingProviderFields = self.findingProviderFields {
            try encodeContainer.encode(findingProviderFields, forKey: .findingProviderFields)
        }
        if let firstObservedAt = self.firstObservedAt {
            try encodeContainer.encode(firstObservedAt, forKey: .firstObservedAt)
        }
        if let generatorId = self.generatorId {
            try encodeContainer.encode(generatorId, forKey: .generatorId)
        }
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let lastObservedAt = self.lastObservedAt {
            try encodeContainer.encode(lastObservedAt, forKey: .lastObservedAt)
        }
        if let malware = malware {
            var malwareContainer = encodeContainer.nestedUnkeyedContainer(forKey: .malware)
            for malwarelist0 in malware {
                try malwareContainer.encode(malwarelist0)
            }
        }
        if let network = self.network {
            try encodeContainer.encode(network, forKey: .network)
        }
        if let networkPath = networkPath {
            var networkPathContainer = encodeContainer.nestedUnkeyedContainer(forKey: .networkPath)
            for networkpathlist0 in networkPath {
                try networkPathContainer.encode(networkpathlist0)
            }
        }
        if let note = self.note {
            try encodeContainer.encode(note, forKey: .note)
        }
        if let patchSummary = self.patchSummary {
            try encodeContainer.encode(patchSummary, forKey: .patchSummary)
        }
        if let process = self.process {
            try encodeContainer.encode(process, forKey: .process)
        }
        if let productArn = self.productArn {
            try encodeContainer.encode(productArn, forKey: .productArn)
        }
        if let productFields = productFields {
            var productFieldsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .productFields)
            for (dictKey0, fieldmap0) in productFields {
                try productFieldsContainer.encode(fieldmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let productName = self.productName {
            try encodeContainer.encode(productName, forKey: .productName)
        }
        if let recordState = self.recordState {
            try encodeContainer.encode(recordState.rawValue, forKey: .recordState)
        }
        if let region = self.region {
            try encodeContainer.encode(region, forKey: .region)
        }
        if let relatedFindings = relatedFindings {
            var relatedFindingsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .relatedFindings)
            for relatedfindinglist0 in relatedFindings {
                try relatedFindingsContainer.encode(relatedfindinglist0)
            }
        }
        if let remediation = self.remediation {
            try encodeContainer.encode(remediation, forKey: .remediation)
        }
        if let resources = resources {
            var resourcesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .resources)
            for resourcelist0 in resources {
                try resourcesContainer.encode(resourcelist0)
            }
        }
        if sample != false {
            try encodeContainer.encode(sample, forKey: .sample)
        }
        if let schemaVersion = self.schemaVersion {
            try encodeContainer.encode(schemaVersion, forKey: .schemaVersion)
        }
        if let severity = self.severity {
            try encodeContainer.encode(severity, forKey: .severity)
        }
        if let sourceUrl = self.sourceUrl {
            try encodeContainer.encode(sourceUrl, forKey: .sourceUrl)
        }
        if let threatIntelIndicators = threatIntelIndicators {
            var threatIntelIndicatorsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .threatIntelIndicators)
            for threatintelindicatorlist0 in threatIntelIndicators {
                try threatIntelIndicatorsContainer.encode(threatintelindicatorlist0)
            }
        }
        if let threats = threats {
            var threatsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .threats)
            for threatlist0 in threats {
                try threatsContainer.encode(threatlist0)
            }
        }
        if let title = self.title {
            try encodeContainer.encode(title, forKey: .title)
        }
        if let types = types {
            var typesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .types)
            for typelist0 in types {
                try typesContainer.encode(typelist0)
            }
        }
        if let updatedAt = self.updatedAt {
            try encodeContainer.encode(updatedAt, forKey: .updatedAt)
        }
        if let userDefinedFields = userDefinedFields {
            var userDefinedFieldsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .userDefinedFields)
            for (dictKey0, fieldmap0) in userDefinedFields {
                try userDefinedFieldsContainer.encode(fieldmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let verificationState = self.verificationState {
            try encodeContainer.encode(verificationState.rawValue, forKey: .verificationState)
        }
        if let vulnerabilities = vulnerabilities {
            var vulnerabilitiesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .vulnerabilities)
            for vulnerabilitylist0 in vulnerabilities {
                try vulnerabilitiesContainer.encode(vulnerabilitylist0)
            }
        }
        if let workflow = self.workflow {
            try encodeContainer.encode(workflow, forKey: .workflow)
        }
        if let workflowState = self.workflowState {
            try encodeContainer.encode(workflowState.rawValue, forKey: .workflowState)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let schemaVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .schemaVersion)
        schemaVersion = schemaVersionDecoded
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let productArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .productArn)
        productArn = productArnDecoded
        let productNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .productName)
        productName = productNameDecoded
        let companyNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .companyName)
        companyName = companyNameDecoded
        let regionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .region)
        region = regionDecoded
        let generatorIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .generatorId)
        generatorId = generatorIdDecoded
        let awsAccountIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .awsAccountId)
        awsAccountId = awsAccountIdDecoded
        let typesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .types)
        var typesDecoded0:[Swift.String]? = nil
        if let typesContainer = typesContainer {
            typesDecoded0 = [Swift.String]()
            for string0 in typesContainer {
                if let string0 = string0 {
                    typesDecoded0?.append(string0)
                }
            }
        }
        types = typesDecoded0
        let firstObservedAtDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .firstObservedAt)
        firstObservedAt = firstObservedAtDecoded
        let lastObservedAtDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastObservedAt)
        lastObservedAt = lastObservedAtDecoded
        let createdAtDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .createdAt)
        createdAt = createdAtDecoded
        let updatedAtDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .updatedAt)
        updatedAt = updatedAtDecoded
        let severityDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.Severity.self, forKey: .severity)
        severity = severityDecoded
        let confidenceDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .confidence) ?? 0
        confidence = confidenceDecoded
        let criticalityDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .criticality) ?? 0
        criticality = criticalityDecoded
        let titleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .title)
        title = titleDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let remediationDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.Remediation.self, forKey: .remediation)
        remediation = remediationDecoded
        let sourceUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceUrl)
        sourceUrl = sourceUrlDecoded
        let productFieldsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .productFields)
        var productFieldsDecoded0: [Swift.String:Swift.String]? = nil
        if let productFieldsContainer = productFieldsContainer {
            productFieldsDecoded0 = [Swift.String:Swift.String]()
            for (key0, nonemptystring0) in productFieldsContainer {
                if let nonemptystring0 = nonemptystring0 {
                    productFieldsDecoded0?[key0] = nonemptystring0
                }
            }
        }
        productFields = productFieldsDecoded0
        let userDefinedFieldsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .userDefinedFields)
        var userDefinedFieldsDecoded0: [Swift.String:Swift.String]? = nil
        if let userDefinedFieldsContainer = userDefinedFieldsContainer {
            userDefinedFieldsDecoded0 = [Swift.String:Swift.String]()
            for (key0, nonemptystring0) in userDefinedFieldsContainer {
                if let nonemptystring0 = nonemptystring0 {
                    userDefinedFieldsDecoded0?[key0] = nonemptystring0
                }
            }
        }
        userDefinedFields = userDefinedFieldsDecoded0
        let malwareContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.Malware?].self, forKey: .malware)
        var malwareDecoded0:[SecurityHubClientTypes.Malware]? = nil
        if let malwareContainer = malwareContainer {
            malwareDecoded0 = [SecurityHubClientTypes.Malware]()
            for structure0 in malwareContainer {
                if let structure0 = structure0 {
                    malwareDecoded0?.append(structure0)
                }
            }
        }
        malware = malwareDecoded0
        let networkDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.Network.self, forKey: .network)
        network = networkDecoded
        let networkPathContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.NetworkPathComponent?].self, forKey: .networkPath)
        var networkPathDecoded0:[SecurityHubClientTypes.NetworkPathComponent]? = nil
        if let networkPathContainer = networkPathContainer {
            networkPathDecoded0 = [SecurityHubClientTypes.NetworkPathComponent]()
            for structure0 in networkPathContainer {
                if let structure0 = structure0 {
                    networkPathDecoded0?.append(structure0)
                }
            }
        }
        networkPath = networkPathDecoded0
        let processDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.ProcessDetails.self, forKey: .process)
        process = processDecoded
        let threatsContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.Threat?].self, forKey: .threats)
        var threatsDecoded0:[SecurityHubClientTypes.Threat]? = nil
        if let threatsContainer = threatsContainer {
            threatsDecoded0 = [SecurityHubClientTypes.Threat]()
            for structure0 in threatsContainer {
                if let structure0 = structure0 {
                    threatsDecoded0?.append(structure0)
                }
            }
        }
        threats = threatsDecoded0
        let threatIntelIndicatorsContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.ThreatIntelIndicator?].self, forKey: .threatIntelIndicators)
        var threatIntelIndicatorsDecoded0:[SecurityHubClientTypes.ThreatIntelIndicator]? = nil
        if let threatIntelIndicatorsContainer = threatIntelIndicatorsContainer {
            threatIntelIndicatorsDecoded0 = [SecurityHubClientTypes.ThreatIntelIndicator]()
            for structure0 in threatIntelIndicatorsContainer {
                if let structure0 = structure0 {
                    threatIntelIndicatorsDecoded0?.append(structure0)
                }
            }
        }
        threatIntelIndicators = threatIntelIndicatorsDecoded0
        let resourcesContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.Resource?].self, forKey: .resources)
        var resourcesDecoded0:[SecurityHubClientTypes.Resource]? = nil
        if let resourcesContainer = resourcesContainer {
            resourcesDecoded0 = [SecurityHubClientTypes.Resource]()
            for structure0 in resourcesContainer {
                if let structure0 = structure0 {
                    resourcesDecoded0?.append(structure0)
                }
            }
        }
        resources = resourcesDecoded0
        let complianceDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.Compliance.self, forKey: .compliance)
        compliance = complianceDecoded
        let verificationStateDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.VerificationState.self, forKey: .verificationState)
        verificationState = verificationStateDecoded
        let workflowStateDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.WorkflowState.self, forKey: .workflowState)
        workflowState = workflowStateDecoded
        let workflowDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.Workflow.self, forKey: .workflow)
        workflow = workflowDecoded
        let recordStateDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.RecordState.self, forKey: .recordState)
        recordState = recordStateDecoded
        let relatedFindingsContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.RelatedFinding?].self, forKey: .relatedFindings)
        var relatedFindingsDecoded0:[SecurityHubClientTypes.RelatedFinding]? = nil
        if let relatedFindingsContainer = relatedFindingsContainer {
            relatedFindingsDecoded0 = [SecurityHubClientTypes.RelatedFinding]()
            for structure0 in relatedFindingsContainer {
                if let structure0 = structure0 {
                    relatedFindingsDecoded0?.append(structure0)
                }
            }
        }
        relatedFindings = relatedFindingsDecoded0
        let noteDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.Note.self, forKey: .note)
        note = noteDecoded
        let vulnerabilitiesContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.Vulnerability?].self, forKey: .vulnerabilities)
        var vulnerabilitiesDecoded0:[SecurityHubClientTypes.Vulnerability]? = nil
        if let vulnerabilitiesContainer = vulnerabilitiesContainer {
            vulnerabilitiesDecoded0 = [SecurityHubClientTypes.Vulnerability]()
            for structure0 in vulnerabilitiesContainer {
                if let structure0 = structure0 {
                    vulnerabilitiesDecoded0?.append(structure0)
                }
            }
        }
        vulnerabilities = vulnerabilitiesDecoded0
        let patchSummaryDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.PatchSummary.self, forKey: .patchSummary)
        patchSummary = patchSummaryDecoded
        let actionDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.Action.self, forKey: .action)
        action = actionDecoded
        let findingProviderFieldsDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.FindingProviderFields.self, forKey: .findingProviderFields)
        findingProviderFields = findingProviderFieldsDecoded
        let sampleDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .sample) ?? false
        sample = sampleDecoded
    }
}
