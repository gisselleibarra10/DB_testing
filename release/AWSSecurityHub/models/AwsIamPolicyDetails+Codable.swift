// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SecurityHubClientTypes.AwsIamPolicyDetails: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attachmentCount = "AttachmentCount"
        case createDate = "CreateDate"
        case defaultVersionId = "DefaultVersionId"
        case description = "Description"
        case isAttachable = "IsAttachable"
        case path = "Path"
        case permissionsBoundaryUsageCount = "PermissionsBoundaryUsageCount"
        case policyId = "PolicyId"
        case policyName = "PolicyName"
        case policyVersionList = "PolicyVersionList"
        case updateDate = "UpdateDate"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if attachmentCount != 0 {
            try encodeContainer.encode(attachmentCount, forKey: .attachmentCount)
        }
        if let createDate = self.createDate {
            try encodeContainer.encode(createDate, forKey: .createDate)
        }
        if let defaultVersionId = self.defaultVersionId {
            try encodeContainer.encode(defaultVersionId, forKey: .defaultVersionId)
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if isAttachable != false {
            try encodeContainer.encode(isAttachable, forKey: .isAttachable)
        }
        if let path = self.path {
            try encodeContainer.encode(path, forKey: .path)
        }
        if permissionsBoundaryUsageCount != 0 {
            try encodeContainer.encode(permissionsBoundaryUsageCount, forKey: .permissionsBoundaryUsageCount)
        }
        if let policyId = self.policyId {
            try encodeContainer.encode(policyId, forKey: .policyId)
        }
        if let policyName = self.policyName {
            try encodeContainer.encode(policyName, forKey: .policyName)
        }
        if let policyVersionList = policyVersionList {
            var policyVersionListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .policyVersionList)
            for awsiampolicyversionlist0 in policyVersionList {
                try policyVersionListContainer.encode(awsiampolicyversionlist0)
            }
        }
        if let updateDate = self.updateDate {
            try encodeContainer.encode(updateDate, forKey: .updateDate)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let attachmentCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .attachmentCount) ?? 0
        attachmentCount = attachmentCountDecoded
        let createDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .createDate)
        createDate = createDateDecoded
        let defaultVersionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .defaultVersionId)
        defaultVersionId = defaultVersionIdDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let isAttachableDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .isAttachable) ?? false
        isAttachable = isAttachableDecoded
        let pathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .path)
        path = pathDecoded
        let permissionsBoundaryUsageCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .permissionsBoundaryUsageCount) ?? 0
        permissionsBoundaryUsageCount = permissionsBoundaryUsageCountDecoded
        let policyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policyId)
        policyId = policyIdDecoded
        let policyNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policyName)
        policyName = policyNameDecoded
        let policyVersionListContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.AwsIamPolicyVersion?].self, forKey: .policyVersionList)
        var policyVersionListDecoded0:[SecurityHubClientTypes.AwsIamPolicyVersion]? = nil
        if let policyVersionListContainer = policyVersionListContainer {
            policyVersionListDecoded0 = [SecurityHubClientTypes.AwsIamPolicyVersion]()
            for structure0 in policyVersionListContainer {
                if let structure0 = structure0 {
                    policyVersionListDecoded0?.append(structure0)
                }
            }
        }
        policyVersionList = policyVersionListDecoded0
        let updateDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .updateDate)
        updateDate = updateDateDecoded
    }
}
