// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SecurityHubClientTypes.AwsEcsServiceDetails: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case capacityProviderStrategy = "CapacityProviderStrategy"
        case cluster = "Cluster"
        case deploymentConfiguration = "DeploymentConfiguration"
        case deploymentController = "DeploymentController"
        case desiredCount = "DesiredCount"
        case enableEcsManagedTags = "EnableEcsManagedTags"
        case enableExecuteCommand = "EnableExecuteCommand"
        case healthCheckGracePeriodSeconds = "HealthCheckGracePeriodSeconds"
        case launchType = "LaunchType"
        case loadBalancers = "LoadBalancers"
        case name = "Name"
        case networkConfiguration = "NetworkConfiguration"
        case placementConstraints = "PlacementConstraints"
        case placementStrategies = "PlacementStrategies"
        case platformVersion = "PlatformVersion"
        case propagateTags = "PropagateTags"
        case role = "Role"
        case schedulingStrategy = "SchedulingStrategy"
        case serviceArn = "ServiceArn"
        case serviceName = "ServiceName"
        case serviceRegistries = "ServiceRegistries"
        case taskDefinition = "TaskDefinition"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let capacityProviderStrategy = capacityProviderStrategy {
            var capacityProviderStrategyContainer = encodeContainer.nestedUnkeyedContainer(forKey: .capacityProviderStrategy)
            for awsecsservicecapacityproviderstrategylist0 in capacityProviderStrategy {
                try capacityProviderStrategyContainer.encode(awsecsservicecapacityproviderstrategylist0)
            }
        }
        if let cluster = self.cluster {
            try encodeContainer.encode(cluster, forKey: .cluster)
        }
        if let deploymentConfiguration = self.deploymentConfiguration {
            try encodeContainer.encode(deploymentConfiguration, forKey: .deploymentConfiguration)
        }
        if let deploymentController = self.deploymentController {
            try encodeContainer.encode(deploymentController, forKey: .deploymentController)
        }
        if desiredCount != 0 {
            try encodeContainer.encode(desiredCount, forKey: .desiredCount)
        }
        if enableEcsManagedTags != false {
            try encodeContainer.encode(enableEcsManagedTags, forKey: .enableEcsManagedTags)
        }
        if enableExecuteCommand != false {
            try encodeContainer.encode(enableExecuteCommand, forKey: .enableExecuteCommand)
        }
        if healthCheckGracePeriodSeconds != 0 {
            try encodeContainer.encode(healthCheckGracePeriodSeconds, forKey: .healthCheckGracePeriodSeconds)
        }
        if let launchType = self.launchType {
            try encodeContainer.encode(launchType, forKey: .launchType)
        }
        if let loadBalancers = loadBalancers {
            var loadBalancersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .loadBalancers)
            for awsecsserviceloadbalancerslist0 in loadBalancers {
                try loadBalancersContainer.encode(awsecsserviceloadbalancerslist0)
            }
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let networkConfiguration = self.networkConfiguration {
            try encodeContainer.encode(networkConfiguration, forKey: .networkConfiguration)
        }
        if let placementConstraints = placementConstraints {
            var placementConstraintsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .placementConstraints)
            for awsecsserviceplacementconstraintslist0 in placementConstraints {
                try placementConstraintsContainer.encode(awsecsserviceplacementconstraintslist0)
            }
        }
        if let placementStrategies = placementStrategies {
            var placementStrategiesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .placementStrategies)
            for awsecsserviceplacementstrategieslist0 in placementStrategies {
                try placementStrategiesContainer.encode(awsecsserviceplacementstrategieslist0)
            }
        }
        if let platformVersion = self.platformVersion {
            try encodeContainer.encode(platformVersion, forKey: .platformVersion)
        }
        if let propagateTags = self.propagateTags {
            try encodeContainer.encode(propagateTags, forKey: .propagateTags)
        }
        if let role = self.role {
            try encodeContainer.encode(role, forKey: .role)
        }
        if let schedulingStrategy = self.schedulingStrategy {
            try encodeContainer.encode(schedulingStrategy, forKey: .schedulingStrategy)
        }
        if let serviceArn = self.serviceArn {
            try encodeContainer.encode(serviceArn, forKey: .serviceArn)
        }
        if let serviceName = self.serviceName {
            try encodeContainer.encode(serviceName, forKey: .serviceName)
        }
        if let serviceRegistries = serviceRegistries {
            var serviceRegistriesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .serviceRegistries)
            for awsecsserviceserviceregistrieslist0 in serviceRegistries {
                try serviceRegistriesContainer.encode(awsecsserviceserviceregistrieslist0)
            }
        }
        if let taskDefinition = self.taskDefinition {
            try encodeContainer.encode(taskDefinition, forKey: .taskDefinition)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let capacityProviderStrategyContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.AwsEcsServiceCapacityProviderStrategyDetails?].self, forKey: .capacityProviderStrategy)
        var capacityProviderStrategyDecoded0:[SecurityHubClientTypes.AwsEcsServiceCapacityProviderStrategyDetails]? = nil
        if let capacityProviderStrategyContainer = capacityProviderStrategyContainer {
            capacityProviderStrategyDecoded0 = [SecurityHubClientTypes.AwsEcsServiceCapacityProviderStrategyDetails]()
            for structure0 in capacityProviderStrategyContainer {
                if let structure0 = structure0 {
                    capacityProviderStrategyDecoded0?.append(structure0)
                }
            }
        }
        capacityProviderStrategy = capacityProviderStrategyDecoded0
        let clusterDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cluster)
        cluster = clusterDecoded
        let deploymentConfigurationDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsEcsServiceDeploymentConfigurationDetails.self, forKey: .deploymentConfiguration)
        deploymentConfiguration = deploymentConfigurationDecoded
        let deploymentControllerDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsEcsServiceDeploymentControllerDetails.self, forKey: .deploymentController)
        deploymentController = deploymentControllerDecoded
        let desiredCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .desiredCount) ?? 0
        desiredCount = desiredCountDecoded
        let enableEcsManagedTagsDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enableEcsManagedTags) ?? false
        enableEcsManagedTags = enableEcsManagedTagsDecoded
        let enableExecuteCommandDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enableExecuteCommand) ?? false
        enableExecuteCommand = enableExecuteCommandDecoded
        let healthCheckGracePeriodSecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .healthCheckGracePeriodSeconds) ?? 0
        healthCheckGracePeriodSeconds = healthCheckGracePeriodSecondsDecoded
        let launchTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .launchType)
        launchType = launchTypeDecoded
        let loadBalancersContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.AwsEcsServiceLoadBalancersDetails?].self, forKey: .loadBalancers)
        var loadBalancersDecoded0:[SecurityHubClientTypes.AwsEcsServiceLoadBalancersDetails]? = nil
        if let loadBalancersContainer = loadBalancersContainer {
            loadBalancersDecoded0 = [SecurityHubClientTypes.AwsEcsServiceLoadBalancersDetails]()
            for structure0 in loadBalancersContainer {
                if let structure0 = structure0 {
                    loadBalancersDecoded0?.append(structure0)
                }
            }
        }
        loadBalancers = loadBalancersDecoded0
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let networkConfigurationDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsEcsServiceNetworkConfigurationDetails.self, forKey: .networkConfiguration)
        networkConfiguration = networkConfigurationDecoded
        let placementConstraintsContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.AwsEcsServicePlacementConstraintsDetails?].self, forKey: .placementConstraints)
        var placementConstraintsDecoded0:[SecurityHubClientTypes.AwsEcsServicePlacementConstraintsDetails]? = nil
        if let placementConstraintsContainer = placementConstraintsContainer {
            placementConstraintsDecoded0 = [SecurityHubClientTypes.AwsEcsServicePlacementConstraintsDetails]()
            for structure0 in placementConstraintsContainer {
                if let structure0 = structure0 {
                    placementConstraintsDecoded0?.append(structure0)
                }
            }
        }
        placementConstraints = placementConstraintsDecoded0
        let placementStrategiesContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.AwsEcsServicePlacementStrategiesDetails?].self, forKey: .placementStrategies)
        var placementStrategiesDecoded0:[SecurityHubClientTypes.AwsEcsServicePlacementStrategiesDetails]? = nil
        if let placementStrategiesContainer = placementStrategiesContainer {
            placementStrategiesDecoded0 = [SecurityHubClientTypes.AwsEcsServicePlacementStrategiesDetails]()
            for structure0 in placementStrategiesContainer {
                if let structure0 = structure0 {
                    placementStrategiesDecoded0?.append(structure0)
                }
            }
        }
        placementStrategies = placementStrategiesDecoded0
        let platformVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .platformVersion)
        platformVersion = platformVersionDecoded
        let propagateTagsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .propagateTags)
        propagateTags = propagateTagsDecoded
        let roleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .role)
        role = roleDecoded
        let schedulingStrategyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .schedulingStrategy)
        schedulingStrategy = schedulingStrategyDecoded
        let serviceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serviceArn)
        serviceArn = serviceArnDecoded
        let serviceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serviceName)
        serviceName = serviceNameDecoded
        let serviceRegistriesContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.AwsEcsServiceServiceRegistriesDetails?].self, forKey: .serviceRegistries)
        var serviceRegistriesDecoded0:[SecurityHubClientTypes.AwsEcsServiceServiceRegistriesDetails]? = nil
        if let serviceRegistriesContainer = serviceRegistriesContainer {
            serviceRegistriesDecoded0 = [SecurityHubClientTypes.AwsEcsServiceServiceRegistriesDetails]()
            for structure0 in serviceRegistriesContainer {
                if let structure0 = structure0 {
                    serviceRegistriesDecoded0?.append(structure0)
                }
            }
        }
        serviceRegistries = serviceRegistriesDecoded0
        let taskDefinitionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .taskDefinition)
        taskDefinition = taskDefinitionDecoded
    }
}
