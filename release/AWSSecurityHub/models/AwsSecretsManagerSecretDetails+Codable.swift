// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SecurityHubClientTypes.AwsSecretsManagerSecretDetails: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deleted = "Deleted"
        case description = "Description"
        case kmsKeyId = "KmsKeyId"
        case name = "Name"
        case rotationEnabled = "RotationEnabled"
        case rotationLambdaArn = "RotationLambdaArn"
        case rotationOccurredWithinFrequency = "RotationOccurredWithinFrequency"
        case rotationRules = "RotationRules"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if deleted != false {
            try encodeContainer.encode(deleted, forKey: .deleted)
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let kmsKeyId = self.kmsKeyId {
            try encodeContainer.encode(kmsKeyId, forKey: .kmsKeyId)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if rotationEnabled != false {
            try encodeContainer.encode(rotationEnabled, forKey: .rotationEnabled)
        }
        if let rotationLambdaArn = self.rotationLambdaArn {
            try encodeContainer.encode(rotationLambdaArn, forKey: .rotationLambdaArn)
        }
        if rotationOccurredWithinFrequency != false {
            try encodeContainer.encode(rotationOccurredWithinFrequency, forKey: .rotationOccurredWithinFrequency)
        }
        if let rotationRules = self.rotationRules {
            try encodeContainer.encode(rotationRules, forKey: .rotationRules)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let rotationRulesDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsSecretsManagerSecretRotationRules.self, forKey: .rotationRules)
        rotationRules = rotationRulesDecoded
        let rotationOccurredWithinFrequencyDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .rotationOccurredWithinFrequency) ?? false
        rotationOccurredWithinFrequency = rotationOccurredWithinFrequencyDecoded
        let kmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kmsKeyId)
        kmsKeyId = kmsKeyIdDecoded
        let rotationEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .rotationEnabled) ?? false
        rotationEnabled = rotationEnabledDecoded
        let rotationLambdaArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .rotationLambdaArn)
        rotationLambdaArn = rotationLambdaArnDecoded
        let deletedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .deleted) ?? false
        deleted = deletedDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
    }
}
