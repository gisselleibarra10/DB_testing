// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SecurityHubClientTypes.AwsAutoScalingAutoScalingGroupDetails: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case availabilityZones = "AvailabilityZones"
        case capacityRebalance = "CapacityRebalance"
        case createdTime = "CreatedTime"
        case healthCheckGracePeriod = "HealthCheckGracePeriod"
        case healthCheckType = "HealthCheckType"
        case launchConfigurationName = "LaunchConfigurationName"
        case launchTemplate = "LaunchTemplate"
        case loadBalancerNames = "LoadBalancerNames"
        case mixedInstancesPolicy = "MixedInstancesPolicy"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let availabilityZones = availabilityZones {
            var availabilityZonesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .availabilityZones)
            for awsautoscalingautoscalinggroupavailabilityzoneslist0 in availabilityZones {
                try availabilityZonesContainer.encode(awsautoscalingautoscalinggroupavailabilityzoneslist0)
            }
        }
        if capacityRebalance != false {
            try encodeContainer.encode(capacityRebalance, forKey: .capacityRebalance)
        }
        if let createdTime = self.createdTime {
            try encodeContainer.encode(createdTime, forKey: .createdTime)
        }
        if healthCheckGracePeriod != 0 {
            try encodeContainer.encode(healthCheckGracePeriod, forKey: .healthCheckGracePeriod)
        }
        if let healthCheckType = self.healthCheckType {
            try encodeContainer.encode(healthCheckType, forKey: .healthCheckType)
        }
        if let launchConfigurationName = self.launchConfigurationName {
            try encodeContainer.encode(launchConfigurationName, forKey: .launchConfigurationName)
        }
        if let launchTemplate = self.launchTemplate {
            try encodeContainer.encode(launchTemplate, forKey: .launchTemplate)
        }
        if let loadBalancerNames = loadBalancerNames {
            var loadBalancerNamesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .loadBalancerNames)
            for stringlist0 in loadBalancerNames {
                try loadBalancerNamesContainer.encode(stringlist0)
            }
        }
        if let mixedInstancesPolicy = self.mixedInstancesPolicy {
            try encodeContainer.encode(mixedInstancesPolicy, forKey: .mixedInstancesPolicy)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let launchConfigurationNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .launchConfigurationName)
        launchConfigurationName = launchConfigurationNameDecoded
        let loadBalancerNamesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .loadBalancerNames)
        var loadBalancerNamesDecoded0:[Swift.String]? = nil
        if let loadBalancerNamesContainer = loadBalancerNamesContainer {
            loadBalancerNamesDecoded0 = [Swift.String]()
            for string0 in loadBalancerNamesContainer {
                if let string0 = string0 {
                    loadBalancerNamesDecoded0?.append(string0)
                }
            }
        }
        loadBalancerNames = loadBalancerNamesDecoded0
        let healthCheckTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .healthCheckType)
        healthCheckType = healthCheckTypeDecoded
        let healthCheckGracePeriodDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .healthCheckGracePeriod) ?? 0
        healthCheckGracePeriod = healthCheckGracePeriodDecoded
        let createdTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .createdTime)
        createdTime = createdTimeDecoded
        let mixedInstancesPolicyDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsAutoScalingAutoScalingGroupMixedInstancesPolicyDetails.self, forKey: .mixedInstancesPolicy)
        mixedInstancesPolicy = mixedInstancesPolicyDecoded
        let availabilityZonesContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.AwsAutoScalingAutoScalingGroupAvailabilityZonesListDetails?].self, forKey: .availabilityZones)
        var availabilityZonesDecoded0:[SecurityHubClientTypes.AwsAutoScalingAutoScalingGroupAvailabilityZonesListDetails]? = nil
        if let availabilityZonesContainer = availabilityZonesContainer {
            availabilityZonesDecoded0 = [SecurityHubClientTypes.AwsAutoScalingAutoScalingGroupAvailabilityZonesListDetails]()
            for structure0 in availabilityZonesContainer {
                if let structure0 = structure0 {
                    availabilityZonesDecoded0?.append(structure0)
                }
            }
        }
        availabilityZones = availabilityZonesDecoded0
        let launchTemplateDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsAutoScalingAutoScalingGroupLaunchTemplateLaunchTemplateSpecification.self, forKey: .launchTemplate)
        launchTemplate = launchTemplateDecoded
        let capacityRebalanceDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .capacityRebalance) ?? false
        capacityRebalance = capacityRebalanceDecoded
    }
}
