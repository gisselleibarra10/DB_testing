// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension SecurityHubClientTypes {
    /// Specifies an alarm and associates it with the specified metric or metric math expression.
    public struct AwsCloudWatchAlarmDetails: Swift.Equatable {
        /// Indicates whether actions should be executed during any changes to the alarm state.
        public var actionsEnabled: Swift.Bool
        /// The list of actions, specified as Amazon Resource Names (ARNs) to execute when this alarm transitions into an ALARM state from any other state.
        public var alarmActions: [Swift.String]?
        /// The ARN of the alarm.
        public var alarmArn: Swift.String?
        /// The time stamp of the last update to the alarm configuration.
        public var alarmConfigurationUpdatedTimestamp: Swift.String?
        /// The description of the alarm.
        public var alarmDescription: Swift.String?
        /// The name of the alarm. If you don't specify a name, CloudFront generates a unique physical ID and uses that ID for the alarm name.
        public var alarmName: Swift.String?
        /// The arithmetic operation to use when comparing the specified statistic and threshold. The specified statistic value is used as the first operand.
        public var comparisonOperator: Swift.String?
        /// The number of datapoints that must be breaching to trigger the alarm.
        public var datapointsToAlarm: Swift.Int
        /// The dimensions for the metric associated with the alarm.
        public var dimensions: [SecurityHubClientTypes.AwsCloudWatchAlarmDimensionsDetails]?
        /// Used only for alarms based on percentiles. If ignore, the alarm state does not change during periods with too few data points to be statistically significant. If evaluate or this parameter is not used, the alarm is always evaluated and possibly changes state no matter how many data points are available.
        public var evaluateLowSampleCountPercentile: Swift.String?
        /// The number of periods over which data is compared to the specified threshold.
        public var evaluationPeriods: Swift.Int
        /// The percentile statistic for the metric associated with the alarm.
        public var extendedStatistic: Swift.String?
        /// The actions to execute when this alarm transitions to the INSUFFICIENT_DATA state from any other state. Each action is specified as an ARN.
        public var insufficientDataActions: [Swift.String]?
        /// The name of the metric associated with the alarm. This is required for an alarm based on a metric. For an alarm based on a math expression, you use Metrics instead and you can't specify MetricName.
        public var metricName: Swift.String?
        /// The namespace of the metric associated with the alarm. This is required for an alarm based on a metric. For an alarm based on a math expression, you can't specify Namespace and you use Metrics instead.
        public var namespace: Swift.String?
        /// The actions to execute when this alarm transitions to the OK state from any other state. Each action is specified as an ARN.
        public var okActions: [Swift.String]?
        /// The period, in seconds, over which the statistic is applied. This is required for an alarm based on a metric.
        public var period: Swift.Int
        /// The statistic for the metric associated with the alarm, other than percentile. For percentile statistics, use ExtendedStatistic. For an alarm based on a metric, you must specify either Statistic or ExtendedStatistic but not both. For an alarm based on a math expression, you can't specify Statistic. Instead, you use Metrics.
        public var statistic: Swift.String?
        /// The value to compare with the specified statistic.
        public var threshold: Swift.Double
        /// n an alarm based on an anomaly detection model, this is the ID of the ANOMALY_DETECTION_BAND function used as the threshold for the alarm.
        public var thresholdMetricId: Swift.String?
        /// Sets how this alarm is to handle missing data points.
        public var treatMissingData: Swift.String?
        /// The unit of the metric associated with the alarm.
        public var unit: Swift.String?

        public init (
            actionsEnabled: Swift.Bool = false,
            alarmActions: [Swift.String]? = nil,
            alarmArn: Swift.String? = nil,
            alarmConfigurationUpdatedTimestamp: Swift.String? = nil,
            alarmDescription: Swift.String? = nil,
            alarmName: Swift.String? = nil,
            comparisonOperator: Swift.String? = nil,
            datapointsToAlarm: Swift.Int = 0,
            dimensions: [SecurityHubClientTypes.AwsCloudWatchAlarmDimensionsDetails]? = nil,
            evaluateLowSampleCountPercentile: Swift.String? = nil,
            evaluationPeriods: Swift.Int = 0,
            extendedStatistic: Swift.String? = nil,
            insufficientDataActions: [Swift.String]? = nil,
            metricName: Swift.String? = nil,
            namespace: Swift.String? = nil,
            okActions: [Swift.String]? = nil,
            period: Swift.Int = 0,
            statistic: Swift.String? = nil,
            threshold: Swift.Double = 0.0,
            thresholdMetricId: Swift.String? = nil,
            treatMissingData: Swift.String? = nil,
            unit: Swift.String? = nil
        )
        {
            self.actionsEnabled = actionsEnabled
            self.alarmActions = alarmActions
            self.alarmArn = alarmArn
            self.alarmConfigurationUpdatedTimestamp = alarmConfigurationUpdatedTimestamp
            self.alarmDescription = alarmDescription
            self.alarmName = alarmName
            self.comparisonOperator = comparisonOperator
            self.datapointsToAlarm = datapointsToAlarm
            self.dimensions = dimensions
            self.evaluateLowSampleCountPercentile = evaluateLowSampleCountPercentile
            self.evaluationPeriods = evaluationPeriods
            self.extendedStatistic = extendedStatistic
            self.insufficientDataActions = insufficientDataActions
            self.metricName = metricName
            self.namespace = namespace
            self.okActions = okActions
            self.period = period
            self.statistic = statistic
            self.threshold = threshold
            self.thresholdMetricId = thresholdMetricId
            self.treatMissingData = treatMissingData
            self.unit = unit
        }
    }

}
