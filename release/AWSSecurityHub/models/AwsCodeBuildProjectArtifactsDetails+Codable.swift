// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SecurityHubClientTypes.AwsCodeBuildProjectArtifactsDetails: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case artifactIdentifier = "ArtifactIdentifier"
        case encryptionDisabled = "EncryptionDisabled"
        case location = "Location"
        case name = "Name"
        case namespaceType = "NamespaceType"
        case overrideArtifactName = "OverrideArtifactName"
        case packaging = "Packaging"
        case path = "Path"
        case type = "Type"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let artifactIdentifier = self.artifactIdentifier {
            try encodeContainer.encode(artifactIdentifier, forKey: .artifactIdentifier)
        }
        if encryptionDisabled != false {
            try encodeContainer.encode(encryptionDisabled, forKey: .encryptionDisabled)
        }
        if let location = self.location {
            try encodeContainer.encode(location, forKey: .location)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let namespaceType = self.namespaceType {
            try encodeContainer.encode(namespaceType, forKey: .namespaceType)
        }
        if overrideArtifactName != false {
            try encodeContainer.encode(overrideArtifactName, forKey: .overrideArtifactName)
        }
        if let packaging = self.packaging {
            try encodeContainer.encode(packaging, forKey: .packaging)
        }
        if let path = self.path {
            try encodeContainer.encode(path, forKey: .path)
        }
        if let type = self.type {
            try encodeContainer.encode(type, forKey: .type)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let artifactIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .artifactIdentifier)
        artifactIdentifier = artifactIdentifierDecoded
        let encryptionDisabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .encryptionDisabled) ?? false
        encryptionDisabled = encryptionDisabledDecoded
        let locationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .location)
        location = locationDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let namespaceTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .namespaceType)
        namespaceType = namespaceTypeDecoded
        let overrideArtifactNameDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .overrideArtifactName) ?? false
        overrideArtifactName = overrideArtifactNameDecoded
        let packagingDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .packaging)
        packaging = packagingDecoded
        let pathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .path)
        path = pathDecoded
        let typeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .type)
        type = typeDecoded
    }
}
