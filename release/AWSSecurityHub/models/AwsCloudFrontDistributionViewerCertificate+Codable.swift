// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SecurityHubClientTypes.AwsCloudFrontDistributionViewerCertificate: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case acmCertificateArn = "AcmCertificateArn"
        case certificate = "Certificate"
        case certificateSource = "CertificateSource"
        case cloudFrontDefaultCertificate = "CloudFrontDefaultCertificate"
        case iamCertificateId = "IamCertificateId"
        case minimumProtocolVersion = "MinimumProtocolVersion"
        case sslSupportMethod = "SslSupportMethod"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let acmCertificateArn = self.acmCertificateArn {
            try encodeContainer.encode(acmCertificateArn, forKey: .acmCertificateArn)
        }
        if let certificate = self.certificate {
            try encodeContainer.encode(certificate, forKey: .certificate)
        }
        if let certificateSource = self.certificateSource {
            try encodeContainer.encode(certificateSource, forKey: .certificateSource)
        }
        if cloudFrontDefaultCertificate != false {
            try encodeContainer.encode(cloudFrontDefaultCertificate, forKey: .cloudFrontDefaultCertificate)
        }
        if let iamCertificateId = self.iamCertificateId {
            try encodeContainer.encode(iamCertificateId, forKey: .iamCertificateId)
        }
        if let minimumProtocolVersion = self.minimumProtocolVersion {
            try encodeContainer.encode(minimumProtocolVersion, forKey: .minimumProtocolVersion)
        }
        if let sslSupportMethod = self.sslSupportMethod {
            try encodeContainer.encode(sslSupportMethod, forKey: .sslSupportMethod)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let acmCertificateArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .acmCertificateArn)
        acmCertificateArn = acmCertificateArnDecoded
        let certificateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .certificate)
        certificate = certificateDecoded
        let certificateSourceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .certificateSource)
        certificateSource = certificateSourceDecoded
        let cloudFrontDefaultCertificateDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .cloudFrontDefaultCertificate) ?? false
        cloudFrontDefaultCertificate = cloudFrontDefaultCertificateDecoded
        let iamCertificateIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .iamCertificateId)
        iamCertificateId = iamCertificateIdDecoded
        let minimumProtocolVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .minimumProtocolVersion)
        minimumProtocolVersion = minimumProtocolVersionDecoded
        let sslSupportMethodDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sslSupportMethod)
        sslSupportMethod = sslSupportMethodDecoded
    }
}
