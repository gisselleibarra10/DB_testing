// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SecurityHubClientTypes.AwsEc2VpnConnectionDetails: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case category = "Category"
        case customerGatewayConfiguration = "CustomerGatewayConfiguration"
        case customerGatewayId = "CustomerGatewayId"
        case options = "Options"
        case routes = "Routes"
        case state = "State"
        case transitGatewayId = "TransitGatewayId"
        case type = "Type"
        case vgwTelemetry = "VgwTelemetry"
        case vpnConnectionId = "VpnConnectionId"
        case vpnGatewayId = "VpnGatewayId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let category = self.category {
            try encodeContainer.encode(category, forKey: .category)
        }
        if let customerGatewayConfiguration = self.customerGatewayConfiguration {
            try encodeContainer.encode(customerGatewayConfiguration, forKey: .customerGatewayConfiguration)
        }
        if let customerGatewayId = self.customerGatewayId {
            try encodeContainer.encode(customerGatewayId, forKey: .customerGatewayId)
        }
        if let options = self.options {
            try encodeContainer.encode(options, forKey: .options)
        }
        if let routes = routes {
            var routesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .routes)
            for awsec2vpnconnectionrouteslist0 in routes {
                try routesContainer.encode(awsec2vpnconnectionrouteslist0)
            }
        }
        if let state = self.state {
            try encodeContainer.encode(state, forKey: .state)
        }
        if let transitGatewayId = self.transitGatewayId {
            try encodeContainer.encode(transitGatewayId, forKey: .transitGatewayId)
        }
        if let type = self.type {
            try encodeContainer.encode(type, forKey: .type)
        }
        if let vgwTelemetry = vgwTelemetry {
            var vgwTelemetryContainer = encodeContainer.nestedUnkeyedContainer(forKey: .vgwTelemetry)
            for awsec2vpnconnectionvgwtelemetrylist0 in vgwTelemetry {
                try vgwTelemetryContainer.encode(awsec2vpnconnectionvgwtelemetrylist0)
            }
        }
        if let vpnConnectionId = self.vpnConnectionId {
            try encodeContainer.encode(vpnConnectionId, forKey: .vpnConnectionId)
        }
        if let vpnGatewayId = self.vpnGatewayId {
            try encodeContainer.encode(vpnGatewayId, forKey: .vpnGatewayId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let vpnConnectionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vpnConnectionId)
        vpnConnectionId = vpnConnectionIdDecoded
        let stateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .state)
        state = stateDecoded
        let customerGatewayIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .customerGatewayId)
        customerGatewayId = customerGatewayIdDecoded
        let customerGatewayConfigurationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .customerGatewayConfiguration)
        customerGatewayConfiguration = customerGatewayConfigurationDecoded
        let typeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .type)
        type = typeDecoded
        let vpnGatewayIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vpnGatewayId)
        vpnGatewayId = vpnGatewayIdDecoded
        let categoryDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .category)
        category = categoryDecoded
        let vgwTelemetryContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.AwsEc2VpnConnectionVgwTelemetryDetails?].self, forKey: .vgwTelemetry)
        var vgwTelemetryDecoded0:[SecurityHubClientTypes.AwsEc2VpnConnectionVgwTelemetryDetails]? = nil
        if let vgwTelemetryContainer = vgwTelemetryContainer {
            vgwTelemetryDecoded0 = [SecurityHubClientTypes.AwsEc2VpnConnectionVgwTelemetryDetails]()
            for structure0 in vgwTelemetryContainer {
                if let structure0 = structure0 {
                    vgwTelemetryDecoded0?.append(structure0)
                }
            }
        }
        vgwTelemetry = vgwTelemetryDecoded0
        let optionsDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsEc2VpnConnectionOptionsDetails.self, forKey: .options)
        options = optionsDecoded
        let routesContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.AwsEc2VpnConnectionRoutesDetails?].self, forKey: .routes)
        var routesDecoded0:[SecurityHubClientTypes.AwsEc2VpnConnectionRoutesDetails]? = nil
        if let routesContainer = routesContainer {
            routesDecoded0 = [SecurityHubClientTypes.AwsEc2VpnConnectionRoutesDetails]()
            for structure0 in routesContainer {
                if let structure0 = structure0 {
                    routesDecoded0?.append(structure0)
                }
            }
        }
        routes = routesDecoded0
        let transitGatewayIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .transitGatewayId)
        transitGatewayId = transitGatewayIdDecoded
    }
}
