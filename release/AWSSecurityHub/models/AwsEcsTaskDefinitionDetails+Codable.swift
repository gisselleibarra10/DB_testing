// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SecurityHubClientTypes.AwsEcsTaskDefinitionDetails: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case containerDefinitions = "ContainerDefinitions"
        case cpu = "Cpu"
        case executionRoleArn = "ExecutionRoleArn"
        case family = "Family"
        case inferenceAccelerators = "InferenceAccelerators"
        case ipcMode = "IpcMode"
        case memory = "Memory"
        case networkMode = "NetworkMode"
        case pidMode = "PidMode"
        case placementConstraints = "PlacementConstraints"
        case proxyConfiguration = "ProxyConfiguration"
        case requiresCompatibilities = "RequiresCompatibilities"
        case taskRoleArn = "TaskRoleArn"
        case volumes = "Volumes"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let containerDefinitions = containerDefinitions {
            var containerDefinitionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .containerDefinitions)
            for awsecstaskdefinitioncontainerdefinitionslist0 in containerDefinitions {
                try containerDefinitionsContainer.encode(awsecstaskdefinitioncontainerdefinitionslist0)
            }
        }
        if let cpu = self.cpu {
            try encodeContainer.encode(cpu, forKey: .cpu)
        }
        if let executionRoleArn = self.executionRoleArn {
            try encodeContainer.encode(executionRoleArn, forKey: .executionRoleArn)
        }
        if let family = self.family {
            try encodeContainer.encode(family, forKey: .family)
        }
        if let inferenceAccelerators = inferenceAccelerators {
            var inferenceAcceleratorsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .inferenceAccelerators)
            for awsecstaskdefinitioninferenceacceleratorslist0 in inferenceAccelerators {
                try inferenceAcceleratorsContainer.encode(awsecstaskdefinitioninferenceacceleratorslist0)
            }
        }
        if let ipcMode = self.ipcMode {
            try encodeContainer.encode(ipcMode, forKey: .ipcMode)
        }
        if let memory = self.memory {
            try encodeContainer.encode(memory, forKey: .memory)
        }
        if let networkMode = self.networkMode {
            try encodeContainer.encode(networkMode, forKey: .networkMode)
        }
        if let pidMode = self.pidMode {
            try encodeContainer.encode(pidMode, forKey: .pidMode)
        }
        if let placementConstraints = placementConstraints {
            var placementConstraintsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .placementConstraints)
            for awsecstaskdefinitionplacementconstraintslist0 in placementConstraints {
                try placementConstraintsContainer.encode(awsecstaskdefinitionplacementconstraintslist0)
            }
        }
        if let proxyConfiguration = self.proxyConfiguration {
            try encodeContainer.encode(proxyConfiguration, forKey: .proxyConfiguration)
        }
        if let requiresCompatibilities = requiresCompatibilities {
            var requiresCompatibilitiesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .requiresCompatibilities)
            for nonemptystringlist0 in requiresCompatibilities {
                try requiresCompatibilitiesContainer.encode(nonemptystringlist0)
            }
        }
        if let taskRoleArn = self.taskRoleArn {
            try encodeContainer.encode(taskRoleArn, forKey: .taskRoleArn)
        }
        if let volumes = volumes {
            var volumesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .volumes)
            for awsecstaskdefinitionvolumeslist0 in volumes {
                try volumesContainer.encode(awsecstaskdefinitionvolumeslist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let containerDefinitionsContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.AwsEcsTaskDefinitionContainerDefinitionsDetails?].self, forKey: .containerDefinitions)
        var containerDefinitionsDecoded0:[SecurityHubClientTypes.AwsEcsTaskDefinitionContainerDefinitionsDetails]? = nil
        if let containerDefinitionsContainer = containerDefinitionsContainer {
            containerDefinitionsDecoded0 = [SecurityHubClientTypes.AwsEcsTaskDefinitionContainerDefinitionsDetails]()
            for structure0 in containerDefinitionsContainer {
                if let structure0 = structure0 {
                    containerDefinitionsDecoded0?.append(structure0)
                }
            }
        }
        containerDefinitions = containerDefinitionsDecoded0
        let cpuDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cpu)
        cpu = cpuDecoded
        let executionRoleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .executionRoleArn)
        executionRoleArn = executionRoleArnDecoded
        let familyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .family)
        family = familyDecoded
        let inferenceAcceleratorsContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.AwsEcsTaskDefinitionInferenceAcceleratorsDetails?].self, forKey: .inferenceAccelerators)
        var inferenceAcceleratorsDecoded0:[SecurityHubClientTypes.AwsEcsTaskDefinitionInferenceAcceleratorsDetails]? = nil
        if let inferenceAcceleratorsContainer = inferenceAcceleratorsContainer {
            inferenceAcceleratorsDecoded0 = [SecurityHubClientTypes.AwsEcsTaskDefinitionInferenceAcceleratorsDetails]()
            for structure0 in inferenceAcceleratorsContainer {
                if let structure0 = structure0 {
                    inferenceAcceleratorsDecoded0?.append(structure0)
                }
            }
        }
        inferenceAccelerators = inferenceAcceleratorsDecoded0
        let ipcModeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ipcMode)
        ipcMode = ipcModeDecoded
        let memoryDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .memory)
        memory = memoryDecoded
        let networkModeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .networkMode)
        networkMode = networkModeDecoded
        let pidModeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pidMode)
        pidMode = pidModeDecoded
        let placementConstraintsContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.AwsEcsTaskDefinitionPlacementConstraintsDetails?].self, forKey: .placementConstraints)
        var placementConstraintsDecoded0:[SecurityHubClientTypes.AwsEcsTaskDefinitionPlacementConstraintsDetails]? = nil
        if let placementConstraintsContainer = placementConstraintsContainer {
            placementConstraintsDecoded0 = [SecurityHubClientTypes.AwsEcsTaskDefinitionPlacementConstraintsDetails]()
            for structure0 in placementConstraintsContainer {
                if let structure0 = structure0 {
                    placementConstraintsDecoded0?.append(structure0)
                }
            }
        }
        placementConstraints = placementConstraintsDecoded0
        let proxyConfigurationDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsEcsTaskDefinitionProxyConfigurationDetails.self, forKey: .proxyConfiguration)
        proxyConfiguration = proxyConfigurationDecoded
        let requiresCompatibilitiesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .requiresCompatibilities)
        var requiresCompatibilitiesDecoded0:[Swift.String]? = nil
        if let requiresCompatibilitiesContainer = requiresCompatibilitiesContainer {
            requiresCompatibilitiesDecoded0 = [Swift.String]()
            for string0 in requiresCompatibilitiesContainer {
                if let string0 = string0 {
                    requiresCompatibilitiesDecoded0?.append(string0)
                }
            }
        }
        requiresCompatibilities = requiresCompatibilitiesDecoded0
        let taskRoleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .taskRoleArn)
        taskRoleArn = taskRoleArnDecoded
        let volumesContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.AwsEcsTaskDefinitionVolumesDetails?].self, forKey: .volumes)
        var volumesDecoded0:[SecurityHubClientTypes.AwsEcsTaskDefinitionVolumesDetails]? = nil
        if let volumesContainer = volumesContainer {
            volumesDecoded0 = [SecurityHubClientTypes.AwsEcsTaskDefinitionVolumesDetails]()
            for structure0 in volumesContainer {
                if let structure0 = structure0 {
                    volumesDecoded0?.append(structure0)
                }
            }
        }
        volumes = volumesDecoded0
    }
}
