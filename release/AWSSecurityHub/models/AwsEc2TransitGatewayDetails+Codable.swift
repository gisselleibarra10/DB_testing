// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SecurityHubClientTypes.AwsEc2TransitGatewayDetails: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case amazonSideAsn = "AmazonSideAsn"
        case associationDefaultRouteTableId = "AssociationDefaultRouteTableId"
        case autoAcceptSharedAttachments = "AutoAcceptSharedAttachments"
        case defaultRouteTableAssociation = "DefaultRouteTableAssociation"
        case defaultRouteTablePropagation = "DefaultRouteTablePropagation"
        case description = "Description"
        case dnsSupport = "DnsSupport"
        case id = "Id"
        case multicastSupport = "MulticastSupport"
        case propagationDefaultRouteTableId = "PropagationDefaultRouteTableId"
        case transitGatewayCidrBlocks = "TransitGatewayCidrBlocks"
        case vpnEcmpSupport = "VpnEcmpSupport"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if amazonSideAsn != 0 {
            try encodeContainer.encode(amazonSideAsn, forKey: .amazonSideAsn)
        }
        if let associationDefaultRouteTableId = self.associationDefaultRouteTableId {
            try encodeContainer.encode(associationDefaultRouteTableId, forKey: .associationDefaultRouteTableId)
        }
        if let autoAcceptSharedAttachments = self.autoAcceptSharedAttachments {
            try encodeContainer.encode(autoAcceptSharedAttachments, forKey: .autoAcceptSharedAttachments)
        }
        if let defaultRouteTableAssociation = self.defaultRouteTableAssociation {
            try encodeContainer.encode(defaultRouteTableAssociation, forKey: .defaultRouteTableAssociation)
        }
        if let defaultRouteTablePropagation = self.defaultRouteTablePropagation {
            try encodeContainer.encode(defaultRouteTablePropagation, forKey: .defaultRouteTablePropagation)
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let dnsSupport = self.dnsSupport {
            try encodeContainer.encode(dnsSupport, forKey: .dnsSupport)
        }
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let multicastSupport = self.multicastSupport {
            try encodeContainer.encode(multicastSupport, forKey: .multicastSupport)
        }
        if let propagationDefaultRouteTableId = self.propagationDefaultRouteTableId {
            try encodeContainer.encode(propagationDefaultRouteTableId, forKey: .propagationDefaultRouteTableId)
        }
        if let transitGatewayCidrBlocks = transitGatewayCidrBlocks {
            var transitGatewayCidrBlocksContainer = encodeContainer.nestedUnkeyedContainer(forKey: .transitGatewayCidrBlocks)
            for nonemptystringlist0 in transitGatewayCidrBlocks {
                try transitGatewayCidrBlocksContainer.encode(nonemptystringlist0)
            }
        }
        if let vpnEcmpSupport = self.vpnEcmpSupport {
            try encodeContainer.encode(vpnEcmpSupport, forKey: .vpnEcmpSupport)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let defaultRouteTablePropagationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .defaultRouteTablePropagation)
        defaultRouteTablePropagation = defaultRouteTablePropagationDecoded
        let autoAcceptSharedAttachmentsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .autoAcceptSharedAttachments)
        autoAcceptSharedAttachments = autoAcceptSharedAttachmentsDecoded
        let defaultRouteTableAssociationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .defaultRouteTableAssociation)
        defaultRouteTableAssociation = defaultRouteTableAssociationDecoded
        let transitGatewayCidrBlocksContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .transitGatewayCidrBlocks)
        var transitGatewayCidrBlocksDecoded0:[Swift.String]? = nil
        if let transitGatewayCidrBlocksContainer = transitGatewayCidrBlocksContainer {
            transitGatewayCidrBlocksDecoded0 = [Swift.String]()
            for string0 in transitGatewayCidrBlocksContainer {
                if let string0 = string0 {
                    transitGatewayCidrBlocksDecoded0?.append(string0)
                }
            }
        }
        transitGatewayCidrBlocks = transitGatewayCidrBlocksDecoded0
        let associationDefaultRouteTableIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .associationDefaultRouteTableId)
        associationDefaultRouteTableId = associationDefaultRouteTableIdDecoded
        let propagationDefaultRouteTableIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .propagationDefaultRouteTableId)
        propagationDefaultRouteTableId = propagationDefaultRouteTableIdDecoded
        let vpnEcmpSupportDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vpnEcmpSupport)
        vpnEcmpSupport = vpnEcmpSupportDecoded
        let dnsSupportDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dnsSupport)
        dnsSupport = dnsSupportDecoded
        let multicastSupportDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .multicastSupport)
        multicastSupport = multicastSupportDecoded
        let amazonSideAsnDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .amazonSideAsn) ?? 0
        amazonSideAsn = amazonSideAsnDecoded
    }
}
