// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SecurityHubClientTypes.AwsCloudWatchAlarmDetails: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case actionsEnabled = "ActionsEnabled"
        case alarmActions = "AlarmActions"
        case alarmArn = "AlarmArn"
        case alarmConfigurationUpdatedTimestamp = "AlarmConfigurationUpdatedTimestamp"
        case alarmDescription = "AlarmDescription"
        case alarmName = "AlarmName"
        case comparisonOperator = "ComparisonOperator"
        case datapointsToAlarm = "DatapointsToAlarm"
        case dimensions = "Dimensions"
        case evaluateLowSampleCountPercentile = "EvaluateLowSampleCountPercentile"
        case evaluationPeriods = "EvaluationPeriods"
        case extendedStatistic = "ExtendedStatistic"
        case insufficientDataActions = "InsufficientDataActions"
        case metricName = "MetricName"
        case namespace = "Namespace"
        case okActions = "OkActions"
        case period = "Period"
        case statistic = "Statistic"
        case threshold = "Threshold"
        case thresholdMetricId = "ThresholdMetricId"
        case treatMissingData = "TreatMissingData"
        case unit = "Unit"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if actionsEnabled != false {
            try encodeContainer.encode(actionsEnabled, forKey: .actionsEnabled)
        }
        if let alarmActions = alarmActions {
            var alarmActionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .alarmActions)
            for nonemptystringlist0 in alarmActions {
                try alarmActionsContainer.encode(nonemptystringlist0)
            }
        }
        if let alarmArn = self.alarmArn {
            try encodeContainer.encode(alarmArn, forKey: .alarmArn)
        }
        if let alarmConfigurationUpdatedTimestamp = self.alarmConfigurationUpdatedTimestamp {
            try encodeContainer.encode(alarmConfigurationUpdatedTimestamp, forKey: .alarmConfigurationUpdatedTimestamp)
        }
        if let alarmDescription = self.alarmDescription {
            try encodeContainer.encode(alarmDescription, forKey: .alarmDescription)
        }
        if let alarmName = self.alarmName {
            try encodeContainer.encode(alarmName, forKey: .alarmName)
        }
        if let comparisonOperator = self.comparisonOperator {
            try encodeContainer.encode(comparisonOperator, forKey: .comparisonOperator)
        }
        if datapointsToAlarm != 0 {
            try encodeContainer.encode(datapointsToAlarm, forKey: .datapointsToAlarm)
        }
        if let dimensions = dimensions {
            var dimensionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .dimensions)
            for awscloudwatchalarmdimensionslist0 in dimensions {
                try dimensionsContainer.encode(awscloudwatchalarmdimensionslist0)
            }
        }
        if let evaluateLowSampleCountPercentile = self.evaluateLowSampleCountPercentile {
            try encodeContainer.encode(evaluateLowSampleCountPercentile, forKey: .evaluateLowSampleCountPercentile)
        }
        if evaluationPeriods != 0 {
            try encodeContainer.encode(evaluationPeriods, forKey: .evaluationPeriods)
        }
        if let extendedStatistic = self.extendedStatistic {
            try encodeContainer.encode(extendedStatistic, forKey: .extendedStatistic)
        }
        if let insufficientDataActions = insufficientDataActions {
            var insufficientDataActionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .insufficientDataActions)
            for nonemptystringlist0 in insufficientDataActions {
                try insufficientDataActionsContainer.encode(nonemptystringlist0)
            }
        }
        if let metricName = self.metricName {
            try encodeContainer.encode(metricName, forKey: .metricName)
        }
        if let namespace = self.namespace {
            try encodeContainer.encode(namespace, forKey: .namespace)
        }
        if let okActions = okActions {
            var okActionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .okActions)
            for nonemptystringlist0 in okActions {
                try okActionsContainer.encode(nonemptystringlist0)
            }
        }
        if period != 0 {
            try encodeContainer.encode(period, forKey: .period)
        }
        if let statistic = self.statistic {
            try encodeContainer.encode(statistic, forKey: .statistic)
        }
        if threshold != 0.0 {
            try encodeContainer.encode(threshold, forKey: .threshold)
        }
        if let thresholdMetricId = self.thresholdMetricId {
            try encodeContainer.encode(thresholdMetricId, forKey: .thresholdMetricId)
        }
        if let treatMissingData = self.treatMissingData {
            try encodeContainer.encode(treatMissingData, forKey: .treatMissingData)
        }
        if let unit = self.unit {
            try encodeContainer.encode(unit, forKey: .unit)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let actionsEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .actionsEnabled) ?? false
        actionsEnabled = actionsEnabledDecoded
        let alarmActionsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .alarmActions)
        var alarmActionsDecoded0:[Swift.String]? = nil
        if let alarmActionsContainer = alarmActionsContainer {
            alarmActionsDecoded0 = [Swift.String]()
            for string0 in alarmActionsContainer {
                if let string0 = string0 {
                    alarmActionsDecoded0?.append(string0)
                }
            }
        }
        alarmActions = alarmActionsDecoded0
        let alarmArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .alarmArn)
        alarmArn = alarmArnDecoded
        let alarmConfigurationUpdatedTimestampDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .alarmConfigurationUpdatedTimestamp)
        alarmConfigurationUpdatedTimestamp = alarmConfigurationUpdatedTimestampDecoded
        let alarmDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .alarmDescription)
        alarmDescription = alarmDescriptionDecoded
        let alarmNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .alarmName)
        alarmName = alarmNameDecoded
        let comparisonOperatorDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .comparisonOperator)
        comparisonOperator = comparisonOperatorDecoded
        let datapointsToAlarmDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .datapointsToAlarm) ?? 0
        datapointsToAlarm = datapointsToAlarmDecoded
        let dimensionsContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.AwsCloudWatchAlarmDimensionsDetails?].self, forKey: .dimensions)
        var dimensionsDecoded0:[SecurityHubClientTypes.AwsCloudWatchAlarmDimensionsDetails]? = nil
        if let dimensionsContainer = dimensionsContainer {
            dimensionsDecoded0 = [SecurityHubClientTypes.AwsCloudWatchAlarmDimensionsDetails]()
            for structure0 in dimensionsContainer {
                if let structure0 = structure0 {
                    dimensionsDecoded0?.append(structure0)
                }
            }
        }
        dimensions = dimensionsDecoded0
        let evaluateLowSampleCountPercentileDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .evaluateLowSampleCountPercentile)
        evaluateLowSampleCountPercentile = evaluateLowSampleCountPercentileDecoded
        let evaluationPeriodsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .evaluationPeriods) ?? 0
        evaluationPeriods = evaluationPeriodsDecoded
        let extendedStatisticDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .extendedStatistic)
        extendedStatistic = extendedStatisticDecoded
        let insufficientDataActionsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .insufficientDataActions)
        var insufficientDataActionsDecoded0:[Swift.String]? = nil
        if let insufficientDataActionsContainer = insufficientDataActionsContainer {
            insufficientDataActionsDecoded0 = [Swift.String]()
            for string0 in insufficientDataActionsContainer {
                if let string0 = string0 {
                    insufficientDataActionsDecoded0?.append(string0)
                }
            }
        }
        insufficientDataActions = insufficientDataActionsDecoded0
        let metricNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .metricName)
        metricName = metricNameDecoded
        let namespaceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .namespace)
        namespace = namespaceDecoded
        let okActionsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .okActions)
        var okActionsDecoded0:[Swift.String]? = nil
        if let okActionsContainer = okActionsContainer {
            okActionsDecoded0 = [Swift.String]()
            for string0 in okActionsContainer {
                if let string0 = string0 {
                    okActionsDecoded0?.append(string0)
                }
            }
        }
        okActions = okActionsDecoded0
        let periodDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .period) ?? 0
        period = periodDecoded
        let statisticDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .statistic)
        statistic = statisticDecoded
        let thresholdDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .threshold) ?? 0.0
        threshold = thresholdDecoded
        let thresholdMetricIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .thresholdMetricId)
        thresholdMetricId = thresholdMetricIdDecoded
        let treatMissingDataDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .treatMissingData)
        treatMissingData = treatMissingDataDecoded
        let unitDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .unit)
        unit = unitDecoded
    }
}
