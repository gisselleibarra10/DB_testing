// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetEnabledStandardsInputBody: Swift.Equatable {
    let standardsSubscriptionArns: [Swift.String]?
    let nextToken: Swift.String?
    let maxResults: Swift.Int
}

extension GetEnabledStandardsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case standardsSubscriptionArns = "StandardsSubscriptionArns"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let standardsSubscriptionArnsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .standardsSubscriptionArns)
        var standardsSubscriptionArnsDecoded0:[Swift.String]? = nil
        if let standardsSubscriptionArnsContainer = standardsSubscriptionArnsContainer {
            standardsSubscriptionArnsDecoded0 = [Swift.String]()
            for string0 in standardsSubscriptionArnsContainer {
                if let string0 = string0 {
                    standardsSubscriptionArnsDecoded0?.append(string0)
                }
            }
        }
        standardsSubscriptionArns = standardsSubscriptionArnsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults) ?? 0
        maxResults = maxResultsDecoded
    }
}
