// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SecurityHubClientTypes.AwsOpenSearchServiceDomainDetails: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accessPolicies = "AccessPolicies"
        case advancedSecurityOptions = "AdvancedSecurityOptions"
        case arn = "Arn"
        case clusterConfig = "ClusterConfig"
        case domainEndpoint = "DomainEndpoint"
        case domainEndpointOptions = "DomainEndpointOptions"
        case domainEndpoints = "DomainEndpoints"
        case domainName = "DomainName"
        case encryptionAtRestOptions = "EncryptionAtRestOptions"
        case engineVersion = "EngineVersion"
        case id = "Id"
        case logPublishingOptions = "LogPublishingOptions"
        case nodeToNodeEncryptionOptions = "NodeToNodeEncryptionOptions"
        case serviceSoftwareOptions = "ServiceSoftwareOptions"
        case vpcOptions = "VpcOptions"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accessPolicies = self.accessPolicies {
            try encodeContainer.encode(accessPolicies, forKey: .accessPolicies)
        }
        if let advancedSecurityOptions = self.advancedSecurityOptions {
            try encodeContainer.encode(advancedSecurityOptions, forKey: .advancedSecurityOptions)
        }
        if let arn = self.arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let clusterConfig = self.clusterConfig {
            try encodeContainer.encode(clusterConfig, forKey: .clusterConfig)
        }
        if let domainEndpoint = self.domainEndpoint {
            try encodeContainer.encode(domainEndpoint, forKey: .domainEndpoint)
        }
        if let domainEndpointOptions = self.domainEndpointOptions {
            try encodeContainer.encode(domainEndpointOptions, forKey: .domainEndpointOptions)
        }
        if let domainEndpoints = domainEndpoints {
            var domainEndpointsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .domainEndpoints)
            for (dictKey0, fieldmap0) in domainEndpoints {
                try domainEndpointsContainer.encode(fieldmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let domainName = self.domainName {
            try encodeContainer.encode(domainName, forKey: .domainName)
        }
        if let encryptionAtRestOptions = self.encryptionAtRestOptions {
            try encodeContainer.encode(encryptionAtRestOptions, forKey: .encryptionAtRestOptions)
        }
        if let engineVersion = self.engineVersion {
            try encodeContainer.encode(engineVersion, forKey: .engineVersion)
        }
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let logPublishingOptions = self.logPublishingOptions {
            try encodeContainer.encode(logPublishingOptions, forKey: .logPublishingOptions)
        }
        if let nodeToNodeEncryptionOptions = self.nodeToNodeEncryptionOptions {
            try encodeContainer.encode(nodeToNodeEncryptionOptions, forKey: .nodeToNodeEncryptionOptions)
        }
        if let serviceSoftwareOptions = self.serviceSoftwareOptions {
            try encodeContainer.encode(serviceSoftwareOptions, forKey: .serviceSoftwareOptions)
        }
        if let vpcOptions = self.vpcOptions {
            try encodeContainer.encode(vpcOptions, forKey: .vpcOptions)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let accessPoliciesDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .accessPolicies)
        accessPolicies = accessPoliciesDecoded
        let domainNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domainName)
        domainName = domainNameDecoded
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let domainEndpointDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domainEndpoint)
        domainEndpoint = domainEndpointDecoded
        let engineVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .engineVersion)
        engineVersion = engineVersionDecoded
        let encryptionAtRestOptionsDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsOpenSearchServiceDomainEncryptionAtRestOptionsDetails.self, forKey: .encryptionAtRestOptions)
        encryptionAtRestOptions = encryptionAtRestOptionsDecoded
        let nodeToNodeEncryptionOptionsDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsOpenSearchServiceDomainNodeToNodeEncryptionOptionsDetails.self, forKey: .nodeToNodeEncryptionOptions)
        nodeToNodeEncryptionOptions = nodeToNodeEncryptionOptionsDecoded
        let serviceSoftwareOptionsDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsOpenSearchServiceDomainServiceSoftwareOptionsDetails.self, forKey: .serviceSoftwareOptions)
        serviceSoftwareOptions = serviceSoftwareOptionsDecoded
        let clusterConfigDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsOpenSearchServiceDomainClusterConfigDetails.self, forKey: .clusterConfig)
        clusterConfig = clusterConfigDecoded
        let domainEndpointOptionsDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsOpenSearchServiceDomainDomainEndpointOptionsDetails.self, forKey: .domainEndpointOptions)
        domainEndpointOptions = domainEndpointOptionsDecoded
        let vpcOptionsDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsOpenSearchServiceDomainVpcOptionsDetails.self, forKey: .vpcOptions)
        vpcOptions = vpcOptionsDecoded
        let logPublishingOptionsDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsOpenSearchServiceDomainLogPublishingOptionsDetails.self, forKey: .logPublishingOptions)
        logPublishingOptions = logPublishingOptionsDecoded
        let domainEndpointsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .domainEndpoints)
        var domainEndpointsDecoded0: [Swift.String:Swift.String]? = nil
        if let domainEndpointsContainer = domainEndpointsContainer {
            domainEndpointsDecoded0 = [Swift.String:Swift.String]()
            for (key0, nonemptystring0) in domainEndpointsContainer {
                if let nonemptystring0 = nonemptystring0 {
                    domainEndpointsDecoded0?[key0] = nonemptystring0
                }
            }
        }
        domainEndpoints = domainEndpointsDecoded0
        let advancedSecurityOptionsDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsOpenSearchServiceDomainAdvancedSecurityOptionsDetails.self, forKey: .advancedSecurityOptions)
        advancedSecurityOptions = advancedSecurityOptionsDecoded
    }
}
