// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SecurityHubClientTypes.AwsEcsContainerDetails: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case image = "Image"
        case mountPoints = "MountPoints"
        case name = "Name"
        case privileged = "Privileged"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let image = self.image {
            try encodeContainer.encode(image, forKey: .image)
        }
        if let mountPoints = mountPoints {
            var mountPointsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .mountPoints)
            for awsmountpointlist0 in mountPoints {
                try mountPointsContainer.encode(awsmountpointlist0)
            }
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if privileged != false {
            try encodeContainer.encode(privileged, forKey: .privileged)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let imageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .image)
        image = imageDecoded
        let mountPointsContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.AwsMountPoint?].self, forKey: .mountPoints)
        var mountPointsDecoded0:[SecurityHubClientTypes.AwsMountPoint]? = nil
        if let mountPointsContainer = mountPointsContainer {
            mountPointsDecoded0 = [SecurityHubClientTypes.AwsMountPoint]()
            for structure0 in mountPointsContainer {
                if let structure0 = structure0 {
                    mountPointsDecoded0?.append(structure0)
                }
            }
        }
        mountPoints = mountPointsDecoded0
        let privilegedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .privileged) ?? false
        privileged = privilegedDecoded
    }
}
