// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SecurityHubClientTypes.ActionRemoteIpDetails: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case city = "City"
        case country = "Country"
        case geoLocation = "GeoLocation"
        case ipAddressV4 = "IpAddressV4"
        case organization = "Organization"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let city = self.city {
            try encodeContainer.encode(city, forKey: .city)
        }
        if let country = self.country {
            try encodeContainer.encode(country, forKey: .country)
        }
        if let geoLocation = self.geoLocation {
            try encodeContainer.encode(geoLocation, forKey: .geoLocation)
        }
        if let ipAddressV4 = self.ipAddressV4 {
            try encodeContainer.encode(ipAddressV4, forKey: .ipAddressV4)
        }
        if let organization = self.organization {
            try encodeContainer.encode(organization, forKey: .organization)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ipAddressV4Decoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ipAddressV4)
        ipAddressV4 = ipAddressV4Decoded
        let organizationDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.IpOrganizationDetails.self, forKey: .organization)
        organization = organizationDecoded
        let countryDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.Country.self, forKey: .country)
        country = countryDecoded
        let cityDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.City.self, forKey: .city)
        city = cityDecoded
        let geoLocationDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.GeoLocation.self, forKey: .geoLocation)
        geoLocation = geoLocationDecoded
    }
}
