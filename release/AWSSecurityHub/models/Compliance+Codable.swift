// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SecurityHubClientTypes.Compliance: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case relatedRequirements = "RelatedRequirements"
        case status = "Status"
        case statusReasons = "StatusReasons"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let relatedRequirements = relatedRequirements {
            var relatedRequirementsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .relatedRequirements)
            for relatedrequirementslist0 in relatedRequirements {
                try relatedRequirementsContainer.encode(relatedrequirementslist0)
            }
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let statusReasons = statusReasons {
            var statusReasonsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .statusReasons)
            for statusreasonslist0 in statusReasons {
                try statusReasonsContainer.encode(statusreasonslist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statusDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.ComplianceStatus.self, forKey: .status)
        status = statusDecoded
        let relatedRequirementsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .relatedRequirements)
        var relatedRequirementsDecoded0:[Swift.String]? = nil
        if let relatedRequirementsContainer = relatedRequirementsContainer {
            relatedRequirementsDecoded0 = [Swift.String]()
            for string0 in relatedRequirementsContainer {
                if let string0 = string0 {
                    relatedRequirementsDecoded0?.append(string0)
                }
            }
        }
        relatedRequirements = relatedRequirementsDecoded0
        let statusReasonsContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.StatusReason?].self, forKey: .statusReasons)
        var statusReasonsDecoded0:[SecurityHubClientTypes.StatusReason]? = nil
        if let statusReasonsContainer = statusReasonsContainer {
            statusReasonsDecoded0 = [SecurityHubClientTypes.StatusReason]()
            for structure0 in statusReasonsContainer {
                if let structure0 = structure0 {
                    statusReasonsDecoded0?.append(structure0)
                }
            }
        }
        statusReasons = statusReasonsDecoded0
    }
}
