// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SecurityHubClientTypes.AwsApiCallAction: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case affectedResources = "AffectedResources"
        case api = "Api"
        case callerType = "CallerType"
        case domainDetails = "DomainDetails"
        case firstSeen = "FirstSeen"
        case lastSeen = "LastSeen"
        case remoteIpDetails = "RemoteIpDetails"
        case serviceName = "ServiceName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let affectedResources = affectedResources {
            var affectedResourcesContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .affectedResources)
            for (dictKey0, fieldmap0) in affectedResources {
                try affectedResourcesContainer.encode(fieldmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let api = self.api {
            try encodeContainer.encode(api, forKey: .api)
        }
        if let callerType = self.callerType {
            try encodeContainer.encode(callerType, forKey: .callerType)
        }
        if let domainDetails = self.domainDetails {
            try encodeContainer.encode(domainDetails, forKey: .domainDetails)
        }
        if let firstSeen = self.firstSeen {
            try encodeContainer.encode(firstSeen, forKey: .firstSeen)
        }
        if let lastSeen = self.lastSeen {
            try encodeContainer.encode(lastSeen, forKey: .lastSeen)
        }
        if let remoteIpDetails = self.remoteIpDetails {
            try encodeContainer.encode(remoteIpDetails, forKey: .remoteIpDetails)
        }
        if let serviceName = self.serviceName {
            try encodeContainer.encode(serviceName, forKey: .serviceName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let apiDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .api)
        api = apiDecoded
        let serviceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serviceName)
        serviceName = serviceNameDecoded
        let callerTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .callerType)
        callerType = callerTypeDecoded
        let remoteIpDetailsDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.ActionRemoteIpDetails.self, forKey: .remoteIpDetails)
        remoteIpDetails = remoteIpDetailsDecoded
        let domainDetailsDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsApiCallActionDomainDetails.self, forKey: .domainDetails)
        domainDetails = domainDetailsDecoded
        let affectedResourcesContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .affectedResources)
        var affectedResourcesDecoded0: [Swift.String:Swift.String]? = nil
        if let affectedResourcesContainer = affectedResourcesContainer {
            affectedResourcesDecoded0 = [Swift.String:Swift.String]()
            for (key0, nonemptystring0) in affectedResourcesContainer {
                if let nonemptystring0 = nonemptystring0 {
                    affectedResourcesDecoded0?[key0] = nonemptystring0
                }
            }
        }
        affectedResources = affectedResourcesDecoded0
        let firstSeenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .firstSeen)
        firstSeen = firstSeenDecoded
        let lastSeenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastSeen)
        lastSeen = lastSeenDecoded
    }
}
