// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SecurityHubClientTypes.AwsRedshiftClusterDetails: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case allowVersionUpgrade = "AllowVersionUpgrade"
        case automatedSnapshotRetentionPeriod = "AutomatedSnapshotRetentionPeriod"
        case availabilityZone = "AvailabilityZone"
        case clusterAvailabilityStatus = "ClusterAvailabilityStatus"
        case clusterCreateTime = "ClusterCreateTime"
        case clusterIdentifier = "ClusterIdentifier"
        case clusterNodes = "ClusterNodes"
        case clusterParameterGroups = "ClusterParameterGroups"
        case clusterPublicKey = "ClusterPublicKey"
        case clusterRevisionNumber = "ClusterRevisionNumber"
        case clusterSecurityGroups = "ClusterSecurityGroups"
        case clusterSnapshotCopyStatus = "ClusterSnapshotCopyStatus"
        case clusterStatus = "ClusterStatus"
        case clusterSubnetGroupName = "ClusterSubnetGroupName"
        case clusterVersion = "ClusterVersion"
        case dBName = "DBName"
        case deferredMaintenanceWindows = "DeferredMaintenanceWindows"
        case elasticIpStatus = "ElasticIpStatus"
        case elasticResizeNumberOfNodeOptions = "ElasticResizeNumberOfNodeOptions"
        case encrypted = "Encrypted"
        case endpoint = "Endpoint"
        case enhancedVpcRouting = "EnhancedVpcRouting"
        case expectedNextSnapshotScheduleTime = "ExpectedNextSnapshotScheduleTime"
        case expectedNextSnapshotScheduleTimeStatus = "ExpectedNextSnapshotScheduleTimeStatus"
        case hsmStatus = "HsmStatus"
        case iamRoles = "IamRoles"
        case kmsKeyId = "KmsKeyId"
        case loggingStatus = "LoggingStatus"
        case maintenanceTrackName = "MaintenanceTrackName"
        case manualSnapshotRetentionPeriod = "ManualSnapshotRetentionPeriod"
        case masterUsername = "MasterUsername"
        case nextMaintenanceWindowStartTime = "NextMaintenanceWindowStartTime"
        case nodeType = "NodeType"
        case numberOfNodes = "NumberOfNodes"
        case pendingActions = "PendingActions"
        case pendingModifiedValues = "PendingModifiedValues"
        case preferredMaintenanceWindow = "PreferredMaintenanceWindow"
        case publiclyAccessible = "PubliclyAccessible"
        case resizeInfo = "ResizeInfo"
        case restoreStatus = "RestoreStatus"
        case snapshotScheduleIdentifier = "SnapshotScheduleIdentifier"
        case snapshotScheduleState = "SnapshotScheduleState"
        case vpcId = "VpcId"
        case vpcSecurityGroups = "VpcSecurityGroups"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if allowVersionUpgrade != false {
            try encodeContainer.encode(allowVersionUpgrade, forKey: .allowVersionUpgrade)
        }
        if automatedSnapshotRetentionPeriod != 0 {
            try encodeContainer.encode(automatedSnapshotRetentionPeriod, forKey: .automatedSnapshotRetentionPeriod)
        }
        if let availabilityZone = self.availabilityZone {
            try encodeContainer.encode(availabilityZone, forKey: .availabilityZone)
        }
        if let clusterAvailabilityStatus = self.clusterAvailabilityStatus {
            try encodeContainer.encode(clusterAvailabilityStatus, forKey: .clusterAvailabilityStatus)
        }
        if let clusterCreateTime = self.clusterCreateTime {
            try encodeContainer.encode(clusterCreateTime, forKey: .clusterCreateTime)
        }
        if let clusterIdentifier = self.clusterIdentifier {
            try encodeContainer.encode(clusterIdentifier, forKey: .clusterIdentifier)
        }
        if let clusterNodes = clusterNodes {
            var clusterNodesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .clusterNodes)
            for awsredshiftclusterclusternodes0 in clusterNodes {
                try clusterNodesContainer.encode(awsredshiftclusterclusternodes0)
            }
        }
        if let clusterParameterGroups = clusterParameterGroups {
            var clusterParameterGroupsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .clusterParameterGroups)
            for awsredshiftclusterclusterparametergroups0 in clusterParameterGroups {
                try clusterParameterGroupsContainer.encode(awsredshiftclusterclusterparametergroups0)
            }
        }
        if let clusterPublicKey = self.clusterPublicKey {
            try encodeContainer.encode(clusterPublicKey, forKey: .clusterPublicKey)
        }
        if let clusterRevisionNumber = self.clusterRevisionNumber {
            try encodeContainer.encode(clusterRevisionNumber, forKey: .clusterRevisionNumber)
        }
        if let clusterSecurityGroups = clusterSecurityGroups {
            var clusterSecurityGroupsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .clusterSecurityGroups)
            for awsredshiftclusterclustersecuritygroups0 in clusterSecurityGroups {
                try clusterSecurityGroupsContainer.encode(awsredshiftclusterclustersecuritygroups0)
            }
        }
        if let clusterSnapshotCopyStatus = self.clusterSnapshotCopyStatus {
            try encodeContainer.encode(clusterSnapshotCopyStatus, forKey: .clusterSnapshotCopyStatus)
        }
        if let clusterStatus = self.clusterStatus {
            try encodeContainer.encode(clusterStatus, forKey: .clusterStatus)
        }
        if let clusterSubnetGroupName = self.clusterSubnetGroupName {
            try encodeContainer.encode(clusterSubnetGroupName, forKey: .clusterSubnetGroupName)
        }
        if let clusterVersion = self.clusterVersion {
            try encodeContainer.encode(clusterVersion, forKey: .clusterVersion)
        }
        if let dBName = self.dBName {
            try encodeContainer.encode(dBName, forKey: .dBName)
        }
        if let deferredMaintenanceWindows = deferredMaintenanceWindows {
            var deferredMaintenanceWindowsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .deferredMaintenanceWindows)
            for awsredshiftclusterdeferredmaintenancewindows0 in deferredMaintenanceWindows {
                try deferredMaintenanceWindowsContainer.encode(awsredshiftclusterdeferredmaintenancewindows0)
            }
        }
        if let elasticIpStatus = self.elasticIpStatus {
            try encodeContainer.encode(elasticIpStatus, forKey: .elasticIpStatus)
        }
        if let elasticResizeNumberOfNodeOptions = self.elasticResizeNumberOfNodeOptions {
            try encodeContainer.encode(elasticResizeNumberOfNodeOptions, forKey: .elasticResizeNumberOfNodeOptions)
        }
        if encrypted != false {
            try encodeContainer.encode(encrypted, forKey: .encrypted)
        }
        if let endpoint = self.endpoint {
            try encodeContainer.encode(endpoint, forKey: .endpoint)
        }
        if enhancedVpcRouting != false {
            try encodeContainer.encode(enhancedVpcRouting, forKey: .enhancedVpcRouting)
        }
        if let expectedNextSnapshotScheduleTime = self.expectedNextSnapshotScheduleTime {
            try encodeContainer.encode(expectedNextSnapshotScheduleTime, forKey: .expectedNextSnapshotScheduleTime)
        }
        if let expectedNextSnapshotScheduleTimeStatus = self.expectedNextSnapshotScheduleTimeStatus {
            try encodeContainer.encode(expectedNextSnapshotScheduleTimeStatus, forKey: .expectedNextSnapshotScheduleTimeStatus)
        }
        if let hsmStatus = self.hsmStatus {
            try encodeContainer.encode(hsmStatus, forKey: .hsmStatus)
        }
        if let iamRoles = iamRoles {
            var iamRolesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .iamRoles)
            for awsredshiftclusteriamroles0 in iamRoles {
                try iamRolesContainer.encode(awsredshiftclusteriamroles0)
            }
        }
        if let kmsKeyId = self.kmsKeyId {
            try encodeContainer.encode(kmsKeyId, forKey: .kmsKeyId)
        }
        if let loggingStatus = self.loggingStatus {
            try encodeContainer.encode(loggingStatus, forKey: .loggingStatus)
        }
        if let maintenanceTrackName = self.maintenanceTrackName {
            try encodeContainer.encode(maintenanceTrackName, forKey: .maintenanceTrackName)
        }
        if manualSnapshotRetentionPeriod != 0 {
            try encodeContainer.encode(manualSnapshotRetentionPeriod, forKey: .manualSnapshotRetentionPeriod)
        }
        if let masterUsername = self.masterUsername {
            try encodeContainer.encode(masterUsername, forKey: .masterUsername)
        }
        if let nextMaintenanceWindowStartTime = self.nextMaintenanceWindowStartTime {
            try encodeContainer.encode(nextMaintenanceWindowStartTime, forKey: .nextMaintenanceWindowStartTime)
        }
        if let nodeType = self.nodeType {
            try encodeContainer.encode(nodeType, forKey: .nodeType)
        }
        if numberOfNodes != 0 {
            try encodeContainer.encode(numberOfNodes, forKey: .numberOfNodes)
        }
        if let pendingActions = pendingActions {
            var pendingActionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .pendingActions)
            for stringlist0 in pendingActions {
                try pendingActionsContainer.encode(stringlist0)
            }
        }
        if let pendingModifiedValues = self.pendingModifiedValues {
            try encodeContainer.encode(pendingModifiedValues, forKey: .pendingModifiedValues)
        }
        if let preferredMaintenanceWindow = self.preferredMaintenanceWindow {
            try encodeContainer.encode(preferredMaintenanceWindow, forKey: .preferredMaintenanceWindow)
        }
        if publiclyAccessible != false {
            try encodeContainer.encode(publiclyAccessible, forKey: .publiclyAccessible)
        }
        if let resizeInfo = self.resizeInfo {
            try encodeContainer.encode(resizeInfo, forKey: .resizeInfo)
        }
        if let restoreStatus = self.restoreStatus {
            try encodeContainer.encode(restoreStatus, forKey: .restoreStatus)
        }
        if let snapshotScheduleIdentifier = self.snapshotScheduleIdentifier {
            try encodeContainer.encode(snapshotScheduleIdentifier, forKey: .snapshotScheduleIdentifier)
        }
        if let snapshotScheduleState = self.snapshotScheduleState {
            try encodeContainer.encode(snapshotScheduleState, forKey: .snapshotScheduleState)
        }
        if let vpcId = self.vpcId {
            try encodeContainer.encode(vpcId, forKey: .vpcId)
        }
        if let vpcSecurityGroups = vpcSecurityGroups {
            var vpcSecurityGroupsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .vpcSecurityGroups)
            for awsredshiftclustervpcsecuritygroups0 in vpcSecurityGroups {
                try vpcSecurityGroupsContainer.encode(awsredshiftclustervpcsecuritygroups0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let allowVersionUpgradeDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .allowVersionUpgrade) ?? false
        allowVersionUpgrade = allowVersionUpgradeDecoded
        let automatedSnapshotRetentionPeriodDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .automatedSnapshotRetentionPeriod) ?? 0
        automatedSnapshotRetentionPeriod = automatedSnapshotRetentionPeriodDecoded
        let availabilityZoneDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .availabilityZone)
        availabilityZone = availabilityZoneDecoded
        let clusterAvailabilityStatusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterAvailabilityStatus)
        clusterAvailabilityStatus = clusterAvailabilityStatusDecoded
        let clusterCreateTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterCreateTime)
        clusterCreateTime = clusterCreateTimeDecoded
        let clusterIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterIdentifier)
        clusterIdentifier = clusterIdentifierDecoded
        let clusterNodesContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.AwsRedshiftClusterClusterNode?].self, forKey: .clusterNodes)
        var clusterNodesDecoded0:[SecurityHubClientTypes.AwsRedshiftClusterClusterNode]? = nil
        if let clusterNodesContainer = clusterNodesContainer {
            clusterNodesDecoded0 = [SecurityHubClientTypes.AwsRedshiftClusterClusterNode]()
            for structure0 in clusterNodesContainer {
                if let structure0 = structure0 {
                    clusterNodesDecoded0?.append(structure0)
                }
            }
        }
        clusterNodes = clusterNodesDecoded0
        let clusterParameterGroupsContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.AwsRedshiftClusterClusterParameterGroup?].self, forKey: .clusterParameterGroups)
        var clusterParameterGroupsDecoded0:[SecurityHubClientTypes.AwsRedshiftClusterClusterParameterGroup]? = nil
        if let clusterParameterGroupsContainer = clusterParameterGroupsContainer {
            clusterParameterGroupsDecoded0 = [SecurityHubClientTypes.AwsRedshiftClusterClusterParameterGroup]()
            for structure0 in clusterParameterGroupsContainer {
                if let structure0 = structure0 {
                    clusterParameterGroupsDecoded0?.append(structure0)
                }
            }
        }
        clusterParameterGroups = clusterParameterGroupsDecoded0
        let clusterPublicKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterPublicKey)
        clusterPublicKey = clusterPublicKeyDecoded
        let clusterRevisionNumberDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterRevisionNumber)
        clusterRevisionNumber = clusterRevisionNumberDecoded
        let clusterSecurityGroupsContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.AwsRedshiftClusterClusterSecurityGroup?].self, forKey: .clusterSecurityGroups)
        var clusterSecurityGroupsDecoded0:[SecurityHubClientTypes.AwsRedshiftClusterClusterSecurityGroup]? = nil
        if let clusterSecurityGroupsContainer = clusterSecurityGroupsContainer {
            clusterSecurityGroupsDecoded0 = [SecurityHubClientTypes.AwsRedshiftClusterClusterSecurityGroup]()
            for structure0 in clusterSecurityGroupsContainer {
                if let structure0 = structure0 {
                    clusterSecurityGroupsDecoded0?.append(structure0)
                }
            }
        }
        clusterSecurityGroups = clusterSecurityGroupsDecoded0
        let clusterSnapshotCopyStatusDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsRedshiftClusterClusterSnapshotCopyStatus.self, forKey: .clusterSnapshotCopyStatus)
        clusterSnapshotCopyStatus = clusterSnapshotCopyStatusDecoded
        let clusterStatusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterStatus)
        clusterStatus = clusterStatusDecoded
        let clusterSubnetGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterSubnetGroupName)
        clusterSubnetGroupName = clusterSubnetGroupNameDecoded
        let clusterVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterVersion)
        clusterVersion = clusterVersionDecoded
        let dBNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dBName)
        dBName = dBNameDecoded
        let deferredMaintenanceWindowsContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.AwsRedshiftClusterDeferredMaintenanceWindow?].self, forKey: .deferredMaintenanceWindows)
        var deferredMaintenanceWindowsDecoded0:[SecurityHubClientTypes.AwsRedshiftClusterDeferredMaintenanceWindow]? = nil
        if let deferredMaintenanceWindowsContainer = deferredMaintenanceWindowsContainer {
            deferredMaintenanceWindowsDecoded0 = [SecurityHubClientTypes.AwsRedshiftClusterDeferredMaintenanceWindow]()
            for structure0 in deferredMaintenanceWindowsContainer {
                if let structure0 = structure0 {
                    deferredMaintenanceWindowsDecoded0?.append(structure0)
                }
            }
        }
        deferredMaintenanceWindows = deferredMaintenanceWindowsDecoded0
        let elasticIpStatusDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsRedshiftClusterElasticIpStatus.self, forKey: .elasticIpStatus)
        elasticIpStatus = elasticIpStatusDecoded
        let elasticResizeNumberOfNodeOptionsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .elasticResizeNumberOfNodeOptions)
        elasticResizeNumberOfNodeOptions = elasticResizeNumberOfNodeOptionsDecoded
        let encryptedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .encrypted) ?? false
        encrypted = encryptedDecoded
        let endpointDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsRedshiftClusterEndpoint.self, forKey: .endpoint)
        endpoint = endpointDecoded
        let enhancedVpcRoutingDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enhancedVpcRouting) ?? false
        enhancedVpcRouting = enhancedVpcRoutingDecoded
        let expectedNextSnapshotScheduleTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .expectedNextSnapshotScheduleTime)
        expectedNextSnapshotScheduleTime = expectedNextSnapshotScheduleTimeDecoded
        let expectedNextSnapshotScheduleTimeStatusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .expectedNextSnapshotScheduleTimeStatus)
        expectedNextSnapshotScheduleTimeStatus = expectedNextSnapshotScheduleTimeStatusDecoded
        let hsmStatusDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsRedshiftClusterHsmStatus.self, forKey: .hsmStatus)
        hsmStatus = hsmStatusDecoded
        let iamRolesContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.AwsRedshiftClusterIamRole?].self, forKey: .iamRoles)
        var iamRolesDecoded0:[SecurityHubClientTypes.AwsRedshiftClusterIamRole]? = nil
        if let iamRolesContainer = iamRolesContainer {
            iamRolesDecoded0 = [SecurityHubClientTypes.AwsRedshiftClusterIamRole]()
            for structure0 in iamRolesContainer {
                if let structure0 = structure0 {
                    iamRolesDecoded0?.append(structure0)
                }
            }
        }
        iamRoles = iamRolesDecoded0
        let kmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kmsKeyId)
        kmsKeyId = kmsKeyIdDecoded
        let maintenanceTrackNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .maintenanceTrackName)
        maintenanceTrackName = maintenanceTrackNameDecoded
        let manualSnapshotRetentionPeriodDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .manualSnapshotRetentionPeriod) ?? 0
        manualSnapshotRetentionPeriod = manualSnapshotRetentionPeriodDecoded
        let masterUsernameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .masterUsername)
        masterUsername = masterUsernameDecoded
        let nextMaintenanceWindowStartTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextMaintenanceWindowStartTime)
        nextMaintenanceWindowStartTime = nextMaintenanceWindowStartTimeDecoded
        let nodeTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nodeType)
        nodeType = nodeTypeDecoded
        let numberOfNodesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .numberOfNodes) ?? 0
        numberOfNodes = numberOfNodesDecoded
        let pendingActionsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .pendingActions)
        var pendingActionsDecoded0:[Swift.String]? = nil
        if let pendingActionsContainer = pendingActionsContainer {
            pendingActionsDecoded0 = [Swift.String]()
            for string0 in pendingActionsContainer {
                if let string0 = string0 {
                    pendingActionsDecoded0?.append(string0)
                }
            }
        }
        pendingActions = pendingActionsDecoded0
        let pendingModifiedValuesDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsRedshiftClusterPendingModifiedValues.self, forKey: .pendingModifiedValues)
        pendingModifiedValues = pendingModifiedValuesDecoded
        let preferredMaintenanceWindowDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .preferredMaintenanceWindow)
        preferredMaintenanceWindow = preferredMaintenanceWindowDecoded
        let publiclyAccessibleDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .publiclyAccessible) ?? false
        publiclyAccessible = publiclyAccessibleDecoded
        let resizeInfoDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsRedshiftClusterResizeInfo.self, forKey: .resizeInfo)
        resizeInfo = resizeInfoDecoded
        let restoreStatusDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsRedshiftClusterRestoreStatus.self, forKey: .restoreStatus)
        restoreStatus = restoreStatusDecoded
        let snapshotScheduleIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .snapshotScheduleIdentifier)
        snapshotScheduleIdentifier = snapshotScheduleIdentifierDecoded
        let snapshotScheduleStateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .snapshotScheduleState)
        snapshotScheduleState = snapshotScheduleStateDecoded
        let vpcIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vpcId)
        vpcId = vpcIdDecoded
        let vpcSecurityGroupsContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.AwsRedshiftClusterVpcSecurityGroup?].self, forKey: .vpcSecurityGroups)
        var vpcSecurityGroupsDecoded0:[SecurityHubClientTypes.AwsRedshiftClusterVpcSecurityGroup]? = nil
        if let vpcSecurityGroupsContainer = vpcSecurityGroupsContainer {
            vpcSecurityGroupsDecoded0 = [SecurityHubClientTypes.AwsRedshiftClusterVpcSecurityGroup]()
            for structure0 in vpcSecurityGroupsContainer {
                if let structure0 = structure0 {
                    vpcSecurityGroupsDecoded0?.append(structure0)
                }
            }
        }
        vpcSecurityGroups = vpcSecurityGroupsDecoded0
        let loggingStatusDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsRedshiftClusterLoggingStatus.self, forKey: .loggingStatus)
        loggingStatus = loggingStatusDecoded
    }
}
