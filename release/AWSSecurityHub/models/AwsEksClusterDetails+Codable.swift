// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SecurityHubClientTypes.AwsEksClusterDetails: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "Arn"
        case certificateAuthorityData = "CertificateAuthorityData"
        case clusterStatus = "ClusterStatus"
        case endpoint = "Endpoint"
        case logging = "Logging"
        case name = "Name"
        case resourcesVpcConfig = "ResourcesVpcConfig"
        case roleArn = "RoleArn"
        case version = "Version"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = self.arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let certificateAuthorityData = self.certificateAuthorityData {
            try encodeContainer.encode(certificateAuthorityData, forKey: .certificateAuthorityData)
        }
        if let clusterStatus = self.clusterStatus {
            try encodeContainer.encode(clusterStatus, forKey: .clusterStatus)
        }
        if let endpoint = self.endpoint {
            try encodeContainer.encode(endpoint, forKey: .endpoint)
        }
        if let logging = self.logging {
            try encodeContainer.encode(logging, forKey: .logging)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let resourcesVpcConfig = self.resourcesVpcConfig {
            try encodeContainer.encode(resourcesVpcConfig, forKey: .resourcesVpcConfig)
        }
        if let roleArn = self.roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let version = self.version {
            try encodeContainer.encode(version, forKey: .version)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let certificateAuthorityDataDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .certificateAuthorityData)
        certificateAuthorityData = certificateAuthorityDataDecoded
        let clusterStatusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterStatus)
        clusterStatus = clusterStatusDecoded
        let endpointDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .endpoint)
        endpoint = endpointDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let resourcesVpcConfigDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsEksClusterResourcesVpcConfigDetails.self, forKey: .resourcesVpcConfig)
        resourcesVpcConfig = resourcesVpcConfigDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let versionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .version)
        version = versionDecoded
        let loggingDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsEksClusterLoggingDetails.self, forKey: .logging)
        logging = loggingDecoded
    }
}
