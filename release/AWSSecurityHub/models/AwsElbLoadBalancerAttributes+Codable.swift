// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SecurityHubClientTypes.AwsElbLoadBalancerAttributes: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accessLog = "AccessLog"
        case additionalAttributes = "AdditionalAttributes"
        case connectionDraining = "ConnectionDraining"
        case connectionSettings = "ConnectionSettings"
        case crossZoneLoadBalancing = "CrossZoneLoadBalancing"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accessLog = self.accessLog {
            try encodeContainer.encode(accessLog, forKey: .accessLog)
        }
        if let additionalAttributes = additionalAttributes {
            var additionalAttributesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .additionalAttributes)
            for awselbloadbalanceradditionalattributelist0 in additionalAttributes {
                try additionalAttributesContainer.encode(awselbloadbalanceradditionalattributelist0)
            }
        }
        if let connectionDraining = self.connectionDraining {
            try encodeContainer.encode(connectionDraining, forKey: .connectionDraining)
        }
        if let connectionSettings = self.connectionSettings {
            try encodeContainer.encode(connectionSettings, forKey: .connectionSettings)
        }
        if let crossZoneLoadBalancing = self.crossZoneLoadBalancing {
            try encodeContainer.encode(crossZoneLoadBalancing, forKey: .crossZoneLoadBalancing)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let accessLogDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsElbLoadBalancerAccessLog.self, forKey: .accessLog)
        accessLog = accessLogDecoded
        let connectionDrainingDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsElbLoadBalancerConnectionDraining.self, forKey: .connectionDraining)
        connectionDraining = connectionDrainingDecoded
        let connectionSettingsDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsElbLoadBalancerConnectionSettings.self, forKey: .connectionSettings)
        connectionSettings = connectionSettingsDecoded
        let crossZoneLoadBalancingDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsElbLoadBalancerCrossZoneLoadBalancing.self, forKey: .crossZoneLoadBalancing)
        crossZoneLoadBalancing = crossZoneLoadBalancingDecoded
        let additionalAttributesContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.AwsElbLoadBalancerAdditionalAttribute?].self, forKey: .additionalAttributes)
        var additionalAttributesDecoded0:[SecurityHubClientTypes.AwsElbLoadBalancerAdditionalAttribute]? = nil
        if let additionalAttributesContainer = additionalAttributesContainer {
            additionalAttributesDecoded0 = [SecurityHubClientTypes.AwsElbLoadBalancerAdditionalAttribute]()
            for structure0 in additionalAttributesContainer {
                if let structure0 = structure0 {
                    additionalAttributesDecoded0?.append(structure0)
                }
            }
        }
        additionalAttributes = additionalAttributesDecoded0
    }
}
