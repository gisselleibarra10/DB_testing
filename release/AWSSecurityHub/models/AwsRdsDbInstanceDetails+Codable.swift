// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SecurityHubClientTypes.AwsRdsDbInstanceDetails: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case allocatedStorage = "AllocatedStorage"
        case associatedRoles = "AssociatedRoles"
        case autoMinorVersionUpgrade = "AutoMinorVersionUpgrade"
        case availabilityZone = "AvailabilityZone"
        case backupRetentionPeriod = "BackupRetentionPeriod"
        case cACertificateIdentifier = "CACertificateIdentifier"
        case characterSetName = "CharacterSetName"
        case copyTagsToSnapshot = "CopyTagsToSnapshot"
        case dBClusterIdentifier = "DBClusterIdentifier"
        case dBInstanceClass = "DBInstanceClass"
        case dBInstanceIdentifier = "DBInstanceIdentifier"
        case dBName = "DBName"
        case dbInstancePort = "DbInstancePort"
        case dbInstanceStatus = "DbInstanceStatus"
        case dbParameterGroups = "DbParameterGroups"
        case dbSecurityGroups = "DbSecurityGroups"
        case dbSubnetGroup = "DbSubnetGroup"
        case dbiResourceId = "DbiResourceId"
        case deletionProtection = "DeletionProtection"
        case domainMemberships = "DomainMemberships"
        case enabledCloudWatchLogsExports = "EnabledCloudWatchLogsExports"
        case endpoint = "Endpoint"
        case engine = "Engine"
        case engineVersion = "EngineVersion"
        case enhancedMonitoringResourceArn = "EnhancedMonitoringResourceArn"
        case iAMDatabaseAuthenticationEnabled = "IAMDatabaseAuthenticationEnabled"
        case instanceCreateTime = "InstanceCreateTime"
        case iops = "Iops"
        case kmsKeyId = "KmsKeyId"
        case latestRestorableTime = "LatestRestorableTime"
        case licenseModel = "LicenseModel"
        case listenerEndpoint = "ListenerEndpoint"
        case masterUsername = "MasterUsername"
        case maxAllocatedStorage = "MaxAllocatedStorage"
        case monitoringInterval = "MonitoringInterval"
        case monitoringRoleArn = "MonitoringRoleArn"
        case multiAz = "MultiAz"
        case optionGroupMemberships = "OptionGroupMemberships"
        case pendingModifiedValues = "PendingModifiedValues"
        case performanceInsightsEnabled = "PerformanceInsightsEnabled"
        case performanceInsightsKmsKeyId = "PerformanceInsightsKmsKeyId"
        case performanceInsightsRetentionPeriod = "PerformanceInsightsRetentionPeriod"
        case preferredBackupWindow = "PreferredBackupWindow"
        case preferredMaintenanceWindow = "PreferredMaintenanceWindow"
        case processorFeatures = "ProcessorFeatures"
        case promotionTier = "PromotionTier"
        case publiclyAccessible = "PubliclyAccessible"
        case readReplicaDBClusterIdentifiers = "ReadReplicaDBClusterIdentifiers"
        case readReplicaDBInstanceIdentifiers = "ReadReplicaDBInstanceIdentifiers"
        case readReplicaSourceDBInstanceIdentifier = "ReadReplicaSourceDBInstanceIdentifier"
        case secondaryAvailabilityZone = "SecondaryAvailabilityZone"
        case statusInfos = "StatusInfos"
        case storageEncrypted = "StorageEncrypted"
        case storageType = "StorageType"
        case tdeCredentialArn = "TdeCredentialArn"
        case timezone = "Timezone"
        case vpcSecurityGroups = "VpcSecurityGroups"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if allocatedStorage != 0 {
            try encodeContainer.encode(allocatedStorage, forKey: .allocatedStorage)
        }
        if let associatedRoles = associatedRoles {
            var associatedRolesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .associatedRoles)
            for awsrdsdbinstanceassociatedroles0 in associatedRoles {
                try associatedRolesContainer.encode(awsrdsdbinstanceassociatedroles0)
            }
        }
        if autoMinorVersionUpgrade != false {
            try encodeContainer.encode(autoMinorVersionUpgrade, forKey: .autoMinorVersionUpgrade)
        }
        if let availabilityZone = self.availabilityZone {
            try encodeContainer.encode(availabilityZone, forKey: .availabilityZone)
        }
        if backupRetentionPeriod != 0 {
            try encodeContainer.encode(backupRetentionPeriod, forKey: .backupRetentionPeriod)
        }
        if let cACertificateIdentifier = self.cACertificateIdentifier {
            try encodeContainer.encode(cACertificateIdentifier, forKey: .cACertificateIdentifier)
        }
        if let characterSetName = self.characterSetName {
            try encodeContainer.encode(characterSetName, forKey: .characterSetName)
        }
        if copyTagsToSnapshot != false {
            try encodeContainer.encode(copyTagsToSnapshot, forKey: .copyTagsToSnapshot)
        }
        if let dBClusterIdentifier = self.dBClusterIdentifier {
            try encodeContainer.encode(dBClusterIdentifier, forKey: .dBClusterIdentifier)
        }
        if let dBInstanceClass = self.dBInstanceClass {
            try encodeContainer.encode(dBInstanceClass, forKey: .dBInstanceClass)
        }
        if let dBInstanceIdentifier = self.dBInstanceIdentifier {
            try encodeContainer.encode(dBInstanceIdentifier, forKey: .dBInstanceIdentifier)
        }
        if let dBName = self.dBName {
            try encodeContainer.encode(dBName, forKey: .dBName)
        }
        if dbInstancePort != 0 {
            try encodeContainer.encode(dbInstancePort, forKey: .dbInstancePort)
        }
        if let dbInstanceStatus = self.dbInstanceStatus {
            try encodeContainer.encode(dbInstanceStatus, forKey: .dbInstanceStatus)
        }
        if let dbParameterGroups = dbParameterGroups {
            var dbParameterGroupsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .dbParameterGroups)
            for awsrdsdbparametergroups0 in dbParameterGroups {
                try dbParameterGroupsContainer.encode(awsrdsdbparametergroups0)
            }
        }
        if let dbSecurityGroups = dbSecurityGroups {
            var dbSecurityGroupsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .dbSecurityGroups)
            for stringlist0 in dbSecurityGroups {
                try dbSecurityGroupsContainer.encode(stringlist0)
            }
        }
        if let dbSubnetGroup = self.dbSubnetGroup {
            try encodeContainer.encode(dbSubnetGroup, forKey: .dbSubnetGroup)
        }
        if let dbiResourceId = self.dbiResourceId {
            try encodeContainer.encode(dbiResourceId, forKey: .dbiResourceId)
        }
        if deletionProtection != false {
            try encodeContainer.encode(deletionProtection, forKey: .deletionProtection)
        }
        if let domainMemberships = domainMemberships {
            var domainMembershipsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .domainMemberships)
            for awsrdsdbdomainmemberships0 in domainMemberships {
                try domainMembershipsContainer.encode(awsrdsdbdomainmemberships0)
            }
        }
        if let enabledCloudWatchLogsExports = enabledCloudWatchLogsExports {
            var enabledCloudWatchLogsExportsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .enabledCloudWatchLogsExports)
            for stringlist0 in enabledCloudWatchLogsExports {
                try enabledCloudWatchLogsExportsContainer.encode(stringlist0)
            }
        }
        if let endpoint = self.endpoint {
            try encodeContainer.encode(endpoint, forKey: .endpoint)
        }
        if let engine = self.engine {
            try encodeContainer.encode(engine, forKey: .engine)
        }
        if let engineVersion = self.engineVersion {
            try encodeContainer.encode(engineVersion, forKey: .engineVersion)
        }
        if let enhancedMonitoringResourceArn = self.enhancedMonitoringResourceArn {
            try encodeContainer.encode(enhancedMonitoringResourceArn, forKey: .enhancedMonitoringResourceArn)
        }
        if iAMDatabaseAuthenticationEnabled != false {
            try encodeContainer.encode(iAMDatabaseAuthenticationEnabled, forKey: .iAMDatabaseAuthenticationEnabled)
        }
        if let instanceCreateTime = self.instanceCreateTime {
            try encodeContainer.encode(instanceCreateTime, forKey: .instanceCreateTime)
        }
        if iops != 0 {
            try encodeContainer.encode(iops, forKey: .iops)
        }
        if let kmsKeyId = self.kmsKeyId {
            try encodeContainer.encode(kmsKeyId, forKey: .kmsKeyId)
        }
        if let latestRestorableTime = self.latestRestorableTime {
            try encodeContainer.encode(latestRestorableTime, forKey: .latestRestorableTime)
        }
        if let licenseModel = self.licenseModel {
            try encodeContainer.encode(licenseModel, forKey: .licenseModel)
        }
        if let listenerEndpoint = self.listenerEndpoint {
            try encodeContainer.encode(listenerEndpoint, forKey: .listenerEndpoint)
        }
        if let masterUsername = self.masterUsername {
            try encodeContainer.encode(masterUsername, forKey: .masterUsername)
        }
        if maxAllocatedStorage != 0 {
            try encodeContainer.encode(maxAllocatedStorage, forKey: .maxAllocatedStorage)
        }
        if monitoringInterval != 0 {
            try encodeContainer.encode(monitoringInterval, forKey: .monitoringInterval)
        }
        if let monitoringRoleArn = self.monitoringRoleArn {
            try encodeContainer.encode(monitoringRoleArn, forKey: .monitoringRoleArn)
        }
        if multiAz != false {
            try encodeContainer.encode(multiAz, forKey: .multiAz)
        }
        if let optionGroupMemberships = optionGroupMemberships {
            var optionGroupMembershipsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .optionGroupMemberships)
            for awsrdsdboptiongroupmemberships0 in optionGroupMemberships {
                try optionGroupMembershipsContainer.encode(awsrdsdboptiongroupmemberships0)
            }
        }
        if let pendingModifiedValues = self.pendingModifiedValues {
            try encodeContainer.encode(pendingModifiedValues, forKey: .pendingModifiedValues)
        }
        if performanceInsightsEnabled != false {
            try encodeContainer.encode(performanceInsightsEnabled, forKey: .performanceInsightsEnabled)
        }
        if let performanceInsightsKmsKeyId = self.performanceInsightsKmsKeyId {
            try encodeContainer.encode(performanceInsightsKmsKeyId, forKey: .performanceInsightsKmsKeyId)
        }
        if performanceInsightsRetentionPeriod != 0 {
            try encodeContainer.encode(performanceInsightsRetentionPeriod, forKey: .performanceInsightsRetentionPeriod)
        }
        if let preferredBackupWindow = self.preferredBackupWindow {
            try encodeContainer.encode(preferredBackupWindow, forKey: .preferredBackupWindow)
        }
        if let preferredMaintenanceWindow = self.preferredMaintenanceWindow {
            try encodeContainer.encode(preferredMaintenanceWindow, forKey: .preferredMaintenanceWindow)
        }
        if let processorFeatures = processorFeatures {
            var processorFeaturesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .processorFeatures)
            for awsrdsdbprocessorfeatures0 in processorFeatures {
                try processorFeaturesContainer.encode(awsrdsdbprocessorfeatures0)
            }
        }
        if promotionTier != 0 {
            try encodeContainer.encode(promotionTier, forKey: .promotionTier)
        }
        if publiclyAccessible != false {
            try encodeContainer.encode(publiclyAccessible, forKey: .publiclyAccessible)
        }
        if let readReplicaDBClusterIdentifiers = readReplicaDBClusterIdentifiers {
            var readReplicaDBClusterIdentifiersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .readReplicaDBClusterIdentifiers)
            for stringlist0 in readReplicaDBClusterIdentifiers {
                try readReplicaDBClusterIdentifiersContainer.encode(stringlist0)
            }
        }
        if let readReplicaDBInstanceIdentifiers = readReplicaDBInstanceIdentifiers {
            var readReplicaDBInstanceIdentifiersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .readReplicaDBInstanceIdentifiers)
            for stringlist0 in readReplicaDBInstanceIdentifiers {
                try readReplicaDBInstanceIdentifiersContainer.encode(stringlist0)
            }
        }
        if let readReplicaSourceDBInstanceIdentifier = self.readReplicaSourceDBInstanceIdentifier {
            try encodeContainer.encode(readReplicaSourceDBInstanceIdentifier, forKey: .readReplicaSourceDBInstanceIdentifier)
        }
        if let secondaryAvailabilityZone = self.secondaryAvailabilityZone {
            try encodeContainer.encode(secondaryAvailabilityZone, forKey: .secondaryAvailabilityZone)
        }
        if let statusInfos = statusInfos {
            var statusInfosContainer = encodeContainer.nestedUnkeyedContainer(forKey: .statusInfos)
            for awsrdsdbstatusinfos0 in statusInfos {
                try statusInfosContainer.encode(awsrdsdbstatusinfos0)
            }
        }
        if storageEncrypted != false {
            try encodeContainer.encode(storageEncrypted, forKey: .storageEncrypted)
        }
        if let storageType = self.storageType {
            try encodeContainer.encode(storageType, forKey: .storageType)
        }
        if let tdeCredentialArn = self.tdeCredentialArn {
            try encodeContainer.encode(tdeCredentialArn, forKey: .tdeCredentialArn)
        }
        if let timezone = self.timezone {
            try encodeContainer.encode(timezone, forKey: .timezone)
        }
        if let vpcSecurityGroups = vpcSecurityGroups {
            var vpcSecurityGroupsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .vpcSecurityGroups)
            for awsrdsdbinstancevpcsecuritygroups0 in vpcSecurityGroups {
                try vpcSecurityGroupsContainer.encode(awsrdsdbinstancevpcsecuritygroups0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let associatedRolesContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.AwsRdsDbInstanceAssociatedRole?].self, forKey: .associatedRoles)
        var associatedRolesDecoded0:[SecurityHubClientTypes.AwsRdsDbInstanceAssociatedRole]? = nil
        if let associatedRolesContainer = associatedRolesContainer {
            associatedRolesDecoded0 = [SecurityHubClientTypes.AwsRdsDbInstanceAssociatedRole]()
            for structure0 in associatedRolesContainer {
                if let structure0 = structure0 {
                    associatedRolesDecoded0?.append(structure0)
                }
            }
        }
        associatedRoles = associatedRolesDecoded0
        let cACertificateIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cACertificateIdentifier)
        cACertificateIdentifier = cACertificateIdentifierDecoded
        let dBClusterIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dBClusterIdentifier)
        dBClusterIdentifier = dBClusterIdentifierDecoded
        let dBInstanceIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dBInstanceIdentifier)
        dBInstanceIdentifier = dBInstanceIdentifierDecoded
        let dBInstanceClassDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dBInstanceClass)
        dBInstanceClass = dBInstanceClassDecoded
        let dbInstancePortDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .dbInstancePort) ?? 0
        dbInstancePort = dbInstancePortDecoded
        let dbiResourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dbiResourceId)
        dbiResourceId = dbiResourceIdDecoded
        let dBNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dBName)
        dBName = dBNameDecoded
        let deletionProtectionDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .deletionProtection) ?? false
        deletionProtection = deletionProtectionDecoded
        let endpointDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsRdsDbInstanceEndpoint.self, forKey: .endpoint)
        endpoint = endpointDecoded
        let engineDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .engine)
        engine = engineDecoded
        let engineVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .engineVersion)
        engineVersion = engineVersionDecoded
        let iAMDatabaseAuthenticationEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .iAMDatabaseAuthenticationEnabled) ?? false
        iAMDatabaseAuthenticationEnabled = iAMDatabaseAuthenticationEnabledDecoded
        let instanceCreateTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceCreateTime)
        instanceCreateTime = instanceCreateTimeDecoded
        let kmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kmsKeyId)
        kmsKeyId = kmsKeyIdDecoded
        let publiclyAccessibleDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .publiclyAccessible) ?? false
        publiclyAccessible = publiclyAccessibleDecoded
        let storageEncryptedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .storageEncrypted) ?? false
        storageEncrypted = storageEncryptedDecoded
        let tdeCredentialArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tdeCredentialArn)
        tdeCredentialArn = tdeCredentialArnDecoded
        let vpcSecurityGroupsContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.AwsRdsDbInstanceVpcSecurityGroup?].self, forKey: .vpcSecurityGroups)
        var vpcSecurityGroupsDecoded0:[SecurityHubClientTypes.AwsRdsDbInstanceVpcSecurityGroup]? = nil
        if let vpcSecurityGroupsContainer = vpcSecurityGroupsContainer {
            vpcSecurityGroupsDecoded0 = [SecurityHubClientTypes.AwsRdsDbInstanceVpcSecurityGroup]()
            for structure0 in vpcSecurityGroupsContainer {
                if let structure0 = structure0 {
                    vpcSecurityGroupsDecoded0?.append(structure0)
                }
            }
        }
        vpcSecurityGroups = vpcSecurityGroupsDecoded0
        let multiAzDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .multiAz) ?? false
        multiAz = multiAzDecoded
        let enhancedMonitoringResourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .enhancedMonitoringResourceArn)
        enhancedMonitoringResourceArn = enhancedMonitoringResourceArnDecoded
        let dbInstanceStatusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dbInstanceStatus)
        dbInstanceStatus = dbInstanceStatusDecoded
        let masterUsernameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .masterUsername)
        masterUsername = masterUsernameDecoded
        let allocatedStorageDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .allocatedStorage) ?? 0
        allocatedStorage = allocatedStorageDecoded
        let preferredBackupWindowDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .preferredBackupWindow)
        preferredBackupWindow = preferredBackupWindowDecoded
        let backupRetentionPeriodDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .backupRetentionPeriod) ?? 0
        backupRetentionPeriod = backupRetentionPeriodDecoded
        let dbSecurityGroupsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .dbSecurityGroups)
        var dbSecurityGroupsDecoded0:[Swift.String]? = nil
        if let dbSecurityGroupsContainer = dbSecurityGroupsContainer {
            dbSecurityGroupsDecoded0 = [Swift.String]()
            for string0 in dbSecurityGroupsContainer {
                if let string0 = string0 {
                    dbSecurityGroupsDecoded0?.append(string0)
                }
            }
        }
        dbSecurityGroups = dbSecurityGroupsDecoded0
        let dbParameterGroupsContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.AwsRdsDbParameterGroup?].self, forKey: .dbParameterGroups)
        var dbParameterGroupsDecoded0:[SecurityHubClientTypes.AwsRdsDbParameterGroup]? = nil
        if let dbParameterGroupsContainer = dbParameterGroupsContainer {
            dbParameterGroupsDecoded0 = [SecurityHubClientTypes.AwsRdsDbParameterGroup]()
            for structure0 in dbParameterGroupsContainer {
                if let structure0 = structure0 {
                    dbParameterGroupsDecoded0?.append(structure0)
                }
            }
        }
        dbParameterGroups = dbParameterGroupsDecoded0
        let availabilityZoneDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .availabilityZone)
        availabilityZone = availabilityZoneDecoded
        let dbSubnetGroupDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsRdsDbSubnetGroup.self, forKey: .dbSubnetGroup)
        dbSubnetGroup = dbSubnetGroupDecoded
        let preferredMaintenanceWindowDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .preferredMaintenanceWindow)
        preferredMaintenanceWindow = preferredMaintenanceWindowDecoded
        let pendingModifiedValuesDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsRdsDbPendingModifiedValues.self, forKey: .pendingModifiedValues)
        pendingModifiedValues = pendingModifiedValuesDecoded
        let latestRestorableTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .latestRestorableTime)
        latestRestorableTime = latestRestorableTimeDecoded
        let autoMinorVersionUpgradeDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .autoMinorVersionUpgrade) ?? false
        autoMinorVersionUpgrade = autoMinorVersionUpgradeDecoded
        let readReplicaSourceDBInstanceIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .readReplicaSourceDBInstanceIdentifier)
        readReplicaSourceDBInstanceIdentifier = readReplicaSourceDBInstanceIdentifierDecoded
        let readReplicaDBInstanceIdentifiersContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .readReplicaDBInstanceIdentifiers)
        var readReplicaDBInstanceIdentifiersDecoded0:[Swift.String]? = nil
        if let readReplicaDBInstanceIdentifiersContainer = readReplicaDBInstanceIdentifiersContainer {
            readReplicaDBInstanceIdentifiersDecoded0 = [Swift.String]()
            for string0 in readReplicaDBInstanceIdentifiersContainer {
                if let string0 = string0 {
                    readReplicaDBInstanceIdentifiersDecoded0?.append(string0)
                }
            }
        }
        readReplicaDBInstanceIdentifiers = readReplicaDBInstanceIdentifiersDecoded0
        let readReplicaDBClusterIdentifiersContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .readReplicaDBClusterIdentifiers)
        var readReplicaDBClusterIdentifiersDecoded0:[Swift.String]? = nil
        if let readReplicaDBClusterIdentifiersContainer = readReplicaDBClusterIdentifiersContainer {
            readReplicaDBClusterIdentifiersDecoded0 = [Swift.String]()
            for string0 in readReplicaDBClusterIdentifiersContainer {
                if let string0 = string0 {
                    readReplicaDBClusterIdentifiersDecoded0?.append(string0)
                }
            }
        }
        readReplicaDBClusterIdentifiers = readReplicaDBClusterIdentifiersDecoded0
        let licenseModelDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .licenseModel)
        licenseModel = licenseModelDecoded
        let iopsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .iops) ?? 0
        iops = iopsDecoded
        let optionGroupMembershipsContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.AwsRdsDbOptionGroupMembership?].self, forKey: .optionGroupMemberships)
        var optionGroupMembershipsDecoded0:[SecurityHubClientTypes.AwsRdsDbOptionGroupMembership]? = nil
        if let optionGroupMembershipsContainer = optionGroupMembershipsContainer {
            optionGroupMembershipsDecoded0 = [SecurityHubClientTypes.AwsRdsDbOptionGroupMembership]()
            for structure0 in optionGroupMembershipsContainer {
                if let structure0 = structure0 {
                    optionGroupMembershipsDecoded0?.append(structure0)
                }
            }
        }
        optionGroupMemberships = optionGroupMembershipsDecoded0
        let characterSetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .characterSetName)
        characterSetName = characterSetNameDecoded
        let secondaryAvailabilityZoneDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .secondaryAvailabilityZone)
        secondaryAvailabilityZone = secondaryAvailabilityZoneDecoded
        let statusInfosContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.AwsRdsDbStatusInfo?].self, forKey: .statusInfos)
        var statusInfosDecoded0:[SecurityHubClientTypes.AwsRdsDbStatusInfo]? = nil
        if let statusInfosContainer = statusInfosContainer {
            statusInfosDecoded0 = [SecurityHubClientTypes.AwsRdsDbStatusInfo]()
            for structure0 in statusInfosContainer {
                if let structure0 = structure0 {
                    statusInfosDecoded0?.append(structure0)
                }
            }
        }
        statusInfos = statusInfosDecoded0
        let storageTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .storageType)
        storageType = storageTypeDecoded
        let domainMembershipsContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.AwsRdsDbDomainMembership?].self, forKey: .domainMemberships)
        var domainMembershipsDecoded0:[SecurityHubClientTypes.AwsRdsDbDomainMembership]? = nil
        if let domainMembershipsContainer = domainMembershipsContainer {
            domainMembershipsDecoded0 = [SecurityHubClientTypes.AwsRdsDbDomainMembership]()
            for structure0 in domainMembershipsContainer {
                if let structure0 = structure0 {
                    domainMembershipsDecoded0?.append(structure0)
                }
            }
        }
        domainMemberships = domainMembershipsDecoded0
        let copyTagsToSnapshotDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .copyTagsToSnapshot) ?? false
        copyTagsToSnapshot = copyTagsToSnapshotDecoded
        let monitoringIntervalDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .monitoringInterval) ?? 0
        monitoringInterval = monitoringIntervalDecoded
        let monitoringRoleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .monitoringRoleArn)
        monitoringRoleArn = monitoringRoleArnDecoded
        let promotionTierDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .promotionTier) ?? 0
        promotionTier = promotionTierDecoded
        let timezoneDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .timezone)
        timezone = timezoneDecoded
        let performanceInsightsEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .performanceInsightsEnabled) ?? false
        performanceInsightsEnabled = performanceInsightsEnabledDecoded
        let performanceInsightsKmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .performanceInsightsKmsKeyId)
        performanceInsightsKmsKeyId = performanceInsightsKmsKeyIdDecoded
        let performanceInsightsRetentionPeriodDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .performanceInsightsRetentionPeriod) ?? 0
        performanceInsightsRetentionPeriod = performanceInsightsRetentionPeriodDecoded
        let enabledCloudWatchLogsExportsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .enabledCloudWatchLogsExports)
        var enabledCloudWatchLogsExportsDecoded0:[Swift.String]? = nil
        if let enabledCloudWatchLogsExportsContainer = enabledCloudWatchLogsExportsContainer {
            enabledCloudWatchLogsExportsDecoded0 = [Swift.String]()
            for string0 in enabledCloudWatchLogsExportsContainer {
                if let string0 = string0 {
                    enabledCloudWatchLogsExportsDecoded0?.append(string0)
                }
            }
        }
        enabledCloudWatchLogsExports = enabledCloudWatchLogsExportsDecoded0
        let processorFeaturesContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.AwsRdsDbProcessorFeature?].self, forKey: .processorFeatures)
        var processorFeaturesDecoded0:[SecurityHubClientTypes.AwsRdsDbProcessorFeature]? = nil
        if let processorFeaturesContainer = processorFeaturesContainer {
            processorFeaturesDecoded0 = [SecurityHubClientTypes.AwsRdsDbProcessorFeature]()
            for structure0 in processorFeaturesContainer {
                if let structure0 = structure0 {
                    processorFeaturesDecoded0?.append(structure0)
                }
            }
        }
        processorFeatures = processorFeaturesDecoded0
        let listenerEndpointDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsRdsDbInstanceEndpoint.self, forKey: .listenerEndpoint)
        listenerEndpoint = listenerEndpointDecoded
        let maxAllocatedStorageDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxAllocatedStorage) ?? 0
        maxAllocatedStorage = maxAllocatedStorageDecoded
    }
}
