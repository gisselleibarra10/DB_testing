// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SecurityHubClientTypes.AwsWafRuleGroupDetails: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case metricName = "MetricName"
        case name = "Name"
        case ruleGroupId = "RuleGroupId"
        case rules = "Rules"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let metricName = self.metricName {
            try encodeContainer.encode(metricName, forKey: .metricName)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let ruleGroupId = self.ruleGroupId {
            try encodeContainer.encode(ruleGroupId, forKey: .ruleGroupId)
        }
        if let rules = rules {
            var rulesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .rules)
            for awswafrulegroupruleslist0 in rules {
                try rulesContainer.encode(awswafrulegroupruleslist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let metricNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .metricName)
        metricName = metricNameDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let ruleGroupIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ruleGroupId)
        ruleGroupId = ruleGroupIdDecoded
        let rulesContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.AwsWafRuleGroupRulesDetails?].self, forKey: .rules)
        var rulesDecoded0:[SecurityHubClientTypes.AwsWafRuleGroupRulesDetails]? = nil
        if let rulesContainer = rulesContainer {
            rulesDecoded0 = [SecurityHubClientTypes.AwsWafRuleGroupRulesDetails]()
            for structure0 in rulesContainer {
                if let structure0 = structure0 {
                    rulesDecoded0?.append(structure0)
                }
            }
        }
        rules = rulesDecoded0
    }
}
