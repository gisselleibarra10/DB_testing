// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SecurityHubClientTypes.AwsElbv2LoadBalancerDetails: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case availabilityZones = "AvailabilityZones"
        case canonicalHostedZoneId = "CanonicalHostedZoneId"
        case createdTime = "CreatedTime"
        case dNSName = "DNSName"
        case ipAddressType = "IpAddressType"
        case loadBalancerAttributes = "LoadBalancerAttributes"
        case scheme = "Scheme"
        case securityGroups = "SecurityGroups"
        case state = "State"
        case type = "Type"
        case vpcId = "VpcId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let availabilityZones = availabilityZones {
            var availabilityZonesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .availabilityZones)
            for availabilityzones0 in availabilityZones {
                try availabilityZonesContainer.encode(availabilityzones0)
            }
        }
        if let canonicalHostedZoneId = self.canonicalHostedZoneId {
            try encodeContainer.encode(canonicalHostedZoneId, forKey: .canonicalHostedZoneId)
        }
        if let createdTime = self.createdTime {
            try encodeContainer.encode(createdTime, forKey: .createdTime)
        }
        if let dNSName = self.dNSName {
            try encodeContainer.encode(dNSName, forKey: .dNSName)
        }
        if let ipAddressType = self.ipAddressType {
            try encodeContainer.encode(ipAddressType, forKey: .ipAddressType)
        }
        if let loadBalancerAttributes = loadBalancerAttributes {
            var loadBalancerAttributesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .loadBalancerAttributes)
            for awselbv2loadbalancerattributes0 in loadBalancerAttributes {
                try loadBalancerAttributesContainer.encode(awselbv2loadbalancerattributes0)
            }
        }
        if let scheme = self.scheme {
            try encodeContainer.encode(scheme, forKey: .scheme)
        }
        if let securityGroups = securityGroups {
            var securityGroupsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .securityGroups)
            for securitygroups0 in securityGroups {
                try securityGroupsContainer.encode(securitygroups0)
            }
        }
        if let state = self.state {
            try encodeContainer.encode(state, forKey: .state)
        }
        if let type = self.type {
            try encodeContainer.encode(type, forKey: .type)
        }
        if let vpcId = self.vpcId {
            try encodeContainer.encode(vpcId, forKey: .vpcId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let availabilityZonesContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.AvailabilityZone?].self, forKey: .availabilityZones)
        var availabilityZonesDecoded0:[SecurityHubClientTypes.AvailabilityZone]? = nil
        if let availabilityZonesContainer = availabilityZonesContainer {
            availabilityZonesDecoded0 = [SecurityHubClientTypes.AvailabilityZone]()
            for structure0 in availabilityZonesContainer {
                if let structure0 = structure0 {
                    availabilityZonesDecoded0?.append(structure0)
                }
            }
        }
        availabilityZones = availabilityZonesDecoded0
        let canonicalHostedZoneIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .canonicalHostedZoneId)
        canonicalHostedZoneId = canonicalHostedZoneIdDecoded
        let createdTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .createdTime)
        createdTime = createdTimeDecoded
        let dNSNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dNSName)
        dNSName = dNSNameDecoded
        let ipAddressTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ipAddressType)
        ipAddressType = ipAddressTypeDecoded
        let schemeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .scheme)
        scheme = schemeDecoded
        let securityGroupsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .securityGroups)
        var securityGroupsDecoded0:[Swift.String]? = nil
        if let securityGroupsContainer = securityGroupsContainer {
            securityGroupsDecoded0 = [Swift.String]()
            for string0 in securityGroupsContainer {
                if let string0 = string0 {
                    securityGroupsDecoded0?.append(string0)
                }
            }
        }
        securityGroups = securityGroupsDecoded0
        let stateDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.LoadBalancerState.self, forKey: .state)
        state = stateDecoded
        let typeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .type)
        type = typeDecoded
        let vpcIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vpcId)
        vpcId = vpcIdDecoded
        let loadBalancerAttributesContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.AwsElbv2LoadBalancerAttribute?].self, forKey: .loadBalancerAttributes)
        var loadBalancerAttributesDecoded0:[SecurityHubClientTypes.AwsElbv2LoadBalancerAttribute]? = nil
        if let loadBalancerAttributesContainer = loadBalancerAttributesContainer {
            loadBalancerAttributesDecoded0 = [SecurityHubClientTypes.AwsElbv2LoadBalancerAttribute]()
            for structure0 in loadBalancerAttributesContainer {
                if let structure0 = structure0 {
                    loadBalancerAttributesDecoded0?.append(structure0)
                }
            }
        }
        loadBalancerAttributes = loadBalancerAttributesDecoded0
    }
}
