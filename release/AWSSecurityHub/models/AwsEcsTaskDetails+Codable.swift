// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SecurityHubClientTypes.AwsEcsTaskDetails: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterArn = "ClusterArn"
        case containers = "Containers"
        case createdAt = "CreatedAt"
        case group = "Group"
        case startedAt = "StartedAt"
        case startedBy = "StartedBy"
        case taskDefinitionArn = "TaskDefinitionArn"
        case version = "Version"
        case volumes = "Volumes"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clusterArn = self.clusterArn {
            try encodeContainer.encode(clusterArn, forKey: .clusterArn)
        }
        if let containers = containers {
            var containersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .containers)
            for awsecscontainerdetailslist0 in containers {
                try containersContainer.encode(awsecscontainerdetailslist0)
            }
        }
        if let createdAt = self.createdAt {
            try encodeContainer.encode(createdAt, forKey: .createdAt)
        }
        if let group = self.group {
            try encodeContainer.encode(group, forKey: .group)
        }
        if let startedAt = self.startedAt {
            try encodeContainer.encode(startedAt, forKey: .startedAt)
        }
        if let startedBy = self.startedBy {
            try encodeContainer.encode(startedBy, forKey: .startedBy)
        }
        if let taskDefinitionArn = self.taskDefinitionArn {
            try encodeContainer.encode(taskDefinitionArn, forKey: .taskDefinitionArn)
        }
        if let version = self.version {
            try encodeContainer.encode(version, forKey: .version)
        }
        if let volumes = volumes {
            var volumesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .volumes)
            for awsecstaskvolumedetailslist0 in volumes {
                try volumesContainer.encode(awsecstaskvolumedetailslist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clusterArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterArn)
        clusterArn = clusterArnDecoded
        let taskDefinitionArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .taskDefinitionArn)
        taskDefinitionArn = taskDefinitionArnDecoded
        let versionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .version)
        version = versionDecoded
        let createdAtDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .createdAt)
        createdAt = createdAtDecoded
        let startedAtDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .startedAt)
        startedAt = startedAtDecoded
        let startedByDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .startedBy)
        startedBy = startedByDecoded
        let groupDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .group)
        group = groupDecoded
        let volumesContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.AwsEcsTaskVolumeDetails?].self, forKey: .volumes)
        var volumesDecoded0:[SecurityHubClientTypes.AwsEcsTaskVolumeDetails]? = nil
        if let volumesContainer = volumesContainer {
            volumesDecoded0 = [SecurityHubClientTypes.AwsEcsTaskVolumeDetails]()
            for structure0 in volumesContainer {
                if let structure0 = structure0 {
                    volumesDecoded0?.append(structure0)
                }
            }
        }
        volumes = volumesDecoded0
        let containersContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.AwsEcsContainerDetails?].self, forKey: .containers)
        var containersDecoded0:[SecurityHubClientTypes.AwsEcsContainerDetails]? = nil
        if let containersContainer = containersContainer {
            containersDecoded0 = [SecurityHubClientTypes.AwsEcsContainerDetails]()
            for structure0 in containersContainer {
                if let structure0 = structure0 {
                    containersDecoded0?.append(structure0)
                }
            }
        }
        containers = containersDecoded0
    }
}
