// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SecurityHubClientTypes.AwsRdsDbSecurityGroupDetails: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dbSecurityGroupArn = "DbSecurityGroupArn"
        case dbSecurityGroupDescription = "DbSecurityGroupDescription"
        case dbSecurityGroupName = "DbSecurityGroupName"
        case ec2SecurityGroups = "Ec2SecurityGroups"
        case ipRanges = "IpRanges"
        case ownerId = "OwnerId"
        case vpcId = "VpcId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dbSecurityGroupArn = self.dbSecurityGroupArn {
            try encodeContainer.encode(dbSecurityGroupArn, forKey: .dbSecurityGroupArn)
        }
        if let dbSecurityGroupDescription = self.dbSecurityGroupDescription {
            try encodeContainer.encode(dbSecurityGroupDescription, forKey: .dbSecurityGroupDescription)
        }
        if let dbSecurityGroupName = self.dbSecurityGroupName {
            try encodeContainer.encode(dbSecurityGroupName, forKey: .dbSecurityGroupName)
        }
        if let ec2SecurityGroups = ec2SecurityGroups {
            var ec2SecurityGroupsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .ec2SecurityGroups)
            for awsrdsdbsecuritygroupec2securitygroups0 in ec2SecurityGroups {
                try ec2SecurityGroupsContainer.encode(awsrdsdbsecuritygroupec2securitygroups0)
            }
        }
        if let ipRanges = ipRanges {
            var ipRangesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .ipRanges)
            for awsrdsdbsecuritygroupipranges0 in ipRanges {
                try ipRangesContainer.encode(awsrdsdbsecuritygroupipranges0)
            }
        }
        if let ownerId = self.ownerId {
            try encodeContainer.encode(ownerId, forKey: .ownerId)
        }
        if let vpcId = self.vpcId {
            try encodeContainer.encode(vpcId, forKey: .vpcId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dbSecurityGroupArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dbSecurityGroupArn)
        dbSecurityGroupArn = dbSecurityGroupArnDecoded
        let dbSecurityGroupDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dbSecurityGroupDescription)
        dbSecurityGroupDescription = dbSecurityGroupDescriptionDecoded
        let dbSecurityGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dbSecurityGroupName)
        dbSecurityGroupName = dbSecurityGroupNameDecoded
        let ec2SecurityGroupsContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.AwsRdsDbSecurityGroupEc2SecurityGroup?].self, forKey: .ec2SecurityGroups)
        var ec2SecurityGroupsDecoded0:[SecurityHubClientTypes.AwsRdsDbSecurityGroupEc2SecurityGroup]? = nil
        if let ec2SecurityGroupsContainer = ec2SecurityGroupsContainer {
            ec2SecurityGroupsDecoded0 = [SecurityHubClientTypes.AwsRdsDbSecurityGroupEc2SecurityGroup]()
            for structure0 in ec2SecurityGroupsContainer {
                if let structure0 = structure0 {
                    ec2SecurityGroupsDecoded0?.append(structure0)
                }
            }
        }
        ec2SecurityGroups = ec2SecurityGroupsDecoded0
        let ipRangesContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.AwsRdsDbSecurityGroupIpRange?].self, forKey: .ipRanges)
        var ipRangesDecoded0:[SecurityHubClientTypes.AwsRdsDbSecurityGroupIpRange]? = nil
        if let ipRangesContainer = ipRangesContainer {
            ipRangesDecoded0 = [SecurityHubClientTypes.AwsRdsDbSecurityGroupIpRange]()
            for structure0 in ipRangesContainer {
                if let structure0 = structure0 {
                    ipRangesDecoded0?.append(structure0)
                }
            }
        }
        ipRanges = ipRangesDecoded0
        let ownerIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ownerId)
        ownerId = ownerIdDecoded
        let vpcIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vpcId)
        vpcId = vpcIdDecoded
    }
}
