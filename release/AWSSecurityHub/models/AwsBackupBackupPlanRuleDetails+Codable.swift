// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SecurityHubClientTypes.AwsBackupBackupPlanRuleDetails: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case completionWindowMinutes = "CompletionWindowMinutes"
        case copyActions = "CopyActions"
        case enableContinuousBackup = "EnableContinuousBackup"
        case lifecycle = "Lifecycle"
        case ruleId = "RuleId"
        case ruleName = "RuleName"
        case scheduleExpression = "ScheduleExpression"
        case startWindowMinutes = "StartWindowMinutes"
        case targetBackupVault = "TargetBackupVault"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if completionWindowMinutes != 0 {
            try encodeContainer.encode(completionWindowMinutes, forKey: .completionWindowMinutes)
        }
        if let copyActions = copyActions {
            var copyActionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .copyActions)
            for awsbackupbackupplanrulecopyactionslist0 in copyActions {
                try copyActionsContainer.encode(awsbackupbackupplanrulecopyactionslist0)
            }
        }
        if enableContinuousBackup != false {
            try encodeContainer.encode(enableContinuousBackup, forKey: .enableContinuousBackup)
        }
        if let lifecycle = self.lifecycle {
            try encodeContainer.encode(lifecycle, forKey: .lifecycle)
        }
        if let ruleId = self.ruleId {
            try encodeContainer.encode(ruleId, forKey: .ruleId)
        }
        if let ruleName = self.ruleName {
            try encodeContainer.encode(ruleName, forKey: .ruleName)
        }
        if let scheduleExpression = self.scheduleExpression {
            try encodeContainer.encode(scheduleExpression, forKey: .scheduleExpression)
        }
        if startWindowMinutes != 0 {
            try encodeContainer.encode(startWindowMinutes, forKey: .startWindowMinutes)
        }
        if let targetBackupVault = self.targetBackupVault {
            try encodeContainer.encode(targetBackupVault, forKey: .targetBackupVault)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let targetBackupVaultDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .targetBackupVault)
        targetBackupVault = targetBackupVaultDecoded
        let startWindowMinutesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .startWindowMinutes) ?? 0
        startWindowMinutes = startWindowMinutesDecoded
        let scheduleExpressionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .scheduleExpression)
        scheduleExpression = scheduleExpressionDecoded
        let ruleNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ruleName)
        ruleName = ruleNameDecoded
        let ruleIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ruleId)
        ruleId = ruleIdDecoded
        let enableContinuousBackupDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enableContinuousBackup) ?? false
        enableContinuousBackup = enableContinuousBackupDecoded
        let completionWindowMinutesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .completionWindowMinutes) ?? 0
        completionWindowMinutes = completionWindowMinutesDecoded
        let copyActionsContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.AwsBackupBackupPlanRuleCopyActionsDetails?].self, forKey: .copyActions)
        var copyActionsDecoded0:[SecurityHubClientTypes.AwsBackupBackupPlanRuleCopyActionsDetails]? = nil
        if let copyActionsContainer = copyActionsContainer {
            copyActionsDecoded0 = [SecurityHubClientTypes.AwsBackupBackupPlanRuleCopyActionsDetails]()
            for structure0 in copyActionsContainer {
                if let structure0 = structure0 {
                    copyActionsDecoded0?.append(structure0)
                }
            }
        }
        copyActions = copyActionsDecoded0
        let lifecycleDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsBackupBackupPlanLifecycleDetails.self, forKey: .lifecycle)
        lifecycle = lifecycleDecoded
    }
}
