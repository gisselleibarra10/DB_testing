// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension SecurityHubClientTypes {
    /// Contains details about a Classic Load Balancer.
    public struct AwsElbLoadBalancerDetails: Swift.Equatable {
        /// The list of Availability Zones for the load balancer.
        public var availabilityZones: [Swift.String]?
        /// Information about the configuration of the EC2 instances.
        public var backendServerDescriptions: [SecurityHubClientTypes.AwsElbLoadBalancerBackendServerDescription]?
        /// The name of the Amazon Route 53 hosted zone for the load balancer.
        public var canonicalHostedZoneName: Swift.String?
        /// The ID of the Amazon Route 53 hosted zone for the load balancer.
        public var canonicalHostedZoneNameID: Swift.String?
        /// Indicates when the load balancer was created. Uses the date-time format specified in [RFC 3339 section 5.6, Internet Date/Time Format](https://tools.ietf.org/html/rfc3339#section-5.6). The value cannot contain spaces. For example, 2020-03-22T13:22:13.933Z.
        public var createdTime: Swift.String?
        /// The DNS name of the load balancer.
        public var dnsName: Swift.String?
        /// Information about the health checks that are conducted on the load balancer.
        public var healthCheck: SecurityHubClientTypes.AwsElbLoadBalancerHealthCheck?
        /// List of EC2 instances for the load balancer.
        public var instances: [SecurityHubClientTypes.AwsElbLoadBalancerInstance]?
        /// The policies that are enabled for the load balancer listeners.
        public var listenerDescriptions: [SecurityHubClientTypes.AwsElbLoadBalancerListenerDescription]?
        /// The attributes for a load balancer.
        public var loadBalancerAttributes: SecurityHubClientTypes.AwsElbLoadBalancerAttributes?
        /// The name of the load balancer.
        public var loadBalancerName: Swift.String?
        /// The policies for a load balancer.
        public var policies: SecurityHubClientTypes.AwsElbLoadBalancerPolicies?
        /// The type of load balancer. Only provided if the load balancer is in a VPC. If Scheme is internet-facing, the load balancer has a public DNS name that resolves to a public IP address. If Scheme is internal, the load balancer has a public DNS name that resolves to a private IP address.
        public var scheme: Swift.String?
        /// The security groups for the load balancer. Only provided if the load balancer is in a VPC.
        public var securityGroups: [Swift.String]?
        /// Information about the security group for the load balancer. This is the security group that is used for inbound rules.
        public var sourceSecurityGroup: SecurityHubClientTypes.AwsElbLoadBalancerSourceSecurityGroup?
        /// The list of subnet identifiers for the load balancer.
        public var subnets: [Swift.String]?
        /// The identifier of the VPC for the load balancer.
        public var vpcId: Swift.String?

        public init (
            availabilityZones: [Swift.String]? = nil,
            backendServerDescriptions: [SecurityHubClientTypes.AwsElbLoadBalancerBackendServerDescription]? = nil,
            canonicalHostedZoneName: Swift.String? = nil,
            canonicalHostedZoneNameID: Swift.String? = nil,
            createdTime: Swift.String? = nil,
            dnsName: Swift.String? = nil,
            healthCheck: SecurityHubClientTypes.AwsElbLoadBalancerHealthCheck? = nil,
            instances: [SecurityHubClientTypes.AwsElbLoadBalancerInstance]? = nil,
            listenerDescriptions: [SecurityHubClientTypes.AwsElbLoadBalancerListenerDescription]? = nil,
            loadBalancerAttributes: SecurityHubClientTypes.AwsElbLoadBalancerAttributes? = nil,
            loadBalancerName: Swift.String? = nil,
            policies: SecurityHubClientTypes.AwsElbLoadBalancerPolicies? = nil,
            scheme: Swift.String? = nil,
            securityGroups: [Swift.String]? = nil,
            sourceSecurityGroup: SecurityHubClientTypes.AwsElbLoadBalancerSourceSecurityGroup? = nil,
            subnets: [Swift.String]? = nil,
            vpcId: Swift.String? = nil
        )
        {
            self.availabilityZones = availabilityZones
            self.backendServerDescriptions = backendServerDescriptions
            self.canonicalHostedZoneName = canonicalHostedZoneName
            self.canonicalHostedZoneNameID = canonicalHostedZoneNameID
            self.createdTime = createdTime
            self.dnsName = dnsName
            self.healthCheck = healthCheck
            self.instances = instances
            self.listenerDescriptions = listenerDescriptions
            self.loadBalancerAttributes = loadBalancerAttributes
            self.loadBalancerName = loadBalancerName
            self.policies = policies
            self.scheme = scheme
            self.securityGroups = securityGroups
            self.sourceSecurityGroup = sourceSecurityGroup
            self.subnets = subnets
            self.vpcId = vpcId
        }
    }

}
