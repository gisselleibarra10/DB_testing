// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SecurityHubClientTypes.AwsIamUserDetails: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attachedManagedPolicies = "AttachedManagedPolicies"
        case createDate = "CreateDate"
        case groupList = "GroupList"
        case path = "Path"
        case permissionsBoundary = "PermissionsBoundary"
        case userId = "UserId"
        case userName = "UserName"
        case userPolicyList = "UserPolicyList"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let attachedManagedPolicies = attachedManagedPolicies {
            var attachedManagedPoliciesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .attachedManagedPolicies)
            for awsiamattachedmanagedpolicylist0 in attachedManagedPolicies {
                try attachedManagedPoliciesContainer.encode(awsiamattachedmanagedpolicylist0)
            }
        }
        if let createDate = self.createDate {
            try encodeContainer.encode(createDate, forKey: .createDate)
        }
        if let groupList = groupList {
            var groupListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .groupList)
            for stringlist0 in groupList {
                try groupListContainer.encode(stringlist0)
            }
        }
        if let path = self.path {
            try encodeContainer.encode(path, forKey: .path)
        }
        if let permissionsBoundary = self.permissionsBoundary {
            try encodeContainer.encode(permissionsBoundary, forKey: .permissionsBoundary)
        }
        if let userId = self.userId {
            try encodeContainer.encode(userId, forKey: .userId)
        }
        if let userName = self.userName {
            try encodeContainer.encode(userName, forKey: .userName)
        }
        if let userPolicyList = userPolicyList {
            var userPolicyListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .userPolicyList)
            for awsiamuserpolicylist0 in userPolicyList {
                try userPolicyListContainer.encode(awsiamuserpolicylist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let attachedManagedPoliciesContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.AwsIamAttachedManagedPolicy?].self, forKey: .attachedManagedPolicies)
        var attachedManagedPoliciesDecoded0:[SecurityHubClientTypes.AwsIamAttachedManagedPolicy]? = nil
        if let attachedManagedPoliciesContainer = attachedManagedPoliciesContainer {
            attachedManagedPoliciesDecoded0 = [SecurityHubClientTypes.AwsIamAttachedManagedPolicy]()
            for structure0 in attachedManagedPoliciesContainer {
                if let structure0 = structure0 {
                    attachedManagedPoliciesDecoded0?.append(structure0)
                }
            }
        }
        attachedManagedPolicies = attachedManagedPoliciesDecoded0
        let createDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .createDate)
        createDate = createDateDecoded
        let groupListContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .groupList)
        var groupListDecoded0:[Swift.String]? = nil
        if let groupListContainer = groupListContainer {
            groupListDecoded0 = [Swift.String]()
            for string0 in groupListContainer {
                if let string0 = string0 {
                    groupListDecoded0?.append(string0)
                }
            }
        }
        groupList = groupListDecoded0
        let pathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .path)
        path = pathDecoded
        let permissionsBoundaryDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsIamPermissionsBoundary.self, forKey: .permissionsBoundary)
        permissionsBoundary = permissionsBoundaryDecoded
        let userIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userId)
        userId = userIdDecoded
        let userNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userName)
        userName = userNameDecoded
        let userPolicyListContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.AwsIamUserPolicy?].self, forKey: .userPolicyList)
        var userPolicyListDecoded0:[SecurityHubClientTypes.AwsIamUserPolicy]? = nil
        if let userPolicyListContainer = userPolicyListContainer {
            userPolicyListDecoded0 = [SecurityHubClientTypes.AwsIamUserPolicy]()
            for structure0 in userPolicyListContainer {
                if let structure0 = structure0 {
                    userPolicyListDecoded0?.append(structure0)
                }
            }
        }
        userPolicyList = userPolicyListDecoded0
    }
}
