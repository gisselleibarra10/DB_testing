// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SecurityHubClientTypes.ResourceDetails: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case awsApiGatewayRestApi = "AwsApiGatewayRestApi"
        case awsApiGatewayStage = "AwsApiGatewayStage"
        case awsApiGatewayV2Api = "AwsApiGatewayV2Api"
        case awsApiGatewayV2Stage = "AwsApiGatewayV2Stage"
        case awsAutoScalingAutoScalingGroup = "AwsAutoScalingAutoScalingGroup"
        case awsAutoScalingLaunchConfiguration = "AwsAutoScalingLaunchConfiguration"
        case awsBackupBackupPlan = "AwsBackupBackupPlan"
        case awsBackupBackupVault = "AwsBackupBackupVault"
        case awsBackupRecoveryPoint = "AwsBackupRecoveryPoint"
        case awsCertificateManagerCertificate = "AwsCertificateManagerCertificate"
        case awsCloudFormationStack = "AwsCloudFormationStack"
        case awsCloudFrontDistribution = "AwsCloudFrontDistribution"
        case awsCloudTrailTrail = "AwsCloudTrailTrail"
        case awsCloudWatchAlarm = "AwsCloudWatchAlarm"
        case awsCodeBuildProject = "AwsCodeBuildProject"
        case awsDynamoDbTable = "AwsDynamoDbTable"
        case awsEc2Eip = "AwsEc2Eip"
        case awsEc2Instance = "AwsEc2Instance"
        case awsEc2NetworkAcl = "AwsEc2NetworkAcl"
        case awsEc2NetworkInterface = "AwsEc2NetworkInterface"
        case awsEc2SecurityGroup = "AwsEc2SecurityGroup"
        case awsEc2Subnet = "AwsEc2Subnet"
        case awsEc2TransitGateway = "AwsEc2TransitGateway"
        case awsEc2Volume = "AwsEc2Volume"
        case awsEc2Vpc = "AwsEc2Vpc"
        case awsEc2VpcEndpointService = "AwsEc2VpcEndpointService"
        case awsEc2VpcPeeringConnection = "AwsEc2VpcPeeringConnection"
        case awsEc2VpnConnection = "AwsEc2VpnConnection"
        case awsEcrContainerImage = "AwsEcrContainerImage"
        case awsEcrRepository = "AwsEcrRepository"
        case awsEcsCluster = "AwsEcsCluster"
        case awsEcsContainer = "AwsEcsContainer"
        case awsEcsService = "AwsEcsService"
        case awsEcsTask = "AwsEcsTask"
        case awsEcsTaskDefinition = "AwsEcsTaskDefinition"
        case awsEfsAccessPoint = "AwsEfsAccessPoint"
        case awsEksCluster = "AwsEksCluster"
        case awsElasticBeanstalkEnvironment = "AwsElasticBeanstalkEnvironment"
        case awsElasticsearchDomain = "AwsElasticsearchDomain"
        case awsElbLoadBalancer = "AwsElbLoadBalancer"
        case awsElbv2LoadBalancer = "AwsElbv2LoadBalancer"
        case awsIamAccessKey = "AwsIamAccessKey"
        case awsIamGroup = "AwsIamGroup"
        case awsIamPolicy = "AwsIamPolicy"
        case awsIamRole = "AwsIamRole"
        case awsIamUser = "AwsIamUser"
        case awsKinesisStream = "AwsKinesisStream"
        case awsKmsKey = "AwsKmsKey"
        case awsLambdaFunction = "AwsLambdaFunction"
        case awsLambdaLayerVersion = "AwsLambdaLayerVersion"
        case awsNetworkFirewallFirewall = "AwsNetworkFirewallFirewall"
        case awsNetworkFirewallFirewallPolicy = "AwsNetworkFirewallFirewallPolicy"
        case awsNetworkFirewallRuleGroup = "AwsNetworkFirewallRuleGroup"
        case awsOpenSearchServiceDomain = "AwsOpenSearchServiceDomain"
        case awsRdsDbCluster = "AwsRdsDbCluster"
        case awsRdsDbClusterSnapshot = "AwsRdsDbClusterSnapshot"
        case awsRdsDbInstance = "AwsRdsDbInstance"
        case awsRdsDbSecurityGroup = "AwsRdsDbSecurityGroup"
        case awsRdsDbSnapshot = "AwsRdsDbSnapshot"
        case awsRdsEventSubscription = "AwsRdsEventSubscription"
        case awsRedshiftCluster = "AwsRedshiftCluster"
        case awsS3AccountPublicAccessBlock = "AwsS3AccountPublicAccessBlock"
        case awsS3Bucket = "AwsS3Bucket"
        case awsS3Object = "AwsS3Object"
        case awsSecretsManagerSecret = "AwsSecretsManagerSecret"
        case awsSnsTopic = "AwsSnsTopic"
        case awsSqsQueue = "AwsSqsQueue"
        case awsSsmPatchCompliance = "AwsSsmPatchCompliance"
        case awsWafRateBasedRule = "AwsWafRateBasedRule"
        case awsWafRegionalRateBasedRule = "AwsWafRegionalRateBasedRule"
        case awsWafRegionalRule = "AwsWafRegionalRule"
        case awsWafRegionalRuleGroup = "AwsWafRegionalRuleGroup"
        case awsWafRegionalWebAcl = "AwsWafRegionalWebAcl"
        case awsWafRule = "AwsWafRule"
        case awsWafRuleGroup = "AwsWafRuleGroup"
        case awsWafWebAcl = "AwsWafWebAcl"
        case awsXrayEncryptionConfig = "AwsXrayEncryptionConfig"
        case container = "Container"
        case other = "Other"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let awsApiGatewayRestApi = self.awsApiGatewayRestApi {
            try encodeContainer.encode(awsApiGatewayRestApi, forKey: .awsApiGatewayRestApi)
        }
        if let awsApiGatewayStage = self.awsApiGatewayStage {
            try encodeContainer.encode(awsApiGatewayStage, forKey: .awsApiGatewayStage)
        }
        if let awsApiGatewayV2Api = self.awsApiGatewayV2Api {
            try encodeContainer.encode(awsApiGatewayV2Api, forKey: .awsApiGatewayV2Api)
        }
        if let awsApiGatewayV2Stage = self.awsApiGatewayV2Stage {
            try encodeContainer.encode(awsApiGatewayV2Stage, forKey: .awsApiGatewayV2Stage)
        }
        if let awsAutoScalingAutoScalingGroup = self.awsAutoScalingAutoScalingGroup {
            try encodeContainer.encode(awsAutoScalingAutoScalingGroup, forKey: .awsAutoScalingAutoScalingGroup)
        }
        if let awsAutoScalingLaunchConfiguration = self.awsAutoScalingLaunchConfiguration {
            try encodeContainer.encode(awsAutoScalingLaunchConfiguration, forKey: .awsAutoScalingLaunchConfiguration)
        }
        if let awsBackupBackupPlan = self.awsBackupBackupPlan {
            try encodeContainer.encode(awsBackupBackupPlan, forKey: .awsBackupBackupPlan)
        }
        if let awsBackupBackupVault = self.awsBackupBackupVault {
            try encodeContainer.encode(awsBackupBackupVault, forKey: .awsBackupBackupVault)
        }
        if let awsBackupRecoveryPoint = self.awsBackupRecoveryPoint {
            try encodeContainer.encode(awsBackupRecoveryPoint, forKey: .awsBackupRecoveryPoint)
        }
        if let awsCertificateManagerCertificate = self.awsCertificateManagerCertificate {
            try encodeContainer.encode(awsCertificateManagerCertificate, forKey: .awsCertificateManagerCertificate)
        }
        if let awsCloudFormationStack = self.awsCloudFormationStack {
            try encodeContainer.encode(awsCloudFormationStack, forKey: .awsCloudFormationStack)
        }
        if let awsCloudFrontDistribution = self.awsCloudFrontDistribution {
            try encodeContainer.encode(awsCloudFrontDistribution, forKey: .awsCloudFrontDistribution)
        }
        if let awsCloudTrailTrail = self.awsCloudTrailTrail {
            try encodeContainer.encode(awsCloudTrailTrail, forKey: .awsCloudTrailTrail)
        }
        if let awsCloudWatchAlarm = self.awsCloudWatchAlarm {
            try encodeContainer.encode(awsCloudWatchAlarm, forKey: .awsCloudWatchAlarm)
        }
        if let awsCodeBuildProject = self.awsCodeBuildProject {
            try encodeContainer.encode(awsCodeBuildProject, forKey: .awsCodeBuildProject)
        }
        if let awsDynamoDbTable = self.awsDynamoDbTable {
            try encodeContainer.encode(awsDynamoDbTable, forKey: .awsDynamoDbTable)
        }
        if let awsEc2Eip = self.awsEc2Eip {
            try encodeContainer.encode(awsEc2Eip, forKey: .awsEc2Eip)
        }
        if let awsEc2Instance = self.awsEc2Instance {
            try encodeContainer.encode(awsEc2Instance, forKey: .awsEc2Instance)
        }
        if let awsEc2NetworkAcl = self.awsEc2NetworkAcl {
            try encodeContainer.encode(awsEc2NetworkAcl, forKey: .awsEc2NetworkAcl)
        }
        if let awsEc2NetworkInterface = self.awsEc2NetworkInterface {
            try encodeContainer.encode(awsEc2NetworkInterface, forKey: .awsEc2NetworkInterface)
        }
        if let awsEc2SecurityGroup = self.awsEc2SecurityGroup {
            try encodeContainer.encode(awsEc2SecurityGroup, forKey: .awsEc2SecurityGroup)
        }
        if let awsEc2Subnet = self.awsEc2Subnet {
            try encodeContainer.encode(awsEc2Subnet, forKey: .awsEc2Subnet)
        }
        if let awsEc2TransitGateway = self.awsEc2TransitGateway {
            try encodeContainer.encode(awsEc2TransitGateway, forKey: .awsEc2TransitGateway)
        }
        if let awsEc2Volume = self.awsEc2Volume {
            try encodeContainer.encode(awsEc2Volume, forKey: .awsEc2Volume)
        }
        if let awsEc2Vpc = self.awsEc2Vpc {
            try encodeContainer.encode(awsEc2Vpc, forKey: .awsEc2Vpc)
        }
        if let awsEc2VpcEndpointService = self.awsEc2VpcEndpointService {
            try encodeContainer.encode(awsEc2VpcEndpointService, forKey: .awsEc2VpcEndpointService)
        }
        if let awsEc2VpcPeeringConnection = self.awsEc2VpcPeeringConnection {
            try encodeContainer.encode(awsEc2VpcPeeringConnection, forKey: .awsEc2VpcPeeringConnection)
        }
        if let awsEc2VpnConnection = self.awsEc2VpnConnection {
            try encodeContainer.encode(awsEc2VpnConnection, forKey: .awsEc2VpnConnection)
        }
        if let awsEcrContainerImage = self.awsEcrContainerImage {
            try encodeContainer.encode(awsEcrContainerImage, forKey: .awsEcrContainerImage)
        }
        if let awsEcrRepository = self.awsEcrRepository {
            try encodeContainer.encode(awsEcrRepository, forKey: .awsEcrRepository)
        }
        if let awsEcsCluster = self.awsEcsCluster {
            try encodeContainer.encode(awsEcsCluster, forKey: .awsEcsCluster)
        }
        if let awsEcsContainer = self.awsEcsContainer {
            try encodeContainer.encode(awsEcsContainer, forKey: .awsEcsContainer)
        }
        if let awsEcsService = self.awsEcsService {
            try encodeContainer.encode(awsEcsService, forKey: .awsEcsService)
        }
        if let awsEcsTask = self.awsEcsTask {
            try encodeContainer.encode(awsEcsTask, forKey: .awsEcsTask)
        }
        if let awsEcsTaskDefinition = self.awsEcsTaskDefinition {
            try encodeContainer.encode(awsEcsTaskDefinition, forKey: .awsEcsTaskDefinition)
        }
        if let awsEfsAccessPoint = self.awsEfsAccessPoint {
            try encodeContainer.encode(awsEfsAccessPoint, forKey: .awsEfsAccessPoint)
        }
        if let awsEksCluster = self.awsEksCluster {
            try encodeContainer.encode(awsEksCluster, forKey: .awsEksCluster)
        }
        if let awsElasticBeanstalkEnvironment = self.awsElasticBeanstalkEnvironment {
            try encodeContainer.encode(awsElasticBeanstalkEnvironment, forKey: .awsElasticBeanstalkEnvironment)
        }
        if let awsElasticsearchDomain = self.awsElasticsearchDomain {
            try encodeContainer.encode(awsElasticsearchDomain, forKey: .awsElasticsearchDomain)
        }
        if let awsElbLoadBalancer = self.awsElbLoadBalancer {
            try encodeContainer.encode(awsElbLoadBalancer, forKey: .awsElbLoadBalancer)
        }
        if let awsElbv2LoadBalancer = self.awsElbv2LoadBalancer {
            try encodeContainer.encode(awsElbv2LoadBalancer, forKey: .awsElbv2LoadBalancer)
        }
        if let awsIamAccessKey = self.awsIamAccessKey {
            try encodeContainer.encode(awsIamAccessKey, forKey: .awsIamAccessKey)
        }
        if let awsIamGroup = self.awsIamGroup {
            try encodeContainer.encode(awsIamGroup, forKey: .awsIamGroup)
        }
        if let awsIamPolicy = self.awsIamPolicy {
            try encodeContainer.encode(awsIamPolicy, forKey: .awsIamPolicy)
        }
        if let awsIamRole = self.awsIamRole {
            try encodeContainer.encode(awsIamRole, forKey: .awsIamRole)
        }
        if let awsIamUser = self.awsIamUser {
            try encodeContainer.encode(awsIamUser, forKey: .awsIamUser)
        }
        if let awsKinesisStream = self.awsKinesisStream {
            try encodeContainer.encode(awsKinesisStream, forKey: .awsKinesisStream)
        }
        if let awsKmsKey = self.awsKmsKey {
            try encodeContainer.encode(awsKmsKey, forKey: .awsKmsKey)
        }
        if let awsLambdaFunction = self.awsLambdaFunction {
            try encodeContainer.encode(awsLambdaFunction, forKey: .awsLambdaFunction)
        }
        if let awsLambdaLayerVersion = self.awsLambdaLayerVersion {
            try encodeContainer.encode(awsLambdaLayerVersion, forKey: .awsLambdaLayerVersion)
        }
        if let awsNetworkFirewallFirewall = self.awsNetworkFirewallFirewall {
            try encodeContainer.encode(awsNetworkFirewallFirewall, forKey: .awsNetworkFirewallFirewall)
        }
        if let awsNetworkFirewallFirewallPolicy = self.awsNetworkFirewallFirewallPolicy {
            try encodeContainer.encode(awsNetworkFirewallFirewallPolicy, forKey: .awsNetworkFirewallFirewallPolicy)
        }
        if let awsNetworkFirewallRuleGroup = self.awsNetworkFirewallRuleGroup {
            try encodeContainer.encode(awsNetworkFirewallRuleGroup, forKey: .awsNetworkFirewallRuleGroup)
        }
        if let awsOpenSearchServiceDomain = self.awsOpenSearchServiceDomain {
            try encodeContainer.encode(awsOpenSearchServiceDomain, forKey: .awsOpenSearchServiceDomain)
        }
        if let awsRdsDbCluster = self.awsRdsDbCluster {
            try encodeContainer.encode(awsRdsDbCluster, forKey: .awsRdsDbCluster)
        }
        if let awsRdsDbClusterSnapshot = self.awsRdsDbClusterSnapshot {
            try encodeContainer.encode(awsRdsDbClusterSnapshot, forKey: .awsRdsDbClusterSnapshot)
        }
        if let awsRdsDbInstance = self.awsRdsDbInstance {
            try encodeContainer.encode(awsRdsDbInstance, forKey: .awsRdsDbInstance)
        }
        if let awsRdsDbSecurityGroup = self.awsRdsDbSecurityGroup {
            try encodeContainer.encode(awsRdsDbSecurityGroup, forKey: .awsRdsDbSecurityGroup)
        }
        if let awsRdsDbSnapshot = self.awsRdsDbSnapshot {
            try encodeContainer.encode(awsRdsDbSnapshot, forKey: .awsRdsDbSnapshot)
        }
        if let awsRdsEventSubscription = self.awsRdsEventSubscription {
            try encodeContainer.encode(awsRdsEventSubscription, forKey: .awsRdsEventSubscription)
        }
        if let awsRedshiftCluster = self.awsRedshiftCluster {
            try encodeContainer.encode(awsRedshiftCluster, forKey: .awsRedshiftCluster)
        }
        if let awsS3AccountPublicAccessBlock = self.awsS3AccountPublicAccessBlock {
            try encodeContainer.encode(awsS3AccountPublicAccessBlock, forKey: .awsS3AccountPublicAccessBlock)
        }
        if let awsS3Bucket = self.awsS3Bucket {
            try encodeContainer.encode(awsS3Bucket, forKey: .awsS3Bucket)
        }
        if let awsS3Object = self.awsS3Object {
            try encodeContainer.encode(awsS3Object, forKey: .awsS3Object)
        }
        if let awsSecretsManagerSecret = self.awsSecretsManagerSecret {
            try encodeContainer.encode(awsSecretsManagerSecret, forKey: .awsSecretsManagerSecret)
        }
        if let awsSnsTopic = self.awsSnsTopic {
            try encodeContainer.encode(awsSnsTopic, forKey: .awsSnsTopic)
        }
        if let awsSqsQueue = self.awsSqsQueue {
            try encodeContainer.encode(awsSqsQueue, forKey: .awsSqsQueue)
        }
        if let awsSsmPatchCompliance = self.awsSsmPatchCompliance {
            try encodeContainer.encode(awsSsmPatchCompliance, forKey: .awsSsmPatchCompliance)
        }
        if let awsWafRateBasedRule = self.awsWafRateBasedRule {
            try encodeContainer.encode(awsWafRateBasedRule, forKey: .awsWafRateBasedRule)
        }
        if let awsWafRegionalRateBasedRule = self.awsWafRegionalRateBasedRule {
            try encodeContainer.encode(awsWafRegionalRateBasedRule, forKey: .awsWafRegionalRateBasedRule)
        }
        if let awsWafRegionalRule = self.awsWafRegionalRule {
            try encodeContainer.encode(awsWafRegionalRule, forKey: .awsWafRegionalRule)
        }
        if let awsWafRegionalRuleGroup = self.awsWafRegionalRuleGroup {
            try encodeContainer.encode(awsWafRegionalRuleGroup, forKey: .awsWafRegionalRuleGroup)
        }
        if let awsWafRegionalWebAcl = self.awsWafRegionalWebAcl {
            try encodeContainer.encode(awsWafRegionalWebAcl, forKey: .awsWafRegionalWebAcl)
        }
        if let awsWafRule = self.awsWafRule {
            try encodeContainer.encode(awsWafRule, forKey: .awsWafRule)
        }
        if let awsWafRuleGroup = self.awsWafRuleGroup {
            try encodeContainer.encode(awsWafRuleGroup, forKey: .awsWafRuleGroup)
        }
        if let awsWafWebAcl = self.awsWafWebAcl {
            try encodeContainer.encode(awsWafWebAcl, forKey: .awsWafWebAcl)
        }
        if let awsXrayEncryptionConfig = self.awsXrayEncryptionConfig {
            try encodeContainer.encode(awsXrayEncryptionConfig, forKey: .awsXrayEncryptionConfig)
        }
        if let container = self.container {
            try encodeContainer.encode(container, forKey: .container)
        }
        if let other = other {
            var otherContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .other)
            for (dictKey0, fieldmap0) in other {
                try otherContainer.encode(fieldmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let awsAutoScalingAutoScalingGroupDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsAutoScalingAutoScalingGroupDetails.self, forKey: .awsAutoScalingAutoScalingGroup)
        awsAutoScalingAutoScalingGroup = awsAutoScalingAutoScalingGroupDecoded
        let awsCodeBuildProjectDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsCodeBuildProjectDetails.self, forKey: .awsCodeBuildProject)
        awsCodeBuildProject = awsCodeBuildProjectDecoded
        let awsCloudFrontDistributionDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsCloudFrontDistributionDetails.self, forKey: .awsCloudFrontDistribution)
        awsCloudFrontDistribution = awsCloudFrontDistributionDecoded
        let awsEc2InstanceDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsEc2InstanceDetails.self, forKey: .awsEc2Instance)
        awsEc2Instance = awsEc2InstanceDecoded
        let awsEc2NetworkInterfaceDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsEc2NetworkInterfaceDetails.self, forKey: .awsEc2NetworkInterface)
        awsEc2NetworkInterface = awsEc2NetworkInterfaceDecoded
        let awsEc2SecurityGroupDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsEc2SecurityGroupDetails.self, forKey: .awsEc2SecurityGroup)
        awsEc2SecurityGroup = awsEc2SecurityGroupDecoded
        let awsEc2VolumeDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsEc2VolumeDetails.self, forKey: .awsEc2Volume)
        awsEc2Volume = awsEc2VolumeDecoded
        let awsEc2VpcDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsEc2VpcDetails.self, forKey: .awsEc2Vpc)
        awsEc2Vpc = awsEc2VpcDecoded
        let awsEc2EipDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsEc2EipDetails.self, forKey: .awsEc2Eip)
        awsEc2Eip = awsEc2EipDecoded
        let awsEc2SubnetDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsEc2SubnetDetails.self, forKey: .awsEc2Subnet)
        awsEc2Subnet = awsEc2SubnetDecoded
        let awsEc2NetworkAclDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsEc2NetworkAclDetails.self, forKey: .awsEc2NetworkAcl)
        awsEc2NetworkAcl = awsEc2NetworkAclDecoded
        let awsElbv2LoadBalancerDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsElbv2LoadBalancerDetails.self, forKey: .awsElbv2LoadBalancer)
        awsElbv2LoadBalancer = awsElbv2LoadBalancerDecoded
        let awsElasticBeanstalkEnvironmentDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsElasticBeanstalkEnvironmentDetails.self, forKey: .awsElasticBeanstalkEnvironment)
        awsElasticBeanstalkEnvironment = awsElasticBeanstalkEnvironmentDecoded
        let awsElasticsearchDomainDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsElasticsearchDomainDetails.self, forKey: .awsElasticsearchDomain)
        awsElasticsearchDomain = awsElasticsearchDomainDecoded
        let awsS3BucketDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsS3BucketDetails.self, forKey: .awsS3Bucket)
        awsS3Bucket = awsS3BucketDecoded
        let awsS3AccountPublicAccessBlockDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsS3AccountPublicAccessBlockDetails.self, forKey: .awsS3AccountPublicAccessBlock)
        awsS3AccountPublicAccessBlock = awsS3AccountPublicAccessBlockDecoded
        let awsS3ObjectDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsS3ObjectDetails.self, forKey: .awsS3Object)
        awsS3Object = awsS3ObjectDecoded
        let awsSecretsManagerSecretDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsSecretsManagerSecretDetails.self, forKey: .awsSecretsManagerSecret)
        awsSecretsManagerSecret = awsSecretsManagerSecretDecoded
        let awsIamAccessKeyDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsIamAccessKeyDetails.self, forKey: .awsIamAccessKey)
        awsIamAccessKey = awsIamAccessKeyDecoded
        let awsIamUserDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsIamUserDetails.self, forKey: .awsIamUser)
        awsIamUser = awsIamUserDecoded
        let awsIamPolicyDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsIamPolicyDetails.self, forKey: .awsIamPolicy)
        awsIamPolicy = awsIamPolicyDecoded
        let awsApiGatewayV2StageDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsApiGatewayV2StageDetails.self, forKey: .awsApiGatewayV2Stage)
        awsApiGatewayV2Stage = awsApiGatewayV2StageDecoded
        let awsApiGatewayV2ApiDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsApiGatewayV2ApiDetails.self, forKey: .awsApiGatewayV2Api)
        awsApiGatewayV2Api = awsApiGatewayV2ApiDecoded
        let awsDynamoDbTableDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsDynamoDbTableDetails.self, forKey: .awsDynamoDbTable)
        awsDynamoDbTable = awsDynamoDbTableDecoded
        let awsApiGatewayStageDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsApiGatewayStageDetails.self, forKey: .awsApiGatewayStage)
        awsApiGatewayStage = awsApiGatewayStageDecoded
        let awsApiGatewayRestApiDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsApiGatewayRestApiDetails.self, forKey: .awsApiGatewayRestApi)
        awsApiGatewayRestApi = awsApiGatewayRestApiDecoded
        let awsCloudTrailTrailDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsCloudTrailTrailDetails.self, forKey: .awsCloudTrailTrail)
        awsCloudTrailTrail = awsCloudTrailTrailDecoded
        let awsSsmPatchComplianceDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsSsmPatchComplianceDetails.self, forKey: .awsSsmPatchCompliance)
        awsSsmPatchCompliance = awsSsmPatchComplianceDecoded
        let awsCertificateManagerCertificateDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsCertificateManagerCertificateDetails.self, forKey: .awsCertificateManagerCertificate)
        awsCertificateManagerCertificate = awsCertificateManagerCertificateDecoded
        let awsRedshiftClusterDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsRedshiftClusterDetails.self, forKey: .awsRedshiftCluster)
        awsRedshiftCluster = awsRedshiftClusterDecoded
        let awsElbLoadBalancerDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsElbLoadBalancerDetails.self, forKey: .awsElbLoadBalancer)
        awsElbLoadBalancer = awsElbLoadBalancerDecoded
        let awsIamGroupDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsIamGroupDetails.self, forKey: .awsIamGroup)
        awsIamGroup = awsIamGroupDecoded
        let awsIamRoleDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsIamRoleDetails.self, forKey: .awsIamRole)
        awsIamRole = awsIamRoleDecoded
        let awsKmsKeyDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsKmsKeyDetails.self, forKey: .awsKmsKey)
        awsKmsKey = awsKmsKeyDecoded
        let awsLambdaFunctionDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsLambdaFunctionDetails.self, forKey: .awsLambdaFunction)
        awsLambdaFunction = awsLambdaFunctionDecoded
        let awsLambdaLayerVersionDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsLambdaLayerVersionDetails.self, forKey: .awsLambdaLayerVersion)
        awsLambdaLayerVersion = awsLambdaLayerVersionDecoded
        let awsRdsDbInstanceDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsRdsDbInstanceDetails.self, forKey: .awsRdsDbInstance)
        awsRdsDbInstance = awsRdsDbInstanceDecoded
        let awsSnsTopicDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsSnsTopicDetails.self, forKey: .awsSnsTopic)
        awsSnsTopic = awsSnsTopicDecoded
        let awsSqsQueueDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsSqsQueueDetails.self, forKey: .awsSqsQueue)
        awsSqsQueue = awsSqsQueueDecoded
        let awsWafWebAclDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsWafWebAclDetails.self, forKey: .awsWafWebAcl)
        awsWafWebAcl = awsWafWebAclDecoded
        let awsRdsDbSnapshotDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsRdsDbSnapshotDetails.self, forKey: .awsRdsDbSnapshot)
        awsRdsDbSnapshot = awsRdsDbSnapshotDecoded
        let awsRdsDbClusterSnapshotDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsRdsDbClusterSnapshotDetails.self, forKey: .awsRdsDbClusterSnapshot)
        awsRdsDbClusterSnapshot = awsRdsDbClusterSnapshotDecoded
        let awsRdsDbClusterDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsRdsDbClusterDetails.self, forKey: .awsRdsDbCluster)
        awsRdsDbCluster = awsRdsDbClusterDecoded
        let awsEcsClusterDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsEcsClusterDetails.self, forKey: .awsEcsCluster)
        awsEcsCluster = awsEcsClusterDecoded
        let awsEcsContainerDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsEcsContainerDetails.self, forKey: .awsEcsContainer)
        awsEcsContainer = awsEcsContainerDecoded
        let awsEcsTaskDefinitionDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsEcsTaskDefinitionDetails.self, forKey: .awsEcsTaskDefinition)
        awsEcsTaskDefinition = awsEcsTaskDefinitionDecoded
        let containerDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.ContainerDetails.self, forKey: .container)
        container = containerDecoded
        let otherContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .other)
        var otherDecoded0: [Swift.String:Swift.String]? = nil
        if let otherContainer = otherContainer {
            otherDecoded0 = [Swift.String:Swift.String]()
            for (key0, nonemptystring0) in otherContainer {
                if let nonemptystring0 = nonemptystring0 {
                    otherDecoded0?[key0] = nonemptystring0
                }
            }
        }
        other = otherDecoded0
        let awsRdsEventSubscriptionDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsRdsEventSubscriptionDetails.self, forKey: .awsRdsEventSubscription)
        awsRdsEventSubscription = awsRdsEventSubscriptionDecoded
        let awsEcsServiceDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsEcsServiceDetails.self, forKey: .awsEcsService)
        awsEcsService = awsEcsServiceDecoded
        let awsAutoScalingLaunchConfigurationDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsAutoScalingLaunchConfigurationDetails.self, forKey: .awsAutoScalingLaunchConfiguration)
        awsAutoScalingLaunchConfiguration = awsAutoScalingLaunchConfigurationDecoded
        let awsEc2VpnConnectionDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsEc2VpnConnectionDetails.self, forKey: .awsEc2VpnConnection)
        awsEc2VpnConnection = awsEc2VpnConnectionDecoded
        let awsEcrContainerImageDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsEcrContainerImageDetails.self, forKey: .awsEcrContainerImage)
        awsEcrContainerImage = awsEcrContainerImageDecoded
        let awsOpenSearchServiceDomainDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsOpenSearchServiceDomainDetails.self, forKey: .awsOpenSearchServiceDomain)
        awsOpenSearchServiceDomain = awsOpenSearchServiceDomainDecoded
        let awsEc2VpcEndpointServiceDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsEc2VpcEndpointServiceDetails.self, forKey: .awsEc2VpcEndpointService)
        awsEc2VpcEndpointService = awsEc2VpcEndpointServiceDecoded
        let awsXrayEncryptionConfigDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsXrayEncryptionConfigDetails.self, forKey: .awsXrayEncryptionConfig)
        awsXrayEncryptionConfig = awsXrayEncryptionConfigDecoded
        let awsWafRateBasedRuleDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsWafRateBasedRuleDetails.self, forKey: .awsWafRateBasedRule)
        awsWafRateBasedRule = awsWafRateBasedRuleDecoded
        let awsWafRegionalRateBasedRuleDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsWafRegionalRateBasedRuleDetails.self, forKey: .awsWafRegionalRateBasedRule)
        awsWafRegionalRateBasedRule = awsWafRegionalRateBasedRuleDecoded
        let awsEcrRepositoryDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsEcrRepositoryDetails.self, forKey: .awsEcrRepository)
        awsEcrRepository = awsEcrRepositoryDecoded
        let awsEksClusterDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsEksClusterDetails.self, forKey: .awsEksCluster)
        awsEksCluster = awsEksClusterDecoded
        let awsNetworkFirewallFirewallPolicyDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsNetworkFirewallFirewallPolicyDetails.self, forKey: .awsNetworkFirewallFirewallPolicy)
        awsNetworkFirewallFirewallPolicy = awsNetworkFirewallFirewallPolicyDecoded
        let awsNetworkFirewallFirewallDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsNetworkFirewallFirewallDetails.self, forKey: .awsNetworkFirewallFirewall)
        awsNetworkFirewallFirewall = awsNetworkFirewallFirewallDecoded
        let awsNetworkFirewallRuleGroupDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsNetworkFirewallRuleGroupDetails.self, forKey: .awsNetworkFirewallRuleGroup)
        awsNetworkFirewallRuleGroup = awsNetworkFirewallRuleGroupDecoded
        let awsRdsDbSecurityGroupDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsRdsDbSecurityGroupDetails.self, forKey: .awsRdsDbSecurityGroup)
        awsRdsDbSecurityGroup = awsRdsDbSecurityGroupDecoded
        let awsKinesisStreamDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsKinesisStreamDetails.self, forKey: .awsKinesisStream)
        awsKinesisStream = awsKinesisStreamDecoded
        let awsEc2TransitGatewayDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsEc2TransitGatewayDetails.self, forKey: .awsEc2TransitGateway)
        awsEc2TransitGateway = awsEc2TransitGatewayDecoded
        let awsEfsAccessPointDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsEfsAccessPointDetails.self, forKey: .awsEfsAccessPoint)
        awsEfsAccessPoint = awsEfsAccessPointDecoded
        let awsCloudFormationStackDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsCloudFormationStackDetails.self, forKey: .awsCloudFormationStack)
        awsCloudFormationStack = awsCloudFormationStackDecoded
        let awsCloudWatchAlarmDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsCloudWatchAlarmDetails.self, forKey: .awsCloudWatchAlarm)
        awsCloudWatchAlarm = awsCloudWatchAlarmDecoded
        let awsEc2VpcPeeringConnectionDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsEc2VpcPeeringConnectionDetails.self, forKey: .awsEc2VpcPeeringConnection)
        awsEc2VpcPeeringConnection = awsEc2VpcPeeringConnectionDecoded
        let awsWafRegionalRuleGroupDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsWafRegionalRuleGroupDetails.self, forKey: .awsWafRegionalRuleGroup)
        awsWafRegionalRuleGroup = awsWafRegionalRuleGroupDecoded
        let awsWafRegionalRuleDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsWafRegionalRuleDetails.self, forKey: .awsWafRegionalRule)
        awsWafRegionalRule = awsWafRegionalRuleDecoded
        let awsWafRegionalWebAclDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsWafRegionalWebAclDetails.self, forKey: .awsWafRegionalWebAcl)
        awsWafRegionalWebAcl = awsWafRegionalWebAclDecoded
        let awsWafRuleDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsWafRuleDetails.self, forKey: .awsWafRule)
        awsWafRule = awsWafRuleDecoded
        let awsWafRuleGroupDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsWafRuleGroupDetails.self, forKey: .awsWafRuleGroup)
        awsWafRuleGroup = awsWafRuleGroupDecoded
        let awsEcsTaskDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsEcsTaskDetails.self, forKey: .awsEcsTask)
        awsEcsTask = awsEcsTaskDecoded
        let awsBackupBackupVaultDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsBackupBackupVaultDetails.self, forKey: .awsBackupBackupVault)
        awsBackupBackupVault = awsBackupBackupVaultDecoded
        let awsBackupBackupPlanDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsBackupBackupPlanDetails.self, forKey: .awsBackupBackupPlan)
        awsBackupBackupPlan = awsBackupBackupPlanDecoded
        let awsBackupRecoveryPointDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsBackupRecoveryPointDetails.self, forKey: .awsBackupRecoveryPoint)
        awsBackupRecoveryPoint = awsBackupRecoveryPointDecoded
    }
}
