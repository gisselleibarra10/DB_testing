// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension MediaConvertClientTypes.Eac3AtmosSettings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bitrate = "bitrate"
        case bitstreamMode = "bitstreamMode"
        case codingMode = "codingMode"
        case dialogueIntelligence = "dialogueIntelligence"
        case downmixControl = "downmixControl"
        case dynamicRangeCompressionLine = "dynamicRangeCompressionLine"
        case dynamicRangeCompressionRf = "dynamicRangeCompressionRf"
        case dynamicRangeControl = "dynamicRangeControl"
        case loRoCenterMixLevel = "loRoCenterMixLevel"
        case loRoSurroundMixLevel = "loRoSurroundMixLevel"
        case ltRtCenterMixLevel = "ltRtCenterMixLevel"
        case ltRtSurroundMixLevel = "ltRtSurroundMixLevel"
        case meteringMode = "meteringMode"
        case sampleRate = "sampleRate"
        case speechThreshold = "speechThreshold"
        case stereoDownmix = "stereoDownmix"
        case surroundExMode = "surroundExMode"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let bitrate = self.bitrate {
            try encodeContainer.encode(bitrate, forKey: .bitrate)
        }
        if let bitstreamMode = self.bitstreamMode {
            try encodeContainer.encode(bitstreamMode.rawValue, forKey: .bitstreamMode)
        }
        if let codingMode = self.codingMode {
            try encodeContainer.encode(codingMode.rawValue, forKey: .codingMode)
        }
        if let dialogueIntelligence = self.dialogueIntelligence {
            try encodeContainer.encode(dialogueIntelligence.rawValue, forKey: .dialogueIntelligence)
        }
        if let downmixControl = self.downmixControl {
            try encodeContainer.encode(downmixControl.rawValue, forKey: .downmixControl)
        }
        if let dynamicRangeCompressionLine = self.dynamicRangeCompressionLine {
            try encodeContainer.encode(dynamicRangeCompressionLine.rawValue, forKey: .dynamicRangeCompressionLine)
        }
        if let dynamicRangeCompressionRf = self.dynamicRangeCompressionRf {
            try encodeContainer.encode(dynamicRangeCompressionRf.rawValue, forKey: .dynamicRangeCompressionRf)
        }
        if let dynamicRangeControl = self.dynamicRangeControl {
            try encodeContainer.encode(dynamicRangeControl.rawValue, forKey: .dynamicRangeControl)
        }
        if let loRoCenterMixLevel = self.loRoCenterMixLevel {
            try encodeContainer.encode(loRoCenterMixLevel, forKey: .loRoCenterMixLevel)
        }
        if let loRoSurroundMixLevel = self.loRoSurroundMixLevel {
            try encodeContainer.encode(loRoSurroundMixLevel, forKey: .loRoSurroundMixLevel)
        }
        if let ltRtCenterMixLevel = self.ltRtCenterMixLevel {
            try encodeContainer.encode(ltRtCenterMixLevel, forKey: .ltRtCenterMixLevel)
        }
        if let ltRtSurroundMixLevel = self.ltRtSurroundMixLevel {
            try encodeContainer.encode(ltRtSurroundMixLevel, forKey: .ltRtSurroundMixLevel)
        }
        if let meteringMode = self.meteringMode {
            try encodeContainer.encode(meteringMode.rawValue, forKey: .meteringMode)
        }
        if let sampleRate = self.sampleRate {
            try encodeContainer.encode(sampleRate, forKey: .sampleRate)
        }
        if let speechThreshold = self.speechThreshold {
            try encodeContainer.encode(speechThreshold, forKey: .speechThreshold)
        }
        if let stereoDownmix = self.stereoDownmix {
            try encodeContainer.encode(stereoDownmix.rawValue, forKey: .stereoDownmix)
        }
        if let surroundExMode = self.surroundExMode {
            try encodeContainer.encode(surroundExMode.rawValue, forKey: .surroundExMode)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let bitrateDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .bitrate)
        bitrate = bitrateDecoded
        let bitstreamModeDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.Eac3AtmosBitstreamMode.self, forKey: .bitstreamMode)
        bitstreamMode = bitstreamModeDecoded
        let codingModeDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.Eac3AtmosCodingMode.self, forKey: .codingMode)
        codingMode = codingModeDecoded
        let dialogueIntelligenceDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.Eac3AtmosDialogueIntelligence.self, forKey: .dialogueIntelligence)
        dialogueIntelligence = dialogueIntelligenceDecoded
        let downmixControlDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.Eac3AtmosDownmixControl.self, forKey: .downmixControl)
        downmixControl = downmixControlDecoded
        let dynamicRangeCompressionLineDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.Eac3AtmosDynamicRangeCompressionLine.self, forKey: .dynamicRangeCompressionLine)
        dynamicRangeCompressionLine = dynamicRangeCompressionLineDecoded
        let dynamicRangeCompressionRfDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.Eac3AtmosDynamicRangeCompressionRf.self, forKey: .dynamicRangeCompressionRf)
        dynamicRangeCompressionRf = dynamicRangeCompressionRfDecoded
        let dynamicRangeControlDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.Eac3AtmosDynamicRangeControl.self, forKey: .dynamicRangeControl)
        dynamicRangeControl = dynamicRangeControlDecoded
        let loRoCenterMixLevelDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .loRoCenterMixLevel)
        loRoCenterMixLevel = loRoCenterMixLevelDecoded
        let loRoSurroundMixLevelDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .loRoSurroundMixLevel)
        loRoSurroundMixLevel = loRoSurroundMixLevelDecoded
        let ltRtCenterMixLevelDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .ltRtCenterMixLevel)
        ltRtCenterMixLevel = ltRtCenterMixLevelDecoded
        let ltRtSurroundMixLevelDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .ltRtSurroundMixLevel)
        ltRtSurroundMixLevel = ltRtSurroundMixLevelDecoded
        let meteringModeDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.Eac3AtmosMeteringMode.self, forKey: .meteringMode)
        meteringMode = meteringModeDecoded
        let sampleRateDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .sampleRate)
        sampleRate = sampleRateDecoded
        let speechThresholdDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .speechThreshold)
        speechThreshold = speechThresholdDecoded
        let stereoDownmixDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.Eac3AtmosStereoDownmix.self, forKey: .stereoDownmix)
        stereoDownmix = stereoDownmixDecoded
        let surroundExModeDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.Eac3AtmosSurroundExMode.self, forKey: .surroundExMode)
        surroundExMode = surroundExModeDecoded
    }
}
