// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension MediaConvertClientTypes.MsSmoothGroupSettings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case additionalManifests = "additionalManifests"
        case audioDeduplication = "audioDeduplication"
        case destination = "destination"
        case destinationSettings = "destinationSettings"
        case encryption = "encryption"
        case fragmentLength = "fragmentLength"
        case fragmentLengthControl = "fragmentLengthControl"
        case manifestEncoding = "manifestEncoding"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let additionalManifests = additionalManifests {
            var additionalManifestsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .additionalManifests)
            for __listofmssmoothadditionalmanifest0 in additionalManifests {
                try additionalManifestsContainer.encode(__listofmssmoothadditionalmanifest0)
            }
        }
        if let audioDeduplication = self.audioDeduplication {
            try encodeContainer.encode(audioDeduplication.rawValue, forKey: .audioDeduplication)
        }
        if let destination = self.destination {
            try encodeContainer.encode(destination, forKey: .destination)
        }
        if let destinationSettings = self.destinationSettings {
            try encodeContainer.encode(destinationSettings, forKey: .destinationSettings)
        }
        if let encryption = self.encryption {
            try encodeContainer.encode(encryption, forKey: .encryption)
        }
        if let fragmentLength = self.fragmentLength {
            try encodeContainer.encode(fragmentLength, forKey: .fragmentLength)
        }
        if let fragmentLengthControl = self.fragmentLengthControl {
            try encodeContainer.encode(fragmentLengthControl.rawValue, forKey: .fragmentLengthControl)
        }
        if let manifestEncoding = self.manifestEncoding {
            try encodeContainer.encode(manifestEncoding.rawValue, forKey: .manifestEncoding)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let additionalManifestsContainer = try containerValues.decodeIfPresent([MediaConvertClientTypes.MsSmoothAdditionalManifest?].self, forKey: .additionalManifests)
        var additionalManifestsDecoded0:[MediaConvertClientTypes.MsSmoothAdditionalManifest]? = nil
        if let additionalManifestsContainer = additionalManifestsContainer {
            additionalManifestsDecoded0 = [MediaConvertClientTypes.MsSmoothAdditionalManifest]()
            for structure0 in additionalManifestsContainer {
                if let structure0 = structure0 {
                    additionalManifestsDecoded0?.append(structure0)
                }
            }
        }
        additionalManifests = additionalManifestsDecoded0
        let audioDeduplicationDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.MsSmoothAudioDeduplication.self, forKey: .audioDeduplication)
        audioDeduplication = audioDeduplicationDecoded
        let destinationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .destination)
        destination = destinationDecoded
        let destinationSettingsDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.DestinationSettings.self, forKey: .destinationSettings)
        destinationSettings = destinationSettingsDecoded
        let encryptionDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.MsSmoothEncryptionSettings.self, forKey: .encryption)
        encryption = encryptionDecoded
        let fragmentLengthDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .fragmentLength)
        fragmentLength = fragmentLengthDecoded
        let fragmentLengthControlDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.MsSmoothFragmentLengthControl.self, forKey: .fragmentLengthControl)
        fragmentLengthControl = fragmentLengthControlDecoded
        let manifestEncodingDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.MsSmoothManifestEncoding.self, forKey: .manifestEncoding)
        manifestEncoding = manifestEncodingDecoded
    }
}
