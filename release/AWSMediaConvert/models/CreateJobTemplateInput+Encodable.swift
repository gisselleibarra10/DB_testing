// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CreateJobTemplateInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accelerationSettings = "accelerationSettings"
        case category = "category"
        case description = "description"
        case hopDestinations = "hopDestinations"
        case name = "name"
        case priority = "priority"
        case queue = "queue"
        case settings = "settings"
        case statusUpdateInterval = "statusUpdateInterval"
        case tags = "tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accelerationSettings = self.accelerationSettings {
            try encodeContainer.encode(accelerationSettings, forKey: .accelerationSettings)
        }
        if let category = self.category {
            try encodeContainer.encode(category, forKey: .category)
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let hopDestinations = hopDestinations {
            var hopDestinationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .hopDestinations)
            for __listofhopdestination0 in hopDestinations {
                try hopDestinationsContainer.encode(__listofhopdestination0)
            }
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let priority = self.priority {
            try encodeContainer.encode(priority, forKey: .priority)
        }
        if let queue = self.queue {
            try encodeContainer.encode(queue, forKey: .queue)
        }
        if let settings = self.settings {
            try encodeContainer.encode(settings, forKey: .settings)
        }
        if let statusUpdateInterval = self.statusUpdateInterval {
            try encodeContainer.encode(statusUpdateInterval.rawValue, forKey: .statusUpdateInterval)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, __mapof__string0) in tags {
                try tagsContainer.encode(__mapof__string0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }
}
