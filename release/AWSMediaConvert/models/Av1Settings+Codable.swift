// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension MediaConvertClientTypes.Av1Settings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case adaptiveQuantization = "adaptiveQuantization"
        case bitDepth = "bitDepth"
        case framerateControl = "framerateControl"
        case framerateConversionAlgorithm = "framerateConversionAlgorithm"
        case framerateDenominator = "framerateDenominator"
        case framerateNumerator = "framerateNumerator"
        case gopSize = "gopSize"
        case maxBitrate = "maxBitrate"
        case numberBFramesBetweenReferenceFrames = "numberBFramesBetweenReferenceFrames"
        case qvbrSettings = "qvbrSettings"
        case rateControlMode = "rateControlMode"
        case slices = "slices"
        case spatialAdaptiveQuantization = "spatialAdaptiveQuantization"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let adaptiveQuantization = self.adaptiveQuantization {
            try encodeContainer.encode(adaptiveQuantization.rawValue, forKey: .adaptiveQuantization)
        }
        if let bitDepth = self.bitDepth {
            try encodeContainer.encode(bitDepth.rawValue, forKey: .bitDepth)
        }
        if let framerateControl = self.framerateControl {
            try encodeContainer.encode(framerateControl.rawValue, forKey: .framerateControl)
        }
        if let framerateConversionAlgorithm = self.framerateConversionAlgorithm {
            try encodeContainer.encode(framerateConversionAlgorithm.rawValue, forKey: .framerateConversionAlgorithm)
        }
        if let framerateDenominator = self.framerateDenominator {
            try encodeContainer.encode(framerateDenominator, forKey: .framerateDenominator)
        }
        if let framerateNumerator = self.framerateNumerator {
            try encodeContainer.encode(framerateNumerator, forKey: .framerateNumerator)
        }
        if let gopSize = self.gopSize {
            try encodeContainer.encode(gopSize, forKey: .gopSize)
        }
        if let maxBitrate = self.maxBitrate {
            try encodeContainer.encode(maxBitrate, forKey: .maxBitrate)
        }
        if let numberBFramesBetweenReferenceFrames = self.numberBFramesBetweenReferenceFrames {
            try encodeContainer.encode(numberBFramesBetweenReferenceFrames, forKey: .numberBFramesBetweenReferenceFrames)
        }
        if let qvbrSettings = self.qvbrSettings {
            try encodeContainer.encode(qvbrSettings, forKey: .qvbrSettings)
        }
        if let rateControlMode = self.rateControlMode {
            try encodeContainer.encode(rateControlMode.rawValue, forKey: .rateControlMode)
        }
        if let slices = self.slices {
            try encodeContainer.encode(slices, forKey: .slices)
        }
        if let spatialAdaptiveQuantization = self.spatialAdaptiveQuantization {
            try encodeContainer.encode(spatialAdaptiveQuantization.rawValue, forKey: .spatialAdaptiveQuantization)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let adaptiveQuantizationDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.Av1AdaptiveQuantization.self, forKey: .adaptiveQuantization)
        adaptiveQuantization = adaptiveQuantizationDecoded
        let bitDepthDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.Av1BitDepth.self, forKey: .bitDepth)
        bitDepth = bitDepthDecoded
        let framerateControlDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.Av1FramerateControl.self, forKey: .framerateControl)
        framerateControl = framerateControlDecoded
        let framerateConversionAlgorithmDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.Av1FramerateConversionAlgorithm.self, forKey: .framerateConversionAlgorithm)
        framerateConversionAlgorithm = framerateConversionAlgorithmDecoded
        let framerateDenominatorDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .framerateDenominator)
        framerateDenominator = framerateDenominatorDecoded
        let framerateNumeratorDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .framerateNumerator)
        framerateNumerator = framerateNumeratorDecoded
        let gopSizeDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .gopSize)
        gopSize = gopSizeDecoded
        let maxBitrateDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxBitrate)
        maxBitrate = maxBitrateDecoded
        let numberBFramesBetweenReferenceFramesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .numberBFramesBetweenReferenceFrames)
        numberBFramesBetweenReferenceFrames = numberBFramesBetweenReferenceFramesDecoded
        let qvbrSettingsDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.Av1QvbrSettings.self, forKey: .qvbrSettings)
        qvbrSettings = qvbrSettingsDecoded
        let rateControlModeDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.Av1RateControlMode.self, forKey: .rateControlMode)
        rateControlMode = rateControlModeDecoded
        let slicesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .slices)
        slices = slicesDecoded
        let spatialAdaptiveQuantizationDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.Av1SpatialAdaptiveQuantization.self, forKey: .spatialAdaptiveQuantization)
        spatialAdaptiveQuantization = spatialAdaptiveQuantizationDecoded
    }
}
