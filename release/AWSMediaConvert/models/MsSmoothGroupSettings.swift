// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension MediaConvertClientTypes {
    /// Settings related to your Microsoft Smooth Streaming output package. For more information, see https://docs.aws.amazon.com/mediaconvert/latest/ug/outputs-file-ABR.html. When you work directly in your JSON job specification, include this object and any required children when you set Type, under OutputGroupSettings, to MS_SMOOTH_GROUP_SETTINGS.
    public struct MsSmoothGroupSettings: Swift.Equatable {
        /// By default, the service creates one .ism Microsoft Smooth Streaming manifest for each Microsoft Smooth Streaming output group in your job. This default manifest references every output in the output group. To create additional manifests that reference a subset of the outputs in the output group, specify a list of them here.
        public var additionalManifests: [MediaConvertClientTypes.MsSmoothAdditionalManifest]?
        /// COMBINE_DUPLICATE_STREAMS combines identical audio encoding settings across a Microsoft Smooth output group into a single audio stream.
        public var audioDeduplication: MediaConvertClientTypes.MsSmoothAudioDeduplication?
        /// Use Destination (Destination) to specify the S3 output location and the output filename base. Destination accepts format identifiers. If you do not specify the base filename in the URI, the service will use the filename of the input file. If your job has multiple inputs, the service uses the filename of the first input file.
        public var destination: Swift.String?
        /// Settings associated with the destination. Will vary based on the type of destination
        public var destinationSettings: MediaConvertClientTypes.DestinationSettings?
        /// If you are using DRM, set DRM System (MsSmoothEncryptionSettings) to specify the value SpekeKeyProvider.
        public var encryption: MediaConvertClientTypes.MsSmoothEncryptionSettings?
        /// Specify how you want MediaConvert to determine the fragment length. Choose Exact (EXACT) to have the encoder use the exact length that you specify with the setting Fragment length (FragmentLength). This might result in extra I-frames. Choose Multiple of GOP (GOP_MULTIPLE) to have the encoder round up the segment lengths to match the next GOP boundary.
        public var fragmentLength: Swift.Int?
        /// Specify how you want MediaConvert to determine the fragment length. Choose Exact (EXACT) to have the encoder use the exact length that you specify with the setting Fragment length (FragmentLength). This might result in extra I-frames. Choose Multiple of GOP (GOP_MULTIPLE) to have the encoder round up the segment lengths to match the next GOP boundary.
        public var fragmentLengthControl: MediaConvertClientTypes.MsSmoothFragmentLengthControl?
        /// Use Manifest encoding (MsSmoothManifestEncoding) to specify the encoding format for the server and client manifest. Valid options are utf8 and utf16.
        public var manifestEncoding: MediaConvertClientTypes.MsSmoothManifestEncoding?

        public init (
            additionalManifests: [MediaConvertClientTypes.MsSmoothAdditionalManifest]? = nil,
            audioDeduplication: MediaConvertClientTypes.MsSmoothAudioDeduplication? = nil,
            destination: Swift.String? = nil,
            destinationSettings: MediaConvertClientTypes.DestinationSettings? = nil,
            encryption: MediaConvertClientTypes.MsSmoothEncryptionSettings? = nil,
            fragmentLength: Swift.Int? = nil,
            fragmentLengthControl: MediaConvertClientTypes.MsSmoothFragmentLengthControl? = nil,
            manifestEncoding: MediaConvertClientTypes.MsSmoothManifestEncoding? = nil
        )
        {
            self.additionalManifests = additionalManifests
            self.audioDeduplication = audioDeduplication
            self.destination = destination
            self.destinationSettings = destinationSettings
            self.encryption = encryption
            self.fragmentLength = fragmentLength
            self.fragmentLengthControl = fragmentLengthControl
            self.manifestEncoding = manifestEncoding
        }
    }

}
