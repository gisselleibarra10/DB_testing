// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CreateJobInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accelerationSettings = "accelerationSettings"
        case billingTagsSource = "billingTagsSource"
        case clientRequestToken = "clientRequestToken"
        case hopDestinations = "hopDestinations"
        case jobTemplate = "jobTemplate"
        case priority = "priority"
        case queue = "queue"
        case role = "role"
        case settings = "settings"
        case simulateReservedQueue = "simulateReservedQueue"
        case statusUpdateInterval = "statusUpdateInterval"
        case tags = "tags"
        case userMetadata = "userMetadata"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accelerationSettings = self.accelerationSettings {
            try encodeContainer.encode(accelerationSettings, forKey: .accelerationSettings)
        }
        if let billingTagsSource = self.billingTagsSource {
            try encodeContainer.encode(billingTagsSource.rawValue, forKey: .billingTagsSource)
        }
        if let clientRequestToken = self.clientRequestToken {
            try encodeContainer.encode(clientRequestToken, forKey: .clientRequestToken)
        }
        if let hopDestinations = hopDestinations {
            var hopDestinationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .hopDestinations)
            for __listofhopdestination0 in hopDestinations {
                try hopDestinationsContainer.encode(__listofhopdestination0)
            }
        }
        if let jobTemplate = self.jobTemplate {
            try encodeContainer.encode(jobTemplate, forKey: .jobTemplate)
        }
        if let priority = self.priority {
            try encodeContainer.encode(priority, forKey: .priority)
        }
        if let queue = self.queue {
            try encodeContainer.encode(queue, forKey: .queue)
        }
        if let role = self.role {
            try encodeContainer.encode(role, forKey: .role)
        }
        if let settings = self.settings {
            try encodeContainer.encode(settings, forKey: .settings)
        }
        if let simulateReservedQueue = self.simulateReservedQueue {
            try encodeContainer.encode(simulateReservedQueue.rawValue, forKey: .simulateReservedQueue)
        }
        if let statusUpdateInterval = self.statusUpdateInterval {
            try encodeContainer.encode(statusUpdateInterval.rawValue, forKey: .statusUpdateInterval)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, __mapof__string0) in tags {
                try tagsContainer.encode(__mapof__string0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let userMetadata = userMetadata {
            var userMetadataContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .userMetadata)
            for (dictKey0, __mapof__string0) in userMetadata {
                try userMetadataContainer.encode(__mapof__string0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }
}
