// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension MediaConvertClientTypes.Job: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accelerationSettings = "accelerationSettings"
        case accelerationStatus = "accelerationStatus"
        case arn = "arn"
        case billingTagsSource = "billingTagsSource"
        case createdAt = "createdAt"
        case currentPhase = "currentPhase"
        case errorCode = "errorCode"
        case errorMessage = "errorMessage"
        case hopDestinations = "hopDestinations"
        case id = "id"
        case jobPercentComplete = "jobPercentComplete"
        case jobTemplate = "jobTemplate"
        case messages = "messages"
        case outputGroupDetails = "outputGroupDetails"
        case priority = "priority"
        case queue = "queue"
        case queueTransitions = "queueTransitions"
        case retryCount = "retryCount"
        case role = "role"
        case settings = "settings"
        case simulateReservedQueue = "simulateReservedQueue"
        case status = "status"
        case statusUpdateInterval = "statusUpdateInterval"
        case timing = "timing"
        case userMetadata = "userMetadata"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accelerationSettings = self.accelerationSettings {
            try encodeContainer.encode(accelerationSettings, forKey: .accelerationSettings)
        }
        if let accelerationStatus = self.accelerationStatus {
            try encodeContainer.encode(accelerationStatus.rawValue, forKey: .accelerationStatus)
        }
        if let arn = self.arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let billingTagsSource = self.billingTagsSource {
            try encodeContainer.encode(billingTagsSource.rawValue, forKey: .billingTagsSource)
        }
        if let createdAt = self.createdAt {
            try encodeContainer.encode(createdAt.timeIntervalSince1970, forKey: .createdAt)
        }
        if let currentPhase = self.currentPhase {
            try encodeContainer.encode(currentPhase.rawValue, forKey: .currentPhase)
        }
        if let errorCode = self.errorCode {
            try encodeContainer.encode(errorCode, forKey: .errorCode)
        }
        if let errorMessage = self.errorMessage {
            try encodeContainer.encode(errorMessage, forKey: .errorMessage)
        }
        if let hopDestinations = hopDestinations {
            var hopDestinationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .hopDestinations)
            for __listofhopdestination0 in hopDestinations {
                try hopDestinationsContainer.encode(__listofhopdestination0)
            }
        }
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let jobPercentComplete = self.jobPercentComplete {
            try encodeContainer.encode(jobPercentComplete, forKey: .jobPercentComplete)
        }
        if let jobTemplate = self.jobTemplate {
            try encodeContainer.encode(jobTemplate, forKey: .jobTemplate)
        }
        if let messages = self.messages {
            try encodeContainer.encode(messages, forKey: .messages)
        }
        if let outputGroupDetails = outputGroupDetails {
            var outputGroupDetailsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .outputGroupDetails)
            for __listofoutputgroupdetail0 in outputGroupDetails {
                try outputGroupDetailsContainer.encode(__listofoutputgroupdetail0)
            }
        }
        if let priority = self.priority {
            try encodeContainer.encode(priority, forKey: .priority)
        }
        if let queue = self.queue {
            try encodeContainer.encode(queue, forKey: .queue)
        }
        if let queueTransitions = queueTransitions {
            var queueTransitionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .queueTransitions)
            for __listofqueuetransition0 in queueTransitions {
                try queueTransitionsContainer.encode(__listofqueuetransition0)
            }
        }
        if let retryCount = self.retryCount {
            try encodeContainer.encode(retryCount, forKey: .retryCount)
        }
        if let role = self.role {
            try encodeContainer.encode(role, forKey: .role)
        }
        if let settings = self.settings {
            try encodeContainer.encode(settings, forKey: .settings)
        }
        if let simulateReservedQueue = self.simulateReservedQueue {
            try encodeContainer.encode(simulateReservedQueue.rawValue, forKey: .simulateReservedQueue)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let statusUpdateInterval = self.statusUpdateInterval {
            try encodeContainer.encode(statusUpdateInterval.rawValue, forKey: .statusUpdateInterval)
        }
        if let timing = self.timing {
            try encodeContainer.encode(timing, forKey: .timing)
        }
        if let userMetadata = userMetadata {
            var userMetadataContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .userMetadata)
            for (dictKey0, __mapof__string0) in userMetadata {
                try userMetadataContainer.encode(__mapof__string0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let accelerationSettingsDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.AccelerationSettings.self, forKey: .accelerationSettings)
        accelerationSettings = accelerationSettingsDecoded
        let accelerationStatusDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.AccelerationStatus.self, forKey: .accelerationStatus)
        accelerationStatus = accelerationStatusDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let billingTagsSourceDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.BillingTagsSource.self, forKey: .billingTagsSource)
        billingTagsSource = billingTagsSourceDecoded
        let createdAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdAt)
        createdAt = createdAtDecoded
        let currentPhaseDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.JobPhase.self, forKey: .currentPhase)
        currentPhase = currentPhaseDecoded
        let errorCodeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .errorCode)
        errorCode = errorCodeDecoded
        let errorMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .errorMessage)
        errorMessage = errorMessageDecoded
        let hopDestinationsContainer = try containerValues.decodeIfPresent([MediaConvertClientTypes.HopDestination?].self, forKey: .hopDestinations)
        var hopDestinationsDecoded0:[MediaConvertClientTypes.HopDestination]? = nil
        if let hopDestinationsContainer = hopDestinationsContainer {
            hopDestinationsDecoded0 = [MediaConvertClientTypes.HopDestination]()
            for structure0 in hopDestinationsContainer {
                if let structure0 = structure0 {
                    hopDestinationsDecoded0?.append(structure0)
                }
            }
        }
        hopDestinations = hopDestinationsDecoded0
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let jobPercentCompleteDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .jobPercentComplete)
        jobPercentComplete = jobPercentCompleteDecoded
        let jobTemplateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobTemplate)
        jobTemplate = jobTemplateDecoded
        let messagesDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.JobMessages.self, forKey: .messages)
        messages = messagesDecoded
        let outputGroupDetailsContainer = try containerValues.decodeIfPresent([MediaConvertClientTypes.OutputGroupDetail?].self, forKey: .outputGroupDetails)
        var outputGroupDetailsDecoded0:[MediaConvertClientTypes.OutputGroupDetail]? = nil
        if let outputGroupDetailsContainer = outputGroupDetailsContainer {
            outputGroupDetailsDecoded0 = [MediaConvertClientTypes.OutputGroupDetail]()
            for structure0 in outputGroupDetailsContainer {
                if let structure0 = structure0 {
                    outputGroupDetailsDecoded0?.append(structure0)
                }
            }
        }
        outputGroupDetails = outputGroupDetailsDecoded0
        let priorityDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .priority)
        priority = priorityDecoded
        let queueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .queue)
        queue = queueDecoded
        let queueTransitionsContainer = try containerValues.decodeIfPresent([MediaConvertClientTypes.QueueTransition?].self, forKey: .queueTransitions)
        var queueTransitionsDecoded0:[MediaConvertClientTypes.QueueTransition]? = nil
        if let queueTransitionsContainer = queueTransitionsContainer {
            queueTransitionsDecoded0 = [MediaConvertClientTypes.QueueTransition]()
            for structure0 in queueTransitionsContainer {
                if let structure0 = structure0 {
                    queueTransitionsDecoded0?.append(structure0)
                }
            }
        }
        queueTransitions = queueTransitionsDecoded0
        let retryCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .retryCount)
        retryCount = retryCountDecoded
        let roleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .role)
        role = roleDecoded
        let settingsDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.JobSettings.self, forKey: .settings)
        settings = settingsDecoded
        let simulateReservedQueueDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.SimulateReservedQueue.self, forKey: .simulateReservedQueue)
        simulateReservedQueue = simulateReservedQueueDecoded
        let statusDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.JobStatus.self, forKey: .status)
        status = statusDecoded
        let statusUpdateIntervalDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.StatusUpdateInterval.self, forKey: .statusUpdateInterval)
        statusUpdateInterval = statusUpdateIntervalDecoded
        let timingDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.Timing.self, forKey: .timing)
        timing = timingDecoded
        let userMetadataContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .userMetadata)
        var userMetadataDecoded0: [Swift.String:Swift.String]? = nil
        if let userMetadataContainer = userMetadataContainer {
            userMetadataDecoded0 = [Swift.String:Swift.String]()
            for (key0, __string0) in userMetadataContainer {
                if let __string0 = __string0 {
                    userMetadataDecoded0?[key0] = __string0
                }
            }
        }
        userMetadata = userMetadataDecoded0
    }
}
