// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension MediaConvertClientTypes.DvbSubDestinationSettings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case alignment = "alignment"
        case applyFontColor = "applyFontColor"
        case backgroundColor = "backgroundColor"
        case backgroundOpacity = "backgroundOpacity"
        case ddsHandling = "ddsHandling"
        case ddsXCoordinate = "ddsXCoordinate"
        case ddsYCoordinate = "ddsYCoordinate"
        case fallbackFont = "fallbackFont"
        case fontColor = "fontColor"
        case fontOpacity = "fontOpacity"
        case fontResolution = "fontResolution"
        case fontScript = "fontScript"
        case fontSize = "fontSize"
        case height = "height"
        case hexFontColor = "hexFontColor"
        case outlineColor = "outlineColor"
        case outlineSize = "outlineSize"
        case shadowColor = "shadowColor"
        case shadowOpacity = "shadowOpacity"
        case shadowXOffset = "shadowXOffset"
        case shadowYOffset = "shadowYOffset"
        case stylePassthrough = "stylePassthrough"
        case subtitlingType = "subtitlingType"
        case teletextSpacing = "teletextSpacing"
        case width = "width"
        case xPosition = "xPosition"
        case yPosition = "yPosition"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let alignment = self.alignment {
            try encodeContainer.encode(alignment.rawValue, forKey: .alignment)
        }
        if let applyFontColor = self.applyFontColor {
            try encodeContainer.encode(applyFontColor.rawValue, forKey: .applyFontColor)
        }
        if let backgroundColor = self.backgroundColor {
            try encodeContainer.encode(backgroundColor.rawValue, forKey: .backgroundColor)
        }
        if let backgroundOpacity = self.backgroundOpacity {
            try encodeContainer.encode(backgroundOpacity, forKey: .backgroundOpacity)
        }
        if let ddsHandling = self.ddsHandling {
            try encodeContainer.encode(ddsHandling.rawValue, forKey: .ddsHandling)
        }
        if let ddsXCoordinate = self.ddsXCoordinate {
            try encodeContainer.encode(ddsXCoordinate, forKey: .ddsXCoordinate)
        }
        if let ddsYCoordinate = self.ddsYCoordinate {
            try encodeContainer.encode(ddsYCoordinate, forKey: .ddsYCoordinate)
        }
        if let fallbackFont = self.fallbackFont {
            try encodeContainer.encode(fallbackFont.rawValue, forKey: .fallbackFont)
        }
        if let fontColor = self.fontColor {
            try encodeContainer.encode(fontColor.rawValue, forKey: .fontColor)
        }
        if let fontOpacity = self.fontOpacity {
            try encodeContainer.encode(fontOpacity, forKey: .fontOpacity)
        }
        if let fontResolution = self.fontResolution {
            try encodeContainer.encode(fontResolution, forKey: .fontResolution)
        }
        if let fontScript = self.fontScript {
            try encodeContainer.encode(fontScript.rawValue, forKey: .fontScript)
        }
        if let fontSize = self.fontSize {
            try encodeContainer.encode(fontSize, forKey: .fontSize)
        }
        if let height = self.height {
            try encodeContainer.encode(height, forKey: .height)
        }
        if let hexFontColor = self.hexFontColor {
            try encodeContainer.encode(hexFontColor, forKey: .hexFontColor)
        }
        if let outlineColor = self.outlineColor {
            try encodeContainer.encode(outlineColor.rawValue, forKey: .outlineColor)
        }
        if let outlineSize = self.outlineSize {
            try encodeContainer.encode(outlineSize, forKey: .outlineSize)
        }
        if let shadowColor = self.shadowColor {
            try encodeContainer.encode(shadowColor.rawValue, forKey: .shadowColor)
        }
        if let shadowOpacity = self.shadowOpacity {
            try encodeContainer.encode(shadowOpacity, forKey: .shadowOpacity)
        }
        if let shadowXOffset = self.shadowXOffset {
            try encodeContainer.encode(shadowXOffset, forKey: .shadowXOffset)
        }
        if let shadowYOffset = self.shadowYOffset {
            try encodeContainer.encode(shadowYOffset, forKey: .shadowYOffset)
        }
        if let stylePassthrough = self.stylePassthrough {
            try encodeContainer.encode(stylePassthrough.rawValue, forKey: .stylePassthrough)
        }
        if let subtitlingType = self.subtitlingType {
            try encodeContainer.encode(subtitlingType.rawValue, forKey: .subtitlingType)
        }
        if let teletextSpacing = self.teletextSpacing {
            try encodeContainer.encode(teletextSpacing.rawValue, forKey: .teletextSpacing)
        }
        if let width = self.width {
            try encodeContainer.encode(width, forKey: .width)
        }
        if let xPosition = self.xPosition {
            try encodeContainer.encode(xPosition, forKey: .xPosition)
        }
        if let yPosition = self.yPosition {
            try encodeContainer.encode(yPosition, forKey: .yPosition)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let alignmentDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.DvbSubtitleAlignment.self, forKey: .alignment)
        alignment = alignmentDecoded
        let applyFontColorDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.DvbSubtitleApplyFontColor.self, forKey: .applyFontColor)
        applyFontColor = applyFontColorDecoded
        let backgroundColorDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.DvbSubtitleBackgroundColor.self, forKey: .backgroundColor)
        backgroundColor = backgroundColorDecoded
        let backgroundOpacityDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .backgroundOpacity)
        backgroundOpacity = backgroundOpacityDecoded
        let ddsHandlingDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.DvbddsHandling.self, forKey: .ddsHandling)
        ddsHandling = ddsHandlingDecoded
        let ddsXCoordinateDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .ddsXCoordinate)
        ddsXCoordinate = ddsXCoordinateDecoded
        let ddsYCoordinateDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .ddsYCoordinate)
        ddsYCoordinate = ddsYCoordinateDecoded
        let fallbackFontDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.DvbSubSubtitleFallbackFont.self, forKey: .fallbackFont)
        fallbackFont = fallbackFontDecoded
        let fontColorDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.DvbSubtitleFontColor.self, forKey: .fontColor)
        fontColor = fontColorDecoded
        let fontOpacityDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .fontOpacity)
        fontOpacity = fontOpacityDecoded
        let fontResolutionDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .fontResolution)
        fontResolution = fontResolutionDecoded
        let fontScriptDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.FontScript.self, forKey: .fontScript)
        fontScript = fontScriptDecoded
        let fontSizeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .fontSize)
        fontSize = fontSizeDecoded
        let heightDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .height)
        height = heightDecoded
        let hexFontColorDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .hexFontColor)
        hexFontColor = hexFontColorDecoded
        let outlineColorDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.DvbSubtitleOutlineColor.self, forKey: .outlineColor)
        outlineColor = outlineColorDecoded
        let outlineSizeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .outlineSize)
        outlineSize = outlineSizeDecoded
        let shadowColorDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.DvbSubtitleShadowColor.self, forKey: .shadowColor)
        shadowColor = shadowColorDecoded
        let shadowOpacityDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .shadowOpacity)
        shadowOpacity = shadowOpacityDecoded
        let shadowXOffsetDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .shadowXOffset)
        shadowXOffset = shadowXOffsetDecoded
        let shadowYOffsetDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .shadowYOffset)
        shadowYOffset = shadowYOffsetDecoded
        let stylePassthroughDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.DvbSubtitleStylePassthrough.self, forKey: .stylePassthrough)
        stylePassthrough = stylePassthroughDecoded
        let subtitlingTypeDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.DvbSubtitlingType.self, forKey: .subtitlingType)
        subtitlingType = subtitlingTypeDecoded
        let teletextSpacingDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.DvbSubtitleTeletextSpacing.self, forKey: .teletextSpacing)
        teletextSpacing = teletextSpacingDecoded
        let widthDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .width)
        width = widthDecoded
        let xPositionDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .xPosition)
        xPosition = xPositionDecoded
        let yPositionDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .yPosition)
        yPosition = yPositionDecoded
    }
}
