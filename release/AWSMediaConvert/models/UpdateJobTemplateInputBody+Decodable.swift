// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct UpdateJobTemplateInputBody: Swift.Equatable {
    let accelerationSettings: MediaConvertClientTypes.AccelerationSettings?
    let category: Swift.String?
    let description: Swift.String?
    let hopDestinations: [MediaConvertClientTypes.HopDestination]?
    let priority: Swift.Int?
    let queue: Swift.String?
    let settings: MediaConvertClientTypes.JobTemplateSettings?
    let statusUpdateInterval: MediaConvertClientTypes.StatusUpdateInterval?
}

extension UpdateJobTemplateInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accelerationSettings = "accelerationSettings"
        case category = "category"
        case description = "description"
        case hopDestinations = "hopDestinations"
        case priority = "priority"
        case queue = "queue"
        case settings = "settings"
        case statusUpdateInterval = "statusUpdateInterval"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let accelerationSettingsDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.AccelerationSettings.self, forKey: .accelerationSettings)
        accelerationSettings = accelerationSettingsDecoded
        let categoryDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .category)
        category = categoryDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let hopDestinationsContainer = try containerValues.decodeIfPresent([MediaConvertClientTypes.HopDestination?].self, forKey: .hopDestinations)
        var hopDestinationsDecoded0:[MediaConvertClientTypes.HopDestination]? = nil
        if let hopDestinationsContainer = hopDestinationsContainer {
            hopDestinationsDecoded0 = [MediaConvertClientTypes.HopDestination]()
            for structure0 in hopDestinationsContainer {
                if let structure0 = structure0 {
                    hopDestinationsDecoded0?.append(structure0)
                }
            }
        }
        hopDestinations = hopDestinationsDecoded0
        let priorityDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .priority)
        priority = priorityDecoded
        let queueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .queue)
        queue = queueDecoded
        let settingsDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.JobTemplateSettings.self, forKey: .settings)
        settings = settingsDecoded
        let statusUpdateIntervalDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.StatusUpdateInterval.self, forKey: .statusUpdateInterval)
        statusUpdateInterval = statusUpdateIntervalDecoded
    }
}
