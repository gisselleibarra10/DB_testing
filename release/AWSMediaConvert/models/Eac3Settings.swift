// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension MediaConvertClientTypes {
    /// Required when you set (Codec) under (AudioDescriptions)>(CodecSettings) to the value EAC3.
    public struct Eac3Settings: Swift.Equatable {
        /// If set to ATTENUATE_3_DB, applies a 3 dB attenuation to the surround channels. Only used for 3/2 coding mode.
        public var attenuationControl: MediaConvertClientTypes.Eac3AttenuationControl?
        /// Specify the average bitrate in bits per second. Valid bitrates depend on the coding mode.
        public var bitrate: Swift.Int?
        /// Specify the bitstream mode for the E-AC-3 stream that the encoder emits. For more information about the EAC3 bitstream mode, see ATSC A/52-2012 (Annex E).
        public var bitstreamMode: MediaConvertClientTypes.Eac3BitstreamMode?
        /// Dolby Digital Plus coding mode. Determines number of channels.
        public var codingMode: MediaConvertClientTypes.Eac3CodingMode?
        /// Activates a DC highpass filter for all input channels.
        public var dcFilter: MediaConvertClientTypes.Eac3DcFilter?
        /// Sets the dialnorm for the output. If blank and input audio is Dolby Digital Plus, dialnorm will be passed through.
        public var dialnorm: Swift.Int?
        /// Choose the Dolby Digital dynamic range control (DRC) profile that MediaConvert uses when encoding the metadata in the Dolby Digital stream for the line operating mode. Related setting: When you use this setting, MediaConvert ignores any value you provide for Dynamic range compression profile (DynamicRangeCompressionProfile). For information about the Dolby Digital DRC operating modes and profiles, see the Dynamic Range Control chapter of the Dolby Metadata Guide at https://developer.dolby.com/globalassets/professional/documents/dolby-metadata-guide.pdf.
        public var dynamicRangeCompressionLine: MediaConvertClientTypes.Eac3DynamicRangeCompressionLine?
        /// Choose the Dolby Digital dynamic range control (DRC) profile that MediaConvert uses when encoding the metadata in the Dolby Digital stream for the RF operating mode. Related setting: When you use this setting, MediaConvert ignores any value you provide for Dynamic range compression profile (DynamicRangeCompressionProfile). For information about the Dolby Digital DRC operating modes and profiles, see the Dynamic Range Control chapter of the Dolby Metadata Guide at https://developer.dolby.com/globalassets/professional/documents/dolby-metadata-guide.pdf.
        public var dynamicRangeCompressionRf: MediaConvertClientTypes.Eac3DynamicRangeCompressionRf?
        /// When encoding 3/2 audio, controls whether the LFE channel is enabled
        public var lfeControl: MediaConvertClientTypes.Eac3LfeControl?
        /// Applies a 120Hz lowpass filter to the LFE channel prior to encoding. Only valid with 3_2_LFE coding mode.
        public var lfeFilter: MediaConvertClientTypes.Eac3LfeFilter?
        /// Specify a value for the following Dolby Digital Plus setting: Left only/Right only center mix (Lo/Ro center). MediaConvert uses this value for downmixing. How the service uses this value depends on the value that you choose for Stereo downmix (Eac3StereoDownmix). Valid values: 3.0, 1.5, 0.0, -1.5, -3.0, -4.5, -6.0, and -60. The value -60 mutes the channel. This setting applies only if you keep the default value of 3/2 - L, R, C, Ls, Rs (CODING_MODE_3_2) for the setting Coding mode (Eac3CodingMode). If you choose a different value for Coding mode, the service ignores Left only/Right only center (loRoCenterMixLevel).
        public var loRoCenterMixLevel: Swift.Double?
        /// Specify a value for the following Dolby Digital Plus setting: Left only/Right only (Lo/Ro surround). MediaConvert uses this value for downmixing. How the service uses this value depends on the value that you choose for Stereo downmix (Eac3StereoDownmix). Valid values: -1.5, -3.0, -4.5, -6.0, and -60. The value -60 mutes the channel. This setting applies only if you keep the default value of 3/2 - L, R, C, Ls, Rs (CODING_MODE_3_2) for the setting Coding mode (Eac3CodingMode). If you choose a different value for Coding mode, the service ignores Left only/Right only surround (loRoSurroundMixLevel).
        public var loRoSurroundMixLevel: Swift.Double?
        /// Specify a value for the following Dolby Digital Plus setting: Left total/Right total center mix (Lt/Rt center). MediaConvert uses this value for downmixing. How the service uses this value depends on the value that you choose for Stereo downmix (Eac3StereoDownmix). Valid values: 3.0, 1.5, 0.0, -1.5, -3.0, -4.5, -6.0, and -60. The value -60 mutes the channel. This setting applies only if you keep the default value of 3/2 - L, R, C, Ls, Rs (CODING_MODE_3_2) for the setting Coding mode (Eac3CodingMode). If you choose a different value for Coding mode, the service ignores Left total/Right total center (ltRtCenterMixLevel).
        public var ltRtCenterMixLevel: Swift.Double?
        /// Specify a value for the following Dolby Digital Plus setting: Left total/Right total surround mix (Lt/Rt surround). MediaConvert uses this value for downmixing. How the service uses this value depends on the value that you choose for Stereo downmix (Eac3StereoDownmix). Valid values: -1.5, -3.0, -4.5, -6.0, and -60. The value -60 mutes the channel. This setting applies only if you keep the default value of 3/2 - L, R, C, Ls, Rs (CODING_MODE_3_2) for the setting Coding mode (Eac3CodingMode). If you choose a different value for Coding mode, the service ignores Left total/Right total surround (ltRtSurroundMixLevel).
        public var ltRtSurroundMixLevel: Swift.Double?
        /// When set to FOLLOW_INPUT, encoder metadata will be sourced from the DD, DD+, or DolbyE decoder that supplied this audio data. If audio was not supplied from one of these streams, then the static metadata settings will be used.
        public var metadataControl: MediaConvertClientTypes.Eac3MetadataControl?
        /// When set to WHEN_POSSIBLE, input DD+ audio will be passed through if it is present on the input. this detection is dynamic over the life of the transcode. Inputs that alternate between DD+ and non-DD+ content will have a consistent DD+ output as the system alternates between passthrough and encoding.
        public var passthroughControl: MediaConvertClientTypes.Eac3PassthroughControl?
        /// Controls the amount of phase-shift applied to the surround channels. Only used for 3/2 coding mode.
        public var phaseControl: MediaConvertClientTypes.Eac3PhaseControl?
        /// This value is always 48000. It represents the sample rate in Hz.
        public var sampleRate: Swift.Int?
        /// Choose how the service does stereo downmixing. This setting only applies if you keep the default value of 3/2 - L, R, C, Ls, Rs (CODING_MODE_3_2) for the setting Coding mode (Eac3CodingMode). If you choose a different value for Coding mode, the service ignores Stereo downmix (Eac3StereoDownmix).
        public var stereoDownmix: MediaConvertClientTypes.Eac3StereoDownmix?
        /// When encoding 3/2 audio, sets whether an extra center back surround channel is matrix encoded into the left and right surround channels.
        public var surroundExMode: MediaConvertClientTypes.Eac3SurroundExMode?
        /// When encoding 2/0 audio, sets whether Dolby Surround is matrix encoded into the two channels.
        public var surroundMode: MediaConvertClientTypes.Eac3SurroundMode?

        public init (
            attenuationControl: MediaConvertClientTypes.Eac3AttenuationControl? = nil,
            bitrate: Swift.Int? = nil,
            bitstreamMode: MediaConvertClientTypes.Eac3BitstreamMode? = nil,
            codingMode: MediaConvertClientTypes.Eac3CodingMode? = nil,
            dcFilter: MediaConvertClientTypes.Eac3DcFilter? = nil,
            dialnorm: Swift.Int? = nil,
            dynamicRangeCompressionLine: MediaConvertClientTypes.Eac3DynamicRangeCompressionLine? = nil,
            dynamicRangeCompressionRf: MediaConvertClientTypes.Eac3DynamicRangeCompressionRf? = nil,
            lfeControl: MediaConvertClientTypes.Eac3LfeControl? = nil,
            lfeFilter: MediaConvertClientTypes.Eac3LfeFilter? = nil,
            loRoCenterMixLevel: Swift.Double? = nil,
            loRoSurroundMixLevel: Swift.Double? = nil,
            ltRtCenterMixLevel: Swift.Double? = nil,
            ltRtSurroundMixLevel: Swift.Double? = nil,
            metadataControl: MediaConvertClientTypes.Eac3MetadataControl? = nil,
            passthroughControl: MediaConvertClientTypes.Eac3PassthroughControl? = nil,
            phaseControl: MediaConvertClientTypes.Eac3PhaseControl? = nil,
            sampleRate: Swift.Int? = nil,
            stereoDownmix: MediaConvertClientTypes.Eac3StereoDownmix? = nil,
            surroundExMode: MediaConvertClientTypes.Eac3SurroundExMode? = nil,
            surroundMode: MediaConvertClientTypes.Eac3SurroundMode? = nil
        )
        {
            self.attenuationControl = attenuationControl
            self.bitrate = bitrate
            self.bitstreamMode = bitstreamMode
            self.codingMode = codingMode
            self.dcFilter = dcFilter
            self.dialnorm = dialnorm
            self.dynamicRangeCompressionLine = dynamicRangeCompressionLine
            self.dynamicRangeCompressionRf = dynamicRangeCompressionRf
            self.lfeControl = lfeControl
            self.lfeFilter = lfeFilter
            self.loRoCenterMixLevel = loRoCenterMixLevel
            self.loRoSurroundMixLevel = loRoSurroundMixLevel
            self.ltRtCenterMixLevel = ltRtCenterMixLevel
            self.ltRtSurroundMixLevel = ltRtSurroundMixLevel
            self.metadataControl = metadataControl
            self.passthroughControl = passthroughControl
            self.phaseControl = phaseControl
            self.sampleRate = sampleRate
            self.stereoDownmix = stereoDownmix
            self.surroundExMode = surroundExMode
            self.surroundMode = surroundMode
        }
    }

}
