// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension MediaConvertClientTypes {
    /// Tile and thumbnail settings applicable when imageBasedTrickPlay is ADVANCED
    public struct DashIsoImageBasedTrickPlaySettings: Swift.Equatable {
        /// The cadence MediaConvert follows for generating thumbnails. If set to FOLLOW_IFRAME, MediaConvert generates thumbnails for each IDR frame in the output (matching the GOP cadence). If set to FOLLOW_CUSTOM, MediaConvert generates thumbnails according to the interval you specify in thumbnailInterval.
        public var intervalCadence: MediaConvertClientTypes.DashIsoIntervalCadence?
        /// Height of each thumbnail within each tile image, in pixels. Leave blank to maintain aspect ratio with thumbnail width. If following the aspect ratio would lead to a total tile height greater than 4096, then the job will be rejected. Must be divisible by 2.
        public var thumbnailHeight: Swift.Int?
        /// Enter the interval, in seconds, that MediaConvert uses to generate thumbnails. If the interval you enter doesn't align with the output frame rate, MediaConvert automatically rounds the interval to align with the output frame rate. For example, if the output frame rate is 29.97 frames per second and you enter 5, MediaConvert uses a 150 frame interval to generate thumbnails.
        public var thumbnailInterval: Swift.Double?
        /// Width of each thumbnail within each tile image, in pixels. Default is 312. Must be divisible by 8.
        public var thumbnailWidth: Swift.Int?
        /// Number of thumbnails in each column of a tile image. Set a value between 2 and 2048. Must be divisible by 2.
        public var tileHeight: Swift.Int?
        /// Number of thumbnails in each row of a tile image. Set a value between 1 and 512.
        public var tileWidth: Swift.Int?

        public init (
            intervalCadence: MediaConvertClientTypes.DashIsoIntervalCadence? = nil,
            thumbnailHeight: Swift.Int? = nil,
            thumbnailInterval: Swift.Double? = nil,
            thumbnailWidth: Swift.Int? = nil,
            tileHeight: Swift.Int? = nil,
            tileWidth: Swift.Int? = nil
        )
        {
            self.intervalCadence = intervalCadence
            self.thumbnailHeight = thumbnailHeight
            self.thumbnailInterval = thumbnailInterval
            self.thumbnailWidth = thumbnailWidth
            self.tileHeight = tileHeight
            self.tileWidth = tileWidth
        }
    }

}
