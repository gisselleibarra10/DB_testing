// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension MediaConvertClientTypes {
    /// Use these settings to specify static color calibration metadata, as defined by SMPTE ST 2086. These values don't affect the pixel values that are encoded in the video stream. They are intended to help the downstream video player display content in a way that reflects the intentions of the the content creator.
    public struct Hdr10Metadata: Swift.Equatable {
        /// HDR Master Display Information must be provided by a color grader, using color grading tools. Range is 0 to 50,000, each increment represents 0.00002 in CIE1931 color coordinate. Note that this setting is not for color correction.
        public var bluePrimaryX: Swift.Int?
        /// HDR Master Display Information must be provided by a color grader, using color grading tools. Range is 0 to 50,000, each increment represents 0.00002 in CIE1931 color coordinate. Note that this setting is not for color correction.
        public var bluePrimaryY: Swift.Int?
        /// HDR Master Display Information must be provided by a color grader, using color grading tools. Range is 0 to 50,000, each increment represents 0.00002 in CIE1931 color coordinate. Note that this setting is not for color correction.
        public var greenPrimaryX: Swift.Int?
        /// HDR Master Display Information must be provided by a color grader, using color grading tools. Range is 0 to 50,000, each increment represents 0.00002 in CIE1931 color coordinate. Note that this setting is not for color correction.
        public var greenPrimaryY: Swift.Int?
        /// Maximum light level among all samples in the coded video sequence, in units of candelas per square meter. This setting doesn't have a default value; you must specify a value that is suitable for the content.
        public var maxContentLightLevel: Swift.Int?
        /// Maximum average light level of any frame in the coded video sequence, in units of candelas per square meter. This setting doesn't have a default value; you must specify a value that is suitable for the content.
        public var maxFrameAverageLightLevel: Swift.Int?
        /// Nominal maximum mastering display luminance in units of of 0.0001 candelas per square meter.
        public var maxLuminance: Swift.Int?
        /// Nominal minimum mastering display luminance in units of of 0.0001 candelas per square meter
        public var minLuminance: Swift.Int?
        /// HDR Master Display Information must be provided by a color grader, using color grading tools. Range is 0 to 50,000, each increment represents 0.00002 in CIE1931 color coordinate. Note that this setting is not for color correction.
        public var redPrimaryX: Swift.Int?
        /// HDR Master Display Information must be provided by a color grader, using color grading tools. Range is 0 to 50,000, each increment represents 0.00002 in CIE1931 color coordinate. Note that this setting is not for color correction.
        public var redPrimaryY: Swift.Int?
        /// HDR Master Display Information must be provided by a color grader, using color grading tools. Range is 0 to 50,000, each increment represents 0.00002 in CIE1931 color coordinate. Note that this setting is not for color correction.
        public var whitePointX: Swift.Int?
        /// HDR Master Display Information must be provided by a color grader, using color grading tools. Range is 0 to 50,000, each increment represents 0.00002 in CIE1931 color coordinate. Note that this setting is not for color correction.
        public var whitePointY: Swift.Int?

        public init (
            bluePrimaryX: Swift.Int? = nil,
            bluePrimaryY: Swift.Int? = nil,
            greenPrimaryX: Swift.Int? = nil,
            greenPrimaryY: Swift.Int? = nil,
            maxContentLightLevel: Swift.Int? = nil,
            maxFrameAverageLightLevel: Swift.Int? = nil,
            maxLuminance: Swift.Int? = nil,
            minLuminance: Swift.Int? = nil,
            redPrimaryX: Swift.Int? = nil,
            redPrimaryY: Swift.Int? = nil,
            whitePointX: Swift.Int? = nil,
            whitePointY: Swift.Int? = nil
        )
        {
            self.bluePrimaryX = bluePrimaryX
            self.bluePrimaryY = bluePrimaryY
            self.greenPrimaryX = greenPrimaryX
            self.greenPrimaryY = greenPrimaryY
            self.maxContentLightLevel = maxContentLightLevel
            self.maxFrameAverageLightLevel = maxFrameAverageLightLevel
            self.maxLuminance = maxLuminance
            self.minLuminance = minLuminance
            self.redPrimaryX = redPrimaryX
            self.redPrimaryY = redPrimaryY
            self.whitePointX = whitePointX
            self.whitePointY = whitePointY
        }
    }

}
