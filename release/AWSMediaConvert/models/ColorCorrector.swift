// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension MediaConvertClientTypes {
    /// Settings for color correction.
    public struct ColorCorrector: Swift.Equatable {
        /// Brightness level.
        public var brightness: Swift.Int?
        /// Specify the color space you want for this output. The service supports conversion between HDR formats, between SDR formats, from SDR to HDR, and from HDR to SDR. SDR to HDR conversion doesn't upgrade the dynamic range. The converted video has an HDR format, but visually appears the same as an unconverted output. HDR to SDR conversion uses Elemental tone mapping technology to approximate the outcome of manually regrading from HDR to SDR.
        public var colorSpaceConversion: MediaConvertClientTypes.ColorSpaceConversion?
        /// Contrast level.
        public var contrast: Swift.Int?
        /// Use these settings when you convert to the HDR 10 color space. Specify the SMPTE ST 2086 Mastering Display Color Volume static metadata that you want signaled in the output. These values don't affect the pixel values that are encoded in the video stream. They are intended to help the downstream video player display content in a way that reflects the intentions of the the content creator. When you set Color space conversion (ColorSpaceConversion) to HDR 10 (FORCE_HDR10), these settings are required. You must set values for Max frame average light level (maxFrameAverageLightLevel) and Max content light level (maxContentLightLevel); these settings don't have a default value. The default values for the other HDR 10 metadata settings are defined by the P3D65 color space. For more information about MediaConvert HDR jobs, see https://docs.aws.amazon.com/console/mediaconvert/hdr.
        public var hdr10Metadata: MediaConvertClientTypes.Hdr10Metadata?
        /// Hue in degrees.
        public var hue: Swift.Int?
        /// Specify the video color sample range for this output. To create a full range output, you must start with a full range YUV input and keep the default value, None (NONE). To create a limited range output from a full range input, choose Limited range (LIMITED_RANGE_SQUEEZE). With RGB inputs, your output is always limited range, regardless of your choice here. When you create a limited range output from a full range input, MediaConvert limits the active pixel values in a way that depends on the output's bit depth: 8-bit outputs contain only values from 16 through 235 and 10-bit outputs contain only values from 64 through 940. With this conversion, MediaConvert also changes the output metadata to note the limited range.
        public var sampleRangeConversion: MediaConvertClientTypes.SampleRangeConversion?
        /// Saturation level.
        public var saturation: Swift.Int?

        public init (
            brightness: Swift.Int? = nil,
            colorSpaceConversion: MediaConvertClientTypes.ColorSpaceConversion? = nil,
            contrast: Swift.Int? = nil,
            hdr10Metadata: MediaConvertClientTypes.Hdr10Metadata? = nil,
            hue: Swift.Int? = nil,
            sampleRangeConversion: MediaConvertClientTypes.SampleRangeConversion? = nil,
            saturation: Swift.Int? = nil
        )
        {
            self.brightness = brightness
            self.colorSpaceConversion = colorSpaceConversion
            self.contrast = contrast
            self.hdr10Metadata = hdr10Metadata
            self.hue = hue
            self.sampleRangeConversion = sampleRangeConversion
            self.saturation = saturation
        }
    }

}
