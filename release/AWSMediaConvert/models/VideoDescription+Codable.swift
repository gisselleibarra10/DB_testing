// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension MediaConvertClientTypes.VideoDescription: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case afdSignaling = "afdSignaling"
        case antiAlias = "antiAlias"
        case codecSettings = "codecSettings"
        case colorMetadata = "colorMetadata"
        case crop = "crop"
        case dropFrameTimecode = "dropFrameTimecode"
        case fixedAfd = "fixedAfd"
        case height = "height"
        case position = "position"
        case respondToAfd = "respondToAfd"
        case scalingBehavior = "scalingBehavior"
        case sharpness = "sharpness"
        case timecodeInsertion = "timecodeInsertion"
        case videoPreprocessors = "videoPreprocessors"
        case width = "width"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let afdSignaling = self.afdSignaling {
            try encodeContainer.encode(afdSignaling.rawValue, forKey: .afdSignaling)
        }
        if let antiAlias = self.antiAlias {
            try encodeContainer.encode(antiAlias.rawValue, forKey: .antiAlias)
        }
        if let codecSettings = self.codecSettings {
            try encodeContainer.encode(codecSettings, forKey: .codecSettings)
        }
        if let colorMetadata = self.colorMetadata {
            try encodeContainer.encode(colorMetadata.rawValue, forKey: .colorMetadata)
        }
        if let crop = self.crop {
            try encodeContainer.encode(crop, forKey: .crop)
        }
        if let dropFrameTimecode = self.dropFrameTimecode {
            try encodeContainer.encode(dropFrameTimecode.rawValue, forKey: .dropFrameTimecode)
        }
        if let fixedAfd = self.fixedAfd {
            try encodeContainer.encode(fixedAfd, forKey: .fixedAfd)
        }
        if let height = self.height {
            try encodeContainer.encode(height, forKey: .height)
        }
        if let position = self.position {
            try encodeContainer.encode(position, forKey: .position)
        }
        if let respondToAfd = self.respondToAfd {
            try encodeContainer.encode(respondToAfd.rawValue, forKey: .respondToAfd)
        }
        if let scalingBehavior = self.scalingBehavior {
            try encodeContainer.encode(scalingBehavior.rawValue, forKey: .scalingBehavior)
        }
        if let sharpness = self.sharpness {
            try encodeContainer.encode(sharpness, forKey: .sharpness)
        }
        if let timecodeInsertion = self.timecodeInsertion {
            try encodeContainer.encode(timecodeInsertion.rawValue, forKey: .timecodeInsertion)
        }
        if let videoPreprocessors = self.videoPreprocessors {
            try encodeContainer.encode(videoPreprocessors, forKey: .videoPreprocessors)
        }
        if let width = self.width {
            try encodeContainer.encode(width, forKey: .width)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let afdSignalingDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.AfdSignaling.self, forKey: .afdSignaling)
        afdSignaling = afdSignalingDecoded
        let antiAliasDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.AntiAlias.self, forKey: .antiAlias)
        antiAlias = antiAliasDecoded
        let codecSettingsDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.VideoCodecSettings.self, forKey: .codecSettings)
        codecSettings = codecSettingsDecoded
        let colorMetadataDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.ColorMetadata.self, forKey: .colorMetadata)
        colorMetadata = colorMetadataDecoded
        let cropDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.Rectangle.self, forKey: .crop)
        crop = cropDecoded
        let dropFrameTimecodeDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.DropFrameTimecode.self, forKey: .dropFrameTimecode)
        dropFrameTimecode = dropFrameTimecodeDecoded
        let fixedAfdDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .fixedAfd)
        fixedAfd = fixedAfdDecoded
        let heightDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .height)
        height = heightDecoded
        let positionDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.Rectangle.self, forKey: .position)
        position = positionDecoded
        let respondToAfdDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.RespondToAfd.self, forKey: .respondToAfd)
        respondToAfd = respondToAfdDecoded
        let scalingBehaviorDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.ScalingBehavior.self, forKey: .scalingBehavior)
        scalingBehavior = scalingBehaviorDecoded
        let sharpnessDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .sharpness)
        sharpness = sharpnessDecoded
        let timecodeInsertionDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.VideoTimecodeInsertion.self, forKey: .timecodeInsertion)
        timecodeInsertion = timecodeInsertionDecoded
        let videoPreprocessorsDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.VideoPreprocessor.self, forKey: .videoPreprocessors)
        videoPreprocessors = videoPreprocessorsDecoded
        let widthDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .width)
        width = widthDecoded
    }
}
