// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension MediaConvertClientTypes.AudioNormalizationSettings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case algorithm = "algorithm"
        case algorithmControl = "algorithmControl"
        case correctionGateLevel = "correctionGateLevel"
        case loudnessLogging = "loudnessLogging"
        case peakCalculation = "peakCalculation"
        case targetLkfs = "targetLkfs"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let algorithm = self.algorithm {
            try encodeContainer.encode(algorithm.rawValue, forKey: .algorithm)
        }
        if let algorithmControl = self.algorithmControl {
            try encodeContainer.encode(algorithmControl.rawValue, forKey: .algorithmControl)
        }
        if let correctionGateLevel = self.correctionGateLevel {
            try encodeContainer.encode(correctionGateLevel, forKey: .correctionGateLevel)
        }
        if let loudnessLogging = self.loudnessLogging {
            try encodeContainer.encode(loudnessLogging.rawValue, forKey: .loudnessLogging)
        }
        if let peakCalculation = self.peakCalculation {
            try encodeContainer.encode(peakCalculation.rawValue, forKey: .peakCalculation)
        }
        if let targetLkfs = self.targetLkfs {
            try encodeContainer.encode(targetLkfs, forKey: .targetLkfs)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let algorithmDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.AudioNormalizationAlgorithm.self, forKey: .algorithm)
        algorithm = algorithmDecoded
        let algorithmControlDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.AudioNormalizationAlgorithmControl.self, forKey: .algorithmControl)
        algorithmControl = algorithmControlDecoded
        let correctionGateLevelDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .correctionGateLevel)
        correctionGateLevel = correctionGateLevelDecoded
        let loudnessLoggingDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.AudioNormalizationLoudnessLogging.self, forKey: .loudnessLogging)
        loudnessLogging = loudnessLoggingDecoded
        let peakCalculationDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.AudioNormalizationPeakCalculation.self, forKey: .peakCalculation)
        peakCalculation = peakCalculationDecoded
        let targetLkfsDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .targetLkfs)
        targetLkfs = targetLkfsDecoded
    }
}
