// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension MediaConvertClientTypes {
    /// Settings for CMAF encryption
    public struct CmafEncryptionSettings: Swift.Equatable {
        /// This is a 128-bit, 16-byte hex value represented by a 32-character text string. If this parameter is not set then the Initialization Vector will follow the segment number by default.
        public var constantInitializationVector: Swift.String?
        /// Specify the encryption scheme that you want the service to use when encrypting your CMAF segments. Choose AES-CBC subsample (SAMPLE-AES) or AES_CTR (AES-CTR).
        public var encryptionMethod: MediaConvertClientTypes.CmafEncryptionType?
        /// When you use DRM with CMAF outputs, choose whether the service writes the 128-bit encryption initialization vector in the HLS and DASH manifests.
        public var initializationVectorInManifest: MediaConvertClientTypes.CmafInitializationVectorInManifest?
        /// If your output group type is CMAF, use these settings when doing DRM encryption with a SPEKE-compliant key provider. If your output group type is HLS, DASH, or Microsoft Smooth, use the SpekeKeyProvider settings instead.
        public var spekeKeyProvider: MediaConvertClientTypes.SpekeKeyProviderCmaf?
        /// Use these settings to set up encryption with a static key provider.
        public var staticKeyProvider: MediaConvertClientTypes.StaticKeyProvider?
        /// Specify whether your DRM encryption key is static or from a key provider that follows the SPEKE standard. For more information about SPEKE, see https://docs.aws.amazon.com/speke/latest/documentation/what-is-speke.html.
        public var type: MediaConvertClientTypes.CmafKeyProviderType?

        public init (
            constantInitializationVector: Swift.String? = nil,
            encryptionMethod: MediaConvertClientTypes.CmafEncryptionType? = nil,
            initializationVectorInManifest: MediaConvertClientTypes.CmafInitializationVectorInManifest? = nil,
            spekeKeyProvider: MediaConvertClientTypes.SpekeKeyProviderCmaf? = nil,
            staticKeyProvider: MediaConvertClientTypes.StaticKeyProvider? = nil,
            type: MediaConvertClientTypes.CmafKeyProviderType? = nil
        )
        {
            self.constantInitializationVector = constantInitializationVector
            self.encryptionMethod = encryptionMethod
            self.initializationVectorInManifest = initializationVectorInManifest
            self.spekeKeyProvider = spekeKeyProvider
            self.staticKeyProvider = staticKeyProvider
            self.type = type
        }
    }

}
