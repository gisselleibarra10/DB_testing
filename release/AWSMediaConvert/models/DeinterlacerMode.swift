// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension MediaConvertClientTypes {
    /// Use Deinterlacer (DeinterlaceMode) to choose how the service will do deinterlacing. Default is Deinterlace. - Deinterlace converts interlaced to progressive. - Inverse telecine converts Hard Telecine 29.97i to progressive 23.976p. - Adaptive auto-detects and converts to progressive.
    public enum DeinterlacerMode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case adaptive
        case deinterlace
        case inverseTelecine
        case sdkUnknown(Swift.String)

        public static var allCases: [DeinterlacerMode] {
            return [
                .adaptive,
                .deinterlace,
                .inverseTelecine,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .adaptive: return "ADAPTIVE"
            case .deinterlace: return "DEINTERLACE"
            case .inverseTelecine: return "INVERSE_TELECINE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DeinterlacerMode(rawValue: rawValue) ?? DeinterlacerMode.sdkUnknown(rawValue)
        }
    }
}
