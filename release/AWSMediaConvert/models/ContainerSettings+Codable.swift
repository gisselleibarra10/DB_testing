// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension MediaConvertClientTypes.ContainerSettings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cmfcSettings = "cmfcSettings"
        case container = "container"
        case f4vSettings = "f4vSettings"
        case m2tsSettings = "m2tsSettings"
        case m3u8Settings = "m3u8Settings"
        case movSettings = "movSettings"
        case mp4Settings = "mp4Settings"
        case mpdSettings = "mpdSettings"
        case mxfSettings = "mxfSettings"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cmfcSettings = self.cmfcSettings {
            try encodeContainer.encode(cmfcSettings, forKey: .cmfcSettings)
        }
        if let container = self.container {
            try encodeContainer.encode(container.rawValue, forKey: .container)
        }
        if let f4vSettings = self.f4vSettings {
            try encodeContainer.encode(f4vSettings, forKey: .f4vSettings)
        }
        if let m2tsSettings = self.m2tsSettings {
            try encodeContainer.encode(m2tsSettings, forKey: .m2tsSettings)
        }
        if let m3u8Settings = self.m3u8Settings {
            try encodeContainer.encode(m3u8Settings, forKey: .m3u8Settings)
        }
        if let movSettings = self.movSettings {
            try encodeContainer.encode(movSettings, forKey: .movSettings)
        }
        if let mp4Settings = self.mp4Settings {
            try encodeContainer.encode(mp4Settings, forKey: .mp4Settings)
        }
        if let mpdSettings = self.mpdSettings {
            try encodeContainer.encode(mpdSettings, forKey: .mpdSettings)
        }
        if let mxfSettings = self.mxfSettings {
            try encodeContainer.encode(mxfSettings, forKey: .mxfSettings)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let cmfcSettingsDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.CmfcSettings.self, forKey: .cmfcSettings)
        cmfcSettings = cmfcSettingsDecoded
        let containerDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.ContainerType.self, forKey: .container)
        container = containerDecoded
        let f4vSettingsDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.F4vSettings.self, forKey: .f4vSettings)
        f4vSettings = f4vSettingsDecoded
        let m2tsSettingsDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.M2tsSettings.self, forKey: .m2tsSettings)
        m2tsSettings = m2tsSettingsDecoded
        let m3u8SettingsDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.M3u8Settings.self, forKey: .m3u8Settings)
        m3u8Settings = m3u8SettingsDecoded
        let movSettingsDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.MovSettings.self, forKey: .movSettings)
        movSettings = movSettingsDecoded
        let mp4SettingsDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.Mp4Settings.self, forKey: .mp4Settings)
        mp4Settings = mp4SettingsDecoded
        let mpdSettingsDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.MpdSettings.self, forKey: .mpdSettings)
        mpdSettings = mpdSettingsDecoded
        let mxfSettingsDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.MxfSettings.self, forKey: .mxfSettings)
        mxfSettings = mxfSettingsDecoded
    }
}
