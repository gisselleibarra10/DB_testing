// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension MediaConvertClientTypes {
    /// Specify the font that you want the service to use for your burn in captions when your input captions specify a font that MediaConvert doesn't support. When you set Fallback font (FallbackFont) to best match (BEST_MATCH), or leave blank, MediaConvert uses a supported font that most closely matches the font that your input captions specify. When there are multiple unsupported fonts in your input captions, MediaConvert matches each font with the supported font that matches best. When you explicitly choose a replacement font, MediaConvert uses that font to replace all unsupported fonts from your input.
    public enum BurninSubtitleFallbackFont: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case bestMatch
        case monospacedSansserif
        case monospacedSerif
        case proportionalSansserif
        case proportionalSerif
        case sdkUnknown(Swift.String)

        public static var allCases: [BurninSubtitleFallbackFont] {
            return [
                .bestMatch,
                .monospacedSansserif,
                .monospacedSerif,
                .proportionalSansserif,
                .proportionalSerif,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .bestMatch: return "BEST_MATCH"
            case .monospacedSansserif: return "MONOSPACED_SANSSERIF"
            case .monospacedSerif: return "MONOSPACED_SERIF"
            case .proportionalSansserif: return "PROPORTIONAL_SANSSERIF"
            case .proportionalSerif: return "PROPORTIONAL_SERIF"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = BurninSubtitleFallbackFont(rawValue: rawValue) ?? BurninSubtitleFallbackFont.sdkUnknown(rawValue)
        }
    }
}
