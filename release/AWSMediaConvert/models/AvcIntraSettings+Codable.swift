// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension MediaConvertClientTypes.AvcIntraSettings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case avcIntraClass = "avcIntraClass"
        case avcIntraUhdSettings = "avcIntraUhdSettings"
        case framerateControl = "framerateControl"
        case framerateConversionAlgorithm = "framerateConversionAlgorithm"
        case framerateDenominator = "framerateDenominator"
        case framerateNumerator = "framerateNumerator"
        case interlaceMode = "interlaceMode"
        case scanTypeConversionMode = "scanTypeConversionMode"
        case slowPal = "slowPal"
        case telecine = "telecine"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let avcIntraClass = self.avcIntraClass {
            try encodeContainer.encode(avcIntraClass.rawValue, forKey: .avcIntraClass)
        }
        if let avcIntraUhdSettings = self.avcIntraUhdSettings {
            try encodeContainer.encode(avcIntraUhdSettings, forKey: .avcIntraUhdSettings)
        }
        if let framerateControl = self.framerateControl {
            try encodeContainer.encode(framerateControl.rawValue, forKey: .framerateControl)
        }
        if let framerateConversionAlgorithm = self.framerateConversionAlgorithm {
            try encodeContainer.encode(framerateConversionAlgorithm.rawValue, forKey: .framerateConversionAlgorithm)
        }
        if let framerateDenominator = self.framerateDenominator {
            try encodeContainer.encode(framerateDenominator, forKey: .framerateDenominator)
        }
        if let framerateNumerator = self.framerateNumerator {
            try encodeContainer.encode(framerateNumerator, forKey: .framerateNumerator)
        }
        if let interlaceMode = self.interlaceMode {
            try encodeContainer.encode(interlaceMode.rawValue, forKey: .interlaceMode)
        }
        if let scanTypeConversionMode = self.scanTypeConversionMode {
            try encodeContainer.encode(scanTypeConversionMode.rawValue, forKey: .scanTypeConversionMode)
        }
        if let slowPal = self.slowPal {
            try encodeContainer.encode(slowPal.rawValue, forKey: .slowPal)
        }
        if let telecine = self.telecine {
            try encodeContainer.encode(telecine.rawValue, forKey: .telecine)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let avcIntraClassDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.AvcIntraClass.self, forKey: .avcIntraClass)
        avcIntraClass = avcIntraClassDecoded
        let avcIntraUhdSettingsDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.AvcIntraUhdSettings.self, forKey: .avcIntraUhdSettings)
        avcIntraUhdSettings = avcIntraUhdSettingsDecoded
        let framerateControlDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.AvcIntraFramerateControl.self, forKey: .framerateControl)
        framerateControl = framerateControlDecoded
        let framerateConversionAlgorithmDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.AvcIntraFramerateConversionAlgorithm.self, forKey: .framerateConversionAlgorithm)
        framerateConversionAlgorithm = framerateConversionAlgorithmDecoded
        let framerateDenominatorDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .framerateDenominator)
        framerateDenominator = framerateDenominatorDecoded
        let framerateNumeratorDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .framerateNumerator)
        framerateNumerator = framerateNumeratorDecoded
        let interlaceModeDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.AvcIntraInterlaceMode.self, forKey: .interlaceMode)
        interlaceMode = interlaceModeDecoded
        let scanTypeConversionModeDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.AvcIntraScanTypeConversionMode.self, forKey: .scanTypeConversionMode)
        scanTypeConversionMode = scanTypeConversionModeDecoded
        let slowPalDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.AvcIntraSlowPal.self, forKey: .slowPal)
        slowPal = slowPalDecoded
        let telecineDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.AvcIntraTelecine.self, forKey: .telecine)
        telecine = telecineDecoded
    }
}
