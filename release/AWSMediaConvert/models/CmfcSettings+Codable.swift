// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension MediaConvertClientTypes.CmfcSettings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case audioDuration = "audioDuration"
        case audioGroupId = "audioGroupId"
        case audioRenditionSets = "audioRenditionSets"
        case audioTrackType = "audioTrackType"
        case descriptiveVideoServiceFlag = "descriptiveVideoServiceFlag"
        case iFrameOnlyManifest = "iFrameOnlyManifest"
        case klvMetadata = "klvMetadata"
        case scte35Esam = "scte35Esam"
        case scte35Source = "scte35Source"
        case timedMetadata = "timedMetadata"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let audioDuration = self.audioDuration {
            try encodeContainer.encode(audioDuration.rawValue, forKey: .audioDuration)
        }
        if let audioGroupId = self.audioGroupId {
            try encodeContainer.encode(audioGroupId, forKey: .audioGroupId)
        }
        if let audioRenditionSets = self.audioRenditionSets {
            try encodeContainer.encode(audioRenditionSets, forKey: .audioRenditionSets)
        }
        if let audioTrackType = self.audioTrackType {
            try encodeContainer.encode(audioTrackType.rawValue, forKey: .audioTrackType)
        }
        if let descriptiveVideoServiceFlag = self.descriptiveVideoServiceFlag {
            try encodeContainer.encode(descriptiveVideoServiceFlag.rawValue, forKey: .descriptiveVideoServiceFlag)
        }
        if let iFrameOnlyManifest = self.iFrameOnlyManifest {
            try encodeContainer.encode(iFrameOnlyManifest.rawValue, forKey: .iFrameOnlyManifest)
        }
        if let klvMetadata = self.klvMetadata {
            try encodeContainer.encode(klvMetadata.rawValue, forKey: .klvMetadata)
        }
        if let scte35Esam = self.scte35Esam {
            try encodeContainer.encode(scte35Esam.rawValue, forKey: .scte35Esam)
        }
        if let scte35Source = self.scte35Source {
            try encodeContainer.encode(scte35Source.rawValue, forKey: .scte35Source)
        }
        if let timedMetadata = self.timedMetadata {
            try encodeContainer.encode(timedMetadata.rawValue, forKey: .timedMetadata)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let audioDurationDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.CmfcAudioDuration.self, forKey: .audioDuration)
        audioDuration = audioDurationDecoded
        let audioGroupIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .audioGroupId)
        audioGroupId = audioGroupIdDecoded
        let audioRenditionSetsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .audioRenditionSets)
        audioRenditionSets = audioRenditionSetsDecoded
        let audioTrackTypeDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.CmfcAudioTrackType.self, forKey: .audioTrackType)
        audioTrackType = audioTrackTypeDecoded
        let descriptiveVideoServiceFlagDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.CmfcDescriptiveVideoServiceFlag.self, forKey: .descriptiveVideoServiceFlag)
        descriptiveVideoServiceFlag = descriptiveVideoServiceFlagDecoded
        let iFrameOnlyManifestDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.CmfcIFrameOnlyManifest.self, forKey: .iFrameOnlyManifest)
        iFrameOnlyManifest = iFrameOnlyManifestDecoded
        let klvMetadataDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.CmfcKlvMetadata.self, forKey: .klvMetadata)
        klvMetadata = klvMetadataDecoded
        let scte35EsamDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.CmfcScte35Esam.self, forKey: .scte35Esam)
        scte35Esam = scte35EsamDecoded
        let scte35SourceDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.CmfcScte35Source.self, forKey: .scte35Source)
        scte35Source = scte35SourceDecoded
        let timedMetadataDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.CmfcTimedMetadata.self, forKey: .timedMetadata)
        timedMetadata = timedMetadataDecoded
    }
}
