// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension MediaConvertClientTypes.CmafEncryptionSettings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case constantInitializationVector = "constantInitializationVector"
        case encryptionMethod = "encryptionMethod"
        case initializationVectorInManifest = "initializationVectorInManifest"
        case spekeKeyProvider = "spekeKeyProvider"
        case staticKeyProvider = "staticKeyProvider"
        case type = "type"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let constantInitializationVector = self.constantInitializationVector {
            try encodeContainer.encode(constantInitializationVector, forKey: .constantInitializationVector)
        }
        if let encryptionMethod = self.encryptionMethod {
            try encodeContainer.encode(encryptionMethod.rawValue, forKey: .encryptionMethod)
        }
        if let initializationVectorInManifest = self.initializationVectorInManifest {
            try encodeContainer.encode(initializationVectorInManifest.rawValue, forKey: .initializationVectorInManifest)
        }
        if let spekeKeyProvider = self.spekeKeyProvider {
            try encodeContainer.encode(spekeKeyProvider, forKey: .spekeKeyProvider)
        }
        if let staticKeyProvider = self.staticKeyProvider {
            try encodeContainer.encode(staticKeyProvider, forKey: .staticKeyProvider)
        }
        if let type = self.type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let constantInitializationVectorDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .constantInitializationVector)
        constantInitializationVector = constantInitializationVectorDecoded
        let encryptionMethodDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.CmafEncryptionType.self, forKey: .encryptionMethod)
        encryptionMethod = encryptionMethodDecoded
        let initializationVectorInManifestDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.CmafInitializationVectorInManifest.self, forKey: .initializationVectorInManifest)
        initializationVectorInManifest = initializationVectorInManifestDecoded
        let spekeKeyProviderDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.SpekeKeyProviderCmaf.self, forKey: .spekeKeyProvider)
        spekeKeyProvider = spekeKeyProviderDecoded
        let staticKeyProviderDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.StaticKeyProvider.self, forKey: .staticKeyProvider)
        staticKeyProvider = staticKeyProviderDecoded
        let typeDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.CmafKeyProviderType.self, forKey: .type)
        type = typeDecoded
    }
}
