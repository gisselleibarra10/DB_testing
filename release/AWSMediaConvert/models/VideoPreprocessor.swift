// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension MediaConvertClientTypes {
    /// Find additional transcoding features under Preprocessors (VideoPreprocessors). Enable the features at each output individually. These features are disabled by default.
    public struct VideoPreprocessor: Swift.Equatable {
        /// Use these settings to convert the color space or to modify properties such as hue and contrast for this output. For more information, see https://docs.aws.amazon.com/mediaconvert/latest/ug/converting-the-color-space.html.
        public var colorCorrector: MediaConvertClientTypes.ColorCorrector?
        /// Use the deinterlacer to produce smoother motion and a clearer picture. For more information, see https://docs.aws.amazon.com/mediaconvert/latest/ug/working-with-scan-type.html.
        public var deinterlacer: MediaConvertClientTypes.Deinterlacer?
        /// Enable Dolby Vision feature to produce Dolby Vision compatible video output.
        public var dolbyVision: MediaConvertClientTypes.DolbyVision?
        /// Enable HDR10+ analyis and metadata injection. Compatible with HEVC only.
        public var hdr10Plus: MediaConvertClientTypes.Hdr10Plus?
        /// Enable the Image inserter (ImageInserter) feature to include a graphic overlay on your video. Enable or disable this feature for each output individually. This setting is disabled by default.
        public var imageInserter: MediaConvertClientTypes.ImageInserter?
        /// Enable the Noise reducer (NoiseReducer) feature to remove noise from your video output if necessary. Enable or disable this feature for each output individually. This setting is disabled by default.
        public var noiseReducer: MediaConvertClientTypes.NoiseReducer?
        /// If you work with a third party video watermarking partner, use the group of settings that correspond with your watermarking partner to include watermarks in your output.
        public var partnerWatermarking: MediaConvertClientTypes.PartnerWatermarking?
        /// Settings for burning the output timecode and specified prefix into the output.
        public var timecodeBurnin: MediaConvertClientTypes.TimecodeBurnin?

        public init (
            colorCorrector: MediaConvertClientTypes.ColorCorrector? = nil,
            deinterlacer: MediaConvertClientTypes.Deinterlacer? = nil,
            dolbyVision: MediaConvertClientTypes.DolbyVision? = nil,
            hdr10Plus: MediaConvertClientTypes.Hdr10Plus? = nil,
            imageInserter: MediaConvertClientTypes.ImageInserter? = nil,
            noiseReducer: MediaConvertClientTypes.NoiseReducer? = nil,
            partnerWatermarking: MediaConvertClientTypes.PartnerWatermarking? = nil,
            timecodeBurnin: MediaConvertClientTypes.TimecodeBurnin? = nil
        )
        {
            self.colorCorrector = colorCorrector
            self.deinterlacer = deinterlacer
            self.dolbyVision = dolbyVision
            self.hdr10Plus = hdr10Plus
            self.imageInserter = imageInserter
            self.noiseReducer = noiseReducer
            self.partnerWatermarking = partnerWatermarking
            self.timecodeBurnin = timecodeBurnin
        }
    }

}
