// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension MediaConvertClientTypes {
    /// Use Audio selectors (AudioSelectors) to specify a track or set of tracks from the input that you will use in your outputs. You can use multiple Audio selectors per input.
    public struct AudioSelector: Swift.Equatable {
        /// Apply audio timing corrections to help synchronize audio and video in your output. To apply timing corrections, your input must meet the following requirements: * Container: MP4, or MOV, with an accurate time-to-sample (STTS) table. * Audio track: AAC. Choose from the following audio timing correction settings: * Disabled (Default): Apply no correction. * Auto: Recommended for most inputs. MediaConvert analyzes the audio timing in your input and determines which correction setting to use, if needed. * Track: Adjust the duration of each audio frame by a constant amount to align the audio track length with STTS duration. Track-level correction does not affect pitch, and is recommended for tonal audio content such as music. * Frame: Adjust the duration of each audio frame by a variable amount to align audio frames with STTS timestamps. No corrections are made to already-aligned frames. Frame-level correction may affect the pitch of corrected frames, and is recommended for atonal audio content such as speech or percussion.
        public var audioDurationCorrection: MediaConvertClientTypes.AudioDurationCorrection?
        /// Selects a specific language code from within an audio source, using the ISO 639-2 or ISO 639-3 three-letter language code
        public var customLanguageCode: Swift.String?
        /// Enable this setting on one audio selector to set it as the default for the job. The service uses this default for outputs where it can't find the specified input audio. If you don't set a default, those outputs have no audio.
        public var defaultSelection: MediaConvertClientTypes.AudioDefaultSelection?
        /// Specifies audio data from an external file source.
        public var externalAudioFileInput: Swift.String?
        /// Settings specific to audio sources in an HLS alternate rendition group. Specify the properties (renditionGroupId, renditionName or renditionLanguageCode) to identify the unique audio track among the alternative rendition groups present in the HLS manifest. If no unique track is found, or multiple tracks match the properties provided, the job fails. If no properties in hlsRenditionGroupSettings are specified, the default audio track within the video segment is chosen. If there is no audio within video segment, the alternative audio with DEFAULT=YES is chosen instead.
        public var hlsRenditionGroupSettings: MediaConvertClientTypes.HlsRenditionGroupSettings?
        /// Selects a specific language code from within an audio source.
        public var languageCode: MediaConvertClientTypes.LanguageCode?
        /// Specifies a time delta in milliseconds to offset the audio from the input video.
        public var offset: Swift.Int?
        /// Selects a specific PID from within an audio source (e.g. 257 selects PID 0x101).
        public var pids: [Swift.Int]?
        /// Use this setting for input streams that contain Dolby E, to have the service extract specific program data from the track. To select multiple programs, create multiple selectors with the same Track and different Program numbers. In the console, this setting is visible when you set Selector type to Track. Choose the program number from the dropdown list. If you are sending a JSON file, provide the program ID, which is part of the audio metadata. If your input file has incorrect metadata, you can choose All channels instead of a program number to have the service ignore the program IDs and include all the programs in the track.
        public var programSelection: Swift.Int?
        /// Use these settings to reorder the audio channels of one input to match those of another input. This allows you to combine the two files into a single output, one after the other.
        public var remixSettings: MediaConvertClientTypes.RemixSettings?
        /// Specifies the type of the audio selector.
        public var selectorType: MediaConvertClientTypes.AudioSelectorType?
        /// Identify a track from the input audio to include in this selector by entering the track index number. To include several tracks in a single audio selector, specify multiple tracks as follows. Using the console, enter a comma-separated list. For examle, type "1,2,3" to include tracks 1 through 3. Specifying directly in your JSON job file, provide the track numbers in an array. For example, "tracks": [1,2,3].
        public var tracks: [Swift.Int]?

        public init (
            audioDurationCorrection: MediaConvertClientTypes.AudioDurationCorrection? = nil,
            customLanguageCode: Swift.String? = nil,
            defaultSelection: MediaConvertClientTypes.AudioDefaultSelection? = nil,
            externalAudioFileInput: Swift.String? = nil,
            hlsRenditionGroupSettings: MediaConvertClientTypes.HlsRenditionGroupSettings? = nil,
            languageCode: MediaConvertClientTypes.LanguageCode? = nil,
            offset: Swift.Int? = nil,
            pids: [Swift.Int]? = nil,
            programSelection: Swift.Int? = nil,
            remixSettings: MediaConvertClientTypes.RemixSettings? = nil,
            selectorType: MediaConvertClientTypes.AudioSelectorType? = nil,
            tracks: [Swift.Int]? = nil
        )
        {
            self.audioDurationCorrection = audioDurationCorrection
            self.customLanguageCode = customLanguageCode
            self.defaultSelection = defaultSelection
            self.externalAudioFileInput = externalAudioFileInput
            self.hlsRenditionGroupSettings = hlsRenditionGroupSettings
            self.languageCode = languageCode
            self.offset = offset
            self.pids = pids
            self.programSelection = programSelection
            self.remixSettings = remixSettings
            self.selectorType = selectorType
            self.tracks = tracks
        }
    }

}
