// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension MediaConvertClientTypes.CmafGroupSettings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case additionalManifests = "additionalManifests"
        case baseUrl = "baseUrl"
        case clientCache = "clientCache"
        case codecSpecification = "codecSpecification"
        case destination = "destination"
        case destinationSettings = "destinationSettings"
        case encryption = "encryption"
        case fragmentLength = "fragmentLength"
        case imageBasedTrickPlay = "imageBasedTrickPlay"
        case imageBasedTrickPlaySettings = "imageBasedTrickPlaySettings"
        case manifestCompression = "manifestCompression"
        case manifestDurationFormat = "manifestDurationFormat"
        case minBufferTime = "minBufferTime"
        case minFinalSegmentLength = "minFinalSegmentLength"
        case mpdProfile = "mpdProfile"
        case ptsOffsetHandlingForBFrames = "ptsOffsetHandlingForBFrames"
        case segmentControl = "segmentControl"
        case segmentLength = "segmentLength"
        case segmentLengthControl = "segmentLengthControl"
        case streamInfResolution = "streamInfResolution"
        case targetDurationCompatibilityMode = "targetDurationCompatibilityMode"
        case writeDashManifest = "writeDashManifest"
        case writeHlsManifest = "writeHlsManifest"
        case writeSegmentTimelineInRepresentation = "writeSegmentTimelineInRepresentation"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let additionalManifests = additionalManifests {
            var additionalManifestsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .additionalManifests)
            for __listofcmafadditionalmanifest0 in additionalManifests {
                try additionalManifestsContainer.encode(__listofcmafadditionalmanifest0)
            }
        }
        if let baseUrl = self.baseUrl {
            try encodeContainer.encode(baseUrl, forKey: .baseUrl)
        }
        if let clientCache = self.clientCache {
            try encodeContainer.encode(clientCache.rawValue, forKey: .clientCache)
        }
        if let codecSpecification = self.codecSpecification {
            try encodeContainer.encode(codecSpecification.rawValue, forKey: .codecSpecification)
        }
        if let destination = self.destination {
            try encodeContainer.encode(destination, forKey: .destination)
        }
        if let destinationSettings = self.destinationSettings {
            try encodeContainer.encode(destinationSettings, forKey: .destinationSettings)
        }
        if let encryption = self.encryption {
            try encodeContainer.encode(encryption, forKey: .encryption)
        }
        if let fragmentLength = self.fragmentLength {
            try encodeContainer.encode(fragmentLength, forKey: .fragmentLength)
        }
        if let imageBasedTrickPlay = self.imageBasedTrickPlay {
            try encodeContainer.encode(imageBasedTrickPlay.rawValue, forKey: .imageBasedTrickPlay)
        }
        if let imageBasedTrickPlaySettings = self.imageBasedTrickPlaySettings {
            try encodeContainer.encode(imageBasedTrickPlaySettings, forKey: .imageBasedTrickPlaySettings)
        }
        if let manifestCompression = self.manifestCompression {
            try encodeContainer.encode(manifestCompression.rawValue, forKey: .manifestCompression)
        }
        if let manifestDurationFormat = self.manifestDurationFormat {
            try encodeContainer.encode(manifestDurationFormat.rawValue, forKey: .manifestDurationFormat)
        }
        if let minBufferTime = self.minBufferTime {
            try encodeContainer.encode(minBufferTime, forKey: .minBufferTime)
        }
        if let minFinalSegmentLength = self.minFinalSegmentLength {
            try encodeContainer.encode(minFinalSegmentLength, forKey: .minFinalSegmentLength)
        }
        if let mpdProfile = self.mpdProfile {
            try encodeContainer.encode(mpdProfile.rawValue, forKey: .mpdProfile)
        }
        if let ptsOffsetHandlingForBFrames = self.ptsOffsetHandlingForBFrames {
            try encodeContainer.encode(ptsOffsetHandlingForBFrames.rawValue, forKey: .ptsOffsetHandlingForBFrames)
        }
        if let segmentControl = self.segmentControl {
            try encodeContainer.encode(segmentControl.rawValue, forKey: .segmentControl)
        }
        if let segmentLength = self.segmentLength {
            try encodeContainer.encode(segmentLength, forKey: .segmentLength)
        }
        if let segmentLengthControl = self.segmentLengthControl {
            try encodeContainer.encode(segmentLengthControl.rawValue, forKey: .segmentLengthControl)
        }
        if let streamInfResolution = self.streamInfResolution {
            try encodeContainer.encode(streamInfResolution.rawValue, forKey: .streamInfResolution)
        }
        if let targetDurationCompatibilityMode = self.targetDurationCompatibilityMode {
            try encodeContainer.encode(targetDurationCompatibilityMode.rawValue, forKey: .targetDurationCompatibilityMode)
        }
        if let writeDashManifest = self.writeDashManifest {
            try encodeContainer.encode(writeDashManifest.rawValue, forKey: .writeDashManifest)
        }
        if let writeHlsManifest = self.writeHlsManifest {
            try encodeContainer.encode(writeHlsManifest.rawValue, forKey: .writeHlsManifest)
        }
        if let writeSegmentTimelineInRepresentation = self.writeSegmentTimelineInRepresentation {
            try encodeContainer.encode(writeSegmentTimelineInRepresentation.rawValue, forKey: .writeSegmentTimelineInRepresentation)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let additionalManifestsContainer = try containerValues.decodeIfPresent([MediaConvertClientTypes.CmafAdditionalManifest?].self, forKey: .additionalManifests)
        var additionalManifestsDecoded0:[MediaConvertClientTypes.CmafAdditionalManifest]? = nil
        if let additionalManifestsContainer = additionalManifestsContainer {
            additionalManifestsDecoded0 = [MediaConvertClientTypes.CmafAdditionalManifest]()
            for structure0 in additionalManifestsContainer {
                if let structure0 = structure0 {
                    additionalManifestsDecoded0?.append(structure0)
                }
            }
        }
        additionalManifests = additionalManifestsDecoded0
        let baseUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .baseUrl)
        baseUrl = baseUrlDecoded
        let clientCacheDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.CmafClientCache.self, forKey: .clientCache)
        clientCache = clientCacheDecoded
        let codecSpecificationDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.CmafCodecSpecification.self, forKey: .codecSpecification)
        codecSpecification = codecSpecificationDecoded
        let destinationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .destination)
        destination = destinationDecoded
        let destinationSettingsDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.DestinationSettings.self, forKey: .destinationSettings)
        destinationSettings = destinationSettingsDecoded
        let encryptionDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.CmafEncryptionSettings.self, forKey: .encryption)
        encryption = encryptionDecoded
        let fragmentLengthDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .fragmentLength)
        fragmentLength = fragmentLengthDecoded
        let imageBasedTrickPlayDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.CmafImageBasedTrickPlay.self, forKey: .imageBasedTrickPlay)
        imageBasedTrickPlay = imageBasedTrickPlayDecoded
        let imageBasedTrickPlaySettingsDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.CmafImageBasedTrickPlaySettings.self, forKey: .imageBasedTrickPlaySettings)
        imageBasedTrickPlaySettings = imageBasedTrickPlaySettingsDecoded
        let manifestCompressionDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.CmafManifestCompression.self, forKey: .manifestCompression)
        manifestCompression = manifestCompressionDecoded
        let manifestDurationFormatDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.CmafManifestDurationFormat.self, forKey: .manifestDurationFormat)
        manifestDurationFormat = manifestDurationFormatDecoded
        let minBufferTimeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .minBufferTime)
        minBufferTime = minBufferTimeDecoded
        let minFinalSegmentLengthDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .minFinalSegmentLength)
        minFinalSegmentLength = minFinalSegmentLengthDecoded
        let mpdProfileDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.CmafMpdProfile.self, forKey: .mpdProfile)
        mpdProfile = mpdProfileDecoded
        let ptsOffsetHandlingForBFramesDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.CmafPtsOffsetHandlingForBFrames.self, forKey: .ptsOffsetHandlingForBFrames)
        ptsOffsetHandlingForBFrames = ptsOffsetHandlingForBFramesDecoded
        let segmentControlDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.CmafSegmentControl.self, forKey: .segmentControl)
        segmentControl = segmentControlDecoded
        let segmentLengthDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .segmentLength)
        segmentLength = segmentLengthDecoded
        let segmentLengthControlDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.CmafSegmentLengthControl.self, forKey: .segmentLengthControl)
        segmentLengthControl = segmentLengthControlDecoded
        let streamInfResolutionDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.CmafStreamInfResolution.self, forKey: .streamInfResolution)
        streamInfResolution = streamInfResolutionDecoded
        let targetDurationCompatibilityModeDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.CmafTargetDurationCompatibilityMode.self, forKey: .targetDurationCompatibilityMode)
        targetDurationCompatibilityMode = targetDurationCompatibilityModeDecoded
        let writeDashManifestDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.CmafWriteDASHManifest.self, forKey: .writeDashManifest)
        writeDashManifest = writeDashManifestDecoded
        let writeHlsManifestDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.CmafWriteHLSManifest.self, forKey: .writeHlsManifest)
        writeHlsManifest = writeHlsManifestDecoded
        let writeSegmentTimelineInRepresentationDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.CmafWriteSegmentTimelineInRepresentation.self, forKey: .writeSegmentTimelineInRepresentation)
        writeSegmentTimelineInRepresentation = writeSegmentTimelineInRepresentationDecoded
    }
}
