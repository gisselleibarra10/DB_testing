// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension MediaConvertClientTypes.Output: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case audioDescriptions = "audioDescriptions"
        case captionDescriptions = "captionDescriptions"
        case containerSettings = "containerSettings"
        case `extension` = "extension"
        case nameModifier = "nameModifier"
        case outputSettings = "outputSettings"
        case preset = "preset"
        case videoDescription = "videoDescription"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let audioDescriptions = audioDescriptions {
            var audioDescriptionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .audioDescriptions)
            for __listofaudiodescription0 in audioDescriptions {
                try audioDescriptionsContainer.encode(__listofaudiodescription0)
            }
        }
        if let captionDescriptions = captionDescriptions {
            var captionDescriptionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .captionDescriptions)
            for __listofcaptiondescription0 in captionDescriptions {
                try captionDescriptionsContainer.encode(__listofcaptiondescription0)
            }
        }
        if let containerSettings = self.containerSettings {
            try encodeContainer.encode(containerSettings, forKey: .containerSettings)
        }
        if let `extension` = self.`extension` {
            try encodeContainer.encode(`extension`, forKey: .`extension`)
        }
        if let nameModifier = self.nameModifier {
            try encodeContainer.encode(nameModifier, forKey: .nameModifier)
        }
        if let outputSettings = self.outputSettings {
            try encodeContainer.encode(outputSettings, forKey: .outputSettings)
        }
        if let preset = self.preset {
            try encodeContainer.encode(preset, forKey: .preset)
        }
        if let videoDescription = self.videoDescription {
            try encodeContainer.encode(videoDescription, forKey: .videoDescription)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let audioDescriptionsContainer = try containerValues.decodeIfPresent([MediaConvertClientTypes.AudioDescription?].self, forKey: .audioDescriptions)
        var audioDescriptionsDecoded0:[MediaConvertClientTypes.AudioDescription]? = nil
        if let audioDescriptionsContainer = audioDescriptionsContainer {
            audioDescriptionsDecoded0 = [MediaConvertClientTypes.AudioDescription]()
            for structure0 in audioDescriptionsContainer {
                if let structure0 = structure0 {
                    audioDescriptionsDecoded0?.append(structure0)
                }
            }
        }
        audioDescriptions = audioDescriptionsDecoded0
        let captionDescriptionsContainer = try containerValues.decodeIfPresent([MediaConvertClientTypes.CaptionDescription?].self, forKey: .captionDescriptions)
        var captionDescriptionsDecoded0:[MediaConvertClientTypes.CaptionDescription]? = nil
        if let captionDescriptionsContainer = captionDescriptionsContainer {
            captionDescriptionsDecoded0 = [MediaConvertClientTypes.CaptionDescription]()
            for structure0 in captionDescriptionsContainer {
                if let structure0 = structure0 {
                    captionDescriptionsDecoded0?.append(structure0)
                }
            }
        }
        captionDescriptions = captionDescriptionsDecoded0
        let containerSettingsDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.ContainerSettings.self, forKey: .containerSettings)
        containerSettings = containerSettingsDecoded
        let extensionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .extension)
        `extension` = extensionDecoded
        let nameModifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nameModifier)
        nameModifier = nameModifierDecoded
        let outputSettingsDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.OutputSettings.self, forKey: .outputSettings)
        outputSettings = outputSettingsDecoded
        let presetDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .preset)
        preset = presetDecoded
        let videoDescriptionDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.VideoDescription.self, forKey: .videoDescription)
        videoDescription = videoDescriptionDecoded
    }
}
