// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension MediaConvertClientTypes.JobMessages: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case info = "info"
        case warning = "warning"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let info = info {
            var infoContainer = encodeContainer.nestedUnkeyedContainer(forKey: .info)
            for __listof__string0 in info {
                try infoContainer.encode(__listof__string0)
            }
        }
        if let warning = warning {
            var warningContainer = encodeContainer.nestedUnkeyedContainer(forKey: .warning)
            for __listof__string0 in warning {
                try warningContainer.encode(__listof__string0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let infoContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .info)
        var infoDecoded0:[Swift.String]? = nil
        if let infoContainer = infoContainer {
            infoDecoded0 = [Swift.String]()
            for string0 in infoContainer {
                if let string0 = string0 {
                    infoDecoded0?.append(string0)
                }
            }
        }
        info = infoDecoded0
        let warningContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .warning)
        var warningDecoded0:[Swift.String]? = nil
        if let warningContainer = warningContainer {
            warningDecoded0 = [Swift.String]()
            for string0 in warningContainer {
                if let string0 = string0 {
                    warningDecoded0?.append(string0)
                }
            }
        }
        warning = warningDecoded0
    }
}
