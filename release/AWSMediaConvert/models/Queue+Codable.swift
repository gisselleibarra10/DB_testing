// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension MediaConvertClientTypes.Queue: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "arn"
        case createdAt = "createdAt"
        case description = "description"
        case lastUpdated = "lastUpdated"
        case name = "name"
        case pricingPlan = "pricingPlan"
        case progressingJobsCount = "progressingJobsCount"
        case reservationPlan = "reservationPlan"
        case status = "status"
        case submittedJobsCount = "submittedJobsCount"
        case type = "type"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = self.arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let createdAt = self.createdAt {
            try encodeContainer.encode(createdAt.timeIntervalSince1970, forKey: .createdAt)
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let lastUpdated = self.lastUpdated {
            try encodeContainer.encode(lastUpdated.timeIntervalSince1970, forKey: .lastUpdated)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let pricingPlan = self.pricingPlan {
            try encodeContainer.encode(pricingPlan.rawValue, forKey: .pricingPlan)
        }
        if let progressingJobsCount = self.progressingJobsCount {
            try encodeContainer.encode(progressingJobsCount, forKey: .progressingJobsCount)
        }
        if let reservationPlan = self.reservationPlan {
            try encodeContainer.encode(reservationPlan, forKey: .reservationPlan)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let submittedJobsCount = self.submittedJobsCount {
            try encodeContainer.encode(submittedJobsCount, forKey: .submittedJobsCount)
        }
        if let type = self.type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let createdAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdAt)
        createdAt = createdAtDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let lastUpdatedDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastUpdated)
        lastUpdated = lastUpdatedDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let pricingPlanDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.PricingPlan.self, forKey: .pricingPlan)
        pricingPlan = pricingPlanDecoded
        let progressingJobsCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .progressingJobsCount)
        progressingJobsCount = progressingJobsCountDecoded
        let reservationPlanDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.ReservationPlan.self, forKey: .reservationPlan)
        reservationPlan = reservationPlanDecoded
        let statusDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.QueueStatus.self, forKey: .status)
        status = statusDecoded
        let submittedJobsCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .submittedJobsCount)
        submittedJobsCount = submittedJobsCountDecoded
        let typeDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.ModelType.self, forKey: .type)
        type = typeDecoded
    }
}
