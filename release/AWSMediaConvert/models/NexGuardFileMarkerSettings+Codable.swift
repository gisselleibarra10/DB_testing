// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension MediaConvertClientTypes.NexGuardFileMarkerSettings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case license = "license"
        case payload = "payload"
        case preset = "preset"
        case strength = "strength"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let license = self.license {
            try encodeContainer.encode(license, forKey: .license)
        }
        if let payload = self.payload {
            try encodeContainer.encode(payload, forKey: .payload)
        }
        if let preset = self.preset {
            try encodeContainer.encode(preset, forKey: .preset)
        }
        if let strength = self.strength {
            try encodeContainer.encode(strength.rawValue, forKey: .strength)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let licenseDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .license)
        license = licenseDecoded
        let payloadDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .payload)
        payload = payloadDecoded
        let presetDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .preset)
        preset = presetDecoded
        let strengthDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.WatermarkingStrength.self, forKey: .strength)
        strength = strengthDecoded
    }
}
