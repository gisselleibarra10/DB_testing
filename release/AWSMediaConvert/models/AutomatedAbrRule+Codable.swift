// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension MediaConvertClientTypes.AutomatedAbrRule: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case allowedRenditions = "allowedRenditions"
        case forceIncludeRenditions = "forceIncludeRenditions"
        case minBottomRenditionSize = "minBottomRenditionSize"
        case minTopRenditionSize = "minTopRenditionSize"
        case type = "type"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let allowedRenditions = allowedRenditions {
            var allowedRenditionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .allowedRenditions)
            for __listofallowedrenditionsize0 in allowedRenditions {
                try allowedRenditionsContainer.encode(__listofallowedrenditionsize0)
            }
        }
        if let forceIncludeRenditions = forceIncludeRenditions {
            var forceIncludeRenditionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .forceIncludeRenditions)
            for __listofforceincluderenditionsize0 in forceIncludeRenditions {
                try forceIncludeRenditionsContainer.encode(__listofforceincluderenditionsize0)
            }
        }
        if let minBottomRenditionSize = self.minBottomRenditionSize {
            try encodeContainer.encode(minBottomRenditionSize, forKey: .minBottomRenditionSize)
        }
        if let minTopRenditionSize = self.minTopRenditionSize {
            try encodeContainer.encode(minTopRenditionSize, forKey: .minTopRenditionSize)
        }
        if let type = self.type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let allowedRenditionsContainer = try containerValues.decodeIfPresent([MediaConvertClientTypes.AllowedRenditionSize?].self, forKey: .allowedRenditions)
        var allowedRenditionsDecoded0:[MediaConvertClientTypes.AllowedRenditionSize]? = nil
        if let allowedRenditionsContainer = allowedRenditionsContainer {
            allowedRenditionsDecoded0 = [MediaConvertClientTypes.AllowedRenditionSize]()
            for structure0 in allowedRenditionsContainer {
                if let structure0 = structure0 {
                    allowedRenditionsDecoded0?.append(structure0)
                }
            }
        }
        allowedRenditions = allowedRenditionsDecoded0
        let forceIncludeRenditionsContainer = try containerValues.decodeIfPresent([MediaConvertClientTypes.ForceIncludeRenditionSize?].self, forKey: .forceIncludeRenditions)
        var forceIncludeRenditionsDecoded0:[MediaConvertClientTypes.ForceIncludeRenditionSize]? = nil
        if let forceIncludeRenditionsContainer = forceIncludeRenditionsContainer {
            forceIncludeRenditionsDecoded0 = [MediaConvertClientTypes.ForceIncludeRenditionSize]()
            for structure0 in forceIncludeRenditionsContainer {
                if let structure0 = structure0 {
                    forceIncludeRenditionsDecoded0?.append(structure0)
                }
            }
        }
        forceIncludeRenditions = forceIncludeRenditionsDecoded0
        let minBottomRenditionSizeDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.MinBottomRenditionSize.self, forKey: .minBottomRenditionSize)
        minBottomRenditionSize = minBottomRenditionSizeDecoded
        let minTopRenditionSizeDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.MinTopRenditionSize.self, forKey: .minTopRenditionSize)
        minTopRenditionSize = minTopRenditionSizeDecoded
        let typeDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.RuleType.self, forKey: .type)
        type = typeDecoded
    }
}
