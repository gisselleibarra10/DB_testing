// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension MediaConvertClientTypes.InputTemplate: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case audioSelectorGroups = "audioSelectorGroups"
        case audioSelectors = "audioSelectors"
        case captionSelectors = "captionSelectors"
        case crop = "crop"
        case deblockFilter = "deblockFilter"
        case denoiseFilter = "denoiseFilter"
        case dolbyVisionMetadataXml = "dolbyVisionMetadataXml"
        case filterEnable = "filterEnable"
        case filterStrength = "filterStrength"
        case imageInserter = "imageInserter"
        case inputClippings = "inputClippings"
        case inputScanType = "inputScanType"
        case position = "position"
        case programNumber = "programNumber"
        case psiControl = "psiControl"
        case timecodeSource = "timecodeSource"
        case timecodeStart = "timecodeStart"
        case videoSelector = "videoSelector"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let audioSelectorGroups = audioSelectorGroups {
            var audioSelectorGroupsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .audioSelectorGroups)
            for (dictKey0, __mapofaudioselectorgroup0) in audioSelectorGroups {
                try audioSelectorGroupsContainer.encode(__mapofaudioselectorgroup0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let audioSelectors = audioSelectors {
            var audioSelectorsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .audioSelectors)
            for (dictKey0, __mapofaudioselector0) in audioSelectors {
                try audioSelectorsContainer.encode(__mapofaudioselector0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let captionSelectors = captionSelectors {
            var captionSelectorsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .captionSelectors)
            for (dictKey0, __mapofcaptionselector0) in captionSelectors {
                try captionSelectorsContainer.encode(__mapofcaptionselector0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let crop = self.crop {
            try encodeContainer.encode(crop, forKey: .crop)
        }
        if let deblockFilter = self.deblockFilter {
            try encodeContainer.encode(deblockFilter.rawValue, forKey: .deblockFilter)
        }
        if let denoiseFilter = self.denoiseFilter {
            try encodeContainer.encode(denoiseFilter.rawValue, forKey: .denoiseFilter)
        }
        if let dolbyVisionMetadataXml = self.dolbyVisionMetadataXml {
            try encodeContainer.encode(dolbyVisionMetadataXml, forKey: .dolbyVisionMetadataXml)
        }
        if let filterEnable = self.filterEnable {
            try encodeContainer.encode(filterEnable.rawValue, forKey: .filterEnable)
        }
        if let filterStrength = self.filterStrength {
            try encodeContainer.encode(filterStrength, forKey: .filterStrength)
        }
        if let imageInserter = self.imageInserter {
            try encodeContainer.encode(imageInserter, forKey: .imageInserter)
        }
        if let inputClippings = inputClippings {
            var inputClippingsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .inputClippings)
            for __listofinputclipping0 in inputClippings {
                try inputClippingsContainer.encode(__listofinputclipping0)
            }
        }
        if let inputScanType = self.inputScanType {
            try encodeContainer.encode(inputScanType.rawValue, forKey: .inputScanType)
        }
        if let position = self.position {
            try encodeContainer.encode(position, forKey: .position)
        }
        if let programNumber = self.programNumber {
            try encodeContainer.encode(programNumber, forKey: .programNumber)
        }
        if let psiControl = self.psiControl {
            try encodeContainer.encode(psiControl.rawValue, forKey: .psiControl)
        }
        if let timecodeSource = self.timecodeSource {
            try encodeContainer.encode(timecodeSource.rawValue, forKey: .timecodeSource)
        }
        if let timecodeStart = self.timecodeStart {
            try encodeContainer.encode(timecodeStart, forKey: .timecodeStart)
        }
        if let videoSelector = self.videoSelector {
            try encodeContainer.encode(videoSelector, forKey: .videoSelector)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let audioSelectorGroupsContainer = try containerValues.decodeIfPresent([Swift.String: MediaConvertClientTypes.AudioSelectorGroup?].self, forKey: .audioSelectorGroups)
        var audioSelectorGroupsDecoded0: [Swift.String:MediaConvertClientTypes.AudioSelectorGroup]? = nil
        if let audioSelectorGroupsContainer = audioSelectorGroupsContainer {
            audioSelectorGroupsDecoded0 = [Swift.String:MediaConvertClientTypes.AudioSelectorGroup]()
            for (key0, audioselectorgroup0) in audioSelectorGroupsContainer {
                if let audioselectorgroup0 = audioselectorgroup0 {
                    audioSelectorGroupsDecoded0?[key0] = audioselectorgroup0
                }
            }
        }
        audioSelectorGroups = audioSelectorGroupsDecoded0
        let audioSelectorsContainer = try containerValues.decodeIfPresent([Swift.String: MediaConvertClientTypes.AudioSelector?].self, forKey: .audioSelectors)
        var audioSelectorsDecoded0: [Swift.String:MediaConvertClientTypes.AudioSelector]? = nil
        if let audioSelectorsContainer = audioSelectorsContainer {
            audioSelectorsDecoded0 = [Swift.String:MediaConvertClientTypes.AudioSelector]()
            for (key0, audioselector0) in audioSelectorsContainer {
                if let audioselector0 = audioselector0 {
                    audioSelectorsDecoded0?[key0] = audioselector0
                }
            }
        }
        audioSelectors = audioSelectorsDecoded0
        let captionSelectorsContainer = try containerValues.decodeIfPresent([Swift.String: MediaConvertClientTypes.CaptionSelector?].self, forKey: .captionSelectors)
        var captionSelectorsDecoded0: [Swift.String:MediaConvertClientTypes.CaptionSelector]? = nil
        if let captionSelectorsContainer = captionSelectorsContainer {
            captionSelectorsDecoded0 = [Swift.String:MediaConvertClientTypes.CaptionSelector]()
            for (key0, captionselector0) in captionSelectorsContainer {
                if let captionselector0 = captionselector0 {
                    captionSelectorsDecoded0?[key0] = captionselector0
                }
            }
        }
        captionSelectors = captionSelectorsDecoded0
        let cropDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.Rectangle.self, forKey: .crop)
        crop = cropDecoded
        let deblockFilterDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.InputDeblockFilter.self, forKey: .deblockFilter)
        deblockFilter = deblockFilterDecoded
        let denoiseFilterDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.InputDenoiseFilter.self, forKey: .denoiseFilter)
        denoiseFilter = denoiseFilterDecoded
        let dolbyVisionMetadataXmlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dolbyVisionMetadataXml)
        dolbyVisionMetadataXml = dolbyVisionMetadataXmlDecoded
        let filterEnableDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.InputFilterEnable.self, forKey: .filterEnable)
        filterEnable = filterEnableDecoded
        let filterStrengthDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .filterStrength)
        filterStrength = filterStrengthDecoded
        let imageInserterDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.ImageInserter.self, forKey: .imageInserter)
        imageInserter = imageInserterDecoded
        let inputClippingsContainer = try containerValues.decodeIfPresent([MediaConvertClientTypes.InputClipping?].self, forKey: .inputClippings)
        var inputClippingsDecoded0:[MediaConvertClientTypes.InputClipping]? = nil
        if let inputClippingsContainer = inputClippingsContainer {
            inputClippingsDecoded0 = [MediaConvertClientTypes.InputClipping]()
            for structure0 in inputClippingsContainer {
                if let structure0 = structure0 {
                    inputClippingsDecoded0?.append(structure0)
                }
            }
        }
        inputClippings = inputClippingsDecoded0
        let inputScanTypeDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.InputScanType.self, forKey: .inputScanType)
        inputScanType = inputScanTypeDecoded
        let positionDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.Rectangle.self, forKey: .position)
        position = positionDecoded
        let programNumberDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .programNumber)
        programNumber = programNumberDecoded
        let psiControlDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.InputPsiControl.self, forKey: .psiControl)
        psiControl = psiControlDecoded
        let timecodeSourceDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.InputTimecodeSource.self, forKey: .timecodeSource)
        timecodeSource = timecodeSourceDecoded
        let timecodeStartDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .timecodeStart)
        timecodeStart = timecodeStartDecoded
        let videoSelectorDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.VideoSelector.self, forKey: .videoSelector)
        videoSelector = videoSelectorDecoded
    }
}
