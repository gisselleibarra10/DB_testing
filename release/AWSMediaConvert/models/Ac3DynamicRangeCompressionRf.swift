// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension MediaConvertClientTypes {
    /// Choose the Dolby Digital dynamic range control (DRC) profile that MediaConvert uses when encoding the metadata in the Dolby Digital stream for the RF operating mode. Related setting: When you use this setting, MediaConvert ignores any value you provide for Dynamic range compression profile (DynamicRangeCompressionProfile). For information about the Dolby Digital DRC operating modes and profiles, see the Dynamic Range Control chapter of the Dolby Metadata Guide at https://developer.dolby.com/globalassets/professional/documents/dolby-metadata-guide.pdf.
    public enum Ac3DynamicRangeCompressionRf: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case filmLight
        case filmStandard
        case musicLight
        case musicStandard
        case `none`
        case speech
        case sdkUnknown(Swift.String)

        public static var allCases: [Ac3DynamicRangeCompressionRf] {
            return [
                .filmLight,
                .filmStandard,
                .musicLight,
                .musicStandard,
                .none,
                .speech,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .filmLight: return "FILM_LIGHT"
            case .filmStandard: return "FILM_STANDARD"
            case .musicLight: return "MUSIC_LIGHT"
            case .musicStandard: return "MUSIC_STANDARD"
            case .none: return "NONE"
            case .speech: return "SPEECH"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = Ac3DynamicRangeCompressionRf(rawValue: rawValue) ?? Ac3DynamicRangeCompressionRf.sdkUnknown(rawValue)
        }
    }
}
