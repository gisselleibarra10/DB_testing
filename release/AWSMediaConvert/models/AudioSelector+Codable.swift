// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension MediaConvertClientTypes.AudioSelector: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case audioDurationCorrection = "audioDurationCorrection"
        case customLanguageCode = "customLanguageCode"
        case defaultSelection = "defaultSelection"
        case externalAudioFileInput = "externalAudioFileInput"
        case hlsRenditionGroupSettings = "hlsRenditionGroupSettings"
        case languageCode = "languageCode"
        case offset = "offset"
        case pids = "pids"
        case programSelection = "programSelection"
        case remixSettings = "remixSettings"
        case selectorType = "selectorType"
        case tracks = "tracks"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let audioDurationCorrection = self.audioDurationCorrection {
            try encodeContainer.encode(audioDurationCorrection.rawValue, forKey: .audioDurationCorrection)
        }
        if let customLanguageCode = self.customLanguageCode {
            try encodeContainer.encode(customLanguageCode, forKey: .customLanguageCode)
        }
        if let defaultSelection = self.defaultSelection {
            try encodeContainer.encode(defaultSelection.rawValue, forKey: .defaultSelection)
        }
        if let externalAudioFileInput = self.externalAudioFileInput {
            try encodeContainer.encode(externalAudioFileInput, forKey: .externalAudioFileInput)
        }
        if let hlsRenditionGroupSettings = self.hlsRenditionGroupSettings {
            try encodeContainer.encode(hlsRenditionGroupSettings, forKey: .hlsRenditionGroupSettings)
        }
        if let languageCode = self.languageCode {
            try encodeContainer.encode(languageCode.rawValue, forKey: .languageCode)
        }
        if let offset = self.offset {
            try encodeContainer.encode(offset, forKey: .offset)
        }
        if let pids = pids {
            var pidsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .pids)
            for __listof__integermin1max21474836470 in pids {
                try pidsContainer.encode(__listof__integermin1max21474836470)
            }
        }
        if let programSelection = self.programSelection {
            try encodeContainer.encode(programSelection, forKey: .programSelection)
        }
        if let remixSettings = self.remixSettings {
            try encodeContainer.encode(remixSettings, forKey: .remixSettings)
        }
        if let selectorType = self.selectorType {
            try encodeContainer.encode(selectorType.rawValue, forKey: .selectorType)
        }
        if let tracks = tracks {
            var tracksContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tracks)
            for __listof__integermin1max21474836470 in tracks {
                try tracksContainer.encode(__listof__integermin1max21474836470)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let audioDurationCorrectionDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.AudioDurationCorrection.self, forKey: .audioDurationCorrection)
        audioDurationCorrection = audioDurationCorrectionDecoded
        let customLanguageCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .customLanguageCode)
        customLanguageCode = customLanguageCodeDecoded
        let defaultSelectionDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.AudioDefaultSelection.self, forKey: .defaultSelection)
        defaultSelection = defaultSelectionDecoded
        let externalAudioFileInputDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .externalAudioFileInput)
        externalAudioFileInput = externalAudioFileInputDecoded
        let hlsRenditionGroupSettingsDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.HlsRenditionGroupSettings.self, forKey: .hlsRenditionGroupSettings)
        hlsRenditionGroupSettings = hlsRenditionGroupSettingsDecoded
        let languageCodeDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.LanguageCode.self, forKey: .languageCode)
        languageCode = languageCodeDecoded
        let offsetDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .offset)
        offset = offsetDecoded
        let pidsContainer = try containerValues.decodeIfPresent([Swift.Int?].self, forKey: .pids)
        var pidsDecoded0:[Swift.Int]? = nil
        if let pidsContainer = pidsContainer {
            pidsDecoded0 = [Swift.Int]()
            for integer0 in pidsContainer {
                if let integer0 = integer0 {
                    pidsDecoded0?.append(integer0)
                }
            }
        }
        pids = pidsDecoded0
        let programSelectionDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .programSelection)
        programSelection = programSelectionDecoded
        let remixSettingsDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.RemixSettings.self, forKey: .remixSettings)
        remixSettings = remixSettingsDecoded
        let selectorTypeDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.AudioSelectorType.self, forKey: .selectorType)
        selectorType = selectorTypeDecoded
        let tracksContainer = try containerValues.decodeIfPresent([Swift.Int?].self, forKey: .tracks)
        var tracksDecoded0:[Swift.Int]? = nil
        if let tracksContainer = tracksContainer {
            tracksDecoded0 = [Swift.Int]()
            for integer0 in tracksContainer {
                if let integer0 = integer0 {
                    tracksDecoded0?.append(integer0)
                }
            }
        }
        tracks = tracksDecoded0
    }
}
