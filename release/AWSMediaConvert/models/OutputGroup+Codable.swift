// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension MediaConvertClientTypes.OutputGroup: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case automatedEncodingSettings = "automatedEncodingSettings"
        case customName = "customName"
        case name = "name"
        case outputGroupSettings = "outputGroupSettings"
        case outputs = "outputs"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let automatedEncodingSettings = self.automatedEncodingSettings {
            try encodeContainer.encode(automatedEncodingSettings, forKey: .automatedEncodingSettings)
        }
        if let customName = self.customName {
            try encodeContainer.encode(customName, forKey: .customName)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let outputGroupSettings = self.outputGroupSettings {
            try encodeContainer.encode(outputGroupSettings, forKey: .outputGroupSettings)
        }
        if let outputs = outputs {
            var outputsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .outputs)
            for __listofoutput0 in outputs {
                try outputsContainer.encode(__listofoutput0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let automatedEncodingSettingsDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.AutomatedEncodingSettings.self, forKey: .automatedEncodingSettings)
        automatedEncodingSettings = automatedEncodingSettingsDecoded
        let customNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .customName)
        customName = customNameDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let outputGroupSettingsDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.OutputGroupSettings.self, forKey: .outputGroupSettings)
        outputGroupSettings = outputGroupSettingsDecoded
        let outputsContainer = try containerValues.decodeIfPresent([MediaConvertClientTypes.Output?].self, forKey: .outputs)
        var outputsDecoded0:[MediaConvertClientTypes.Output]? = nil
        if let outputsContainer = outputsContainer {
            outputsDecoded0 = [MediaConvertClientTypes.Output]()
            for structure0 in outputsContainer {
                if let structure0 = structure0 {
                    outputsDecoded0?.append(structure0)
                }
            }
        }
        outputs = outputsDecoded0
    }
}
