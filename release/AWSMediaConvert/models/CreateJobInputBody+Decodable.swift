// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateJobInputBody: Swift.Equatable {
    let accelerationSettings: MediaConvertClientTypes.AccelerationSettings?
    let billingTagsSource: MediaConvertClientTypes.BillingTagsSource?
    let clientRequestToken: Swift.String?
    let hopDestinations: [MediaConvertClientTypes.HopDestination]?
    let jobTemplate: Swift.String?
    let priority: Swift.Int?
    let queue: Swift.String?
    let role: Swift.String?
    let settings: MediaConvertClientTypes.JobSettings?
    let simulateReservedQueue: MediaConvertClientTypes.SimulateReservedQueue?
    let statusUpdateInterval: MediaConvertClientTypes.StatusUpdateInterval?
    let tags: [Swift.String:Swift.String]?
    let userMetadata: [Swift.String:Swift.String]?
}

extension CreateJobInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accelerationSettings = "accelerationSettings"
        case billingTagsSource = "billingTagsSource"
        case clientRequestToken = "clientRequestToken"
        case hopDestinations = "hopDestinations"
        case jobTemplate = "jobTemplate"
        case priority = "priority"
        case queue = "queue"
        case role = "role"
        case settings = "settings"
        case simulateReservedQueue = "simulateReservedQueue"
        case statusUpdateInterval = "statusUpdateInterval"
        case tags = "tags"
        case userMetadata = "userMetadata"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let accelerationSettingsDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.AccelerationSettings.self, forKey: .accelerationSettings)
        accelerationSettings = accelerationSettingsDecoded
        let billingTagsSourceDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.BillingTagsSource.self, forKey: .billingTagsSource)
        billingTagsSource = billingTagsSourceDecoded
        let clientRequestTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientRequestToken)
        clientRequestToken = clientRequestTokenDecoded
        let hopDestinationsContainer = try containerValues.decodeIfPresent([MediaConvertClientTypes.HopDestination?].self, forKey: .hopDestinations)
        var hopDestinationsDecoded0:[MediaConvertClientTypes.HopDestination]? = nil
        if let hopDestinationsContainer = hopDestinationsContainer {
            hopDestinationsDecoded0 = [MediaConvertClientTypes.HopDestination]()
            for structure0 in hopDestinationsContainer {
                if let structure0 = structure0 {
                    hopDestinationsDecoded0?.append(structure0)
                }
            }
        }
        hopDestinations = hopDestinationsDecoded0
        let jobTemplateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobTemplate)
        jobTemplate = jobTemplateDecoded
        let priorityDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .priority)
        priority = priorityDecoded
        let queueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .queue)
        queue = queueDecoded
        let roleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .role)
        role = roleDecoded
        let settingsDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.JobSettings.self, forKey: .settings)
        settings = settingsDecoded
        let simulateReservedQueueDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.SimulateReservedQueue.self, forKey: .simulateReservedQueue)
        simulateReservedQueue = simulateReservedQueueDecoded
        let statusUpdateIntervalDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.StatusUpdateInterval.self, forKey: .statusUpdateInterval)
        statusUpdateInterval = statusUpdateIntervalDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, __string0) in tagsContainer {
                if let __string0 = __string0 {
                    tagsDecoded0?[key0] = __string0
                }
            }
        }
        tags = tagsDecoded0
        let userMetadataContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .userMetadata)
        var userMetadataDecoded0: [Swift.String:Swift.String]? = nil
        if let userMetadataContainer = userMetadataContainer {
            userMetadataDecoded0 = [Swift.String:Swift.String]()
            for (key0, __string0) in userMetadataContainer {
                if let __string0 = __string0 {
                    userMetadataDecoded0?[key0] = __string0
                }
            }
        }
        userMetadata = userMetadataDecoded0
    }
}
