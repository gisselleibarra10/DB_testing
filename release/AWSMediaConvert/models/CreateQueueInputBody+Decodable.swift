// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateQueueInputBody: Swift.Equatable {
    let description: Swift.String?
    let name: Swift.String?
    let pricingPlan: MediaConvertClientTypes.PricingPlan?
    let reservationPlanSettings: MediaConvertClientTypes.ReservationPlanSettings?
    let status: MediaConvertClientTypes.QueueStatus?
    let tags: [Swift.String:Swift.String]?
}

extension CreateQueueInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description = "description"
        case name = "name"
        case pricingPlan = "pricingPlan"
        case reservationPlanSettings = "reservationPlanSettings"
        case status = "status"
        case tags = "tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let pricingPlanDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.PricingPlan.self, forKey: .pricingPlan)
        pricingPlan = pricingPlanDecoded
        let reservationPlanSettingsDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.ReservationPlanSettings.self, forKey: .reservationPlanSettings)
        reservationPlanSettings = reservationPlanSettingsDecoded
        let statusDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.QueueStatus.self, forKey: .status)
        status = statusDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, __string0) in tagsContainer {
                if let __string0 = __string0 {
                    tagsDecoded0?[key0] = __string0
                }
            }
        }
        tags = tagsDecoded0
    }
}
