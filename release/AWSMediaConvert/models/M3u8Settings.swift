// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension MediaConvertClientTypes {
    /// These settings relate to the MPEG-2 transport stream (MPEG2-TS) container for the MPEG2-TS segments in your HLS outputs.
    public struct M3u8Settings: Swift.Equatable {
        /// Specify this setting only when your output will be consumed by a downstream repackaging workflow that is sensitive to very small duration differences between video and audio. For this situation, choose Match video duration (MATCH_VIDEO_DURATION). In all other cases, keep the default value, Default codec duration (DEFAULT_CODEC_DURATION). When you choose Match video duration, MediaConvert pads the output audio streams with silence or trims them to ensure that the total duration of each audio stream is at least as long as the total duration of the video stream. After padding or trimming, the audio stream duration is no more than one frame longer than the video stream. MediaConvert applies audio padding or trimming only to the end of the last segment of the output. For unsegmented outputs, MediaConvert adds padding only to the end of the file. When you keep the default value, any minor discrepancies between audio and video duration will depend on your output audio codec.
        public var audioDuration: MediaConvertClientTypes.M3u8AudioDuration?
        /// The number of audio frames to insert for each PES packet.
        public var audioFramesPerPes: Swift.Int?
        /// Packet Identifier (PID) of the elementary audio stream(s) in the transport stream. Multiple values are accepted, and can be entered in ranges and/or by comma separation.
        public var audioPids: [Swift.Int]?
        /// If you select ALIGN_TO_VIDEO, MediaConvert writes captions and data packets with Presentation Timestamp (PTS) values greater than or equal to the first video packet PTS (MediaConvert drops captions and data packets with lesser PTS values). Keep the default value (AUTO) to allow all PTS values.
        public var dataPTSControl: MediaConvertClientTypes.M3u8DataPtsControl?
        /// Specify the maximum time, in milliseconds, between Program Clock References (PCRs) inserted into the transport stream.
        public var maxPcrInterval: Swift.Int?
        /// If INSERT, Nielsen inaudible tones for media tracking will be detected in the input audio and an equivalent ID3 tag will be inserted in the output.
        public var nielsenId3: MediaConvertClientTypes.M3u8NielsenId3?
        /// The number of milliseconds between instances of this table in the output transport stream.
        public var patInterval: Swift.Int?
        /// When set to PCR_EVERY_PES_PACKET a Program Clock Reference value is inserted for every Packetized Elementary Stream (PES) header. This parameter is effective only when the PCR PID is the same as the video or audio elementary stream.
        public var pcrControl: MediaConvertClientTypes.M3u8PcrControl?
        /// Packet Identifier (PID) of the Program Clock Reference (PCR) in the transport stream. When no value is given, the encoder will assign the same value as the Video PID.
        public var pcrPid: Swift.Int?
        /// The number of milliseconds between instances of this table in the output transport stream.
        public var pmtInterval: Swift.Int?
        /// Packet Identifier (PID) for the Program Map Table (PMT) in the transport stream.
        public var pmtPid: Swift.Int?
        /// Packet Identifier (PID) of the private metadata stream in the transport stream.
        public var privateMetadataPid: Swift.Int?
        /// The value of the program number field in the Program Map Table.
        public var programNumber: Swift.Int?
        /// Packet Identifier (PID) of the SCTE-35 stream in the transport stream.
        public var scte35Pid: Swift.Int?
        /// For SCTE-35 markers from your input-- Choose Passthrough (PASSTHROUGH) if you want SCTE-35 markers that appear in your input to also appear in this output. Choose None (NONE) if you don't want SCTE-35 markers in this output. For SCTE-35 markers from an ESAM XML document-- Choose None (NONE) if you don't want manifest conditioning. Choose Passthrough (PASSTHROUGH) and choose Ad markers (adMarkers) if you do want manifest conditioning. In both cases, also provide the ESAM XML as a string in the setting Signal processing notification XML (sccXml).
        public var scte35Source: MediaConvertClientTypes.M3u8Scte35Source?
        /// Set ID3 metadata (timedMetadata) to Passthrough (PASSTHROUGH) to include ID3 metadata in this output. This includes ID3 metadata from the following features: ID3 timestamp period (timedMetadataId3Period), and Custom ID3 metadata inserter (timedMetadataInsertion). To exclude this ID3 metadata in this output: set ID3 metadata to None (NONE) or leave blank.
        public var timedMetadata: MediaConvertClientTypes.TimedMetadata?
        /// Packet Identifier (PID) of the ID3 metadata stream in the transport stream.
        public var timedMetadataPid: Swift.Int?
        /// The value of the transport stream ID field in the Program Map Table.
        public var transportStreamId: Swift.Int?
        /// Packet Identifier (PID) of the elementary video stream in the transport stream.
        public var videoPid: Swift.Int?

        public init (
            audioDuration: MediaConvertClientTypes.M3u8AudioDuration? = nil,
            audioFramesPerPes: Swift.Int? = nil,
            audioPids: [Swift.Int]? = nil,
            dataPTSControl: MediaConvertClientTypes.M3u8DataPtsControl? = nil,
            maxPcrInterval: Swift.Int? = nil,
            nielsenId3: MediaConvertClientTypes.M3u8NielsenId3? = nil,
            patInterval: Swift.Int? = nil,
            pcrControl: MediaConvertClientTypes.M3u8PcrControl? = nil,
            pcrPid: Swift.Int? = nil,
            pmtInterval: Swift.Int? = nil,
            pmtPid: Swift.Int? = nil,
            privateMetadataPid: Swift.Int? = nil,
            programNumber: Swift.Int? = nil,
            scte35Pid: Swift.Int? = nil,
            scte35Source: MediaConvertClientTypes.M3u8Scte35Source? = nil,
            timedMetadata: MediaConvertClientTypes.TimedMetadata? = nil,
            timedMetadataPid: Swift.Int? = nil,
            transportStreamId: Swift.Int? = nil,
            videoPid: Swift.Int? = nil
        )
        {
            self.audioDuration = audioDuration
            self.audioFramesPerPes = audioFramesPerPes
            self.audioPids = audioPids
            self.dataPTSControl = dataPTSControl
            self.maxPcrInterval = maxPcrInterval
            self.nielsenId3 = nielsenId3
            self.patInterval = patInterval
            self.pcrControl = pcrControl
            self.pcrPid = pcrPid
            self.pmtInterval = pmtInterval
            self.pmtPid = pmtPid
            self.privateMetadataPid = privateMetadataPid
            self.programNumber = programNumber
            self.scte35Pid = scte35Pid
            self.scte35Source = scte35Source
            self.timedMetadata = timedMetadata
            self.timedMetadataPid = timedMetadataPid
            self.transportStreamId = transportStreamId
            self.videoPid = videoPid
        }
    }

}
