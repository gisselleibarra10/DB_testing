// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension MediaConvertClientTypes {
    /// Required when you set (Codec) under (AudioDescriptions)>(CodecSettings) to the value EAC3_ATMOS.
    public struct Eac3AtmosSettings: Swift.Equatable {
        /// Specify the average bitrate for this output in bits per second. Valid values: 384k, 448k, 576k, 640k, 768k, 1024k Default value: 448k Note that MediaConvert supports 384k only with channel-based immersive (CBI) 7.1.4 and 5.1.4 inputs. For CBI 9.1.6 and other input types, MediaConvert automatically increases your output bitrate to 448k.
        public var bitrate: Swift.Int?
        /// Specify the bitstream mode for the E-AC-3 stream that the encoder emits. For more information about the EAC3 bitstream mode, see ATSC A/52-2012 (Annex E).
        public var bitstreamMode: MediaConvertClientTypes.Eac3AtmosBitstreamMode?
        /// The coding mode for Dolby Digital Plus JOC (Atmos).
        public var codingMode: MediaConvertClientTypes.Eac3AtmosCodingMode?
        /// Enable Dolby Dialogue Intelligence to adjust loudness based on dialogue analysis.
        public var dialogueIntelligence: MediaConvertClientTypes.Eac3AtmosDialogueIntelligence?
        /// Specify whether MediaConvert should use any downmix metadata from your input file. Keep the default value, Custom (SPECIFIED) to provide downmix values in your job settings. Choose Follow source (INITIALIZE_FROM_SOURCE) to use the metadata from your input. Related settings--Use these settings to specify your downmix values: Left only/Right only surround (LoRoSurroundMixLevel), Left total/Right total surround (LtRtSurroundMixLevel), Left total/Right total center (LtRtCenterMixLevel), Left only/Right only center (LoRoCenterMixLevel), and Stereo downmix (StereoDownmix). When you keep Custom (SPECIFIED) for Downmix control (DownmixControl) and you don't specify values for the related settings, MediaConvert uses default values for those settings.
        public var downmixControl: MediaConvertClientTypes.Eac3AtmosDownmixControl?
        /// Choose the Dolby dynamic range control (DRC) profile that MediaConvert uses when encoding the metadata in the Dolby stream for the line operating mode. Default value: Film light (ATMOS_STORAGE_DDP_COMPR_FILM_LIGHT) Related setting: To have MediaConvert use the value you specify here, keep the default value, Custom (SPECIFIED) for the setting Dynamic range control (DynamicRangeControl). Otherwise, MediaConvert ignores Dynamic range compression line (DynamicRangeCompressionLine). For information about the Dolby DRC operating modes and profiles, see the Dynamic Range Control chapter of the Dolby Metadata Guide at https://developer.dolby.com/globalassets/professional/documents/dolby-metadata-guide.pdf.
        public var dynamicRangeCompressionLine: MediaConvertClientTypes.Eac3AtmosDynamicRangeCompressionLine?
        /// Choose the Dolby dynamic range control (DRC) profile that MediaConvert uses when encoding the metadata in the Dolby stream for the RF operating mode. Default value: Film light (ATMOS_STORAGE_DDP_COMPR_FILM_LIGHT) Related setting: To have MediaConvert use the value you specify here, keep the default value, Custom (SPECIFIED) for the setting Dynamic range control (DynamicRangeControl). Otherwise, MediaConvert ignores Dynamic range compression RF (DynamicRangeCompressionRf). For information about the Dolby DRC operating modes and profiles, see the Dynamic Range Control chapter of the Dolby Metadata Guide at https://developer.dolby.com/globalassets/professional/documents/dolby-metadata-guide.pdf.
        public var dynamicRangeCompressionRf: MediaConvertClientTypes.Eac3AtmosDynamicRangeCompressionRf?
        /// Specify whether MediaConvert should use any dynamic range control metadata from your input file. Keep the default value, Custom (SPECIFIED), to provide dynamic range control values in your job settings. Choose Follow source (INITIALIZE_FROM_SOURCE) to use the metadata from your input. Related settings--Use these settings to specify your dynamic range control values: Dynamic range compression line (DynamicRangeCompressionLine) and Dynamic range compression RF (DynamicRangeCompressionRf). When you keep the value Custom (SPECIFIED) for Dynamic range control (DynamicRangeControl) and you don't specify values for the related settings, MediaConvert uses default values for those settings.
        public var dynamicRangeControl: MediaConvertClientTypes.Eac3AtmosDynamicRangeControl?
        /// Specify a value for the following Dolby Atmos setting: Left only/Right only center mix (Lo/Ro center). MediaConvert uses this value for downmixing. Default value: -3 dB (ATMOS_STORAGE_DDP_MIXLEV_MINUS_3_DB). Valid values: 3.0, 1.5, 0.0, -1.5, -3.0, -4.5, and -6.0. Related setting: How the service uses this value depends on the value that you choose for Stereo downmix (Eac3AtmosStereoDownmix). Related setting: To have MediaConvert use this value, keep the default value, Custom (SPECIFIED) for the setting Downmix control (DownmixControl). Otherwise, MediaConvert ignores Left only/Right only center (LoRoCenterMixLevel).
        public var loRoCenterMixLevel: Swift.Double?
        /// Specify a value for the following Dolby Atmos setting: Left only/Right only (Lo/Ro surround). MediaConvert uses this value for downmixing. Default value: -3 dB (ATMOS_STORAGE_DDP_MIXLEV_MINUS_3_DB). Valid values: -1.5, -3.0, -4.5, -6.0, and -60. The value -60 mutes the channel. Related setting: How the service uses this value depends on the value that you choose for Stereo downmix (Eac3AtmosStereoDownmix). Related setting: To have MediaConvert use this value, keep the default value, Custom (SPECIFIED) for the setting Downmix control (DownmixControl). Otherwise, MediaConvert ignores Left only/Right only surround (LoRoSurroundMixLevel).
        public var loRoSurroundMixLevel: Swift.Double?
        /// Specify a value for the following Dolby Atmos setting: Left total/Right total center mix (Lt/Rt center). MediaConvert uses this value for downmixing. Default value: -3 dB (ATMOS_STORAGE_DDP_MIXLEV_MINUS_3_DB) Valid values: 3.0, 1.5, 0.0, -1.5, -3.0, -4.5, and -6.0. Related setting: How the service uses this value depends on the value that you choose for Stereo downmix (Eac3AtmosStereoDownmix). Related setting: To have MediaConvert use this value, keep the default value, Custom (SPECIFIED) for the setting Downmix control (DownmixControl). Otherwise, MediaConvert ignores Left total/Right total center (LtRtCenterMixLevel).
        public var ltRtCenterMixLevel: Swift.Double?
        /// Specify a value for the following Dolby Atmos setting: Left total/Right total surround mix (Lt/Rt surround). MediaConvert uses this value for downmixing. Default value: -3 dB (ATMOS_STORAGE_DDP_MIXLEV_MINUS_3_DB) Valid values: -1.5, -3.0, -4.5, -6.0, and -60. The value -60 mutes the channel. Related setting: How the service uses this value depends on the value that you choose for Stereo downmix (Eac3AtmosStereoDownmix). Related setting: To have MediaConvert use this value, keep the default value, Custom (SPECIFIED) for the setting Downmix control (DownmixControl). Otherwise, the service ignores Left total/Right total surround (LtRtSurroundMixLevel).
        public var ltRtSurroundMixLevel: Swift.Double?
        /// Choose how the service meters the loudness of your audio.
        public var meteringMode: MediaConvertClientTypes.Eac3AtmosMeteringMode?
        /// This value is always 48000. It represents the sample rate in Hz.
        public var sampleRate: Swift.Int?
        /// Specify the percentage of audio content, from 0% to 100%, that must be speech in order for the encoder to use the measured speech loudness as the overall program loudness. Default value: 15%
        public var speechThreshold: Swift.Int?
        /// Choose how the service does stereo downmixing. Default value: Not indicated (ATMOS_STORAGE_DDP_DMIXMOD_NOT_INDICATED) Related setting: To have MediaConvert use this value, keep the default value, Custom (SPECIFIED) for the setting Downmix control (DownmixControl). Otherwise, MediaConvert ignores Stereo downmix (StereoDownmix).
        public var stereoDownmix: MediaConvertClientTypes.Eac3AtmosStereoDownmix?
        /// Specify whether your input audio has an additional center rear surround channel matrix encoded into your left and right surround channels.
        public var surroundExMode: MediaConvertClientTypes.Eac3AtmosSurroundExMode?

        public init (
            bitrate: Swift.Int? = nil,
            bitstreamMode: MediaConvertClientTypes.Eac3AtmosBitstreamMode? = nil,
            codingMode: MediaConvertClientTypes.Eac3AtmosCodingMode? = nil,
            dialogueIntelligence: MediaConvertClientTypes.Eac3AtmosDialogueIntelligence? = nil,
            downmixControl: MediaConvertClientTypes.Eac3AtmosDownmixControl? = nil,
            dynamicRangeCompressionLine: MediaConvertClientTypes.Eac3AtmosDynamicRangeCompressionLine? = nil,
            dynamicRangeCompressionRf: MediaConvertClientTypes.Eac3AtmosDynamicRangeCompressionRf? = nil,
            dynamicRangeControl: MediaConvertClientTypes.Eac3AtmosDynamicRangeControl? = nil,
            loRoCenterMixLevel: Swift.Double? = nil,
            loRoSurroundMixLevel: Swift.Double? = nil,
            ltRtCenterMixLevel: Swift.Double? = nil,
            ltRtSurroundMixLevel: Swift.Double? = nil,
            meteringMode: MediaConvertClientTypes.Eac3AtmosMeteringMode? = nil,
            sampleRate: Swift.Int? = nil,
            speechThreshold: Swift.Int? = nil,
            stereoDownmix: MediaConvertClientTypes.Eac3AtmosStereoDownmix? = nil,
            surroundExMode: MediaConvertClientTypes.Eac3AtmosSurroundExMode? = nil
        )
        {
            self.bitrate = bitrate
            self.bitstreamMode = bitstreamMode
            self.codingMode = codingMode
            self.dialogueIntelligence = dialogueIntelligence
            self.downmixControl = downmixControl
            self.dynamicRangeCompressionLine = dynamicRangeCompressionLine
            self.dynamicRangeCompressionRf = dynamicRangeCompressionRf
            self.dynamicRangeControl = dynamicRangeControl
            self.loRoCenterMixLevel = loRoCenterMixLevel
            self.loRoSurroundMixLevel = loRoSurroundMixLevel
            self.ltRtCenterMixLevel = ltRtCenterMixLevel
            self.ltRtSurroundMixLevel = ltRtSurroundMixLevel
            self.meteringMode = meteringMode
            self.sampleRate = sampleRate
            self.speechThreshold = speechThreshold
            self.stereoDownmix = stereoDownmix
            self.surroundExMode = surroundExMode
        }
    }

}
