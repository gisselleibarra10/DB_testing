// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension MediaConvertClientTypes {
    /// Choose how the service meters the loudness of your audio.
    public enum Eac3AtmosMeteringMode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case ituBs17701
        case ituBs17702
        case ituBs17703
        case ituBs17704
        case leqA
        case sdkUnknown(Swift.String)

        public static var allCases: [Eac3AtmosMeteringMode] {
            return [
                .ituBs17701,
                .ituBs17702,
                .ituBs17703,
                .ituBs17704,
                .leqA,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .ituBs17701: return "ITU_BS_1770_1"
            case .ituBs17702: return "ITU_BS_1770_2"
            case .ituBs17703: return "ITU_BS_1770_3"
            case .ituBs17704: return "ITU_BS_1770_4"
            case .leqA: return "LEQ_A"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = Eac3AtmosMeteringMode(rawValue: rawValue) ?? Eac3AtmosMeteringMode.sdkUnknown(rawValue)
        }
    }
}
