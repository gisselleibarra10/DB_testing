// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension MediaConvertClientTypes.M2tsSettings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case audioBufferModel = "audioBufferModel"
        case audioDuration = "audioDuration"
        case audioFramesPerPes = "audioFramesPerPes"
        case audioPids = "audioPids"
        case bitrate = "bitrate"
        case bufferModel = "bufferModel"
        case dataPTSControl = "dataPTSControl"
        case dvbNitSettings = "dvbNitSettings"
        case dvbSdtSettings = "dvbSdtSettings"
        case dvbSubPids = "dvbSubPids"
        case dvbTdtSettings = "dvbTdtSettings"
        case dvbTeletextPid = "dvbTeletextPid"
        case ebpAudioInterval = "ebpAudioInterval"
        case ebpPlacement = "ebpPlacement"
        case esRateInPes = "esRateInPes"
        case forceTsVideoEbpOrder = "forceTsVideoEbpOrder"
        case fragmentTime = "fragmentTime"
        case klvMetadata = "klvMetadata"
        case maxPcrInterval = "maxPcrInterval"
        case minEbpInterval = "minEbpInterval"
        case nielsenId3 = "nielsenId3"
        case nullPacketBitrate = "nullPacketBitrate"
        case patInterval = "patInterval"
        case pcrControl = "pcrControl"
        case pcrPid = "pcrPid"
        case pmtInterval = "pmtInterval"
        case pmtPid = "pmtPid"
        case privateMetadataPid = "privateMetadataPid"
        case programNumber = "programNumber"
        case rateMode = "rateMode"
        case scte35Esam = "scte35Esam"
        case scte35Pid = "scte35Pid"
        case scte35Source = "scte35Source"
        case segmentationMarkers = "segmentationMarkers"
        case segmentationStyle = "segmentationStyle"
        case segmentationTime = "segmentationTime"
        case timedMetadataPid = "timedMetadataPid"
        case transportStreamId = "transportStreamId"
        case videoPid = "videoPid"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let audioBufferModel = self.audioBufferModel {
            try encodeContainer.encode(audioBufferModel.rawValue, forKey: .audioBufferModel)
        }
        if let audioDuration = self.audioDuration {
            try encodeContainer.encode(audioDuration.rawValue, forKey: .audioDuration)
        }
        if let audioFramesPerPes = self.audioFramesPerPes {
            try encodeContainer.encode(audioFramesPerPes, forKey: .audioFramesPerPes)
        }
        if let audioPids = audioPids {
            var audioPidsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .audioPids)
            for __listof__integermin32max81820 in audioPids {
                try audioPidsContainer.encode(__listof__integermin32max81820)
            }
        }
        if let bitrate = self.bitrate {
            try encodeContainer.encode(bitrate, forKey: .bitrate)
        }
        if let bufferModel = self.bufferModel {
            try encodeContainer.encode(bufferModel.rawValue, forKey: .bufferModel)
        }
        if let dataPTSControl = self.dataPTSControl {
            try encodeContainer.encode(dataPTSControl.rawValue, forKey: .dataPTSControl)
        }
        if let dvbNitSettings = self.dvbNitSettings {
            try encodeContainer.encode(dvbNitSettings, forKey: .dvbNitSettings)
        }
        if let dvbSdtSettings = self.dvbSdtSettings {
            try encodeContainer.encode(dvbSdtSettings, forKey: .dvbSdtSettings)
        }
        if let dvbSubPids = dvbSubPids {
            var dvbSubPidsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .dvbSubPids)
            for __listof__integermin32max81820 in dvbSubPids {
                try dvbSubPidsContainer.encode(__listof__integermin32max81820)
            }
        }
        if let dvbTdtSettings = self.dvbTdtSettings {
            try encodeContainer.encode(dvbTdtSettings, forKey: .dvbTdtSettings)
        }
        if let dvbTeletextPid = self.dvbTeletextPid {
            try encodeContainer.encode(dvbTeletextPid, forKey: .dvbTeletextPid)
        }
        if let ebpAudioInterval = self.ebpAudioInterval {
            try encodeContainer.encode(ebpAudioInterval.rawValue, forKey: .ebpAudioInterval)
        }
        if let ebpPlacement = self.ebpPlacement {
            try encodeContainer.encode(ebpPlacement.rawValue, forKey: .ebpPlacement)
        }
        if let esRateInPes = self.esRateInPes {
            try encodeContainer.encode(esRateInPes.rawValue, forKey: .esRateInPes)
        }
        if let forceTsVideoEbpOrder = self.forceTsVideoEbpOrder {
            try encodeContainer.encode(forceTsVideoEbpOrder.rawValue, forKey: .forceTsVideoEbpOrder)
        }
        if let fragmentTime = self.fragmentTime {
            try encodeContainer.encode(fragmentTime, forKey: .fragmentTime)
        }
        if let klvMetadata = self.klvMetadata {
            try encodeContainer.encode(klvMetadata.rawValue, forKey: .klvMetadata)
        }
        if let maxPcrInterval = self.maxPcrInterval {
            try encodeContainer.encode(maxPcrInterval, forKey: .maxPcrInterval)
        }
        if let minEbpInterval = self.minEbpInterval {
            try encodeContainer.encode(minEbpInterval, forKey: .minEbpInterval)
        }
        if let nielsenId3 = self.nielsenId3 {
            try encodeContainer.encode(nielsenId3.rawValue, forKey: .nielsenId3)
        }
        if let nullPacketBitrate = self.nullPacketBitrate {
            try encodeContainer.encode(nullPacketBitrate, forKey: .nullPacketBitrate)
        }
        if let patInterval = self.patInterval {
            try encodeContainer.encode(patInterval, forKey: .patInterval)
        }
        if let pcrControl = self.pcrControl {
            try encodeContainer.encode(pcrControl.rawValue, forKey: .pcrControl)
        }
        if let pcrPid = self.pcrPid {
            try encodeContainer.encode(pcrPid, forKey: .pcrPid)
        }
        if let pmtInterval = self.pmtInterval {
            try encodeContainer.encode(pmtInterval, forKey: .pmtInterval)
        }
        if let pmtPid = self.pmtPid {
            try encodeContainer.encode(pmtPid, forKey: .pmtPid)
        }
        if let privateMetadataPid = self.privateMetadataPid {
            try encodeContainer.encode(privateMetadataPid, forKey: .privateMetadataPid)
        }
        if let programNumber = self.programNumber {
            try encodeContainer.encode(programNumber, forKey: .programNumber)
        }
        if let rateMode = self.rateMode {
            try encodeContainer.encode(rateMode.rawValue, forKey: .rateMode)
        }
        if let scte35Esam = self.scte35Esam {
            try encodeContainer.encode(scte35Esam, forKey: .scte35Esam)
        }
        if let scte35Pid = self.scte35Pid {
            try encodeContainer.encode(scte35Pid, forKey: .scte35Pid)
        }
        if let scte35Source = self.scte35Source {
            try encodeContainer.encode(scte35Source.rawValue, forKey: .scte35Source)
        }
        if let segmentationMarkers = self.segmentationMarkers {
            try encodeContainer.encode(segmentationMarkers.rawValue, forKey: .segmentationMarkers)
        }
        if let segmentationStyle = self.segmentationStyle {
            try encodeContainer.encode(segmentationStyle.rawValue, forKey: .segmentationStyle)
        }
        if let segmentationTime = self.segmentationTime {
            try encodeContainer.encode(segmentationTime, forKey: .segmentationTime)
        }
        if let timedMetadataPid = self.timedMetadataPid {
            try encodeContainer.encode(timedMetadataPid, forKey: .timedMetadataPid)
        }
        if let transportStreamId = self.transportStreamId {
            try encodeContainer.encode(transportStreamId, forKey: .transportStreamId)
        }
        if let videoPid = self.videoPid {
            try encodeContainer.encode(videoPid, forKey: .videoPid)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let audioBufferModelDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.M2tsAudioBufferModel.self, forKey: .audioBufferModel)
        audioBufferModel = audioBufferModelDecoded
        let audioDurationDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.M2tsAudioDuration.self, forKey: .audioDuration)
        audioDuration = audioDurationDecoded
        let audioFramesPerPesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .audioFramesPerPes)
        audioFramesPerPes = audioFramesPerPesDecoded
        let audioPidsContainer = try containerValues.decodeIfPresent([Swift.Int?].self, forKey: .audioPids)
        var audioPidsDecoded0:[Swift.Int]? = nil
        if let audioPidsContainer = audioPidsContainer {
            audioPidsDecoded0 = [Swift.Int]()
            for integer0 in audioPidsContainer {
                if let integer0 = integer0 {
                    audioPidsDecoded0?.append(integer0)
                }
            }
        }
        audioPids = audioPidsDecoded0
        let bitrateDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .bitrate)
        bitrate = bitrateDecoded
        let bufferModelDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.M2tsBufferModel.self, forKey: .bufferModel)
        bufferModel = bufferModelDecoded
        let dataPTSControlDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.M2tsDataPtsControl.self, forKey: .dataPTSControl)
        dataPTSControl = dataPTSControlDecoded
        let dvbNitSettingsDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.DvbNitSettings.self, forKey: .dvbNitSettings)
        dvbNitSettings = dvbNitSettingsDecoded
        let dvbSdtSettingsDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.DvbSdtSettings.self, forKey: .dvbSdtSettings)
        dvbSdtSettings = dvbSdtSettingsDecoded
        let dvbSubPidsContainer = try containerValues.decodeIfPresent([Swift.Int?].self, forKey: .dvbSubPids)
        var dvbSubPidsDecoded0:[Swift.Int]? = nil
        if let dvbSubPidsContainer = dvbSubPidsContainer {
            dvbSubPidsDecoded0 = [Swift.Int]()
            for integer0 in dvbSubPidsContainer {
                if let integer0 = integer0 {
                    dvbSubPidsDecoded0?.append(integer0)
                }
            }
        }
        dvbSubPids = dvbSubPidsDecoded0
        let dvbTdtSettingsDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.DvbTdtSettings.self, forKey: .dvbTdtSettings)
        dvbTdtSettings = dvbTdtSettingsDecoded
        let dvbTeletextPidDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .dvbTeletextPid)
        dvbTeletextPid = dvbTeletextPidDecoded
        let ebpAudioIntervalDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.M2tsEbpAudioInterval.self, forKey: .ebpAudioInterval)
        ebpAudioInterval = ebpAudioIntervalDecoded
        let ebpPlacementDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.M2tsEbpPlacement.self, forKey: .ebpPlacement)
        ebpPlacement = ebpPlacementDecoded
        let esRateInPesDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.M2tsEsRateInPes.self, forKey: .esRateInPes)
        esRateInPes = esRateInPesDecoded
        let forceTsVideoEbpOrderDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.M2tsForceTsVideoEbpOrder.self, forKey: .forceTsVideoEbpOrder)
        forceTsVideoEbpOrder = forceTsVideoEbpOrderDecoded
        let fragmentTimeDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .fragmentTime)
        fragmentTime = fragmentTimeDecoded
        let klvMetadataDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.M2tsKlvMetadata.self, forKey: .klvMetadata)
        klvMetadata = klvMetadataDecoded
        let maxPcrIntervalDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxPcrInterval)
        maxPcrInterval = maxPcrIntervalDecoded
        let minEbpIntervalDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .minEbpInterval)
        minEbpInterval = minEbpIntervalDecoded
        let nielsenId3Decoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.M2tsNielsenId3.self, forKey: .nielsenId3)
        nielsenId3 = nielsenId3Decoded
        let nullPacketBitrateDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .nullPacketBitrate)
        nullPacketBitrate = nullPacketBitrateDecoded
        let patIntervalDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .patInterval)
        patInterval = patIntervalDecoded
        let pcrControlDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.M2tsPcrControl.self, forKey: .pcrControl)
        pcrControl = pcrControlDecoded
        let pcrPidDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .pcrPid)
        pcrPid = pcrPidDecoded
        let pmtIntervalDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .pmtInterval)
        pmtInterval = pmtIntervalDecoded
        let pmtPidDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .pmtPid)
        pmtPid = pmtPidDecoded
        let privateMetadataPidDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .privateMetadataPid)
        privateMetadataPid = privateMetadataPidDecoded
        let programNumberDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .programNumber)
        programNumber = programNumberDecoded
        let rateModeDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.M2tsRateMode.self, forKey: .rateMode)
        rateMode = rateModeDecoded
        let scte35EsamDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.M2tsScte35Esam.self, forKey: .scte35Esam)
        scte35Esam = scte35EsamDecoded
        let scte35PidDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .scte35Pid)
        scte35Pid = scte35PidDecoded
        let scte35SourceDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.M2tsScte35Source.self, forKey: .scte35Source)
        scte35Source = scte35SourceDecoded
        let segmentationMarkersDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.M2tsSegmentationMarkers.self, forKey: .segmentationMarkers)
        segmentationMarkers = segmentationMarkersDecoded
        let segmentationStyleDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.M2tsSegmentationStyle.self, forKey: .segmentationStyle)
        segmentationStyle = segmentationStyleDecoded
        let segmentationTimeDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .segmentationTime)
        segmentationTime = segmentationTimeDecoded
        let timedMetadataPidDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .timedMetadataPid)
        timedMetadataPid = timedMetadataPidDecoded
        let transportStreamIdDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .transportStreamId)
        transportStreamId = transportStreamIdDecoded
        let videoPidDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .videoPid)
        videoPid = videoPidDecoded
    }
}
