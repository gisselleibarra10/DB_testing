// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension MediaConvertClientTypes {
    /// Settings related to your HLS output package. For more information, see https://docs.aws.amazon.com/mediaconvert/latest/ug/outputs-file-ABR.html. When you work directly in your JSON job specification, include this object and any required children when you set Type, under OutputGroupSettings, to HLS_GROUP_SETTINGS.
    public struct HlsGroupSettings: Swift.Equatable {
        /// Choose one or more ad marker types to decorate your Apple HLS manifest. This setting does not determine whether SCTE-35 markers appear in the outputs themselves.
        public var adMarkers: [MediaConvertClientTypes.HlsAdMarkers]?
        /// By default, the service creates one top-level .m3u8 HLS manifest for each HLS output group in your job. This default manifest references every output in the output group. To create additional top-level manifests that reference a subset of the outputs in the output group, specify a list of them here.
        public var additionalManifests: [MediaConvertClientTypes.HlsAdditionalManifest]?
        /// Ignore this setting unless you are using FairPlay DRM with Verimatrix and you encounter playback issues. Keep the default value, Include (INCLUDE), to output audio-only headers. Choose Exclude (EXCLUDE) to remove the audio-only headers from your audio segments.
        public var audioOnlyHeader: MediaConvertClientTypes.HlsAudioOnlyHeader?
        /// A partial URI prefix that will be prepended to each output in the media .m3u8 file. Can be used if base manifest is delivered from a different URL than the main .m3u8 file.
        public var baseUrl: Swift.String?
        /// Language to be used on Caption outputs
        public var captionLanguageMappings: [MediaConvertClientTypes.HlsCaptionLanguageMapping]?
        /// Applies only to 608 Embedded output captions. Insert: Include CLOSED-CAPTIONS lines in the manifest. Specify at least one language in the CC1 Language Code field. One CLOSED-CAPTION line is added for each Language Code you specify. Make sure to specify the languages in the order in which they appear in the original source (if the source is embedded format) or the order of the caption selectors (if the source is other than embedded). Otherwise, languages in the manifest will not match up properly with the output captions. None: Include CLOSED-CAPTIONS=NONE line in the manifest. Omit: Omit any CLOSED-CAPTIONS line from the manifest.
        public var captionLanguageSetting: MediaConvertClientTypes.HlsCaptionLanguageSetting?
        /// Set Caption segment length control (CaptionSegmentLengthControl) to Match video (MATCH_VIDEO) to create caption segments that align with the video segments from the first video output in this output group. For example, if the video segments are 2 seconds long, your WebVTT segments will also be 2 seconds long. Keep the default setting, Large segments (LARGE_SEGMENTS) to create caption segments that are 300 seconds long.
        public var captionSegmentLengthControl: MediaConvertClientTypes.HlsCaptionSegmentLengthControl?
        /// Disable this setting only when your workflow requires the #EXT-X-ALLOW-CACHE:no tag. Otherwise, keep the default value Enabled (ENABLED) and control caching in your video distribution set up. For example, use the Cache-Control http header.
        public var clientCache: MediaConvertClientTypes.HlsClientCache?
        /// Specification to use (RFC-6381 or the default RFC-4281) during m3u8 playlist generation.
        public var codecSpecification: MediaConvertClientTypes.HlsCodecSpecification?
        /// Use Destination (Destination) to specify the S3 output location and the output filename base. Destination accepts format identifiers. If you do not specify the base filename in the URI, the service will use the filename of the input file. If your job has multiple inputs, the service uses the filename of the first input file.
        public var destination: Swift.String?
        /// Settings associated with the destination. Will vary based on the type of destination
        public var destinationSettings: MediaConvertClientTypes.DestinationSettings?
        /// Indicates whether segments should be placed in subdirectories.
        public var directoryStructure: MediaConvertClientTypes.HlsDirectoryStructure?
        /// DRM settings.
        public var encryption: MediaConvertClientTypes.HlsEncryptionSettings?
        /// Specify whether MediaConvert generates images for trick play. Keep the default value, None (NONE), to not generate any images. Choose Thumbnail (THUMBNAIL) to generate tiled thumbnails. Choose Thumbnail and full frame (THUMBNAIL_AND_FULLFRAME) to generate tiled thumbnails and full-resolution images of single frames. MediaConvert creates a child manifest for each set of images that you generate and adds corresponding entries to the parent manifest. A common application for these images is Roku trick mode. The thumbnails and full-frame images that MediaConvert creates with this feature are compatible with this Roku specification: https://developer.roku.com/docs/developer-program/media-playback/trick-mode/hls-and-dash.md
        public var imageBasedTrickPlay: MediaConvertClientTypes.HlsImageBasedTrickPlay?
        /// Tile and thumbnail settings applicable when imageBasedTrickPlay is ADVANCED
        public var imageBasedTrickPlaySettings: MediaConvertClientTypes.HlsImageBasedTrickPlaySettings?
        /// When set to GZIP, compresses HLS playlist.
        public var manifestCompression: MediaConvertClientTypes.HlsManifestCompression?
        /// Indicates whether the output manifest should use floating point values for segment duration.
        public var manifestDurationFormat: MediaConvertClientTypes.HlsManifestDurationFormat?
        /// Keep this setting at the default value of 0, unless you are troubleshooting a problem with how devices play back the end of your video asset. If you know that player devices are hanging on the final segment of your video because the length of your final segment is too short, use this setting to specify a minimum final segment length, in seconds. Choose a value that is greater than or equal to 1 and less than your segment length. When you specify a value for this setting, the encoder will combine any final segment that is shorter than the length that you specify with the previous segment. For example, your segment length is 3 seconds and your final segment is .5 seconds without a minimum final segment length; when you set the minimum final segment length to 1, your final segment is 3.5 seconds.
        public var minFinalSegmentLength: Swift.Double?
        /// When set, Minimum Segment Size is enforced by looking ahead and back within the specified range for a nearby avail and extending the segment size if needed.
        public var minSegmentLength: Swift.Int?
        /// Indicates whether the .m3u8 manifest file should be generated for this HLS output group.
        public var outputSelection: MediaConvertClientTypes.HlsOutputSelection?
        /// Includes or excludes EXT-X-PROGRAM-DATE-TIME tag in .m3u8 manifest files. The value is calculated as follows: either the program date and time are initialized using the input timecode source, or the time is initialized using the input timecode source and the date is initialized using the timestamp_offset.
        public var programDateTime: MediaConvertClientTypes.HlsProgramDateTime?
        /// Period of insertion of EXT-X-PROGRAM-DATE-TIME entry, in seconds.
        public var programDateTimePeriod: Swift.Int?
        /// When set to SINGLE_FILE, emits program as a single media resource (.ts) file, uses #EXT-X-BYTERANGE tags to index segment for playback.
        public var segmentControl: MediaConvertClientTypes.HlsSegmentControl?
        /// Specify the length, in whole seconds, of each segment. When you don't specify a value, MediaConvert defaults to 10. Related settings: Use Segment length control (SegmentLengthControl) to specify whether the encoder enforces this value strictly. Use Segment control (HlsSegmentControl) to specify whether MediaConvert creates separate segment files or one content file that has metadata to mark the segment boundaries.
        public var segmentLength: Swift.Int?
        /// Specify how you want MediaConvert to determine the segment length. Choose Exact (EXACT) to have the encoder use the exact length that you specify with the setting Segment length (SegmentLength). This might result in extra I-frames. Choose Multiple of GOP (GOP_MULTIPLE) to have the encoder round up the segment lengths to match the next GOP boundary.
        public var segmentLengthControl: MediaConvertClientTypes.HlsSegmentLengthControl?
        /// Number of segments to write to a subdirectory before starting a new one. directoryStructure must be SINGLE_DIRECTORY for this setting to have an effect.
        public var segmentsPerSubdirectory: Swift.Int?
        /// Include or exclude RESOLUTION attribute for video in EXT-X-STREAM-INF tag of variant manifest.
        public var streamInfResolution: MediaConvertClientTypes.HlsStreamInfResolution?
        /// When set to LEGACY, the segment target duration is always rounded up to the nearest integer value above its current value in seconds. When set to SPEC\_COMPLIANT, the segment target duration is rounded up to the nearest integer value if fraction seconds are greater than or equal to 0.5 (>= 0.5) and rounded down if less than 0.5 (< 0.5). You may need to use LEGACY if your client needs to ensure that the target duration is always longer than the actual duration of the segment. Some older players may experience interrupted playback when the actual duration of a track in a segment is longer than the target duration.
        public var targetDurationCompatibilityMode: MediaConvertClientTypes.HlsTargetDurationCompatibilityMode?
        /// Specify the type of the ID3 frame (timedMetadataId3Frame) to use for ID3 timestamps (timedMetadataId3Period) in your output. To include ID3 timestamps: Specify PRIV (PRIV) or TDRL (TDRL) and set ID3 metadata (timedMetadata) to Passthrough (PASSTHROUGH). To exclude ID3 timestamps: Set ID3 timestamp frame type to None (NONE).
        public var timedMetadataId3Frame: MediaConvertClientTypes.HlsTimedMetadataId3Frame?
        /// Specify the interval in seconds to write ID3 timestamps in your output. The first timestamp starts at the output timecode and date, and increases incrementally with each ID3 timestamp. To use the default interval of 10 seconds: Leave blank. To include this metadata in your output: Set ID3 timestamp frame type (timedMetadataId3Frame) to PRIV (PRIV) or TDRL (TDRL), and set ID3 metadata (timedMetadata) to Passthrough (PASSTHROUGH).
        public var timedMetadataId3Period: Swift.Int?
        /// Provides an extra millisecond delta offset to fine tune the timestamps.
        public var timestampDeltaMilliseconds: Swift.Int?

        public init (
            adMarkers: [MediaConvertClientTypes.HlsAdMarkers]? = nil,
            additionalManifests: [MediaConvertClientTypes.HlsAdditionalManifest]? = nil,
            audioOnlyHeader: MediaConvertClientTypes.HlsAudioOnlyHeader? = nil,
            baseUrl: Swift.String? = nil,
            captionLanguageMappings: [MediaConvertClientTypes.HlsCaptionLanguageMapping]? = nil,
            captionLanguageSetting: MediaConvertClientTypes.HlsCaptionLanguageSetting? = nil,
            captionSegmentLengthControl: MediaConvertClientTypes.HlsCaptionSegmentLengthControl? = nil,
            clientCache: MediaConvertClientTypes.HlsClientCache? = nil,
            codecSpecification: MediaConvertClientTypes.HlsCodecSpecification? = nil,
            destination: Swift.String? = nil,
            destinationSettings: MediaConvertClientTypes.DestinationSettings? = nil,
            directoryStructure: MediaConvertClientTypes.HlsDirectoryStructure? = nil,
            encryption: MediaConvertClientTypes.HlsEncryptionSettings? = nil,
            imageBasedTrickPlay: MediaConvertClientTypes.HlsImageBasedTrickPlay? = nil,
            imageBasedTrickPlaySettings: MediaConvertClientTypes.HlsImageBasedTrickPlaySettings? = nil,
            manifestCompression: MediaConvertClientTypes.HlsManifestCompression? = nil,
            manifestDurationFormat: MediaConvertClientTypes.HlsManifestDurationFormat? = nil,
            minFinalSegmentLength: Swift.Double? = nil,
            minSegmentLength: Swift.Int? = nil,
            outputSelection: MediaConvertClientTypes.HlsOutputSelection? = nil,
            programDateTime: MediaConvertClientTypes.HlsProgramDateTime? = nil,
            programDateTimePeriod: Swift.Int? = nil,
            segmentControl: MediaConvertClientTypes.HlsSegmentControl? = nil,
            segmentLength: Swift.Int? = nil,
            segmentLengthControl: MediaConvertClientTypes.HlsSegmentLengthControl? = nil,
            segmentsPerSubdirectory: Swift.Int? = nil,
            streamInfResolution: MediaConvertClientTypes.HlsStreamInfResolution? = nil,
            targetDurationCompatibilityMode: MediaConvertClientTypes.HlsTargetDurationCompatibilityMode? = nil,
            timedMetadataId3Frame: MediaConvertClientTypes.HlsTimedMetadataId3Frame? = nil,
            timedMetadataId3Period: Swift.Int? = nil,
            timestampDeltaMilliseconds: Swift.Int? = nil
        )
        {
            self.adMarkers = adMarkers
            self.additionalManifests = additionalManifests
            self.audioOnlyHeader = audioOnlyHeader
            self.baseUrl = baseUrl
            self.captionLanguageMappings = captionLanguageMappings
            self.captionLanguageSetting = captionLanguageSetting
            self.captionSegmentLengthControl = captionSegmentLengthControl
            self.clientCache = clientCache
            self.codecSpecification = codecSpecification
            self.destination = destination
            self.destinationSettings = destinationSettings
            self.directoryStructure = directoryStructure
            self.encryption = encryption
            self.imageBasedTrickPlay = imageBasedTrickPlay
            self.imageBasedTrickPlaySettings = imageBasedTrickPlaySettings
            self.manifestCompression = manifestCompression
            self.manifestDurationFormat = manifestDurationFormat
            self.minFinalSegmentLength = minFinalSegmentLength
            self.minSegmentLength = minSegmentLength
            self.outputSelection = outputSelection
            self.programDateTime = programDateTime
            self.programDateTimePeriod = programDateTimePeriod
            self.segmentControl = segmentControl
            self.segmentLength = segmentLength
            self.segmentLengthControl = segmentLengthControl
            self.segmentsPerSubdirectory = segmentsPerSubdirectory
            self.streamInfResolution = streamInfResolution
            self.targetDurationCompatibilityMode = targetDurationCompatibilityMode
            self.timedMetadataId3Frame = timedMetadataId3Frame
            self.timedMetadataId3Period = timedMetadataId3Period
            self.timestampDeltaMilliseconds = timestampDeltaMilliseconds
        }
    }

}
