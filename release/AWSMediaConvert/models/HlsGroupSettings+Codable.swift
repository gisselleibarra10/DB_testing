// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension MediaConvertClientTypes.HlsGroupSettings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case adMarkers = "adMarkers"
        case additionalManifests = "additionalManifests"
        case audioOnlyHeader = "audioOnlyHeader"
        case baseUrl = "baseUrl"
        case captionLanguageMappings = "captionLanguageMappings"
        case captionLanguageSetting = "captionLanguageSetting"
        case captionSegmentLengthControl = "captionSegmentLengthControl"
        case clientCache = "clientCache"
        case codecSpecification = "codecSpecification"
        case destination = "destination"
        case destinationSettings = "destinationSettings"
        case directoryStructure = "directoryStructure"
        case encryption = "encryption"
        case imageBasedTrickPlay = "imageBasedTrickPlay"
        case imageBasedTrickPlaySettings = "imageBasedTrickPlaySettings"
        case manifestCompression = "manifestCompression"
        case manifestDurationFormat = "manifestDurationFormat"
        case minFinalSegmentLength = "minFinalSegmentLength"
        case minSegmentLength = "minSegmentLength"
        case outputSelection = "outputSelection"
        case programDateTime = "programDateTime"
        case programDateTimePeriod = "programDateTimePeriod"
        case segmentControl = "segmentControl"
        case segmentLength = "segmentLength"
        case segmentLengthControl = "segmentLengthControl"
        case segmentsPerSubdirectory = "segmentsPerSubdirectory"
        case streamInfResolution = "streamInfResolution"
        case targetDurationCompatibilityMode = "targetDurationCompatibilityMode"
        case timedMetadataId3Frame = "timedMetadataId3Frame"
        case timedMetadataId3Period = "timedMetadataId3Period"
        case timestampDeltaMilliseconds = "timestampDeltaMilliseconds"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let adMarkers = adMarkers {
            var adMarkersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .adMarkers)
            for __listofhlsadmarkers0 in adMarkers {
                try adMarkersContainer.encode(__listofhlsadmarkers0.rawValue)
            }
        }
        if let additionalManifests = additionalManifests {
            var additionalManifestsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .additionalManifests)
            for __listofhlsadditionalmanifest0 in additionalManifests {
                try additionalManifestsContainer.encode(__listofhlsadditionalmanifest0)
            }
        }
        if let audioOnlyHeader = self.audioOnlyHeader {
            try encodeContainer.encode(audioOnlyHeader.rawValue, forKey: .audioOnlyHeader)
        }
        if let baseUrl = self.baseUrl {
            try encodeContainer.encode(baseUrl, forKey: .baseUrl)
        }
        if let captionLanguageMappings = captionLanguageMappings {
            var captionLanguageMappingsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .captionLanguageMappings)
            for __listofhlscaptionlanguagemapping0 in captionLanguageMappings {
                try captionLanguageMappingsContainer.encode(__listofhlscaptionlanguagemapping0)
            }
        }
        if let captionLanguageSetting = self.captionLanguageSetting {
            try encodeContainer.encode(captionLanguageSetting.rawValue, forKey: .captionLanguageSetting)
        }
        if let captionSegmentLengthControl = self.captionSegmentLengthControl {
            try encodeContainer.encode(captionSegmentLengthControl.rawValue, forKey: .captionSegmentLengthControl)
        }
        if let clientCache = self.clientCache {
            try encodeContainer.encode(clientCache.rawValue, forKey: .clientCache)
        }
        if let codecSpecification = self.codecSpecification {
            try encodeContainer.encode(codecSpecification.rawValue, forKey: .codecSpecification)
        }
        if let destination = self.destination {
            try encodeContainer.encode(destination, forKey: .destination)
        }
        if let destinationSettings = self.destinationSettings {
            try encodeContainer.encode(destinationSettings, forKey: .destinationSettings)
        }
        if let directoryStructure = self.directoryStructure {
            try encodeContainer.encode(directoryStructure.rawValue, forKey: .directoryStructure)
        }
        if let encryption = self.encryption {
            try encodeContainer.encode(encryption, forKey: .encryption)
        }
        if let imageBasedTrickPlay = self.imageBasedTrickPlay {
            try encodeContainer.encode(imageBasedTrickPlay.rawValue, forKey: .imageBasedTrickPlay)
        }
        if let imageBasedTrickPlaySettings = self.imageBasedTrickPlaySettings {
            try encodeContainer.encode(imageBasedTrickPlaySettings, forKey: .imageBasedTrickPlaySettings)
        }
        if let manifestCompression = self.manifestCompression {
            try encodeContainer.encode(manifestCompression.rawValue, forKey: .manifestCompression)
        }
        if let manifestDurationFormat = self.manifestDurationFormat {
            try encodeContainer.encode(manifestDurationFormat.rawValue, forKey: .manifestDurationFormat)
        }
        if let minFinalSegmentLength = self.minFinalSegmentLength {
            try encodeContainer.encode(minFinalSegmentLength, forKey: .minFinalSegmentLength)
        }
        if let minSegmentLength = self.minSegmentLength {
            try encodeContainer.encode(minSegmentLength, forKey: .minSegmentLength)
        }
        if let outputSelection = self.outputSelection {
            try encodeContainer.encode(outputSelection.rawValue, forKey: .outputSelection)
        }
        if let programDateTime = self.programDateTime {
            try encodeContainer.encode(programDateTime.rawValue, forKey: .programDateTime)
        }
        if let programDateTimePeriod = self.programDateTimePeriod {
            try encodeContainer.encode(programDateTimePeriod, forKey: .programDateTimePeriod)
        }
        if let segmentControl = self.segmentControl {
            try encodeContainer.encode(segmentControl.rawValue, forKey: .segmentControl)
        }
        if let segmentLength = self.segmentLength {
            try encodeContainer.encode(segmentLength, forKey: .segmentLength)
        }
        if let segmentLengthControl = self.segmentLengthControl {
            try encodeContainer.encode(segmentLengthControl.rawValue, forKey: .segmentLengthControl)
        }
        if let segmentsPerSubdirectory = self.segmentsPerSubdirectory {
            try encodeContainer.encode(segmentsPerSubdirectory, forKey: .segmentsPerSubdirectory)
        }
        if let streamInfResolution = self.streamInfResolution {
            try encodeContainer.encode(streamInfResolution.rawValue, forKey: .streamInfResolution)
        }
        if let targetDurationCompatibilityMode = self.targetDurationCompatibilityMode {
            try encodeContainer.encode(targetDurationCompatibilityMode.rawValue, forKey: .targetDurationCompatibilityMode)
        }
        if let timedMetadataId3Frame = self.timedMetadataId3Frame {
            try encodeContainer.encode(timedMetadataId3Frame.rawValue, forKey: .timedMetadataId3Frame)
        }
        if let timedMetadataId3Period = self.timedMetadataId3Period {
            try encodeContainer.encode(timedMetadataId3Period, forKey: .timedMetadataId3Period)
        }
        if let timestampDeltaMilliseconds = self.timestampDeltaMilliseconds {
            try encodeContainer.encode(timestampDeltaMilliseconds, forKey: .timestampDeltaMilliseconds)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let adMarkersContainer = try containerValues.decodeIfPresent([MediaConvertClientTypes.HlsAdMarkers?].self, forKey: .adMarkers)
        var adMarkersDecoded0:[MediaConvertClientTypes.HlsAdMarkers]? = nil
        if let adMarkersContainer = adMarkersContainer {
            adMarkersDecoded0 = [MediaConvertClientTypes.HlsAdMarkers]()
            for string0 in adMarkersContainer {
                if let string0 = string0 {
                    adMarkersDecoded0?.append(string0)
                }
            }
        }
        adMarkers = adMarkersDecoded0
        let additionalManifestsContainer = try containerValues.decodeIfPresent([MediaConvertClientTypes.HlsAdditionalManifest?].self, forKey: .additionalManifests)
        var additionalManifestsDecoded0:[MediaConvertClientTypes.HlsAdditionalManifest]? = nil
        if let additionalManifestsContainer = additionalManifestsContainer {
            additionalManifestsDecoded0 = [MediaConvertClientTypes.HlsAdditionalManifest]()
            for structure0 in additionalManifestsContainer {
                if let structure0 = structure0 {
                    additionalManifestsDecoded0?.append(structure0)
                }
            }
        }
        additionalManifests = additionalManifestsDecoded0
        let audioOnlyHeaderDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.HlsAudioOnlyHeader.self, forKey: .audioOnlyHeader)
        audioOnlyHeader = audioOnlyHeaderDecoded
        let baseUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .baseUrl)
        baseUrl = baseUrlDecoded
        let captionLanguageMappingsContainer = try containerValues.decodeIfPresent([MediaConvertClientTypes.HlsCaptionLanguageMapping?].self, forKey: .captionLanguageMappings)
        var captionLanguageMappingsDecoded0:[MediaConvertClientTypes.HlsCaptionLanguageMapping]? = nil
        if let captionLanguageMappingsContainer = captionLanguageMappingsContainer {
            captionLanguageMappingsDecoded0 = [MediaConvertClientTypes.HlsCaptionLanguageMapping]()
            for structure0 in captionLanguageMappingsContainer {
                if let structure0 = structure0 {
                    captionLanguageMappingsDecoded0?.append(structure0)
                }
            }
        }
        captionLanguageMappings = captionLanguageMappingsDecoded0
        let captionLanguageSettingDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.HlsCaptionLanguageSetting.self, forKey: .captionLanguageSetting)
        captionLanguageSetting = captionLanguageSettingDecoded
        let captionSegmentLengthControlDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.HlsCaptionSegmentLengthControl.self, forKey: .captionSegmentLengthControl)
        captionSegmentLengthControl = captionSegmentLengthControlDecoded
        let clientCacheDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.HlsClientCache.self, forKey: .clientCache)
        clientCache = clientCacheDecoded
        let codecSpecificationDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.HlsCodecSpecification.self, forKey: .codecSpecification)
        codecSpecification = codecSpecificationDecoded
        let destinationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .destination)
        destination = destinationDecoded
        let destinationSettingsDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.DestinationSettings.self, forKey: .destinationSettings)
        destinationSettings = destinationSettingsDecoded
        let directoryStructureDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.HlsDirectoryStructure.self, forKey: .directoryStructure)
        directoryStructure = directoryStructureDecoded
        let encryptionDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.HlsEncryptionSettings.self, forKey: .encryption)
        encryption = encryptionDecoded
        let imageBasedTrickPlayDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.HlsImageBasedTrickPlay.self, forKey: .imageBasedTrickPlay)
        imageBasedTrickPlay = imageBasedTrickPlayDecoded
        let imageBasedTrickPlaySettingsDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.HlsImageBasedTrickPlaySettings.self, forKey: .imageBasedTrickPlaySettings)
        imageBasedTrickPlaySettings = imageBasedTrickPlaySettingsDecoded
        let manifestCompressionDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.HlsManifestCompression.self, forKey: .manifestCompression)
        manifestCompression = manifestCompressionDecoded
        let manifestDurationFormatDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.HlsManifestDurationFormat.self, forKey: .manifestDurationFormat)
        manifestDurationFormat = manifestDurationFormatDecoded
        let minFinalSegmentLengthDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .minFinalSegmentLength)
        minFinalSegmentLength = minFinalSegmentLengthDecoded
        let minSegmentLengthDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .minSegmentLength)
        minSegmentLength = minSegmentLengthDecoded
        let outputSelectionDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.HlsOutputSelection.self, forKey: .outputSelection)
        outputSelection = outputSelectionDecoded
        let programDateTimeDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.HlsProgramDateTime.self, forKey: .programDateTime)
        programDateTime = programDateTimeDecoded
        let programDateTimePeriodDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .programDateTimePeriod)
        programDateTimePeriod = programDateTimePeriodDecoded
        let segmentControlDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.HlsSegmentControl.self, forKey: .segmentControl)
        segmentControl = segmentControlDecoded
        let segmentLengthDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .segmentLength)
        segmentLength = segmentLengthDecoded
        let segmentLengthControlDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.HlsSegmentLengthControl.self, forKey: .segmentLengthControl)
        segmentLengthControl = segmentLengthControlDecoded
        let segmentsPerSubdirectoryDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .segmentsPerSubdirectory)
        segmentsPerSubdirectory = segmentsPerSubdirectoryDecoded
        let streamInfResolutionDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.HlsStreamInfResolution.self, forKey: .streamInfResolution)
        streamInfResolution = streamInfResolutionDecoded
        let targetDurationCompatibilityModeDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.HlsTargetDurationCompatibilityMode.self, forKey: .targetDurationCompatibilityMode)
        targetDurationCompatibilityMode = targetDurationCompatibilityModeDecoded
        let timedMetadataId3FrameDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.HlsTimedMetadataId3Frame.self, forKey: .timedMetadataId3Frame)
        timedMetadataId3Frame = timedMetadataId3FrameDecoded
        let timedMetadataId3PeriodDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .timedMetadataId3Period)
        timedMetadataId3Period = timedMetadataId3PeriodDecoded
        let timestampDeltaMillisecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .timestampDeltaMilliseconds)
        timestampDeltaMilliseconds = timestampDeltaMillisecondsDecoded
    }
}
