// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension MediaConvertClientTypes {
    /// Settings for HLS encryption
    public struct HlsEncryptionSettings: Swift.Equatable {
        /// This is a 128-bit, 16-byte hex value represented by a 32-character text string. If this parameter is not set then the Initialization Vector will follow the segment number by default.
        public var constantInitializationVector: Swift.String?
        /// Encrypts the segments with the given encryption scheme. Leave blank to disable. Selecting 'Disabled' in the web interface also disables encryption.
        public var encryptionMethod: MediaConvertClientTypes.HlsEncryptionType?
        /// The Initialization Vector is a 128-bit number used in conjunction with the key for encrypting blocks. If set to INCLUDE, Initialization Vector is listed in the manifest. Otherwise Initialization Vector is not in the manifest.
        public var initializationVectorInManifest: MediaConvertClientTypes.HlsInitializationVectorInManifest?
        /// Enable this setting to insert the EXT-X-SESSION-KEY element into the master playlist. This allows for offline Apple HLS FairPlay content protection.
        public var offlineEncrypted: MediaConvertClientTypes.HlsOfflineEncrypted?
        /// If your output group type is HLS, DASH, or Microsoft Smooth, use these settings when doing DRM encryption with a SPEKE-compliant key provider. If your output group type is CMAF, use the SpekeKeyProviderCmaf settings instead.
        public var spekeKeyProvider: MediaConvertClientTypes.SpekeKeyProvider?
        /// Use these settings to set up encryption with a static key provider.
        public var staticKeyProvider: MediaConvertClientTypes.StaticKeyProvider?
        /// Specify whether your DRM encryption key is static or from a key provider that follows the SPEKE standard. For more information about SPEKE, see https://docs.aws.amazon.com/speke/latest/documentation/what-is-speke.html.
        public var type: MediaConvertClientTypes.HlsKeyProviderType?

        public init (
            constantInitializationVector: Swift.String? = nil,
            encryptionMethod: MediaConvertClientTypes.HlsEncryptionType? = nil,
            initializationVectorInManifest: MediaConvertClientTypes.HlsInitializationVectorInManifest? = nil,
            offlineEncrypted: MediaConvertClientTypes.HlsOfflineEncrypted? = nil,
            spekeKeyProvider: MediaConvertClientTypes.SpekeKeyProvider? = nil,
            staticKeyProvider: MediaConvertClientTypes.StaticKeyProvider? = nil,
            type: MediaConvertClientTypes.HlsKeyProviderType? = nil
        )
        {
            self.constantInitializationVector = constantInitializationVector
            self.encryptionMethod = encryptionMethod
            self.initializationVectorInManifest = initializationVectorInManifest
            self.offlineEncrypted = offlineEncrypted
            self.spekeKeyProvider = spekeKeyProvider
            self.staticKeyProvider = staticKeyProvider
            self.type = type
        }
    }

}
