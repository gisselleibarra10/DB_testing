// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension MediaConvertClientTypes {
    /// Details about the pricing plan for your reserved queue. Required for reserved queues and not applicable to on-demand queues.
    public struct ReservationPlan: Swift.Equatable {
        /// The length of the term of your reserved queue pricing plan commitment.
        public var commitment: MediaConvertClientTypes.Commitment?
        /// The timestamp in epoch seconds for when the current pricing plan term for this reserved queue expires.
        public var expiresAt: ClientRuntime.Date?
        /// The timestamp in epoch seconds for when you set up the current pricing plan for this reserved queue.
        public var purchasedAt: ClientRuntime.Date?
        /// Specifies whether the term of your reserved queue pricing plan is automatically extended (AUTO_RENEW) or expires (EXPIRE) at the end of the term.
        public var renewalType: MediaConvertClientTypes.RenewalType?
        /// Specifies the number of reserved transcode slots (RTS) for this queue. The number of RTS determines how many jobs the queue can process in parallel; each RTS can process one job at a time. When you increase this number, you extend your existing commitment with a new 12-month commitment for a larger number of RTS. The new commitment begins when you purchase the additional capacity. You can't decrease the number of RTS in your reserved queue.
        public var reservedSlots: Swift.Int?
        /// Specifies whether the pricing plan for your reserved queue is ACTIVE or EXPIRED.
        public var status: MediaConvertClientTypes.ReservationPlanStatus?

        public init (
            commitment: MediaConvertClientTypes.Commitment? = nil,
            expiresAt: ClientRuntime.Date? = nil,
            purchasedAt: ClientRuntime.Date? = nil,
            renewalType: MediaConvertClientTypes.RenewalType? = nil,
            reservedSlots: Swift.Int? = nil,
            status: MediaConvertClientTypes.ReservationPlanStatus? = nil
        )
        {
            self.commitment = commitment
            self.expiresAt = expiresAt
            self.purchasedAt = purchasedAt
            self.renewalType = renewalType
            self.reservedSlots = reservedSlots
            self.status = status
        }
    }

}
