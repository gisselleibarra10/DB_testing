// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension MediaConvertClientTypes.XavcSettings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case adaptiveQuantization = "adaptiveQuantization"
        case entropyEncoding = "entropyEncoding"
        case framerateControl = "framerateControl"
        case framerateConversionAlgorithm = "framerateConversionAlgorithm"
        case framerateDenominator = "framerateDenominator"
        case framerateNumerator = "framerateNumerator"
        case profile = "profile"
        case slowPal = "slowPal"
        case softness = "softness"
        case spatialAdaptiveQuantization = "spatialAdaptiveQuantization"
        case temporalAdaptiveQuantization = "temporalAdaptiveQuantization"
        case xavc4kIntraCbgProfileSettings = "xavc4kIntraCbgProfileSettings"
        case xavc4kIntraVbrProfileSettings = "xavc4kIntraVbrProfileSettings"
        case xavc4kProfileSettings = "xavc4kProfileSettings"
        case xavcHdIntraCbgProfileSettings = "xavcHdIntraCbgProfileSettings"
        case xavcHdProfileSettings = "xavcHdProfileSettings"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let adaptiveQuantization = self.adaptiveQuantization {
            try encodeContainer.encode(adaptiveQuantization.rawValue, forKey: .adaptiveQuantization)
        }
        if let entropyEncoding = self.entropyEncoding {
            try encodeContainer.encode(entropyEncoding.rawValue, forKey: .entropyEncoding)
        }
        if let framerateControl = self.framerateControl {
            try encodeContainer.encode(framerateControl.rawValue, forKey: .framerateControl)
        }
        if let framerateConversionAlgorithm = self.framerateConversionAlgorithm {
            try encodeContainer.encode(framerateConversionAlgorithm.rawValue, forKey: .framerateConversionAlgorithm)
        }
        if let framerateDenominator = self.framerateDenominator {
            try encodeContainer.encode(framerateDenominator, forKey: .framerateDenominator)
        }
        if let framerateNumerator = self.framerateNumerator {
            try encodeContainer.encode(framerateNumerator, forKey: .framerateNumerator)
        }
        if let profile = self.profile {
            try encodeContainer.encode(profile.rawValue, forKey: .profile)
        }
        if let slowPal = self.slowPal {
            try encodeContainer.encode(slowPal.rawValue, forKey: .slowPal)
        }
        if let softness = self.softness {
            try encodeContainer.encode(softness, forKey: .softness)
        }
        if let spatialAdaptiveQuantization = self.spatialAdaptiveQuantization {
            try encodeContainer.encode(spatialAdaptiveQuantization.rawValue, forKey: .spatialAdaptiveQuantization)
        }
        if let temporalAdaptiveQuantization = self.temporalAdaptiveQuantization {
            try encodeContainer.encode(temporalAdaptiveQuantization.rawValue, forKey: .temporalAdaptiveQuantization)
        }
        if let xavc4kIntraCbgProfileSettings = self.xavc4kIntraCbgProfileSettings {
            try encodeContainer.encode(xavc4kIntraCbgProfileSettings, forKey: .xavc4kIntraCbgProfileSettings)
        }
        if let xavc4kIntraVbrProfileSettings = self.xavc4kIntraVbrProfileSettings {
            try encodeContainer.encode(xavc4kIntraVbrProfileSettings, forKey: .xavc4kIntraVbrProfileSettings)
        }
        if let xavc4kProfileSettings = self.xavc4kProfileSettings {
            try encodeContainer.encode(xavc4kProfileSettings, forKey: .xavc4kProfileSettings)
        }
        if let xavcHdIntraCbgProfileSettings = self.xavcHdIntraCbgProfileSettings {
            try encodeContainer.encode(xavcHdIntraCbgProfileSettings, forKey: .xavcHdIntraCbgProfileSettings)
        }
        if let xavcHdProfileSettings = self.xavcHdProfileSettings {
            try encodeContainer.encode(xavcHdProfileSettings, forKey: .xavcHdProfileSettings)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let adaptiveQuantizationDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.XavcAdaptiveQuantization.self, forKey: .adaptiveQuantization)
        adaptiveQuantization = adaptiveQuantizationDecoded
        let entropyEncodingDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.XavcEntropyEncoding.self, forKey: .entropyEncoding)
        entropyEncoding = entropyEncodingDecoded
        let framerateControlDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.XavcFramerateControl.self, forKey: .framerateControl)
        framerateControl = framerateControlDecoded
        let framerateConversionAlgorithmDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.XavcFramerateConversionAlgorithm.self, forKey: .framerateConversionAlgorithm)
        framerateConversionAlgorithm = framerateConversionAlgorithmDecoded
        let framerateDenominatorDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .framerateDenominator)
        framerateDenominator = framerateDenominatorDecoded
        let framerateNumeratorDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .framerateNumerator)
        framerateNumerator = framerateNumeratorDecoded
        let profileDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.XavcProfile.self, forKey: .profile)
        profile = profileDecoded
        let slowPalDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.XavcSlowPal.self, forKey: .slowPal)
        slowPal = slowPalDecoded
        let softnessDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .softness)
        softness = softnessDecoded
        let spatialAdaptiveQuantizationDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.XavcSpatialAdaptiveQuantization.self, forKey: .spatialAdaptiveQuantization)
        spatialAdaptiveQuantization = spatialAdaptiveQuantizationDecoded
        let temporalAdaptiveQuantizationDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.XavcTemporalAdaptiveQuantization.self, forKey: .temporalAdaptiveQuantization)
        temporalAdaptiveQuantization = temporalAdaptiveQuantizationDecoded
        let xavc4kIntraCbgProfileSettingsDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.Xavc4kIntraCbgProfileSettings.self, forKey: .xavc4kIntraCbgProfileSettings)
        xavc4kIntraCbgProfileSettings = xavc4kIntraCbgProfileSettingsDecoded
        let xavc4kIntraVbrProfileSettingsDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.Xavc4kIntraVbrProfileSettings.self, forKey: .xavc4kIntraVbrProfileSettings)
        xavc4kIntraVbrProfileSettings = xavc4kIntraVbrProfileSettingsDecoded
        let xavc4kProfileSettingsDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.Xavc4kProfileSettings.self, forKey: .xavc4kProfileSettings)
        xavc4kProfileSettings = xavc4kProfileSettingsDecoded
        let xavcHdIntraCbgProfileSettingsDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.XavcHdIntraCbgProfileSettings.self, forKey: .xavcHdIntraCbgProfileSettings)
        xavcHdIntraCbgProfileSettings = xavcHdIntraCbgProfileSettingsDecoded
        let xavcHdProfileSettingsDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.XavcHdProfileSettings.self, forKey: .xavcHdProfileSettings)
        xavcHdProfileSettings = xavcHdProfileSettingsDecoded
    }
}
