// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension MediaConvertClientTypes.VideoCodecSettings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case av1Settings = "av1Settings"
        case avcIntraSettings = "avcIntraSettings"
        case codec = "codec"
        case frameCaptureSettings = "frameCaptureSettings"
        case h264Settings = "h264Settings"
        case h265Settings = "h265Settings"
        case mpeg2Settings = "mpeg2Settings"
        case proresSettings = "proresSettings"
        case vc3Settings = "vc3Settings"
        case vp8Settings = "vp8Settings"
        case vp9Settings = "vp9Settings"
        case xavcSettings = "xavcSettings"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let av1Settings = self.av1Settings {
            try encodeContainer.encode(av1Settings, forKey: .av1Settings)
        }
        if let avcIntraSettings = self.avcIntraSettings {
            try encodeContainer.encode(avcIntraSettings, forKey: .avcIntraSettings)
        }
        if let codec = self.codec {
            try encodeContainer.encode(codec.rawValue, forKey: .codec)
        }
        if let frameCaptureSettings = self.frameCaptureSettings {
            try encodeContainer.encode(frameCaptureSettings, forKey: .frameCaptureSettings)
        }
        if let h264Settings = self.h264Settings {
            try encodeContainer.encode(h264Settings, forKey: .h264Settings)
        }
        if let h265Settings = self.h265Settings {
            try encodeContainer.encode(h265Settings, forKey: .h265Settings)
        }
        if let mpeg2Settings = self.mpeg2Settings {
            try encodeContainer.encode(mpeg2Settings, forKey: .mpeg2Settings)
        }
        if let proresSettings = self.proresSettings {
            try encodeContainer.encode(proresSettings, forKey: .proresSettings)
        }
        if let vc3Settings = self.vc3Settings {
            try encodeContainer.encode(vc3Settings, forKey: .vc3Settings)
        }
        if let vp8Settings = self.vp8Settings {
            try encodeContainer.encode(vp8Settings, forKey: .vp8Settings)
        }
        if let vp9Settings = self.vp9Settings {
            try encodeContainer.encode(vp9Settings, forKey: .vp9Settings)
        }
        if let xavcSettings = self.xavcSettings {
            try encodeContainer.encode(xavcSettings, forKey: .xavcSettings)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let av1SettingsDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.Av1Settings.self, forKey: .av1Settings)
        av1Settings = av1SettingsDecoded
        let avcIntraSettingsDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.AvcIntraSettings.self, forKey: .avcIntraSettings)
        avcIntraSettings = avcIntraSettingsDecoded
        let codecDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.VideoCodec.self, forKey: .codec)
        codec = codecDecoded
        let frameCaptureSettingsDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.FrameCaptureSettings.self, forKey: .frameCaptureSettings)
        frameCaptureSettings = frameCaptureSettingsDecoded
        let h264SettingsDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.H264Settings.self, forKey: .h264Settings)
        h264Settings = h264SettingsDecoded
        let h265SettingsDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.H265Settings.self, forKey: .h265Settings)
        h265Settings = h265SettingsDecoded
        let mpeg2SettingsDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.Mpeg2Settings.self, forKey: .mpeg2Settings)
        mpeg2Settings = mpeg2SettingsDecoded
        let proresSettingsDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.ProresSettings.self, forKey: .proresSettings)
        proresSettings = proresSettingsDecoded
        let vc3SettingsDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.Vc3Settings.self, forKey: .vc3Settings)
        vc3Settings = vc3SettingsDecoded
        let vp8SettingsDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.Vp8Settings.self, forKey: .vp8Settings)
        vp8Settings = vp8SettingsDecoded
        let vp9SettingsDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.Vp9Settings.self, forKey: .vp9Settings)
        vp9Settings = vp9SettingsDecoded
        let xavcSettingsDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.XavcSettings.self, forKey: .xavcSettings)
        xavcSettings = xavcSettingsDecoded
    }
}
