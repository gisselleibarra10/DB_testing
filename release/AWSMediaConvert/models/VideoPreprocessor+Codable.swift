// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension MediaConvertClientTypes.VideoPreprocessor: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case colorCorrector = "colorCorrector"
        case deinterlacer = "deinterlacer"
        case dolbyVision = "dolbyVision"
        case hdr10Plus = "hdr10Plus"
        case imageInserter = "imageInserter"
        case noiseReducer = "noiseReducer"
        case partnerWatermarking = "partnerWatermarking"
        case timecodeBurnin = "timecodeBurnin"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let colorCorrector = self.colorCorrector {
            try encodeContainer.encode(colorCorrector, forKey: .colorCorrector)
        }
        if let deinterlacer = self.deinterlacer {
            try encodeContainer.encode(deinterlacer, forKey: .deinterlacer)
        }
        if let dolbyVision = self.dolbyVision {
            try encodeContainer.encode(dolbyVision, forKey: .dolbyVision)
        }
        if let hdr10Plus = self.hdr10Plus {
            try encodeContainer.encode(hdr10Plus, forKey: .hdr10Plus)
        }
        if let imageInserter = self.imageInserter {
            try encodeContainer.encode(imageInserter, forKey: .imageInserter)
        }
        if let noiseReducer = self.noiseReducer {
            try encodeContainer.encode(noiseReducer, forKey: .noiseReducer)
        }
        if let partnerWatermarking = self.partnerWatermarking {
            try encodeContainer.encode(partnerWatermarking, forKey: .partnerWatermarking)
        }
        if let timecodeBurnin = self.timecodeBurnin {
            try encodeContainer.encode(timecodeBurnin, forKey: .timecodeBurnin)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let colorCorrectorDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.ColorCorrector.self, forKey: .colorCorrector)
        colorCorrector = colorCorrectorDecoded
        let deinterlacerDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.Deinterlacer.self, forKey: .deinterlacer)
        deinterlacer = deinterlacerDecoded
        let dolbyVisionDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.DolbyVision.self, forKey: .dolbyVision)
        dolbyVision = dolbyVisionDecoded
        let hdr10PlusDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.Hdr10Plus.self, forKey: .hdr10Plus)
        hdr10Plus = hdr10PlusDecoded
        let imageInserterDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.ImageInserter.self, forKey: .imageInserter)
        imageInserter = imageInserterDecoded
        let noiseReducerDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.NoiseReducer.self, forKey: .noiseReducer)
        noiseReducer = noiseReducerDecoded
        let partnerWatermarkingDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.PartnerWatermarking.self, forKey: .partnerWatermarking)
        partnerWatermarking = partnerWatermarkingDecoded
        let timecodeBurninDecoded = try containerValues.decodeIfPresent(MediaConvertClientTypes.TimecodeBurnin.self, forKey: .timecodeBurnin)
        timecodeBurnin = timecodeBurninDecoded
    }
}
