// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension WafClientTypes.ByteMatchSet: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case byteMatchSetId = "ByteMatchSetId"
        case byteMatchTuples = "ByteMatchTuples"
        case name = "Name"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let byteMatchSetId = self.byteMatchSetId {
            try encodeContainer.encode(byteMatchSetId, forKey: .byteMatchSetId)
        }
        if let byteMatchTuples = byteMatchTuples {
            var byteMatchTuplesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .byteMatchTuples)
            for bytematchtuples0 in byteMatchTuples {
                try byteMatchTuplesContainer.encode(bytematchtuples0)
            }
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let byteMatchSetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .byteMatchSetId)
        byteMatchSetId = byteMatchSetIdDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let byteMatchTuplesContainer = try containerValues.decodeIfPresent([WafClientTypes.ByteMatchTuple?].self, forKey: .byteMatchTuples)
        var byteMatchTuplesDecoded0:[WafClientTypes.ByteMatchTuple]? = nil
        if let byteMatchTuplesContainer = byteMatchTuplesContainer {
            byteMatchTuplesDecoded0 = [WafClientTypes.ByteMatchTuple]()
            for structure0 in byteMatchTuplesContainer {
                if let structure0 = structure0 {
                    byteMatchTuplesDecoded0?.append(structure0)
                }
            }
        }
        byteMatchTuples = byteMatchTuplesDecoded0
    }
}
