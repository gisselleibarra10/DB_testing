// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension WafClientTypes.RateBasedRule: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case matchPredicates = "MatchPredicates"
        case metricName = "MetricName"
        case name = "Name"
        case rateKey = "RateKey"
        case rateLimit = "RateLimit"
        case ruleId = "RuleId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let matchPredicates = matchPredicates {
            var matchPredicatesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .matchPredicates)
            for predicates0 in matchPredicates {
                try matchPredicatesContainer.encode(predicates0)
            }
        }
        if let metricName = self.metricName {
            try encodeContainer.encode(metricName, forKey: .metricName)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let rateKey = self.rateKey {
            try encodeContainer.encode(rateKey.rawValue, forKey: .rateKey)
        }
        if rateLimit != 0 {
            try encodeContainer.encode(rateLimit, forKey: .rateLimit)
        }
        if let ruleId = self.ruleId {
            try encodeContainer.encode(ruleId, forKey: .ruleId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ruleIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ruleId)
        ruleId = ruleIdDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let metricNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .metricName)
        metricName = metricNameDecoded
        let matchPredicatesContainer = try containerValues.decodeIfPresent([WafClientTypes.Predicate?].self, forKey: .matchPredicates)
        var matchPredicatesDecoded0:[WafClientTypes.Predicate]? = nil
        if let matchPredicatesContainer = matchPredicatesContainer {
            matchPredicatesDecoded0 = [WafClientTypes.Predicate]()
            for structure0 in matchPredicatesContainer {
                if let structure0 = structure0 {
                    matchPredicatesDecoded0?.append(structure0)
                }
            }
        }
        matchPredicates = matchPredicatesDecoded0
        let rateKeyDecoded = try containerValues.decodeIfPresent(WafClientTypes.RateKey.self, forKey: .rateKey)
        rateKey = rateKeyDecoded
        let rateLimitDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .rateLimit) ?? 0
        rateLimit = rateLimitDecoded
    }
}
