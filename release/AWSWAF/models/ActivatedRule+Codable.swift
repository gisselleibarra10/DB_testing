// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension WafClientTypes.ActivatedRule: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case action = "Action"
        case excludedRules = "ExcludedRules"
        case overrideAction = "OverrideAction"
        case priority = "Priority"
        case ruleId = "RuleId"
        case type = "Type"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let action = self.action {
            try encodeContainer.encode(action, forKey: .action)
        }
        if let excludedRules = excludedRules {
            var excludedRulesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .excludedRules)
            for excludedrules0 in excludedRules {
                try excludedRulesContainer.encode(excludedrules0)
            }
        }
        if let overrideAction = self.overrideAction {
            try encodeContainer.encode(overrideAction, forKey: .overrideAction)
        }
        if let priority = self.priority {
            try encodeContainer.encode(priority, forKey: .priority)
        }
        if let ruleId = self.ruleId {
            try encodeContainer.encode(ruleId, forKey: .ruleId)
        }
        if let type = self.type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let priorityDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .priority)
        priority = priorityDecoded
        let ruleIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ruleId)
        ruleId = ruleIdDecoded
        let actionDecoded = try containerValues.decodeIfPresent(WafClientTypes.WafAction.self, forKey: .action)
        action = actionDecoded
        let overrideActionDecoded = try containerValues.decodeIfPresent(WafClientTypes.WafOverrideAction.self, forKey: .overrideAction)
        overrideAction = overrideActionDecoded
        let typeDecoded = try containerValues.decodeIfPresent(WafClientTypes.WafRuleType.self, forKey: .type)
        type = typeDecoded
        let excludedRulesContainer = try containerValues.decodeIfPresent([WafClientTypes.ExcludedRule?].self, forKey: .excludedRules)
        var excludedRulesDecoded0:[WafClientTypes.ExcludedRule]? = nil
        if let excludedRulesContainer = excludedRulesContainer {
            excludedRulesDecoded0 = [WafClientTypes.ExcludedRule]()
            for structure0 in excludedRulesContainer {
                if let structure0 = structure0 {
                    excludedRulesDecoded0?.append(structure0)
                }
            }
        }
        excludedRules = excludedRulesDecoded0
    }
}
