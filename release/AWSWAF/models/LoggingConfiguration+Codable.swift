// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension WafClientTypes.LoggingConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case logDestinationConfigs = "LogDestinationConfigs"
        case redactedFields = "RedactedFields"
        case resourceArn = "ResourceArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let logDestinationConfigs = logDestinationConfigs {
            var logDestinationConfigsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .logDestinationConfigs)
            for logdestinationconfigs0 in logDestinationConfigs {
                try logDestinationConfigsContainer.encode(logdestinationconfigs0)
            }
        }
        if let redactedFields = redactedFields {
            var redactedFieldsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .redactedFields)
            for redactedfields0 in redactedFields {
                try redactedFieldsContainer.encode(redactedfields0)
            }
        }
        if let resourceArn = self.resourceArn {
            try encodeContainer.encode(resourceArn, forKey: .resourceArn)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceArn)
        resourceArn = resourceArnDecoded
        let logDestinationConfigsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .logDestinationConfigs)
        var logDestinationConfigsDecoded0:[Swift.String]? = nil
        if let logDestinationConfigsContainer = logDestinationConfigsContainer {
            logDestinationConfigsDecoded0 = [Swift.String]()
            for string0 in logDestinationConfigsContainer {
                if let string0 = string0 {
                    logDestinationConfigsDecoded0?.append(string0)
                }
            }
        }
        logDestinationConfigs = logDestinationConfigsDecoded0
        let redactedFieldsContainer = try containerValues.decodeIfPresent([WafClientTypes.FieldToMatch?].self, forKey: .redactedFields)
        var redactedFieldsDecoded0:[WafClientTypes.FieldToMatch]? = nil
        if let redactedFieldsContainer = redactedFieldsContainer {
            redactedFieldsDecoded0 = [WafClientTypes.FieldToMatch]()
            for structure0 in redactedFieldsContainer {
                if let structure0 = structure0 {
                    redactedFieldsDecoded0?.append(structure0)
                }
            }
        }
        redactedFields = redactedFieldsDecoded0
    }
}
