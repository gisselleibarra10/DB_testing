// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension KafkaClientTypes.Cluster: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case activeOperationArn = "activeOperationArn"
        case clusterArn = "clusterArn"
        case clusterName = "clusterName"
        case clusterType = "clusterType"
        case creationTime = "creationTime"
        case currentVersion = "currentVersion"
        case provisioned = "provisioned"
        case serverless = "serverless"
        case state = "state"
        case stateInfo = "stateInfo"
        case tags = "tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let activeOperationArn = self.activeOperationArn {
            try encodeContainer.encode(activeOperationArn, forKey: .activeOperationArn)
        }
        if let clusterArn = self.clusterArn {
            try encodeContainer.encode(clusterArn, forKey: .clusterArn)
        }
        if let clusterName = self.clusterName {
            try encodeContainer.encode(clusterName, forKey: .clusterName)
        }
        if let clusterType = self.clusterType {
            try encodeContainer.encode(clusterType.rawValue, forKey: .clusterType)
        }
        if let creationTime = self.creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let currentVersion = self.currentVersion {
            try encodeContainer.encode(currentVersion, forKey: .currentVersion)
        }
        if let provisioned = self.provisioned {
            try encodeContainer.encode(provisioned, forKey: .provisioned)
        }
        if let serverless = self.serverless {
            try encodeContainer.encode(serverless, forKey: .serverless)
        }
        if let state = self.state {
            try encodeContainer.encode(state.rawValue, forKey: .state)
        }
        if let stateInfo = self.stateInfo {
            try encodeContainer.encode(stateInfo, forKey: .stateInfo)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, __mapof__string0) in tags {
                try tagsContainer.encode(__mapof__string0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let activeOperationArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .activeOperationArn)
        activeOperationArn = activeOperationArnDecoded
        let clusterTypeDecoded = try containerValues.decodeIfPresent(KafkaClientTypes.ClusterType.self, forKey: .clusterType)
        clusterType = clusterTypeDecoded
        let clusterArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterArn)
        clusterArn = clusterArnDecoded
        let clusterNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterName)
        clusterName = clusterNameDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let currentVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .currentVersion)
        currentVersion = currentVersionDecoded
        let stateDecoded = try containerValues.decodeIfPresent(KafkaClientTypes.ClusterState.self, forKey: .state)
        state = stateDecoded
        let stateInfoDecoded = try containerValues.decodeIfPresent(KafkaClientTypes.StateInfo.self, forKey: .stateInfo)
        stateInfo = stateInfoDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, __string0) in tagsContainer {
                if let __string0 = __string0 {
                    tagsDecoded0?[key0] = __string0
                }
            }
        }
        tags = tagsDecoded0
        let provisionedDecoded = try containerValues.decodeIfPresent(KafkaClientTypes.Provisioned.self, forKey: .provisioned)
        provisioned = provisionedDecoded
        let serverlessDecoded = try containerValues.decodeIfPresent(KafkaClientTypes.Serverless.self, forKey: .serverless)
        serverless = serverlessDecoded
    }
}
