// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension KafkaClientTypes.Provisioned: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case brokerNodeGroupInfo = "brokerNodeGroupInfo"
        case clientAuthentication = "clientAuthentication"
        case currentBrokerSoftwareInfo = "currentBrokerSoftwareInfo"
        case encryptionInfo = "encryptionInfo"
        case enhancedMonitoring = "enhancedMonitoring"
        case loggingInfo = "loggingInfo"
        case numberOfBrokerNodes = "numberOfBrokerNodes"
        case openMonitoring = "openMonitoring"
        case zookeeperConnectString = "zookeeperConnectString"
        case zookeeperConnectStringTls = "zookeeperConnectStringTls"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let brokerNodeGroupInfo = self.brokerNodeGroupInfo {
            try encodeContainer.encode(brokerNodeGroupInfo, forKey: .brokerNodeGroupInfo)
        }
        if let clientAuthentication = self.clientAuthentication {
            try encodeContainer.encode(clientAuthentication, forKey: .clientAuthentication)
        }
        if let currentBrokerSoftwareInfo = self.currentBrokerSoftwareInfo {
            try encodeContainer.encode(currentBrokerSoftwareInfo, forKey: .currentBrokerSoftwareInfo)
        }
        if let encryptionInfo = self.encryptionInfo {
            try encodeContainer.encode(encryptionInfo, forKey: .encryptionInfo)
        }
        if let enhancedMonitoring = self.enhancedMonitoring {
            try encodeContainer.encode(enhancedMonitoring.rawValue, forKey: .enhancedMonitoring)
        }
        if let loggingInfo = self.loggingInfo {
            try encodeContainer.encode(loggingInfo, forKey: .loggingInfo)
        }
        if let numberOfBrokerNodes = self.numberOfBrokerNodes {
            try encodeContainer.encode(numberOfBrokerNodes, forKey: .numberOfBrokerNodes)
        }
        if let openMonitoring = self.openMonitoring {
            try encodeContainer.encode(openMonitoring, forKey: .openMonitoring)
        }
        if let zookeeperConnectString = self.zookeeperConnectString {
            try encodeContainer.encode(zookeeperConnectString, forKey: .zookeeperConnectString)
        }
        if let zookeeperConnectStringTls = self.zookeeperConnectStringTls {
            try encodeContainer.encode(zookeeperConnectStringTls, forKey: .zookeeperConnectStringTls)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let brokerNodeGroupInfoDecoded = try containerValues.decodeIfPresent(KafkaClientTypes.BrokerNodeGroupInfo.self, forKey: .brokerNodeGroupInfo)
        brokerNodeGroupInfo = brokerNodeGroupInfoDecoded
        let currentBrokerSoftwareInfoDecoded = try containerValues.decodeIfPresent(KafkaClientTypes.BrokerSoftwareInfo.self, forKey: .currentBrokerSoftwareInfo)
        currentBrokerSoftwareInfo = currentBrokerSoftwareInfoDecoded
        let clientAuthenticationDecoded = try containerValues.decodeIfPresent(KafkaClientTypes.ClientAuthentication.self, forKey: .clientAuthentication)
        clientAuthentication = clientAuthenticationDecoded
        let encryptionInfoDecoded = try containerValues.decodeIfPresent(KafkaClientTypes.EncryptionInfo.self, forKey: .encryptionInfo)
        encryptionInfo = encryptionInfoDecoded
        let enhancedMonitoringDecoded = try containerValues.decodeIfPresent(KafkaClientTypes.EnhancedMonitoring.self, forKey: .enhancedMonitoring)
        enhancedMonitoring = enhancedMonitoringDecoded
        let openMonitoringDecoded = try containerValues.decodeIfPresent(KafkaClientTypes.OpenMonitoringInfo.self, forKey: .openMonitoring)
        openMonitoring = openMonitoringDecoded
        let loggingInfoDecoded = try containerValues.decodeIfPresent(KafkaClientTypes.LoggingInfo.self, forKey: .loggingInfo)
        loggingInfo = loggingInfoDecoded
        let numberOfBrokerNodesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .numberOfBrokerNodes)
        numberOfBrokerNodes = numberOfBrokerNodesDecoded
        let zookeeperConnectStringDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .zookeeperConnectString)
        zookeeperConnectString = zookeeperConnectStringDecoded
        let zookeeperConnectStringTlsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .zookeeperConnectStringTls)
        zookeeperConnectStringTls = zookeeperConnectStringTlsDecoded
    }
}
