// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension KafkaClientTypes.MutableClusterInfo: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case brokerEBSVolumeInfo = "brokerEBSVolumeInfo"
        case clientAuthentication = "clientAuthentication"
        case configurationInfo = "configurationInfo"
        case connectivityInfo = "connectivityInfo"
        case encryptionInfo = "encryptionInfo"
        case enhancedMonitoring = "enhancedMonitoring"
        case instanceType = "instanceType"
        case kafkaVersion = "kafkaVersion"
        case loggingInfo = "loggingInfo"
        case numberOfBrokerNodes = "numberOfBrokerNodes"
        case openMonitoring = "openMonitoring"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let brokerEBSVolumeInfo = brokerEBSVolumeInfo {
            var brokerEBSVolumeInfoContainer = encodeContainer.nestedUnkeyedContainer(forKey: .brokerEBSVolumeInfo)
            for __listofbrokerebsvolumeinfo0 in brokerEBSVolumeInfo {
                try brokerEBSVolumeInfoContainer.encode(__listofbrokerebsvolumeinfo0)
            }
        }
        if let clientAuthentication = self.clientAuthentication {
            try encodeContainer.encode(clientAuthentication, forKey: .clientAuthentication)
        }
        if let configurationInfo = self.configurationInfo {
            try encodeContainer.encode(configurationInfo, forKey: .configurationInfo)
        }
        if let connectivityInfo = self.connectivityInfo {
            try encodeContainer.encode(connectivityInfo, forKey: .connectivityInfo)
        }
        if let encryptionInfo = self.encryptionInfo {
            try encodeContainer.encode(encryptionInfo, forKey: .encryptionInfo)
        }
        if let enhancedMonitoring = self.enhancedMonitoring {
            try encodeContainer.encode(enhancedMonitoring.rawValue, forKey: .enhancedMonitoring)
        }
        if let instanceType = self.instanceType {
            try encodeContainer.encode(instanceType, forKey: .instanceType)
        }
        if let kafkaVersion = self.kafkaVersion {
            try encodeContainer.encode(kafkaVersion, forKey: .kafkaVersion)
        }
        if let loggingInfo = self.loggingInfo {
            try encodeContainer.encode(loggingInfo, forKey: .loggingInfo)
        }
        if let numberOfBrokerNodes = self.numberOfBrokerNodes {
            try encodeContainer.encode(numberOfBrokerNodes, forKey: .numberOfBrokerNodes)
        }
        if let openMonitoring = self.openMonitoring {
            try encodeContainer.encode(openMonitoring, forKey: .openMonitoring)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let brokerEBSVolumeInfoContainer = try containerValues.decodeIfPresent([KafkaClientTypes.BrokerEBSVolumeInfo?].self, forKey: .brokerEBSVolumeInfo)
        var brokerEBSVolumeInfoDecoded0:[KafkaClientTypes.BrokerEBSVolumeInfo]? = nil
        if let brokerEBSVolumeInfoContainer = brokerEBSVolumeInfoContainer {
            brokerEBSVolumeInfoDecoded0 = [KafkaClientTypes.BrokerEBSVolumeInfo]()
            for structure0 in brokerEBSVolumeInfoContainer {
                if let structure0 = structure0 {
                    brokerEBSVolumeInfoDecoded0?.append(structure0)
                }
            }
        }
        brokerEBSVolumeInfo = brokerEBSVolumeInfoDecoded0
        let configurationInfoDecoded = try containerValues.decodeIfPresent(KafkaClientTypes.ConfigurationInfo.self, forKey: .configurationInfo)
        configurationInfo = configurationInfoDecoded
        let numberOfBrokerNodesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .numberOfBrokerNodes)
        numberOfBrokerNodes = numberOfBrokerNodesDecoded
        let enhancedMonitoringDecoded = try containerValues.decodeIfPresent(KafkaClientTypes.EnhancedMonitoring.self, forKey: .enhancedMonitoring)
        enhancedMonitoring = enhancedMonitoringDecoded
        let openMonitoringDecoded = try containerValues.decodeIfPresent(KafkaClientTypes.OpenMonitoring.self, forKey: .openMonitoring)
        openMonitoring = openMonitoringDecoded
        let kafkaVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kafkaVersion)
        kafkaVersion = kafkaVersionDecoded
        let loggingInfoDecoded = try containerValues.decodeIfPresent(KafkaClientTypes.LoggingInfo.self, forKey: .loggingInfo)
        loggingInfo = loggingInfoDecoded
        let instanceTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceType)
        instanceType = instanceTypeDecoded
        let clientAuthenticationDecoded = try containerValues.decodeIfPresent(KafkaClientTypes.ClientAuthentication.self, forKey: .clientAuthentication)
        clientAuthentication = clientAuthenticationDecoded
        let encryptionInfoDecoded = try containerValues.decodeIfPresent(KafkaClientTypes.EncryptionInfo.self, forKey: .encryptionInfo)
        encryptionInfo = encryptionInfoDecoded
        let connectivityInfoDecoded = try containerValues.decodeIfPresent(KafkaClientTypes.ConnectivityInfo.self, forKey: .connectivityInfo)
        connectivityInfo = connectivityInfoDecoded
    }
}
