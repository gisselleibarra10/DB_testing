// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateClusterInputBody: Swift.Equatable {
    let brokerNodeGroupInfo: KafkaClientTypes.BrokerNodeGroupInfo?
    let clientAuthentication: KafkaClientTypes.ClientAuthentication?
    let clusterName: Swift.String?
    let configurationInfo: KafkaClientTypes.ConfigurationInfo?
    let encryptionInfo: KafkaClientTypes.EncryptionInfo?
    let enhancedMonitoring: KafkaClientTypes.EnhancedMonitoring?
    let openMonitoring: KafkaClientTypes.OpenMonitoringInfo?
    let kafkaVersion: Swift.String?
    let loggingInfo: KafkaClientTypes.LoggingInfo?
    let numberOfBrokerNodes: Swift.Int?
    let tags: [Swift.String:Swift.String]?
}

extension CreateClusterInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case brokerNodeGroupInfo = "brokerNodeGroupInfo"
        case clientAuthentication = "clientAuthentication"
        case clusterName = "clusterName"
        case configurationInfo = "configurationInfo"
        case encryptionInfo = "encryptionInfo"
        case enhancedMonitoring = "enhancedMonitoring"
        case kafkaVersion = "kafkaVersion"
        case loggingInfo = "loggingInfo"
        case numberOfBrokerNodes = "numberOfBrokerNodes"
        case openMonitoring = "openMonitoring"
        case tags = "tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let brokerNodeGroupInfoDecoded = try containerValues.decodeIfPresent(KafkaClientTypes.BrokerNodeGroupInfo.self, forKey: .brokerNodeGroupInfo)
        brokerNodeGroupInfo = brokerNodeGroupInfoDecoded
        let clientAuthenticationDecoded = try containerValues.decodeIfPresent(KafkaClientTypes.ClientAuthentication.self, forKey: .clientAuthentication)
        clientAuthentication = clientAuthenticationDecoded
        let clusterNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterName)
        clusterName = clusterNameDecoded
        let configurationInfoDecoded = try containerValues.decodeIfPresent(KafkaClientTypes.ConfigurationInfo.self, forKey: .configurationInfo)
        configurationInfo = configurationInfoDecoded
        let encryptionInfoDecoded = try containerValues.decodeIfPresent(KafkaClientTypes.EncryptionInfo.self, forKey: .encryptionInfo)
        encryptionInfo = encryptionInfoDecoded
        let enhancedMonitoringDecoded = try containerValues.decodeIfPresent(KafkaClientTypes.EnhancedMonitoring.self, forKey: .enhancedMonitoring)
        enhancedMonitoring = enhancedMonitoringDecoded
        let openMonitoringDecoded = try containerValues.decodeIfPresent(KafkaClientTypes.OpenMonitoringInfo.self, forKey: .openMonitoring)
        openMonitoring = openMonitoringDecoded
        let kafkaVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kafkaVersion)
        kafkaVersion = kafkaVersionDecoded
        let loggingInfoDecoded = try containerValues.decodeIfPresent(KafkaClientTypes.LoggingInfo.self, forKey: .loggingInfo)
        loggingInfo = loggingInfoDecoded
        let numberOfBrokerNodesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .numberOfBrokerNodes)
        numberOfBrokerNodes = numberOfBrokerNodesDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, __string0) in tagsContainer {
                if let __string0 = __string0 {
                    tagsDecoded0?[key0] = __string0
                }
            }
        }
        tags = tagsDecoded0
    }
}
