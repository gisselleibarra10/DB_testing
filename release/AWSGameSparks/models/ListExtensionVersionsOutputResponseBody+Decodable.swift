// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListExtensionVersionsOutputResponseBody: Swift.Equatable {
    let extensionVersions: [GameSparksClientTypes.ExtensionVersionDetails]?
    let nextToken: Swift.String?
}

extension ListExtensionVersionsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case extensionVersions = "ExtensionVersions"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let extensionVersionsContainer = try containerValues.decodeIfPresent([GameSparksClientTypes.ExtensionVersionDetails?].self, forKey: .extensionVersions)
        var extensionVersionsDecoded0:[GameSparksClientTypes.ExtensionVersionDetails]? = nil
        if let extensionVersionsContainer = extensionVersionsContainer {
            extensionVersionsDecoded0 = [GameSparksClientTypes.ExtensionVersionDetails]()
            for structure0 in extensionVersionsContainer {
                if let structure0 = structure0 {
                    extensionVersionsDecoded0?.append(structure0)
                }
            }
        }
        extensionVersions = extensionVersionsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
