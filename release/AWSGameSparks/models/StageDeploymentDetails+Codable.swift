// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension GameSparksClientTypes.StageDeploymentDetails: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case created = "Created"
        case deploymentAction = "DeploymentAction"
        case deploymentId = "DeploymentId"
        case deploymentResult = "DeploymentResult"
        case deploymentState = "DeploymentState"
        case lastUpdated = "LastUpdated"
        case snapshotId = "SnapshotId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let created = self.created {
            try encodeContainer.encode(created.timeIntervalSince1970, forKey: .created)
        }
        if let deploymentAction = self.deploymentAction {
            try encodeContainer.encode(deploymentAction.rawValue, forKey: .deploymentAction)
        }
        if let deploymentId = self.deploymentId {
            try encodeContainer.encode(deploymentId, forKey: .deploymentId)
        }
        if let deploymentResult = self.deploymentResult {
            try encodeContainer.encode(deploymentResult, forKey: .deploymentResult)
        }
        if let deploymentState = self.deploymentState {
            try encodeContainer.encode(deploymentState.rawValue, forKey: .deploymentState)
        }
        if let lastUpdated = self.lastUpdated {
            try encodeContainer.encode(lastUpdated.timeIntervalSince1970, forKey: .lastUpdated)
        }
        if let snapshotId = self.snapshotId {
            try encodeContainer.encode(snapshotId, forKey: .snapshotId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deploymentIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deploymentId)
        deploymentId = deploymentIdDecoded
        let snapshotIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .snapshotId)
        snapshotId = snapshotIdDecoded
        let deploymentActionDecoded = try containerValues.decodeIfPresent(GameSparksClientTypes.DeploymentAction.self, forKey: .deploymentAction)
        deploymentAction = deploymentActionDecoded
        let deploymentStateDecoded = try containerValues.decodeIfPresent(GameSparksClientTypes.DeploymentState.self, forKey: .deploymentState)
        deploymentState = deploymentStateDecoded
        let createdDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .created)
        created = createdDecoded
        let lastUpdatedDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastUpdated)
        lastUpdated = lastUpdatedDecoded
        let deploymentResultDecoded = try containerValues.decodeIfPresent(GameSparksClientTypes.DeploymentResult.self, forKey: .deploymentResult)
        deploymentResult = deploymentResultDecoded
    }
}
