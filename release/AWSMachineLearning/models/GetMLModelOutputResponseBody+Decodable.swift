// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetMLModelOutputResponseBody: Swift.Equatable {
    let mLModelId: Swift.String?
    let trainingDataSourceId: Swift.String?
    let createdByIamUser: Swift.String?
    let createdAt: ClientRuntime.Date?
    let lastUpdatedAt: ClientRuntime.Date?
    let name: Swift.String?
    let status: MachineLearningClientTypes.EntityStatus?
    let sizeInBytes: Swift.Int?
    let endpointInfo: MachineLearningClientTypes.RealtimeEndpointInfo?
    let trainingParameters: [Swift.String:Swift.String]?
    let inputDataLocationS3: Swift.String?
    let mLModelType: MachineLearningClientTypes.MLModelType?
    let scoreThreshold: Swift.Float?
    let scoreThresholdLastUpdatedAt: ClientRuntime.Date?
    let logUri: Swift.String?
    let message: Swift.String?
    let computeTime: Swift.Int?
    let finishedAt: ClientRuntime.Date?
    let startedAt: ClientRuntime.Date?
    let recipe: Swift.String?
    let schema: Swift.String?
}

extension GetMLModelOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case computeTime = "ComputeTime"
        case createdAt = "CreatedAt"
        case createdByIamUser = "CreatedByIamUser"
        case endpointInfo = "EndpointInfo"
        case finishedAt = "FinishedAt"
        case inputDataLocationS3 = "InputDataLocationS3"
        case lastUpdatedAt = "LastUpdatedAt"
        case logUri = "LogUri"
        case mLModelId = "MLModelId"
        case mLModelType = "MLModelType"
        case message = "Message"
        case name = "Name"
        case recipe = "Recipe"
        case schema = "Schema"
        case scoreThreshold = "ScoreThreshold"
        case scoreThresholdLastUpdatedAt = "ScoreThresholdLastUpdatedAt"
        case sizeInBytes = "SizeInBytes"
        case startedAt = "StartedAt"
        case status = "Status"
        case trainingDataSourceId = "TrainingDataSourceId"
        case trainingParameters = "TrainingParameters"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let mLModelIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .mLModelId)
        mLModelId = mLModelIdDecoded
        let trainingDataSourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .trainingDataSourceId)
        trainingDataSourceId = trainingDataSourceIdDecoded
        let createdByIamUserDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .createdByIamUser)
        createdByIamUser = createdByIamUserDecoded
        let createdAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdAt)
        createdAt = createdAtDecoded
        let lastUpdatedAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastUpdatedAt)
        lastUpdatedAt = lastUpdatedAtDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let statusDecoded = try containerValues.decodeIfPresent(MachineLearningClientTypes.EntityStatus.self, forKey: .status)
        status = statusDecoded
        let sizeInBytesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .sizeInBytes)
        sizeInBytes = sizeInBytesDecoded
        let endpointInfoDecoded = try containerValues.decodeIfPresent(MachineLearningClientTypes.RealtimeEndpointInfo.self, forKey: .endpointInfo)
        endpointInfo = endpointInfoDecoded
        let trainingParametersContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .trainingParameters)
        var trainingParametersDecoded0: [Swift.String:Swift.String]? = nil
        if let trainingParametersContainer = trainingParametersContainer {
            trainingParametersDecoded0 = [Swift.String:Swift.String]()
            for (key0, stringtype0) in trainingParametersContainer {
                if let stringtype0 = stringtype0 {
                    trainingParametersDecoded0?[key0] = stringtype0
                }
            }
        }
        trainingParameters = trainingParametersDecoded0
        let inputDataLocationS3Decoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .inputDataLocationS3)
        inputDataLocationS3 = inputDataLocationS3Decoded
        let mLModelTypeDecoded = try containerValues.decodeIfPresent(MachineLearningClientTypes.MLModelType.self, forKey: .mLModelType)
        mLModelType = mLModelTypeDecoded
        let scoreThresholdDecoded = try containerValues.decodeIfPresent(Swift.Float.self, forKey: .scoreThreshold)
        scoreThreshold = scoreThresholdDecoded
        let scoreThresholdLastUpdatedAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .scoreThresholdLastUpdatedAt)
        scoreThresholdLastUpdatedAt = scoreThresholdLastUpdatedAtDecoded
        let logUriDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logUri)
        logUri = logUriDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let computeTimeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .computeTime)
        computeTime = computeTimeDecoded
        let finishedAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .finishedAt)
        finishedAt = finishedAtDecoded
        let startedAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .startedAt)
        startedAt = startedAtDecoded
        let recipeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .recipe)
        recipe = recipeDecoded
        let schemaDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .schema)
        schema = schemaDecoded
    }
}
