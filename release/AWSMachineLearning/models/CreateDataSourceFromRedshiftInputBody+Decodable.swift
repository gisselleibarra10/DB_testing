// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateDataSourceFromRedshiftInputBody: Swift.Equatable {
    let dataSourceId: Swift.String?
    let dataSourceName: Swift.String?
    let dataSpec: MachineLearningClientTypes.RedshiftDataSpec?
    let roleARN: Swift.String?
    let computeStatistics: Swift.Bool
}

extension CreateDataSourceFromRedshiftInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case computeStatistics = "ComputeStatistics"
        case dataSourceId = "DataSourceId"
        case dataSourceName = "DataSourceName"
        case dataSpec = "DataSpec"
        case roleARN = "RoleARN"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dataSourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataSourceId)
        dataSourceId = dataSourceIdDecoded
        let dataSourceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataSourceName)
        dataSourceName = dataSourceNameDecoded
        let dataSpecDecoded = try containerValues.decodeIfPresent(MachineLearningClientTypes.RedshiftDataSpec.self, forKey: .dataSpec)
        dataSpec = dataSpecDecoded
        let roleARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleARN)
        roleARN = roleARNDecoded
        let computeStatisticsDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .computeStatistics) ?? false
        computeStatistics = computeStatisticsDecoded
    }
}
