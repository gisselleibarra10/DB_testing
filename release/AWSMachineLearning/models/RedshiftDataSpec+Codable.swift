// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension MachineLearningClientTypes.RedshiftDataSpec: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dataRearrangement = "DataRearrangement"
        case dataSchema = "DataSchema"
        case dataSchemaUri = "DataSchemaUri"
        case databaseCredentials = "DatabaseCredentials"
        case databaseInformation = "DatabaseInformation"
        case s3StagingLocation = "S3StagingLocation"
        case selectSqlQuery = "SelectSqlQuery"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dataRearrangement = self.dataRearrangement {
            try encodeContainer.encode(dataRearrangement, forKey: .dataRearrangement)
        }
        if let dataSchema = self.dataSchema {
            try encodeContainer.encode(dataSchema, forKey: .dataSchema)
        }
        if let dataSchemaUri = self.dataSchemaUri {
            try encodeContainer.encode(dataSchemaUri, forKey: .dataSchemaUri)
        }
        if let databaseCredentials = self.databaseCredentials {
            try encodeContainer.encode(databaseCredentials, forKey: .databaseCredentials)
        }
        if let databaseInformation = self.databaseInformation {
            try encodeContainer.encode(databaseInformation, forKey: .databaseInformation)
        }
        if let s3StagingLocation = self.s3StagingLocation {
            try encodeContainer.encode(s3StagingLocation, forKey: .s3StagingLocation)
        }
        if let selectSqlQuery = self.selectSqlQuery {
            try encodeContainer.encode(selectSqlQuery, forKey: .selectSqlQuery)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let databaseInformationDecoded = try containerValues.decodeIfPresent(MachineLearningClientTypes.RedshiftDatabase.self, forKey: .databaseInformation)
        databaseInformation = databaseInformationDecoded
        let selectSqlQueryDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .selectSqlQuery)
        selectSqlQuery = selectSqlQueryDecoded
        let databaseCredentialsDecoded = try containerValues.decodeIfPresent(MachineLearningClientTypes.RedshiftDatabaseCredentials.self, forKey: .databaseCredentials)
        databaseCredentials = databaseCredentialsDecoded
        let s3StagingLocationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .s3StagingLocation)
        s3StagingLocation = s3StagingLocationDecoded
        let dataRearrangementDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataRearrangement)
        dataRearrangement = dataRearrangementDecoded
        let dataSchemaDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataSchema)
        dataSchema = dataSchemaDecoded
        let dataSchemaUriDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataSchemaUri)
        dataSchemaUri = dataSchemaUriDecoded
    }
}
