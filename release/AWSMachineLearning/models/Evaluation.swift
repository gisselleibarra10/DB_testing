// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension MachineLearningClientTypes {
    /// Represents the output of GetEvaluation operation. The content consists of the detailed metadata and data file information and the current status of the Evaluation.
    public struct Evaluation: Swift.Equatable {
        /// Long integer type that is a 64-bit signed number.
        public var computeTime: Swift.Int?
        /// The time that the Evaluation was created. The time is expressed in epoch time.
        public var createdAt: ClientRuntime.Date?
        /// The AWS user account that invoked the evaluation. The account type can be either an AWS root account or an AWS Identity and Access Management (IAM) user account.
        public var createdByIamUser: Swift.String?
        /// The ID of the DataSource that is used to evaluate the MLModel.
        public var evaluationDataSourceId: Swift.String?
        /// The ID that is assigned to the Evaluation at creation.
        public var evaluationId: Swift.String?
        /// A timestamp represented in epoch time.
        public var finishedAt: ClientRuntime.Date?
        /// The location and name of the data in Amazon Simple Storage Server (Amazon S3) that is used in the evaluation.
        public var inputDataLocationS3: Swift.String?
        /// The time of the most recent edit to the Evaluation. The time is expressed in epoch time.
        public var lastUpdatedAt: ClientRuntime.Date?
        /// The ID of the MLModel that is the focus of the evaluation.
        public var mLModelId: Swift.String?
        /// A description of the most recent details about evaluating the MLModel.
        public var message: Swift.String?
        /// A user-supplied name or description of the Evaluation.
        public var name: Swift.String?
        /// Measurements of how well the MLModel performed, using observations referenced by the DataSource. One of the following metrics is returned, based on the type of the MLModel:
        ///
        /// * BinaryAUC: A binary MLModel uses the Area Under the Curve (AUC) technique to measure performance.
        ///
        /// * RegressionRMSE: A regression MLModel uses the Root Mean Square Error (RMSE) technique to measure performance. RMSE measures the difference between predicted and actual values for a single variable.
        ///
        /// * MulticlassAvgFScore: A multiclass MLModel uses the F1 score technique to measure performance.
        ///
        ///
        /// For more information about performance metrics, please see the [Amazon Machine Learning Developer Guide](https://docs.aws.amazon.com/machine-learning/latest/dg).
        public var performanceMetrics: MachineLearningClientTypes.PerformanceMetrics?
        /// A timestamp represented in epoch time.
        public var startedAt: ClientRuntime.Date?
        /// The status of the evaluation. This element can have one of the following values:
        ///
        /// * PENDING - Amazon Machine Learning (Amazon ML) submitted a request to evaluate an MLModel.
        ///
        /// * INPROGRESS - The evaluation is underway.
        ///
        /// * FAILED - The request to evaluate an MLModel did not run to completion. It is not usable.
        ///
        /// * COMPLETED - The evaluation process completed successfully.
        ///
        /// * DELETED - The Evaluation is marked as deleted. It is not usable.
        public var status: MachineLearningClientTypes.EntityStatus?

        public init (
            computeTime: Swift.Int? = nil,
            createdAt: ClientRuntime.Date? = nil,
            createdByIamUser: Swift.String? = nil,
            evaluationDataSourceId: Swift.String? = nil,
            evaluationId: Swift.String? = nil,
            finishedAt: ClientRuntime.Date? = nil,
            inputDataLocationS3: Swift.String? = nil,
            lastUpdatedAt: ClientRuntime.Date? = nil,
            mLModelId: Swift.String? = nil,
            message: Swift.String? = nil,
            name: Swift.String? = nil,
            performanceMetrics: MachineLearningClientTypes.PerformanceMetrics? = nil,
            startedAt: ClientRuntime.Date? = nil,
            status: MachineLearningClientTypes.EntityStatus? = nil
        )
        {
            self.computeTime = computeTime
            self.createdAt = createdAt
            self.createdByIamUser = createdByIamUser
            self.evaluationDataSourceId = evaluationDataSourceId
            self.evaluationId = evaluationId
            self.finishedAt = finishedAt
            self.inputDataLocationS3 = inputDataLocationS3
            self.lastUpdatedAt = lastUpdatedAt
            self.mLModelId = mLModelId
            self.message = message
            self.name = name
            self.performanceMetrics = performanceMetrics
            self.startedAt = startedAt
            self.status = status
        }
    }

}
