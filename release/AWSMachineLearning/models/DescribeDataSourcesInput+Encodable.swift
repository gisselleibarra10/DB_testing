// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension DescribeDataSourcesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case eQ = "EQ"
        case filterVariable = "FilterVariable"
        case gE = "GE"
        case gT = "GT"
        case lE = "LE"
        case lT = "LT"
        case limit = "Limit"
        case nE = "NE"
        case nextToken = "NextToken"
        case `prefix` = "Prefix"
        case sortOrder = "SortOrder"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let eQ = self.eQ {
            try encodeContainer.encode(eQ, forKey: .eQ)
        }
        if let filterVariable = self.filterVariable {
            try encodeContainer.encode(filterVariable.rawValue, forKey: .filterVariable)
        }
        if let gE = self.gE {
            try encodeContainer.encode(gE, forKey: .gE)
        }
        if let gT = self.gT {
            try encodeContainer.encode(gT, forKey: .gT)
        }
        if let lE = self.lE {
            try encodeContainer.encode(lE, forKey: .lE)
        }
        if let lT = self.lT {
            try encodeContainer.encode(lT, forKey: .lT)
        }
        if let limit = self.limit {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let nE = self.nE {
            try encodeContainer.encode(nE, forKey: .nE)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let `prefix` = self.`prefix` {
            try encodeContainer.encode(`prefix`, forKey: .`prefix`)
        }
        if let sortOrder = self.sortOrder {
            try encodeContainer.encode(sortOrder.rawValue, forKey: .sortOrder)
        }
    }
}
