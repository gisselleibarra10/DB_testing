// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension MachineLearningClientTypes {
    /// A list of the variables to use in searching or filtering BatchPrediction.
    ///
    /// * CreatedAt - Sets the search criteria to BatchPrediction creation date.
    ///
    /// * Status - Sets the search criteria to BatchPrediction status.
    ///
    /// * Name - Sets the search criteria to the contents of BatchPredictionName.
    ///
    /// * IAMUser - Sets the search criteria to the user account that invoked the BatchPrediction creation.
    ///
    /// * MLModelId - Sets the search criteria to the MLModel used in the BatchPrediction.
    ///
    /// * DataSourceId - Sets the search criteria to the DataSource used in the BatchPrediction.
    ///
    /// * DataURI - Sets the search criteria to the data file(s) used in the BatchPrediction. The URL can identify either a file or an Amazon Simple Storage Service (Amazon S3) bucket or directory.
    public enum BatchPredictionFilterVariable: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case createdAt
        case datasourceId
        case dataUri
        case iamUser
        case lastUpdatedAt
        case mlModelId
        case name
        case status
        case sdkUnknown(Swift.String)

        public static var allCases: [BatchPredictionFilterVariable] {
            return [
                .createdAt,
                .datasourceId,
                .dataUri,
                .iamUser,
                .lastUpdatedAt,
                .mlModelId,
                .name,
                .status,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .createdAt: return "CreatedAt"
            case .datasourceId: return "DataSourceId"
            case .dataUri: return "DataURI"
            case .iamUser: return "IAMUser"
            case .lastUpdatedAt: return "LastUpdatedAt"
            case .mlModelId: return "MLModelId"
            case .name: return "Name"
            case .status: return "Status"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = BatchPredictionFilterVariable(rawValue: rawValue) ?? BatchPredictionFilterVariable.sdkUnknown(rawValue)
        }
    }
}
