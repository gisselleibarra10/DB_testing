// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension MachineLearningClientTypes.DataSource: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case computeStatistics = "ComputeStatistics"
        case computeTime = "ComputeTime"
        case createdAt = "CreatedAt"
        case createdByIamUser = "CreatedByIamUser"
        case dataLocationS3 = "DataLocationS3"
        case dataRearrangement = "DataRearrangement"
        case dataSizeInBytes = "DataSizeInBytes"
        case dataSourceId = "DataSourceId"
        case finishedAt = "FinishedAt"
        case lastUpdatedAt = "LastUpdatedAt"
        case message = "Message"
        case name = "Name"
        case numberOfFiles = "NumberOfFiles"
        case rDSMetadata = "RDSMetadata"
        case redshiftMetadata = "RedshiftMetadata"
        case roleARN = "RoleARN"
        case startedAt = "StartedAt"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if computeStatistics != false {
            try encodeContainer.encode(computeStatistics, forKey: .computeStatistics)
        }
        if let computeTime = self.computeTime {
            try encodeContainer.encode(computeTime, forKey: .computeTime)
        }
        if let createdAt = self.createdAt {
            try encodeContainer.encode(createdAt.timeIntervalSince1970, forKey: .createdAt)
        }
        if let createdByIamUser = self.createdByIamUser {
            try encodeContainer.encode(createdByIamUser, forKey: .createdByIamUser)
        }
        if let dataLocationS3 = self.dataLocationS3 {
            try encodeContainer.encode(dataLocationS3, forKey: .dataLocationS3)
        }
        if let dataRearrangement = self.dataRearrangement {
            try encodeContainer.encode(dataRearrangement, forKey: .dataRearrangement)
        }
        if let dataSizeInBytes = self.dataSizeInBytes {
            try encodeContainer.encode(dataSizeInBytes, forKey: .dataSizeInBytes)
        }
        if let dataSourceId = self.dataSourceId {
            try encodeContainer.encode(dataSourceId, forKey: .dataSourceId)
        }
        if let finishedAt = self.finishedAt {
            try encodeContainer.encode(finishedAt.timeIntervalSince1970, forKey: .finishedAt)
        }
        if let lastUpdatedAt = self.lastUpdatedAt {
            try encodeContainer.encode(lastUpdatedAt.timeIntervalSince1970, forKey: .lastUpdatedAt)
        }
        if let message = self.message {
            try encodeContainer.encode(message, forKey: .message)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let numberOfFiles = self.numberOfFiles {
            try encodeContainer.encode(numberOfFiles, forKey: .numberOfFiles)
        }
        if let rDSMetadata = self.rDSMetadata {
            try encodeContainer.encode(rDSMetadata, forKey: .rDSMetadata)
        }
        if let redshiftMetadata = self.redshiftMetadata {
            try encodeContainer.encode(redshiftMetadata, forKey: .redshiftMetadata)
        }
        if let roleARN = self.roleARN {
            try encodeContainer.encode(roleARN, forKey: .roleARN)
        }
        if let startedAt = self.startedAt {
            try encodeContainer.encode(startedAt.timeIntervalSince1970, forKey: .startedAt)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dataSourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataSourceId)
        dataSourceId = dataSourceIdDecoded
        let dataLocationS3Decoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataLocationS3)
        dataLocationS3 = dataLocationS3Decoded
        let dataRearrangementDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataRearrangement)
        dataRearrangement = dataRearrangementDecoded
        let createdByIamUserDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .createdByIamUser)
        createdByIamUser = createdByIamUserDecoded
        let createdAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdAt)
        createdAt = createdAtDecoded
        let lastUpdatedAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastUpdatedAt)
        lastUpdatedAt = lastUpdatedAtDecoded
        let dataSizeInBytesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .dataSizeInBytes)
        dataSizeInBytes = dataSizeInBytesDecoded
        let numberOfFilesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .numberOfFiles)
        numberOfFiles = numberOfFilesDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let statusDecoded = try containerValues.decodeIfPresent(MachineLearningClientTypes.EntityStatus.self, forKey: .status)
        status = statusDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let redshiftMetadataDecoded = try containerValues.decodeIfPresent(MachineLearningClientTypes.RedshiftMetadata.self, forKey: .redshiftMetadata)
        redshiftMetadata = redshiftMetadataDecoded
        let rDSMetadataDecoded = try containerValues.decodeIfPresent(MachineLearningClientTypes.RDSMetadata.self, forKey: .rDSMetadata)
        rDSMetadata = rDSMetadataDecoded
        let roleARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleARN)
        roleARN = roleARNDecoded
        let computeStatisticsDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .computeStatistics) ?? false
        computeStatistics = computeStatisticsDecoded
        let computeTimeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .computeTime)
        computeTime = computeTimeDecoded
        let finishedAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .finishedAt)
        finishedAt = finishedAtDecoded
        let startedAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .startedAt)
        startedAt = startedAtDecoded
    }
}
