// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetEvaluationOutputResponseBody: Swift.Equatable {
    let evaluationId: Swift.String?
    let mLModelId: Swift.String?
    let evaluationDataSourceId: Swift.String?
    let inputDataLocationS3: Swift.String?
    let createdByIamUser: Swift.String?
    let createdAt: ClientRuntime.Date?
    let lastUpdatedAt: ClientRuntime.Date?
    let name: Swift.String?
    let status: MachineLearningClientTypes.EntityStatus?
    let performanceMetrics: MachineLearningClientTypes.PerformanceMetrics?
    let logUri: Swift.String?
    let message: Swift.String?
    let computeTime: Swift.Int?
    let finishedAt: ClientRuntime.Date?
    let startedAt: ClientRuntime.Date?
}

extension GetEvaluationOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case computeTime = "ComputeTime"
        case createdAt = "CreatedAt"
        case createdByIamUser = "CreatedByIamUser"
        case evaluationDataSourceId = "EvaluationDataSourceId"
        case evaluationId = "EvaluationId"
        case finishedAt = "FinishedAt"
        case inputDataLocationS3 = "InputDataLocationS3"
        case lastUpdatedAt = "LastUpdatedAt"
        case logUri = "LogUri"
        case mLModelId = "MLModelId"
        case message = "Message"
        case name = "Name"
        case performanceMetrics = "PerformanceMetrics"
        case startedAt = "StartedAt"
        case status = "Status"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let evaluationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .evaluationId)
        evaluationId = evaluationIdDecoded
        let mLModelIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .mLModelId)
        mLModelId = mLModelIdDecoded
        let evaluationDataSourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .evaluationDataSourceId)
        evaluationDataSourceId = evaluationDataSourceIdDecoded
        let inputDataLocationS3Decoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .inputDataLocationS3)
        inputDataLocationS3 = inputDataLocationS3Decoded
        let createdByIamUserDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .createdByIamUser)
        createdByIamUser = createdByIamUserDecoded
        let createdAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdAt)
        createdAt = createdAtDecoded
        let lastUpdatedAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastUpdatedAt)
        lastUpdatedAt = lastUpdatedAtDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let statusDecoded = try containerValues.decodeIfPresent(MachineLearningClientTypes.EntityStatus.self, forKey: .status)
        status = statusDecoded
        let performanceMetricsDecoded = try containerValues.decodeIfPresent(MachineLearningClientTypes.PerformanceMetrics.self, forKey: .performanceMetrics)
        performanceMetrics = performanceMetricsDecoded
        let logUriDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logUri)
        logUri = logUriDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let computeTimeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .computeTime)
        computeTime = computeTimeDecoded
        let finishedAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .finishedAt)
        finishedAt = finishedAtDecoded
        let startedAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .startedAt)
        startedAt = startedAtDecoded
    }
}
