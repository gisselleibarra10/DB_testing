// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

/// Represents the output of a GetDataSource operation and describes a DataSource.
public struct GetDataSourceOutputResponse: Swift.Equatable {
    /// The parameter is true if statistics need to be generated from the observation data.
    public var computeStatistics: Swift.Bool
    /// The approximate CPU time in milliseconds that Amazon Machine Learning spent processing the DataSource, normalized and scaled on computation resources. ComputeTime is only available if the DataSource is in the COMPLETED state and the ComputeStatistics is set to true.
    public var computeTime: Swift.Int?
    /// The time that the DataSource was created. The time is expressed in epoch time.
    public var createdAt: ClientRuntime.Date?
    /// The AWS user account from which the DataSource was created. The account type can be either an AWS root account or an AWS Identity and Access Management (IAM) user account.
    public var createdByIamUser: Swift.String?
    /// The location of the data file or directory in Amazon Simple Storage Service (Amazon S3).
    public var dataLocationS3: Swift.String?
    /// A JSON string that represents the splitting and rearrangement requirement used when this DataSource was created.
    public var dataRearrangement: Swift.String?
    /// The total size of observations in the data files.
    public var dataSizeInBytes: Swift.Int?
    /// The ID assigned to the DataSource at creation. This value should be identical to the value of the DataSourceId in the request.
    public var dataSourceId: Swift.String?
    /// The schema used by all of the data files of this DataSource. Note: This parameter is provided as part of the verbose format.
    public var dataSourceSchema: Swift.String?
    /// The epoch time when Amazon Machine Learning marked the DataSource as COMPLETED or FAILED. FinishedAt is only available when the DataSource is in the COMPLETED or FAILED state.
    public var finishedAt: ClientRuntime.Date?
    /// The time of the most recent edit to the DataSource. The time is expressed in epoch time.
    public var lastUpdatedAt: ClientRuntime.Date?
    /// A link to the file containing logs of CreateDataSourceFrom* operations.
    public var logUri: Swift.String?
    /// The user-supplied description of the most recent details about creating the DataSource.
    public var message: Swift.String?
    /// A user-supplied name or description of the DataSource.
    public var name: Swift.String?
    /// The number of data files referenced by the DataSource.
    public var numberOfFiles: Swift.Int?
    /// The datasource details that are specific to Amazon RDS.
    public var rDSMetadata: MachineLearningClientTypes.RDSMetadata?
    /// Describes the DataSource details specific to Amazon Redshift.
    public var redshiftMetadata: MachineLearningClientTypes.RedshiftMetadata?
    /// The Amazon Resource Name (ARN) of an [AWS IAM Role](https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html#roles-about-termsandconcepts), such as the following: arn:aws:iam::account:role/rolename.
    public var roleARN: Swift.String?
    /// The epoch time when Amazon Machine Learning marked the DataSource as INPROGRESS. StartedAt isn't available if the DataSource is in the PENDING state.
    public var startedAt: ClientRuntime.Date?
    /// The current status of the DataSource. This element can have one of the following values:
    ///
    /// * PENDING - Amazon ML submitted a request to create a DataSource.
    ///
    /// * INPROGRESS - The creation process is underway.
    ///
    /// * FAILED - The request to create a DataSource did not run to completion. It is not usable.
    ///
    /// * COMPLETED - The creation process completed successfully.
    ///
    /// * DELETED - The DataSource is marked as deleted. It is not usable.
    public var status: MachineLearningClientTypes.EntityStatus?

    public init (
        computeStatistics: Swift.Bool = false,
        computeTime: Swift.Int? = nil,
        createdAt: ClientRuntime.Date? = nil,
        createdByIamUser: Swift.String? = nil,
        dataLocationS3: Swift.String? = nil,
        dataRearrangement: Swift.String? = nil,
        dataSizeInBytes: Swift.Int? = nil,
        dataSourceId: Swift.String? = nil,
        dataSourceSchema: Swift.String? = nil,
        finishedAt: ClientRuntime.Date? = nil,
        lastUpdatedAt: ClientRuntime.Date? = nil,
        logUri: Swift.String? = nil,
        message: Swift.String? = nil,
        name: Swift.String? = nil,
        numberOfFiles: Swift.Int? = nil,
        rDSMetadata: MachineLearningClientTypes.RDSMetadata? = nil,
        redshiftMetadata: MachineLearningClientTypes.RedshiftMetadata? = nil,
        roleARN: Swift.String? = nil,
        startedAt: ClientRuntime.Date? = nil,
        status: MachineLearningClientTypes.EntityStatus? = nil
    )
    {
        self.computeStatistics = computeStatistics
        self.computeTime = computeTime
        self.createdAt = createdAt
        self.createdByIamUser = createdByIamUser
        self.dataLocationS3 = dataLocationS3
        self.dataRearrangement = dataRearrangement
        self.dataSizeInBytes = dataSizeInBytes
        self.dataSourceId = dataSourceId
        self.dataSourceSchema = dataSourceSchema
        self.finishedAt = finishedAt
        self.lastUpdatedAt = lastUpdatedAt
        self.logUri = logUri
        self.message = message
        self.name = name
        self.numberOfFiles = numberOfFiles
        self.rDSMetadata = rDSMetadata
        self.redshiftMetadata = redshiftMetadata
        self.roleARN = roleARN
        self.startedAt = startedAt
        self.status = status
    }
}
