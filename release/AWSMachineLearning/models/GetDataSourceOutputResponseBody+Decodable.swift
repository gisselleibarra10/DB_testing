// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetDataSourceOutputResponseBody: Swift.Equatable {
    let dataSourceId: Swift.String?
    let dataLocationS3: Swift.String?
    let dataRearrangement: Swift.String?
    let createdByIamUser: Swift.String?
    let createdAt: ClientRuntime.Date?
    let lastUpdatedAt: ClientRuntime.Date?
    let dataSizeInBytes: Swift.Int?
    let numberOfFiles: Swift.Int?
    let name: Swift.String?
    let status: MachineLearningClientTypes.EntityStatus?
    let logUri: Swift.String?
    let message: Swift.String?
    let redshiftMetadata: MachineLearningClientTypes.RedshiftMetadata?
    let rDSMetadata: MachineLearningClientTypes.RDSMetadata?
    let roleARN: Swift.String?
    let computeStatistics: Swift.Bool
    let computeTime: Swift.Int?
    let finishedAt: ClientRuntime.Date?
    let startedAt: ClientRuntime.Date?
    let dataSourceSchema: Swift.String?
}

extension GetDataSourceOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case computeStatistics = "ComputeStatistics"
        case computeTime = "ComputeTime"
        case createdAt = "CreatedAt"
        case createdByIamUser = "CreatedByIamUser"
        case dataLocationS3 = "DataLocationS3"
        case dataRearrangement = "DataRearrangement"
        case dataSizeInBytes = "DataSizeInBytes"
        case dataSourceId = "DataSourceId"
        case dataSourceSchema = "DataSourceSchema"
        case finishedAt = "FinishedAt"
        case lastUpdatedAt = "LastUpdatedAt"
        case logUri = "LogUri"
        case message = "Message"
        case name = "Name"
        case numberOfFiles = "NumberOfFiles"
        case rDSMetadata = "RDSMetadata"
        case redshiftMetadata = "RedshiftMetadata"
        case roleARN = "RoleARN"
        case startedAt = "StartedAt"
        case status = "Status"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dataSourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataSourceId)
        dataSourceId = dataSourceIdDecoded
        let dataLocationS3Decoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataLocationS3)
        dataLocationS3 = dataLocationS3Decoded
        let dataRearrangementDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataRearrangement)
        dataRearrangement = dataRearrangementDecoded
        let createdByIamUserDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .createdByIamUser)
        createdByIamUser = createdByIamUserDecoded
        let createdAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdAt)
        createdAt = createdAtDecoded
        let lastUpdatedAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastUpdatedAt)
        lastUpdatedAt = lastUpdatedAtDecoded
        let dataSizeInBytesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .dataSizeInBytes)
        dataSizeInBytes = dataSizeInBytesDecoded
        let numberOfFilesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .numberOfFiles)
        numberOfFiles = numberOfFilesDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let statusDecoded = try containerValues.decodeIfPresent(MachineLearningClientTypes.EntityStatus.self, forKey: .status)
        status = statusDecoded
        let logUriDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logUri)
        logUri = logUriDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let redshiftMetadataDecoded = try containerValues.decodeIfPresent(MachineLearningClientTypes.RedshiftMetadata.self, forKey: .redshiftMetadata)
        redshiftMetadata = redshiftMetadataDecoded
        let rDSMetadataDecoded = try containerValues.decodeIfPresent(MachineLearningClientTypes.RDSMetadata.self, forKey: .rDSMetadata)
        rDSMetadata = rDSMetadataDecoded
        let roleARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleARN)
        roleARN = roleARNDecoded
        let computeStatisticsDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .computeStatistics) ?? false
        computeStatistics = computeStatisticsDecoded
        let computeTimeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .computeTime)
        computeTime = computeTimeDecoded
        let finishedAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .finishedAt)
        finishedAt = finishedAtDecoded
        let startedAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .startedAt)
        startedAt = startedAtDecoded
        let dataSourceSchemaDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataSourceSchema)
        dataSourceSchema = dataSourceSchemaDecoded
    }
}
