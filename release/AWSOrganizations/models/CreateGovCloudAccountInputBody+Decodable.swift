// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateGovCloudAccountInputBody: Swift.Equatable {
    let email: Swift.String?
    let accountName: Swift.String?
    let roleName: Swift.String?
    let iamUserAccessToBilling: OrganizationsClientTypes.IAMUserAccessToBilling?
    let tags: [OrganizationsClientTypes.Tag]?
}

extension CreateGovCloudAccountInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountName = "AccountName"
        case email = "Email"
        case iamUserAccessToBilling = "IamUserAccessToBilling"
        case roleName = "RoleName"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let emailDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .email)
        email = emailDecoded
        let accountNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .accountName)
        accountName = accountNameDecoded
        let roleNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleName)
        roleName = roleNameDecoded
        let iamUserAccessToBillingDecoded = try containerValues.decodeIfPresent(OrganizationsClientTypes.IAMUserAccessToBilling.self, forKey: .iamUserAccessToBilling)
        iamUserAccessToBilling = iamUserAccessToBillingDecoded
        let tagsContainer = try containerValues.decodeIfPresent([OrganizationsClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[OrganizationsClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [OrganizationsClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}
