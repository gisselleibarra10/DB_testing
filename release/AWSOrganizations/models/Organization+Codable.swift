// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension OrganizationsClientTypes.Organization: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "Arn"
        case availablePolicyTypes = "AvailablePolicyTypes"
        case featureSet = "FeatureSet"
        case id = "Id"
        case masterAccountArn = "MasterAccountArn"
        case masterAccountEmail = "MasterAccountEmail"
        case masterAccountId = "MasterAccountId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = self.arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let availablePolicyTypes = availablePolicyTypes {
            var availablePolicyTypesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .availablePolicyTypes)
            for policytypes0 in availablePolicyTypes {
                try availablePolicyTypesContainer.encode(policytypes0)
            }
        }
        if let featureSet = self.featureSet {
            try encodeContainer.encode(featureSet.rawValue, forKey: .featureSet)
        }
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let masterAccountArn = self.masterAccountArn {
            try encodeContainer.encode(masterAccountArn, forKey: .masterAccountArn)
        }
        if let masterAccountEmail = self.masterAccountEmail {
            try encodeContainer.encode(masterAccountEmail, forKey: .masterAccountEmail)
        }
        if let masterAccountId = self.masterAccountId {
            try encodeContainer.encode(masterAccountId, forKey: .masterAccountId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let featureSetDecoded = try containerValues.decodeIfPresent(OrganizationsClientTypes.OrganizationFeatureSet.self, forKey: .featureSet)
        featureSet = featureSetDecoded
        let masterAccountArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .masterAccountArn)
        masterAccountArn = masterAccountArnDecoded
        let masterAccountIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .masterAccountId)
        masterAccountId = masterAccountIdDecoded
        let masterAccountEmailDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .masterAccountEmail)
        masterAccountEmail = masterAccountEmailDecoded
        let availablePolicyTypesContainer = try containerValues.decodeIfPresent([OrganizationsClientTypes.PolicyTypeSummary?].self, forKey: .availablePolicyTypes)
        var availablePolicyTypesDecoded0:[OrganizationsClientTypes.PolicyTypeSummary]? = nil
        if let availablePolicyTypesContainer = availablePolicyTypesContainer {
            availablePolicyTypesDecoded0 = [OrganizationsClientTypes.PolicyTypeSummary]()
            for structure0 in availablePolicyTypesContainer {
                if let structure0 = structure0 {
                    availablePolicyTypesDecoded0?.append(structure0)
                }
            }
        }
        availablePolicyTypes = availablePolicyTypesDecoded0
    }
}
