// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension FisClientTypes.TargetResourceType: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description
        case parameters
        case resourceType
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let parameters = parameters {
            var parametersContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .parameters)
            for (dictKey0, targetresourcetypeparametermap0) in parameters {
                try parametersContainer.encode(targetresourcetypeparametermap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let resourceType = self.resourceType {
            try encodeContainer.encode(resourceType, forKey: .resourceType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let parametersContainer = try containerValues.decodeIfPresent([Swift.String: FisClientTypes.TargetResourceTypeParameter?].self, forKey: .parameters)
        var parametersDecoded0: [Swift.String:FisClientTypes.TargetResourceTypeParameter]? = nil
        if let parametersContainer = parametersContainer {
            parametersDecoded0 = [Swift.String:FisClientTypes.TargetResourceTypeParameter]()
            for (key0, targetresourcetypeparameter0) in parametersContainer {
                if let targetresourcetypeparameter0 = targetresourcetypeparameter0 {
                    parametersDecoded0?[key0] = targetresourcetypeparameter0
                }
            }
        }
        parameters = parametersDecoded0
    }
}
