// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateExperimentTemplateInputBody: Swift.Equatable {
    let clientToken: Swift.String?
    let description: Swift.String?
    let stopConditions: [FisClientTypes.CreateExperimentTemplateStopConditionInput]?
    let targets: [Swift.String:FisClientTypes.CreateExperimentTemplateTargetInput]?
    let actions: [Swift.String:FisClientTypes.CreateExperimentTemplateActionInput]?
    let roleArn: Swift.String?
    let tags: [Swift.String:Swift.String]?
    let logConfiguration: FisClientTypes.CreateExperimentTemplateLogConfigurationInput?
}

extension CreateExperimentTemplateInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case actions
        case clientToken
        case description
        case logConfiguration
        case roleArn
        case stopConditions
        case tags
        case targets
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clientTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientToken)
        clientToken = clientTokenDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let stopConditionsContainer = try containerValues.decodeIfPresent([FisClientTypes.CreateExperimentTemplateStopConditionInput?].self, forKey: .stopConditions)
        var stopConditionsDecoded0:[FisClientTypes.CreateExperimentTemplateStopConditionInput]? = nil
        if let stopConditionsContainer = stopConditionsContainer {
            stopConditionsDecoded0 = [FisClientTypes.CreateExperimentTemplateStopConditionInput]()
            for structure0 in stopConditionsContainer {
                if let structure0 = structure0 {
                    stopConditionsDecoded0?.append(structure0)
                }
            }
        }
        stopConditions = stopConditionsDecoded0
        let targetsContainer = try containerValues.decodeIfPresent([Swift.String: FisClientTypes.CreateExperimentTemplateTargetInput?].self, forKey: .targets)
        var targetsDecoded0: [Swift.String:FisClientTypes.CreateExperimentTemplateTargetInput]? = nil
        if let targetsContainer = targetsContainer {
            targetsDecoded0 = [Swift.String:FisClientTypes.CreateExperimentTemplateTargetInput]()
            for (key0, createexperimenttemplatetargetinput0) in targetsContainer {
                if let createexperimenttemplatetargetinput0 = createexperimenttemplatetargetinput0 {
                    targetsDecoded0?[key0] = createexperimenttemplatetargetinput0
                }
            }
        }
        targets = targetsDecoded0
        let actionsContainer = try containerValues.decodeIfPresent([Swift.String: FisClientTypes.CreateExperimentTemplateActionInput?].self, forKey: .actions)
        var actionsDecoded0: [Swift.String:FisClientTypes.CreateExperimentTemplateActionInput]? = nil
        if let actionsContainer = actionsContainer {
            actionsDecoded0 = [Swift.String:FisClientTypes.CreateExperimentTemplateActionInput]()
            for (key0, createexperimenttemplateactioninput0) in actionsContainer {
                if let createexperimenttemplateactioninput0 = createexperimenttemplateactioninput0 {
                    actionsDecoded0?[key0] = createexperimenttemplateactioninput0
                }
            }
        }
        actions = actionsDecoded0
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
        let logConfigurationDecoded = try containerValues.decodeIfPresent(FisClientTypes.CreateExperimentTemplateLogConfigurationInput.self, forKey: .logConfiguration)
        logConfiguration = logConfigurationDecoded
    }
}
