// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension UpdateExperimentTemplateInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case actions
        case description
        case logConfiguration
        case roleArn
        case stopConditions
        case targets
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let actions = actions {
            var actionsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .actions)
            for (dictKey0, updateexperimenttemplateactioninputmap0) in actions {
                try actionsContainer.encode(updateexperimenttemplateactioninputmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let logConfiguration = self.logConfiguration {
            try encodeContainer.encode(logConfiguration, forKey: .logConfiguration)
        }
        if let roleArn = self.roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let stopConditions = stopConditions {
            var stopConditionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .stopConditions)
            for updateexperimenttemplatestopconditioninputlist0 in stopConditions {
                try stopConditionsContainer.encode(updateexperimenttemplatestopconditioninputlist0)
            }
        }
        if let targets = targets {
            var targetsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .targets)
            for (dictKey0, updateexperimenttemplatetargetinputmap0) in targets {
                try targetsContainer.encode(updateexperimenttemplatetargetinputmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }
}
