// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension FisClientTypes.UpdateExperimentTemplateActionInputItem: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case actionId
        case description
        case parameters
        case startAfter
        case targets
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let actionId = self.actionId {
            try encodeContainer.encode(actionId, forKey: .actionId)
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let parameters = parameters {
            var parametersContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .parameters)
            for (dictKey0, experimenttemplateactionparametermap0) in parameters {
                try parametersContainer.encode(experimenttemplateactionparametermap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let startAfter = startAfter {
            var startAfterContainer = encodeContainer.nestedUnkeyedContainer(forKey: .startAfter)
            for experimenttemplateactionstartafterlist0 in startAfter {
                try startAfterContainer.encode(experimenttemplateactionstartafterlist0)
            }
        }
        if let targets = targets {
            var targetsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .targets)
            for (dictKey0, experimenttemplateactiontargetmap0) in targets {
                try targetsContainer.encode(experimenttemplateactiontargetmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let actionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .actionId)
        actionId = actionIdDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let parametersContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .parameters)
        var parametersDecoded0: [Swift.String:Swift.String]? = nil
        if let parametersContainer = parametersContainer {
            parametersDecoded0 = [Swift.String:Swift.String]()
            for (key0, experimenttemplateactionparameter0) in parametersContainer {
                if let experimenttemplateactionparameter0 = experimenttemplateactionparameter0 {
                    parametersDecoded0?[key0] = experimenttemplateactionparameter0
                }
            }
        }
        parameters = parametersDecoded0
        let targetsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .targets)
        var targetsDecoded0: [Swift.String:Swift.String]? = nil
        if let targetsContainer = targetsContainer {
            targetsDecoded0 = [Swift.String:Swift.String]()
            for (key0, experimenttemplatetargetname0) in targetsContainer {
                if let experimenttemplatetargetname0 = experimenttemplatetargetname0 {
                    targetsDecoded0?[key0] = experimenttemplatetargetname0
                }
            }
        }
        targets = targetsDecoded0
        let startAfterContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .startAfter)
        var startAfterDecoded0:[Swift.String]? = nil
        if let startAfterContainer = startAfterContainer {
            startAfterDecoded0 = [Swift.String]()
            for string0 in startAfterContainer {
                if let string0 = string0 {
                    startAfterDecoded0?.append(string0)
                }
            }
        }
        startAfter = startAfterDecoded0
    }
}
