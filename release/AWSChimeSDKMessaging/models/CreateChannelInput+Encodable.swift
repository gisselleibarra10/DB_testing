// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CreateChannelInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case appInstanceArn = "AppInstanceArn"
        case channelId = "ChannelId"
        case clientRequestToken = "ClientRequestToken"
        case elasticChannelConfiguration = "ElasticChannelConfiguration"
        case memberArns = "MemberArns"
        case metadata = "Metadata"
        case mode = "Mode"
        case moderatorArns = "ModeratorArns"
        case name = "Name"
        case privacy = "Privacy"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let appInstanceArn = self.appInstanceArn {
            try encodeContainer.encode(appInstanceArn, forKey: .appInstanceArn)
        }
        if let channelId = self.channelId {
            try encodeContainer.encode(channelId, forKey: .channelId)
        }
        if let clientRequestToken = self.clientRequestToken {
            try encodeContainer.encode(clientRequestToken, forKey: .clientRequestToken)
        }
        if let elasticChannelConfiguration = self.elasticChannelConfiguration {
            try encodeContainer.encode(elasticChannelConfiguration, forKey: .elasticChannelConfiguration)
        }
        if let memberArns = memberArns {
            var memberArnsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .memberArns)
            for channelmemberarns0 in memberArns {
                try memberArnsContainer.encode(channelmemberarns0)
            }
        }
        if let metadata = self.metadata {
            try encodeContainer.encode(metadata, forKey: .metadata)
        }
        if let mode = self.mode {
            try encodeContainer.encode(mode.rawValue, forKey: .mode)
        }
        if let moderatorArns = moderatorArns {
            var moderatorArnsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .moderatorArns)
            for channelmoderatorarns0 in moderatorArns {
                try moderatorArnsContainer.encode(channelmoderatorarns0)
            }
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let privacy = self.privacy {
            try encodeContainer.encode(privacy.rawValue, forKey: .privacy)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }
}
