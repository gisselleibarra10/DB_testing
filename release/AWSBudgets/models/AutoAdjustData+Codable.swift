// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension BudgetsClientTypes.AutoAdjustData: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case autoAdjustType = "AutoAdjustType"
        case historicalOptions = "HistoricalOptions"
        case lastAutoAdjustTime = "LastAutoAdjustTime"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let autoAdjustType = self.autoAdjustType {
            try encodeContainer.encode(autoAdjustType.rawValue, forKey: .autoAdjustType)
        }
        if let historicalOptions = self.historicalOptions {
            try encodeContainer.encode(historicalOptions, forKey: .historicalOptions)
        }
        if let lastAutoAdjustTime = self.lastAutoAdjustTime {
            try encodeContainer.encode(lastAutoAdjustTime.timeIntervalSince1970, forKey: .lastAutoAdjustTime)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let autoAdjustTypeDecoded = try containerValues.decodeIfPresent(BudgetsClientTypes.AutoAdjustType.self, forKey: .autoAdjustType)
        autoAdjustType = autoAdjustTypeDecoded
        let historicalOptionsDecoded = try containerValues.decodeIfPresent(BudgetsClientTypes.HistoricalOptions.self, forKey: .historicalOptions)
        historicalOptions = historicalOptionsDecoded
        let lastAutoAdjustTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastAutoAdjustTime)
        lastAutoAdjustTime = lastAutoAdjustTimeDecoded
    }
}
