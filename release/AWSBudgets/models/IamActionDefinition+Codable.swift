// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension BudgetsClientTypes.IamActionDefinition: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case groups = "Groups"
        case policyArn = "PolicyArn"
        case roles = "Roles"
        case users = "Users"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let groups = groups {
            var groupsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .groups)
            for groups0 in groups {
                try groupsContainer.encode(groups0)
            }
        }
        if let policyArn = self.policyArn {
            try encodeContainer.encode(policyArn, forKey: .policyArn)
        }
        if let roles = roles {
            var rolesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .roles)
            for roles0 in roles {
                try rolesContainer.encode(roles0)
            }
        }
        if let users = users {
            var usersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .users)
            for users0 in users {
                try usersContainer.encode(users0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let policyArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policyArn)
        policyArn = policyArnDecoded
        let rolesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .roles)
        var rolesDecoded0:[Swift.String]? = nil
        if let rolesContainer = rolesContainer {
            rolesDecoded0 = [Swift.String]()
            for string0 in rolesContainer {
                if let string0 = string0 {
                    rolesDecoded0?.append(string0)
                }
            }
        }
        roles = rolesDecoded0
        let groupsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .groups)
        var groupsDecoded0:[Swift.String]? = nil
        if let groupsContainer = groupsContainer {
            groupsDecoded0 = [Swift.String]()
            for string0 in groupsContainer {
                if let string0 = string0 {
                    groupsDecoded0?.append(string0)
                }
            }
        }
        groups = groupsDecoded0
        let usersContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .users)
        var usersDecoded0:[Swift.String]? = nil
        if let usersContainer = usersContainer {
            usersDecoded0 = [Swift.String]()
            for string0 in usersContainer {
                if let string0 = string0 {
                    usersDecoded0?.append(string0)
                }
            }
        }
        users = usersDecoded0
    }
}
