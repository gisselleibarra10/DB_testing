// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateBudgetInputBody: Swift.Equatable {
    let accountId: Swift.String?
    let budget: BudgetsClientTypes.Budget?
    let notificationsWithSubscribers: [BudgetsClientTypes.NotificationWithSubscribers]?
}

extension CreateBudgetInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountId = "AccountId"
        case budget = "Budget"
        case notificationsWithSubscribers = "NotificationsWithSubscribers"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let accountIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .accountId)
        accountId = accountIdDecoded
        let budgetDecoded = try containerValues.decodeIfPresent(BudgetsClientTypes.Budget.self, forKey: .budget)
        budget = budgetDecoded
        let notificationsWithSubscribersContainer = try containerValues.decodeIfPresent([BudgetsClientTypes.NotificationWithSubscribers?].self, forKey: .notificationsWithSubscribers)
        var notificationsWithSubscribersDecoded0:[BudgetsClientTypes.NotificationWithSubscribers]? = nil
        if let notificationsWithSubscribersContainer = notificationsWithSubscribersContainer {
            notificationsWithSubscribersDecoded0 = [BudgetsClientTypes.NotificationWithSubscribers]()
            for structure0 in notificationsWithSubscribersContainer {
                if let structure0 = structure0 {
                    notificationsWithSubscribersDecoded0?.append(structure0)
                }
            }
        }
        notificationsWithSubscribers = notificationsWithSubscribersDecoded0
    }
}
