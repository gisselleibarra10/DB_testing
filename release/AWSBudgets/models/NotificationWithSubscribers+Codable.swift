// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension BudgetsClientTypes.NotificationWithSubscribers: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case notification = "Notification"
        case subscribers = "Subscribers"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let notification = self.notification {
            try encodeContainer.encode(notification, forKey: .notification)
        }
        if let subscribers = subscribers {
            var subscribersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .subscribers)
            for subscribers0 in subscribers {
                try subscribersContainer.encode(subscribers0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let notificationDecoded = try containerValues.decodeIfPresent(BudgetsClientTypes.Notification.self, forKey: .notification)
        notification = notificationDecoded
        let subscribersContainer = try containerValues.decodeIfPresent([BudgetsClientTypes.Subscriber?].self, forKey: .subscribers)
        var subscribersDecoded0:[BudgetsClientTypes.Subscriber]? = nil
        if let subscribersContainer = subscribersContainer {
            subscribersDecoded0 = [BudgetsClientTypes.Subscriber]()
            for structure0 in subscribersContainer {
                if let structure0 = structure0 {
                    subscribersDecoded0?.append(structure0)
                }
            }
        }
        subscribers = subscribersDecoded0
    }
}
