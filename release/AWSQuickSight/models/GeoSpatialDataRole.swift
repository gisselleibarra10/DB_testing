// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension QuickSightClientTypes {
    public enum GeoSpatialDataRole: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case city
        case country
        case county
        case latitude
        case longitude
        case postcode
        case state
        case sdkUnknown(Swift.String)

        public static var allCases: [GeoSpatialDataRole] {
            return [
                .city,
                .country,
                .county,
                .latitude,
                .longitude,
                .postcode,
                .state,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .city: return "CITY"
            case .country: return "COUNTRY"
            case .county: return "COUNTY"
            case .latitude: return "LATITUDE"
            case .longitude: return "LONGITUDE"
            case .postcode: return "POSTCODE"
            case .state: return "STATE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = GeoSpatialDataRole(rawValue: rawValue) ?? GeoSpatialDataRole.sdkUnknown(rawValue)
        }
    }
}
