// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension QuickSightClientTypes.UploadSettings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case containsHeader = "ContainsHeader"
        case delimiter = "Delimiter"
        case format = "Format"
        case startFromRow = "StartFromRow"
        case textQualifier = "TextQualifier"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let containsHeader = self.containsHeader {
            try encodeContainer.encode(containsHeader, forKey: .containsHeader)
        }
        if let delimiter = self.delimiter {
            try encodeContainer.encode(delimiter, forKey: .delimiter)
        }
        if let format = self.format {
            try encodeContainer.encode(format.rawValue, forKey: .format)
        }
        if let startFromRow = self.startFromRow {
            try encodeContainer.encode(startFromRow, forKey: .startFromRow)
        }
        if let textQualifier = self.textQualifier {
            try encodeContainer.encode(textQualifier.rawValue, forKey: .textQualifier)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let formatDecoded = try containerValues.decodeIfPresent(QuickSightClientTypes.FileFormat.self, forKey: .format)
        format = formatDecoded
        let startFromRowDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .startFromRow)
        startFromRow = startFromRowDecoded
        let containsHeaderDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .containsHeader)
        containsHeader = containsHeaderDecoded
        let textQualifierDecoded = try containerValues.decodeIfPresent(QuickSightClientTypes.TextQualifier.self, forKey: .textQualifier)
        textQualifier = textQualifierDecoded
        let delimiterDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .delimiter)
        delimiter = delimiterDecoded
    }
}
