// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateDataSourceInputBody: Swift.Equatable {
    let dataSourceId: Swift.String?
    let name: Swift.String?
    let type: QuickSightClientTypes.DataSourceType?
    let dataSourceParameters: QuickSightClientTypes.DataSourceParameters?
    let credentials: QuickSightClientTypes.DataSourceCredentials?
    let permissions: [QuickSightClientTypes.ResourcePermission]?
    let vpcConnectionProperties: QuickSightClientTypes.VpcConnectionProperties?
    let sslProperties: QuickSightClientTypes.SslProperties?
    let tags: [QuickSightClientTypes.Tag]?
}

extension CreateDataSourceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case credentials = "Credentials"
        case dataSourceId = "DataSourceId"
        case dataSourceParameters = "DataSourceParameters"
        case name = "Name"
        case permissions = "Permissions"
        case sslProperties = "SslProperties"
        case tags = "Tags"
        case type = "Type"
        case vpcConnectionProperties = "VpcConnectionProperties"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dataSourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataSourceId)
        dataSourceId = dataSourceIdDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let typeDecoded = try containerValues.decodeIfPresent(QuickSightClientTypes.DataSourceType.self, forKey: .type)
        type = typeDecoded
        let dataSourceParametersDecoded = try containerValues.decodeIfPresent(QuickSightClientTypes.DataSourceParameters.self, forKey: .dataSourceParameters)
        dataSourceParameters = dataSourceParametersDecoded
        let credentialsDecoded = try containerValues.decodeIfPresent(QuickSightClientTypes.DataSourceCredentials.self, forKey: .credentials)
        credentials = credentialsDecoded
        let permissionsContainer = try containerValues.decodeIfPresent([QuickSightClientTypes.ResourcePermission?].self, forKey: .permissions)
        var permissionsDecoded0:[QuickSightClientTypes.ResourcePermission]? = nil
        if let permissionsContainer = permissionsContainer {
            permissionsDecoded0 = [QuickSightClientTypes.ResourcePermission]()
            for structure0 in permissionsContainer {
                if let structure0 = structure0 {
                    permissionsDecoded0?.append(structure0)
                }
            }
        }
        permissions = permissionsDecoded0
        let vpcConnectionPropertiesDecoded = try containerValues.decodeIfPresent(QuickSightClientTypes.VpcConnectionProperties.self, forKey: .vpcConnectionProperties)
        vpcConnectionProperties = vpcConnectionPropertiesDecoded
        let sslPropertiesDecoded = try containerValues.decodeIfPresent(QuickSightClientTypes.SslProperties.self, forKey: .sslProperties)
        sslProperties = sslPropertiesDecoded
        let tagsContainer = try containerValues.decodeIfPresent([QuickSightClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[QuickSightClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [QuickSightClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}
