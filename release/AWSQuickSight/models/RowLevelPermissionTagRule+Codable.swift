// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension QuickSightClientTypes.RowLevelPermissionTagRule: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case columnName = "ColumnName"
        case matchAllValue = "MatchAllValue"
        case tagKey = "TagKey"
        case tagMultiValueDelimiter = "TagMultiValueDelimiter"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let columnName = self.columnName {
            try encodeContainer.encode(columnName, forKey: .columnName)
        }
        if let matchAllValue = self.matchAllValue {
            try encodeContainer.encode(matchAllValue, forKey: .matchAllValue)
        }
        if let tagKey = self.tagKey {
            try encodeContainer.encode(tagKey, forKey: .tagKey)
        }
        if let tagMultiValueDelimiter = self.tagMultiValueDelimiter {
            try encodeContainer.encode(tagMultiValueDelimiter, forKey: .tagMultiValueDelimiter)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tagKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tagKey)
        tagKey = tagKeyDecoded
        let columnNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .columnName)
        columnName = columnNameDecoded
        let tagMultiValueDelimiterDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tagMultiValueDelimiter)
        tagMultiValueDelimiter = tagMultiValueDelimiterDecoded
        let matchAllValueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .matchAllValue)
        matchAllValue = matchAllValueDecoded
    }
}
