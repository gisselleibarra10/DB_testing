// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct UpdateIAMPolicyAssignmentInputBody: Swift.Equatable {
    let assignmentStatus: QuickSightClientTypes.AssignmentStatus?
    let policyArn: Swift.String?
    let identities: [Swift.String:[Swift.String]]?
}

extension UpdateIAMPolicyAssignmentInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case assignmentStatus = "AssignmentStatus"
        case identities = "Identities"
        case policyArn = "PolicyArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let assignmentStatusDecoded = try containerValues.decodeIfPresent(QuickSightClientTypes.AssignmentStatus.self, forKey: .assignmentStatus)
        assignmentStatus = assignmentStatusDecoded
        let policyArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policyArn)
        policyArn = policyArnDecoded
        let identitiesContainer = try containerValues.decodeIfPresent([Swift.String: [Swift.String?]?].self, forKey: .identities)
        var identitiesDecoded0: [Swift.String:[Swift.String]]? = nil
        if let identitiesContainer = identitiesContainer {
            identitiesDecoded0 = [Swift.String:[Swift.String]]()
            for (key0, identitynamelist0) in identitiesContainer {
                var identitynamelist0Decoded0: [Swift.String]? = nil
                if let identitynamelist0 = identitynamelist0 {
                    identitynamelist0Decoded0 = [Swift.String]()
                    for string1 in identitynamelist0 {
                        if let string1 = string1 {
                            identitynamelist0Decoded0?.append(string1)
                        }
                    }
                }
                identitiesDecoded0?[key0] = identitynamelist0Decoded0
            }
        }
        identities = identitiesDecoded0
    }
}
