// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateAccountSubscriptionInputBody: Swift.Equatable {
    let edition: QuickSightClientTypes.Edition?
    let authenticationMethod: QuickSightClientTypes.AuthenticationMethodOption?
    let accountName: Swift.String?
    let notificationEmail: Swift.String?
    let activeDirectoryName: Swift.String?
    let realm: Swift.String?
    let directoryId: Swift.String?
    let adminGroup: [Swift.String]?
    let authorGroup: [Swift.String]?
    let readerGroup: [Swift.String]?
    let firstName: Swift.String?
    let lastName: Swift.String?
    let emailAddress: Swift.String?
    let contactNumber: Swift.String?
}

extension CreateAccountSubscriptionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountName = "AccountName"
        case activeDirectoryName = "ActiveDirectoryName"
        case adminGroup = "AdminGroup"
        case authenticationMethod = "AuthenticationMethod"
        case authorGroup = "AuthorGroup"
        case contactNumber = "ContactNumber"
        case directoryId = "DirectoryId"
        case edition = "Edition"
        case emailAddress = "EmailAddress"
        case firstName = "FirstName"
        case lastName = "LastName"
        case notificationEmail = "NotificationEmail"
        case readerGroup = "ReaderGroup"
        case realm = "Realm"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let editionDecoded = try containerValues.decodeIfPresent(QuickSightClientTypes.Edition.self, forKey: .edition)
        edition = editionDecoded
        let authenticationMethodDecoded = try containerValues.decodeIfPresent(QuickSightClientTypes.AuthenticationMethodOption.self, forKey: .authenticationMethod)
        authenticationMethod = authenticationMethodDecoded
        let accountNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .accountName)
        accountName = accountNameDecoded
        let notificationEmailDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .notificationEmail)
        notificationEmail = notificationEmailDecoded
        let activeDirectoryNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .activeDirectoryName)
        activeDirectoryName = activeDirectoryNameDecoded
        let realmDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .realm)
        realm = realmDecoded
        let directoryIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .directoryId)
        directoryId = directoryIdDecoded
        let adminGroupContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .adminGroup)
        var adminGroupDecoded0:[Swift.String]? = nil
        if let adminGroupContainer = adminGroupContainer {
            adminGroupDecoded0 = [Swift.String]()
            for string0 in adminGroupContainer {
                if let string0 = string0 {
                    adminGroupDecoded0?.append(string0)
                }
            }
        }
        adminGroup = adminGroupDecoded0
        let authorGroupContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .authorGroup)
        var authorGroupDecoded0:[Swift.String]? = nil
        if let authorGroupContainer = authorGroupContainer {
            authorGroupDecoded0 = [Swift.String]()
            for string0 in authorGroupContainer {
                if let string0 = string0 {
                    authorGroupDecoded0?.append(string0)
                }
            }
        }
        authorGroup = authorGroupDecoded0
        let readerGroupContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .readerGroup)
        var readerGroupDecoded0:[Swift.String]? = nil
        if let readerGroupContainer = readerGroupContainer {
            readerGroupDecoded0 = [Swift.String]()
            for string0 in readerGroupContainer {
                if let string0 = string0 {
                    readerGroupDecoded0?.append(string0)
                }
            }
        }
        readerGroup = readerGroupDecoded0
        let firstNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .firstName)
        firstName = firstNameDecoded
        let lastNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastName)
        lastName = lastNameDecoded
        let emailAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .emailAddress)
        emailAddress = emailAddressDecoded
        let contactNumberDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .contactNumber)
        contactNumber = contactNumberDecoded
    }
}
