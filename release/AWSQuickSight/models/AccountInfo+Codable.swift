// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension QuickSightClientTypes.AccountInfo: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountName = "AccountName"
        case accountSubscriptionStatus = "AccountSubscriptionStatus"
        case authenticationType = "AuthenticationType"
        case edition = "Edition"
        case notificationEmail = "NotificationEmail"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accountName = self.accountName {
            try encodeContainer.encode(accountName, forKey: .accountName)
        }
        if let accountSubscriptionStatus = self.accountSubscriptionStatus {
            try encodeContainer.encode(accountSubscriptionStatus, forKey: .accountSubscriptionStatus)
        }
        if let authenticationType = self.authenticationType {
            try encodeContainer.encode(authenticationType, forKey: .authenticationType)
        }
        if let edition = self.edition {
            try encodeContainer.encode(edition.rawValue, forKey: .edition)
        }
        if let notificationEmail = self.notificationEmail {
            try encodeContainer.encode(notificationEmail, forKey: .notificationEmail)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let accountNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .accountName)
        accountName = accountNameDecoded
        let editionDecoded = try containerValues.decodeIfPresent(QuickSightClientTypes.Edition.self, forKey: .edition)
        edition = editionDecoded
        let notificationEmailDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .notificationEmail)
        notificationEmail = notificationEmailDecoded
        let authenticationTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .authenticationType)
        authenticationType = authenticationTypeDecoded
        let accountSubscriptionStatusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .accountSubscriptionStatus)
        accountSubscriptionStatus = accountSubscriptionStatusDecoded
    }
}
