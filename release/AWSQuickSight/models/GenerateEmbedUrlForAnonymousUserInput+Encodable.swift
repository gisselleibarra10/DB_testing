// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension GenerateEmbedUrlForAnonymousUserInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case allowedDomains = "AllowedDomains"
        case authorizedResourceArns = "AuthorizedResourceArns"
        case experienceConfiguration = "ExperienceConfiguration"
        case namespace = "Namespace"
        case sessionLifetimeInMinutes = "SessionLifetimeInMinutes"
        case sessionTags = "SessionTags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let allowedDomains = allowedDomains {
            var allowedDomainsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .allowedDomains)
            for stringlist0 in allowedDomains {
                try allowedDomainsContainer.encode(stringlist0)
            }
        }
        if let authorizedResourceArns = authorizedResourceArns {
            var authorizedResourceArnsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .authorizedResourceArns)
            for arnlist0 in authorizedResourceArns {
                try authorizedResourceArnsContainer.encode(arnlist0)
            }
        }
        if let experienceConfiguration = self.experienceConfiguration {
            try encodeContainer.encode(experienceConfiguration, forKey: .experienceConfiguration)
        }
        if let namespace = self.namespace {
            try encodeContainer.encode(namespace, forKey: .namespace)
        }
        if let sessionLifetimeInMinutes = self.sessionLifetimeInMinutes {
            try encodeContainer.encode(sessionLifetimeInMinutes, forKey: .sessionLifetimeInMinutes)
        }
        if let sessionTags = sessionTags {
            var sessionTagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .sessionTags)
            for sessiontaglist0 in sessionTags {
                try sessionTagsContainer.encode(sessiontaglist0)
            }
        }
    }
}
