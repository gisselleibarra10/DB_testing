// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension QuickSightClientTypes.AnalysisSourceTemplate: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "Arn"
        case dataSetReferences = "DataSetReferences"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = self.arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let dataSetReferences = dataSetReferences {
            var dataSetReferencesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .dataSetReferences)
            for datasetreferencelist0 in dataSetReferences {
                try dataSetReferencesContainer.encode(datasetreferencelist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dataSetReferencesContainer = try containerValues.decodeIfPresent([QuickSightClientTypes.DataSetReference?].self, forKey: .dataSetReferences)
        var dataSetReferencesDecoded0:[QuickSightClientTypes.DataSetReference]? = nil
        if let dataSetReferencesContainer = dataSetReferencesContainer {
            dataSetReferencesDecoded0 = [QuickSightClientTypes.DataSetReference]()
            for structure0 in dataSetReferencesContainer {
                if let structure0 = structure0 {
                    dataSetReferencesDecoded0?.append(structure0)
                }
            }
        }
        dataSetReferences = dataSetReferencesDecoded0
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
    }
}
