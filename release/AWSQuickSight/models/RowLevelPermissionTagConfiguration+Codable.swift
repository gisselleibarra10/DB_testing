// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension QuickSightClientTypes.RowLevelPermissionTagConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case status = "Status"
        case tagRules = "TagRules"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let tagRules = tagRules {
            var tagRulesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tagRules)
            for rowlevelpermissiontagrulelist0 in tagRules {
                try tagRulesContainer.encode(rowlevelpermissiontagrulelist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statusDecoded = try containerValues.decodeIfPresent(QuickSightClientTypes.Status.self, forKey: .status)
        status = statusDecoded
        let tagRulesContainer = try containerValues.decodeIfPresent([QuickSightClientTypes.RowLevelPermissionTagRule?].self, forKey: .tagRules)
        var tagRulesDecoded0:[QuickSightClientTypes.RowLevelPermissionTagRule]? = nil
        if let tagRulesContainer = tagRulesContainer {
            tagRulesDecoded0 = [QuickSightClientTypes.RowLevelPermissionTagRule]()
            for structure0 in tagRulesContainer {
                if let structure0 = structure0 {
                    tagRulesDecoded0?.append(structure0)
                }
            }
        }
        tagRules = tagRulesDecoded0
    }
}
