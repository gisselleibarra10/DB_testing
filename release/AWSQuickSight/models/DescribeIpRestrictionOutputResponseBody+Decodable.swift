// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeIpRestrictionOutputResponseBody: Swift.Equatable {
    let awsAccountId: Swift.String?
    let ipRestrictionRuleMap: [Swift.String:Swift.String]?
    let enabled: Swift.Bool?
    let requestId: Swift.String?
    let status: Swift.Int
}

extension DescribeIpRestrictionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case awsAccountId = "AwsAccountId"
        case enabled = "Enabled"
        case ipRestrictionRuleMap = "IpRestrictionRuleMap"
        case requestId = "RequestId"
        case status = "Status"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let awsAccountIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .awsAccountId)
        awsAccountId = awsAccountIdDecoded
        let ipRestrictionRuleMapContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .ipRestrictionRuleMap)
        var ipRestrictionRuleMapDecoded0: [Swift.String:Swift.String]? = nil
        if let ipRestrictionRuleMapContainer = ipRestrictionRuleMapContainer {
            ipRestrictionRuleMapDecoded0 = [Swift.String:Swift.String]()
            for (key0, iprestrictionruledescription0) in ipRestrictionRuleMapContainer {
                if let iprestrictionruledescription0 = iprestrictionruledescription0 {
                    ipRestrictionRuleMapDecoded0?[key0] = iprestrictionruledescription0
                }
            }
        }
        ipRestrictionRuleMap = ipRestrictionRuleMapDecoded0
        let enabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enabled)
        enabled = enabledDecoded
        let requestIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .requestId)
        requestId = requestIdDecoded
        let statusDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .status) ?? 0
        status = statusDecoded
    }
}
