// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListFolderMembersOutputResponseBody: Swift.Equatable {
    let status: Swift.Int
    let folderMemberList: [QuickSightClientTypes.MemberIdArnPair]?
    let nextToken: Swift.String?
    let requestId: Swift.String?
}

extension ListFolderMembersOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case folderMemberList = "FolderMemberList"
        case nextToken = "NextToken"
        case requestId = "RequestId"
        case status = "Status"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statusDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .status) ?? 0
        status = statusDecoded
        let folderMemberListContainer = try containerValues.decodeIfPresent([QuickSightClientTypes.MemberIdArnPair?].self, forKey: .folderMemberList)
        var folderMemberListDecoded0:[QuickSightClientTypes.MemberIdArnPair]? = nil
        if let folderMemberListContainer = folderMemberListContainer {
            folderMemberListDecoded0 = [QuickSightClientTypes.MemberIdArnPair]()
            for structure0 in folderMemberListContainer {
                if let structure0 = structure0 {
                    folderMemberListDecoded0?.append(structure0)
                }
            }
        }
        folderMemberList = folderMemberListDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let requestIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .requestId)
        requestId = requestIdDecoded
    }
}
