// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CreateAccountSubscriptionInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountName = "AccountName"
        case activeDirectoryName = "ActiveDirectoryName"
        case adminGroup = "AdminGroup"
        case authenticationMethod = "AuthenticationMethod"
        case authorGroup = "AuthorGroup"
        case contactNumber = "ContactNumber"
        case directoryId = "DirectoryId"
        case edition = "Edition"
        case emailAddress = "EmailAddress"
        case firstName = "FirstName"
        case lastName = "LastName"
        case notificationEmail = "NotificationEmail"
        case readerGroup = "ReaderGroup"
        case realm = "Realm"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accountName = self.accountName {
            try encodeContainer.encode(accountName, forKey: .accountName)
        }
        if let activeDirectoryName = self.activeDirectoryName {
            try encodeContainer.encode(activeDirectoryName, forKey: .activeDirectoryName)
        }
        if let adminGroup = adminGroup {
            var adminGroupContainer = encodeContainer.nestedUnkeyedContainer(forKey: .adminGroup)
            for groupslist0 in adminGroup {
                try adminGroupContainer.encode(groupslist0)
            }
        }
        if let authenticationMethod = self.authenticationMethod {
            try encodeContainer.encode(authenticationMethod.rawValue, forKey: .authenticationMethod)
        }
        if let authorGroup = authorGroup {
            var authorGroupContainer = encodeContainer.nestedUnkeyedContainer(forKey: .authorGroup)
            for groupslist0 in authorGroup {
                try authorGroupContainer.encode(groupslist0)
            }
        }
        if let contactNumber = self.contactNumber {
            try encodeContainer.encode(contactNumber, forKey: .contactNumber)
        }
        if let directoryId = self.directoryId {
            try encodeContainer.encode(directoryId, forKey: .directoryId)
        }
        if let edition = self.edition {
            try encodeContainer.encode(edition.rawValue, forKey: .edition)
        }
        if let emailAddress = self.emailAddress {
            try encodeContainer.encode(emailAddress, forKey: .emailAddress)
        }
        if let firstName = self.firstName {
            try encodeContainer.encode(firstName, forKey: .firstName)
        }
        if let lastName = self.lastName {
            try encodeContainer.encode(lastName, forKey: .lastName)
        }
        if let notificationEmail = self.notificationEmail {
            try encodeContainer.encode(notificationEmail, forKey: .notificationEmail)
        }
        if let readerGroup = readerGroup {
            var readerGroupContainer = encodeContainer.nestedUnkeyedContainer(forKey: .readerGroup)
            for groupslist0 in readerGroup {
                try readerGroupContainer.encode(groupslist0)
            }
        }
        if let realm = self.realm {
            try encodeContainer.encode(realm, forKey: .realm)
        }
    }
}
