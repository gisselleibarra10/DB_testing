// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension QuickSightClientTypes.UntagColumnOperation: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case columnName = "ColumnName"
        case tagNames = "TagNames"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let columnName = self.columnName {
            try encodeContainer.encode(columnName, forKey: .columnName)
        }
        if let tagNames = tagNames {
            var tagNamesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tagNames)
            for columntagnames0 in tagNames {
                try tagNamesContainer.encode(columntagnames0.rawValue)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let columnNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .columnName)
        columnName = columnNameDecoded
        let tagNamesContainer = try containerValues.decodeIfPresent([QuickSightClientTypes.ColumnTagName?].self, forKey: .tagNames)
        var tagNamesDecoded0:[QuickSightClientTypes.ColumnTagName]? = nil
        if let tagNamesContainer = tagNamesContainer {
            tagNamesDecoded0 = [QuickSightClientTypes.ColumnTagName]()
            for string0 in tagNamesContainer {
                if let string0 = string0 {
                    tagNamesDecoded0?.append(string0)
                }
            }
        }
        tagNames = tagNamesDecoded0
    }
}
