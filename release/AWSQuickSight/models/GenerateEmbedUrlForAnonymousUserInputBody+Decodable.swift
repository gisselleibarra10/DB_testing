// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GenerateEmbedUrlForAnonymousUserInputBody: Swift.Equatable {
    let sessionLifetimeInMinutes: Swift.Int?
    let namespace: Swift.String?
    let sessionTags: [QuickSightClientTypes.SessionTag]?
    let authorizedResourceArns: [Swift.String]?
    let experienceConfiguration: QuickSightClientTypes.AnonymousUserEmbeddingExperienceConfiguration?
    let allowedDomains: [Swift.String]?
}

extension GenerateEmbedUrlForAnonymousUserInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case allowedDomains = "AllowedDomains"
        case authorizedResourceArns = "AuthorizedResourceArns"
        case experienceConfiguration = "ExperienceConfiguration"
        case namespace = "Namespace"
        case sessionLifetimeInMinutes = "SessionLifetimeInMinutes"
        case sessionTags = "SessionTags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sessionLifetimeInMinutesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .sessionLifetimeInMinutes)
        sessionLifetimeInMinutes = sessionLifetimeInMinutesDecoded
        let namespaceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .namespace)
        namespace = namespaceDecoded
        let sessionTagsContainer = try containerValues.decodeIfPresent([QuickSightClientTypes.SessionTag?].self, forKey: .sessionTags)
        var sessionTagsDecoded0:[QuickSightClientTypes.SessionTag]? = nil
        if let sessionTagsContainer = sessionTagsContainer {
            sessionTagsDecoded0 = [QuickSightClientTypes.SessionTag]()
            for structure0 in sessionTagsContainer {
                if let structure0 = structure0 {
                    sessionTagsDecoded0?.append(structure0)
                }
            }
        }
        sessionTags = sessionTagsDecoded0
        let authorizedResourceArnsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .authorizedResourceArns)
        var authorizedResourceArnsDecoded0:[Swift.String]? = nil
        if let authorizedResourceArnsContainer = authorizedResourceArnsContainer {
            authorizedResourceArnsDecoded0 = [Swift.String]()
            for string0 in authorizedResourceArnsContainer {
                if let string0 = string0 {
                    authorizedResourceArnsDecoded0?.append(string0)
                }
            }
        }
        authorizedResourceArns = authorizedResourceArnsDecoded0
        let experienceConfigurationDecoded = try containerValues.decodeIfPresent(QuickSightClientTypes.AnonymousUserEmbeddingExperienceConfiguration.self, forKey: .experienceConfiguration)
        experienceConfiguration = experienceConfigurationDecoded
        let allowedDomainsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .allowedDomains)
        var allowedDomainsDecoded0:[Swift.String]? = nil
        if let allowedDomainsContainer = allowedDomainsContainer {
            allowedDomainsDecoded0 = [Swift.String]()
            for string0 in allowedDomainsContainer {
                if let string0 = string0 {
                    allowedDomainsDecoded0?.append(string0)
                }
            }
        }
        allowedDomains = allowedDomainsDecoded0
    }
}
