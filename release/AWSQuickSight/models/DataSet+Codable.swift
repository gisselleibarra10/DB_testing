// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension QuickSightClientTypes.DataSet: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "Arn"
        case columnGroups = "ColumnGroups"
        case columnLevelPermissionRules = "ColumnLevelPermissionRules"
        case consumedSpiceCapacityInBytes = "ConsumedSpiceCapacityInBytes"
        case createdTime = "CreatedTime"
        case dataSetId = "DataSetId"
        case dataSetUsageConfiguration = "DataSetUsageConfiguration"
        case fieldFolders = "FieldFolders"
        case importMode = "ImportMode"
        case lastUpdatedTime = "LastUpdatedTime"
        case logicalTableMap = "LogicalTableMap"
        case name = "Name"
        case outputColumns = "OutputColumns"
        case physicalTableMap = "PhysicalTableMap"
        case rowLevelPermissionDataSet = "RowLevelPermissionDataSet"
        case rowLevelPermissionTagConfiguration = "RowLevelPermissionTagConfiguration"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = self.arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let columnGroups = columnGroups {
            var columnGroupsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .columnGroups)
            for columngrouplist0 in columnGroups {
                try columnGroupsContainer.encode(columngrouplist0)
            }
        }
        if let columnLevelPermissionRules = columnLevelPermissionRules {
            var columnLevelPermissionRulesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .columnLevelPermissionRules)
            for columnlevelpermissionrulelist0 in columnLevelPermissionRules {
                try columnLevelPermissionRulesContainer.encode(columnlevelpermissionrulelist0)
            }
        }
        if consumedSpiceCapacityInBytes != 0 {
            try encodeContainer.encode(consumedSpiceCapacityInBytes, forKey: .consumedSpiceCapacityInBytes)
        }
        if let createdTime = self.createdTime {
            try encodeContainer.encode(createdTime.timeIntervalSince1970, forKey: .createdTime)
        }
        if let dataSetId = self.dataSetId {
            try encodeContainer.encode(dataSetId, forKey: .dataSetId)
        }
        if let dataSetUsageConfiguration = self.dataSetUsageConfiguration {
            try encodeContainer.encode(dataSetUsageConfiguration, forKey: .dataSetUsageConfiguration)
        }
        if let fieldFolders = fieldFolders {
            var fieldFoldersContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .fieldFolders)
            for (dictKey0, fieldfoldermap0) in fieldFolders {
                try fieldFoldersContainer.encode(fieldfoldermap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let importMode = self.importMode {
            try encodeContainer.encode(importMode.rawValue, forKey: .importMode)
        }
        if let lastUpdatedTime = self.lastUpdatedTime {
            try encodeContainer.encode(lastUpdatedTime.timeIntervalSince1970, forKey: .lastUpdatedTime)
        }
        if let logicalTableMap = logicalTableMap {
            var logicalTableMapContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .logicalTableMap)
            for (dictKey0, logicaltablemap0) in logicalTableMap {
                try logicalTableMapContainer.encode(logicaltablemap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let outputColumns = outputColumns {
            var outputColumnsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .outputColumns)
            for outputcolumnlist0 in outputColumns {
                try outputColumnsContainer.encode(outputcolumnlist0)
            }
        }
        if let physicalTableMap = physicalTableMap {
            var physicalTableMapContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .physicalTableMap)
            for (dictKey0, physicaltablemap0) in physicalTableMap {
                try physicalTableMapContainer.encode(physicaltablemap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let rowLevelPermissionDataSet = self.rowLevelPermissionDataSet {
            try encodeContainer.encode(rowLevelPermissionDataSet, forKey: .rowLevelPermissionDataSet)
        }
        if let rowLevelPermissionTagConfiguration = self.rowLevelPermissionTagConfiguration {
            try encodeContainer.encode(rowLevelPermissionTagConfiguration, forKey: .rowLevelPermissionTagConfiguration)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let dataSetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataSetId)
        dataSetId = dataSetIdDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let createdTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdTime)
        createdTime = createdTimeDecoded
        let lastUpdatedTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastUpdatedTime)
        lastUpdatedTime = lastUpdatedTimeDecoded
        let physicalTableMapContainer = try containerValues.decodeIfPresent([Swift.String: QuickSightClientTypes.PhysicalTable?].self, forKey: .physicalTableMap)
        var physicalTableMapDecoded0: [Swift.String:QuickSightClientTypes.PhysicalTable]? = nil
        if let physicalTableMapContainer = physicalTableMapContainer {
            physicalTableMapDecoded0 = [Swift.String:QuickSightClientTypes.PhysicalTable]()
            for (key0, physicaltable0) in physicalTableMapContainer {
                if let physicaltable0 = physicaltable0 {
                    physicalTableMapDecoded0?[key0] = physicaltable0
                }
            }
        }
        physicalTableMap = physicalTableMapDecoded0
        let logicalTableMapContainer = try containerValues.decodeIfPresent([Swift.String: QuickSightClientTypes.LogicalTable?].self, forKey: .logicalTableMap)
        var logicalTableMapDecoded0: [Swift.String:QuickSightClientTypes.LogicalTable]? = nil
        if let logicalTableMapContainer = logicalTableMapContainer {
            logicalTableMapDecoded0 = [Swift.String:QuickSightClientTypes.LogicalTable]()
            for (key0, logicaltable0) in logicalTableMapContainer {
                if let logicaltable0 = logicaltable0 {
                    logicalTableMapDecoded0?[key0] = logicaltable0
                }
            }
        }
        logicalTableMap = logicalTableMapDecoded0
        let outputColumnsContainer = try containerValues.decodeIfPresent([QuickSightClientTypes.OutputColumn?].self, forKey: .outputColumns)
        var outputColumnsDecoded0:[QuickSightClientTypes.OutputColumn]? = nil
        if let outputColumnsContainer = outputColumnsContainer {
            outputColumnsDecoded0 = [QuickSightClientTypes.OutputColumn]()
            for structure0 in outputColumnsContainer {
                if let structure0 = structure0 {
                    outputColumnsDecoded0?.append(structure0)
                }
            }
        }
        outputColumns = outputColumnsDecoded0
        let importModeDecoded = try containerValues.decodeIfPresent(QuickSightClientTypes.DataSetImportMode.self, forKey: .importMode)
        importMode = importModeDecoded
        let consumedSpiceCapacityInBytesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .consumedSpiceCapacityInBytes) ?? 0
        consumedSpiceCapacityInBytes = consumedSpiceCapacityInBytesDecoded
        let columnGroupsContainer = try containerValues.decodeIfPresent([QuickSightClientTypes.ColumnGroup?].self, forKey: .columnGroups)
        var columnGroupsDecoded0:[QuickSightClientTypes.ColumnGroup]? = nil
        if let columnGroupsContainer = columnGroupsContainer {
            columnGroupsDecoded0 = [QuickSightClientTypes.ColumnGroup]()
            for structure0 in columnGroupsContainer {
                if let structure0 = structure0 {
                    columnGroupsDecoded0?.append(structure0)
                }
            }
        }
        columnGroups = columnGroupsDecoded0
        let fieldFoldersContainer = try containerValues.decodeIfPresent([Swift.String: QuickSightClientTypes.FieldFolder?].self, forKey: .fieldFolders)
        var fieldFoldersDecoded0: [Swift.String:QuickSightClientTypes.FieldFolder]? = nil
        if let fieldFoldersContainer = fieldFoldersContainer {
            fieldFoldersDecoded0 = [Swift.String:QuickSightClientTypes.FieldFolder]()
            for (key0, fieldfolder0) in fieldFoldersContainer {
                if let fieldfolder0 = fieldfolder0 {
                    fieldFoldersDecoded0?[key0] = fieldfolder0
                }
            }
        }
        fieldFolders = fieldFoldersDecoded0
        let rowLevelPermissionDataSetDecoded = try containerValues.decodeIfPresent(QuickSightClientTypes.RowLevelPermissionDataSet.self, forKey: .rowLevelPermissionDataSet)
        rowLevelPermissionDataSet = rowLevelPermissionDataSetDecoded
        let rowLevelPermissionTagConfigurationDecoded = try containerValues.decodeIfPresent(QuickSightClientTypes.RowLevelPermissionTagConfiguration.self, forKey: .rowLevelPermissionTagConfiguration)
        rowLevelPermissionTagConfiguration = rowLevelPermissionTagConfigurationDecoded
        let columnLevelPermissionRulesContainer = try containerValues.decodeIfPresent([QuickSightClientTypes.ColumnLevelPermissionRule?].self, forKey: .columnLevelPermissionRules)
        var columnLevelPermissionRulesDecoded0:[QuickSightClientTypes.ColumnLevelPermissionRule]? = nil
        if let columnLevelPermissionRulesContainer = columnLevelPermissionRulesContainer {
            columnLevelPermissionRulesDecoded0 = [QuickSightClientTypes.ColumnLevelPermissionRule]()
            for structure0 in columnLevelPermissionRulesContainer {
                if let structure0 = structure0 {
                    columnLevelPermissionRulesDecoded0?.append(structure0)
                }
            }
        }
        columnLevelPermissionRules = columnLevelPermissionRulesDecoded0
        let dataSetUsageConfigurationDecoded = try containerValues.decodeIfPresent(QuickSightClientTypes.DataSetUsageConfiguration.self, forKey: .dataSetUsageConfiguration)
        dataSetUsageConfiguration = dataSetUsageConfigurationDecoded
    }
}
