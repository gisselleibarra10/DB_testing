// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension QuickSightClientTypes.RelationalTable: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case catalog = "Catalog"
        case dataSourceArn = "DataSourceArn"
        case inputColumns = "InputColumns"
        case name = "Name"
        case schema = "Schema"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let catalog = self.catalog {
            try encodeContainer.encode(catalog, forKey: .catalog)
        }
        if let dataSourceArn = self.dataSourceArn {
            try encodeContainer.encode(dataSourceArn, forKey: .dataSourceArn)
        }
        if let inputColumns = inputColumns {
            var inputColumnsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .inputColumns)
            for inputcolumnlist0 in inputColumns {
                try inputColumnsContainer.encode(inputcolumnlist0)
            }
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let schema = self.schema {
            try encodeContainer.encode(schema, forKey: .schema)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dataSourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataSourceArn)
        dataSourceArn = dataSourceArnDecoded
        let catalogDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .catalog)
        catalog = catalogDecoded
        let schemaDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .schema)
        schema = schemaDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let inputColumnsContainer = try containerValues.decodeIfPresent([QuickSightClientTypes.InputColumn?].self, forKey: .inputColumns)
        var inputColumnsDecoded0:[QuickSightClientTypes.InputColumn]? = nil
        if let inputColumnsContainer = inputColumnsContainer {
            inputColumnsDecoded0 = [QuickSightClientTypes.InputColumn]()
            for structure0 in inputColumnsContainer {
                if let structure0 = structure0 {
                    inputColumnsDecoded0?.append(structure0)
                }
            }
        }
        inputColumns = inputColumnsDecoded0
    }
}
