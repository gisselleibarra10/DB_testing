// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension QuickSightClientTypes {
    /// Dataset.
    public struct DataSet: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the resource.
        public var arn: Swift.String?
        /// Groupings of columns that work together in certain Amazon QuickSight features. Currently, only geospatial hierarchy is supported.
        public var columnGroups: [QuickSightClientTypes.ColumnGroup]?
        /// A set of one or more definitions of a [ColumnLevelPermissionRule](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_ColumnLevelPermissionRule.html).
        public var columnLevelPermissionRules: [QuickSightClientTypes.ColumnLevelPermissionRule]?
        /// The amount of SPICE capacity used by this dataset. This is 0 if the dataset isn't imported into SPICE.
        public var consumedSpiceCapacityInBytes: Swift.Int
        /// The time that this dataset was created.
        public var createdTime: ClientRuntime.Date?
        /// The ID of the dataset.
        public var dataSetId: Swift.String?
        /// The usage configuration to apply to child datasets that reference this dataset as a source.
        public var dataSetUsageConfiguration: QuickSightClientTypes.DataSetUsageConfiguration?
        /// The folder that contains fields and nested subfolders for your dataset.
        public var fieldFolders: [Swift.String:QuickSightClientTypes.FieldFolder]?
        /// A value that indicates whether you want to import the data into SPICE.
        public var importMode: QuickSightClientTypes.DataSetImportMode?
        /// The last time that this dataset was updated.
        public var lastUpdatedTime: ClientRuntime.Date?
        /// Configures the combination and transformation of the data from the physical tables.
        public var logicalTableMap: [Swift.String:QuickSightClientTypes.LogicalTable]?
        /// A display name for the dataset.
        public var name: Swift.String?
        /// The list of columns after all transforms. These columns are available in templates, analyses, and dashboards.
        public var outputColumns: [QuickSightClientTypes.OutputColumn]?
        /// Declares the physical tables that are available in the underlying data sources.
        public var physicalTableMap: [Swift.String:QuickSightClientTypes.PhysicalTable]?
        /// The row-level security configuration for the dataset.
        public var rowLevelPermissionDataSet: QuickSightClientTypes.RowLevelPermissionDataSet?
        /// The element you can use to define tags for row-level security.
        public var rowLevelPermissionTagConfiguration: QuickSightClientTypes.RowLevelPermissionTagConfiguration?

        public init (
            arn: Swift.String? = nil,
            columnGroups: [QuickSightClientTypes.ColumnGroup]? = nil,
            columnLevelPermissionRules: [QuickSightClientTypes.ColumnLevelPermissionRule]? = nil,
            consumedSpiceCapacityInBytes: Swift.Int = 0,
            createdTime: ClientRuntime.Date? = nil,
            dataSetId: Swift.String? = nil,
            dataSetUsageConfiguration: QuickSightClientTypes.DataSetUsageConfiguration? = nil,
            fieldFolders: [Swift.String:QuickSightClientTypes.FieldFolder]? = nil,
            importMode: QuickSightClientTypes.DataSetImportMode? = nil,
            lastUpdatedTime: ClientRuntime.Date? = nil,
            logicalTableMap: [Swift.String:QuickSightClientTypes.LogicalTable]? = nil,
            name: Swift.String? = nil,
            outputColumns: [QuickSightClientTypes.OutputColumn]? = nil,
            physicalTableMap: [Swift.String:QuickSightClientTypes.PhysicalTable]? = nil,
            rowLevelPermissionDataSet: QuickSightClientTypes.RowLevelPermissionDataSet? = nil,
            rowLevelPermissionTagConfiguration: QuickSightClientTypes.RowLevelPermissionTagConfiguration? = nil
        )
        {
            self.arn = arn
            self.columnGroups = columnGroups
            self.columnLevelPermissionRules = columnLevelPermissionRules
            self.consumedSpiceCapacityInBytes = consumedSpiceCapacityInBytes
            self.createdTime = createdTime
            self.dataSetId = dataSetId
            self.dataSetUsageConfiguration = dataSetUsageConfiguration
            self.fieldFolders = fieldFolders
            self.importMode = importMode
            self.lastUpdatedTime = lastUpdatedTime
            self.logicalTableMap = logicalTableMap
            self.name = name
            self.outputColumns = outputColumns
            self.physicalTableMap = physicalTableMap
            self.rowLevelPermissionDataSet = rowLevelPermissionDataSet
            self.rowLevelPermissionTagConfiguration = rowLevelPermissionTagConfiguration
        }
    }

}
