// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension QuickSightClientTypes.TransformOperation: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case castcolumntypeoperation = "CastColumnTypeOperation"
        case createcolumnsoperation = "CreateColumnsOperation"
        case filteroperation = "FilterOperation"
        case projectoperation = "ProjectOperation"
        case renamecolumnoperation = "RenameColumnOperation"
        case tagcolumnoperation = "TagColumnOperation"
        case untagcolumnoperation = "UntagColumnOperation"
        case sdkUnknown
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        switch self {
            case let .castcolumntypeoperation(castcolumntypeoperation):
                try container.encode(castcolumntypeoperation, forKey: .castcolumntypeoperation)
            case let .createcolumnsoperation(createcolumnsoperation):
                try container.encode(createcolumnsoperation, forKey: .createcolumnsoperation)
            case let .filteroperation(filteroperation):
                try container.encode(filteroperation, forKey: .filteroperation)
            case let .projectoperation(projectoperation):
                try container.encode(projectoperation, forKey: .projectoperation)
            case let .renamecolumnoperation(renamecolumnoperation):
                try container.encode(renamecolumnoperation, forKey: .renamecolumnoperation)
            case let .tagcolumnoperation(tagcolumnoperation):
                try container.encode(tagcolumnoperation, forKey: .tagcolumnoperation)
            case let .untagcolumnoperation(untagcolumnoperation):
                try container.encode(untagcolumnoperation, forKey: .untagcolumnoperation)
            case let .sdkUnknown(sdkUnknown):
                try container.encode(sdkUnknown, forKey: .sdkUnknown)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let values = try decoder.container(keyedBy: CodingKeys.self)
        let projectoperationDecoded = try values.decodeIfPresent(QuickSightClientTypes.ProjectOperation.self, forKey: .projectoperation)
        if let projectoperation = projectoperationDecoded {
            self = .projectoperation(projectoperation)
            return
        }
        let filteroperationDecoded = try values.decodeIfPresent(QuickSightClientTypes.FilterOperation.self, forKey: .filteroperation)
        if let filteroperation = filteroperationDecoded {
            self = .filteroperation(filteroperation)
            return
        }
        let createcolumnsoperationDecoded = try values.decodeIfPresent(QuickSightClientTypes.CreateColumnsOperation.self, forKey: .createcolumnsoperation)
        if let createcolumnsoperation = createcolumnsoperationDecoded {
            self = .createcolumnsoperation(createcolumnsoperation)
            return
        }
        let renamecolumnoperationDecoded = try values.decodeIfPresent(QuickSightClientTypes.RenameColumnOperation.self, forKey: .renamecolumnoperation)
        if let renamecolumnoperation = renamecolumnoperationDecoded {
            self = .renamecolumnoperation(renamecolumnoperation)
            return
        }
        let castcolumntypeoperationDecoded = try values.decodeIfPresent(QuickSightClientTypes.CastColumnTypeOperation.self, forKey: .castcolumntypeoperation)
        if let castcolumntypeoperation = castcolumntypeoperationDecoded {
            self = .castcolumntypeoperation(castcolumntypeoperation)
            return
        }
        let tagcolumnoperationDecoded = try values.decodeIfPresent(QuickSightClientTypes.TagColumnOperation.self, forKey: .tagcolumnoperation)
        if let tagcolumnoperation = tagcolumnoperationDecoded {
            self = .tagcolumnoperation(tagcolumnoperation)
            return
        }
        let untagcolumnoperationDecoded = try values.decodeIfPresent(QuickSightClientTypes.UntagColumnOperation.self, forKey: .untagcolumnoperation)
        if let untagcolumnoperation = untagcolumnoperationDecoded {
            self = .untagcolumnoperation(untagcolumnoperation)
            return
        }
        self = .sdkUnknown("")
    }
}
