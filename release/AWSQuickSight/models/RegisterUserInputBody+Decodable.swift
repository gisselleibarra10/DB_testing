// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct RegisterUserInputBody: Swift.Equatable {
    let identityType: QuickSightClientTypes.IdentityType?
    let email: Swift.String?
    let userRole: QuickSightClientTypes.UserRole?
    let iamArn: Swift.String?
    let sessionName: Swift.String?
    let userName: Swift.String?
    let customPermissionsName: Swift.String?
    let externalLoginFederationProviderType: Swift.String?
    let customFederationProviderUrl: Swift.String?
    let externalLoginId: Swift.String?
}

extension RegisterUserInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case customFederationProviderUrl = "CustomFederationProviderUrl"
        case customPermissionsName = "CustomPermissionsName"
        case email = "Email"
        case externalLoginFederationProviderType = "ExternalLoginFederationProviderType"
        case externalLoginId = "ExternalLoginId"
        case iamArn = "IamArn"
        case identityType = "IdentityType"
        case sessionName = "SessionName"
        case userName = "UserName"
        case userRole = "UserRole"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let identityTypeDecoded = try containerValues.decodeIfPresent(QuickSightClientTypes.IdentityType.self, forKey: .identityType)
        identityType = identityTypeDecoded
        let emailDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .email)
        email = emailDecoded
        let userRoleDecoded = try containerValues.decodeIfPresent(QuickSightClientTypes.UserRole.self, forKey: .userRole)
        userRole = userRoleDecoded
        let iamArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .iamArn)
        iamArn = iamArnDecoded
        let sessionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sessionName)
        sessionName = sessionNameDecoded
        let userNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userName)
        userName = userNameDecoded
        let customPermissionsNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .customPermissionsName)
        customPermissionsName = customPermissionsNameDecoded
        let externalLoginFederationProviderTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .externalLoginFederationProviderType)
        externalLoginFederationProviderType = externalLoginFederationProviderTypeDecoded
        let customFederationProviderUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .customFederationProviderUrl)
        customFederationProviderUrl = customFederationProviderUrlDecoded
        let externalLoginIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .externalLoginId)
        externalLoginId = externalLoginIdDecoded
    }
}
