// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateDataSetInputBody: Swift.Equatable {
    let dataSetId: Swift.String?
    let name: Swift.String?
    let physicalTableMap: [Swift.String:QuickSightClientTypes.PhysicalTable]?
    let logicalTableMap: [Swift.String:QuickSightClientTypes.LogicalTable]?
    let importMode: QuickSightClientTypes.DataSetImportMode?
    let columnGroups: [QuickSightClientTypes.ColumnGroup]?
    let fieldFolders: [Swift.String:QuickSightClientTypes.FieldFolder]?
    let permissions: [QuickSightClientTypes.ResourcePermission]?
    let rowLevelPermissionDataSet: QuickSightClientTypes.RowLevelPermissionDataSet?
    let rowLevelPermissionTagConfiguration: QuickSightClientTypes.RowLevelPermissionTagConfiguration?
    let columnLevelPermissionRules: [QuickSightClientTypes.ColumnLevelPermissionRule]?
    let tags: [QuickSightClientTypes.Tag]?
    let dataSetUsageConfiguration: QuickSightClientTypes.DataSetUsageConfiguration?
}

extension CreateDataSetInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case columnGroups = "ColumnGroups"
        case columnLevelPermissionRules = "ColumnLevelPermissionRules"
        case dataSetId = "DataSetId"
        case dataSetUsageConfiguration = "DataSetUsageConfiguration"
        case fieldFolders = "FieldFolders"
        case importMode = "ImportMode"
        case logicalTableMap = "LogicalTableMap"
        case name = "Name"
        case permissions = "Permissions"
        case physicalTableMap = "PhysicalTableMap"
        case rowLevelPermissionDataSet = "RowLevelPermissionDataSet"
        case rowLevelPermissionTagConfiguration = "RowLevelPermissionTagConfiguration"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dataSetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataSetId)
        dataSetId = dataSetIdDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let physicalTableMapContainer = try containerValues.decodeIfPresent([Swift.String: QuickSightClientTypes.PhysicalTable?].self, forKey: .physicalTableMap)
        var physicalTableMapDecoded0: [Swift.String:QuickSightClientTypes.PhysicalTable]? = nil
        if let physicalTableMapContainer = physicalTableMapContainer {
            physicalTableMapDecoded0 = [Swift.String:QuickSightClientTypes.PhysicalTable]()
            for (key0, physicaltable0) in physicalTableMapContainer {
                if let physicaltable0 = physicaltable0 {
                    physicalTableMapDecoded0?[key0] = physicaltable0
                }
            }
        }
        physicalTableMap = physicalTableMapDecoded0
        let logicalTableMapContainer = try containerValues.decodeIfPresent([Swift.String: QuickSightClientTypes.LogicalTable?].self, forKey: .logicalTableMap)
        var logicalTableMapDecoded0: [Swift.String:QuickSightClientTypes.LogicalTable]? = nil
        if let logicalTableMapContainer = logicalTableMapContainer {
            logicalTableMapDecoded0 = [Swift.String:QuickSightClientTypes.LogicalTable]()
            for (key0, logicaltable0) in logicalTableMapContainer {
                if let logicaltable0 = logicaltable0 {
                    logicalTableMapDecoded0?[key0] = logicaltable0
                }
            }
        }
        logicalTableMap = logicalTableMapDecoded0
        let importModeDecoded = try containerValues.decodeIfPresent(QuickSightClientTypes.DataSetImportMode.self, forKey: .importMode)
        importMode = importModeDecoded
        let columnGroupsContainer = try containerValues.decodeIfPresent([QuickSightClientTypes.ColumnGroup?].self, forKey: .columnGroups)
        var columnGroupsDecoded0:[QuickSightClientTypes.ColumnGroup]? = nil
        if let columnGroupsContainer = columnGroupsContainer {
            columnGroupsDecoded0 = [QuickSightClientTypes.ColumnGroup]()
            for structure0 in columnGroupsContainer {
                if let structure0 = structure0 {
                    columnGroupsDecoded0?.append(structure0)
                }
            }
        }
        columnGroups = columnGroupsDecoded0
        let fieldFoldersContainer = try containerValues.decodeIfPresent([Swift.String: QuickSightClientTypes.FieldFolder?].self, forKey: .fieldFolders)
        var fieldFoldersDecoded0: [Swift.String:QuickSightClientTypes.FieldFolder]? = nil
        if let fieldFoldersContainer = fieldFoldersContainer {
            fieldFoldersDecoded0 = [Swift.String:QuickSightClientTypes.FieldFolder]()
            for (key0, fieldfolder0) in fieldFoldersContainer {
                if let fieldfolder0 = fieldfolder0 {
                    fieldFoldersDecoded0?[key0] = fieldfolder0
                }
            }
        }
        fieldFolders = fieldFoldersDecoded0
        let permissionsContainer = try containerValues.decodeIfPresent([QuickSightClientTypes.ResourcePermission?].self, forKey: .permissions)
        var permissionsDecoded0:[QuickSightClientTypes.ResourcePermission]? = nil
        if let permissionsContainer = permissionsContainer {
            permissionsDecoded0 = [QuickSightClientTypes.ResourcePermission]()
            for structure0 in permissionsContainer {
                if let structure0 = structure0 {
                    permissionsDecoded0?.append(structure0)
                }
            }
        }
        permissions = permissionsDecoded0
        let rowLevelPermissionDataSetDecoded = try containerValues.decodeIfPresent(QuickSightClientTypes.RowLevelPermissionDataSet.self, forKey: .rowLevelPermissionDataSet)
        rowLevelPermissionDataSet = rowLevelPermissionDataSetDecoded
        let rowLevelPermissionTagConfigurationDecoded = try containerValues.decodeIfPresent(QuickSightClientTypes.RowLevelPermissionTagConfiguration.self, forKey: .rowLevelPermissionTagConfiguration)
        rowLevelPermissionTagConfiguration = rowLevelPermissionTagConfigurationDecoded
        let columnLevelPermissionRulesContainer = try containerValues.decodeIfPresent([QuickSightClientTypes.ColumnLevelPermissionRule?].self, forKey: .columnLevelPermissionRules)
        var columnLevelPermissionRulesDecoded0:[QuickSightClientTypes.ColumnLevelPermissionRule]? = nil
        if let columnLevelPermissionRulesContainer = columnLevelPermissionRulesContainer {
            columnLevelPermissionRulesDecoded0 = [QuickSightClientTypes.ColumnLevelPermissionRule]()
            for structure0 in columnLevelPermissionRulesContainer {
                if let structure0 = structure0 {
                    columnLevelPermissionRulesDecoded0?.append(structure0)
                }
            }
        }
        columnLevelPermissionRules = columnLevelPermissionRulesDecoded0
        let tagsContainer = try containerValues.decodeIfPresent([QuickSightClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[QuickSightClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [QuickSightClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let dataSetUsageConfigurationDecoded = try containerValues.decodeIfPresent(QuickSightClientTypes.DataSetUsageConfiguration.self, forKey: .dataSetUsageConfiguration)
        dataSetUsageConfiguration = dataSetUsageConfigurationDecoded
    }
}
