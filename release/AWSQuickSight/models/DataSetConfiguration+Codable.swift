// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension QuickSightClientTypes.DataSetConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case columnGroupSchemaList = "ColumnGroupSchemaList"
        case dataSetSchema = "DataSetSchema"
        case placeholder = "Placeholder"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let columnGroupSchemaList = columnGroupSchemaList {
            var columnGroupSchemaListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .columnGroupSchemaList)
            for columngroupschemalist0 in columnGroupSchemaList {
                try columnGroupSchemaListContainer.encode(columngroupschemalist0)
            }
        }
        if let dataSetSchema = self.dataSetSchema {
            try encodeContainer.encode(dataSetSchema, forKey: .dataSetSchema)
        }
        if let placeholder = self.placeholder {
            try encodeContainer.encode(placeholder, forKey: .placeholder)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let placeholderDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .placeholder)
        placeholder = placeholderDecoded
        let dataSetSchemaDecoded = try containerValues.decodeIfPresent(QuickSightClientTypes.DataSetSchema.self, forKey: .dataSetSchema)
        dataSetSchema = dataSetSchemaDecoded
        let columnGroupSchemaListContainer = try containerValues.decodeIfPresent([QuickSightClientTypes.ColumnGroupSchema?].self, forKey: .columnGroupSchemaList)
        var columnGroupSchemaListDecoded0:[QuickSightClientTypes.ColumnGroupSchema]? = nil
        if let columnGroupSchemaListContainer = columnGroupSchemaListContainer {
            columnGroupSchemaListDecoded0 = [QuickSightClientTypes.ColumnGroupSchema]()
            for structure0 in columnGroupSchemaListContainer {
                if let structure0 = structure0 {
                    columnGroupSchemaListDecoded0?.append(structure0)
                }
            }
        }
        columnGroupSchemaList = columnGroupSchemaListDecoded0
    }
}
