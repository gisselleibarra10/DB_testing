// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension QuickSightClientTypes.RowLevelPermissionDataSet: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "Arn"
        case formatVersion = "FormatVersion"
        case namespace = "Namespace"
        case permissionPolicy = "PermissionPolicy"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = self.arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let formatVersion = self.formatVersion {
            try encodeContainer.encode(formatVersion.rawValue, forKey: .formatVersion)
        }
        if let namespace = self.namespace {
            try encodeContainer.encode(namespace, forKey: .namespace)
        }
        if let permissionPolicy = self.permissionPolicy {
            try encodeContainer.encode(permissionPolicy.rawValue, forKey: .permissionPolicy)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let namespaceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .namespace)
        namespace = namespaceDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let permissionPolicyDecoded = try containerValues.decodeIfPresent(QuickSightClientTypes.RowLevelPermissionPolicy.self, forKey: .permissionPolicy)
        permissionPolicy = permissionPolicyDecoded
        let formatVersionDecoded = try containerValues.decodeIfPresent(QuickSightClientTypes.RowLevelPermissionFormatVersion.self, forKey: .formatVersion)
        formatVersion = formatVersionDecoded
        let statusDecoded = try containerValues.decodeIfPresent(QuickSightClientTypes.Status.self, forKey: .status)
        status = statusDecoded
    }
}
