// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension QuickSightClientTypes.DataSourceParameters: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case amazonelasticsearchparameters = "AmazonElasticsearchParameters"
        case amazonopensearchparameters = "AmazonOpenSearchParameters"
        case athenaparameters = "AthenaParameters"
        case auroraparameters = "AuroraParameters"
        case aurorapostgresqlparameters = "AuroraPostgreSqlParameters"
        case awsiotanalyticsparameters = "AwsIotAnalyticsParameters"
        case exasolparameters = "ExasolParameters"
        case jiraparameters = "JiraParameters"
        case mariadbparameters = "MariaDbParameters"
        case mysqlparameters = "MySqlParameters"
        case oracleparameters = "OracleParameters"
        case postgresqlparameters = "PostgreSqlParameters"
        case prestoparameters = "PrestoParameters"
        case rdsparameters = "RdsParameters"
        case redshiftparameters = "RedshiftParameters"
        case s3parameters = "S3Parameters"
        case servicenowparameters = "ServiceNowParameters"
        case snowflakeparameters = "SnowflakeParameters"
        case sparkparameters = "SparkParameters"
        case sqlserverparameters = "SqlServerParameters"
        case teradataparameters = "TeradataParameters"
        case twitterparameters = "TwitterParameters"
        case sdkUnknown
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        switch self {
            case let .amazonelasticsearchparameters(amazonelasticsearchparameters):
                try container.encode(amazonelasticsearchparameters, forKey: .amazonelasticsearchparameters)
            case let .amazonopensearchparameters(amazonopensearchparameters):
                try container.encode(amazonopensearchparameters, forKey: .amazonopensearchparameters)
            case let .athenaparameters(athenaparameters):
                try container.encode(athenaparameters, forKey: .athenaparameters)
            case let .auroraparameters(auroraparameters):
                try container.encode(auroraparameters, forKey: .auroraparameters)
            case let .aurorapostgresqlparameters(aurorapostgresqlparameters):
                try container.encode(aurorapostgresqlparameters, forKey: .aurorapostgresqlparameters)
            case let .awsiotanalyticsparameters(awsiotanalyticsparameters):
                try container.encode(awsiotanalyticsparameters, forKey: .awsiotanalyticsparameters)
            case let .exasolparameters(exasolparameters):
                try container.encode(exasolparameters, forKey: .exasolparameters)
            case let .jiraparameters(jiraparameters):
                try container.encode(jiraparameters, forKey: .jiraparameters)
            case let .mariadbparameters(mariadbparameters):
                try container.encode(mariadbparameters, forKey: .mariadbparameters)
            case let .mysqlparameters(mysqlparameters):
                try container.encode(mysqlparameters, forKey: .mysqlparameters)
            case let .oracleparameters(oracleparameters):
                try container.encode(oracleparameters, forKey: .oracleparameters)
            case let .postgresqlparameters(postgresqlparameters):
                try container.encode(postgresqlparameters, forKey: .postgresqlparameters)
            case let .prestoparameters(prestoparameters):
                try container.encode(prestoparameters, forKey: .prestoparameters)
            case let .rdsparameters(rdsparameters):
                try container.encode(rdsparameters, forKey: .rdsparameters)
            case let .redshiftparameters(redshiftparameters):
                try container.encode(redshiftparameters, forKey: .redshiftparameters)
            case let .s3parameters(s3parameters):
                try container.encode(s3parameters, forKey: .s3parameters)
            case let .servicenowparameters(servicenowparameters):
                try container.encode(servicenowparameters, forKey: .servicenowparameters)
            case let .snowflakeparameters(snowflakeparameters):
                try container.encode(snowflakeparameters, forKey: .snowflakeparameters)
            case let .sparkparameters(sparkparameters):
                try container.encode(sparkparameters, forKey: .sparkparameters)
            case let .sqlserverparameters(sqlserverparameters):
                try container.encode(sqlserverparameters, forKey: .sqlserverparameters)
            case let .teradataparameters(teradataparameters):
                try container.encode(teradataparameters, forKey: .teradataparameters)
            case let .twitterparameters(twitterparameters):
                try container.encode(twitterparameters, forKey: .twitterparameters)
            case let .sdkUnknown(sdkUnknown):
                try container.encode(sdkUnknown, forKey: .sdkUnknown)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let values = try decoder.container(keyedBy: CodingKeys.self)
        let amazonelasticsearchparametersDecoded = try values.decodeIfPresent(QuickSightClientTypes.AmazonElasticsearchParameters.self, forKey: .amazonelasticsearchparameters)
        if let amazonelasticsearchparameters = amazonelasticsearchparametersDecoded {
            self = .amazonelasticsearchparameters(amazonelasticsearchparameters)
            return
        }
        let athenaparametersDecoded = try values.decodeIfPresent(QuickSightClientTypes.AthenaParameters.self, forKey: .athenaparameters)
        if let athenaparameters = athenaparametersDecoded {
            self = .athenaparameters(athenaparameters)
            return
        }
        let auroraparametersDecoded = try values.decodeIfPresent(QuickSightClientTypes.AuroraParameters.self, forKey: .auroraparameters)
        if let auroraparameters = auroraparametersDecoded {
            self = .auroraparameters(auroraparameters)
            return
        }
        let aurorapostgresqlparametersDecoded = try values.decodeIfPresent(QuickSightClientTypes.AuroraPostgreSqlParameters.self, forKey: .aurorapostgresqlparameters)
        if let aurorapostgresqlparameters = aurorapostgresqlparametersDecoded {
            self = .aurorapostgresqlparameters(aurorapostgresqlparameters)
            return
        }
        let awsiotanalyticsparametersDecoded = try values.decodeIfPresent(QuickSightClientTypes.AwsIotAnalyticsParameters.self, forKey: .awsiotanalyticsparameters)
        if let awsiotanalyticsparameters = awsiotanalyticsparametersDecoded {
            self = .awsiotanalyticsparameters(awsiotanalyticsparameters)
            return
        }
        let jiraparametersDecoded = try values.decodeIfPresent(QuickSightClientTypes.JiraParameters.self, forKey: .jiraparameters)
        if let jiraparameters = jiraparametersDecoded {
            self = .jiraparameters(jiraparameters)
            return
        }
        let mariadbparametersDecoded = try values.decodeIfPresent(QuickSightClientTypes.MariaDbParameters.self, forKey: .mariadbparameters)
        if let mariadbparameters = mariadbparametersDecoded {
            self = .mariadbparameters(mariadbparameters)
            return
        }
        let mysqlparametersDecoded = try values.decodeIfPresent(QuickSightClientTypes.MySqlParameters.self, forKey: .mysqlparameters)
        if let mysqlparameters = mysqlparametersDecoded {
            self = .mysqlparameters(mysqlparameters)
            return
        }
        let oracleparametersDecoded = try values.decodeIfPresent(QuickSightClientTypes.OracleParameters.self, forKey: .oracleparameters)
        if let oracleparameters = oracleparametersDecoded {
            self = .oracleparameters(oracleparameters)
            return
        }
        let postgresqlparametersDecoded = try values.decodeIfPresent(QuickSightClientTypes.PostgreSqlParameters.self, forKey: .postgresqlparameters)
        if let postgresqlparameters = postgresqlparametersDecoded {
            self = .postgresqlparameters(postgresqlparameters)
            return
        }
        let prestoparametersDecoded = try values.decodeIfPresent(QuickSightClientTypes.PrestoParameters.self, forKey: .prestoparameters)
        if let prestoparameters = prestoparametersDecoded {
            self = .prestoparameters(prestoparameters)
            return
        }
        let rdsparametersDecoded = try values.decodeIfPresent(QuickSightClientTypes.RdsParameters.self, forKey: .rdsparameters)
        if let rdsparameters = rdsparametersDecoded {
            self = .rdsparameters(rdsparameters)
            return
        }
        let redshiftparametersDecoded = try values.decodeIfPresent(QuickSightClientTypes.RedshiftParameters.self, forKey: .redshiftparameters)
        if let redshiftparameters = redshiftparametersDecoded {
            self = .redshiftparameters(redshiftparameters)
            return
        }
        let s3parametersDecoded = try values.decodeIfPresent(QuickSightClientTypes.S3Parameters.self, forKey: .s3parameters)
        if let s3parameters = s3parametersDecoded {
            self = .s3parameters(s3parameters)
            return
        }
        let servicenowparametersDecoded = try values.decodeIfPresent(QuickSightClientTypes.ServiceNowParameters.self, forKey: .servicenowparameters)
        if let servicenowparameters = servicenowparametersDecoded {
            self = .servicenowparameters(servicenowparameters)
            return
        }
        let snowflakeparametersDecoded = try values.decodeIfPresent(QuickSightClientTypes.SnowflakeParameters.self, forKey: .snowflakeparameters)
        if let snowflakeparameters = snowflakeparametersDecoded {
            self = .snowflakeparameters(snowflakeparameters)
            return
        }
        let sparkparametersDecoded = try values.decodeIfPresent(QuickSightClientTypes.SparkParameters.self, forKey: .sparkparameters)
        if let sparkparameters = sparkparametersDecoded {
            self = .sparkparameters(sparkparameters)
            return
        }
        let sqlserverparametersDecoded = try values.decodeIfPresent(QuickSightClientTypes.SqlServerParameters.self, forKey: .sqlserverparameters)
        if let sqlserverparameters = sqlserverparametersDecoded {
            self = .sqlserverparameters(sqlserverparameters)
            return
        }
        let teradataparametersDecoded = try values.decodeIfPresent(QuickSightClientTypes.TeradataParameters.self, forKey: .teradataparameters)
        if let teradataparameters = teradataparametersDecoded {
            self = .teradataparameters(teradataparameters)
            return
        }
        let twitterparametersDecoded = try values.decodeIfPresent(QuickSightClientTypes.TwitterParameters.self, forKey: .twitterparameters)
        if let twitterparameters = twitterparametersDecoded {
            self = .twitterparameters(twitterparameters)
            return
        }
        let amazonopensearchparametersDecoded = try values.decodeIfPresent(QuickSightClientTypes.AmazonOpenSearchParameters.self, forKey: .amazonopensearchparameters)
        if let amazonopensearchparameters = amazonopensearchparametersDecoded {
            self = .amazonopensearchparameters(amazonopensearchparameters)
            return
        }
        let exasolparametersDecoded = try values.decodeIfPresent(QuickSightClientTypes.ExasolParameters.self, forKey: .exasolparameters)
        if let exasolparameters = exasolparametersDecoded {
            self = .exasolparameters(exasolparameters)
            return
        }
        self = .sdkUnknown("")
    }
}
