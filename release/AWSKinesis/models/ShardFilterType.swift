// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension KinesisClientTypes {
    public enum ShardFilterType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case afterShardId
        case atLatest
        case atTimestamp
        case atTrimHorizon
        case fromTimestamp
        case fromTrimHorizon
        case sdkUnknown(Swift.String)

        public static var allCases: [ShardFilterType] {
            return [
                .afterShardId,
                .atLatest,
                .atTimestamp,
                .atTrimHorizon,
                .fromTimestamp,
                .fromTrimHorizon,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .afterShardId: return "AFTER_SHARD_ID"
            case .atLatest: return "AT_LATEST"
            case .atTimestamp: return "AT_TIMESTAMP"
            case .atTrimHorizon: return "AT_TRIM_HORIZON"
            case .fromTimestamp: return "FROM_TIMESTAMP"
            case .fromTrimHorizon: return "FROM_TRIM_HORIZON"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ShardFilterType(rawValue: rawValue) ?? ShardFilterType.sdkUnknown(rawValue)
        }
    }
}
