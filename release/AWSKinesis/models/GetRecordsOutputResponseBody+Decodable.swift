// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetRecordsOutputResponseBody: Swift.Equatable {
    let records: [KinesisClientTypes.Record]?
    let nextShardIterator: Swift.String?
    let millisBehindLatest: Swift.Int?
    let childShards: [KinesisClientTypes.ChildShard]?
}

extension GetRecordsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case childShards = "ChildShards"
        case millisBehindLatest = "MillisBehindLatest"
        case nextShardIterator = "NextShardIterator"
        case records = "Records"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let recordsContainer = try containerValues.decodeIfPresent([KinesisClientTypes.Record?].self, forKey: .records)
        var recordsDecoded0:[KinesisClientTypes.Record]? = nil
        if let recordsContainer = recordsContainer {
            recordsDecoded0 = [KinesisClientTypes.Record]()
            for structure0 in recordsContainer {
                if let structure0 = structure0 {
                    recordsDecoded0?.append(structure0)
                }
            }
        }
        records = recordsDecoded0
        let nextShardIteratorDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextShardIterator)
        nextShardIterator = nextShardIteratorDecoded
        let millisBehindLatestDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .millisBehindLatest)
        millisBehindLatest = millisBehindLatestDecoded
        let childShardsContainer = try containerValues.decodeIfPresent([KinesisClientTypes.ChildShard?].self, forKey: .childShards)
        var childShardsDecoded0:[KinesisClientTypes.ChildShard]? = nil
        if let childShardsContainer = childShardsContainer {
            childShardsDecoded0 = [KinesisClientTypes.ChildShard]()
            for structure0 in childShardsContainer {
                if let structure0 = structure0 {
                    childShardsDecoded0?.append(structure0)
                }
            }
        }
        childShards = childShardsDecoded0
    }
}
