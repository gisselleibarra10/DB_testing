// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension KinesisClientTypes.StreamDescriptionSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case consumerCount = "ConsumerCount"
        case encryptionType = "EncryptionType"
        case enhancedMonitoring = "EnhancedMonitoring"
        case keyId = "KeyId"
        case openShardCount = "OpenShardCount"
        case retentionPeriodHours = "RetentionPeriodHours"
        case streamARN = "StreamARN"
        case streamCreationTimestamp = "StreamCreationTimestamp"
        case streamModeDetails = "StreamModeDetails"
        case streamName = "StreamName"
        case streamStatus = "StreamStatus"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let consumerCount = self.consumerCount {
            try encodeContainer.encode(consumerCount, forKey: .consumerCount)
        }
        if let encryptionType = self.encryptionType {
            try encodeContainer.encode(encryptionType.rawValue, forKey: .encryptionType)
        }
        if let enhancedMonitoring = enhancedMonitoring {
            var enhancedMonitoringContainer = encodeContainer.nestedUnkeyedContainer(forKey: .enhancedMonitoring)
            for enhancedmonitoringlist0 in enhancedMonitoring {
                try enhancedMonitoringContainer.encode(enhancedmonitoringlist0)
            }
        }
        if let keyId = self.keyId {
            try encodeContainer.encode(keyId, forKey: .keyId)
        }
        if let openShardCount = self.openShardCount {
            try encodeContainer.encode(openShardCount, forKey: .openShardCount)
        }
        if let retentionPeriodHours = self.retentionPeriodHours {
            try encodeContainer.encode(retentionPeriodHours, forKey: .retentionPeriodHours)
        }
        if let streamARN = self.streamARN {
            try encodeContainer.encode(streamARN, forKey: .streamARN)
        }
        if let streamCreationTimestamp = self.streamCreationTimestamp {
            try encodeContainer.encode(streamCreationTimestamp.timeIntervalSince1970, forKey: .streamCreationTimestamp)
        }
        if let streamModeDetails = self.streamModeDetails {
            try encodeContainer.encode(streamModeDetails, forKey: .streamModeDetails)
        }
        if let streamName = self.streamName {
            try encodeContainer.encode(streamName, forKey: .streamName)
        }
        if let streamStatus = self.streamStatus {
            try encodeContainer.encode(streamStatus.rawValue, forKey: .streamStatus)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let streamNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .streamName)
        streamName = streamNameDecoded
        let streamARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .streamARN)
        streamARN = streamARNDecoded
        let streamStatusDecoded = try containerValues.decodeIfPresent(KinesisClientTypes.StreamStatus.self, forKey: .streamStatus)
        streamStatus = streamStatusDecoded
        let streamModeDetailsDecoded = try containerValues.decodeIfPresent(KinesisClientTypes.StreamModeDetails.self, forKey: .streamModeDetails)
        streamModeDetails = streamModeDetailsDecoded
        let retentionPeriodHoursDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .retentionPeriodHours)
        retentionPeriodHours = retentionPeriodHoursDecoded
        let streamCreationTimestampDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .streamCreationTimestamp)
        streamCreationTimestamp = streamCreationTimestampDecoded
        let enhancedMonitoringContainer = try containerValues.decodeIfPresent([KinesisClientTypes.EnhancedMetrics?].self, forKey: .enhancedMonitoring)
        var enhancedMonitoringDecoded0:[KinesisClientTypes.EnhancedMetrics]? = nil
        if let enhancedMonitoringContainer = enhancedMonitoringContainer {
            enhancedMonitoringDecoded0 = [KinesisClientTypes.EnhancedMetrics]()
            for structure0 in enhancedMonitoringContainer {
                if let structure0 = structure0 {
                    enhancedMonitoringDecoded0?.append(structure0)
                }
            }
        }
        enhancedMonitoring = enhancedMonitoringDecoded0
        let encryptionTypeDecoded = try containerValues.decodeIfPresent(KinesisClientTypes.EncryptionType.self, forKey: .encryptionType)
        encryptionType = encryptionTypeDecoded
        let keyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyId)
        keyId = keyIdDecoded
        let openShardCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .openShardCount)
        openShardCount = openShardCountDecoded
        let consumerCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .consumerCount)
        consumerCount = consumerCountDecoded
    }
}
