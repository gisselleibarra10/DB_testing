// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension KinesisClientTypes.HashKeyRange: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case endingHashKey = "EndingHashKey"
        case startingHashKey = "StartingHashKey"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let endingHashKey = self.endingHashKey {
            try encodeContainer.encode(endingHashKey, forKey: .endingHashKey)
        }
        if let startingHashKey = self.startingHashKey {
            try encodeContainer.encode(startingHashKey, forKey: .startingHashKey)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let startingHashKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .startingHashKey)
        startingHashKey = startingHashKeyDecoded
        let endingHashKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .endingHashKey)
        endingHashKey = endingHashKeyDecoded
    }
}
