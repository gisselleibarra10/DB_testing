// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct PutRecordsOutputResponseBody: Swift.Equatable {
    let failedRecordCount: Swift.Int?
    let records: [KinesisClientTypes.PutRecordsResultEntry]?
    let encryptionType: KinesisClientTypes.EncryptionType?
}

extension PutRecordsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case encryptionType = "EncryptionType"
        case failedRecordCount = "FailedRecordCount"
        case records = "Records"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let failedRecordCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .failedRecordCount)
        failedRecordCount = failedRecordCountDecoded
        let recordsContainer = try containerValues.decodeIfPresent([KinesisClientTypes.PutRecordsResultEntry?].self, forKey: .records)
        var recordsDecoded0:[KinesisClientTypes.PutRecordsResultEntry]? = nil
        if let recordsContainer = recordsContainer {
            recordsDecoded0 = [KinesisClientTypes.PutRecordsResultEntry]()
            for structure0 in recordsContainer {
                if let structure0 = structure0 {
                    recordsDecoded0?.append(structure0)
                }
            }
        }
        records = recordsDecoded0
        let encryptionTypeDecoded = try containerValues.decodeIfPresent(KinesisClientTypes.EncryptionType.self, forKey: .encryptionType)
        encryptionType = encryptionTypeDecoded
    }
}
