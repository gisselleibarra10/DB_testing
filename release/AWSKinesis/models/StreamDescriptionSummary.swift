// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension KinesisClientTypes {
    /// Represents the output for [DescribeStreamSummary]
    public struct StreamDescriptionSummary: Swift.Equatable {
        /// The number of enhanced fan-out consumers registered with the stream.
        public var consumerCount: Swift.Int?
        /// The encryption type used. This value is one of the following:
        ///
        /// * KMS
        ///
        /// * NONE
        public var encryptionType: KinesisClientTypes.EncryptionType?
        /// Represents the current enhanced monitoring settings of the stream.
        /// This member is required.
        public var enhancedMonitoring: [KinesisClientTypes.EnhancedMetrics]?
        /// The GUID for the customer-managed Amazon Web Services KMS key to use for encryption. This value can be a globally unique identifier, a fully specified ARN to either an alias or a key, or an alias name prefixed by "alias/".You can also use a master key owned by Kinesis Data Streams by specifying the alias aws/kinesis.
        ///
        /// * Key ARN example: arn:aws:kms:us-east-1:123456789012:key/12345678-1234-1234-1234-123456789012
        ///
        /// * Alias ARN example:  arn:aws:kms:us-east-1:123456789012:alias/MyAliasName
        ///
        /// * Globally unique key ID example: 12345678-1234-1234-1234-123456789012
        ///
        /// * Alias name example: alias/MyAliasName
        ///
        /// * Master key owned by Kinesis Data Streams: alias/aws/kinesis
        public var keyId: Swift.String?
        /// The number of open shards in the stream.
        /// This member is required.
        public var openShardCount: Swift.Int?
        /// The current retention period, in hours.
        /// This member is required.
        public var retentionPeriodHours: Swift.Int?
        /// The Amazon Resource Name (ARN) for the stream being described.
        /// This member is required.
        public var streamARN: Swift.String?
        /// The approximate time that the stream was created.
        /// This member is required.
        public var streamCreationTimestamp: ClientRuntime.Date?
        /// Specifies the capacity mode to which you want to set your data stream. Currently, in Kinesis Data Streams, you can choose between an on-demand ycapacity mode and a provisioned capacity mode for your data streams.
        public var streamModeDetails: KinesisClientTypes.StreamModeDetails?
        /// The name of the stream being described.
        /// This member is required.
        public var streamName: Swift.String?
        /// The current status of the stream being described. The stream status is one of the following states:
        ///
        /// * CREATING - The stream is being created. Kinesis Data Streams immediately returns and sets StreamStatus to CREATING.
        ///
        /// * DELETING - The stream is being deleted. The specified stream is in the DELETING state until Kinesis Data Streams completes the deletion.
        ///
        /// * ACTIVE - The stream exists and is ready for read and write operations or deletion. You should perform read and write operations only on an ACTIVE stream.
        ///
        /// * UPDATING - Shards in the stream are being merged or split. Read and write operations continue to work while the stream is in the UPDATING state.
        /// This member is required.
        public var streamStatus: KinesisClientTypes.StreamStatus?

        public init (
            consumerCount: Swift.Int? = nil,
            encryptionType: KinesisClientTypes.EncryptionType? = nil,
            enhancedMonitoring: [KinesisClientTypes.EnhancedMetrics]? = nil,
            keyId: Swift.String? = nil,
            openShardCount: Swift.Int? = nil,
            retentionPeriodHours: Swift.Int? = nil,
            streamARN: Swift.String? = nil,
            streamCreationTimestamp: ClientRuntime.Date? = nil,
            streamModeDetails: KinesisClientTypes.StreamModeDetails? = nil,
            streamName: Swift.String? = nil,
            streamStatus: KinesisClientTypes.StreamStatus? = nil
        )
        {
            self.consumerCount = consumerCount
            self.encryptionType = encryptionType
            self.enhancedMonitoring = enhancedMonitoring
            self.keyId = keyId
            self.openShardCount = openShardCount
            self.retentionPeriodHours = retentionPeriodHours
            self.streamARN = streamARN
            self.streamCreationTimestamp = streamCreationTimestamp
            self.streamModeDetails = streamModeDetails
            self.streamName = streamName
            self.streamStatus = streamStatus
        }
    }

}
