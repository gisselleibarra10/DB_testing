// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension KinesisClientTypes.SubscribeToShardEvent: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case childShards = "ChildShards"
        case continuationSequenceNumber = "ContinuationSequenceNumber"
        case millisBehindLatest = "MillisBehindLatest"
        case records = "Records"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let childShards = childShards {
            var childShardsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .childShards)
            for childshardlist0 in childShards {
                try childShardsContainer.encode(childshardlist0)
            }
        }
        if let continuationSequenceNumber = self.continuationSequenceNumber {
            try encodeContainer.encode(continuationSequenceNumber, forKey: .continuationSequenceNumber)
        }
        if let millisBehindLatest = self.millisBehindLatest {
            try encodeContainer.encode(millisBehindLatest, forKey: .millisBehindLatest)
        }
        if let records = records {
            var recordsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .records)
            for recordlist0 in records {
                try recordsContainer.encode(recordlist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let recordsContainer = try containerValues.decodeIfPresent([KinesisClientTypes.Record?].self, forKey: .records)
        var recordsDecoded0:[KinesisClientTypes.Record]? = nil
        if let recordsContainer = recordsContainer {
            recordsDecoded0 = [KinesisClientTypes.Record]()
            for structure0 in recordsContainer {
                if let structure0 = structure0 {
                    recordsDecoded0?.append(structure0)
                }
            }
        }
        records = recordsDecoded0
        let continuationSequenceNumberDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .continuationSequenceNumber)
        continuationSequenceNumber = continuationSequenceNumberDecoded
        let millisBehindLatestDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .millisBehindLatest)
        millisBehindLatest = millisBehindLatestDecoded
        let childShardsContainer = try containerValues.decodeIfPresent([KinesisClientTypes.ChildShard?].self, forKey: .childShards)
        var childShardsDecoded0:[KinesisClientTypes.ChildShard]? = nil
        if let childShardsContainer = childShardsContainer {
            childShardsDecoded0 = [KinesisClientTypes.ChildShard]()
            for structure0 in childShardsContainer {
                if let structure0 = structure0 {
                    childShardsDecoded0?.append(structure0)
                }
            }
        }
        childShards = childShardsDecoded0
    }
}
