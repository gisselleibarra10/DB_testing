// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DisableEnhancedMonitoringOutputResponseBody: Swift.Equatable {
    let streamName: Swift.String?
    let currentShardLevelMetrics: [KinesisClientTypes.MetricsName]?
    let desiredShardLevelMetrics: [KinesisClientTypes.MetricsName]?
}

extension DisableEnhancedMonitoringOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case currentShardLevelMetrics = "CurrentShardLevelMetrics"
        case desiredShardLevelMetrics = "DesiredShardLevelMetrics"
        case streamName = "StreamName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let streamNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .streamName)
        streamName = streamNameDecoded
        let currentShardLevelMetricsContainer = try containerValues.decodeIfPresent([KinesisClientTypes.MetricsName?].self, forKey: .currentShardLevelMetrics)
        var currentShardLevelMetricsDecoded0:[KinesisClientTypes.MetricsName]? = nil
        if let currentShardLevelMetricsContainer = currentShardLevelMetricsContainer {
            currentShardLevelMetricsDecoded0 = [KinesisClientTypes.MetricsName]()
            for string0 in currentShardLevelMetricsContainer {
                if let string0 = string0 {
                    currentShardLevelMetricsDecoded0?.append(string0)
                }
            }
        }
        currentShardLevelMetrics = currentShardLevelMetricsDecoded0
        let desiredShardLevelMetricsContainer = try containerValues.decodeIfPresent([KinesisClientTypes.MetricsName?].self, forKey: .desiredShardLevelMetrics)
        var desiredShardLevelMetricsDecoded0:[KinesisClientTypes.MetricsName]? = nil
        if let desiredShardLevelMetricsContainer = desiredShardLevelMetricsContainer {
            desiredShardLevelMetricsDecoded0 = [KinesisClientTypes.MetricsName]()
            for string0 in desiredShardLevelMetricsContainer {
                if let string0 = string0 {
                    desiredShardLevelMetricsDecoded0?.append(string0)
                }
            }
        }
        desiredShardLevelMetrics = desiredShardLevelMetricsDecoded0
    }
}
