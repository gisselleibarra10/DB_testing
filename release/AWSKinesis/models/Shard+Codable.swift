// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension KinesisClientTypes.Shard: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case adjacentParentShardId = "AdjacentParentShardId"
        case hashKeyRange = "HashKeyRange"
        case parentShardId = "ParentShardId"
        case sequenceNumberRange = "SequenceNumberRange"
        case shardId = "ShardId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let adjacentParentShardId = self.adjacentParentShardId {
            try encodeContainer.encode(adjacentParentShardId, forKey: .adjacentParentShardId)
        }
        if let hashKeyRange = self.hashKeyRange {
            try encodeContainer.encode(hashKeyRange, forKey: .hashKeyRange)
        }
        if let parentShardId = self.parentShardId {
            try encodeContainer.encode(parentShardId, forKey: .parentShardId)
        }
        if let sequenceNumberRange = self.sequenceNumberRange {
            try encodeContainer.encode(sequenceNumberRange, forKey: .sequenceNumberRange)
        }
        if let shardId = self.shardId {
            try encodeContainer.encode(shardId, forKey: .shardId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let shardIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .shardId)
        shardId = shardIdDecoded
        let parentShardIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .parentShardId)
        parentShardId = parentShardIdDecoded
        let adjacentParentShardIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .adjacentParentShardId)
        adjacentParentShardId = adjacentParentShardIdDecoded
        let hashKeyRangeDecoded = try containerValues.decodeIfPresent(KinesisClientTypes.HashKeyRange.self, forKey: .hashKeyRange)
        hashKeyRange = hashKeyRangeDecoded
        let sequenceNumberRangeDecoded = try containerValues.decodeIfPresent(KinesisClientTypes.SequenceNumberRange.self, forKey: .sequenceNumberRange)
        sequenceNumberRange = sequenceNumberRangeDecoded
    }
}
