// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension KinesisClientTypes.SubscribeToShardEventStream: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case internalfailureexception = "InternalFailureException"
        case kmsaccessdeniedexception = "KMSAccessDeniedException"
        case kmsdisabledexception = "KMSDisabledException"
        case kmsinvalidstateexception = "KMSInvalidStateException"
        case kmsnotfoundexception = "KMSNotFoundException"
        case kmsoptinrequired = "KMSOptInRequired"
        case kmsthrottlingexception = "KMSThrottlingException"
        case resourceinuseexception = "ResourceInUseException"
        case resourcenotfoundexception = "ResourceNotFoundException"
        case subscribetoshardevent = "SubscribeToShardEvent"
        case sdkUnknown
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        switch self {
            case let .internalfailureexception(internalfailureexception):
                try container.encode(internalfailureexception, forKey: .internalfailureexception)
            case let .kmsaccessdeniedexception(kmsaccessdeniedexception):
                try container.encode(kmsaccessdeniedexception, forKey: .kmsaccessdeniedexception)
            case let .kmsdisabledexception(kmsdisabledexception):
                try container.encode(kmsdisabledexception, forKey: .kmsdisabledexception)
            case let .kmsinvalidstateexception(kmsinvalidstateexception):
                try container.encode(kmsinvalidstateexception, forKey: .kmsinvalidstateexception)
            case let .kmsnotfoundexception(kmsnotfoundexception):
                try container.encode(kmsnotfoundexception, forKey: .kmsnotfoundexception)
            case let .kmsoptinrequired(kmsoptinrequired):
                try container.encode(kmsoptinrequired, forKey: .kmsoptinrequired)
            case let .kmsthrottlingexception(kmsthrottlingexception):
                try container.encode(kmsthrottlingexception, forKey: .kmsthrottlingexception)
            case let .resourceinuseexception(resourceinuseexception):
                try container.encode(resourceinuseexception, forKey: .resourceinuseexception)
            case let .resourcenotfoundexception(resourcenotfoundexception):
                try container.encode(resourcenotfoundexception, forKey: .resourcenotfoundexception)
            case let .subscribetoshardevent(subscribetoshardevent):
                try container.encode(subscribetoshardevent, forKey: .subscribetoshardevent)
            case let .sdkUnknown(sdkUnknown):
                try container.encode(sdkUnknown, forKey: .sdkUnknown)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let values = try decoder.container(keyedBy: CodingKeys.self)
        let subscribetoshardeventDecoded = try values.decodeIfPresent(KinesisClientTypes.SubscribeToShardEvent.self, forKey: .subscribetoshardevent)
        if let subscribetoshardevent = subscribetoshardeventDecoded {
            self = .subscribetoshardevent(subscribetoshardevent)
            return
        }
        let resourcenotfoundexceptionDecoded = try values.decodeIfPresent(ResourceNotFoundException.self, forKey: .resourcenotfoundexception)
        if let resourcenotfoundexception = resourcenotfoundexceptionDecoded {
            self = .resourcenotfoundexception(resourcenotfoundexception)
            return
        }
        let resourceinuseexceptionDecoded = try values.decodeIfPresent(ResourceInUseException.self, forKey: .resourceinuseexception)
        if let resourceinuseexception = resourceinuseexceptionDecoded {
            self = .resourceinuseexception(resourceinuseexception)
            return
        }
        let kmsdisabledexceptionDecoded = try values.decodeIfPresent(KMSDisabledException.self, forKey: .kmsdisabledexception)
        if let kmsdisabledexception = kmsdisabledexceptionDecoded {
            self = .kmsdisabledexception(kmsdisabledexception)
            return
        }
        let kmsinvalidstateexceptionDecoded = try values.decodeIfPresent(KMSInvalidStateException.self, forKey: .kmsinvalidstateexception)
        if let kmsinvalidstateexception = kmsinvalidstateexceptionDecoded {
            self = .kmsinvalidstateexception(kmsinvalidstateexception)
            return
        }
        let kmsaccessdeniedexceptionDecoded = try values.decodeIfPresent(KMSAccessDeniedException.self, forKey: .kmsaccessdeniedexception)
        if let kmsaccessdeniedexception = kmsaccessdeniedexceptionDecoded {
            self = .kmsaccessdeniedexception(kmsaccessdeniedexception)
            return
        }
        let kmsnotfoundexceptionDecoded = try values.decodeIfPresent(KMSNotFoundException.self, forKey: .kmsnotfoundexception)
        if let kmsnotfoundexception = kmsnotfoundexceptionDecoded {
            self = .kmsnotfoundexception(kmsnotfoundexception)
            return
        }
        let kmsoptinrequiredDecoded = try values.decodeIfPresent(KMSOptInRequired.self, forKey: .kmsoptinrequired)
        if let kmsoptinrequired = kmsoptinrequiredDecoded {
            self = .kmsoptinrequired(kmsoptinrequired)
            return
        }
        let kmsthrottlingexceptionDecoded = try values.decodeIfPresent(KMSThrottlingException.self, forKey: .kmsthrottlingexception)
        if let kmsthrottlingexception = kmsthrottlingexceptionDecoded {
            self = .kmsthrottlingexception(kmsthrottlingexception)
            return
        }
        let internalfailureexceptionDecoded = try values.decodeIfPresent(InternalFailureException.self, forKey: .internalfailureexception)
        if let internalfailureexception = internalfailureexceptionDecoded {
            self = .internalfailureexception(internalfailureexception)
            return
        }
        self = .sdkUnknown("")
    }
}
