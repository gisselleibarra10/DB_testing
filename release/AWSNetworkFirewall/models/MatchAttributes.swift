// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension NetworkFirewallClientTypes {
    /// Criteria for Network Firewall to use to inspect an individual packet in stateless rule inspection. Each match attributes set can include one or more items such as IP address, CIDR range, port number, protocol, and TCP flags.
    public struct MatchAttributes: Swift.Equatable {
        /// The destination ports to inspect for. If not specified, this matches with any destination port. This setting is only used for protocols 6 (TCP) and 17 (UDP). You can specify individual ports, for example 1994 and you can specify port ranges, for example 1990:1994.
        public var destinationPorts: [NetworkFirewallClientTypes.PortRange]?
        /// The destination IP addresses and address ranges to inspect for, in CIDR notation. If not specified, this matches with any destination address.
        public var destinations: [NetworkFirewallClientTypes.Address]?
        /// The protocols to inspect for, specified using each protocol's assigned internet protocol number (IANA). If not specified, this matches with any protocol.
        public var protocols: [Swift.Int]?
        /// The source ports to inspect for. If not specified, this matches with any source port. This setting is only used for protocols 6 (TCP) and 17 (UDP). You can specify individual ports, for example 1994 and you can specify port ranges, for example 1990:1994.
        public var sourcePorts: [NetworkFirewallClientTypes.PortRange]?
        /// The source IP addresses and address ranges to inspect for, in CIDR notation. If not specified, this matches with any source address.
        public var sources: [NetworkFirewallClientTypes.Address]?
        /// The TCP flags and masks to inspect for. If not specified, this matches with any settings. This setting is only used for protocol 6 (TCP).
        public var tCPFlags: [NetworkFirewallClientTypes.TCPFlagField]?

        public init (
            destinationPorts: [NetworkFirewallClientTypes.PortRange]? = nil,
            destinations: [NetworkFirewallClientTypes.Address]? = nil,
            protocols: [Swift.Int]? = nil,
            sourcePorts: [NetworkFirewallClientTypes.PortRange]? = nil,
            sources: [NetworkFirewallClientTypes.Address]? = nil,
            tCPFlags: [NetworkFirewallClientTypes.TCPFlagField]? = nil
        )
        {
            self.destinationPorts = destinationPorts
            self.destinations = destinations
            self.protocols = protocols
            self.sourcePorts = sourcePorts
            self.sources = sources
            self.tCPFlags = tCPFlags
        }
    }

}
