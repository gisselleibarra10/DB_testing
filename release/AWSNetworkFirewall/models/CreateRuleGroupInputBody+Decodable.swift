// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateRuleGroupInputBody: Swift.Equatable {
    let ruleGroupName: Swift.String?
    let ruleGroup: NetworkFirewallClientTypes.RuleGroup?
    let rules: Swift.String?
    let type: NetworkFirewallClientTypes.RuleGroupType?
    let description: Swift.String?
    let capacity: Swift.Int?
    let tags: [NetworkFirewallClientTypes.Tag]?
    let dryRun: Swift.Bool
    let encryptionConfiguration: NetworkFirewallClientTypes.EncryptionConfiguration?
    let sourceMetadata: NetworkFirewallClientTypes.SourceMetadata?
}

extension CreateRuleGroupInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case capacity = "Capacity"
        case description = "Description"
        case dryRun = "DryRun"
        case encryptionConfiguration = "EncryptionConfiguration"
        case ruleGroup = "RuleGroup"
        case ruleGroupName = "RuleGroupName"
        case rules = "Rules"
        case sourceMetadata = "SourceMetadata"
        case tags = "Tags"
        case type = "Type"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ruleGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ruleGroupName)
        ruleGroupName = ruleGroupNameDecoded
        let ruleGroupDecoded = try containerValues.decodeIfPresent(NetworkFirewallClientTypes.RuleGroup.self, forKey: .ruleGroup)
        ruleGroup = ruleGroupDecoded
        let rulesDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .rules)
        rules = rulesDecoded
        let typeDecoded = try containerValues.decodeIfPresent(NetworkFirewallClientTypes.RuleGroupType.self, forKey: .type)
        type = typeDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let capacityDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .capacity)
        capacity = capacityDecoded
        let tagsContainer = try containerValues.decodeIfPresent([NetworkFirewallClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[NetworkFirewallClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [NetworkFirewallClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let dryRunDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .dryRun) ?? false
        dryRun = dryRunDecoded
        let encryptionConfigurationDecoded = try containerValues.decodeIfPresent(NetworkFirewallClientTypes.EncryptionConfiguration.self, forKey: .encryptionConfiguration)
        encryptionConfiguration = encryptionConfigurationDecoded
        let sourceMetadataDecoded = try containerValues.decodeIfPresent(NetworkFirewallClientTypes.SourceMetadata.self, forKey: .sourceMetadata)
        sourceMetadata = sourceMetadataDecoded
    }
}
