// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension NetworkFirewallClientTypes.TCPFlagField: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case flags = "Flags"
        case masks = "Masks"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let flags = flags {
            var flagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .flags)
            for flags0 in flags {
                try flagsContainer.encode(flags0.rawValue)
            }
        }
        if let masks = masks {
            var masksContainer = encodeContainer.nestedUnkeyedContainer(forKey: .masks)
            for flags0 in masks {
                try masksContainer.encode(flags0.rawValue)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let flagsContainer = try containerValues.decodeIfPresent([NetworkFirewallClientTypes.TCPFlag?].self, forKey: .flags)
        var flagsDecoded0:[NetworkFirewallClientTypes.TCPFlag]? = nil
        if let flagsContainer = flagsContainer {
            flagsDecoded0 = [NetworkFirewallClientTypes.TCPFlag]()
            for string0 in flagsContainer {
                if let string0 = string0 {
                    flagsDecoded0?.append(string0)
                }
            }
        }
        flags = flagsDecoded0
        let masksContainer = try containerValues.decodeIfPresent([NetworkFirewallClientTypes.TCPFlag?].self, forKey: .masks)
        var masksDecoded0:[NetworkFirewallClientTypes.TCPFlag]? = nil
        if let masksContainer = masksContainer {
            masksDecoded0 = [NetworkFirewallClientTypes.TCPFlag]()
            for string0 in masksContainer {
                if let string0 = string0 {
                    masksDecoded0?.append(string0)
                }
            }
        }
        masks = masksDecoded0
    }
}
