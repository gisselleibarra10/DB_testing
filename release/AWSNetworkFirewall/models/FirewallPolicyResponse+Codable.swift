// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension NetworkFirewallClientTypes.FirewallPolicyResponse: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case consumedStatefulRuleCapacity = "ConsumedStatefulRuleCapacity"
        case consumedStatelessRuleCapacity = "ConsumedStatelessRuleCapacity"
        case description = "Description"
        case encryptionConfiguration = "EncryptionConfiguration"
        case firewallPolicyArn = "FirewallPolicyArn"
        case firewallPolicyId = "FirewallPolicyId"
        case firewallPolicyName = "FirewallPolicyName"
        case firewallPolicyStatus = "FirewallPolicyStatus"
        case lastModifiedTime = "LastModifiedTime"
        case numberOfAssociations = "NumberOfAssociations"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let consumedStatefulRuleCapacity = self.consumedStatefulRuleCapacity {
            try encodeContainer.encode(consumedStatefulRuleCapacity, forKey: .consumedStatefulRuleCapacity)
        }
        if let consumedStatelessRuleCapacity = self.consumedStatelessRuleCapacity {
            try encodeContainer.encode(consumedStatelessRuleCapacity, forKey: .consumedStatelessRuleCapacity)
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let encryptionConfiguration = self.encryptionConfiguration {
            try encodeContainer.encode(encryptionConfiguration, forKey: .encryptionConfiguration)
        }
        if let firewallPolicyArn = self.firewallPolicyArn {
            try encodeContainer.encode(firewallPolicyArn, forKey: .firewallPolicyArn)
        }
        if let firewallPolicyId = self.firewallPolicyId {
            try encodeContainer.encode(firewallPolicyId, forKey: .firewallPolicyId)
        }
        if let firewallPolicyName = self.firewallPolicyName {
            try encodeContainer.encode(firewallPolicyName, forKey: .firewallPolicyName)
        }
        if let firewallPolicyStatus = self.firewallPolicyStatus {
            try encodeContainer.encode(firewallPolicyStatus.rawValue, forKey: .firewallPolicyStatus)
        }
        if let lastModifiedTime = self.lastModifiedTime {
            try encodeContainer.encode(lastModifiedTime.timeIntervalSince1970, forKey: .lastModifiedTime)
        }
        if let numberOfAssociations = self.numberOfAssociations {
            try encodeContainer.encode(numberOfAssociations, forKey: .numberOfAssociations)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let firewallPolicyNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .firewallPolicyName)
        firewallPolicyName = firewallPolicyNameDecoded
        let firewallPolicyArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .firewallPolicyArn)
        firewallPolicyArn = firewallPolicyArnDecoded
        let firewallPolicyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .firewallPolicyId)
        firewallPolicyId = firewallPolicyIdDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let firewallPolicyStatusDecoded = try containerValues.decodeIfPresent(NetworkFirewallClientTypes.ResourceStatus.self, forKey: .firewallPolicyStatus)
        firewallPolicyStatus = firewallPolicyStatusDecoded
        let tagsContainer = try containerValues.decodeIfPresent([NetworkFirewallClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[NetworkFirewallClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [NetworkFirewallClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let consumedStatelessRuleCapacityDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .consumedStatelessRuleCapacity)
        consumedStatelessRuleCapacity = consumedStatelessRuleCapacityDecoded
        let consumedStatefulRuleCapacityDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .consumedStatefulRuleCapacity)
        consumedStatefulRuleCapacity = consumedStatefulRuleCapacityDecoded
        let numberOfAssociationsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .numberOfAssociations)
        numberOfAssociations = numberOfAssociationsDecoded
        let encryptionConfigurationDecoded = try containerValues.decodeIfPresent(NetworkFirewallClientTypes.EncryptionConfiguration.self, forKey: .encryptionConfiguration)
        encryptionConfiguration = encryptionConfigurationDecoded
        let lastModifiedTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedTime)
        lastModifiedTime = lastModifiedTimeDecoded
    }
}
