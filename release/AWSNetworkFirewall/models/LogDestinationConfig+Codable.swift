// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension NetworkFirewallClientTypes.LogDestinationConfig: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case logDestination = "LogDestination"
        case logDestinationType = "LogDestinationType"
        case logType = "LogType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let logDestination = logDestination {
            var logDestinationContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .logDestination)
            for (dictKey0, logdestinationmap0) in logDestination {
                try logDestinationContainer.encode(logdestinationmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let logDestinationType = self.logDestinationType {
            try encodeContainer.encode(logDestinationType.rawValue, forKey: .logDestinationType)
        }
        if let logType = self.logType {
            try encodeContainer.encode(logType.rawValue, forKey: .logType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let logTypeDecoded = try containerValues.decodeIfPresent(NetworkFirewallClientTypes.LogType.self, forKey: .logType)
        logType = logTypeDecoded
        let logDestinationTypeDecoded = try containerValues.decodeIfPresent(NetworkFirewallClientTypes.LogDestinationType.self, forKey: .logDestinationType)
        logDestinationType = logDestinationTypeDecoded
        let logDestinationContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .logDestination)
        var logDestinationDecoded0: [Swift.String:Swift.String]? = nil
        if let logDestinationContainer = logDestinationContainer {
            logDestinationDecoded0 = [Swift.String:Swift.String]()
            for (key0, hashmapvalue0) in logDestinationContainer {
                if let hashmapvalue0 = hashmapvalue0 {
                    logDestinationDecoded0?[key0] = hashmapvalue0
                }
            }
        }
        logDestination = logDestinationDecoded0
    }
}
