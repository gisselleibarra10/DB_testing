// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension NetworkFirewallClientTypes.FirewallStatus: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case capacityUsageSummary = "CapacityUsageSummary"
        case configurationSyncStateSummary = "ConfigurationSyncStateSummary"
        case status = "Status"
        case syncStates = "SyncStates"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let capacityUsageSummary = self.capacityUsageSummary {
            try encodeContainer.encode(capacityUsageSummary, forKey: .capacityUsageSummary)
        }
        if let configurationSyncStateSummary = self.configurationSyncStateSummary {
            try encodeContainer.encode(configurationSyncStateSummary.rawValue, forKey: .configurationSyncStateSummary)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let syncStates = syncStates {
            var syncStatesContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .syncStates)
            for (dictKey0, syncstates0) in syncStates {
                try syncStatesContainer.encode(syncstates0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statusDecoded = try containerValues.decodeIfPresent(NetworkFirewallClientTypes.FirewallStatusValue.self, forKey: .status)
        status = statusDecoded
        let configurationSyncStateSummaryDecoded = try containerValues.decodeIfPresent(NetworkFirewallClientTypes.ConfigurationSyncState.self, forKey: .configurationSyncStateSummary)
        configurationSyncStateSummary = configurationSyncStateSummaryDecoded
        let syncStatesContainer = try containerValues.decodeIfPresent([Swift.String: NetworkFirewallClientTypes.SyncState?].self, forKey: .syncStates)
        var syncStatesDecoded0: [Swift.String:NetworkFirewallClientTypes.SyncState]? = nil
        if let syncStatesContainer = syncStatesContainer {
            syncStatesDecoded0 = [Swift.String:NetworkFirewallClientTypes.SyncState]()
            for (key0, syncstate0) in syncStatesContainer {
                if let syncstate0 = syncstate0 {
                    syncStatesDecoded0?[key0] = syncstate0
                }
            }
        }
        syncStates = syncStatesDecoded0
        let capacityUsageSummaryDecoded = try containerValues.decodeIfPresent(NetworkFirewallClientTypes.CapacityUsageSummary.self, forKey: .capacityUsageSummary)
        capacityUsageSummary = capacityUsageSummaryDecoded
    }
}
