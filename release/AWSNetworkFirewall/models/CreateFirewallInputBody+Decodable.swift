// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateFirewallInputBody: Swift.Equatable {
    let firewallName: Swift.String?
    let firewallPolicyArn: Swift.String?
    let vpcId: Swift.String?
    let subnetMappings: [NetworkFirewallClientTypes.SubnetMapping]?
    let deleteProtection: Swift.Bool
    let subnetChangeProtection: Swift.Bool
    let firewallPolicyChangeProtection: Swift.Bool
    let description: Swift.String?
    let tags: [NetworkFirewallClientTypes.Tag]?
    let encryptionConfiguration: NetworkFirewallClientTypes.EncryptionConfiguration?
}

extension CreateFirewallInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deleteProtection = "DeleteProtection"
        case description = "Description"
        case encryptionConfiguration = "EncryptionConfiguration"
        case firewallName = "FirewallName"
        case firewallPolicyArn = "FirewallPolicyArn"
        case firewallPolicyChangeProtection = "FirewallPolicyChangeProtection"
        case subnetChangeProtection = "SubnetChangeProtection"
        case subnetMappings = "SubnetMappings"
        case tags = "Tags"
        case vpcId = "VpcId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let firewallNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .firewallName)
        firewallName = firewallNameDecoded
        let firewallPolicyArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .firewallPolicyArn)
        firewallPolicyArn = firewallPolicyArnDecoded
        let vpcIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vpcId)
        vpcId = vpcIdDecoded
        let subnetMappingsContainer = try containerValues.decodeIfPresent([NetworkFirewallClientTypes.SubnetMapping?].self, forKey: .subnetMappings)
        var subnetMappingsDecoded0:[NetworkFirewallClientTypes.SubnetMapping]? = nil
        if let subnetMappingsContainer = subnetMappingsContainer {
            subnetMappingsDecoded0 = [NetworkFirewallClientTypes.SubnetMapping]()
            for structure0 in subnetMappingsContainer {
                if let structure0 = structure0 {
                    subnetMappingsDecoded0?.append(structure0)
                }
            }
        }
        subnetMappings = subnetMappingsDecoded0
        let deleteProtectionDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .deleteProtection) ?? false
        deleteProtection = deleteProtectionDecoded
        let subnetChangeProtectionDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .subnetChangeProtection) ?? false
        subnetChangeProtection = subnetChangeProtectionDecoded
        let firewallPolicyChangeProtectionDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .firewallPolicyChangeProtection) ?? false
        firewallPolicyChangeProtection = firewallPolicyChangeProtectionDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let tagsContainer = try containerValues.decodeIfPresent([NetworkFirewallClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[NetworkFirewallClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [NetworkFirewallClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let encryptionConfigurationDecoded = try containerValues.decodeIfPresent(NetworkFirewallClientTypes.EncryptionConfiguration.self, forKey: .encryptionConfiguration)
        encryptionConfiguration = encryptionConfigurationDecoded
    }
}
