// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct AssociateSubnetsInputBody: Swift.Equatable {
    let updateToken: Swift.String?
    let firewallArn: Swift.String?
    let firewallName: Swift.String?
    let subnetMappings: [NetworkFirewallClientTypes.SubnetMapping]?
}

extension AssociateSubnetsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case firewallArn = "FirewallArn"
        case firewallName = "FirewallName"
        case subnetMappings = "SubnetMappings"
        case updateToken = "UpdateToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let updateTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .updateToken)
        updateToken = updateTokenDecoded
        let firewallArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .firewallArn)
        firewallArn = firewallArnDecoded
        let firewallNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .firewallName)
        firewallName = firewallNameDecoded
        let subnetMappingsContainer = try containerValues.decodeIfPresent([NetworkFirewallClientTypes.SubnetMapping?].self, forKey: .subnetMappings)
        var subnetMappingsDecoded0:[NetworkFirewallClientTypes.SubnetMapping]? = nil
        if let subnetMappingsContainer = subnetMappingsContainer {
            subnetMappingsDecoded0 = [NetworkFirewallClientTypes.SubnetMapping]()
            for structure0 in subnetMappingsContainer {
                if let structure0 = structure0 {
                    subnetMappingsDecoded0?.append(structure0)
                }
            }
        }
        subnetMappings = subnetMappingsDecoded0
    }
}
