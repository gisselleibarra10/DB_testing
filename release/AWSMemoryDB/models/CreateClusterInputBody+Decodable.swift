// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateClusterInputBody: Swift.Equatable {
    let clusterName: Swift.String?
    let nodeType: Swift.String?
    let parameterGroupName: Swift.String?
    let description: Swift.String?
    let numShards: Swift.Int?
    let numReplicasPerShard: Swift.Int?
    let subnetGroupName: Swift.String?
    let securityGroupIds: [Swift.String]?
    let maintenanceWindow: Swift.String?
    let port: Swift.Int?
    let snsTopicArn: Swift.String?
    let tLSEnabled: Swift.Bool?
    let kmsKeyId: Swift.String?
    let snapshotArns: [Swift.String]?
    let snapshotName: Swift.String?
    let snapshotRetentionLimit: Swift.Int?
    let tags: [MemoryDbClientTypes.Tag]?
    let snapshotWindow: Swift.String?
    let aCLName: Swift.String?
    let engineVersion: Swift.String?
    let autoMinorVersionUpgrade: Swift.Bool?
}

extension CreateClusterInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case aCLName = "ACLName"
        case autoMinorVersionUpgrade = "AutoMinorVersionUpgrade"
        case clusterName = "ClusterName"
        case description = "Description"
        case engineVersion = "EngineVersion"
        case kmsKeyId = "KmsKeyId"
        case maintenanceWindow = "MaintenanceWindow"
        case nodeType = "NodeType"
        case numReplicasPerShard = "NumReplicasPerShard"
        case numShards = "NumShards"
        case parameterGroupName = "ParameterGroupName"
        case port = "Port"
        case securityGroupIds = "SecurityGroupIds"
        case snapshotArns = "SnapshotArns"
        case snapshotName = "SnapshotName"
        case snapshotRetentionLimit = "SnapshotRetentionLimit"
        case snapshotWindow = "SnapshotWindow"
        case snsTopicArn = "SnsTopicArn"
        case subnetGroupName = "SubnetGroupName"
        case tLSEnabled = "TLSEnabled"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clusterNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterName)
        clusterName = clusterNameDecoded
        let nodeTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nodeType)
        nodeType = nodeTypeDecoded
        let parameterGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .parameterGroupName)
        parameterGroupName = parameterGroupNameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let numShardsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .numShards)
        numShards = numShardsDecoded
        let numReplicasPerShardDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .numReplicasPerShard)
        numReplicasPerShard = numReplicasPerShardDecoded
        let subnetGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .subnetGroupName)
        subnetGroupName = subnetGroupNameDecoded
        let securityGroupIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .securityGroupIds)
        var securityGroupIdsDecoded0:[Swift.String]? = nil
        if let securityGroupIdsContainer = securityGroupIdsContainer {
            securityGroupIdsDecoded0 = [Swift.String]()
            for string0 in securityGroupIdsContainer {
                if let string0 = string0 {
                    securityGroupIdsDecoded0?.append(string0)
                }
            }
        }
        securityGroupIds = securityGroupIdsDecoded0
        let maintenanceWindowDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .maintenanceWindow)
        maintenanceWindow = maintenanceWindowDecoded
        let portDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .port)
        port = portDecoded
        let snsTopicArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .snsTopicArn)
        snsTopicArn = snsTopicArnDecoded
        let tLSEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .tLSEnabled)
        tLSEnabled = tLSEnabledDecoded
        let kmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kmsKeyId)
        kmsKeyId = kmsKeyIdDecoded
        let snapshotArnsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .snapshotArns)
        var snapshotArnsDecoded0:[Swift.String]? = nil
        if let snapshotArnsContainer = snapshotArnsContainer {
            snapshotArnsDecoded0 = [Swift.String]()
            for string0 in snapshotArnsContainer {
                if let string0 = string0 {
                    snapshotArnsDecoded0?.append(string0)
                }
            }
        }
        snapshotArns = snapshotArnsDecoded0
        let snapshotNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .snapshotName)
        snapshotName = snapshotNameDecoded
        let snapshotRetentionLimitDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .snapshotRetentionLimit)
        snapshotRetentionLimit = snapshotRetentionLimitDecoded
        let tagsContainer = try containerValues.decodeIfPresent([MemoryDbClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[MemoryDbClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [MemoryDbClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let snapshotWindowDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .snapshotWindow)
        snapshotWindow = snapshotWindowDecoded
        let aCLNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .aCLName)
        aCLName = aCLNameDecoded
        let engineVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .engineVersion)
        engineVersion = engineVersionDecoded
        let autoMinorVersionUpgradeDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .autoMinorVersionUpgrade)
        autoMinorVersionUpgrade = autoMinorVersionUpgradeDecoded
    }
}
