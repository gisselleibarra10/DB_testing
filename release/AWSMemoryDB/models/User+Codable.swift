// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension MemoryDbClientTypes.User: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case aCLNames = "ACLNames"
        case aRN = "ARN"
        case accessString = "AccessString"
        case authentication = "Authentication"
        case minimumEngineVersion = "MinimumEngineVersion"
        case name = "Name"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let aCLNames = aCLNames {
            var aCLNamesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .aCLNames)
            for aclnamelist0 in aCLNames {
                try aCLNamesContainer.encode(aclnamelist0)
            }
        }
        if let aRN = self.aRN {
            try encodeContainer.encode(aRN, forKey: .aRN)
        }
        if let accessString = self.accessString {
            try encodeContainer.encode(accessString, forKey: .accessString)
        }
        if let authentication = self.authentication {
            try encodeContainer.encode(authentication, forKey: .authentication)
        }
        if let minimumEngineVersion = self.minimumEngineVersion {
            try encodeContainer.encode(minimumEngineVersion, forKey: .minimumEngineVersion)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let status = self.status {
            try encodeContainer.encode(status, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let statusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .status)
        status = statusDecoded
        let accessStringDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .accessString)
        accessString = accessStringDecoded
        let aCLNamesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .aCLNames)
        var aCLNamesDecoded0:[Swift.String]? = nil
        if let aCLNamesContainer = aCLNamesContainer {
            aCLNamesDecoded0 = [Swift.String]()
            for string0 in aCLNamesContainer {
                if let string0 = string0 {
                    aCLNamesDecoded0?.append(string0)
                }
            }
        }
        aCLNames = aCLNamesDecoded0
        let minimumEngineVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .minimumEngineVersion)
        minimumEngineVersion = minimumEngineVersionDecoded
        let authenticationDecoded = try containerValues.decodeIfPresent(MemoryDbClientTypes.Authentication.self, forKey: .authentication)
        authentication = authenticationDecoded
        let aRNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .aRN)
        aRN = aRNDecoded
    }
}
