// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension UpdateClusterInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case aCLName = "ACLName"
        case clusterName = "ClusterName"
        case description = "Description"
        case engineVersion = "EngineVersion"
        case maintenanceWindow = "MaintenanceWindow"
        case nodeType = "NodeType"
        case parameterGroupName = "ParameterGroupName"
        case replicaConfiguration = "ReplicaConfiguration"
        case securityGroupIds = "SecurityGroupIds"
        case shardConfiguration = "ShardConfiguration"
        case snapshotRetentionLimit = "SnapshotRetentionLimit"
        case snapshotWindow = "SnapshotWindow"
        case snsTopicArn = "SnsTopicArn"
        case snsTopicStatus = "SnsTopicStatus"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let aCLName = self.aCLName {
            try encodeContainer.encode(aCLName, forKey: .aCLName)
        }
        if let clusterName = self.clusterName {
            try encodeContainer.encode(clusterName, forKey: .clusterName)
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let engineVersion = self.engineVersion {
            try encodeContainer.encode(engineVersion, forKey: .engineVersion)
        }
        if let maintenanceWindow = self.maintenanceWindow {
            try encodeContainer.encode(maintenanceWindow, forKey: .maintenanceWindow)
        }
        if let nodeType = self.nodeType {
            try encodeContainer.encode(nodeType, forKey: .nodeType)
        }
        if let parameterGroupName = self.parameterGroupName {
            try encodeContainer.encode(parameterGroupName, forKey: .parameterGroupName)
        }
        if let replicaConfiguration = self.replicaConfiguration {
            try encodeContainer.encode(replicaConfiguration, forKey: .replicaConfiguration)
        }
        if let securityGroupIds = securityGroupIds {
            var securityGroupIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .securityGroupIds)
            for securitygroupidslist0 in securityGroupIds {
                try securityGroupIdsContainer.encode(securitygroupidslist0)
            }
        }
        if let shardConfiguration = self.shardConfiguration {
            try encodeContainer.encode(shardConfiguration, forKey: .shardConfiguration)
        }
        if let snapshotRetentionLimit = self.snapshotRetentionLimit {
            try encodeContainer.encode(snapshotRetentionLimit, forKey: .snapshotRetentionLimit)
        }
        if let snapshotWindow = self.snapshotWindow {
            try encodeContainer.encode(snapshotWindow, forKey: .snapshotWindow)
        }
        if let snsTopicArn = self.snsTopicArn {
            try encodeContainer.encode(snsTopicArn, forKey: .snsTopicArn)
        }
        if let snsTopicStatus = self.snsTopicStatus {
            try encodeContainer.encode(snsTopicStatus, forKey: .snsTopicStatus)
        }
    }
}
