// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension MemoryDbClientTypes.ACL: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case aRN = "ARN"
        case clusters = "Clusters"
        case minimumEngineVersion = "MinimumEngineVersion"
        case name = "Name"
        case pendingChanges = "PendingChanges"
        case status = "Status"
        case userNames = "UserNames"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let aRN = self.aRN {
            try encodeContainer.encode(aRN, forKey: .aRN)
        }
        if let clusters = clusters {
            var clustersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .clusters)
            for aclclusternamelist0 in clusters {
                try clustersContainer.encode(aclclusternamelist0)
            }
        }
        if let minimumEngineVersion = self.minimumEngineVersion {
            try encodeContainer.encode(minimumEngineVersion, forKey: .minimumEngineVersion)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let pendingChanges = self.pendingChanges {
            try encodeContainer.encode(pendingChanges, forKey: .pendingChanges)
        }
        if let status = self.status {
            try encodeContainer.encode(status, forKey: .status)
        }
        if let userNames = userNames {
            var userNamesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .userNames)
            for usernamelist0 in userNames {
                try userNamesContainer.encode(usernamelist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let statusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .status)
        status = statusDecoded
        let userNamesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .userNames)
        var userNamesDecoded0:[Swift.String]? = nil
        if let userNamesContainer = userNamesContainer {
            userNamesDecoded0 = [Swift.String]()
            for string0 in userNamesContainer {
                if let string0 = string0 {
                    userNamesDecoded0?.append(string0)
                }
            }
        }
        userNames = userNamesDecoded0
        let minimumEngineVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .minimumEngineVersion)
        minimumEngineVersion = minimumEngineVersionDecoded
        let pendingChangesDecoded = try containerValues.decodeIfPresent(MemoryDbClientTypes.ACLPendingChanges.self, forKey: .pendingChanges)
        pendingChanges = pendingChangesDecoded
        let clustersContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .clusters)
        var clustersDecoded0:[Swift.String]? = nil
        if let clustersContainer = clustersContainer {
            clustersDecoded0 = [Swift.String]()
            for string0 in clustersContainer {
                if let string0 = string0 {
                    clustersDecoded0?.append(string0)
                }
            }
        }
        clusters = clustersDecoded0
        let aRNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .aRN)
        aRN = aRNDecoded
    }
}
