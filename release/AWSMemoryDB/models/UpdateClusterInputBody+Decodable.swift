// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct UpdateClusterInputBody: Swift.Equatable {
    let clusterName: Swift.String?
    let description: Swift.String?
    let securityGroupIds: [Swift.String]?
    let maintenanceWindow: Swift.String?
    let snsTopicArn: Swift.String?
    let snsTopicStatus: Swift.String?
    let parameterGroupName: Swift.String?
    let snapshotWindow: Swift.String?
    let snapshotRetentionLimit: Swift.Int?
    let nodeType: Swift.String?
    let engineVersion: Swift.String?
    let replicaConfiguration: MemoryDbClientTypes.ReplicaConfigurationRequest?
    let shardConfiguration: MemoryDbClientTypes.ShardConfigurationRequest?
    let aCLName: Swift.String?
}

extension UpdateClusterInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case aCLName = "ACLName"
        case clusterName = "ClusterName"
        case description = "Description"
        case engineVersion = "EngineVersion"
        case maintenanceWindow = "MaintenanceWindow"
        case nodeType = "NodeType"
        case parameterGroupName = "ParameterGroupName"
        case replicaConfiguration = "ReplicaConfiguration"
        case securityGroupIds = "SecurityGroupIds"
        case shardConfiguration = "ShardConfiguration"
        case snapshotRetentionLimit = "SnapshotRetentionLimit"
        case snapshotWindow = "SnapshotWindow"
        case snsTopicArn = "SnsTopicArn"
        case snsTopicStatus = "SnsTopicStatus"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clusterNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterName)
        clusterName = clusterNameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let securityGroupIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .securityGroupIds)
        var securityGroupIdsDecoded0:[Swift.String]? = nil
        if let securityGroupIdsContainer = securityGroupIdsContainer {
            securityGroupIdsDecoded0 = [Swift.String]()
            for string0 in securityGroupIdsContainer {
                if let string0 = string0 {
                    securityGroupIdsDecoded0?.append(string0)
                }
            }
        }
        securityGroupIds = securityGroupIdsDecoded0
        let maintenanceWindowDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .maintenanceWindow)
        maintenanceWindow = maintenanceWindowDecoded
        let snsTopicArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .snsTopicArn)
        snsTopicArn = snsTopicArnDecoded
        let snsTopicStatusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .snsTopicStatus)
        snsTopicStatus = snsTopicStatusDecoded
        let parameterGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .parameterGroupName)
        parameterGroupName = parameterGroupNameDecoded
        let snapshotWindowDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .snapshotWindow)
        snapshotWindow = snapshotWindowDecoded
        let snapshotRetentionLimitDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .snapshotRetentionLimit)
        snapshotRetentionLimit = snapshotRetentionLimitDecoded
        let nodeTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nodeType)
        nodeType = nodeTypeDecoded
        let engineVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .engineVersion)
        engineVersion = engineVersionDecoded
        let replicaConfigurationDecoded = try containerValues.decodeIfPresent(MemoryDbClientTypes.ReplicaConfigurationRequest.self, forKey: .replicaConfiguration)
        replicaConfiguration = replicaConfigurationDecoded
        let shardConfigurationDecoded = try containerValues.decodeIfPresent(MemoryDbClientTypes.ShardConfigurationRequest.self, forKey: .shardConfiguration)
        shardConfiguration = shardConfigurationDecoded
        let aCLNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .aCLName)
        aCLName = aCLNameDecoded
    }
}
