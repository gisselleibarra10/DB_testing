// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CreateClusterInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case aCLName = "ACLName"
        case autoMinorVersionUpgrade = "AutoMinorVersionUpgrade"
        case clusterName = "ClusterName"
        case description = "Description"
        case engineVersion = "EngineVersion"
        case kmsKeyId = "KmsKeyId"
        case maintenanceWindow = "MaintenanceWindow"
        case nodeType = "NodeType"
        case numReplicasPerShard = "NumReplicasPerShard"
        case numShards = "NumShards"
        case parameterGroupName = "ParameterGroupName"
        case port = "Port"
        case securityGroupIds = "SecurityGroupIds"
        case snapshotArns = "SnapshotArns"
        case snapshotName = "SnapshotName"
        case snapshotRetentionLimit = "SnapshotRetentionLimit"
        case snapshotWindow = "SnapshotWindow"
        case snsTopicArn = "SnsTopicArn"
        case subnetGroupName = "SubnetGroupName"
        case tLSEnabled = "TLSEnabled"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let aCLName = self.aCLName {
            try encodeContainer.encode(aCLName, forKey: .aCLName)
        }
        if let autoMinorVersionUpgrade = self.autoMinorVersionUpgrade {
            try encodeContainer.encode(autoMinorVersionUpgrade, forKey: .autoMinorVersionUpgrade)
        }
        if let clusterName = self.clusterName {
            try encodeContainer.encode(clusterName, forKey: .clusterName)
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let engineVersion = self.engineVersion {
            try encodeContainer.encode(engineVersion, forKey: .engineVersion)
        }
        if let kmsKeyId = self.kmsKeyId {
            try encodeContainer.encode(kmsKeyId, forKey: .kmsKeyId)
        }
        if let maintenanceWindow = self.maintenanceWindow {
            try encodeContainer.encode(maintenanceWindow, forKey: .maintenanceWindow)
        }
        if let nodeType = self.nodeType {
            try encodeContainer.encode(nodeType, forKey: .nodeType)
        }
        if let numReplicasPerShard = self.numReplicasPerShard {
            try encodeContainer.encode(numReplicasPerShard, forKey: .numReplicasPerShard)
        }
        if let numShards = self.numShards {
            try encodeContainer.encode(numShards, forKey: .numShards)
        }
        if let parameterGroupName = self.parameterGroupName {
            try encodeContainer.encode(parameterGroupName, forKey: .parameterGroupName)
        }
        if let port = self.port {
            try encodeContainer.encode(port, forKey: .port)
        }
        if let securityGroupIds = securityGroupIds {
            var securityGroupIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .securityGroupIds)
            for securitygroupidslist0 in securityGroupIds {
                try securityGroupIdsContainer.encode(securitygroupidslist0)
            }
        }
        if let snapshotArns = snapshotArns {
            var snapshotArnsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .snapshotArns)
            for snapshotarnslist0 in snapshotArns {
                try snapshotArnsContainer.encode(snapshotarnslist0)
            }
        }
        if let snapshotName = self.snapshotName {
            try encodeContainer.encode(snapshotName, forKey: .snapshotName)
        }
        if let snapshotRetentionLimit = self.snapshotRetentionLimit {
            try encodeContainer.encode(snapshotRetentionLimit, forKey: .snapshotRetentionLimit)
        }
        if let snapshotWindow = self.snapshotWindow {
            try encodeContainer.encode(snapshotWindow, forKey: .snapshotWindow)
        }
        if let snsTopicArn = self.snsTopicArn {
            try encodeContainer.encode(snsTopicArn, forKey: .snsTopicArn)
        }
        if let subnetGroupName = self.subnetGroupName {
            try encodeContainer.encode(subnetGroupName, forKey: .subnetGroupName)
        }
        if let tLSEnabled = self.tLSEnabled {
            try encodeContainer.encode(tLSEnabled, forKey: .tLSEnabled)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }
}
