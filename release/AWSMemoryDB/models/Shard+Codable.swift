// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension MemoryDbClientTypes.Shard: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case nodes = "Nodes"
        case numberOfNodes = "NumberOfNodes"
        case slots = "Slots"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let nodes = nodes {
            var nodesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .nodes)
            for nodelist0 in nodes {
                try nodesContainer.encode(nodelist0)
            }
        }
        if let numberOfNodes = self.numberOfNodes {
            try encodeContainer.encode(numberOfNodes, forKey: .numberOfNodes)
        }
        if let slots = self.slots {
            try encodeContainer.encode(slots, forKey: .slots)
        }
        if let status = self.status {
            try encodeContainer.encode(status, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let statusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .status)
        status = statusDecoded
        let slotsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .slots)
        slots = slotsDecoded
        let nodesContainer = try containerValues.decodeIfPresent([MemoryDbClientTypes.Node?].self, forKey: .nodes)
        var nodesDecoded0:[MemoryDbClientTypes.Node]? = nil
        if let nodesContainer = nodesContainer {
            nodesDecoded0 = [MemoryDbClientTypes.Node]()
            for structure0 in nodesContainer {
                if let structure0 = structure0 {
                    nodesDecoded0?.append(structure0)
                }
            }
        }
        nodes = nodesDecoded0
        let numberOfNodesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .numberOfNodes)
        numberOfNodes = numberOfNodesDecoded
    }
}
