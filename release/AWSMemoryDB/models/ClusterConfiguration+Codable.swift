// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension MemoryDbClientTypes.ClusterConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description = "Description"
        case engineVersion = "EngineVersion"
        case maintenanceWindow = "MaintenanceWindow"
        case name = "Name"
        case nodeType = "NodeType"
        case numShards = "NumShards"
        case parameterGroupName = "ParameterGroupName"
        case port = "Port"
        case shards = "Shards"
        case snapshotRetentionLimit = "SnapshotRetentionLimit"
        case snapshotWindow = "SnapshotWindow"
        case subnetGroupName = "SubnetGroupName"
        case topicArn = "TopicArn"
        case vpcId = "VpcId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let engineVersion = self.engineVersion {
            try encodeContainer.encode(engineVersion, forKey: .engineVersion)
        }
        if let maintenanceWindow = self.maintenanceWindow {
            try encodeContainer.encode(maintenanceWindow, forKey: .maintenanceWindow)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let nodeType = self.nodeType {
            try encodeContainer.encode(nodeType, forKey: .nodeType)
        }
        if let numShards = self.numShards {
            try encodeContainer.encode(numShards, forKey: .numShards)
        }
        if let parameterGroupName = self.parameterGroupName {
            try encodeContainer.encode(parameterGroupName, forKey: .parameterGroupName)
        }
        if let port = self.port {
            try encodeContainer.encode(port, forKey: .port)
        }
        if let shards = shards {
            var shardsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .shards)
            for sharddetails0 in shards {
                try shardsContainer.encode(sharddetails0)
            }
        }
        if let snapshotRetentionLimit = self.snapshotRetentionLimit {
            try encodeContainer.encode(snapshotRetentionLimit, forKey: .snapshotRetentionLimit)
        }
        if let snapshotWindow = self.snapshotWindow {
            try encodeContainer.encode(snapshotWindow, forKey: .snapshotWindow)
        }
        if let subnetGroupName = self.subnetGroupName {
            try encodeContainer.encode(subnetGroupName, forKey: .subnetGroupName)
        }
        if let topicArn = self.topicArn {
            try encodeContainer.encode(topicArn, forKey: .topicArn)
        }
        if let vpcId = self.vpcId {
            try encodeContainer.encode(vpcId, forKey: .vpcId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let nodeTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nodeType)
        nodeType = nodeTypeDecoded
        let engineVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .engineVersion)
        engineVersion = engineVersionDecoded
        let maintenanceWindowDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .maintenanceWindow)
        maintenanceWindow = maintenanceWindowDecoded
        let topicArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .topicArn)
        topicArn = topicArnDecoded
        let portDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .port)
        port = portDecoded
        let parameterGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .parameterGroupName)
        parameterGroupName = parameterGroupNameDecoded
        let subnetGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .subnetGroupName)
        subnetGroupName = subnetGroupNameDecoded
        let vpcIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vpcId)
        vpcId = vpcIdDecoded
        let snapshotRetentionLimitDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .snapshotRetentionLimit)
        snapshotRetentionLimit = snapshotRetentionLimitDecoded
        let snapshotWindowDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .snapshotWindow)
        snapshotWindow = snapshotWindowDecoded
        let numShardsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .numShards)
        numShards = numShardsDecoded
        let shardsContainer = try containerValues.decodeIfPresent([MemoryDbClientTypes.ShardDetail?].self, forKey: .shards)
        var shardsDecoded0:[MemoryDbClientTypes.ShardDetail]? = nil
        if let shardsContainer = shardsContainer {
            shardsDecoded0 = [MemoryDbClientTypes.ShardDetail]()
            for structure0 in shardsContainer {
                if let structure0 = structure0 {
                    shardsDecoded0?.append(structure0)
                }
            }
        }
        shards = shardsDecoded0
    }
}
