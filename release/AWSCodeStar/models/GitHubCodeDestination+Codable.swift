// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CodeStarClientTypes.GitHubCodeDestination: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description
        case issuesEnabled
        case name
        case owner
        case privateRepository
        case token
        case type
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if issuesEnabled != false {
            try encodeContainer.encode(issuesEnabled, forKey: .issuesEnabled)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let owner = self.owner {
            try encodeContainer.encode(owner, forKey: .owner)
        }
        if privateRepository != false {
            try encodeContainer.encode(privateRepository, forKey: .privateRepository)
        }
        if let token = self.token {
            try encodeContainer.encode(token, forKey: .token)
        }
        if let type = self.type {
            try encodeContainer.encode(type, forKey: .type)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let typeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .type)
        type = typeDecoded
        let ownerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .owner)
        owner = ownerDecoded
        let privateRepositoryDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .privateRepository) ?? false
        privateRepository = privateRepositoryDecoded
        let issuesEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .issuesEnabled) ?? false
        issuesEnabled = issuesEnabledDecoded
        let tokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .token)
        token = tokenDecoded
    }
}
