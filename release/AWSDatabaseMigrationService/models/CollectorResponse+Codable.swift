// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension DatabaseMigrationClientTypes.CollectorResponse: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case collectorHealthCheck = "CollectorHealthCheck"
        case collectorName = "CollectorName"
        case collectorReferencedId = "CollectorReferencedId"
        case collectorVersion = "CollectorVersion"
        case createdDate = "CreatedDate"
        case description = "Description"
        case inventoryData = "InventoryData"
        case lastDataReceived = "LastDataReceived"
        case modifiedDate = "ModifiedDate"
        case registeredDate = "RegisteredDate"
        case s3BucketName = "S3BucketName"
        case serviceAccessRoleArn = "ServiceAccessRoleArn"
        case versionStatus = "VersionStatus"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let collectorHealthCheck = self.collectorHealthCheck {
            try encodeContainer.encode(collectorHealthCheck, forKey: .collectorHealthCheck)
        }
        if let collectorName = self.collectorName {
            try encodeContainer.encode(collectorName, forKey: .collectorName)
        }
        if let collectorReferencedId = self.collectorReferencedId {
            try encodeContainer.encode(collectorReferencedId, forKey: .collectorReferencedId)
        }
        if let collectorVersion = self.collectorVersion {
            try encodeContainer.encode(collectorVersion, forKey: .collectorVersion)
        }
        if let createdDate = self.createdDate {
            try encodeContainer.encode(createdDate, forKey: .createdDate)
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let inventoryData = self.inventoryData {
            try encodeContainer.encode(inventoryData, forKey: .inventoryData)
        }
        if let lastDataReceived = self.lastDataReceived {
            try encodeContainer.encode(lastDataReceived, forKey: .lastDataReceived)
        }
        if let modifiedDate = self.modifiedDate {
            try encodeContainer.encode(modifiedDate, forKey: .modifiedDate)
        }
        if let registeredDate = self.registeredDate {
            try encodeContainer.encode(registeredDate, forKey: .registeredDate)
        }
        if let s3BucketName = self.s3BucketName {
            try encodeContainer.encode(s3BucketName, forKey: .s3BucketName)
        }
        if let serviceAccessRoleArn = self.serviceAccessRoleArn {
            try encodeContainer.encode(serviceAccessRoleArn, forKey: .serviceAccessRoleArn)
        }
        if let versionStatus = self.versionStatus {
            try encodeContainer.encode(versionStatus.rawValue, forKey: .versionStatus)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let collectorReferencedIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .collectorReferencedId)
        collectorReferencedId = collectorReferencedIdDecoded
        let collectorNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .collectorName)
        collectorName = collectorNameDecoded
        let collectorVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .collectorVersion)
        collectorVersion = collectorVersionDecoded
        let versionStatusDecoded = try containerValues.decodeIfPresent(DatabaseMigrationClientTypes.VersionStatus.self, forKey: .versionStatus)
        versionStatus = versionStatusDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let s3BucketNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .s3BucketName)
        s3BucketName = s3BucketNameDecoded
        let serviceAccessRoleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serviceAccessRoleArn)
        serviceAccessRoleArn = serviceAccessRoleArnDecoded
        let collectorHealthCheckDecoded = try containerValues.decodeIfPresent(DatabaseMigrationClientTypes.CollectorHealthCheck.self, forKey: .collectorHealthCheck)
        collectorHealthCheck = collectorHealthCheckDecoded
        let lastDataReceivedDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastDataReceived)
        lastDataReceived = lastDataReceivedDecoded
        let registeredDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .registeredDate)
        registeredDate = registeredDateDecoded
        let createdDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .createdDate)
        createdDate = createdDateDecoded
        let modifiedDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modifiedDate)
        modifiedDate = modifiedDateDecoded
        let inventoryDataDecoded = try containerValues.decodeIfPresent(DatabaseMigrationClientTypes.InventoryData.self, forKey: .inventoryData)
        inventoryData = inventoryDataDecoded
    }
}
