// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension DatabaseMigrationClientTypes.PostgreSQLSettings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case afterConnectScript = "AfterConnectScript"
        case captureDdls = "CaptureDdls"
        case databaseName = "DatabaseName"
        case ddlArtifactsSchema = "DdlArtifactsSchema"
        case executeTimeout = "ExecuteTimeout"
        case failTasksOnLobTruncation = "FailTasksOnLobTruncation"
        case heartbeatEnable = "HeartbeatEnable"
        case heartbeatFrequency = "HeartbeatFrequency"
        case heartbeatSchema = "HeartbeatSchema"
        case maxFileSize = "MaxFileSize"
        case password = "Password"
        case pluginName = "PluginName"
        case port = "Port"
        case secretsManagerAccessRoleArn = "SecretsManagerAccessRoleArn"
        case secretsManagerSecretId = "SecretsManagerSecretId"
        case serverName = "ServerName"
        case slotName = "SlotName"
        case trimSpaceInChar = "TrimSpaceInChar"
        case username = "Username"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let afterConnectScript = self.afterConnectScript {
            try encodeContainer.encode(afterConnectScript, forKey: .afterConnectScript)
        }
        if let captureDdls = self.captureDdls {
            try encodeContainer.encode(captureDdls, forKey: .captureDdls)
        }
        if let databaseName = self.databaseName {
            try encodeContainer.encode(databaseName, forKey: .databaseName)
        }
        if let ddlArtifactsSchema = self.ddlArtifactsSchema {
            try encodeContainer.encode(ddlArtifactsSchema, forKey: .ddlArtifactsSchema)
        }
        if let executeTimeout = self.executeTimeout {
            try encodeContainer.encode(executeTimeout, forKey: .executeTimeout)
        }
        if let failTasksOnLobTruncation = self.failTasksOnLobTruncation {
            try encodeContainer.encode(failTasksOnLobTruncation, forKey: .failTasksOnLobTruncation)
        }
        if let heartbeatEnable = self.heartbeatEnable {
            try encodeContainer.encode(heartbeatEnable, forKey: .heartbeatEnable)
        }
        if let heartbeatFrequency = self.heartbeatFrequency {
            try encodeContainer.encode(heartbeatFrequency, forKey: .heartbeatFrequency)
        }
        if let heartbeatSchema = self.heartbeatSchema {
            try encodeContainer.encode(heartbeatSchema, forKey: .heartbeatSchema)
        }
        if let maxFileSize = self.maxFileSize {
            try encodeContainer.encode(maxFileSize, forKey: .maxFileSize)
        }
        if let password = self.password {
            try encodeContainer.encode(password, forKey: .password)
        }
        if let pluginName = self.pluginName {
            try encodeContainer.encode(pluginName.rawValue, forKey: .pluginName)
        }
        if let port = self.port {
            try encodeContainer.encode(port, forKey: .port)
        }
        if let secretsManagerAccessRoleArn = self.secretsManagerAccessRoleArn {
            try encodeContainer.encode(secretsManagerAccessRoleArn, forKey: .secretsManagerAccessRoleArn)
        }
        if let secretsManagerSecretId = self.secretsManagerSecretId {
            try encodeContainer.encode(secretsManagerSecretId, forKey: .secretsManagerSecretId)
        }
        if let serverName = self.serverName {
            try encodeContainer.encode(serverName, forKey: .serverName)
        }
        if let slotName = self.slotName {
            try encodeContainer.encode(slotName, forKey: .slotName)
        }
        if let trimSpaceInChar = self.trimSpaceInChar {
            try encodeContainer.encode(trimSpaceInChar, forKey: .trimSpaceInChar)
        }
        if let username = self.username {
            try encodeContainer.encode(username, forKey: .username)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let afterConnectScriptDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .afterConnectScript)
        afterConnectScript = afterConnectScriptDecoded
        let captureDdlsDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .captureDdls)
        captureDdls = captureDdlsDecoded
        let maxFileSizeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxFileSize)
        maxFileSize = maxFileSizeDecoded
        let databaseNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .databaseName)
        databaseName = databaseNameDecoded
        let ddlArtifactsSchemaDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ddlArtifactsSchema)
        ddlArtifactsSchema = ddlArtifactsSchemaDecoded
        let executeTimeoutDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .executeTimeout)
        executeTimeout = executeTimeoutDecoded
        let failTasksOnLobTruncationDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .failTasksOnLobTruncation)
        failTasksOnLobTruncation = failTasksOnLobTruncationDecoded
        let heartbeatEnableDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .heartbeatEnable)
        heartbeatEnable = heartbeatEnableDecoded
        let heartbeatSchemaDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .heartbeatSchema)
        heartbeatSchema = heartbeatSchemaDecoded
        let heartbeatFrequencyDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .heartbeatFrequency)
        heartbeatFrequency = heartbeatFrequencyDecoded
        let passwordDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .password)
        password = passwordDecoded
        let portDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .port)
        port = portDecoded
        let serverNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serverName)
        serverName = serverNameDecoded
        let usernameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .username)
        username = usernameDecoded
        let slotNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .slotName)
        slotName = slotNameDecoded
        let pluginNameDecoded = try containerValues.decodeIfPresent(DatabaseMigrationClientTypes.PluginNameValue.self, forKey: .pluginName)
        pluginName = pluginNameDecoded
        let secretsManagerAccessRoleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .secretsManagerAccessRoleArn)
        secretsManagerAccessRoleArn = secretsManagerAccessRoleArnDecoded
        let secretsManagerSecretIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .secretsManagerSecretId)
        secretsManagerSecretId = secretsManagerSecretIdDecoded
        let trimSpaceInCharDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .trimSpaceInChar)
        trimSpaceInChar = trimSpaceInCharDecoded
    }
}
