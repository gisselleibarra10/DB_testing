// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension DatabaseMigrationClientTypes {
    /// Provides information that defines a Redis target endpoint.
    public struct RedisSettings: Swift.Equatable {
        /// The password provided with the auth-role and auth-token options of the AuthType setting for a Redis target endpoint.
        public var authPassword: Swift.String?
        /// The type of authentication to perform when connecting to a Redis target. Options include none, auth-token, and auth-role. The auth-token option requires an AuthPassword value to be provided. The auth-role option requires AuthUserName and AuthPassword values to be provided.
        public var authType: DatabaseMigrationClientTypes.RedisAuthTypeValue?
        /// The user name provided with the auth-role option of the AuthType setting for a Redis target endpoint.
        public var authUserName: Swift.String?
        /// Transmission Control Protocol (TCP) port for the endpoint.
        /// This member is required.
        public var port: Swift.Int
        /// Fully qualified domain name of the endpoint.
        /// This member is required.
        public var serverName: Swift.String?
        /// The Amazon Resource Name (ARN) for the certificate authority (CA) that DMS uses to connect to your Redis target endpoint.
        public var sslCaCertificateArn: Swift.String?
        /// The connection to a Redis target endpoint using Transport Layer Security (TLS). Valid values include plaintext and ssl-encryption. The default is ssl-encryption. The ssl-encryption option makes an encrypted connection. Optionally, you can identify an Amazon Resource Name (ARN) for an SSL certificate authority (CA) using the SslCaCertificateArn setting. If an ARN isn't given for a CA, DMS uses the Amazon root CA. The plaintext option doesn't provide Transport Layer Security (TLS) encryption for traffic between endpoint and database.
        public var sslSecurityProtocol: DatabaseMigrationClientTypes.SslSecurityProtocolValue?

        public init (
            authPassword: Swift.String? = nil,
            authType: DatabaseMigrationClientTypes.RedisAuthTypeValue? = nil,
            authUserName: Swift.String? = nil,
            port: Swift.Int = 0,
            serverName: Swift.String? = nil,
            sslCaCertificateArn: Swift.String? = nil,
            sslSecurityProtocol: DatabaseMigrationClientTypes.SslSecurityProtocolValue? = nil
        )
        {
            self.authPassword = authPassword
            self.authType = authType
            self.authUserName = authUserName
            self.port = port
            self.serverName = serverName
            self.sslCaCertificateArn = sslCaCertificateArn
            self.sslSecurityProtocol = sslSecurityProtocol
        }
    }

}
