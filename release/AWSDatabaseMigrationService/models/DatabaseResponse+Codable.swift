// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension DatabaseMigrationClientTypes.DatabaseResponse: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case collectors = "Collectors"
        case databaseId = "DatabaseId"
        case databaseName = "DatabaseName"
        case ipAddress = "IpAddress"
        case numberOfSchemas = "NumberOfSchemas"
        case server = "Server"
        case softwareDetails = "SoftwareDetails"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let collectors = collectors {
            var collectorsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .collectors)
            for collectorslist0 in collectors {
                try collectorsContainer.encode(collectorslist0)
            }
        }
        if let databaseId = self.databaseId {
            try encodeContainer.encode(databaseId, forKey: .databaseId)
        }
        if let databaseName = self.databaseName {
            try encodeContainer.encode(databaseName, forKey: .databaseName)
        }
        if let ipAddress = self.ipAddress {
            try encodeContainer.encode(ipAddress, forKey: .ipAddress)
        }
        if let numberOfSchemas = self.numberOfSchemas {
            try encodeContainer.encode(numberOfSchemas, forKey: .numberOfSchemas)
        }
        if let server = self.server {
            try encodeContainer.encode(server, forKey: .server)
        }
        if let softwareDetails = self.softwareDetails {
            try encodeContainer.encode(softwareDetails, forKey: .softwareDetails)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let databaseIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .databaseId)
        databaseId = databaseIdDecoded
        let databaseNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .databaseName)
        databaseName = databaseNameDecoded
        let ipAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ipAddress)
        ipAddress = ipAddressDecoded
        let numberOfSchemasDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .numberOfSchemas)
        numberOfSchemas = numberOfSchemasDecoded
        let serverDecoded = try containerValues.decodeIfPresent(DatabaseMigrationClientTypes.ServerShortInfoResponse.self, forKey: .server)
        server = serverDecoded
        let softwareDetailsDecoded = try containerValues.decodeIfPresent(DatabaseMigrationClientTypes.DatabaseInstanceSoftwareDetailsResponse.self, forKey: .softwareDetails)
        softwareDetails = softwareDetailsDecoded
        let collectorsContainer = try containerValues.decodeIfPresent([DatabaseMigrationClientTypes.CollectorShortInfoResponse?].self, forKey: .collectors)
        var collectorsDecoded0:[DatabaseMigrationClientTypes.CollectorShortInfoResponse]? = nil
        if let collectorsContainer = collectorsContainer {
            collectorsDecoded0 = [DatabaseMigrationClientTypes.CollectorShortInfoResponse]()
            for structure0 in collectorsContainer {
                if let structure0 = structure0 {
                    collectorsDecoded0?.append(structure0)
                }
            }
        }
        collectors = collectorsDecoded0
    }
}
