// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension DatabaseMigrationClientTypes {
    /// Endpoint settings.
    public struct EndpointSetting: Swift.Equatable {
        /// The relevance or validity of an endpoint setting for an engine name and its endpoint type.
        public var applicability: Swift.String?
        /// The default value of the endpoint setting if no value is specified using CreateEndpoint or ModifyEndpoint.
        public var defaultValue: Swift.String?
        /// Enumerated values to use for this endpoint.
        public var enumValues: [Swift.String]?
        /// The maximum value of an endpoint setting that is of type int.
        public var intValueMax: Swift.Int?
        /// The minimum value of an endpoint setting that is of type int.
        public var intValueMin: Swift.Int?
        /// The name that you want to give the endpoint settings.
        public var name: Swift.String?
        /// A value that marks this endpoint setting as sensitive.
        public var sensitive: Swift.Bool?
        /// The type of endpoint. Valid values are source and target.
        public var type: DatabaseMigrationClientTypes.EndpointSettingTypeValue?
        /// The unit of measure for this endpoint setting.
        public var units: Swift.String?

        public init (
            applicability: Swift.String? = nil,
            defaultValue: Swift.String? = nil,
            enumValues: [Swift.String]? = nil,
            intValueMax: Swift.Int? = nil,
            intValueMin: Swift.Int? = nil,
            name: Swift.String? = nil,
            sensitive: Swift.Bool? = nil,
            type: DatabaseMigrationClientTypes.EndpointSettingTypeValue? = nil,
            units: Swift.String? = nil
        )
        {
            self.applicability = applicability
            self.defaultValue = defaultValue
            self.enumValues = enumValues
            self.intValueMax = intValueMax
            self.intValueMin = intValueMin
            self.name = name
            self.sensitive = sensitive
            self.type = type
            self.units = units
        }
    }

}
