// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension DatabaseMigrationClientTypes {
    /// The SSL certificate that can be used to encrypt connections between the endpoints and the replication instance.
    public struct Certificate: Swift.Equatable {
        /// The Amazon Resource Name (ARN) for the certificate.
        public var certificateArn: Swift.String?
        /// The date that the certificate was created.
        public var certificateCreationDate: ClientRuntime.Date?
        /// A customer-assigned name for the certificate. Identifiers must begin with a letter and must contain only ASCII letters, digits, and hyphens. They can't end with a hyphen or contain two consecutive hyphens.
        public var certificateIdentifier: Swift.String?
        /// The owner of the certificate.
        public var certificateOwner: Swift.String?
        /// The contents of a .pem file, which contains an X.509 certificate.
        public var certificatePem: Swift.String?
        /// The location of an imported Oracle Wallet certificate for use with SSL. Example: filebase64("${path.root}/rds-ca-2019-root.sso")
        public var certificateWallet: ClientRuntime.Data?
        /// The key length of the cryptographic algorithm being used.
        public var keyLength: Swift.Int?
        /// The signing algorithm for the certificate.
        public var signingAlgorithm: Swift.String?
        /// The beginning date that the certificate is valid.
        public var validFromDate: ClientRuntime.Date?
        /// The final date that the certificate is valid.
        public var validToDate: ClientRuntime.Date?

        public init (
            certificateArn: Swift.String? = nil,
            certificateCreationDate: ClientRuntime.Date? = nil,
            certificateIdentifier: Swift.String? = nil,
            certificateOwner: Swift.String? = nil,
            certificatePem: Swift.String? = nil,
            certificateWallet: ClientRuntime.Data? = nil,
            keyLength: Swift.Int? = nil,
            signingAlgorithm: Swift.String? = nil,
            validFromDate: ClientRuntime.Date? = nil,
            validToDate: ClientRuntime.Date? = nil
        )
        {
            self.certificateArn = certificateArn
            self.certificateCreationDate = certificateCreationDate
            self.certificateIdentifier = certificateIdentifier
            self.certificateOwner = certificateOwner
            self.certificatePem = certificatePem
            self.certificateWallet = certificateWallet
            self.keyLength = keyLength
            self.signingAlgorithm = signingAlgorithm
            self.validFromDate = validFromDate
            self.validToDate = validToDate
        }
    }

}
