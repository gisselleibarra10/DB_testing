// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension DatabaseMigrationClientTypes.DatabaseInstanceSoftwareDetailsResponse: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case engine = "Engine"
        case engineEdition = "EngineEdition"
        case engineVersion = "EngineVersion"
        case osArchitecture = "OsArchitecture"
        case servicePack = "ServicePack"
        case supportLevel = "SupportLevel"
        case tooltip = "Tooltip"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let engine = self.engine {
            try encodeContainer.encode(engine, forKey: .engine)
        }
        if let engineEdition = self.engineEdition {
            try encodeContainer.encode(engineEdition, forKey: .engineEdition)
        }
        if let engineVersion = self.engineVersion {
            try encodeContainer.encode(engineVersion, forKey: .engineVersion)
        }
        if let osArchitecture = self.osArchitecture {
            try encodeContainer.encode(osArchitecture, forKey: .osArchitecture)
        }
        if let servicePack = self.servicePack {
            try encodeContainer.encode(servicePack, forKey: .servicePack)
        }
        if let supportLevel = self.supportLevel {
            try encodeContainer.encode(supportLevel, forKey: .supportLevel)
        }
        if let tooltip = self.tooltip {
            try encodeContainer.encode(tooltip, forKey: .tooltip)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let engineDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .engine)
        engine = engineDecoded
        let engineVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .engineVersion)
        engineVersion = engineVersionDecoded
        let engineEditionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .engineEdition)
        engineEdition = engineEditionDecoded
        let servicePackDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .servicePack)
        servicePack = servicePackDecoded
        let supportLevelDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .supportLevel)
        supportLevel = supportLevelDecoded
        let osArchitectureDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .osArchitecture)
        osArchitecture = osArchitectureDecoded
        let tooltipDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tooltip)
        tooltip = tooltipDecoded
    }
}
