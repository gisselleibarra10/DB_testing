// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension DatabaseMigrationClientTypes.TableStatistics: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case ddls = "Ddls"
        case deletes = "Deletes"
        case fullLoadCondtnlChkFailedRows = "FullLoadCondtnlChkFailedRows"
        case fullLoadEndTime = "FullLoadEndTime"
        case fullLoadErrorRows = "FullLoadErrorRows"
        case fullLoadReloaded = "FullLoadReloaded"
        case fullLoadRows = "FullLoadRows"
        case fullLoadStartTime = "FullLoadStartTime"
        case inserts = "Inserts"
        case lastUpdateTime = "LastUpdateTime"
        case schemaName = "SchemaName"
        case tableName = "TableName"
        case tableState = "TableState"
        case updates = "Updates"
        case validationFailedRecords = "ValidationFailedRecords"
        case validationPendingRecords = "ValidationPendingRecords"
        case validationState = "ValidationState"
        case validationStateDetails = "ValidationStateDetails"
        case validationSuspendedRecords = "ValidationSuspendedRecords"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if ddls != 0 {
            try encodeContainer.encode(ddls, forKey: .ddls)
        }
        if deletes != 0 {
            try encodeContainer.encode(deletes, forKey: .deletes)
        }
        if fullLoadCondtnlChkFailedRows != 0 {
            try encodeContainer.encode(fullLoadCondtnlChkFailedRows, forKey: .fullLoadCondtnlChkFailedRows)
        }
        if let fullLoadEndTime = self.fullLoadEndTime {
            try encodeContainer.encode(fullLoadEndTime.timeIntervalSince1970, forKey: .fullLoadEndTime)
        }
        if fullLoadErrorRows != 0 {
            try encodeContainer.encode(fullLoadErrorRows, forKey: .fullLoadErrorRows)
        }
        if let fullLoadReloaded = self.fullLoadReloaded {
            try encodeContainer.encode(fullLoadReloaded, forKey: .fullLoadReloaded)
        }
        if fullLoadRows != 0 {
            try encodeContainer.encode(fullLoadRows, forKey: .fullLoadRows)
        }
        if let fullLoadStartTime = self.fullLoadStartTime {
            try encodeContainer.encode(fullLoadStartTime.timeIntervalSince1970, forKey: .fullLoadStartTime)
        }
        if inserts != 0 {
            try encodeContainer.encode(inserts, forKey: .inserts)
        }
        if let lastUpdateTime = self.lastUpdateTime {
            try encodeContainer.encode(lastUpdateTime.timeIntervalSince1970, forKey: .lastUpdateTime)
        }
        if let schemaName = self.schemaName {
            try encodeContainer.encode(schemaName, forKey: .schemaName)
        }
        if let tableName = self.tableName {
            try encodeContainer.encode(tableName, forKey: .tableName)
        }
        if let tableState = self.tableState {
            try encodeContainer.encode(tableState, forKey: .tableState)
        }
        if updates != 0 {
            try encodeContainer.encode(updates, forKey: .updates)
        }
        if validationFailedRecords != 0 {
            try encodeContainer.encode(validationFailedRecords, forKey: .validationFailedRecords)
        }
        if validationPendingRecords != 0 {
            try encodeContainer.encode(validationPendingRecords, forKey: .validationPendingRecords)
        }
        if let validationState = self.validationState {
            try encodeContainer.encode(validationState, forKey: .validationState)
        }
        if let validationStateDetails = self.validationStateDetails {
            try encodeContainer.encode(validationStateDetails, forKey: .validationStateDetails)
        }
        if validationSuspendedRecords != 0 {
            try encodeContainer.encode(validationSuspendedRecords, forKey: .validationSuspendedRecords)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let schemaNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .schemaName)
        schemaName = schemaNameDecoded
        let tableNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tableName)
        tableName = tableNameDecoded
        let insertsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .inserts) ?? 0
        inserts = insertsDecoded
        let deletesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .deletes) ?? 0
        deletes = deletesDecoded
        let updatesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .updates) ?? 0
        updates = updatesDecoded
        let ddlsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .ddls) ?? 0
        ddls = ddlsDecoded
        let fullLoadRowsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .fullLoadRows) ?? 0
        fullLoadRows = fullLoadRowsDecoded
        let fullLoadCondtnlChkFailedRowsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .fullLoadCondtnlChkFailedRows) ?? 0
        fullLoadCondtnlChkFailedRows = fullLoadCondtnlChkFailedRowsDecoded
        let fullLoadErrorRowsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .fullLoadErrorRows) ?? 0
        fullLoadErrorRows = fullLoadErrorRowsDecoded
        let fullLoadStartTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .fullLoadStartTime)
        fullLoadStartTime = fullLoadStartTimeDecoded
        let fullLoadEndTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .fullLoadEndTime)
        fullLoadEndTime = fullLoadEndTimeDecoded
        let fullLoadReloadedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .fullLoadReloaded)
        fullLoadReloaded = fullLoadReloadedDecoded
        let lastUpdateTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastUpdateTime)
        lastUpdateTime = lastUpdateTimeDecoded
        let tableStateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tableState)
        tableState = tableStateDecoded
        let validationPendingRecordsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .validationPendingRecords) ?? 0
        validationPendingRecords = validationPendingRecordsDecoded
        let validationFailedRecordsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .validationFailedRecords) ?? 0
        validationFailedRecords = validationFailedRecordsDecoded
        let validationSuspendedRecordsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .validationSuspendedRecords) ?? 0
        validationSuspendedRecords = validationSuspendedRecordsDecoded
        let validationStateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .validationState)
        validationState = validationStateDecoded
        let validationStateDetailsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .validationStateDetails)
        validationStateDetails = validationStateDetailsDecoded
    }
}
