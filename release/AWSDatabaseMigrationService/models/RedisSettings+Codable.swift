// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension DatabaseMigrationClientTypes.RedisSettings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case authPassword = "AuthPassword"
        case authType = "AuthType"
        case authUserName = "AuthUserName"
        case port = "Port"
        case serverName = "ServerName"
        case sslCaCertificateArn = "SslCaCertificateArn"
        case sslSecurityProtocol = "SslSecurityProtocol"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let authPassword = self.authPassword {
            try encodeContainer.encode(authPassword, forKey: .authPassword)
        }
        if let authType = self.authType {
            try encodeContainer.encode(authType.rawValue, forKey: .authType)
        }
        if let authUserName = self.authUserName {
            try encodeContainer.encode(authUserName, forKey: .authUserName)
        }
        if port != 0 {
            try encodeContainer.encode(port, forKey: .port)
        }
        if let serverName = self.serverName {
            try encodeContainer.encode(serverName, forKey: .serverName)
        }
        if let sslCaCertificateArn = self.sslCaCertificateArn {
            try encodeContainer.encode(sslCaCertificateArn, forKey: .sslCaCertificateArn)
        }
        if let sslSecurityProtocol = self.sslSecurityProtocol {
            try encodeContainer.encode(sslSecurityProtocol.rawValue, forKey: .sslSecurityProtocol)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let serverNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serverName)
        serverName = serverNameDecoded
        let portDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .port) ?? 0
        port = portDecoded
        let sslSecurityProtocolDecoded = try containerValues.decodeIfPresent(DatabaseMigrationClientTypes.SslSecurityProtocolValue.self, forKey: .sslSecurityProtocol)
        sslSecurityProtocol = sslSecurityProtocolDecoded
        let authTypeDecoded = try containerValues.decodeIfPresent(DatabaseMigrationClientTypes.RedisAuthTypeValue.self, forKey: .authType)
        authType = authTypeDecoded
        let authUserNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .authUserName)
        authUserName = authUserNameDecoded
        let authPasswordDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .authPassword)
        authPassword = authPasswordDecoded
        let sslCaCertificateArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sslCaCertificateArn)
        sslCaCertificateArn = sslCaCertificateArnDecoded
    }
}
