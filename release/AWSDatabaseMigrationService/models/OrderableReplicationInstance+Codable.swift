// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension DatabaseMigrationClientTypes.OrderableReplicationInstance: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case availabilityZones = "AvailabilityZones"
        case defaultAllocatedStorage = "DefaultAllocatedStorage"
        case engineVersion = "EngineVersion"
        case includedAllocatedStorage = "IncludedAllocatedStorage"
        case maxAllocatedStorage = "MaxAllocatedStorage"
        case minAllocatedStorage = "MinAllocatedStorage"
        case releaseStatus = "ReleaseStatus"
        case replicationInstanceClass = "ReplicationInstanceClass"
        case storageType = "StorageType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let availabilityZones = availabilityZones {
            var availabilityZonesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .availabilityZones)
            for availabilityzoneslist0 in availabilityZones {
                try availabilityZonesContainer.encode(availabilityzoneslist0)
            }
        }
        if defaultAllocatedStorage != 0 {
            try encodeContainer.encode(defaultAllocatedStorage, forKey: .defaultAllocatedStorage)
        }
        if let engineVersion = self.engineVersion {
            try encodeContainer.encode(engineVersion, forKey: .engineVersion)
        }
        if includedAllocatedStorage != 0 {
            try encodeContainer.encode(includedAllocatedStorage, forKey: .includedAllocatedStorage)
        }
        if maxAllocatedStorage != 0 {
            try encodeContainer.encode(maxAllocatedStorage, forKey: .maxAllocatedStorage)
        }
        if minAllocatedStorage != 0 {
            try encodeContainer.encode(minAllocatedStorage, forKey: .minAllocatedStorage)
        }
        if let releaseStatus = self.releaseStatus {
            try encodeContainer.encode(releaseStatus.rawValue, forKey: .releaseStatus)
        }
        if let replicationInstanceClass = self.replicationInstanceClass {
            try encodeContainer.encode(replicationInstanceClass, forKey: .replicationInstanceClass)
        }
        if let storageType = self.storageType {
            try encodeContainer.encode(storageType, forKey: .storageType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let engineVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .engineVersion)
        engineVersion = engineVersionDecoded
        let replicationInstanceClassDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .replicationInstanceClass)
        replicationInstanceClass = replicationInstanceClassDecoded
        let storageTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .storageType)
        storageType = storageTypeDecoded
        let minAllocatedStorageDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .minAllocatedStorage) ?? 0
        minAllocatedStorage = minAllocatedStorageDecoded
        let maxAllocatedStorageDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxAllocatedStorage) ?? 0
        maxAllocatedStorage = maxAllocatedStorageDecoded
        let defaultAllocatedStorageDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .defaultAllocatedStorage) ?? 0
        defaultAllocatedStorage = defaultAllocatedStorageDecoded
        let includedAllocatedStorageDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .includedAllocatedStorage) ?? 0
        includedAllocatedStorage = includedAllocatedStorageDecoded
        let availabilityZonesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .availabilityZones)
        var availabilityZonesDecoded0:[Swift.String]? = nil
        if let availabilityZonesContainer = availabilityZonesContainer {
            availabilityZonesDecoded0 = [Swift.String]()
            for string0 in availabilityZonesContainer {
                if let string0 = string0 {
                    availabilityZonesDecoded0?.append(string0)
                }
            }
        }
        availabilityZones = availabilityZonesDecoded0
        let releaseStatusDecoded = try containerValues.decodeIfPresent(DatabaseMigrationClientTypes.ReleaseStatusValues.self, forKey: .releaseStatus)
        releaseStatus = releaseStatusDecoded
    }
}
