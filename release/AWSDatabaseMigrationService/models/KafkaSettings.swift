// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension DatabaseMigrationClientTypes {
    /// Provides information that describes an Apache Kafka endpoint. This information includes the output format of records applied to the endpoint and details of transaction and control table data information.
    public struct KafkaSettings: Swift.Equatable {
        /// A comma-separated list of one or more broker locations in your Kafka cluster that host your Kafka instance. Specify each broker location in the form  broker-hostname-or-ip:port . For example, "ec2-12-345-678-901.compute-1.amazonaws.com:2345". For more information and examples of specifying a list of broker locations, see [Using Apache Kafka as a target for Database Migration Service](https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Target.Kafka.html) in the Database Migration Service User Guide.
        public var broker: Swift.String?
        /// Shows detailed control information for table definition, column definition, and table and column changes in the Kafka message output. The default is false.
        public var includeControlDetails: Swift.Bool?
        /// Include NULL and empty columns for records migrated to the endpoint. The default is false.
        public var includeNullAndEmpty: Swift.Bool?
        /// Shows the partition value within the Kafka message output unless the partition type is schema-table-type. The default is false.
        public var includePartitionValue: Swift.Bool?
        /// Includes any data definition language (DDL) operations that change the table in the control data, such as rename-table, drop-table, add-column, drop-column, and rename-column. The default is false.
        public var includeTableAlterOperations: Swift.Bool?
        /// Provides detailed transaction information from the source database. This information includes a commit timestamp, a log position, and values for transaction_id, previous transaction_id, and transaction_record_id (the record offset within a transaction). The default is false.
        public var includeTransactionDetails: Swift.Bool?
        /// The output format for the records created on the endpoint. The message format is JSON (default) or JSON_UNFORMATTED (a single line with no tab).
        public var messageFormat: DatabaseMigrationClientTypes.MessageFormatValue?
        /// The maximum size in bytes for records created on the endpoint The default is 1,000,000.
        public var messageMaxBytes: Swift.Int?
        /// Set this optional parameter to true to avoid adding a '0x' prefix to raw data in hexadecimal format. For example, by default, DMS adds a '0x' prefix to the LOB column type in hexadecimal format moving from an Oracle source to a Kafka target. Use the NoHexPrefix endpoint setting to enable migration of RAW data type columns without adding the '0x' prefix.
        public var noHexPrefix: Swift.Bool?
        /// Prefixes schema and table names to partition values, when the partition type is primary-key-type. Doing this increases data distribution among Kafka partitions. For example, suppose that a SysBench schema has thousands of tables and each table has only limited range for a primary key. In this case, the same primary key is sent from thousands of tables to the same partition, which causes throttling. The default is false.
        public var partitionIncludeSchemaTable: Swift.Bool?
        /// The secure password you created when you first set up your MSK cluster to validate a client identity and make an encrypted connection between server and client using SASL-SSL authentication.
        public var saslPassword: Swift.String?
        /// The secure user name you created when you first set up your MSK cluster to validate a client identity and make an encrypted connection between server and client using SASL-SSL authentication.
        public var saslUsername: Swift.String?
        /// Set secure connection to a Kafka target endpoint using Transport Layer Security (TLS). Options include ssl-encryption, ssl-authentication, and sasl-ssl. sasl-ssl requires SaslUsername and SaslPassword.
        public var securityProtocol: DatabaseMigrationClientTypes.KafkaSecurityProtocol?
        /// The Amazon Resource Name (ARN) for the private certificate authority (CA) cert that DMS uses to securely connect to your Kafka target endpoint.
        public var sslCaCertificateArn: Swift.String?
        /// The Amazon Resource Name (ARN) of the client certificate used to securely connect to a Kafka target endpoint.
        public var sslClientCertificateArn: Swift.String?
        /// The Amazon Resource Name (ARN) for the client private key used to securely connect to a Kafka target endpoint.
        public var sslClientKeyArn: Swift.String?
        /// The password for the client private key used to securely connect to a Kafka target endpoint.
        public var sslClientKeyPassword: Swift.String?
        /// The topic to which you migrate the data. If you don't specify a topic, DMS specifies "kafka-default-topic" as the migration topic.
        public var topic: Swift.String?

        public init (
            broker: Swift.String? = nil,
            includeControlDetails: Swift.Bool? = nil,
            includeNullAndEmpty: Swift.Bool? = nil,
            includePartitionValue: Swift.Bool? = nil,
            includeTableAlterOperations: Swift.Bool? = nil,
            includeTransactionDetails: Swift.Bool? = nil,
            messageFormat: DatabaseMigrationClientTypes.MessageFormatValue? = nil,
            messageMaxBytes: Swift.Int? = nil,
            noHexPrefix: Swift.Bool? = nil,
            partitionIncludeSchemaTable: Swift.Bool? = nil,
            saslPassword: Swift.String? = nil,
            saslUsername: Swift.String? = nil,
            securityProtocol: DatabaseMigrationClientTypes.KafkaSecurityProtocol? = nil,
            sslCaCertificateArn: Swift.String? = nil,
            sslClientCertificateArn: Swift.String? = nil,
            sslClientKeyArn: Swift.String? = nil,
            sslClientKeyPassword: Swift.String? = nil,
            topic: Swift.String? = nil
        )
        {
            self.broker = broker
            self.includeControlDetails = includeControlDetails
            self.includeNullAndEmpty = includeNullAndEmpty
            self.includePartitionValue = includePartitionValue
            self.includeTableAlterOperations = includeTableAlterOperations
            self.includeTransactionDetails = includeTransactionDetails
            self.messageFormat = messageFormat
            self.messageMaxBytes = messageMaxBytes
            self.noHexPrefix = noHexPrefix
            self.partitionIncludeSchemaTable = partitionIncludeSchemaTable
            self.saslPassword = saslPassword
            self.saslUsername = saslUsername
            self.securityProtocol = securityProtocol
            self.sslCaCertificateArn = sslCaCertificateArn
            self.sslClientCertificateArn = sslClientCertificateArn
            self.sslClientKeyArn = sslClientKeyArn
            self.sslClientKeyPassword = sslClientKeyPassword
            self.topic = topic
        }
    }

}
