// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct StartReplicationTaskAssessmentRunInputBody: Swift.Equatable {
    let replicationTaskArn: Swift.String?
    let serviceAccessRoleArn: Swift.String?
    let resultLocationBucket: Swift.String?
    let resultLocationFolder: Swift.String?
    let resultEncryptionMode: Swift.String?
    let resultKmsKeyArn: Swift.String?
    let assessmentRunName: Swift.String?
    let includeOnly: [Swift.String]?
    let exclude: [Swift.String]?
}

extension StartReplicationTaskAssessmentRunInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case assessmentRunName = "AssessmentRunName"
        case exclude = "Exclude"
        case includeOnly = "IncludeOnly"
        case replicationTaskArn = "ReplicationTaskArn"
        case resultEncryptionMode = "ResultEncryptionMode"
        case resultKmsKeyArn = "ResultKmsKeyArn"
        case resultLocationBucket = "ResultLocationBucket"
        case resultLocationFolder = "ResultLocationFolder"
        case serviceAccessRoleArn = "ServiceAccessRoleArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let replicationTaskArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .replicationTaskArn)
        replicationTaskArn = replicationTaskArnDecoded
        let serviceAccessRoleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serviceAccessRoleArn)
        serviceAccessRoleArn = serviceAccessRoleArnDecoded
        let resultLocationBucketDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resultLocationBucket)
        resultLocationBucket = resultLocationBucketDecoded
        let resultLocationFolderDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resultLocationFolder)
        resultLocationFolder = resultLocationFolderDecoded
        let resultEncryptionModeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resultEncryptionMode)
        resultEncryptionMode = resultEncryptionModeDecoded
        let resultKmsKeyArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resultKmsKeyArn)
        resultKmsKeyArn = resultKmsKeyArnDecoded
        let assessmentRunNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .assessmentRunName)
        assessmentRunName = assessmentRunNameDecoded
        let includeOnlyContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .includeOnly)
        var includeOnlyDecoded0:[Swift.String]? = nil
        if let includeOnlyContainer = includeOnlyContainer {
            includeOnlyDecoded0 = [Swift.String]()
            for string0 in includeOnlyContainer {
                if let string0 = string0 {
                    includeOnlyDecoded0?.append(string0)
                }
            }
        }
        includeOnly = includeOnlyDecoded0
        let excludeContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .exclude)
        var excludeDecoded0:[Swift.String]? = nil
        if let excludeContainer = excludeContainer {
            excludeDecoded0 = [Swift.String]()
            for string0 in excludeContainer {
                if let string0 = string0 {
                    excludeDecoded0?.append(string0)
                }
            }
        }
        exclude = excludeDecoded0
    }
}
