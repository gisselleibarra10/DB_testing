// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateEndpointInputBody: Swift.Equatable {
    let endpointIdentifier: Swift.String?
    let endpointType: DatabaseMigrationClientTypes.ReplicationEndpointTypeValue?
    let engineName: Swift.String?
    let username: Swift.String?
    let password: Swift.String?
    let serverName: Swift.String?
    let port: Swift.Int?
    let databaseName: Swift.String?
    let extraConnectionAttributes: Swift.String?
    let kmsKeyId: Swift.String?
    let tags: [DatabaseMigrationClientTypes.Tag]?
    let certificateArn: Swift.String?
    let sslMode: DatabaseMigrationClientTypes.DmsSslModeValue?
    let serviceAccessRoleArn: Swift.String?
    let externalTableDefinition: Swift.String?
    let dynamoDbSettings: DatabaseMigrationClientTypes.DynamoDbSettings?
    let s3Settings: DatabaseMigrationClientTypes.S3Settings?
    let dmsTransferSettings: DatabaseMigrationClientTypes.DmsTransferSettings?
    let mongoDbSettings: DatabaseMigrationClientTypes.MongoDbSettings?
    let kinesisSettings: DatabaseMigrationClientTypes.KinesisSettings?
    let kafkaSettings: DatabaseMigrationClientTypes.KafkaSettings?
    let elasticsearchSettings: DatabaseMigrationClientTypes.ElasticsearchSettings?
    let neptuneSettings: DatabaseMigrationClientTypes.NeptuneSettings?
    let redshiftSettings: DatabaseMigrationClientTypes.RedshiftSettings?
    let postgreSQLSettings: DatabaseMigrationClientTypes.PostgreSQLSettings?
    let mySQLSettings: DatabaseMigrationClientTypes.MySQLSettings?
    let oracleSettings: DatabaseMigrationClientTypes.OracleSettings?
    let sybaseSettings: DatabaseMigrationClientTypes.SybaseSettings?
    let microsoftSQLServerSettings: DatabaseMigrationClientTypes.MicrosoftSQLServerSettings?
    let iBMDb2Settings: DatabaseMigrationClientTypes.IBMDb2Settings?
    let resourceIdentifier: Swift.String?
    let docDbSettings: DatabaseMigrationClientTypes.DocDbSettings?
    let redisSettings: DatabaseMigrationClientTypes.RedisSettings?
    let gcpMySQLSettings: DatabaseMigrationClientTypes.GcpMySQLSettings?
}

extension CreateEndpointInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case certificateArn = "CertificateArn"
        case databaseName = "DatabaseName"
        case dmsTransferSettings = "DmsTransferSettings"
        case docDbSettings = "DocDbSettings"
        case dynamoDbSettings = "DynamoDbSettings"
        case elasticsearchSettings = "ElasticsearchSettings"
        case endpointIdentifier = "EndpointIdentifier"
        case endpointType = "EndpointType"
        case engineName = "EngineName"
        case externalTableDefinition = "ExternalTableDefinition"
        case extraConnectionAttributes = "ExtraConnectionAttributes"
        case gcpMySQLSettings = "GcpMySQLSettings"
        case iBMDb2Settings = "IBMDb2Settings"
        case kafkaSettings = "KafkaSettings"
        case kinesisSettings = "KinesisSettings"
        case kmsKeyId = "KmsKeyId"
        case microsoftSQLServerSettings = "MicrosoftSQLServerSettings"
        case mongoDbSettings = "MongoDbSettings"
        case mySQLSettings = "MySQLSettings"
        case neptuneSettings = "NeptuneSettings"
        case oracleSettings = "OracleSettings"
        case password = "Password"
        case port = "Port"
        case postgreSQLSettings = "PostgreSQLSettings"
        case redisSettings = "RedisSettings"
        case redshiftSettings = "RedshiftSettings"
        case resourceIdentifier = "ResourceIdentifier"
        case s3Settings = "S3Settings"
        case serverName = "ServerName"
        case serviceAccessRoleArn = "ServiceAccessRoleArn"
        case sslMode = "SslMode"
        case sybaseSettings = "SybaseSettings"
        case tags = "Tags"
        case username = "Username"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let endpointIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .endpointIdentifier)
        endpointIdentifier = endpointIdentifierDecoded
        let endpointTypeDecoded = try containerValues.decodeIfPresent(DatabaseMigrationClientTypes.ReplicationEndpointTypeValue.self, forKey: .endpointType)
        endpointType = endpointTypeDecoded
        let engineNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .engineName)
        engineName = engineNameDecoded
        let usernameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .username)
        username = usernameDecoded
        let passwordDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .password)
        password = passwordDecoded
        let serverNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serverName)
        serverName = serverNameDecoded
        let portDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .port)
        port = portDecoded
        let databaseNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .databaseName)
        databaseName = databaseNameDecoded
        let extraConnectionAttributesDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .extraConnectionAttributes)
        extraConnectionAttributes = extraConnectionAttributesDecoded
        let kmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kmsKeyId)
        kmsKeyId = kmsKeyIdDecoded
        let tagsContainer = try containerValues.decodeIfPresent([DatabaseMigrationClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[DatabaseMigrationClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [DatabaseMigrationClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let certificateArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .certificateArn)
        certificateArn = certificateArnDecoded
        let sslModeDecoded = try containerValues.decodeIfPresent(DatabaseMigrationClientTypes.DmsSslModeValue.self, forKey: .sslMode)
        sslMode = sslModeDecoded
        let serviceAccessRoleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serviceAccessRoleArn)
        serviceAccessRoleArn = serviceAccessRoleArnDecoded
        let externalTableDefinitionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .externalTableDefinition)
        externalTableDefinition = externalTableDefinitionDecoded
        let dynamoDbSettingsDecoded = try containerValues.decodeIfPresent(DatabaseMigrationClientTypes.DynamoDbSettings.self, forKey: .dynamoDbSettings)
        dynamoDbSettings = dynamoDbSettingsDecoded
        let s3SettingsDecoded = try containerValues.decodeIfPresent(DatabaseMigrationClientTypes.S3Settings.self, forKey: .s3Settings)
        s3Settings = s3SettingsDecoded
        let dmsTransferSettingsDecoded = try containerValues.decodeIfPresent(DatabaseMigrationClientTypes.DmsTransferSettings.self, forKey: .dmsTransferSettings)
        dmsTransferSettings = dmsTransferSettingsDecoded
        let mongoDbSettingsDecoded = try containerValues.decodeIfPresent(DatabaseMigrationClientTypes.MongoDbSettings.self, forKey: .mongoDbSettings)
        mongoDbSettings = mongoDbSettingsDecoded
        let kinesisSettingsDecoded = try containerValues.decodeIfPresent(DatabaseMigrationClientTypes.KinesisSettings.self, forKey: .kinesisSettings)
        kinesisSettings = kinesisSettingsDecoded
        let kafkaSettingsDecoded = try containerValues.decodeIfPresent(DatabaseMigrationClientTypes.KafkaSettings.self, forKey: .kafkaSettings)
        kafkaSettings = kafkaSettingsDecoded
        let elasticsearchSettingsDecoded = try containerValues.decodeIfPresent(DatabaseMigrationClientTypes.ElasticsearchSettings.self, forKey: .elasticsearchSettings)
        elasticsearchSettings = elasticsearchSettingsDecoded
        let neptuneSettingsDecoded = try containerValues.decodeIfPresent(DatabaseMigrationClientTypes.NeptuneSettings.self, forKey: .neptuneSettings)
        neptuneSettings = neptuneSettingsDecoded
        let redshiftSettingsDecoded = try containerValues.decodeIfPresent(DatabaseMigrationClientTypes.RedshiftSettings.self, forKey: .redshiftSettings)
        redshiftSettings = redshiftSettingsDecoded
        let postgreSQLSettingsDecoded = try containerValues.decodeIfPresent(DatabaseMigrationClientTypes.PostgreSQLSettings.self, forKey: .postgreSQLSettings)
        postgreSQLSettings = postgreSQLSettingsDecoded
        let mySQLSettingsDecoded = try containerValues.decodeIfPresent(DatabaseMigrationClientTypes.MySQLSettings.self, forKey: .mySQLSettings)
        mySQLSettings = mySQLSettingsDecoded
        let oracleSettingsDecoded = try containerValues.decodeIfPresent(DatabaseMigrationClientTypes.OracleSettings.self, forKey: .oracleSettings)
        oracleSettings = oracleSettingsDecoded
        let sybaseSettingsDecoded = try containerValues.decodeIfPresent(DatabaseMigrationClientTypes.SybaseSettings.self, forKey: .sybaseSettings)
        sybaseSettings = sybaseSettingsDecoded
        let microsoftSQLServerSettingsDecoded = try containerValues.decodeIfPresent(DatabaseMigrationClientTypes.MicrosoftSQLServerSettings.self, forKey: .microsoftSQLServerSettings)
        microsoftSQLServerSettings = microsoftSQLServerSettingsDecoded
        let iBMDb2SettingsDecoded = try containerValues.decodeIfPresent(DatabaseMigrationClientTypes.IBMDb2Settings.self, forKey: .iBMDb2Settings)
        iBMDb2Settings = iBMDb2SettingsDecoded
        let resourceIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceIdentifier)
        resourceIdentifier = resourceIdentifierDecoded
        let docDbSettingsDecoded = try containerValues.decodeIfPresent(DatabaseMigrationClientTypes.DocDbSettings.self, forKey: .docDbSettings)
        docDbSettings = docDbSettingsDecoded
        let redisSettingsDecoded = try containerValues.decodeIfPresent(DatabaseMigrationClientTypes.RedisSettings.self, forKey: .redisSettings)
        redisSettings = redisSettingsDecoded
        let gcpMySQLSettingsDecoded = try containerValues.decodeIfPresent(DatabaseMigrationClientTypes.GcpMySQLSettings.self, forKey: .gcpMySQLSettings)
        gcpMySQLSettings = gcpMySQLSettingsDecoded
    }
}
