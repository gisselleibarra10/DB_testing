// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ReloadTablesInputBody: Swift.Equatable {
    let replicationTaskArn: Swift.String?
    let tablesToReload: [DatabaseMigrationClientTypes.TableToReload]?
    let reloadOption: DatabaseMigrationClientTypes.ReloadOptionValue?
}

extension ReloadTablesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case reloadOption = "ReloadOption"
        case replicationTaskArn = "ReplicationTaskArn"
        case tablesToReload = "TablesToReload"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let replicationTaskArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .replicationTaskArn)
        replicationTaskArn = replicationTaskArnDecoded
        let tablesToReloadContainer = try containerValues.decodeIfPresent([DatabaseMigrationClientTypes.TableToReload?].self, forKey: .tablesToReload)
        var tablesToReloadDecoded0:[DatabaseMigrationClientTypes.TableToReload]? = nil
        if let tablesToReloadContainer = tablesToReloadContainer {
            tablesToReloadDecoded0 = [DatabaseMigrationClientTypes.TableToReload]()
            for structure0 in tablesToReloadContainer {
                if let structure0 = structure0 {
                    tablesToReloadDecoded0?.append(structure0)
                }
            }
        }
        tablesToReload = tablesToReloadDecoded0
        let reloadOptionDecoded = try containerValues.decodeIfPresent(DatabaseMigrationClientTypes.ReloadOptionValue.self, forKey: .reloadOption)
        reloadOption = reloadOptionDecoded
    }
}
