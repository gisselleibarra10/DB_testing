// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension DatabaseMigrationClientTypes.SchemaShortInfoResponse: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case databaseId = "DatabaseId"
        case databaseIpAddress = "DatabaseIpAddress"
        case databaseName = "DatabaseName"
        case schemaId = "SchemaId"
        case schemaName = "SchemaName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let databaseId = self.databaseId {
            try encodeContainer.encode(databaseId, forKey: .databaseId)
        }
        if let databaseIpAddress = self.databaseIpAddress {
            try encodeContainer.encode(databaseIpAddress, forKey: .databaseIpAddress)
        }
        if let databaseName = self.databaseName {
            try encodeContainer.encode(databaseName, forKey: .databaseName)
        }
        if let schemaId = self.schemaId {
            try encodeContainer.encode(schemaId, forKey: .schemaId)
        }
        if let schemaName = self.schemaName {
            try encodeContainer.encode(schemaName, forKey: .schemaName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let schemaIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .schemaId)
        schemaId = schemaIdDecoded
        let schemaNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .schemaName)
        schemaName = schemaNameDecoded
        let databaseIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .databaseId)
        databaseId = databaseIdDecoded
        let databaseNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .databaseName)
        databaseName = databaseNameDecoded
        let databaseIpAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .databaseIpAddress)
        databaseIpAddress = databaseIpAddressDecoded
    }
}
