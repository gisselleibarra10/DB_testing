// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension DatabaseMigrationClientTypes.SchemaResponse: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case codeLineCount = "CodeLineCount"
        case codeSize = "CodeSize"
        case complexity = "Complexity"
        case databaseInstance = "DatabaseInstance"
        case originalSchema = "OriginalSchema"
        case schemaId = "SchemaId"
        case schemaName = "SchemaName"
        case server = "Server"
        case similarity = "Similarity"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let codeLineCount = self.codeLineCount {
            try encodeContainer.encode(codeLineCount, forKey: .codeLineCount)
        }
        if let codeSize = self.codeSize {
            try encodeContainer.encode(codeSize, forKey: .codeSize)
        }
        if let complexity = self.complexity {
            try encodeContainer.encode(complexity, forKey: .complexity)
        }
        if let databaseInstance = self.databaseInstance {
            try encodeContainer.encode(databaseInstance, forKey: .databaseInstance)
        }
        if let originalSchema = self.originalSchema {
            try encodeContainer.encode(originalSchema, forKey: .originalSchema)
        }
        if let schemaId = self.schemaId {
            try encodeContainer.encode(schemaId, forKey: .schemaId)
        }
        if let schemaName = self.schemaName {
            try encodeContainer.encode(schemaName, forKey: .schemaName)
        }
        if let server = self.server {
            try encodeContainer.encode(server, forKey: .server)
        }
        if let similarity = self.similarity {
            try encodeContainer.encode(similarity, forKey: .similarity)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let codeLineCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .codeLineCount)
        codeLineCount = codeLineCountDecoded
        let codeSizeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .codeSize)
        codeSize = codeSizeDecoded
        let complexityDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .complexity)
        complexity = complexityDecoded
        let serverDecoded = try containerValues.decodeIfPresent(DatabaseMigrationClientTypes.ServerShortInfoResponse.self, forKey: .server)
        server = serverDecoded
        let databaseInstanceDecoded = try containerValues.decodeIfPresent(DatabaseMigrationClientTypes.DatabaseShortInfoResponse.self, forKey: .databaseInstance)
        databaseInstance = databaseInstanceDecoded
        let schemaIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .schemaId)
        schemaId = schemaIdDecoded
        let schemaNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .schemaName)
        schemaName = schemaNameDecoded
        let originalSchemaDecoded = try containerValues.decodeIfPresent(DatabaseMigrationClientTypes.SchemaShortInfoResponse.self, forKey: .originalSchema)
        originalSchema = originalSchemaDecoded
        let similarityDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .similarity)
        similarity = similarityDecoded
    }
}
