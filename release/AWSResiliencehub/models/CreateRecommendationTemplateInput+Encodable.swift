// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CreateRecommendationTemplateInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case assessmentArn
        case bucketName
        case clientToken
        case format
        case name
        case recommendationIds
        case recommendationTypes
        case tags
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let assessmentArn = self.assessmentArn {
            try encodeContainer.encode(assessmentArn, forKey: .assessmentArn)
        }
        if let bucketName = self.bucketName {
            try encodeContainer.encode(bucketName, forKey: .bucketName)
        }
        if let clientToken = self.clientToken {
            try encodeContainer.encode(clientToken, forKey: .clientToken)
        }
        if let format = self.format {
            try encodeContainer.encode(format.rawValue, forKey: .format)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let recommendationIds = recommendationIds {
            var recommendationIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .recommendationIds)
            for recommendationidlist0 in recommendationIds {
                try recommendationIdsContainer.encode(recommendationidlist0)
            }
        }
        if let recommendationTypes = recommendationTypes {
            var recommendationTypesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .recommendationTypes)
            for renderrecommendationtypelist0 in recommendationTypes {
                try recommendationTypesContainer.encode(renderrecommendationtypelist0.rawValue)
            }
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, tagmap0) in tags {
                try tagsContainer.encode(tagmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }
}
