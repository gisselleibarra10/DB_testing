// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CreateResiliencyPolicyInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientToken
        case dataLocationConstraint
        case policy
        case policyDescription
        case policyName
        case tags
        case tier
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientToken = self.clientToken {
            try encodeContainer.encode(clientToken, forKey: .clientToken)
        }
        if let dataLocationConstraint = self.dataLocationConstraint {
            try encodeContainer.encode(dataLocationConstraint.rawValue, forKey: .dataLocationConstraint)
        }
        if let policy = policy {
            var policyContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .policy)
            for (dictKey0, disruptionpolicy0) in policy {
                try policyContainer.encode(disruptionpolicy0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let policyDescription = self.policyDescription {
            try encodeContainer.encode(policyDescription, forKey: .policyDescription)
        }
        if let policyName = self.policyName {
            try encodeContainer.encode(policyName, forKey: .policyName)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, tagmap0) in tags {
                try tagsContainer.encode(tagmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let tier = self.tier {
            try encodeContainer.encode(tier.rawValue, forKey: .tier)
        }
    }
}
