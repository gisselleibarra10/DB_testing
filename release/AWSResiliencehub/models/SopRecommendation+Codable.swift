// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ResiliencehubClientTypes.SopRecommendation: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case appComponentName
        case description
        case items
        case name
        case prerequisite
        case recommendationId
        case referenceId
        case serviceType
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let appComponentName = self.appComponentName {
            try encodeContainer.encode(appComponentName, forKey: .appComponentName)
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let items = items {
            var itemsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .items)
            for recommendationitemlist0 in items {
                try itemsContainer.encode(recommendationitemlist0)
            }
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let prerequisite = self.prerequisite {
            try encodeContainer.encode(prerequisite, forKey: .prerequisite)
        }
        if let recommendationId = self.recommendationId {
            try encodeContainer.encode(recommendationId, forKey: .recommendationId)
        }
        if let referenceId = self.referenceId {
            try encodeContainer.encode(referenceId, forKey: .referenceId)
        }
        if let serviceType = self.serviceType {
            try encodeContainer.encode(serviceType.rawValue, forKey: .serviceType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let serviceTypeDecoded = try containerValues.decodeIfPresent(ResiliencehubClientTypes.SopServiceType.self, forKey: .serviceType)
        serviceType = serviceTypeDecoded
        let appComponentNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .appComponentName)
        appComponentName = appComponentNameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let recommendationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .recommendationId)
        recommendationId = recommendationIdDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let itemsContainer = try containerValues.decodeIfPresent([ResiliencehubClientTypes.RecommendationItem?].self, forKey: .items)
        var itemsDecoded0:[ResiliencehubClientTypes.RecommendationItem]? = nil
        if let itemsContainer = itemsContainer {
            itemsDecoded0 = [ResiliencehubClientTypes.RecommendationItem]()
            for structure0 in itemsContainer {
                if let structure0 = structure0 {
                    itemsDecoded0?.append(structure0)
                }
            }
        }
        items = itemsDecoded0
        let referenceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .referenceId)
        referenceId = referenceIdDecoded
        let prerequisiteDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .prerequisite)
        prerequisite = prerequisiteDecoded
    }
}
