// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct RemoveDraftAppVersionResourceMappingsInputBody: Swift.Equatable {
    let appArn: Swift.String?
    let resourceNames: [Swift.String]?
    let logicalStackNames: [Swift.String]?
    let appRegistryAppNames: [Swift.String]?
    let resourceGroupNames: [Swift.String]?
    let terraformSourceNames: [Swift.String]?
}

extension RemoveDraftAppVersionResourceMappingsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case appArn
        case appRegistryAppNames
        case logicalStackNames
        case resourceGroupNames
        case resourceNames
        case terraformSourceNames
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let appArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .appArn)
        appArn = appArnDecoded
        let resourceNamesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .resourceNames)
        var resourceNamesDecoded0:[Swift.String]? = nil
        if let resourceNamesContainer = resourceNamesContainer {
            resourceNamesDecoded0 = [Swift.String]()
            for string0 in resourceNamesContainer {
                if let string0 = string0 {
                    resourceNamesDecoded0?.append(string0)
                }
            }
        }
        resourceNames = resourceNamesDecoded0
        let logicalStackNamesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .logicalStackNames)
        var logicalStackNamesDecoded0:[Swift.String]? = nil
        if let logicalStackNamesContainer = logicalStackNamesContainer {
            logicalStackNamesDecoded0 = [Swift.String]()
            for string0 in logicalStackNamesContainer {
                if let string0 = string0 {
                    logicalStackNamesDecoded0?.append(string0)
                }
            }
        }
        logicalStackNames = logicalStackNamesDecoded0
        let appRegistryAppNamesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .appRegistryAppNames)
        var appRegistryAppNamesDecoded0:[Swift.String]? = nil
        if let appRegistryAppNamesContainer = appRegistryAppNamesContainer {
            appRegistryAppNamesDecoded0 = [Swift.String]()
            for string0 in appRegistryAppNamesContainer {
                if let string0 = string0 {
                    appRegistryAppNamesDecoded0?.append(string0)
                }
            }
        }
        appRegistryAppNames = appRegistryAppNamesDecoded0
        let resourceGroupNamesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .resourceGroupNames)
        var resourceGroupNamesDecoded0:[Swift.String]? = nil
        if let resourceGroupNamesContainer = resourceGroupNamesContainer {
            resourceGroupNamesDecoded0 = [Swift.String]()
            for string0 in resourceGroupNamesContainer {
                if let string0 = string0 {
                    resourceGroupNamesDecoded0?.append(string0)
                }
            }
        }
        resourceGroupNames = resourceGroupNamesDecoded0
        let terraformSourceNamesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .terraformSourceNames)
        var terraformSourceNamesDecoded0:[Swift.String]? = nil
        if let terraformSourceNamesContainer = terraformSourceNamesContainer {
            terraformSourceNamesDecoded0 = [Swift.String]()
            for string0 in terraformSourceNamesContainer {
                if let string0 = string0 {
                    terraformSourceNamesDecoded0?.append(string0)
                }
            }
        }
        terraformSourceNames = terraformSourceNamesDecoded0
    }
}
