// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateResiliencyPolicyInputBody: Swift.Equatable {
    let policyName: Swift.String?
    let policyDescription: Swift.String?
    let dataLocationConstraint: ResiliencehubClientTypes.DataLocationConstraint?
    let tier: ResiliencehubClientTypes.ResiliencyPolicyTier?
    let policy: [Swift.String:ResiliencehubClientTypes.FailurePolicy]?
    let clientToken: Swift.String?
    let tags: [Swift.String:Swift.String]?
}

extension CreateResiliencyPolicyInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientToken
        case dataLocationConstraint
        case policy
        case policyDescription
        case policyName
        case tags
        case tier
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let policyNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policyName)
        policyName = policyNameDecoded
        let policyDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policyDescription)
        policyDescription = policyDescriptionDecoded
        let dataLocationConstraintDecoded = try containerValues.decodeIfPresent(ResiliencehubClientTypes.DataLocationConstraint.self, forKey: .dataLocationConstraint)
        dataLocationConstraint = dataLocationConstraintDecoded
        let tierDecoded = try containerValues.decodeIfPresent(ResiliencehubClientTypes.ResiliencyPolicyTier.self, forKey: .tier)
        tier = tierDecoded
        let policyContainer = try containerValues.decodeIfPresent([Swift.String: ResiliencehubClientTypes.FailurePolicy?].self, forKey: .policy)
        var policyDecoded0: [Swift.String:ResiliencehubClientTypes.FailurePolicy]? = nil
        if let policyContainer = policyContainer {
            policyDecoded0 = [Swift.String:ResiliencehubClientTypes.FailurePolicy]()
            for (key0, failurepolicy0) in policyContainer {
                if let failurepolicy0 = failurepolicy0 {
                    policyDecoded0?[key0] = failurepolicy0
                }
            }
        }
        policy = policyDecoded0
        let clientTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientToken)
        clientToken = clientTokenDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
    }
}
