// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListRecommendationTemplatesOutputResponseBody: Swift.Equatable {
    let nextToken: Swift.String?
    let recommendationTemplates: [ResiliencehubClientTypes.RecommendationTemplate]?
}

extension ListRecommendationTemplatesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken
        case recommendationTemplates
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let recommendationTemplatesContainer = try containerValues.decodeIfPresent([ResiliencehubClientTypes.RecommendationTemplate?].self, forKey: .recommendationTemplates)
        var recommendationTemplatesDecoded0:[ResiliencehubClientTypes.RecommendationTemplate]? = nil
        if let recommendationTemplatesContainer = recommendationTemplatesContainer {
            recommendationTemplatesDecoded0 = [ResiliencehubClientTypes.RecommendationTemplate]()
            for structure0 in recommendationTemplatesContainer {
                if let structure0 = structure0 {
                    recommendationTemplatesDecoded0?.append(structure0)
                }
            }
        }
        recommendationTemplates = recommendationTemplatesDecoded0
    }
}
