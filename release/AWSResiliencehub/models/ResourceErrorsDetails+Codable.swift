// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ResiliencehubClientTypes.ResourceErrorsDetails: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case hasMoreErrors
        case resourceErrors
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let hasMoreErrors = self.hasMoreErrors {
            try encodeContainer.encode(hasMoreErrors, forKey: .hasMoreErrors)
        }
        if let resourceErrors = resourceErrors {
            var resourceErrorsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .resourceErrors)
            for resourceerrorlist0 in resourceErrors {
                try resourceErrorsContainer.encode(resourceerrorlist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceErrorsContainer = try containerValues.decodeIfPresent([ResiliencehubClientTypes.ResourceError?].self, forKey: .resourceErrors)
        var resourceErrorsDecoded0:[ResiliencehubClientTypes.ResourceError]? = nil
        if let resourceErrorsContainer = resourceErrorsContainer {
            resourceErrorsDecoded0 = [ResiliencehubClientTypes.ResourceError]()
            for structure0 in resourceErrorsContainer {
                if let structure0 = structure0 {
                    resourceErrorsDecoded0?.append(structure0)
                }
            }
        }
        resourceErrors = resourceErrorsDecoded0
        let hasMoreErrorsDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .hasMoreErrors)
        hasMoreErrors = hasMoreErrorsDecoded
    }
}
