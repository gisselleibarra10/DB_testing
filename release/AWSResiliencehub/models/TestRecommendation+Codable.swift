// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ResiliencehubClientTypes.TestRecommendation: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case appComponentName
        case dependsOnAlarms
        case description
        case intent
        case items
        case name
        case prerequisite
        case recommendationId
        case referenceId
        case risk
        case type
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let appComponentName = self.appComponentName {
            try encodeContainer.encode(appComponentName, forKey: .appComponentName)
        }
        if let dependsOnAlarms = dependsOnAlarms {
            var dependsOnAlarmsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .dependsOnAlarms)
            for alarmreferenceidlist0 in dependsOnAlarms {
                try dependsOnAlarmsContainer.encode(alarmreferenceidlist0)
            }
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let intent = self.intent {
            try encodeContainer.encode(intent, forKey: .intent)
        }
        if let items = items {
            var itemsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .items)
            for recommendationitemlist0 in items {
                try itemsContainer.encode(recommendationitemlist0)
            }
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let prerequisite = self.prerequisite {
            try encodeContainer.encode(prerequisite, forKey: .prerequisite)
        }
        if let recommendationId = self.recommendationId {
            try encodeContainer.encode(recommendationId, forKey: .recommendationId)
        }
        if let referenceId = self.referenceId {
            try encodeContainer.encode(referenceId, forKey: .referenceId)
        }
        if let risk = self.risk {
            try encodeContainer.encode(risk.rawValue, forKey: .risk)
        }
        if let type = self.type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let recommendationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .recommendationId)
        recommendationId = recommendationIdDecoded
        let referenceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .referenceId)
        referenceId = referenceIdDecoded
        let appComponentNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .appComponentName)
        appComponentName = appComponentNameDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let intentDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .intent)
        intent = intentDecoded
        let riskDecoded = try containerValues.decodeIfPresent(ResiliencehubClientTypes.TestRisk.self, forKey: .risk)
        risk = riskDecoded
        let typeDecoded = try containerValues.decodeIfPresent(ResiliencehubClientTypes.TestType.self, forKey: .type)
        type = typeDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let itemsContainer = try containerValues.decodeIfPresent([ResiliencehubClientTypes.RecommendationItem?].self, forKey: .items)
        var itemsDecoded0:[ResiliencehubClientTypes.RecommendationItem]? = nil
        if let itemsContainer = itemsContainer {
            itemsDecoded0 = [ResiliencehubClientTypes.RecommendationItem]()
            for structure0 in itemsContainer {
                if let structure0 = structure0 {
                    itemsDecoded0?.append(structure0)
                }
            }
        }
        items = itemsDecoded0
        let prerequisiteDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .prerequisite)
        prerequisite = prerequisiteDecoded
        let dependsOnAlarmsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .dependsOnAlarms)
        var dependsOnAlarmsDecoded0:[Swift.String]? = nil
        if let dependsOnAlarmsContainer = dependsOnAlarmsContainer {
            dependsOnAlarmsDecoded0 = [Swift.String]()
            for string0 in dependsOnAlarmsContainer {
                if let string0 = string0 {
                    dependsOnAlarmsDecoded0?.append(string0)
                }
            }
        }
        dependsOnAlarms = dependsOnAlarmsDecoded0
    }
}
