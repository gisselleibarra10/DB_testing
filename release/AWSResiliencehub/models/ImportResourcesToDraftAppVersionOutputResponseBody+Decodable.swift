// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ImportResourcesToDraftAppVersionOutputResponseBody: Swift.Equatable {
    let appArn: Swift.String?
    let appVersion: Swift.String?
    let sourceArns: [Swift.String]?
    let status: ResiliencehubClientTypes.ResourceImportStatusType?
    let terraformSources: [ResiliencehubClientTypes.TerraformSource]?
}

extension ImportResourcesToDraftAppVersionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case appArn
        case appVersion
        case sourceArns
        case status
        case terraformSources
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let appArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .appArn)
        appArn = appArnDecoded
        let appVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .appVersion)
        appVersion = appVersionDecoded
        let sourceArnsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .sourceArns)
        var sourceArnsDecoded0:[Swift.String]? = nil
        if let sourceArnsContainer = sourceArnsContainer {
            sourceArnsDecoded0 = [Swift.String]()
            for string0 in sourceArnsContainer {
                if let string0 = string0 {
                    sourceArnsDecoded0?.append(string0)
                }
            }
        }
        sourceArns = sourceArnsDecoded0
        let statusDecoded = try containerValues.decodeIfPresent(ResiliencehubClientTypes.ResourceImportStatusType.self, forKey: .status)
        status = statusDecoded
        let terraformSourcesContainer = try containerValues.decodeIfPresent([ResiliencehubClientTypes.TerraformSource?].self, forKey: .terraformSources)
        var terraformSourcesDecoded0:[ResiliencehubClientTypes.TerraformSource]? = nil
        if let terraformSourcesContainer = terraformSourcesContainer {
            terraformSourcesDecoded0 = [ResiliencehubClientTypes.TerraformSource]()
            for structure0 in terraformSourcesContainer {
                if let structure0 = structure0 {
                    terraformSourcesDecoded0?.append(structure0)
                }
            }
        }
        terraformSources = terraformSourcesDecoded0
    }
}
