// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct CreateResiliencyPolicyInput: Swift.Equatable {
    /// Used for an idempotency token. A client token is a unique, case-sensitive string of up to 64 ASCII characters. You should not reuse the same client token for other API requests.
    public var clientToken: Swift.String?
    /// Specifies a high-level geographical location constraint for where your resilience policy data can be stored.
    public var dataLocationConstraint: ResiliencehubClientTypes.DataLocationConstraint?
    /// The type of resiliency policy to be created, including the recovery time objective (RTO) and recovery point objective (RPO) in seconds.
    /// This member is required.
    public var policy: [Swift.String:ResiliencehubClientTypes.FailurePolicy]?
    /// The description for the policy.
    public var policyDescription: Swift.String?
    /// The name of the policy
    /// This member is required.
    public var policyName: Swift.String?
    /// The tags assigned to the resource. A tag is a label that you assign to an Amazon Web Services resource. Each tag consists of a key/value pair.
    public var tags: [Swift.String:Swift.String]?
    /// The tier for this resiliency policy, ranging from the highest severity (MissionCritical) to lowest (NonCritical).
    /// This member is required.
    public var tier: ResiliencehubClientTypes.ResiliencyPolicyTier?

    public init (
        clientToken: Swift.String? = nil,
        dataLocationConstraint: ResiliencehubClientTypes.DataLocationConstraint? = nil,
        policy: [Swift.String:ResiliencehubClientTypes.FailurePolicy]? = nil,
        policyDescription: Swift.String? = nil,
        policyName: Swift.String? = nil,
        tags: [Swift.String:Swift.String]? = nil,
        tier: ResiliencehubClientTypes.ResiliencyPolicyTier? = nil
    )
    {
        self.clientToken = clientToken
        self.dataLocationConstraint = dataLocationConstraint
        self.policy = policy
        self.policyDescription = policyDescription
        self.policyName = policyName
        self.tags = tags
        self.tier = tier
    }
}
