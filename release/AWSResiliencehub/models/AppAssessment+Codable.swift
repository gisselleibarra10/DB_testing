// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ResiliencehubClientTypes.AppAssessment: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case appArn
        case appVersion
        case assessmentArn
        case assessmentName
        case assessmentStatus
        case compliance
        case complianceStatus
        case cost
        case endTime
        case invoker
        case message
        case policy
        case resiliencyScore
        case resourceErrorsDetails
        case startTime
        case tags
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let appArn = self.appArn {
            try encodeContainer.encode(appArn, forKey: .appArn)
        }
        if let appVersion = self.appVersion {
            try encodeContainer.encode(appVersion, forKey: .appVersion)
        }
        if let assessmentArn = self.assessmentArn {
            try encodeContainer.encode(assessmentArn, forKey: .assessmentArn)
        }
        if let assessmentName = self.assessmentName {
            try encodeContainer.encode(assessmentName, forKey: .assessmentName)
        }
        if let assessmentStatus = self.assessmentStatus {
            try encodeContainer.encode(assessmentStatus.rawValue, forKey: .assessmentStatus)
        }
        if let compliance = compliance {
            var complianceContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .compliance)
            for (dictKey0, assessmentcompliance0) in compliance {
                try complianceContainer.encode(assessmentcompliance0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let complianceStatus = self.complianceStatus {
            try encodeContainer.encode(complianceStatus.rawValue, forKey: .complianceStatus)
        }
        if let cost = self.cost {
            try encodeContainer.encode(cost, forKey: .cost)
        }
        if let endTime = self.endTime {
            try encodeContainer.encode(endTime.timeIntervalSince1970, forKey: .endTime)
        }
        if let invoker = self.invoker {
            try encodeContainer.encode(invoker.rawValue, forKey: .invoker)
        }
        if let message = self.message {
            try encodeContainer.encode(message, forKey: .message)
        }
        if let policy = self.policy {
            try encodeContainer.encode(policy, forKey: .policy)
        }
        if let resiliencyScore = self.resiliencyScore {
            try encodeContainer.encode(resiliencyScore, forKey: .resiliencyScore)
        }
        if let resourceErrorsDetails = self.resourceErrorsDetails {
            try encodeContainer.encode(resourceErrorsDetails, forKey: .resourceErrorsDetails)
        }
        if let startTime = self.startTime {
            try encodeContainer.encode(startTime.timeIntervalSince1970, forKey: .startTime)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, tagmap0) in tags {
                try tagsContainer.encode(tagmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let appArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .appArn)
        appArn = appArnDecoded
        let appVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .appVersion)
        appVersion = appVersionDecoded
        let invokerDecoded = try containerValues.decodeIfPresent(ResiliencehubClientTypes.AssessmentInvoker.self, forKey: .invoker)
        invoker = invokerDecoded
        let costDecoded = try containerValues.decodeIfPresent(ResiliencehubClientTypes.Cost.self, forKey: .cost)
        cost = costDecoded
        let resiliencyScoreDecoded = try containerValues.decodeIfPresent(ResiliencehubClientTypes.ResiliencyScore.self, forKey: .resiliencyScore)
        resiliencyScore = resiliencyScoreDecoded
        let complianceContainer = try containerValues.decodeIfPresent([Swift.String: ResiliencehubClientTypes.DisruptionCompliance?].self, forKey: .compliance)
        var complianceDecoded0: [Swift.String:ResiliencehubClientTypes.DisruptionCompliance]? = nil
        if let complianceContainer = complianceContainer {
            complianceDecoded0 = [Swift.String:ResiliencehubClientTypes.DisruptionCompliance]()
            for (key0, disruptioncompliance0) in complianceContainer {
                if let disruptioncompliance0 = disruptioncompliance0 {
                    complianceDecoded0?[key0] = disruptioncompliance0
                }
            }
        }
        compliance = complianceDecoded0
        let complianceStatusDecoded = try containerValues.decodeIfPresent(ResiliencehubClientTypes.ComplianceStatus.self, forKey: .complianceStatus)
        complianceStatus = complianceStatusDecoded
        let assessmentStatusDecoded = try containerValues.decodeIfPresent(ResiliencehubClientTypes.AssessmentStatus.self, forKey: .assessmentStatus)
        assessmentStatus = assessmentStatusDecoded
        let startTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .startTime)
        startTime = startTimeDecoded
        let endTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .endTime)
        endTime = endTimeDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let assessmentNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .assessmentName)
        assessmentName = assessmentNameDecoded
        let assessmentArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .assessmentArn)
        assessmentArn = assessmentArnDecoded
        let policyDecoded = try containerValues.decodeIfPresent(ResiliencehubClientTypes.ResiliencyPolicy.self, forKey: .policy)
        policy = policyDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
        let resourceErrorsDetailsDecoded = try containerValues.decodeIfPresent(ResiliencehubClientTypes.ResourceErrorsDetails.self, forKey: .resourceErrorsDetails)
        resourceErrorsDetails = resourceErrorsDetailsDecoded
    }
}
