// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ResiliencehubClientTypes.ConfigRecommendation: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case appComponentName
        case compliance
        case cost
        case description
        case haArchitecture
        case name
        case optimizationType
        case recommendationCompliance
        case referenceId
        case suggestedChanges
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let appComponentName = self.appComponentName {
            try encodeContainer.encode(appComponentName, forKey: .appComponentName)
        }
        if let compliance = compliance {
            var complianceContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .compliance)
            for (dictKey0, assessmentcompliance0) in compliance {
                try complianceContainer.encode(assessmentcompliance0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let cost = self.cost {
            try encodeContainer.encode(cost, forKey: .cost)
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let haArchitecture = self.haArchitecture {
            try encodeContainer.encode(haArchitecture.rawValue, forKey: .haArchitecture)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let optimizationType = self.optimizationType {
            try encodeContainer.encode(optimizationType.rawValue, forKey: .optimizationType)
        }
        if let recommendationCompliance = recommendationCompliance {
            var recommendationComplianceContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .recommendationCompliance)
            for (dictKey0, recommendationcompliance0) in recommendationCompliance {
                try recommendationComplianceContainer.encode(recommendationcompliance0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let referenceId = self.referenceId {
            try encodeContainer.encode(referenceId, forKey: .referenceId)
        }
        if let suggestedChanges = suggestedChanges {
            var suggestedChangesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .suggestedChanges)
            for suggestedchangeslist0 in suggestedChanges {
                try suggestedChangesContainer.encode(suggestedchangeslist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let costDecoded = try containerValues.decodeIfPresent(ResiliencehubClientTypes.Cost.self, forKey: .cost)
        cost = costDecoded
        let appComponentNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .appComponentName)
        appComponentName = appComponentNameDecoded
        let complianceContainer = try containerValues.decodeIfPresent([Swift.String: ResiliencehubClientTypes.DisruptionCompliance?].self, forKey: .compliance)
        var complianceDecoded0: [Swift.String:ResiliencehubClientTypes.DisruptionCompliance]? = nil
        if let complianceContainer = complianceContainer {
            complianceDecoded0 = [Swift.String:ResiliencehubClientTypes.DisruptionCompliance]()
            for (key0, disruptioncompliance0) in complianceContainer {
                if let disruptioncompliance0 = disruptioncompliance0 {
                    complianceDecoded0?[key0] = disruptioncompliance0
                }
            }
        }
        compliance = complianceDecoded0
        let recommendationComplianceContainer = try containerValues.decodeIfPresent([Swift.String: ResiliencehubClientTypes.RecommendationDisruptionCompliance?].self, forKey: .recommendationCompliance)
        var recommendationComplianceDecoded0: [Swift.String:ResiliencehubClientTypes.RecommendationDisruptionCompliance]? = nil
        if let recommendationComplianceContainer = recommendationComplianceContainer {
            recommendationComplianceDecoded0 = [Swift.String:ResiliencehubClientTypes.RecommendationDisruptionCompliance]()
            for (key0, recommendationdisruptioncompliance0) in recommendationComplianceContainer {
                if let recommendationdisruptioncompliance0 = recommendationdisruptioncompliance0 {
                    recommendationComplianceDecoded0?[key0] = recommendationdisruptioncompliance0
                }
            }
        }
        recommendationCompliance = recommendationComplianceDecoded0
        let optimizationTypeDecoded = try containerValues.decodeIfPresent(ResiliencehubClientTypes.ConfigRecommendationOptimizationType.self, forKey: .optimizationType)
        optimizationType = optimizationTypeDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let suggestedChangesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .suggestedChanges)
        var suggestedChangesDecoded0:[Swift.String]? = nil
        if let suggestedChangesContainer = suggestedChangesContainer {
            suggestedChangesDecoded0 = [Swift.String]()
            for string0 in suggestedChangesContainer {
                if let string0 = string0 {
                    suggestedChangesDecoded0?.append(string0)
                }
            }
        }
        suggestedChanges = suggestedChangesDecoded0
        let haArchitectureDecoded = try containerValues.decodeIfPresent(ResiliencehubClientTypes.HaArchitecture.self, forKey: .haArchitecture)
        haArchitecture = haArchitectureDecoded
        let referenceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .referenceId)
        referenceId = referenceIdDecoded
    }
}
