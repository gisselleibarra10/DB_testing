// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ResiliencehubClientTypes.AppComponentCompliance: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case appComponentName
        case compliance
        case cost
        case message
        case resiliencyScore
        case status
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let appComponentName = self.appComponentName {
            try encodeContainer.encode(appComponentName, forKey: .appComponentName)
        }
        if let compliance = compliance {
            var complianceContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .compliance)
            for (dictKey0, assessmentcompliance0) in compliance {
                try complianceContainer.encode(assessmentcompliance0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let cost = self.cost {
            try encodeContainer.encode(cost, forKey: .cost)
        }
        if let message = self.message {
            try encodeContainer.encode(message, forKey: .message)
        }
        if let resiliencyScore = self.resiliencyScore {
            try encodeContainer.encode(resiliencyScore, forKey: .resiliencyScore)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let costDecoded = try containerValues.decodeIfPresent(ResiliencehubClientTypes.Cost.self, forKey: .cost)
        cost = costDecoded
        let appComponentNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .appComponentName)
        appComponentName = appComponentNameDecoded
        let complianceContainer = try containerValues.decodeIfPresent([Swift.String: ResiliencehubClientTypes.DisruptionCompliance?].self, forKey: .compliance)
        var complianceDecoded0: [Swift.String:ResiliencehubClientTypes.DisruptionCompliance]? = nil
        if let complianceContainer = complianceContainer {
            complianceDecoded0 = [Swift.String:ResiliencehubClientTypes.DisruptionCompliance]()
            for (key0, disruptioncompliance0) in complianceContainer {
                if let disruptioncompliance0 = disruptioncompliance0 {
                    complianceDecoded0?[key0] = disruptioncompliance0
                }
            }
        }
        compliance = complianceDecoded0
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let statusDecoded = try containerValues.decodeIfPresent(ResiliencehubClientTypes.ComplianceStatus.self, forKey: .status)
        status = statusDecoded
        let resiliencyScoreDecoded = try containerValues.decodeIfPresent(ResiliencehubClientTypes.ResiliencyScore.self, forKey: .resiliencyScore)
        resiliencyScore = resiliencyScoreDecoded
    }
}
