// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ResiliencehubClientTypes.Cost: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case amount
        case currency
        case frequency
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if amount != 0.0 {
            try encodeContainer.encode(amount, forKey: .amount)
        }
        if let currency = self.currency {
            try encodeContainer.encode(currency, forKey: .currency)
        }
        if let frequency = self.frequency {
            try encodeContainer.encode(frequency.rawValue, forKey: .frequency)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let amountDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .amount) ?? 0.0
        amount = amountDecoded
        let currencyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .currency)
        currency = currencyDecoded
        let frequencyDecoded = try containerValues.decodeIfPresent(ResiliencehubClientTypes.CostFrequency.self, forKey: .frequency)
        frequency = frequencyDecoded
    }
}
