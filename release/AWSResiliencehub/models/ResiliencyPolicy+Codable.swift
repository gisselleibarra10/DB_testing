// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ResiliencehubClientTypes.ResiliencyPolicy: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTime
        case dataLocationConstraint
        case estimatedCostTier
        case policy
        case policyArn
        case policyDescription
        case policyName
        case tags
        case tier
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationTime = self.creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let dataLocationConstraint = self.dataLocationConstraint {
            try encodeContainer.encode(dataLocationConstraint.rawValue, forKey: .dataLocationConstraint)
        }
        if let estimatedCostTier = self.estimatedCostTier {
            try encodeContainer.encode(estimatedCostTier.rawValue, forKey: .estimatedCostTier)
        }
        if let policy = policy {
            var policyContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .policy)
            for (dictKey0, disruptionpolicy0) in policy {
                try policyContainer.encode(disruptionpolicy0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let policyArn = self.policyArn {
            try encodeContainer.encode(policyArn, forKey: .policyArn)
        }
        if let policyDescription = self.policyDescription {
            try encodeContainer.encode(policyDescription, forKey: .policyDescription)
        }
        if let policyName = self.policyName {
            try encodeContainer.encode(policyName, forKey: .policyName)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, tagmap0) in tags {
                try tagsContainer.encode(tagmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let tier = self.tier {
            try encodeContainer.encode(tier.rawValue, forKey: .tier)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let policyArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policyArn)
        policyArn = policyArnDecoded
        let policyNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policyName)
        policyName = policyNameDecoded
        let policyDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policyDescription)
        policyDescription = policyDescriptionDecoded
        let dataLocationConstraintDecoded = try containerValues.decodeIfPresent(ResiliencehubClientTypes.DataLocationConstraint.self, forKey: .dataLocationConstraint)
        dataLocationConstraint = dataLocationConstraintDecoded
        let tierDecoded = try containerValues.decodeIfPresent(ResiliencehubClientTypes.ResiliencyPolicyTier.self, forKey: .tier)
        tier = tierDecoded
        let estimatedCostTierDecoded = try containerValues.decodeIfPresent(ResiliencehubClientTypes.EstimatedCostTier.self, forKey: .estimatedCostTier)
        estimatedCostTier = estimatedCostTierDecoded
        let policyContainer = try containerValues.decodeIfPresent([Swift.String: ResiliencehubClientTypes.FailurePolicy?].self, forKey: .policy)
        var policyDecoded0: [Swift.String:ResiliencehubClientTypes.FailurePolicy]? = nil
        if let policyContainer = policyContainer {
            policyDecoded0 = [Swift.String:ResiliencehubClientTypes.FailurePolicy]()
            for (key0, failurepolicy0) in policyContainer {
                if let failurepolicy0 = failurepolicy0 {
                    policyDecoded0?[key0] = failurepolicy0
                }
            }
        }
        policy = policyDecoded0
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
    }
}
