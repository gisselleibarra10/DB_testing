// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateRecommendationTemplateInputBody: Swift.Equatable {
    let recommendationIds: [Swift.String]?
    let format: ResiliencehubClientTypes.TemplateFormat?
    let recommendationTypes: [ResiliencehubClientTypes.RenderRecommendationType]?
    let assessmentArn: Swift.String?
    let name: Swift.String?
    let clientToken: Swift.String?
    let tags: [Swift.String:Swift.String]?
    let bucketName: Swift.String?
}

extension CreateRecommendationTemplateInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case assessmentArn
        case bucketName
        case clientToken
        case format
        case name
        case recommendationIds
        case recommendationTypes
        case tags
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let recommendationIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .recommendationIds)
        var recommendationIdsDecoded0:[Swift.String]? = nil
        if let recommendationIdsContainer = recommendationIdsContainer {
            recommendationIdsDecoded0 = [Swift.String]()
            for string0 in recommendationIdsContainer {
                if let string0 = string0 {
                    recommendationIdsDecoded0?.append(string0)
                }
            }
        }
        recommendationIds = recommendationIdsDecoded0
        let formatDecoded = try containerValues.decodeIfPresent(ResiliencehubClientTypes.TemplateFormat.self, forKey: .format)
        format = formatDecoded
        let recommendationTypesContainer = try containerValues.decodeIfPresent([ResiliencehubClientTypes.RenderRecommendationType?].self, forKey: .recommendationTypes)
        var recommendationTypesDecoded0:[ResiliencehubClientTypes.RenderRecommendationType]? = nil
        if let recommendationTypesContainer = recommendationTypesContainer {
            recommendationTypesDecoded0 = [ResiliencehubClientTypes.RenderRecommendationType]()
            for string0 in recommendationTypesContainer {
                if let string0 = string0 {
                    recommendationTypesDecoded0?.append(string0)
                }
            }
        }
        recommendationTypes = recommendationTypesDecoded0
        let assessmentArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .assessmentArn)
        assessmentArn = assessmentArnDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let clientTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientToken)
        clientToken = clientTokenDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
        let bucketNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .bucketName)
        bucketName = bucketNameDecoded
    }
}
