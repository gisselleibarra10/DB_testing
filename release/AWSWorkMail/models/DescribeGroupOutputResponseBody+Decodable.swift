// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeGroupOutputResponseBody: Swift.Equatable {
    let groupId: Swift.String?
    let name: Swift.String?
    let email: Swift.String?
    let state: WorkMailClientTypes.EntityState?
    let enabledDate: ClientRuntime.Date?
    let disabledDate: ClientRuntime.Date?
}

extension DescribeGroupOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case disabledDate = "DisabledDate"
        case email = "Email"
        case enabledDate = "EnabledDate"
        case groupId = "GroupId"
        case name = "Name"
        case state = "State"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let groupIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .groupId)
        groupId = groupIdDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let emailDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .email)
        email = emailDecoded
        let stateDecoded = try containerValues.decodeIfPresent(WorkMailClientTypes.EntityState.self, forKey: .state)
        state = stateDecoded
        let enabledDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .enabledDate)
        enabledDate = enabledDateDecoded
        let disabledDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .disabledDate)
        disabledDate = disabledDateDecoded
    }
}
