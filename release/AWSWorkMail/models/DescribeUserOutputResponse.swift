// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct DescribeUserOutputResponse: Swift.Equatable {
    /// The date and time at which the user was disabled for Amazon WorkMail usage, in UNIX epoch time format.
    public var disabledDate: ClientRuntime.Date?
    /// The display name of the user.
    public var displayName: Swift.String?
    /// The email of the user.
    public var email: Swift.String?
    /// The date and time at which the user was enabled for Amazon WorkMail usage, in UNIX epoch time format.
    public var enabledDate: ClientRuntime.Date?
    /// The name for the user.
    public var name: Swift.String?
    /// The state of a user: enabled (registered to Amazon WorkMail) or disabled (deregistered or never registered to WorkMail).
    public var state: WorkMailClientTypes.EntityState?
    /// The identifier for the described user.
    public var userId: Swift.String?
    /// In certain cases, other entities are modeled as users. If interoperability is enabled, resources are imported into Amazon WorkMail as users. Because different WorkMail organizations rely on different directory types, administrators can distinguish between an unregistered user (account is disabled and has a user role) and the directory administrators. The values are USER, RESOURCE, and SYSTEM_USER.
    public var userRole: WorkMailClientTypes.UserRole?

    public init (
        disabledDate: ClientRuntime.Date? = nil,
        displayName: Swift.String? = nil,
        email: Swift.String? = nil,
        enabledDate: ClientRuntime.Date? = nil,
        name: Swift.String? = nil,
        state: WorkMailClientTypes.EntityState? = nil,
        userId: Swift.String? = nil,
        userRole: WorkMailClientTypes.UserRole? = nil
    )
    {
        self.disabledDate = disabledDate
        self.displayName = displayName
        self.email = email
        self.enabledDate = enabledDate
        self.name = name
        self.state = state
        self.userId = userId
        self.userRole = userRole
    }
}
