// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetMailDomainOutputResponseBody: Swift.Equatable {
    let records: [WorkMailClientTypes.DnsRecord]?
    let isTestDomain: Swift.Bool
    let isDefault: Swift.Bool
    let ownershipVerificationStatus: WorkMailClientTypes.DnsRecordVerificationStatus?
    let dkimVerificationStatus: WorkMailClientTypes.DnsRecordVerificationStatus?
}

extension GetMailDomainOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dkimVerificationStatus = "DkimVerificationStatus"
        case isDefault = "IsDefault"
        case isTestDomain = "IsTestDomain"
        case ownershipVerificationStatus = "OwnershipVerificationStatus"
        case records = "Records"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let recordsContainer = try containerValues.decodeIfPresent([WorkMailClientTypes.DnsRecord?].self, forKey: .records)
        var recordsDecoded0:[WorkMailClientTypes.DnsRecord]? = nil
        if let recordsContainer = recordsContainer {
            recordsDecoded0 = [WorkMailClientTypes.DnsRecord]()
            for structure0 in recordsContainer {
                if let structure0 = structure0 {
                    recordsDecoded0?.append(structure0)
                }
            }
        }
        records = recordsDecoded0
        let isTestDomainDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .isTestDomain) ?? false
        isTestDomain = isTestDomainDecoded
        let isDefaultDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .isDefault) ?? false
        isDefault = isDefaultDecoded
        let ownershipVerificationStatusDecoded = try containerValues.decodeIfPresent(WorkMailClientTypes.DnsRecordVerificationStatus.self, forKey: .ownershipVerificationStatus)
        ownershipVerificationStatus = ownershipVerificationStatusDecoded
        let dkimVerificationStatusDecoded = try containerValues.decodeIfPresent(WorkMailClientTypes.DnsRecordVerificationStatus.self, forKey: .dkimVerificationStatus)
        dkimVerificationStatus = dkimVerificationStatusDecoded
    }
}
