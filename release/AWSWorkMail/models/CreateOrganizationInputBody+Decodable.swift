// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateOrganizationInputBody: Swift.Equatable {
    let directoryId: Swift.String?
    let alias: Swift.String?
    let clientToken: Swift.String?
    let domains: [WorkMailClientTypes.Domain]?
    let kmsKeyArn: Swift.String?
    let enableInteroperability: Swift.Bool
}

extension CreateOrganizationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case alias = "Alias"
        case clientToken = "ClientToken"
        case directoryId = "DirectoryId"
        case domains = "Domains"
        case enableInteroperability = "EnableInteroperability"
        case kmsKeyArn = "KmsKeyArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let directoryIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .directoryId)
        directoryId = directoryIdDecoded
        let aliasDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .alias)
        alias = aliasDecoded
        let clientTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientToken)
        clientToken = clientTokenDecoded
        let domainsContainer = try containerValues.decodeIfPresent([WorkMailClientTypes.Domain?].self, forKey: .domains)
        var domainsDecoded0:[WorkMailClientTypes.Domain]? = nil
        if let domainsContainer = domainsContainer {
            domainsDecoded0 = [WorkMailClientTypes.Domain]()
            for structure0 in domainsContainer {
                if let structure0 = structure0 {
                    domainsDecoded0?.append(structure0)
                }
            }
        }
        domains = domainsDecoded0
        let kmsKeyArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kmsKeyArn)
        kmsKeyArn = kmsKeyArnDecoded
        let enableInteroperabilityDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enableInteroperability) ?? false
        enableInteroperability = enableInteroperabilityDecoded
    }
}
