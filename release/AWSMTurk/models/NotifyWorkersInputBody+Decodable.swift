// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct NotifyWorkersInputBody: Swift.Equatable {
    let subject: Swift.String?
    let messageText: Swift.String?
    let workerIds: [Swift.String]?
}

extension NotifyWorkersInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case messageText = "MessageText"
        case subject = "Subject"
        case workerIds = "WorkerIds"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let subjectDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .subject)
        subject = subjectDecoded
        let messageTextDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .messageText)
        messageText = messageTextDecoded
        let workerIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .workerIds)
        var workerIdsDecoded0:[Swift.String]? = nil
        if let workerIdsContainer = workerIdsContainer {
            workerIdsDecoded0 = [Swift.String]()
            for string0 in workerIdsContainer {
                if let string0 = string0 {
                    workerIdsDecoded0?.append(string0)
                }
            }
        }
        workerIds = workerIdsDecoded0
    }
}
