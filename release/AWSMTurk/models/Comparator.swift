// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension MTurkClientTypes {
    public enum Comparator: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case doesnotexist
        case equalto
        case exists
        case greaterthan
        case greaterthanorequalto
        case `in`
        case lessthan
        case lessthanorequalto
        case notequalto
        case notin
        case sdkUnknown(Swift.String)

        public static var allCases: [Comparator] {
            return [
                .doesnotexist,
                .equalto,
                .exists,
                .greaterthan,
                .greaterthanorequalto,
                .in,
                .lessthan,
                .lessthanorequalto,
                .notequalto,
                .notin,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .doesnotexist: return "DoesNotExist"
            case .equalto: return "EqualTo"
            case .exists: return "Exists"
            case .greaterthan: return "GreaterThan"
            case .greaterthanorequalto: return "GreaterThanOrEqualTo"
            case .in: return "In"
            case .lessthan: return "LessThan"
            case .lessthanorequalto: return "LessThanOrEqualTo"
            case .notequalto: return "NotEqualTo"
            case .notin: return "NotIn"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = Comparator(rawValue: rawValue) ?? Comparator.sdkUnknown(rawValue)
        }
    }
}
