// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension MTurkClientTypes {
    /// The HIT data structure represents a single HIT, including all the information necessary for a Worker to accept and complete the HIT.
    public struct HIT: Swift.Equatable {
        /// The length of time, in seconds, that a Worker has to complete the HIT after accepting it.
        public var assignmentDurationInSeconds: Swift.Int?
        /// The amount of time, in seconds, after the Worker submits an assignment for the HIT that the results are automatically approved by Amazon Mechanical Turk. This is the amount of time the Requester has to reject an assignment submitted by a Worker before the assignment is auto-approved and the Worker is paid.
        public var autoApprovalDelayInSeconds: Swift.Int?
        /// The date and time the HIT was created.
        public var creationTime: ClientRuntime.Date?
        /// A general description of the HIT.
        public var description: Swift.String?
        /// The date and time the HIT expires.
        public var expiration: ClientRuntime.Date?
        /// The ID of the HIT Group of this HIT.
        public var hITGroupId: Swift.String?
        /// A unique identifier for the HIT.
        public var hITId: Swift.String?
        /// The ID of the HIT Layout of this HIT.
        public var hITLayoutId: Swift.String?
        /// Indicates the review status of the HIT. Valid Values are NotReviewed | MarkedForReview | ReviewedAppropriate | ReviewedInappropriate.
        public var hITReviewStatus: MTurkClientTypes.HITReviewStatus?
        /// The status of the HIT and its assignments. Valid Values are Assignable | Unassignable | Reviewable | Reviewing | Disposed.
        public var hITStatus: MTurkClientTypes.HITStatus?
        /// The ID of the HIT type of this HIT
        public var hITTypeId: Swift.String?
        /// One or more words or phrases that describe the HIT, separated by commas. Search terms similar to the keywords of a HIT are more likely to have the HIT in the search results.
        public var keywords: Swift.String?
        /// The number of times the HIT can be accepted and completed before the HIT becomes unavailable.
        public var maxAssignments: Swift.Int?
        /// The number of assignments for this HIT that are available for Workers to accept.
        public var numberOfAssignmentsAvailable: Swift.Int?
        /// The number of assignments for this HIT that have been approved or rejected.
        public var numberOfAssignmentsCompleted: Swift.Int?
        /// The number of assignments for this HIT that are being previewed or have been accepted by Workers, but have not yet been submitted, returned, or abandoned.
        public var numberOfAssignmentsPending: Swift.Int?
        /// Conditions that a Worker's Qualifications must meet in order to accept the HIT. A HIT can have between zero and ten Qualification requirements. All requirements must be met in order for a Worker to accept the HIT. Additionally, other actions can be restricted using the ActionsGuarded field on each QualificationRequirement structure.
        public var qualificationRequirements: [MTurkClientTypes.QualificationRequirement]?
        /// The data the Worker completing the HIT uses produce the results. This is either either a QuestionForm, HTMLQuestion or an ExternalQuestion data structure.
        public var question: Swift.String?
        /// An arbitrary data field the Requester who created the HIT can use. This field is visible only to the creator of the HIT.
        public var requesterAnnotation: Swift.String?
        /// A string representing a currency amount.
        public var reward: Swift.String?
        /// The title of the HIT.
        public var title: Swift.String?

        public init (
            assignmentDurationInSeconds: Swift.Int? = nil,
            autoApprovalDelayInSeconds: Swift.Int? = nil,
            creationTime: ClientRuntime.Date? = nil,
            description: Swift.String? = nil,
            expiration: ClientRuntime.Date? = nil,
            hITGroupId: Swift.String? = nil,
            hITId: Swift.String? = nil,
            hITLayoutId: Swift.String? = nil,
            hITReviewStatus: MTurkClientTypes.HITReviewStatus? = nil,
            hITStatus: MTurkClientTypes.HITStatus? = nil,
            hITTypeId: Swift.String? = nil,
            keywords: Swift.String? = nil,
            maxAssignments: Swift.Int? = nil,
            numberOfAssignmentsAvailable: Swift.Int? = nil,
            numberOfAssignmentsCompleted: Swift.Int? = nil,
            numberOfAssignmentsPending: Swift.Int? = nil,
            qualificationRequirements: [MTurkClientTypes.QualificationRequirement]? = nil,
            question: Swift.String? = nil,
            requesterAnnotation: Swift.String? = nil,
            reward: Swift.String? = nil,
            title: Swift.String? = nil
        )
        {
            self.assignmentDurationInSeconds = assignmentDurationInSeconds
            self.autoApprovalDelayInSeconds = autoApprovalDelayInSeconds
            self.creationTime = creationTime
            self.description = description
            self.expiration = expiration
            self.hITGroupId = hITGroupId
            self.hITId = hITId
            self.hITLayoutId = hITLayoutId
            self.hITReviewStatus = hITReviewStatus
            self.hITStatus = hITStatus
            self.hITTypeId = hITTypeId
            self.keywords = keywords
            self.maxAssignments = maxAssignments
            self.numberOfAssignmentsAvailable = numberOfAssignmentsAvailable
            self.numberOfAssignmentsCompleted = numberOfAssignmentsCompleted
            self.numberOfAssignmentsPending = numberOfAssignmentsPending
            self.qualificationRequirements = qualificationRequirements
            self.question = question
            self.requesterAnnotation = requesterAnnotation
            self.reward = reward
            self.title = title
        }
    }

}
