// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListQualificationTypesOutputResponseBody: Swift.Equatable {
    let numResults: Swift.Int?
    let nextToken: Swift.String?
    let qualificationTypes: [MTurkClientTypes.QualificationType]?
}

extension ListQualificationTypesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case numResults = "NumResults"
        case qualificationTypes = "QualificationTypes"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let numResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .numResults)
        numResults = numResultsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let qualificationTypesContainer = try containerValues.decodeIfPresent([MTurkClientTypes.QualificationType?].self, forKey: .qualificationTypes)
        var qualificationTypesDecoded0:[MTurkClientTypes.QualificationType]? = nil
        if let qualificationTypesContainer = qualificationTypesContainer {
            qualificationTypesDecoded0 = [MTurkClientTypes.QualificationType]()
            for structure0 in qualificationTypesContainer {
                if let structure0 = structure0 {
                    qualificationTypesDecoded0?.append(structure0)
                }
            }
        }
        qualificationTypes = qualificationTypesDecoded0
    }
}
