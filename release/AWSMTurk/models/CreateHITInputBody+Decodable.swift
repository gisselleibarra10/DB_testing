// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateHITInputBody: Swift.Equatable {
    let maxAssignments: Swift.Int?
    let autoApprovalDelayInSeconds: Swift.Int?
    let lifetimeInSeconds: Swift.Int?
    let assignmentDurationInSeconds: Swift.Int?
    let reward: Swift.String?
    let title: Swift.String?
    let keywords: Swift.String?
    let description: Swift.String?
    let question: Swift.String?
    let requesterAnnotation: Swift.String?
    let qualificationRequirements: [MTurkClientTypes.QualificationRequirement]?
    let uniqueRequestToken: Swift.String?
    let assignmentReviewPolicy: MTurkClientTypes.ReviewPolicy?
    let hITReviewPolicy: MTurkClientTypes.ReviewPolicy?
    let hITLayoutId: Swift.String?
    let hITLayoutParameters: [MTurkClientTypes.HITLayoutParameter]?
}

extension CreateHITInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case assignmentDurationInSeconds = "AssignmentDurationInSeconds"
        case assignmentReviewPolicy = "AssignmentReviewPolicy"
        case autoApprovalDelayInSeconds = "AutoApprovalDelayInSeconds"
        case description = "Description"
        case hITLayoutId = "HITLayoutId"
        case hITLayoutParameters = "HITLayoutParameters"
        case hITReviewPolicy = "HITReviewPolicy"
        case keywords = "Keywords"
        case lifetimeInSeconds = "LifetimeInSeconds"
        case maxAssignments = "MaxAssignments"
        case qualificationRequirements = "QualificationRequirements"
        case question = "Question"
        case requesterAnnotation = "RequesterAnnotation"
        case reward = "Reward"
        case title = "Title"
        case uniqueRequestToken = "UniqueRequestToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let maxAssignmentsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxAssignments)
        maxAssignments = maxAssignmentsDecoded
        let autoApprovalDelayInSecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .autoApprovalDelayInSeconds)
        autoApprovalDelayInSeconds = autoApprovalDelayInSecondsDecoded
        let lifetimeInSecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .lifetimeInSeconds)
        lifetimeInSeconds = lifetimeInSecondsDecoded
        let assignmentDurationInSecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .assignmentDurationInSeconds)
        assignmentDurationInSeconds = assignmentDurationInSecondsDecoded
        let rewardDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .reward)
        reward = rewardDecoded
        let titleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .title)
        title = titleDecoded
        let keywordsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keywords)
        keywords = keywordsDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let questionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .question)
        question = questionDecoded
        let requesterAnnotationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .requesterAnnotation)
        requesterAnnotation = requesterAnnotationDecoded
        let qualificationRequirementsContainer = try containerValues.decodeIfPresent([MTurkClientTypes.QualificationRequirement?].self, forKey: .qualificationRequirements)
        var qualificationRequirementsDecoded0:[MTurkClientTypes.QualificationRequirement]? = nil
        if let qualificationRequirementsContainer = qualificationRequirementsContainer {
            qualificationRequirementsDecoded0 = [MTurkClientTypes.QualificationRequirement]()
            for structure0 in qualificationRequirementsContainer {
                if let structure0 = structure0 {
                    qualificationRequirementsDecoded0?.append(structure0)
                }
            }
        }
        qualificationRequirements = qualificationRequirementsDecoded0
        let uniqueRequestTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .uniqueRequestToken)
        uniqueRequestToken = uniqueRequestTokenDecoded
        let assignmentReviewPolicyDecoded = try containerValues.decodeIfPresent(MTurkClientTypes.ReviewPolicy.self, forKey: .assignmentReviewPolicy)
        assignmentReviewPolicy = assignmentReviewPolicyDecoded
        let hITReviewPolicyDecoded = try containerValues.decodeIfPresent(MTurkClientTypes.ReviewPolicy.self, forKey: .hITReviewPolicy)
        hITReviewPolicy = hITReviewPolicyDecoded
        let hITLayoutIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .hITLayoutId)
        hITLayoutId = hITLayoutIdDecoded
        let hITLayoutParametersContainer = try containerValues.decodeIfPresent([MTurkClientTypes.HITLayoutParameter?].self, forKey: .hITLayoutParameters)
        var hITLayoutParametersDecoded0:[MTurkClientTypes.HITLayoutParameter]? = nil
        if let hITLayoutParametersContainer = hITLayoutParametersContainer {
            hITLayoutParametersDecoded0 = [MTurkClientTypes.HITLayoutParameter]()
            for structure0 in hITLayoutParametersContainer {
                if let structure0 = structure0 {
                    hITLayoutParametersDecoded0?.append(structure0)
                }
            }
        }
        hITLayoutParameters = hITLayoutParametersDecoded0
    }
}
