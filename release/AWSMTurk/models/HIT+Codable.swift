// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension MTurkClientTypes.HIT: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case assignmentDurationInSeconds = "AssignmentDurationInSeconds"
        case autoApprovalDelayInSeconds = "AutoApprovalDelayInSeconds"
        case creationTime = "CreationTime"
        case description = "Description"
        case expiration = "Expiration"
        case hITGroupId = "HITGroupId"
        case hITId = "HITId"
        case hITLayoutId = "HITLayoutId"
        case hITReviewStatus = "HITReviewStatus"
        case hITStatus = "HITStatus"
        case hITTypeId = "HITTypeId"
        case keywords = "Keywords"
        case maxAssignments = "MaxAssignments"
        case numberOfAssignmentsAvailable = "NumberOfAssignmentsAvailable"
        case numberOfAssignmentsCompleted = "NumberOfAssignmentsCompleted"
        case numberOfAssignmentsPending = "NumberOfAssignmentsPending"
        case qualificationRequirements = "QualificationRequirements"
        case question = "Question"
        case requesterAnnotation = "RequesterAnnotation"
        case reward = "Reward"
        case title = "Title"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let assignmentDurationInSeconds = self.assignmentDurationInSeconds {
            try encodeContainer.encode(assignmentDurationInSeconds, forKey: .assignmentDurationInSeconds)
        }
        if let autoApprovalDelayInSeconds = self.autoApprovalDelayInSeconds {
            try encodeContainer.encode(autoApprovalDelayInSeconds, forKey: .autoApprovalDelayInSeconds)
        }
        if let creationTime = self.creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let expiration = self.expiration {
            try encodeContainer.encode(expiration.timeIntervalSince1970, forKey: .expiration)
        }
        if let hITGroupId = self.hITGroupId {
            try encodeContainer.encode(hITGroupId, forKey: .hITGroupId)
        }
        if let hITId = self.hITId {
            try encodeContainer.encode(hITId, forKey: .hITId)
        }
        if let hITLayoutId = self.hITLayoutId {
            try encodeContainer.encode(hITLayoutId, forKey: .hITLayoutId)
        }
        if let hITReviewStatus = self.hITReviewStatus {
            try encodeContainer.encode(hITReviewStatus.rawValue, forKey: .hITReviewStatus)
        }
        if let hITStatus = self.hITStatus {
            try encodeContainer.encode(hITStatus.rawValue, forKey: .hITStatus)
        }
        if let hITTypeId = self.hITTypeId {
            try encodeContainer.encode(hITTypeId, forKey: .hITTypeId)
        }
        if let keywords = self.keywords {
            try encodeContainer.encode(keywords, forKey: .keywords)
        }
        if let maxAssignments = self.maxAssignments {
            try encodeContainer.encode(maxAssignments, forKey: .maxAssignments)
        }
        if let numberOfAssignmentsAvailable = self.numberOfAssignmentsAvailable {
            try encodeContainer.encode(numberOfAssignmentsAvailable, forKey: .numberOfAssignmentsAvailable)
        }
        if let numberOfAssignmentsCompleted = self.numberOfAssignmentsCompleted {
            try encodeContainer.encode(numberOfAssignmentsCompleted, forKey: .numberOfAssignmentsCompleted)
        }
        if let numberOfAssignmentsPending = self.numberOfAssignmentsPending {
            try encodeContainer.encode(numberOfAssignmentsPending, forKey: .numberOfAssignmentsPending)
        }
        if let qualificationRequirements = qualificationRequirements {
            var qualificationRequirementsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .qualificationRequirements)
            for qualificationrequirementlist0 in qualificationRequirements {
                try qualificationRequirementsContainer.encode(qualificationrequirementlist0)
            }
        }
        if let question = self.question {
            try encodeContainer.encode(question, forKey: .question)
        }
        if let requesterAnnotation = self.requesterAnnotation {
            try encodeContainer.encode(requesterAnnotation, forKey: .requesterAnnotation)
        }
        if let reward = self.reward {
            try encodeContainer.encode(reward, forKey: .reward)
        }
        if let title = self.title {
            try encodeContainer.encode(title, forKey: .title)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let hITIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .hITId)
        hITId = hITIdDecoded
        let hITTypeIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .hITTypeId)
        hITTypeId = hITTypeIdDecoded
        let hITGroupIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .hITGroupId)
        hITGroupId = hITGroupIdDecoded
        let hITLayoutIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .hITLayoutId)
        hITLayoutId = hITLayoutIdDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let titleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .title)
        title = titleDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let questionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .question)
        question = questionDecoded
        let keywordsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keywords)
        keywords = keywordsDecoded
        let hITStatusDecoded = try containerValues.decodeIfPresent(MTurkClientTypes.HITStatus.self, forKey: .hITStatus)
        hITStatus = hITStatusDecoded
        let maxAssignmentsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxAssignments)
        maxAssignments = maxAssignmentsDecoded
        let rewardDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .reward)
        reward = rewardDecoded
        let autoApprovalDelayInSecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .autoApprovalDelayInSeconds)
        autoApprovalDelayInSeconds = autoApprovalDelayInSecondsDecoded
        let expirationDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .expiration)
        expiration = expirationDecoded
        let assignmentDurationInSecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .assignmentDurationInSeconds)
        assignmentDurationInSeconds = assignmentDurationInSecondsDecoded
        let requesterAnnotationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .requesterAnnotation)
        requesterAnnotation = requesterAnnotationDecoded
        let qualificationRequirementsContainer = try containerValues.decodeIfPresent([MTurkClientTypes.QualificationRequirement?].self, forKey: .qualificationRequirements)
        var qualificationRequirementsDecoded0:[MTurkClientTypes.QualificationRequirement]? = nil
        if let qualificationRequirementsContainer = qualificationRequirementsContainer {
            qualificationRequirementsDecoded0 = [MTurkClientTypes.QualificationRequirement]()
            for structure0 in qualificationRequirementsContainer {
                if let structure0 = structure0 {
                    qualificationRequirementsDecoded0?.append(structure0)
                }
            }
        }
        qualificationRequirements = qualificationRequirementsDecoded0
        let hITReviewStatusDecoded = try containerValues.decodeIfPresent(MTurkClientTypes.HITReviewStatus.self, forKey: .hITReviewStatus)
        hITReviewStatus = hITReviewStatusDecoded
        let numberOfAssignmentsPendingDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .numberOfAssignmentsPending)
        numberOfAssignmentsPending = numberOfAssignmentsPendingDecoded
        let numberOfAssignmentsAvailableDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .numberOfAssignmentsAvailable)
        numberOfAssignmentsAvailable = numberOfAssignmentsAvailableDecoded
        let numberOfAssignmentsCompletedDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .numberOfAssignmentsCompleted)
        numberOfAssignmentsCompleted = numberOfAssignmentsCompletedDecoded
    }
}
