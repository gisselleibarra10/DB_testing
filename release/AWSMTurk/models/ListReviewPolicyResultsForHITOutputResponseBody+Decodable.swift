// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListReviewPolicyResultsForHITOutputResponseBody: Swift.Equatable {
    let hITId: Swift.String?
    let assignmentReviewPolicy: MTurkClientTypes.ReviewPolicy?
    let hITReviewPolicy: MTurkClientTypes.ReviewPolicy?
    let assignmentReviewReport: MTurkClientTypes.ReviewReport?
    let hITReviewReport: MTurkClientTypes.ReviewReport?
    let nextToken: Swift.String?
}

extension ListReviewPolicyResultsForHITOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case assignmentReviewPolicy = "AssignmentReviewPolicy"
        case assignmentReviewReport = "AssignmentReviewReport"
        case hITId = "HITId"
        case hITReviewPolicy = "HITReviewPolicy"
        case hITReviewReport = "HITReviewReport"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let hITIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .hITId)
        hITId = hITIdDecoded
        let assignmentReviewPolicyDecoded = try containerValues.decodeIfPresent(MTurkClientTypes.ReviewPolicy.self, forKey: .assignmentReviewPolicy)
        assignmentReviewPolicy = assignmentReviewPolicyDecoded
        let hITReviewPolicyDecoded = try containerValues.decodeIfPresent(MTurkClientTypes.ReviewPolicy.self, forKey: .hITReviewPolicy)
        hITReviewPolicy = hITReviewPolicyDecoded
        let assignmentReviewReportDecoded = try containerValues.decodeIfPresent(MTurkClientTypes.ReviewReport.self, forKey: .assignmentReviewReport)
        assignmentReviewReport = assignmentReviewReportDecoded
        let hITReviewReportDecoded = try containerValues.decodeIfPresent(MTurkClientTypes.ReviewReport.self, forKey: .hITReviewReport)
        hITReviewReport = hITReviewReportDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
