// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListQualificationRequestsOutputResponseBody: Swift.Equatable {
    let numResults: Swift.Int?
    let nextToken: Swift.String?
    let qualificationRequests: [MTurkClientTypes.QualificationRequest]?
}

extension ListQualificationRequestsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case numResults = "NumResults"
        case qualificationRequests = "QualificationRequests"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let numResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .numResults)
        numResults = numResultsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let qualificationRequestsContainer = try containerValues.decodeIfPresent([MTurkClientTypes.QualificationRequest?].self, forKey: .qualificationRequests)
        var qualificationRequestsDecoded0:[MTurkClientTypes.QualificationRequest]? = nil
        if let qualificationRequestsContainer = qualificationRequestsContainer {
            qualificationRequestsDecoded0 = [MTurkClientTypes.QualificationRequest]()
            for structure0 in qualificationRequestsContainer {
                if let structure0 = structure0 {
                    qualificationRequestsDecoded0?.append(structure0)
                }
            }
        }
        qualificationRequests = qualificationRequestsDecoded0
    }
}
