// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension MTurkClientTypes.NotificationSpecification: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case destination = "Destination"
        case eventTypes = "EventTypes"
        case transport = "Transport"
        case version = "Version"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let destination = self.destination {
            try encodeContainer.encode(destination, forKey: .destination)
        }
        if let eventTypes = eventTypes {
            var eventTypesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .eventTypes)
            for eventtypelist0 in eventTypes {
                try eventTypesContainer.encode(eventtypelist0.rawValue)
            }
        }
        if let transport = self.transport {
            try encodeContainer.encode(transport.rawValue, forKey: .transport)
        }
        if let version = self.version {
            try encodeContainer.encode(version, forKey: .version)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let destinationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .destination)
        destination = destinationDecoded
        let transportDecoded = try containerValues.decodeIfPresent(MTurkClientTypes.NotificationTransport.self, forKey: .transport)
        transport = transportDecoded
        let versionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .version)
        version = versionDecoded
        let eventTypesContainer = try containerValues.decodeIfPresent([MTurkClientTypes.EventType?].self, forKey: .eventTypes)
        var eventTypesDecoded0:[MTurkClientTypes.EventType]? = nil
        if let eventTypesContainer = eventTypesContainer {
            eventTypesDecoded0 = [MTurkClientTypes.EventType]()
            for string0 in eventTypesContainer {
                if let string0 = string0 {
                    eventTypesDecoded0?.append(string0)
                }
            }
        }
        eventTypes = eventTypesDecoded0
    }
}
