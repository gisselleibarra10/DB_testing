// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ControlTowerClientTypes.ControlOperation: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case endTime
        case operationType
        case startTime
        case status
        case statusMessage
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let endTime = self.endTime {
            try encodeContainer.encode(endTime.iso8601WithoutFractionalSeconds(), forKey: .endTime)
        }
        if let operationType = self.operationType {
            try encodeContainer.encode(operationType.rawValue, forKey: .operationType)
        }
        if let startTime = self.startTime {
            try encodeContainer.encode(startTime.iso8601WithoutFractionalSeconds(), forKey: .startTime)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let statusMessage = self.statusMessage {
            try encodeContainer.encode(statusMessage, forKey: .statusMessage)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let operationTypeDecoded = try containerValues.decodeIfPresent(ControlTowerClientTypes.ControlOperationType.self, forKey: .operationType)
        operationType = operationTypeDecoded
        let startTimeDateString = try containerValues.decodeIfPresent(Swift.String.self, forKey: .startTime)
        var startTimeDecoded: ClientRuntime.Date? = nil
        if let startTimeDateString = startTimeDateString {
            let startTimeFormatter = ClientRuntime.DateFormatter.iso8601DateFormatterWithoutFractionalSeconds
            startTimeDecoded = startTimeFormatter.date(from: startTimeDateString)
        }
        startTime = startTimeDecoded
        let endTimeDateString = try containerValues.decodeIfPresent(Swift.String.self, forKey: .endTime)
        var endTimeDecoded: ClientRuntime.Date? = nil
        if let endTimeDateString = endTimeDateString {
            let endTimeFormatter = ClientRuntime.DateFormatter.iso8601DateFormatterWithoutFractionalSeconds
            endTimeDecoded = endTimeFormatter.date(from: endTimeDateString)
        }
        endTime = endTimeDecoded
        let statusDecoded = try containerValues.decodeIfPresent(ControlTowerClientTypes.ControlOperationStatus.self, forKey: .status)
        status = statusDecoded
        let statusMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .statusMessage)
        statusMessage = statusMessageDecoded
    }
}
