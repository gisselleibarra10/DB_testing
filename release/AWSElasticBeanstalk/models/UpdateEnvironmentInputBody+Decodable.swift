// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct UpdateEnvironmentInputBody: Swift.Equatable {
    let applicationName: Swift.String?
    let environmentId: Swift.String?
    let environmentName: Swift.String?
    let groupName: Swift.String?
    let description: Swift.String?
    let tier: ElasticBeanstalkClientTypes.EnvironmentTier?
    let versionLabel: Swift.String?
    let templateName: Swift.String?
    let solutionStackName: Swift.String?
    let platformArn: Swift.String?
    let optionSettings: [ElasticBeanstalkClientTypes.ConfigurationOptionSetting]?
    let optionsToRemove: [ElasticBeanstalkClientTypes.OptionSpecification]?
}

extension UpdateEnvironmentInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applicationName = "ApplicationName"
        case description = "Description"
        case environmentId = "EnvironmentId"
        case environmentName = "EnvironmentName"
        case groupName = "GroupName"
        case optionSettings = "OptionSettings"
        case optionsToRemove = "OptionsToRemove"
        case platformArn = "PlatformArn"
        case solutionStackName = "SolutionStackName"
        case templateName = "TemplateName"
        case tier = "Tier"
        case versionLabel = "VersionLabel"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let applicationNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .applicationName)
        applicationName = applicationNameDecoded
        let environmentIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .environmentId)
        environmentId = environmentIdDecoded
        let environmentNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .environmentName)
        environmentName = environmentNameDecoded
        let groupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .groupName)
        groupName = groupNameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let tierDecoded = try containerValues.decodeIfPresent(ElasticBeanstalkClientTypes.EnvironmentTier.self, forKey: .tier)
        tier = tierDecoded
        let versionLabelDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .versionLabel)
        versionLabel = versionLabelDecoded
        let templateNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateName)
        templateName = templateNameDecoded
        let solutionStackNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .solutionStackName)
        solutionStackName = solutionStackNameDecoded
        let platformArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .platformArn)
        platformArn = platformArnDecoded
        if containerValues.contains(.optionSettings) {
            struct KeyVal0{struct member{}}
            let optionSettingsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .optionSettings)
            if let optionSettingsWrappedContainer = optionSettingsWrappedContainer {
                let optionSettingsContainer = try optionSettingsWrappedContainer.decodeIfPresent([ElasticBeanstalkClientTypes.ConfigurationOptionSetting].self, forKey: .member)
                var optionSettingsBuffer:[ElasticBeanstalkClientTypes.ConfigurationOptionSetting]? = nil
                if let optionSettingsContainer = optionSettingsContainer {
                    optionSettingsBuffer = [ElasticBeanstalkClientTypes.ConfigurationOptionSetting]()
                    for structureContainer0 in optionSettingsContainer {
                        optionSettingsBuffer?.append(structureContainer0)
                    }
                }
                optionSettings = optionSettingsBuffer
            } else {
                optionSettings = []
            }
        } else {
            optionSettings = nil
        }
        if containerValues.contains(.optionsToRemove) {
            struct KeyVal0{struct member{}}
            let optionsToRemoveWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .optionsToRemove)
            if let optionsToRemoveWrappedContainer = optionsToRemoveWrappedContainer {
                let optionsToRemoveContainer = try optionsToRemoveWrappedContainer.decodeIfPresent([ElasticBeanstalkClientTypes.OptionSpecification].self, forKey: .member)
                var optionsToRemoveBuffer:[ElasticBeanstalkClientTypes.OptionSpecification]? = nil
                if let optionsToRemoveContainer = optionsToRemoveContainer {
                    optionsToRemoveBuffer = [ElasticBeanstalkClientTypes.OptionSpecification]()
                    for structureContainer0 in optionsToRemoveContainer {
                        optionsToRemoveBuffer?.append(structureContainer0)
                    }
                }
                optionsToRemove = optionsToRemoveBuffer
            } else {
                optionsToRemove = []
            }
        } else {
            optionsToRemove = nil
        }
    }
}
