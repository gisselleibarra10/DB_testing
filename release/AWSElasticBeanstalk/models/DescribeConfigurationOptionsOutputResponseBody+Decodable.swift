// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeConfigurationOptionsOutputResponseBody: Swift.Equatable {
    let solutionStackName: Swift.String?
    let platformArn: Swift.String?
    let options: [ElasticBeanstalkClientTypes.ConfigurationOptionDescription]?
}

extension DescribeConfigurationOptionsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case options = "Options"
        case platformArn = "PlatformArn"
        case solutionStackName = "SolutionStackName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeConfigurationOptionsResult"))
        let solutionStackNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .solutionStackName)
        solutionStackName = solutionStackNameDecoded
        let platformArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .platformArn)
        platformArn = platformArnDecoded
        if containerValues.contains(.options) {
            struct KeyVal0{struct member{}}
            let optionsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .options)
            if let optionsWrappedContainer = optionsWrappedContainer {
                let optionsContainer = try optionsWrappedContainer.decodeIfPresent([ElasticBeanstalkClientTypes.ConfigurationOptionDescription].self, forKey: .member)
                var optionsBuffer:[ElasticBeanstalkClientTypes.ConfigurationOptionDescription]? = nil
                if let optionsContainer = optionsContainer {
                    optionsBuffer = [ElasticBeanstalkClientTypes.ConfigurationOptionDescription]()
                    for structureContainer0 in optionsContainer {
                        optionsBuffer?.append(structureContainer0)
                    }
                }
                options = optionsBuffer
            } else {
                options = []
            }
        } else {
            options = nil
        }
    }
}
