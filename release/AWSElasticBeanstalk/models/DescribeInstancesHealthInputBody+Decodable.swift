// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeInstancesHealthInputBody: Swift.Equatable {
    let environmentName: Swift.String?
    let environmentId: Swift.String?
    let attributeNames: [ElasticBeanstalkClientTypes.InstancesHealthAttribute]?
    let nextToken: Swift.String?
}

extension DescribeInstancesHealthInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attributeNames = "AttributeNames"
        case environmentId = "EnvironmentId"
        case environmentName = "EnvironmentName"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let environmentNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .environmentName)
        environmentName = environmentNameDecoded
        let environmentIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .environmentId)
        environmentId = environmentIdDecoded
        if containerValues.contains(.attributeNames) {
            struct KeyVal0{struct member{}}
            let attributeNamesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .attributeNames)
            if let attributeNamesWrappedContainer = attributeNamesWrappedContainer {
                let attributeNamesContainer = try attributeNamesWrappedContainer.decodeIfPresent([ElasticBeanstalkClientTypes.InstancesHealthAttribute].self, forKey: .member)
                var attributeNamesBuffer:[ElasticBeanstalkClientTypes.InstancesHealthAttribute]? = nil
                if let attributeNamesContainer = attributeNamesContainer {
                    attributeNamesBuffer = [ElasticBeanstalkClientTypes.InstancesHealthAttribute]()
                    for stringContainer0 in attributeNamesContainer {
                        attributeNamesBuffer?.append(stringContainer0)
                    }
                }
                attributeNames = attributeNamesBuffer
            } else {
                attributeNames = []
            }
        } else {
            attributeNames = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
