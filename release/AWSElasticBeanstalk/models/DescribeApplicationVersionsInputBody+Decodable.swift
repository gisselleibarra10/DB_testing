// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeApplicationVersionsInputBody: Swift.Equatable {
    let applicationName: Swift.String?
    let versionLabels: [Swift.String]?
    let maxRecords: Swift.Int?
    let nextToken: Swift.String?
}

extension DescribeApplicationVersionsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applicationName = "ApplicationName"
        case maxRecords = "MaxRecords"
        case nextToken = "NextToken"
        case versionLabels = "VersionLabels"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let applicationNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .applicationName)
        applicationName = applicationNameDecoded
        if containerValues.contains(.versionLabels) {
            struct KeyVal0{struct member{}}
            let versionLabelsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .versionLabels)
            if let versionLabelsWrappedContainer = versionLabelsWrappedContainer {
                let versionLabelsContainer = try versionLabelsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var versionLabelsBuffer:[Swift.String]? = nil
                if let versionLabelsContainer = versionLabelsContainer {
                    versionLabelsBuffer = [Swift.String]()
                    for stringContainer0 in versionLabelsContainer {
                        versionLabelsBuffer?.append(stringContainer0)
                    }
                }
                versionLabels = versionLabelsBuffer
            } else {
                versionLabels = []
            }
        } else {
            versionLabels = nil
        }
        let maxRecordsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxRecords)
        maxRecords = maxRecordsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
