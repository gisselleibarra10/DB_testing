// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct UpdateTagsForResourceInputBody: Swift.Equatable {
    let resourceArn: Swift.String?
    let tagsToAdd: [ElasticBeanstalkClientTypes.Tag]?
    let tagsToRemove: [Swift.String]?
}

extension UpdateTagsForResourceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn = "ResourceArn"
        case tagsToAdd = "TagsToAdd"
        case tagsToRemove = "TagsToRemove"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceArn)
        resourceArn = resourceArnDecoded
        if containerValues.contains(.tagsToAdd) {
            struct KeyVal0{struct member{}}
            let tagsToAddWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .tagsToAdd)
            if let tagsToAddWrappedContainer = tagsToAddWrappedContainer {
                let tagsToAddContainer = try tagsToAddWrappedContainer.decodeIfPresent([ElasticBeanstalkClientTypes.Tag].self, forKey: .member)
                var tagsToAddBuffer:[ElasticBeanstalkClientTypes.Tag]? = nil
                if let tagsToAddContainer = tagsToAddContainer {
                    tagsToAddBuffer = [ElasticBeanstalkClientTypes.Tag]()
                    for structureContainer0 in tagsToAddContainer {
                        tagsToAddBuffer?.append(structureContainer0)
                    }
                }
                tagsToAdd = tagsToAddBuffer
            } else {
                tagsToAdd = []
            }
        } else {
            tagsToAdd = nil
        }
        if containerValues.contains(.tagsToRemove) {
            struct KeyVal0{struct member{}}
            let tagsToRemoveWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .tagsToRemove)
            if let tagsToRemoveWrappedContainer = tagsToRemoveWrappedContainer {
                let tagsToRemoveContainer = try tagsToRemoveWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var tagsToRemoveBuffer:[Swift.String]? = nil
                if let tagsToRemoveContainer = tagsToRemoveContainer {
                    tagsToRemoveBuffer = [Swift.String]()
                    for stringContainer0 in tagsToRemoveContainer {
                        tagsToRemoveBuffer?.append(stringContainer0)
                    }
                }
                tagsToRemove = tagsToRemoveBuffer
            } else {
                tagsToRemove = []
            }
        } else {
            tagsToRemove = nil
        }
    }
}
