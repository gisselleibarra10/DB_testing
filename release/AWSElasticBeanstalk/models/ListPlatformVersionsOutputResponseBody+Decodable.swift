// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListPlatformVersionsOutputResponseBody: Swift.Equatable {
    let platformSummaryList: [ElasticBeanstalkClientTypes.PlatformSummary]?
    let nextToken: Swift.String?
}

extension ListPlatformVersionsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case platformSummaryList = "PlatformSummaryList"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("ListPlatformVersionsResult"))
        if containerValues.contains(.platformSummaryList) {
            struct KeyVal0{struct member{}}
            let platformSummaryListWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .platformSummaryList)
            if let platformSummaryListWrappedContainer = platformSummaryListWrappedContainer {
                let platformSummaryListContainer = try platformSummaryListWrappedContainer.decodeIfPresent([ElasticBeanstalkClientTypes.PlatformSummary].self, forKey: .member)
                var platformSummaryListBuffer:[ElasticBeanstalkClientTypes.PlatformSummary]? = nil
                if let platformSummaryListContainer = platformSummaryListContainer {
                    platformSummaryListBuffer = [ElasticBeanstalkClientTypes.PlatformSummary]()
                    for structureContainer0 in platformSummaryListContainer {
                        platformSummaryListBuffer?.append(structureContainer0)
                    }
                }
                platformSummaryList = platformSummaryListBuffer
            } else {
                platformSummaryList = []
            }
        } else {
            platformSummaryList = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
