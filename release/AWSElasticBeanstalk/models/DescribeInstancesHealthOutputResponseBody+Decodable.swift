// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeInstancesHealthOutputResponseBody: Swift.Equatable {
    let instanceHealthList: [ElasticBeanstalkClientTypes.SingleInstanceHealth]?
    let refreshedAt: ClientRuntime.Date?
    let nextToken: Swift.String?
}

extension DescribeInstancesHealthOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case instanceHealthList = "InstanceHealthList"
        case nextToken = "NextToken"
        case refreshedAt = "RefreshedAt"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeInstancesHealthResult"))
        if containerValues.contains(.instanceHealthList) {
            struct KeyVal0{struct member{}}
            let instanceHealthListWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .instanceHealthList)
            if let instanceHealthListWrappedContainer = instanceHealthListWrappedContainer {
                let instanceHealthListContainer = try instanceHealthListWrappedContainer.decodeIfPresent([ElasticBeanstalkClientTypes.SingleInstanceHealth].self, forKey: .member)
                var instanceHealthListBuffer:[ElasticBeanstalkClientTypes.SingleInstanceHealth]? = nil
                if let instanceHealthListContainer = instanceHealthListContainer {
                    instanceHealthListBuffer = [ElasticBeanstalkClientTypes.SingleInstanceHealth]()
                    for structureContainer0 in instanceHealthListContainer {
                        instanceHealthListBuffer?.append(structureContainer0)
                    }
                }
                instanceHealthList = instanceHealthListBuffer
            } else {
                instanceHealthList = []
            }
        } else {
            instanceHealthList = nil
        }
        let refreshedAtDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .refreshedAt)
        var refreshedAtBuffer:ClientRuntime.Date? = nil
        if let refreshedAtDecoded = refreshedAtDecoded {
            refreshedAtBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(refreshedAtDecoded, format: .dateTime)
        }
        refreshedAt = refreshedAtBuffer
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
