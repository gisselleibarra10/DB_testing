// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeEnvironmentHealthOutputResponseBody: Swift.Equatable {
    let environmentName: Swift.String?
    let healthStatus: Swift.String?
    let status: ElasticBeanstalkClientTypes.EnvironmentHealth?
    let color: Swift.String?
    let causes: [Swift.String]?
    let applicationMetrics: ElasticBeanstalkClientTypes.ApplicationMetrics?
    let instancesHealth: ElasticBeanstalkClientTypes.InstanceHealthSummary?
    let refreshedAt: ClientRuntime.Date?
}

extension DescribeEnvironmentHealthOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applicationMetrics = "ApplicationMetrics"
        case causes = "Causes"
        case color = "Color"
        case environmentName = "EnvironmentName"
        case healthStatus = "HealthStatus"
        case instancesHealth = "InstancesHealth"
        case refreshedAt = "RefreshedAt"
        case status = "Status"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeEnvironmentHealthResult"))
        let environmentNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .environmentName)
        environmentName = environmentNameDecoded
        let healthStatusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .healthStatus)
        healthStatus = healthStatusDecoded
        let statusDecoded = try containerValues.decodeIfPresent(ElasticBeanstalkClientTypes.EnvironmentHealth.self, forKey: .status)
        status = statusDecoded
        let colorDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .color)
        color = colorDecoded
        if containerValues.contains(.causes) {
            struct KeyVal0{struct member{}}
            let causesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .causes)
            if let causesWrappedContainer = causesWrappedContainer {
                let causesContainer = try causesWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var causesBuffer:[Swift.String]? = nil
                if let causesContainer = causesContainer {
                    causesBuffer = [Swift.String]()
                    for stringContainer0 in causesContainer {
                        causesBuffer?.append(stringContainer0)
                    }
                }
                causes = causesBuffer
            } else {
                causes = []
            }
        } else {
            causes = nil
        }
        let applicationMetricsDecoded = try containerValues.decodeIfPresent(ElasticBeanstalkClientTypes.ApplicationMetrics.self, forKey: .applicationMetrics)
        applicationMetrics = applicationMetricsDecoded
        let instancesHealthDecoded = try containerValues.decodeIfPresent(ElasticBeanstalkClientTypes.InstanceHealthSummary.self, forKey: .instancesHealth)
        instancesHealth = instancesHealthDecoded
        let refreshedAtDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .refreshedAt)
        var refreshedAtBuffer:ClientRuntime.Date? = nil
        if let refreshedAtDecoded = refreshedAtDecoded {
            refreshedAtBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(refreshedAtDecoded, format: .dateTime)
        }
        refreshedAt = refreshedAtBuffer
    }
}
