// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeConfigurationOptionsInputBody: Swift.Equatable {
    let applicationName: Swift.String?
    let templateName: Swift.String?
    let environmentName: Swift.String?
    let solutionStackName: Swift.String?
    let platformArn: Swift.String?
    let options: [ElasticBeanstalkClientTypes.OptionSpecification]?
}

extension DescribeConfigurationOptionsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applicationName = "ApplicationName"
        case environmentName = "EnvironmentName"
        case options = "Options"
        case platformArn = "PlatformArn"
        case solutionStackName = "SolutionStackName"
        case templateName = "TemplateName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let applicationNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .applicationName)
        applicationName = applicationNameDecoded
        let templateNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateName)
        templateName = templateNameDecoded
        let environmentNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .environmentName)
        environmentName = environmentNameDecoded
        let solutionStackNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .solutionStackName)
        solutionStackName = solutionStackNameDecoded
        let platformArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .platformArn)
        platformArn = platformArnDecoded
        if containerValues.contains(.options) {
            struct KeyVal0{struct member{}}
            let optionsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .options)
            if let optionsWrappedContainer = optionsWrappedContainer {
                let optionsContainer = try optionsWrappedContainer.decodeIfPresent([ElasticBeanstalkClientTypes.OptionSpecification].self, forKey: .member)
                var optionsBuffer:[ElasticBeanstalkClientTypes.OptionSpecification]? = nil
                if let optionsContainer = optionsContainer {
                    optionsBuffer = [ElasticBeanstalkClientTypes.OptionSpecification]()
                    for structureContainer0 in optionsContainer {
                        optionsBuffer?.append(structureContainer0)
                    }
                }
                options = optionsBuffer
            } else {
                options = []
            }
        } else {
            options = nil
        }
    }
}
