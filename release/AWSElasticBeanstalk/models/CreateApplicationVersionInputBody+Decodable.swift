// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateApplicationVersionInputBody: Swift.Equatable {
    let applicationName: Swift.String?
    let versionLabel: Swift.String?
    let description: Swift.String?
    let sourceBuildInformation: ElasticBeanstalkClientTypes.SourceBuildInformation?
    let sourceBundle: ElasticBeanstalkClientTypes.S3Location?
    let buildConfiguration: ElasticBeanstalkClientTypes.BuildConfiguration?
    let autoCreateApplication: Swift.Bool?
    let process: Swift.Bool?
    let tags: [ElasticBeanstalkClientTypes.Tag]?
}

extension CreateApplicationVersionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applicationName = "ApplicationName"
        case autoCreateApplication = "AutoCreateApplication"
        case buildConfiguration = "BuildConfiguration"
        case description = "Description"
        case process = "Process"
        case sourceBuildInformation = "SourceBuildInformation"
        case sourceBundle = "SourceBundle"
        case tags = "Tags"
        case versionLabel = "VersionLabel"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let applicationNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .applicationName)
        applicationName = applicationNameDecoded
        let versionLabelDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .versionLabel)
        versionLabel = versionLabelDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let sourceBuildInformationDecoded = try containerValues.decodeIfPresent(ElasticBeanstalkClientTypes.SourceBuildInformation.self, forKey: .sourceBuildInformation)
        sourceBuildInformation = sourceBuildInformationDecoded
        let sourceBundleDecoded = try containerValues.decodeIfPresent(ElasticBeanstalkClientTypes.S3Location.self, forKey: .sourceBundle)
        sourceBundle = sourceBundleDecoded
        let buildConfigurationDecoded = try containerValues.decodeIfPresent(ElasticBeanstalkClientTypes.BuildConfiguration.self, forKey: .buildConfiguration)
        buildConfiguration = buildConfigurationDecoded
        let autoCreateApplicationDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .autoCreateApplication)
        autoCreateApplication = autoCreateApplicationDecoded
        let processDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .process)
        process = processDecoded
        if containerValues.contains(.tags) {
            struct KeyVal0{struct member{}}
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .tags)
            if let tagsWrappedContainer = tagsWrappedContainer {
                let tagsContainer = try tagsWrappedContainer.decodeIfPresent([ElasticBeanstalkClientTypes.Tag].self, forKey: .member)
                var tagsBuffer:[ElasticBeanstalkClientTypes.Tag]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [ElasticBeanstalkClientTypes.Tag]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
    }
}
