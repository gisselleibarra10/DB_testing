// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// Request to update an environment.
public struct UpdateEnvironmentInput: Swift.Equatable {
    /// The name of the application with which the environment is associated.
    public var applicationName: Swift.String?
    /// If this parameter is specified, AWS Elastic Beanstalk updates the description of this environment.
    public var description: Swift.String?
    /// The ID of the environment to update. If no environment with this ID exists, AWS Elastic Beanstalk returns an InvalidParameterValue error. Condition: You must specify either this or an EnvironmentName, or both. If you do not specify either, AWS Elastic Beanstalk returns MissingRequiredParameter error.
    public var environmentId: Swift.String?
    /// The name of the environment to update. If no environment with this name exists, AWS Elastic Beanstalk returns an InvalidParameterValue error. Condition: You must specify either this or an EnvironmentId, or both. If you do not specify either, AWS Elastic Beanstalk returns MissingRequiredParameter error.
    public var environmentName: Swift.String?
    /// The name of the group to which the target environment belongs. Specify a group name only if the environment's name is specified in an environment manifest and not with the environment name or environment ID parameters. See [Environment Manifest (env.yaml)](https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/environment-cfg-manifest.html) for details.
    public var groupName: Swift.String?
    /// If specified, AWS Elastic Beanstalk updates the configuration set associated with the running environment and sets the specified configuration options to the requested value.
    public var optionSettings: [ElasticBeanstalkClientTypes.ConfigurationOptionSetting]?
    /// A list of custom user-defined configuration options to remove from the configuration set for this environment.
    public var optionsToRemove: [ElasticBeanstalkClientTypes.OptionSpecification]?
    /// The ARN of the platform, if used.
    public var platformArn: Swift.String?
    /// This specifies the platform version that the environment will run after the environment is updated.
    public var solutionStackName: Swift.String?
    /// If this parameter is specified, AWS Elastic Beanstalk deploys this configuration template to the environment. If no such configuration template is found, AWS Elastic Beanstalk returns an InvalidParameterValue error.
    public var templateName: Swift.String?
    /// This specifies the tier to use to update the environment. Condition: At this time, if you change the tier version, name, or type, AWS Elastic Beanstalk returns InvalidParameterValue error.
    public var tier: ElasticBeanstalkClientTypes.EnvironmentTier?
    /// If this parameter is specified, AWS Elastic Beanstalk deploys the named application version to the environment. If no such application version is found, returns an InvalidParameterValue error.
    public var versionLabel: Swift.String?

    public init (
        applicationName: Swift.String? = nil,
        description: Swift.String? = nil,
        environmentId: Swift.String? = nil,
        environmentName: Swift.String? = nil,
        groupName: Swift.String? = nil,
        optionSettings: [ElasticBeanstalkClientTypes.ConfigurationOptionSetting]? = nil,
        optionsToRemove: [ElasticBeanstalkClientTypes.OptionSpecification]? = nil,
        platformArn: Swift.String? = nil,
        solutionStackName: Swift.String? = nil,
        templateName: Swift.String? = nil,
        tier: ElasticBeanstalkClientTypes.EnvironmentTier? = nil,
        versionLabel: Swift.String? = nil
    )
    {
        self.applicationName = applicationName
        self.description = description
        self.environmentId = environmentId
        self.environmentName = environmentName
        self.groupName = groupName
        self.optionSettings = optionSettings
        self.optionsToRemove = optionsToRemove
        self.platformArn = platformArn
        self.solutionStackName = solutionStackName
        self.templateName = templateName
        self.tier = tier
        self.versionLabel = versionLabel
    }
}
