// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// Request to create a configuration template.
public struct CreateConfigurationTemplateInput: Swift.Equatable {
    /// The name of the Elastic Beanstalk application to associate with this configuration template.
    /// This member is required.
    public var applicationName: Swift.String?
    /// An optional description for this configuration.
    public var description: Swift.String?
    /// The ID of an environment whose settings you want to use to create the configuration template. You must specify EnvironmentId if you don't specify PlatformArn, SolutionStackName, or SourceConfiguration.
    public var environmentId: Swift.String?
    /// Option values for the Elastic Beanstalk configuration, such as the instance type. If specified, these values override the values obtained from the solution stack or the source configuration template. For a complete list of Elastic Beanstalk configuration options, see [Option Values](https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/command-options.html) in the AWS Elastic Beanstalk Developer Guide.
    public var optionSettings: [ElasticBeanstalkClientTypes.ConfigurationOptionSetting]?
    /// The Amazon Resource Name (ARN) of the custom platform. For more information, see [ Custom Platforms](https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/custom-platforms.html) in the AWS Elastic Beanstalk Developer Guide. If you specify PlatformArn, then don't specify SolutionStackName.
    public var platformArn: Swift.String?
    /// The name of an Elastic Beanstalk solution stack (platform version) that this configuration uses. For example, 64bit Amazon Linux 2013.09 running Tomcat 7 Java 7. A solution stack specifies the operating system, runtime, and application server for a configuration template. It also determines the set of configuration options as well as the possible and default values. For more information, see [Supported Platforms](https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/concepts.platforms.html) in the AWS Elastic Beanstalk Developer Guide. You must specify SolutionStackName if you don't specify PlatformArn, EnvironmentId, or SourceConfiguration. Use the [ListAvailableSolutionStacks](https://docs.aws.amazon.com/elasticbeanstalk/latest/api/API_ListAvailableSolutionStacks.html) API to obtain a list of available solution stacks.
    public var solutionStackName: Swift.String?
    /// An Elastic Beanstalk configuration template to base this one on. If specified, Elastic Beanstalk uses the configuration values from the specified configuration template to create a new configuration. Values specified in OptionSettings override any values obtained from the SourceConfiguration. You must specify SourceConfiguration if you don't specify PlatformArn, EnvironmentId, or SolutionStackName. Constraint: If both solution stack name and source configuration are specified, the solution stack of the source configuration template must match the specified solution stack name.
    public var sourceConfiguration: ElasticBeanstalkClientTypes.SourceConfiguration?
    /// Specifies the tags applied to the configuration template.
    public var tags: [ElasticBeanstalkClientTypes.Tag]?
    /// The name of the configuration template. Constraint: This name must be unique per application.
    /// This member is required.
    public var templateName: Swift.String?

    public init (
        applicationName: Swift.String? = nil,
        description: Swift.String? = nil,
        environmentId: Swift.String? = nil,
        optionSettings: [ElasticBeanstalkClientTypes.ConfigurationOptionSetting]? = nil,
        platformArn: Swift.String? = nil,
        solutionStackName: Swift.String? = nil,
        sourceConfiguration: ElasticBeanstalkClientTypes.SourceConfiguration? = nil,
        tags: [ElasticBeanstalkClientTypes.Tag]? = nil,
        templateName: Swift.String? = nil
    )
    {
        self.applicationName = applicationName
        self.description = description
        self.environmentId = environmentId
        self.optionSettings = optionSettings
        self.platformArn = platformArn
        self.solutionStackName = solutionStackName
        self.sourceConfiguration = sourceConfiguration
        self.tags = tags
        self.templateName = templateName
    }
}
