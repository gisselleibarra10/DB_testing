// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension DescribeEnvironmentsInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let applicationName = applicationName {
            try container.encode(applicationName, forKey: ClientRuntime.Key("ApplicationName"))
        }
        if let environmentIds = environmentIds {
            var environmentIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("EnvironmentIds"))
            for (index0, environmentid0) in environmentIds.enumerated() {
                try environmentIdsContainer.encode(environmentid0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let environmentNames = environmentNames {
            var environmentNamesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("EnvironmentNames"))
            for (index0, environmentname0) in environmentNames.enumerated() {
                try environmentNamesContainer.encode(environmentname0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let includeDeleted = includeDeleted {
            try container.encode(includeDeleted, forKey: ClientRuntime.Key("IncludeDeleted"))
        }
        if let includedDeletedBackTo = includedDeletedBackTo {
            try container.encode(ClientRuntime.TimestampWrapper(includedDeletedBackTo, format: .dateTime), forKey: ClientRuntime.Key("includedDeletedBackTo"))
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: ClientRuntime.Key("MaxRecords"))
        }
        if let nextToken = nextToken {
            try container.encode(nextToken, forKey: ClientRuntime.Key("NextToken"))
        }
        if let versionLabel = versionLabel {
            try container.encode(versionLabel, forKey: ClientRuntime.Key("VersionLabel"))
        }
        try container.encode("DescribeEnvironments", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}
