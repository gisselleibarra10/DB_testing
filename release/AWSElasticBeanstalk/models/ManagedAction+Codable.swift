// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ElasticBeanstalkClientTypes.ManagedAction: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case actionDescription = "ActionDescription"
        case actionId = "ActionId"
        case actionType = "ActionType"
        case status = "Status"
        case windowStartTime = "WindowStartTime"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let actionDescription = actionDescription {
            try container.encode(actionDescription, forKey: ClientRuntime.Key("ActionDescription"))
        }
        if let actionId = actionId {
            try container.encode(actionId, forKey: ClientRuntime.Key("ActionId"))
        }
        if let actionType = actionType {
            try container.encode(actionType, forKey: ClientRuntime.Key("ActionType"))
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
        if let windowStartTime = windowStartTime {
            try container.encode(ClientRuntime.TimestampWrapper(windowStartTime, format: .dateTime), forKey: ClientRuntime.Key("windowStartTime"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let actionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .actionId)
        actionId = actionIdDecoded
        let actionDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .actionDescription)
        actionDescription = actionDescriptionDecoded
        let actionTypeDecoded = try containerValues.decodeIfPresent(ElasticBeanstalkClientTypes.ActionType.self, forKey: .actionType)
        actionType = actionTypeDecoded
        let statusDecoded = try containerValues.decodeIfPresent(ElasticBeanstalkClientTypes.ActionStatus.self, forKey: .status)
        status = statusDecoded
        let windowStartTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .windowStartTime)
        var windowStartTimeBuffer:ClientRuntime.Date? = nil
        if let windowStartTimeDecoded = windowStartTimeDecoded {
            windowStartTimeBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(windowStartTimeDecoded, format: .dateTime)
        }
        windowStartTime = windowStartTimeBuffer
    }
}
