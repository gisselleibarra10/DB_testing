// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeApplicationsInputBody: Swift.Equatable {
    let applicationNames: [Swift.String]?
}

extension DescribeApplicationsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applicationNames = "ApplicationNames"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.applicationNames) {
            struct KeyVal0{struct member{}}
            let applicationNamesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .applicationNames)
            if let applicationNamesWrappedContainer = applicationNamesWrappedContainer {
                let applicationNamesContainer = try applicationNamesWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var applicationNamesBuffer:[Swift.String]? = nil
                if let applicationNamesContainer = applicationNamesContainer {
                    applicationNamesBuffer = [Swift.String]()
                    for stringContainer0 in applicationNamesContainer {
                        applicationNamesBuffer?.append(stringContainer0)
                    }
                }
                applicationNames = applicationNamesBuffer
            } else {
                applicationNames = []
            }
        } else {
            applicationNames = nil
        }
    }
}
