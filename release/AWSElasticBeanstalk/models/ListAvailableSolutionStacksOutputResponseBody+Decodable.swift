// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListAvailableSolutionStacksOutputResponseBody: Swift.Equatable {
    let solutionStacks: [Swift.String]?
    let solutionStackDetails: [ElasticBeanstalkClientTypes.SolutionStackDescription]?
}

extension ListAvailableSolutionStacksOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case solutionStackDetails = "SolutionStackDetails"
        case solutionStacks = "SolutionStacks"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("ListAvailableSolutionStacksResult"))
        if containerValues.contains(.solutionStacks) {
            struct KeyVal0{struct member{}}
            let solutionStacksWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .solutionStacks)
            if let solutionStacksWrappedContainer = solutionStacksWrappedContainer {
                let solutionStacksContainer = try solutionStacksWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var solutionStacksBuffer:[Swift.String]? = nil
                if let solutionStacksContainer = solutionStacksContainer {
                    solutionStacksBuffer = [Swift.String]()
                    for stringContainer0 in solutionStacksContainer {
                        solutionStacksBuffer?.append(stringContainer0)
                    }
                }
                solutionStacks = solutionStacksBuffer
            } else {
                solutionStacks = []
            }
        } else {
            solutionStacks = nil
        }
        if containerValues.contains(.solutionStackDetails) {
            struct KeyVal0{struct member{}}
            let solutionStackDetailsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .solutionStackDetails)
            if let solutionStackDetailsWrappedContainer = solutionStackDetailsWrappedContainer {
                let solutionStackDetailsContainer = try solutionStackDetailsWrappedContainer.decodeIfPresent([ElasticBeanstalkClientTypes.SolutionStackDescription].self, forKey: .member)
                var solutionStackDetailsBuffer:[ElasticBeanstalkClientTypes.SolutionStackDescription]? = nil
                if let solutionStackDetailsContainer = solutionStackDetailsContainer {
                    solutionStackDetailsBuffer = [ElasticBeanstalkClientTypes.SolutionStackDescription]()
                    for structureContainer0 in solutionStackDetailsContainer {
                        solutionStackDetailsBuffer?.append(structureContainer0)
                    }
                }
                solutionStackDetails = solutionStackDetailsBuffer
            } else {
                solutionStackDetails = []
            }
        } else {
            solutionStackDetails = nil
        }
    }
}
