// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct RetrieveEnvironmentInfoOutputResponseBody: Swift.Equatable {
    let environmentInfo: [ElasticBeanstalkClientTypes.EnvironmentInfoDescription]?
}

extension RetrieveEnvironmentInfoOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case environmentInfo = "EnvironmentInfo"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("RetrieveEnvironmentInfoResult"))
        if containerValues.contains(.environmentInfo) {
            struct KeyVal0{struct member{}}
            let environmentInfoWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .environmentInfo)
            if let environmentInfoWrappedContainer = environmentInfoWrappedContainer {
                let environmentInfoContainer = try environmentInfoWrappedContainer.decodeIfPresent([ElasticBeanstalkClientTypes.EnvironmentInfoDescription].self, forKey: .member)
                var environmentInfoBuffer:[ElasticBeanstalkClientTypes.EnvironmentInfoDescription]? = nil
                if let environmentInfoContainer = environmentInfoContainer {
                    environmentInfoBuffer = [ElasticBeanstalkClientTypes.EnvironmentInfoDescription]()
                    for structureContainer0 in environmentInfoContainer {
                        environmentInfoBuffer?.append(structureContainer0)
                    }
                }
                environmentInfo = environmentInfoBuffer
            } else {
                environmentInfo = []
            }
        } else {
            environmentInfo = nil
        }
    }
}
