// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ElasticBeanstalkClientTypes.PlatformBranchSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case branchName = "BranchName"
        case branchOrder = "BranchOrder"
        case lifecycleState = "LifecycleState"
        case platformName = "PlatformName"
        case supportedTierList = "SupportedTierList"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let branchName = branchName {
            try container.encode(branchName, forKey: ClientRuntime.Key("BranchName"))
        }
        if branchOrder != 0 {
            try container.encode(branchOrder, forKey: ClientRuntime.Key("BranchOrder"))
        }
        if let lifecycleState = lifecycleState {
            try container.encode(lifecycleState, forKey: ClientRuntime.Key("LifecycleState"))
        }
        if let platformName = platformName {
            try container.encode(platformName, forKey: ClientRuntime.Key("PlatformName"))
        }
        if let supportedTierList = supportedTierList {
            var supportedTierListContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("SupportedTierList"))
            for (index0, supportedtier0) in supportedTierList.enumerated() {
                try supportedTierListContainer.encode(supportedtier0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let platformNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .platformName)
        platformName = platformNameDecoded
        let branchNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .branchName)
        branchName = branchNameDecoded
        let lifecycleStateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lifecycleState)
        lifecycleState = lifecycleStateDecoded
        let branchOrderDecoded = try containerValues.decode(Swift.Int.self, forKey: .branchOrder)
        branchOrder = branchOrderDecoded
        if containerValues.contains(.supportedTierList) {
            struct KeyVal0{struct member{}}
            let supportedTierListWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .supportedTierList)
            if let supportedTierListWrappedContainer = supportedTierListWrappedContainer {
                let supportedTierListContainer = try supportedTierListWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var supportedTierListBuffer:[Swift.String]? = nil
                if let supportedTierListContainer = supportedTierListContainer {
                    supportedTierListBuffer = [Swift.String]()
                    for stringContainer0 in supportedTierListContainer {
                        supportedTierListBuffer?.append(stringContainer0)
                    }
                }
                supportedTierList = supportedTierListBuffer
            } else {
                supportedTierList = []
            }
        } else {
            supportedTierList = nil
        }
    }
}
