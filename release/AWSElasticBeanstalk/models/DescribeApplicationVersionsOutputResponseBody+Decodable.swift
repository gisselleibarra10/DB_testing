// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeApplicationVersionsOutputResponseBody: Swift.Equatable {
    let applicationVersions: [ElasticBeanstalkClientTypes.ApplicationVersionDescription]?
    let nextToken: Swift.String?
}

extension DescribeApplicationVersionsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applicationVersions = "ApplicationVersions"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeApplicationVersionsResult"))
        if containerValues.contains(.applicationVersions) {
            struct KeyVal0{struct member{}}
            let applicationVersionsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .applicationVersions)
            if let applicationVersionsWrappedContainer = applicationVersionsWrappedContainer {
                let applicationVersionsContainer = try applicationVersionsWrappedContainer.decodeIfPresent([ElasticBeanstalkClientTypes.ApplicationVersionDescription].self, forKey: .member)
                var applicationVersionsBuffer:[ElasticBeanstalkClientTypes.ApplicationVersionDescription]? = nil
                if let applicationVersionsContainer = applicationVersionsContainer {
                    applicationVersionsBuffer = [ElasticBeanstalkClientTypes.ApplicationVersionDescription]()
                    for structureContainer0 in applicationVersionsContainer {
                        applicationVersionsBuffer?.append(structureContainer0)
                    }
                }
                applicationVersions = applicationVersionsBuffer
            } else {
                applicationVersions = []
            }
        } else {
            applicationVersions = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
