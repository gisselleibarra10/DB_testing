// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ElasticBeanstalkClientTypes.EventDescription: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applicationName = "ApplicationName"
        case environmentName = "EnvironmentName"
        case eventDate = "EventDate"
        case message = "Message"
        case platformArn = "PlatformArn"
        case requestId = "RequestId"
        case severity = "Severity"
        case templateName = "TemplateName"
        case versionLabel = "VersionLabel"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let applicationName = applicationName {
            try container.encode(applicationName, forKey: ClientRuntime.Key("ApplicationName"))
        }
        if let environmentName = environmentName {
            try container.encode(environmentName, forKey: ClientRuntime.Key("EnvironmentName"))
        }
        if let eventDate = eventDate {
            try container.encode(ClientRuntime.TimestampWrapper(eventDate, format: .dateTime), forKey: ClientRuntime.Key("eventDate"))
        }
        if let message = message {
            try container.encode(message, forKey: ClientRuntime.Key("Message"))
        }
        if let platformArn = platformArn {
            try container.encode(platformArn, forKey: ClientRuntime.Key("PlatformArn"))
        }
        if let requestId = requestId {
            try container.encode(requestId, forKey: ClientRuntime.Key("RequestId"))
        }
        if let severity = severity {
            try container.encode(severity, forKey: ClientRuntime.Key("Severity"))
        }
        if let templateName = templateName {
            try container.encode(templateName, forKey: ClientRuntime.Key("TemplateName"))
        }
        if let versionLabel = versionLabel {
            try container.encode(versionLabel, forKey: ClientRuntime.Key("VersionLabel"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let eventDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .eventDate)
        var eventDateBuffer:ClientRuntime.Date? = nil
        if let eventDateDecoded = eventDateDecoded {
            eventDateBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(eventDateDecoded, format: .dateTime)
        }
        eventDate = eventDateBuffer
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let applicationNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .applicationName)
        applicationName = applicationNameDecoded
        let versionLabelDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .versionLabel)
        versionLabel = versionLabelDecoded
        let templateNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateName)
        templateName = templateNameDecoded
        let environmentNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .environmentName)
        environmentName = environmentNameDecoded
        let platformArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .platformArn)
        platformArn = platformArnDecoded
        let requestIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .requestId)
        requestId = requestIdDecoded
        let severityDecoded = try containerValues.decodeIfPresent(ElasticBeanstalkClientTypes.EventSeverity.self, forKey: .severity)
        severity = severityDecoded
    }
}
