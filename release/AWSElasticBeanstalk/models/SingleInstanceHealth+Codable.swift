// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ElasticBeanstalkClientTypes.SingleInstanceHealth: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applicationMetrics = "ApplicationMetrics"
        case availabilityZone = "AvailabilityZone"
        case causes = "Causes"
        case color = "Color"
        case deployment = "Deployment"
        case healthStatus = "HealthStatus"
        case instanceId = "InstanceId"
        case instanceType = "InstanceType"
        case launchedAt = "LaunchedAt"
        case system = "System"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let applicationMetrics = applicationMetrics {
            try container.encode(applicationMetrics, forKey: ClientRuntime.Key("ApplicationMetrics"))
        }
        if let availabilityZone = availabilityZone {
            try container.encode(availabilityZone, forKey: ClientRuntime.Key("AvailabilityZone"))
        }
        if let causes = causes {
            var causesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Causes"))
            for (index0, cause0) in causes.enumerated() {
                try causesContainer.encode(cause0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let color = color {
            try container.encode(color, forKey: ClientRuntime.Key("Color"))
        }
        if let deployment = deployment {
            try container.encode(deployment, forKey: ClientRuntime.Key("Deployment"))
        }
        if let healthStatus = healthStatus {
            try container.encode(healthStatus, forKey: ClientRuntime.Key("HealthStatus"))
        }
        if let instanceId = instanceId {
            try container.encode(instanceId, forKey: ClientRuntime.Key("InstanceId"))
        }
        if let instanceType = instanceType {
            try container.encode(instanceType, forKey: ClientRuntime.Key("InstanceType"))
        }
        if let launchedAt = launchedAt {
            try container.encode(ClientRuntime.TimestampWrapper(launchedAt, format: .dateTime), forKey: ClientRuntime.Key("launchedAt"))
        }
        if let system = system {
            try container.encode(system, forKey: ClientRuntime.Key("System"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instanceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceId)
        instanceId = instanceIdDecoded
        let healthStatusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .healthStatus)
        healthStatus = healthStatusDecoded
        let colorDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .color)
        color = colorDecoded
        if containerValues.contains(.causes) {
            struct KeyVal0{struct member{}}
            let causesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .causes)
            if let causesWrappedContainer = causesWrappedContainer {
                let causesContainer = try causesWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var causesBuffer:[Swift.String]? = nil
                if let causesContainer = causesContainer {
                    causesBuffer = [Swift.String]()
                    for stringContainer0 in causesContainer {
                        causesBuffer?.append(stringContainer0)
                    }
                }
                causes = causesBuffer
            } else {
                causes = []
            }
        } else {
            causes = nil
        }
        let launchedAtDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .launchedAt)
        var launchedAtBuffer:ClientRuntime.Date? = nil
        if let launchedAtDecoded = launchedAtDecoded {
            launchedAtBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(launchedAtDecoded, format: .dateTime)
        }
        launchedAt = launchedAtBuffer
        let applicationMetricsDecoded = try containerValues.decodeIfPresent(ElasticBeanstalkClientTypes.ApplicationMetrics.self, forKey: .applicationMetrics)
        applicationMetrics = applicationMetricsDecoded
        let systemDecoded = try containerValues.decodeIfPresent(ElasticBeanstalkClientTypes.SystemStatus.self, forKey: .system)
        system = systemDecoded
        let deploymentDecoded = try containerValues.decodeIfPresent(ElasticBeanstalkClientTypes.Deployment.self, forKey: .deployment)
        deployment = deploymentDecoded
        let availabilityZoneDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .availabilityZone)
        availabilityZone = availabilityZoneDecoded
        let instanceTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceType)
        instanceType = instanceTypeDecoded
    }
}
