// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ComposeEnvironmentsOutputResponseBody: Swift.Equatable {
    let environments: [ElasticBeanstalkClientTypes.EnvironmentDescription]?
    let nextToken: Swift.String?
}

extension ComposeEnvironmentsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case environments = "Environments"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("ComposeEnvironmentsResult"))
        if containerValues.contains(.environments) {
            struct KeyVal0{struct member{}}
            let environmentsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .environments)
            if let environmentsWrappedContainer = environmentsWrappedContainer {
                let environmentsContainer = try environmentsWrappedContainer.decodeIfPresent([ElasticBeanstalkClientTypes.EnvironmentDescription].self, forKey: .member)
                var environmentsBuffer:[ElasticBeanstalkClientTypes.EnvironmentDescription]? = nil
                if let environmentsContainer = environmentsContainer {
                    environmentsBuffer = [ElasticBeanstalkClientTypes.EnvironmentDescription]()
                    for structureContainer0 in environmentsContainer {
                        environmentsBuffer?.append(structureContainer0)
                    }
                }
                environments = environmentsBuffer
            } else {
                environments = []
            }
        } else {
            environments = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
