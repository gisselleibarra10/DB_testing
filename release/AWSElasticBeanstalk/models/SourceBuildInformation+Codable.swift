// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ElasticBeanstalkClientTypes.SourceBuildInformation: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case sourceLocation = "SourceLocation"
        case sourceRepository = "SourceRepository"
        case sourceType = "SourceType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let sourceLocation = sourceLocation {
            try container.encode(sourceLocation, forKey: ClientRuntime.Key("SourceLocation"))
        }
        if let sourceRepository = sourceRepository {
            try container.encode(sourceRepository, forKey: ClientRuntime.Key("SourceRepository"))
        }
        if let sourceType = sourceType {
            try container.encode(sourceType, forKey: ClientRuntime.Key("SourceType"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sourceTypeDecoded = try containerValues.decodeIfPresent(ElasticBeanstalkClientTypes.SourceType.self, forKey: .sourceType)
        sourceType = sourceTypeDecoded
        let sourceRepositoryDecoded = try containerValues.decodeIfPresent(ElasticBeanstalkClientTypes.SourceRepository.self, forKey: .sourceRepository)
        sourceRepository = sourceRepositoryDecoded
        let sourceLocationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceLocation)
        sourceLocation = sourceLocationDecoded
    }
}
