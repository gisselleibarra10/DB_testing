// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeEnvironmentsInputBody: Swift.Equatable {
    let applicationName: Swift.String?
    let versionLabel: Swift.String?
    let environmentIds: [Swift.String]?
    let environmentNames: [Swift.String]?
    let includeDeleted: Swift.Bool?
    let includedDeletedBackTo: ClientRuntime.Date?
    let maxRecords: Swift.Int?
    let nextToken: Swift.String?
}

extension DescribeEnvironmentsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applicationName = "ApplicationName"
        case environmentIds = "EnvironmentIds"
        case environmentNames = "EnvironmentNames"
        case includeDeleted = "IncludeDeleted"
        case includedDeletedBackTo = "IncludedDeletedBackTo"
        case maxRecords = "MaxRecords"
        case nextToken = "NextToken"
        case versionLabel = "VersionLabel"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let applicationNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .applicationName)
        applicationName = applicationNameDecoded
        let versionLabelDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .versionLabel)
        versionLabel = versionLabelDecoded
        if containerValues.contains(.environmentIds) {
            struct KeyVal0{struct member{}}
            let environmentIdsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .environmentIds)
            if let environmentIdsWrappedContainer = environmentIdsWrappedContainer {
                let environmentIdsContainer = try environmentIdsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var environmentIdsBuffer:[Swift.String]? = nil
                if let environmentIdsContainer = environmentIdsContainer {
                    environmentIdsBuffer = [Swift.String]()
                    for stringContainer0 in environmentIdsContainer {
                        environmentIdsBuffer?.append(stringContainer0)
                    }
                }
                environmentIds = environmentIdsBuffer
            } else {
                environmentIds = []
            }
        } else {
            environmentIds = nil
        }
        if containerValues.contains(.environmentNames) {
            struct KeyVal0{struct member{}}
            let environmentNamesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .environmentNames)
            if let environmentNamesWrappedContainer = environmentNamesWrappedContainer {
                let environmentNamesContainer = try environmentNamesWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var environmentNamesBuffer:[Swift.String]? = nil
                if let environmentNamesContainer = environmentNamesContainer {
                    environmentNamesBuffer = [Swift.String]()
                    for stringContainer0 in environmentNamesContainer {
                        environmentNamesBuffer?.append(stringContainer0)
                    }
                }
                environmentNames = environmentNamesBuffer
            } else {
                environmentNames = []
            }
        } else {
            environmentNames = nil
        }
        let includeDeletedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .includeDeleted)
        includeDeleted = includeDeletedDecoded
        let includedDeletedBackToDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .includedDeletedBackTo)
        var includedDeletedBackToBuffer:ClientRuntime.Date? = nil
        if let includedDeletedBackToDecoded = includedDeletedBackToDecoded {
            includedDeletedBackToBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(includedDeletedBackToDecoded, format: .dateTime)
        }
        includedDeletedBackTo = includedDeletedBackToBuffer
        let maxRecordsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxRecords)
        maxRecords = maxRecordsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
