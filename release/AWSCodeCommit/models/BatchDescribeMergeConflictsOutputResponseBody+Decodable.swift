// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct BatchDescribeMergeConflictsOutputResponseBody: Swift.Equatable {
    let conflicts: [CodeCommitClientTypes.Conflict]?
    let nextToken: Swift.String?
    let errors: [CodeCommitClientTypes.BatchDescribeMergeConflictsError]?
    let destinationCommitId: Swift.String?
    let sourceCommitId: Swift.String?
    let baseCommitId: Swift.String?
}

extension BatchDescribeMergeConflictsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case baseCommitId
        case conflicts
        case destinationCommitId
        case errors
        case nextToken
        case sourceCommitId
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let conflictsContainer = try containerValues.decodeIfPresent([CodeCommitClientTypes.Conflict?].self, forKey: .conflicts)
        var conflictsDecoded0:[CodeCommitClientTypes.Conflict]? = nil
        if let conflictsContainer = conflictsContainer {
            conflictsDecoded0 = [CodeCommitClientTypes.Conflict]()
            for structure0 in conflictsContainer {
                if let structure0 = structure0 {
                    conflictsDecoded0?.append(structure0)
                }
            }
        }
        conflicts = conflictsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let errorsContainer = try containerValues.decodeIfPresent([CodeCommitClientTypes.BatchDescribeMergeConflictsError?].self, forKey: .errors)
        var errorsDecoded0:[CodeCommitClientTypes.BatchDescribeMergeConflictsError]? = nil
        if let errorsContainer = errorsContainer {
            errorsDecoded0 = [CodeCommitClientTypes.BatchDescribeMergeConflictsError]()
            for structure0 in errorsContainer {
                if let structure0 = structure0 {
                    errorsDecoded0?.append(structure0)
                }
            }
        }
        errors = errorsDecoded0
        let destinationCommitIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .destinationCommitId)
        destinationCommitId = destinationCommitIdDecoded
        let sourceCommitIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceCommitId)
        sourceCommitId = sourceCommitIdDecoded
        let baseCommitIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .baseCommitId)
        baseCommitId = baseCommitIdDecoded
    }
}
