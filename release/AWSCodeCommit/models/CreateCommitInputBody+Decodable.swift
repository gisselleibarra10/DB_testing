// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateCommitInputBody: Swift.Equatable {
    let repositoryName: Swift.String?
    let branchName: Swift.String?
    let parentCommitId: Swift.String?
    let authorName: Swift.String?
    let email: Swift.String?
    let commitMessage: Swift.String?
    let keepEmptyFolders: Swift.Bool
    let putFiles: [CodeCommitClientTypes.PutFileEntry]?
    let deleteFiles: [CodeCommitClientTypes.DeleteFileEntry]?
    let setFileModes: [CodeCommitClientTypes.SetFileModeEntry]?
}

extension CreateCommitInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case authorName
        case branchName
        case commitMessage
        case deleteFiles
        case email
        case keepEmptyFolders
        case parentCommitId
        case putFiles
        case repositoryName
        case setFileModes
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let repositoryNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .repositoryName)
        repositoryName = repositoryNameDecoded
        let branchNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .branchName)
        branchName = branchNameDecoded
        let parentCommitIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .parentCommitId)
        parentCommitId = parentCommitIdDecoded
        let authorNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .authorName)
        authorName = authorNameDecoded
        let emailDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .email)
        email = emailDecoded
        let commitMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .commitMessage)
        commitMessage = commitMessageDecoded
        let keepEmptyFoldersDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .keepEmptyFolders) ?? false
        keepEmptyFolders = keepEmptyFoldersDecoded
        let putFilesContainer = try containerValues.decodeIfPresent([CodeCommitClientTypes.PutFileEntry?].self, forKey: .putFiles)
        var putFilesDecoded0:[CodeCommitClientTypes.PutFileEntry]? = nil
        if let putFilesContainer = putFilesContainer {
            putFilesDecoded0 = [CodeCommitClientTypes.PutFileEntry]()
            for structure0 in putFilesContainer {
                if let structure0 = structure0 {
                    putFilesDecoded0?.append(structure0)
                }
            }
        }
        putFiles = putFilesDecoded0
        let deleteFilesContainer = try containerValues.decodeIfPresent([CodeCommitClientTypes.DeleteFileEntry?].self, forKey: .deleteFiles)
        var deleteFilesDecoded0:[CodeCommitClientTypes.DeleteFileEntry]? = nil
        if let deleteFilesContainer = deleteFilesContainer {
            deleteFilesDecoded0 = [CodeCommitClientTypes.DeleteFileEntry]()
            for structure0 in deleteFilesContainer {
                if let structure0 = structure0 {
                    deleteFilesDecoded0?.append(structure0)
                }
            }
        }
        deleteFiles = deleteFilesDecoded0
        let setFileModesContainer = try containerValues.decodeIfPresent([CodeCommitClientTypes.SetFileModeEntry?].self, forKey: .setFileModes)
        var setFileModesDecoded0:[CodeCommitClientTypes.SetFileModeEntry]? = nil
        if let setFileModesContainer = setFileModesContainer {
            setFileModesDecoded0 = [CodeCommitClientTypes.SetFileModeEntry]()
            for structure0 in setFileModesContainer {
                if let structure0 = structure0 {
                    setFileModesDecoded0?.append(structure0)
                }
            }
        }
        setFileModes = setFileModesDecoded0
    }
}
