// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CodeCommitClientTypes.ReplaceContentEntry: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case content
        case fileMode
        case filePath
        case replacementType
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let content = self.content {
            try encodeContainer.encode(content.base64EncodedString(), forKey: .content)
        }
        if let fileMode = self.fileMode {
            try encodeContainer.encode(fileMode.rawValue, forKey: .fileMode)
        }
        if let filePath = self.filePath {
            try encodeContainer.encode(filePath, forKey: .filePath)
        }
        if let replacementType = self.replacementType {
            try encodeContainer.encode(replacementType.rawValue, forKey: .replacementType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let filePathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .filePath)
        filePath = filePathDecoded
        let replacementTypeDecoded = try containerValues.decodeIfPresent(CodeCommitClientTypes.ReplacementTypeEnum.self, forKey: .replacementType)
        replacementType = replacementTypeDecoded
        let contentDecoded = try containerValues.decodeIfPresent(ClientRuntime.Data.self, forKey: .content)
        content = contentDecoded
        let fileModeDecoded = try containerValues.decodeIfPresent(CodeCommitClientTypes.FileModeTypeEnum.self, forKey: .fileMode)
        fileMode = fileModeDecoded
    }
}
