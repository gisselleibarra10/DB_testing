// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct BatchAssociateApprovalRuleTemplateWithRepositoriesOutputResponseBody: Swift.Equatable {
    let associatedRepositoryNames: [Swift.String]?
    let errors: [CodeCommitClientTypes.BatchAssociateApprovalRuleTemplateWithRepositoriesError]?
}

extension BatchAssociateApprovalRuleTemplateWithRepositoriesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case associatedRepositoryNames
        case errors
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let associatedRepositoryNamesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .associatedRepositoryNames)
        var associatedRepositoryNamesDecoded0:[Swift.String]? = nil
        if let associatedRepositoryNamesContainer = associatedRepositoryNamesContainer {
            associatedRepositoryNamesDecoded0 = [Swift.String]()
            for string0 in associatedRepositoryNamesContainer {
                if let string0 = string0 {
                    associatedRepositoryNamesDecoded0?.append(string0)
                }
            }
        }
        associatedRepositoryNames = associatedRepositoryNamesDecoded0
        let errorsContainer = try containerValues.decodeIfPresent([CodeCommitClientTypes.BatchAssociateApprovalRuleTemplateWithRepositoriesError?].self, forKey: .errors)
        var errorsDecoded0:[CodeCommitClientTypes.BatchAssociateApprovalRuleTemplateWithRepositoriesError]? = nil
        if let errorsContainer = errorsContainer {
            errorsDecoded0 = [CodeCommitClientTypes.BatchAssociateApprovalRuleTemplateWithRepositoriesError]()
            for structure0 in errorsContainer {
                if let structure0 = structure0 {
                    errorsDecoded0?.append(structure0)
                }
            }
        }
        errors = errorsDecoded0
    }
}
