// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct BatchDisassociateApprovalRuleTemplateFromRepositoriesOutputResponseBody: Swift.Equatable {
    let disassociatedRepositoryNames: [Swift.String]?
    let errors: [CodeCommitClientTypes.BatchDisassociateApprovalRuleTemplateFromRepositoriesError]?
}

extension BatchDisassociateApprovalRuleTemplateFromRepositoriesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case disassociatedRepositoryNames
        case errors
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let disassociatedRepositoryNamesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .disassociatedRepositoryNames)
        var disassociatedRepositoryNamesDecoded0:[Swift.String]? = nil
        if let disassociatedRepositoryNamesContainer = disassociatedRepositoryNamesContainer {
            disassociatedRepositoryNamesDecoded0 = [Swift.String]()
            for string0 in disassociatedRepositoryNamesContainer {
                if let string0 = string0 {
                    disassociatedRepositoryNamesDecoded0?.append(string0)
                }
            }
        }
        disassociatedRepositoryNames = disassociatedRepositoryNamesDecoded0
        let errorsContainer = try containerValues.decodeIfPresent([CodeCommitClientTypes.BatchDisassociateApprovalRuleTemplateFromRepositoriesError?].self, forKey: .errors)
        var errorsDecoded0:[CodeCommitClientTypes.BatchDisassociateApprovalRuleTemplateFromRepositoriesError]? = nil
        if let errorsContainer = errorsContainer {
            errorsDecoded0 = [CodeCommitClientTypes.BatchDisassociateApprovalRuleTemplateFromRepositoriesError]()
            for structure0 in errorsContainer {
                if let structure0 = structure0 {
                    errorsDecoded0?.append(structure0)
                }
            }
        }
        errors = errorsDecoded0
    }
}
