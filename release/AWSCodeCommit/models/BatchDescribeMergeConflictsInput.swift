// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct BatchDescribeMergeConflictsInput: Swift.Equatable {
    /// The level of conflict detail to use. If unspecified, the default FILE_LEVEL is used, which returns a not-mergeable result if the same file has differences in both branches. If LINE_LEVEL is specified, a conflict is considered not mergeable if the same file in both branches has differences on the same line.
    public var conflictDetailLevel: CodeCommitClientTypes.ConflictDetailLevelTypeEnum?
    /// Specifies which branch to use when resolving conflicts, or whether to attempt automatically merging two versions of a file. The default is NONE, which requires any conflicts to be resolved manually before the merge operation is successful.
    public var conflictResolutionStrategy: CodeCommitClientTypes.ConflictResolutionStrategyTypeEnum?
    /// The branch, tag, HEAD, or other fully qualified reference used to identify a commit (for example, a branch name or a full commit ID).
    /// This member is required.
    public var destinationCommitSpecifier: Swift.String?
    /// The path of the target files used to describe the conflicts. If not specified, the default is all conflict files.
    public var filePaths: [Swift.String]?
    /// The maximum number of files to include in the output.
    public var maxConflictFiles: Swift.Int?
    /// The maximum number of merge hunks to include in the output.
    public var maxMergeHunks: Swift.Int?
    /// The merge option or strategy you want to use to merge the code.
    /// This member is required.
    public var mergeOption: CodeCommitClientTypes.MergeOptionTypeEnum?
    /// An enumeration token that, when provided in a request, returns the next batch of the results.
    public var nextToken: Swift.String?
    /// The name of the repository that contains the merge conflicts you want to review.
    /// This member is required.
    public var repositoryName: Swift.String?
    /// The branch, tag, HEAD, or other fully qualified reference used to identify a commit (for example, a branch name or a full commit ID).
    /// This member is required.
    public var sourceCommitSpecifier: Swift.String?

    public init (
        conflictDetailLevel: CodeCommitClientTypes.ConflictDetailLevelTypeEnum? = nil,
        conflictResolutionStrategy: CodeCommitClientTypes.ConflictResolutionStrategyTypeEnum? = nil,
        destinationCommitSpecifier: Swift.String? = nil,
        filePaths: [Swift.String]? = nil,
        maxConflictFiles: Swift.Int? = nil,
        maxMergeHunks: Swift.Int? = nil,
        mergeOption: CodeCommitClientTypes.MergeOptionTypeEnum? = nil,
        nextToken: Swift.String? = nil,
        repositoryName: Swift.String? = nil,
        sourceCommitSpecifier: Swift.String? = nil
    )
    {
        self.conflictDetailLevel = conflictDetailLevel
        self.conflictResolutionStrategy = conflictResolutionStrategy
        self.destinationCommitSpecifier = destinationCommitSpecifier
        self.filePaths = filePaths
        self.maxConflictFiles = maxConflictFiles
        self.maxMergeHunks = maxMergeHunks
        self.mergeOption = mergeOption
        self.nextToken = nextToken
        self.repositoryName = repositoryName
        self.sourceCommitSpecifier = sourceCommitSpecifier
    }
}
