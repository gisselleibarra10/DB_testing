// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetFolderOutputResponseBody: Swift.Equatable {
    let commitId: Swift.String?
    let folderPath: Swift.String?
    let treeId: Swift.String?
    let subFolders: [CodeCommitClientTypes.Folder]?
    let files: [CodeCommitClientTypes.File]?
    let symbolicLinks: [CodeCommitClientTypes.SymbolicLink]?
    let subModules: [CodeCommitClientTypes.SubModule]?
}

extension GetFolderOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case commitId
        case files
        case folderPath
        case subFolders
        case subModules
        case symbolicLinks
        case treeId
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let commitIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .commitId)
        commitId = commitIdDecoded
        let folderPathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .folderPath)
        folderPath = folderPathDecoded
        let treeIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .treeId)
        treeId = treeIdDecoded
        let subFoldersContainer = try containerValues.decodeIfPresent([CodeCommitClientTypes.Folder?].self, forKey: .subFolders)
        var subFoldersDecoded0:[CodeCommitClientTypes.Folder]? = nil
        if let subFoldersContainer = subFoldersContainer {
            subFoldersDecoded0 = [CodeCommitClientTypes.Folder]()
            for structure0 in subFoldersContainer {
                if let structure0 = structure0 {
                    subFoldersDecoded0?.append(structure0)
                }
            }
        }
        subFolders = subFoldersDecoded0
        let filesContainer = try containerValues.decodeIfPresent([CodeCommitClientTypes.File?].self, forKey: .files)
        var filesDecoded0:[CodeCommitClientTypes.File]? = nil
        if let filesContainer = filesContainer {
            filesDecoded0 = [CodeCommitClientTypes.File]()
            for structure0 in filesContainer {
                if let structure0 = structure0 {
                    filesDecoded0?.append(structure0)
                }
            }
        }
        files = filesDecoded0
        let symbolicLinksContainer = try containerValues.decodeIfPresent([CodeCommitClientTypes.SymbolicLink?].self, forKey: .symbolicLinks)
        var symbolicLinksDecoded0:[CodeCommitClientTypes.SymbolicLink]? = nil
        if let symbolicLinksContainer = symbolicLinksContainer {
            symbolicLinksDecoded0 = [CodeCommitClientTypes.SymbolicLink]()
            for structure0 in symbolicLinksContainer {
                if let structure0 = structure0 {
                    symbolicLinksDecoded0?.append(structure0)
                }
            }
        }
        symbolicLinks = symbolicLinksDecoded0
        let subModulesContainer = try containerValues.decodeIfPresent([CodeCommitClientTypes.SubModule?].self, forKey: .subModules)
        var subModulesDecoded0:[CodeCommitClientTypes.SubModule]? = nil
        if let subModulesContainer = subModulesContainer {
            subModulesDecoded0 = [CodeCommitClientTypes.SubModule]()
            for structure0 in subModulesContainer {
                if let structure0 = structure0 {
                    subModulesDecoded0?.append(structure0)
                }
            }
        }
        subModules = subModulesDecoded0
    }
}
