// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CodeCommitClientTypes.Evaluation: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case approvalRulesNotSatisfied
        case approvalRulesSatisfied
        case approved
        case overridden
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let approvalRulesNotSatisfied = approvalRulesNotSatisfied {
            var approvalRulesNotSatisfiedContainer = encodeContainer.nestedUnkeyedContainer(forKey: .approvalRulesNotSatisfied)
            for approvalrulesnotsatisfiedlist0 in approvalRulesNotSatisfied {
                try approvalRulesNotSatisfiedContainer.encode(approvalrulesnotsatisfiedlist0)
            }
        }
        if let approvalRulesSatisfied = approvalRulesSatisfied {
            var approvalRulesSatisfiedContainer = encodeContainer.nestedUnkeyedContainer(forKey: .approvalRulesSatisfied)
            for approvalrulessatisfiedlist0 in approvalRulesSatisfied {
                try approvalRulesSatisfiedContainer.encode(approvalrulessatisfiedlist0)
            }
        }
        if approved != false {
            try encodeContainer.encode(approved, forKey: .approved)
        }
        if overridden != false {
            try encodeContainer.encode(overridden, forKey: .overridden)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let approvedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .approved) ?? false
        approved = approvedDecoded
        let overriddenDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .overridden) ?? false
        overridden = overriddenDecoded
        let approvalRulesSatisfiedContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .approvalRulesSatisfied)
        var approvalRulesSatisfiedDecoded0:[Swift.String]? = nil
        if let approvalRulesSatisfiedContainer = approvalRulesSatisfiedContainer {
            approvalRulesSatisfiedDecoded0 = [Swift.String]()
            for string0 in approvalRulesSatisfiedContainer {
                if let string0 = string0 {
                    approvalRulesSatisfiedDecoded0?.append(string0)
                }
            }
        }
        approvalRulesSatisfied = approvalRulesSatisfiedDecoded0
        let approvalRulesNotSatisfiedContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .approvalRulesNotSatisfied)
        var approvalRulesNotSatisfiedDecoded0:[Swift.String]? = nil
        if let approvalRulesNotSatisfiedContainer = approvalRulesNotSatisfiedContainer {
            approvalRulesNotSatisfiedDecoded0 = [Swift.String]()
            for string0 in approvalRulesNotSatisfiedContainer {
                if let string0 = string0 {
                    approvalRulesNotSatisfiedDecoded0?.append(string0)
                }
            }
        }
        approvalRulesNotSatisfied = approvalRulesNotSatisfiedDecoded0
    }
}
