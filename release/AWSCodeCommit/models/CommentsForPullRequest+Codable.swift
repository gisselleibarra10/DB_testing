// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CodeCommitClientTypes.CommentsForPullRequest: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case afterBlobId
        case afterCommitId
        case beforeBlobId
        case beforeCommitId
        case comments
        case location
        case pullRequestId
        case repositoryName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let afterBlobId = self.afterBlobId {
            try encodeContainer.encode(afterBlobId, forKey: .afterBlobId)
        }
        if let afterCommitId = self.afterCommitId {
            try encodeContainer.encode(afterCommitId, forKey: .afterCommitId)
        }
        if let beforeBlobId = self.beforeBlobId {
            try encodeContainer.encode(beforeBlobId, forKey: .beforeBlobId)
        }
        if let beforeCommitId = self.beforeCommitId {
            try encodeContainer.encode(beforeCommitId, forKey: .beforeCommitId)
        }
        if let comments = comments {
            var commentsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .comments)
            for comments0 in comments {
                try commentsContainer.encode(comments0)
            }
        }
        if let location = self.location {
            try encodeContainer.encode(location, forKey: .location)
        }
        if let pullRequestId = self.pullRequestId {
            try encodeContainer.encode(pullRequestId, forKey: .pullRequestId)
        }
        if let repositoryName = self.repositoryName {
            try encodeContainer.encode(repositoryName, forKey: .repositoryName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pullRequestIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pullRequestId)
        pullRequestId = pullRequestIdDecoded
        let repositoryNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .repositoryName)
        repositoryName = repositoryNameDecoded
        let beforeCommitIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .beforeCommitId)
        beforeCommitId = beforeCommitIdDecoded
        let afterCommitIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .afterCommitId)
        afterCommitId = afterCommitIdDecoded
        let beforeBlobIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .beforeBlobId)
        beforeBlobId = beforeBlobIdDecoded
        let afterBlobIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .afterBlobId)
        afterBlobId = afterBlobIdDecoded
        let locationDecoded = try containerValues.decodeIfPresent(CodeCommitClientTypes.Location.self, forKey: .location)
        location = locationDecoded
        let commentsContainer = try containerValues.decodeIfPresent([CodeCommitClientTypes.Comment?].self, forKey: .comments)
        var commentsDecoded0:[CodeCommitClientTypes.Comment]? = nil
        if let commentsContainer = commentsContainer {
            commentsDecoded0 = [CodeCommitClientTypes.Comment]()
            for structure0 in commentsContainer {
                if let structure0 = structure0 {
                    commentsDecoded0?.append(structure0)
                }
            }
        }
        comments = commentsDecoded0
    }
}
