// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct GetMergeConflictsOutputResponse: Swift.Equatable {
    /// The commit ID of the merge base.
    public var baseCommitId: Swift.String?
    /// A list of metadata for any conflicting files. If the specified merge strategy is FAST_FORWARD_MERGE, this list is always empty.
    /// This member is required.
    public var conflictMetadataList: [CodeCommitClientTypes.ConflictMetadata]?
    /// The commit ID of the destination commit specifier that was used in the merge evaluation.
    /// This member is required.
    public var destinationCommitId: Swift.String?
    /// A Boolean value that indicates whether the code is mergeable by the specified merge option.
    /// This member is required.
    public var mergeable: Swift.Bool
    /// An enumeration token that can be used in a request to return the next batch of the results.
    public var nextToken: Swift.String?
    /// The commit ID of the source commit specifier that was used in the merge evaluation.
    /// This member is required.
    public var sourceCommitId: Swift.String?

    public init (
        baseCommitId: Swift.String? = nil,
        conflictMetadataList: [CodeCommitClientTypes.ConflictMetadata]? = nil,
        destinationCommitId: Swift.String? = nil,
        mergeable: Swift.Bool = false,
        nextToken: Swift.String? = nil,
        sourceCommitId: Swift.String? = nil
    )
    {
        self.baseCommitId = baseCommitId
        self.conflictMetadataList = conflictMetadataList
        self.destinationCommitId = destinationCommitId
        self.mergeable = mergeable
        self.nextToken = nextToken
        self.sourceCommitId = sourceCommitId
    }
}
