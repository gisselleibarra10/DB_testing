// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CodeCommitClientTypes.PullRequest: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case approvalRules
        case authorArn
        case clientRequestToken
        case creationDate
        case description
        case lastActivityDate
        case pullRequestId
        case pullRequestStatus
        case pullRequestTargets
        case revisionId
        case title
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let approvalRules = approvalRules {
            var approvalRulesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .approvalRules)
            for approvalruleslist0 in approvalRules {
                try approvalRulesContainer.encode(approvalruleslist0)
            }
        }
        if let authorArn = self.authorArn {
            try encodeContainer.encode(authorArn, forKey: .authorArn)
        }
        if let clientRequestToken = self.clientRequestToken {
            try encodeContainer.encode(clientRequestToken, forKey: .clientRequestToken)
        }
        if let creationDate = self.creationDate {
            try encodeContainer.encode(creationDate.timeIntervalSince1970, forKey: .creationDate)
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let lastActivityDate = self.lastActivityDate {
            try encodeContainer.encode(lastActivityDate.timeIntervalSince1970, forKey: .lastActivityDate)
        }
        if let pullRequestId = self.pullRequestId {
            try encodeContainer.encode(pullRequestId, forKey: .pullRequestId)
        }
        if let pullRequestStatus = self.pullRequestStatus {
            try encodeContainer.encode(pullRequestStatus.rawValue, forKey: .pullRequestStatus)
        }
        if let pullRequestTargets = pullRequestTargets {
            var pullRequestTargetsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .pullRequestTargets)
            for pullrequesttargetlist0 in pullRequestTargets {
                try pullRequestTargetsContainer.encode(pullrequesttargetlist0)
            }
        }
        if let revisionId = self.revisionId {
            try encodeContainer.encode(revisionId, forKey: .revisionId)
        }
        if let title = self.title {
            try encodeContainer.encode(title, forKey: .title)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pullRequestIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pullRequestId)
        pullRequestId = pullRequestIdDecoded
        let titleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .title)
        title = titleDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let lastActivityDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastActivityDate)
        lastActivityDate = lastActivityDateDecoded
        let creationDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationDate)
        creationDate = creationDateDecoded
        let pullRequestStatusDecoded = try containerValues.decodeIfPresent(CodeCommitClientTypes.PullRequestStatusEnum.self, forKey: .pullRequestStatus)
        pullRequestStatus = pullRequestStatusDecoded
        let authorArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .authorArn)
        authorArn = authorArnDecoded
        let pullRequestTargetsContainer = try containerValues.decodeIfPresent([CodeCommitClientTypes.PullRequestTarget?].self, forKey: .pullRequestTargets)
        var pullRequestTargetsDecoded0:[CodeCommitClientTypes.PullRequestTarget]? = nil
        if let pullRequestTargetsContainer = pullRequestTargetsContainer {
            pullRequestTargetsDecoded0 = [CodeCommitClientTypes.PullRequestTarget]()
            for structure0 in pullRequestTargetsContainer {
                if let structure0 = structure0 {
                    pullRequestTargetsDecoded0?.append(structure0)
                }
            }
        }
        pullRequestTargets = pullRequestTargetsDecoded0
        let clientRequestTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientRequestToken)
        clientRequestToken = clientRequestTokenDecoded
        let revisionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .revisionId)
        revisionId = revisionIdDecoded
        let approvalRulesContainer = try containerValues.decodeIfPresent([CodeCommitClientTypes.ApprovalRule?].self, forKey: .approvalRules)
        var approvalRulesDecoded0:[CodeCommitClientTypes.ApprovalRule]? = nil
        if let approvalRulesContainer = approvalRulesContainer {
            approvalRulesDecoded0 = [CodeCommitClientTypes.ApprovalRule]()
            for structure0 in approvalRulesContainer {
                if let structure0 = structure0 {
                    approvalRulesDecoded0?.append(structure0)
                }
            }
        }
        approvalRules = approvalRulesDecoded0
    }
}
