// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension MergeBranchesBySquashInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case authorName
        case commitMessage
        case conflictDetailLevel
        case conflictResolution
        case conflictResolutionStrategy
        case destinationCommitSpecifier
        case email
        case keepEmptyFolders
        case repositoryName
        case sourceCommitSpecifier
        case targetBranch
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let authorName = self.authorName {
            try encodeContainer.encode(authorName, forKey: .authorName)
        }
        if let commitMessage = self.commitMessage {
            try encodeContainer.encode(commitMessage, forKey: .commitMessage)
        }
        if let conflictDetailLevel = self.conflictDetailLevel {
            try encodeContainer.encode(conflictDetailLevel.rawValue, forKey: .conflictDetailLevel)
        }
        if let conflictResolution = self.conflictResolution {
            try encodeContainer.encode(conflictResolution, forKey: .conflictResolution)
        }
        if let conflictResolutionStrategy = self.conflictResolutionStrategy {
            try encodeContainer.encode(conflictResolutionStrategy.rawValue, forKey: .conflictResolutionStrategy)
        }
        if let destinationCommitSpecifier = self.destinationCommitSpecifier {
            try encodeContainer.encode(destinationCommitSpecifier, forKey: .destinationCommitSpecifier)
        }
        if let email = self.email {
            try encodeContainer.encode(email, forKey: .email)
        }
        if keepEmptyFolders != false {
            try encodeContainer.encode(keepEmptyFolders, forKey: .keepEmptyFolders)
        }
        if let repositoryName = self.repositoryName {
            try encodeContainer.encode(repositoryName, forKey: .repositoryName)
        }
        if let sourceCommitSpecifier = self.sourceCommitSpecifier {
            try encodeContainer.encode(sourceCommitSpecifier, forKey: .sourceCommitSpecifier)
        }
        if let targetBranch = self.targetBranch {
            try encodeContainer.encode(targetBranch, forKey: .targetBranch)
        }
    }
}
