// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct MergePullRequestByThreeWayInputBody: Swift.Equatable {
    let pullRequestId: Swift.String?
    let repositoryName: Swift.String?
    let sourceCommitId: Swift.String?
    let conflictDetailLevel: CodeCommitClientTypes.ConflictDetailLevelTypeEnum?
    let conflictResolutionStrategy: CodeCommitClientTypes.ConflictResolutionStrategyTypeEnum?
    let commitMessage: Swift.String?
    let authorName: Swift.String?
    let email: Swift.String?
    let keepEmptyFolders: Swift.Bool
    let conflictResolution: CodeCommitClientTypes.ConflictResolution?
}

extension MergePullRequestByThreeWayInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case authorName
        case commitMessage
        case conflictDetailLevel
        case conflictResolution
        case conflictResolutionStrategy
        case email
        case keepEmptyFolders
        case pullRequestId
        case repositoryName
        case sourceCommitId
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pullRequestIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pullRequestId)
        pullRequestId = pullRequestIdDecoded
        let repositoryNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .repositoryName)
        repositoryName = repositoryNameDecoded
        let sourceCommitIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceCommitId)
        sourceCommitId = sourceCommitIdDecoded
        let conflictDetailLevelDecoded = try containerValues.decodeIfPresent(CodeCommitClientTypes.ConflictDetailLevelTypeEnum.self, forKey: .conflictDetailLevel)
        conflictDetailLevel = conflictDetailLevelDecoded
        let conflictResolutionStrategyDecoded = try containerValues.decodeIfPresent(CodeCommitClientTypes.ConflictResolutionStrategyTypeEnum.self, forKey: .conflictResolutionStrategy)
        conflictResolutionStrategy = conflictResolutionStrategyDecoded
        let commitMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .commitMessage)
        commitMessage = commitMessageDecoded
        let authorNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .authorName)
        authorName = authorNameDecoded
        let emailDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .email)
        email = emailDecoded
        let keepEmptyFoldersDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .keepEmptyFolders) ?? false
        keepEmptyFolders = keepEmptyFoldersDecoded
        let conflictResolutionDecoded = try containerValues.decodeIfPresent(CodeCommitClientTypes.ConflictResolution.self, forKey: .conflictResolution)
        conflictResolution = conflictResolutionDecoded
    }
}
