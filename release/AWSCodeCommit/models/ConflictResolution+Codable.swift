// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CodeCommitClientTypes.ConflictResolution: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deleteFiles
        case replaceContents
        case setFileModes
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let deleteFiles = deleteFiles {
            var deleteFilesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .deleteFiles)
            for deletefileentries0 in deleteFiles {
                try deleteFilesContainer.encode(deletefileentries0)
            }
        }
        if let replaceContents = replaceContents {
            var replaceContentsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .replaceContents)
            for replacecontententries0 in replaceContents {
                try replaceContentsContainer.encode(replacecontententries0)
            }
        }
        if let setFileModes = setFileModes {
            var setFileModesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .setFileModes)
            for setfilemodeentries0 in setFileModes {
                try setFileModesContainer.encode(setfilemodeentries0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let replaceContentsContainer = try containerValues.decodeIfPresent([CodeCommitClientTypes.ReplaceContentEntry?].self, forKey: .replaceContents)
        var replaceContentsDecoded0:[CodeCommitClientTypes.ReplaceContentEntry]? = nil
        if let replaceContentsContainer = replaceContentsContainer {
            replaceContentsDecoded0 = [CodeCommitClientTypes.ReplaceContentEntry]()
            for structure0 in replaceContentsContainer {
                if let structure0 = structure0 {
                    replaceContentsDecoded0?.append(structure0)
                }
            }
        }
        replaceContents = replaceContentsDecoded0
        let deleteFilesContainer = try containerValues.decodeIfPresent([CodeCommitClientTypes.DeleteFileEntry?].self, forKey: .deleteFiles)
        var deleteFilesDecoded0:[CodeCommitClientTypes.DeleteFileEntry]? = nil
        if let deleteFilesContainer = deleteFilesContainer {
            deleteFilesDecoded0 = [CodeCommitClientTypes.DeleteFileEntry]()
            for structure0 in deleteFilesContainer {
                if let structure0 = structure0 {
                    deleteFilesDecoded0?.append(structure0)
                }
            }
        }
        deleteFiles = deleteFilesDecoded0
        let setFileModesContainer = try containerValues.decodeIfPresent([CodeCommitClientTypes.SetFileModeEntry?].self, forKey: .setFileModes)
        var setFileModesDecoded0:[CodeCommitClientTypes.SetFileModeEntry]? = nil
        if let setFileModesContainer = setFileModesContainer {
            setFileModesDecoded0 = [CodeCommitClientTypes.SetFileModeEntry]()
            for structure0 in setFileModesContainer {
                if let structure0 = structure0 {
                    setFileModesDecoded0?.append(structure0)
                }
            }
        }
        setFileModes = setFileModesDecoded0
    }
}
