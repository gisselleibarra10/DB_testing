// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct MergeBranchesByFastForwardInputBody: Swift.Equatable {
    let repositoryName: Swift.String?
    let sourceCommitSpecifier: Swift.String?
    let destinationCommitSpecifier: Swift.String?
    let targetBranch: Swift.String?
}

extension MergeBranchesByFastForwardInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case destinationCommitSpecifier
        case repositoryName
        case sourceCommitSpecifier
        case targetBranch
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let repositoryNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .repositoryName)
        repositoryName = repositoryNameDecoded
        let sourceCommitSpecifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceCommitSpecifier)
        sourceCommitSpecifier = sourceCommitSpecifierDecoded
        let destinationCommitSpecifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .destinationCommitSpecifier)
        destinationCommitSpecifier = destinationCommitSpecifierDecoded
        let targetBranchDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .targetBranch)
        targetBranch = targetBranchDecoded
    }
}
