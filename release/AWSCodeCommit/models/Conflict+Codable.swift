// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CodeCommitClientTypes.Conflict: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case conflictMetadata
        case mergeHunks
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let conflictMetadata = self.conflictMetadata {
            try encodeContainer.encode(conflictMetadata, forKey: .conflictMetadata)
        }
        if let mergeHunks = mergeHunks {
            var mergeHunksContainer = encodeContainer.nestedUnkeyedContainer(forKey: .mergeHunks)
            for mergehunks0 in mergeHunks {
                try mergeHunksContainer.encode(mergehunks0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let conflictMetadataDecoded = try containerValues.decodeIfPresent(CodeCommitClientTypes.ConflictMetadata.self, forKey: .conflictMetadata)
        conflictMetadata = conflictMetadataDecoded
        let mergeHunksContainer = try containerValues.decodeIfPresent([CodeCommitClientTypes.MergeHunk?].self, forKey: .mergeHunks)
        var mergeHunksDecoded0:[CodeCommitClientTypes.MergeHunk]? = nil
        if let mergeHunksContainer = mergeHunksContainer {
            mergeHunksDecoded0 = [CodeCommitClientTypes.MergeHunk]()
            for structure0 in mergeHunksContainer {
                if let structure0 = structure0 {
                    mergeHunksDecoded0?.append(structure0)
                }
            }
        }
        mergeHunks = mergeHunksDecoded0
    }
}
