// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct MergeBranchesByThreeWayInput: Swift.Equatable {
    /// The name of the author who created the commit. This information is used as both the author and committer for the commit.
    public var authorName: Swift.String?
    /// The commit message to include in the commit information for the merge.
    public var commitMessage: Swift.String?
    /// The level of conflict detail to use. If unspecified, the default FILE_LEVEL is used, which returns a not-mergeable result if the same file has differences in both branches. If LINE_LEVEL is specified, a conflict is considered not mergeable if the same file in both branches has differences on the same line.
    public var conflictDetailLevel: CodeCommitClientTypes.ConflictDetailLevelTypeEnum?
    /// If AUTOMERGE is the conflict resolution strategy, a list of inputs to use when resolving conflicts during a merge.
    public var conflictResolution: CodeCommitClientTypes.ConflictResolution?
    /// Specifies which branch to use when resolving conflicts, or whether to attempt automatically merging two versions of a file. The default is NONE, which requires any conflicts to be resolved manually before the merge operation is successful.
    public var conflictResolutionStrategy: CodeCommitClientTypes.ConflictResolutionStrategyTypeEnum?
    /// The branch, tag, HEAD, or other fully qualified reference used to identify a commit (for example, a branch name or a full commit ID).
    /// This member is required.
    public var destinationCommitSpecifier: Swift.String?
    /// The email address of the person merging the branches. This information is used in the commit information for the merge.
    public var email: Swift.String?
    /// If the commit contains deletions, whether to keep a folder or folder structure if the changes leave the folders empty. If true, a .gitkeep file is created for empty folders. The default is false.
    public var keepEmptyFolders: Swift.Bool
    /// The name of the repository where you want to merge two branches.
    /// This member is required.
    public var repositoryName: Swift.String?
    /// The branch, tag, HEAD, or other fully qualified reference used to identify a commit (for example, a branch name or a full commit ID).
    /// This member is required.
    public var sourceCommitSpecifier: Swift.String?
    /// The branch where the merge is applied.
    public var targetBranch: Swift.String?

    public init (
        authorName: Swift.String? = nil,
        commitMessage: Swift.String? = nil,
        conflictDetailLevel: CodeCommitClientTypes.ConflictDetailLevelTypeEnum? = nil,
        conflictResolution: CodeCommitClientTypes.ConflictResolution? = nil,
        conflictResolutionStrategy: CodeCommitClientTypes.ConflictResolutionStrategyTypeEnum? = nil,
        destinationCommitSpecifier: Swift.String? = nil,
        email: Swift.String? = nil,
        keepEmptyFolders: Swift.Bool = false,
        repositoryName: Swift.String? = nil,
        sourceCommitSpecifier: Swift.String? = nil,
        targetBranch: Swift.String? = nil
    )
    {
        self.authorName = authorName
        self.commitMessage = commitMessage
        self.conflictDetailLevel = conflictDetailLevel
        self.conflictResolution = conflictResolution
        self.conflictResolutionStrategy = conflictResolutionStrategy
        self.destinationCommitSpecifier = destinationCommitSpecifier
        self.email = email
        self.keepEmptyFolders = keepEmptyFolders
        self.repositoryName = repositoryName
        self.sourceCommitSpecifier = sourceCommitSpecifier
        self.targetBranch = targetBranch
    }
}
