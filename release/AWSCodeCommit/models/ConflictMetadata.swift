// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension CodeCommitClientTypes {
    /// Information about the metadata for a conflict in a merge operation.
    public struct ConflictMetadata: Swift.Equatable {
        /// A boolean value indicating whether there are conflicts in the content of a file.
        public var contentConflict: Swift.Bool
        /// A boolean value indicating whether there are conflicts in the file mode of a file.
        public var fileModeConflict: Swift.Bool
        /// The file modes of the file in the source, destination, and base of the merge.
        public var fileModes: CodeCommitClientTypes.FileModes?
        /// The path of the file that contains conflicts.
        public var filePath: Swift.String?
        /// The file sizes of the file in the source, destination, and base of the merge.
        public var fileSizes: CodeCommitClientTypes.FileSizes?
        /// A boolean value (true or false) indicating whether the file is binary or textual in the source, destination, and base of the merge.
        public var isBinaryFile: CodeCommitClientTypes.IsBinaryFile?
        /// Whether an add, modify, or delete operation caused the conflict between the source and destination of the merge.
        public var mergeOperations: CodeCommitClientTypes.MergeOperations?
        /// The number of conflicts, including both hunk conflicts and metadata conflicts.
        public var numberOfConflicts: Swift.Int
        /// A boolean value (true or false) indicating whether there are conflicts between the branches in the object type of a file, folder, or submodule.
        public var objectTypeConflict: Swift.Bool
        /// Information about any object type conflicts in a merge operation.
        public var objectTypes: CodeCommitClientTypes.ObjectTypes?

        public init (
            contentConflict: Swift.Bool = false,
            fileModeConflict: Swift.Bool = false,
            fileModes: CodeCommitClientTypes.FileModes? = nil,
            filePath: Swift.String? = nil,
            fileSizes: CodeCommitClientTypes.FileSizes? = nil,
            isBinaryFile: CodeCommitClientTypes.IsBinaryFile? = nil,
            mergeOperations: CodeCommitClientTypes.MergeOperations? = nil,
            numberOfConflicts: Swift.Int = 0,
            objectTypeConflict: Swift.Bool = false,
            objectTypes: CodeCommitClientTypes.ObjectTypes? = nil
        )
        {
            self.contentConflict = contentConflict
            self.fileModeConflict = fileModeConflict
            self.fileModes = fileModes
            self.filePath = filePath
            self.fileSizes = fileSizes
            self.isBinaryFile = isBinaryFile
            self.mergeOperations = mergeOperations
            self.numberOfConflicts = numberOfConflicts
            self.objectTypeConflict = objectTypeConflict
            self.objectTypes = objectTypes
        }
    }

}
