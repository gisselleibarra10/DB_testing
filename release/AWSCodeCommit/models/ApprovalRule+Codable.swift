// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CodeCommitClientTypes.ApprovalRule: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case approvalRuleContent
        case approvalRuleId
        case approvalRuleName
        case creationDate
        case lastModifiedDate
        case lastModifiedUser
        case originApprovalRuleTemplate
        case ruleContentSha256
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let approvalRuleContent = self.approvalRuleContent {
            try encodeContainer.encode(approvalRuleContent, forKey: .approvalRuleContent)
        }
        if let approvalRuleId = self.approvalRuleId {
            try encodeContainer.encode(approvalRuleId, forKey: .approvalRuleId)
        }
        if let approvalRuleName = self.approvalRuleName {
            try encodeContainer.encode(approvalRuleName, forKey: .approvalRuleName)
        }
        if let creationDate = self.creationDate {
            try encodeContainer.encode(creationDate.timeIntervalSince1970, forKey: .creationDate)
        }
        if let lastModifiedDate = self.lastModifiedDate {
            try encodeContainer.encode(lastModifiedDate.timeIntervalSince1970, forKey: .lastModifiedDate)
        }
        if let lastModifiedUser = self.lastModifiedUser {
            try encodeContainer.encode(lastModifiedUser, forKey: .lastModifiedUser)
        }
        if let originApprovalRuleTemplate = self.originApprovalRuleTemplate {
            try encodeContainer.encode(originApprovalRuleTemplate, forKey: .originApprovalRuleTemplate)
        }
        if let ruleContentSha256 = self.ruleContentSha256 {
            try encodeContainer.encode(ruleContentSha256, forKey: .ruleContentSha256)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let approvalRuleIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .approvalRuleId)
        approvalRuleId = approvalRuleIdDecoded
        let approvalRuleNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .approvalRuleName)
        approvalRuleName = approvalRuleNameDecoded
        let approvalRuleContentDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .approvalRuleContent)
        approvalRuleContent = approvalRuleContentDecoded
        let ruleContentSha256Decoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ruleContentSha256)
        ruleContentSha256 = ruleContentSha256Decoded
        let lastModifiedDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedDate)
        lastModifiedDate = lastModifiedDateDecoded
        let creationDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationDate)
        creationDate = creationDateDecoded
        let lastModifiedUserDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastModifiedUser)
        lastModifiedUser = lastModifiedUserDecoded
        let originApprovalRuleTemplateDecoded = try containerValues.decodeIfPresent(CodeCommitClientTypes.OriginApprovalRuleTemplate.self, forKey: .originApprovalRuleTemplate)
        originApprovalRuleTemplate = originApprovalRuleTemplateDecoded
    }
}
