// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension DlmClientTypes.Schedule: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case copyTags = "CopyTags"
        case createRule = "CreateRule"
        case crossRegionCopyRules = "CrossRegionCopyRules"
        case deprecateRule = "DeprecateRule"
        case fastRestoreRule = "FastRestoreRule"
        case name = "Name"
        case retainRule = "RetainRule"
        case shareRules = "ShareRules"
        case tagsToAdd = "TagsToAdd"
        case variableTags = "VariableTags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if copyTags != false {
            try encodeContainer.encode(copyTags, forKey: .copyTags)
        }
        if let createRule = self.createRule {
            try encodeContainer.encode(createRule, forKey: .createRule)
        }
        if let crossRegionCopyRules = crossRegionCopyRules {
            var crossRegionCopyRulesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .crossRegionCopyRules)
            for crossregioncopyrules0 in crossRegionCopyRules {
                try crossRegionCopyRulesContainer.encode(crossregioncopyrules0)
            }
        }
        if let deprecateRule = self.deprecateRule {
            try encodeContainer.encode(deprecateRule, forKey: .deprecateRule)
        }
        if let fastRestoreRule = self.fastRestoreRule {
            try encodeContainer.encode(fastRestoreRule, forKey: .fastRestoreRule)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let retainRule = self.retainRule {
            try encodeContainer.encode(retainRule, forKey: .retainRule)
        }
        if let shareRules = shareRules {
            var shareRulesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .shareRules)
            for sharerules0 in shareRules {
                try shareRulesContainer.encode(sharerules0)
            }
        }
        if let tagsToAdd = tagsToAdd {
            var tagsToAddContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tagsToAdd)
            for tagstoaddlist0 in tagsToAdd {
                try tagsToAddContainer.encode(tagstoaddlist0)
            }
        }
        if let variableTags = variableTags {
            var variableTagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .variableTags)
            for variabletagslist0 in variableTags {
                try variableTagsContainer.encode(variabletagslist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let copyTagsDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .copyTags) ?? false
        copyTags = copyTagsDecoded
        let tagsToAddContainer = try containerValues.decodeIfPresent([DlmClientTypes.Tag?].self, forKey: .tagsToAdd)
        var tagsToAddDecoded0:[DlmClientTypes.Tag]? = nil
        if let tagsToAddContainer = tagsToAddContainer {
            tagsToAddDecoded0 = [DlmClientTypes.Tag]()
            for structure0 in tagsToAddContainer {
                if let structure0 = structure0 {
                    tagsToAddDecoded0?.append(structure0)
                }
            }
        }
        tagsToAdd = tagsToAddDecoded0
        let variableTagsContainer = try containerValues.decodeIfPresent([DlmClientTypes.Tag?].self, forKey: .variableTags)
        var variableTagsDecoded0:[DlmClientTypes.Tag]? = nil
        if let variableTagsContainer = variableTagsContainer {
            variableTagsDecoded0 = [DlmClientTypes.Tag]()
            for structure0 in variableTagsContainer {
                if let structure0 = structure0 {
                    variableTagsDecoded0?.append(structure0)
                }
            }
        }
        variableTags = variableTagsDecoded0
        let createRuleDecoded = try containerValues.decodeIfPresent(DlmClientTypes.CreateRule.self, forKey: .createRule)
        createRule = createRuleDecoded
        let retainRuleDecoded = try containerValues.decodeIfPresent(DlmClientTypes.RetainRule.self, forKey: .retainRule)
        retainRule = retainRuleDecoded
        let fastRestoreRuleDecoded = try containerValues.decodeIfPresent(DlmClientTypes.FastRestoreRule.self, forKey: .fastRestoreRule)
        fastRestoreRule = fastRestoreRuleDecoded
        let crossRegionCopyRulesContainer = try containerValues.decodeIfPresent([DlmClientTypes.CrossRegionCopyRule?].self, forKey: .crossRegionCopyRules)
        var crossRegionCopyRulesDecoded0:[DlmClientTypes.CrossRegionCopyRule]? = nil
        if let crossRegionCopyRulesContainer = crossRegionCopyRulesContainer {
            crossRegionCopyRulesDecoded0 = [DlmClientTypes.CrossRegionCopyRule]()
            for structure0 in crossRegionCopyRulesContainer {
                if let structure0 = structure0 {
                    crossRegionCopyRulesDecoded0?.append(structure0)
                }
            }
        }
        crossRegionCopyRules = crossRegionCopyRulesDecoded0
        let shareRulesContainer = try containerValues.decodeIfPresent([DlmClientTypes.ShareRule?].self, forKey: .shareRules)
        var shareRulesDecoded0:[DlmClientTypes.ShareRule]? = nil
        if let shareRulesContainer = shareRulesContainer {
            shareRulesDecoded0 = [DlmClientTypes.ShareRule]()
            for structure0 in shareRulesContainer {
                if let structure0 = structure0 {
                    shareRulesDecoded0?.append(structure0)
                }
            }
        }
        shareRules = shareRulesDecoded0
        let deprecateRuleDecoded = try containerValues.decodeIfPresent(DlmClientTypes.DeprecateRule.self, forKey: .deprecateRule)
        deprecateRule = deprecateRuleDecoded
    }
}
