// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension DlmClientTypes.PolicyDetails: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case actions = "Actions"
        case eventSource = "EventSource"
        case parameters = "Parameters"
        case policyType = "PolicyType"
        case resourceLocations = "ResourceLocations"
        case resourceTypes = "ResourceTypes"
        case schedules = "Schedules"
        case targetTags = "TargetTags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let actions = actions {
            var actionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .actions)
            for actionlist0 in actions {
                try actionsContainer.encode(actionlist0)
            }
        }
        if let eventSource = self.eventSource {
            try encodeContainer.encode(eventSource, forKey: .eventSource)
        }
        if let parameters = self.parameters {
            try encodeContainer.encode(parameters, forKey: .parameters)
        }
        if let policyType = self.policyType {
            try encodeContainer.encode(policyType.rawValue, forKey: .policyType)
        }
        if let resourceLocations = resourceLocations {
            var resourceLocationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .resourceLocations)
            for resourcelocationlist0 in resourceLocations {
                try resourceLocationsContainer.encode(resourcelocationlist0.rawValue)
            }
        }
        if let resourceTypes = resourceTypes {
            var resourceTypesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .resourceTypes)
            for resourcetypevalueslist0 in resourceTypes {
                try resourceTypesContainer.encode(resourcetypevalueslist0.rawValue)
            }
        }
        if let schedules = schedules {
            var schedulesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .schedules)
            for schedulelist0 in schedules {
                try schedulesContainer.encode(schedulelist0)
            }
        }
        if let targetTags = targetTags {
            var targetTagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .targetTags)
            for targettaglist0 in targetTags {
                try targetTagsContainer.encode(targettaglist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let policyTypeDecoded = try containerValues.decodeIfPresent(DlmClientTypes.PolicyTypeValues.self, forKey: .policyType)
        policyType = policyTypeDecoded
        let resourceTypesContainer = try containerValues.decodeIfPresent([DlmClientTypes.ResourceTypeValues?].self, forKey: .resourceTypes)
        var resourceTypesDecoded0:[DlmClientTypes.ResourceTypeValues]? = nil
        if let resourceTypesContainer = resourceTypesContainer {
            resourceTypesDecoded0 = [DlmClientTypes.ResourceTypeValues]()
            for string0 in resourceTypesContainer {
                if let string0 = string0 {
                    resourceTypesDecoded0?.append(string0)
                }
            }
        }
        resourceTypes = resourceTypesDecoded0
        let resourceLocationsContainer = try containerValues.decodeIfPresent([DlmClientTypes.ResourceLocationValues?].self, forKey: .resourceLocations)
        var resourceLocationsDecoded0:[DlmClientTypes.ResourceLocationValues]? = nil
        if let resourceLocationsContainer = resourceLocationsContainer {
            resourceLocationsDecoded0 = [DlmClientTypes.ResourceLocationValues]()
            for string0 in resourceLocationsContainer {
                if let string0 = string0 {
                    resourceLocationsDecoded0?.append(string0)
                }
            }
        }
        resourceLocations = resourceLocationsDecoded0
        let targetTagsContainer = try containerValues.decodeIfPresent([DlmClientTypes.Tag?].self, forKey: .targetTags)
        var targetTagsDecoded0:[DlmClientTypes.Tag]? = nil
        if let targetTagsContainer = targetTagsContainer {
            targetTagsDecoded0 = [DlmClientTypes.Tag]()
            for structure0 in targetTagsContainer {
                if let structure0 = structure0 {
                    targetTagsDecoded0?.append(structure0)
                }
            }
        }
        targetTags = targetTagsDecoded0
        let schedulesContainer = try containerValues.decodeIfPresent([DlmClientTypes.Schedule?].self, forKey: .schedules)
        var schedulesDecoded0:[DlmClientTypes.Schedule]? = nil
        if let schedulesContainer = schedulesContainer {
            schedulesDecoded0 = [DlmClientTypes.Schedule]()
            for structure0 in schedulesContainer {
                if let structure0 = structure0 {
                    schedulesDecoded0?.append(structure0)
                }
            }
        }
        schedules = schedulesDecoded0
        let parametersDecoded = try containerValues.decodeIfPresent(DlmClientTypes.Parameters.self, forKey: .parameters)
        parameters = parametersDecoded
        let eventSourceDecoded = try containerValues.decodeIfPresent(DlmClientTypes.EventSource.self, forKey: .eventSource)
        eventSource = eventSourceDecoded
        let actionsContainer = try containerValues.decodeIfPresent([DlmClientTypes.Action?].self, forKey: .actions)
        var actionsDecoded0:[DlmClientTypes.Action]? = nil
        if let actionsContainer = actionsContainer {
            actionsDecoded0 = [DlmClientTypes.Action]()
            for structure0 in actionsContainer {
                if let structure0 = structure0 {
                    actionsDecoded0?.append(structure0)
                }
            }
        }
        actions = actionsDecoded0
    }
}
