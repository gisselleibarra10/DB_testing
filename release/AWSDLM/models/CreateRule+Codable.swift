// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension DlmClientTypes.CreateRule: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cronExpression = "CronExpression"
        case interval = "Interval"
        case intervalUnit = "IntervalUnit"
        case location = "Location"
        case times = "Times"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cronExpression = self.cronExpression {
            try encodeContainer.encode(cronExpression, forKey: .cronExpression)
        }
        if interval != 0 {
            try encodeContainer.encode(interval, forKey: .interval)
        }
        if let intervalUnit = self.intervalUnit {
            try encodeContainer.encode(intervalUnit.rawValue, forKey: .intervalUnit)
        }
        if let location = self.location {
            try encodeContainer.encode(location.rawValue, forKey: .location)
        }
        if let times = times {
            var timesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .times)
            for timeslist0 in times {
                try timesContainer.encode(timeslist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let locationDecoded = try containerValues.decodeIfPresent(DlmClientTypes.LocationValues.self, forKey: .location)
        location = locationDecoded
        let intervalDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .interval) ?? 0
        interval = intervalDecoded
        let intervalUnitDecoded = try containerValues.decodeIfPresent(DlmClientTypes.IntervalUnitValues.self, forKey: .intervalUnit)
        intervalUnit = intervalUnitDecoded
        let timesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .times)
        var timesDecoded0:[Swift.String]? = nil
        if let timesContainer = timesContainer {
            timesDecoded0 = [Swift.String]()
            for string0 in timesContainer {
                if let string0 = string0 {
                    timesDecoded0?.append(string0)
                }
            }
        }
        times = timesDecoded0
        let cronExpressionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cronExpression)
        cronExpression = cronExpressionDecoded
    }
}
