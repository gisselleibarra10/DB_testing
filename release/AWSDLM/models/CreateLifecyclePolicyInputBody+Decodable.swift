// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateLifecyclePolicyInputBody: Swift.Equatable {
    let executionRoleArn: Swift.String?
    let description: Swift.String?
    let state: DlmClientTypes.SettablePolicyStateValues?
    let policyDetails: DlmClientTypes.PolicyDetails?
    let tags: [Swift.String:Swift.String]?
}

extension CreateLifecyclePolicyInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description = "Description"
        case executionRoleArn = "ExecutionRoleArn"
        case policyDetails = "PolicyDetails"
        case state = "State"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let executionRoleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .executionRoleArn)
        executionRoleArn = executionRoleArnDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let stateDecoded = try containerValues.decodeIfPresent(DlmClientTypes.SettablePolicyStateValues.self, forKey: .state)
        state = stateDecoded
        let policyDetailsDecoded = try containerValues.decodeIfPresent(DlmClientTypes.PolicyDetails.self, forKey: .policyDetails)
        policyDetails = policyDetailsDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
    }
}
