// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension DataBrewClientTypes {
    public enum CompressionFormat: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case brotli
        case bzip2
        case deflate
        case gzip
        case lz4
        case lzo
        case snappy
        case zlib
        case zstd
        case sdkUnknown(Swift.String)

        public static var allCases: [CompressionFormat] {
            return [
                .brotli,
                .bzip2,
                .deflate,
                .gzip,
                .lz4,
                .lzo,
                .snappy,
                .zlib,
                .zstd,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .brotli: return "BROTLI"
            case .bzip2: return "BZIP2"
            case .deflate: return "DEFLATE"
            case .gzip: return "GZIP"
            case .lz4: return "LZ4"
            case .lzo: return "LZO"
            case .snappy: return "SNAPPY"
            case .zlib: return "ZLIB"
            case .zstd: return "ZSTD"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = CompressionFormat(rawValue: rawValue) ?? CompressionFormat.sdkUnknown(rawValue)
        }
    }
}
