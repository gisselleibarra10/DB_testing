// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct CreateProfileJobInput: Swift.Equatable {
    /// Configuration for profile jobs. Used to select columns, do evaluations, and override default parameters of evaluations. When configuration is null, the profile job will run with default settings.
    public var configuration: DataBrewClientTypes.ProfileConfiguration?
    /// The name of the dataset that this job is to act upon.
    /// This member is required.
    public var datasetName: Swift.String?
    /// The Amazon Resource Name (ARN) of an encryption key that is used to protect the job.
    public var encryptionKeyArn: Swift.String?
    /// The encryption mode for the job, which can be one of the following:
    ///
    /// * SSE-KMS - SSE-KMS - Server-side encryption with KMS-managed keys.
    ///
    /// * SSE-S3 - Server-side encryption with keys managed by Amazon S3.
    public var encryptionMode: DataBrewClientTypes.EncryptionMode?
    /// Sample configuration for profile jobs only. Determines the number of rows on which the profile job will be executed. If a JobSample value is not provided, the default value will be used. The default value is CUSTOM_ROWS for the mode parameter and 20000 for the size parameter.
    public var jobSample: DataBrewClientTypes.JobSample?
    /// Enables or disables Amazon CloudWatch logging for the job. If logging is enabled, CloudWatch writes one log stream for each job run.
    public var logSubscription: DataBrewClientTypes.LogSubscription?
    /// The maximum number of nodes that DataBrew can use when the job processes data.
    public var maxCapacity: Swift.Int
    /// The maximum number of times to retry the job after a job run fails.
    public var maxRetries: Swift.Int
    /// The name of the job to be created. Valid characters are alphanumeric (A-Z, a-z, 0-9), hyphen (-), period (.), and space.
    /// This member is required.
    public var name: Swift.String?
    /// Represents an Amazon S3 location (bucket name, bucket owner, and object key) where DataBrew can read input data, or write output from a job.
    /// This member is required.
    public var outputLocation: DataBrewClientTypes.S3Location?
    /// The Amazon Resource Name (ARN) of the Identity and Access Management (IAM) role to be assumed when DataBrew runs the job.
    /// This member is required.
    public var roleArn: Swift.String?
    /// Metadata tags to apply to this job.
    public var tags: [Swift.String:Swift.String]?
    /// The job's timeout in minutes. A job that attempts to run longer than this timeout period ends with a status of TIMEOUT.
    public var timeout: Swift.Int
    /// List of validation configurations that are applied to the profile job.
    public var validationConfigurations: [DataBrewClientTypes.ValidationConfiguration]?

    public init (
        configuration: DataBrewClientTypes.ProfileConfiguration? = nil,
        datasetName: Swift.String? = nil,
        encryptionKeyArn: Swift.String? = nil,
        encryptionMode: DataBrewClientTypes.EncryptionMode? = nil,
        jobSample: DataBrewClientTypes.JobSample? = nil,
        logSubscription: DataBrewClientTypes.LogSubscription? = nil,
        maxCapacity: Swift.Int = 0,
        maxRetries: Swift.Int = 0,
        name: Swift.String? = nil,
        outputLocation: DataBrewClientTypes.S3Location? = nil,
        roleArn: Swift.String? = nil,
        tags: [Swift.String:Swift.String]? = nil,
        timeout: Swift.Int = 0,
        validationConfigurations: [DataBrewClientTypes.ValidationConfiguration]? = nil
    )
    {
        self.configuration = configuration
        self.datasetName = datasetName
        self.encryptionKeyArn = encryptionKeyArn
        self.encryptionMode = encryptionMode
        self.jobSample = jobSample
        self.logSubscription = logSubscription
        self.maxCapacity = maxCapacity
        self.maxRetries = maxRetries
        self.name = name
        self.outputLocation = outputLocation
        self.roleArn = roleArn
        self.tags = tags
        self.timeout = timeout
        self.validationConfigurations = validationConfigurations
    }
}
