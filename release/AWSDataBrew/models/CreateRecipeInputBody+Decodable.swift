// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateRecipeInputBody: Swift.Equatable {
    let description: Swift.String?
    let name: Swift.String?
    let steps: [DataBrewClientTypes.RecipeStep]?
    let tags: [Swift.String:Swift.String]?
}

extension CreateRecipeInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description = "Description"
        case name = "Name"
        case steps = "Steps"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let stepsContainer = try containerValues.decodeIfPresent([DataBrewClientTypes.RecipeStep?].self, forKey: .steps)
        var stepsDecoded0:[DataBrewClientTypes.RecipeStep]? = nil
        if let stepsContainer = stepsContainer {
            stepsDecoded0 = [DataBrewClientTypes.RecipeStep]()
            for structure0 in stepsContainer {
                if let structure0 = structure0 {
                    stepsDecoded0?.append(structure0)
                }
            }
        }
        steps = stepsDecoded0
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
    }
}
