// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension DataBrewClientTypes.Rule: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case checkExpression = "CheckExpression"
        case columnSelectors = "ColumnSelectors"
        case disabled = "Disabled"
        case name = "Name"
        case substitutionMap = "SubstitutionMap"
        case threshold = "Threshold"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let checkExpression = self.checkExpression {
            try encodeContainer.encode(checkExpression, forKey: .checkExpression)
        }
        if let columnSelectors = columnSelectors {
            var columnSelectorsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .columnSelectors)
            for columnselectorlist0 in columnSelectors {
                try columnSelectorsContainer.encode(columnselectorlist0)
            }
        }
        if disabled != false {
            try encodeContainer.encode(disabled, forKey: .disabled)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let substitutionMap = substitutionMap {
            var substitutionMapContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .substitutionMap)
            for (dictKey0, valuesmap0) in substitutionMap {
                try substitutionMapContainer.encode(valuesmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let threshold = self.threshold {
            try encodeContainer.encode(threshold, forKey: .threshold)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let disabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .disabled) ?? false
        disabled = disabledDecoded
        let checkExpressionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .checkExpression)
        checkExpression = checkExpressionDecoded
        let substitutionMapContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .substitutionMap)
        var substitutionMapDecoded0: [Swift.String:Swift.String]? = nil
        if let substitutionMapContainer = substitutionMapContainer {
            substitutionMapDecoded0 = [Swift.String:Swift.String]()
            for (key0, conditionvalue0) in substitutionMapContainer {
                if let conditionvalue0 = conditionvalue0 {
                    substitutionMapDecoded0?[key0] = conditionvalue0
                }
            }
        }
        substitutionMap = substitutionMapDecoded0
        let thresholdDecoded = try containerValues.decodeIfPresent(DataBrewClientTypes.Threshold.self, forKey: .threshold)
        threshold = thresholdDecoded
        let columnSelectorsContainer = try containerValues.decodeIfPresent([DataBrewClientTypes.ColumnSelector?].self, forKey: .columnSelectors)
        var columnSelectorsDecoded0:[DataBrewClientTypes.ColumnSelector]? = nil
        if let columnSelectorsContainer = columnSelectorsContainer {
            columnSelectorsDecoded0 = [DataBrewClientTypes.ColumnSelector]()
            for structure0 in columnSelectorsContainer {
                if let structure0 = structure0 {
                    columnSelectorsDecoded0?.append(structure0)
                }
            }
        }
        columnSelectors = columnSelectorsDecoded0
    }
}
