// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension DataBrewClientTypes {
    /// Represents one run of a DataBrew job.
    public struct JobRun: Swift.Equatable {
        /// The number of times that DataBrew has attempted to run the job.
        public var attempt: Swift.Int
        /// The date and time when the job completed processing.
        public var completedOn: ClientRuntime.Date?
        /// One or more artifacts that represent the Glue Data Catalog output from running the job.
        public var dataCatalogOutputs: [DataBrewClientTypes.DataCatalogOutput]?
        /// Represents a list of JDBC database output objects which defines the output destination for a DataBrew recipe job to write into.
        public var databaseOutputs: [DataBrewClientTypes.DatabaseOutput]?
        /// The name of the dataset for the job to process.
        public var datasetName: Swift.String?
        /// A message indicating an error (if any) that was encountered when the job ran.
        public var errorMessage: Swift.String?
        /// The amount of time, in seconds, during which a job run consumed resources.
        public var executionTime: Swift.Int
        /// The name of the job being processed during this run.
        public var jobName: Swift.String?
        /// A sample configuration for profile jobs only, which determines the number of rows on which the profile job is run. If a JobSample value isn't provided, the default is used. The default value is CUSTOM_ROWS for the mode parameter and 20,000 for the size parameter.
        public var jobSample: DataBrewClientTypes.JobSample?
        /// The name of an Amazon CloudWatch log group, where the job writes diagnostic messages when it runs.
        public var logGroupName: Swift.String?
        /// The current status of Amazon CloudWatch logging for the job run.
        public var logSubscription: DataBrewClientTypes.LogSubscription?
        /// One or more output artifacts from a job run.
        public var outputs: [DataBrewClientTypes.Output]?
        /// The set of steps processed by the job.
        public var recipeReference: DataBrewClientTypes.RecipeReference?
        /// The unique identifier of the job run.
        public var runId: Swift.String?
        /// The Amazon Resource Name (ARN) of the user who initiated the job run.
        public var startedBy: Swift.String?
        /// The date and time when the job run began.
        public var startedOn: ClientRuntime.Date?
        /// The current state of the job run entity itself.
        public var state: DataBrewClientTypes.JobRunState?
        /// List of validation configurations that are applied to the profile job run.
        public var validationConfigurations: [DataBrewClientTypes.ValidationConfiguration]?

        public init (
            attempt: Swift.Int = 0,
            completedOn: ClientRuntime.Date? = nil,
            dataCatalogOutputs: [DataBrewClientTypes.DataCatalogOutput]? = nil,
            databaseOutputs: [DataBrewClientTypes.DatabaseOutput]? = nil,
            datasetName: Swift.String? = nil,
            errorMessage: Swift.String? = nil,
            executionTime: Swift.Int = 0,
            jobName: Swift.String? = nil,
            jobSample: DataBrewClientTypes.JobSample? = nil,
            logGroupName: Swift.String? = nil,
            logSubscription: DataBrewClientTypes.LogSubscription? = nil,
            outputs: [DataBrewClientTypes.Output]? = nil,
            recipeReference: DataBrewClientTypes.RecipeReference? = nil,
            runId: Swift.String? = nil,
            startedBy: Swift.String? = nil,
            startedOn: ClientRuntime.Date? = nil,
            state: DataBrewClientTypes.JobRunState? = nil,
            validationConfigurations: [DataBrewClientTypes.ValidationConfiguration]? = nil
        )
        {
            self.attempt = attempt
            self.completedOn = completedOn
            self.dataCatalogOutputs = dataCatalogOutputs
            self.databaseOutputs = databaseOutputs
            self.datasetName = datasetName
            self.errorMessage = errorMessage
            self.executionTime = executionTime
            self.jobName = jobName
            self.jobSample = jobSample
            self.logGroupName = logGroupName
            self.logSubscription = logSubscription
            self.outputs = outputs
            self.recipeReference = recipeReference
            self.runId = runId
            self.startedBy = startedBy
            self.startedOn = startedOn
            self.state = state
            self.validationConfigurations = validationConfigurations
        }
    }

}
