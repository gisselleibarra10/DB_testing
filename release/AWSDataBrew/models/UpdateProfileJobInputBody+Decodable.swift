// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct UpdateProfileJobInputBody: Swift.Equatable {
    let configuration: DataBrewClientTypes.ProfileConfiguration?
    let encryptionKeyArn: Swift.String?
    let encryptionMode: DataBrewClientTypes.EncryptionMode?
    let logSubscription: DataBrewClientTypes.LogSubscription?
    let maxCapacity: Swift.Int
    let maxRetries: Swift.Int
    let outputLocation: DataBrewClientTypes.S3Location?
    let validationConfigurations: [DataBrewClientTypes.ValidationConfiguration]?
    let roleArn: Swift.String?
    let timeout: Swift.Int
    let jobSample: DataBrewClientTypes.JobSample?
}

extension UpdateProfileJobInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configuration = "Configuration"
        case encryptionKeyArn = "EncryptionKeyArn"
        case encryptionMode = "EncryptionMode"
        case jobSample = "JobSample"
        case logSubscription = "LogSubscription"
        case maxCapacity = "MaxCapacity"
        case maxRetries = "MaxRetries"
        case outputLocation = "OutputLocation"
        case roleArn = "RoleArn"
        case timeout = "Timeout"
        case validationConfigurations = "ValidationConfigurations"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let configurationDecoded = try containerValues.decodeIfPresent(DataBrewClientTypes.ProfileConfiguration.self, forKey: .configuration)
        configuration = configurationDecoded
        let encryptionKeyArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .encryptionKeyArn)
        encryptionKeyArn = encryptionKeyArnDecoded
        let encryptionModeDecoded = try containerValues.decodeIfPresent(DataBrewClientTypes.EncryptionMode.self, forKey: .encryptionMode)
        encryptionMode = encryptionModeDecoded
        let logSubscriptionDecoded = try containerValues.decodeIfPresent(DataBrewClientTypes.LogSubscription.self, forKey: .logSubscription)
        logSubscription = logSubscriptionDecoded
        let maxCapacityDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxCapacity) ?? 0
        maxCapacity = maxCapacityDecoded
        let maxRetriesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxRetries) ?? 0
        maxRetries = maxRetriesDecoded
        let outputLocationDecoded = try containerValues.decodeIfPresent(DataBrewClientTypes.S3Location.self, forKey: .outputLocation)
        outputLocation = outputLocationDecoded
        let validationConfigurationsContainer = try containerValues.decodeIfPresent([DataBrewClientTypes.ValidationConfiguration?].self, forKey: .validationConfigurations)
        var validationConfigurationsDecoded0:[DataBrewClientTypes.ValidationConfiguration]? = nil
        if let validationConfigurationsContainer = validationConfigurationsContainer {
            validationConfigurationsDecoded0 = [DataBrewClientTypes.ValidationConfiguration]()
            for structure0 in validationConfigurationsContainer {
                if let structure0 = structure0 {
                    validationConfigurationsDecoded0?.append(structure0)
                }
            }
        }
        validationConfigurations = validationConfigurationsDecoded0
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let timeoutDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .timeout) ?? 0
        timeout = timeoutDecoded
        let jobSampleDecoded = try containerValues.decodeIfPresent(DataBrewClientTypes.JobSample.self, forKey: .jobSample)
        jobSample = jobSampleDecoded
    }
}
