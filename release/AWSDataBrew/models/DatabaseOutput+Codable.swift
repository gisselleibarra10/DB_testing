// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension DataBrewClientTypes.DatabaseOutput: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case databaseOptions = "DatabaseOptions"
        case databaseOutputMode = "DatabaseOutputMode"
        case glueConnectionName = "GlueConnectionName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let databaseOptions = self.databaseOptions {
            try encodeContainer.encode(databaseOptions, forKey: .databaseOptions)
        }
        if let databaseOutputMode = self.databaseOutputMode {
            try encodeContainer.encode(databaseOutputMode.rawValue, forKey: .databaseOutputMode)
        }
        if let glueConnectionName = self.glueConnectionName {
            try encodeContainer.encode(glueConnectionName, forKey: .glueConnectionName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let glueConnectionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .glueConnectionName)
        glueConnectionName = glueConnectionNameDecoded
        let databaseOptionsDecoded = try containerValues.decodeIfPresent(DataBrewClientTypes.DatabaseTableOutputOptions.self, forKey: .databaseOptions)
        databaseOptions = databaseOptionsDecoded
        let databaseOutputModeDecoded = try containerValues.decodeIfPresent(DataBrewClientTypes.DatabaseOutputMode.self, forKey: .databaseOutputMode)
        databaseOutputMode = databaseOutputModeDecoded
    }
}
