// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateRecipeJobInputBody: Swift.Equatable {
    let datasetName: Swift.String?
    let encryptionKeyArn: Swift.String?
    let encryptionMode: DataBrewClientTypes.EncryptionMode?
    let name: Swift.String?
    let logSubscription: DataBrewClientTypes.LogSubscription?
    let maxCapacity: Swift.Int
    let maxRetries: Swift.Int
    let outputs: [DataBrewClientTypes.Output]?
    let dataCatalogOutputs: [DataBrewClientTypes.DataCatalogOutput]?
    let databaseOutputs: [DataBrewClientTypes.DatabaseOutput]?
    let projectName: Swift.String?
    let recipeReference: DataBrewClientTypes.RecipeReference?
    let roleArn: Swift.String?
    let tags: [Swift.String:Swift.String]?
    let timeout: Swift.Int
}

extension CreateRecipeJobInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dataCatalogOutputs = "DataCatalogOutputs"
        case databaseOutputs = "DatabaseOutputs"
        case datasetName = "DatasetName"
        case encryptionKeyArn = "EncryptionKeyArn"
        case encryptionMode = "EncryptionMode"
        case logSubscription = "LogSubscription"
        case maxCapacity = "MaxCapacity"
        case maxRetries = "MaxRetries"
        case name = "Name"
        case outputs = "Outputs"
        case projectName = "ProjectName"
        case recipeReference = "RecipeReference"
        case roleArn = "RoleArn"
        case tags = "Tags"
        case timeout = "Timeout"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let datasetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .datasetName)
        datasetName = datasetNameDecoded
        let encryptionKeyArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .encryptionKeyArn)
        encryptionKeyArn = encryptionKeyArnDecoded
        let encryptionModeDecoded = try containerValues.decodeIfPresent(DataBrewClientTypes.EncryptionMode.self, forKey: .encryptionMode)
        encryptionMode = encryptionModeDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let logSubscriptionDecoded = try containerValues.decodeIfPresent(DataBrewClientTypes.LogSubscription.self, forKey: .logSubscription)
        logSubscription = logSubscriptionDecoded
        let maxCapacityDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxCapacity) ?? 0
        maxCapacity = maxCapacityDecoded
        let maxRetriesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxRetries) ?? 0
        maxRetries = maxRetriesDecoded
        let outputsContainer = try containerValues.decodeIfPresent([DataBrewClientTypes.Output?].self, forKey: .outputs)
        var outputsDecoded0:[DataBrewClientTypes.Output]? = nil
        if let outputsContainer = outputsContainer {
            outputsDecoded0 = [DataBrewClientTypes.Output]()
            for structure0 in outputsContainer {
                if let structure0 = structure0 {
                    outputsDecoded0?.append(structure0)
                }
            }
        }
        outputs = outputsDecoded0
        let dataCatalogOutputsContainer = try containerValues.decodeIfPresent([DataBrewClientTypes.DataCatalogOutput?].self, forKey: .dataCatalogOutputs)
        var dataCatalogOutputsDecoded0:[DataBrewClientTypes.DataCatalogOutput]? = nil
        if let dataCatalogOutputsContainer = dataCatalogOutputsContainer {
            dataCatalogOutputsDecoded0 = [DataBrewClientTypes.DataCatalogOutput]()
            for structure0 in dataCatalogOutputsContainer {
                if let structure0 = structure0 {
                    dataCatalogOutputsDecoded0?.append(structure0)
                }
            }
        }
        dataCatalogOutputs = dataCatalogOutputsDecoded0
        let databaseOutputsContainer = try containerValues.decodeIfPresent([DataBrewClientTypes.DatabaseOutput?].self, forKey: .databaseOutputs)
        var databaseOutputsDecoded0:[DataBrewClientTypes.DatabaseOutput]? = nil
        if let databaseOutputsContainer = databaseOutputsContainer {
            databaseOutputsDecoded0 = [DataBrewClientTypes.DatabaseOutput]()
            for structure0 in databaseOutputsContainer {
                if let structure0 = structure0 {
                    databaseOutputsDecoded0?.append(structure0)
                }
            }
        }
        databaseOutputs = databaseOutputsDecoded0
        let projectNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .projectName)
        projectName = projectNameDecoded
        let recipeReferenceDecoded = try containerValues.decodeIfPresent(DataBrewClientTypes.RecipeReference.self, forKey: .recipeReference)
        recipeReference = recipeReferenceDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
        let timeoutDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .timeout) ?? 0
        timeout = timeoutDecoded
    }
}
