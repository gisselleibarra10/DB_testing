// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension DataBrewClientTypes.Job: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountId = "AccountId"
        case createDate = "CreateDate"
        case createdBy = "CreatedBy"
        case dataCatalogOutputs = "DataCatalogOutputs"
        case databaseOutputs = "DatabaseOutputs"
        case datasetName = "DatasetName"
        case encryptionKeyArn = "EncryptionKeyArn"
        case encryptionMode = "EncryptionMode"
        case jobSample = "JobSample"
        case lastModifiedBy = "LastModifiedBy"
        case lastModifiedDate = "LastModifiedDate"
        case logSubscription = "LogSubscription"
        case maxCapacity = "MaxCapacity"
        case maxRetries = "MaxRetries"
        case name = "Name"
        case outputs = "Outputs"
        case projectName = "ProjectName"
        case recipeReference = "RecipeReference"
        case resourceArn = "ResourceArn"
        case roleArn = "RoleArn"
        case tags = "Tags"
        case timeout = "Timeout"
        case type = "Type"
        case validationConfigurations = "ValidationConfigurations"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accountId = self.accountId {
            try encodeContainer.encode(accountId, forKey: .accountId)
        }
        if let createDate = self.createDate {
            try encodeContainer.encode(createDate.timeIntervalSince1970, forKey: .createDate)
        }
        if let createdBy = self.createdBy {
            try encodeContainer.encode(createdBy, forKey: .createdBy)
        }
        if let dataCatalogOutputs = dataCatalogOutputs {
            var dataCatalogOutputsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .dataCatalogOutputs)
            for datacatalogoutputlist0 in dataCatalogOutputs {
                try dataCatalogOutputsContainer.encode(datacatalogoutputlist0)
            }
        }
        if let databaseOutputs = databaseOutputs {
            var databaseOutputsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .databaseOutputs)
            for databaseoutputlist0 in databaseOutputs {
                try databaseOutputsContainer.encode(databaseoutputlist0)
            }
        }
        if let datasetName = self.datasetName {
            try encodeContainer.encode(datasetName, forKey: .datasetName)
        }
        if let encryptionKeyArn = self.encryptionKeyArn {
            try encodeContainer.encode(encryptionKeyArn, forKey: .encryptionKeyArn)
        }
        if let encryptionMode = self.encryptionMode {
            try encodeContainer.encode(encryptionMode.rawValue, forKey: .encryptionMode)
        }
        if let jobSample = self.jobSample {
            try encodeContainer.encode(jobSample, forKey: .jobSample)
        }
        if let lastModifiedBy = self.lastModifiedBy {
            try encodeContainer.encode(lastModifiedBy, forKey: .lastModifiedBy)
        }
        if let lastModifiedDate = self.lastModifiedDate {
            try encodeContainer.encode(lastModifiedDate.timeIntervalSince1970, forKey: .lastModifiedDate)
        }
        if let logSubscription = self.logSubscription {
            try encodeContainer.encode(logSubscription.rawValue, forKey: .logSubscription)
        }
        if maxCapacity != 0 {
            try encodeContainer.encode(maxCapacity, forKey: .maxCapacity)
        }
        if maxRetries != 0 {
            try encodeContainer.encode(maxRetries, forKey: .maxRetries)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let outputs = outputs {
            var outputsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .outputs)
            for outputlist0 in outputs {
                try outputsContainer.encode(outputlist0)
            }
        }
        if let projectName = self.projectName {
            try encodeContainer.encode(projectName, forKey: .projectName)
        }
        if let recipeReference = self.recipeReference {
            try encodeContainer.encode(recipeReference, forKey: .recipeReference)
        }
        if let resourceArn = self.resourceArn {
            try encodeContainer.encode(resourceArn, forKey: .resourceArn)
        }
        if let roleArn = self.roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, tagmap0) in tags {
                try tagsContainer.encode(tagmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if timeout != 0 {
            try encodeContainer.encode(timeout, forKey: .timeout)
        }
        if let type = self.type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
        if let validationConfigurations = validationConfigurations {
            var validationConfigurationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .validationConfigurations)
            for validationconfigurationlist0 in validationConfigurations {
                try validationConfigurationsContainer.encode(validationconfigurationlist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let accountIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .accountId)
        accountId = accountIdDecoded
        let createdByDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .createdBy)
        createdBy = createdByDecoded
        let createDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createDate)
        createDate = createDateDecoded
        let datasetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .datasetName)
        datasetName = datasetNameDecoded
        let encryptionKeyArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .encryptionKeyArn)
        encryptionKeyArn = encryptionKeyArnDecoded
        let encryptionModeDecoded = try containerValues.decodeIfPresent(DataBrewClientTypes.EncryptionMode.self, forKey: .encryptionMode)
        encryptionMode = encryptionModeDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let typeDecoded = try containerValues.decodeIfPresent(DataBrewClientTypes.JobType.self, forKey: .type)
        type = typeDecoded
        let lastModifiedByDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastModifiedBy)
        lastModifiedBy = lastModifiedByDecoded
        let lastModifiedDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedDate)
        lastModifiedDate = lastModifiedDateDecoded
        let logSubscriptionDecoded = try containerValues.decodeIfPresent(DataBrewClientTypes.LogSubscription.self, forKey: .logSubscription)
        logSubscription = logSubscriptionDecoded
        let maxCapacityDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxCapacity) ?? 0
        maxCapacity = maxCapacityDecoded
        let maxRetriesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxRetries) ?? 0
        maxRetries = maxRetriesDecoded
        let outputsContainer = try containerValues.decodeIfPresent([DataBrewClientTypes.Output?].self, forKey: .outputs)
        var outputsDecoded0:[DataBrewClientTypes.Output]? = nil
        if let outputsContainer = outputsContainer {
            outputsDecoded0 = [DataBrewClientTypes.Output]()
            for structure0 in outputsContainer {
                if let structure0 = structure0 {
                    outputsDecoded0?.append(structure0)
                }
            }
        }
        outputs = outputsDecoded0
        let dataCatalogOutputsContainer = try containerValues.decodeIfPresent([DataBrewClientTypes.DataCatalogOutput?].self, forKey: .dataCatalogOutputs)
        var dataCatalogOutputsDecoded0:[DataBrewClientTypes.DataCatalogOutput]? = nil
        if let dataCatalogOutputsContainer = dataCatalogOutputsContainer {
            dataCatalogOutputsDecoded0 = [DataBrewClientTypes.DataCatalogOutput]()
            for structure0 in dataCatalogOutputsContainer {
                if let structure0 = structure0 {
                    dataCatalogOutputsDecoded0?.append(structure0)
                }
            }
        }
        dataCatalogOutputs = dataCatalogOutputsDecoded0
        let databaseOutputsContainer = try containerValues.decodeIfPresent([DataBrewClientTypes.DatabaseOutput?].self, forKey: .databaseOutputs)
        var databaseOutputsDecoded0:[DataBrewClientTypes.DatabaseOutput]? = nil
        if let databaseOutputsContainer = databaseOutputsContainer {
            databaseOutputsDecoded0 = [DataBrewClientTypes.DatabaseOutput]()
            for structure0 in databaseOutputsContainer {
                if let structure0 = structure0 {
                    databaseOutputsDecoded0?.append(structure0)
                }
            }
        }
        databaseOutputs = databaseOutputsDecoded0
        let projectNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .projectName)
        projectName = projectNameDecoded
        let recipeReferenceDecoded = try containerValues.decodeIfPresent(DataBrewClientTypes.RecipeReference.self, forKey: .recipeReference)
        recipeReference = recipeReferenceDecoded
        let resourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceArn)
        resourceArn = resourceArnDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let timeoutDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .timeout) ?? 0
        timeout = timeoutDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
        let jobSampleDecoded = try containerValues.decodeIfPresent(DataBrewClientTypes.JobSample.self, forKey: .jobSample)
        jobSample = jobSampleDecoded
        let validationConfigurationsContainer = try containerValues.decodeIfPresent([DataBrewClientTypes.ValidationConfiguration?].self, forKey: .validationConfigurations)
        var validationConfigurationsDecoded0:[DataBrewClientTypes.ValidationConfiguration]? = nil
        if let validationConfigurationsContainer = validationConfigurationsContainer {
            validationConfigurationsDecoded0 = [DataBrewClientTypes.ValidationConfiguration]()
            for structure0 in validationConfigurationsContainer {
                if let structure0 = structure0 {
                    validationConfigurationsDecoded0?.append(structure0)
                }
            }
        }
        validationConfigurations = validationConfigurationsDecoded0
    }
}
