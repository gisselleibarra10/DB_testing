// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension DataBrewClientTypes {
    /// Represents a single data quality requirement that should be validated in the scope of this dataset.
    public struct Rule: Swift.Equatable {
        /// The expression which includes column references, condition names followed by variable references, possibly grouped and combined with other conditions. For example, (:col1 starts_with :prefix1 or :col1 starts_with :prefix2) and (:col1 ends_with :suffix1 or :col1 ends_with :suffix2). Column and value references are substitution variables that should start with the ':' symbol. Depending on the context, substitution variables' values can be either an actual value or a column name. These values are defined in the SubstitutionMap. If a CheckExpression starts with a column reference, then ColumnSelectors in the rule should be null. If ColumnSelectors has been defined, then there should be no column reference in the left side of a condition, for example, is_between :val1 and :val2. For more information, see [Available checks](https://docs.aws.amazon.com/databrew/latest/dg/profile.data-quality-available-checks.html)
        /// This member is required.
        public var checkExpression: Swift.String?
        /// List of column selectors. Selectors can be used to select columns using a name or regular expression from the dataset. Rule will be applied to selected columns.
        public var columnSelectors: [DataBrewClientTypes.ColumnSelector]?
        /// A value that specifies whether the rule is disabled. Once a rule is disabled, a profile job will not validate it during a job run. Default value is false.
        public var disabled: Swift.Bool
        /// The name of the rule.
        /// This member is required.
        public var name: Swift.String?
        /// The map of substitution variable names to their values used in a check expression. Variable names should start with a ':' (colon). Variable values can either be actual values or column names. To differentiate between the two, column names should be enclosed in backticks, for example, ":col1": "`Column A`".
        public var substitutionMap: [Swift.String:Swift.String]?
        /// The threshold used with a non-aggregate check expression. Non-aggregate check expressions will be applied to each row in a specific column, and the threshold will be used to determine whether the validation succeeds.
        public var threshold: DataBrewClientTypes.Threshold?

        public init (
            checkExpression: Swift.String? = nil,
            columnSelectors: [DataBrewClientTypes.ColumnSelector]? = nil,
            disabled: Swift.Bool = false,
            name: Swift.String? = nil,
            substitutionMap: [Swift.String:Swift.String]? = nil,
            threshold: DataBrewClientTypes.Threshold? = nil
        )
        {
            self.checkExpression = checkExpression
            self.columnSelectors = columnSelectors
            self.disabled = disabled
            self.name = name
            self.substitutionMap = substitutionMap
            self.threshold = threshold
        }
    }

}
