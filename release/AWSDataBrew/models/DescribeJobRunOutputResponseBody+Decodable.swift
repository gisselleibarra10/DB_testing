// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeJobRunOutputResponseBody: Swift.Equatable {
    let attempt: Swift.Int
    let completedOn: ClientRuntime.Date?
    let datasetName: Swift.String?
    let errorMessage: Swift.String?
    let executionTime: Swift.Int
    let jobName: Swift.String?
    let profileConfiguration: DataBrewClientTypes.ProfileConfiguration?
    let validationConfigurations: [DataBrewClientTypes.ValidationConfiguration]?
    let runId: Swift.String?
    let state: DataBrewClientTypes.JobRunState?
    let logSubscription: DataBrewClientTypes.LogSubscription?
    let logGroupName: Swift.String?
    let outputs: [DataBrewClientTypes.Output]?
    let dataCatalogOutputs: [DataBrewClientTypes.DataCatalogOutput]?
    let databaseOutputs: [DataBrewClientTypes.DatabaseOutput]?
    let recipeReference: DataBrewClientTypes.RecipeReference?
    let startedBy: Swift.String?
    let startedOn: ClientRuntime.Date?
    let jobSample: DataBrewClientTypes.JobSample?
}

extension DescribeJobRunOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attempt = "Attempt"
        case completedOn = "CompletedOn"
        case dataCatalogOutputs = "DataCatalogOutputs"
        case databaseOutputs = "DatabaseOutputs"
        case datasetName = "DatasetName"
        case errorMessage = "ErrorMessage"
        case executionTime = "ExecutionTime"
        case jobName = "JobName"
        case jobSample = "JobSample"
        case logGroupName = "LogGroupName"
        case logSubscription = "LogSubscription"
        case outputs = "Outputs"
        case profileConfiguration = "ProfileConfiguration"
        case recipeReference = "RecipeReference"
        case runId = "RunId"
        case startedBy = "StartedBy"
        case startedOn = "StartedOn"
        case state = "State"
        case validationConfigurations = "ValidationConfigurations"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let attemptDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .attempt) ?? 0
        attempt = attemptDecoded
        let completedOnDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .completedOn)
        completedOn = completedOnDecoded
        let datasetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .datasetName)
        datasetName = datasetNameDecoded
        let errorMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .errorMessage)
        errorMessage = errorMessageDecoded
        let executionTimeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .executionTime) ?? 0
        executionTime = executionTimeDecoded
        let jobNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobName)
        jobName = jobNameDecoded
        let profileConfigurationDecoded = try containerValues.decodeIfPresent(DataBrewClientTypes.ProfileConfiguration.self, forKey: .profileConfiguration)
        profileConfiguration = profileConfigurationDecoded
        let validationConfigurationsContainer = try containerValues.decodeIfPresent([DataBrewClientTypes.ValidationConfiguration?].self, forKey: .validationConfigurations)
        var validationConfigurationsDecoded0:[DataBrewClientTypes.ValidationConfiguration]? = nil
        if let validationConfigurationsContainer = validationConfigurationsContainer {
            validationConfigurationsDecoded0 = [DataBrewClientTypes.ValidationConfiguration]()
            for structure0 in validationConfigurationsContainer {
                if let structure0 = structure0 {
                    validationConfigurationsDecoded0?.append(structure0)
                }
            }
        }
        validationConfigurations = validationConfigurationsDecoded0
        let runIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .runId)
        runId = runIdDecoded
        let stateDecoded = try containerValues.decodeIfPresent(DataBrewClientTypes.JobRunState.self, forKey: .state)
        state = stateDecoded
        let logSubscriptionDecoded = try containerValues.decodeIfPresent(DataBrewClientTypes.LogSubscription.self, forKey: .logSubscription)
        logSubscription = logSubscriptionDecoded
        let logGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logGroupName)
        logGroupName = logGroupNameDecoded
        let outputsContainer = try containerValues.decodeIfPresent([DataBrewClientTypes.Output?].self, forKey: .outputs)
        var outputsDecoded0:[DataBrewClientTypes.Output]? = nil
        if let outputsContainer = outputsContainer {
            outputsDecoded0 = [DataBrewClientTypes.Output]()
            for structure0 in outputsContainer {
                if let structure0 = structure0 {
                    outputsDecoded0?.append(structure0)
                }
            }
        }
        outputs = outputsDecoded0
        let dataCatalogOutputsContainer = try containerValues.decodeIfPresent([DataBrewClientTypes.DataCatalogOutput?].self, forKey: .dataCatalogOutputs)
        var dataCatalogOutputsDecoded0:[DataBrewClientTypes.DataCatalogOutput]? = nil
        if let dataCatalogOutputsContainer = dataCatalogOutputsContainer {
            dataCatalogOutputsDecoded0 = [DataBrewClientTypes.DataCatalogOutput]()
            for structure0 in dataCatalogOutputsContainer {
                if let structure0 = structure0 {
                    dataCatalogOutputsDecoded0?.append(structure0)
                }
            }
        }
        dataCatalogOutputs = dataCatalogOutputsDecoded0
        let databaseOutputsContainer = try containerValues.decodeIfPresent([DataBrewClientTypes.DatabaseOutput?].self, forKey: .databaseOutputs)
        var databaseOutputsDecoded0:[DataBrewClientTypes.DatabaseOutput]? = nil
        if let databaseOutputsContainer = databaseOutputsContainer {
            databaseOutputsDecoded0 = [DataBrewClientTypes.DatabaseOutput]()
            for structure0 in databaseOutputsContainer {
                if let structure0 = structure0 {
                    databaseOutputsDecoded0?.append(structure0)
                }
            }
        }
        databaseOutputs = databaseOutputsDecoded0
        let recipeReferenceDecoded = try containerValues.decodeIfPresent(DataBrewClientTypes.RecipeReference.self, forKey: .recipeReference)
        recipeReference = recipeReferenceDecoded
        let startedByDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .startedBy)
        startedBy = startedByDecoded
        let startedOnDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .startedOn)
        startedOn = startedOnDecoded
        let jobSampleDecoded = try containerValues.decodeIfPresent(DataBrewClientTypes.JobSample.self, forKey: .jobSample)
        jobSample = jobSampleDecoded
    }
}
