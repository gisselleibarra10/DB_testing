// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CreateRecipeJobInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dataCatalogOutputs = "DataCatalogOutputs"
        case databaseOutputs = "DatabaseOutputs"
        case datasetName = "DatasetName"
        case encryptionKeyArn = "EncryptionKeyArn"
        case encryptionMode = "EncryptionMode"
        case logSubscription = "LogSubscription"
        case maxCapacity = "MaxCapacity"
        case maxRetries = "MaxRetries"
        case name = "Name"
        case outputs = "Outputs"
        case projectName = "ProjectName"
        case recipeReference = "RecipeReference"
        case roleArn = "RoleArn"
        case tags = "Tags"
        case timeout = "Timeout"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dataCatalogOutputs = dataCatalogOutputs {
            var dataCatalogOutputsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .dataCatalogOutputs)
            for datacatalogoutputlist0 in dataCatalogOutputs {
                try dataCatalogOutputsContainer.encode(datacatalogoutputlist0)
            }
        }
        if let databaseOutputs = databaseOutputs {
            var databaseOutputsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .databaseOutputs)
            for databaseoutputlist0 in databaseOutputs {
                try databaseOutputsContainer.encode(databaseoutputlist0)
            }
        }
        if let datasetName = self.datasetName {
            try encodeContainer.encode(datasetName, forKey: .datasetName)
        }
        if let encryptionKeyArn = self.encryptionKeyArn {
            try encodeContainer.encode(encryptionKeyArn, forKey: .encryptionKeyArn)
        }
        if let encryptionMode = self.encryptionMode {
            try encodeContainer.encode(encryptionMode.rawValue, forKey: .encryptionMode)
        }
        if let logSubscription = self.logSubscription {
            try encodeContainer.encode(logSubscription.rawValue, forKey: .logSubscription)
        }
        if maxCapacity != 0 {
            try encodeContainer.encode(maxCapacity, forKey: .maxCapacity)
        }
        if maxRetries != 0 {
            try encodeContainer.encode(maxRetries, forKey: .maxRetries)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let outputs = outputs {
            var outputsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .outputs)
            for outputlist0 in outputs {
                try outputsContainer.encode(outputlist0)
            }
        }
        if let projectName = self.projectName {
            try encodeContainer.encode(projectName, forKey: .projectName)
        }
        if let recipeReference = self.recipeReference {
            try encodeContainer.encode(recipeReference, forKey: .recipeReference)
        }
        if let roleArn = self.roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, tagmap0) in tags {
                try tagsContainer.encode(tagmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if timeout != 0 {
            try encodeContainer.encode(timeout, forKey: .timeout)
        }
    }
}
