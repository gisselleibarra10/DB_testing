// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension DataBrewClientTypes.Input: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dataCatalogInputDefinition = "DataCatalogInputDefinition"
        case databaseInputDefinition = "DatabaseInputDefinition"
        case metadata = "Metadata"
        case s3InputDefinition = "S3InputDefinition"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dataCatalogInputDefinition = self.dataCatalogInputDefinition {
            try encodeContainer.encode(dataCatalogInputDefinition, forKey: .dataCatalogInputDefinition)
        }
        if let databaseInputDefinition = self.databaseInputDefinition {
            try encodeContainer.encode(databaseInputDefinition, forKey: .databaseInputDefinition)
        }
        if let metadata = self.metadata {
            try encodeContainer.encode(metadata, forKey: .metadata)
        }
        if let s3InputDefinition = self.s3InputDefinition {
            try encodeContainer.encode(s3InputDefinition, forKey: .s3InputDefinition)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let s3InputDefinitionDecoded = try containerValues.decodeIfPresent(DataBrewClientTypes.S3Location.self, forKey: .s3InputDefinition)
        s3InputDefinition = s3InputDefinitionDecoded
        let dataCatalogInputDefinitionDecoded = try containerValues.decodeIfPresent(DataBrewClientTypes.DataCatalogInputDefinition.self, forKey: .dataCatalogInputDefinition)
        dataCatalogInputDefinition = dataCatalogInputDefinitionDecoded
        let databaseInputDefinitionDecoded = try containerValues.decodeIfPresent(DataBrewClientTypes.DatabaseInputDefinition.self, forKey: .databaseInputDefinition)
        databaseInputDefinition = databaseInputDefinitionDecoded
        let metadataDecoded = try containerValues.decodeIfPresent(DataBrewClientTypes.Metadata.self, forKey: .metadata)
        metadata = metadataDecoded
    }
}
