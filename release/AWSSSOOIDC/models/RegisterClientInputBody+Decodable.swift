// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct RegisterClientInputBody: Swift.Equatable {
    let clientName: Swift.String?
    let clientType: Swift.String?
    let scopes: [Swift.String]?
}

extension RegisterClientInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientName
        case clientType
        case scopes
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clientNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientName)
        clientName = clientNameDecoded
        let clientTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientType)
        clientType = clientTypeDecoded
        let scopesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .scopes)
        var scopesDecoded0:[Swift.String]? = nil
        if let scopesContainer = scopesContainer {
            scopesDecoded0 = [Swift.String]()
            for string0 in scopesContainer {
                if let string0 = string0 {
                    scopesDecoded0?.append(string0)
                }
            }
        }
        scopes = scopesDecoded0
    }
}
