// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct RegisterClientOutputResponseBody: Swift.Equatable {
    let clientId: Swift.String?
    let clientSecret: Swift.String?
    let clientIdIssuedAt: Swift.Int
    let clientSecretExpiresAt: Swift.Int
    let authorizationEndpoint: Swift.String?
    let tokenEndpoint: Swift.String?
}

extension RegisterClientOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case authorizationEndpoint
        case clientId
        case clientIdIssuedAt
        case clientSecret
        case clientSecretExpiresAt
        case tokenEndpoint
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clientIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientId)
        clientId = clientIdDecoded
        let clientSecretDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientSecret)
        clientSecret = clientSecretDecoded
        let clientIdIssuedAtDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .clientIdIssuedAt) ?? 0
        clientIdIssuedAt = clientIdIssuedAtDecoded
        let clientSecretExpiresAtDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .clientSecretExpiresAt) ?? 0
        clientSecretExpiresAt = clientSecretExpiresAtDecoded
        let authorizationEndpointDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .authorizationEndpoint)
        authorizationEndpoint = authorizationEndpointDecoded
        let tokenEndpointDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tokenEndpoint)
        tokenEndpoint = tokenEndpointDecoded
    }
}
