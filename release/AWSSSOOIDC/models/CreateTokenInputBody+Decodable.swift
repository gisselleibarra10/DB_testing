// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateTokenInputBody: Swift.Equatable {
    let clientId: Swift.String?
    let clientSecret: Swift.String?
    let grantType: Swift.String?
    let deviceCode: Swift.String?
    let code: Swift.String?
    let refreshToken: Swift.String?
    let scope: [Swift.String]?
    let redirectUri: Swift.String?
}

extension CreateTokenInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientId
        case clientSecret
        case code
        case deviceCode
        case grantType
        case redirectUri
        case refreshToken
        case scope
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clientIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientId)
        clientId = clientIdDecoded
        let clientSecretDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientSecret)
        clientSecret = clientSecretDecoded
        let grantTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .grantType)
        grantType = grantTypeDecoded
        let deviceCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deviceCode)
        deviceCode = deviceCodeDecoded
        let codeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .code)
        code = codeDecoded
        let refreshTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .refreshToken)
        refreshToken = refreshTokenDecoded
        let scopeContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .scope)
        var scopeDecoded0:[Swift.String]? = nil
        if let scopeContainer = scopeContainer {
            scopeDecoded0 = [Swift.String]()
            for string0 in scopeContainer {
                if let string0 = string0 {
                    scopeDecoded0?.append(string0)
                }
            }
        }
        scope = scopeDecoded0
        let redirectUriDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .redirectUri)
        redirectUri = redirectUriDecoded
    }
}
