// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct CreateTokenInput: Swift.Equatable {
    /// The unique identifier string for each client. This value should come from the persisted result of the [RegisterClient] API.
    /// This member is required.
    public var clientId: Swift.String?
    /// A secret string generated for the client. This value should come from the persisted result of the [RegisterClient] API.
    /// This member is required.
    public var clientSecret: Swift.String?
    /// The authorization code received from the authorization service. This parameter is required to perform an authorization grant request to get access to a token.
    public var code: Swift.String?
    /// Used only when calling this API for the device code grant type. This short-term code is used to identify this authentication attempt. This should come from an in-memory reference to the result of the [StartDeviceAuthorization] API.
    public var deviceCode: Swift.String?
    /// Supports grant types for authorization code, refresh token, and device code request.
    /// This member is required.
    public var grantType: Swift.String?
    /// The location of the application that will receive the authorization code. Users authorize the service to send the request to this location.
    public var redirectUri: Swift.String?
    /// The token used to obtain an access token in the event that the access token is invalid or expired. This token is not issued by the service.
    public var refreshToken: Swift.String?
    /// The list of scopes that is defined by the client. Upon authorization, this list is used to restrict permissions when granting an access token.
    public var scope: [Swift.String]?

    public init (
        clientId: Swift.String? = nil,
        clientSecret: Swift.String? = nil,
        code: Swift.String? = nil,
        deviceCode: Swift.String? = nil,
        grantType: Swift.String? = nil,
        redirectUri: Swift.String? = nil,
        refreshToken: Swift.String? = nil,
        scope: [Swift.String]? = nil
    )
    {
        self.clientId = clientId
        self.clientSecret = clientSecret
        self.code = code
        self.deviceCode = deviceCode
        self.grantType = grantType
        self.redirectUri = redirectUri
        self.refreshToken = refreshToken
        self.scope = scope
    }
}
