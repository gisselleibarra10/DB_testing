// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AuditManagerClientTypes.AssessmentControl: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case assessmentReportEvidenceCount
        case comments
        case description
        case evidenceCount
        case evidenceSources
        case id
        case name
        case response
        case status
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if assessmentReportEvidenceCount != 0 {
            try encodeContainer.encode(assessmentReportEvidenceCount, forKey: .assessmentReportEvidenceCount)
        }
        if let comments = comments {
            var commentsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .comments)
            for controlcomments0 in comments {
                try commentsContainer.encode(controlcomments0)
            }
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if evidenceCount != 0 {
            try encodeContainer.encode(evidenceCount, forKey: .evidenceCount)
        }
        if let evidenceSources = evidenceSources {
            var evidenceSourcesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .evidenceSources)
            for evidencesources0 in evidenceSources {
                try evidenceSourcesContainer.encode(evidencesources0)
            }
        }
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let response = self.response {
            try encodeContainer.encode(response.rawValue, forKey: .response)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let statusDecoded = try containerValues.decodeIfPresent(AuditManagerClientTypes.ControlStatus.self, forKey: .status)
        status = statusDecoded
        let responseDecoded = try containerValues.decodeIfPresent(AuditManagerClientTypes.ControlResponse.self, forKey: .response)
        response = responseDecoded
        let commentsContainer = try containerValues.decodeIfPresent([AuditManagerClientTypes.ControlComment?].self, forKey: .comments)
        var commentsDecoded0:[AuditManagerClientTypes.ControlComment]? = nil
        if let commentsContainer = commentsContainer {
            commentsDecoded0 = [AuditManagerClientTypes.ControlComment]()
            for structure0 in commentsContainer {
                if let structure0 = structure0 {
                    commentsDecoded0?.append(structure0)
                }
            }
        }
        comments = commentsDecoded0
        let evidenceSourcesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .evidenceSources)
        var evidenceSourcesDecoded0:[Swift.String]? = nil
        if let evidenceSourcesContainer = evidenceSourcesContainer {
            evidenceSourcesDecoded0 = [Swift.String]()
            for string0 in evidenceSourcesContainer {
                if let string0 = string0 {
                    evidenceSourcesDecoded0?.append(string0)
                }
            }
        }
        evidenceSources = evidenceSourcesDecoded0
        let evidenceCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .evidenceCount) ?? 0
        evidenceCount = evidenceCountDecoded
        let assessmentReportEvidenceCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .assessmentReportEvidenceCount) ?? 0
        assessmentReportEvidenceCount = assessmentReportEvidenceCountDecoded
    }
}
