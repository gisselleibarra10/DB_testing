// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AuditManagerClientTypes.Framework: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn
        case complianceType
        case controlSets
        case controlSources
        case createdAt
        case createdBy
        case description
        case id
        case lastUpdatedAt
        case lastUpdatedBy
        case logo
        case name
        case tags
        case type
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = self.arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let complianceType = self.complianceType {
            try encodeContainer.encode(complianceType, forKey: .complianceType)
        }
        if let controlSets = controlSets {
            var controlSetsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .controlSets)
            for controlsets0 in controlSets {
                try controlSetsContainer.encode(controlsets0)
            }
        }
        if let controlSources = self.controlSources {
            try encodeContainer.encode(controlSources, forKey: .controlSources)
        }
        if let createdAt = self.createdAt {
            try encodeContainer.encode(createdAt.timeIntervalSince1970, forKey: .createdAt)
        }
        if let createdBy = self.createdBy {
            try encodeContainer.encode(createdBy, forKey: .createdBy)
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let lastUpdatedAt = self.lastUpdatedAt {
            try encodeContainer.encode(lastUpdatedAt.timeIntervalSince1970, forKey: .lastUpdatedAt)
        }
        if let lastUpdatedBy = self.lastUpdatedBy {
            try encodeContainer.encode(lastUpdatedBy, forKey: .lastUpdatedBy)
        }
        if let logo = self.logo {
            try encodeContainer.encode(logo, forKey: .logo)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, tagmap0) in tags {
                try tagsContainer.encode(tagmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let type = self.type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let typeDecoded = try containerValues.decodeIfPresent(AuditManagerClientTypes.FrameworkType.self, forKey: .type)
        type = typeDecoded
        let complianceTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .complianceType)
        complianceType = complianceTypeDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let logoDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logo)
        logo = logoDecoded
        let controlSourcesDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .controlSources)
        controlSources = controlSourcesDecoded
        let controlSetsContainer = try containerValues.decodeIfPresent([AuditManagerClientTypes.ControlSet?].self, forKey: .controlSets)
        var controlSetsDecoded0:[AuditManagerClientTypes.ControlSet]? = nil
        if let controlSetsContainer = controlSetsContainer {
            controlSetsDecoded0 = [AuditManagerClientTypes.ControlSet]()
            for structure0 in controlSetsContainer {
                if let structure0 = structure0 {
                    controlSetsDecoded0?.append(structure0)
                }
            }
        }
        controlSets = controlSetsDecoded0
        let createdAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdAt)
        createdAt = createdAtDecoded
        let lastUpdatedAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastUpdatedAt)
        lastUpdatedAt = lastUpdatedAtDecoded
        let createdByDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .createdBy)
        createdBy = createdByDecoded
        let lastUpdatedByDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastUpdatedBy)
        lastUpdatedBy = lastUpdatedByDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
    }
}
