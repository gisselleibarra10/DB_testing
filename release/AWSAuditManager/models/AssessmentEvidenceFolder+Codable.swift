// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AuditManagerClientTypes.AssessmentEvidenceFolder: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case assessmentId
        case assessmentReportSelectionCount
        case author
        case controlId
        case controlName
        case controlSetId
        case dataSource
        case date
        case evidenceAwsServiceSourceCount
        case evidenceByTypeComplianceCheckCount
        case evidenceByTypeComplianceCheckIssuesCount
        case evidenceByTypeConfigurationDataCount
        case evidenceByTypeManualCount
        case evidenceByTypeUserActivityCount
        case evidenceResourcesIncludedCount
        case id
        case name
        case totalEvidence
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let assessmentId = self.assessmentId {
            try encodeContainer.encode(assessmentId, forKey: .assessmentId)
        }
        if assessmentReportSelectionCount != 0 {
            try encodeContainer.encode(assessmentReportSelectionCount, forKey: .assessmentReportSelectionCount)
        }
        if let author = self.author {
            try encodeContainer.encode(author, forKey: .author)
        }
        if let controlId = self.controlId {
            try encodeContainer.encode(controlId, forKey: .controlId)
        }
        if let controlName = self.controlName {
            try encodeContainer.encode(controlName, forKey: .controlName)
        }
        if let controlSetId = self.controlSetId {
            try encodeContainer.encode(controlSetId, forKey: .controlSetId)
        }
        if let dataSource = self.dataSource {
            try encodeContainer.encode(dataSource, forKey: .dataSource)
        }
        if let date = self.date {
            try encodeContainer.encode(date.timeIntervalSince1970, forKey: .date)
        }
        if evidenceAwsServiceSourceCount != 0 {
            try encodeContainer.encode(evidenceAwsServiceSourceCount, forKey: .evidenceAwsServiceSourceCount)
        }
        if evidenceByTypeComplianceCheckCount != 0 {
            try encodeContainer.encode(evidenceByTypeComplianceCheckCount, forKey: .evidenceByTypeComplianceCheckCount)
        }
        if evidenceByTypeComplianceCheckIssuesCount != 0 {
            try encodeContainer.encode(evidenceByTypeComplianceCheckIssuesCount, forKey: .evidenceByTypeComplianceCheckIssuesCount)
        }
        if evidenceByTypeConfigurationDataCount != 0 {
            try encodeContainer.encode(evidenceByTypeConfigurationDataCount, forKey: .evidenceByTypeConfigurationDataCount)
        }
        if evidenceByTypeManualCount != 0 {
            try encodeContainer.encode(evidenceByTypeManualCount, forKey: .evidenceByTypeManualCount)
        }
        if evidenceByTypeUserActivityCount != 0 {
            try encodeContainer.encode(evidenceByTypeUserActivityCount, forKey: .evidenceByTypeUserActivityCount)
        }
        if evidenceResourcesIncludedCount != 0 {
            try encodeContainer.encode(evidenceResourcesIncludedCount, forKey: .evidenceResourcesIncludedCount)
        }
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if totalEvidence != 0 {
            try encodeContainer.encode(totalEvidence, forKey: .totalEvidence)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let dateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .date)
        date = dateDecoded
        let assessmentIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .assessmentId)
        assessmentId = assessmentIdDecoded
        let controlSetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .controlSetId)
        controlSetId = controlSetIdDecoded
        let controlIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .controlId)
        controlId = controlIdDecoded
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let dataSourceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataSource)
        dataSource = dataSourceDecoded
        let authorDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .author)
        author = authorDecoded
        let totalEvidenceDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .totalEvidence) ?? 0
        totalEvidence = totalEvidenceDecoded
        let assessmentReportSelectionCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .assessmentReportSelectionCount) ?? 0
        assessmentReportSelectionCount = assessmentReportSelectionCountDecoded
        let controlNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .controlName)
        controlName = controlNameDecoded
        let evidenceResourcesIncludedCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .evidenceResourcesIncludedCount) ?? 0
        evidenceResourcesIncludedCount = evidenceResourcesIncludedCountDecoded
        let evidenceByTypeConfigurationDataCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .evidenceByTypeConfigurationDataCount) ?? 0
        evidenceByTypeConfigurationDataCount = evidenceByTypeConfigurationDataCountDecoded
        let evidenceByTypeManualCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .evidenceByTypeManualCount) ?? 0
        evidenceByTypeManualCount = evidenceByTypeManualCountDecoded
        let evidenceByTypeComplianceCheckCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .evidenceByTypeComplianceCheckCount) ?? 0
        evidenceByTypeComplianceCheckCount = evidenceByTypeComplianceCheckCountDecoded
        let evidenceByTypeComplianceCheckIssuesCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .evidenceByTypeComplianceCheckIssuesCount) ?? 0
        evidenceByTypeComplianceCheckIssuesCount = evidenceByTypeComplianceCheckIssuesCountDecoded
        let evidenceByTypeUserActivityCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .evidenceByTypeUserActivityCount) ?? 0
        evidenceByTypeUserActivityCount = evidenceByTypeUserActivityCountDecoded
        let evidenceAwsServiceSourceCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .evidenceAwsServiceSourceCount) ?? 0
        evidenceAwsServiceSourceCount = evidenceAwsServiceSourceCountDecoded
    }
}
