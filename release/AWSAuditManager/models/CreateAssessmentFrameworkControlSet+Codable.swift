// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AuditManagerClientTypes.CreateAssessmentFrameworkControlSet: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case controls
        case name
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let controls = controls {
            var controlsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .controls)
            for createassessmentframeworkcontrols0 in controls {
                try controlsContainer.encode(createassessmentframeworkcontrols0)
            }
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let controlsContainer = try containerValues.decodeIfPresent([AuditManagerClientTypes.CreateAssessmentFrameworkControl?].self, forKey: .controls)
        var controlsDecoded0:[AuditManagerClientTypes.CreateAssessmentFrameworkControl]? = nil
        if let controlsContainer = controlsContainer {
            controlsDecoded0 = [AuditManagerClientTypes.CreateAssessmentFrameworkControl]()
            for structure0 in controlsContainer {
                if let structure0 = structure0 {
                    controlsDecoded0?.append(structure0)
                }
            }
        }
        controls = controlsDecoded0
    }
}
