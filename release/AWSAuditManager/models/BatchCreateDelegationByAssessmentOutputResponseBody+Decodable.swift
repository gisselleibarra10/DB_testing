// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct BatchCreateDelegationByAssessmentOutputResponseBody: Swift.Equatable {
    let delegations: [AuditManagerClientTypes.Delegation]?
    let errors: [AuditManagerClientTypes.BatchCreateDelegationByAssessmentError]?
}

extension BatchCreateDelegationByAssessmentOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case delegations
        case errors
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let delegationsContainer = try containerValues.decodeIfPresent([AuditManagerClientTypes.Delegation?].self, forKey: .delegations)
        var delegationsDecoded0:[AuditManagerClientTypes.Delegation]? = nil
        if let delegationsContainer = delegationsContainer {
            delegationsDecoded0 = [AuditManagerClientTypes.Delegation]()
            for structure0 in delegationsContainer {
                if let structure0 = structure0 {
                    delegationsDecoded0?.append(structure0)
                }
            }
        }
        delegations = delegationsDecoded0
        let errorsContainer = try containerValues.decodeIfPresent([AuditManagerClientTypes.BatchCreateDelegationByAssessmentError?].self, forKey: .errors)
        var errorsDecoded0:[AuditManagerClientTypes.BatchCreateDelegationByAssessmentError]? = nil
        if let errorsContainer = errorsContainer {
            errorsDecoded0 = [AuditManagerClientTypes.BatchCreateDelegationByAssessmentError]()
            for structure0 in errorsContainer {
                if let structure0 = structure0 {
                    errorsDecoded0?.append(structure0)
                }
            }
        }
        errors = errorsDecoded0
    }
}
