// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AuditManagerClientTypes.AssessmentControlSet: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case controls
        case delegations
        case description
        case id
        case manualEvidenceCount
        case roles
        case status
        case systemEvidenceCount
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let controls = controls {
            var controlsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .controls)
            for assessmentcontrols0 in controls {
                try controlsContainer.encode(assessmentcontrols0)
            }
        }
        if let delegations = delegations {
            var delegationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .delegations)
            for delegations0 in delegations {
                try delegationsContainer.encode(delegations0)
            }
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if manualEvidenceCount != 0 {
            try encodeContainer.encode(manualEvidenceCount, forKey: .manualEvidenceCount)
        }
        if let roles = roles {
            var rolesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .roles)
            for roles0 in roles {
                try rolesContainer.encode(roles0)
            }
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if systemEvidenceCount != 0 {
            try encodeContainer.encode(systemEvidenceCount, forKey: .systemEvidenceCount)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let statusDecoded = try containerValues.decodeIfPresent(AuditManagerClientTypes.ControlSetStatus.self, forKey: .status)
        status = statusDecoded
        let rolesContainer = try containerValues.decodeIfPresent([AuditManagerClientTypes.Role?].self, forKey: .roles)
        var rolesDecoded0:[AuditManagerClientTypes.Role]? = nil
        if let rolesContainer = rolesContainer {
            rolesDecoded0 = [AuditManagerClientTypes.Role]()
            for structure0 in rolesContainer {
                if let structure0 = structure0 {
                    rolesDecoded0?.append(structure0)
                }
            }
        }
        roles = rolesDecoded0
        let controlsContainer = try containerValues.decodeIfPresent([AuditManagerClientTypes.AssessmentControl?].self, forKey: .controls)
        var controlsDecoded0:[AuditManagerClientTypes.AssessmentControl]? = nil
        if let controlsContainer = controlsContainer {
            controlsDecoded0 = [AuditManagerClientTypes.AssessmentControl]()
            for structure0 in controlsContainer {
                if let structure0 = structure0 {
                    controlsDecoded0?.append(structure0)
                }
            }
        }
        controls = controlsDecoded0
        let delegationsContainer = try containerValues.decodeIfPresent([AuditManagerClientTypes.Delegation?].self, forKey: .delegations)
        var delegationsDecoded0:[AuditManagerClientTypes.Delegation]? = nil
        if let delegationsContainer = delegationsContainer {
            delegationsDecoded0 = [AuditManagerClientTypes.Delegation]()
            for structure0 in delegationsContainer {
                if let structure0 = structure0 {
                    delegationsDecoded0?.append(structure0)
                }
            }
        }
        delegations = delegationsDecoded0
        let systemEvidenceCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .systemEvidenceCount) ?? 0
        systemEvidenceCount = systemEvidenceCountDecoded
        let manualEvidenceCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .manualEvidenceCount) ?? 0
        manualEvidenceCount = manualEvidenceCountDecoded
    }
}
