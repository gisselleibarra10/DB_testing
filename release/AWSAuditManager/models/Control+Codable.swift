// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AuditManagerClientTypes.Control: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case actionPlanInstructions
        case actionPlanTitle
        case arn
        case controlMappingSources
        case controlSources
        case createdAt
        case createdBy
        case description
        case id
        case lastUpdatedAt
        case lastUpdatedBy
        case name
        case tags
        case testingInformation
        case type
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let actionPlanInstructions = self.actionPlanInstructions {
            try encodeContainer.encode(actionPlanInstructions, forKey: .actionPlanInstructions)
        }
        if let actionPlanTitle = self.actionPlanTitle {
            try encodeContainer.encode(actionPlanTitle, forKey: .actionPlanTitle)
        }
        if let arn = self.arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let controlMappingSources = controlMappingSources {
            var controlMappingSourcesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .controlMappingSources)
            for controlmappingsources0 in controlMappingSources {
                try controlMappingSourcesContainer.encode(controlmappingsources0)
            }
        }
        if let controlSources = self.controlSources {
            try encodeContainer.encode(controlSources, forKey: .controlSources)
        }
        if let createdAt = self.createdAt {
            try encodeContainer.encode(createdAt.timeIntervalSince1970, forKey: .createdAt)
        }
        if let createdBy = self.createdBy {
            try encodeContainer.encode(createdBy, forKey: .createdBy)
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let lastUpdatedAt = self.lastUpdatedAt {
            try encodeContainer.encode(lastUpdatedAt.timeIntervalSince1970, forKey: .lastUpdatedAt)
        }
        if let lastUpdatedBy = self.lastUpdatedBy {
            try encodeContainer.encode(lastUpdatedBy, forKey: .lastUpdatedBy)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, tagmap0) in tags {
                try tagsContainer.encode(tagmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let testingInformation = self.testingInformation {
            try encodeContainer.encode(testingInformation, forKey: .testingInformation)
        }
        if let type = self.type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let typeDecoded = try containerValues.decodeIfPresent(AuditManagerClientTypes.ControlType.self, forKey: .type)
        type = typeDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let testingInformationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .testingInformation)
        testingInformation = testingInformationDecoded
        let actionPlanTitleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .actionPlanTitle)
        actionPlanTitle = actionPlanTitleDecoded
        let actionPlanInstructionsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .actionPlanInstructions)
        actionPlanInstructions = actionPlanInstructionsDecoded
        let controlSourcesDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .controlSources)
        controlSources = controlSourcesDecoded
        let controlMappingSourcesContainer = try containerValues.decodeIfPresent([AuditManagerClientTypes.ControlMappingSource?].self, forKey: .controlMappingSources)
        var controlMappingSourcesDecoded0:[AuditManagerClientTypes.ControlMappingSource]? = nil
        if let controlMappingSourcesContainer = controlMappingSourcesContainer {
            controlMappingSourcesDecoded0 = [AuditManagerClientTypes.ControlMappingSource]()
            for structure0 in controlMappingSourcesContainer {
                if let structure0 = structure0 {
                    controlMappingSourcesDecoded0?.append(structure0)
                }
            }
        }
        controlMappingSources = controlMappingSourcesDecoded0
        let createdAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdAt)
        createdAt = createdAtDecoded
        let lastUpdatedAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastUpdatedAt)
        lastUpdatedAt = lastUpdatedAtDecoded
        let createdByDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .createdBy)
        createdBy = createdByDecoded
        let lastUpdatedByDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastUpdatedBy)
        lastUpdatedBy = lastUpdatedByDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
    }
}
