// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AuditManagerClientTypes {
    /// The metadata that's associated with the specified assessment.
    public struct AssessmentMetadata: Swift.Equatable {
        /// The destination that evidence reports are stored in for the assessment.
        public var assessmentReportsDestination: AuditManagerClientTypes.AssessmentReportsDestination?
        /// The name of the compliance standard that's related to the assessment, such as PCI-DSS.
        public var complianceType: Swift.String?
        /// Specifies when the assessment was created.
        public var creationTime: ClientRuntime.Date?
        /// The delegations that are associated with the assessment.
        public var delegations: [AuditManagerClientTypes.Delegation]?
        /// The description of the assessment.
        public var description: Swift.String?
        /// The unique identifier for the assessment.
        public var id: Swift.String?
        /// The time of the most recent update.
        public var lastUpdated: ClientRuntime.Date?
        /// The name of the assessment.
        public var name: Swift.String?
        /// The roles that are associated with the assessment.
        public var roles: [AuditManagerClientTypes.Role]?
        /// The wrapper of Amazon Web Services accounts and services that are in scope for the assessment.
        public var scope: AuditManagerClientTypes.Scope?
        /// The overall status of the assessment.
        public var status: AuditManagerClientTypes.AssessmentStatus?

        public init (
            assessmentReportsDestination: AuditManagerClientTypes.AssessmentReportsDestination? = nil,
            complianceType: Swift.String? = nil,
            creationTime: ClientRuntime.Date? = nil,
            delegations: [AuditManagerClientTypes.Delegation]? = nil,
            description: Swift.String? = nil,
            id: Swift.String? = nil,
            lastUpdated: ClientRuntime.Date? = nil,
            name: Swift.String? = nil,
            roles: [AuditManagerClientTypes.Role]? = nil,
            scope: AuditManagerClientTypes.Scope? = nil,
            status: AuditManagerClientTypes.AssessmentStatus? = nil
        )
        {
            self.assessmentReportsDestination = assessmentReportsDestination
            self.complianceType = complianceType
            self.creationTime = creationTime
            self.delegations = delegations
            self.description = description
            self.id = id
            self.lastUpdated = lastUpdated
            self.name = name
            self.roles = roles
            self.scope = scope
            self.status = status
        }
    }

}
