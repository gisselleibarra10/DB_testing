// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListControlInsightsByControlDomainOutputResponseBody: Swift.Equatable {
    let controlInsightsMetadata: [AuditManagerClientTypes.ControlInsightsMetadataItem]?
    let nextToken: Swift.String?
}

extension ListControlInsightsByControlDomainOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case controlInsightsMetadata
        case nextToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let controlInsightsMetadataContainer = try containerValues.decodeIfPresent([AuditManagerClientTypes.ControlInsightsMetadataItem?].self, forKey: .controlInsightsMetadata)
        var controlInsightsMetadataDecoded0:[AuditManagerClientTypes.ControlInsightsMetadataItem]? = nil
        if let controlInsightsMetadataContainer = controlInsightsMetadataContainer {
            controlInsightsMetadataDecoded0 = [AuditManagerClientTypes.ControlInsightsMetadataItem]()
            for structure0 in controlInsightsMetadataContainer {
                if let structure0 = structure0 {
                    controlInsightsMetadataDecoded0?.append(structure0)
                }
            }
        }
        controlInsightsMetadata = controlInsightsMetadataDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
