// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListAssessmentControlInsightsByControlDomainOutputResponseBody: Swift.Equatable {
    let controlInsightsByAssessment: [AuditManagerClientTypes.ControlInsightsMetadataByAssessmentItem]?
    let nextToken: Swift.String?
}

extension ListAssessmentControlInsightsByControlDomainOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case controlInsightsByAssessment
        case nextToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let controlInsightsByAssessmentContainer = try containerValues.decodeIfPresent([AuditManagerClientTypes.ControlInsightsMetadataByAssessmentItem?].self, forKey: .controlInsightsByAssessment)
        var controlInsightsByAssessmentDecoded0:[AuditManagerClientTypes.ControlInsightsMetadataByAssessmentItem]? = nil
        if let controlInsightsByAssessmentContainer = controlInsightsByAssessmentContainer {
            controlInsightsByAssessmentDecoded0 = [AuditManagerClientTypes.ControlInsightsMetadataByAssessmentItem]()
            for structure0 in controlInsightsByAssessmentContainer {
                if let structure0 = structure0 {
                    controlInsightsByAssessmentDecoded0?.append(structure0)
                }
            }
        }
        controlInsightsByAssessment = controlInsightsByAssessmentDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
