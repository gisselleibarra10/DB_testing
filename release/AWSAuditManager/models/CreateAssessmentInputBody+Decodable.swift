// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateAssessmentInputBody: Swift.Equatable {
    let name: Swift.String?
    let description: Swift.String?
    let assessmentReportsDestination: AuditManagerClientTypes.AssessmentReportsDestination?
    let scope: AuditManagerClientTypes.Scope?
    let roles: [AuditManagerClientTypes.Role]?
    let frameworkId: Swift.String?
    let tags: [Swift.String:Swift.String]?
}

extension CreateAssessmentInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case assessmentReportsDestination
        case description
        case frameworkId
        case name
        case roles
        case scope
        case tags
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let assessmentReportsDestinationDecoded = try containerValues.decodeIfPresent(AuditManagerClientTypes.AssessmentReportsDestination.self, forKey: .assessmentReportsDestination)
        assessmentReportsDestination = assessmentReportsDestinationDecoded
        let scopeDecoded = try containerValues.decodeIfPresent(AuditManagerClientTypes.Scope.self, forKey: .scope)
        scope = scopeDecoded
        let rolesContainer = try containerValues.decodeIfPresent([AuditManagerClientTypes.Role?].self, forKey: .roles)
        var rolesDecoded0:[AuditManagerClientTypes.Role]? = nil
        if let rolesContainer = rolesContainer {
            rolesDecoded0 = [AuditManagerClientTypes.Role]()
            for structure0 in rolesContainer {
                if let structure0 = structure0 {
                    rolesDecoded0?.append(structure0)
                }
            }
        }
        roles = rolesDecoded0
        let frameworkIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .frameworkId)
        frameworkId = frameworkIdDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
    }
}
