// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AuditManagerClientTypes.Insights: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case activeAssessmentsCount
        case assessmentControlsCountByNoncompliantEvidence
        case compliantEvidenceCount
        case inconclusiveEvidenceCount
        case lastUpdated
        case noncompliantEvidenceCount
        case totalAssessmentControlsCount
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let activeAssessmentsCount = self.activeAssessmentsCount {
            try encodeContainer.encode(activeAssessmentsCount, forKey: .activeAssessmentsCount)
        }
        if let assessmentControlsCountByNoncompliantEvidence = self.assessmentControlsCountByNoncompliantEvidence {
            try encodeContainer.encode(assessmentControlsCountByNoncompliantEvidence, forKey: .assessmentControlsCountByNoncompliantEvidence)
        }
        if let compliantEvidenceCount = self.compliantEvidenceCount {
            try encodeContainer.encode(compliantEvidenceCount, forKey: .compliantEvidenceCount)
        }
        if let inconclusiveEvidenceCount = self.inconclusiveEvidenceCount {
            try encodeContainer.encode(inconclusiveEvidenceCount, forKey: .inconclusiveEvidenceCount)
        }
        if let lastUpdated = self.lastUpdated {
            try encodeContainer.encode(lastUpdated.timeIntervalSince1970, forKey: .lastUpdated)
        }
        if let noncompliantEvidenceCount = self.noncompliantEvidenceCount {
            try encodeContainer.encode(noncompliantEvidenceCount, forKey: .noncompliantEvidenceCount)
        }
        if let totalAssessmentControlsCount = self.totalAssessmentControlsCount {
            try encodeContainer.encode(totalAssessmentControlsCount, forKey: .totalAssessmentControlsCount)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let activeAssessmentsCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .activeAssessmentsCount)
        activeAssessmentsCount = activeAssessmentsCountDecoded
        let noncompliantEvidenceCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .noncompliantEvidenceCount)
        noncompliantEvidenceCount = noncompliantEvidenceCountDecoded
        let compliantEvidenceCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .compliantEvidenceCount)
        compliantEvidenceCount = compliantEvidenceCountDecoded
        let inconclusiveEvidenceCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .inconclusiveEvidenceCount)
        inconclusiveEvidenceCount = inconclusiveEvidenceCountDecoded
        let assessmentControlsCountByNoncompliantEvidenceDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .assessmentControlsCountByNoncompliantEvidence)
        assessmentControlsCountByNoncompliantEvidence = assessmentControlsCountByNoncompliantEvidenceDecoded
        let totalAssessmentControlsCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .totalAssessmentControlsCount)
        totalAssessmentControlsCount = totalAssessmentControlsCountDecoded
        let lastUpdatedDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastUpdated)
        lastUpdated = lastUpdatedDecoded
    }
}
