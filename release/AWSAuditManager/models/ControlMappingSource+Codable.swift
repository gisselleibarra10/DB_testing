// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AuditManagerClientTypes.ControlMappingSource: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case sourceDescription
        case sourceFrequency
        case sourceId
        case sourceKeyword
        case sourceName
        case sourceSetUpOption
        case sourceType
        case troubleshootingText
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let sourceDescription = self.sourceDescription {
            try encodeContainer.encode(sourceDescription, forKey: .sourceDescription)
        }
        if let sourceFrequency = self.sourceFrequency {
            try encodeContainer.encode(sourceFrequency.rawValue, forKey: .sourceFrequency)
        }
        if let sourceId = self.sourceId {
            try encodeContainer.encode(sourceId, forKey: .sourceId)
        }
        if let sourceKeyword = self.sourceKeyword {
            try encodeContainer.encode(sourceKeyword, forKey: .sourceKeyword)
        }
        if let sourceName = self.sourceName {
            try encodeContainer.encode(sourceName, forKey: .sourceName)
        }
        if let sourceSetUpOption = self.sourceSetUpOption {
            try encodeContainer.encode(sourceSetUpOption.rawValue, forKey: .sourceSetUpOption)
        }
        if let sourceType = self.sourceType {
            try encodeContainer.encode(sourceType.rawValue, forKey: .sourceType)
        }
        if let troubleshootingText = self.troubleshootingText {
            try encodeContainer.encode(troubleshootingText, forKey: .troubleshootingText)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceId)
        sourceId = sourceIdDecoded
        let sourceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceName)
        sourceName = sourceNameDecoded
        let sourceDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceDescription)
        sourceDescription = sourceDescriptionDecoded
        let sourceSetUpOptionDecoded = try containerValues.decodeIfPresent(AuditManagerClientTypes.SourceSetUpOption.self, forKey: .sourceSetUpOption)
        sourceSetUpOption = sourceSetUpOptionDecoded
        let sourceTypeDecoded = try containerValues.decodeIfPresent(AuditManagerClientTypes.SourceType.self, forKey: .sourceType)
        sourceType = sourceTypeDecoded
        let sourceKeywordDecoded = try containerValues.decodeIfPresent(AuditManagerClientTypes.SourceKeyword.self, forKey: .sourceKeyword)
        sourceKeyword = sourceKeywordDecoded
        let sourceFrequencyDecoded = try containerValues.decodeIfPresent(AuditManagerClientTypes.SourceFrequency.self, forKey: .sourceFrequency)
        sourceFrequency = sourceFrequencyDecoded
        let troubleshootingTextDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .troubleshootingText)
        troubleshootingText = troubleshootingTextDecoded
    }
}
