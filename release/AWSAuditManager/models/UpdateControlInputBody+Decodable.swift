// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct UpdateControlInputBody: Swift.Equatable {
    let name: Swift.String?
    let description: Swift.String?
    let testingInformation: Swift.String?
    let actionPlanTitle: Swift.String?
    let actionPlanInstructions: Swift.String?
    let controlMappingSources: [AuditManagerClientTypes.ControlMappingSource]?
}

extension UpdateControlInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case actionPlanInstructions
        case actionPlanTitle
        case controlMappingSources
        case description
        case name
        case testingInformation
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let testingInformationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .testingInformation)
        testingInformation = testingInformationDecoded
        let actionPlanTitleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .actionPlanTitle)
        actionPlanTitle = actionPlanTitleDecoded
        let actionPlanInstructionsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .actionPlanInstructions)
        actionPlanInstructions = actionPlanInstructionsDecoded
        let controlMappingSourcesContainer = try containerValues.decodeIfPresent([AuditManagerClientTypes.ControlMappingSource?].self, forKey: .controlMappingSources)
        var controlMappingSourcesDecoded0:[AuditManagerClientTypes.ControlMappingSource]? = nil
        if let controlMappingSourcesContainer = controlMappingSourcesContainer {
            controlMappingSourcesDecoded0 = [AuditManagerClientTypes.ControlMappingSource]()
            for structure0 in controlMappingSourcesContainer {
                if let structure0 = structure0 {
                    controlMappingSourcesDecoded0?.append(structure0)
                }
            }
        }
        controlMappingSources = controlMappingSourcesDecoded0
    }
}
