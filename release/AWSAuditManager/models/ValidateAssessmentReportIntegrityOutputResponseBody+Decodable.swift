// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ValidateAssessmentReportIntegrityOutputResponseBody: Swift.Equatable {
    let signatureValid: Swift.Bool?
    let signatureAlgorithm: Swift.String?
    let signatureDateTime: Swift.String?
    let signatureKeyId: Swift.String?
    let validationErrors: [Swift.String]?
}

extension ValidateAssessmentReportIntegrityOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case signatureAlgorithm
        case signatureDateTime
        case signatureKeyId
        case signatureValid
        case validationErrors
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let signatureValidDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .signatureValid)
        signatureValid = signatureValidDecoded
        let signatureAlgorithmDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .signatureAlgorithm)
        signatureAlgorithm = signatureAlgorithmDecoded
        let signatureDateTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .signatureDateTime)
        signatureDateTime = signatureDateTimeDecoded
        let signatureKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .signatureKeyId)
        signatureKeyId = signatureKeyIdDecoded
        let validationErrorsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .validationErrors)
        var validationErrorsDecoded0:[Swift.String]? = nil
        if let validationErrorsContainer = validationErrorsContainer {
            validationErrorsDecoded0 = [Swift.String]()
            for string0 in validationErrorsContainer {
                if let string0 = string0 {
                    validationErrorsDecoded0?.append(string0)
                }
            }
        }
        validationErrors = validationErrorsDecoded0
    }
}
