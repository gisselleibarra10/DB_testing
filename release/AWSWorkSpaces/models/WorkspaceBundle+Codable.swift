// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension WorkSpacesClientTypes.WorkspaceBundle: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bundleId = "BundleId"
        case computeType = "ComputeType"
        case creationTime = "CreationTime"
        case description = "Description"
        case imageId = "ImageId"
        case lastUpdatedTime = "LastUpdatedTime"
        case name = "Name"
        case owner = "Owner"
        case rootStorage = "RootStorage"
        case userStorage = "UserStorage"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let bundleId = self.bundleId {
            try encodeContainer.encode(bundleId, forKey: .bundleId)
        }
        if let computeType = self.computeType {
            try encodeContainer.encode(computeType, forKey: .computeType)
        }
        if let creationTime = self.creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let imageId = self.imageId {
            try encodeContainer.encode(imageId, forKey: .imageId)
        }
        if let lastUpdatedTime = self.lastUpdatedTime {
            try encodeContainer.encode(lastUpdatedTime.timeIntervalSince1970, forKey: .lastUpdatedTime)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let owner = self.owner {
            try encodeContainer.encode(owner, forKey: .owner)
        }
        if let rootStorage = self.rootStorage {
            try encodeContainer.encode(rootStorage, forKey: .rootStorage)
        }
        if let userStorage = self.userStorage {
            try encodeContainer.encode(userStorage, forKey: .userStorage)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let bundleIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .bundleId)
        bundleId = bundleIdDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let ownerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .owner)
        owner = ownerDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let imageIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .imageId)
        imageId = imageIdDecoded
        let rootStorageDecoded = try containerValues.decodeIfPresent(WorkSpacesClientTypes.RootStorage.self, forKey: .rootStorage)
        rootStorage = rootStorageDecoded
        let userStorageDecoded = try containerValues.decodeIfPresent(WorkSpacesClientTypes.UserStorage.self, forKey: .userStorage)
        userStorage = userStorageDecoded
        let computeTypeDecoded = try containerValues.decodeIfPresent(WorkSpacesClientTypes.ComputeType.self, forKey: .computeType)
        computeType = computeTypeDecoded
        let lastUpdatedTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastUpdatedTime)
        lastUpdatedTime = lastUpdatedTimeDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
    }
}
