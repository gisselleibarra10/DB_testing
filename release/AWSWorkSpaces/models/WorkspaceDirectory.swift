// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension WorkSpacesClientTypes {
    /// Describes a directory that is used with Amazon WorkSpaces.
    public struct WorkspaceDirectory: Swift.Equatable {
        /// The directory alias.
        public var alias: Swift.String?
        /// The user name for the service account.
        public var customerUserName: Swift.String?
        /// The directory identifier.
        public var directoryId: Swift.String?
        /// The name of the directory.
        public var directoryName: Swift.String?
        /// The directory type.
        public var directoryType: WorkSpacesClientTypes.WorkspaceDirectoryType?
        /// The IP addresses of the DNS servers for the directory.
        public var dnsIpAddresses: [Swift.String]?
        /// The identifier of the IAM role. This is the role that allows Amazon WorkSpaces to make calls to other services, such as Amazon EC2, on your behalf.
        public var iamRoleId: Swift.String?
        /// The identifiers of the IP access control groups associated with the directory.
        public var ipGroupIds: [Swift.String]?
        /// The registration code for the directory. This is the code that users enter in their Amazon WorkSpaces client application to connect to the directory.
        public var registrationCode: Swift.String?
        /// Describes the enablement status, user access URL, and relay state parameter name that are used for configuring federation with an SAML 2.0 identity provider.
        public var samlProperties: WorkSpacesClientTypes.SamlProperties?
        /// The default self-service permissions for WorkSpaces in the directory.
        public var selfservicePermissions: WorkSpacesClientTypes.SelfservicePermissions?
        /// The state of the directory's registration with Amazon WorkSpaces. After a directory is deregistered, the DEREGISTERED state is returned very briefly before the directory metadata is cleaned up, so this state is rarely returned. To confirm that a directory is deregistered, check for the directory ID by using [ DescribeWorkspaceDirectories](https://docs.aws.amazon.com/workspaces/latest/api/API_DescribeWorkspaceDirectories.html). If the directory ID isn't returned, then the directory has been successfully deregistered.
        public var state: WorkSpacesClientTypes.WorkspaceDirectoryState?
        /// The identifiers of the subnets used with the directory.
        public var subnetIds: [Swift.String]?
        /// Specifies whether the directory is dedicated or shared. To use Bring Your Own License (BYOL), this value must be set to DEDICATED. For more information, see [Bring Your Own Windows Desktop Images](https://docs.aws.amazon.com/workspaces/latest/adminguide/byol-windows-images.html).
        public var tenancy: WorkSpacesClientTypes.Tenancy?
        /// The devices and operating systems that users can use to access WorkSpaces.
        public var workspaceAccessProperties: WorkSpacesClientTypes.WorkspaceAccessProperties?
        /// The default creation properties for all WorkSpaces in the directory.
        public var workspaceCreationProperties: WorkSpacesClientTypes.DefaultWorkspaceCreationProperties?
        /// The identifier of the security group that is assigned to new WorkSpaces.
        public var workspaceSecurityGroupId: Swift.String?

        public init (
            alias: Swift.String? = nil,
            customerUserName: Swift.String? = nil,
            directoryId: Swift.String? = nil,
            directoryName: Swift.String? = nil,
            directoryType: WorkSpacesClientTypes.WorkspaceDirectoryType? = nil,
            dnsIpAddresses: [Swift.String]? = nil,
            iamRoleId: Swift.String? = nil,
            ipGroupIds: [Swift.String]? = nil,
            registrationCode: Swift.String? = nil,
            samlProperties: WorkSpacesClientTypes.SamlProperties? = nil,
            selfservicePermissions: WorkSpacesClientTypes.SelfservicePermissions? = nil,
            state: WorkSpacesClientTypes.WorkspaceDirectoryState? = nil,
            subnetIds: [Swift.String]? = nil,
            tenancy: WorkSpacesClientTypes.Tenancy? = nil,
            workspaceAccessProperties: WorkSpacesClientTypes.WorkspaceAccessProperties? = nil,
            workspaceCreationProperties: WorkSpacesClientTypes.DefaultWorkspaceCreationProperties? = nil,
            workspaceSecurityGroupId: Swift.String? = nil
        )
        {
            self.alias = alias
            self.customerUserName = customerUserName
            self.directoryId = directoryId
            self.directoryName = directoryName
            self.directoryType = directoryType
            self.dnsIpAddresses = dnsIpAddresses
            self.iamRoleId = iamRoleId
            self.ipGroupIds = ipGroupIds
            self.registrationCode = registrationCode
            self.samlProperties = samlProperties
            self.selfservicePermissions = selfservicePermissions
            self.state = state
            self.subnetIds = subnetIds
            self.tenancy = tenancy
            self.workspaceAccessProperties = workspaceAccessProperties
            self.workspaceCreationProperties = workspaceCreationProperties
            self.workspaceSecurityGroupId = workspaceSecurityGroupId
        }
    }

}
