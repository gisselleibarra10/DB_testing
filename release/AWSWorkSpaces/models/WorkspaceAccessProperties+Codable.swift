// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension WorkSpacesClientTypes.WorkspaceAccessProperties: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deviceTypeAndroid = "DeviceTypeAndroid"
        case deviceTypeChromeOs = "DeviceTypeChromeOs"
        case deviceTypeIos = "DeviceTypeIos"
        case deviceTypeLinux = "DeviceTypeLinux"
        case deviceTypeOsx = "DeviceTypeOsx"
        case deviceTypeWeb = "DeviceTypeWeb"
        case deviceTypeWindows = "DeviceTypeWindows"
        case deviceTypeZeroClient = "DeviceTypeZeroClient"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let deviceTypeAndroid = self.deviceTypeAndroid {
            try encodeContainer.encode(deviceTypeAndroid.rawValue, forKey: .deviceTypeAndroid)
        }
        if let deviceTypeChromeOs = self.deviceTypeChromeOs {
            try encodeContainer.encode(deviceTypeChromeOs.rawValue, forKey: .deviceTypeChromeOs)
        }
        if let deviceTypeIos = self.deviceTypeIos {
            try encodeContainer.encode(deviceTypeIos.rawValue, forKey: .deviceTypeIos)
        }
        if let deviceTypeLinux = self.deviceTypeLinux {
            try encodeContainer.encode(deviceTypeLinux.rawValue, forKey: .deviceTypeLinux)
        }
        if let deviceTypeOsx = self.deviceTypeOsx {
            try encodeContainer.encode(deviceTypeOsx.rawValue, forKey: .deviceTypeOsx)
        }
        if let deviceTypeWeb = self.deviceTypeWeb {
            try encodeContainer.encode(deviceTypeWeb.rawValue, forKey: .deviceTypeWeb)
        }
        if let deviceTypeWindows = self.deviceTypeWindows {
            try encodeContainer.encode(deviceTypeWindows.rawValue, forKey: .deviceTypeWindows)
        }
        if let deviceTypeZeroClient = self.deviceTypeZeroClient {
            try encodeContainer.encode(deviceTypeZeroClient.rawValue, forKey: .deviceTypeZeroClient)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deviceTypeWindowsDecoded = try containerValues.decodeIfPresent(WorkSpacesClientTypes.AccessPropertyValue.self, forKey: .deviceTypeWindows)
        deviceTypeWindows = deviceTypeWindowsDecoded
        let deviceTypeOsxDecoded = try containerValues.decodeIfPresent(WorkSpacesClientTypes.AccessPropertyValue.self, forKey: .deviceTypeOsx)
        deviceTypeOsx = deviceTypeOsxDecoded
        let deviceTypeWebDecoded = try containerValues.decodeIfPresent(WorkSpacesClientTypes.AccessPropertyValue.self, forKey: .deviceTypeWeb)
        deviceTypeWeb = deviceTypeWebDecoded
        let deviceTypeIosDecoded = try containerValues.decodeIfPresent(WorkSpacesClientTypes.AccessPropertyValue.self, forKey: .deviceTypeIos)
        deviceTypeIos = deviceTypeIosDecoded
        let deviceTypeAndroidDecoded = try containerValues.decodeIfPresent(WorkSpacesClientTypes.AccessPropertyValue.self, forKey: .deviceTypeAndroid)
        deviceTypeAndroid = deviceTypeAndroidDecoded
        let deviceTypeChromeOsDecoded = try containerValues.decodeIfPresent(WorkSpacesClientTypes.AccessPropertyValue.self, forKey: .deviceTypeChromeOs)
        deviceTypeChromeOs = deviceTypeChromeOsDecoded
        let deviceTypeZeroClientDecoded = try containerValues.decodeIfPresent(WorkSpacesClientTypes.AccessPropertyValue.self, forKey: .deviceTypeZeroClient)
        deviceTypeZeroClient = deviceTypeZeroClientDecoded
        let deviceTypeLinuxDecoded = try containerValues.decodeIfPresent(WorkSpacesClientTypes.AccessPropertyValue.self, forKey: .deviceTypeLinux)
        deviceTypeLinux = deviceTypeLinuxDecoded
    }
}
