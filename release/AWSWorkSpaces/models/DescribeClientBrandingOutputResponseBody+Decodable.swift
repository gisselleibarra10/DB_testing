// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeClientBrandingOutputResponseBody: Swift.Equatable {
    let deviceTypeWindows: WorkSpacesClientTypes.DefaultClientBrandingAttributes?
    let deviceTypeOsx: WorkSpacesClientTypes.DefaultClientBrandingAttributes?
    let deviceTypeAndroid: WorkSpacesClientTypes.DefaultClientBrandingAttributes?
    let deviceTypeIos: WorkSpacesClientTypes.IosClientBrandingAttributes?
    let deviceTypeLinux: WorkSpacesClientTypes.DefaultClientBrandingAttributes?
    let deviceTypeWeb: WorkSpacesClientTypes.DefaultClientBrandingAttributes?
}

extension DescribeClientBrandingOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deviceTypeAndroid = "DeviceTypeAndroid"
        case deviceTypeIos = "DeviceTypeIos"
        case deviceTypeLinux = "DeviceTypeLinux"
        case deviceTypeOsx = "DeviceTypeOsx"
        case deviceTypeWeb = "DeviceTypeWeb"
        case deviceTypeWindows = "DeviceTypeWindows"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deviceTypeWindowsDecoded = try containerValues.decodeIfPresent(WorkSpacesClientTypes.DefaultClientBrandingAttributes.self, forKey: .deviceTypeWindows)
        deviceTypeWindows = deviceTypeWindowsDecoded
        let deviceTypeOsxDecoded = try containerValues.decodeIfPresent(WorkSpacesClientTypes.DefaultClientBrandingAttributes.self, forKey: .deviceTypeOsx)
        deviceTypeOsx = deviceTypeOsxDecoded
        let deviceTypeAndroidDecoded = try containerValues.decodeIfPresent(WorkSpacesClientTypes.DefaultClientBrandingAttributes.self, forKey: .deviceTypeAndroid)
        deviceTypeAndroid = deviceTypeAndroidDecoded
        let deviceTypeIosDecoded = try containerValues.decodeIfPresent(WorkSpacesClientTypes.IosClientBrandingAttributes.self, forKey: .deviceTypeIos)
        deviceTypeIos = deviceTypeIosDecoded
        let deviceTypeLinuxDecoded = try containerValues.decodeIfPresent(WorkSpacesClientTypes.DefaultClientBrandingAttributes.self, forKey: .deviceTypeLinux)
        deviceTypeLinux = deviceTypeLinuxDecoded
        let deviceTypeWebDecoded = try containerValues.decodeIfPresent(WorkSpacesClientTypes.DefaultClientBrandingAttributes.self, forKey: .deviceTypeWeb)
        deviceTypeWeb = deviceTypeWebDecoded
    }
}
