// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateWorkspaceBundleInputBody: Swift.Equatable {
    let bundleName: Swift.String?
    let bundleDescription: Swift.String?
    let imageId: Swift.String?
    let computeType: WorkSpacesClientTypes.ComputeType?
    let userStorage: WorkSpacesClientTypes.UserStorage?
    let rootStorage: WorkSpacesClientTypes.RootStorage?
    let tags: [WorkSpacesClientTypes.Tag]?
}

extension CreateWorkspaceBundleInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bundleDescription = "BundleDescription"
        case bundleName = "BundleName"
        case computeType = "ComputeType"
        case imageId = "ImageId"
        case rootStorage = "RootStorage"
        case tags = "Tags"
        case userStorage = "UserStorage"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let bundleNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .bundleName)
        bundleName = bundleNameDecoded
        let bundleDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .bundleDescription)
        bundleDescription = bundleDescriptionDecoded
        let imageIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .imageId)
        imageId = imageIdDecoded
        let computeTypeDecoded = try containerValues.decodeIfPresent(WorkSpacesClientTypes.ComputeType.self, forKey: .computeType)
        computeType = computeTypeDecoded
        let userStorageDecoded = try containerValues.decodeIfPresent(WorkSpacesClientTypes.UserStorage.self, forKey: .userStorage)
        userStorage = userStorageDecoded
        let rootStorageDecoded = try containerValues.decodeIfPresent(WorkSpacesClientTypes.RootStorage.self, forKey: .rootStorage)
        rootStorage = rootStorageDecoded
        let tagsContainer = try containerValues.decodeIfPresent([WorkSpacesClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[WorkSpacesClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [WorkSpacesClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}
