// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ImportWorkspaceImageInputBody: Swift.Equatable {
    let ec2ImageId: Swift.String?
    let ingestionProcess: WorkSpacesClientTypes.WorkspaceImageIngestionProcess?
    let imageName: Swift.String?
    let imageDescription: Swift.String?
    let tags: [WorkSpacesClientTypes.Tag]?
    let applications: [WorkSpacesClientTypes.Application]?
}

extension ImportWorkspaceImageInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applications = "Applications"
        case ec2ImageId = "Ec2ImageId"
        case imageDescription = "ImageDescription"
        case imageName = "ImageName"
        case ingestionProcess = "IngestionProcess"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ec2ImageIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ec2ImageId)
        ec2ImageId = ec2ImageIdDecoded
        let ingestionProcessDecoded = try containerValues.decodeIfPresent(WorkSpacesClientTypes.WorkspaceImageIngestionProcess.self, forKey: .ingestionProcess)
        ingestionProcess = ingestionProcessDecoded
        let imageNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .imageName)
        imageName = imageNameDecoded
        let imageDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .imageDescription)
        imageDescription = imageDescriptionDecoded
        let tagsContainer = try containerValues.decodeIfPresent([WorkSpacesClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[WorkSpacesClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [WorkSpacesClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let applicationsContainer = try containerValues.decodeIfPresent([WorkSpacesClientTypes.Application?].self, forKey: .applications)
        var applicationsDecoded0:[WorkSpacesClientTypes.Application]? = nil
        if let applicationsContainer = applicationsContainer {
            applicationsDecoded0 = [WorkSpacesClientTypes.Application]()
            for enum0 in applicationsContainer {
                if let enum0 = enum0 {
                    applicationsDecoded0?.append(enum0)
                }
            }
        }
        applications = applicationsDecoded0
    }
}
