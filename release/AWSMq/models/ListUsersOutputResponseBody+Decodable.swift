// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListUsersOutputResponseBody: Swift.Equatable {
    let brokerId: Swift.String?
    let maxResults: Swift.Int?
    let nextToken: Swift.String?
    let users: [MqClientTypes.UserSummary]?
}

extension ListUsersOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case brokerId = "brokerId"
        case maxResults = "maxResults"
        case nextToken = "nextToken"
        case users = "users"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let brokerIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .brokerId)
        brokerId = brokerIdDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let usersContainer = try containerValues.decodeIfPresent([MqClientTypes.UserSummary?].self, forKey: .users)
        var usersDecoded0:[MqClientTypes.UserSummary]? = nil
        if let usersContainer = usersContainer {
            usersDecoded0 = [MqClientTypes.UserSummary]()
            for structure0 in usersContainer {
                if let structure0 = structure0 {
                    usersDecoded0?.append(structure0)
                }
            }
        }
        users = usersDecoded0
    }
}
