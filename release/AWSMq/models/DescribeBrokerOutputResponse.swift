// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct DescribeBrokerOutputResponse: Swift.Equatable {
    /// A list of actions required for a broker.
    public var actionsRequired: [MqClientTypes.ActionRequired]?
    /// The authentication strategy used to secure the broker. The default is SIMPLE.
    public var authenticationStrategy: MqClientTypes.AuthenticationStrategy?
    /// Enables automatic upgrades to new minor versions for brokers, as new versions are released and supported by Amazon MQ. Automatic upgrades occur during the scheduled maintenance window of the broker or after a manual broker reboot.
    public var autoMinorVersionUpgrade: Swift.Bool?
    /// The broker's Amazon Resource Name (ARN).
    public var brokerArn: Swift.String?
    /// The unique ID that Amazon MQ generates for the broker.
    public var brokerId: Swift.String?
    /// A list of information about allocated brokers.
    public var brokerInstances: [MqClientTypes.BrokerInstance]?
    /// The broker's name. This value must be unique in your AWS account, 1-50 characters long, must contain only letters, numbers, dashes, and underscores, and must not contain white spaces, brackets, wildcard characters, or special characters.
    public var brokerName: Swift.String?
    /// The broker's status.
    public var brokerState: MqClientTypes.BrokerState?
    /// The list of all revisions for the specified configuration.
    public var configurations: MqClientTypes.Configurations?
    /// The time when the broker was created.
    public var created: ClientRuntime.Date?
    /// The broker's deployment mode.
    public var deploymentMode: MqClientTypes.DeploymentMode?
    /// Encryption options for the broker. Does not apply to RabbitMQ brokers.
    public var encryptionOptions: MqClientTypes.EncryptionOptions?
    /// The type of broker engine. Currently, Amazon MQ supports ACTIVEMQ and RABBITMQ.
    public var engineType: MqClientTypes.EngineType?
    /// The broker engine's version. For a list of supported engine versions, see [Supported engines](https://docs.aws.amazon.com//amazon-mq/latest/developer-guide/broker-engine.html).
    public var engineVersion: Swift.String?
    /// The broker's instance type.
    public var hostInstanceType: Swift.String?
    /// The metadata of the LDAP server used to authenticate and authorize connections to the broker.
    public var ldapServerMetadata: MqClientTypes.LdapServerMetadataOutput?
    /// The list of information about logs currently enabled and pending to be deployed for the specified broker.
    public var logs: MqClientTypes.LogsSummary?
    /// The parameters that determine the WeeklyStartTime.
    public var maintenanceWindowStartTime: MqClientTypes.WeeklyStartTime?
    /// The authentication strategy that will be applied when the broker is rebooted. The default is SIMPLE.
    public var pendingAuthenticationStrategy: MqClientTypes.AuthenticationStrategy?
    /// The broker engine version to upgrade to. For a list of supported engine versions, see [Supported engines](https://docs.aws.amazon.com//amazon-mq/latest/developer-guide/broker-engine.html).
    public var pendingEngineVersion: Swift.String?
    /// The broker's host instance type to upgrade to. For a list of supported instance types, see [Broker instance types](https://docs.aws.amazon.com//amazon-mq/latest/developer-guide/broker.html#broker-instance-types).
    public var pendingHostInstanceType: Swift.String?
    /// The metadata of the LDAP server that will be used to authenticate and authorize connections to the broker after it is rebooted.
    public var pendingLdapServerMetadata: MqClientTypes.LdapServerMetadataOutput?
    /// The list of pending security groups to authorize connections to brokers.
    public var pendingSecurityGroups: [Swift.String]?
    /// Enables connections from applications outside of the VPC that hosts the broker's subnets.
    public var publiclyAccessible: Swift.Bool?
    /// The list of rules (1 minimum, 125 maximum) that authorize connections to brokers.
    public var securityGroups: [Swift.String]?
    /// The broker's storage type.
    public var storageType: MqClientTypes.BrokerStorageType?
    /// The list of groups that define which subnets and IP ranges the broker can use from different Availability Zones.
    public var subnetIds: [Swift.String]?
    /// The list of all tags associated with this broker.
    public var tags: [Swift.String:Swift.String]?
    /// The list of all broker usernames for the specified broker.
    public var users: [MqClientTypes.UserSummary]?

    public init (
        actionsRequired: [MqClientTypes.ActionRequired]? = nil,
        authenticationStrategy: MqClientTypes.AuthenticationStrategy? = nil,
        autoMinorVersionUpgrade: Swift.Bool? = nil,
        brokerArn: Swift.String? = nil,
        brokerId: Swift.String? = nil,
        brokerInstances: [MqClientTypes.BrokerInstance]? = nil,
        brokerName: Swift.String? = nil,
        brokerState: MqClientTypes.BrokerState? = nil,
        configurations: MqClientTypes.Configurations? = nil,
        created: ClientRuntime.Date? = nil,
        deploymentMode: MqClientTypes.DeploymentMode? = nil,
        encryptionOptions: MqClientTypes.EncryptionOptions? = nil,
        engineType: MqClientTypes.EngineType? = nil,
        engineVersion: Swift.String? = nil,
        hostInstanceType: Swift.String? = nil,
        ldapServerMetadata: MqClientTypes.LdapServerMetadataOutput? = nil,
        logs: MqClientTypes.LogsSummary? = nil,
        maintenanceWindowStartTime: MqClientTypes.WeeklyStartTime? = nil,
        pendingAuthenticationStrategy: MqClientTypes.AuthenticationStrategy? = nil,
        pendingEngineVersion: Swift.String? = nil,
        pendingHostInstanceType: Swift.String? = nil,
        pendingLdapServerMetadata: MqClientTypes.LdapServerMetadataOutput? = nil,
        pendingSecurityGroups: [Swift.String]? = nil,
        publiclyAccessible: Swift.Bool? = nil,
        securityGroups: [Swift.String]? = nil,
        storageType: MqClientTypes.BrokerStorageType? = nil,
        subnetIds: [Swift.String]? = nil,
        tags: [Swift.String:Swift.String]? = nil,
        users: [MqClientTypes.UserSummary]? = nil
    )
    {
        self.actionsRequired = actionsRequired
        self.authenticationStrategy = authenticationStrategy
        self.autoMinorVersionUpgrade = autoMinorVersionUpgrade
        self.brokerArn = brokerArn
        self.brokerId = brokerId
        self.brokerInstances = brokerInstances
        self.brokerName = brokerName
        self.brokerState = brokerState
        self.configurations = configurations
        self.created = created
        self.deploymentMode = deploymentMode
        self.encryptionOptions = encryptionOptions
        self.engineType = engineType
        self.engineVersion = engineVersion
        self.hostInstanceType = hostInstanceType
        self.ldapServerMetadata = ldapServerMetadata
        self.logs = logs
        self.maintenanceWindowStartTime = maintenanceWindowStartTime
        self.pendingAuthenticationStrategy = pendingAuthenticationStrategy
        self.pendingEngineVersion = pendingEngineVersion
        self.pendingHostInstanceType = pendingHostInstanceType
        self.pendingLdapServerMetadata = pendingLdapServerMetadata
        self.pendingSecurityGroups = pendingSecurityGroups
        self.publiclyAccessible = publiclyAccessible
        self.securityGroups = securityGroups
        self.storageType = storageType
        self.subnetIds = subnetIds
        self.tags = tags
        self.users = users
    }
}
