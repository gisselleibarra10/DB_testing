// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension MqClientTypes.BrokerSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case brokerArn = "brokerArn"
        case brokerId = "brokerId"
        case brokerName = "brokerName"
        case brokerState = "brokerState"
        case created = "created"
        case deploymentMode = "deploymentMode"
        case engineType = "engineType"
        case hostInstanceType = "hostInstanceType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let brokerArn = self.brokerArn {
            try encodeContainer.encode(brokerArn, forKey: .brokerArn)
        }
        if let brokerId = self.brokerId {
            try encodeContainer.encode(brokerId, forKey: .brokerId)
        }
        if let brokerName = self.brokerName {
            try encodeContainer.encode(brokerName, forKey: .brokerName)
        }
        if let brokerState = self.brokerState {
            try encodeContainer.encode(brokerState.rawValue, forKey: .brokerState)
        }
        if let created = self.created {
            try encodeContainer.encode(created.timeIntervalSince1970, forKey: .created)
        }
        if let deploymentMode = self.deploymentMode {
            try encodeContainer.encode(deploymentMode.rawValue, forKey: .deploymentMode)
        }
        if let engineType = self.engineType {
            try encodeContainer.encode(engineType.rawValue, forKey: .engineType)
        }
        if let hostInstanceType = self.hostInstanceType {
            try encodeContainer.encode(hostInstanceType, forKey: .hostInstanceType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let brokerArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .brokerArn)
        brokerArn = brokerArnDecoded
        let brokerIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .brokerId)
        brokerId = brokerIdDecoded
        let brokerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .brokerName)
        brokerName = brokerNameDecoded
        let brokerStateDecoded = try containerValues.decodeIfPresent(MqClientTypes.BrokerState.self, forKey: .brokerState)
        brokerState = brokerStateDecoded
        let createdDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .created)
        created = createdDecoded
        let deploymentModeDecoded = try containerValues.decodeIfPresent(MqClientTypes.DeploymentMode.self, forKey: .deploymentMode)
        deploymentMode = deploymentModeDecoded
        let engineTypeDecoded = try containerValues.decodeIfPresent(MqClientTypes.EngineType.self, forKey: .engineType)
        engineType = engineTypeDecoded
        let hostInstanceTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .hostInstanceType)
        hostInstanceType = hostInstanceTypeDecoded
    }
}
