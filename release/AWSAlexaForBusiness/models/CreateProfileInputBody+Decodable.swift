// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateProfileInputBody: Swift.Equatable {
    let profileName: Swift.String?
    let timezone: Swift.String?
    let address: Swift.String?
    let distanceUnit: AlexaForBusinessClientTypes.DistanceUnit?
    let temperatureUnit: AlexaForBusinessClientTypes.TemperatureUnit?
    let wakeWord: AlexaForBusinessClientTypes.WakeWord?
    let locale: Swift.String?
    let clientRequestToken: Swift.String?
    let setupModeDisabled: Swift.Bool?
    let maxVolumeLimit: Swift.Int?
    let pSTNEnabled: Swift.Bool?
    let dataRetentionOptIn: Swift.Bool?
    let meetingRoomConfiguration: AlexaForBusinessClientTypes.CreateMeetingRoomConfiguration?
    let tags: [AlexaForBusinessClientTypes.Tag]?
}

extension CreateProfileInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case address = "Address"
        case clientRequestToken = "ClientRequestToken"
        case dataRetentionOptIn = "DataRetentionOptIn"
        case distanceUnit = "DistanceUnit"
        case locale = "Locale"
        case maxVolumeLimit = "MaxVolumeLimit"
        case meetingRoomConfiguration = "MeetingRoomConfiguration"
        case pSTNEnabled = "PSTNEnabled"
        case profileName = "ProfileName"
        case setupModeDisabled = "SetupModeDisabled"
        case tags = "Tags"
        case temperatureUnit = "TemperatureUnit"
        case timezone = "Timezone"
        case wakeWord = "WakeWord"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let profileNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .profileName)
        profileName = profileNameDecoded
        let timezoneDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .timezone)
        timezone = timezoneDecoded
        let addressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .address)
        address = addressDecoded
        let distanceUnitDecoded = try containerValues.decodeIfPresent(AlexaForBusinessClientTypes.DistanceUnit.self, forKey: .distanceUnit)
        distanceUnit = distanceUnitDecoded
        let temperatureUnitDecoded = try containerValues.decodeIfPresent(AlexaForBusinessClientTypes.TemperatureUnit.self, forKey: .temperatureUnit)
        temperatureUnit = temperatureUnitDecoded
        let wakeWordDecoded = try containerValues.decodeIfPresent(AlexaForBusinessClientTypes.WakeWord.self, forKey: .wakeWord)
        wakeWord = wakeWordDecoded
        let localeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .locale)
        locale = localeDecoded
        let clientRequestTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientRequestToken)
        clientRequestToken = clientRequestTokenDecoded
        let setupModeDisabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .setupModeDisabled)
        setupModeDisabled = setupModeDisabledDecoded
        let maxVolumeLimitDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxVolumeLimit)
        maxVolumeLimit = maxVolumeLimitDecoded
        let pSTNEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .pSTNEnabled)
        pSTNEnabled = pSTNEnabledDecoded
        let dataRetentionOptInDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .dataRetentionOptIn)
        dataRetentionOptIn = dataRetentionOptInDecoded
        let meetingRoomConfigurationDecoded = try containerValues.decodeIfPresent(AlexaForBusinessClientTypes.CreateMeetingRoomConfiguration.self, forKey: .meetingRoomConfiguration)
        meetingRoomConfiguration = meetingRoomConfigurationDecoded
        let tagsContainer = try containerValues.decodeIfPresent([AlexaForBusinessClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[AlexaForBusinessClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [AlexaForBusinessClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}
