// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct SendAnnouncementInputBody: Swift.Equatable {
    let roomFilters: [AlexaForBusinessClientTypes.Filter]?
    let content: AlexaForBusinessClientTypes.Content?
    let timeToLiveInSeconds: Swift.Int?
    let clientRequestToken: Swift.String?
}

extension SendAnnouncementInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientRequestToken = "ClientRequestToken"
        case content = "Content"
        case roomFilters = "RoomFilters"
        case timeToLiveInSeconds = "TimeToLiveInSeconds"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let roomFiltersContainer = try containerValues.decodeIfPresent([AlexaForBusinessClientTypes.Filter?].self, forKey: .roomFilters)
        var roomFiltersDecoded0:[AlexaForBusinessClientTypes.Filter]? = nil
        if let roomFiltersContainer = roomFiltersContainer {
            roomFiltersDecoded0 = [AlexaForBusinessClientTypes.Filter]()
            for structure0 in roomFiltersContainer {
                if let structure0 = structure0 {
                    roomFiltersDecoded0?.append(structure0)
                }
            }
        }
        roomFilters = roomFiltersDecoded0
        let contentDecoded = try containerValues.decodeIfPresent(AlexaForBusinessClientTypes.Content.self, forKey: .content)
        content = contentDecoded
        let timeToLiveInSecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .timeToLiveInSeconds)
        timeToLiveInSeconds = timeToLiveInSecondsDecoded
        let clientRequestTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientRequestToken)
        clientRequestToken = clientRequestTokenDecoded
    }
}
