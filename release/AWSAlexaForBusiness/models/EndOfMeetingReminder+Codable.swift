// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AlexaForBusinessClientTypes.EndOfMeetingReminder: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case enabled = "Enabled"
        case reminderAtMinutes = "ReminderAtMinutes"
        case reminderType = "ReminderType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let enabled = self.enabled {
            try encodeContainer.encode(enabled, forKey: .enabled)
        }
        if let reminderAtMinutes = reminderAtMinutes {
            var reminderAtMinutesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .reminderAtMinutes)
            for endofmeetingreminderminuteslist0 in reminderAtMinutes {
                try reminderAtMinutesContainer.encode(endofmeetingreminderminuteslist0)
            }
        }
        if let reminderType = self.reminderType {
            try encodeContainer.encode(reminderType.rawValue, forKey: .reminderType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let reminderAtMinutesContainer = try containerValues.decodeIfPresent([Swift.Int?].self, forKey: .reminderAtMinutes)
        var reminderAtMinutesDecoded0:[Swift.Int]? = nil
        if let reminderAtMinutesContainer = reminderAtMinutesContainer {
            reminderAtMinutesDecoded0 = [Swift.Int]()
            for integer0 in reminderAtMinutesContainer {
                if let integer0 = integer0 {
                    reminderAtMinutesDecoded0?.append(integer0)
                }
            }
        }
        reminderAtMinutes = reminderAtMinutesDecoded0
        let reminderTypeDecoded = try containerValues.decodeIfPresent(AlexaForBusinessClientTypes.EndOfMeetingReminderType.self, forKey: .reminderType)
        reminderType = reminderTypeDecoded
        let enabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enabled)
        enabled = enabledDecoded
    }
}
