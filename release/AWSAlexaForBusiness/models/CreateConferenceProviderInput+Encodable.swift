// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CreateConferenceProviderInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientRequestToken = "ClientRequestToken"
        case conferenceProviderName = "ConferenceProviderName"
        case conferenceProviderType = "ConferenceProviderType"
        case iPDialIn = "IPDialIn"
        case meetingSetting = "MeetingSetting"
        case pSTNDialIn = "PSTNDialIn"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientRequestToken = self.clientRequestToken {
            try encodeContainer.encode(clientRequestToken, forKey: .clientRequestToken)
        }
        if let conferenceProviderName = self.conferenceProviderName {
            try encodeContainer.encode(conferenceProviderName, forKey: .conferenceProviderName)
        }
        if let conferenceProviderType = self.conferenceProviderType {
            try encodeContainer.encode(conferenceProviderType.rawValue, forKey: .conferenceProviderType)
        }
        if let iPDialIn = self.iPDialIn {
            try encodeContainer.encode(iPDialIn, forKey: .iPDialIn)
        }
        if let meetingSetting = self.meetingSetting {
            try encodeContainer.encode(meetingSetting, forKey: .meetingSetting)
        }
        if let pSTNDialIn = self.pSTNDialIn {
            try encodeContainer.encode(pSTNDialIn, forKey: .pSTNDialIn)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }
}
