// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateBusinessReportScheduleInputBody: Swift.Equatable {
    let scheduleName: Swift.String?
    let s3BucketName: Swift.String?
    let s3KeyPrefix: Swift.String?
    let format: AlexaForBusinessClientTypes.BusinessReportFormat?
    let contentRange: AlexaForBusinessClientTypes.BusinessReportContentRange?
    let recurrence: AlexaForBusinessClientTypes.BusinessReportRecurrence?
    let clientRequestToken: Swift.String?
    let tags: [AlexaForBusinessClientTypes.Tag]?
}

extension CreateBusinessReportScheduleInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientRequestToken = "ClientRequestToken"
        case contentRange = "ContentRange"
        case format = "Format"
        case recurrence = "Recurrence"
        case s3BucketName = "S3BucketName"
        case s3KeyPrefix = "S3KeyPrefix"
        case scheduleName = "ScheduleName"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let scheduleNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .scheduleName)
        scheduleName = scheduleNameDecoded
        let s3BucketNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .s3BucketName)
        s3BucketName = s3BucketNameDecoded
        let s3KeyPrefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .s3KeyPrefix)
        s3KeyPrefix = s3KeyPrefixDecoded
        let formatDecoded = try containerValues.decodeIfPresent(AlexaForBusinessClientTypes.BusinessReportFormat.self, forKey: .format)
        format = formatDecoded
        let contentRangeDecoded = try containerValues.decodeIfPresent(AlexaForBusinessClientTypes.BusinessReportContentRange.self, forKey: .contentRange)
        contentRange = contentRangeDecoded
        let recurrenceDecoded = try containerValues.decodeIfPresent(AlexaForBusinessClientTypes.BusinessReportRecurrence.self, forKey: .recurrence)
        recurrence = recurrenceDecoded
        let clientRequestTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientRequestToken)
        clientRequestToken = clientRequestTokenDecoded
        let tagsContainer = try containerValues.decodeIfPresent([AlexaForBusinessClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[AlexaForBusinessClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [AlexaForBusinessClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}
