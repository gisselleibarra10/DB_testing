// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct TranslateTextInputBody: Swift.Equatable {
    let text: Swift.String?
    let terminologyNames: [Swift.String]?
    let sourceLanguageCode: Swift.String?
    let targetLanguageCode: Swift.String?
    let settings: TranslateClientTypes.TranslationSettings?
}

extension TranslateTextInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case settings = "Settings"
        case sourceLanguageCode = "SourceLanguageCode"
        case targetLanguageCode = "TargetLanguageCode"
        case terminologyNames = "TerminologyNames"
        case text = "Text"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let textDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .text)
        text = textDecoded
        let terminologyNamesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .terminologyNames)
        var terminologyNamesDecoded0:[Swift.String]? = nil
        if let terminologyNamesContainer = terminologyNamesContainer {
            terminologyNamesDecoded0 = [Swift.String]()
            for string0 in terminologyNamesContainer {
                if let string0 = string0 {
                    terminologyNamesDecoded0?.append(string0)
                }
            }
        }
        terminologyNames = terminologyNamesDecoded0
        let sourceLanguageCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceLanguageCode)
        sourceLanguageCode = sourceLanguageCodeDecoded
        let targetLanguageCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .targetLanguageCode)
        targetLanguageCode = targetLanguageCodeDecoded
        let settingsDecoded = try containerValues.decodeIfPresent(TranslateClientTypes.TranslationSettings.self, forKey: .settings)
        settings = settingsDecoded
    }
}
