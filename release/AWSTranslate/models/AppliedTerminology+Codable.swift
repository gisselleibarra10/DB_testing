// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension TranslateClientTypes.AppliedTerminology: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case terms = "Terms"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let terms = terms {
            var termsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .terms)
            for termlist0 in terms {
                try termsContainer.encode(termlist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let termsContainer = try containerValues.decodeIfPresent([TranslateClientTypes.Term?].self, forKey: .terms)
        var termsDecoded0:[TranslateClientTypes.Term]? = nil
        if let termsContainer = termsContainer {
            termsDecoded0 = [TranslateClientTypes.Term]()
            for structure0 in termsContainer {
                if let structure0 = structure0 {
                    termsDecoded0?.append(structure0)
                }
            }
        }
        terms = termsDecoded0
    }
}
