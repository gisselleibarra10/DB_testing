// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension StartTextTranslationJobInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientToken = "ClientToken"
        case dataAccessRoleArn = "DataAccessRoleArn"
        case inputDataConfig = "InputDataConfig"
        case jobName = "JobName"
        case outputDataConfig = "OutputDataConfig"
        case parallelDataNames = "ParallelDataNames"
        case settings = "Settings"
        case sourceLanguageCode = "SourceLanguageCode"
        case targetLanguageCodes = "TargetLanguageCodes"
        case terminologyNames = "TerminologyNames"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientToken = self.clientToken {
            try encodeContainer.encode(clientToken, forKey: .clientToken)
        }
        if let dataAccessRoleArn = self.dataAccessRoleArn {
            try encodeContainer.encode(dataAccessRoleArn, forKey: .dataAccessRoleArn)
        }
        if let inputDataConfig = self.inputDataConfig {
            try encodeContainer.encode(inputDataConfig, forKey: .inputDataConfig)
        }
        if let jobName = self.jobName {
            try encodeContainer.encode(jobName, forKey: .jobName)
        }
        if let outputDataConfig = self.outputDataConfig {
            try encodeContainer.encode(outputDataConfig, forKey: .outputDataConfig)
        }
        if let parallelDataNames = parallelDataNames {
            var parallelDataNamesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .parallelDataNames)
            for resourcenamelist0 in parallelDataNames {
                try parallelDataNamesContainer.encode(resourcenamelist0)
            }
        }
        if let settings = self.settings {
            try encodeContainer.encode(settings, forKey: .settings)
        }
        if let sourceLanguageCode = self.sourceLanguageCode {
            try encodeContainer.encode(sourceLanguageCode, forKey: .sourceLanguageCode)
        }
        if let targetLanguageCodes = targetLanguageCodes {
            var targetLanguageCodesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .targetLanguageCodes)
            for targetlanguagecodestringlist0 in targetLanguageCodes {
                try targetLanguageCodesContainer.encode(targetlanguagecodestringlist0)
            }
        }
        if let terminologyNames = terminologyNames {
            var terminologyNamesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .terminologyNames)
            for resourcenamelist0 in terminologyNames {
                try terminologyNamesContainer.encode(resourcenamelist0)
            }
        }
    }
}
