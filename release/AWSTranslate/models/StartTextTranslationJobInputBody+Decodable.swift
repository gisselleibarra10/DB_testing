// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct StartTextTranslationJobInputBody: Swift.Equatable {
    let jobName: Swift.String?
    let inputDataConfig: TranslateClientTypes.InputDataConfig?
    let outputDataConfig: TranslateClientTypes.OutputDataConfig?
    let dataAccessRoleArn: Swift.String?
    let sourceLanguageCode: Swift.String?
    let targetLanguageCodes: [Swift.String]?
    let terminologyNames: [Swift.String]?
    let parallelDataNames: [Swift.String]?
    let clientToken: Swift.String?
    let settings: TranslateClientTypes.TranslationSettings?
}

extension StartTextTranslationJobInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientToken = "ClientToken"
        case dataAccessRoleArn = "DataAccessRoleArn"
        case inputDataConfig = "InputDataConfig"
        case jobName = "JobName"
        case outputDataConfig = "OutputDataConfig"
        case parallelDataNames = "ParallelDataNames"
        case settings = "Settings"
        case sourceLanguageCode = "SourceLanguageCode"
        case targetLanguageCodes = "TargetLanguageCodes"
        case terminologyNames = "TerminologyNames"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobName)
        jobName = jobNameDecoded
        let inputDataConfigDecoded = try containerValues.decodeIfPresent(TranslateClientTypes.InputDataConfig.self, forKey: .inputDataConfig)
        inputDataConfig = inputDataConfigDecoded
        let outputDataConfigDecoded = try containerValues.decodeIfPresent(TranslateClientTypes.OutputDataConfig.self, forKey: .outputDataConfig)
        outputDataConfig = outputDataConfigDecoded
        let dataAccessRoleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataAccessRoleArn)
        dataAccessRoleArn = dataAccessRoleArnDecoded
        let sourceLanguageCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceLanguageCode)
        sourceLanguageCode = sourceLanguageCodeDecoded
        let targetLanguageCodesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .targetLanguageCodes)
        var targetLanguageCodesDecoded0:[Swift.String]? = nil
        if let targetLanguageCodesContainer = targetLanguageCodesContainer {
            targetLanguageCodesDecoded0 = [Swift.String]()
            for string0 in targetLanguageCodesContainer {
                if let string0 = string0 {
                    targetLanguageCodesDecoded0?.append(string0)
                }
            }
        }
        targetLanguageCodes = targetLanguageCodesDecoded0
        let terminologyNamesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .terminologyNames)
        var terminologyNamesDecoded0:[Swift.String]? = nil
        if let terminologyNamesContainer = terminologyNamesContainer {
            terminologyNamesDecoded0 = [Swift.String]()
            for string0 in terminologyNamesContainer {
                if let string0 = string0 {
                    terminologyNamesDecoded0?.append(string0)
                }
            }
        }
        terminologyNames = terminologyNamesDecoded0
        let parallelDataNamesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .parallelDataNames)
        var parallelDataNamesDecoded0:[Swift.String]? = nil
        if let parallelDataNamesContainer = parallelDataNamesContainer {
            parallelDataNamesDecoded0 = [Swift.String]()
            for string0 in parallelDataNamesContainer {
                if let string0 = string0 {
                    parallelDataNamesDecoded0?.append(string0)
                }
            }
        }
        parallelDataNames = parallelDataNamesDecoded0
        let clientTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientToken)
        clientToken = clientTokenDecoded
        let settingsDecoded = try containerValues.decodeIfPresent(TranslateClientTypes.TranslationSettings.self, forKey: .settings)
        settings = settingsDecoded
    }
}
