// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension TranslateClientTypes.TerminologyProperties: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "Arn"
        case createdAt = "CreatedAt"
        case description = "Description"
        case directionality = "Directionality"
        case encryptionKey = "EncryptionKey"
        case format = "Format"
        case lastUpdatedAt = "LastUpdatedAt"
        case message = "Message"
        case name = "Name"
        case sizeBytes = "SizeBytes"
        case skippedTermCount = "SkippedTermCount"
        case sourceLanguageCode = "SourceLanguageCode"
        case targetLanguageCodes = "TargetLanguageCodes"
        case termCount = "TermCount"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = self.arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let createdAt = self.createdAt {
            try encodeContainer.encode(createdAt.timeIntervalSince1970, forKey: .createdAt)
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let directionality = self.directionality {
            try encodeContainer.encode(directionality.rawValue, forKey: .directionality)
        }
        if let encryptionKey = self.encryptionKey {
            try encodeContainer.encode(encryptionKey, forKey: .encryptionKey)
        }
        if let format = self.format {
            try encodeContainer.encode(format.rawValue, forKey: .format)
        }
        if let lastUpdatedAt = self.lastUpdatedAt {
            try encodeContainer.encode(lastUpdatedAt.timeIntervalSince1970, forKey: .lastUpdatedAt)
        }
        if let message = self.message {
            try encodeContainer.encode(message, forKey: .message)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let sizeBytes = self.sizeBytes {
            try encodeContainer.encode(sizeBytes, forKey: .sizeBytes)
        }
        if let skippedTermCount = self.skippedTermCount {
            try encodeContainer.encode(skippedTermCount, forKey: .skippedTermCount)
        }
        if let sourceLanguageCode = self.sourceLanguageCode {
            try encodeContainer.encode(sourceLanguageCode, forKey: .sourceLanguageCode)
        }
        if let targetLanguageCodes = targetLanguageCodes {
            var targetLanguageCodesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .targetLanguageCodes)
            for languagecodestringlist0 in targetLanguageCodes {
                try targetLanguageCodesContainer.encode(languagecodestringlist0)
            }
        }
        if let termCount = self.termCount {
            try encodeContainer.encode(termCount, forKey: .termCount)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let sourceLanguageCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceLanguageCode)
        sourceLanguageCode = sourceLanguageCodeDecoded
        let targetLanguageCodesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .targetLanguageCodes)
        var targetLanguageCodesDecoded0:[Swift.String]? = nil
        if let targetLanguageCodesContainer = targetLanguageCodesContainer {
            targetLanguageCodesDecoded0 = [Swift.String]()
            for string0 in targetLanguageCodesContainer {
                if let string0 = string0 {
                    targetLanguageCodesDecoded0?.append(string0)
                }
            }
        }
        targetLanguageCodes = targetLanguageCodesDecoded0
        let encryptionKeyDecoded = try containerValues.decodeIfPresent(TranslateClientTypes.EncryptionKey.self, forKey: .encryptionKey)
        encryptionKey = encryptionKeyDecoded
        let sizeBytesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .sizeBytes)
        sizeBytes = sizeBytesDecoded
        let termCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .termCount)
        termCount = termCountDecoded
        let createdAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdAt)
        createdAt = createdAtDecoded
        let lastUpdatedAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastUpdatedAt)
        lastUpdatedAt = lastUpdatedAtDecoded
        let directionalityDecoded = try containerValues.decodeIfPresent(TranslateClientTypes.Directionality.self, forKey: .directionality)
        directionality = directionalityDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let skippedTermCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .skippedTermCount)
        skippedTermCount = skippedTermCountDecoded
        let formatDecoded = try containerValues.decodeIfPresent(TranslateClientTypes.TerminologyDataFormat.self, forKey: .format)
        format = formatDecoded
    }
}
