// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListLanguagesOutputResponseBody: Swift.Equatable {
    let languages: [TranslateClientTypes.Language]?
    let displayLanguageCode: TranslateClientTypes.DisplayLanguageCode?
    let nextToken: Swift.String?
}

extension ListLanguagesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case displayLanguageCode = "DisplayLanguageCode"
        case languages = "Languages"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let languagesContainer = try containerValues.decodeIfPresent([TranslateClientTypes.Language?].self, forKey: .languages)
        var languagesDecoded0:[TranslateClientTypes.Language]? = nil
        if let languagesContainer = languagesContainer {
            languagesDecoded0 = [TranslateClientTypes.Language]()
            for structure0 in languagesContainer {
                if let structure0 = structure0 {
                    languagesDecoded0?.append(structure0)
                }
            }
        }
        languages = languagesDecoded0
        let displayLanguageCodeDecoded = try containerValues.decodeIfPresent(TranslateClientTypes.DisplayLanguageCode.self, forKey: .displayLanguageCode)
        displayLanguageCode = displayLanguageCodeDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
