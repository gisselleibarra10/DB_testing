// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension GrafanaClientTypes {
    public enum WorkspaceStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        /// Workspace is active.
        case active
        /// Workspace is being created.
        case creating
        /// Workspace creation failed.
        case creationFailed
        /// Workspace is being deleted.
        case deleting
        /// Workspace deletion failed.
        case deletionFailed
        /// Workspace is in an invalid state, it can only and should be deleted.
        case failed
        /// Failed to remove enterprise license from workspace.
        case licenseRemovalFailed
        /// Workspace update failed.
        case updateFailed
        /// Workspace is being updated.
        case updating
        /// Workspace upgrade failed.
        case upgradeFailed
        /// Workspace is being upgraded to enterprise.
        case upgrading
        case sdkUnknown(Swift.String)

        public static var allCases: [WorkspaceStatus] {
            return [
                .active,
                .creating,
                .creationFailed,
                .deleting,
                .deletionFailed,
                .failed,
                .licenseRemovalFailed,
                .updateFailed,
                .updating,
                .upgradeFailed,
                .upgrading,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .creating: return "CREATING"
            case .creationFailed: return "CREATION_FAILED"
            case .deleting: return "DELETING"
            case .deletionFailed: return "DELETION_FAILED"
            case .failed: return "FAILED"
            case .licenseRemovalFailed: return "LICENSE_REMOVAL_FAILED"
            case .updateFailed: return "UPDATE_FAILED"
            case .updating: return "UPDATING"
            case .upgradeFailed: return "UPGRADE_FAILED"
            case .upgrading: return "UPGRADING"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = WorkspaceStatus(rawValue: rawValue) ?? WorkspaceStatus.sdkUnknown(rawValue)
        }
    }
}
