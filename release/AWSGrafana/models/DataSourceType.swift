// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension GrafanaClientTypes {
    public enum DataSourceType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        /// Amazon OpenSearch Service
        case amazonOpensearchService
        /// Amazon Athena
        case athena
        /// CloudWatch Logs
        case cloudwatch
        /// Managed Prometheus
        case prometheus
        /// Redshift
        case redshift
        /// IoT SiteWise
        case sitewise
        /// Timestream
        case timestream
        /// X-Ray
        case xray
        case sdkUnknown(Swift.String)

        public static var allCases: [DataSourceType] {
            return [
                .amazonOpensearchService,
                .athena,
                .cloudwatch,
                .prometheus,
                .redshift,
                .sitewise,
                .timestream,
                .xray,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .amazonOpensearchService: return "AMAZON_OPENSEARCH_SERVICE"
            case .athena: return "ATHENA"
            case .cloudwatch: return "CLOUDWATCH"
            case .prometheus: return "PROMETHEUS"
            case .redshift: return "REDSHIFT"
            case .sitewise: return "SITEWISE"
            case .timestream: return "TIMESTREAM"
            case .xray: return "XRAY"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DataSourceType(rawValue: rawValue) ?? DataSourceType.sdkUnknown(rawValue)
        }
    }
}
