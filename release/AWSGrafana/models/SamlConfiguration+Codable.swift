// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension GrafanaClientTypes.SamlConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case allowedOrganizations
        case assertionAttributes
        case idpMetadata
        case loginValidityDuration
        case roleValues
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let allowedOrganizations = allowedOrganizations {
            var allowedOrganizationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .allowedOrganizations)
            for allowedorganizations0 in allowedOrganizations {
                try allowedOrganizationsContainer.encode(allowedorganizations0)
            }
        }
        if let assertionAttributes = self.assertionAttributes {
            try encodeContainer.encode(assertionAttributes, forKey: .assertionAttributes)
        }
        if let idpMetadata = self.idpMetadata {
            try encodeContainer.encode(idpMetadata, forKey: .idpMetadata)
        }
        if loginValidityDuration != 0 {
            try encodeContainer.encode(loginValidityDuration, forKey: .loginValidityDuration)
        }
        if let roleValues = self.roleValues {
            try encodeContainer.encode(roleValues, forKey: .roleValues)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idpMetadataDecoded = try containerValues.decodeIfPresent(GrafanaClientTypes.IdpMetadata.self, forKey: .idpMetadata)
        idpMetadata = idpMetadataDecoded
        let assertionAttributesDecoded = try containerValues.decodeIfPresent(GrafanaClientTypes.AssertionAttributes.self, forKey: .assertionAttributes)
        assertionAttributes = assertionAttributesDecoded
        let roleValuesDecoded = try containerValues.decodeIfPresent(GrafanaClientTypes.RoleValues.self, forKey: .roleValues)
        roleValues = roleValuesDecoded
        let allowedOrganizationsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .allowedOrganizations)
        var allowedOrganizationsDecoded0:[Swift.String]? = nil
        if let allowedOrganizationsContainer = allowedOrganizationsContainer {
            allowedOrganizationsDecoded0 = [Swift.String]()
            for string0 in allowedOrganizationsContainer {
                if let string0 = string0 {
                    allowedOrganizationsDecoded0?.append(string0)
                }
            }
        }
        allowedOrganizations = allowedOrganizationsDecoded0
        let loginValidityDurationDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .loginValidityDuration) ?? 0
        loginValidityDuration = loginValidityDurationDecoded
    }
}
