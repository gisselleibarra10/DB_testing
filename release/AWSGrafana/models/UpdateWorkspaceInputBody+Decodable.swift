// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct UpdateWorkspaceInputBody: Swift.Equatable {
    let accountAccessType: GrafanaClientTypes.AccountAccessType?
    let organizationRoleName: Swift.String?
    let permissionType: GrafanaClientTypes.PermissionType?
    let stackSetName: Swift.String?
    let workspaceDataSources: [GrafanaClientTypes.DataSourceType]?
    let workspaceDescription: Swift.String?
    let workspaceName: Swift.String?
    let workspaceNotificationDestinations: [GrafanaClientTypes.NotificationDestinationType]?
    let workspaceOrganizationalUnits: [Swift.String]?
    let workspaceRoleArn: Swift.String?
}

extension UpdateWorkspaceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountAccessType
        case organizationRoleName
        case permissionType
        case stackSetName
        case workspaceDataSources
        case workspaceDescription
        case workspaceName
        case workspaceNotificationDestinations
        case workspaceOrganizationalUnits
        case workspaceRoleArn
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let accountAccessTypeDecoded = try containerValues.decodeIfPresent(GrafanaClientTypes.AccountAccessType.self, forKey: .accountAccessType)
        accountAccessType = accountAccessTypeDecoded
        let organizationRoleNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .organizationRoleName)
        organizationRoleName = organizationRoleNameDecoded
        let permissionTypeDecoded = try containerValues.decodeIfPresent(GrafanaClientTypes.PermissionType.self, forKey: .permissionType)
        permissionType = permissionTypeDecoded
        let stackSetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stackSetName)
        stackSetName = stackSetNameDecoded
        let workspaceDataSourcesContainer = try containerValues.decodeIfPresent([GrafanaClientTypes.DataSourceType?].self, forKey: .workspaceDataSources)
        var workspaceDataSourcesDecoded0:[GrafanaClientTypes.DataSourceType]? = nil
        if let workspaceDataSourcesContainer = workspaceDataSourcesContainer {
            workspaceDataSourcesDecoded0 = [GrafanaClientTypes.DataSourceType]()
            for string0 in workspaceDataSourcesContainer {
                if let string0 = string0 {
                    workspaceDataSourcesDecoded0?.append(string0)
                }
            }
        }
        workspaceDataSources = workspaceDataSourcesDecoded0
        let workspaceDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .workspaceDescription)
        workspaceDescription = workspaceDescriptionDecoded
        let workspaceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .workspaceName)
        workspaceName = workspaceNameDecoded
        let workspaceNotificationDestinationsContainer = try containerValues.decodeIfPresent([GrafanaClientTypes.NotificationDestinationType?].self, forKey: .workspaceNotificationDestinations)
        var workspaceNotificationDestinationsDecoded0:[GrafanaClientTypes.NotificationDestinationType]? = nil
        if let workspaceNotificationDestinationsContainer = workspaceNotificationDestinationsContainer {
            workspaceNotificationDestinationsDecoded0 = [GrafanaClientTypes.NotificationDestinationType]()
            for string0 in workspaceNotificationDestinationsContainer {
                if let string0 = string0 {
                    workspaceNotificationDestinationsDecoded0?.append(string0)
                }
            }
        }
        workspaceNotificationDestinations = workspaceNotificationDestinationsDecoded0
        let workspaceOrganizationalUnitsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .workspaceOrganizationalUnits)
        var workspaceOrganizationalUnitsDecoded0:[Swift.String]? = nil
        if let workspaceOrganizationalUnitsContainer = workspaceOrganizationalUnitsContainer {
            workspaceOrganizationalUnitsDecoded0 = [Swift.String]()
            for string0 in workspaceOrganizationalUnitsContainer {
                if let string0 = string0 {
                    workspaceOrganizationalUnitsDecoded0?.append(string0)
                }
            }
        }
        workspaceOrganizationalUnits = workspaceOrganizationalUnitsDecoded0
        let workspaceRoleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .workspaceRoleArn)
        workspaceRoleArn = workspaceRoleArnDecoded
    }
}
