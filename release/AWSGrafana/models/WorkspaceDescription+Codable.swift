// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension GrafanaClientTypes.WorkspaceDescription: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountAccessType
        case authentication
        case created
        case dataSources
        case description
        case endpoint
        case freeTrialConsumed
        case freeTrialExpiration
        case grafanaVersion
        case id
        case licenseExpiration
        case licenseType
        case modified
        case name
        case notificationDestinations
        case organizationRoleName
        case organizationalUnits
        case permissionType
        case stackSetName
        case status
        case tags
        case workspaceRoleArn
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accountAccessType = self.accountAccessType {
            try encodeContainer.encode(accountAccessType.rawValue, forKey: .accountAccessType)
        }
        if let authentication = self.authentication {
            try encodeContainer.encode(authentication, forKey: .authentication)
        }
        if let created = self.created {
            try encodeContainer.encode(created.timeIntervalSince1970, forKey: .created)
        }
        if let dataSources = dataSources {
            var dataSourcesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .dataSources)
            for datasourcetypeslist0 in dataSources {
                try dataSourcesContainer.encode(datasourcetypeslist0.rawValue)
            }
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let endpoint = self.endpoint {
            try encodeContainer.encode(endpoint, forKey: .endpoint)
        }
        if let freeTrialConsumed = self.freeTrialConsumed {
            try encodeContainer.encode(freeTrialConsumed, forKey: .freeTrialConsumed)
        }
        if let freeTrialExpiration = self.freeTrialExpiration {
            try encodeContainer.encode(freeTrialExpiration.timeIntervalSince1970, forKey: .freeTrialExpiration)
        }
        if let grafanaVersion = self.grafanaVersion {
            try encodeContainer.encode(grafanaVersion, forKey: .grafanaVersion)
        }
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let licenseExpiration = self.licenseExpiration {
            try encodeContainer.encode(licenseExpiration.timeIntervalSince1970, forKey: .licenseExpiration)
        }
        if let licenseType = self.licenseType {
            try encodeContainer.encode(licenseType.rawValue, forKey: .licenseType)
        }
        if let modified = self.modified {
            try encodeContainer.encode(modified.timeIntervalSince1970, forKey: .modified)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let notificationDestinations = notificationDestinations {
            var notificationDestinationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .notificationDestinations)
            for notificationdestinationslist0 in notificationDestinations {
                try notificationDestinationsContainer.encode(notificationdestinationslist0.rawValue)
            }
        }
        if let organizationRoleName = self.organizationRoleName {
            try encodeContainer.encode(organizationRoleName, forKey: .organizationRoleName)
        }
        if let organizationalUnits = organizationalUnits {
            var organizationalUnitsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .organizationalUnits)
            for organizationalunitlist0 in organizationalUnits {
                try organizationalUnitsContainer.encode(organizationalunitlist0)
            }
        }
        if let permissionType = self.permissionType {
            try encodeContainer.encode(permissionType.rawValue, forKey: .permissionType)
        }
        if let stackSetName = self.stackSetName {
            try encodeContainer.encode(stackSetName, forKey: .stackSetName)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, tagmap0) in tags {
                try tagsContainer.encode(tagmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let workspaceRoleArn = self.workspaceRoleArn {
            try encodeContainer.encode(workspaceRoleArn, forKey: .workspaceRoleArn)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let accountAccessTypeDecoded = try containerValues.decodeIfPresent(GrafanaClientTypes.AccountAccessType.self, forKey: .accountAccessType)
        accountAccessType = accountAccessTypeDecoded
        let createdDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .created)
        created = createdDecoded
        let dataSourcesContainer = try containerValues.decodeIfPresent([GrafanaClientTypes.DataSourceType?].self, forKey: .dataSources)
        var dataSourcesDecoded0:[GrafanaClientTypes.DataSourceType]? = nil
        if let dataSourcesContainer = dataSourcesContainer {
            dataSourcesDecoded0 = [GrafanaClientTypes.DataSourceType]()
            for string0 in dataSourcesContainer {
                if let string0 = string0 {
                    dataSourcesDecoded0?.append(string0)
                }
            }
        }
        dataSources = dataSourcesDecoded0
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let endpointDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .endpoint)
        endpoint = endpointDecoded
        let grafanaVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .grafanaVersion)
        grafanaVersion = grafanaVersionDecoded
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let modifiedDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .modified)
        modified = modifiedDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let organizationRoleNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .organizationRoleName)
        organizationRoleName = organizationRoleNameDecoded
        let notificationDestinationsContainer = try containerValues.decodeIfPresent([GrafanaClientTypes.NotificationDestinationType?].self, forKey: .notificationDestinations)
        var notificationDestinationsDecoded0:[GrafanaClientTypes.NotificationDestinationType]? = nil
        if let notificationDestinationsContainer = notificationDestinationsContainer {
            notificationDestinationsDecoded0 = [GrafanaClientTypes.NotificationDestinationType]()
            for string0 in notificationDestinationsContainer {
                if let string0 = string0 {
                    notificationDestinationsDecoded0?.append(string0)
                }
            }
        }
        notificationDestinations = notificationDestinationsDecoded0
        let organizationalUnitsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .organizationalUnits)
        var organizationalUnitsDecoded0:[Swift.String]? = nil
        if let organizationalUnitsContainer = organizationalUnitsContainer {
            organizationalUnitsDecoded0 = [Swift.String]()
            for string0 in organizationalUnitsContainer {
                if let string0 = string0 {
                    organizationalUnitsDecoded0?.append(string0)
                }
            }
        }
        organizationalUnits = organizationalUnitsDecoded0
        let permissionTypeDecoded = try containerValues.decodeIfPresent(GrafanaClientTypes.PermissionType.self, forKey: .permissionType)
        permissionType = permissionTypeDecoded
        let stackSetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stackSetName)
        stackSetName = stackSetNameDecoded
        let statusDecoded = try containerValues.decodeIfPresent(GrafanaClientTypes.WorkspaceStatus.self, forKey: .status)
        status = statusDecoded
        let workspaceRoleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .workspaceRoleArn)
        workspaceRoleArn = workspaceRoleArnDecoded
        let licenseTypeDecoded = try containerValues.decodeIfPresent(GrafanaClientTypes.LicenseType.self, forKey: .licenseType)
        licenseType = licenseTypeDecoded
        let freeTrialConsumedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .freeTrialConsumed)
        freeTrialConsumed = freeTrialConsumedDecoded
        let licenseExpirationDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .licenseExpiration)
        licenseExpiration = licenseExpirationDecoded
        let freeTrialExpirationDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .freeTrialExpiration)
        freeTrialExpiration = freeTrialExpirationDecoded
        let authenticationDecoded = try containerValues.decodeIfPresent(GrafanaClientTypes.AuthenticationSummary.self, forKey: .authentication)
        authentication = authenticationDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
    }
}
