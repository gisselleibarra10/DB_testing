// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension GrafanaClientTypes.WorkspaceSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case authentication
        case created
        case description
        case endpoint
        case grafanaVersion
        case id
        case modified
        case name
        case notificationDestinations
        case status
        case tags
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let authentication = self.authentication {
            try encodeContainer.encode(authentication, forKey: .authentication)
        }
        if let created = self.created {
            try encodeContainer.encode(created.timeIntervalSince1970, forKey: .created)
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let endpoint = self.endpoint {
            try encodeContainer.encode(endpoint, forKey: .endpoint)
        }
        if let grafanaVersion = self.grafanaVersion {
            try encodeContainer.encode(grafanaVersion, forKey: .grafanaVersion)
        }
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let modified = self.modified {
            try encodeContainer.encode(modified.timeIntervalSince1970, forKey: .modified)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let notificationDestinations = notificationDestinations {
            var notificationDestinationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .notificationDestinations)
            for notificationdestinationslist0 in notificationDestinations {
                try notificationDestinationsContainer.encode(notificationdestinationslist0.rawValue)
            }
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, tagmap0) in tags {
                try tagsContainer.encode(tagmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let createdDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .created)
        created = createdDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let endpointDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .endpoint)
        endpoint = endpointDecoded
        let grafanaVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .grafanaVersion)
        grafanaVersion = grafanaVersionDecoded
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let modifiedDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .modified)
        modified = modifiedDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let notificationDestinationsContainer = try containerValues.decodeIfPresent([GrafanaClientTypes.NotificationDestinationType?].self, forKey: .notificationDestinations)
        var notificationDestinationsDecoded0:[GrafanaClientTypes.NotificationDestinationType]? = nil
        if let notificationDestinationsContainer = notificationDestinationsContainer {
            notificationDestinationsDecoded0 = [GrafanaClientTypes.NotificationDestinationType]()
            for string0 in notificationDestinationsContainer {
                if let string0 = string0 {
                    notificationDestinationsDecoded0?.append(string0)
                }
            }
        }
        notificationDestinations = notificationDestinationsDecoded0
        let statusDecoded = try containerValues.decodeIfPresent(GrafanaClientTypes.WorkspaceStatus.self, forKey: .status)
        status = statusDecoded
        let authenticationDecoded = try containerValues.decodeIfPresent(GrafanaClientTypes.AuthenticationSummary.self, forKey: .authentication)
        authentication = authenticationDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
    }
}
