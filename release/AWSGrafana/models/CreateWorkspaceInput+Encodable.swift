// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CreateWorkspaceInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountAccessType
        case authenticationProviders
        case clientToken
        case organizationRoleName
        case permissionType
        case stackSetName
        case tags
        case workspaceDataSources
        case workspaceDescription
        case workspaceName
        case workspaceNotificationDestinations
        case workspaceOrganizationalUnits
        case workspaceRoleArn
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accountAccessType = self.accountAccessType {
            try encodeContainer.encode(accountAccessType.rawValue, forKey: .accountAccessType)
        }
        if let authenticationProviders = authenticationProviders {
            var authenticationProvidersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .authenticationProviders)
            for authenticationproviders0 in authenticationProviders {
                try authenticationProvidersContainer.encode(authenticationproviders0.rawValue)
            }
        }
        if let clientToken = self.clientToken {
            try encodeContainer.encode(clientToken, forKey: .clientToken)
        }
        if let organizationRoleName = self.organizationRoleName {
            try encodeContainer.encode(organizationRoleName, forKey: .organizationRoleName)
        }
        if let permissionType = self.permissionType {
            try encodeContainer.encode(permissionType.rawValue, forKey: .permissionType)
        }
        if let stackSetName = self.stackSetName {
            try encodeContainer.encode(stackSetName, forKey: .stackSetName)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, tagmap0) in tags {
                try tagsContainer.encode(tagmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let workspaceDataSources = workspaceDataSources {
            var workspaceDataSourcesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .workspaceDataSources)
            for datasourcetypeslist0 in workspaceDataSources {
                try workspaceDataSourcesContainer.encode(datasourcetypeslist0.rawValue)
            }
        }
        if let workspaceDescription = self.workspaceDescription {
            try encodeContainer.encode(workspaceDescription, forKey: .workspaceDescription)
        }
        if let workspaceName = self.workspaceName {
            try encodeContainer.encode(workspaceName, forKey: .workspaceName)
        }
        if let workspaceNotificationDestinations = workspaceNotificationDestinations {
            var workspaceNotificationDestinationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .workspaceNotificationDestinations)
            for notificationdestinationslist0 in workspaceNotificationDestinations {
                try workspaceNotificationDestinationsContainer.encode(notificationdestinationslist0.rawValue)
            }
        }
        if let workspaceOrganizationalUnits = workspaceOrganizationalUnits {
            var workspaceOrganizationalUnitsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .workspaceOrganizationalUnits)
            for organizationalunitlist0 in workspaceOrganizationalUnits {
                try workspaceOrganizationalUnitsContainer.encode(organizationalunitlist0)
            }
        }
        if let workspaceRoleArn = self.workspaceRoleArn {
            try encodeContainer.encode(workspaceRoleArn, forKey: .workspaceRoleArn)
        }
    }
}
