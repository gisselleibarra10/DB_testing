// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ChimeSdkIdentityClientTypes.AppInstanceUserEndpointSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case allowMessages = "AllowMessages"
        case appInstanceUserArn = "AppInstanceUserArn"
        case endpointId = "EndpointId"
        case endpointState = "EndpointState"
        case name = "Name"
        case type = "Type"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let allowMessages = self.allowMessages {
            try encodeContainer.encode(allowMessages.rawValue, forKey: .allowMessages)
        }
        if let appInstanceUserArn = self.appInstanceUserArn {
            try encodeContainer.encode(appInstanceUserArn, forKey: .appInstanceUserArn)
        }
        if let endpointId = self.endpointId {
            try encodeContainer.encode(endpointId, forKey: .endpointId)
        }
        if let endpointState = self.endpointState {
            try encodeContainer.encode(endpointState, forKey: .endpointState)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let type = self.type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let appInstanceUserArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .appInstanceUserArn)
        appInstanceUserArn = appInstanceUserArnDecoded
        let endpointIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .endpointId)
        endpointId = endpointIdDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let typeDecoded = try containerValues.decodeIfPresent(ChimeSdkIdentityClientTypes.AppInstanceUserEndpointType.self, forKey: .type)
        type = typeDecoded
        let allowMessagesDecoded = try containerValues.decodeIfPresent(ChimeSdkIdentityClientTypes.AllowMessages.self, forKey: .allowMessages)
        allowMessages = allowMessagesDecoded
        let endpointStateDecoded = try containerValues.decodeIfPresent(ChimeSdkIdentityClientTypes.EndpointState.self, forKey: .endpointState)
        endpointState = endpointStateDecoded
    }
}
