// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ElasticTranscoderClientTypes.Pipeline: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "Arn"
        case awsKmsKeyArn = "AwsKmsKeyArn"
        case contentConfig = "ContentConfig"
        case id = "Id"
        case inputBucket = "InputBucket"
        case name = "Name"
        case notifications = "Notifications"
        case outputBucket = "OutputBucket"
        case role = "Role"
        case status = "Status"
        case thumbnailConfig = "ThumbnailConfig"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = self.arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let awsKmsKeyArn = self.awsKmsKeyArn {
            try encodeContainer.encode(awsKmsKeyArn, forKey: .awsKmsKeyArn)
        }
        if let contentConfig = self.contentConfig {
            try encodeContainer.encode(contentConfig, forKey: .contentConfig)
        }
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let inputBucket = self.inputBucket {
            try encodeContainer.encode(inputBucket, forKey: .inputBucket)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let notifications = self.notifications {
            try encodeContainer.encode(notifications, forKey: .notifications)
        }
        if let outputBucket = self.outputBucket {
            try encodeContainer.encode(outputBucket, forKey: .outputBucket)
        }
        if let role = self.role {
            try encodeContainer.encode(role, forKey: .role)
        }
        if let status = self.status {
            try encodeContainer.encode(status, forKey: .status)
        }
        if let thumbnailConfig = self.thumbnailConfig {
            try encodeContainer.encode(thumbnailConfig, forKey: .thumbnailConfig)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let statusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .status)
        status = statusDecoded
        let inputBucketDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .inputBucket)
        inputBucket = inputBucketDecoded
        let outputBucketDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .outputBucket)
        outputBucket = outputBucketDecoded
        let roleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .role)
        role = roleDecoded
        let awsKmsKeyArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .awsKmsKeyArn)
        awsKmsKeyArn = awsKmsKeyArnDecoded
        let notificationsDecoded = try containerValues.decodeIfPresent(ElasticTranscoderClientTypes.Notifications.self, forKey: .notifications)
        notifications = notificationsDecoded
        let contentConfigDecoded = try containerValues.decodeIfPresent(ElasticTranscoderClientTypes.PipelineOutputConfig.self, forKey: .contentConfig)
        contentConfig = contentConfigDecoded
        let thumbnailConfigDecoded = try containerValues.decodeIfPresent(ElasticTranscoderClientTypes.PipelineOutputConfig.self, forKey: .thumbnailConfig)
        thumbnailConfig = thumbnailConfigDecoded
    }
}
