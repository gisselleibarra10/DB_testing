// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ElasticTranscoderClientTypes.CreateJobOutput: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case albumArt = "AlbumArt"
        case captions = "Captions"
        case composition = "Composition"
        case encryption = "Encryption"
        case key = "Key"
        case presetId = "PresetId"
        case rotate = "Rotate"
        case segmentDuration = "SegmentDuration"
        case thumbnailEncryption = "ThumbnailEncryption"
        case thumbnailPattern = "ThumbnailPattern"
        case watermarks = "Watermarks"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let albumArt = self.albumArt {
            try encodeContainer.encode(albumArt, forKey: .albumArt)
        }
        if let captions = self.captions {
            try encodeContainer.encode(captions, forKey: .captions)
        }
        if let composition = composition {
            var compositionContainer = encodeContainer.nestedUnkeyedContainer(forKey: .composition)
            for composition0 in composition {
                try compositionContainer.encode(composition0)
            }
        }
        if let encryption = self.encryption {
            try encodeContainer.encode(encryption, forKey: .encryption)
        }
        if let key = self.key {
            try encodeContainer.encode(key, forKey: .key)
        }
        if let presetId = self.presetId {
            try encodeContainer.encode(presetId, forKey: .presetId)
        }
        if let rotate = self.rotate {
            try encodeContainer.encode(rotate, forKey: .rotate)
        }
        if let segmentDuration = self.segmentDuration {
            try encodeContainer.encode(segmentDuration, forKey: .segmentDuration)
        }
        if let thumbnailEncryption = self.thumbnailEncryption {
            try encodeContainer.encode(thumbnailEncryption, forKey: .thumbnailEncryption)
        }
        if let thumbnailPattern = self.thumbnailPattern {
            try encodeContainer.encode(thumbnailPattern, forKey: .thumbnailPattern)
        }
        if let watermarks = watermarks {
            var watermarksContainer = encodeContainer.nestedUnkeyedContainer(forKey: .watermarks)
            for jobwatermarks0 in watermarks {
                try watermarksContainer.encode(jobwatermarks0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .key)
        key = keyDecoded
        let thumbnailPatternDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .thumbnailPattern)
        thumbnailPattern = thumbnailPatternDecoded
        let thumbnailEncryptionDecoded = try containerValues.decodeIfPresent(ElasticTranscoderClientTypes.Encryption.self, forKey: .thumbnailEncryption)
        thumbnailEncryption = thumbnailEncryptionDecoded
        let rotateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .rotate)
        rotate = rotateDecoded
        let presetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .presetId)
        presetId = presetIdDecoded
        let segmentDurationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .segmentDuration)
        segmentDuration = segmentDurationDecoded
        let watermarksContainer = try containerValues.decodeIfPresent([ElasticTranscoderClientTypes.JobWatermark?].self, forKey: .watermarks)
        var watermarksDecoded0:[ElasticTranscoderClientTypes.JobWatermark]? = nil
        if let watermarksContainer = watermarksContainer {
            watermarksDecoded0 = [ElasticTranscoderClientTypes.JobWatermark]()
            for structure0 in watermarksContainer {
                if let structure0 = structure0 {
                    watermarksDecoded0?.append(structure0)
                }
            }
        }
        watermarks = watermarksDecoded0
        let albumArtDecoded = try containerValues.decodeIfPresent(ElasticTranscoderClientTypes.JobAlbumArt.self, forKey: .albumArt)
        albumArt = albumArtDecoded
        let compositionContainer = try containerValues.decodeIfPresent([ElasticTranscoderClientTypes.Clip?].self, forKey: .composition)
        var compositionDecoded0:[ElasticTranscoderClientTypes.Clip]? = nil
        if let compositionContainer = compositionContainer {
            compositionDecoded0 = [ElasticTranscoderClientTypes.Clip]()
            for structure0 in compositionContainer {
                if let structure0 = structure0 {
                    compositionDecoded0?.append(structure0)
                }
            }
        }
        composition = compositionDecoded0
        let captionsDecoded = try containerValues.decodeIfPresent(ElasticTranscoderClientTypes.Captions.self, forKey: .captions)
        captions = captionsDecoded
        let encryptionDecoded = try containerValues.decodeIfPresent(ElasticTranscoderClientTypes.Encryption.self, forKey: .encryption)
        encryption = encryptionDecoded
    }
}
