// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ElasticTranscoderClientTypes.Permission: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case access = "Access"
        case grantee = "Grantee"
        case granteeType = "GranteeType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let access = access {
            var accessContainer = encodeContainer.nestedUnkeyedContainer(forKey: .access)
            for accesscontrols0 in access {
                try accessContainer.encode(accesscontrols0)
            }
        }
        if let grantee = self.grantee {
            try encodeContainer.encode(grantee, forKey: .grantee)
        }
        if let granteeType = self.granteeType {
            try encodeContainer.encode(granteeType, forKey: .granteeType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let granteeTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .granteeType)
        granteeType = granteeTypeDecoded
        let granteeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .grantee)
        grantee = granteeDecoded
        let accessContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .access)
        var accessDecoded0:[Swift.String]? = nil
        if let accessContainer = accessContainer {
            accessDecoded0 = [Swift.String]()
            for string0 in accessContainer {
                if let string0 = string0 {
                    accessDecoded0?.append(string0)
                }
            }
        }
        access = accessDecoded0
    }
}
