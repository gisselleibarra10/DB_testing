// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ElasticTranscoderClientTypes.JobOutput: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case albumArt = "AlbumArt"
        case appliedColorSpaceConversion = "AppliedColorSpaceConversion"
        case captions = "Captions"
        case composition = "Composition"
        case duration = "Duration"
        case durationMillis = "DurationMillis"
        case encryption = "Encryption"
        case fileSize = "FileSize"
        case frameRate = "FrameRate"
        case height = "Height"
        case id = "Id"
        case key = "Key"
        case presetId = "PresetId"
        case rotate = "Rotate"
        case segmentDuration = "SegmentDuration"
        case status = "Status"
        case statusDetail = "StatusDetail"
        case thumbnailEncryption = "ThumbnailEncryption"
        case thumbnailPattern = "ThumbnailPattern"
        case watermarks = "Watermarks"
        case width = "Width"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let albumArt = self.albumArt {
            try encodeContainer.encode(albumArt, forKey: .albumArt)
        }
        if let appliedColorSpaceConversion = self.appliedColorSpaceConversion {
            try encodeContainer.encode(appliedColorSpaceConversion, forKey: .appliedColorSpaceConversion)
        }
        if let captions = self.captions {
            try encodeContainer.encode(captions, forKey: .captions)
        }
        if let composition = composition {
            var compositionContainer = encodeContainer.nestedUnkeyedContainer(forKey: .composition)
            for composition0 in composition {
                try compositionContainer.encode(composition0)
            }
        }
        if let duration = self.duration {
            try encodeContainer.encode(duration, forKey: .duration)
        }
        if let durationMillis = self.durationMillis {
            try encodeContainer.encode(durationMillis, forKey: .durationMillis)
        }
        if let encryption = self.encryption {
            try encodeContainer.encode(encryption, forKey: .encryption)
        }
        if let fileSize = self.fileSize {
            try encodeContainer.encode(fileSize, forKey: .fileSize)
        }
        if let frameRate = self.frameRate {
            try encodeContainer.encode(frameRate, forKey: .frameRate)
        }
        if let height = self.height {
            try encodeContainer.encode(height, forKey: .height)
        }
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let key = self.key {
            try encodeContainer.encode(key, forKey: .key)
        }
        if let presetId = self.presetId {
            try encodeContainer.encode(presetId, forKey: .presetId)
        }
        if let rotate = self.rotate {
            try encodeContainer.encode(rotate, forKey: .rotate)
        }
        if let segmentDuration = self.segmentDuration {
            try encodeContainer.encode(segmentDuration, forKey: .segmentDuration)
        }
        if let status = self.status {
            try encodeContainer.encode(status, forKey: .status)
        }
        if let statusDetail = self.statusDetail {
            try encodeContainer.encode(statusDetail, forKey: .statusDetail)
        }
        if let thumbnailEncryption = self.thumbnailEncryption {
            try encodeContainer.encode(thumbnailEncryption, forKey: .thumbnailEncryption)
        }
        if let thumbnailPattern = self.thumbnailPattern {
            try encodeContainer.encode(thumbnailPattern, forKey: .thumbnailPattern)
        }
        if let watermarks = watermarks {
            var watermarksContainer = encodeContainer.nestedUnkeyedContainer(forKey: .watermarks)
            for jobwatermarks0 in watermarks {
                try watermarksContainer.encode(jobwatermarks0)
            }
        }
        if let width = self.width {
            try encodeContainer.encode(width, forKey: .width)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let keyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .key)
        key = keyDecoded
        let thumbnailPatternDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .thumbnailPattern)
        thumbnailPattern = thumbnailPatternDecoded
        let thumbnailEncryptionDecoded = try containerValues.decodeIfPresent(ElasticTranscoderClientTypes.Encryption.self, forKey: .thumbnailEncryption)
        thumbnailEncryption = thumbnailEncryptionDecoded
        let rotateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .rotate)
        rotate = rotateDecoded
        let presetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .presetId)
        presetId = presetIdDecoded
        let segmentDurationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .segmentDuration)
        segmentDuration = segmentDurationDecoded
        let statusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .status)
        status = statusDecoded
        let statusDetailDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .statusDetail)
        statusDetail = statusDetailDecoded
        let durationDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .duration)
        duration = durationDecoded
        let widthDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .width)
        width = widthDecoded
        let heightDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .height)
        height = heightDecoded
        let frameRateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .frameRate)
        frameRate = frameRateDecoded
        let fileSizeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .fileSize)
        fileSize = fileSizeDecoded
        let durationMillisDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .durationMillis)
        durationMillis = durationMillisDecoded
        let watermarksContainer = try containerValues.decodeIfPresent([ElasticTranscoderClientTypes.JobWatermark?].self, forKey: .watermarks)
        var watermarksDecoded0:[ElasticTranscoderClientTypes.JobWatermark]? = nil
        if let watermarksContainer = watermarksContainer {
            watermarksDecoded0 = [ElasticTranscoderClientTypes.JobWatermark]()
            for structure0 in watermarksContainer {
                if let structure0 = structure0 {
                    watermarksDecoded0?.append(structure0)
                }
            }
        }
        watermarks = watermarksDecoded0
        let albumArtDecoded = try containerValues.decodeIfPresent(ElasticTranscoderClientTypes.JobAlbumArt.self, forKey: .albumArt)
        albumArt = albumArtDecoded
        let compositionContainer = try containerValues.decodeIfPresent([ElasticTranscoderClientTypes.Clip?].self, forKey: .composition)
        var compositionDecoded0:[ElasticTranscoderClientTypes.Clip]? = nil
        if let compositionContainer = compositionContainer {
            compositionDecoded0 = [ElasticTranscoderClientTypes.Clip]()
            for structure0 in compositionContainer {
                if let structure0 = structure0 {
                    compositionDecoded0?.append(structure0)
                }
            }
        }
        composition = compositionDecoded0
        let captionsDecoded = try containerValues.decodeIfPresent(ElasticTranscoderClientTypes.Captions.self, forKey: .captions)
        captions = captionsDecoded
        let encryptionDecoded = try containerValues.decodeIfPresent(ElasticTranscoderClientTypes.Encryption.self, forKey: .encryption)
        encryption = encryptionDecoded
        let appliedColorSpaceConversionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .appliedColorSpaceConversion)
        appliedColorSpaceConversion = appliedColorSpaceConversionDecoded
    }
}
