// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ElasticTranscoderClientTypes.Notifications: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case completed = "Completed"
        case error = "Error"
        case progressing = "Progressing"
        case warning = "Warning"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let completed = self.completed {
            try encodeContainer.encode(completed, forKey: .completed)
        }
        if let error = self.error {
            try encodeContainer.encode(error, forKey: .error)
        }
        if let progressing = self.progressing {
            try encodeContainer.encode(progressing, forKey: .progressing)
        }
        if let warning = self.warning {
            try encodeContainer.encode(warning, forKey: .warning)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let progressingDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .progressing)
        progressing = progressingDecoded
        let completedDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .completed)
        completed = completedDecoded
        let warningDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .warning)
        warning = warningDecoded
        let errorDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .error)
        error = errorDecoded
    }
}
