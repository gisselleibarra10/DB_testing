// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ElasticTranscoderClientTypes.VideoParameters: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case aspectRatio = "AspectRatio"
        case bitRate = "BitRate"
        case codec = "Codec"
        case codecOptions = "CodecOptions"
        case displayAspectRatio = "DisplayAspectRatio"
        case fixedGOP = "FixedGOP"
        case frameRate = "FrameRate"
        case keyframesMaxDist = "KeyframesMaxDist"
        case maxFrameRate = "MaxFrameRate"
        case maxHeight = "MaxHeight"
        case maxWidth = "MaxWidth"
        case paddingPolicy = "PaddingPolicy"
        case resolution = "Resolution"
        case sizingPolicy = "SizingPolicy"
        case watermarks = "Watermarks"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let aspectRatio = self.aspectRatio {
            try encodeContainer.encode(aspectRatio, forKey: .aspectRatio)
        }
        if let bitRate = self.bitRate {
            try encodeContainer.encode(bitRate, forKey: .bitRate)
        }
        if let codec = self.codec {
            try encodeContainer.encode(codec, forKey: .codec)
        }
        if let codecOptions = codecOptions {
            var codecOptionsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .codecOptions)
            for (dictKey0, codecoptions0) in codecOptions {
                try codecOptionsContainer.encode(codecoptions0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let displayAspectRatio = self.displayAspectRatio {
            try encodeContainer.encode(displayAspectRatio, forKey: .displayAspectRatio)
        }
        if let fixedGOP = self.fixedGOP {
            try encodeContainer.encode(fixedGOP, forKey: .fixedGOP)
        }
        if let frameRate = self.frameRate {
            try encodeContainer.encode(frameRate, forKey: .frameRate)
        }
        if let keyframesMaxDist = self.keyframesMaxDist {
            try encodeContainer.encode(keyframesMaxDist, forKey: .keyframesMaxDist)
        }
        if let maxFrameRate = self.maxFrameRate {
            try encodeContainer.encode(maxFrameRate, forKey: .maxFrameRate)
        }
        if let maxHeight = self.maxHeight {
            try encodeContainer.encode(maxHeight, forKey: .maxHeight)
        }
        if let maxWidth = self.maxWidth {
            try encodeContainer.encode(maxWidth, forKey: .maxWidth)
        }
        if let paddingPolicy = self.paddingPolicy {
            try encodeContainer.encode(paddingPolicy, forKey: .paddingPolicy)
        }
        if let resolution = self.resolution {
            try encodeContainer.encode(resolution, forKey: .resolution)
        }
        if let sizingPolicy = self.sizingPolicy {
            try encodeContainer.encode(sizingPolicy, forKey: .sizingPolicy)
        }
        if let watermarks = watermarks {
            var watermarksContainer = encodeContainer.nestedUnkeyedContainer(forKey: .watermarks)
            for presetwatermarks0 in watermarks {
                try watermarksContainer.encode(presetwatermarks0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let codecDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .codec)
        codec = codecDecoded
        let codecOptionsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .codecOptions)
        var codecOptionsDecoded0: [Swift.String:Swift.String]? = nil
        if let codecOptionsContainer = codecOptionsContainer {
            codecOptionsDecoded0 = [Swift.String:Swift.String]()
            for (key0, codecoption0) in codecOptionsContainer {
                if let codecoption0 = codecoption0 {
                    codecOptionsDecoded0?[key0] = codecoption0
                }
            }
        }
        codecOptions = codecOptionsDecoded0
        let keyframesMaxDistDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyframesMaxDist)
        keyframesMaxDist = keyframesMaxDistDecoded
        let fixedGOPDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fixedGOP)
        fixedGOP = fixedGOPDecoded
        let bitRateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .bitRate)
        bitRate = bitRateDecoded
        let frameRateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .frameRate)
        frameRate = frameRateDecoded
        let maxFrameRateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .maxFrameRate)
        maxFrameRate = maxFrameRateDecoded
        let resolutionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resolution)
        resolution = resolutionDecoded
        let aspectRatioDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .aspectRatio)
        aspectRatio = aspectRatioDecoded
        let maxWidthDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .maxWidth)
        maxWidth = maxWidthDecoded
        let maxHeightDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .maxHeight)
        maxHeight = maxHeightDecoded
        let displayAspectRatioDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .displayAspectRatio)
        displayAspectRatio = displayAspectRatioDecoded
        let sizingPolicyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sizingPolicy)
        sizingPolicy = sizingPolicyDecoded
        let paddingPolicyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .paddingPolicy)
        paddingPolicy = paddingPolicyDecoded
        let watermarksContainer = try containerValues.decodeIfPresent([ElasticTranscoderClientTypes.PresetWatermark?].self, forKey: .watermarks)
        var watermarksDecoded0:[ElasticTranscoderClientTypes.PresetWatermark]? = nil
        if let watermarksContainer = watermarksContainer {
            watermarksDecoded0 = [ElasticTranscoderClientTypes.PresetWatermark]()
            for structure0 in watermarksContainer {
                if let structure0 = structure0 {
                    watermarksDecoded0?.append(structure0)
                }
            }
        }
        watermarks = watermarksDecoded0
    }
}
