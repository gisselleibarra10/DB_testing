// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateJobInputBody: Swift.Equatable {
    let pipelineId: Swift.String?
    let input: ElasticTranscoderClientTypes.JobInput?
    let inputs: [ElasticTranscoderClientTypes.JobInput]?
    let output: ElasticTranscoderClientTypes.CreateJobOutput?
    let outputs: [ElasticTranscoderClientTypes.CreateJobOutput]?
    let outputKeyPrefix: Swift.String?
    let playlists: [ElasticTranscoderClientTypes.CreateJobPlaylist]?
    let userMetadata: [Swift.String:Swift.String]?
}

extension CreateJobInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case input = "Input"
        case inputs = "Inputs"
        case output = "Output"
        case outputKeyPrefix = "OutputKeyPrefix"
        case outputs = "Outputs"
        case pipelineId = "PipelineId"
        case playlists = "Playlists"
        case userMetadata = "UserMetadata"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pipelineIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pipelineId)
        pipelineId = pipelineIdDecoded
        let inputDecoded = try containerValues.decodeIfPresent(ElasticTranscoderClientTypes.JobInput.self, forKey: .input)
        input = inputDecoded
        let inputsContainer = try containerValues.decodeIfPresent([ElasticTranscoderClientTypes.JobInput?].self, forKey: .inputs)
        var inputsDecoded0:[ElasticTranscoderClientTypes.JobInput]? = nil
        if let inputsContainer = inputsContainer {
            inputsDecoded0 = [ElasticTranscoderClientTypes.JobInput]()
            for structure0 in inputsContainer {
                if let structure0 = structure0 {
                    inputsDecoded0?.append(structure0)
                }
            }
        }
        inputs = inputsDecoded0
        let outputDecoded = try containerValues.decodeIfPresent(ElasticTranscoderClientTypes.CreateJobOutput.self, forKey: .output)
        output = outputDecoded
        let outputsContainer = try containerValues.decodeIfPresent([ElasticTranscoderClientTypes.CreateJobOutput?].self, forKey: .outputs)
        var outputsDecoded0:[ElasticTranscoderClientTypes.CreateJobOutput]? = nil
        if let outputsContainer = outputsContainer {
            outputsDecoded0 = [ElasticTranscoderClientTypes.CreateJobOutput]()
            for structure0 in outputsContainer {
                if let structure0 = structure0 {
                    outputsDecoded0?.append(structure0)
                }
            }
        }
        outputs = outputsDecoded0
        let outputKeyPrefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .outputKeyPrefix)
        outputKeyPrefix = outputKeyPrefixDecoded
        let playlistsContainer = try containerValues.decodeIfPresent([ElasticTranscoderClientTypes.CreateJobPlaylist?].self, forKey: .playlists)
        var playlistsDecoded0:[ElasticTranscoderClientTypes.CreateJobPlaylist]? = nil
        if let playlistsContainer = playlistsContainer {
            playlistsDecoded0 = [ElasticTranscoderClientTypes.CreateJobPlaylist]()
            for structure0 in playlistsContainer {
                if let structure0 = structure0 {
                    playlistsDecoded0?.append(structure0)
                }
            }
        }
        playlists = playlistsDecoded0
        let userMetadataContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .userMetadata)
        var userMetadataDecoded0: [Swift.String:Swift.String]? = nil
        if let userMetadataContainer = userMetadataContainer {
            userMetadataDecoded0 = [Swift.String:Swift.String]()
            for (key0, string0) in userMetadataContainer {
                if let string0 = string0 {
                    userMetadataDecoded0?[key0] = string0
                }
            }
        }
        userMetadata = userMetadataDecoded0
    }
}
