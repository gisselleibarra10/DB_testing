// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ElasticTranscoderClientTypes.Thumbnails: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case aspectRatio = "AspectRatio"
        case format = "Format"
        case interval = "Interval"
        case maxHeight = "MaxHeight"
        case maxWidth = "MaxWidth"
        case paddingPolicy = "PaddingPolicy"
        case resolution = "Resolution"
        case sizingPolicy = "SizingPolicy"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let aspectRatio = self.aspectRatio {
            try encodeContainer.encode(aspectRatio, forKey: .aspectRatio)
        }
        if let format = self.format {
            try encodeContainer.encode(format, forKey: .format)
        }
        if let interval = self.interval {
            try encodeContainer.encode(interval, forKey: .interval)
        }
        if let maxHeight = self.maxHeight {
            try encodeContainer.encode(maxHeight, forKey: .maxHeight)
        }
        if let maxWidth = self.maxWidth {
            try encodeContainer.encode(maxWidth, forKey: .maxWidth)
        }
        if let paddingPolicy = self.paddingPolicy {
            try encodeContainer.encode(paddingPolicy, forKey: .paddingPolicy)
        }
        if let resolution = self.resolution {
            try encodeContainer.encode(resolution, forKey: .resolution)
        }
        if let sizingPolicy = self.sizingPolicy {
            try encodeContainer.encode(sizingPolicy, forKey: .sizingPolicy)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let formatDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .format)
        format = formatDecoded
        let intervalDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .interval)
        interval = intervalDecoded
        let resolutionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resolution)
        resolution = resolutionDecoded
        let aspectRatioDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .aspectRatio)
        aspectRatio = aspectRatioDecoded
        let maxWidthDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .maxWidth)
        maxWidth = maxWidthDecoded
        let maxHeightDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .maxHeight)
        maxHeight = maxHeightDecoded
        let sizingPolicyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sizingPolicy)
        sizingPolicy = sizingPolicyDecoded
        let paddingPolicyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .paddingPolicy)
        paddingPolicy = paddingPolicyDecoded
    }
}
