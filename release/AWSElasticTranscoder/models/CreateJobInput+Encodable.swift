// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CreateJobInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case input = "Input"
        case inputs = "Inputs"
        case output = "Output"
        case outputKeyPrefix = "OutputKeyPrefix"
        case outputs = "Outputs"
        case pipelineId = "PipelineId"
        case playlists = "Playlists"
        case userMetadata = "UserMetadata"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let input = self.input {
            try encodeContainer.encode(input, forKey: .input)
        }
        if let inputs = inputs {
            var inputsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .inputs)
            for jobinputs0 in inputs {
                try inputsContainer.encode(jobinputs0)
            }
        }
        if let output = self.output {
            try encodeContainer.encode(output, forKey: .output)
        }
        if let outputKeyPrefix = self.outputKeyPrefix {
            try encodeContainer.encode(outputKeyPrefix, forKey: .outputKeyPrefix)
        }
        if let outputs = outputs {
            var outputsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .outputs)
            for createjoboutputs0 in outputs {
                try outputsContainer.encode(createjoboutputs0)
            }
        }
        if let pipelineId = self.pipelineId {
            try encodeContainer.encode(pipelineId, forKey: .pipelineId)
        }
        if let playlists = playlists {
            var playlistsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .playlists)
            for createjobplaylists0 in playlists {
                try playlistsContainer.encode(createjobplaylists0)
            }
        }
        if let userMetadata = userMetadata {
            var userMetadataContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .userMetadata)
            for (dictKey0, usermetadata0) in userMetadata {
                try userMetadataContainer.encode(usermetadata0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }
}
