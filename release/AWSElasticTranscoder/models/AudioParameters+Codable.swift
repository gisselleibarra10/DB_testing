// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ElasticTranscoderClientTypes.AudioParameters: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case audioPackingMode = "AudioPackingMode"
        case bitRate = "BitRate"
        case channels = "Channels"
        case codec = "Codec"
        case codecOptions = "CodecOptions"
        case sampleRate = "SampleRate"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let audioPackingMode = self.audioPackingMode {
            try encodeContainer.encode(audioPackingMode, forKey: .audioPackingMode)
        }
        if let bitRate = self.bitRate {
            try encodeContainer.encode(bitRate, forKey: .bitRate)
        }
        if let channels = self.channels {
            try encodeContainer.encode(channels, forKey: .channels)
        }
        if let codec = self.codec {
            try encodeContainer.encode(codec, forKey: .codec)
        }
        if let codecOptions = self.codecOptions {
            try encodeContainer.encode(codecOptions, forKey: .codecOptions)
        }
        if let sampleRate = self.sampleRate {
            try encodeContainer.encode(sampleRate, forKey: .sampleRate)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let codecDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .codec)
        codec = codecDecoded
        let sampleRateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sampleRate)
        sampleRate = sampleRateDecoded
        let bitRateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .bitRate)
        bitRate = bitRateDecoded
        let channelsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .channels)
        channels = channelsDecoded
        let audioPackingModeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .audioPackingMode)
        audioPackingMode = audioPackingModeDecoded
        let codecOptionsDecoded = try containerValues.decodeIfPresent(ElasticTranscoderClientTypes.AudioCodecOptions.self, forKey: .codecOptions)
        codecOptions = codecOptionsDecoded
    }
}
