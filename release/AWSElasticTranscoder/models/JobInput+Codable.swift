// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ElasticTranscoderClientTypes.JobInput: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case aspectRatio = "AspectRatio"
        case container = "Container"
        case detectedProperties = "DetectedProperties"
        case encryption = "Encryption"
        case frameRate = "FrameRate"
        case inputCaptions = "InputCaptions"
        case interlaced = "Interlaced"
        case key = "Key"
        case resolution = "Resolution"
        case timeSpan = "TimeSpan"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let aspectRatio = self.aspectRatio {
            try encodeContainer.encode(aspectRatio, forKey: .aspectRatio)
        }
        if let container = self.container {
            try encodeContainer.encode(container, forKey: .container)
        }
        if let detectedProperties = self.detectedProperties {
            try encodeContainer.encode(detectedProperties, forKey: .detectedProperties)
        }
        if let encryption = self.encryption {
            try encodeContainer.encode(encryption, forKey: .encryption)
        }
        if let frameRate = self.frameRate {
            try encodeContainer.encode(frameRate, forKey: .frameRate)
        }
        if let inputCaptions = self.inputCaptions {
            try encodeContainer.encode(inputCaptions, forKey: .inputCaptions)
        }
        if let interlaced = self.interlaced {
            try encodeContainer.encode(interlaced, forKey: .interlaced)
        }
        if let key = self.key {
            try encodeContainer.encode(key, forKey: .key)
        }
        if let resolution = self.resolution {
            try encodeContainer.encode(resolution, forKey: .resolution)
        }
        if let timeSpan = self.timeSpan {
            try encodeContainer.encode(timeSpan, forKey: .timeSpan)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .key)
        key = keyDecoded
        let frameRateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .frameRate)
        frameRate = frameRateDecoded
        let resolutionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resolution)
        resolution = resolutionDecoded
        let aspectRatioDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .aspectRatio)
        aspectRatio = aspectRatioDecoded
        let interlacedDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .interlaced)
        interlaced = interlacedDecoded
        let containerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .container)
        container = containerDecoded
        let encryptionDecoded = try containerValues.decodeIfPresent(ElasticTranscoderClientTypes.Encryption.self, forKey: .encryption)
        encryption = encryptionDecoded
        let timeSpanDecoded = try containerValues.decodeIfPresent(ElasticTranscoderClientTypes.TimeSpan.self, forKey: .timeSpan)
        timeSpan = timeSpanDecoded
        let inputCaptionsDecoded = try containerValues.decodeIfPresent(ElasticTranscoderClientTypes.InputCaptions.self, forKey: .inputCaptions)
        inputCaptions = inputCaptionsDecoded
        let detectedPropertiesDecoded = try containerValues.decodeIfPresent(ElasticTranscoderClientTypes.DetectedProperties.self, forKey: .detectedProperties)
        detectedProperties = detectedPropertiesDecoded
    }
}
