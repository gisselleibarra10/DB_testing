// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ElasticTranscoderClientTypes.InputCaptions: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case captionSources = "CaptionSources"
        case mergePolicy = "MergePolicy"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let captionSources = captionSources {
            var captionSourcesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .captionSources)
            for captionsources0 in captionSources {
                try captionSourcesContainer.encode(captionsources0)
            }
        }
        if let mergePolicy = self.mergePolicy {
            try encodeContainer.encode(mergePolicy, forKey: .mergePolicy)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let mergePolicyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .mergePolicy)
        mergePolicy = mergePolicyDecoded
        let captionSourcesContainer = try containerValues.decodeIfPresent([ElasticTranscoderClientTypes.CaptionSource?].self, forKey: .captionSources)
        var captionSourcesDecoded0:[ElasticTranscoderClientTypes.CaptionSource]? = nil
        if let captionSourcesContainer = captionSourcesContainer {
            captionSourcesDecoded0 = [ElasticTranscoderClientTypes.CaptionSource]()
            for structure0 in captionSourcesContainer {
                if let structure0 = structure0 {
                    captionSourcesDecoded0?.append(structure0)
                }
            }
        }
        captionSources = captionSourcesDecoded0
    }
}
