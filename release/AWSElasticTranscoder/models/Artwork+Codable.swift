// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ElasticTranscoderClientTypes.Artwork: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case albumArtFormat = "AlbumArtFormat"
        case encryption = "Encryption"
        case inputKey = "InputKey"
        case maxHeight = "MaxHeight"
        case maxWidth = "MaxWidth"
        case paddingPolicy = "PaddingPolicy"
        case sizingPolicy = "SizingPolicy"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let albumArtFormat = self.albumArtFormat {
            try encodeContainer.encode(albumArtFormat, forKey: .albumArtFormat)
        }
        if let encryption = self.encryption {
            try encodeContainer.encode(encryption, forKey: .encryption)
        }
        if let inputKey = self.inputKey {
            try encodeContainer.encode(inputKey, forKey: .inputKey)
        }
        if let maxHeight = self.maxHeight {
            try encodeContainer.encode(maxHeight, forKey: .maxHeight)
        }
        if let maxWidth = self.maxWidth {
            try encodeContainer.encode(maxWidth, forKey: .maxWidth)
        }
        if let paddingPolicy = self.paddingPolicy {
            try encodeContainer.encode(paddingPolicy, forKey: .paddingPolicy)
        }
        if let sizingPolicy = self.sizingPolicy {
            try encodeContainer.encode(sizingPolicy, forKey: .sizingPolicy)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let inputKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .inputKey)
        inputKey = inputKeyDecoded
        let maxWidthDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .maxWidth)
        maxWidth = maxWidthDecoded
        let maxHeightDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .maxHeight)
        maxHeight = maxHeightDecoded
        let sizingPolicyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sizingPolicy)
        sizingPolicy = sizingPolicyDecoded
        let paddingPolicyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .paddingPolicy)
        paddingPolicy = paddingPolicyDecoded
        let albumArtFormatDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .albumArtFormat)
        albumArtFormat = albumArtFormatDecoded
        let encryptionDecoded = try containerValues.decodeIfPresent(ElasticTranscoderClientTypes.Encryption.self, forKey: .encryption)
        encryption = encryptionDecoded
    }
}
