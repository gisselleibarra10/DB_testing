// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeDeviceOutputResponseBody: Swift.Equatable {
    let status: WorkLinkClientTypes.DeviceStatus?
    let model: Swift.String?
    let manufacturer: Swift.String?
    let operatingSystem: Swift.String?
    let operatingSystemVersion: Swift.String?
    let patchLevel: Swift.String?
    let firstAccessedTime: ClientRuntime.Date?
    let lastAccessedTime: ClientRuntime.Date?
    let username: Swift.String?
}

extension DescribeDeviceOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case firstAccessedTime = "FirstAccessedTime"
        case lastAccessedTime = "LastAccessedTime"
        case manufacturer = "Manufacturer"
        case model = "Model"
        case operatingSystem = "OperatingSystem"
        case operatingSystemVersion = "OperatingSystemVersion"
        case patchLevel = "PatchLevel"
        case status = "Status"
        case username = "Username"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statusDecoded = try containerValues.decodeIfPresent(WorkLinkClientTypes.DeviceStatus.self, forKey: .status)
        status = statusDecoded
        let modelDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .model)
        model = modelDecoded
        let manufacturerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .manufacturer)
        manufacturer = manufacturerDecoded
        let operatingSystemDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .operatingSystem)
        operatingSystem = operatingSystemDecoded
        let operatingSystemVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .operatingSystemVersion)
        operatingSystemVersion = operatingSystemVersionDecoded
        let patchLevelDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .patchLevel)
        patchLevel = patchLevelDecoded
        let firstAccessedTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .firstAccessedTime)
        firstAccessedTime = firstAccessedTimeDecoded
        let lastAccessedTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastAccessedTime)
        lastAccessedTime = lastAccessedTimeDecoded
        let usernameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .username)
        username = usernameDecoded
    }
}
