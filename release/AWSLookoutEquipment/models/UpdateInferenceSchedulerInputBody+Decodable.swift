// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct UpdateInferenceSchedulerInputBody: Swift.Equatable {
    let inferenceSchedulerName: Swift.String?
    let dataDelayOffsetInMinutes: Swift.Int?
    let dataUploadFrequency: LookoutEquipmentClientTypes.DataUploadFrequency?
    let dataInputConfiguration: LookoutEquipmentClientTypes.InferenceInputConfiguration?
    let dataOutputConfiguration: LookoutEquipmentClientTypes.InferenceOutputConfiguration?
    let roleArn: Swift.String?
}

extension UpdateInferenceSchedulerInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dataDelayOffsetInMinutes = "DataDelayOffsetInMinutes"
        case dataInputConfiguration = "DataInputConfiguration"
        case dataOutputConfiguration = "DataOutputConfiguration"
        case dataUploadFrequency = "DataUploadFrequency"
        case inferenceSchedulerName = "InferenceSchedulerName"
        case roleArn = "RoleArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let inferenceSchedulerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .inferenceSchedulerName)
        inferenceSchedulerName = inferenceSchedulerNameDecoded
        let dataDelayOffsetInMinutesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .dataDelayOffsetInMinutes)
        dataDelayOffsetInMinutes = dataDelayOffsetInMinutesDecoded
        let dataUploadFrequencyDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.DataUploadFrequency.self, forKey: .dataUploadFrequency)
        dataUploadFrequency = dataUploadFrequencyDecoded
        let dataInputConfigurationDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.InferenceInputConfiguration.self, forKey: .dataInputConfiguration)
        dataInputConfiguration = dataInputConfigurationDecoded
        let dataOutputConfigurationDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.InferenceOutputConfiguration.self, forKey: .dataOutputConfiguration)
        dataOutputConfiguration = dataOutputConfigurationDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
    }
}
