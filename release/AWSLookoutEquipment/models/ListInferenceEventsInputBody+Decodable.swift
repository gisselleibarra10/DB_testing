// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListInferenceEventsInputBody: Swift.Equatable {
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
    let inferenceSchedulerName: Swift.String?
    let intervalStartTime: ClientRuntime.Date?
    let intervalEndTime: ClientRuntime.Date?
}

extension ListInferenceEventsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case inferenceSchedulerName = "InferenceSchedulerName"
        case intervalEndTime = "IntervalEndTime"
        case intervalStartTime = "IntervalStartTime"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let inferenceSchedulerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .inferenceSchedulerName)
        inferenceSchedulerName = inferenceSchedulerNameDecoded
        let intervalStartTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .intervalStartTime)
        intervalStartTime = intervalStartTimeDecoded
        let intervalEndTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .intervalEndTime)
        intervalEndTime = intervalEndTimeDecoded
    }
}
