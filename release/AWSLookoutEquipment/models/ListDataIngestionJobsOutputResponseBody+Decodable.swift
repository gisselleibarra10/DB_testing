// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListDataIngestionJobsOutputResponseBody: Swift.Equatable {
    let nextToken: Swift.String?
    let dataIngestionJobSummaries: [LookoutEquipmentClientTypes.DataIngestionJobSummary]?
}

extension ListDataIngestionJobsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dataIngestionJobSummaries = "DataIngestionJobSummaries"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let dataIngestionJobSummariesContainer = try containerValues.decodeIfPresent([LookoutEquipmentClientTypes.DataIngestionJobSummary?].self, forKey: .dataIngestionJobSummaries)
        var dataIngestionJobSummariesDecoded0:[LookoutEquipmentClientTypes.DataIngestionJobSummary]? = nil
        if let dataIngestionJobSummariesContainer = dataIngestionJobSummariesContainer {
            dataIngestionJobSummariesDecoded0 = [LookoutEquipmentClientTypes.DataIngestionJobSummary]()
            for structure0 in dataIngestionJobSummariesContainer {
                if let structure0 = structure0 {
                    dataIngestionJobSummariesDecoded0?.append(structure0)
                }
            }
        }
        dataIngestionJobSummaries = dataIngestionJobSummariesDecoded0
    }
}
