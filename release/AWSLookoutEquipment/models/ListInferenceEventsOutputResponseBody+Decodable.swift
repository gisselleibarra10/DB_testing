// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListInferenceEventsOutputResponseBody: Swift.Equatable {
    let nextToken: Swift.String?
    let inferenceEventSummaries: [LookoutEquipmentClientTypes.InferenceEventSummary]?
}

extension ListInferenceEventsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case inferenceEventSummaries = "InferenceEventSummaries"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let inferenceEventSummariesContainer = try containerValues.decodeIfPresent([LookoutEquipmentClientTypes.InferenceEventSummary?].self, forKey: .inferenceEventSummaries)
        var inferenceEventSummariesDecoded0:[LookoutEquipmentClientTypes.InferenceEventSummary]? = nil
        if let inferenceEventSummariesContainer = inferenceEventSummariesContainer {
            inferenceEventSummariesDecoded0 = [LookoutEquipmentClientTypes.InferenceEventSummary]()
            for structure0 in inferenceEventSummariesContainer {
                if let structure0 = structure0 {
                    inferenceEventSummariesDecoded0?.append(structure0)
                }
            }
        }
        inferenceEventSummaries = inferenceEventSummariesDecoded0
    }
}
