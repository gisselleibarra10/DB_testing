// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateModelInputBody: Swift.Equatable {
    let modelName: Swift.String?
    let datasetName: Swift.String?
    let datasetSchema: LookoutEquipmentClientTypes.DatasetSchema?
    let labelsInputConfiguration: LookoutEquipmentClientTypes.LabelsInputConfiguration?
    let clientToken: Swift.String?
    let trainingDataStartTime: ClientRuntime.Date?
    let trainingDataEndTime: ClientRuntime.Date?
    let evaluationDataStartTime: ClientRuntime.Date?
    let evaluationDataEndTime: ClientRuntime.Date?
    let roleArn: Swift.String?
    let dataPreProcessingConfiguration: LookoutEquipmentClientTypes.DataPreProcessingConfiguration?
    let serverSideKmsKeyId: Swift.String?
    let tags: [LookoutEquipmentClientTypes.Tag]?
    let offCondition: Swift.String?
}

extension CreateModelInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientToken = "ClientToken"
        case dataPreProcessingConfiguration = "DataPreProcessingConfiguration"
        case datasetName = "DatasetName"
        case datasetSchema = "DatasetSchema"
        case evaluationDataEndTime = "EvaluationDataEndTime"
        case evaluationDataStartTime = "EvaluationDataStartTime"
        case labelsInputConfiguration = "LabelsInputConfiguration"
        case modelName = "ModelName"
        case offCondition = "OffCondition"
        case roleArn = "RoleArn"
        case serverSideKmsKeyId = "ServerSideKmsKeyId"
        case tags = "Tags"
        case trainingDataEndTime = "TrainingDataEndTime"
        case trainingDataStartTime = "TrainingDataStartTime"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let modelNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelName)
        modelName = modelNameDecoded
        let datasetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .datasetName)
        datasetName = datasetNameDecoded
        let datasetSchemaDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.DatasetSchema.self, forKey: .datasetSchema)
        datasetSchema = datasetSchemaDecoded
        let labelsInputConfigurationDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.LabelsInputConfiguration.self, forKey: .labelsInputConfiguration)
        labelsInputConfiguration = labelsInputConfigurationDecoded
        let clientTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientToken)
        clientToken = clientTokenDecoded
        let trainingDataStartTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .trainingDataStartTime)
        trainingDataStartTime = trainingDataStartTimeDecoded
        let trainingDataEndTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .trainingDataEndTime)
        trainingDataEndTime = trainingDataEndTimeDecoded
        let evaluationDataStartTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .evaluationDataStartTime)
        evaluationDataStartTime = evaluationDataStartTimeDecoded
        let evaluationDataEndTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .evaluationDataEndTime)
        evaluationDataEndTime = evaluationDataEndTimeDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let dataPreProcessingConfigurationDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.DataPreProcessingConfiguration.self, forKey: .dataPreProcessingConfiguration)
        dataPreProcessingConfiguration = dataPreProcessingConfigurationDecoded
        let serverSideKmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serverSideKmsKeyId)
        serverSideKmsKeyId = serverSideKmsKeyIdDecoded
        let tagsContainer = try containerValues.decodeIfPresent([LookoutEquipmentClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[LookoutEquipmentClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [LookoutEquipmentClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let offConditionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .offCondition)
        offCondition = offConditionDecoded
    }
}
