// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension LookoutEquipmentClientTypes {
    /// Summary of ingestion statistics like whether data exists, number of missing values, number of invalid values and so on related to the particular sensor.
    public struct SensorStatisticsSummary: Swift.Equatable {
        /// Parameter that describes potential risk about whether data associated with the sensor is categorical.
        public var categoricalValues: LookoutEquipmentClientTypes.CategoricalValues?
        /// Name of the component to which the particular sensor belongs for which the statistics belong to.
        public var componentName: Swift.String?
        /// Indicates the time reference to indicate the end of valid data associated with the sensor that the statistics belong to.
        public var dataEndTime: ClientRuntime.Date?
        /// Parameter that indicates whether data exists for the sensor that the statistics belong to.
        public var dataExists: Swift.Bool
        /// Indicates the time reference to indicate the beginning of valid data associated with the sensor that the statistics belong to.
        public var dataStartTime: ClientRuntime.Date?
        /// Parameter that describes the total number of duplicate timestamp records associated with the sensor that the statistics belong to.
        public var duplicateTimestamps: LookoutEquipmentClientTypes.CountPercent?
        /// Parameter that describes the total number of invalid date entries associated with the sensor that the statistics belong to.
        public var invalidDateEntries: LookoutEquipmentClientTypes.CountPercent?
        /// Parameter that describes the total number of, and percentage of, values that are invalid for the sensor that the statistics belong to.
        public var invalidValues: LookoutEquipmentClientTypes.CountPercent?
        /// Parameter that describes potential risk about whether data associated with the sensor contains one or more large gaps between consecutive timestamps.
        public var largeTimestampGaps: LookoutEquipmentClientTypes.LargeTimestampGaps?
        /// Parameter that describes the total number of, and percentage of, values that are missing for the sensor that the statistics belong to.
        public var missingValues: LookoutEquipmentClientTypes.CountPercent?
        /// Parameter that describes potential risk about whether data associated with the sensor is mostly monotonic.
        public var monotonicValues: LookoutEquipmentClientTypes.MonotonicValues?
        /// Parameter that describes potential risk about whether data associated with the sensor has more than one operating mode.
        public var multipleOperatingModes: LookoutEquipmentClientTypes.MultipleOperatingModes?
        /// Name of the sensor that the statistics belong to.
        public var sensorName: Swift.String?

        public init (
            categoricalValues: LookoutEquipmentClientTypes.CategoricalValues? = nil,
            componentName: Swift.String? = nil,
            dataEndTime: ClientRuntime.Date? = nil,
            dataExists: Swift.Bool = false,
            dataStartTime: ClientRuntime.Date? = nil,
            duplicateTimestamps: LookoutEquipmentClientTypes.CountPercent? = nil,
            invalidDateEntries: LookoutEquipmentClientTypes.CountPercent? = nil,
            invalidValues: LookoutEquipmentClientTypes.CountPercent? = nil,
            largeTimestampGaps: LookoutEquipmentClientTypes.LargeTimestampGaps? = nil,
            missingValues: LookoutEquipmentClientTypes.CountPercent? = nil,
            monotonicValues: LookoutEquipmentClientTypes.MonotonicValues? = nil,
            multipleOperatingModes: LookoutEquipmentClientTypes.MultipleOperatingModes? = nil,
            sensorName: Swift.String? = nil
        )
        {
            self.categoricalValues = categoricalValues
            self.componentName = componentName
            self.dataEndTime = dataEndTime
            self.dataExists = dataExists
            self.dataStartTime = dataStartTime
            self.duplicateTimestamps = duplicateTimestamps
            self.invalidDateEntries = invalidDateEntries
            self.invalidValues = invalidValues
            self.largeTimestampGaps = largeTimestampGaps
            self.missingValues = missingValues
            self.monotonicValues = monotonicValues
            self.multipleOperatingModes = multipleOperatingModes
            self.sensorName = sensorName
        }
    }

}
