// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateInferenceSchedulerInputBody: Swift.Equatable {
    let modelName: Swift.String?
    let inferenceSchedulerName: Swift.String?
    let dataDelayOffsetInMinutes: Swift.Int?
    let dataUploadFrequency: LookoutEquipmentClientTypes.DataUploadFrequency?
    let dataInputConfiguration: LookoutEquipmentClientTypes.InferenceInputConfiguration?
    let dataOutputConfiguration: LookoutEquipmentClientTypes.InferenceOutputConfiguration?
    let roleArn: Swift.String?
    let serverSideKmsKeyId: Swift.String?
    let clientToken: Swift.String?
    let tags: [LookoutEquipmentClientTypes.Tag]?
}

extension CreateInferenceSchedulerInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientToken = "ClientToken"
        case dataDelayOffsetInMinutes = "DataDelayOffsetInMinutes"
        case dataInputConfiguration = "DataInputConfiguration"
        case dataOutputConfiguration = "DataOutputConfiguration"
        case dataUploadFrequency = "DataUploadFrequency"
        case inferenceSchedulerName = "InferenceSchedulerName"
        case modelName = "ModelName"
        case roleArn = "RoleArn"
        case serverSideKmsKeyId = "ServerSideKmsKeyId"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let modelNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelName)
        modelName = modelNameDecoded
        let inferenceSchedulerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .inferenceSchedulerName)
        inferenceSchedulerName = inferenceSchedulerNameDecoded
        let dataDelayOffsetInMinutesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .dataDelayOffsetInMinutes)
        dataDelayOffsetInMinutes = dataDelayOffsetInMinutesDecoded
        let dataUploadFrequencyDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.DataUploadFrequency.self, forKey: .dataUploadFrequency)
        dataUploadFrequency = dataUploadFrequencyDecoded
        let dataInputConfigurationDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.InferenceInputConfiguration.self, forKey: .dataInputConfiguration)
        dataInputConfiguration = dataInputConfigurationDecoded
        let dataOutputConfigurationDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.InferenceOutputConfiguration.self, forKey: .dataOutputConfiguration)
        dataOutputConfiguration = dataOutputConfigurationDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let serverSideKmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serverSideKmsKeyId)
        serverSideKmsKeyId = serverSideKmsKeyIdDecoded
        let clientTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientToken)
        clientToken = clientTokenDecoded
        let tagsContainer = try containerValues.decodeIfPresent([LookoutEquipmentClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[LookoutEquipmentClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [LookoutEquipmentClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}
