// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension LookoutEquipmentClientTypes.InsufficientSensorData: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case missingCompleteSensorData = "MissingCompleteSensorData"
        case sensorsWithShortDateRange = "SensorsWithShortDateRange"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let missingCompleteSensorData = self.missingCompleteSensorData {
            try encodeContainer.encode(missingCompleteSensorData, forKey: .missingCompleteSensorData)
        }
        if let sensorsWithShortDateRange = self.sensorsWithShortDateRange {
            try encodeContainer.encode(sensorsWithShortDateRange, forKey: .sensorsWithShortDateRange)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let missingCompleteSensorDataDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.MissingCompleteSensorData.self, forKey: .missingCompleteSensorData)
        missingCompleteSensorData = missingCompleteSensorDataDecoded
        let sensorsWithShortDateRangeDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.SensorsWithShortDateRange.self, forKey: .sensorsWithShortDateRange)
        sensorsWithShortDateRange = sensorsWithShortDateRangeDecoded
    }
}
