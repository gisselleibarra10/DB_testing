// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct DescribeModelOutputResponse: Swift.Equatable {
    /// Indicates the time and date at which the ML model was created.
    public var createdAt: ClientRuntime.Date?
    /// The configuration is the TargetSamplingRate, which is the sampling rate of the data after post processing by Amazon Lookout for Equipment. For example, if you provide data that has been collected at a 1 second level and you want the system to resample the data at a 1 minute rate before training, the TargetSamplingRate is 1 minute. When providing a value for the TargetSamplingRate, you must attach the prefix "PT" to the rate you want. The value for a 1 second rate is therefore PT1S, the value for a 15 minute rate is PT15M, and the value for a 1 hour rate is PT1H
    public var dataPreProcessingConfiguration: LookoutEquipmentClientTypes.DataPreProcessingConfiguration?
    /// The Amazon Resouce Name (ARN) of the dataset used to create the ML model being described.
    public var datasetArn: Swift.String?
    /// The name of the dataset being used by the ML being described.
    public var datasetName: Swift.String?
    /// Indicates the time reference in the dataset that was used to end the subset of evaluation data for the ML model.
    public var evaluationDataEndTime: ClientRuntime.Date?
    /// Indicates the time reference in the dataset that was used to begin the subset of evaluation data for the ML model.
    public var evaluationDataStartTime: ClientRuntime.Date?
    /// If the training of the ML model failed, this indicates the reason for that failure.
    public var failedReason: Swift.String?
    /// Specifies configuration information about the labels input, including its S3 location.
    public var labelsInputConfiguration: LookoutEquipmentClientTypes.LabelsInputConfiguration?
    /// Indicates the last time the ML model was updated. The type of update is not specified.
    public var lastUpdatedTime: ClientRuntime.Date?
    /// The Amazon Resource Name (ARN) of the ML model being described.
    public var modelArn: Swift.String?
    /// The Model Metrics show an aggregated summary of the model's performance within the evaluation time range. This is the JSON content of the metrics created when evaluating the model.
    public var modelMetrics: Swift.String?
    /// The name of the ML model being described.
    public var modelName: Swift.String?
    /// Indicates that the asset associated with this sensor has been shut off. As long as this condition is met, Lookout for Equipment will not use data from this asset for training, evaluation, or inference.
    public var offCondition: Swift.String?
    /// The Amazon Resource Name (ARN) of a role with permission to access the data source for the ML model being described.
    public var roleArn: Swift.String?
    /// A JSON description of the data that is in each time series dataset, including names, column names, and data types.
    public var schema: Swift.String?
    /// Provides the identifier of the KMS key used to encrypt model data by Amazon Lookout for Equipment.
    public var serverSideKmsKeyId: Swift.String?
    /// Specifies the current status of the model being described. Status describes the status of the most recent action of the model.
    public var status: LookoutEquipmentClientTypes.ModelStatus?
    /// Indicates the time reference in the dataset that was used to end the subset of training data for the ML model.
    public var trainingDataEndTime: ClientRuntime.Date?
    /// Indicates the time reference in the dataset that was used to begin the subset of training data for the ML model.
    public var trainingDataStartTime: ClientRuntime.Date?
    /// Indicates the time at which the training of the ML model was completed.
    public var trainingExecutionEndTime: ClientRuntime.Date?
    /// Indicates the time at which the training of the ML model began.
    public var trainingExecutionStartTime: ClientRuntime.Date?

    public init (
        createdAt: ClientRuntime.Date? = nil,
        dataPreProcessingConfiguration: LookoutEquipmentClientTypes.DataPreProcessingConfiguration? = nil,
        datasetArn: Swift.String? = nil,
        datasetName: Swift.String? = nil,
        evaluationDataEndTime: ClientRuntime.Date? = nil,
        evaluationDataStartTime: ClientRuntime.Date? = nil,
        failedReason: Swift.String? = nil,
        labelsInputConfiguration: LookoutEquipmentClientTypes.LabelsInputConfiguration? = nil,
        lastUpdatedTime: ClientRuntime.Date? = nil,
        modelArn: Swift.String? = nil,
        modelMetrics: Swift.String? = nil,
        modelName: Swift.String? = nil,
        offCondition: Swift.String? = nil,
        roleArn: Swift.String? = nil,
        schema: Swift.String? = nil,
        serverSideKmsKeyId: Swift.String? = nil,
        status: LookoutEquipmentClientTypes.ModelStatus? = nil,
        trainingDataEndTime: ClientRuntime.Date? = nil,
        trainingDataStartTime: ClientRuntime.Date? = nil,
        trainingExecutionEndTime: ClientRuntime.Date? = nil,
        trainingExecutionStartTime: ClientRuntime.Date? = nil
    )
    {
        self.createdAt = createdAt
        self.dataPreProcessingConfiguration = dataPreProcessingConfiguration
        self.datasetArn = datasetArn
        self.datasetName = datasetName
        self.evaluationDataEndTime = evaluationDataEndTime
        self.evaluationDataStartTime = evaluationDataStartTime
        self.failedReason = failedReason
        self.labelsInputConfiguration = labelsInputConfiguration
        self.lastUpdatedTime = lastUpdatedTime
        self.modelArn = modelArn
        self.modelMetrics = modelMetrics
        self.modelName = modelName
        self.offCondition = offCondition
        self.roleArn = roleArn
        self.schema = schema
        self.serverSideKmsKeyId = serverSideKmsKeyId
        self.status = status
        self.trainingDataEndTime = trainingDataEndTime
        self.trainingDataStartTime = trainingDataStartTime
        self.trainingExecutionEndTime = trainingExecutionEndTime
        self.trainingExecutionStartTime = trainingExecutionStartTime
    }
}
