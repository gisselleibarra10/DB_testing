// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListLabelsOutputResponseBody: Swift.Equatable {
    let nextToken: Swift.String?
    let labelSummaries: [LookoutEquipmentClientTypes.LabelSummary]?
}

extension ListLabelsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case labelSummaries = "LabelSummaries"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let labelSummariesContainer = try containerValues.decodeIfPresent([LookoutEquipmentClientTypes.LabelSummary?].self, forKey: .labelSummaries)
        var labelSummariesDecoded0:[LookoutEquipmentClientTypes.LabelSummary]? = nil
        if let labelSummariesContainer = labelSummariesContainer {
            labelSummariesDecoded0 = [LookoutEquipmentClientTypes.LabelSummary]()
            for structure0 in labelSummariesContainer {
                if let structure0 = structure0 {
                    labelSummariesDecoded0?.append(structure0)
                }
            }
        }
        labelSummaries = labelSummariesDecoded0
    }
}
