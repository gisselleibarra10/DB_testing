// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateDatasetInputBody: Swift.Equatable {
    let datasetName: Swift.String?
    let datasetSchema: LookoutEquipmentClientTypes.DatasetSchema?
    let serverSideKmsKeyId: Swift.String?
    let clientToken: Swift.String?
    let tags: [LookoutEquipmentClientTypes.Tag]?
}

extension CreateDatasetInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientToken = "ClientToken"
        case datasetName = "DatasetName"
        case datasetSchema = "DatasetSchema"
        case serverSideKmsKeyId = "ServerSideKmsKeyId"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let datasetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .datasetName)
        datasetName = datasetNameDecoded
        let datasetSchemaDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.DatasetSchema.self, forKey: .datasetSchema)
        datasetSchema = datasetSchemaDecoded
        let serverSideKmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serverSideKmsKeyId)
        serverSideKmsKeyId = serverSideKmsKeyIdDecoded
        let clientTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientToken)
        clientToken = clientTokenDecoded
        let tagsContainer = try containerValues.decodeIfPresent([LookoutEquipmentClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[LookoutEquipmentClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [LookoutEquipmentClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}
