// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension LookoutEquipmentClientTypes.InferenceEventSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case diagnostics = "Diagnostics"
        case eventDurationInSeconds = "EventDurationInSeconds"
        case eventEndTime = "EventEndTime"
        case eventStartTime = "EventStartTime"
        case inferenceSchedulerArn = "InferenceSchedulerArn"
        case inferenceSchedulerName = "InferenceSchedulerName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let diagnostics = self.diagnostics {
            try encodeContainer.encode(diagnostics, forKey: .diagnostics)
        }
        if let eventDurationInSeconds = self.eventDurationInSeconds {
            try encodeContainer.encode(eventDurationInSeconds, forKey: .eventDurationInSeconds)
        }
        if let eventEndTime = self.eventEndTime {
            try encodeContainer.encode(eventEndTime.timeIntervalSince1970, forKey: .eventEndTime)
        }
        if let eventStartTime = self.eventStartTime {
            try encodeContainer.encode(eventStartTime.timeIntervalSince1970, forKey: .eventStartTime)
        }
        if let inferenceSchedulerArn = self.inferenceSchedulerArn {
            try encodeContainer.encode(inferenceSchedulerArn, forKey: .inferenceSchedulerArn)
        }
        if let inferenceSchedulerName = self.inferenceSchedulerName {
            try encodeContainer.encode(inferenceSchedulerName, forKey: .inferenceSchedulerName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let inferenceSchedulerArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .inferenceSchedulerArn)
        inferenceSchedulerArn = inferenceSchedulerArnDecoded
        let inferenceSchedulerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .inferenceSchedulerName)
        inferenceSchedulerName = inferenceSchedulerNameDecoded
        let eventStartTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .eventStartTime)
        eventStartTime = eventStartTimeDecoded
        let eventEndTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .eventEndTime)
        eventEndTime = eventEndTimeDecoded
        let diagnosticsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .diagnostics)
        diagnostics = diagnosticsDecoded
        let eventDurationInSecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .eventDurationInSeconds)
        eventDurationInSeconds = eventDurationInSecondsDecoded
    }
}
