// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension LookoutEquipmentClientTypes.DataQualitySummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case duplicateTimestamps = "DuplicateTimestamps"
        case insufficientSensorData = "InsufficientSensorData"
        case invalidSensorData = "InvalidSensorData"
        case missingSensorData = "MissingSensorData"
        case unsupportedTimestamps = "UnsupportedTimestamps"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let duplicateTimestamps = self.duplicateTimestamps {
            try encodeContainer.encode(duplicateTimestamps, forKey: .duplicateTimestamps)
        }
        if let insufficientSensorData = self.insufficientSensorData {
            try encodeContainer.encode(insufficientSensorData, forKey: .insufficientSensorData)
        }
        if let invalidSensorData = self.invalidSensorData {
            try encodeContainer.encode(invalidSensorData, forKey: .invalidSensorData)
        }
        if let missingSensorData = self.missingSensorData {
            try encodeContainer.encode(missingSensorData, forKey: .missingSensorData)
        }
        if let unsupportedTimestamps = self.unsupportedTimestamps {
            try encodeContainer.encode(unsupportedTimestamps, forKey: .unsupportedTimestamps)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let insufficientSensorDataDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.InsufficientSensorData.self, forKey: .insufficientSensorData)
        insufficientSensorData = insufficientSensorDataDecoded
        let missingSensorDataDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.MissingSensorData.self, forKey: .missingSensorData)
        missingSensorData = missingSensorDataDecoded
        let invalidSensorDataDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.InvalidSensorData.self, forKey: .invalidSensorData)
        invalidSensorData = invalidSensorDataDecoded
        let unsupportedTimestampsDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.UnsupportedTimestamps.self, forKey: .unsupportedTimestamps)
        unsupportedTimestamps = unsupportedTimestampsDecoded
        let duplicateTimestampsDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.DuplicateTimestamps.self, forKey: .duplicateTimestamps)
        duplicateTimestamps = duplicateTimestampsDecoded
    }
}
