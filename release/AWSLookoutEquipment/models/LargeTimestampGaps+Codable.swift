// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension LookoutEquipmentClientTypes.LargeTimestampGaps: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxTimestampGapInDays = "MaxTimestampGapInDays"
        case numberOfLargeTimestampGaps = "NumberOfLargeTimestampGaps"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let maxTimestampGapInDays = self.maxTimestampGapInDays {
            try encodeContainer.encode(maxTimestampGapInDays, forKey: .maxTimestampGapInDays)
        }
        if let numberOfLargeTimestampGaps = self.numberOfLargeTimestampGaps {
            try encodeContainer.encode(numberOfLargeTimestampGaps, forKey: .numberOfLargeTimestampGaps)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statusDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.StatisticalIssueStatus.self, forKey: .status)
        status = statusDecoded
        let numberOfLargeTimestampGapsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .numberOfLargeTimestampGaps)
        numberOfLargeTimestampGaps = numberOfLargeTimestampGapsDecoded
        let maxTimestampGapInDaysDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxTimestampGapInDays)
        maxTimestampGapInDays = maxTimestampGapInDaysDecoded
    }
}
