// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension LookoutEquipmentClientTypes.LabelSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createdAt = "CreatedAt"
        case endTime = "EndTime"
        case equipment = "Equipment"
        case faultCode = "FaultCode"
        case labelGroupArn = "LabelGroupArn"
        case labelGroupName = "LabelGroupName"
        case labelId = "LabelId"
        case rating = "Rating"
        case startTime = "StartTime"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let createdAt = self.createdAt {
            try encodeContainer.encode(createdAt.timeIntervalSince1970, forKey: .createdAt)
        }
        if let endTime = self.endTime {
            try encodeContainer.encode(endTime.timeIntervalSince1970, forKey: .endTime)
        }
        if let equipment = self.equipment {
            try encodeContainer.encode(equipment, forKey: .equipment)
        }
        if let faultCode = self.faultCode {
            try encodeContainer.encode(faultCode, forKey: .faultCode)
        }
        if let labelGroupArn = self.labelGroupArn {
            try encodeContainer.encode(labelGroupArn, forKey: .labelGroupArn)
        }
        if let labelGroupName = self.labelGroupName {
            try encodeContainer.encode(labelGroupName, forKey: .labelGroupName)
        }
        if let labelId = self.labelId {
            try encodeContainer.encode(labelId, forKey: .labelId)
        }
        if let rating = self.rating {
            try encodeContainer.encode(rating.rawValue, forKey: .rating)
        }
        if let startTime = self.startTime {
            try encodeContainer.encode(startTime.timeIntervalSince1970, forKey: .startTime)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let labelGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .labelGroupName)
        labelGroupName = labelGroupNameDecoded
        let labelIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .labelId)
        labelId = labelIdDecoded
        let labelGroupArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .labelGroupArn)
        labelGroupArn = labelGroupArnDecoded
        let startTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .startTime)
        startTime = startTimeDecoded
        let endTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .endTime)
        endTime = endTimeDecoded
        let ratingDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.LabelRating.self, forKey: .rating)
        rating = ratingDecoded
        let faultCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .faultCode)
        faultCode = faultCodeDecoded
        let equipmentDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .equipment)
        equipment = equipmentDecoded
        let createdAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdAt)
        createdAt = createdAtDecoded
    }
}
