// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeDatasetOutputResponseBody: Swift.Equatable {
    let datasetName: Swift.String?
    let datasetArn: Swift.String?
    let createdAt: ClientRuntime.Date?
    let lastUpdatedAt: ClientRuntime.Date?
    let status: LookoutEquipmentClientTypes.DatasetStatus?
    let schema: Swift.String?
    let serverSideKmsKeyId: Swift.String?
    let ingestionInputConfiguration: LookoutEquipmentClientTypes.IngestionInputConfiguration?
    let dataQualitySummary: LookoutEquipmentClientTypes.DataQualitySummary?
    let ingestedFilesSummary: LookoutEquipmentClientTypes.IngestedFilesSummary?
    let roleArn: Swift.String?
    let dataStartTime: ClientRuntime.Date?
    let dataEndTime: ClientRuntime.Date?
}

extension DescribeDatasetOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createdAt = "CreatedAt"
        case dataEndTime = "DataEndTime"
        case dataQualitySummary = "DataQualitySummary"
        case dataStartTime = "DataStartTime"
        case datasetArn = "DatasetArn"
        case datasetName = "DatasetName"
        case ingestedFilesSummary = "IngestedFilesSummary"
        case ingestionInputConfiguration = "IngestionInputConfiguration"
        case lastUpdatedAt = "LastUpdatedAt"
        case roleArn = "RoleArn"
        case schema = "Schema"
        case serverSideKmsKeyId = "ServerSideKmsKeyId"
        case status = "Status"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let datasetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .datasetName)
        datasetName = datasetNameDecoded
        let datasetArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .datasetArn)
        datasetArn = datasetArnDecoded
        let createdAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdAt)
        createdAt = createdAtDecoded
        let lastUpdatedAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastUpdatedAt)
        lastUpdatedAt = lastUpdatedAtDecoded
        let statusDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.DatasetStatus.self, forKey: .status)
        status = statusDecoded
        let schemaDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .schema)
        schema = schemaDecoded
        let serverSideKmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serverSideKmsKeyId)
        serverSideKmsKeyId = serverSideKmsKeyIdDecoded
        let ingestionInputConfigurationDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.IngestionInputConfiguration.self, forKey: .ingestionInputConfiguration)
        ingestionInputConfiguration = ingestionInputConfigurationDecoded
        let dataQualitySummaryDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.DataQualitySummary.self, forKey: .dataQualitySummary)
        dataQualitySummary = dataQualitySummaryDecoded
        let ingestedFilesSummaryDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.IngestedFilesSummary.self, forKey: .ingestedFilesSummary)
        ingestedFilesSummary = ingestedFilesSummaryDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let dataStartTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .dataStartTime)
        dataStartTime = dataStartTimeDecoded
        let dataEndTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .dataEndTime)
        dataEndTime = dataEndTimeDecoded
    }
}
