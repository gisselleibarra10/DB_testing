// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListInferenceSchedulersOutputResponseBody: Swift.Equatable {
    let nextToken: Swift.String?
    let inferenceSchedulerSummaries: [LookoutEquipmentClientTypes.InferenceSchedulerSummary]?
}

extension ListInferenceSchedulersOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case inferenceSchedulerSummaries = "InferenceSchedulerSummaries"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let inferenceSchedulerSummariesContainer = try containerValues.decodeIfPresent([LookoutEquipmentClientTypes.InferenceSchedulerSummary?].self, forKey: .inferenceSchedulerSummaries)
        var inferenceSchedulerSummariesDecoded0:[LookoutEquipmentClientTypes.InferenceSchedulerSummary]? = nil
        if let inferenceSchedulerSummariesContainer = inferenceSchedulerSummariesContainer {
            inferenceSchedulerSummariesDecoded0 = [LookoutEquipmentClientTypes.InferenceSchedulerSummary]()
            for structure0 in inferenceSchedulerSummariesContainer {
                if let structure0 = structure0 {
                    inferenceSchedulerSummariesDecoded0?.append(structure0)
                }
            }
        }
        inferenceSchedulerSummaries = inferenceSchedulerSummariesDecoded0
    }
}
