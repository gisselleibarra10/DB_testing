// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetEntitlementsInputBody: Swift.Equatable {
    let productCode: Swift.String?
    let filter: [Swift.String:[Swift.String]]?
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
}

extension GetEntitlementsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filter = "Filter"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case productCode = "ProductCode"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let productCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .productCode)
        productCode = productCodeDecoded
        let filterContainer = try containerValues.decodeIfPresent([Swift.String: [Swift.String?]?].self, forKey: .filter)
        var filterDecoded0: [Swift.String:[Swift.String]]? = nil
        if let filterContainer = filterContainer {
            filterDecoded0 = [Swift.String:[Swift.String]]()
            for (key0, filtervaluelist0) in filterContainer {
                var filtervaluelist0Decoded0: [Swift.String]? = nil
                if let filtervaluelist0 = filtervaluelist0 {
                    filtervaluelist0Decoded0 = [Swift.String]()
                    for string1 in filtervaluelist0 {
                        if let string1 = string1 {
                            filtervaluelist0Decoded0?.append(string1)
                        }
                    }
                }
                filterDecoded0?[key0] = filtervaluelist0Decoded0
            }
        }
        filter = filterDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
    }
}
