// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetItemInputBody: Swift.Equatable {
    let tableName: Swift.String?
    let key: [Swift.String:DynamoDbClientTypes.AttributeValue]?
    let attributesToGet: [Swift.String]?
    let consistentRead: Swift.Bool?
    let returnConsumedCapacity: DynamoDbClientTypes.ReturnConsumedCapacity?
    let projectionExpression: Swift.String?
    let expressionAttributeNames: [Swift.String:Swift.String]?
}

extension GetItemInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attributesToGet = "AttributesToGet"
        case consistentRead = "ConsistentRead"
        case expressionAttributeNames = "ExpressionAttributeNames"
        case key = "Key"
        case projectionExpression = "ProjectionExpression"
        case returnConsumedCapacity = "ReturnConsumedCapacity"
        case tableName = "TableName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tableNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tableName)
        tableName = tableNameDecoded
        let keyContainer = try containerValues.decodeIfPresent([Swift.String: DynamoDbClientTypes.AttributeValue?].self, forKey: .key)
        var keyDecoded0: [Swift.String:DynamoDbClientTypes.AttributeValue]? = nil
        if let keyContainer = keyContainer {
            keyDecoded0 = [Swift.String:DynamoDbClientTypes.AttributeValue]()
            for (key0, attributevalue0) in keyContainer {
                if let attributevalue0 = attributevalue0 {
                    keyDecoded0?[key0] = attributevalue0
                }
            }
        }
        key = keyDecoded0
        let attributesToGetContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .attributesToGet)
        var attributesToGetDecoded0:[Swift.String]? = nil
        if let attributesToGetContainer = attributesToGetContainer {
            attributesToGetDecoded0 = [Swift.String]()
            for string0 in attributesToGetContainer {
                if let string0 = string0 {
                    attributesToGetDecoded0?.append(string0)
                }
            }
        }
        attributesToGet = attributesToGetDecoded0
        let consistentReadDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .consistentRead)
        consistentRead = consistentReadDecoded
        let returnConsumedCapacityDecoded = try containerValues.decodeIfPresent(DynamoDbClientTypes.ReturnConsumedCapacity.self, forKey: .returnConsumedCapacity)
        returnConsumedCapacity = returnConsumedCapacityDecoded
        let projectionExpressionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .projectionExpression)
        projectionExpression = projectionExpressionDecoded
        let expressionAttributeNamesContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .expressionAttributeNames)
        var expressionAttributeNamesDecoded0: [Swift.String:Swift.String]? = nil
        if let expressionAttributeNamesContainer = expressionAttributeNamesContainer {
            expressionAttributeNamesDecoded0 = [Swift.String:Swift.String]()
            for (key0, attributename0) in expressionAttributeNamesContainer {
                if let attributename0 = attributename0 {
                    expressionAttributeNamesDecoded0?[key0] = attributename0
                }
            }
        }
        expressionAttributeNames = expressionAttributeNamesDecoded0
    }
}
