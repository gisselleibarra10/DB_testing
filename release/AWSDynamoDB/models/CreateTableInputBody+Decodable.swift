// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateTableInputBody: Swift.Equatable {
    let attributeDefinitions: [DynamoDbClientTypes.AttributeDefinition]?
    let tableName: Swift.String?
    let keySchema: [DynamoDbClientTypes.KeySchemaElement]?
    let localSecondaryIndexes: [DynamoDbClientTypes.LocalSecondaryIndex]?
    let globalSecondaryIndexes: [DynamoDbClientTypes.GlobalSecondaryIndex]?
    let billingMode: DynamoDbClientTypes.BillingMode?
    let provisionedThroughput: DynamoDbClientTypes.ProvisionedThroughput?
    let streamSpecification: DynamoDbClientTypes.StreamSpecification?
    let sSESpecification: DynamoDbClientTypes.SSESpecification?
    let tags: [DynamoDbClientTypes.Tag]?
    let tableClass: DynamoDbClientTypes.TableClass?
}

extension CreateTableInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attributeDefinitions = "AttributeDefinitions"
        case billingMode = "BillingMode"
        case globalSecondaryIndexes = "GlobalSecondaryIndexes"
        case keySchema = "KeySchema"
        case localSecondaryIndexes = "LocalSecondaryIndexes"
        case provisionedThroughput = "ProvisionedThroughput"
        case sSESpecification = "SSESpecification"
        case streamSpecification = "StreamSpecification"
        case tableClass = "TableClass"
        case tableName = "TableName"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let attributeDefinitionsContainer = try containerValues.decodeIfPresent([DynamoDbClientTypes.AttributeDefinition?].self, forKey: .attributeDefinitions)
        var attributeDefinitionsDecoded0:[DynamoDbClientTypes.AttributeDefinition]? = nil
        if let attributeDefinitionsContainer = attributeDefinitionsContainer {
            attributeDefinitionsDecoded0 = [DynamoDbClientTypes.AttributeDefinition]()
            for structure0 in attributeDefinitionsContainer {
                if let structure0 = structure0 {
                    attributeDefinitionsDecoded0?.append(structure0)
                }
            }
        }
        attributeDefinitions = attributeDefinitionsDecoded0
        let tableNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tableName)
        tableName = tableNameDecoded
        let keySchemaContainer = try containerValues.decodeIfPresent([DynamoDbClientTypes.KeySchemaElement?].self, forKey: .keySchema)
        var keySchemaDecoded0:[DynamoDbClientTypes.KeySchemaElement]? = nil
        if let keySchemaContainer = keySchemaContainer {
            keySchemaDecoded0 = [DynamoDbClientTypes.KeySchemaElement]()
            for structure0 in keySchemaContainer {
                if let structure0 = structure0 {
                    keySchemaDecoded0?.append(structure0)
                }
            }
        }
        keySchema = keySchemaDecoded0
        let localSecondaryIndexesContainer = try containerValues.decodeIfPresent([DynamoDbClientTypes.LocalSecondaryIndex?].self, forKey: .localSecondaryIndexes)
        var localSecondaryIndexesDecoded0:[DynamoDbClientTypes.LocalSecondaryIndex]? = nil
        if let localSecondaryIndexesContainer = localSecondaryIndexesContainer {
            localSecondaryIndexesDecoded0 = [DynamoDbClientTypes.LocalSecondaryIndex]()
            for structure0 in localSecondaryIndexesContainer {
                if let structure0 = structure0 {
                    localSecondaryIndexesDecoded0?.append(structure0)
                }
            }
        }
        localSecondaryIndexes = localSecondaryIndexesDecoded0
        let globalSecondaryIndexesContainer = try containerValues.decodeIfPresent([DynamoDbClientTypes.GlobalSecondaryIndex?].self, forKey: .globalSecondaryIndexes)
        var globalSecondaryIndexesDecoded0:[DynamoDbClientTypes.GlobalSecondaryIndex]? = nil
        if let globalSecondaryIndexesContainer = globalSecondaryIndexesContainer {
            globalSecondaryIndexesDecoded0 = [DynamoDbClientTypes.GlobalSecondaryIndex]()
            for structure0 in globalSecondaryIndexesContainer {
                if let structure0 = structure0 {
                    globalSecondaryIndexesDecoded0?.append(structure0)
                }
            }
        }
        globalSecondaryIndexes = globalSecondaryIndexesDecoded0
        let billingModeDecoded = try containerValues.decodeIfPresent(DynamoDbClientTypes.BillingMode.self, forKey: .billingMode)
        billingMode = billingModeDecoded
        let provisionedThroughputDecoded = try containerValues.decodeIfPresent(DynamoDbClientTypes.ProvisionedThroughput.self, forKey: .provisionedThroughput)
        provisionedThroughput = provisionedThroughputDecoded
        let streamSpecificationDecoded = try containerValues.decodeIfPresent(DynamoDbClientTypes.StreamSpecification.self, forKey: .streamSpecification)
        streamSpecification = streamSpecificationDecoded
        let sSESpecificationDecoded = try containerValues.decodeIfPresent(DynamoDbClientTypes.SSESpecification.self, forKey: .sSESpecification)
        sSESpecification = sSESpecificationDecoded
        let tagsContainer = try containerValues.decodeIfPresent([DynamoDbClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[DynamoDbClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [DynamoDbClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let tableClassDecoded = try containerValues.decodeIfPresent(DynamoDbClientTypes.TableClass.self, forKey: .tableClass)
        tableClass = tableClassDecoded
    }
}
