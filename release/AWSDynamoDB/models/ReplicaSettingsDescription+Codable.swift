// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension DynamoDbClientTypes.ReplicaSettingsDescription: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case regionName = "RegionName"
        case replicaBillingModeSummary = "ReplicaBillingModeSummary"
        case replicaGlobalSecondaryIndexSettings = "ReplicaGlobalSecondaryIndexSettings"
        case replicaProvisionedReadCapacityAutoScalingSettings = "ReplicaProvisionedReadCapacityAutoScalingSettings"
        case replicaProvisionedReadCapacityUnits = "ReplicaProvisionedReadCapacityUnits"
        case replicaProvisionedWriteCapacityAutoScalingSettings = "ReplicaProvisionedWriteCapacityAutoScalingSettings"
        case replicaProvisionedWriteCapacityUnits = "ReplicaProvisionedWriteCapacityUnits"
        case replicaStatus = "ReplicaStatus"
        case replicaTableClassSummary = "ReplicaTableClassSummary"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let regionName = self.regionName {
            try encodeContainer.encode(regionName, forKey: .regionName)
        }
        if let replicaBillingModeSummary = self.replicaBillingModeSummary {
            try encodeContainer.encode(replicaBillingModeSummary, forKey: .replicaBillingModeSummary)
        }
        if let replicaGlobalSecondaryIndexSettings = replicaGlobalSecondaryIndexSettings {
            var replicaGlobalSecondaryIndexSettingsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .replicaGlobalSecondaryIndexSettings)
            for replicaglobalsecondaryindexsettingsdescriptionlist0 in replicaGlobalSecondaryIndexSettings {
                try replicaGlobalSecondaryIndexSettingsContainer.encode(replicaglobalsecondaryindexsettingsdescriptionlist0)
            }
        }
        if let replicaProvisionedReadCapacityAutoScalingSettings = self.replicaProvisionedReadCapacityAutoScalingSettings {
            try encodeContainer.encode(replicaProvisionedReadCapacityAutoScalingSettings, forKey: .replicaProvisionedReadCapacityAutoScalingSettings)
        }
        if let replicaProvisionedReadCapacityUnits = self.replicaProvisionedReadCapacityUnits {
            try encodeContainer.encode(replicaProvisionedReadCapacityUnits, forKey: .replicaProvisionedReadCapacityUnits)
        }
        if let replicaProvisionedWriteCapacityAutoScalingSettings = self.replicaProvisionedWriteCapacityAutoScalingSettings {
            try encodeContainer.encode(replicaProvisionedWriteCapacityAutoScalingSettings, forKey: .replicaProvisionedWriteCapacityAutoScalingSettings)
        }
        if let replicaProvisionedWriteCapacityUnits = self.replicaProvisionedWriteCapacityUnits {
            try encodeContainer.encode(replicaProvisionedWriteCapacityUnits, forKey: .replicaProvisionedWriteCapacityUnits)
        }
        if let replicaStatus = self.replicaStatus {
            try encodeContainer.encode(replicaStatus.rawValue, forKey: .replicaStatus)
        }
        if let replicaTableClassSummary = self.replicaTableClassSummary {
            try encodeContainer.encode(replicaTableClassSummary, forKey: .replicaTableClassSummary)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let regionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .regionName)
        regionName = regionNameDecoded
        let replicaStatusDecoded = try containerValues.decodeIfPresent(DynamoDbClientTypes.ReplicaStatus.self, forKey: .replicaStatus)
        replicaStatus = replicaStatusDecoded
        let replicaBillingModeSummaryDecoded = try containerValues.decodeIfPresent(DynamoDbClientTypes.BillingModeSummary.self, forKey: .replicaBillingModeSummary)
        replicaBillingModeSummary = replicaBillingModeSummaryDecoded
        let replicaProvisionedReadCapacityUnitsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .replicaProvisionedReadCapacityUnits)
        replicaProvisionedReadCapacityUnits = replicaProvisionedReadCapacityUnitsDecoded
        let replicaProvisionedReadCapacityAutoScalingSettingsDecoded = try containerValues.decodeIfPresent(DynamoDbClientTypes.AutoScalingSettingsDescription.self, forKey: .replicaProvisionedReadCapacityAutoScalingSettings)
        replicaProvisionedReadCapacityAutoScalingSettings = replicaProvisionedReadCapacityAutoScalingSettingsDecoded
        let replicaProvisionedWriteCapacityUnitsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .replicaProvisionedWriteCapacityUnits)
        replicaProvisionedWriteCapacityUnits = replicaProvisionedWriteCapacityUnitsDecoded
        let replicaProvisionedWriteCapacityAutoScalingSettingsDecoded = try containerValues.decodeIfPresent(DynamoDbClientTypes.AutoScalingSettingsDescription.self, forKey: .replicaProvisionedWriteCapacityAutoScalingSettings)
        replicaProvisionedWriteCapacityAutoScalingSettings = replicaProvisionedWriteCapacityAutoScalingSettingsDecoded
        let replicaGlobalSecondaryIndexSettingsContainer = try containerValues.decodeIfPresent([DynamoDbClientTypes.ReplicaGlobalSecondaryIndexSettingsDescription?].self, forKey: .replicaGlobalSecondaryIndexSettings)
        var replicaGlobalSecondaryIndexSettingsDecoded0:[DynamoDbClientTypes.ReplicaGlobalSecondaryIndexSettingsDescription]? = nil
        if let replicaGlobalSecondaryIndexSettingsContainer = replicaGlobalSecondaryIndexSettingsContainer {
            replicaGlobalSecondaryIndexSettingsDecoded0 = [DynamoDbClientTypes.ReplicaGlobalSecondaryIndexSettingsDescription]()
            for structure0 in replicaGlobalSecondaryIndexSettingsContainer {
                if let structure0 = structure0 {
                    replicaGlobalSecondaryIndexSettingsDecoded0?.append(structure0)
                }
            }
        }
        replicaGlobalSecondaryIndexSettings = replicaGlobalSecondaryIndexSettingsDecoded0
        let replicaTableClassSummaryDecoded = try containerValues.decodeIfPresent(DynamoDbClientTypes.TableClassSummary.self, forKey: .replicaTableClassSummary)
        replicaTableClassSummary = replicaTableClassSummaryDecoded
    }
}
