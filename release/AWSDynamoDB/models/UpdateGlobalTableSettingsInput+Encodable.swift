// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension UpdateGlobalTableSettingsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case globalTableBillingMode = "GlobalTableBillingMode"
        case globalTableGlobalSecondaryIndexSettingsUpdate = "GlobalTableGlobalSecondaryIndexSettingsUpdate"
        case globalTableName = "GlobalTableName"
        case globalTableProvisionedWriteCapacityAutoScalingSettingsUpdate = "GlobalTableProvisionedWriteCapacityAutoScalingSettingsUpdate"
        case globalTableProvisionedWriteCapacityUnits = "GlobalTableProvisionedWriteCapacityUnits"
        case replicaSettingsUpdate = "ReplicaSettingsUpdate"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let globalTableBillingMode = self.globalTableBillingMode {
            try encodeContainer.encode(globalTableBillingMode.rawValue, forKey: .globalTableBillingMode)
        }
        if let globalTableGlobalSecondaryIndexSettingsUpdate = globalTableGlobalSecondaryIndexSettingsUpdate {
            var globalTableGlobalSecondaryIndexSettingsUpdateContainer = encodeContainer.nestedUnkeyedContainer(forKey: .globalTableGlobalSecondaryIndexSettingsUpdate)
            for globaltableglobalsecondaryindexsettingsupdatelist0 in globalTableGlobalSecondaryIndexSettingsUpdate {
                try globalTableGlobalSecondaryIndexSettingsUpdateContainer.encode(globaltableglobalsecondaryindexsettingsupdatelist0)
            }
        }
        if let globalTableName = self.globalTableName {
            try encodeContainer.encode(globalTableName, forKey: .globalTableName)
        }
        if let globalTableProvisionedWriteCapacityAutoScalingSettingsUpdate = self.globalTableProvisionedWriteCapacityAutoScalingSettingsUpdate {
            try encodeContainer.encode(globalTableProvisionedWriteCapacityAutoScalingSettingsUpdate, forKey: .globalTableProvisionedWriteCapacityAutoScalingSettingsUpdate)
        }
        if let globalTableProvisionedWriteCapacityUnits = self.globalTableProvisionedWriteCapacityUnits {
            try encodeContainer.encode(globalTableProvisionedWriteCapacityUnits, forKey: .globalTableProvisionedWriteCapacityUnits)
        }
        if let replicaSettingsUpdate = replicaSettingsUpdate {
            var replicaSettingsUpdateContainer = encodeContainer.nestedUnkeyedContainer(forKey: .replicaSettingsUpdate)
            for replicasettingsupdatelist0 in replicaSettingsUpdate {
                try replicaSettingsUpdateContainer.encode(replicasettingsupdatelist0)
            }
        }
    }
}
