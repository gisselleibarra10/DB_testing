// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct TransactGetItemsInputBody: Swift.Equatable {
    let transactItems: [DynamoDbClientTypes.TransactGetItem]?
    let returnConsumedCapacity: DynamoDbClientTypes.ReturnConsumedCapacity?
}

extension TransactGetItemsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case returnConsumedCapacity = "ReturnConsumedCapacity"
        case transactItems = "TransactItems"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let transactItemsContainer = try containerValues.decodeIfPresent([DynamoDbClientTypes.TransactGetItem?].self, forKey: .transactItems)
        var transactItemsDecoded0:[DynamoDbClientTypes.TransactGetItem]? = nil
        if let transactItemsContainer = transactItemsContainer {
            transactItemsDecoded0 = [DynamoDbClientTypes.TransactGetItem]()
            for structure0 in transactItemsContainer {
                if let structure0 = structure0 {
                    transactItemsDecoded0?.append(structure0)
                }
            }
        }
        transactItems = transactItemsDecoded0
        let returnConsumedCapacityDecoded = try containerValues.decodeIfPresent(DynamoDbClientTypes.ReturnConsumedCapacity.self, forKey: .returnConsumedCapacity)
        returnConsumedCapacity = returnConsumedCapacityDecoded
    }
}
