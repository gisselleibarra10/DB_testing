// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension DynamoDbClientTypes.ImportSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cloudWatchLogGroupArn = "CloudWatchLogGroupArn"
        case endTime = "EndTime"
        case importArn = "ImportArn"
        case importStatus = "ImportStatus"
        case inputFormat = "InputFormat"
        case s3BucketSource = "S3BucketSource"
        case startTime = "StartTime"
        case tableArn = "TableArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cloudWatchLogGroupArn = self.cloudWatchLogGroupArn {
            try encodeContainer.encode(cloudWatchLogGroupArn, forKey: .cloudWatchLogGroupArn)
        }
        if let endTime = self.endTime {
            try encodeContainer.encode(endTime.timeIntervalSince1970, forKey: .endTime)
        }
        if let importArn = self.importArn {
            try encodeContainer.encode(importArn, forKey: .importArn)
        }
        if let importStatus = self.importStatus {
            try encodeContainer.encode(importStatus.rawValue, forKey: .importStatus)
        }
        if let inputFormat = self.inputFormat {
            try encodeContainer.encode(inputFormat.rawValue, forKey: .inputFormat)
        }
        if let s3BucketSource = self.s3BucketSource {
            try encodeContainer.encode(s3BucketSource, forKey: .s3BucketSource)
        }
        if let startTime = self.startTime {
            try encodeContainer.encode(startTime.timeIntervalSince1970, forKey: .startTime)
        }
        if let tableArn = self.tableArn {
            try encodeContainer.encode(tableArn, forKey: .tableArn)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let importArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .importArn)
        importArn = importArnDecoded
        let importStatusDecoded = try containerValues.decodeIfPresent(DynamoDbClientTypes.ImportStatus.self, forKey: .importStatus)
        importStatus = importStatusDecoded
        let tableArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tableArn)
        tableArn = tableArnDecoded
        let s3BucketSourceDecoded = try containerValues.decodeIfPresent(DynamoDbClientTypes.S3BucketSource.self, forKey: .s3BucketSource)
        s3BucketSource = s3BucketSourceDecoded
        let cloudWatchLogGroupArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cloudWatchLogGroupArn)
        cloudWatchLogGroupArn = cloudWatchLogGroupArnDecoded
        let inputFormatDecoded = try containerValues.decodeIfPresent(DynamoDbClientTypes.InputFormat.self, forKey: .inputFormat)
        inputFormat = inputFormatDecoded
        let startTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .startTime)
        startTime = startTimeDecoded
        let endTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .endTime)
        endTime = endTimeDecoded
    }
}
