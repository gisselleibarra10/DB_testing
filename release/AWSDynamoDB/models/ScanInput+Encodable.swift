// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ScanInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attributesToGet = "AttributesToGet"
        case conditionalOperator = "ConditionalOperator"
        case consistentRead = "ConsistentRead"
        case exclusiveStartKey = "ExclusiveStartKey"
        case expressionAttributeNames = "ExpressionAttributeNames"
        case expressionAttributeValues = "ExpressionAttributeValues"
        case filterExpression = "FilterExpression"
        case indexName = "IndexName"
        case limit = "Limit"
        case projectionExpression = "ProjectionExpression"
        case returnConsumedCapacity = "ReturnConsumedCapacity"
        case scanFilter = "ScanFilter"
        case segment = "Segment"
        case select = "Select"
        case tableName = "TableName"
        case totalSegments = "TotalSegments"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let attributesToGet = attributesToGet {
            var attributesToGetContainer = encodeContainer.nestedUnkeyedContainer(forKey: .attributesToGet)
            for attributenamelist0 in attributesToGet {
                try attributesToGetContainer.encode(attributenamelist0)
            }
        }
        if let conditionalOperator = self.conditionalOperator {
            try encodeContainer.encode(conditionalOperator.rawValue, forKey: .conditionalOperator)
        }
        if let consistentRead = self.consistentRead {
            try encodeContainer.encode(consistentRead, forKey: .consistentRead)
        }
        if let exclusiveStartKey = exclusiveStartKey {
            var exclusiveStartKeyContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .exclusiveStartKey)
            for (dictKey0, key0) in exclusiveStartKey {
                try exclusiveStartKeyContainer.encode(key0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let expressionAttributeNames = expressionAttributeNames {
            var expressionAttributeNamesContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .expressionAttributeNames)
            for (dictKey0, expressionattributenamemap0) in expressionAttributeNames {
                try expressionAttributeNamesContainer.encode(expressionattributenamemap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let expressionAttributeValues = expressionAttributeValues {
            var expressionAttributeValuesContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .expressionAttributeValues)
            for (dictKey0, expressionattributevaluemap0) in expressionAttributeValues {
                try expressionAttributeValuesContainer.encode(expressionattributevaluemap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let filterExpression = self.filterExpression {
            try encodeContainer.encode(filterExpression, forKey: .filterExpression)
        }
        if let indexName = self.indexName {
            try encodeContainer.encode(indexName, forKey: .indexName)
        }
        if let limit = self.limit {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let projectionExpression = self.projectionExpression {
            try encodeContainer.encode(projectionExpression, forKey: .projectionExpression)
        }
        if let returnConsumedCapacity = self.returnConsumedCapacity {
            try encodeContainer.encode(returnConsumedCapacity.rawValue, forKey: .returnConsumedCapacity)
        }
        if let scanFilter = scanFilter {
            var scanFilterContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .scanFilter)
            for (dictKey0, filterconditionmap0) in scanFilter {
                try scanFilterContainer.encode(filterconditionmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let segment = self.segment {
            try encodeContainer.encode(segment, forKey: .segment)
        }
        if let select = self.select {
            try encodeContainer.encode(select.rawValue, forKey: .select)
        }
        if let tableName = self.tableName {
            try encodeContainer.encode(tableName, forKey: .tableName)
        }
        if let totalSegments = self.totalSegments {
            try encodeContainer.encode(totalSegments, forKey: .totalSegments)
        }
    }
}
