// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ListBackupsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case backupType = "BackupType"
        case exclusiveStartBackupArn = "ExclusiveStartBackupArn"
        case limit = "Limit"
        case tableName = "TableName"
        case timeRangeLowerBound = "TimeRangeLowerBound"
        case timeRangeUpperBound = "TimeRangeUpperBound"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let backupType = self.backupType {
            try encodeContainer.encode(backupType.rawValue, forKey: .backupType)
        }
        if let exclusiveStartBackupArn = self.exclusiveStartBackupArn {
            try encodeContainer.encode(exclusiveStartBackupArn, forKey: .exclusiveStartBackupArn)
        }
        if let limit = self.limit {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let tableName = self.tableName {
            try encodeContainer.encode(tableName, forKey: .tableName)
        }
        if let timeRangeLowerBound = self.timeRangeLowerBound {
            try encodeContainer.encode(timeRangeLowerBound.timeIntervalSince1970, forKey: .timeRangeLowerBound)
        }
        if let timeRangeUpperBound = self.timeRangeUpperBound {
            try encodeContainer.encode(timeRangeUpperBound.timeIntervalSince1970, forKey: .timeRangeUpperBound)
        }
    }
}
