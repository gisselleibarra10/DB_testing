// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct TransactionCanceledExceptionBody: Swift.Equatable {
    let message: Swift.String?
    let cancellationReasons: [DynamoDbClientTypes.CancellationReason]?
}

extension TransactionCanceledExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cancellationReasons = "CancellationReasons"
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let cancellationReasonsContainer = try containerValues.decodeIfPresent([DynamoDbClientTypes.CancellationReason?].self, forKey: .cancellationReasons)
        var cancellationReasonsDecoded0:[DynamoDbClientTypes.CancellationReason]? = nil
        if let cancellationReasonsContainer = cancellationReasonsContainer {
            cancellationReasonsDecoded0 = [DynamoDbClientTypes.CancellationReason]()
            for structure0 in cancellationReasonsContainer {
                if let structure0 = structure0 {
                    cancellationReasonsDecoded0?.append(structure0)
                }
            }
        }
        cancellationReasons = cancellationReasonsDecoded0
    }
}
