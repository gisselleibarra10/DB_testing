// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct BatchGetItemOutputResponseBody: Swift.Equatable {
    let responses: [Swift.String:[[Swift.String:DynamoDbClientTypes.AttributeValue]]]?
    let unprocessedKeys: [Swift.String:DynamoDbClientTypes.KeysAndAttributes]?
    let consumedCapacity: [DynamoDbClientTypes.ConsumedCapacity]?
}

extension BatchGetItemOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case consumedCapacity = "ConsumedCapacity"
        case responses = "Responses"
        case unprocessedKeys = "UnprocessedKeys"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let responsesContainer = try containerValues.decodeIfPresent([Swift.String: [[Swift.String: DynamoDbClientTypes.AttributeValue?]?]?].self, forKey: .responses)
        var responsesDecoded0: [Swift.String:[[Swift.String:DynamoDbClientTypes.AttributeValue]]]? = nil
        if let responsesContainer = responsesContainer {
            responsesDecoded0 = [Swift.String:[[Swift.String:DynamoDbClientTypes.AttributeValue]]]()
            for (key0, itemlist0) in responsesContainer {
                var itemlist0Decoded0: [[Swift.String: DynamoDbClientTypes.AttributeValue]]? = nil
                if let itemlist0 = itemlist0 {
                    itemlist0Decoded0 = [[Swift.String: DynamoDbClientTypes.AttributeValue]]()
                    for map1 in itemlist0 {
                        var itemlist0Decoded1: [Swift.String: DynamoDbClientTypes.AttributeValue]? = nil
                        if let map1 = map1 {
                            itemlist0Decoded1 = [Swift.String: DynamoDbClientTypes.AttributeValue]()
                            for (key2, attributevalue2) in map1 {
                                if let attributevalue2 = attributevalue2 {
                                    itemlist0Decoded1?[key2] = attributevalue2
                                }
                            }
                        }
                        if let itemlist0Decoded1 = itemlist0Decoded1 {
                            itemlist0Decoded0?.append(itemlist0Decoded1)
                        }
                    }
                }
                responsesDecoded0?[key0] = itemlist0Decoded0
            }
        }
        responses = responsesDecoded0
        let unprocessedKeysContainer = try containerValues.decodeIfPresent([Swift.String: DynamoDbClientTypes.KeysAndAttributes?].self, forKey: .unprocessedKeys)
        var unprocessedKeysDecoded0: [Swift.String:DynamoDbClientTypes.KeysAndAttributes]? = nil
        if let unprocessedKeysContainer = unprocessedKeysContainer {
            unprocessedKeysDecoded0 = [Swift.String:DynamoDbClientTypes.KeysAndAttributes]()
            for (key0, keysandattributes0) in unprocessedKeysContainer {
                if let keysandattributes0 = keysandattributes0 {
                    unprocessedKeysDecoded0?[key0] = keysandattributes0
                }
            }
        }
        unprocessedKeys = unprocessedKeysDecoded0
        let consumedCapacityContainer = try containerValues.decodeIfPresent([DynamoDbClientTypes.ConsumedCapacity?].self, forKey: .consumedCapacity)
        var consumedCapacityDecoded0:[DynamoDbClientTypes.ConsumedCapacity]? = nil
        if let consumedCapacityContainer = consumedCapacityContainer {
            consumedCapacityDecoded0 = [DynamoDbClientTypes.ConsumedCapacity]()
            for structure0 in consumedCapacityContainer {
                if let structure0 = structure0 {
                    consumedCapacityDecoded0?.append(structure0)
                }
            }
        }
        consumedCapacity = consumedCapacityDecoded0
    }
}
