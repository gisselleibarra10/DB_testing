// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension RestoreTableToPointInTimeInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case billingModeOverride = "BillingModeOverride"
        case globalSecondaryIndexOverride = "GlobalSecondaryIndexOverride"
        case localSecondaryIndexOverride = "LocalSecondaryIndexOverride"
        case provisionedThroughputOverride = "ProvisionedThroughputOverride"
        case restoreDateTime = "RestoreDateTime"
        case sSESpecificationOverride = "SSESpecificationOverride"
        case sourceTableArn = "SourceTableArn"
        case sourceTableName = "SourceTableName"
        case targetTableName = "TargetTableName"
        case useLatestRestorableTime = "UseLatestRestorableTime"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let billingModeOverride = self.billingModeOverride {
            try encodeContainer.encode(billingModeOverride.rawValue, forKey: .billingModeOverride)
        }
        if let globalSecondaryIndexOverride = globalSecondaryIndexOverride {
            var globalSecondaryIndexOverrideContainer = encodeContainer.nestedUnkeyedContainer(forKey: .globalSecondaryIndexOverride)
            for globalsecondaryindexlist0 in globalSecondaryIndexOverride {
                try globalSecondaryIndexOverrideContainer.encode(globalsecondaryindexlist0)
            }
        }
        if let localSecondaryIndexOverride = localSecondaryIndexOverride {
            var localSecondaryIndexOverrideContainer = encodeContainer.nestedUnkeyedContainer(forKey: .localSecondaryIndexOverride)
            for localsecondaryindexlist0 in localSecondaryIndexOverride {
                try localSecondaryIndexOverrideContainer.encode(localsecondaryindexlist0)
            }
        }
        if let provisionedThroughputOverride = self.provisionedThroughputOverride {
            try encodeContainer.encode(provisionedThroughputOverride, forKey: .provisionedThroughputOverride)
        }
        if let restoreDateTime = self.restoreDateTime {
            try encodeContainer.encode(restoreDateTime.timeIntervalSince1970, forKey: .restoreDateTime)
        }
        if let sSESpecificationOverride = self.sSESpecificationOverride {
            try encodeContainer.encode(sSESpecificationOverride, forKey: .sSESpecificationOverride)
        }
        if let sourceTableArn = self.sourceTableArn {
            try encodeContainer.encode(sourceTableArn, forKey: .sourceTableArn)
        }
        if let sourceTableName = self.sourceTableName {
            try encodeContainer.encode(sourceTableName, forKey: .sourceTableName)
        }
        if let targetTableName = self.targetTableName {
            try encodeContainer.encode(targetTableName, forKey: .targetTableName)
        }
        if let useLatestRestorableTime = self.useLatestRestorableTime {
            try encodeContainer.encode(useLatestRestorableTime, forKey: .useLatestRestorableTime)
        }
    }
}
