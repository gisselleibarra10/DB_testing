// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension DynamoDbClientTypes {
    public enum BatchStatementErrorCodeEnum: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case accessdenied
        case conditionalcheckfailed
        case duplicateitem
        case internalservererror
        case itemcollectionsizelimitexceeded
        case provisionedthroughputexceeded
        case requestlimitexceeded
        case resourcenotfound
        case throttlingerror
        case transactionconflict
        case validationerror
        case sdkUnknown(Swift.String)

        public static var allCases: [BatchStatementErrorCodeEnum] {
            return [
                .accessdenied,
                .conditionalcheckfailed,
                .duplicateitem,
                .internalservererror,
                .itemcollectionsizelimitexceeded,
                .provisionedthroughputexceeded,
                .requestlimitexceeded,
                .resourcenotfound,
                .throttlingerror,
                .transactionconflict,
                .validationerror,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .accessdenied: return "AccessDenied"
            case .conditionalcheckfailed: return "ConditionalCheckFailed"
            case .duplicateitem: return "DuplicateItem"
            case .internalservererror: return "InternalServerError"
            case .itemcollectionsizelimitexceeded: return "ItemCollectionSizeLimitExceeded"
            case .provisionedthroughputexceeded: return "ProvisionedThroughputExceeded"
            case .requestlimitexceeded: return "RequestLimitExceeded"
            case .resourcenotfound: return "ResourceNotFound"
            case .throttlingerror: return "ThrottlingError"
            case .transactionconflict: return "TransactionConflict"
            case .validationerror: return "ValidationError"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = BatchStatementErrorCodeEnum(rawValue: rawValue) ?? BatchStatementErrorCodeEnum.sdkUnknown(rawValue)
        }
    }
}
