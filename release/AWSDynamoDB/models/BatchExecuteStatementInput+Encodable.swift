// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension BatchExecuteStatementInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case returnConsumedCapacity = "ReturnConsumedCapacity"
        case statements = "Statements"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let returnConsumedCapacity = self.returnConsumedCapacity {
            try encodeContainer.encode(returnConsumedCapacity.rawValue, forKey: .returnConsumedCapacity)
        }
        if let statements = statements {
            var statementsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .statements)
            for partiqlbatchrequest0 in statements {
                try statementsContainer.encode(partiqlbatchrequest0)
            }
        }
    }
}
