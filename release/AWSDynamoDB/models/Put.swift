// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension DynamoDbClientTypes {
    /// Represents a request to perform a PutItem operation.
    public struct Put: Swift.Equatable {
        /// A condition that must be satisfied in order for a conditional update to succeed.
        public var conditionExpression: Swift.String?
        /// One or more substitution tokens for attribute names in an expression.
        public var expressionAttributeNames: [Swift.String:Swift.String]?
        /// One or more values that can be substituted in an expression.
        public var expressionAttributeValues: [Swift.String:DynamoDbClientTypes.AttributeValue]?
        /// A map of attribute name to attribute values, representing the primary key of the item to be written by PutItem. All of the table's primary key attributes must be specified, and their data types must match those of the table's key schema. If any attributes are present in the item that are part of an index key schema for the table, their types must match the index key schema.
        /// This member is required.
        public var item: [Swift.String:DynamoDbClientTypes.AttributeValue]?
        /// Use ReturnValuesOnConditionCheckFailure to get the item attributes if the Put condition fails. For ReturnValuesOnConditionCheckFailure, the valid values are: NONE and ALL_OLD.
        public var returnValuesOnConditionCheckFailure: DynamoDbClientTypes.ReturnValuesOnConditionCheckFailure?
        /// Name of the table in which to write the item.
        /// This member is required.
        public var tableName: Swift.String?

        public init (
            conditionExpression: Swift.String? = nil,
            expressionAttributeNames: [Swift.String:Swift.String]? = nil,
            expressionAttributeValues: [Swift.String:DynamoDbClientTypes.AttributeValue]? = nil,
            item: [Swift.String:DynamoDbClientTypes.AttributeValue]? = nil,
            returnValuesOnConditionCheckFailure: DynamoDbClientTypes.ReturnValuesOnConditionCheckFailure? = nil,
            tableName: Swift.String? = nil
        )
        {
            self.conditionExpression = conditionExpression
            self.expressionAttributeNames = expressionAttributeNames
            self.expressionAttributeValues = expressionAttributeValues
            self.item = item
            self.returnValuesOnConditionCheckFailure = returnValuesOnConditionCheckFailure
            self.tableName = tableName
        }
    }

}
