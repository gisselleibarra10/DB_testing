// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension DynamoDbClientTypes.SourceTableFeatureDetails: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case globalSecondaryIndexes = "GlobalSecondaryIndexes"
        case localSecondaryIndexes = "LocalSecondaryIndexes"
        case sSEDescription = "SSEDescription"
        case streamDescription = "StreamDescription"
        case timeToLiveDescription = "TimeToLiveDescription"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let globalSecondaryIndexes = globalSecondaryIndexes {
            var globalSecondaryIndexesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .globalSecondaryIndexes)
            for globalsecondaryindexes0 in globalSecondaryIndexes {
                try globalSecondaryIndexesContainer.encode(globalsecondaryindexes0)
            }
        }
        if let localSecondaryIndexes = localSecondaryIndexes {
            var localSecondaryIndexesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .localSecondaryIndexes)
            for localsecondaryindexes0 in localSecondaryIndexes {
                try localSecondaryIndexesContainer.encode(localsecondaryindexes0)
            }
        }
        if let sSEDescription = self.sSEDescription {
            try encodeContainer.encode(sSEDescription, forKey: .sSEDescription)
        }
        if let streamDescription = self.streamDescription {
            try encodeContainer.encode(streamDescription, forKey: .streamDescription)
        }
        if let timeToLiveDescription = self.timeToLiveDescription {
            try encodeContainer.encode(timeToLiveDescription, forKey: .timeToLiveDescription)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let localSecondaryIndexesContainer = try containerValues.decodeIfPresent([DynamoDbClientTypes.LocalSecondaryIndexInfo?].self, forKey: .localSecondaryIndexes)
        var localSecondaryIndexesDecoded0:[DynamoDbClientTypes.LocalSecondaryIndexInfo]? = nil
        if let localSecondaryIndexesContainer = localSecondaryIndexesContainer {
            localSecondaryIndexesDecoded0 = [DynamoDbClientTypes.LocalSecondaryIndexInfo]()
            for structure0 in localSecondaryIndexesContainer {
                if let structure0 = structure0 {
                    localSecondaryIndexesDecoded0?.append(structure0)
                }
            }
        }
        localSecondaryIndexes = localSecondaryIndexesDecoded0
        let globalSecondaryIndexesContainer = try containerValues.decodeIfPresent([DynamoDbClientTypes.GlobalSecondaryIndexInfo?].self, forKey: .globalSecondaryIndexes)
        var globalSecondaryIndexesDecoded0:[DynamoDbClientTypes.GlobalSecondaryIndexInfo]? = nil
        if let globalSecondaryIndexesContainer = globalSecondaryIndexesContainer {
            globalSecondaryIndexesDecoded0 = [DynamoDbClientTypes.GlobalSecondaryIndexInfo]()
            for structure0 in globalSecondaryIndexesContainer {
                if let structure0 = structure0 {
                    globalSecondaryIndexesDecoded0?.append(structure0)
                }
            }
        }
        globalSecondaryIndexes = globalSecondaryIndexesDecoded0
        let streamDescriptionDecoded = try containerValues.decodeIfPresent(DynamoDbClientTypes.StreamSpecification.self, forKey: .streamDescription)
        streamDescription = streamDescriptionDecoded
        let timeToLiveDescriptionDecoded = try containerValues.decodeIfPresent(DynamoDbClientTypes.TimeToLiveDescription.self, forKey: .timeToLiveDescription)
        timeToLiveDescription = timeToLiveDescriptionDecoded
        let sSEDescriptionDecoded = try containerValues.decodeIfPresent(DynamoDbClientTypes.SSEDescription.self, forKey: .sSEDescription)
        sSEDescription = sSEDescriptionDecoded
    }
}
