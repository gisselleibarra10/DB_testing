// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension DynamoDbClientTypes.ReplicaSettingsUpdate: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case regionName = "RegionName"
        case replicaGlobalSecondaryIndexSettingsUpdate = "ReplicaGlobalSecondaryIndexSettingsUpdate"
        case replicaProvisionedReadCapacityAutoScalingSettingsUpdate = "ReplicaProvisionedReadCapacityAutoScalingSettingsUpdate"
        case replicaProvisionedReadCapacityUnits = "ReplicaProvisionedReadCapacityUnits"
        case replicaTableClass = "ReplicaTableClass"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let regionName = self.regionName {
            try encodeContainer.encode(regionName, forKey: .regionName)
        }
        if let replicaGlobalSecondaryIndexSettingsUpdate = replicaGlobalSecondaryIndexSettingsUpdate {
            var replicaGlobalSecondaryIndexSettingsUpdateContainer = encodeContainer.nestedUnkeyedContainer(forKey: .replicaGlobalSecondaryIndexSettingsUpdate)
            for replicaglobalsecondaryindexsettingsupdatelist0 in replicaGlobalSecondaryIndexSettingsUpdate {
                try replicaGlobalSecondaryIndexSettingsUpdateContainer.encode(replicaglobalsecondaryindexsettingsupdatelist0)
            }
        }
        if let replicaProvisionedReadCapacityAutoScalingSettingsUpdate = self.replicaProvisionedReadCapacityAutoScalingSettingsUpdate {
            try encodeContainer.encode(replicaProvisionedReadCapacityAutoScalingSettingsUpdate, forKey: .replicaProvisionedReadCapacityAutoScalingSettingsUpdate)
        }
        if let replicaProvisionedReadCapacityUnits = self.replicaProvisionedReadCapacityUnits {
            try encodeContainer.encode(replicaProvisionedReadCapacityUnits, forKey: .replicaProvisionedReadCapacityUnits)
        }
        if let replicaTableClass = self.replicaTableClass {
            try encodeContainer.encode(replicaTableClass.rawValue, forKey: .replicaTableClass)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let regionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .regionName)
        regionName = regionNameDecoded
        let replicaProvisionedReadCapacityUnitsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .replicaProvisionedReadCapacityUnits)
        replicaProvisionedReadCapacityUnits = replicaProvisionedReadCapacityUnitsDecoded
        let replicaProvisionedReadCapacityAutoScalingSettingsUpdateDecoded = try containerValues.decodeIfPresent(DynamoDbClientTypes.AutoScalingSettingsUpdate.self, forKey: .replicaProvisionedReadCapacityAutoScalingSettingsUpdate)
        replicaProvisionedReadCapacityAutoScalingSettingsUpdate = replicaProvisionedReadCapacityAutoScalingSettingsUpdateDecoded
        let replicaGlobalSecondaryIndexSettingsUpdateContainer = try containerValues.decodeIfPresent([DynamoDbClientTypes.ReplicaGlobalSecondaryIndexSettingsUpdate?].self, forKey: .replicaGlobalSecondaryIndexSettingsUpdate)
        var replicaGlobalSecondaryIndexSettingsUpdateDecoded0:[DynamoDbClientTypes.ReplicaGlobalSecondaryIndexSettingsUpdate]? = nil
        if let replicaGlobalSecondaryIndexSettingsUpdateContainer = replicaGlobalSecondaryIndexSettingsUpdateContainer {
            replicaGlobalSecondaryIndexSettingsUpdateDecoded0 = [DynamoDbClientTypes.ReplicaGlobalSecondaryIndexSettingsUpdate]()
            for structure0 in replicaGlobalSecondaryIndexSettingsUpdateContainer {
                if let structure0 = structure0 {
                    replicaGlobalSecondaryIndexSettingsUpdateDecoded0?.append(structure0)
                }
            }
        }
        replicaGlobalSecondaryIndexSettingsUpdate = replicaGlobalSecondaryIndexSettingsUpdateDecoded0
        let replicaTableClassDecoded = try containerValues.decodeIfPresent(DynamoDbClientTypes.TableClass.self, forKey: .replicaTableClass)
        replicaTableClass = replicaTableClassDecoded
    }
}
