// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension DynamoDbClientTypes.ItemCollectionMetrics: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case itemCollectionKey = "ItemCollectionKey"
        case sizeEstimateRangeGB = "SizeEstimateRangeGB"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let itemCollectionKey = itemCollectionKey {
            var itemCollectionKeyContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .itemCollectionKey)
            for (dictKey0, itemcollectionkeyattributemap0) in itemCollectionKey {
                try itemCollectionKeyContainer.encode(itemcollectionkeyattributemap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let sizeEstimateRangeGB = sizeEstimateRangeGB {
            var sizeEstimateRangeGBContainer = encodeContainer.nestedUnkeyedContainer(forKey: .sizeEstimateRangeGB)
            for itemcollectionsizeestimaterange0 in sizeEstimateRangeGB {
                try sizeEstimateRangeGBContainer.encode(itemcollectionsizeestimaterange0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let itemCollectionKeyContainer = try containerValues.decodeIfPresent([Swift.String: DynamoDbClientTypes.AttributeValue?].self, forKey: .itemCollectionKey)
        var itemCollectionKeyDecoded0: [Swift.String:DynamoDbClientTypes.AttributeValue]? = nil
        if let itemCollectionKeyContainer = itemCollectionKeyContainer {
            itemCollectionKeyDecoded0 = [Swift.String:DynamoDbClientTypes.AttributeValue]()
            for (key0, attributevalue0) in itemCollectionKeyContainer {
                if let attributevalue0 = attributevalue0 {
                    itemCollectionKeyDecoded0?[key0] = attributevalue0
                }
            }
        }
        itemCollectionKey = itemCollectionKeyDecoded0
        let sizeEstimateRangeGBContainer = try containerValues.decodeIfPresent([Swift.Double?].self, forKey: .sizeEstimateRangeGB)
        var sizeEstimateRangeGBDecoded0:[Swift.Double]? = nil
        if let sizeEstimateRangeGBContainer = sizeEstimateRangeGBContainer {
            sizeEstimateRangeGBDecoded0 = [Swift.Double]()
            for double0 in sizeEstimateRangeGBContainer {
                if let double0 = double0 {
                    sizeEstimateRangeGBDecoded0?.append(double0)
                }
            }
        }
        sizeEstimateRangeGB = sizeEstimateRangeGBDecoded0
    }
}
