// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct BatchWriteItemInputBody: Swift.Equatable {
    let requestItems: [Swift.String:[DynamoDbClientTypes.WriteRequest]]?
    let returnConsumedCapacity: DynamoDbClientTypes.ReturnConsumedCapacity?
    let returnItemCollectionMetrics: DynamoDbClientTypes.ReturnItemCollectionMetrics?
}

extension BatchWriteItemInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case requestItems = "RequestItems"
        case returnConsumedCapacity = "ReturnConsumedCapacity"
        case returnItemCollectionMetrics = "ReturnItemCollectionMetrics"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let requestItemsContainer = try containerValues.decodeIfPresent([Swift.String: [DynamoDbClientTypes.WriteRequest?]?].self, forKey: .requestItems)
        var requestItemsDecoded0: [Swift.String:[DynamoDbClientTypes.WriteRequest]]? = nil
        if let requestItemsContainer = requestItemsContainer {
            requestItemsDecoded0 = [Swift.String:[DynamoDbClientTypes.WriteRequest]]()
            for (key0, writerequests0) in requestItemsContainer {
                var writerequests0Decoded0: [DynamoDbClientTypes.WriteRequest]? = nil
                if let writerequests0 = writerequests0 {
                    writerequests0Decoded0 = [DynamoDbClientTypes.WriteRequest]()
                    for structure1 in writerequests0 {
                        if let structure1 = structure1 {
                            writerequests0Decoded0?.append(structure1)
                        }
                    }
                }
                requestItemsDecoded0?[key0] = writerequests0Decoded0
            }
        }
        requestItems = requestItemsDecoded0
        let returnConsumedCapacityDecoded = try containerValues.decodeIfPresent(DynamoDbClientTypes.ReturnConsumedCapacity.self, forKey: .returnConsumedCapacity)
        returnConsumedCapacity = returnConsumedCapacityDecoded
        let returnItemCollectionMetricsDecoded = try containerValues.decodeIfPresent(DynamoDbClientTypes.ReturnItemCollectionMetrics.self, forKey: .returnItemCollectionMetrics)
        returnItemCollectionMetrics = returnItemCollectionMetricsDecoded
    }
}
