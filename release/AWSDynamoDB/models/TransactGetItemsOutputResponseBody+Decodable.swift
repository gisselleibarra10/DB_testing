// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct TransactGetItemsOutputResponseBody: Swift.Equatable {
    let consumedCapacity: [DynamoDbClientTypes.ConsumedCapacity]?
    let responses: [DynamoDbClientTypes.ItemResponse]?
}

extension TransactGetItemsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case consumedCapacity = "ConsumedCapacity"
        case responses = "Responses"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let consumedCapacityContainer = try containerValues.decodeIfPresent([DynamoDbClientTypes.ConsumedCapacity?].self, forKey: .consumedCapacity)
        var consumedCapacityDecoded0:[DynamoDbClientTypes.ConsumedCapacity]? = nil
        if let consumedCapacityContainer = consumedCapacityContainer {
            consumedCapacityDecoded0 = [DynamoDbClientTypes.ConsumedCapacity]()
            for structure0 in consumedCapacityContainer {
                if let structure0 = structure0 {
                    consumedCapacityDecoded0?.append(structure0)
                }
            }
        }
        consumedCapacity = consumedCapacityDecoded0
        let responsesContainer = try containerValues.decodeIfPresent([DynamoDbClientTypes.ItemResponse?].self, forKey: .responses)
        var responsesDecoded0:[DynamoDbClientTypes.ItemResponse]? = nil
        if let responsesContainer = responsesContainer {
            responsesDecoded0 = [DynamoDbClientTypes.ItemResponse]()
            for structure0 in responsesContainer {
                if let structure0 = structure0 {
                    responsesDecoded0?.append(structure0)
                }
            }
        }
        responses = responsesDecoded0
    }
}
