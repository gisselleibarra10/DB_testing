// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension DynamoDbClientTypes.ConsumedCapacity: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case capacityUnits = "CapacityUnits"
        case globalSecondaryIndexes = "GlobalSecondaryIndexes"
        case localSecondaryIndexes = "LocalSecondaryIndexes"
        case readCapacityUnits = "ReadCapacityUnits"
        case table = "Table"
        case tableName = "TableName"
        case writeCapacityUnits = "WriteCapacityUnits"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let capacityUnits = self.capacityUnits {
            try encodeContainer.encode(capacityUnits, forKey: .capacityUnits)
        }
        if let globalSecondaryIndexes = globalSecondaryIndexes {
            var globalSecondaryIndexesContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .globalSecondaryIndexes)
            for (dictKey0, secondaryindexescapacitymap0) in globalSecondaryIndexes {
                try globalSecondaryIndexesContainer.encode(secondaryindexescapacitymap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let localSecondaryIndexes = localSecondaryIndexes {
            var localSecondaryIndexesContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .localSecondaryIndexes)
            for (dictKey0, secondaryindexescapacitymap0) in localSecondaryIndexes {
                try localSecondaryIndexesContainer.encode(secondaryindexescapacitymap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let readCapacityUnits = self.readCapacityUnits {
            try encodeContainer.encode(readCapacityUnits, forKey: .readCapacityUnits)
        }
        if let table = self.table {
            try encodeContainer.encode(table, forKey: .table)
        }
        if let tableName = self.tableName {
            try encodeContainer.encode(tableName, forKey: .tableName)
        }
        if let writeCapacityUnits = self.writeCapacityUnits {
            try encodeContainer.encode(writeCapacityUnits, forKey: .writeCapacityUnits)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tableNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tableName)
        tableName = tableNameDecoded
        let capacityUnitsDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .capacityUnits)
        capacityUnits = capacityUnitsDecoded
        let readCapacityUnitsDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .readCapacityUnits)
        readCapacityUnits = readCapacityUnitsDecoded
        let writeCapacityUnitsDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .writeCapacityUnits)
        writeCapacityUnits = writeCapacityUnitsDecoded
        let tableDecoded = try containerValues.decodeIfPresent(DynamoDbClientTypes.Capacity.self, forKey: .table)
        table = tableDecoded
        let localSecondaryIndexesContainer = try containerValues.decodeIfPresent([Swift.String: DynamoDbClientTypes.Capacity?].self, forKey: .localSecondaryIndexes)
        var localSecondaryIndexesDecoded0: [Swift.String:DynamoDbClientTypes.Capacity]? = nil
        if let localSecondaryIndexesContainer = localSecondaryIndexesContainer {
            localSecondaryIndexesDecoded0 = [Swift.String:DynamoDbClientTypes.Capacity]()
            for (key0, capacity0) in localSecondaryIndexesContainer {
                if let capacity0 = capacity0 {
                    localSecondaryIndexesDecoded0?[key0] = capacity0
                }
            }
        }
        localSecondaryIndexes = localSecondaryIndexesDecoded0
        let globalSecondaryIndexesContainer = try containerValues.decodeIfPresent([Swift.String: DynamoDbClientTypes.Capacity?].self, forKey: .globalSecondaryIndexes)
        var globalSecondaryIndexesDecoded0: [Swift.String:DynamoDbClientTypes.Capacity]? = nil
        if let globalSecondaryIndexesContainer = globalSecondaryIndexesContainer {
            globalSecondaryIndexesDecoded0 = [Swift.String:DynamoDbClientTypes.Capacity]()
            for (key0, capacity0) in globalSecondaryIndexesContainer {
                if let capacity0 = capacity0 {
                    globalSecondaryIndexesDecoded0?[key0] = capacity0
                }
            }
        }
        globalSecondaryIndexes = globalSecondaryIndexesDecoded0
    }
}
