// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension TransactWriteItemsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientRequestToken = "ClientRequestToken"
        case returnConsumedCapacity = "ReturnConsumedCapacity"
        case returnItemCollectionMetrics = "ReturnItemCollectionMetrics"
        case transactItems = "TransactItems"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientRequestToken = self.clientRequestToken {
            try encodeContainer.encode(clientRequestToken, forKey: .clientRequestToken)
        }
        if let returnConsumedCapacity = self.returnConsumedCapacity {
            try encodeContainer.encode(returnConsumedCapacity.rawValue, forKey: .returnConsumedCapacity)
        }
        if let returnItemCollectionMetrics = self.returnItemCollectionMetrics {
            try encodeContainer.encode(returnItemCollectionMetrics.rawValue, forKey: .returnItemCollectionMetrics)
        }
        if let transactItems = transactItems {
            var transactItemsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .transactItems)
            for transactwriteitemlist0 in transactItems {
                try transactItemsContainer.encode(transactwriteitemlist0)
            }
        }
    }
}
