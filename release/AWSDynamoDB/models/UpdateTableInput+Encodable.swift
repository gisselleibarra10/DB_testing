// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension UpdateTableInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attributeDefinitions = "AttributeDefinitions"
        case billingMode = "BillingMode"
        case globalSecondaryIndexUpdates = "GlobalSecondaryIndexUpdates"
        case provisionedThroughput = "ProvisionedThroughput"
        case replicaUpdates = "ReplicaUpdates"
        case sSESpecification = "SSESpecification"
        case streamSpecification = "StreamSpecification"
        case tableClass = "TableClass"
        case tableName = "TableName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let attributeDefinitions = attributeDefinitions {
            var attributeDefinitionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .attributeDefinitions)
            for attributedefinitions0 in attributeDefinitions {
                try attributeDefinitionsContainer.encode(attributedefinitions0)
            }
        }
        if let billingMode = self.billingMode {
            try encodeContainer.encode(billingMode.rawValue, forKey: .billingMode)
        }
        if let globalSecondaryIndexUpdates = globalSecondaryIndexUpdates {
            var globalSecondaryIndexUpdatesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .globalSecondaryIndexUpdates)
            for globalsecondaryindexupdatelist0 in globalSecondaryIndexUpdates {
                try globalSecondaryIndexUpdatesContainer.encode(globalsecondaryindexupdatelist0)
            }
        }
        if let provisionedThroughput = self.provisionedThroughput {
            try encodeContainer.encode(provisionedThroughput, forKey: .provisionedThroughput)
        }
        if let replicaUpdates = replicaUpdates {
            var replicaUpdatesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .replicaUpdates)
            for replicationgroupupdatelist0 in replicaUpdates {
                try replicaUpdatesContainer.encode(replicationgroupupdatelist0)
            }
        }
        if let sSESpecification = self.sSESpecification {
            try encodeContainer.encode(sSESpecification, forKey: .sSESpecification)
        }
        if let streamSpecification = self.streamSpecification {
            try encodeContainer.encode(streamSpecification, forKey: .streamSpecification)
        }
        if let tableClass = self.tableClass {
            try encodeContainer.encode(tableClass.rawValue, forKey: .tableClass)
        }
        if let tableName = self.tableName {
            try encodeContainer.encode(tableName, forKey: .tableName)
        }
    }
}
