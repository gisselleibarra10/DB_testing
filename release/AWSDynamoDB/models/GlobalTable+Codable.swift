// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension DynamoDbClientTypes.GlobalTable: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case globalTableName = "GlobalTableName"
        case replicationGroup = "ReplicationGroup"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let globalTableName = self.globalTableName {
            try encodeContainer.encode(globalTableName, forKey: .globalTableName)
        }
        if let replicationGroup = replicationGroup {
            var replicationGroupContainer = encodeContainer.nestedUnkeyedContainer(forKey: .replicationGroup)
            for replicalist0 in replicationGroup {
                try replicationGroupContainer.encode(replicalist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let globalTableNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .globalTableName)
        globalTableName = globalTableNameDecoded
        let replicationGroupContainer = try containerValues.decodeIfPresent([DynamoDbClientTypes.Replica?].self, forKey: .replicationGroup)
        var replicationGroupDecoded0:[DynamoDbClientTypes.Replica]? = nil
        if let replicationGroupContainer = replicationGroupContainer {
            replicationGroupDecoded0 = [DynamoDbClientTypes.Replica]()
            for structure0 in replicationGroupContainer {
                if let structure0 = structure0 {
                    replicationGroupDecoded0?.append(structure0)
                }
            }
        }
        replicationGroup = replicationGroupDecoded0
    }
}
