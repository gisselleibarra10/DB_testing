// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension DynamoDbClientTypes.ImportTableDescription: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientToken = "ClientToken"
        case cloudWatchLogGroupArn = "CloudWatchLogGroupArn"
        case endTime = "EndTime"
        case errorCount = "ErrorCount"
        case failureCode = "FailureCode"
        case failureMessage = "FailureMessage"
        case importArn = "ImportArn"
        case importStatus = "ImportStatus"
        case importedItemCount = "ImportedItemCount"
        case inputCompressionType = "InputCompressionType"
        case inputFormat = "InputFormat"
        case inputFormatOptions = "InputFormatOptions"
        case processedItemCount = "ProcessedItemCount"
        case processedSizeBytes = "ProcessedSizeBytes"
        case s3BucketSource = "S3BucketSource"
        case startTime = "StartTime"
        case tableArn = "TableArn"
        case tableCreationParameters = "TableCreationParameters"
        case tableId = "TableId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientToken = self.clientToken {
            try encodeContainer.encode(clientToken, forKey: .clientToken)
        }
        if let cloudWatchLogGroupArn = self.cloudWatchLogGroupArn {
            try encodeContainer.encode(cloudWatchLogGroupArn, forKey: .cloudWatchLogGroupArn)
        }
        if let endTime = self.endTime {
            try encodeContainer.encode(endTime.timeIntervalSince1970, forKey: .endTime)
        }
        if errorCount != 0 {
            try encodeContainer.encode(errorCount, forKey: .errorCount)
        }
        if let failureCode = self.failureCode {
            try encodeContainer.encode(failureCode, forKey: .failureCode)
        }
        if let failureMessage = self.failureMessage {
            try encodeContainer.encode(failureMessage, forKey: .failureMessage)
        }
        if let importArn = self.importArn {
            try encodeContainer.encode(importArn, forKey: .importArn)
        }
        if let importStatus = self.importStatus {
            try encodeContainer.encode(importStatus.rawValue, forKey: .importStatus)
        }
        if importedItemCount != 0 {
            try encodeContainer.encode(importedItemCount, forKey: .importedItemCount)
        }
        if let inputCompressionType = self.inputCompressionType {
            try encodeContainer.encode(inputCompressionType.rawValue, forKey: .inputCompressionType)
        }
        if let inputFormat = self.inputFormat {
            try encodeContainer.encode(inputFormat.rawValue, forKey: .inputFormat)
        }
        if let inputFormatOptions = self.inputFormatOptions {
            try encodeContainer.encode(inputFormatOptions, forKey: .inputFormatOptions)
        }
        if processedItemCount != 0 {
            try encodeContainer.encode(processedItemCount, forKey: .processedItemCount)
        }
        if processedSizeBytes != 0 {
            try encodeContainer.encode(processedSizeBytes, forKey: .processedSizeBytes)
        }
        if let s3BucketSource = self.s3BucketSource {
            try encodeContainer.encode(s3BucketSource, forKey: .s3BucketSource)
        }
        if let startTime = self.startTime {
            try encodeContainer.encode(startTime.timeIntervalSince1970, forKey: .startTime)
        }
        if let tableArn = self.tableArn {
            try encodeContainer.encode(tableArn, forKey: .tableArn)
        }
        if let tableCreationParameters = self.tableCreationParameters {
            try encodeContainer.encode(tableCreationParameters, forKey: .tableCreationParameters)
        }
        if let tableId = self.tableId {
            try encodeContainer.encode(tableId, forKey: .tableId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let importArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .importArn)
        importArn = importArnDecoded
        let importStatusDecoded = try containerValues.decodeIfPresent(DynamoDbClientTypes.ImportStatus.self, forKey: .importStatus)
        importStatus = importStatusDecoded
        let tableArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tableArn)
        tableArn = tableArnDecoded
        let tableIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tableId)
        tableId = tableIdDecoded
        let clientTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientToken)
        clientToken = clientTokenDecoded
        let s3BucketSourceDecoded = try containerValues.decodeIfPresent(DynamoDbClientTypes.S3BucketSource.self, forKey: .s3BucketSource)
        s3BucketSource = s3BucketSourceDecoded
        let errorCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .errorCount) ?? 0
        errorCount = errorCountDecoded
        let cloudWatchLogGroupArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cloudWatchLogGroupArn)
        cloudWatchLogGroupArn = cloudWatchLogGroupArnDecoded
        let inputFormatDecoded = try containerValues.decodeIfPresent(DynamoDbClientTypes.InputFormat.self, forKey: .inputFormat)
        inputFormat = inputFormatDecoded
        let inputFormatOptionsDecoded = try containerValues.decodeIfPresent(DynamoDbClientTypes.InputFormatOptions.self, forKey: .inputFormatOptions)
        inputFormatOptions = inputFormatOptionsDecoded
        let inputCompressionTypeDecoded = try containerValues.decodeIfPresent(DynamoDbClientTypes.InputCompressionType.self, forKey: .inputCompressionType)
        inputCompressionType = inputCompressionTypeDecoded
        let tableCreationParametersDecoded = try containerValues.decodeIfPresent(DynamoDbClientTypes.TableCreationParameters.self, forKey: .tableCreationParameters)
        tableCreationParameters = tableCreationParametersDecoded
        let startTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .startTime)
        startTime = startTimeDecoded
        let endTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .endTime)
        endTime = endTimeDecoded
        let processedSizeBytesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .processedSizeBytes) ?? 0
        processedSizeBytes = processedSizeBytesDecoded
        let processedItemCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .processedItemCount) ?? 0
        processedItemCount = processedItemCountDecoded
        let importedItemCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .importedItemCount) ?? 0
        importedItemCount = importedItemCountDecoded
        let failureCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .failureCode)
        failureCode = failureCodeDecoded
        let failureMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .failureMessage)
        failureMessage = failureMessageDecoded
    }
}
