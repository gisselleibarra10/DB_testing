// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct UpdateTableInputBody: Swift.Equatable {
    let attributeDefinitions: [DynamoDbClientTypes.AttributeDefinition]?
    let tableName: Swift.String?
    let billingMode: DynamoDbClientTypes.BillingMode?
    let provisionedThroughput: DynamoDbClientTypes.ProvisionedThroughput?
    let globalSecondaryIndexUpdates: [DynamoDbClientTypes.GlobalSecondaryIndexUpdate]?
    let streamSpecification: DynamoDbClientTypes.StreamSpecification?
    let sSESpecification: DynamoDbClientTypes.SSESpecification?
    let replicaUpdates: [DynamoDbClientTypes.ReplicationGroupUpdate]?
    let tableClass: DynamoDbClientTypes.TableClass?
}

extension UpdateTableInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attributeDefinitions = "AttributeDefinitions"
        case billingMode = "BillingMode"
        case globalSecondaryIndexUpdates = "GlobalSecondaryIndexUpdates"
        case provisionedThroughput = "ProvisionedThroughput"
        case replicaUpdates = "ReplicaUpdates"
        case sSESpecification = "SSESpecification"
        case streamSpecification = "StreamSpecification"
        case tableClass = "TableClass"
        case tableName = "TableName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let attributeDefinitionsContainer = try containerValues.decodeIfPresent([DynamoDbClientTypes.AttributeDefinition?].self, forKey: .attributeDefinitions)
        var attributeDefinitionsDecoded0:[DynamoDbClientTypes.AttributeDefinition]? = nil
        if let attributeDefinitionsContainer = attributeDefinitionsContainer {
            attributeDefinitionsDecoded0 = [DynamoDbClientTypes.AttributeDefinition]()
            for structure0 in attributeDefinitionsContainer {
                if let structure0 = structure0 {
                    attributeDefinitionsDecoded0?.append(structure0)
                }
            }
        }
        attributeDefinitions = attributeDefinitionsDecoded0
        let tableNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tableName)
        tableName = tableNameDecoded
        let billingModeDecoded = try containerValues.decodeIfPresent(DynamoDbClientTypes.BillingMode.self, forKey: .billingMode)
        billingMode = billingModeDecoded
        let provisionedThroughputDecoded = try containerValues.decodeIfPresent(DynamoDbClientTypes.ProvisionedThroughput.self, forKey: .provisionedThroughput)
        provisionedThroughput = provisionedThroughputDecoded
        let globalSecondaryIndexUpdatesContainer = try containerValues.decodeIfPresent([DynamoDbClientTypes.GlobalSecondaryIndexUpdate?].self, forKey: .globalSecondaryIndexUpdates)
        var globalSecondaryIndexUpdatesDecoded0:[DynamoDbClientTypes.GlobalSecondaryIndexUpdate]? = nil
        if let globalSecondaryIndexUpdatesContainer = globalSecondaryIndexUpdatesContainer {
            globalSecondaryIndexUpdatesDecoded0 = [DynamoDbClientTypes.GlobalSecondaryIndexUpdate]()
            for structure0 in globalSecondaryIndexUpdatesContainer {
                if let structure0 = structure0 {
                    globalSecondaryIndexUpdatesDecoded0?.append(structure0)
                }
            }
        }
        globalSecondaryIndexUpdates = globalSecondaryIndexUpdatesDecoded0
        let streamSpecificationDecoded = try containerValues.decodeIfPresent(DynamoDbClientTypes.StreamSpecification.self, forKey: .streamSpecification)
        streamSpecification = streamSpecificationDecoded
        let sSESpecificationDecoded = try containerValues.decodeIfPresent(DynamoDbClientTypes.SSESpecification.self, forKey: .sSESpecification)
        sSESpecification = sSESpecificationDecoded
        let replicaUpdatesContainer = try containerValues.decodeIfPresent([DynamoDbClientTypes.ReplicationGroupUpdate?].self, forKey: .replicaUpdates)
        var replicaUpdatesDecoded0:[DynamoDbClientTypes.ReplicationGroupUpdate]? = nil
        if let replicaUpdatesContainer = replicaUpdatesContainer {
            replicaUpdatesDecoded0 = [DynamoDbClientTypes.ReplicationGroupUpdate]()
            for structure0 in replicaUpdatesContainer {
                if let structure0 = structure0 {
                    replicaUpdatesDecoded0?.append(structure0)
                }
            }
        }
        replicaUpdates = replicaUpdatesDecoded0
        let tableClassDecoded = try containerValues.decodeIfPresent(DynamoDbClientTypes.TableClass.self, forKey: .tableClass)
        tableClass = tableClassDecoded
    }
}
