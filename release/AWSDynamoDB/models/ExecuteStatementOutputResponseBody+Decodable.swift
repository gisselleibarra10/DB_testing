// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ExecuteStatementOutputResponseBody: Swift.Equatable {
    let items: [[Swift.String:DynamoDbClientTypes.AttributeValue]]?
    let nextToken: Swift.String?
    let consumedCapacity: DynamoDbClientTypes.ConsumedCapacity?
    let lastEvaluatedKey: [Swift.String:DynamoDbClientTypes.AttributeValue]?
}

extension ExecuteStatementOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case consumedCapacity = "ConsumedCapacity"
        case items = "Items"
        case lastEvaluatedKey = "LastEvaluatedKey"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let itemsContainer = try containerValues.decodeIfPresent([[Swift.String: DynamoDbClientTypes.AttributeValue?]?].self, forKey: .items)
        var itemsDecoded0:[[Swift.String:DynamoDbClientTypes.AttributeValue]]? = nil
        if let itemsContainer = itemsContainer {
            itemsDecoded0 = [[Swift.String:DynamoDbClientTypes.AttributeValue]]()
            for map0 in itemsContainer {
                var itemsContainerDecoded0: [Swift.String: DynamoDbClientTypes.AttributeValue]? = nil
                if let map0 = map0 {
                    itemsContainerDecoded0 = [Swift.String: DynamoDbClientTypes.AttributeValue]()
                    for (key1, attributevalue1) in map0 {
                        if let attributevalue1 = attributevalue1 {
                            itemsContainerDecoded0?[key1] = attributevalue1
                        }
                    }
                }
                if let itemsContainerDecoded0 = itemsContainerDecoded0 {
                    itemsDecoded0?.append(itemsContainerDecoded0)
                }
            }
        }
        items = itemsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let consumedCapacityDecoded = try containerValues.decodeIfPresent(DynamoDbClientTypes.ConsumedCapacity.self, forKey: .consumedCapacity)
        consumedCapacity = consumedCapacityDecoded
        let lastEvaluatedKeyContainer = try containerValues.decodeIfPresent([Swift.String: DynamoDbClientTypes.AttributeValue?].self, forKey: .lastEvaluatedKey)
        var lastEvaluatedKeyDecoded0: [Swift.String:DynamoDbClientTypes.AttributeValue]? = nil
        if let lastEvaluatedKeyContainer = lastEvaluatedKeyContainer {
            lastEvaluatedKeyDecoded0 = [Swift.String:DynamoDbClientTypes.AttributeValue]()
            for (key0, attributevalue0) in lastEvaluatedKeyContainer {
                if let attributevalue0 = attributevalue0 {
                    lastEvaluatedKeyDecoded0?[key0] = attributevalue0
                }
            }
        }
        lastEvaluatedKey = lastEvaluatedKeyDecoded0
    }
}
