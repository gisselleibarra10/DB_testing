// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension DynamoDbClientTypes.Put: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case conditionExpression = "ConditionExpression"
        case expressionAttributeNames = "ExpressionAttributeNames"
        case expressionAttributeValues = "ExpressionAttributeValues"
        case item = "Item"
        case returnValuesOnConditionCheckFailure = "ReturnValuesOnConditionCheckFailure"
        case tableName = "TableName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let conditionExpression = self.conditionExpression {
            try encodeContainer.encode(conditionExpression, forKey: .conditionExpression)
        }
        if let expressionAttributeNames = expressionAttributeNames {
            var expressionAttributeNamesContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .expressionAttributeNames)
            for (dictKey0, expressionattributenamemap0) in expressionAttributeNames {
                try expressionAttributeNamesContainer.encode(expressionattributenamemap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let expressionAttributeValues = expressionAttributeValues {
            var expressionAttributeValuesContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .expressionAttributeValues)
            for (dictKey0, expressionattributevaluemap0) in expressionAttributeValues {
                try expressionAttributeValuesContainer.encode(expressionattributevaluemap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let item = item {
            var itemContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .item)
            for (dictKey0, putiteminputattributemap0) in item {
                try itemContainer.encode(putiteminputattributemap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let returnValuesOnConditionCheckFailure = self.returnValuesOnConditionCheckFailure {
            try encodeContainer.encode(returnValuesOnConditionCheckFailure.rawValue, forKey: .returnValuesOnConditionCheckFailure)
        }
        if let tableName = self.tableName {
            try encodeContainer.encode(tableName, forKey: .tableName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let itemContainer = try containerValues.decodeIfPresent([Swift.String: DynamoDbClientTypes.AttributeValue?].self, forKey: .item)
        var itemDecoded0: [Swift.String:DynamoDbClientTypes.AttributeValue]? = nil
        if let itemContainer = itemContainer {
            itemDecoded0 = [Swift.String:DynamoDbClientTypes.AttributeValue]()
            for (key0, attributevalue0) in itemContainer {
                if let attributevalue0 = attributevalue0 {
                    itemDecoded0?[key0] = attributevalue0
                }
            }
        }
        item = itemDecoded0
        let tableNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tableName)
        tableName = tableNameDecoded
        let conditionExpressionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .conditionExpression)
        conditionExpression = conditionExpressionDecoded
        let expressionAttributeNamesContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .expressionAttributeNames)
        var expressionAttributeNamesDecoded0: [Swift.String:Swift.String]? = nil
        if let expressionAttributeNamesContainer = expressionAttributeNamesContainer {
            expressionAttributeNamesDecoded0 = [Swift.String:Swift.String]()
            for (key0, attributename0) in expressionAttributeNamesContainer {
                if let attributename0 = attributename0 {
                    expressionAttributeNamesDecoded0?[key0] = attributename0
                }
            }
        }
        expressionAttributeNames = expressionAttributeNamesDecoded0
        let expressionAttributeValuesContainer = try containerValues.decodeIfPresent([Swift.String: DynamoDbClientTypes.AttributeValue?].self, forKey: .expressionAttributeValues)
        var expressionAttributeValuesDecoded0: [Swift.String:DynamoDbClientTypes.AttributeValue]? = nil
        if let expressionAttributeValuesContainer = expressionAttributeValuesContainer {
            expressionAttributeValuesDecoded0 = [Swift.String:DynamoDbClientTypes.AttributeValue]()
            for (key0, attributevalue0) in expressionAttributeValuesContainer {
                if let attributevalue0 = attributevalue0 {
                    expressionAttributeValuesDecoded0?[key0] = attributevalue0
                }
            }
        }
        expressionAttributeValues = expressionAttributeValuesDecoded0
        let returnValuesOnConditionCheckFailureDecoded = try containerValues.decodeIfPresent(DynamoDbClientTypes.ReturnValuesOnConditionCheckFailure.self, forKey: .returnValuesOnConditionCheckFailure)
        returnValuesOnConditionCheckFailure = returnValuesOnConditionCheckFailureDecoded
    }
}
