// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ExecuteTransactionInputBody: Swift.Equatable {
    let transactStatements: [DynamoDbClientTypes.ParameterizedStatement]?
    let clientRequestToken: Swift.String?
    let returnConsumedCapacity: DynamoDbClientTypes.ReturnConsumedCapacity?
}

extension ExecuteTransactionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientRequestToken = "ClientRequestToken"
        case returnConsumedCapacity = "ReturnConsumedCapacity"
        case transactStatements = "TransactStatements"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let transactStatementsContainer = try containerValues.decodeIfPresent([DynamoDbClientTypes.ParameterizedStatement?].self, forKey: .transactStatements)
        var transactStatementsDecoded0:[DynamoDbClientTypes.ParameterizedStatement]? = nil
        if let transactStatementsContainer = transactStatementsContainer {
            transactStatementsDecoded0 = [DynamoDbClientTypes.ParameterizedStatement]()
            for structure0 in transactStatementsContainer {
                if let structure0 = structure0 {
                    transactStatementsDecoded0?.append(structure0)
                }
            }
        }
        transactStatements = transactStatementsDecoded0
        let clientRequestTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientRequestToken)
        clientRequestToken = clientRequestTokenDecoded
        let returnConsumedCapacityDecoded = try containerValues.decodeIfPresent(DynamoDbClientTypes.ReturnConsumedCapacity.self, forKey: .returnConsumedCapacity)
        returnConsumedCapacity = returnConsumedCapacityDecoded
    }
}
