// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension DynamoDbClientTypes.Capacity: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case capacityUnits = "CapacityUnits"
        case readCapacityUnits = "ReadCapacityUnits"
        case writeCapacityUnits = "WriteCapacityUnits"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let capacityUnits = self.capacityUnits {
            try encodeContainer.encode(capacityUnits, forKey: .capacityUnits)
        }
        if let readCapacityUnits = self.readCapacityUnits {
            try encodeContainer.encode(readCapacityUnits, forKey: .readCapacityUnits)
        }
        if let writeCapacityUnits = self.writeCapacityUnits {
            try encodeContainer.encode(writeCapacityUnits, forKey: .writeCapacityUnits)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let readCapacityUnitsDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .readCapacityUnits)
        readCapacityUnits = readCapacityUnitsDecoded
        let writeCapacityUnitsDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .writeCapacityUnits)
        writeCapacityUnits = writeCapacityUnitsDecoded
        let capacityUnitsDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .capacityUnits)
        capacityUnits = capacityUnitsDecoded
    }
}
