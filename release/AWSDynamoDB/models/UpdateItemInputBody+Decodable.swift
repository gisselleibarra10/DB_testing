// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct UpdateItemInputBody: Swift.Equatable {
    let tableName: Swift.String?
    let key: [Swift.String:DynamoDbClientTypes.AttributeValue]?
    let attributeUpdates: [Swift.String:DynamoDbClientTypes.AttributeValueUpdate]?
    let expected: [Swift.String:DynamoDbClientTypes.ExpectedAttributeValue]?
    let conditionalOperator: DynamoDbClientTypes.ConditionalOperator?
    let returnValues: DynamoDbClientTypes.ReturnValue?
    let returnConsumedCapacity: DynamoDbClientTypes.ReturnConsumedCapacity?
    let returnItemCollectionMetrics: DynamoDbClientTypes.ReturnItemCollectionMetrics?
    let updateExpression: Swift.String?
    let conditionExpression: Swift.String?
    let expressionAttributeNames: [Swift.String:Swift.String]?
    let expressionAttributeValues: [Swift.String:DynamoDbClientTypes.AttributeValue]?
}

extension UpdateItemInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attributeUpdates = "AttributeUpdates"
        case conditionExpression = "ConditionExpression"
        case conditionalOperator = "ConditionalOperator"
        case expected = "Expected"
        case expressionAttributeNames = "ExpressionAttributeNames"
        case expressionAttributeValues = "ExpressionAttributeValues"
        case key = "Key"
        case returnConsumedCapacity = "ReturnConsumedCapacity"
        case returnItemCollectionMetrics = "ReturnItemCollectionMetrics"
        case returnValues = "ReturnValues"
        case tableName = "TableName"
        case updateExpression = "UpdateExpression"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tableNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tableName)
        tableName = tableNameDecoded
        let keyContainer = try containerValues.decodeIfPresent([Swift.String: DynamoDbClientTypes.AttributeValue?].self, forKey: .key)
        var keyDecoded0: [Swift.String:DynamoDbClientTypes.AttributeValue]? = nil
        if let keyContainer = keyContainer {
            keyDecoded0 = [Swift.String:DynamoDbClientTypes.AttributeValue]()
            for (key0, attributevalue0) in keyContainer {
                if let attributevalue0 = attributevalue0 {
                    keyDecoded0?[key0] = attributevalue0
                }
            }
        }
        key = keyDecoded0
        let attributeUpdatesContainer = try containerValues.decodeIfPresent([Swift.String: DynamoDbClientTypes.AttributeValueUpdate?].self, forKey: .attributeUpdates)
        var attributeUpdatesDecoded0: [Swift.String:DynamoDbClientTypes.AttributeValueUpdate]? = nil
        if let attributeUpdatesContainer = attributeUpdatesContainer {
            attributeUpdatesDecoded0 = [Swift.String:DynamoDbClientTypes.AttributeValueUpdate]()
            for (key0, attributevalueupdate0) in attributeUpdatesContainer {
                if let attributevalueupdate0 = attributevalueupdate0 {
                    attributeUpdatesDecoded0?[key0] = attributevalueupdate0
                }
            }
        }
        attributeUpdates = attributeUpdatesDecoded0
        let expectedContainer = try containerValues.decodeIfPresent([Swift.String: DynamoDbClientTypes.ExpectedAttributeValue?].self, forKey: .expected)
        var expectedDecoded0: [Swift.String:DynamoDbClientTypes.ExpectedAttributeValue]? = nil
        if let expectedContainer = expectedContainer {
            expectedDecoded0 = [Swift.String:DynamoDbClientTypes.ExpectedAttributeValue]()
            for (key0, expectedattributevalue0) in expectedContainer {
                if let expectedattributevalue0 = expectedattributevalue0 {
                    expectedDecoded0?[key0] = expectedattributevalue0
                }
            }
        }
        expected = expectedDecoded0
        let conditionalOperatorDecoded = try containerValues.decodeIfPresent(DynamoDbClientTypes.ConditionalOperator.self, forKey: .conditionalOperator)
        conditionalOperator = conditionalOperatorDecoded
        let returnValuesDecoded = try containerValues.decodeIfPresent(DynamoDbClientTypes.ReturnValue.self, forKey: .returnValues)
        returnValues = returnValuesDecoded
        let returnConsumedCapacityDecoded = try containerValues.decodeIfPresent(DynamoDbClientTypes.ReturnConsumedCapacity.self, forKey: .returnConsumedCapacity)
        returnConsumedCapacity = returnConsumedCapacityDecoded
        let returnItemCollectionMetricsDecoded = try containerValues.decodeIfPresent(DynamoDbClientTypes.ReturnItemCollectionMetrics.self, forKey: .returnItemCollectionMetrics)
        returnItemCollectionMetrics = returnItemCollectionMetricsDecoded
        let updateExpressionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .updateExpression)
        updateExpression = updateExpressionDecoded
        let conditionExpressionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .conditionExpression)
        conditionExpression = conditionExpressionDecoded
        let expressionAttributeNamesContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .expressionAttributeNames)
        var expressionAttributeNamesDecoded0: [Swift.String:Swift.String]? = nil
        if let expressionAttributeNamesContainer = expressionAttributeNamesContainer {
            expressionAttributeNamesDecoded0 = [Swift.String:Swift.String]()
            for (key0, attributename0) in expressionAttributeNamesContainer {
                if let attributename0 = attributename0 {
                    expressionAttributeNamesDecoded0?[key0] = attributename0
                }
            }
        }
        expressionAttributeNames = expressionAttributeNamesDecoded0
        let expressionAttributeValuesContainer = try containerValues.decodeIfPresent([Swift.String: DynamoDbClientTypes.AttributeValue?].self, forKey: .expressionAttributeValues)
        var expressionAttributeValuesDecoded0: [Swift.String:DynamoDbClientTypes.AttributeValue]? = nil
        if let expressionAttributeValuesContainer = expressionAttributeValuesContainer {
            expressionAttributeValuesDecoded0 = [Swift.String:DynamoDbClientTypes.AttributeValue]()
            for (key0, attributevalue0) in expressionAttributeValuesContainer {
                if let attributevalue0 = attributevalue0 {
                    expressionAttributeValuesDecoded0?[key0] = attributevalue0
                }
            }
        }
        expressionAttributeValues = expressionAttributeValuesDecoded0
    }
}
