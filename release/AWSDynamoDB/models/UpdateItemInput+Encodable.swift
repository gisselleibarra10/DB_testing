// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension UpdateItemInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attributeUpdates = "AttributeUpdates"
        case conditionExpression = "ConditionExpression"
        case conditionalOperator = "ConditionalOperator"
        case expected = "Expected"
        case expressionAttributeNames = "ExpressionAttributeNames"
        case expressionAttributeValues = "ExpressionAttributeValues"
        case key = "Key"
        case returnConsumedCapacity = "ReturnConsumedCapacity"
        case returnItemCollectionMetrics = "ReturnItemCollectionMetrics"
        case returnValues = "ReturnValues"
        case tableName = "TableName"
        case updateExpression = "UpdateExpression"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let attributeUpdates = attributeUpdates {
            var attributeUpdatesContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .attributeUpdates)
            for (dictKey0, attributeupdates0) in attributeUpdates {
                try attributeUpdatesContainer.encode(attributeupdates0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let conditionExpression = self.conditionExpression {
            try encodeContainer.encode(conditionExpression, forKey: .conditionExpression)
        }
        if let conditionalOperator = self.conditionalOperator {
            try encodeContainer.encode(conditionalOperator.rawValue, forKey: .conditionalOperator)
        }
        if let expected = expected {
            var expectedContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .expected)
            for (dictKey0, expectedattributemap0) in expected {
                try expectedContainer.encode(expectedattributemap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let expressionAttributeNames = expressionAttributeNames {
            var expressionAttributeNamesContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .expressionAttributeNames)
            for (dictKey0, expressionattributenamemap0) in expressionAttributeNames {
                try expressionAttributeNamesContainer.encode(expressionattributenamemap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let expressionAttributeValues = expressionAttributeValues {
            var expressionAttributeValuesContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .expressionAttributeValues)
            for (dictKey0, expressionattributevaluemap0) in expressionAttributeValues {
                try expressionAttributeValuesContainer.encode(expressionattributevaluemap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let key = key {
            var keyContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .key)
            for (dictKey0, key0) in key {
                try keyContainer.encode(key0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let returnConsumedCapacity = self.returnConsumedCapacity {
            try encodeContainer.encode(returnConsumedCapacity.rawValue, forKey: .returnConsumedCapacity)
        }
        if let returnItemCollectionMetrics = self.returnItemCollectionMetrics {
            try encodeContainer.encode(returnItemCollectionMetrics.rawValue, forKey: .returnItemCollectionMetrics)
        }
        if let returnValues = self.returnValues {
            try encodeContainer.encode(returnValues.rawValue, forKey: .returnValues)
        }
        if let tableName = self.tableName {
            try encodeContainer.encode(tableName, forKey: .tableName)
        }
        if let updateExpression = self.updateExpression {
            try encodeContainer.encode(updateExpression, forKey: .updateExpression)
        }
    }
}
