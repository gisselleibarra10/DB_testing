// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ComputeOptimizerClientTypes.RecommendationSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountId
        case currentPerformanceRiskRatings
        case recommendationResourceType
        case savingsOpportunity
        case summaries
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accountId = self.accountId {
            try encodeContainer.encode(accountId, forKey: .accountId)
        }
        if let currentPerformanceRiskRatings = self.currentPerformanceRiskRatings {
            try encodeContainer.encode(currentPerformanceRiskRatings, forKey: .currentPerformanceRiskRatings)
        }
        if let recommendationResourceType = self.recommendationResourceType {
            try encodeContainer.encode(recommendationResourceType.rawValue, forKey: .recommendationResourceType)
        }
        if let savingsOpportunity = self.savingsOpportunity {
            try encodeContainer.encode(savingsOpportunity, forKey: .savingsOpportunity)
        }
        if let summaries = summaries {
            var summariesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .summaries)
            for summaries0 in summaries {
                try summariesContainer.encode(summaries0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let summariesContainer = try containerValues.decodeIfPresent([ComputeOptimizerClientTypes.Summary?].self, forKey: .summaries)
        var summariesDecoded0:[ComputeOptimizerClientTypes.Summary]? = nil
        if let summariesContainer = summariesContainer {
            summariesDecoded0 = [ComputeOptimizerClientTypes.Summary]()
            for structure0 in summariesContainer {
                if let structure0 = structure0 {
                    summariesDecoded0?.append(structure0)
                }
            }
        }
        summaries = summariesDecoded0
        let recommendationResourceTypeDecoded = try containerValues.decodeIfPresent(ComputeOptimizerClientTypes.RecommendationSourceType.self, forKey: .recommendationResourceType)
        recommendationResourceType = recommendationResourceTypeDecoded
        let accountIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .accountId)
        accountId = accountIdDecoded
        let savingsOpportunityDecoded = try containerValues.decodeIfPresent(ComputeOptimizerClientTypes.SavingsOpportunity.self, forKey: .savingsOpportunity)
        savingsOpportunity = savingsOpportunityDecoded
        let currentPerformanceRiskRatingsDecoded = try containerValues.decodeIfPresent(ComputeOptimizerClientTypes.CurrentPerformanceRiskRatings.self, forKey: .currentPerformanceRiskRatings)
        currentPerformanceRiskRatings = currentPerformanceRiskRatingsDecoded
    }
}
