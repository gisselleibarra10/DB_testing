// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetEBSVolumeRecommendationsInputBody: Swift.Equatable {
    let volumeArns: [Swift.String]?
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
    let filters: [ComputeOptimizerClientTypes.EBSFilter]?
    let accountIds: [Swift.String]?
}

extension GetEBSVolumeRecommendationsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountIds
        case filters
        case maxResults
        case nextToken
        case volumeArns
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let volumeArnsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .volumeArns)
        var volumeArnsDecoded0:[Swift.String]? = nil
        if let volumeArnsContainer = volumeArnsContainer {
            volumeArnsDecoded0 = [Swift.String]()
            for string0 in volumeArnsContainer {
                if let string0 = string0 {
                    volumeArnsDecoded0?.append(string0)
                }
            }
        }
        volumeArns = volumeArnsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let filtersContainer = try containerValues.decodeIfPresent([ComputeOptimizerClientTypes.EBSFilter?].self, forKey: .filters)
        var filtersDecoded0:[ComputeOptimizerClientTypes.EBSFilter]? = nil
        if let filtersContainer = filtersContainer {
            filtersDecoded0 = [ComputeOptimizerClientTypes.EBSFilter]()
            for structure0 in filtersContainer {
                if let structure0 = structure0 {
                    filtersDecoded0?.append(structure0)
                }
            }
        }
        filters = filtersDecoded0
        let accountIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .accountIds)
        var accountIdsDecoded0:[Swift.String]? = nil
        if let accountIdsContainer = accountIdsContainer {
            accountIdsDecoded0 = [Swift.String]()
            for string0 in accountIdsContainer {
                if let string0 = string0 {
                    accountIdsDecoded0?.append(string0)
                }
            }
        }
        accountIds = accountIdsDecoded0
    }
}
