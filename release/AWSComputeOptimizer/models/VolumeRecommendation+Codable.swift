// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ComputeOptimizerClientTypes.VolumeRecommendation: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountId
        case currentConfiguration
        case currentPerformanceRisk
        case finding
        case lastRefreshTimestamp
        case lookBackPeriodInDays
        case utilizationMetrics
        case volumeArn
        case volumeRecommendationOptions
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accountId = self.accountId {
            try encodeContainer.encode(accountId, forKey: .accountId)
        }
        if let currentConfiguration = self.currentConfiguration {
            try encodeContainer.encode(currentConfiguration, forKey: .currentConfiguration)
        }
        if let currentPerformanceRisk = self.currentPerformanceRisk {
            try encodeContainer.encode(currentPerformanceRisk.rawValue, forKey: .currentPerformanceRisk)
        }
        if let finding = self.finding {
            try encodeContainer.encode(finding.rawValue, forKey: .finding)
        }
        if let lastRefreshTimestamp = self.lastRefreshTimestamp {
            try encodeContainer.encode(lastRefreshTimestamp.timeIntervalSince1970, forKey: .lastRefreshTimestamp)
        }
        if lookBackPeriodInDays != 0.0 {
            try encodeContainer.encode(lookBackPeriodInDays, forKey: .lookBackPeriodInDays)
        }
        if let utilizationMetrics = utilizationMetrics {
            var utilizationMetricsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .utilizationMetrics)
            for ebsutilizationmetrics0 in utilizationMetrics {
                try utilizationMetricsContainer.encode(ebsutilizationmetrics0)
            }
        }
        if let volumeArn = self.volumeArn {
            try encodeContainer.encode(volumeArn, forKey: .volumeArn)
        }
        if let volumeRecommendationOptions = volumeRecommendationOptions {
            var volumeRecommendationOptionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .volumeRecommendationOptions)
            for volumerecommendationoptions0 in volumeRecommendationOptions {
                try volumeRecommendationOptionsContainer.encode(volumerecommendationoptions0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let volumeArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .volumeArn)
        volumeArn = volumeArnDecoded
        let accountIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .accountId)
        accountId = accountIdDecoded
        let currentConfigurationDecoded = try containerValues.decodeIfPresent(ComputeOptimizerClientTypes.VolumeConfiguration.self, forKey: .currentConfiguration)
        currentConfiguration = currentConfigurationDecoded
        let findingDecoded = try containerValues.decodeIfPresent(ComputeOptimizerClientTypes.EBSFinding.self, forKey: .finding)
        finding = findingDecoded
        let utilizationMetricsContainer = try containerValues.decodeIfPresent([ComputeOptimizerClientTypes.EBSUtilizationMetric?].self, forKey: .utilizationMetrics)
        var utilizationMetricsDecoded0:[ComputeOptimizerClientTypes.EBSUtilizationMetric]? = nil
        if let utilizationMetricsContainer = utilizationMetricsContainer {
            utilizationMetricsDecoded0 = [ComputeOptimizerClientTypes.EBSUtilizationMetric]()
            for structure0 in utilizationMetricsContainer {
                if let structure0 = structure0 {
                    utilizationMetricsDecoded0?.append(structure0)
                }
            }
        }
        utilizationMetrics = utilizationMetricsDecoded0
        let lookBackPeriodInDaysDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .lookBackPeriodInDays) ?? 0.0
        lookBackPeriodInDays = lookBackPeriodInDaysDecoded
        let volumeRecommendationOptionsContainer = try containerValues.decodeIfPresent([ComputeOptimizerClientTypes.VolumeRecommendationOption?].self, forKey: .volumeRecommendationOptions)
        var volumeRecommendationOptionsDecoded0:[ComputeOptimizerClientTypes.VolumeRecommendationOption]? = nil
        if let volumeRecommendationOptionsContainer = volumeRecommendationOptionsContainer {
            volumeRecommendationOptionsDecoded0 = [ComputeOptimizerClientTypes.VolumeRecommendationOption]()
            for structure0 in volumeRecommendationOptionsContainer {
                if let structure0 = structure0 {
                    volumeRecommendationOptionsDecoded0?.append(structure0)
                }
            }
        }
        volumeRecommendationOptions = volumeRecommendationOptionsDecoded0
        let lastRefreshTimestampDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastRefreshTimestamp)
        lastRefreshTimestamp = lastRefreshTimestampDecoded
        let currentPerformanceRiskDecoded = try containerValues.decodeIfPresent(ComputeOptimizerClientTypes.CurrentPerformanceRisk.self, forKey: .currentPerformanceRisk)
        currentPerformanceRisk = currentPerformanceRiskDecoded
    }
}
