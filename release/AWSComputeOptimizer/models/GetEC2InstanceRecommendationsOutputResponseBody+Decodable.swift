// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetEC2InstanceRecommendationsOutputResponseBody: Swift.Equatable {
    let nextToken: Swift.String?
    let instanceRecommendations: [ComputeOptimizerClientTypes.InstanceRecommendation]?
    let errors: [ComputeOptimizerClientTypes.GetRecommendationError]?
}

extension GetEC2InstanceRecommendationsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case errors
        case instanceRecommendations
        case nextToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let instanceRecommendationsContainer = try containerValues.decodeIfPresent([ComputeOptimizerClientTypes.InstanceRecommendation?].self, forKey: .instanceRecommendations)
        var instanceRecommendationsDecoded0:[ComputeOptimizerClientTypes.InstanceRecommendation]? = nil
        if let instanceRecommendationsContainer = instanceRecommendationsContainer {
            instanceRecommendationsDecoded0 = [ComputeOptimizerClientTypes.InstanceRecommendation]()
            for structure0 in instanceRecommendationsContainer {
                if let structure0 = structure0 {
                    instanceRecommendationsDecoded0?.append(structure0)
                }
            }
        }
        instanceRecommendations = instanceRecommendationsDecoded0
        let errorsContainer = try containerValues.decodeIfPresent([ComputeOptimizerClientTypes.GetRecommendationError?].self, forKey: .errors)
        var errorsDecoded0:[ComputeOptimizerClientTypes.GetRecommendationError]? = nil
        if let errorsContainer = errorsContainer {
            errorsDecoded0 = [ComputeOptimizerClientTypes.GetRecommendationError]()
            for structure0 in errorsContainer {
                if let structure0 = structure0 {
                    errorsDecoded0?.append(structure0)
                }
            }
        }
        errors = errorsDecoded0
    }
}
