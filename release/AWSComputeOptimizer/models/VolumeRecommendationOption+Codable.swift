// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ComputeOptimizerClientTypes.VolumeRecommendationOption: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configuration
        case performanceRisk
        case rank
        case savingsOpportunity
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let configuration = self.configuration {
            try encodeContainer.encode(configuration, forKey: .configuration)
        }
        if performanceRisk != 0.0 {
            try encodeContainer.encode(performanceRisk, forKey: .performanceRisk)
        }
        if rank != 0 {
            try encodeContainer.encode(rank, forKey: .rank)
        }
        if let savingsOpportunity = self.savingsOpportunity {
            try encodeContainer.encode(savingsOpportunity, forKey: .savingsOpportunity)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let configurationDecoded = try containerValues.decodeIfPresent(ComputeOptimizerClientTypes.VolumeConfiguration.self, forKey: .configuration)
        configuration = configurationDecoded
        let performanceRiskDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .performanceRisk) ?? 0.0
        performanceRisk = performanceRiskDecoded
        let rankDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .rank) ?? 0
        rank = rankDecoded
        let savingsOpportunityDecoded = try containerValues.decodeIfPresent(ComputeOptimizerClientTypes.SavingsOpportunity.self, forKey: .savingsOpportunity)
        savingsOpportunity = savingsOpportunityDecoded
    }
}
