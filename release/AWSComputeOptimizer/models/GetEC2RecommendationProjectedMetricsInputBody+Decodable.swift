// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetEC2RecommendationProjectedMetricsInputBody: Swift.Equatable {
    let instanceArn: Swift.String?
    let stat: ComputeOptimizerClientTypes.MetricStatistic?
    let period: Swift.Int
    let startTime: ClientRuntime.Date?
    let endTime: ClientRuntime.Date?
    let recommendationPreferences: ComputeOptimizerClientTypes.RecommendationPreferences?
}

extension GetEC2RecommendationProjectedMetricsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case endTime
        case instanceArn
        case period
        case recommendationPreferences
        case startTime
        case stat
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instanceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceArn)
        instanceArn = instanceArnDecoded
        let statDecoded = try containerValues.decodeIfPresent(ComputeOptimizerClientTypes.MetricStatistic.self, forKey: .stat)
        stat = statDecoded
        let periodDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .period) ?? 0
        period = periodDecoded
        let startTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .startTime)
        startTime = startTimeDecoded
        let endTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .endTime)
        endTime = endTimeDecoded
        let recommendationPreferencesDecoded = try containerValues.decodeIfPresent(ComputeOptimizerClientTypes.RecommendationPreferences.self, forKey: .recommendationPreferences)
        recommendationPreferences = recommendationPreferencesDecoded
    }
}
