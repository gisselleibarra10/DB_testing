// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ExportAutoScalingGroupRecommendationsInputBody: Swift.Equatable {
    let accountIds: [Swift.String]?
    let filters: [ComputeOptimizerClientTypes.Filter]?
    let fieldsToExport: [ComputeOptimizerClientTypes.ExportableAutoScalingGroupField]?
    let s3DestinationConfig: ComputeOptimizerClientTypes.S3DestinationConfig?
    let fileFormat: ComputeOptimizerClientTypes.FileFormat?
    let includeMemberAccounts: Swift.Bool
    let recommendationPreferences: ComputeOptimizerClientTypes.RecommendationPreferences?
}

extension ExportAutoScalingGroupRecommendationsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountIds
        case fieldsToExport
        case fileFormat
        case filters
        case includeMemberAccounts
        case recommendationPreferences
        case s3DestinationConfig
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let accountIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .accountIds)
        var accountIdsDecoded0:[Swift.String]? = nil
        if let accountIdsContainer = accountIdsContainer {
            accountIdsDecoded0 = [Swift.String]()
            for string0 in accountIdsContainer {
                if let string0 = string0 {
                    accountIdsDecoded0?.append(string0)
                }
            }
        }
        accountIds = accountIdsDecoded0
        let filtersContainer = try containerValues.decodeIfPresent([ComputeOptimizerClientTypes.Filter?].self, forKey: .filters)
        var filtersDecoded0:[ComputeOptimizerClientTypes.Filter]? = nil
        if let filtersContainer = filtersContainer {
            filtersDecoded0 = [ComputeOptimizerClientTypes.Filter]()
            for structure0 in filtersContainer {
                if let structure0 = structure0 {
                    filtersDecoded0?.append(structure0)
                }
            }
        }
        filters = filtersDecoded0
        let fieldsToExportContainer = try containerValues.decodeIfPresent([ComputeOptimizerClientTypes.ExportableAutoScalingGroupField?].self, forKey: .fieldsToExport)
        var fieldsToExportDecoded0:[ComputeOptimizerClientTypes.ExportableAutoScalingGroupField]? = nil
        if let fieldsToExportContainer = fieldsToExportContainer {
            fieldsToExportDecoded0 = [ComputeOptimizerClientTypes.ExportableAutoScalingGroupField]()
            for string0 in fieldsToExportContainer {
                if let string0 = string0 {
                    fieldsToExportDecoded0?.append(string0)
                }
            }
        }
        fieldsToExport = fieldsToExportDecoded0
        let s3DestinationConfigDecoded = try containerValues.decodeIfPresent(ComputeOptimizerClientTypes.S3DestinationConfig.self, forKey: .s3DestinationConfig)
        s3DestinationConfig = s3DestinationConfigDecoded
        let fileFormatDecoded = try containerValues.decodeIfPresent(ComputeOptimizerClientTypes.FileFormat.self, forKey: .fileFormat)
        fileFormat = fileFormatDecoded
        let includeMemberAccountsDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .includeMemberAccounts) ?? false
        includeMemberAccounts = includeMemberAccountsDecoded
        let recommendationPreferencesDecoded = try containerValues.decodeIfPresent(ComputeOptimizerClientTypes.RecommendationPreferences.self, forKey: .recommendationPreferences)
        recommendationPreferences = recommendationPreferencesDecoded
    }
}
