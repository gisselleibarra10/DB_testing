// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ComputeOptimizerClientTypes {
    /// Describes an Lambda function recommendation.
    public struct LambdaFunctionRecommendation: Swift.Equatable {
        /// The Amazon Web Services account ID of the function.
        public var accountId: Swift.String?
        /// The amount of memory, in MB, that's allocated to the current function.
        public var currentMemorySize: Swift.Int
        /// The risk of the current Lambda function not meeting the performance needs of its workloads. The higher the risk, the more likely the current Lambda function requires more memory.
        public var currentPerformanceRisk: ComputeOptimizerClientTypes.CurrentPerformanceRisk?
        /// The finding classification of the function. Findings for functions include:
        ///
        /// * Optimized — The function is correctly provisioned to run your workload based on its current configuration and its utilization history. This finding classification does not include finding reason codes.
        ///
        /// * NotOptimized — The function is performing at a higher level (over-provisioned) or at a lower level (under-provisioned) than required for your workload because its current configuration is not optimal. Over-provisioned resources might lead to unnecessary infrastructure cost, and under-provisioned resources might lead to poor application performance. This finding classification can include the MemoryUnderprovisioned and MemoryUnderprovisioned finding reason codes.
        ///
        /// * Unavailable — Compute Optimizer was unable to generate a recommendation for the function. This could be because the function has not accumulated sufficient metric data, or the function does not qualify for a recommendation. This finding classification can include the InsufficientData and Inconclusive finding reason codes. Functions with a finding of unavailable are not returned unless you specify the filter parameter with a value of Unavailable in your GetLambdaFunctionRecommendations request.
        public var finding: ComputeOptimizerClientTypes.LambdaFunctionRecommendationFinding?
        /// The reason for the finding classification of the function. Functions that have a finding classification of Optimized don't have a finding reason code. Finding reason codes for functions include:
        ///
        /// * MemoryOverprovisioned — The function is over-provisioned when its memory configuration can be sized down while still meeting the performance requirements of your workload. An over-provisioned function might lead to unnecessary infrastructure cost. This finding reason code is part of the NotOptimized finding classification.
        ///
        /// * MemoryUnderprovisioned — The function is under-provisioned when its memory configuration doesn't meet the performance requirements of the workload. An under-provisioned function might lead to poor application performance. This finding reason code is part of the NotOptimized finding classification.
        ///
        /// * InsufficientData — The function does not have sufficient metric data for Compute Optimizer to generate a recommendation. For more information, see the [Supported resources and requirements](https://docs.aws.amazon.com/compute-optimizer/latest/ug/requirements.html) in the Compute Optimizer User Guide. This finding reason code is part of the Unavailable finding classification.
        ///
        /// * Inconclusive — The function does not qualify for a recommendation because Compute Optimizer cannot generate a recommendation with a high degree of confidence. This finding reason code is part of the Unavailable finding classification.
        public var findingReasonCodes: [ComputeOptimizerClientTypes.LambdaFunctionRecommendationFindingReasonCode]?
        /// The Amazon Resource Name (ARN) of the current function.
        public var functionArn: Swift.String?
        /// The version number of the current function.
        public var functionVersion: Swift.String?
        /// The timestamp of when the function recommendation was last generated.
        public var lastRefreshTimestamp: ClientRuntime.Date?
        /// The number of days for which utilization metrics were analyzed for the function.
        public var lookbackPeriodInDays: Swift.Double
        /// An array of objects that describe the memory configuration recommendation options for the function.
        public var memorySizeRecommendationOptions: [ComputeOptimizerClientTypes.LambdaFunctionMemoryRecommendationOption]?
        /// The number of times your function code was applied during the look-back period.
        public var numberOfInvocations: Swift.Int
        /// An array of objects that describe the utilization metrics of the function.
        public var utilizationMetrics: [ComputeOptimizerClientTypes.LambdaFunctionUtilizationMetric]?

        public init (
            accountId: Swift.String? = nil,
            currentMemorySize: Swift.Int = 0,
            currentPerformanceRisk: ComputeOptimizerClientTypes.CurrentPerformanceRisk? = nil,
            finding: ComputeOptimizerClientTypes.LambdaFunctionRecommendationFinding? = nil,
            findingReasonCodes: [ComputeOptimizerClientTypes.LambdaFunctionRecommendationFindingReasonCode]? = nil,
            functionArn: Swift.String? = nil,
            functionVersion: Swift.String? = nil,
            lastRefreshTimestamp: ClientRuntime.Date? = nil,
            lookbackPeriodInDays: Swift.Double = 0.0,
            memorySizeRecommendationOptions: [ComputeOptimizerClientTypes.LambdaFunctionMemoryRecommendationOption]? = nil,
            numberOfInvocations: Swift.Int = 0,
            utilizationMetrics: [ComputeOptimizerClientTypes.LambdaFunctionUtilizationMetric]? = nil
        )
        {
            self.accountId = accountId
            self.currentMemorySize = currentMemorySize
            self.currentPerformanceRisk = currentPerformanceRisk
            self.finding = finding
            self.findingReasonCodes = findingReasonCodes
            self.functionArn = functionArn
            self.functionVersion = functionVersion
            self.lastRefreshTimestamp = lastRefreshTimestamp
            self.lookbackPeriodInDays = lookbackPeriodInDays
            self.memorySizeRecommendationOptions = memorySizeRecommendationOptions
            self.numberOfInvocations = numberOfInvocations
            self.utilizationMetrics = utilizationMetrics
        }
    }

}
