// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ComputeOptimizerClientTypes.RecommendedOptionProjectedMetric: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case projectedMetrics
        case rank
        case recommendedInstanceType
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let projectedMetrics = projectedMetrics {
            var projectedMetricsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .projectedMetrics)
            for projectedmetrics0 in projectedMetrics {
                try projectedMetricsContainer.encode(projectedmetrics0)
            }
        }
        if rank != 0 {
            try encodeContainer.encode(rank, forKey: .rank)
        }
        if let recommendedInstanceType = self.recommendedInstanceType {
            try encodeContainer.encode(recommendedInstanceType, forKey: .recommendedInstanceType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let recommendedInstanceTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .recommendedInstanceType)
        recommendedInstanceType = recommendedInstanceTypeDecoded
        let rankDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .rank) ?? 0
        rank = rankDecoded
        let projectedMetricsContainer = try containerValues.decodeIfPresent([ComputeOptimizerClientTypes.ProjectedMetric?].self, forKey: .projectedMetrics)
        var projectedMetricsDecoded0:[ComputeOptimizerClientTypes.ProjectedMetric]? = nil
        if let projectedMetricsContainer = projectedMetricsContainer {
            projectedMetricsDecoded0 = [ComputeOptimizerClientTypes.ProjectedMetric]()
            for structure0 in projectedMetricsContainer {
                if let structure0 = structure0 {
                    projectedMetricsDecoded0?.append(structure0)
                }
            }
        }
        projectedMetrics = projectedMetricsDecoded0
    }
}
