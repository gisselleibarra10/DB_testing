// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension ComputeOptimizerClientTypes {
    public enum MetricName: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case cpu
        case diskReadBytesPerSecond
        case diskReadOpsPerSecond
        case diskWriteBytesPerSecond
        case diskWriteOpsPerSecond
        case ebsReadBytesPerSecond
        case ebsReadOpsPerSecond
        case ebsWriteBytesPerSecond
        case ebsWriteOpsPerSecond
        case memory
        case networkInBytesPerSecond
        case networkOutBytesPerSecond
        case networkPacketsInPerSecond
        case networkPacketsOutPerSecond
        case sdkUnknown(Swift.String)

        public static var allCases: [MetricName] {
            return [
                .cpu,
                .diskReadBytesPerSecond,
                .diskReadOpsPerSecond,
                .diskWriteBytesPerSecond,
                .diskWriteOpsPerSecond,
                .ebsReadBytesPerSecond,
                .ebsReadOpsPerSecond,
                .ebsWriteBytesPerSecond,
                .ebsWriteOpsPerSecond,
                .memory,
                .networkInBytesPerSecond,
                .networkOutBytesPerSecond,
                .networkPacketsInPerSecond,
                .networkPacketsOutPerSecond,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .cpu: return "Cpu"
            case .diskReadBytesPerSecond: return "DISK_READ_BYTES_PER_SECOND"
            case .diskReadOpsPerSecond: return "DISK_READ_OPS_PER_SECOND"
            case .diskWriteBytesPerSecond: return "DISK_WRITE_BYTES_PER_SECOND"
            case .diskWriteOpsPerSecond: return "DISK_WRITE_OPS_PER_SECOND"
            case .ebsReadBytesPerSecond: return "EBS_READ_BYTES_PER_SECOND"
            case .ebsReadOpsPerSecond: return "EBS_READ_OPS_PER_SECOND"
            case .ebsWriteBytesPerSecond: return "EBS_WRITE_BYTES_PER_SECOND"
            case .ebsWriteOpsPerSecond: return "EBS_WRITE_OPS_PER_SECOND"
            case .memory: return "Memory"
            case .networkInBytesPerSecond: return "NETWORK_IN_BYTES_PER_SECOND"
            case .networkOutBytesPerSecond: return "NETWORK_OUT_BYTES_PER_SECOND"
            case .networkPacketsInPerSecond: return "NETWORK_PACKETS_IN_PER_SECOND"
            case .networkPacketsOutPerSecond: return "NETWORK_PACKETS_OUT_PER_SECOND"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = MetricName(rawValue: rawValue) ?? MetricName.sdkUnknown(rawValue)
        }
    }
}
