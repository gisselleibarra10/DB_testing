// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ExportEC2InstanceRecommendationsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountIds
        case fieldsToExport
        case fileFormat
        case filters
        case includeMemberAccounts
        case recommendationPreferences
        case s3DestinationConfig
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accountIds = accountIds {
            var accountIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .accountIds)
            for accountids0 in accountIds {
                try accountIdsContainer.encode(accountids0)
            }
        }
        if let fieldsToExport = fieldsToExport {
            var fieldsToExportContainer = encodeContainer.nestedUnkeyedContainer(forKey: .fieldsToExport)
            for exportableinstancefields0 in fieldsToExport {
                try fieldsToExportContainer.encode(exportableinstancefields0.rawValue)
            }
        }
        if let fileFormat = self.fileFormat {
            try encodeContainer.encode(fileFormat.rawValue, forKey: .fileFormat)
        }
        if let filters = filters {
            var filtersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .filters)
            for filters0 in filters {
                try filtersContainer.encode(filters0)
            }
        }
        if includeMemberAccounts != false {
            try encodeContainer.encode(includeMemberAccounts, forKey: .includeMemberAccounts)
        }
        if let recommendationPreferences = self.recommendationPreferences {
            try encodeContainer.encode(recommendationPreferences, forKey: .recommendationPreferences)
        }
        if let s3DestinationConfig = self.s3DestinationConfig {
            try encodeContainer.encode(s3DestinationConfig, forKey: .s3DestinationConfig)
        }
    }
}
