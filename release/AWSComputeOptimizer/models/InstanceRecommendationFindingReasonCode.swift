// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension ComputeOptimizerClientTypes {
    public enum InstanceRecommendationFindingReasonCode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case cpuOverProvisioned
        case cpuUnderProvisioned
        case diskIopsOverProvisioned
        case diskIopsUnderProvisioned
        case diskThroughputOverProvisioned
        case diskThroughputUnderProvisioned
        case ebsIopsOverProvisioned
        case ebsIopsUnderProvisioned
        case ebsThroughputOverProvisioned
        case ebsThroughputUnderProvisioned
        case memoryOverProvisioned
        case memoryUnderProvisioned
        case networkBandwidthOverProvisioned
        case networkBandwidthUnderProvisioned
        case networkPpsOverProvisioned
        case networkPpsUnderProvisioned
        case sdkUnknown(Swift.String)

        public static var allCases: [InstanceRecommendationFindingReasonCode] {
            return [
                .cpuOverProvisioned,
                .cpuUnderProvisioned,
                .diskIopsOverProvisioned,
                .diskIopsUnderProvisioned,
                .diskThroughputOverProvisioned,
                .diskThroughputUnderProvisioned,
                .ebsIopsOverProvisioned,
                .ebsIopsUnderProvisioned,
                .ebsThroughputOverProvisioned,
                .ebsThroughputUnderProvisioned,
                .memoryOverProvisioned,
                .memoryUnderProvisioned,
                .networkBandwidthOverProvisioned,
                .networkBandwidthUnderProvisioned,
                .networkPpsOverProvisioned,
                .networkPpsUnderProvisioned,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .cpuOverProvisioned: return "CPUOverprovisioned"
            case .cpuUnderProvisioned: return "CPUUnderprovisioned"
            case .diskIopsOverProvisioned: return "DiskIOPSOverprovisioned"
            case .diskIopsUnderProvisioned: return "DiskIOPSUnderprovisioned"
            case .diskThroughputOverProvisioned: return "DiskThroughputOverprovisioned"
            case .diskThroughputUnderProvisioned: return "DiskThroughputUnderprovisioned"
            case .ebsIopsOverProvisioned: return "EBSIOPSOverprovisioned"
            case .ebsIopsUnderProvisioned: return "EBSIOPSUnderprovisioned"
            case .ebsThroughputOverProvisioned: return "EBSThroughputOverprovisioned"
            case .ebsThroughputUnderProvisioned: return "EBSThroughputUnderprovisioned"
            case .memoryOverProvisioned: return "MemoryOverprovisioned"
            case .memoryUnderProvisioned: return "MemoryUnderprovisioned"
            case .networkBandwidthOverProvisioned: return "NetworkBandwidthOverprovisioned"
            case .networkBandwidthUnderProvisioned: return "NetworkBandwidthUnderprovisioned"
            case .networkPpsOverProvisioned: return "NetworkPPSOverprovisioned"
            case .networkPpsUnderProvisioned: return "NetworkPPSUnderprovisioned"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = InstanceRecommendationFindingReasonCode(rawValue: rawValue) ?? InstanceRecommendationFindingReasonCode.sdkUnknown(rawValue)
        }
    }
}
