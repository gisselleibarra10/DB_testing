// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AppMeshClientTypes.HttpRetryPolicy: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case httpRetryEvents
        case maxRetries
        case perRetryTimeout
        case tcpRetryEvents
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let httpRetryEvents = httpRetryEvents {
            var httpRetryEventsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .httpRetryEvents)
            for httpretrypolicyevents0 in httpRetryEvents {
                try httpRetryEventsContainer.encode(httpretrypolicyevents0)
            }
        }
        if let maxRetries = self.maxRetries {
            try encodeContainer.encode(maxRetries, forKey: .maxRetries)
        }
        if let perRetryTimeout = self.perRetryTimeout {
            try encodeContainer.encode(perRetryTimeout, forKey: .perRetryTimeout)
        }
        if let tcpRetryEvents = tcpRetryEvents {
            var tcpRetryEventsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tcpRetryEvents)
            for tcpretrypolicyevents0 in tcpRetryEvents {
                try tcpRetryEventsContainer.encode(tcpretrypolicyevents0.rawValue)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let perRetryTimeoutDecoded = try containerValues.decodeIfPresent(AppMeshClientTypes.Duration.self, forKey: .perRetryTimeout)
        perRetryTimeout = perRetryTimeoutDecoded
        let maxRetriesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxRetries)
        maxRetries = maxRetriesDecoded
        let httpRetryEventsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .httpRetryEvents)
        var httpRetryEventsDecoded0:[Swift.String]? = nil
        if let httpRetryEventsContainer = httpRetryEventsContainer {
            httpRetryEventsDecoded0 = [Swift.String]()
            for string0 in httpRetryEventsContainer {
                if let string0 = string0 {
                    httpRetryEventsDecoded0?.append(string0)
                }
            }
        }
        httpRetryEvents = httpRetryEventsDecoded0
        let tcpRetryEventsContainer = try containerValues.decodeIfPresent([AppMeshClientTypes.TcpRetryPolicyEvent?].self, forKey: .tcpRetryEvents)
        var tcpRetryEventsDecoded0:[AppMeshClientTypes.TcpRetryPolicyEvent]? = nil
        if let tcpRetryEventsContainer = tcpRetryEventsContainer {
            tcpRetryEventsDecoded0 = [AppMeshClientTypes.TcpRetryPolicyEvent]()
            for string0 in tcpRetryEventsContainer {
                if let string0 = string0 {
                    tcpRetryEventsDecoded0?.append(string0)
                }
            }
        }
        tcpRetryEvents = tcpRetryEventsDecoded0
    }
}
