// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AppMeshClientTypes.LoggingFormat: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case json
        case sdkUnknown
        case text
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        switch self {
            case let .json(json):
                var jsonContainer = container.nestedUnkeyedContainer(forKey: .json)
                for jsonformat0 in json {
                    try jsonContainer.encode(jsonformat0)
                }
            case let .text(text):
                try container.encode(text, forKey: .text)
            case let .sdkUnknown(sdkUnknown):
                try container.encode(sdkUnknown, forKey: .sdkUnknown)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let values = try decoder.container(keyedBy: CodingKeys.self)
        let textDecoded = try values.decodeIfPresent(Swift.String.self, forKey: .text)
        if let text = textDecoded {
            self = .text(text)
            return
        }
        let jsonContainer = try values.decodeIfPresent([AppMeshClientTypes.JsonFormatRef?].self, forKey: .json)
        var jsonDecoded0:[AppMeshClientTypes.JsonFormatRef]? = nil
        if let jsonContainer = jsonContainer {
            jsonDecoded0 = [AppMeshClientTypes.JsonFormatRef]()
            for structure0 in jsonContainer {
                if let structure0 = structure0 {
                    jsonDecoded0?.append(structure0)
                }
            }
        }
        if let json = jsonDecoded0 {
            self = .json(json)
            return
        }
        self = .sdkUnknown("")
    }
}
