// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AppMeshClientTypes.OutlierDetection: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case baseEjectionDuration
        case interval
        case maxEjectionPercent
        case maxServerErrors
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let baseEjectionDuration = self.baseEjectionDuration {
            try encodeContainer.encode(baseEjectionDuration, forKey: .baseEjectionDuration)
        }
        if let interval = self.interval {
            try encodeContainer.encode(interval, forKey: .interval)
        }
        if let maxEjectionPercent = self.maxEjectionPercent {
            try encodeContainer.encode(maxEjectionPercent, forKey: .maxEjectionPercent)
        }
        if let maxServerErrors = self.maxServerErrors {
            try encodeContainer.encode(maxServerErrors, forKey: .maxServerErrors)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let maxServerErrorsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxServerErrors)
        maxServerErrors = maxServerErrorsDecoded
        let intervalDecoded = try containerValues.decodeIfPresent(AppMeshClientTypes.Duration.self, forKey: .interval)
        interval = intervalDecoded
        let baseEjectionDurationDecoded = try containerValues.decodeIfPresent(AppMeshClientTypes.Duration.self, forKey: .baseEjectionDuration)
        baseEjectionDuration = baseEjectionDurationDecoded
        let maxEjectionPercentDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxEjectionPercent)
        maxEjectionPercent = maxEjectionPercentDecoded
    }
}
