// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AppMeshClientTypes.ClientPolicyTls: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case certificate
        case enforce
        case ports
        case validation
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let certificate = self.certificate {
            try encodeContainer.encode(certificate, forKey: .certificate)
        }
        if let enforce = self.enforce {
            try encodeContainer.encode(enforce, forKey: .enforce)
        }
        if let ports = ports {
            var portsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .ports)
            for portset0 in ports {
                try portsContainer.encode(portset0)
            }
        }
        if let validation = self.validation {
            try encodeContainer.encode(validation, forKey: .validation)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let enforceDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enforce)
        enforce = enforceDecoded
        let portsContainer = try containerValues.decodeIfPresent([Swift.Int?].self, forKey: .ports)
        var portsDecoded0:Swift.Set<Swift.Int>? = nil
        if let portsContainer = portsContainer {
            portsDecoded0 = Swift.Set<Swift.Int>()
            for integer0 in portsContainer {
                if let integer0 = integer0 {
                    portsDecoded0?.insert(integer0)
                }
            }
        }
        ports = portsDecoded0
        let certificateDecoded = try containerValues.decodeIfPresent(AppMeshClientTypes.ClientTlsCertificate.self, forKey: .certificate)
        certificate = certificateDecoded
        let validationDecoded = try containerValues.decodeIfPresent(AppMeshClientTypes.TlsValidationContext.self, forKey: .validation)
        validation = validationDecoded
    }
}
