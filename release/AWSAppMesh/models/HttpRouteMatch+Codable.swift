// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AppMeshClientTypes.HttpRouteMatch: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case headers
        case method
        case path
        case port
        case `prefix` = "prefix"
        case queryParameters
        case scheme
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let headers = headers {
            var headersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .headers)
            for httprouteheaders0 in headers {
                try headersContainer.encode(httprouteheaders0)
            }
        }
        if let method = self.method {
            try encodeContainer.encode(method.rawValue, forKey: .method)
        }
        if let path = self.path {
            try encodeContainer.encode(path, forKey: .path)
        }
        if let port = self.port {
            try encodeContainer.encode(port, forKey: .port)
        }
        if let `prefix` = self.`prefix` {
            try encodeContainer.encode(`prefix`, forKey: .`prefix`)
        }
        if let queryParameters = queryParameters {
            var queryParametersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .queryParameters)
            for httpqueryparameters0 in queryParameters {
                try queryParametersContainer.encode(httpqueryparameters0)
            }
        }
        if let scheme = self.scheme {
            try encodeContainer.encode(scheme.rawValue, forKey: .scheme)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let prefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .prefix)
        `prefix` = prefixDecoded
        let pathDecoded = try containerValues.decodeIfPresent(AppMeshClientTypes.HttpPathMatch.self, forKey: .path)
        path = pathDecoded
        let queryParametersContainer = try containerValues.decodeIfPresent([AppMeshClientTypes.HttpQueryParameter?].self, forKey: .queryParameters)
        var queryParametersDecoded0:[AppMeshClientTypes.HttpQueryParameter]? = nil
        if let queryParametersContainer = queryParametersContainer {
            queryParametersDecoded0 = [AppMeshClientTypes.HttpQueryParameter]()
            for structure0 in queryParametersContainer {
                if let structure0 = structure0 {
                    queryParametersDecoded0?.append(structure0)
                }
            }
        }
        queryParameters = queryParametersDecoded0
        let methodDecoded = try containerValues.decodeIfPresent(AppMeshClientTypes.HttpMethod.self, forKey: .method)
        method = methodDecoded
        let schemeDecoded = try containerValues.decodeIfPresent(AppMeshClientTypes.HttpScheme.self, forKey: .scheme)
        scheme = schemeDecoded
        let headersContainer = try containerValues.decodeIfPresent([AppMeshClientTypes.HttpRouteHeader?].self, forKey: .headers)
        var headersDecoded0:[AppMeshClientTypes.HttpRouteHeader]? = nil
        if let headersContainer = headersContainer {
            headersDecoded0 = [AppMeshClientTypes.HttpRouteHeader]()
            for structure0 in headersContainer {
                if let structure0 = structure0 {
                    headersDecoded0?.append(structure0)
                }
            }
        }
        headers = headersDecoded0
        let portDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .port)
        port = portDecoded
    }
}
