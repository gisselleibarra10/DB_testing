// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateRouteInputBody: Swift.Equatable {
    let routeName: Swift.String?
    let spec: AppMeshClientTypes.RouteSpec?
    let tags: [AppMeshClientTypes.TagRef]?
    let clientToken: Swift.String?
}

extension CreateRouteInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientToken
        case routeName
        case spec
        case tags
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let routeNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .routeName)
        routeName = routeNameDecoded
        let specDecoded = try containerValues.decodeIfPresent(AppMeshClientTypes.RouteSpec.self, forKey: .spec)
        spec = specDecoded
        let tagsContainer = try containerValues.decodeIfPresent([AppMeshClientTypes.TagRef?].self, forKey: .tags)
        var tagsDecoded0:[AppMeshClientTypes.TagRef]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [AppMeshClientTypes.TagRef]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let clientTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientToken)
        clientToken = clientTokenDecoded
    }
}
