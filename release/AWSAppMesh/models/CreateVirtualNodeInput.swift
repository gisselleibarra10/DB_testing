// Code generated by smithy-swift-codegen. DO NOT EDIT!



///
public struct CreateVirtualNodeInput: Swift.Equatable {
    /// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Up to 36 letters, numbers, hyphens, and underscores are allowed.
    public var clientToken: Swift.String?
    /// The name of the service mesh to create the virtual node in.
    /// This member is required.
    public var meshName: Swift.String?
    /// The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then the account that you specify must share the mesh with your account before you can create the resource in the service mesh. For more information about mesh sharing, see [Working with shared meshes](https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html).
    public var meshOwner: Swift.String?
    /// The virtual node specification to apply.
    /// This member is required.
    public var spec: AppMeshClientTypes.VirtualNodeSpec?
    /// Optional metadata that you can apply to the virtual node to assist with categorization and organization. Each tag consists of a key and an optional value, both of which you define. Tag keys can have a maximum character length of 128 characters, and tag values can have a maximum length of 256 characters.
    public var tags: [AppMeshClientTypes.TagRef]?
    /// The name to use for the virtual node.
    /// This member is required.
    public var virtualNodeName: Swift.String?

    public init (
        clientToken: Swift.String? = nil,
        meshName: Swift.String? = nil,
        meshOwner: Swift.String? = nil,
        spec: AppMeshClientTypes.VirtualNodeSpec? = nil,
        tags: [AppMeshClientTypes.TagRef]? = nil,
        virtualNodeName: Swift.String? = nil
    )
    {
        self.clientToken = clientToken
        self.meshName = meshName
        self.meshOwner = meshOwner
        self.spec = spec
        self.tags = tags
        self.virtualNodeName = virtualNodeName
    }
}
