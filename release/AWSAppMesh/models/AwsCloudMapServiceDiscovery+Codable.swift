// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AppMeshClientTypes.AwsCloudMapServiceDiscovery: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attributes
        case ipPreference
        case namespaceName
        case serviceName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let attributes = attributes {
            var attributesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .attributes)
            for awscloudmapinstanceattributes0 in attributes {
                try attributesContainer.encode(awscloudmapinstanceattributes0)
            }
        }
        if let ipPreference = self.ipPreference {
            try encodeContainer.encode(ipPreference.rawValue, forKey: .ipPreference)
        }
        if let namespaceName = self.namespaceName {
            try encodeContainer.encode(namespaceName, forKey: .namespaceName)
        }
        if let serviceName = self.serviceName {
            try encodeContainer.encode(serviceName, forKey: .serviceName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let namespaceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .namespaceName)
        namespaceName = namespaceNameDecoded
        let serviceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serviceName)
        serviceName = serviceNameDecoded
        let attributesContainer = try containerValues.decodeIfPresent([AppMeshClientTypes.AwsCloudMapInstanceAttribute?].self, forKey: .attributes)
        var attributesDecoded0:[AppMeshClientTypes.AwsCloudMapInstanceAttribute]? = nil
        if let attributesContainer = attributesContainer {
            attributesDecoded0 = [AppMeshClientTypes.AwsCloudMapInstanceAttribute]()
            for structure0 in attributesContainer {
                if let structure0 = structure0 {
                    attributesDecoded0?.append(structure0)
                }
            }
        }
        attributes = attributesDecoded0
        let ipPreferenceDecoded = try containerValues.decodeIfPresent(AppMeshClientTypes.IpPreference.self, forKey: .ipPreference)
        ipPreference = ipPreferenceDecoded
    }
}
