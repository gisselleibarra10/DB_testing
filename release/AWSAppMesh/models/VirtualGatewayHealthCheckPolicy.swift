// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension AppMeshClientTypes {
    /// An object that represents the health check policy for a virtual gateway's listener.
    public struct VirtualGatewayHealthCheckPolicy: Swift.Equatable {
        /// The number of consecutive successful health checks that must occur before declaring the listener healthy.
        /// This member is required.
        public var healthyThreshold: Swift.Int
        /// The time period in milliseconds between each health check execution.
        /// This member is required.
        public var intervalMillis: Swift.Int?
        /// The destination path for the health check request. This value is only used if the specified protocol is HTTP or HTTP/2. For any other protocol, this value is ignored.
        public var path: Swift.String?
        /// The destination port for the health check request. This port must match the port defined in the [PortMapping] for the listener.
        public var port: Swift.Int
        /// The protocol for the health check request. If you specify grpc, then your service must conform to the [GRPC Health Checking Protocol](https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
        /// This member is required.
        public var `protocol`: AppMeshClientTypes.VirtualGatewayPortProtocol?
        /// The amount of time to wait when receiving a response from the health check, in milliseconds.
        /// This member is required.
        public var timeoutMillis: Swift.Int?
        /// The number of consecutive failed health checks that must occur before declaring a virtual gateway unhealthy.
        /// This member is required.
        public var unhealthyThreshold: Swift.Int

        public init (
            healthyThreshold: Swift.Int = 0,
            intervalMillis: Swift.Int? = nil,
            path: Swift.String? = nil,
            port: Swift.Int = 0,
            `protocol`: AppMeshClientTypes.VirtualGatewayPortProtocol? = nil,
            timeoutMillis: Swift.Int? = nil,
            unhealthyThreshold: Swift.Int = 0
        )
        {
            self.healthyThreshold = healthyThreshold
            self.intervalMillis = intervalMillis
            self.path = path
            self.port = port
            self.`protocol` = `protocol`
            self.timeoutMillis = timeoutMillis
            self.unhealthyThreshold = unhealthyThreshold
        }
    }

}
