// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AppMeshClientTypes.GatewayRouteSpec: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case grpcRoute
        case http2Route
        case httpRoute
        case priority
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let grpcRoute = self.grpcRoute {
            try encodeContainer.encode(grpcRoute, forKey: .grpcRoute)
        }
        if let http2Route = self.http2Route {
            try encodeContainer.encode(http2Route, forKey: .http2Route)
        }
        if let httpRoute = self.httpRoute {
            try encodeContainer.encode(httpRoute, forKey: .httpRoute)
        }
        if let priority = self.priority {
            try encodeContainer.encode(priority, forKey: .priority)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let priorityDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .priority)
        priority = priorityDecoded
        let httpRouteDecoded = try containerValues.decodeIfPresent(AppMeshClientTypes.HttpGatewayRoute.self, forKey: .httpRoute)
        httpRoute = httpRouteDecoded
        let http2RouteDecoded = try containerValues.decodeIfPresent(AppMeshClientTypes.HttpGatewayRoute.self, forKey: .http2Route)
        http2Route = http2RouteDecoded
        let grpcRouteDecoded = try containerValues.decodeIfPresent(AppMeshClientTypes.GrpcGatewayRoute.self, forKey: .grpcRoute)
        grpcRoute = grpcRouteDecoded
    }
}
