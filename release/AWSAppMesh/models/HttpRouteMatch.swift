// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension AppMeshClientTypes {
    /// An object that represents the requirements for a route to match HTTP requests for a virtual router.
    public struct HttpRouteMatch: Swift.Equatable {
        /// The client request headers to match on.
        public var headers: [AppMeshClientTypes.HttpRouteHeader]?
        /// The client request method to match on. Specify only one.
        public var method: AppMeshClientTypes.HttpMethod?
        /// The client request path to match on.
        public var path: AppMeshClientTypes.HttpPathMatch?
        /// The port number to match on.
        public var port: Swift.Int?
        /// Specifies the path to match requests with. This parameter must always start with /, which by itself matches all requests to the virtual service name. You can also match for path-based routing of requests. For example, if your virtual service name is my-service.local and you want the route to match requests to my-service.local/metrics, your prefix should be /metrics.
        public var `prefix`: Swift.String?
        /// The client request query parameters to match on.
        public var queryParameters: [AppMeshClientTypes.HttpQueryParameter]?
        /// The client request scheme to match on. Specify only one. Applicable only for HTTP2 routes.
        public var scheme: AppMeshClientTypes.HttpScheme?

        public init (
            headers: [AppMeshClientTypes.HttpRouteHeader]? = nil,
            method: AppMeshClientTypes.HttpMethod? = nil,
            path: AppMeshClientTypes.HttpPathMatch? = nil,
            port: Swift.Int? = nil,
            `prefix`: Swift.String? = nil,
            queryParameters: [AppMeshClientTypes.HttpQueryParameter]? = nil,
            scheme: AppMeshClientTypes.HttpScheme? = nil
        )
        {
            self.headers = headers
            self.method = method
            self.path = path
            self.port = port
            self.`prefix` = `prefix`
            self.queryParameters = queryParameters
            self.scheme = scheme
        }
    }

}
