// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension AppMeshClientTypes {
    /// An object that represents a retry policy. Specify at least one value for at least one of the types of RetryEvents, a value for maxRetries, and a value for perRetryTimeout. Both server-error and gateway-error under httpRetryEvents include the Envoy reset policy. For more information on the reset policy, see the [Envoy documentation](https://www.envoyproxy.io/docs/envoy/latest/configuration/http/http_filters/router_filter#x-envoy-retry-on).
    public struct HttpRetryPolicy: Swift.Equatable {
        /// Specify at least one of the following values.
        ///
        /// * server-error – HTTP status codes 500, 501, 502, 503, 504, 505, 506, 507, 508, 510, and 511
        ///
        /// * gateway-error – HTTP status codes 502, 503, and 504
        ///
        /// * client-error – HTTP status code 409
        ///
        /// * stream-error – Retry on refused stream
        public var httpRetryEvents: [Swift.String]?
        /// The maximum number of retry attempts.
        /// This member is required.
        public var maxRetries: Swift.Int?
        /// The timeout for each retry attempt.
        /// This member is required.
        public var perRetryTimeout: AppMeshClientTypes.Duration?
        /// Specify a valid value. The event occurs before any processing of a request has started and is encountered when the upstream is temporarily or permanently unavailable.
        public var tcpRetryEvents: [AppMeshClientTypes.TcpRetryPolicyEvent]?

        public init (
            httpRetryEvents: [Swift.String]? = nil,
            maxRetries: Swift.Int? = nil,
            perRetryTimeout: AppMeshClientTypes.Duration? = nil,
            tcpRetryEvents: [AppMeshClientTypes.TcpRetryPolicyEvent]? = nil
        )
        {
            self.httpRetryEvents = httpRetryEvents
            self.maxRetries = maxRetries
            self.perRetryTimeout = perRetryTimeout
            self.tcpRetryEvents = tcpRetryEvents
        }
    }

}
