// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AppMeshClientTypes.VirtualGatewayHealthCheckPolicy: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case healthyThreshold
        case intervalMillis
        case path
        case port
        case `protocol` = "protocol"
        case timeoutMillis
        case unhealthyThreshold
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if healthyThreshold != 0 {
            try encodeContainer.encode(healthyThreshold, forKey: .healthyThreshold)
        }
        if let intervalMillis = self.intervalMillis {
            try encodeContainer.encode(intervalMillis, forKey: .intervalMillis)
        }
        if let path = self.path {
            try encodeContainer.encode(path, forKey: .path)
        }
        if port != 0 {
            try encodeContainer.encode(port, forKey: .port)
        }
        if let `protocol` = self.`protocol` {
            try encodeContainer.encode(`protocol`.rawValue, forKey: .`protocol`)
        }
        if let timeoutMillis = self.timeoutMillis {
            try encodeContainer.encode(timeoutMillis, forKey: .timeoutMillis)
        }
        if unhealthyThreshold != 0 {
            try encodeContainer.encode(unhealthyThreshold, forKey: .unhealthyThreshold)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let timeoutMillisDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .timeoutMillis)
        timeoutMillis = timeoutMillisDecoded
        let intervalMillisDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .intervalMillis)
        intervalMillis = intervalMillisDecoded
        let protocolDecoded = try containerValues.decodeIfPresent(AppMeshClientTypes.VirtualGatewayPortProtocol.self, forKey: .protocol)
        `protocol` = protocolDecoded
        let portDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .port) ?? 0
        port = portDecoded
        let pathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .path)
        path = pathDecoded
        let healthyThresholdDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .healthyThreshold) ?? 0
        healthyThreshold = healthyThresholdDecoded
        let unhealthyThresholdDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .unhealthyThreshold) ?? 0
        unhealthyThreshold = unhealthyThresholdDecoded
    }
}
