// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension PinpointClientTypes {
    /// Specifies the default settings and content for a one-time email message that's sent directly to an endpoint.
    public struct EmailMessage: Swift.Equatable {
        /// The body of the email message.
        public var body: Swift.String?
        /// The email address to forward bounces and complaints to, if feedback forwarding is enabled.
        public var feedbackForwardingAddress: Swift.String?
        /// The verified email address to send the email message from. The default value is the FromAddress specified for the email channel.
        public var fromAddress: Swift.String?
        /// The email message, represented as a raw MIME message.
        public var rawEmail: PinpointClientTypes.RawEmail?
        /// The reply-to email address(es) for the email message. If a recipient replies to the email, each reply-to address receives the reply.
        public var replyToAddresses: [Swift.String]?
        /// The email message, composed of a subject, a text part, and an HTML part.
        public var simpleEmail: PinpointClientTypes.SimpleEmail?
        /// The default message variables to use in the email message. You can override the default variables with individual address variables.
        public var substitutions: [Swift.String:[Swift.String]]?

        public init (
            body: Swift.String? = nil,
            feedbackForwardingAddress: Swift.String? = nil,
            fromAddress: Swift.String? = nil,
            rawEmail: PinpointClientTypes.RawEmail? = nil,
            replyToAddresses: [Swift.String]? = nil,
            simpleEmail: PinpointClientTypes.SimpleEmail? = nil,
            substitutions: [Swift.String:[Swift.String]]? = nil
        )
        {
            self.body = body
            self.feedbackForwardingAddress = feedbackForwardingAddress
            self.fromAddress = fromAddress
            self.rawEmail = rawEmail
            self.replyToAddresses = replyToAddresses
            self.simpleEmail = simpleEmail
            self.substitutions = substitutions
        }
    }

}
