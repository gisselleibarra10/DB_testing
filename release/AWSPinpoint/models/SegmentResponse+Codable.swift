// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension PinpointClientTypes.SegmentResponse: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applicationId = "ApplicationId"
        case arn = "Arn"
        case creationDate = "CreationDate"
        case dimensions = "Dimensions"
        case id = "Id"
        case importDefinition = "ImportDefinition"
        case lastModifiedDate = "LastModifiedDate"
        case name = "Name"
        case segmentGroups = "SegmentGroups"
        case segmentType = "SegmentType"
        case version = "Version"
        case tags = "tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let applicationId = self.applicationId {
            try encodeContainer.encode(applicationId, forKey: .applicationId)
        }
        if let arn = self.arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let creationDate = self.creationDate {
            try encodeContainer.encode(creationDate, forKey: .creationDate)
        }
        if let dimensions = self.dimensions {
            try encodeContainer.encode(dimensions, forKey: .dimensions)
        }
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let importDefinition = self.importDefinition {
            try encodeContainer.encode(importDefinition, forKey: .importDefinition)
        }
        if let lastModifiedDate = self.lastModifiedDate {
            try encodeContainer.encode(lastModifiedDate, forKey: .lastModifiedDate)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let segmentGroups = self.segmentGroups {
            try encodeContainer.encode(segmentGroups, forKey: .segmentGroups)
        }
        if let segmentType = self.segmentType {
            try encodeContainer.encode(segmentType.rawValue, forKey: .segmentType)
        }
        if let version = self.version {
            try encodeContainer.encode(version, forKey: .version)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, mapof__string0) in tags {
                try tagsContainer.encode(mapof__string0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let applicationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .applicationId)
        applicationId = applicationIdDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let creationDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .creationDate)
        creationDate = creationDateDecoded
        let dimensionsDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.SegmentDimensions.self, forKey: .dimensions)
        dimensions = dimensionsDecoded
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let importDefinitionDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.SegmentImportResource.self, forKey: .importDefinition)
        importDefinition = importDefinitionDecoded
        let lastModifiedDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastModifiedDate)
        lastModifiedDate = lastModifiedDateDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let segmentGroupsDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.SegmentGroupList.self, forKey: .segmentGroups)
        segmentGroups = segmentGroupsDecoded
        let segmentTypeDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.SegmentType.self, forKey: .segmentType)
        segmentType = segmentTypeDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, __string0) in tagsContainer {
                if let __string0 = __string0 {
                    tagsDecoded0?[key0] = __string0
                }
            }
        }
        tags = tagsDecoded0
        let versionDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .version)
        version = versionDecoded
    }
}
