// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension PinpointClientTypes.MessageConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case aDMMessage = "ADMMessage"
        case aPNSMessage = "APNSMessage"
        case baiduMessage = "BaiduMessage"
        case customMessage = "CustomMessage"
        case defaultMessage = "DefaultMessage"
        case emailMessage = "EmailMessage"
        case gCMMessage = "GCMMessage"
        case inAppMessage = "InAppMessage"
        case sMSMessage = "SMSMessage"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let aDMMessage = self.aDMMessage {
            try encodeContainer.encode(aDMMessage, forKey: .aDMMessage)
        }
        if let aPNSMessage = self.aPNSMessage {
            try encodeContainer.encode(aPNSMessage, forKey: .aPNSMessage)
        }
        if let baiduMessage = self.baiduMessage {
            try encodeContainer.encode(baiduMessage, forKey: .baiduMessage)
        }
        if let customMessage = self.customMessage {
            try encodeContainer.encode(customMessage, forKey: .customMessage)
        }
        if let defaultMessage = self.defaultMessage {
            try encodeContainer.encode(defaultMessage, forKey: .defaultMessage)
        }
        if let emailMessage = self.emailMessage {
            try encodeContainer.encode(emailMessage, forKey: .emailMessage)
        }
        if let gCMMessage = self.gCMMessage {
            try encodeContainer.encode(gCMMessage, forKey: .gCMMessage)
        }
        if let inAppMessage = self.inAppMessage {
            try encodeContainer.encode(inAppMessage, forKey: .inAppMessage)
        }
        if let sMSMessage = self.sMSMessage {
            try encodeContainer.encode(sMSMessage, forKey: .sMSMessage)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let aDMMessageDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.Message.self, forKey: .aDMMessage)
        aDMMessage = aDMMessageDecoded
        let aPNSMessageDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.Message.self, forKey: .aPNSMessage)
        aPNSMessage = aPNSMessageDecoded
        let baiduMessageDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.Message.self, forKey: .baiduMessage)
        baiduMessage = baiduMessageDecoded
        let customMessageDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.CampaignCustomMessage.self, forKey: .customMessage)
        customMessage = customMessageDecoded
        let defaultMessageDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.Message.self, forKey: .defaultMessage)
        defaultMessage = defaultMessageDecoded
        let emailMessageDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.CampaignEmailMessage.self, forKey: .emailMessage)
        emailMessage = emailMessageDecoded
        let gCMMessageDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.Message.self, forKey: .gCMMessage)
        gCMMessage = gCMMessageDecoded
        let sMSMessageDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.CampaignSmsMessage.self, forKey: .sMSMessage)
        sMSMessage = sMSMessageDecoded
        let inAppMessageDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.CampaignInAppMessage.self, forKey: .inAppMessage)
        inAppMessage = inAppMessageDecoded
    }
}
