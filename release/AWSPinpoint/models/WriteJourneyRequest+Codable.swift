// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension PinpointClientTypes.WriteJourneyRequest: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case activities = "Activities"
        case closedDays = "ClosedDays"
        case creationDate = "CreationDate"
        case journeyChannelSettings = "JourneyChannelSettings"
        case lastModifiedDate = "LastModifiedDate"
        case limits = "Limits"
        case localTime = "LocalTime"
        case name = "Name"
        case openHours = "OpenHours"
        case quietTime = "QuietTime"
        case refreshFrequency = "RefreshFrequency"
        case refreshOnSegmentUpdate = "RefreshOnSegmentUpdate"
        case schedule = "Schedule"
        case sendingSchedule = "SendingSchedule"
        case startActivity = "StartActivity"
        case startCondition = "StartCondition"
        case state = "State"
        case waitForQuietTime = "WaitForQuietTime"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let activities = activities {
            var activitiesContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .activities)
            for (dictKey0, mapofactivity0) in activities {
                try activitiesContainer.encode(mapofactivity0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let closedDays = self.closedDays {
            try encodeContainer.encode(closedDays, forKey: .closedDays)
        }
        if let creationDate = self.creationDate {
            try encodeContainer.encode(creationDate, forKey: .creationDate)
        }
        if let journeyChannelSettings = self.journeyChannelSettings {
            try encodeContainer.encode(journeyChannelSettings, forKey: .journeyChannelSettings)
        }
        if let lastModifiedDate = self.lastModifiedDate {
            try encodeContainer.encode(lastModifiedDate, forKey: .lastModifiedDate)
        }
        if let limits = self.limits {
            try encodeContainer.encode(limits, forKey: .limits)
        }
        if let localTime = self.localTime {
            try encodeContainer.encode(localTime, forKey: .localTime)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let openHours = self.openHours {
            try encodeContainer.encode(openHours, forKey: .openHours)
        }
        if let quietTime = self.quietTime {
            try encodeContainer.encode(quietTime, forKey: .quietTime)
        }
        if let refreshFrequency = self.refreshFrequency {
            try encodeContainer.encode(refreshFrequency, forKey: .refreshFrequency)
        }
        if let refreshOnSegmentUpdate = self.refreshOnSegmentUpdate {
            try encodeContainer.encode(refreshOnSegmentUpdate, forKey: .refreshOnSegmentUpdate)
        }
        if let schedule = self.schedule {
            try encodeContainer.encode(schedule, forKey: .schedule)
        }
        if let sendingSchedule = self.sendingSchedule {
            try encodeContainer.encode(sendingSchedule, forKey: .sendingSchedule)
        }
        if let startActivity = self.startActivity {
            try encodeContainer.encode(startActivity, forKey: .startActivity)
        }
        if let startCondition = self.startCondition {
            try encodeContainer.encode(startCondition, forKey: .startCondition)
        }
        if let state = self.state {
            try encodeContainer.encode(state.rawValue, forKey: .state)
        }
        if let waitForQuietTime = self.waitForQuietTime {
            try encodeContainer.encode(waitForQuietTime, forKey: .waitForQuietTime)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let activitiesContainer = try containerValues.decodeIfPresent([Swift.String: PinpointClientTypes.Activity?].self, forKey: .activities)
        var activitiesDecoded0: [Swift.String:PinpointClientTypes.Activity]? = nil
        if let activitiesContainer = activitiesContainer {
            activitiesDecoded0 = [Swift.String:PinpointClientTypes.Activity]()
            for (key0, activity0) in activitiesContainer {
                if let activity0 = activity0 {
                    activitiesDecoded0?[key0] = activity0
                }
            }
        }
        activities = activitiesDecoded0
        let creationDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .creationDate)
        creationDate = creationDateDecoded
        let lastModifiedDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastModifiedDate)
        lastModifiedDate = lastModifiedDateDecoded
        let limitsDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.JourneyLimits.self, forKey: .limits)
        limits = limitsDecoded
        let localTimeDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .localTime)
        localTime = localTimeDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let quietTimeDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.QuietTime.self, forKey: .quietTime)
        quietTime = quietTimeDecoded
        let refreshFrequencyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .refreshFrequency)
        refreshFrequency = refreshFrequencyDecoded
        let scheduleDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.JourneySchedule.self, forKey: .schedule)
        schedule = scheduleDecoded
        let startActivityDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .startActivity)
        startActivity = startActivityDecoded
        let startConditionDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.StartCondition.self, forKey: .startCondition)
        startCondition = startConditionDecoded
        let stateDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.State.self, forKey: .state)
        state = stateDecoded
        let waitForQuietTimeDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .waitForQuietTime)
        waitForQuietTime = waitForQuietTimeDecoded
        let refreshOnSegmentUpdateDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .refreshOnSegmentUpdate)
        refreshOnSegmentUpdate = refreshOnSegmentUpdateDecoded
        let journeyChannelSettingsDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.JourneyChannelSettings.self, forKey: .journeyChannelSettings)
        journeyChannelSettings = journeyChannelSettingsDecoded
        let sendingScheduleDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .sendingSchedule)
        sendingSchedule = sendingScheduleDecoded
        let openHoursDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.OpenHours.self, forKey: .openHours)
        openHours = openHoursDecoded
        let closedDaysDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.ClosedDays.self, forKey: .closedDays)
        closedDays = closedDaysDecoded
    }
}
