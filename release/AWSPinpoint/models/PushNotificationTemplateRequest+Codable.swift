// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension PinpointClientTypes.PushNotificationTemplateRequest: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case aDM = "ADM"
        case aPNS = "APNS"
        case baidu = "Baidu"
        case `default` = "Default"
        case defaultSubstitutions = "DefaultSubstitutions"
        case gCM = "GCM"
        case recommenderId = "RecommenderId"
        case templateDescription = "TemplateDescription"
        case tags = "tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let aDM = self.aDM {
            try encodeContainer.encode(aDM, forKey: .aDM)
        }
        if let aPNS = self.aPNS {
            try encodeContainer.encode(aPNS, forKey: .aPNS)
        }
        if let baidu = self.baidu {
            try encodeContainer.encode(baidu, forKey: .baidu)
        }
        if let `default` = self.`default` {
            try encodeContainer.encode(`default`, forKey: .`default`)
        }
        if let defaultSubstitutions = self.defaultSubstitutions {
            try encodeContainer.encode(defaultSubstitutions, forKey: .defaultSubstitutions)
        }
        if let gCM = self.gCM {
            try encodeContainer.encode(gCM, forKey: .gCM)
        }
        if let recommenderId = self.recommenderId {
            try encodeContainer.encode(recommenderId, forKey: .recommenderId)
        }
        if let templateDescription = self.templateDescription {
            try encodeContainer.encode(templateDescription, forKey: .templateDescription)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, mapof__string0) in tags {
                try tagsContainer.encode(mapof__string0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let aDMDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.AndroidPushNotificationTemplate.self, forKey: .aDM)
        aDM = aDMDecoded
        let aPNSDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.APNSPushNotificationTemplate.self, forKey: .aPNS)
        aPNS = aPNSDecoded
        let baiduDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.AndroidPushNotificationTemplate.self, forKey: .baidu)
        baidu = baiduDecoded
        let defaultDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.DefaultPushNotificationTemplate.self, forKey: .default)
        `default` = defaultDecoded
        let defaultSubstitutionsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .defaultSubstitutions)
        defaultSubstitutions = defaultSubstitutionsDecoded
        let gCMDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.AndroidPushNotificationTemplate.self, forKey: .gCM)
        gCM = gCMDecoded
        let recommenderIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .recommenderId)
        recommenderId = recommenderIdDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, __string0) in tagsContainer {
                if let __string0 = __string0 {
                    tagsDecoded0?[key0] = __string0
                }
            }
        }
        tags = tagsDecoded0
        let templateDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateDescription)
        templateDescription = templateDescriptionDecoded
    }
}
