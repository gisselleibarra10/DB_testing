// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension PinpointClientTypes.Message: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case action = "Action"
        case body = "Body"
        case imageIconUrl = "ImageIconUrl"
        case imageSmallIconUrl = "ImageSmallIconUrl"
        case imageUrl = "ImageUrl"
        case jsonBody = "JsonBody"
        case mediaUrl = "MediaUrl"
        case rawContent = "RawContent"
        case silentPush = "SilentPush"
        case timeToLive = "TimeToLive"
        case title = "Title"
        case url = "Url"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let action = self.action {
            try encodeContainer.encode(action.rawValue, forKey: .action)
        }
        if let body = self.body {
            try encodeContainer.encode(body, forKey: .body)
        }
        if let imageIconUrl = self.imageIconUrl {
            try encodeContainer.encode(imageIconUrl, forKey: .imageIconUrl)
        }
        if let imageSmallIconUrl = self.imageSmallIconUrl {
            try encodeContainer.encode(imageSmallIconUrl, forKey: .imageSmallIconUrl)
        }
        if let imageUrl = self.imageUrl {
            try encodeContainer.encode(imageUrl, forKey: .imageUrl)
        }
        if let jsonBody = self.jsonBody {
            try encodeContainer.encode(jsonBody, forKey: .jsonBody)
        }
        if let mediaUrl = self.mediaUrl {
            try encodeContainer.encode(mediaUrl, forKey: .mediaUrl)
        }
        if let rawContent = self.rawContent {
            try encodeContainer.encode(rawContent, forKey: .rawContent)
        }
        if let silentPush = self.silentPush {
            try encodeContainer.encode(silentPush, forKey: .silentPush)
        }
        if let timeToLive = self.timeToLive {
            try encodeContainer.encode(timeToLive, forKey: .timeToLive)
        }
        if let title = self.title {
            try encodeContainer.encode(title, forKey: .title)
        }
        if let url = self.url {
            try encodeContainer.encode(url, forKey: .url)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let actionDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.Action.self, forKey: .action)
        action = actionDecoded
        let bodyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .body)
        body = bodyDecoded
        let imageIconUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .imageIconUrl)
        imageIconUrl = imageIconUrlDecoded
        let imageSmallIconUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .imageSmallIconUrl)
        imageSmallIconUrl = imageSmallIconUrlDecoded
        let imageUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .imageUrl)
        imageUrl = imageUrlDecoded
        let jsonBodyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jsonBody)
        jsonBody = jsonBodyDecoded
        let mediaUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .mediaUrl)
        mediaUrl = mediaUrlDecoded
        let rawContentDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .rawContent)
        rawContent = rawContentDecoded
        let silentPushDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .silentPush)
        silentPush = silentPushDecoded
        let timeToLiveDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .timeToLive)
        timeToLive = timeToLiveDecoded
        let titleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .title)
        title = titleDecoded
        let urlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .url)
        url = urlDecoded
    }
}
