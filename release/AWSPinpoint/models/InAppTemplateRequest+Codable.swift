// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension PinpointClientTypes.InAppTemplateRequest: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case content = "Content"
        case customConfig = "CustomConfig"
        case layout = "Layout"
        case templateDescription = "TemplateDescription"
        case tags = "tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let content = content {
            var contentContainer = encodeContainer.nestedUnkeyedContainer(forKey: .content)
            for listofinappmessagecontent0 in content {
                try contentContainer.encode(listofinappmessagecontent0)
            }
        }
        if let customConfig = customConfig {
            var customConfigContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .customConfig)
            for (dictKey0, mapof__string0) in customConfig {
                try customConfigContainer.encode(mapof__string0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let layout = self.layout {
            try encodeContainer.encode(layout.rawValue, forKey: .layout)
        }
        if let templateDescription = self.templateDescription {
            try encodeContainer.encode(templateDescription, forKey: .templateDescription)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, mapof__string0) in tags {
                try tagsContainer.encode(mapof__string0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let contentContainer = try containerValues.decodeIfPresent([PinpointClientTypes.InAppMessageContent?].self, forKey: .content)
        var contentDecoded0:[PinpointClientTypes.InAppMessageContent]? = nil
        if let contentContainer = contentContainer {
            contentDecoded0 = [PinpointClientTypes.InAppMessageContent]()
            for structure0 in contentContainer {
                if let structure0 = structure0 {
                    contentDecoded0?.append(structure0)
                }
            }
        }
        content = contentDecoded0
        let customConfigContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .customConfig)
        var customConfigDecoded0: [Swift.String:Swift.String]? = nil
        if let customConfigContainer = customConfigContainer {
            customConfigDecoded0 = [Swift.String:Swift.String]()
            for (key0, __string0) in customConfigContainer {
                if let __string0 = __string0 {
                    customConfigDecoded0?[key0] = __string0
                }
            }
        }
        customConfig = customConfigDecoded0
        let layoutDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.Layout.self, forKey: .layout)
        layout = layoutDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, __string0) in tagsContainer {
                if let __string0 = __string0 {
                    tagsDecoded0?[key0] = __string0
                }
            }
        }
        tags = tagsDecoded0
        let templateDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateDescription)
        templateDescription = templateDescriptionDecoded
    }
}
