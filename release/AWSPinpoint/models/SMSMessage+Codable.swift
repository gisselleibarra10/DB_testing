// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension PinpointClientTypes.SMSMessage: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case body = "Body"
        case entityId = "EntityId"
        case keyword = "Keyword"
        case mediaUrl = "MediaUrl"
        case messageType = "MessageType"
        case originationNumber = "OriginationNumber"
        case senderId = "SenderId"
        case substitutions = "Substitutions"
        case templateId = "TemplateId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let body = self.body {
            try encodeContainer.encode(body, forKey: .body)
        }
        if let entityId = self.entityId {
            try encodeContainer.encode(entityId, forKey: .entityId)
        }
        if let keyword = self.keyword {
            try encodeContainer.encode(keyword, forKey: .keyword)
        }
        if let mediaUrl = self.mediaUrl {
            try encodeContainer.encode(mediaUrl, forKey: .mediaUrl)
        }
        if let messageType = self.messageType {
            try encodeContainer.encode(messageType.rawValue, forKey: .messageType)
        }
        if let originationNumber = self.originationNumber {
            try encodeContainer.encode(originationNumber, forKey: .originationNumber)
        }
        if let senderId = self.senderId {
            try encodeContainer.encode(senderId, forKey: .senderId)
        }
        if let substitutions = substitutions {
            var substitutionsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .substitutions)
            for (dictKey0, mapoflistof__string0) in substitutions {
                try substitutionsContainer.encode(mapoflistof__string0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let templateId = self.templateId {
            try encodeContainer.encode(templateId, forKey: .templateId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let bodyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .body)
        body = bodyDecoded
        let keywordDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyword)
        keyword = keywordDecoded
        let mediaUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .mediaUrl)
        mediaUrl = mediaUrlDecoded
        let messageTypeDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.MessageType.self, forKey: .messageType)
        messageType = messageTypeDecoded
        let originationNumberDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .originationNumber)
        originationNumber = originationNumberDecoded
        let senderIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .senderId)
        senderId = senderIdDecoded
        let substitutionsContainer = try containerValues.decodeIfPresent([Swift.String: [Swift.String?]?].self, forKey: .substitutions)
        var substitutionsDecoded0: [Swift.String:[Swift.String]]? = nil
        if let substitutionsContainer = substitutionsContainer {
            substitutionsDecoded0 = [Swift.String:[Swift.String]]()
            for (key0, listof__string0) in substitutionsContainer {
                var listof__string0Decoded0: [Swift.String]? = nil
                if let listof__string0 = listof__string0 {
                    listof__string0Decoded0 = [Swift.String]()
                    for string1 in listof__string0 {
                        if let string1 = string1 {
                            listof__string0Decoded0?.append(string1)
                        }
                    }
                }
                substitutionsDecoded0?[key0] = listof__string0Decoded0
            }
        }
        substitutions = substitutionsDecoded0
        let entityIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .entityId)
        entityId = entityIdDecoded
        let templateIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateId)
        templateId = templateIdDecoded
    }
}
