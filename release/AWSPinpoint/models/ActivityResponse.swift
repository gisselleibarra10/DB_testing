// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension PinpointClientTypes {
    /// Provides information about an activity that was performed by a campaign.
    public struct ActivityResponse: Swift.Equatable {
        /// The unique identifier for the application that the campaign applies to.
        /// This member is required.
        public var applicationId: Swift.String?
        /// The unique identifier for the campaign that the activity applies to.
        /// This member is required.
        public var campaignId: Swift.String?
        /// The actual time, in ISO 8601 format, when the activity was marked CANCELLED or COMPLETED.
        public var end: Swift.String?
        /// The unique identifier for the activity.
        /// This member is required.
        public var id: Swift.String?
        /// Specifies whether the activity succeeded. Possible values are SUCCESS and FAIL.
        public var result: Swift.String?
        /// The scheduled start time, in ISO 8601 format, for the activity.
        public var scheduledStart: Swift.String?
        /// The actual start time, in ISO 8601 format, of the activity.
        public var start: Swift.String?
        /// The current status of the activity. Possible values are: PENDING, INITIALIZING, RUNNING, PAUSED, CANCELLED, and COMPLETED.
        public var state: Swift.String?
        /// The total number of endpoints that the campaign successfully delivered messages to.
        public var successfulEndpointCount: Swift.Int?
        /// The total number of time zones that were completed.
        public var timezonesCompletedCount: Swift.Int?
        /// The total number of unique time zones that are in the segment for the campaign.
        public var timezonesTotalCount: Swift.Int?
        /// The total number of endpoints that the campaign attempted to deliver messages to.
        public var totalEndpointCount: Swift.Int?
        /// The unique identifier for the campaign treatment that the activity applies to. A treatment is a variation of a campaign that's used for A/B testing of a campaign.
        public var treatmentId: Swift.String?

        public init (
            applicationId: Swift.String? = nil,
            campaignId: Swift.String? = nil,
            end: Swift.String? = nil,
            id: Swift.String? = nil,
            result: Swift.String? = nil,
            scheduledStart: Swift.String? = nil,
            start: Swift.String? = nil,
            state: Swift.String? = nil,
            successfulEndpointCount: Swift.Int? = nil,
            timezonesCompletedCount: Swift.Int? = nil,
            timezonesTotalCount: Swift.Int? = nil,
            totalEndpointCount: Swift.Int? = nil,
            treatmentId: Swift.String? = nil
        )
        {
            self.applicationId = applicationId
            self.campaignId = campaignId
            self.end = end
            self.id = id
            self.result = result
            self.scheduledStart = scheduledStart
            self.start = start
            self.state = state
            self.successfulEndpointCount = successfulEndpointCount
            self.timezonesCompletedCount = timezonesCompletedCount
            self.timezonesTotalCount = timezonesTotalCount
            self.totalEndpointCount = totalEndpointCount
            self.treatmentId = treatmentId
        }
    }

}
