// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension PinpointClientTypes.GCMMessage: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case action = "Action"
        case body = "Body"
        case collapseKey = "CollapseKey"
        case data = "Data"
        case iconReference = "IconReference"
        case imageIconUrl = "ImageIconUrl"
        case imageUrl = "ImageUrl"
        case priority = "Priority"
        case rawContent = "RawContent"
        case restrictedPackageName = "RestrictedPackageName"
        case silentPush = "SilentPush"
        case smallImageIconUrl = "SmallImageIconUrl"
        case sound = "Sound"
        case substitutions = "Substitutions"
        case timeToLive = "TimeToLive"
        case title = "Title"
        case url = "Url"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let action = self.action {
            try encodeContainer.encode(action.rawValue, forKey: .action)
        }
        if let body = self.body {
            try encodeContainer.encode(body, forKey: .body)
        }
        if let collapseKey = self.collapseKey {
            try encodeContainer.encode(collapseKey, forKey: .collapseKey)
        }
        if let data = data {
            var dataContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .data)
            for (dictKey0, mapof__string0) in data {
                try dataContainer.encode(mapof__string0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let iconReference = self.iconReference {
            try encodeContainer.encode(iconReference, forKey: .iconReference)
        }
        if let imageIconUrl = self.imageIconUrl {
            try encodeContainer.encode(imageIconUrl, forKey: .imageIconUrl)
        }
        if let imageUrl = self.imageUrl {
            try encodeContainer.encode(imageUrl, forKey: .imageUrl)
        }
        if let priority = self.priority {
            try encodeContainer.encode(priority, forKey: .priority)
        }
        if let rawContent = self.rawContent {
            try encodeContainer.encode(rawContent, forKey: .rawContent)
        }
        if let restrictedPackageName = self.restrictedPackageName {
            try encodeContainer.encode(restrictedPackageName, forKey: .restrictedPackageName)
        }
        if let silentPush = self.silentPush {
            try encodeContainer.encode(silentPush, forKey: .silentPush)
        }
        if let smallImageIconUrl = self.smallImageIconUrl {
            try encodeContainer.encode(smallImageIconUrl, forKey: .smallImageIconUrl)
        }
        if let sound = self.sound {
            try encodeContainer.encode(sound, forKey: .sound)
        }
        if let substitutions = substitutions {
            var substitutionsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .substitutions)
            for (dictKey0, mapoflistof__string0) in substitutions {
                try substitutionsContainer.encode(mapoflistof__string0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let timeToLive = self.timeToLive {
            try encodeContainer.encode(timeToLive, forKey: .timeToLive)
        }
        if let title = self.title {
            try encodeContainer.encode(title, forKey: .title)
        }
        if let url = self.url {
            try encodeContainer.encode(url, forKey: .url)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let actionDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.Action.self, forKey: .action)
        action = actionDecoded
        let bodyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .body)
        body = bodyDecoded
        let collapseKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .collapseKey)
        collapseKey = collapseKeyDecoded
        let dataContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .data)
        var dataDecoded0: [Swift.String:Swift.String]? = nil
        if let dataContainer = dataContainer {
            dataDecoded0 = [Swift.String:Swift.String]()
            for (key0, __string0) in dataContainer {
                if let __string0 = __string0 {
                    dataDecoded0?[key0] = __string0
                }
            }
        }
        data = dataDecoded0
        let iconReferenceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .iconReference)
        iconReference = iconReferenceDecoded
        let imageIconUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .imageIconUrl)
        imageIconUrl = imageIconUrlDecoded
        let imageUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .imageUrl)
        imageUrl = imageUrlDecoded
        let priorityDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .priority)
        priority = priorityDecoded
        let rawContentDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .rawContent)
        rawContent = rawContentDecoded
        let restrictedPackageNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .restrictedPackageName)
        restrictedPackageName = restrictedPackageNameDecoded
        let silentPushDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .silentPush)
        silentPush = silentPushDecoded
        let smallImageIconUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .smallImageIconUrl)
        smallImageIconUrl = smallImageIconUrlDecoded
        let soundDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sound)
        sound = soundDecoded
        let substitutionsContainer = try containerValues.decodeIfPresent([Swift.String: [Swift.String?]?].self, forKey: .substitutions)
        var substitutionsDecoded0: [Swift.String:[Swift.String]]? = nil
        if let substitutionsContainer = substitutionsContainer {
            substitutionsDecoded0 = [Swift.String:[Swift.String]]()
            for (key0, listof__string0) in substitutionsContainer {
                var listof__string0Decoded0: [Swift.String]? = nil
                if let listof__string0 = listof__string0 {
                    listof__string0Decoded0 = [Swift.String]()
                    for string1 in listof__string0 {
                        if let string1 = string1 {
                            listof__string0Decoded0?.append(string1)
                        }
                    }
                }
                substitutionsDecoded0?[key0] = listof__string0Decoded0
            }
        }
        substitutions = substitutionsDecoded0
        let timeToLiveDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .timeToLive)
        timeToLive = timeToLiveDecoded
        let titleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .title)
        title = titleDecoded
        let urlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .url)
        url = urlDecoded
    }
}
