// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension PinpointClientTypes.DirectMessageConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case aDMMessage = "ADMMessage"
        case aPNSMessage = "APNSMessage"
        case baiduMessage = "BaiduMessage"
        case defaultMessage = "DefaultMessage"
        case defaultPushNotificationMessage = "DefaultPushNotificationMessage"
        case emailMessage = "EmailMessage"
        case gCMMessage = "GCMMessage"
        case sMSMessage = "SMSMessage"
        case voiceMessage = "VoiceMessage"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let aDMMessage = self.aDMMessage {
            try encodeContainer.encode(aDMMessage, forKey: .aDMMessage)
        }
        if let aPNSMessage = self.aPNSMessage {
            try encodeContainer.encode(aPNSMessage, forKey: .aPNSMessage)
        }
        if let baiduMessage = self.baiduMessage {
            try encodeContainer.encode(baiduMessage, forKey: .baiduMessage)
        }
        if let defaultMessage = self.defaultMessage {
            try encodeContainer.encode(defaultMessage, forKey: .defaultMessage)
        }
        if let defaultPushNotificationMessage = self.defaultPushNotificationMessage {
            try encodeContainer.encode(defaultPushNotificationMessage, forKey: .defaultPushNotificationMessage)
        }
        if let emailMessage = self.emailMessage {
            try encodeContainer.encode(emailMessage, forKey: .emailMessage)
        }
        if let gCMMessage = self.gCMMessage {
            try encodeContainer.encode(gCMMessage, forKey: .gCMMessage)
        }
        if let sMSMessage = self.sMSMessage {
            try encodeContainer.encode(sMSMessage, forKey: .sMSMessage)
        }
        if let voiceMessage = self.voiceMessage {
            try encodeContainer.encode(voiceMessage, forKey: .voiceMessage)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let aDMMessageDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.ADMMessage.self, forKey: .aDMMessage)
        aDMMessage = aDMMessageDecoded
        let aPNSMessageDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.APNSMessage.self, forKey: .aPNSMessage)
        aPNSMessage = aPNSMessageDecoded
        let baiduMessageDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.BaiduMessage.self, forKey: .baiduMessage)
        baiduMessage = baiduMessageDecoded
        let defaultMessageDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.DefaultMessage.self, forKey: .defaultMessage)
        defaultMessage = defaultMessageDecoded
        let defaultPushNotificationMessageDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.DefaultPushNotificationMessage.self, forKey: .defaultPushNotificationMessage)
        defaultPushNotificationMessage = defaultPushNotificationMessageDecoded
        let emailMessageDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.EmailMessage.self, forKey: .emailMessage)
        emailMessage = emailMessageDecoded
        let gCMMessageDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.GCMMessage.self, forKey: .gCMMessage)
        gCMMessage = gCMMessageDecoded
        let sMSMessageDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.SMSMessage.self, forKey: .sMSMessage)
        sMSMessage = sMSMessageDecoded
        let voiceMessageDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.VoiceMessage.self, forKey: .voiceMessage)
        voiceMessage = voiceMessageDecoded
    }
}
