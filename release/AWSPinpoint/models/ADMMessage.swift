// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension PinpointClientTypes {
    /// Specifies the settings for a one-time message that's sent directly to an endpoint through the ADM (Amazon Device Messaging) channel.
    public struct ADMMessage: Swift.Equatable {
        /// The action to occur if the recipient taps the push notification. Valid values are:
        ///
        /// * OPEN_APP - Your app opens or it becomes the foreground app if it was sent to the background. This is the default action.
        ///
        /// * DEEP_LINK - Your app opens and displays a designated user interface in the app. This action uses the deep-linking features of the Android platform.
        ///
        /// * URL - The default mobile browser on the recipient's device opens and loads the web page at a URL that you specify.
        public var action: PinpointClientTypes.Action?
        /// The body of the notification message.
        public var body: Swift.String?
        /// An arbitrary string that indicates that multiple messages are logically the same and that Amazon Device Messaging (ADM) can drop previously enqueued messages in favor of this message.
        public var consolidationKey: Swift.String?
        /// The JSON data payload to use for the push notification, if the notification is a silent push notification. This payload is added to the data.pinpoint.jsonBody object of the notification.
        public var data: [Swift.String:Swift.String]?
        /// The amount of time, in seconds, that ADM should store the message if the recipient's device is offline. Amazon Pinpoint specifies this value in the expiresAfter parameter when it sends the notification message to ADM.
        public var expiresAfter: Swift.String?
        /// The icon image name of the asset saved in your app.
        public var iconReference: Swift.String?
        /// The URL of the large icon image to display in the content view of the push notification.
        public var imageIconUrl: Swift.String?
        /// The URL of an image to display in the push notification.
        public var imageUrl: Swift.String?
        /// The base64-encoded, MD5 checksum of the value specified by the Data property. ADM uses the MD5 value to verify the integrity of the data.
        public var mD5: Swift.String?
        /// The raw, JSON-formatted string to use as the payload for the notification message. If specified, this value overrides all other content for the message.
        public var rawContent: Swift.String?
        /// Specifies whether the notification is a silent push notification, which is a push notification that doesn't display on a recipient's device. Silent push notifications can be used for cases such as updating an app's configuration or supporting phone home functionality.
        public var silentPush: Swift.Bool?
        /// The URL of the small icon image to display in the status bar and the content view of the push notification.
        public var smallImageIconUrl: Swift.String?
        /// The sound to play when the recipient receives the push notification. You can use the default stream or specify the file name of a sound resource that's bundled in your app. On an Android platform, the sound file must reside in /res/raw/.
        public var sound: Swift.String?
        /// The default message variables to use in the notification message. You can override the default variables with individual address variables.
        public var substitutions: [Swift.String:[Swift.String]]?
        /// The title to display above the notification message on the recipient's device.
        public var title: Swift.String?
        /// The URL to open in the recipient's default mobile browser, if a recipient taps the push notification and the value of the Action property is URL.
        public var url: Swift.String?

        public init (
            action: PinpointClientTypes.Action? = nil,
            body: Swift.String? = nil,
            consolidationKey: Swift.String? = nil,
            data: [Swift.String:Swift.String]? = nil,
            expiresAfter: Swift.String? = nil,
            iconReference: Swift.String? = nil,
            imageIconUrl: Swift.String? = nil,
            imageUrl: Swift.String? = nil,
            mD5: Swift.String? = nil,
            rawContent: Swift.String? = nil,
            silentPush: Swift.Bool? = nil,
            smallImageIconUrl: Swift.String? = nil,
            sound: Swift.String? = nil,
            substitutions: [Swift.String:[Swift.String]]? = nil,
            title: Swift.String? = nil,
            url: Swift.String? = nil
        )
        {
            self.action = action
            self.body = body
            self.consolidationKey = consolidationKey
            self.data = data
            self.expiresAfter = expiresAfter
            self.iconReference = iconReference
            self.imageIconUrl = imageIconUrl
            self.imageUrl = imageUrl
            self.mD5 = mD5
            self.rawContent = rawContent
            self.silentPush = silentPush
            self.smallImageIconUrl = smallImageIconUrl
            self.sound = sound
            self.substitutions = substitutions
            self.title = title
            self.url = url
        }
    }

}
