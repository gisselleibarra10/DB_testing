// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension PinpointClientTypes.MessageRequest: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case addresses = "Addresses"
        case context = "Context"
        case endpoints = "Endpoints"
        case messageConfiguration = "MessageConfiguration"
        case templateConfiguration = "TemplateConfiguration"
        case traceId = "TraceId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let addresses = addresses {
            var addressesContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .addresses)
            for (dictKey0, mapofaddressconfiguration0) in addresses {
                try addressesContainer.encode(mapofaddressconfiguration0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let context = context {
            var contextContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .context)
            for (dictKey0, mapof__string0) in context {
                try contextContainer.encode(mapof__string0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let endpoints = endpoints {
            var endpointsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .endpoints)
            for (dictKey0, mapofendpointsendconfiguration0) in endpoints {
                try endpointsContainer.encode(mapofendpointsendconfiguration0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let messageConfiguration = self.messageConfiguration {
            try encodeContainer.encode(messageConfiguration, forKey: .messageConfiguration)
        }
        if let templateConfiguration = self.templateConfiguration {
            try encodeContainer.encode(templateConfiguration, forKey: .templateConfiguration)
        }
        if let traceId = self.traceId {
            try encodeContainer.encode(traceId, forKey: .traceId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let addressesContainer = try containerValues.decodeIfPresent([Swift.String: PinpointClientTypes.AddressConfiguration?].self, forKey: .addresses)
        var addressesDecoded0: [Swift.String:PinpointClientTypes.AddressConfiguration]? = nil
        if let addressesContainer = addressesContainer {
            addressesDecoded0 = [Swift.String:PinpointClientTypes.AddressConfiguration]()
            for (key0, addressconfiguration0) in addressesContainer {
                if let addressconfiguration0 = addressconfiguration0 {
                    addressesDecoded0?[key0] = addressconfiguration0
                }
            }
        }
        addresses = addressesDecoded0
        let contextContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .context)
        var contextDecoded0: [Swift.String:Swift.String]? = nil
        if let contextContainer = contextContainer {
            contextDecoded0 = [Swift.String:Swift.String]()
            for (key0, __string0) in contextContainer {
                if let __string0 = __string0 {
                    contextDecoded0?[key0] = __string0
                }
            }
        }
        context = contextDecoded0
        let endpointsContainer = try containerValues.decodeIfPresent([Swift.String: PinpointClientTypes.EndpointSendConfiguration?].self, forKey: .endpoints)
        var endpointsDecoded0: [Swift.String:PinpointClientTypes.EndpointSendConfiguration]? = nil
        if let endpointsContainer = endpointsContainer {
            endpointsDecoded0 = [Swift.String:PinpointClientTypes.EndpointSendConfiguration]()
            for (key0, endpointsendconfiguration0) in endpointsContainer {
                if let endpointsendconfiguration0 = endpointsendconfiguration0 {
                    endpointsDecoded0?[key0] = endpointsendconfiguration0
                }
            }
        }
        endpoints = endpointsDecoded0
        let messageConfigurationDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.DirectMessageConfiguration.self, forKey: .messageConfiguration)
        messageConfiguration = messageConfigurationDecoded
        let templateConfigurationDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.TemplateConfiguration.self, forKey: .templateConfiguration)
        templateConfiguration = templateConfigurationDecoded
        let traceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .traceId)
        traceId = traceIdDecoded
    }
}
