// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension PinpointClientTypes {
    /// Provides information about the status and settings of the APNs (Apple Push Notification service) channel for an application.
    public struct APNSChannelResponse: Swift.Equatable {
        /// The unique identifier for the application that the APNs channel applies to.
        public var applicationId: Swift.String?
        /// The date and time when the APNs channel was enabled.
        public var creationDate: Swift.String?
        /// The default authentication method that Amazon Pinpoint uses to authenticate with APNs for this channel, key or certificate.
        public var defaultAuthenticationMethod: Swift.String?
        /// Specifies whether the APNs channel is enabled for the application.
        public var enabled: Swift.Bool?
        /// (Not used) This property is retained only for backward compatibility.
        public var hasCredential: Swift.Bool?
        /// Specifies whether the APNs channel is configured to communicate with APNs by using APNs tokens. To provide an authentication key for APNs tokens, set the TokenKey property of the channel.
        public var hasTokenKey: Swift.Bool?
        /// (Deprecated) An identifier for the APNs channel. This property is retained only for backward compatibility.
        public var id: Swift.String?
        /// Specifies whether the APNs channel is archived.
        public var isArchived: Swift.Bool?
        /// The user who last modified the APNs channel.
        public var lastModifiedBy: Swift.String?
        /// The date and time when the APNs channel was last modified.
        public var lastModifiedDate: Swift.String?
        /// The type of messaging or notification platform for the channel. For the APNs channel, this value is APNS.
        /// This member is required.
        public var platform: Swift.String?
        /// The current version of the APNs channel.
        public var version: Swift.Int?

        public init (
            applicationId: Swift.String? = nil,
            creationDate: Swift.String? = nil,
            defaultAuthenticationMethod: Swift.String? = nil,
            enabled: Swift.Bool? = nil,
            hasCredential: Swift.Bool? = nil,
            hasTokenKey: Swift.Bool? = nil,
            id: Swift.String? = nil,
            isArchived: Swift.Bool? = nil,
            lastModifiedBy: Swift.String? = nil,
            lastModifiedDate: Swift.String? = nil,
            platform: Swift.String? = nil,
            version: Swift.Int? = nil
        )
        {
            self.applicationId = applicationId
            self.creationDate = creationDate
            self.defaultAuthenticationMethod = defaultAuthenticationMethod
            self.enabled = enabled
            self.hasCredential = hasCredential
            self.hasTokenKey = hasTokenKey
            self.id = id
            self.isArchived = isArchived
            self.lastModifiedBy = lastModifiedBy
            self.lastModifiedDate = lastModifiedDate
            self.platform = platform
            self.version = version
        }
    }

}
