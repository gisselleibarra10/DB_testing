// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension PinpointClientTypes.AddressConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bodyOverride = "BodyOverride"
        case channelType = "ChannelType"
        case context = "Context"
        case rawContent = "RawContent"
        case substitutions = "Substitutions"
        case titleOverride = "TitleOverride"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let bodyOverride = self.bodyOverride {
            try encodeContainer.encode(bodyOverride, forKey: .bodyOverride)
        }
        if let channelType = self.channelType {
            try encodeContainer.encode(channelType.rawValue, forKey: .channelType)
        }
        if let context = context {
            var contextContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .context)
            for (dictKey0, mapof__string0) in context {
                try contextContainer.encode(mapof__string0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let rawContent = self.rawContent {
            try encodeContainer.encode(rawContent, forKey: .rawContent)
        }
        if let substitutions = substitutions {
            var substitutionsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .substitutions)
            for (dictKey0, mapoflistof__string0) in substitutions {
                try substitutionsContainer.encode(mapoflistof__string0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let titleOverride = self.titleOverride {
            try encodeContainer.encode(titleOverride, forKey: .titleOverride)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let bodyOverrideDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .bodyOverride)
        bodyOverride = bodyOverrideDecoded
        let channelTypeDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.ChannelType.self, forKey: .channelType)
        channelType = channelTypeDecoded
        let contextContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .context)
        var contextDecoded0: [Swift.String:Swift.String]? = nil
        if let contextContainer = contextContainer {
            contextDecoded0 = [Swift.String:Swift.String]()
            for (key0, __string0) in contextContainer {
                if let __string0 = __string0 {
                    contextDecoded0?[key0] = __string0
                }
            }
        }
        context = contextDecoded0
        let rawContentDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .rawContent)
        rawContent = rawContentDecoded
        let substitutionsContainer = try containerValues.decodeIfPresent([Swift.String: [Swift.String?]?].self, forKey: .substitutions)
        var substitutionsDecoded0: [Swift.String:[Swift.String]]? = nil
        if let substitutionsContainer = substitutionsContainer {
            substitutionsDecoded0 = [Swift.String:[Swift.String]]()
            for (key0, listof__string0) in substitutionsContainer {
                var listof__string0Decoded0: [Swift.String]? = nil
                if let listof__string0 = listof__string0 {
                    listof__string0Decoded0 = [Swift.String]()
                    for string1 in listof__string0 {
                        if let string1 = string1 {
                            listof__string0Decoded0?.append(string1)
                        }
                    }
                }
                substitutionsDecoded0?[key0] = listof__string0Decoded0
            }
        }
        substitutions = substitutionsDecoded0
        let titleOverrideDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .titleOverride)
        titleOverride = titleOverrideDecoded
    }
}
