// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension PinpointClientTypes.JourneyExecutionMetricsResponse: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applicationId = "ApplicationId"
        case journeyId = "JourneyId"
        case lastEvaluatedTime = "LastEvaluatedTime"
        case metrics = "Metrics"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let applicationId = self.applicationId {
            try encodeContainer.encode(applicationId, forKey: .applicationId)
        }
        if let journeyId = self.journeyId {
            try encodeContainer.encode(journeyId, forKey: .journeyId)
        }
        if let lastEvaluatedTime = self.lastEvaluatedTime {
            try encodeContainer.encode(lastEvaluatedTime, forKey: .lastEvaluatedTime)
        }
        if let metrics = metrics {
            var metricsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .metrics)
            for (dictKey0, mapof__string0) in metrics {
                try metricsContainer.encode(mapof__string0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let applicationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .applicationId)
        applicationId = applicationIdDecoded
        let journeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .journeyId)
        journeyId = journeyIdDecoded
        let lastEvaluatedTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastEvaluatedTime)
        lastEvaluatedTime = lastEvaluatedTimeDecoded
        let metricsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .metrics)
        var metricsDecoded0: [Swift.String:Swift.String]? = nil
        if let metricsContainer = metricsContainer {
            metricsDecoded0 = [Swift.String:Swift.String]()
            for (key0, __string0) in metricsContainer {
                if let __string0 = __string0 {
                    metricsDecoded0?[key0] = __string0
                }
            }
        }
        metrics = metricsDecoded0
    }
}
