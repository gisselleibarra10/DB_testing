// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension PinpointClientTypes.EmailTemplateResponse: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "Arn"
        case creationDate = "CreationDate"
        case defaultSubstitutions = "DefaultSubstitutions"
        case htmlPart = "HtmlPart"
        case lastModifiedDate = "LastModifiedDate"
        case recommenderId = "RecommenderId"
        case subject = "Subject"
        case templateDescription = "TemplateDescription"
        case templateName = "TemplateName"
        case templateType = "TemplateType"
        case textPart = "TextPart"
        case version = "Version"
        case tags = "tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = self.arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let creationDate = self.creationDate {
            try encodeContainer.encode(creationDate, forKey: .creationDate)
        }
        if let defaultSubstitutions = self.defaultSubstitutions {
            try encodeContainer.encode(defaultSubstitutions, forKey: .defaultSubstitutions)
        }
        if let htmlPart = self.htmlPart {
            try encodeContainer.encode(htmlPart, forKey: .htmlPart)
        }
        if let lastModifiedDate = self.lastModifiedDate {
            try encodeContainer.encode(lastModifiedDate, forKey: .lastModifiedDate)
        }
        if let recommenderId = self.recommenderId {
            try encodeContainer.encode(recommenderId, forKey: .recommenderId)
        }
        if let subject = self.subject {
            try encodeContainer.encode(subject, forKey: .subject)
        }
        if let templateDescription = self.templateDescription {
            try encodeContainer.encode(templateDescription, forKey: .templateDescription)
        }
        if let templateName = self.templateName {
            try encodeContainer.encode(templateName, forKey: .templateName)
        }
        if let templateType = self.templateType {
            try encodeContainer.encode(templateType.rawValue, forKey: .templateType)
        }
        if let textPart = self.textPart {
            try encodeContainer.encode(textPart, forKey: .textPart)
        }
        if let version = self.version {
            try encodeContainer.encode(version, forKey: .version)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, mapof__string0) in tags {
                try tagsContainer.encode(mapof__string0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let creationDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .creationDate)
        creationDate = creationDateDecoded
        let defaultSubstitutionsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .defaultSubstitutions)
        defaultSubstitutions = defaultSubstitutionsDecoded
        let htmlPartDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .htmlPart)
        htmlPart = htmlPartDecoded
        let lastModifiedDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastModifiedDate)
        lastModifiedDate = lastModifiedDateDecoded
        let recommenderIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .recommenderId)
        recommenderId = recommenderIdDecoded
        let subjectDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .subject)
        subject = subjectDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, __string0) in tagsContainer {
                if let __string0 = __string0 {
                    tagsDecoded0?[key0] = __string0
                }
            }
        }
        tags = tagsDecoded0
        let templateDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateDescription)
        templateDescription = templateDescriptionDecoded
        let templateNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateName)
        templateName = templateNameDecoded
        let templateTypeDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.TemplateType.self, forKey: .templateType)
        templateType = templateTypeDecoded
        let textPartDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .textPart)
        textPart = textPartDecoded
        let versionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .version)
        version = versionDecoded
    }
}
