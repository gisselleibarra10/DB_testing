// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension PinpointClientTypes.SendOTPMessageRequestParameters: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case allowedAttempts = "AllowedAttempts"
        case brandName = "BrandName"
        case channel = "Channel"
        case codeLength = "CodeLength"
        case destinationIdentity = "DestinationIdentity"
        case entityId = "EntityId"
        case language = "Language"
        case originationIdentity = "OriginationIdentity"
        case referenceId = "ReferenceId"
        case templateId = "TemplateId"
        case validityPeriod = "ValidityPeriod"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let allowedAttempts = self.allowedAttempts {
            try encodeContainer.encode(allowedAttempts, forKey: .allowedAttempts)
        }
        if let brandName = self.brandName {
            try encodeContainer.encode(brandName, forKey: .brandName)
        }
        if let channel = self.channel {
            try encodeContainer.encode(channel, forKey: .channel)
        }
        if let codeLength = self.codeLength {
            try encodeContainer.encode(codeLength, forKey: .codeLength)
        }
        if let destinationIdentity = self.destinationIdentity {
            try encodeContainer.encode(destinationIdentity, forKey: .destinationIdentity)
        }
        if let entityId = self.entityId {
            try encodeContainer.encode(entityId, forKey: .entityId)
        }
        if let language = self.language {
            try encodeContainer.encode(language, forKey: .language)
        }
        if let originationIdentity = self.originationIdentity {
            try encodeContainer.encode(originationIdentity, forKey: .originationIdentity)
        }
        if let referenceId = self.referenceId {
            try encodeContainer.encode(referenceId, forKey: .referenceId)
        }
        if let templateId = self.templateId {
            try encodeContainer.encode(templateId, forKey: .templateId)
        }
        if let validityPeriod = self.validityPeriod {
            try encodeContainer.encode(validityPeriod, forKey: .validityPeriod)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let allowedAttemptsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .allowedAttempts)
        allowedAttempts = allowedAttemptsDecoded
        let brandNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .brandName)
        brandName = brandNameDecoded
        let channelDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .channel)
        channel = channelDecoded
        let codeLengthDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .codeLength)
        codeLength = codeLengthDecoded
        let destinationIdentityDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .destinationIdentity)
        destinationIdentity = destinationIdentityDecoded
        let entityIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .entityId)
        entityId = entityIdDecoded
        let languageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .language)
        language = languageDecoded
        let originationIdentityDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .originationIdentity)
        originationIdentity = originationIdentityDecoded
        let referenceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .referenceId)
        referenceId = referenceIdDecoded
        let templateIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateId)
        templateId = templateIdDecoded
        let validityPeriodDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .validityPeriod)
        validityPeriod = validityPeriodDecoded
    }
}
