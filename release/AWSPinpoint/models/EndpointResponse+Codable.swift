// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension PinpointClientTypes.EndpointResponse: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case address = "Address"
        case applicationId = "ApplicationId"
        case attributes = "Attributes"
        case channelType = "ChannelType"
        case cohortId = "CohortId"
        case creationDate = "CreationDate"
        case demographic = "Demographic"
        case effectiveDate = "EffectiveDate"
        case endpointStatus = "EndpointStatus"
        case id = "Id"
        case location = "Location"
        case metrics = "Metrics"
        case optOut = "OptOut"
        case requestId = "RequestId"
        case user = "User"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let address = self.address {
            try encodeContainer.encode(address, forKey: .address)
        }
        if let applicationId = self.applicationId {
            try encodeContainer.encode(applicationId, forKey: .applicationId)
        }
        if let attributes = attributes {
            var attributesContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .attributes)
            for (dictKey0, mapoflistof__string0) in attributes {
                try attributesContainer.encode(mapoflistof__string0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let channelType = self.channelType {
            try encodeContainer.encode(channelType.rawValue, forKey: .channelType)
        }
        if let cohortId = self.cohortId {
            try encodeContainer.encode(cohortId, forKey: .cohortId)
        }
        if let creationDate = self.creationDate {
            try encodeContainer.encode(creationDate, forKey: .creationDate)
        }
        if let demographic = self.demographic {
            try encodeContainer.encode(demographic, forKey: .demographic)
        }
        if let effectiveDate = self.effectiveDate {
            try encodeContainer.encode(effectiveDate, forKey: .effectiveDate)
        }
        if let endpointStatus = self.endpointStatus {
            try encodeContainer.encode(endpointStatus, forKey: .endpointStatus)
        }
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let location = self.location {
            try encodeContainer.encode(location, forKey: .location)
        }
        if let metrics = metrics {
            var metricsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .metrics)
            for (dictKey0, mapof__double0) in metrics {
                try metricsContainer.encode(mapof__double0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let optOut = self.optOut {
            try encodeContainer.encode(optOut, forKey: .optOut)
        }
        if let requestId = self.requestId {
            try encodeContainer.encode(requestId, forKey: .requestId)
        }
        if let user = self.user {
            try encodeContainer.encode(user, forKey: .user)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let addressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .address)
        address = addressDecoded
        let applicationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .applicationId)
        applicationId = applicationIdDecoded
        let attributesContainer = try containerValues.decodeIfPresent([Swift.String: [Swift.String?]?].self, forKey: .attributes)
        var attributesDecoded0: [Swift.String:[Swift.String]]? = nil
        if let attributesContainer = attributesContainer {
            attributesDecoded0 = [Swift.String:[Swift.String]]()
            for (key0, listof__string0) in attributesContainer {
                var listof__string0Decoded0: [Swift.String]? = nil
                if let listof__string0 = listof__string0 {
                    listof__string0Decoded0 = [Swift.String]()
                    for string1 in listof__string0 {
                        if let string1 = string1 {
                            listof__string0Decoded0?.append(string1)
                        }
                    }
                }
                attributesDecoded0?[key0] = listof__string0Decoded0
            }
        }
        attributes = attributesDecoded0
        let channelTypeDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.ChannelType.self, forKey: .channelType)
        channelType = channelTypeDecoded
        let cohortIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cohortId)
        cohortId = cohortIdDecoded
        let creationDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .creationDate)
        creationDate = creationDateDecoded
        let demographicDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.EndpointDemographic.self, forKey: .demographic)
        demographic = demographicDecoded
        let effectiveDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .effectiveDate)
        effectiveDate = effectiveDateDecoded
        let endpointStatusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .endpointStatus)
        endpointStatus = endpointStatusDecoded
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let locationDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.EndpointLocation.self, forKey: .location)
        location = locationDecoded
        let metricsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.Double?].self, forKey: .metrics)
        var metricsDecoded0: [Swift.String:Swift.Double]? = nil
        if let metricsContainer = metricsContainer {
            metricsDecoded0 = [Swift.String:Swift.Double]()
            for (key0, __double0) in metricsContainer {
                if let __double0 = __double0 {
                    metricsDecoded0?[key0] = __double0
                }
            }
        }
        metrics = metricsDecoded0
        let optOutDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .optOut)
        optOut = optOutDecoded
        let requestIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .requestId)
        requestId = requestIdDecoded
        let userDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.EndpointUser.self, forKey: .user)
        user = userDecoded
    }
}
