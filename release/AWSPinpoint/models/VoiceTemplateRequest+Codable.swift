// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension PinpointClientTypes.VoiceTemplateRequest: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case body = "Body"
        case defaultSubstitutions = "DefaultSubstitutions"
        case languageCode = "LanguageCode"
        case templateDescription = "TemplateDescription"
        case voiceId = "VoiceId"
        case tags = "tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let body = self.body {
            try encodeContainer.encode(body, forKey: .body)
        }
        if let defaultSubstitutions = self.defaultSubstitutions {
            try encodeContainer.encode(defaultSubstitutions, forKey: .defaultSubstitutions)
        }
        if let languageCode = self.languageCode {
            try encodeContainer.encode(languageCode, forKey: .languageCode)
        }
        if let templateDescription = self.templateDescription {
            try encodeContainer.encode(templateDescription, forKey: .templateDescription)
        }
        if let voiceId = self.voiceId {
            try encodeContainer.encode(voiceId, forKey: .voiceId)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, mapof__string0) in tags {
                try tagsContainer.encode(mapof__string0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let bodyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .body)
        body = bodyDecoded
        let defaultSubstitutionsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .defaultSubstitutions)
        defaultSubstitutions = defaultSubstitutionsDecoded
        let languageCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .languageCode)
        languageCode = languageCodeDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, __string0) in tagsContainer {
                if let __string0 = __string0 {
                    tagsDecoded0?[key0] = __string0
                }
            }
        }
        tags = tagsDecoded0
        let templateDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateDescription)
        templateDescription = templateDescriptionDecoded
        let voiceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .voiceId)
        voiceId = voiceIdDecoded
    }
}
