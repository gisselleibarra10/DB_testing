// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension PinpointClientTypes.EventDimensions: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attributes = "Attributes"
        case eventType = "EventType"
        case metrics = "Metrics"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let attributes = attributes {
            var attributesContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .attributes)
            for (dictKey0, mapofattributedimension0) in attributes {
                try attributesContainer.encode(mapofattributedimension0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let eventType = self.eventType {
            try encodeContainer.encode(eventType, forKey: .eventType)
        }
        if let metrics = metrics {
            var metricsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .metrics)
            for (dictKey0, mapofmetricdimension0) in metrics {
                try metricsContainer.encode(mapofmetricdimension0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let attributesContainer = try containerValues.decodeIfPresent([Swift.String: PinpointClientTypes.AttributeDimension?].self, forKey: .attributes)
        var attributesDecoded0: [Swift.String:PinpointClientTypes.AttributeDimension]? = nil
        if let attributesContainer = attributesContainer {
            attributesDecoded0 = [Swift.String:PinpointClientTypes.AttributeDimension]()
            for (key0, attributedimension0) in attributesContainer {
                if let attributedimension0 = attributedimension0 {
                    attributesDecoded0?[key0] = attributedimension0
                }
            }
        }
        attributes = attributesDecoded0
        let eventTypeDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.SetDimension.self, forKey: .eventType)
        eventType = eventTypeDecoded
        let metricsContainer = try containerValues.decodeIfPresent([Swift.String: PinpointClientTypes.MetricDimension?].self, forKey: .metrics)
        var metricsDecoded0: [Swift.String:PinpointClientTypes.MetricDimension]? = nil
        if let metricsContainer = metricsContainer {
            metricsDecoded0 = [Swift.String:PinpointClientTypes.MetricDimension]()
            for (key0, metricdimension0) in metricsContainer {
                if let metricdimension0 = metricdimension0 {
                    metricsDecoded0?[key0] = metricdimension0
                }
            }
        }
        metrics = metricsDecoded0
    }
}
