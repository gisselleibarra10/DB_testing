// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension PinpointClientTypes.APNSSandboxChannelRequest: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bundleId = "BundleId"
        case certificate = "Certificate"
        case defaultAuthenticationMethod = "DefaultAuthenticationMethod"
        case enabled = "Enabled"
        case privateKey = "PrivateKey"
        case teamId = "TeamId"
        case tokenKey = "TokenKey"
        case tokenKeyId = "TokenKeyId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let bundleId = self.bundleId {
            try encodeContainer.encode(bundleId, forKey: .bundleId)
        }
        if let certificate = self.certificate {
            try encodeContainer.encode(certificate, forKey: .certificate)
        }
        if let defaultAuthenticationMethod = self.defaultAuthenticationMethod {
            try encodeContainer.encode(defaultAuthenticationMethod, forKey: .defaultAuthenticationMethod)
        }
        if let enabled = self.enabled {
            try encodeContainer.encode(enabled, forKey: .enabled)
        }
        if let privateKey = self.privateKey {
            try encodeContainer.encode(privateKey, forKey: .privateKey)
        }
        if let teamId = self.teamId {
            try encodeContainer.encode(teamId, forKey: .teamId)
        }
        if let tokenKey = self.tokenKey {
            try encodeContainer.encode(tokenKey, forKey: .tokenKey)
        }
        if let tokenKeyId = self.tokenKeyId {
            try encodeContainer.encode(tokenKeyId, forKey: .tokenKeyId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let bundleIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .bundleId)
        bundleId = bundleIdDecoded
        let certificateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .certificate)
        certificate = certificateDecoded
        let defaultAuthenticationMethodDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .defaultAuthenticationMethod)
        defaultAuthenticationMethod = defaultAuthenticationMethodDecoded
        let enabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enabled)
        enabled = enabledDecoded
        let privateKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .privateKey)
        privateKey = privateKeyDecoded
        let teamIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .teamId)
        teamId = teamIdDecoded
        let tokenKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tokenKey)
        tokenKey = tokenKeyDecoded
        let tokenKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tokenKeyId)
        tokenKeyId = tokenKeyIdDecoded
    }
}
