// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension PinpointClientTypes.Event: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case appPackageName = "AppPackageName"
        case appTitle = "AppTitle"
        case appVersionCode = "AppVersionCode"
        case attributes = "Attributes"
        case clientSdkVersion = "ClientSdkVersion"
        case eventType = "EventType"
        case metrics = "Metrics"
        case sdkName = "SdkName"
        case session = "Session"
        case timestamp = "Timestamp"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let appPackageName = self.appPackageName {
            try encodeContainer.encode(appPackageName, forKey: .appPackageName)
        }
        if let appTitle = self.appTitle {
            try encodeContainer.encode(appTitle, forKey: .appTitle)
        }
        if let appVersionCode = self.appVersionCode {
            try encodeContainer.encode(appVersionCode, forKey: .appVersionCode)
        }
        if let attributes = attributes {
            var attributesContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .attributes)
            for (dictKey0, mapof__string0) in attributes {
                try attributesContainer.encode(mapof__string0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let clientSdkVersion = self.clientSdkVersion {
            try encodeContainer.encode(clientSdkVersion, forKey: .clientSdkVersion)
        }
        if let eventType = self.eventType {
            try encodeContainer.encode(eventType, forKey: .eventType)
        }
        if let metrics = metrics {
            var metricsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .metrics)
            for (dictKey0, mapof__double0) in metrics {
                try metricsContainer.encode(mapof__double0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let sdkName = self.sdkName {
            try encodeContainer.encode(sdkName, forKey: .sdkName)
        }
        if let session = self.session {
            try encodeContainer.encode(session, forKey: .session)
        }
        if let timestamp = self.timestamp {
            try encodeContainer.encode(timestamp, forKey: .timestamp)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let appPackageNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .appPackageName)
        appPackageName = appPackageNameDecoded
        let appTitleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .appTitle)
        appTitle = appTitleDecoded
        let appVersionCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .appVersionCode)
        appVersionCode = appVersionCodeDecoded
        let attributesContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .attributes)
        var attributesDecoded0: [Swift.String:Swift.String]? = nil
        if let attributesContainer = attributesContainer {
            attributesDecoded0 = [Swift.String:Swift.String]()
            for (key0, __string0) in attributesContainer {
                if let __string0 = __string0 {
                    attributesDecoded0?[key0] = __string0
                }
            }
        }
        attributes = attributesDecoded0
        let clientSdkVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientSdkVersion)
        clientSdkVersion = clientSdkVersionDecoded
        let eventTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .eventType)
        eventType = eventTypeDecoded
        let metricsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.Double?].self, forKey: .metrics)
        var metricsDecoded0: [Swift.String:Swift.Double]? = nil
        if let metricsContainer = metricsContainer {
            metricsDecoded0 = [Swift.String:Swift.Double]()
            for (key0, __double0) in metricsContainer {
                if let __double0 = __double0 {
                    metricsDecoded0?[key0] = __double0
                }
            }
        }
        metrics = metricsDecoded0
        let sdkNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sdkName)
        sdkName = sdkNameDecoded
        let sessionDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.Session.self, forKey: .session)
        session = sessionDecoded
        let timestampDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .timestamp)
        timestamp = timestampDecoded
    }
}
