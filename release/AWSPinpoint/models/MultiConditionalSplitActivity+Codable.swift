// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension PinpointClientTypes.MultiConditionalSplitActivity: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case branches = "Branches"
        case defaultActivity = "DefaultActivity"
        case evaluationWaitTime = "EvaluationWaitTime"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let branches = branches {
            var branchesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .branches)
            for listofmulticonditionalbranch0 in branches {
                try branchesContainer.encode(listofmulticonditionalbranch0)
            }
        }
        if let defaultActivity = self.defaultActivity {
            try encodeContainer.encode(defaultActivity, forKey: .defaultActivity)
        }
        if let evaluationWaitTime = self.evaluationWaitTime {
            try encodeContainer.encode(evaluationWaitTime, forKey: .evaluationWaitTime)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let branchesContainer = try containerValues.decodeIfPresent([PinpointClientTypes.MultiConditionalBranch?].self, forKey: .branches)
        var branchesDecoded0:[PinpointClientTypes.MultiConditionalBranch]? = nil
        if let branchesContainer = branchesContainer {
            branchesDecoded0 = [PinpointClientTypes.MultiConditionalBranch]()
            for structure0 in branchesContainer {
                if let structure0 = structure0 {
                    branchesDecoded0?.append(structure0)
                }
            }
        }
        branches = branchesDecoded0
        let defaultActivityDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .defaultActivity)
        defaultActivity = defaultActivityDecoded
        let evaluationWaitTimeDecoded = try containerValues.decodeIfPresent(PinpointClientTypes.WaitTime.self, forKey: .evaluationWaitTime)
        evaluationWaitTime = evaluationWaitTimeDecoded
    }
}
