// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension PinpointClientTypes.EventsRequest: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case batchItem = "BatchItem"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let batchItem = batchItem {
            var batchItemContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .batchItem)
            for (dictKey0, mapofeventsbatch0) in batchItem {
                try batchItemContainer.encode(mapofeventsbatch0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let batchItemContainer = try containerValues.decodeIfPresent([Swift.String: PinpointClientTypes.EventsBatch?].self, forKey: .batchItem)
        var batchItemDecoded0: [Swift.String:PinpointClientTypes.EventsBatch]? = nil
        if let batchItemContainer = batchItemContainer {
            batchItemDecoded0 = [Swift.String:PinpointClientTypes.EventsBatch]()
            for (key0, eventsbatch0) in batchItemContainer {
                if let eventsbatch0 = eventsbatch0 {
                    batchItemDecoded0?[key0] = eventsbatch0
                }
            }
        }
        batchItem = batchItemDecoded0
    }
}
