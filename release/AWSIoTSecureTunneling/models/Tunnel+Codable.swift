// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension IoTSecureTunnelingClientTypes.Tunnel: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createdAt
        case description
        case destinationConfig
        case destinationConnectionState
        case lastUpdatedAt
        case sourceConnectionState
        case status
        case tags
        case timeoutConfig
        case tunnelArn
        case tunnelId
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let createdAt = self.createdAt {
            try encodeContainer.encode(createdAt.timeIntervalSince1970, forKey: .createdAt)
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let destinationConfig = self.destinationConfig {
            try encodeContainer.encode(destinationConfig, forKey: .destinationConfig)
        }
        if let destinationConnectionState = self.destinationConnectionState {
            try encodeContainer.encode(destinationConnectionState, forKey: .destinationConnectionState)
        }
        if let lastUpdatedAt = self.lastUpdatedAt {
            try encodeContainer.encode(lastUpdatedAt.timeIntervalSince1970, forKey: .lastUpdatedAt)
        }
        if let sourceConnectionState = self.sourceConnectionState {
            try encodeContainer.encode(sourceConnectionState, forKey: .sourceConnectionState)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
        if let timeoutConfig = self.timeoutConfig {
            try encodeContainer.encode(timeoutConfig, forKey: .timeoutConfig)
        }
        if let tunnelArn = self.tunnelArn {
            try encodeContainer.encode(tunnelArn, forKey: .tunnelArn)
        }
        if let tunnelId = self.tunnelId {
            try encodeContainer.encode(tunnelId, forKey: .tunnelId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tunnelIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tunnelId)
        tunnelId = tunnelIdDecoded
        let tunnelArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tunnelArn)
        tunnelArn = tunnelArnDecoded
        let statusDecoded = try containerValues.decodeIfPresent(IoTSecureTunnelingClientTypes.TunnelStatus.self, forKey: .status)
        status = statusDecoded
        let sourceConnectionStateDecoded = try containerValues.decodeIfPresent(IoTSecureTunnelingClientTypes.ConnectionState.self, forKey: .sourceConnectionState)
        sourceConnectionState = sourceConnectionStateDecoded
        let destinationConnectionStateDecoded = try containerValues.decodeIfPresent(IoTSecureTunnelingClientTypes.ConnectionState.self, forKey: .destinationConnectionState)
        destinationConnectionState = destinationConnectionStateDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let destinationConfigDecoded = try containerValues.decodeIfPresent(IoTSecureTunnelingClientTypes.DestinationConfig.self, forKey: .destinationConfig)
        destinationConfig = destinationConfigDecoded
        let timeoutConfigDecoded = try containerValues.decodeIfPresent(IoTSecureTunnelingClientTypes.TimeoutConfig.self, forKey: .timeoutConfig)
        timeoutConfig = timeoutConfigDecoded
        let tagsContainer = try containerValues.decodeIfPresent([IoTSecureTunnelingClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[IoTSecureTunnelingClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [IoTSecureTunnelingClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let createdAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdAt)
        createdAt = createdAtDecoded
        let lastUpdatedAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastUpdatedAt)
        lastUpdatedAt = lastUpdatedAtDecoded
    }
}
