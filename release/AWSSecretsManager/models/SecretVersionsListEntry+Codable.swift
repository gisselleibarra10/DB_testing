// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SecretsManagerClientTypes.SecretVersionsListEntry: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createdDate = "CreatedDate"
        case kmsKeyIds = "KmsKeyIds"
        case lastAccessedDate = "LastAccessedDate"
        case versionId = "VersionId"
        case versionStages = "VersionStages"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let createdDate = self.createdDate {
            try encodeContainer.encode(createdDate.timeIntervalSince1970, forKey: .createdDate)
        }
        if let kmsKeyIds = kmsKeyIds {
            var kmsKeyIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .kmsKeyIds)
            for kmskeyidlisttype0 in kmsKeyIds {
                try kmsKeyIdsContainer.encode(kmskeyidlisttype0)
            }
        }
        if let lastAccessedDate = self.lastAccessedDate {
            try encodeContainer.encode(lastAccessedDate.timeIntervalSince1970, forKey: .lastAccessedDate)
        }
        if let versionId = self.versionId {
            try encodeContainer.encode(versionId, forKey: .versionId)
        }
        if let versionStages = versionStages {
            var versionStagesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .versionStages)
            for secretversionstagestype0 in versionStages {
                try versionStagesContainer.encode(secretversionstagestype0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let versionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .versionId)
        versionId = versionIdDecoded
        let versionStagesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .versionStages)
        var versionStagesDecoded0:[Swift.String]? = nil
        if let versionStagesContainer = versionStagesContainer {
            versionStagesDecoded0 = [Swift.String]()
            for string0 in versionStagesContainer {
                if let string0 = string0 {
                    versionStagesDecoded0?.append(string0)
                }
            }
        }
        versionStages = versionStagesDecoded0
        let lastAccessedDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastAccessedDate)
        lastAccessedDate = lastAccessedDateDecoded
        let createdDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdDate)
        createdDate = createdDateDecoded
        let kmsKeyIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .kmsKeyIds)
        var kmsKeyIdsDecoded0:[Swift.String]? = nil
        if let kmsKeyIdsContainer = kmsKeyIdsContainer {
            kmsKeyIdsDecoded0 = [Swift.String]()
            for string0 in kmsKeyIdsContainer {
                if let string0 = string0 {
                    kmsKeyIdsDecoded0?.append(string0)
                }
            }
        }
        kmsKeyIds = kmsKeyIdsDecoded0
    }
}
