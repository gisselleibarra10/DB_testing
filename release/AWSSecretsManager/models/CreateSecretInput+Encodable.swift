// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CreateSecretInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case addReplicaRegions = "AddReplicaRegions"
        case clientRequestToken = "ClientRequestToken"
        case description = "Description"
        case forceOverwriteReplicaSecret = "ForceOverwriteReplicaSecret"
        case kmsKeyId = "KmsKeyId"
        case name = "Name"
        case secretBinary = "SecretBinary"
        case secretString = "SecretString"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let addReplicaRegions = addReplicaRegions {
            var addReplicaRegionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .addReplicaRegions)
            for addreplicaregionlisttype0 in addReplicaRegions {
                try addReplicaRegionsContainer.encode(addreplicaregionlisttype0)
            }
        }
        if let clientRequestToken = self.clientRequestToken {
            try encodeContainer.encode(clientRequestToken, forKey: .clientRequestToken)
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if forceOverwriteReplicaSecret != false {
            try encodeContainer.encode(forceOverwriteReplicaSecret, forKey: .forceOverwriteReplicaSecret)
        }
        if let kmsKeyId = self.kmsKeyId {
            try encodeContainer.encode(kmsKeyId, forKey: .kmsKeyId)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let secretBinary = self.secretBinary {
            try encodeContainer.encode(secretBinary.base64EncodedString(), forKey: .secretBinary)
        }
        if let secretString = self.secretString {
            try encodeContainer.encode(secretString, forKey: .secretString)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglisttype0 in tags {
                try tagsContainer.encode(taglisttype0)
            }
        }
    }
}
