// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SecretsManagerClientTypes.ReplicationStatusType: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case kmsKeyId = "KmsKeyId"
        case lastAccessedDate = "LastAccessedDate"
        case region = "Region"
        case status = "Status"
        case statusMessage = "StatusMessage"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let kmsKeyId = self.kmsKeyId {
            try encodeContainer.encode(kmsKeyId, forKey: .kmsKeyId)
        }
        if let lastAccessedDate = self.lastAccessedDate {
            try encodeContainer.encode(lastAccessedDate.timeIntervalSince1970, forKey: .lastAccessedDate)
        }
        if let region = self.region {
            try encodeContainer.encode(region, forKey: .region)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let statusMessage = self.statusMessage {
            try encodeContainer.encode(statusMessage, forKey: .statusMessage)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let regionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .region)
        region = regionDecoded
        let kmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kmsKeyId)
        kmsKeyId = kmsKeyIdDecoded
        let statusDecoded = try containerValues.decodeIfPresent(SecretsManagerClientTypes.StatusType.self, forKey: .status)
        status = statusDecoded
        let statusMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .statusMessage)
        statusMessage = statusMessageDecoded
        let lastAccessedDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastAccessedDate)
        lastAccessedDate = lastAccessedDateDecoded
    }
}
