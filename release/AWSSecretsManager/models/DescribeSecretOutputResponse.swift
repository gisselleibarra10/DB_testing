// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct DescribeSecretOutputResponse: Swift.Equatable {
    /// The ARN of the secret.
    public var aRN: Swift.String?
    /// The date the secret was created.
    public var createdDate: ClientRuntime.Date?
    /// The date the secret is scheduled for deletion. If it is not scheduled for deletion, this field is omitted. When you delete a secret, Secrets Manager requires a recovery window of at least 7 days before deleting the secret. Some time after the deleted date, Secrets Manager deletes the secret, including all of its versions. If a secret is scheduled for deletion, then its details, including the encrypted secret value, is not accessible. To cancel a scheduled deletion and restore access to the secret, use [RestoreSecret].
    public var deletedDate: ClientRuntime.Date?
    /// The description of the secret.
    public var description: Swift.String?
    /// The key ID or alias ARN of the KMS key that Secrets Manager uses to encrypt the secret value. If the secret is encrypted with the Amazon Web Services managed key aws/secretsmanager, this field is omitted. Secrets created using the console use an KMS key ID.
    public var kmsKeyId: Swift.String?
    /// The date that the secret was last accessed in the Region. This field is omitted if the secret has never been retrieved in the Region.
    public var lastAccessedDate: ClientRuntime.Date?
    /// The last date and time that this secret was modified in any way.
    public var lastChangedDate: ClientRuntime.Date?
    /// The last date and time that Secrets Manager rotated the secret. If the secret isn't configured for rotation, Secrets Manager returns null.
    public var lastRotatedDate: ClientRuntime.Date?
    /// The name of the secret.
    public var name: Swift.String?
    /// The ID of the service that created this secret. For more information, see [Secrets managed by other Amazon Web Services services](https://docs.aws.amazon.com/secretsmanager/latest/userguide/service-linked-secrets.html).
    public var owningService: Swift.String?
    /// The Region the secret is in. If a secret is replicated to other Regions, the replicas are listed in ReplicationStatus.
    public var primaryRegion: Swift.String?
    /// A list of the replicas of this secret and their status:
    ///
    /// * Failed, which indicates that the replica was not created.
    ///
    /// * InProgress, which indicates that Secrets Manager is in the process of creating the replica.
    ///
    /// * InSync, which indicates that the replica was created.
    public var replicationStatus: [SecretsManagerClientTypes.ReplicationStatusType]?
    /// Specifies whether automatic rotation is turned on for this secret. To turn on rotation, use [RotateSecret]. To turn off rotation, use [CancelRotateSecret].
    public var rotationEnabled: Swift.Bool?
    /// The ARN of the Lambda function that Secrets Manager invokes to rotate the secret.
    public var rotationLambdaARN: Swift.String?
    /// The rotation schedule and Lambda function for this secret. If the secret previously had rotation turned on, but it is now turned off, this field shows the previous rotation schedule and rotation function. If the secret never had rotation turned on, this field is omitted.
    public var rotationRules: SecretsManagerClientTypes.RotationRulesType?
    /// The list of tags attached to the secret. To add tags to a secret, use [TagResource]. To remove tags, use [UntagResource].
    public var tags: [SecretsManagerClientTypes.Tag]?
    /// A list of the versions of the secret that have staging labels attached. Versions that don't have staging labels are considered deprecated and Secrets Manager can delete them. Secrets Manager uses staging labels to indicate the status of a secret version during rotation. The three staging labels for rotation are:
    ///
    /// * AWSCURRENT, which indicates the current version of the secret.
    ///
    /// * AWSPENDING, which indicates the version of the secret that contains new secret information that will become the next current version when rotation finishes. During rotation, Secrets Manager creates an AWSPENDING version ID before creating the new secret version. To check if a secret version exists, call [GetSecretValue].
    ///
    /// * AWSPREVIOUS, which indicates the previous current version of the secret. You can use this as the last known good version.
    ///
    ///
    /// For more information about rotation and staging labels, see [How rotation works](https://docs.aws.amazon.com/secretsmanager/latest/userguide/rotate-secrets_how.html).
    public var versionIdsToStages: [Swift.String:[Swift.String]]?

    public init (
        aRN: Swift.String? = nil,
        createdDate: ClientRuntime.Date? = nil,
        deletedDate: ClientRuntime.Date? = nil,
        description: Swift.String? = nil,
        kmsKeyId: Swift.String? = nil,
        lastAccessedDate: ClientRuntime.Date? = nil,
        lastChangedDate: ClientRuntime.Date? = nil,
        lastRotatedDate: ClientRuntime.Date? = nil,
        name: Swift.String? = nil,
        owningService: Swift.String? = nil,
        primaryRegion: Swift.String? = nil,
        replicationStatus: [SecretsManagerClientTypes.ReplicationStatusType]? = nil,
        rotationEnabled: Swift.Bool? = nil,
        rotationLambdaARN: Swift.String? = nil,
        rotationRules: SecretsManagerClientTypes.RotationRulesType? = nil,
        tags: [SecretsManagerClientTypes.Tag]? = nil,
        versionIdsToStages: [Swift.String:[Swift.String]]? = nil
    )
    {
        self.aRN = aRN
        self.createdDate = createdDate
        self.deletedDate = deletedDate
        self.description = description
        self.kmsKeyId = kmsKeyId
        self.lastAccessedDate = lastAccessedDate
        self.lastChangedDate = lastChangedDate
        self.lastRotatedDate = lastRotatedDate
        self.name = name
        self.owningService = owningService
        self.primaryRegion = primaryRegion
        self.replicationStatus = replicationStatus
        self.rotationEnabled = rotationEnabled
        self.rotationLambdaARN = rotationLambdaARN
        self.rotationRules = rotationRules
        self.tags = tags
        self.versionIdsToStages = versionIdsToStages
    }
}
