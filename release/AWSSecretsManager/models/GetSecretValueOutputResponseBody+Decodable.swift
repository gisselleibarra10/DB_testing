// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetSecretValueOutputResponseBody: Swift.Equatable {
    let aRN: Swift.String?
    let name: Swift.String?
    let versionId: Swift.String?
    let secretBinary: ClientRuntime.Data?
    let secretString: Swift.String?
    let versionStages: [Swift.String]?
    let createdDate: ClientRuntime.Date?
}

extension GetSecretValueOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case aRN = "ARN"
        case createdDate = "CreatedDate"
        case name = "Name"
        case secretBinary = "SecretBinary"
        case secretString = "SecretString"
        case versionId = "VersionId"
        case versionStages = "VersionStages"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let aRNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .aRN)
        aRN = aRNDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let versionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .versionId)
        versionId = versionIdDecoded
        let secretBinaryDecoded = try containerValues.decodeIfPresent(ClientRuntime.Data.self, forKey: .secretBinary)
        secretBinary = secretBinaryDecoded
        let secretStringDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .secretString)
        secretString = secretStringDecoded
        let versionStagesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .versionStages)
        var versionStagesDecoded0:[Swift.String]? = nil
        if let versionStagesContainer = versionStagesContainer {
            versionStagesDecoded0 = [Swift.String]()
            for string0 in versionStagesContainer {
                if let string0 = string0 {
                    versionStagesDecoded0?.append(string0)
                }
            }
        }
        versionStages = versionStagesDecoded0
        let createdDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdDate)
        createdDate = createdDateDecoded
    }
}
