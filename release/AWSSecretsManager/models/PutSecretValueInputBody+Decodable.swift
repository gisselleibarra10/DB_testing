// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct PutSecretValueInputBody: Swift.Equatable {
    let secretId: Swift.String?
    let clientRequestToken: Swift.String?
    let secretBinary: ClientRuntime.Data?
    let secretString: Swift.String?
    let versionStages: [Swift.String]?
}

extension PutSecretValueInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientRequestToken = "ClientRequestToken"
        case secretBinary = "SecretBinary"
        case secretId = "SecretId"
        case secretString = "SecretString"
        case versionStages = "VersionStages"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let secretIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .secretId)
        secretId = secretIdDecoded
        let clientRequestTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientRequestToken)
        clientRequestToken = clientRequestTokenDecoded
        let secretBinaryDecoded = try containerValues.decodeIfPresent(ClientRuntime.Data.self, forKey: .secretBinary)
        secretBinary = secretBinaryDecoded
        let secretStringDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .secretString)
        secretString = secretStringDecoded
        let versionStagesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .versionStages)
        var versionStagesDecoded0:[Swift.String]? = nil
        if let versionStagesContainer = versionStagesContainer {
            versionStagesDecoded0 = [Swift.String]()
            for string0 in versionStagesContainer {
                if let string0 = string0 {
                    versionStagesDecoded0?.append(string0)
                }
            }
        }
        versionStages = versionStagesDecoded0
    }
}
