// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListSecretVersionIdsOutputResponseBody: Swift.Equatable {
    let versions: [SecretsManagerClientTypes.SecretVersionsListEntry]?
    let nextToken: Swift.String?
    let aRN: Swift.String?
    let name: Swift.String?
}

extension ListSecretVersionIdsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case aRN = "ARN"
        case name = "Name"
        case nextToken = "NextToken"
        case versions = "Versions"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let versionsContainer = try containerValues.decodeIfPresent([SecretsManagerClientTypes.SecretVersionsListEntry?].self, forKey: .versions)
        var versionsDecoded0:[SecretsManagerClientTypes.SecretVersionsListEntry]? = nil
        if let versionsContainer = versionsContainer {
            versionsDecoded0 = [SecretsManagerClientTypes.SecretVersionsListEntry]()
            for structure0 in versionsContainer {
                if let structure0 = structure0 {
                    versionsDecoded0?.append(structure0)
                }
            }
        }
        versions = versionsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let aRNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .aRN)
        aRN = aRNDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
    }
}
