// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension PutSecretValueInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientRequestToken = "ClientRequestToken"
        case secretBinary = "SecretBinary"
        case secretId = "SecretId"
        case secretString = "SecretString"
        case versionStages = "VersionStages"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientRequestToken = self.clientRequestToken {
            try encodeContainer.encode(clientRequestToken, forKey: .clientRequestToken)
        }
        if let secretBinary = self.secretBinary {
            try encodeContainer.encode(secretBinary.base64EncodedString(), forKey: .secretBinary)
        }
        if let secretId = self.secretId {
            try encodeContainer.encode(secretId, forKey: .secretId)
        }
        if let secretString = self.secretString {
            try encodeContainer.encode(secretString, forKey: .secretString)
        }
        if let versionStages = versionStages {
            var versionStagesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .versionStages)
            for secretversionstagestype0 in versionStages {
                try versionStagesContainer.encode(secretversionstagestype0)
            }
        }
    }
}
