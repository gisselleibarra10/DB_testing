// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CodeGuruReviewerClientTypes.RepositoryAssociation: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case associationArn = "AssociationArn"
        case associationId = "AssociationId"
        case connectionArn = "ConnectionArn"
        case createdTimeStamp = "CreatedTimeStamp"
        case kMSKeyDetails = "KMSKeyDetails"
        case lastUpdatedTimeStamp = "LastUpdatedTimeStamp"
        case name = "Name"
        case owner = "Owner"
        case providerType = "ProviderType"
        case s3RepositoryDetails = "S3RepositoryDetails"
        case state = "State"
        case stateReason = "StateReason"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let associationArn = self.associationArn {
            try encodeContainer.encode(associationArn, forKey: .associationArn)
        }
        if let associationId = self.associationId {
            try encodeContainer.encode(associationId, forKey: .associationId)
        }
        if let connectionArn = self.connectionArn {
            try encodeContainer.encode(connectionArn, forKey: .connectionArn)
        }
        if let createdTimeStamp = self.createdTimeStamp {
            try encodeContainer.encode(createdTimeStamp.timeIntervalSince1970, forKey: .createdTimeStamp)
        }
        if let kMSKeyDetails = self.kMSKeyDetails {
            try encodeContainer.encode(kMSKeyDetails, forKey: .kMSKeyDetails)
        }
        if let lastUpdatedTimeStamp = self.lastUpdatedTimeStamp {
            try encodeContainer.encode(lastUpdatedTimeStamp.timeIntervalSince1970, forKey: .lastUpdatedTimeStamp)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let owner = self.owner {
            try encodeContainer.encode(owner, forKey: .owner)
        }
        if let providerType = self.providerType {
            try encodeContainer.encode(providerType.rawValue, forKey: .providerType)
        }
        if let s3RepositoryDetails = self.s3RepositoryDetails {
            try encodeContainer.encode(s3RepositoryDetails, forKey: .s3RepositoryDetails)
        }
        if let state = self.state {
            try encodeContainer.encode(state.rawValue, forKey: .state)
        }
        if let stateReason = self.stateReason {
            try encodeContainer.encode(stateReason, forKey: .stateReason)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let associationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .associationId)
        associationId = associationIdDecoded
        let associationArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .associationArn)
        associationArn = associationArnDecoded
        let connectionArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .connectionArn)
        connectionArn = connectionArnDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let ownerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .owner)
        owner = ownerDecoded
        let providerTypeDecoded = try containerValues.decodeIfPresent(CodeGuruReviewerClientTypes.ProviderType.self, forKey: .providerType)
        providerType = providerTypeDecoded
        let stateDecoded = try containerValues.decodeIfPresent(CodeGuruReviewerClientTypes.RepositoryAssociationState.self, forKey: .state)
        state = stateDecoded
        let stateReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stateReason)
        stateReason = stateReasonDecoded
        let lastUpdatedTimeStampDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastUpdatedTimeStamp)
        lastUpdatedTimeStamp = lastUpdatedTimeStampDecoded
        let createdTimeStampDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdTimeStamp)
        createdTimeStamp = createdTimeStampDecoded
        let kMSKeyDetailsDecoded = try containerValues.decodeIfPresent(CodeGuruReviewerClientTypes.KMSKeyDetails.self, forKey: .kMSKeyDetails)
        kMSKeyDetails = kMSKeyDetailsDecoded
        let s3RepositoryDetailsDecoded = try containerValues.decodeIfPresent(CodeGuruReviewerClientTypes.S3RepositoryDetails.self, forKey: .s3RepositoryDetails)
        s3RepositoryDetails = s3RepositoryDetailsDecoded
    }
}
