// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension CodeGuruReviewerClientTypes {
    public enum RecommendationCategory: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case awsBestPractices
        case awsCloudformationIssues
        case codeInconsistencies
        case codeMaintenanceIssues
        case concurrencyIssues
        case duplicateCode
        case inputValidations
        case javaBestPractices
        case pythonBestPractices
        case resourceLeaks
        case securityIssues
        case sdkUnknown(Swift.String)

        public static var allCases: [RecommendationCategory] {
            return [
                .awsBestPractices,
                .awsCloudformationIssues,
                .codeInconsistencies,
                .codeMaintenanceIssues,
                .concurrencyIssues,
                .duplicateCode,
                .inputValidations,
                .javaBestPractices,
                .pythonBestPractices,
                .resourceLeaks,
                .securityIssues,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .awsBestPractices: return "AWSBestPractices"
            case .awsCloudformationIssues: return "AWSCloudFormationIssues"
            case .codeInconsistencies: return "CodeInconsistencies"
            case .codeMaintenanceIssues: return "CodeMaintenanceIssues"
            case .concurrencyIssues: return "ConcurrencyIssues"
            case .duplicateCode: return "DuplicateCode"
            case .inputValidations: return "InputValidations"
            case .javaBestPractices: return "JavaBestPractices"
            case .pythonBestPractices: return "PythonBestPractices"
            case .resourceLeaks: return "ResourceLeaks"
            case .securityIssues: return "SecurityIssues"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = RecommendationCategory(rawValue: rawValue) ?? RecommendationCategory.sdkUnknown(rawValue)
        }
    }
}
