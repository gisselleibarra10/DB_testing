// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CodeGuruReviewerClientTypes.CodeReviewType: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case analysisTypes = "AnalysisTypes"
        case repositoryAnalysis = "RepositoryAnalysis"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let analysisTypes = analysisTypes {
            var analysisTypesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .analysisTypes)
            for analysistypes0 in analysisTypes {
                try analysisTypesContainer.encode(analysistypes0.rawValue)
            }
        }
        if let repositoryAnalysis = self.repositoryAnalysis {
            try encodeContainer.encode(repositoryAnalysis, forKey: .repositoryAnalysis)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let repositoryAnalysisDecoded = try containerValues.decodeIfPresent(CodeGuruReviewerClientTypes.RepositoryAnalysis.self, forKey: .repositoryAnalysis)
        repositoryAnalysis = repositoryAnalysisDecoded
        let analysisTypesContainer = try containerValues.decodeIfPresent([CodeGuruReviewerClientTypes.AnalysisType?].self, forKey: .analysisTypes)
        var analysisTypesDecoded0:[CodeGuruReviewerClientTypes.AnalysisType]? = nil
        if let analysisTypesContainer = analysisTypesContainer {
            analysisTypesDecoded0 = [CodeGuruReviewerClientTypes.AnalysisType]()
            for string0 in analysisTypesContainer {
                if let string0 = string0 {
                    analysisTypesDecoded0?.append(string0)
                }
            }
        }
        analysisTypes = analysisTypesDecoded0
    }
}
