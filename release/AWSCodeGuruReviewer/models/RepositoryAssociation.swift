// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CodeGuruReviewerClientTypes {
    /// Information about a repository association. The [DescribeRepositoryAssociation](https://docs.aws.amazon.com/codeguru/latest/reviewer-api/API_DescribeRepositoryAssociation.html) operation returns a RepositoryAssociation object.
    public struct RepositoryAssociation: Swift.Equatable {
        /// The Amazon Resource Name (ARN) identifying the repository association.
        public var associationArn: Swift.String?
        /// The ID of the repository association.
        public var associationId: Swift.String?
        /// The Amazon Resource Name (ARN) of an Amazon Web Services CodeStar Connections connection. Its format is arn:aws:codestar-connections:region-id:aws-account_id:connection/connection-id. For more information, see [Connection](https://docs.aws.amazon.com/codestar-connections/latest/APIReference/API_Connection.html) in the Amazon Web Services CodeStar Connections API Reference.
        public var connectionArn: Swift.String?
        /// The time, in milliseconds since the epoch, when the repository association was created.
        public var createdTimeStamp: ClientRuntime.Date?
        /// A KMSKeyDetails object that contains:
        ///
        /// * The encryption option for this repository association. It is either owned by Amazon Web Services Key Management Service (KMS) (AWS_OWNED_CMK) or customer managed (CUSTOMER_MANAGED_CMK).
        ///
        /// * The ID of the Amazon Web Services KMS key that is associated with this repository association.
        public var kMSKeyDetails: CodeGuruReviewerClientTypes.KMSKeyDetails?
        /// The time, in milliseconds since the epoch, when the repository association was last updated.
        public var lastUpdatedTimeStamp: ClientRuntime.Date?
        /// The name of the repository.
        public var name: Swift.String?
        /// The owner of the repository. For an Amazon Web Services CodeCommit repository, this is the Amazon Web Services account ID of the account that owns the repository. For a GitHub, GitHub Enterprise Server, or Bitbucket repository, this is the username for the account that owns the repository. For an S3 repository, it can be the username or Amazon Web Services account ID.
        public var owner: Swift.String?
        /// The provider type of the repository association.
        public var providerType: CodeGuruReviewerClientTypes.ProviderType?
        /// Specifies the name of an S3 bucket and a CodeArtifacts object that contains the S3 object keys for a source code .zip file and for a build artifacts .zip file that contains .jar or .class files.
        public var s3RepositoryDetails: CodeGuruReviewerClientTypes.S3RepositoryDetails?
        /// The state of the repository association. The valid repository association states are:
        ///
        /// * Associated: The repository association is complete.
        ///
        /// * Associating: CodeGuru Reviewer is:
        ///
        /// * Setting up pull request notifications. This is required for pull requests to trigger a CodeGuru Reviewer review. If your repository ProviderType is GitHub, GitHub Enterprise Server, or Bitbucket, CodeGuru Reviewer creates webhooks in your repository to trigger CodeGuru Reviewer reviews. If you delete these webhooks, reviews of code in your repository cannot be triggered.
        ///
        /// * Setting up source code access. This is required for CodeGuru Reviewer to securely clone code in your repository.
        ///
        ///
        ///
        ///
        /// * Failed: The repository failed to associate or disassociate.
        ///
        /// * Disassociating: CodeGuru Reviewer is removing the repository's pull request notifications and source code access.
        ///
        /// * Disassociated: CodeGuru Reviewer successfully disassociated the repository. You can create a new association with this repository if you want to review source code in it later. You can control access to code reviews created in anassociated repository with tags after it has been disassociated. For more information, see [Using tags to control access to associated repositories](https://docs.aws.amazon.com/codeguru/latest/reviewer-ug/auth-and-access-control-using-tags.html) in the Amazon CodeGuru Reviewer User Guide.
        public var state: CodeGuruReviewerClientTypes.RepositoryAssociationState?
        /// A description of why the repository association is in the current state.
        public var stateReason: Swift.String?

        public init (
            associationArn: Swift.String? = nil,
            associationId: Swift.String? = nil,
            connectionArn: Swift.String? = nil,
            createdTimeStamp: ClientRuntime.Date? = nil,
            kMSKeyDetails: CodeGuruReviewerClientTypes.KMSKeyDetails? = nil,
            lastUpdatedTimeStamp: ClientRuntime.Date? = nil,
            name: Swift.String? = nil,
            owner: Swift.String? = nil,
            providerType: CodeGuruReviewerClientTypes.ProviderType? = nil,
            s3RepositoryDetails: CodeGuruReviewerClientTypes.S3RepositoryDetails? = nil,
            state: CodeGuruReviewerClientTypes.RepositoryAssociationState? = nil,
            stateReason: Swift.String? = nil
        )
        {
            self.associationArn = associationArn
            self.associationId = associationId
            self.connectionArn = connectionArn
            self.createdTimeStamp = createdTimeStamp
            self.kMSKeyDetails = kMSKeyDetails
            self.lastUpdatedTimeStamp = lastUpdatedTimeStamp
            self.name = name
            self.owner = owner
            self.providerType = providerType
            self.s3RepositoryDetails = s3RepositoryDetails
            self.state = state
            self.stateReason = stateReason
        }
    }

}
