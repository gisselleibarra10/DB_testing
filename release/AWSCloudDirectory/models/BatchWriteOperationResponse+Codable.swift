// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CloudDirectoryClientTypes.BatchWriteOperationResponse: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case addFacetToObject = "AddFacetToObject"
        case attachObject = "AttachObject"
        case attachPolicy = "AttachPolicy"
        case attachToIndex = "AttachToIndex"
        case attachTypedLink = "AttachTypedLink"
        case createIndex = "CreateIndex"
        case createObject = "CreateObject"
        case deleteObject = "DeleteObject"
        case detachFromIndex = "DetachFromIndex"
        case detachObject = "DetachObject"
        case detachPolicy = "DetachPolicy"
        case detachTypedLink = "DetachTypedLink"
        case removeFacetFromObject = "RemoveFacetFromObject"
        case updateLinkAttributes = "UpdateLinkAttributes"
        case updateObjectAttributes = "UpdateObjectAttributes"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let addFacetToObject = self.addFacetToObject {
            try encodeContainer.encode(addFacetToObject, forKey: .addFacetToObject)
        }
        if let attachObject = self.attachObject {
            try encodeContainer.encode(attachObject, forKey: .attachObject)
        }
        if let attachPolicy = self.attachPolicy {
            try encodeContainer.encode(attachPolicy, forKey: .attachPolicy)
        }
        if let attachToIndex = self.attachToIndex {
            try encodeContainer.encode(attachToIndex, forKey: .attachToIndex)
        }
        if let attachTypedLink = self.attachTypedLink {
            try encodeContainer.encode(attachTypedLink, forKey: .attachTypedLink)
        }
        if let createIndex = self.createIndex {
            try encodeContainer.encode(createIndex, forKey: .createIndex)
        }
        if let createObject = self.createObject {
            try encodeContainer.encode(createObject, forKey: .createObject)
        }
        if let deleteObject = self.deleteObject {
            try encodeContainer.encode(deleteObject, forKey: .deleteObject)
        }
        if let detachFromIndex = self.detachFromIndex {
            try encodeContainer.encode(detachFromIndex, forKey: .detachFromIndex)
        }
        if let detachObject = self.detachObject {
            try encodeContainer.encode(detachObject, forKey: .detachObject)
        }
        if let detachPolicy = self.detachPolicy {
            try encodeContainer.encode(detachPolicy, forKey: .detachPolicy)
        }
        if let detachTypedLink = self.detachTypedLink {
            try encodeContainer.encode(detachTypedLink, forKey: .detachTypedLink)
        }
        if let removeFacetFromObject = self.removeFacetFromObject {
            try encodeContainer.encode(removeFacetFromObject, forKey: .removeFacetFromObject)
        }
        if let updateLinkAttributes = self.updateLinkAttributes {
            try encodeContainer.encode(updateLinkAttributes, forKey: .updateLinkAttributes)
        }
        if let updateObjectAttributes = self.updateObjectAttributes {
            try encodeContainer.encode(updateObjectAttributes, forKey: .updateObjectAttributes)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let createObjectDecoded = try containerValues.decodeIfPresent(CloudDirectoryClientTypes.BatchCreateObjectResponse.self, forKey: .createObject)
        createObject = createObjectDecoded
        let attachObjectDecoded = try containerValues.decodeIfPresent(CloudDirectoryClientTypes.BatchAttachObjectResponse.self, forKey: .attachObject)
        attachObject = attachObjectDecoded
        let detachObjectDecoded = try containerValues.decodeIfPresent(CloudDirectoryClientTypes.BatchDetachObjectResponse.self, forKey: .detachObject)
        detachObject = detachObjectDecoded
        let updateObjectAttributesDecoded = try containerValues.decodeIfPresent(CloudDirectoryClientTypes.BatchUpdateObjectAttributesResponse.self, forKey: .updateObjectAttributes)
        updateObjectAttributes = updateObjectAttributesDecoded
        let deleteObjectDecoded = try containerValues.decodeIfPresent(CloudDirectoryClientTypes.BatchDeleteObjectResponse.self, forKey: .deleteObject)
        deleteObject = deleteObjectDecoded
        let addFacetToObjectDecoded = try containerValues.decodeIfPresent(CloudDirectoryClientTypes.BatchAddFacetToObjectResponse.self, forKey: .addFacetToObject)
        addFacetToObject = addFacetToObjectDecoded
        let removeFacetFromObjectDecoded = try containerValues.decodeIfPresent(CloudDirectoryClientTypes.BatchRemoveFacetFromObjectResponse.self, forKey: .removeFacetFromObject)
        removeFacetFromObject = removeFacetFromObjectDecoded
        let attachPolicyDecoded = try containerValues.decodeIfPresent(CloudDirectoryClientTypes.BatchAttachPolicyResponse.self, forKey: .attachPolicy)
        attachPolicy = attachPolicyDecoded
        let detachPolicyDecoded = try containerValues.decodeIfPresent(CloudDirectoryClientTypes.BatchDetachPolicyResponse.self, forKey: .detachPolicy)
        detachPolicy = detachPolicyDecoded
        let createIndexDecoded = try containerValues.decodeIfPresent(CloudDirectoryClientTypes.BatchCreateIndexResponse.self, forKey: .createIndex)
        createIndex = createIndexDecoded
        let attachToIndexDecoded = try containerValues.decodeIfPresent(CloudDirectoryClientTypes.BatchAttachToIndexResponse.self, forKey: .attachToIndex)
        attachToIndex = attachToIndexDecoded
        let detachFromIndexDecoded = try containerValues.decodeIfPresent(CloudDirectoryClientTypes.BatchDetachFromIndexResponse.self, forKey: .detachFromIndex)
        detachFromIndex = detachFromIndexDecoded
        let attachTypedLinkDecoded = try containerValues.decodeIfPresent(CloudDirectoryClientTypes.BatchAttachTypedLinkResponse.self, forKey: .attachTypedLink)
        attachTypedLink = attachTypedLinkDecoded
        let detachTypedLinkDecoded = try containerValues.decodeIfPresent(CloudDirectoryClientTypes.BatchDetachTypedLinkResponse.self, forKey: .detachTypedLink)
        detachTypedLink = detachTypedLinkDecoded
        let updateLinkAttributesDecoded = try containerValues.decodeIfPresent(CloudDirectoryClientTypes.BatchUpdateLinkAttributesResponse.self, forKey: .updateLinkAttributes)
        updateLinkAttributes = updateLinkAttributesDecoded
    }
}
