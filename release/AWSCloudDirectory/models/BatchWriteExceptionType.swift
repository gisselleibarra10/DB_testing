// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension CloudDirectoryClientTypes {
    public enum BatchWriteExceptionType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case accessdeniedexception
        case directorynotenabledexception
        case facetvalidationexception
        case indexedattributemissingexception
        case internalserviceexception
        case invalidarnexception
        case invalidattachmentexception
        case limitexceededexception
        case linknamealreadyinuseexception
        case notindexexception
        case notnodeexception
        case notpolicyexception
        case objectalreadydetachedexception
        case objectnotdetachedexception
        case resourcenotfoundexception
        case stillcontainslinksexception
        case unsupportedindextypeexception
        case validationexception
        case sdkUnknown(Swift.String)

        public static var allCases: [BatchWriteExceptionType] {
            return [
                .accessdeniedexception,
                .directorynotenabledexception,
                .facetvalidationexception,
                .indexedattributemissingexception,
                .internalserviceexception,
                .invalidarnexception,
                .invalidattachmentexception,
                .limitexceededexception,
                .linknamealreadyinuseexception,
                .notindexexception,
                .notnodeexception,
                .notpolicyexception,
                .objectalreadydetachedexception,
                .objectnotdetachedexception,
                .resourcenotfoundexception,
                .stillcontainslinksexception,
                .unsupportedindextypeexception,
                .validationexception,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .accessdeniedexception: return "AccessDeniedException"
            case .directorynotenabledexception: return "DirectoryNotEnabledException"
            case .facetvalidationexception: return "FacetValidationException"
            case .indexedattributemissingexception: return "IndexedAttributeMissingException"
            case .internalserviceexception: return "InternalServiceException"
            case .invalidarnexception: return "InvalidArnException"
            case .invalidattachmentexception: return "InvalidAttachmentException"
            case .limitexceededexception: return "LimitExceededException"
            case .linknamealreadyinuseexception: return "LinkNameAlreadyInUseException"
            case .notindexexception: return "NotIndexException"
            case .notnodeexception: return "NotNodeException"
            case .notpolicyexception: return "NotPolicyException"
            case .objectalreadydetachedexception: return "ObjectAlreadyDetachedException"
            case .objectnotdetachedexception: return "ObjectNotDetachedException"
            case .resourcenotfoundexception: return "ResourceNotFoundException"
            case .stillcontainslinksexception: return "StillContainsLinksException"
            case .unsupportedindextypeexception: return "UnsupportedIndexTypeException"
            case .validationexception: return "ValidationException"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = BatchWriteExceptionType(rawValue: rawValue) ?? BatchWriteExceptionType.sdkUnknown(rawValue)
        }
    }
}
