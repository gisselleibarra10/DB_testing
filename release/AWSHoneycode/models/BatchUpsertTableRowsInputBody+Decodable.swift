// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct BatchUpsertTableRowsInputBody: Swift.Equatable {
    let rowsToUpsert: [HoneycodeClientTypes.UpsertRowData]?
    let clientRequestToken: Swift.String?
}

extension BatchUpsertTableRowsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientRequestToken
        case rowsToUpsert
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let rowsToUpsertContainer = try containerValues.decodeIfPresent([HoneycodeClientTypes.UpsertRowData?].self, forKey: .rowsToUpsert)
        var rowsToUpsertDecoded0:[HoneycodeClientTypes.UpsertRowData]? = nil
        if let rowsToUpsertContainer = rowsToUpsertContainer {
            rowsToUpsertDecoded0 = [HoneycodeClientTypes.UpsertRowData]()
            for structure0 in rowsToUpsertContainer {
                if let structure0 = structure0 {
                    rowsToUpsertDecoded0?.append(structure0)
                }
            }
        }
        rowsToUpsert = rowsToUpsertDecoded0
        let clientRequestTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientRequestToken)
        clientRequestToken = clientRequestTokenDecoded
    }
}
