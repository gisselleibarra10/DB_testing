// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension HoneycodeClientTypes {
    public enum ErrorCode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case accessdenied
        case fileemptyerror
        case filenotfounderror
        case fileparsingerror
        case filesizelimiterror
        case invalidfiletypeerror
        case invalidimportoptionserror
        case invalidtablecolumniderror
        case invalidtableiderror
        case invalidurlerror
        case resourcenotfounderror
        case systemlimiterror
        case tablenotfounderror
        case unknownerror
        case sdkUnknown(Swift.String)

        public static var allCases: [ErrorCode] {
            return [
                .accessdenied,
                .fileemptyerror,
                .filenotfounderror,
                .fileparsingerror,
                .filesizelimiterror,
                .invalidfiletypeerror,
                .invalidimportoptionserror,
                .invalidtablecolumniderror,
                .invalidtableiderror,
                .invalidurlerror,
                .resourcenotfounderror,
                .systemlimiterror,
                .tablenotfounderror,
                .unknownerror,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .accessdenied: return "ACCESS_DENIED"
            case .fileemptyerror: return "FILE_EMPTY_ERROR"
            case .filenotfounderror: return "FILE_NOT_FOUND_ERROR"
            case .fileparsingerror: return "FILE_PARSING_ERROR"
            case .filesizelimiterror: return "FILE_SIZE_LIMIT_ERROR"
            case .invalidfiletypeerror: return "INVALID_FILE_TYPE_ERROR"
            case .invalidimportoptionserror: return "INVALID_IMPORT_OPTIONS_ERROR"
            case .invalidtablecolumniderror: return "INVALID_TABLE_COLUMN_ID_ERROR"
            case .invalidtableiderror: return "INVALID_TABLE_ID_ERROR"
            case .invalidurlerror: return "INVALID_URL_ERROR"
            case .resourcenotfounderror: return "RESOURCE_NOT_FOUND_ERROR"
            case .systemlimiterror: return "SYSTEM_LIMIT_ERROR"
            case .tablenotfounderror: return "TABLE_NOT_FOUND_ERROR"
            case .unknownerror: return "UNKNOWN_ERROR"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ErrorCode(rawValue: rawValue) ?? ErrorCode.sdkUnknown(rawValue)
        }
    }
}
