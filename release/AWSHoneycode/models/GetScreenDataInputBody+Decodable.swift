// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetScreenDataInputBody: Swift.Equatable {
    let workbookId: Swift.String?
    let appId: Swift.String?
    let screenId: Swift.String?
    let variables: [Swift.String:HoneycodeClientTypes.VariableValue]?
    let maxResults: Swift.Int?
    let nextToken: Swift.String?
}

extension GetScreenDataInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case appId
        case maxResults
        case nextToken
        case screenId
        case variables
        case workbookId
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let workbookIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .workbookId)
        workbookId = workbookIdDecoded
        let appIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .appId)
        appId = appIdDecoded
        let screenIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .screenId)
        screenId = screenIdDecoded
        let variablesContainer = try containerValues.decodeIfPresent([Swift.String: HoneycodeClientTypes.VariableValue?].self, forKey: .variables)
        var variablesDecoded0: [Swift.String:HoneycodeClientTypes.VariableValue]? = nil
        if let variablesContainer = variablesContainer {
            variablesDecoded0 = [Swift.String:HoneycodeClientTypes.VariableValue]()
            for (key0, variablevalue0) in variablesContainer {
                if let variablevalue0 = variablevalue0 {
                    variablesDecoded0?[key0] = variablevalue0
                }
            }
        }
        variables = variablesDecoded0
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
