// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension HoneycodeClientTypes.ResultRow: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dataItems
        case rowId
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dataItems = dataItems {
            var dataItemsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .dataItems)
            for dataitems0 in dataItems {
                try dataItemsContainer.encode(dataitems0)
            }
        }
        if let rowId = self.rowId {
            try encodeContainer.encode(rowId, forKey: .rowId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let rowIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .rowId)
        rowId = rowIdDecoded
        let dataItemsContainer = try containerValues.decodeIfPresent([HoneycodeClientTypes.DataItem?].self, forKey: .dataItems)
        var dataItemsDecoded0:[HoneycodeClientTypes.DataItem]? = nil
        if let dataItemsContainer = dataItemsContainer {
            dataItemsDecoded0 = [HoneycodeClientTypes.DataItem]()
            for structure0 in dataItemsContainer {
                if let structure0 = structure0 {
                    dataItemsDecoded0?.append(structure0)
                }
            }
        }
        dataItems = dataItemsDecoded0
    }
}
