// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetScreenDataOutputResponseBody: Swift.Equatable {
    let results: [Swift.String:HoneycodeClientTypes.ResultSet]?
    let workbookCursor: Swift.Int
    let nextToken: Swift.String?
}

extension GetScreenDataOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken
        case results
        case workbookCursor
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resultsContainer = try containerValues.decodeIfPresent([Swift.String: HoneycodeClientTypes.ResultSet?].self, forKey: .results)
        var resultsDecoded0: [Swift.String:HoneycodeClientTypes.ResultSet]? = nil
        if let resultsContainer = resultsContainer {
            resultsDecoded0 = [Swift.String:HoneycodeClientTypes.ResultSet]()
            for (key0, resultset0) in resultsContainer {
                if let resultset0 = resultset0 {
                    resultsDecoded0?[key0] = resultset0
                }
            }
        }
        results = resultsDecoded0
        let workbookCursorDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .workbookCursor) ?? 0
        workbookCursor = workbookCursorDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
