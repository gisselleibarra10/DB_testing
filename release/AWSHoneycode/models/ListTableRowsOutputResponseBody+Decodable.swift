// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListTableRowsOutputResponseBody: Swift.Equatable {
    let columnIds: [Swift.String]?
    let rows: [HoneycodeClientTypes.TableRow]?
    let rowIdsNotFound: [Swift.String]?
    let nextToken: Swift.String?
    let workbookCursor: Swift.Int
}

extension ListTableRowsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case columnIds
        case nextToken
        case rowIdsNotFound
        case rows
        case workbookCursor
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let columnIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .columnIds)
        var columnIdsDecoded0:[Swift.String]? = nil
        if let columnIdsContainer = columnIdsContainer {
            columnIdsDecoded0 = [Swift.String]()
            for string0 in columnIdsContainer {
                if let string0 = string0 {
                    columnIdsDecoded0?.append(string0)
                }
            }
        }
        columnIds = columnIdsDecoded0
        let rowsContainer = try containerValues.decodeIfPresent([HoneycodeClientTypes.TableRow?].self, forKey: .rows)
        var rowsDecoded0:[HoneycodeClientTypes.TableRow]? = nil
        if let rowsContainer = rowsContainer {
            rowsDecoded0 = [HoneycodeClientTypes.TableRow]()
            for structure0 in rowsContainer {
                if let structure0 = structure0 {
                    rowsDecoded0?.append(structure0)
                }
            }
        }
        rows = rowsDecoded0
        let rowIdsNotFoundContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .rowIdsNotFound)
        var rowIdsNotFoundDecoded0:[Swift.String]? = nil
        if let rowIdsNotFoundContainer = rowIdsNotFoundContainer {
            rowIdsNotFoundDecoded0 = [Swift.String]()
            for string0 in rowIdsNotFoundContainer {
                if let string0 = string0 {
                    rowIdsNotFoundDecoded0?.append(string0)
                }
            }
        }
        rowIdsNotFound = rowIdsNotFoundDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let workbookCursorDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .workbookCursor) ?? 0
        workbookCursor = workbookCursorDecoded
    }
}
