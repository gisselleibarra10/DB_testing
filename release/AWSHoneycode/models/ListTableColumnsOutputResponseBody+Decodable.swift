// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListTableColumnsOutputResponseBody: Swift.Equatable {
    let tableColumns: [HoneycodeClientTypes.TableColumn]?
    let nextToken: Swift.String?
    let workbookCursor: Swift.Int
}

extension ListTableColumnsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken
        case tableColumns
        case workbookCursor
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tableColumnsContainer = try containerValues.decodeIfPresent([HoneycodeClientTypes.TableColumn?].self, forKey: .tableColumns)
        var tableColumnsDecoded0:[HoneycodeClientTypes.TableColumn]? = nil
        if let tableColumnsContainer = tableColumnsContainer {
            tableColumnsDecoded0 = [HoneycodeClientTypes.TableColumn]()
            for structure0 in tableColumnsContainer {
                if let structure0 = structure0 {
                    tableColumnsDecoded0?.append(structure0)
                }
            }
        }
        tableColumns = tableColumnsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let workbookCursorDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .workbookCursor) ?? 0
        workbookCursor = workbookCursorDecoded
    }
}
