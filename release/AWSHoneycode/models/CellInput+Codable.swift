// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension HoneycodeClientTypes.CellInput: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case fact
        case facts
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let fact = self.fact {
            try encodeContainer.encode(fact, forKey: .fact)
        }
        if let facts = facts {
            var factsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .facts)
            for factlist0 in facts {
                try factsContainer.encode(factlist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let factDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fact)
        fact = factDecoded
        let factsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .facts)
        var factsDecoded0:[Swift.String]? = nil
        if let factsContainer = factsContainer {
            factsDecoded0 = [Swift.String]()
            for string0 in factsContainer {
                if let string0 = string0 {
                    factsDecoded0?.append(string0)
                }
            }
        }
        facts = factsDecoded0
    }
}
