// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension HoneycodeClientTypes.UpsertRowsResult: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case rowIds
        case upsertAction
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let rowIds = rowIds {
            var rowIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .rowIds)
            for rowidlist0 in rowIds {
                try rowIdsContainer.encode(rowidlist0)
            }
        }
        if let upsertAction = self.upsertAction {
            try encodeContainer.encode(upsertAction.rawValue, forKey: .upsertAction)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let rowIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .rowIds)
        var rowIdsDecoded0:[Swift.String]? = nil
        if let rowIdsContainer = rowIdsContainer {
            rowIdsDecoded0 = [Swift.String]()
            for string0 in rowIdsContainer {
                if let string0 = string0 {
                    rowIdsDecoded0?.append(string0)
                }
            }
        }
        rowIds = rowIdsDecoded0
        let upsertActionDecoded = try containerValues.decodeIfPresent(HoneycodeClientTypes.UpsertAction.self, forKey: .upsertAction)
        upsertAction = upsertActionDecoded
    }
}
