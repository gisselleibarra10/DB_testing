// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension HoneycodeClientTypes.TableRow: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cells
        case rowId
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cells = cells {
            var cellsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .cells)
            for cells0 in cells {
                try cellsContainer.encode(cells0)
            }
        }
        if let rowId = self.rowId {
            try encodeContainer.encode(rowId, forKey: .rowId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let rowIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .rowId)
        rowId = rowIdDecoded
        let cellsContainer = try containerValues.decodeIfPresent([HoneycodeClientTypes.Cell?].self, forKey: .cells)
        var cellsDecoded0:[HoneycodeClientTypes.Cell]? = nil
        if let cellsContainer = cellsContainer {
            cellsDecoded0 = [HoneycodeClientTypes.Cell]()
            for structure0 in cellsContainer {
                if let structure0 = structure0 {
                    cellsDecoded0?.append(structure0)
                }
            }
        }
        cells = cellsDecoded0
    }
}
