// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension OutpostsClientTypes {
    /// Information about the physical and logistical details for racks at sites. For more information about hardware requirements for racks, see [Network readiness checklist](https://docs.aws.amazon.com/outposts/latest/userguide/outposts-requirements.html#checklist) in the Amazon Web Services Outposts User Guide.
    public struct RackPhysicalProperties: Swift.Equatable {
        /// The type of fiber used to attach the Outpost to the network.
        public var fiberOpticCableType: OutpostsClientTypes.FiberOpticCableType?
        /// The maximum rack weight that this site can support. NO_LIMIT is over 2000 lbs (907 kg).
        public var maximumSupportedWeightLbs: OutpostsClientTypes.MaximumSupportedWeightLbs?
        /// The type of optical standard used to attach the Outpost to the network. This field is dependent on uplink speed, fiber type, and distance to the upstream device. For more information about networking requirements for racks, see [Network](https://docs.aws.amazon.com/outposts/latest/userguide/outposts-requirements.html#facility-networking) in the Amazon Web Services Outposts User Guide.
        public var opticalStandard: OutpostsClientTypes.OpticalStandard?
        /// The power connector for the hardware.
        public var powerConnector: OutpostsClientTypes.PowerConnector?
        /// The power draw available at the hardware placement position for the rack.
        public var powerDrawKva: OutpostsClientTypes.PowerDrawKva?
        /// The position of the power feed.
        public var powerFeedDrop: OutpostsClientTypes.PowerFeedDrop?
        /// The power option that you can provide for hardware.
        public var powerPhase: OutpostsClientTypes.PowerPhase?
        /// The number of uplinks each Outpost network device.
        public var uplinkCount: OutpostsClientTypes.UplinkCount?
        /// The uplink speed the rack supports for the connection to the Region.
        public var uplinkGbps: OutpostsClientTypes.UplinkGbps?

        public init (
            fiberOpticCableType: OutpostsClientTypes.FiberOpticCableType? = nil,
            maximumSupportedWeightLbs: OutpostsClientTypes.MaximumSupportedWeightLbs? = nil,
            opticalStandard: OutpostsClientTypes.OpticalStandard? = nil,
            powerConnector: OutpostsClientTypes.PowerConnector? = nil,
            powerDrawKva: OutpostsClientTypes.PowerDrawKva? = nil,
            powerFeedDrop: OutpostsClientTypes.PowerFeedDrop? = nil,
            powerPhase: OutpostsClientTypes.PowerPhase? = nil,
            uplinkCount: OutpostsClientTypes.UplinkCount? = nil,
            uplinkGbps: OutpostsClientTypes.UplinkGbps? = nil
        )
        {
            self.fiberOpticCableType = fiberOpticCableType
            self.maximumSupportedWeightLbs = maximumSupportedWeightLbs
            self.opticalStandard = opticalStandard
            self.powerConnector = powerConnector
            self.powerDrawKva = powerDrawKva
            self.powerFeedDrop = powerFeedDrop
            self.powerPhase = powerPhase
            self.uplinkCount = uplinkCount
            self.uplinkGbps = uplinkGbps
        }
    }

}
