// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension OutpostsClientTypes.ConnectionDetails: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case allowedIps = "AllowedIps"
        case clientPublicKey = "ClientPublicKey"
        case clientTunnelAddress = "ClientTunnelAddress"
        case serverEndpoint = "ServerEndpoint"
        case serverPublicKey = "ServerPublicKey"
        case serverTunnelAddress = "ServerTunnelAddress"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let allowedIps = allowedIps {
            var allowedIpsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .allowedIps)
            for cidrlist0 in allowedIps {
                try allowedIpsContainer.encode(cidrlist0)
            }
        }
        if let clientPublicKey = self.clientPublicKey {
            try encodeContainer.encode(clientPublicKey, forKey: .clientPublicKey)
        }
        if let clientTunnelAddress = self.clientTunnelAddress {
            try encodeContainer.encode(clientTunnelAddress, forKey: .clientTunnelAddress)
        }
        if let serverEndpoint = self.serverEndpoint {
            try encodeContainer.encode(serverEndpoint, forKey: .serverEndpoint)
        }
        if let serverPublicKey = self.serverPublicKey {
            try encodeContainer.encode(serverPublicKey, forKey: .serverPublicKey)
        }
        if let serverTunnelAddress = self.serverTunnelAddress {
            try encodeContainer.encode(serverTunnelAddress, forKey: .serverTunnelAddress)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clientPublicKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientPublicKey)
        clientPublicKey = clientPublicKeyDecoded
        let serverPublicKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serverPublicKey)
        serverPublicKey = serverPublicKeyDecoded
        let serverEndpointDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serverEndpoint)
        serverEndpoint = serverEndpointDecoded
        let clientTunnelAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientTunnelAddress)
        clientTunnelAddress = clientTunnelAddressDecoded
        let serverTunnelAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serverTunnelAddress)
        serverTunnelAddress = serverTunnelAddressDecoded
        let allowedIpsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .allowedIps)
        var allowedIpsDecoded0:[Swift.String]? = nil
        if let allowedIpsContainer = allowedIpsContainer {
            allowedIpsDecoded0 = [Swift.String]()
            for string0 in allowedIpsContainer {
                if let string0 = string0 {
                    allowedIpsDecoded0?.append(string0)
                }
            }
        }
        allowedIps = allowedIpsDecoded0
    }
}
