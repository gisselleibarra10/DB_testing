// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension UpdateSiteRackPhysicalPropertiesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case fiberOpticCableType = "FiberOpticCableType"
        case maximumSupportedWeightLbs = "MaximumSupportedWeightLbs"
        case opticalStandard = "OpticalStandard"
        case powerConnector = "PowerConnector"
        case powerDrawKva = "PowerDrawKva"
        case powerFeedDrop = "PowerFeedDrop"
        case powerPhase = "PowerPhase"
        case uplinkCount = "UplinkCount"
        case uplinkGbps = "UplinkGbps"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let fiberOpticCableType = self.fiberOpticCableType {
            try encodeContainer.encode(fiberOpticCableType.rawValue, forKey: .fiberOpticCableType)
        }
        if let maximumSupportedWeightLbs = self.maximumSupportedWeightLbs {
            try encodeContainer.encode(maximumSupportedWeightLbs.rawValue, forKey: .maximumSupportedWeightLbs)
        }
        if let opticalStandard = self.opticalStandard {
            try encodeContainer.encode(opticalStandard.rawValue, forKey: .opticalStandard)
        }
        if let powerConnector = self.powerConnector {
            try encodeContainer.encode(powerConnector.rawValue, forKey: .powerConnector)
        }
        if let powerDrawKva = self.powerDrawKva {
            try encodeContainer.encode(powerDrawKva.rawValue, forKey: .powerDrawKva)
        }
        if let powerFeedDrop = self.powerFeedDrop {
            try encodeContainer.encode(powerFeedDrop.rawValue, forKey: .powerFeedDrop)
        }
        if let powerPhase = self.powerPhase {
            try encodeContainer.encode(powerPhase.rawValue, forKey: .powerPhase)
        }
        if let uplinkCount = self.uplinkCount {
            try encodeContainer.encode(uplinkCount.rawValue, forKey: .uplinkCount)
        }
        if let uplinkGbps = self.uplinkGbps {
            try encodeContainer.encode(uplinkGbps.rawValue, forKey: .uplinkGbps)
        }
    }
}
