// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension OutpostsClientTypes.OrderSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case lineItemCountsByStatus = "LineItemCountsByStatus"
        case orderFulfilledDate = "OrderFulfilledDate"
        case orderId = "OrderId"
        case orderSubmissionDate = "OrderSubmissionDate"
        case orderType = "OrderType"
        case outpostId = "OutpostId"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let lineItemCountsByStatus = lineItemCountsByStatus {
            var lineItemCountsByStatusContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .lineItemCountsByStatus)
            for (dictKey0, lineitemstatuscounts0) in lineItemCountsByStatus {
                try lineItemCountsByStatusContainer.encode(lineitemstatuscounts0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let orderFulfilledDate = self.orderFulfilledDate {
            try encodeContainer.encode(orderFulfilledDate.timeIntervalSince1970, forKey: .orderFulfilledDate)
        }
        if let orderId = self.orderId {
            try encodeContainer.encode(orderId, forKey: .orderId)
        }
        if let orderSubmissionDate = self.orderSubmissionDate {
            try encodeContainer.encode(orderSubmissionDate.timeIntervalSince1970, forKey: .orderSubmissionDate)
        }
        if let orderType = self.orderType {
            try encodeContainer.encode(orderType.rawValue, forKey: .orderType)
        }
        if let outpostId = self.outpostId {
            try encodeContainer.encode(outpostId, forKey: .outpostId)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let outpostIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .outpostId)
        outpostId = outpostIdDecoded
        let orderIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .orderId)
        orderId = orderIdDecoded
        let orderTypeDecoded = try containerValues.decodeIfPresent(OutpostsClientTypes.OrderType.self, forKey: .orderType)
        orderType = orderTypeDecoded
        let statusDecoded = try containerValues.decodeIfPresent(OutpostsClientTypes.OrderStatus.self, forKey: .status)
        status = statusDecoded
        let lineItemCountsByStatusContainer = try containerValues.decodeIfPresent([Swift.String: Swift.Int?].self, forKey: .lineItemCountsByStatus)
        var lineItemCountsByStatusDecoded0: [Swift.String:Swift.Int]? = nil
        if let lineItemCountsByStatusContainer = lineItemCountsByStatusContainer {
            lineItemCountsByStatusDecoded0 = [Swift.String:Swift.Int]()
            for (key0, lineitemquantity0) in lineItemCountsByStatusContainer {
                if let lineitemquantity0 = lineitemquantity0 {
                    lineItemCountsByStatusDecoded0?[key0] = lineitemquantity0
                }
            }
        }
        lineItemCountsByStatus = lineItemCountsByStatusDecoded0
        let orderSubmissionDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .orderSubmissionDate)
        orderSubmissionDate = orderSubmissionDateDecoded
        let orderFulfilledDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .orderFulfilledDate)
        orderFulfilledDate = orderFulfilledDateDecoded
    }
}
