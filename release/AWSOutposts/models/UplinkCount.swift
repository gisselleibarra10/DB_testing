// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension OutpostsClientTypes {
    public enum UplinkCount: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case uplinkCount1
        case uplinkCount12
        case uplinkCount16
        case uplinkCount2
        case uplinkCount3
        case uplinkCount4
        case uplinkCount5
        case uplinkCount6
        case uplinkCount7
        case uplinkCount8
        case sdkUnknown(Swift.String)

        public static var allCases: [UplinkCount] {
            return [
                .uplinkCount1,
                .uplinkCount12,
                .uplinkCount16,
                .uplinkCount2,
                .uplinkCount3,
                .uplinkCount4,
                .uplinkCount5,
                .uplinkCount6,
                .uplinkCount7,
                .uplinkCount8,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .uplinkCount1: return "UPLINK_COUNT_1"
            case .uplinkCount12: return "UPLINK_COUNT_12"
            case .uplinkCount16: return "UPLINK_COUNT_16"
            case .uplinkCount2: return "UPLINK_COUNT_2"
            case .uplinkCount3: return "UPLINK_COUNT_3"
            case .uplinkCount4: return "UPLINK_COUNT_4"
            case .uplinkCount5: return "UPLINK_COUNT_5"
            case .uplinkCount6: return "UPLINK_COUNT_6"
            case .uplinkCount7: return "UPLINK_COUNT_7"
            case .uplinkCount8: return "UPLINK_COUNT_8"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = UplinkCount(rawValue: rawValue) ?? UplinkCount.sdkUnknown(rawValue)
        }
    }
}
