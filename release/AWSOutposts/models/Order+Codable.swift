// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension OutpostsClientTypes.Order: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case lineItems = "LineItems"
        case orderFulfilledDate = "OrderFulfilledDate"
        case orderId = "OrderId"
        case orderSubmissionDate = "OrderSubmissionDate"
        case outpostId = "OutpostId"
        case paymentOption = "PaymentOption"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let lineItems = lineItems {
            var lineItemsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .lineItems)
            for lineitemlistdefinition0 in lineItems {
                try lineItemsContainer.encode(lineitemlistdefinition0)
            }
        }
        if let orderFulfilledDate = self.orderFulfilledDate {
            try encodeContainer.encode(orderFulfilledDate.timeIntervalSince1970, forKey: .orderFulfilledDate)
        }
        if let orderId = self.orderId {
            try encodeContainer.encode(orderId, forKey: .orderId)
        }
        if let orderSubmissionDate = self.orderSubmissionDate {
            try encodeContainer.encode(orderSubmissionDate.timeIntervalSince1970, forKey: .orderSubmissionDate)
        }
        if let outpostId = self.outpostId {
            try encodeContainer.encode(outpostId, forKey: .outpostId)
        }
        if let paymentOption = self.paymentOption {
            try encodeContainer.encode(paymentOption.rawValue, forKey: .paymentOption)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let outpostIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .outpostId)
        outpostId = outpostIdDecoded
        let orderIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .orderId)
        orderId = orderIdDecoded
        let statusDecoded = try containerValues.decodeIfPresent(OutpostsClientTypes.OrderStatus.self, forKey: .status)
        status = statusDecoded
        let lineItemsContainer = try containerValues.decodeIfPresent([OutpostsClientTypes.LineItem?].self, forKey: .lineItems)
        var lineItemsDecoded0:[OutpostsClientTypes.LineItem]? = nil
        if let lineItemsContainer = lineItemsContainer {
            lineItemsDecoded0 = [OutpostsClientTypes.LineItem]()
            for structure0 in lineItemsContainer {
                if let structure0 = structure0 {
                    lineItemsDecoded0?.append(structure0)
                }
            }
        }
        lineItems = lineItemsDecoded0
        let paymentOptionDecoded = try containerValues.decodeIfPresent(OutpostsClientTypes.PaymentOption.self, forKey: .paymentOption)
        paymentOption = paymentOptionDecoded
        let orderSubmissionDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .orderSubmissionDate)
        orderSubmissionDate = orderSubmissionDateDecoded
        let orderFulfilledDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .orderFulfilledDate)
        orderFulfilledDate = orderFulfilledDateDecoded
    }
}
