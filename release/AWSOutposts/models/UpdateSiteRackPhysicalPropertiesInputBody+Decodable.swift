// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct UpdateSiteRackPhysicalPropertiesInputBody: Swift.Equatable {
    let powerDrawKva: OutpostsClientTypes.PowerDrawKva?
    let powerPhase: OutpostsClientTypes.PowerPhase?
    let powerConnector: OutpostsClientTypes.PowerConnector?
    let powerFeedDrop: OutpostsClientTypes.PowerFeedDrop?
    let uplinkGbps: OutpostsClientTypes.UplinkGbps?
    let uplinkCount: OutpostsClientTypes.UplinkCount?
    let fiberOpticCableType: OutpostsClientTypes.FiberOpticCableType?
    let opticalStandard: OutpostsClientTypes.OpticalStandard?
    let maximumSupportedWeightLbs: OutpostsClientTypes.MaximumSupportedWeightLbs?
}

extension UpdateSiteRackPhysicalPropertiesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case fiberOpticCableType = "FiberOpticCableType"
        case maximumSupportedWeightLbs = "MaximumSupportedWeightLbs"
        case opticalStandard = "OpticalStandard"
        case powerConnector = "PowerConnector"
        case powerDrawKva = "PowerDrawKva"
        case powerFeedDrop = "PowerFeedDrop"
        case powerPhase = "PowerPhase"
        case uplinkCount = "UplinkCount"
        case uplinkGbps = "UplinkGbps"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let powerDrawKvaDecoded = try containerValues.decodeIfPresent(OutpostsClientTypes.PowerDrawKva.self, forKey: .powerDrawKva)
        powerDrawKva = powerDrawKvaDecoded
        let powerPhaseDecoded = try containerValues.decodeIfPresent(OutpostsClientTypes.PowerPhase.self, forKey: .powerPhase)
        powerPhase = powerPhaseDecoded
        let powerConnectorDecoded = try containerValues.decodeIfPresent(OutpostsClientTypes.PowerConnector.self, forKey: .powerConnector)
        powerConnector = powerConnectorDecoded
        let powerFeedDropDecoded = try containerValues.decodeIfPresent(OutpostsClientTypes.PowerFeedDrop.self, forKey: .powerFeedDrop)
        powerFeedDrop = powerFeedDropDecoded
        let uplinkGbpsDecoded = try containerValues.decodeIfPresent(OutpostsClientTypes.UplinkGbps.self, forKey: .uplinkGbps)
        uplinkGbps = uplinkGbpsDecoded
        let uplinkCountDecoded = try containerValues.decodeIfPresent(OutpostsClientTypes.UplinkCount.self, forKey: .uplinkCount)
        uplinkCount = uplinkCountDecoded
        let fiberOpticCableTypeDecoded = try containerValues.decodeIfPresent(OutpostsClientTypes.FiberOpticCableType.self, forKey: .fiberOpticCableType)
        fiberOpticCableType = fiberOpticCableTypeDecoded
        let opticalStandardDecoded = try containerValues.decodeIfPresent(OutpostsClientTypes.OpticalStandard.self, forKey: .opticalStandard)
        opticalStandard = opticalStandardDecoded
        let maximumSupportedWeightLbsDecoded = try containerValues.decodeIfPresent(OutpostsClientTypes.MaximumSupportedWeightLbs.self, forKey: .maximumSupportedWeightLbs)
        maximumSupportedWeightLbs = maximumSupportedWeightLbsDecoded
    }
}
