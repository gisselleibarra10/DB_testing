// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension OutpostsClientTypes {
    public enum OpticalStandard: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case optic1000baseLx
        case optic1000baseSx
        case optic100gbaseCwdm4
        case optic100gbaseLr4
        case optic100gbaseSr4
        case optic100gPsm4Msa
        case optic10gbaseIr
        case optic10gbaseLr
        case optic10gbaseSr
        case optic40gbaseEsr
        case optic40gbaseIr4Lr4l
        case optic40gbaseLr4
        case optic40gbaseSr
        case sdkUnknown(Swift.String)

        public static var allCases: [OpticalStandard] {
            return [
                .optic1000baseLx,
                .optic1000baseSx,
                .optic100gbaseCwdm4,
                .optic100gbaseLr4,
                .optic100gbaseSr4,
                .optic100gPsm4Msa,
                .optic10gbaseIr,
                .optic10gbaseLr,
                .optic10gbaseSr,
                .optic40gbaseEsr,
                .optic40gbaseIr4Lr4l,
                .optic40gbaseLr4,
                .optic40gbaseSr,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .optic1000baseLx: return "OPTIC_1000BASE_LX"
            case .optic1000baseSx: return "OPTIC_1000BASE_SX"
            case .optic100gbaseCwdm4: return "OPTIC_100GBASE_CWDM4"
            case .optic100gbaseLr4: return "OPTIC_100GBASE_LR4"
            case .optic100gbaseSr4: return "OPTIC_100GBASE_SR4"
            case .optic100gPsm4Msa: return "OPTIC_100G_PSM4_MSA"
            case .optic10gbaseIr: return "OPTIC_10GBASE_IR"
            case .optic10gbaseLr: return "OPTIC_10GBASE_LR"
            case .optic10gbaseSr: return "OPTIC_10GBASE_SR"
            case .optic40gbaseEsr: return "OPTIC_40GBASE_ESR"
            case .optic40gbaseIr4Lr4l: return "OPTIC_40GBASE_IR4_LR4L"
            case .optic40gbaseLr4: return "OPTIC_40GBASE_LR4"
            case .optic40gbaseSr: return "OPTIC_40GBASE_SR"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = OpticalStandard(rawValue: rawValue) ?? OpticalStandard.sdkUnknown(rawValue)
        }
    }
}
