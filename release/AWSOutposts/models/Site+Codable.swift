// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension OutpostsClientTypes.Site: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountId = "AccountId"
        case description = "Description"
        case name = "Name"
        case notes = "Notes"
        case operatingAddressCity = "OperatingAddressCity"
        case operatingAddressCountryCode = "OperatingAddressCountryCode"
        case operatingAddressStateOrRegion = "OperatingAddressStateOrRegion"
        case rackPhysicalProperties = "RackPhysicalProperties"
        case siteArn = "SiteArn"
        case siteId = "SiteId"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accountId = self.accountId {
            try encodeContainer.encode(accountId, forKey: .accountId)
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let notes = self.notes {
            try encodeContainer.encode(notes, forKey: .notes)
        }
        if let operatingAddressCity = self.operatingAddressCity {
            try encodeContainer.encode(operatingAddressCity, forKey: .operatingAddressCity)
        }
        if let operatingAddressCountryCode = self.operatingAddressCountryCode {
            try encodeContainer.encode(operatingAddressCountryCode, forKey: .operatingAddressCountryCode)
        }
        if let operatingAddressStateOrRegion = self.operatingAddressStateOrRegion {
            try encodeContainer.encode(operatingAddressStateOrRegion, forKey: .operatingAddressStateOrRegion)
        }
        if let rackPhysicalProperties = self.rackPhysicalProperties {
            try encodeContainer.encode(rackPhysicalProperties, forKey: .rackPhysicalProperties)
        }
        if let siteArn = self.siteArn {
            try encodeContainer.encode(siteArn, forKey: .siteArn)
        }
        if let siteId = self.siteId {
            try encodeContainer.encode(siteId, forKey: .siteId)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, tagmap0) in tags {
                try tagsContainer.encode(tagmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let siteIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .siteId)
        siteId = siteIdDecoded
        let accountIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .accountId)
        accountId = accountIdDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
        let siteArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .siteArn)
        siteArn = siteArnDecoded
        let notesDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .notes)
        notes = notesDecoded
        let operatingAddressCountryCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .operatingAddressCountryCode)
        operatingAddressCountryCode = operatingAddressCountryCodeDecoded
        let operatingAddressStateOrRegionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .operatingAddressStateOrRegion)
        operatingAddressStateOrRegion = operatingAddressStateOrRegionDecoded
        let operatingAddressCityDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .operatingAddressCity)
        operatingAddressCity = operatingAddressCityDecoded
        let rackPhysicalPropertiesDecoded = try containerValues.decodeIfPresent(OutpostsClientTypes.RackPhysicalProperties.self, forKey: .rackPhysicalProperties)
        rackPhysicalProperties = rackPhysicalPropertiesDecoded
    }
}
