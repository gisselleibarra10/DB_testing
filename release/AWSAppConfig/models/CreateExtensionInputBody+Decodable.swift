// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateExtensionInputBody: Swift.Equatable {
    let name: Swift.String?
    let description: Swift.String?
    let actions: [Swift.String:[AppConfigClientTypes.Action]]?
    let parameters: [Swift.String:AppConfigClientTypes.Parameter]?
    let tags: [Swift.String:Swift.String]?
}

extension CreateExtensionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case actions = "Actions"
        case description = "Description"
        case name = "Name"
        case parameters = "Parameters"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let actionsContainer = try containerValues.decodeIfPresent([Swift.String: [AppConfigClientTypes.Action?]?].self, forKey: .actions)
        var actionsDecoded0: [Swift.String:[AppConfigClientTypes.Action]]? = nil
        if let actionsContainer = actionsContainer {
            actionsDecoded0 = [Swift.String:[AppConfigClientTypes.Action]]()
            for (key0, actionlist0) in actionsContainer {
                var actionlist0Decoded0: [AppConfigClientTypes.Action]? = nil
                if let actionlist0 = actionlist0 {
                    actionlist0Decoded0 = [AppConfigClientTypes.Action]()
                    for structure1 in actionlist0 {
                        if let structure1 = structure1 {
                            actionlist0Decoded0?.append(structure1)
                        }
                    }
                }
                actionsDecoded0?[key0] = actionlist0Decoded0
            }
        }
        actions = actionsDecoded0
        let parametersContainer = try containerValues.decodeIfPresent([Swift.String: AppConfigClientTypes.Parameter?].self, forKey: .parameters)
        var parametersDecoded0: [Swift.String:AppConfigClientTypes.Parameter]? = nil
        if let parametersContainer = parametersContainer {
            parametersDecoded0 = [Swift.String:AppConfigClientTypes.Parameter]()
            for (key0, parameter0) in parametersContainer {
                if let parameter0 = parameter0 {
                    parametersDecoded0?[key0] = parameter0
                }
            }
        }
        parameters = parametersDecoded0
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
    }
}
