// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AppConfigClientTypes.ConfigurationProfileSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applicationId = "ApplicationId"
        case id = "Id"
        case locationUri = "LocationUri"
        case name = "Name"
        case type = "Type"
        case validatorTypes = "ValidatorTypes"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let applicationId = self.applicationId {
            try encodeContainer.encode(applicationId, forKey: .applicationId)
        }
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let locationUri = self.locationUri {
            try encodeContainer.encode(locationUri, forKey: .locationUri)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let type = self.type {
            try encodeContainer.encode(type, forKey: .type)
        }
        if let validatorTypes = validatorTypes {
            var validatorTypesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .validatorTypes)
            for validatortypelist0 in validatorTypes {
                try validatorTypesContainer.encode(validatortypelist0.rawValue)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let applicationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .applicationId)
        applicationId = applicationIdDecoded
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let locationUriDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .locationUri)
        locationUri = locationUriDecoded
        let validatorTypesContainer = try containerValues.decodeIfPresent([AppConfigClientTypes.ValidatorType?].self, forKey: .validatorTypes)
        var validatorTypesDecoded0:[AppConfigClientTypes.ValidatorType]? = nil
        if let validatorTypesContainer = validatorTypesContainer {
            validatorTypesDecoded0 = [AppConfigClientTypes.ValidatorType]()
            for string0 in validatorTypesContainer {
                if let string0 = string0 {
                    validatorTypesDecoded0?.append(string0)
                }
            }
        }
        validatorTypes = validatorTypesDecoded0
        let typeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .type)
        type = typeDecoded
    }
}
