// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CreateExtensionAssociationInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case extensionIdentifier = "ExtensionIdentifier"
        case extensionVersionNumber = "ExtensionVersionNumber"
        case parameters = "Parameters"
        case resourceIdentifier = "ResourceIdentifier"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let extensionIdentifier = self.extensionIdentifier {
            try encodeContainer.encode(extensionIdentifier, forKey: .extensionIdentifier)
        }
        if let extensionVersionNumber = self.extensionVersionNumber {
            try encodeContainer.encode(extensionVersionNumber, forKey: .extensionVersionNumber)
        }
        if let parameters = parameters {
            var parametersContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .parameters)
            for (dictKey0, parametervaluemap0) in parameters {
                try parametersContainer.encode(parametervaluemap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let resourceIdentifier = self.resourceIdentifier {
            try encodeContainer.encode(resourceIdentifier, forKey: .resourceIdentifier)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, tagmap0) in tags {
                try tagsContainer.encode(tagmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }
}
