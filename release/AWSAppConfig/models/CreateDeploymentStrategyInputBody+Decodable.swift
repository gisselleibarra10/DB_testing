// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateDeploymentStrategyInputBody: Swift.Equatable {
    let name: Swift.String?
    let description: Swift.String?
    let deploymentDurationInMinutes: Swift.Int?
    let finalBakeTimeInMinutes: Swift.Int
    let growthFactor: Swift.Float?
    let growthType: AppConfigClientTypes.GrowthType?
    let replicateTo: AppConfigClientTypes.ReplicateTo?
    let tags: [Swift.String:Swift.String]?
}

extension CreateDeploymentStrategyInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deploymentDurationInMinutes = "DeploymentDurationInMinutes"
        case description = "Description"
        case finalBakeTimeInMinutes = "FinalBakeTimeInMinutes"
        case growthFactor = "GrowthFactor"
        case growthType = "GrowthType"
        case name = "Name"
        case replicateTo = "ReplicateTo"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let deploymentDurationInMinutesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .deploymentDurationInMinutes)
        deploymentDurationInMinutes = deploymentDurationInMinutesDecoded
        let finalBakeTimeInMinutesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .finalBakeTimeInMinutes) ?? 0
        finalBakeTimeInMinutes = finalBakeTimeInMinutesDecoded
        let growthFactorDecoded = try containerValues.decodeIfPresent(Swift.Float.self, forKey: .growthFactor)
        growthFactor = growthFactorDecoded
        let growthTypeDecoded = try containerValues.decodeIfPresent(AppConfigClientTypes.GrowthType.self, forKey: .growthType)
        growthType = growthTypeDecoded
        let replicateToDecoded = try containerValues.decodeIfPresent(AppConfigClientTypes.ReplicateTo.self, forKey: .replicateTo)
        replicateTo = replicateToDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
    }
}
