// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AppConfigClientTypes.AppliedExtension: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case extensionAssociationId = "ExtensionAssociationId"
        case extensionId = "ExtensionId"
        case parameters = "Parameters"
        case versionNumber = "VersionNumber"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let extensionAssociationId = self.extensionAssociationId {
            try encodeContainer.encode(extensionAssociationId, forKey: .extensionAssociationId)
        }
        if let extensionId = self.extensionId {
            try encodeContainer.encode(extensionId, forKey: .extensionId)
        }
        if let parameters = parameters {
            var parametersContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .parameters)
            for (dictKey0, parametervaluemap0) in parameters {
                try parametersContainer.encode(parametervaluemap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if versionNumber != 0 {
            try encodeContainer.encode(versionNumber, forKey: .versionNumber)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let extensionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .extensionId)
        extensionId = extensionIdDecoded
        let extensionAssociationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .extensionAssociationId)
        extensionAssociationId = extensionAssociationIdDecoded
        let versionNumberDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .versionNumber) ?? 0
        versionNumber = versionNumberDecoded
        let parametersContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .parameters)
        var parametersDecoded0: [Swift.String:Swift.String]? = nil
        if let parametersContainer = parametersContainer {
            parametersDecoded0 = [Swift.String:Swift.String]()
            for (key0, stringwithlengthbetween1and20480) in parametersContainer {
                if let stringwithlengthbetween1and20480 = stringwithlengthbetween1and20480 {
                    parametersDecoded0?[key0] = stringwithlengthbetween1and20480
                }
            }
        }
        parameters = parametersDecoded0
    }
}
