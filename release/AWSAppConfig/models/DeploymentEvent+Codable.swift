// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AppConfigClientTypes.DeploymentEvent: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case actionInvocations = "ActionInvocations"
        case description = "Description"
        case eventType = "EventType"
        case occurredAt = "OccurredAt"
        case triggeredBy = "TriggeredBy"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let actionInvocations = actionInvocations {
            var actionInvocationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .actionInvocations)
            for actioninvocations0 in actionInvocations {
                try actionInvocationsContainer.encode(actioninvocations0)
            }
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let eventType = self.eventType {
            try encodeContainer.encode(eventType.rawValue, forKey: .eventType)
        }
        if let occurredAt = self.occurredAt {
            try encodeContainer.encode(occurredAt.timeIntervalSince1970, forKey: .occurredAt)
        }
        if let triggeredBy = self.triggeredBy {
            try encodeContainer.encode(triggeredBy.rawValue, forKey: .triggeredBy)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let eventTypeDecoded = try containerValues.decodeIfPresent(AppConfigClientTypes.DeploymentEventType.self, forKey: .eventType)
        eventType = eventTypeDecoded
        let triggeredByDecoded = try containerValues.decodeIfPresent(AppConfigClientTypes.TriggeredBy.self, forKey: .triggeredBy)
        triggeredBy = triggeredByDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let actionInvocationsContainer = try containerValues.decodeIfPresent([AppConfigClientTypes.ActionInvocation?].self, forKey: .actionInvocations)
        var actionInvocationsDecoded0:[AppConfigClientTypes.ActionInvocation]? = nil
        if let actionInvocationsContainer = actionInvocationsContainer {
            actionInvocationsDecoded0 = [AppConfigClientTypes.ActionInvocation]()
            for structure0 in actionInvocationsContainer {
                if let structure0 = structure0 {
                    actionInvocationsDecoded0?.append(structure0)
                }
            }
        }
        actionInvocations = actionInvocationsDecoded0
        let occurredAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .occurredAt)
        occurredAt = occurredAtDecoded
    }
}
