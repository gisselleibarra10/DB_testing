// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateConfigurationProfileInputBody: Swift.Equatable {
    let name: Swift.String?
    let description: Swift.String?
    let locationUri: Swift.String?
    let retrievalRoleArn: Swift.String?
    let validators: [AppConfigClientTypes.Validator]?
    let tags: [Swift.String:Swift.String]?
    let type: Swift.String?
}

extension CreateConfigurationProfileInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description = "Description"
        case locationUri = "LocationUri"
        case name = "Name"
        case retrievalRoleArn = "RetrievalRoleArn"
        case tags = "Tags"
        case type = "Type"
        case validators = "Validators"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let locationUriDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .locationUri)
        locationUri = locationUriDecoded
        let retrievalRoleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .retrievalRoleArn)
        retrievalRoleArn = retrievalRoleArnDecoded
        let validatorsContainer = try containerValues.decodeIfPresent([AppConfigClientTypes.Validator?].self, forKey: .validators)
        var validatorsDecoded0:[AppConfigClientTypes.Validator]? = nil
        if let validatorsContainer = validatorsContainer {
            validatorsDecoded0 = [AppConfigClientTypes.Validator]()
            for structure0 in validatorsContainer {
                if let structure0 = structure0 {
                    validatorsDecoded0?.append(structure0)
                }
            }
        }
        validators = validatorsDecoded0
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
        let typeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .type)
        type = typeDecoded
    }
}
