// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct UpdateExtensionAssociationInputBody: Swift.Equatable {
    let parameters: [Swift.String:Swift.String]?
}

extension UpdateExtensionAssociationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case parameters = "Parameters"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let parametersContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .parameters)
        var parametersDecoded0: [Swift.String:Swift.String]? = nil
        if let parametersContainer = parametersContainer {
            parametersDecoded0 = [Swift.String:Swift.String]()
            for (key0, stringwithlengthbetween1and20480) in parametersContainer {
                if let stringwithlengthbetween1and20480 = stringwithlengthbetween1and20480 {
                    parametersDecoded0?[key0] = stringwithlengthbetween1and20480
                }
            }
        }
        parameters = parametersDecoded0
    }
}
