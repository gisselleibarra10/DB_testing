// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateExtensionAssociationOutputResponseBody: Swift.Equatable {
    let id: Swift.String?
    let extensionArn: Swift.String?
    let resourceArn: Swift.String?
    let arn: Swift.String?
    let parameters: [Swift.String:Swift.String]?
    let extensionVersionNumber: Swift.Int
}

extension CreateExtensionAssociationOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "Arn"
        case extensionArn = "ExtensionArn"
        case extensionVersionNumber = "ExtensionVersionNumber"
        case id = "Id"
        case parameters = "Parameters"
        case resourceArn = "ResourceArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let extensionArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .extensionArn)
        extensionArn = extensionArnDecoded
        let resourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceArn)
        resourceArn = resourceArnDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let parametersContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .parameters)
        var parametersDecoded0: [Swift.String:Swift.String]? = nil
        if let parametersContainer = parametersContainer {
            parametersDecoded0 = [Swift.String:Swift.String]()
            for (key0, stringwithlengthbetween1and20480) in parametersContainer {
                if let stringwithlengthbetween1and20480 = stringwithlengthbetween1and20480 {
                    parametersDecoded0?[key0] = stringwithlengthbetween1and20480
                }
            }
        }
        parameters = parametersDecoded0
        let extensionVersionNumberDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .extensionVersionNumber) ?? 0
        extensionVersionNumber = extensionVersionNumberDecoded
    }
}
