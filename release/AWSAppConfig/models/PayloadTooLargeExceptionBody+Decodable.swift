// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct PayloadTooLargeExceptionBody: Swift.Equatable {
    let message: Swift.String?
    let measure: AppConfigClientTypes.BytesMeasure?
    let limit: Swift.Float
    let size: Swift.Float
}

extension PayloadTooLargeExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case limit = "Limit"
        case measure = "Measure"
        case message = "Message"
        case size = "Size"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let measureDecoded = try containerValues.decodeIfPresent(AppConfigClientTypes.BytesMeasure.self, forKey: .measure)
        measure = measureDecoded
        let limitDecoded = try containerValues.decodeIfPresent(Swift.Float.self, forKey: .limit) ?? 0.0
        limit = limitDecoded
        let sizeDecoded = try containerValues.decodeIfPresent(Swift.Float.self, forKey: .size) ?? 0.0
        size = sizeDecoded
    }
}
