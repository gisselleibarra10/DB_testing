// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateExtensionAssociationInputBody: Swift.Equatable {
    let extensionIdentifier: Swift.String?
    let extensionVersionNumber: Swift.Int?
    let resourceIdentifier: Swift.String?
    let parameters: [Swift.String:Swift.String]?
    let tags: [Swift.String:Swift.String]?
}

extension CreateExtensionAssociationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case extensionIdentifier = "ExtensionIdentifier"
        case extensionVersionNumber = "ExtensionVersionNumber"
        case parameters = "Parameters"
        case resourceIdentifier = "ResourceIdentifier"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let extensionIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .extensionIdentifier)
        extensionIdentifier = extensionIdentifierDecoded
        let extensionVersionNumberDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .extensionVersionNumber)
        extensionVersionNumber = extensionVersionNumberDecoded
        let resourceIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceIdentifier)
        resourceIdentifier = resourceIdentifierDecoded
        let parametersContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .parameters)
        var parametersDecoded0: [Swift.String:Swift.String]? = nil
        if let parametersContainer = parametersContainer {
            parametersDecoded0 = [Swift.String:Swift.String]()
            for (key0, stringwithlengthbetween1and20480) in parametersContainer {
                if let stringwithlengthbetween1and20480 = stringwithlengthbetween1and20480 {
                    parametersDecoded0?[key0] = stringwithlengthbetween1and20480
                }
            }
        }
        parameters = parametersDecoded0
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
    }
}
