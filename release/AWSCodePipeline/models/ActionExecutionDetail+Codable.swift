// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CodePipelineClientTypes.ActionExecutionDetail: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case actionExecutionId
        case actionName
        case input
        case lastUpdateTime
        case output
        case pipelineExecutionId
        case pipelineVersion
        case stageName
        case startTime
        case status
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let actionExecutionId = self.actionExecutionId {
            try encodeContainer.encode(actionExecutionId, forKey: .actionExecutionId)
        }
        if let actionName = self.actionName {
            try encodeContainer.encode(actionName, forKey: .actionName)
        }
        if let input = self.input {
            try encodeContainer.encode(input, forKey: .input)
        }
        if let lastUpdateTime = self.lastUpdateTime {
            try encodeContainer.encode(lastUpdateTime.timeIntervalSince1970, forKey: .lastUpdateTime)
        }
        if let output = self.output {
            try encodeContainer.encode(output, forKey: .output)
        }
        if let pipelineExecutionId = self.pipelineExecutionId {
            try encodeContainer.encode(pipelineExecutionId, forKey: .pipelineExecutionId)
        }
        if let pipelineVersion = self.pipelineVersion {
            try encodeContainer.encode(pipelineVersion, forKey: .pipelineVersion)
        }
        if let stageName = self.stageName {
            try encodeContainer.encode(stageName, forKey: .stageName)
        }
        if let startTime = self.startTime {
            try encodeContainer.encode(startTime.timeIntervalSince1970, forKey: .startTime)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pipelineExecutionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pipelineExecutionId)
        pipelineExecutionId = pipelineExecutionIdDecoded
        let actionExecutionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .actionExecutionId)
        actionExecutionId = actionExecutionIdDecoded
        let pipelineVersionDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .pipelineVersion)
        pipelineVersion = pipelineVersionDecoded
        let stageNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stageName)
        stageName = stageNameDecoded
        let actionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .actionName)
        actionName = actionNameDecoded
        let startTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .startTime)
        startTime = startTimeDecoded
        let lastUpdateTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastUpdateTime)
        lastUpdateTime = lastUpdateTimeDecoded
        let statusDecoded = try containerValues.decodeIfPresent(CodePipelineClientTypes.ActionExecutionStatus.self, forKey: .status)
        status = statusDecoded
        let inputDecoded = try containerValues.decodeIfPresent(CodePipelineClientTypes.ActionExecutionInput.self, forKey: .input)
        input = inputDecoded
        let outputDecoded = try containerValues.decodeIfPresent(CodePipelineClientTypes.ActionExecutionOutput.self, forKey: .output)
        output = outputDecoded
    }
}
