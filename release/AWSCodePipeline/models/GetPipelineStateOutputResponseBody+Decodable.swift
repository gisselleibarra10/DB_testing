// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetPipelineStateOutputResponseBody: Swift.Equatable {
    let pipelineName: Swift.String?
    let pipelineVersion: Swift.Int?
    let stageStates: [CodePipelineClientTypes.StageState]?
    let created: ClientRuntime.Date?
    let updated: ClientRuntime.Date?
}

extension GetPipelineStateOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case created
        case pipelineName
        case pipelineVersion
        case stageStates
        case updated
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pipelineNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pipelineName)
        pipelineName = pipelineNameDecoded
        let pipelineVersionDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .pipelineVersion)
        pipelineVersion = pipelineVersionDecoded
        let stageStatesContainer = try containerValues.decodeIfPresent([CodePipelineClientTypes.StageState?].self, forKey: .stageStates)
        var stageStatesDecoded0:[CodePipelineClientTypes.StageState]? = nil
        if let stageStatesContainer = stageStatesContainer {
            stageStatesDecoded0 = [CodePipelineClientTypes.StageState]()
            for structure0 in stageStatesContainer {
                if let structure0 = structure0 {
                    stageStatesDecoded0?.append(structure0)
                }
            }
        }
        stageStates = stageStatesDecoded0
        let createdDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .created)
        created = createdDecoded
        let updatedDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .updated)
        updated = updatedDecoded
    }
}
