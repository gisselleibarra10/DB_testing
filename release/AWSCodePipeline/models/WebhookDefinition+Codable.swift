// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CodePipelineClientTypes.WebhookDefinition: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case authentication
        case authenticationConfiguration
        case filters
        case name
        case targetAction
        case targetPipeline
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let authentication = self.authentication {
            try encodeContainer.encode(authentication.rawValue, forKey: .authentication)
        }
        if let authenticationConfiguration = self.authenticationConfiguration {
            try encodeContainer.encode(authenticationConfiguration, forKey: .authenticationConfiguration)
        }
        if let filters = filters {
            var filtersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .filters)
            for webhookfilters0 in filters {
                try filtersContainer.encode(webhookfilters0)
            }
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let targetAction = self.targetAction {
            try encodeContainer.encode(targetAction, forKey: .targetAction)
        }
        if let targetPipeline = self.targetPipeline {
            try encodeContainer.encode(targetPipeline, forKey: .targetPipeline)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let targetPipelineDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .targetPipeline)
        targetPipeline = targetPipelineDecoded
        let targetActionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .targetAction)
        targetAction = targetActionDecoded
        let filtersContainer = try containerValues.decodeIfPresent([CodePipelineClientTypes.WebhookFilterRule?].self, forKey: .filters)
        var filtersDecoded0:[CodePipelineClientTypes.WebhookFilterRule]? = nil
        if let filtersContainer = filtersContainer {
            filtersDecoded0 = [CodePipelineClientTypes.WebhookFilterRule]()
            for structure0 in filtersContainer {
                if let structure0 = structure0 {
                    filtersDecoded0?.append(structure0)
                }
            }
        }
        filters = filtersDecoded0
        let authenticationDecoded = try containerValues.decodeIfPresent(CodePipelineClientTypes.WebhookAuthenticationType.self, forKey: .authentication)
        authentication = authenticationDecoded
        let authenticationConfigurationDecoded = try containerValues.decodeIfPresent(CodePipelineClientTypes.WebhookAuthConfiguration.self, forKey: .authenticationConfiguration)
        authenticationConfiguration = authenticationConfigurationDecoded
    }
}
