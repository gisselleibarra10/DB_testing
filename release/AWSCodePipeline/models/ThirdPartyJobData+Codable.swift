// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CodePipelineClientTypes.ThirdPartyJobData: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case actionConfiguration
        case actionTypeId
        case artifactCredentials
        case continuationToken
        case encryptionKey
        case inputArtifacts
        case outputArtifacts
        case pipelineContext
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let actionConfiguration = self.actionConfiguration {
            try encodeContainer.encode(actionConfiguration, forKey: .actionConfiguration)
        }
        if let actionTypeId = self.actionTypeId {
            try encodeContainer.encode(actionTypeId, forKey: .actionTypeId)
        }
        if let artifactCredentials = self.artifactCredentials {
            try encodeContainer.encode(artifactCredentials, forKey: .artifactCredentials)
        }
        if let continuationToken = self.continuationToken {
            try encodeContainer.encode(continuationToken, forKey: .continuationToken)
        }
        if let encryptionKey = self.encryptionKey {
            try encodeContainer.encode(encryptionKey, forKey: .encryptionKey)
        }
        if let inputArtifacts = inputArtifacts {
            var inputArtifactsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .inputArtifacts)
            for artifactlist0 in inputArtifacts {
                try inputArtifactsContainer.encode(artifactlist0)
            }
        }
        if let outputArtifacts = outputArtifacts {
            var outputArtifactsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .outputArtifacts)
            for artifactlist0 in outputArtifacts {
                try outputArtifactsContainer.encode(artifactlist0)
            }
        }
        if let pipelineContext = self.pipelineContext {
            try encodeContainer.encode(pipelineContext, forKey: .pipelineContext)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let actionTypeIdDecoded = try containerValues.decodeIfPresent(CodePipelineClientTypes.ActionTypeId.self, forKey: .actionTypeId)
        actionTypeId = actionTypeIdDecoded
        let actionConfigurationDecoded = try containerValues.decodeIfPresent(CodePipelineClientTypes.ActionConfiguration.self, forKey: .actionConfiguration)
        actionConfiguration = actionConfigurationDecoded
        let pipelineContextDecoded = try containerValues.decodeIfPresent(CodePipelineClientTypes.PipelineContext.self, forKey: .pipelineContext)
        pipelineContext = pipelineContextDecoded
        let inputArtifactsContainer = try containerValues.decodeIfPresent([CodePipelineClientTypes.Artifact?].self, forKey: .inputArtifacts)
        var inputArtifactsDecoded0:[CodePipelineClientTypes.Artifact]? = nil
        if let inputArtifactsContainer = inputArtifactsContainer {
            inputArtifactsDecoded0 = [CodePipelineClientTypes.Artifact]()
            for structure0 in inputArtifactsContainer {
                if let structure0 = structure0 {
                    inputArtifactsDecoded0?.append(structure0)
                }
            }
        }
        inputArtifacts = inputArtifactsDecoded0
        let outputArtifactsContainer = try containerValues.decodeIfPresent([CodePipelineClientTypes.Artifact?].self, forKey: .outputArtifacts)
        var outputArtifactsDecoded0:[CodePipelineClientTypes.Artifact]? = nil
        if let outputArtifactsContainer = outputArtifactsContainer {
            outputArtifactsDecoded0 = [CodePipelineClientTypes.Artifact]()
            for structure0 in outputArtifactsContainer {
                if let structure0 = structure0 {
                    outputArtifactsDecoded0?.append(structure0)
                }
            }
        }
        outputArtifacts = outputArtifactsDecoded0
        let artifactCredentialsDecoded = try containerValues.decodeIfPresent(CodePipelineClientTypes.AWSSessionCredentials.self, forKey: .artifactCredentials)
        artifactCredentials = artifactCredentialsDecoded
        let continuationTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .continuationToken)
        continuationToken = continuationTokenDecoded
        let encryptionKeyDecoded = try containerValues.decodeIfPresent(CodePipelineClientTypes.EncryptionKey.self, forKey: .encryptionKey)
        encryptionKey = encryptionKeyDecoded
    }
}
