// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CodePipelineClientTypes.PipelineContext: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case action
        case pipelineArn
        case pipelineExecutionId
        case pipelineName
        case stage
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let action = self.action {
            try encodeContainer.encode(action, forKey: .action)
        }
        if let pipelineArn = self.pipelineArn {
            try encodeContainer.encode(pipelineArn, forKey: .pipelineArn)
        }
        if let pipelineExecutionId = self.pipelineExecutionId {
            try encodeContainer.encode(pipelineExecutionId, forKey: .pipelineExecutionId)
        }
        if let pipelineName = self.pipelineName {
            try encodeContainer.encode(pipelineName, forKey: .pipelineName)
        }
        if let stage = self.stage {
            try encodeContainer.encode(stage, forKey: .stage)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pipelineNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pipelineName)
        pipelineName = pipelineNameDecoded
        let stageDecoded = try containerValues.decodeIfPresent(CodePipelineClientTypes.StageContext.self, forKey: .stage)
        stage = stageDecoded
        let actionDecoded = try containerValues.decodeIfPresent(CodePipelineClientTypes.ActionContext.self, forKey: .action)
        action = actionDecoded
        let pipelineArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pipelineArn)
        pipelineArn = pipelineArnDecoded
        let pipelineExecutionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pipelineExecutionId)
        pipelineExecutionId = pipelineExecutionIdDecoded
    }
}
