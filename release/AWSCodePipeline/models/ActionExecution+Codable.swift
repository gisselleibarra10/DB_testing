// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CodePipelineClientTypes.ActionExecution: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case actionExecutionId
        case errorDetails
        case externalExecutionId
        case externalExecutionUrl
        case lastStatusChange
        case lastUpdatedBy
        case percentComplete
        case status
        case summary
        case token
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let actionExecutionId = self.actionExecutionId {
            try encodeContainer.encode(actionExecutionId, forKey: .actionExecutionId)
        }
        if let errorDetails = self.errorDetails {
            try encodeContainer.encode(errorDetails, forKey: .errorDetails)
        }
        if let externalExecutionId = self.externalExecutionId {
            try encodeContainer.encode(externalExecutionId, forKey: .externalExecutionId)
        }
        if let externalExecutionUrl = self.externalExecutionUrl {
            try encodeContainer.encode(externalExecutionUrl, forKey: .externalExecutionUrl)
        }
        if let lastStatusChange = self.lastStatusChange {
            try encodeContainer.encode(lastStatusChange.timeIntervalSince1970, forKey: .lastStatusChange)
        }
        if let lastUpdatedBy = self.lastUpdatedBy {
            try encodeContainer.encode(lastUpdatedBy, forKey: .lastUpdatedBy)
        }
        if let percentComplete = self.percentComplete {
            try encodeContainer.encode(percentComplete, forKey: .percentComplete)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let summary = self.summary {
            try encodeContainer.encode(summary, forKey: .summary)
        }
        if let token = self.token {
            try encodeContainer.encode(token, forKey: .token)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let actionExecutionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .actionExecutionId)
        actionExecutionId = actionExecutionIdDecoded
        let statusDecoded = try containerValues.decodeIfPresent(CodePipelineClientTypes.ActionExecutionStatus.self, forKey: .status)
        status = statusDecoded
        let summaryDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .summary)
        summary = summaryDecoded
        let lastStatusChangeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastStatusChange)
        lastStatusChange = lastStatusChangeDecoded
        let tokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .token)
        token = tokenDecoded
        let lastUpdatedByDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastUpdatedBy)
        lastUpdatedBy = lastUpdatedByDecoded
        let externalExecutionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .externalExecutionId)
        externalExecutionId = externalExecutionIdDecoded
        let externalExecutionUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .externalExecutionUrl)
        externalExecutionUrl = externalExecutionUrlDecoded
        let percentCompleteDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .percentComplete)
        percentComplete = percentCompleteDecoded
        let errorDetailsDecoded = try containerValues.decodeIfPresent(CodePipelineClientTypes.ErrorDetails.self, forKey: .errorDetails)
        errorDetails = errorDetailsDecoded
    }
}
