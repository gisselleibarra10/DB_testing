// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ForecastClientTypes.DataConfig: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case additionalDatasets = "AdditionalDatasets"
        case attributeConfigs = "AttributeConfigs"
        case datasetGroupArn = "DatasetGroupArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let additionalDatasets = additionalDatasets {
            var additionalDatasetsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .additionalDatasets)
            for additionaldatasets0 in additionalDatasets {
                try additionalDatasetsContainer.encode(additionaldatasets0)
            }
        }
        if let attributeConfigs = attributeConfigs {
            var attributeConfigsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .attributeConfigs)
            for attributeconfigs0 in attributeConfigs {
                try attributeConfigsContainer.encode(attributeconfigs0)
            }
        }
        if let datasetGroupArn = self.datasetGroupArn {
            try encodeContainer.encode(datasetGroupArn, forKey: .datasetGroupArn)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let datasetGroupArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .datasetGroupArn)
        datasetGroupArn = datasetGroupArnDecoded
        let attributeConfigsContainer = try containerValues.decodeIfPresent([ForecastClientTypes.AttributeConfig?].self, forKey: .attributeConfigs)
        var attributeConfigsDecoded0:[ForecastClientTypes.AttributeConfig]? = nil
        if let attributeConfigsContainer = attributeConfigsContainer {
            attributeConfigsDecoded0 = [ForecastClientTypes.AttributeConfig]()
            for structure0 in attributeConfigsContainer {
                if let structure0 = structure0 {
                    attributeConfigsDecoded0?.append(structure0)
                }
            }
        }
        attributeConfigs = attributeConfigsDecoded0
        let additionalDatasetsContainer = try containerValues.decodeIfPresent([ForecastClientTypes.AdditionalDataset?].self, forKey: .additionalDatasets)
        var additionalDatasetsDecoded0:[ForecastClientTypes.AdditionalDataset]? = nil
        if let additionalDatasetsContainer = additionalDatasetsContainer {
            additionalDatasetsDecoded0 = [ForecastClientTypes.AdditionalDataset]()
            for structure0 in additionalDatasetsContainer {
                if let structure0 = structure0 {
                    additionalDatasetsDecoded0?.append(structure0)
                }
            }
        }
        additionalDatasets = additionalDatasetsDecoded0
    }
}
