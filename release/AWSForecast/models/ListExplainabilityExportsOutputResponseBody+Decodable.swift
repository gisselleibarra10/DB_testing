// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListExplainabilityExportsOutputResponseBody: Swift.Equatable {
    let explainabilityExports: [ForecastClientTypes.ExplainabilityExportSummary]?
    let nextToken: Swift.String?
}

extension ListExplainabilityExportsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case explainabilityExports = "ExplainabilityExports"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let explainabilityExportsContainer = try containerValues.decodeIfPresent([ForecastClientTypes.ExplainabilityExportSummary?].self, forKey: .explainabilityExports)
        var explainabilityExportsDecoded0:[ForecastClientTypes.ExplainabilityExportSummary]? = nil
        if let explainabilityExportsContainer = explainabilityExportsContainer {
            explainabilityExportsDecoded0 = [ForecastClientTypes.ExplainabilityExportSummary]()
            for structure0 in explainabilityExportsContainer {
                if let structure0 = structure0 {
                    explainabilityExportsDecoded0?.append(structure0)
                }
            }
        }
        explainabilityExports = explainabilityExportsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
