// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateExplainabilityExportInputBody: Swift.Equatable {
    let explainabilityExportName: Swift.String?
    let explainabilityArn: Swift.String?
    let destination: ForecastClientTypes.DataDestination?
    let tags: [ForecastClientTypes.Tag]?
    let format: Swift.String?
}

extension CreateExplainabilityExportInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case destination = "Destination"
        case explainabilityArn = "ExplainabilityArn"
        case explainabilityExportName = "ExplainabilityExportName"
        case format = "Format"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let explainabilityExportNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .explainabilityExportName)
        explainabilityExportName = explainabilityExportNameDecoded
        let explainabilityArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .explainabilityArn)
        explainabilityArn = explainabilityArnDecoded
        let destinationDecoded = try containerValues.decodeIfPresent(ForecastClientTypes.DataDestination.self, forKey: .destination)
        destination = destinationDecoded
        let tagsContainer = try containerValues.decodeIfPresent([ForecastClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[ForecastClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [ForecastClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let formatDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .format)
        format = formatDecoded
    }
}
