// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ForecastClientTypes {
    /// Describes the results of a monitor evaluation.
    public struct PredictorMonitorEvaluation: Swift.Equatable {
        /// The status of the monitor evaluation. The state can be SUCCESS or FAILURE.
        public var evaluationState: Swift.String?
        /// The timestamp that indicates when the monitor evaluation was started.
        public var evaluationTime: ClientRuntime.Date?
        /// Information about any errors that may have occurred during the monitor evaluation.
        public var message: Swift.String?
        /// A list of metrics Forecast calculated when monitoring a predictor. You can compare the value for each metric in the list to the metric's value in the [Baseline] to see how your predictor's performance is changing.
        public var metricResults: [ForecastClientTypes.MetricResult]?
        /// The Amazon Resource Name (ARN) of the monitor resource.
        public var monitorArn: Swift.String?
        /// The source of the data the monitor resource used during the evaluation.
        public var monitorDataSource: ForecastClientTypes.MonitorDataSource?
        /// The number of items considered during the evaluation.
        public var numItemsEvaluated: Swift.Int?
        /// Provides details about a predictor event, such as a retraining.
        public var predictorEvent: ForecastClientTypes.PredictorEvent?
        /// The Amazon Resource Name (ARN) of the resource to monitor.
        public var resourceArn: Swift.String?
        /// The timestamp that indicates the end of the window that is used for monitor evaluation.
        public var windowEndDatetime: ClientRuntime.Date?
        /// The timestamp that indicates the start of the window that is used for monitor evaluation.
        public var windowStartDatetime: ClientRuntime.Date?

        public init (
            evaluationState: Swift.String? = nil,
            evaluationTime: ClientRuntime.Date? = nil,
            message: Swift.String? = nil,
            metricResults: [ForecastClientTypes.MetricResult]? = nil,
            monitorArn: Swift.String? = nil,
            monitorDataSource: ForecastClientTypes.MonitorDataSource? = nil,
            numItemsEvaluated: Swift.Int? = nil,
            predictorEvent: ForecastClientTypes.PredictorEvent? = nil,
            resourceArn: Swift.String? = nil,
            windowEndDatetime: ClientRuntime.Date? = nil,
            windowStartDatetime: ClientRuntime.Date? = nil
        )
        {
            self.evaluationState = evaluationState
            self.evaluationTime = evaluationTime
            self.message = message
            self.metricResults = metricResults
            self.monitorArn = monitorArn
            self.monitorDataSource = monitorDataSource
            self.numItemsEvaluated = numItemsEvaluated
            self.predictorEvent = predictorEvent
            self.resourceArn = resourceArn
            self.windowEndDatetime = windowEndDatetime
            self.windowStartDatetime = windowStartDatetime
        }
    }

}
