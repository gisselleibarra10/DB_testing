// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeWhatIfForecastOutputResponseBody: Swift.Equatable {
    let whatIfForecastName: Swift.String?
    let whatIfForecastArn: Swift.String?
    let whatIfAnalysisArn: Swift.String?
    let estimatedTimeRemainingInMinutes: Swift.Int?
    let status: Swift.String?
    let message: Swift.String?
    let creationTime: ClientRuntime.Date?
    let lastModificationTime: ClientRuntime.Date?
    let timeSeriesTransformations: [ForecastClientTypes.TimeSeriesTransformation]?
    let timeSeriesReplacementsDataSource: ForecastClientTypes.TimeSeriesReplacementsDataSource?
    let forecastTypes: [Swift.String]?
}

extension DescribeWhatIfForecastOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTime = "CreationTime"
        case estimatedTimeRemainingInMinutes = "EstimatedTimeRemainingInMinutes"
        case forecastTypes = "ForecastTypes"
        case lastModificationTime = "LastModificationTime"
        case message = "Message"
        case status = "Status"
        case timeSeriesReplacementsDataSource = "TimeSeriesReplacementsDataSource"
        case timeSeriesTransformations = "TimeSeriesTransformations"
        case whatIfAnalysisArn = "WhatIfAnalysisArn"
        case whatIfForecastArn = "WhatIfForecastArn"
        case whatIfForecastName = "WhatIfForecastName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let whatIfForecastNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .whatIfForecastName)
        whatIfForecastName = whatIfForecastNameDecoded
        let whatIfForecastArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .whatIfForecastArn)
        whatIfForecastArn = whatIfForecastArnDecoded
        let whatIfAnalysisArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .whatIfAnalysisArn)
        whatIfAnalysisArn = whatIfAnalysisArnDecoded
        let estimatedTimeRemainingInMinutesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .estimatedTimeRemainingInMinutes)
        estimatedTimeRemainingInMinutes = estimatedTimeRemainingInMinutesDecoded
        let statusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .status)
        status = statusDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let lastModificationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModificationTime)
        lastModificationTime = lastModificationTimeDecoded
        let timeSeriesTransformationsContainer = try containerValues.decodeIfPresent([ForecastClientTypes.TimeSeriesTransformation?].self, forKey: .timeSeriesTransformations)
        var timeSeriesTransformationsDecoded0:[ForecastClientTypes.TimeSeriesTransformation]? = nil
        if let timeSeriesTransformationsContainer = timeSeriesTransformationsContainer {
            timeSeriesTransformationsDecoded0 = [ForecastClientTypes.TimeSeriesTransformation]()
            for structure0 in timeSeriesTransformationsContainer {
                if let structure0 = structure0 {
                    timeSeriesTransformationsDecoded0?.append(structure0)
                }
            }
        }
        timeSeriesTransformations = timeSeriesTransformationsDecoded0
        let timeSeriesReplacementsDataSourceDecoded = try containerValues.decodeIfPresent(ForecastClientTypes.TimeSeriesReplacementsDataSource.self, forKey: .timeSeriesReplacementsDataSource)
        timeSeriesReplacementsDataSource = timeSeriesReplacementsDataSourceDecoded
        let forecastTypesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .forecastTypes)
        var forecastTypesDecoded0:[Swift.String]? = nil
        if let forecastTypesContainer = forecastTypesContainer {
            forecastTypesDecoded0 = [Swift.String]()
            for string0 in forecastTypesContainer {
                if let string0 = string0 {
                    forecastTypesDecoded0?.append(string0)
                }
            }
        }
        forecastTypes = forecastTypesDecoded0
    }
}
