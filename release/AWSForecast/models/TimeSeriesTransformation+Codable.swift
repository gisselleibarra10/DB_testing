// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ForecastClientTypes.TimeSeriesTransformation: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case action = "Action"
        case timeSeriesConditions = "TimeSeriesConditions"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let action = self.action {
            try encodeContainer.encode(action, forKey: .action)
        }
        if let timeSeriesConditions = timeSeriesConditions {
            var timeSeriesConditionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .timeSeriesConditions)
            for timeseriesconditions0 in timeSeriesConditions {
                try timeSeriesConditionsContainer.encode(timeseriesconditions0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let actionDecoded = try containerValues.decodeIfPresent(ForecastClientTypes.Action.self, forKey: .action)
        action = actionDecoded
        let timeSeriesConditionsContainer = try containerValues.decodeIfPresent([ForecastClientTypes.TimeSeriesCondition?].self, forKey: .timeSeriesConditions)
        var timeSeriesConditionsDecoded0:[ForecastClientTypes.TimeSeriesCondition]? = nil
        if let timeSeriesConditionsContainer = timeSeriesConditionsContainer {
            timeSeriesConditionsDecoded0 = [ForecastClientTypes.TimeSeriesCondition]()
            for structure0 in timeSeriesConditionsContainer {
                if let structure0 = structure0 {
                    timeSeriesConditionsDecoded0?.append(structure0)
                }
            }
        }
        timeSeriesConditions = timeSeriesConditionsDecoded0
    }
}
