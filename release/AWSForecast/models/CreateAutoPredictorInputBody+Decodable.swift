// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateAutoPredictorInputBody: Swift.Equatable {
    let predictorName: Swift.String?
    let forecastHorizon: Swift.Int?
    let forecastTypes: [Swift.String]?
    let forecastDimensions: [Swift.String]?
    let forecastFrequency: Swift.String?
    let dataConfig: ForecastClientTypes.DataConfig?
    let encryptionConfig: ForecastClientTypes.EncryptionConfig?
    let referencePredictorArn: Swift.String?
    let optimizationMetric: ForecastClientTypes.OptimizationMetric?
    let explainPredictor: Swift.Bool?
    let tags: [ForecastClientTypes.Tag]?
    let monitorConfig: ForecastClientTypes.MonitorConfig?
    let timeAlignmentBoundary: ForecastClientTypes.TimeAlignmentBoundary?
}

extension CreateAutoPredictorInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dataConfig = "DataConfig"
        case encryptionConfig = "EncryptionConfig"
        case explainPredictor = "ExplainPredictor"
        case forecastDimensions = "ForecastDimensions"
        case forecastFrequency = "ForecastFrequency"
        case forecastHorizon = "ForecastHorizon"
        case forecastTypes = "ForecastTypes"
        case monitorConfig = "MonitorConfig"
        case optimizationMetric = "OptimizationMetric"
        case predictorName = "PredictorName"
        case referencePredictorArn = "ReferencePredictorArn"
        case tags = "Tags"
        case timeAlignmentBoundary = "TimeAlignmentBoundary"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let predictorNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .predictorName)
        predictorName = predictorNameDecoded
        let forecastHorizonDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .forecastHorizon)
        forecastHorizon = forecastHorizonDecoded
        let forecastTypesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .forecastTypes)
        var forecastTypesDecoded0:[Swift.String]? = nil
        if let forecastTypesContainer = forecastTypesContainer {
            forecastTypesDecoded0 = [Swift.String]()
            for string0 in forecastTypesContainer {
                if let string0 = string0 {
                    forecastTypesDecoded0?.append(string0)
                }
            }
        }
        forecastTypes = forecastTypesDecoded0
        let forecastDimensionsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .forecastDimensions)
        var forecastDimensionsDecoded0:[Swift.String]? = nil
        if let forecastDimensionsContainer = forecastDimensionsContainer {
            forecastDimensionsDecoded0 = [Swift.String]()
            for string0 in forecastDimensionsContainer {
                if let string0 = string0 {
                    forecastDimensionsDecoded0?.append(string0)
                }
            }
        }
        forecastDimensions = forecastDimensionsDecoded0
        let forecastFrequencyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .forecastFrequency)
        forecastFrequency = forecastFrequencyDecoded
        let dataConfigDecoded = try containerValues.decodeIfPresent(ForecastClientTypes.DataConfig.self, forKey: .dataConfig)
        dataConfig = dataConfigDecoded
        let encryptionConfigDecoded = try containerValues.decodeIfPresent(ForecastClientTypes.EncryptionConfig.self, forKey: .encryptionConfig)
        encryptionConfig = encryptionConfigDecoded
        let referencePredictorArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .referencePredictorArn)
        referencePredictorArn = referencePredictorArnDecoded
        let optimizationMetricDecoded = try containerValues.decodeIfPresent(ForecastClientTypes.OptimizationMetric.self, forKey: .optimizationMetric)
        optimizationMetric = optimizationMetricDecoded
        let explainPredictorDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .explainPredictor)
        explainPredictor = explainPredictorDecoded
        let tagsContainer = try containerValues.decodeIfPresent([ForecastClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[ForecastClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [ForecastClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let monitorConfigDecoded = try containerValues.decodeIfPresent(ForecastClientTypes.MonitorConfig.self, forKey: .monitorConfig)
        monitorConfig = monitorConfigDecoded
        let timeAlignmentBoundaryDecoded = try containerValues.decodeIfPresent(ForecastClientTypes.TimeAlignmentBoundary.self, forKey: .timeAlignmentBoundary)
        timeAlignmentBoundary = timeAlignmentBoundaryDecoded
    }
}
