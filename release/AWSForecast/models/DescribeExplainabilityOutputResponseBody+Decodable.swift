// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeExplainabilityOutputResponseBody: Swift.Equatable {
    let explainabilityArn: Swift.String?
    let explainabilityName: Swift.String?
    let resourceArn: Swift.String?
    let explainabilityConfig: ForecastClientTypes.ExplainabilityConfig?
    let enableVisualization: Swift.Bool?
    let dataSource: ForecastClientTypes.DataSource?
    let schema: ForecastClientTypes.Schema?
    let startDateTime: Swift.String?
    let endDateTime: Swift.String?
    let estimatedTimeRemainingInMinutes: Swift.Int?
    let message: Swift.String?
    let status: Swift.String?
    let creationTime: ClientRuntime.Date?
    let lastModificationTime: ClientRuntime.Date?
}

extension DescribeExplainabilityOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTime = "CreationTime"
        case dataSource = "DataSource"
        case enableVisualization = "EnableVisualization"
        case endDateTime = "EndDateTime"
        case estimatedTimeRemainingInMinutes = "EstimatedTimeRemainingInMinutes"
        case explainabilityArn = "ExplainabilityArn"
        case explainabilityConfig = "ExplainabilityConfig"
        case explainabilityName = "ExplainabilityName"
        case lastModificationTime = "LastModificationTime"
        case message = "Message"
        case resourceArn = "ResourceArn"
        case schema = "Schema"
        case startDateTime = "StartDateTime"
        case status = "Status"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let explainabilityArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .explainabilityArn)
        explainabilityArn = explainabilityArnDecoded
        let explainabilityNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .explainabilityName)
        explainabilityName = explainabilityNameDecoded
        let resourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceArn)
        resourceArn = resourceArnDecoded
        let explainabilityConfigDecoded = try containerValues.decodeIfPresent(ForecastClientTypes.ExplainabilityConfig.self, forKey: .explainabilityConfig)
        explainabilityConfig = explainabilityConfigDecoded
        let enableVisualizationDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enableVisualization)
        enableVisualization = enableVisualizationDecoded
        let dataSourceDecoded = try containerValues.decodeIfPresent(ForecastClientTypes.DataSource.self, forKey: .dataSource)
        dataSource = dataSourceDecoded
        let schemaDecoded = try containerValues.decodeIfPresent(ForecastClientTypes.Schema.self, forKey: .schema)
        schema = schemaDecoded
        let startDateTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .startDateTime)
        startDateTime = startDateTimeDecoded
        let endDateTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .endDateTime)
        endDateTime = endDateTimeDecoded
        let estimatedTimeRemainingInMinutesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .estimatedTimeRemainingInMinutes)
        estimatedTimeRemainingInMinutes = estimatedTimeRemainingInMinutesDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let statusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .status)
        status = statusDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let lastModificationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModificationTime)
        lastModificationTime = lastModificationTimeDecoded
    }
}
