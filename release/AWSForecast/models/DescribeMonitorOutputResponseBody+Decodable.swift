// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeMonitorOutputResponseBody: Swift.Equatable {
    let monitorName: Swift.String?
    let monitorArn: Swift.String?
    let resourceArn: Swift.String?
    let status: Swift.String?
    let lastEvaluationTime: ClientRuntime.Date?
    let lastEvaluationState: Swift.String?
    let baseline: ForecastClientTypes.Baseline?
    let message: Swift.String?
    let creationTime: ClientRuntime.Date?
    let lastModificationTime: ClientRuntime.Date?
    let estimatedEvaluationTimeRemainingInMinutes: Swift.Int?
}

extension DescribeMonitorOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case baseline = "Baseline"
        case creationTime = "CreationTime"
        case estimatedEvaluationTimeRemainingInMinutes = "EstimatedEvaluationTimeRemainingInMinutes"
        case lastEvaluationState = "LastEvaluationState"
        case lastEvaluationTime = "LastEvaluationTime"
        case lastModificationTime = "LastModificationTime"
        case message = "Message"
        case monitorArn = "MonitorArn"
        case monitorName = "MonitorName"
        case resourceArn = "ResourceArn"
        case status = "Status"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let monitorNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .monitorName)
        monitorName = monitorNameDecoded
        let monitorArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .monitorArn)
        monitorArn = monitorArnDecoded
        let resourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceArn)
        resourceArn = resourceArnDecoded
        let statusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .status)
        status = statusDecoded
        let lastEvaluationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastEvaluationTime)
        lastEvaluationTime = lastEvaluationTimeDecoded
        let lastEvaluationStateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastEvaluationState)
        lastEvaluationState = lastEvaluationStateDecoded
        let baselineDecoded = try containerValues.decodeIfPresent(ForecastClientTypes.Baseline.self, forKey: .baseline)
        baseline = baselineDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let lastModificationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModificationTime)
        lastModificationTime = lastModificationTimeDecoded
        let estimatedEvaluationTimeRemainingInMinutesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .estimatedEvaluationTimeRemainingInMinutes)
        estimatedEvaluationTimeRemainingInMinutes = estimatedEvaluationTimeRemainingInMinutesDecoded
    }
}
