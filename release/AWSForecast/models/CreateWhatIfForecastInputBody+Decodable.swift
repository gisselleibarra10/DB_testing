// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateWhatIfForecastInputBody: Swift.Equatable {
    let whatIfForecastName: Swift.String?
    let whatIfAnalysisArn: Swift.String?
    let timeSeriesTransformations: [ForecastClientTypes.TimeSeriesTransformation]?
    let timeSeriesReplacementsDataSource: ForecastClientTypes.TimeSeriesReplacementsDataSource?
    let tags: [ForecastClientTypes.Tag]?
}

extension CreateWhatIfForecastInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case tags = "Tags"
        case timeSeriesReplacementsDataSource = "TimeSeriesReplacementsDataSource"
        case timeSeriesTransformations = "TimeSeriesTransformations"
        case whatIfAnalysisArn = "WhatIfAnalysisArn"
        case whatIfForecastName = "WhatIfForecastName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let whatIfForecastNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .whatIfForecastName)
        whatIfForecastName = whatIfForecastNameDecoded
        let whatIfAnalysisArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .whatIfAnalysisArn)
        whatIfAnalysisArn = whatIfAnalysisArnDecoded
        let timeSeriesTransformationsContainer = try containerValues.decodeIfPresent([ForecastClientTypes.TimeSeriesTransformation?].self, forKey: .timeSeriesTransformations)
        var timeSeriesTransformationsDecoded0:[ForecastClientTypes.TimeSeriesTransformation]? = nil
        if let timeSeriesTransformationsContainer = timeSeriesTransformationsContainer {
            timeSeriesTransformationsDecoded0 = [ForecastClientTypes.TimeSeriesTransformation]()
            for structure0 in timeSeriesTransformationsContainer {
                if let structure0 = structure0 {
                    timeSeriesTransformationsDecoded0?.append(structure0)
                }
            }
        }
        timeSeriesTransformations = timeSeriesTransformationsDecoded0
        let timeSeriesReplacementsDataSourceDecoded = try containerValues.decodeIfPresent(ForecastClientTypes.TimeSeriesReplacementsDataSource.self, forKey: .timeSeriesReplacementsDataSource)
        timeSeriesReplacementsDataSource = timeSeriesReplacementsDataSourceDecoded
        let tagsContainer = try containerValues.decodeIfPresent([ForecastClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[ForecastClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [ForecastClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}
