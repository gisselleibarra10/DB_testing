// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListLogPatternsOutputResponseBody: Swift.Equatable {
    let resourceGroupName: Swift.String?
    let logPatterns: [ApplicationInsightsClientTypes.LogPattern]?
    let nextToken: Swift.String?
}

extension ListLogPatternsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case logPatterns = "LogPatterns"
        case nextToken = "NextToken"
        case resourceGroupName = "ResourceGroupName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceGroupName)
        resourceGroupName = resourceGroupNameDecoded
        let logPatternsContainer = try containerValues.decodeIfPresent([ApplicationInsightsClientTypes.LogPattern?].self, forKey: .logPatterns)
        var logPatternsDecoded0:[ApplicationInsightsClientTypes.LogPattern]? = nil
        if let logPatternsContainer = logPatternsContainer {
            logPatternsDecoded0 = [ApplicationInsightsClientTypes.LogPattern]()
            for structure0 in logPatternsContainer {
                if let structure0 = structure0 {
                    logPatternsDecoded0?.append(structure0)
                }
            }
        }
        logPatterns = logPatternsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
