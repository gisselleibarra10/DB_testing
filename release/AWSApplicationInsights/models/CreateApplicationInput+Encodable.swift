// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CreateApplicationInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case autoConfigEnabled = "AutoConfigEnabled"
        case autoCreate = "AutoCreate"
        case cWEMonitorEnabled = "CWEMonitorEnabled"
        case groupingType = "GroupingType"
        case opsCenterEnabled = "OpsCenterEnabled"
        case opsItemSNSTopicArn = "OpsItemSNSTopicArn"
        case resourceGroupName = "ResourceGroupName"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let autoConfigEnabled = self.autoConfigEnabled {
            try encodeContainer.encode(autoConfigEnabled, forKey: .autoConfigEnabled)
        }
        if let autoCreate = self.autoCreate {
            try encodeContainer.encode(autoCreate, forKey: .autoCreate)
        }
        if let cWEMonitorEnabled = self.cWEMonitorEnabled {
            try encodeContainer.encode(cWEMonitorEnabled, forKey: .cWEMonitorEnabled)
        }
        if let groupingType = self.groupingType {
            try encodeContainer.encode(groupingType.rawValue, forKey: .groupingType)
        }
        if let opsCenterEnabled = self.opsCenterEnabled {
            try encodeContainer.encode(opsCenterEnabled, forKey: .opsCenterEnabled)
        }
        if let opsItemSNSTopicArn = self.opsItemSNSTopicArn {
            try encodeContainer.encode(opsItemSNSTopicArn, forKey: .opsItemSNSTopicArn)
        }
        if let resourceGroupName = self.resourceGroupName {
            try encodeContainer.encode(resourceGroupName, forKey: .resourceGroupName)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }
}
