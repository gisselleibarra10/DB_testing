// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListLogPatternSetsOutputResponseBody: Swift.Equatable {
    let resourceGroupName: Swift.String?
    let logPatternSets: [Swift.String]?
    let nextToken: Swift.String?
}

extension ListLogPatternSetsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case logPatternSets = "LogPatternSets"
        case nextToken = "NextToken"
        case resourceGroupName = "ResourceGroupName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceGroupName)
        resourceGroupName = resourceGroupNameDecoded
        let logPatternSetsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .logPatternSets)
        var logPatternSetsDecoded0:[Swift.String]? = nil
        if let logPatternSetsContainer = logPatternSetsContainer {
            logPatternSetsDecoded0 = [Swift.String]()
            for string0 in logPatternSetsContainer {
                if let string0 = string0 {
                    logPatternSetsDecoded0?.append(string0)
                }
            }
        }
        logPatternSets = logPatternSetsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
