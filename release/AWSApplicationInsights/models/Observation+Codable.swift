// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ApplicationInsightsClientTypes.Observation: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cloudWatchEventDetailType = "CloudWatchEventDetailType"
        case cloudWatchEventId = "CloudWatchEventId"
        case cloudWatchEventSource = "CloudWatchEventSource"
        case codeDeployApplication = "CodeDeployApplication"
        case codeDeployDeploymentGroup = "CodeDeployDeploymentGroup"
        case codeDeployDeploymentId = "CodeDeployDeploymentId"
        case codeDeployInstanceGroupId = "CodeDeployInstanceGroupId"
        case codeDeployState = "CodeDeployState"
        case ebsCause = "EbsCause"
        case ebsEvent = "EbsEvent"
        case ebsRequestId = "EbsRequestId"
        case ebsResult = "EbsResult"
        case ec2State = "Ec2State"
        case endTime = "EndTime"
        case healthEventArn = "HealthEventArn"
        case healthEventDescription = "HealthEventDescription"
        case healthEventTypeCategory = "HealthEventTypeCategory"
        case healthEventTypeCode = "HealthEventTypeCode"
        case healthService = "HealthService"
        case id = "Id"
        case lineTime = "LineTime"
        case logFilter = "LogFilter"
        case logGroup = "LogGroup"
        case logText = "LogText"
        case metricName = "MetricName"
        case metricNamespace = "MetricNamespace"
        case rdsEventCategories = "RdsEventCategories"
        case rdsEventMessage = "RdsEventMessage"
        case s3EventName = "S3EventName"
        case sourceARN = "SourceARN"
        case sourceType = "SourceType"
        case startTime = "StartTime"
        case statesArn = "StatesArn"
        case statesExecutionArn = "StatesExecutionArn"
        case statesInput = "StatesInput"
        case statesStatus = "StatesStatus"
        case unit = "Unit"
        case value = "Value"
        case xRayErrorPercent = "XRayErrorPercent"
        case xRayFaultPercent = "XRayFaultPercent"
        case xRayNodeName = "XRayNodeName"
        case xRayNodeType = "XRayNodeType"
        case xRayRequestAverageLatency = "XRayRequestAverageLatency"
        case xRayRequestCount = "XRayRequestCount"
        case xRayThrottlePercent = "XRayThrottlePercent"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cloudWatchEventDetailType = self.cloudWatchEventDetailType {
            try encodeContainer.encode(cloudWatchEventDetailType, forKey: .cloudWatchEventDetailType)
        }
        if let cloudWatchEventId = self.cloudWatchEventId {
            try encodeContainer.encode(cloudWatchEventId, forKey: .cloudWatchEventId)
        }
        if let cloudWatchEventSource = self.cloudWatchEventSource {
            try encodeContainer.encode(cloudWatchEventSource.rawValue, forKey: .cloudWatchEventSource)
        }
        if let codeDeployApplication = self.codeDeployApplication {
            try encodeContainer.encode(codeDeployApplication, forKey: .codeDeployApplication)
        }
        if let codeDeployDeploymentGroup = self.codeDeployDeploymentGroup {
            try encodeContainer.encode(codeDeployDeploymentGroup, forKey: .codeDeployDeploymentGroup)
        }
        if let codeDeployDeploymentId = self.codeDeployDeploymentId {
            try encodeContainer.encode(codeDeployDeploymentId, forKey: .codeDeployDeploymentId)
        }
        if let codeDeployInstanceGroupId = self.codeDeployInstanceGroupId {
            try encodeContainer.encode(codeDeployInstanceGroupId, forKey: .codeDeployInstanceGroupId)
        }
        if let codeDeployState = self.codeDeployState {
            try encodeContainer.encode(codeDeployState, forKey: .codeDeployState)
        }
        if let ebsCause = self.ebsCause {
            try encodeContainer.encode(ebsCause, forKey: .ebsCause)
        }
        if let ebsEvent = self.ebsEvent {
            try encodeContainer.encode(ebsEvent, forKey: .ebsEvent)
        }
        if let ebsRequestId = self.ebsRequestId {
            try encodeContainer.encode(ebsRequestId, forKey: .ebsRequestId)
        }
        if let ebsResult = self.ebsResult {
            try encodeContainer.encode(ebsResult, forKey: .ebsResult)
        }
        if let ec2State = self.ec2State {
            try encodeContainer.encode(ec2State, forKey: .ec2State)
        }
        if let endTime = self.endTime {
            try encodeContainer.encode(endTime.timeIntervalSince1970, forKey: .endTime)
        }
        if let healthEventArn = self.healthEventArn {
            try encodeContainer.encode(healthEventArn, forKey: .healthEventArn)
        }
        if let healthEventDescription = self.healthEventDescription {
            try encodeContainer.encode(healthEventDescription, forKey: .healthEventDescription)
        }
        if let healthEventTypeCategory = self.healthEventTypeCategory {
            try encodeContainer.encode(healthEventTypeCategory, forKey: .healthEventTypeCategory)
        }
        if let healthEventTypeCode = self.healthEventTypeCode {
            try encodeContainer.encode(healthEventTypeCode, forKey: .healthEventTypeCode)
        }
        if let healthService = self.healthService {
            try encodeContainer.encode(healthService, forKey: .healthService)
        }
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let lineTime = self.lineTime {
            try encodeContainer.encode(lineTime.timeIntervalSince1970, forKey: .lineTime)
        }
        if let logFilter = self.logFilter {
            try encodeContainer.encode(logFilter.rawValue, forKey: .logFilter)
        }
        if let logGroup = self.logGroup {
            try encodeContainer.encode(logGroup, forKey: .logGroup)
        }
        if let logText = self.logText {
            try encodeContainer.encode(logText, forKey: .logText)
        }
        if let metricName = self.metricName {
            try encodeContainer.encode(metricName, forKey: .metricName)
        }
        if let metricNamespace = self.metricNamespace {
            try encodeContainer.encode(metricNamespace, forKey: .metricNamespace)
        }
        if let rdsEventCategories = self.rdsEventCategories {
            try encodeContainer.encode(rdsEventCategories, forKey: .rdsEventCategories)
        }
        if let rdsEventMessage = self.rdsEventMessage {
            try encodeContainer.encode(rdsEventMessage, forKey: .rdsEventMessage)
        }
        if let s3EventName = self.s3EventName {
            try encodeContainer.encode(s3EventName, forKey: .s3EventName)
        }
        if let sourceARN = self.sourceARN {
            try encodeContainer.encode(sourceARN, forKey: .sourceARN)
        }
        if let sourceType = self.sourceType {
            try encodeContainer.encode(sourceType, forKey: .sourceType)
        }
        if let startTime = self.startTime {
            try encodeContainer.encode(startTime.timeIntervalSince1970, forKey: .startTime)
        }
        if let statesArn = self.statesArn {
            try encodeContainer.encode(statesArn, forKey: .statesArn)
        }
        if let statesExecutionArn = self.statesExecutionArn {
            try encodeContainer.encode(statesExecutionArn, forKey: .statesExecutionArn)
        }
        if let statesInput = self.statesInput {
            try encodeContainer.encode(statesInput, forKey: .statesInput)
        }
        if let statesStatus = self.statesStatus {
            try encodeContainer.encode(statesStatus, forKey: .statesStatus)
        }
        if let unit = self.unit {
            try encodeContainer.encode(unit, forKey: .unit)
        }
        if let value = self.value {
            try encodeContainer.encode(value, forKey: .value)
        }
        if let xRayErrorPercent = self.xRayErrorPercent {
            try encodeContainer.encode(xRayErrorPercent, forKey: .xRayErrorPercent)
        }
        if let xRayFaultPercent = self.xRayFaultPercent {
            try encodeContainer.encode(xRayFaultPercent, forKey: .xRayFaultPercent)
        }
        if let xRayNodeName = self.xRayNodeName {
            try encodeContainer.encode(xRayNodeName, forKey: .xRayNodeName)
        }
        if let xRayNodeType = self.xRayNodeType {
            try encodeContainer.encode(xRayNodeType, forKey: .xRayNodeType)
        }
        if let xRayRequestAverageLatency = self.xRayRequestAverageLatency {
            try encodeContainer.encode(xRayRequestAverageLatency, forKey: .xRayRequestAverageLatency)
        }
        if let xRayRequestCount = self.xRayRequestCount {
            try encodeContainer.encode(xRayRequestCount, forKey: .xRayRequestCount)
        }
        if let xRayThrottlePercent = self.xRayThrottlePercent {
            try encodeContainer.encode(xRayThrottlePercent, forKey: .xRayThrottlePercent)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let startTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .startTime)
        startTime = startTimeDecoded
        let endTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .endTime)
        endTime = endTimeDecoded
        let sourceTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceType)
        sourceType = sourceTypeDecoded
        let sourceARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceARN)
        sourceARN = sourceARNDecoded
        let logGroupDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logGroup)
        logGroup = logGroupDecoded
        let lineTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lineTime)
        lineTime = lineTimeDecoded
        let logTextDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logText)
        logText = logTextDecoded
        let logFilterDecoded = try containerValues.decodeIfPresent(ApplicationInsightsClientTypes.LogFilter.self, forKey: .logFilter)
        logFilter = logFilterDecoded
        let metricNamespaceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .metricNamespace)
        metricNamespace = metricNamespaceDecoded
        let metricNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .metricName)
        metricName = metricNameDecoded
        let unitDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .unit)
        unit = unitDecoded
        let valueDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .value)
        value = valueDecoded
        let cloudWatchEventIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cloudWatchEventId)
        cloudWatchEventId = cloudWatchEventIdDecoded
        let cloudWatchEventSourceDecoded = try containerValues.decodeIfPresent(ApplicationInsightsClientTypes.CloudWatchEventSource.self, forKey: .cloudWatchEventSource)
        cloudWatchEventSource = cloudWatchEventSourceDecoded
        let cloudWatchEventDetailTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cloudWatchEventDetailType)
        cloudWatchEventDetailType = cloudWatchEventDetailTypeDecoded
        let healthEventArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .healthEventArn)
        healthEventArn = healthEventArnDecoded
        let healthServiceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .healthService)
        healthService = healthServiceDecoded
        let healthEventTypeCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .healthEventTypeCode)
        healthEventTypeCode = healthEventTypeCodeDecoded
        let healthEventTypeCategoryDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .healthEventTypeCategory)
        healthEventTypeCategory = healthEventTypeCategoryDecoded
        let healthEventDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .healthEventDescription)
        healthEventDescription = healthEventDescriptionDecoded
        let codeDeployDeploymentIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .codeDeployDeploymentId)
        codeDeployDeploymentId = codeDeployDeploymentIdDecoded
        let codeDeployDeploymentGroupDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .codeDeployDeploymentGroup)
        codeDeployDeploymentGroup = codeDeployDeploymentGroupDecoded
        let codeDeployStateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .codeDeployState)
        codeDeployState = codeDeployStateDecoded
        let codeDeployApplicationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .codeDeployApplication)
        codeDeployApplication = codeDeployApplicationDecoded
        let codeDeployInstanceGroupIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .codeDeployInstanceGroupId)
        codeDeployInstanceGroupId = codeDeployInstanceGroupIdDecoded
        let ec2StateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ec2State)
        ec2State = ec2StateDecoded
        let rdsEventCategoriesDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .rdsEventCategories)
        rdsEventCategories = rdsEventCategoriesDecoded
        let rdsEventMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .rdsEventMessage)
        rdsEventMessage = rdsEventMessageDecoded
        let s3EventNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .s3EventName)
        s3EventName = s3EventNameDecoded
        let statesExecutionArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .statesExecutionArn)
        statesExecutionArn = statesExecutionArnDecoded
        let statesArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .statesArn)
        statesArn = statesArnDecoded
        let statesStatusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .statesStatus)
        statesStatus = statesStatusDecoded
        let statesInputDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .statesInput)
        statesInput = statesInputDecoded
        let ebsEventDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ebsEvent)
        ebsEvent = ebsEventDecoded
        let ebsResultDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ebsResult)
        ebsResult = ebsResultDecoded
        let ebsCauseDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ebsCause)
        ebsCause = ebsCauseDecoded
        let ebsRequestIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ebsRequestId)
        ebsRequestId = ebsRequestIdDecoded
        let xRayFaultPercentDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .xRayFaultPercent)
        xRayFaultPercent = xRayFaultPercentDecoded
        let xRayThrottlePercentDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .xRayThrottlePercent)
        xRayThrottlePercent = xRayThrottlePercentDecoded
        let xRayErrorPercentDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .xRayErrorPercent)
        xRayErrorPercent = xRayErrorPercentDecoded
        let xRayRequestCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .xRayRequestCount)
        xRayRequestCount = xRayRequestCountDecoded
        let xRayRequestAverageLatencyDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .xRayRequestAverageLatency)
        xRayRequestAverageLatency = xRayRequestAverageLatencyDecoded
        let xRayNodeNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .xRayNodeName)
        xRayNodeName = xRayNodeNameDecoded
        let xRayNodeTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .xRayNodeType)
        xRayNodeType = xRayNodeTypeDecoded
    }
}
