// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListProblemsOutputResponseBody: Swift.Equatable {
    let problemList: [ApplicationInsightsClientTypes.Problem]?
    let nextToken: Swift.String?
    let resourceGroupName: Swift.String?
}

extension ListProblemsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case problemList = "ProblemList"
        case resourceGroupName = "ResourceGroupName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let problemListContainer = try containerValues.decodeIfPresent([ApplicationInsightsClientTypes.Problem?].self, forKey: .problemList)
        var problemListDecoded0:[ApplicationInsightsClientTypes.Problem]? = nil
        if let problemListContainer = problemListContainer {
            problemListDecoded0 = [ApplicationInsightsClientTypes.Problem]()
            for structure0 in problemListContainer {
                if let structure0 = structure0 {
                    problemListDecoded0?.append(structure0)
                }
            }
        }
        problemList = problemListDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let resourceGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceGroupName)
        resourceGroupName = resourceGroupNameDecoded
    }
}
