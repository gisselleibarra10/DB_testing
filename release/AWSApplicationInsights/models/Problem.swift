// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ApplicationInsightsClientTypes {
    /// Describes a problem that is detected by correlating observations.
    public struct Problem: Swift.Equatable {
        /// The resource affected by the problem.
        public var affectedResource: Swift.String?
        /// The time when the problem ended, in epoch seconds.
        public var endTime: ClientRuntime.Date?
        /// Feedback provided by the user about the problem.
        public var feedback: [Swift.String:ApplicationInsightsClientTypes.FeedbackValue]?
        /// The ID of the problem.
        public var id: Swift.String?
        /// A detailed analysis of the problem using machine learning.
        public var insights: Swift.String?
        /// The last time that the problem reoccurred after its last resolution.
        public var lastRecurrenceTime: ClientRuntime.Date?
        /// The number of times that the same problem reoccurred after the first time it was resolved.
        public var recurringCount: Swift.Int?
        /// The name of the resource group affected by the problem.
        public var resourceGroupName: Swift.String?
        /// A measure of the level of impact of the problem.
        public var severityLevel: ApplicationInsightsClientTypes.SeverityLevel?
        /// The time when the problem started, in epoch seconds.
        public var startTime: ClientRuntime.Date?
        /// The status of the problem.
        public var status: ApplicationInsightsClientTypes.Status?
        /// The name of the problem.
        public var title: Swift.String?

        public init (
            affectedResource: Swift.String? = nil,
            endTime: ClientRuntime.Date? = nil,
            feedback: [Swift.String:ApplicationInsightsClientTypes.FeedbackValue]? = nil,
            id: Swift.String? = nil,
            insights: Swift.String? = nil,
            lastRecurrenceTime: ClientRuntime.Date? = nil,
            recurringCount: Swift.Int? = nil,
            resourceGroupName: Swift.String? = nil,
            severityLevel: ApplicationInsightsClientTypes.SeverityLevel? = nil,
            startTime: ClientRuntime.Date? = nil,
            status: ApplicationInsightsClientTypes.Status? = nil,
            title: Swift.String? = nil
        )
        {
            self.affectedResource = affectedResource
            self.endTime = endTime
            self.feedback = feedback
            self.id = id
            self.insights = insights
            self.lastRecurrenceTime = lastRecurrenceTime
            self.recurringCount = recurringCount
            self.resourceGroupName = resourceGroupName
            self.severityLevel = severityLevel
            self.startTime = startTime
            self.status = status
            self.title = title
        }
    }

}
