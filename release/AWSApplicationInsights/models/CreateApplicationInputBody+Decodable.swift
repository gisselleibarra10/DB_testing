// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateApplicationInputBody: Swift.Equatable {
    let resourceGroupName: Swift.String?
    let opsCenterEnabled: Swift.Bool?
    let cWEMonitorEnabled: Swift.Bool?
    let opsItemSNSTopicArn: Swift.String?
    let tags: [ApplicationInsightsClientTypes.Tag]?
    let autoConfigEnabled: Swift.Bool?
    let autoCreate: Swift.Bool?
    let groupingType: ApplicationInsightsClientTypes.GroupingType?
}

extension CreateApplicationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case autoConfigEnabled = "AutoConfigEnabled"
        case autoCreate = "AutoCreate"
        case cWEMonitorEnabled = "CWEMonitorEnabled"
        case groupingType = "GroupingType"
        case opsCenterEnabled = "OpsCenterEnabled"
        case opsItemSNSTopicArn = "OpsItemSNSTopicArn"
        case resourceGroupName = "ResourceGroupName"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceGroupName)
        resourceGroupName = resourceGroupNameDecoded
        let opsCenterEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .opsCenterEnabled)
        opsCenterEnabled = opsCenterEnabledDecoded
        let cWEMonitorEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .cWEMonitorEnabled)
        cWEMonitorEnabled = cWEMonitorEnabledDecoded
        let opsItemSNSTopicArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .opsItemSNSTopicArn)
        opsItemSNSTopicArn = opsItemSNSTopicArnDecoded
        let tagsContainer = try containerValues.decodeIfPresent([ApplicationInsightsClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[ApplicationInsightsClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [ApplicationInsightsClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let autoConfigEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .autoConfigEnabled)
        autoConfigEnabled = autoConfigEnabledDecoded
        let autoCreateDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .autoCreate)
        autoCreate = autoCreateDecoded
        let groupingTypeDecoded = try containerValues.decodeIfPresent(ApplicationInsightsClientTypes.GroupingType.self, forKey: .groupingType)
        groupingType = groupingTypeDecoded
    }
}
