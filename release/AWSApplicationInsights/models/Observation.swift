// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ApplicationInsightsClientTypes {
    /// Describes an anomaly or error with the application.
    public struct Observation: Swift.Equatable {
        /// The detail type of the CloudWatch Event-based observation, for example, EC2 Instance State-change Notification.
        public var cloudWatchEventDetailType: Swift.String?
        /// The ID of the CloudWatch Event-based observation related to the detected problem.
        public var cloudWatchEventId: Swift.String?
        /// The source of the CloudWatch Event.
        public var cloudWatchEventSource: ApplicationInsightsClientTypes.CloudWatchEventSource?
        /// The CodeDeploy application to which the deployment belongs.
        public var codeDeployApplication: Swift.String?
        /// The deployment group to which the CodeDeploy deployment belongs.
        public var codeDeployDeploymentGroup: Swift.String?
        /// The deployment ID of the CodeDeploy-based observation related to the detected problem.
        public var codeDeployDeploymentId: Swift.String?
        /// The instance group to which the CodeDeploy instance belongs.
        public var codeDeployInstanceGroupId: Swift.String?
        /// The status of the CodeDeploy deployment, for example SUCCESS or  FAILURE.
        public var codeDeployState: Swift.String?
        /// The cause of an EBS CloudWatch event.
        public var ebsCause: Swift.String?
        /// The type of EBS CloudWatch event, such as createVolume, deleteVolume or attachVolume.
        public var ebsEvent: Swift.String?
        /// The request ID of an EBS CloudWatch event.
        public var ebsRequestId: Swift.String?
        /// The result of an EBS CloudWatch event, such as failed or succeeded.
        public var ebsResult: Swift.String?
        /// The state of the instance, such as STOPPING or TERMINATING.
        public var ec2State: Swift.String?
        /// The time when the observation ended, in epoch seconds.
        public var endTime: ClientRuntime.Date?
        /// The Amazon Resource Name (ARN) of the AWS Health Event-based observation.
        public var healthEventArn: Swift.String?
        /// The description of the AWS Health event provided by the service, such as Amazon EC2.
        public var healthEventDescription: Swift.String?
        /// The category of the AWS Health event, such as issue.
        public var healthEventTypeCategory: Swift.String?
        /// The type of the AWS Health event, for example, AWS_EC2_POWER_CONNECTIVITY_ISSUE.
        public var healthEventTypeCode: Swift.String?
        /// The service to which the AWS Health Event belongs, such as EC2.
        public var healthService: Swift.String?
        /// The ID of the observation type.
        public var id: Swift.String?
        /// The timestamp in the CloudWatch Logs that specifies when the matched line occurred.
        public var lineTime: ClientRuntime.Date?
        /// The log filter of the observation.
        public var logFilter: ApplicationInsightsClientTypes.LogFilter?
        /// The log group name.
        public var logGroup: Swift.String?
        /// The log text of the observation.
        public var logText: Swift.String?
        /// The name of the observation metric.
        public var metricName: Swift.String?
        /// The namespace of the observation metric.
        public var metricNamespace: Swift.String?
        /// The category of an RDS event.
        public var rdsEventCategories: Swift.String?
        /// The message of an RDS event.
        public var rdsEventMessage: Swift.String?
        /// The name of the S3 CloudWatch Event-based observation.
        public var s3EventName: Swift.String?
        /// The source resource ARN of the observation.
        public var sourceARN: Swift.String?
        /// The source type of the observation.
        public var sourceType: Swift.String?
        /// The time when the observation was first detected, in epoch seconds.
        public var startTime: ClientRuntime.Date?
        /// The Amazon Resource Name (ARN) of the step function-based observation.
        public var statesArn: Swift.String?
        /// The Amazon Resource Name (ARN) of the step function execution-based observation.
        public var statesExecutionArn: Swift.String?
        /// The input to the step function-based observation.
        public var statesInput: Swift.String?
        /// The status of the step function-related observation.
        public var statesStatus: Swift.String?
        /// The unit of the source observation metric.
        public var unit: Swift.String?
        /// The value of the source observation metric.
        public var value: Swift.Double?
        /// The X-Ray request error percentage for this node.
        public var xRayErrorPercent: Swift.Int?
        /// The X-Ray request fault percentage for this node.
        public var xRayFaultPercent: Swift.Int?
        /// The name of the X-Ray node.
        public var xRayNodeName: Swift.String?
        /// The type of the X-Ray node.
        public var xRayNodeType: Swift.String?
        /// The X-Ray node request average latency for this node.
        public var xRayRequestAverageLatency: Swift.Int?
        /// The X-Ray request count for this node.
        public var xRayRequestCount: Swift.Int?
        /// The X-Ray request throttle percentage for this node.
        public var xRayThrottlePercent: Swift.Int?

        public init (
            cloudWatchEventDetailType: Swift.String? = nil,
            cloudWatchEventId: Swift.String? = nil,
            cloudWatchEventSource: ApplicationInsightsClientTypes.CloudWatchEventSource? = nil,
            codeDeployApplication: Swift.String? = nil,
            codeDeployDeploymentGroup: Swift.String? = nil,
            codeDeployDeploymentId: Swift.String? = nil,
            codeDeployInstanceGroupId: Swift.String? = nil,
            codeDeployState: Swift.String? = nil,
            ebsCause: Swift.String? = nil,
            ebsEvent: Swift.String? = nil,
            ebsRequestId: Swift.String? = nil,
            ebsResult: Swift.String? = nil,
            ec2State: Swift.String? = nil,
            endTime: ClientRuntime.Date? = nil,
            healthEventArn: Swift.String? = nil,
            healthEventDescription: Swift.String? = nil,
            healthEventTypeCategory: Swift.String? = nil,
            healthEventTypeCode: Swift.String? = nil,
            healthService: Swift.String? = nil,
            id: Swift.String? = nil,
            lineTime: ClientRuntime.Date? = nil,
            logFilter: ApplicationInsightsClientTypes.LogFilter? = nil,
            logGroup: Swift.String? = nil,
            logText: Swift.String? = nil,
            metricName: Swift.String? = nil,
            metricNamespace: Swift.String? = nil,
            rdsEventCategories: Swift.String? = nil,
            rdsEventMessage: Swift.String? = nil,
            s3EventName: Swift.String? = nil,
            sourceARN: Swift.String? = nil,
            sourceType: Swift.String? = nil,
            startTime: ClientRuntime.Date? = nil,
            statesArn: Swift.String? = nil,
            statesExecutionArn: Swift.String? = nil,
            statesInput: Swift.String? = nil,
            statesStatus: Swift.String? = nil,
            unit: Swift.String? = nil,
            value: Swift.Double? = nil,
            xRayErrorPercent: Swift.Int? = nil,
            xRayFaultPercent: Swift.Int? = nil,
            xRayNodeName: Swift.String? = nil,
            xRayNodeType: Swift.String? = nil,
            xRayRequestAverageLatency: Swift.Int? = nil,
            xRayRequestCount: Swift.Int? = nil,
            xRayThrottlePercent: Swift.Int? = nil
        )
        {
            self.cloudWatchEventDetailType = cloudWatchEventDetailType
            self.cloudWatchEventId = cloudWatchEventId
            self.cloudWatchEventSource = cloudWatchEventSource
            self.codeDeployApplication = codeDeployApplication
            self.codeDeployDeploymentGroup = codeDeployDeploymentGroup
            self.codeDeployDeploymentId = codeDeployDeploymentId
            self.codeDeployInstanceGroupId = codeDeployInstanceGroupId
            self.codeDeployState = codeDeployState
            self.ebsCause = ebsCause
            self.ebsEvent = ebsEvent
            self.ebsRequestId = ebsRequestId
            self.ebsResult = ebsResult
            self.ec2State = ec2State
            self.endTime = endTime
            self.healthEventArn = healthEventArn
            self.healthEventDescription = healthEventDescription
            self.healthEventTypeCategory = healthEventTypeCategory
            self.healthEventTypeCode = healthEventTypeCode
            self.healthService = healthService
            self.id = id
            self.lineTime = lineTime
            self.logFilter = logFilter
            self.logGroup = logGroup
            self.logText = logText
            self.metricName = metricName
            self.metricNamespace = metricNamespace
            self.rdsEventCategories = rdsEventCategories
            self.rdsEventMessage = rdsEventMessage
            self.s3EventName = s3EventName
            self.sourceARN = sourceARN
            self.sourceType = sourceType
            self.startTime = startTime
            self.statesArn = statesArn
            self.statesExecutionArn = statesExecutionArn
            self.statesInput = statesInput
            self.statesStatus = statesStatus
            self.unit = unit
            self.value = value
            self.xRayErrorPercent = xRayErrorPercent
            self.xRayFaultPercent = xRayFaultPercent
            self.xRayNodeName = xRayNodeName
            self.xRayNodeType = xRayNodeType
            self.xRayRequestAverageLatency = xRayRequestAverageLatency
            self.xRayRequestCount = xRayRequestCount
            self.xRayThrottlePercent = xRayThrottlePercent
        }
    }

}
