// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ApplicationInsightsClientTypes.Problem: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case affectedResource = "AffectedResource"
        case endTime = "EndTime"
        case feedback = "Feedback"
        case id = "Id"
        case insights = "Insights"
        case lastRecurrenceTime = "LastRecurrenceTime"
        case recurringCount = "RecurringCount"
        case resourceGroupName = "ResourceGroupName"
        case severityLevel = "SeverityLevel"
        case startTime = "StartTime"
        case status = "Status"
        case title = "Title"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let affectedResource = self.affectedResource {
            try encodeContainer.encode(affectedResource, forKey: .affectedResource)
        }
        if let endTime = self.endTime {
            try encodeContainer.encode(endTime.timeIntervalSince1970, forKey: .endTime)
        }
        if let feedback = feedback {
            var feedbackContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .feedback)
            for (dictKey0, feedback0) in feedback {
                try feedbackContainer.encode(feedback0.rawValue, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let insights = self.insights {
            try encodeContainer.encode(insights, forKey: .insights)
        }
        if let lastRecurrenceTime = self.lastRecurrenceTime {
            try encodeContainer.encode(lastRecurrenceTime.timeIntervalSince1970, forKey: .lastRecurrenceTime)
        }
        if let recurringCount = self.recurringCount {
            try encodeContainer.encode(recurringCount, forKey: .recurringCount)
        }
        if let resourceGroupName = self.resourceGroupName {
            try encodeContainer.encode(resourceGroupName, forKey: .resourceGroupName)
        }
        if let severityLevel = self.severityLevel {
            try encodeContainer.encode(severityLevel.rawValue, forKey: .severityLevel)
        }
        if let startTime = self.startTime {
            try encodeContainer.encode(startTime.timeIntervalSince1970, forKey: .startTime)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let title = self.title {
            try encodeContainer.encode(title, forKey: .title)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let titleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .title)
        title = titleDecoded
        let insightsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .insights)
        insights = insightsDecoded
        let statusDecoded = try containerValues.decodeIfPresent(ApplicationInsightsClientTypes.Status.self, forKey: .status)
        status = statusDecoded
        let affectedResourceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .affectedResource)
        affectedResource = affectedResourceDecoded
        let startTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .startTime)
        startTime = startTimeDecoded
        let endTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .endTime)
        endTime = endTimeDecoded
        let severityLevelDecoded = try containerValues.decodeIfPresent(ApplicationInsightsClientTypes.SeverityLevel.self, forKey: .severityLevel)
        severityLevel = severityLevelDecoded
        let resourceGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceGroupName)
        resourceGroupName = resourceGroupNameDecoded
        let feedbackContainer = try containerValues.decodeIfPresent([Swift.String: ApplicationInsightsClientTypes.FeedbackValue?].self, forKey: .feedback)
        var feedbackDecoded0: [Swift.String:ApplicationInsightsClientTypes.FeedbackValue]? = nil
        if let feedbackContainer = feedbackContainer {
            feedbackDecoded0 = [Swift.String:ApplicationInsightsClientTypes.FeedbackValue]()
            for (key0, feedbackvalue0) in feedbackContainer {
                if let feedbackvalue0 = feedbackvalue0 {
                    feedbackDecoded0?[key0] = feedbackvalue0
                }
            }
        }
        feedback = feedbackDecoded0
        let recurringCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .recurringCount)
        recurringCount = recurringCountDecoded
        let lastRecurrenceTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastRecurrenceTime)
        lastRecurrenceTime = lastRecurrenceTimeDecoded
    }
}
