// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeSavingsPlansOfferingRatesInputBody: Swift.Equatable {
    let savingsPlanOfferingIds: [Swift.String]?
    let savingsPlanPaymentOptions: [SavingsplansClientTypes.SavingsPlanPaymentOption]?
    let savingsPlanTypes: [SavingsplansClientTypes.SavingsPlanType]?
    let products: [SavingsplansClientTypes.SavingsPlanProductType]?
    let serviceCodes: [SavingsplansClientTypes.SavingsPlanRateServiceCode]?
    let usageTypes: [Swift.String]?
    let operations: [Swift.String]?
    let filters: [SavingsplansClientTypes.SavingsPlanOfferingRateFilterElement]?
    let nextToken: Swift.String?
    let maxResults: Swift.Int
}

extension DescribeSavingsPlansOfferingRatesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filters
        case maxResults
        case nextToken
        case operations
        case products
        case savingsPlanOfferingIds
        case savingsPlanPaymentOptions
        case savingsPlanTypes
        case serviceCodes
        case usageTypes
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let savingsPlanOfferingIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .savingsPlanOfferingIds)
        var savingsPlanOfferingIdsDecoded0:[Swift.String]? = nil
        if let savingsPlanOfferingIdsContainer = savingsPlanOfferingIdsContainer {
            savingsPlanOfferingIdsDecoded0 = [Swift.String]()
            for string0 in savingsPlanOfferingIdsContainer {
                if let string0 = string0 {
                    savingsPlanOfferingIdsDecoded0?.append(string0)
                }
            }
        }
        savingsPlanOfferingIds = savingsPlanOfferingIdsDecoded0
        let savingsPlanPaymentOptionsContainer = try containerValues.decodeIfPresent([SavingsplansClientTypes.SavingsPlanPaymentOption?].self, forKey: .savingsPlanPaymentOptions)
        var savingsPlanPaymentOptionsDecoded0:[SavingsplansClientTypes.SavingsPlanPaymentOption]? = nil
        if let savingsPlanPaymentOptionsContainer = savingsPlanPaymentOptionsContainer {
            savingsPlanPaymentOptionsDecoded0 = [SavingsplansClientTypes.SavingsPlanPaymentOption]()
            for string0 in savingsPlanPaymentOptionsContainer {
                if let string0 = string0 {
                    savingsPlanPaymentOptionsDecoded0?.append(string0)
                }
            }
        }
        savingsPlanPaymentOptions = savingsPlanPaymentOptionsDecoded0
        let savingsPlanTypesContainer = try containerValues.decodeIfPresent([SavingsplansClientTypes.SavingsPlanType?].self, forKey: .savingsPlanTypes)
        var savingsPlanTypesDecoded0:[SavingsplansClientTypes.SavingsPlanType]? = nil
        if let savingsPlanTypesContainer = savingsPlanTypesContainer {
            savingsPlanTypesDecoded0 = [SavingsplansClientTypes.SavingsPlanType]()
            for string0 in savingsPlanTypesContainer {
                if let string0 = string0 {
                    savingsPlanTypesDecoded0?.append(string0)
                }
            }
        }
        savingsPlanTypes = savingsPlanTypesDecoded0
        let productsContainer = try containerValues.decodeIfPresent([SavingsplansClientTypes.SavingsPlanProductType?].self, forKey: .products)
        var productsDecoded0:[SavingsplansClientTypes.SavingsPlanProductType]? = nil
        if let productsContainer = productsContainer {
            productsDecoded0 = [SavingsplansClientTypes.SavingsPlanProductType]()
            for string0 in productsContainer {
                if let string0 = string0 {
                    productsDecoded0?.append(string0)
                }
            }
        }
        products = productsDecoded0
        let serviceCodesContainer = try containerValues.decodeIfPresent([SavingsplansClientTypes.SavingsPlanRateServiceCode?].self, forKey: .serviceCodes)
        var serviceCodesDecoded0:[SavingsplansClientTypes.SavingsPlanRateServiceCode]? = nil
        if let serviceCodesContainer = serviceCodesContainer {
            serviceCodesDecoded0 = [SavingsplansClientTypes.SavingsPlanRateServiceCode]()
            for string0 in serviceCodesContainer {
                if let string0 = string0 {
                    serviceCodesDecoded0?.append(string0)
                }
            }
        }
        serviceCodes = serviceCodesDecoded0
        let usageTypesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .usageTypes)
        var usageTypesDecoded0:[Swift.String]? = nil
        if let usageTypesContainer = usageTypesContainer {
            usageTypesDecoded0 = [Swift.String]()
            for string0 in usageTypesContainer {
                if let string0 = string0 {
                    usageTypesDecoded0?.append(string0)
                }
            }
        }
        usageTypes = usageTypesDecoded0
        let operationsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .operations)
        var operationsDecoded0:[Swift.String]? = nil
        if let operationsContainer = operationsContainer {
            operationsDecoded0 = [Swift.String]()
            for string0 in operationsContainer {
                if let string0 = string0 {
                    operationsDecoded0?.append(string0)
                }
            }
        }
        operations = operationsDecoded0
        let filtersContainer = try containerValues.decodeIfPresent([SavingsplansClientTypes.SavingsPlanOfferingRateFilterElement?].self, forKey: .filters)
        var filtersDecoded0:[SavingsplansClientTypes.SavingsPlanOfferingRateFilterElement]? = nil
        if let filtersContainer = filtersContainer {
            filtersDecoded0 = [SavingsplansClientTypes.SavingsPlanOfferingRateFilterElement]()
            for structure0 in filtersContainer {
                if let structure0 = structure0 {
                    filtersDecoded0?.append(structure0)
                }
            }
        }
        filters = filtersDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults) ?? 0
        maxResults = maxResultsDecoded
    }
}
