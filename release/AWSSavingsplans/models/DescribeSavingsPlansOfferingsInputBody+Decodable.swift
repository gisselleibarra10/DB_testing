// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeSavingsPlansOfferingsInputBody: Swift.Equatable {
    let offeringIds: [Swift.String]?
    let paymentOptions: [SavingsplansClientTypes.SavingsPlanPaymentOption]?
    let productType: SavingsplansClientTypes.SavingsPlanProductType?
    let planTypes: [SavingsplansClientTypes.SavingsPlanType]?
    let durations: [Swift.Int]?
    let currencies: [SavingsplansClientTypes.CurrencyCode]?
    let descriptions: [Swift.String]?
    let serviceCodes: [Swift.String]?
    let usageTypes: [Swift.String]?
    let operations: [Swift.String]?
    let filters: [SavingsplansClientTypes.SavingsPlanOfferingFilterElement]?
    let nextToken: Swift.String?
    let maxResults: Swift.Int
}

extension DescribeSavingsPlansOfferingsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case currencies
        case descriptions
        case durations
        case filters
        case maxResults
        case nextToken
        case offeringIds
        case operations
        case paymentOptions
        case planTypes
        case productType
        case serviceCodes
        case usageTypes
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let offeringIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .offeringIds)
        var offeringIdsDecoded0:[Swift.String]? = nil
        if let offeringIdsContainer = offeringIdsContainer {
            offeringIdsDecoded0 = [Swift.String]()
            for string0 in offeringIdsContainer {
                if let string0 = string0 {
                    offeringIdsDecoded0?.append(string0)
                }
            }
        }
        offeringIds = offeringIdsDecoded0
        let paymentOptionsContainer = try containerValues.decodeIfPresent([SavingsplansClientTypes.SavingsPlanPaymentOption?].self, forKey: .paymentOptions)
        var paymentOptionsDecoded0:[SavingsplansClientTypes.SavingsPlanPaymentOption]? = nil
        if let paymentOptionsContainer = paymentOptionsContainer {
            paymentOptionsDecoded0 = [SavingsplansClientTypes.SavingsPlanPaymentOption]()
            for string0 in paymentOptionsContainer {
                if let string0 = string0 {
                    paymentOptionsDecoded0?.append(string0)
                }
            }
        }
        paymentOptions = paymentOptionsDecoded0
        let productTypeDecoded = try containerValues.decodeIfPresent(SavingsplansClientTypes.SavingsPlanProductType.self, forKey: .productType)
        productType = productTypeDecoded
        let planTypesContainer = try containerValues.decodeIfPresent([SavingsplansClientTypes.SavingsPlanType?].self, forKey: .planTypes)
        var planTypesDecoded0:[SavingsplansClientTypes.SavingsPlanType]? = nil
        if let planTypesContainer = planTypesContainer {
            planTypesDecoded0 = [SavingsplansClientTypes.SavingsPlanType]()
            for string0 in planTypesContainer {
                if let string0 = string0 {
                    planTypesDecoded0?.append(string0)
                }
            }
        }
        planTypes = planTypesDecoded0
        let durationsContainer = try containerValues.decodeIfPresent([Swift.Int?].self, forKey: .durations)
        var durationsDecoded0:[Swift.Int]? = nil
        if let durationsContainer = durationsContainer {
            durationsDecoded0 = [Swift.Int]()
            for long0 in durationsContainer {
                if let long0 = long0 {
                    durationsDecoded0?.append(long0)
                }
            }
        }
        durations = durationsDecoded0
        let currenciesContainer = try containerValues.decodeIfPresent([SavingsplansClientTypes.CurrencyCode?].self, forKey: .currencies)
        var currenciesDecoded0:[SavingsplansClientTypes.CurrencyCode]? = nil
        if let currenciesContainer = currenciesContainer {
            currenciesDecoded0 = [SavingsplansClientTypes.CurrencyCode]()
            for string0 in currenciesContainer {
                if let string0 = string0 {
                    currenciesDecoded0?.append(string0)
                }
            }
        }
        currencies = currenciesDecoded0
        let descriptionsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .descriptions)
        var descriptionsDecoded0:[Swift.String]? = nil
        if let descriptionsContainer = descriptionsContainer {
            descriptionsDecoded0 = [Swift.String]()
            for string0 in descriptionsContainer {
                if let string0 = string0 {
                    descriptionsDecoded0?.append(string0)
                }
            }
        }
        descriptions = descriptionsDecoded0
        let serviceCodesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .serviceCodes)
        var serviceCodesDecoded0:[Swift.String]? = nil
        if let serviceCodesContainer = serviceCodesContainer {
            serviceCodesDecoded0 = [Swift.String]()
            for string0 in serviceCodesContainer {
                if let string0 = string0 {
                    serviceCodesDecoded0?.append(string0)
                }
            }
        }
        serviceCodes = serviceCodesDecoded0
        let usageTypesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .usageTypes)
        var usageTypesDecoded0:[Swift.String]? = nil
        if let usageTypesContainer = usageTypesContainer {
            usageTypesDecoded0 = [Swift.String]()
            for string0 in usageTypesContainer {
                if let string0 = string0 {
                    usageTypesDecoded0?.append(string0)
                }
            }
        }
        usageTypes = usageTypesDecoded0
        let operationsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .operations)
        var operationsDecoded0:[Swift.String]? = nil
        if let operationsContainer = operationsContainer {
            operationsDecoded0 = [Swift.String]()
            for string0 in operationsContainer {
                if let string0 = string0 {
                    operationsDecoded0?.append(string0)
                }
            }
        }
        operations = operationsDecoded0
        let filtersContainer = try containerValues.decodeIfPresent([SavingsplansClientTypes.SavingsPlanOfferingFilterElement?].self, forKey: .filters)
        var filtersDecoded0:[SavingsplansClientTypes.SavingsPlanOfferingFilterElement]? = nil
        if let filtersContainer = filtersContainer {
            filtersDecoded0 = [SavingsplansClientTypes.SavingsPlanOfferingFilterElement]()
            for structure0 in filtersContainer {
                if let structure0 = structure0 {
                    filtersDecoded0?.append(structure0)
                }
            }
        }
        filters = filtersDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults) ?? 0
        maxResults = maxResultsDecoded
    }
}
