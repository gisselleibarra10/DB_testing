// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SavingsplansClientTypes.SavingsPlanOffering: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case currency
        case description
        case durationSeconds
        case offeringId
        case operation
        case paymentOption
        case planType
        case productTypes
        case properties
        case serviceCode
        case usageType
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let currency = self.currency {
            try encodeContainer.encode(currency.rawValue, forKey: .currency)
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if durationSeconds != 0 {
            try encodeContainer.encode(durationSeconds, forKey: .durationSeconds)
        }
        if let offeringId = self.offeringId {
            try encodeContainer.encode(offeringId, forKey: .offeringId)
        }
        if let operation = self.operation {
            try encodeContainer.encode(operation, forKey: .operation)
        }
        if let paymentOption = self.paymentOption {
            try encodeContainer.encode(paymentOption.rawValue, forKey: .paymentOption)
        }
        if let planType = self.planType {
            try encodeContainer.encode(planType.rawValue, forKey: .planType)
        }
        if let productTypes = productTypes {
            var productTypesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .productTypes)
            for savingsplanproducttypelist0 in productTypes {
                try productTypesContainer.encode(savingsplanproducttypelist0.rawValue)
            }
        }
        if let properties = properties {
            var propertiesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .properties)
            for savingsplanofferingpropertylist0 in properties {
                try propertiesContainer.encode(savingsplanofferingpropertylist0)
            }
        }
        if let serviceCode = self.serviceCode {
            try encodeContainer.encode(serviceCode, forKey: .serviceCode)
        }
        if let usageType = self.usageType {
            try encodeContainer.encode(usageType, forKey: .usageType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let offeringIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .offeringId)
        offeringId = offeringIdDecoded
        let productTypesContainer = try containerValues.decodeIfPresent([SavingsplansClientTypes.SavingsPlanProductType?].self, forKey: .productTypes)
        var productTypesDecoded0:[SavingsplansClientTypes.SavingsPlanProductType]? = nil
        if let productTypesContainer = productTypesContainer {
            productTypesDecoded0 = [SavingsplansClientTypes.SavingsPlanProductType]()
            for string0 in productTypesContainer {
                if let string0 = string0 {
                    productTypesDecoded0?.append(string0)
                }
            }
        }
        productTypes = productTypesDecoded0
        let planTypeDecoded = try containerValues.decodeIfPresent(SavingsplansClientTypes.SavingsPlanType.self, forKey: .planType)
        planType = planTypeDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let paymentOptionDecoded = try containerValues.decodeIfPresent(SavingsplansClientTypes.SavingsPlanPaymentOption.self, forKey: .paymentOption)
        paymentOption = paymentOptionDecoded
        let durationSecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .durationSeconds) ?? 0
        durationSeconds = durationSecondsDecoded
        let currencyDecoded = try containerValues.decodeIfPresent(SavingsplansClientTypes.CurrencyCode.self, forKey: .currency)
        currency = currencyDecoded
        let serviceCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serviceCode)
        serviceCode = serviceCodeDecoded
        let usageTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .usageType)
        usageType = usageTypeDecoded
        let operationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .operation)
        operation = operationDecoded
        let propertiesContainer = try containerValues.decodeIfPresent([SavingsplansClientTypes.SavingsPlanOfferingProperty?].self, forKey: .properties)
        var propertiesDecoded0:[SavingsplansClientTypes.SavingsPlanOfferingProperty]? = nil
        if let propertiesContainer = propertiesContainer {
            propertiesDecoded0 = [SavingsplansClientTypes.SavingsPlanOfferingProperty]()
            for structure0 in propertiesContainer {
                if let structure0 = structure0 {
                    propertiesDecoded0?.append(structure0)
                }
            }
        }
        properties = propertiesDecoded0
    }
}
