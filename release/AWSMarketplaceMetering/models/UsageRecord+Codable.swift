// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension MarketplaceMeteringClientTypes.UsageRecord: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case customerIdentifier = "CustomerIdentifier"
        case dimension = "Dimension"
        case quantity = "Quantity"
        case timestamp = "Timestamp"
        case usageAllocations = "UsageAllocations"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let customerIdentifier = self.customerIdentifier {
            try encodeContainer.encode(customerIdentifier, forKey: .customerIdentifier)
        }
        if let dimension = self.dimension {
            try encodeContainer.encode(dimension, forKey: .dimension)
        }
        if let quantity = self.quantity {
            try encodeContainer.encode(quantity, forKey: .quantity)
        }
        if let timestamp = self.timestamp {
            try encodeContainer.encode(timestamp.timeIntervalSince1970, forKey: .timestamp)
        }
        if let usageAllocations = usageAllocations {
            var usageAllocationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .usageAllocations)
            for usageallocations0 in usageAllocations {
                try usageAllocationsContainer.encode(usageallocations0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let timestampDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .timestamp)
        timestamp = timestampDecoded
        let customerIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .customerIdentifier)
        customerIdentifier = customerIdentifierDecoded
        let dimensionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dimension)
        dimension = dimensionDecoded
        let quantityDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .quantity)
        quantity = quantityDecoded
        let usageAllocationsContainer = try containerValues.decodeIfPresent([MarketplaceMeteringClientTypes.UsageAllocation?].self, forKey: .usageAllocations)
        var usageAllocationsDecoded0:[MarketplaceMeteringClientTypes.UsageAllocation]? = nil
        if let usageAllocationsContainer = usageAllocationsContainer {
            usageAllocationsDecoded0 = [MarketplaceMeteringClientTypes.UsageAllocation]()
            for structure0 in usageAllocationsContainer {
                if let structure0 = structure0 {
                    usageAllocationsDecoded0?.append(structure0)
                }
            }
        }
        usageAllocations = usageAllocationsDecoded0
    }
}
