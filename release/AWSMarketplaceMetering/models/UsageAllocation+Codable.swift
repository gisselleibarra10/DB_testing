// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension MarketplaceMeteringClientTypes.UsageAllocation: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case allocatedUsageQuantity = "AllocatedUsageQuantity"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let allocatedUsageQuantity = self.allocatedUsageQuantity {
            try encodeContainer.encode(allocatedUsageQuantity, forKey: .allocatedUsageQuantity)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let allocatedUsageQuantityDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .allocatedUsageQuantity)
        allocatedUsageQuantity = allocatedUsageQuantityDecoded
        let tagsContainer = try containerValues.decodeIfPresent([MarketplaceMeteringClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[MarketplaceMeteringClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [MarketplaceMeteringClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}
