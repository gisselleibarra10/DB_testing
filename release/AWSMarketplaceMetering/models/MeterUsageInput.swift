// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct MeterUsageInput: Swift.Equatable {
    /// Checks whether you have the permissions required for the action, but does not make the request. If you have the permissions, the request returns DryRunOperation; otherwise, it returns UnauthorizedException. Defaults to false if not specified.
    public var dryRun: Swift.Bool?
    /// Product code is used to uniquely identify a product in AWS Marketplace. The product code should be the same as the one used during the publishing of a new product.
    /// This member is required.
    public var productCode: Swift.String?
    /// Timestamp, in UTC, for which the usage is being reported. Your application can meter usage for up to one hour in the past. Make sure the timestamp value is not before the start of the software usage.
    /// This member is required.
    public var timestamp: ClientRuntime.Date?
    /// The set of UsageAllocations to submit. The sum of all UsageAllocation quantities must equal the UsageQuantity of the MeterUsage request, and each UsageAllocation must have a unique set of tags (include no tags).
    public var usageAllocations: [MarketplaceMeteringClientTypes.UsageAllocation]?
    /// It will be one of the fcp dimension name provided during the publishing of the product.
    /// This member is required.
    public var usageDimension: Swift.String?
    /// Consumption value for the hour. Defaults to 0 if not specified.
    public var usageQuantity: Swift.Int?

    public init (
        dryRun: Swift.Bool? = nil,
        productCode: Swift.String? = nil,
        timestamp: ClientRuntime.Date? = nil,
        usageAllocations: [MarketplaceMeteringClientTypes.UsageAllocation]? = nil,
        usageDimension: Swift.String? = nil,
        usageQuantity: Swift.Int? = nil
    )
    {
        self.dryRun = dryRun
        self.productCode = productCode
        self.timestamp = timestamp
        self.usageAllocations = usageAllocations
        self.usageDimension = usageDimension
        self.usageQuantity = usageQuantity
    }
}
