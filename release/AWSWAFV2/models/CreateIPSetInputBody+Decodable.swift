// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateIPSetInputBody: Swift.Equatable {
    let name: Swift.String?
    let scope: Wafv2ClientTypes.Scope?
    let description: Swift.String?
    let iPAddressVersion: Wafv2ClientTypes.IPAddressVersion?
    let addresses: [Swift.String]?
    let tags: [Wafv2ClientTypes.Tag]?
}

extension CreateIPSetInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case addresses = "Addresses"
        case description = "Description"
        case iPAddressVersion = "IPAddressVersion"
        case name = "Name"
        case scope = "Scope"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let scopeDecoded = try containerValues.decodeIfPresent(Wafv2ClientTypes.Scope.self, forKey: .scope)
        scope = scopeDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let iPAddressVersionDecoded = try containerValues.decodeIfPresent(Wafv2ClientTypes.IPAddressVersion.self, forKey: .iPAddressVersion)
        iPAddressVersion = iPAddressVersionDecoded
        let addressesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .addresses)
        var addressesDecoded0:[Swift.String]? = nil
        if let addressesContainer = addressesContainer {
            addressesDecoded0 = [Swift.String]()
            for string0 in addressesContainer {
                if let string0 = string0 {
                    addressesDecoded0?.append(string0)
                }
            }
        }
        addresses = addressesDecoded0
        let tagsContainer = try containerValues.decodeIfPresent([Wafv2ClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[Wafv2ClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Wafv2ClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}
