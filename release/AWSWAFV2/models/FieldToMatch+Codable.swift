// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Wafv2ClientTypes.FieldToMatch: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case allQueryArguments = "AllQueryArguments"
        case body = "Body"
        case cookies = "Cookies"
        case headers = "Headers"
        case jsonBody = "JsonBody"
        case method = "Method"
        case queryString = "QueryString"
        case singleHeader = "SingleHeader"
        case singleQueryArgument = "SingleQueryArgument"
        case uriPath = "UriPath"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let allQueryArguments = self.allQueryArguments {
            try encodeContainer.encode(allQueryArguments, forKey: .allQueryArguments)
        }
        if let body = self.body {
            try encodeContainer.encode(body, forKey: .body)
        }
        if let cookies = self.cookies {
            try encodeContainer.encode(cookies, forKey: .cookies)
        }
        if let headers = self.headers {
            try encodeContainer.encode(headers, forKey: .headers)
        }
        if let jsonBody = self.jsonBody {
            try encodeContainer.encode(jsonBody, forKey: .jsonBody)
        }
        if let method = self.method {
            try encodeContainer.encode(method, forKey: .method)
        }
        if let queryString = self.queryString {
            try encodeContainer.encode(queryString, forKey: .queryString)
        }
        if let singleHeader = self.singleHeader {
            try encodeContainer.encode(singleHeader, forKey: .singleHeader)
        }
        if let singleQueryArgument = self.singleQueryArgument {
            try encodeContainer.encode(singleQueryArgument, forKey: .singleQueryArgument)
        }
        if let uriPath = self.uriPath {
            try encodeContainer.encode(uriPath, forKey: .uriPath)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let singleHeaderDecoded = try containerValues.decodeIfPresent(Wafv2ClientTypes.SingleHeader.self, forKey: .singleHeader)
        singleHeader = singleHeaderDecoded
        let singleQueryArgumentDecoded = try containerValues.decodeIfPresent(Wafv2ClientTypes.SingleQueryArgument.self, forKey: .singleQueryArgument)
        singleQueryArgument = singleQueryArgumentDecoded
        let allQueryArgumentsDecoded = try containerValues.decodeIfPresent(Wafv2ClientTypes.AllQueryArguments.self, forKey: .allQueryArguments)
        allQueryArguments = allQueryArgumentsDecoded
        let uriPathDecoded = try containerValues.decodeIfPresent(Wafv2ClientTypes.UriPath.self, forKey: .uriPath)
        uriPath = uriPathDecoded
        let queryStringDecoded = try containerValues.decodeIfPresent(Wafv2ClientTypes.QueryString.self, forKey: .queryString)
        queryString = queryStringDecoded
        let bodyDecoded = try containerValues.decodeIfPresent(Wafv2ClientTypes.Body.self, forKey: .body)
        body = bodyDecoded
        let methodDecoded = try containerValues.decodeIfPresent(Wafv2ClientTypes.Method.self, forKey: .method)
        method = methodDecoded
        let jsonBodyDecoded = try containerValues.decodeIfPresent(Wafv2ClientTypes.JsonBody.self, forKey: .jsonBody)
        jsonBody = jsonBodyDecoded
        let headersDecoded = try containerValues.decodeIfPresent(Wafv2ClientTypes.Headers.self, forKey: .headers)
        headers = headersDecoded
        let cookiesDecoded = try containerValues.decodeIfPresent(Wafv2ClientTypes.Cookies.self, forKey: .cookies)
        cookies = cookiesDecoded
    }
}
