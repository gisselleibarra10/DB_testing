// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Wafv2ClientTypes.ByteMatchStatement: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case fieldToMatch = "FieldToMatch"
        case positionalConstraint = "PositionalConstraint"
        case searchString = "SearchString"
        case textTransformations = "TextTransformations"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let fieldToMatch = self.fieldToMatch {
            try encodeContainer.encode(fieldToMatch, forKey: .fieldToMatch)
        }
        if let positionalConstraint = self.positionalConstraint {
            try encodeContainer.encode(positionalConstraint.rawValue, forKey: .positionalConstraint)
        }
        if let searchString = self.searchString {
            try encodeContainer.encode(searchString.base64EncodedString(), forKey: .searchString)
        }
        if let textTransformations = textTransformations {
            var textTransformationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .textTransformations)
            for texttransformations0 in textTransformations {
                try textTransformationsContainer.encode(texttransformations0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let searchStringDecoded = try containerValues.decodeIfPresent(ClientRuntime.Data.self, forKey: .searchString)
        searchString = searchStringDecoded
        let fieldToMatchDecoded = try containerValues.decodeIfPresent(Wafv2ClientTypes.FieldToMatch.self, forKey: .fieldToMatch)
        fieldToMatch = fieldToMatchDecoded
        let textTransformationsContainer = try containerValues.decodeIfPresent([Wafv2ClientTypes.TextTransformation?].self, forKey: .textTransformations)
        var textTransformationsDecoded0:[Wafv2ClientTypes.TextTransformation]? = nil
        if let textTransformationsContainer = textTransformationsContainer {
            textTransformationsDecoded0 = [Wafv2ClientTypes.TextTransformation]()
            for structure0 in textTransformationsContainer {
                if let structure0 = structure0 {
                    textTransformationsDecoded0?.append(structure0)
                }
            }
        }
        textTransformations = textTransformationsDecoded0
        let positionalConstraintDecoded = try containerValues.decodeIfPresent(Wafv2ClientTypes.PositionalConstraint.self, forKey: .positionalConstraint)
        positionalConstraint = positionalConstraintDecoded
    }
}
