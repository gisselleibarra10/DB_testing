// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct UpdateRegexPatternSetInputBody: Swift.Equatable {
    let name: Swift.String?
    let scope: Wafv2ClientTypes.Scope?
    let id: Swift.String?
    let description: Swift.String?
    let regularExpressionList: [Wafv2ClientTypes.Regex]?
    let lockToken: Swift.String?
}

extension UpdateRegexPatternSetInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description = "Description"
        case id = "Id"
        case lockToken = "LockToken"
        case name = "Name"
        case regularExpressionList = "RegularExpressionList"
        case scope = "Scope"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let scopeDecoded = try containerValues.decodeIfPresent(Wafv2ClientTypes.Scope.self, forKey: .scope)
        scope = scopeDecoded
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let regularExpressionListContainer = try containerValues.decodeIfPresent([Wafv2ClientTypes.Regex?].self, forKey: .regularExpressionList)
        var regularExpressionListDecoded0:[Wafv2ClientTypes.Regex]? = nil
        if let regularExpressionListContainer = regularExpressionListContainer {
            regularExpressionListDecoded0 = [Wafv2ClientTypes.Regex]()
            for structure0 in regularExpressionListContainer {
                if let structure0 = structure0 {
                    regularExpressionListDecoded0?.append(structure0)
                }
            }
        }
        regularExpressionList = regularExpressionListDecoded0
        let lockTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lockToken)
        lockToken = lockTokenDecoded
    }
}
