// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Wafv2ClientTypes.WebACL: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case aRN = "ARN"
        case capacity = "Capacity"
        case captchaConfig = "CaptchaConfig"
        case customResponseBodies = "CustomResponseBodies"
        case defaultAction = "DefaultAction"
        case description = "Description"
        case id = "Id"
        case labelNamespace = "LabelNamespace"
        case managedByFirewallManager = "ManagedByFirewallManager"
        case name = "Name"
        case postProcessFirewallManagerRuleGroups = "PostProcessFirewallManagerRuleGroups"
        case preProcessFirewallManagerRuleGroups = "PreProcessFirewallManagerRuleGroups"
        case rules = "Rules"
        case visibilityConfig = "VisibilityConfig"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let aRN = self.aRN {
            try encodeContainer.encode(aRN, forKey: .aRN)
        }
        if capacity != 0 {
            try encodeContainer.encode(capacity, forKey: .capacity)
        }
        if let captchaConfig = self.captchaConfig {
            try encodeContainer.encode(captchaConfig, forKey: .captchaConfig)
        }
        if let customResponseBodies = customResponseBodies {
            var customResponseBodiesContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .customResponseBodies)
            for (dictKey0, customresponsebodies0) in customResponseBodies {
                try customResponseBodiesContainer.encode(customresponsebodies0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let defaultAction = self.defaultAction {
            try encodeContainer.encode(defaultAction, forKey: .defaultAction)
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let labelNamespace = self.labelNamespace {
            try encodeContainer.encode(labelNamespace, forKey: .labelNamespace)
        }
        if managedByFirewallManager != false {
            try encodeContainer.encode(managedByFirewallManager, forKey: .managedByFirewallManager)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let postProcessFirewallManagerRuleGroups = postProcessFirewallManagerRuleGroups {
            var postProcessFirewallManagerRuleGroupsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .postProcessFirewallManagerRuleGroups)
            for firewallmanagerrulegroups0 in postProcessFirewallManagerRuleGroups {
                try postProcessFirewallManagerRuleGroupsContainer.encode(firewallmanagerrulegroups0)
            }
        }
        if let preProcessFirewallManagerRuleGroups = preProcessFirewallManagerRuleGroups {
            var preProcessFirewallManagerRuleGroupsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .preProcessFirewallManagerRuleGroups)
            for firewallmanagerrulegroups0 in preProcessFirewallManagerRuleGroups {
                try preProcessFirewallManagerRuleGroupsContainer.encode(firewallmanagerrulegroups0)
            }
        }
        if let rules = rules {
            var rulesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .rules)
            for rules0 in rules {
                try rulesContainer.encode(rules0)
            }
        }
        if let visibilityConfig = self.visibilityConfig {
            try encodeContainer.encode(visibilityConfig, forKey: .visibilityConfig)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let aRNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .aRN)
        aRN = aRNDecoded
        let defaultActionDecoded = try containerValues.decodeIfPresent(Wafv2ClientTypes.DefaultAction.self, forKey: .defaultAction)
        defaultAction = defaultActionDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let rulesContainer = try containerValues.decodeIfPresent([Wafv2ClientTypes.Rule?].self, forKey: .rules)
        var rulesDecoded0:[Wafv2ClientTypes.Rule]? = nil
        if let rulesContainer = rulesContainer {
            rulesDecoded0 = [Wafv2ClientTypes.Rule]()
            for structure0 in rulesContainer {
                if let structure0 = structure0 {
                    rulesDecoded0?.append(structure0)
                }
            }
        }
        rules = rulesDecoded0
        let visibilityConfigDecoded = try containerValues.decodeIfPresent(Wafv2ClientTypes.VisibilityConfig.self, forKey: .visibilityConfig)
        visibilityConfig = visibilityConfigDecoded
        let capacityDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .capacity) ?? 0
        capacity = capacityDecoded
        let preProcessFirewallManagerRuleGroupsContainer = try containerValues.decodeIfPresent([Wafv2ClientTypes.FirewallManagerRuleGroup?].self, forKey: .preProcessFirewallManagerRuleGroups)
        var preProcessFirewallManagerRuleGroupsDecoded0:[Wafv2ClientTypes.FirewallManagerRuleGroup]? = nil
        if let preProcessFirewallManagerRuleGroupsContainer = preProcessFirewallManagerRuleGroupsContainer {
            preProcessFirewallManagerRuleGroupsDecoded0 = [Wafv2ClientTypes.FirewallManagerRuleGroup]()
            for structure0 in preProcessFirewallManagerRuleGroupsContainer {
                if let structure0 = structure0 {
                    preProcessFirewallManagerRuleGroupsDecoded0?.append(structure0)
                }
            }
        }
        preProcessFirewallManagerRuleGroups = preProcessFirewallManagerRuleGroupsDecoded0
        let postProcessFirewallManagerRuleGroupsContainer = try containerValues.decodeIfPresent([Wafv2ClientTypes.FirewallManagerRuleGroup?].self, forKey: .postProcessFirewallManagerRuleGroups)
        var postProcessFirewallManagerRuleGroupsDecoded0:[Wafv2ClientTypes.FirewallManagerRuleGroup]? = nil
        if let postProcessFirewallManagerRuleGroupsContainer = postProcessFirewallManagerRuleGroupsContainer {
            postProcessFirewallManagerRuleGroupsDecoded0 = [Wafv2ClientTypes.FirewallManagerRuleGroup]()
            for structure0 in postProcessFirewallManagerRuleGroupsContainer {
                if let structure0 = structure0 {
                    postProcessFirewallManagerRuleGroupsDecoded0?.append(structure0)
                }
            }
        }
        postProcessFirewallManagerRuleGroups = postProcessFirewallManagerRuleGroupsDecoded0
        let managedByFirewallManagerDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .managedByFirewallManager) ?? false
        managedByFirewallManager = managedByFirewallManagerDecoded
        let labelNamespaceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .labelNamespace)
        labelNamespace = labelNamespaceDecoded
        let customResponseBodiesContainer = try containerValues.decodeIfPresent([Swift.String: Wafv2ClientTypes.CustomResponseBody?].self, forKey: .customResponseBodies)
        var customResponseBodiesDecoded0: [Swift.String:Wafv2ClientTypes.CustomResponseBody]? = nil
        if let customResponseBodiesContainer = customResponseBodiesContainer {
            customResponseBodiesDecoded0 = [Swift.String:Wafv2ClientTypes.CustomResponseBody]()
            for (key0, customresponsebody0) in customResponseBodiesContainer {
                if let customresponsebody0 = customresponsebody0 {
                    customResponseBodiesDecoded0?[key0] = customresponsebody0
                }
            }
        }
        customResponseBodies = customResponseBodiesDecoded0
        let captchaConfigDecoded = try containerValues.decodeIfPresent(Wafv2ClientTypes.CaptchaConfig.self, forKey: .captchaConfig)
        captchaConfig = captchaConfigDecoded
    }
}
