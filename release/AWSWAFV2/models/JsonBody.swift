// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension Wafv2ClientTypes {
    /// Inspect the body of the web request as JSON. The body immediately follows the request headers. This is used to indicate the web request component to inspect, in the [FieldToMatch] specification. Use the specifications in this object to indicate which parts of the JSON body to inspect using the rule's inspection criteria. WAF inspects only the parts of the JSON that result from the matches that you indicate. Example JSON: "JsonBody": { "MatchPattern": { "All": {} }, "MatchScope": "ALL" }
    public struct JsonBody: Swift.Equatable {
        /// What WAF should do if it fails to completely parse the JSON body. The options are the following:
        ///
        /// * EVALUATE_AS_STRING - Inspect the body as plain text. WAF applies the text transformations and inspection criteria that you defined for the JSON inspection to the body text string.
        ///
        /// * MATCH - Treat the web request as matching the rule statement. WAF applies the rule action to the request.
        ///
        /// * NO_MATCH - Treat the web request as not matching the rule statement.
        ///
        ///
        /// If you don't provide this setting, WAF parses and evaluates the content only up to the first parsing failure that it encounters. WAF does its best to parse the entire JSON body, but might be forced to stop for reasons such as invalid characters, duplicate keys, truncation, and any content whose root node isn't an object or an array. WAF parses the JSON in the following examples as two valid key, value pairs:
        ///
        /// * Missing comma: {"key1":"value1""key2":"value2"}
        ///
        /// * Missing colon: {"key1":"value1","key2""value2"}
        ///
        /// * Extra colons: {"key1"::"value1","key2""value2"}
        public var invalidFallbackBehavior: Wafv2ClientTypes.BodyParsingFallbackBehavior?
        /// The patterns to look for in the JSON body. WAF inspects the results of these pattern matches against the rule inspection criteria.
        /// This member is required.
        public var matchPattern: Wafv2ClientTypes.JsonMatchPattern?
        /// The parts of the JSON to match against using the MatchPattern. If you specify All, WAF matches against keys and values.
        /// This member is required.
        public var matchScope: Wafv2ClientTypes.JsonMatchScope?
        /// What WAF should do if the body is larger than WAF can inspect. WAF does not support inspecting the entire contents of the body of a web request when the body exceeds 8 KB (8192 bytes). Only the first 8 KB of the request body are forwarded to WAF by the underlying host service. The options for oversize handling are the following:
        ///
        /// * CONTINUE - Inspect the body normally, according to the rule inspection criteria.
        ///
        /// * MATCH - Treat the web request as matching the rule statement. WAF applies the rule action to the request.
        ///
        /// * NO_MATCH - Treat the web request as not matching the rule statement.
        ///
        ///
        /// You can combine the MATCH or NO_MATCH settings for oversize handling with your rule and web ACL action settings, so that you block any request whose body is over 8 KB. Default: CONTINUE
        public var oversizeHandling: Wafv2ClientTypes.OversizeHandling?

        public init (
            invalidFallbackBehavior: Wafv2ClientTypes.BodyParsingFallbackBehavior? = nil,
            matchPattern: Wafv2ClientTypes.JsonMatchPattern? = nil,
            matchScope: Wafv2ClientTypes.JsonMatchScope? = nil,
            oversizeHandling: Wafv2ClientTypes.OversizeHandling? = nil
        )
        {
            self.invalidFallbackBehavior = invalidFallbackBehavior
            self.matchPattern = matchPattern
            self.matchScope = matchScope
            self.oversizeHandling = oversizeHandling
        }
    }

}
