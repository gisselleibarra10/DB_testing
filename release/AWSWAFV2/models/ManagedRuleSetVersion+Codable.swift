// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Wafv2ClientTypes.ManagedRuleSetVersion: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case associatedRuleGroupArn = "AssociatedRuleGroupArn"
        case capacity = "Capacity"
        case expiryTimestamp = "ExpiryTimestamp"
        case forecastedLifetime = "ForecastedLifetime"
        case lastUpdateTimestamp = "LastUpdateTimestamp"
        case publishTimestamp = "PublishTimestamp"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let associatedRuleGroupArn = self.associatedRuleGroupArn {
            try encodeContainer.encode(associatedRuleGroupArn, forKey: .associatedRuleGroupArn)
        }
        if capacity != 0 {
            try encodeContainer.encode(capacity, forKey: .capacity)
        }
        if let expiryTimestamp = self.expiryTimestamp {
            try encodeContainer.encode(expiryTimestamp.timeIntervalSince1970, forKey: .expiryTimestamp)
        }
        if let forecastedLifetime = self.forecastedLifetime {
            try encodeContainer.encode(forecastedLifetime, forKey: .forecastedLifetime)
        }
        if let lastUpdateTimestamp = self.lastUpdateTimestamp {
            try encodeContainer.encode(lastUpdateTimestamp.timeIntervalSince1970, forKey: .lastUpdateTimestamp)
        }
        if let publishTimestamp = self.publishTimestamp {
            try encodeContainer.encode(publishTimestamp.timeIntervalSince1970, forKey: .publishTimestamp)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let associatedRuleGroupArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .associatedRuleGroupArn)
        associatedRuleGroupArn = associatedRuleGroupArnDecoded
        let capacityDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .capacity) ?? 0
        capacity = capacityDecoded
        let forecastedLifetimeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .forecastedLifetime)
        forecastedLifetime = forecastedLifetimeDecoded
        let publishTimestampDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .publishTimestamp)
        publishTimestamp = publishTimestampDecoded
        let lastUpdateTimestampDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastUpdateTimestamp)
        lastUpdateTimestamp = lastUpdateTimestampDecoded
        let expiryTimestampDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .expiryTimestamp)
        expiryTimestamp = expiryTimestampDecoded
    }
}
