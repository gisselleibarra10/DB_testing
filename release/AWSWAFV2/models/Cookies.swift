// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension Wafv2ClientTypes {
    /// Inspect the cookies in the web request. You can specify the parts of the cookies to inspect and you can narrow the set of cookies to inspect by including or excluding specific keys. This is used to indicate the web request component to inspect, in the [FieldToMatch] specification. Example JSON: "Cookies": { "MatchPattern": { "All": {} }, "MatchScope": "KEY", "OversizeHandling": "MATCH" }
    public struct Cookies: Swift.Equatable {
        /// The filter to use to identify the subset of cookies to inspect in a web request. You must specify exactly one setting: either All, IncludedCookies, or ExcludedCookies. Example JSON: "MatchPattern": { "IncludedCookies": {"KeyToInclude1", "KeyToInclude2", "KeyToInclude3"} }
        /// This member is required.
        public var matchPattern: Wafv2ClientTypes.CookieMatchPattern?
        /// The parts of the cookies to inspect with the rule inspection criteria. If you specify All, WAF inspects both keys and values.
        /// This member is required.
        public var matchScope: Wafv2ClientTypes.MapMatchScope?
        /// What WAF should do if the cookies of the request are larger than WAF can inspect. WAF does not support inspecting the entire contents of request cookies when they exceed 8 KB (8192 bytes) or 200 total cookies. The underlying host service forwards a maximum of 200 cookies and at most 8 KB of cookie contents to WAF. The options for oversize handling are the following:
        ///
        /// * CONTINUE - Inspect the cookies normally, according to the rule inspection criteria.
        ///
        /// * MATCH - Treat the web request as matching the rule statement. WAF applies the rule action to the request.
        ///
        /// * NO_MATCH - Treat the web request as not matching the rule statement.
        /// This member is required.
        public var oversizeHandling: Wafv2ClientTypes.OversizeHandling?

        public init (
            matchPattern: Wafv2ClientTypes.CookieMatchPattern? = nil,
            matchScope: Wafv2ClientTypes.MapMatchScope? = nil,
            oversizeHandling: Wafv2ClientTypes.OversizeHandling? = nil
        )
        {
            self.matchPattern = matchPattern
            self.matchScope = matchScope
            self.oversizeHandling = oversizeHandling
        }
    }

}
