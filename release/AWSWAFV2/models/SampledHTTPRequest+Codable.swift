// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Wafv2ClientTypes.SampledHTTPRequest: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case action = "Action"
        case captchaResponse = "CaptchaResponse"
        case labels = "Labels"
        case request = "Request"
        case requestHeadersInserted = "RequestHeadersInserted"
        case responseCodeSent = "ResponseCodeSent"
        case ruleNameWithinRuleGroup = "RuleNameWithinRuleGroup"
        case timestamp = "Timestamp"
        case weight = "Weight"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let action = self.action {
            try encodeContainer.encode(action, forKey: .action)
        }
        if let captchaResponse = self.captchaResponse {
            try encodeContainer.encode(captchaResponse, forKey: .captchaResponse)
        }
        if let labels = labels {
            var labelsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .labels)
            for labels0 in labels {
                try labelsContainer.encode(labels0)
            }
        }
        if let request = self.request {
            try encodeContainer.encode(request, forKey: .request)
        }
        if let requestHeadersInserted = requestHeadersInserted {
            var requestHeadersInsertedContainer = encodeContainer.nestedUnkeyedContainer(forKey: .requestHeadersInserted)
            for httpheaders0 in requestHeadersInserted {
                try requestHeadersInsertedContainer.encode(httpheaders0)
            }
        }
        if let responseCodeSent = self.responseCodeSent {
            try encodeContainer.encode(responseCodeSent, forKey: .responseCodeSent)
        }
        if let ruleNameWithinRuleGroup = self.ruleNameWithinRuleGroup {
            try encodeContainer.encode(ruleNameWithinRuleGroup, forKey: .ruleNameWithinRuleGroup)
        }
        if let timestamp = self.timestamp {
            try encodeContainer.encode(timestamp.timeIntervalSince1970, forKey: .timestamp)
        }
        if weight != 0 {
            try encodeContainer.encode(weight, forKey: .weight)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let requestDecoded = try containerValues.decodeIfPresent(Wafv2ClientTypes.HTTPRequest.self, forKey: .request)
        request = requestDecoded
        let weightDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .weight) ?? 0
        weight = weightDecoded
        let timestampDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .timestamp)
        timestamp = timestampDecoded
        let actionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .action)
        action = actionDecoded
        let ruleNameWithinRuleGroupDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ruleNameWithinRuleGroup)
        ruleNameWithinRuleGroup = ruleNameWithinRuleGroupDecoded
        let requestHeadersInsertedContainer = try containerValues.decodeIfPresent([Wafv2ClientTypes.HTTPHeader?].self, forKey: .requestHeadersInserted)
        var requestHeadersInsertedDecoded0:[Wafv2ClientTypes.HTTPHeader]? = nil
        if let requestHeadersInsertedContainer = requestHeadersInsertedContainer {
            requestHeadersInsertedDecoded0 = [Wafv2ClientTypes.HTTPHeader]()
            for structure0 in requestHeadersInsertedContainer {
                if let structure0 = structure0 {
                    requestHeadersInsertedDecoded0?.append(structure0)
                }
            }
        }
        requestHeadersInserted = requestHeadersInsertedDecoded0
        let responseCodeSentDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .responseCodeSent)
        responseCodeSent = responseCodeSentDecoded
        let labelsContainer = try containerValues.decodeIfPresent([Wafv2ClientTypes.Label?].self, forKey: .labels)
        var labelsDecoded0:[Wafv2ClientTypes.Label]? = nil
        if let labelsContainer = labelsContainer {
            labelsDecoded0 = [Wafv2ClientTypes.Label]()
            for structure0 in labelsContainer {
                if let structure0 = structure0 {
                    labelsDecoded0?.append(structure0)
                }
            }
        }
        labels = labelsDecoded0
        let captchaResponseDecoded = try containerValues.decodeIfPresent(Wafv2ClientTypes.CaptchaResponse.self, forKey: .captchaResponse)
        captchaResponse = captchaResponseDecoded
    }
}
