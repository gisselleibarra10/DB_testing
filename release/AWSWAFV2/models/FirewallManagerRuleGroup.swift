// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension Wafv2ClientTypes {
    /// A rule group that's defined for an Firewall Manager WAF policy.
    public struct FirewallManagerRuleGroup: Swift.Equatable {
        /// The processing guidance for an Firewall Manager rule. This is like a regular rule [Statement], but it can only contain a rule group reference.
        /// This member is required.
        public var firewallManagerStatement: Wafv2ClientTypes.FirewallManagerStatement?
        /// The name of the rule group. You cannot change the name of a rule group after you create it.
        /// This member is required.
        public var name: Swift.String?
        /// The action to use in the place of the action that results from the rule group evaluation. Set the override action to none to leave the result of the rule group alone. Set it to count to override the result to count only. You can only use this for rule statements that reference a rule group, like RuleGroupReferenceStatement and ManagedRuleGroupStatement. This option is usually set to none. It does not affect how the rules in the rule group are evaluated. If you want the rules in the rule group to only count matches, do not use this and instead exclude those rules in your rule group reference statement settings.
        /// This member is required.
        public var overrideAction: Wafv2ClientTypes.OverrideAction?
        /// If you define more than one rule group in the first or last Firewall Manager rule groups, WAF evaluates each request against the rule groups in order, starting from the lowest priority setting. The priorities don't need to be consecutive, but they must all be different.
        /// This member is required.
        public var priority: Swift.Int
        /// Defines and enables Amazon CloudWatch metrics and web request sample collection.
        /// This member is required.
        public var visibilityConfig: Wafv2ClientTypes.VisibilityConfig?

        public init (
            firewallManagerStatement: Wafv2ClientTypes.FirewallManagerStatement? = nil,
            name: Swift.String? = nil,
            overrideAction: Wafv2ClientTypes.OverrideAction? = nil,
            priority: Swift.Int = 0,
            visibilityConfig: Wafv2ClientTypes.VisibilityConfig? = nil
        )
        {
            self.firewallManagerStatement = firewallManagerStatement
            self.name = name
            self.overrideAction = overrideAction
            self.priority = priority
            self.visibilityConfig = visibilityConfig
        }
    }

}
