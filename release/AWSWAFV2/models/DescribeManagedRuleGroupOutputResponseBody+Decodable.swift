// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeManagedRuleGroupOutputResponseBody: Swift.Equatable {
    let versionName: Swift.String?
    let snsTopicArn: Swift.String?
    let capacity: Swift.Int
    let rules: [Wafv2ClientTypes.RuleSummary]?
    let labelNamespace: Swift.String?
    let availableLabels: [Wafv2ClientTypes.LabelSummary]?
    let consumedLabels: [Wafv2ClientTypes.LabelSummary]?
}

extension DescribeManagedRuleGroupOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case availableLabels = "AvailableLabels"
        case capacity = "Capacity"
        case consumedLabels = "ConsumedLabels"
        case labelNamespace = "LabelNamespace"
        case rules = "Rules"
        case snsTopicArn = "SnsTopicArn"
        case versionName = "VersionName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let versionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .versionName)
        versionName = versionNameDecoded
        let snsTopicArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .snsTopicArn)
        snsTopicArn = snsTopicArnDecoded
        let capacityDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .capacity) ?? 0
        capacity = capacityDecoded
        let rulesContainer = try containerValues.decodeIfPresent([Wafv2ClientTypes.RuleSummary?].self, forKey: .rules)
        var rulesDecoded0:[Wafv2ClientTypes.RuleSummary]? = nil
        if let rulesContainer = rulesContainer {
            rulesDecoded0 = [Wafv2ClientTypes.RuleSummary]()
            for structure0 in rulesContainer {
                if let structure0 = structure0 {
                    rulesDecoded0?.append(structure0)
                }
            }
        }
        rules = rulesDecoded0
        let labelNamespaceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .labelNamespace)
        labelNamespace = labelNamespaceDecoded
        let availableLabelsContainer = try containerValues.decodeIfPresent([Wafv2ClientTypes.LabelSummary?].self, forKey: .availableLabels)
        var availableLabelsDecoded0:[Wafv2ClientTypes.LabelSummary]? = nil
        if let availableLabelsContainer = availableLabelsContainer {
            availableLabelsDecoded0 = [Wafv2ClientTypes.LabelSummary]()
            for structure0 in availableLabelsContainer {
                if let structure0 = structure0 {
                    availableLabelsDecoded0?.append(structure0)
                }
            }
        }
        availableLabels = availableLabelsDecoded0
        let consumedLabelsContainer = try containerValues.decodeIfPresent([Wafv2ClientTypes.LabelSummary?].self, forKey: .consumedLabels)
        var consumedLabelsDecoded0:[Wafv2ClientTypes.LabelSummary]? = nil
        if let consumedLabelsContainer = consumedLabelsContainer {
            consumedLabelsDecoded0 = [Wafv2ClientTypes.LabelSummary]()
            for structure0 in consumedLabelsContainer {
                if let structure0 = structure0 {
                    consumedLabelsDecoded0?.append(structure0)
                }
            }
        }
        consumedLabels = consumedLabelsDecoded0
    }
}
