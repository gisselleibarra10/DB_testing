// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct UpdateManagedRuleSetVersionExpiryDateInputBody: Swift.Equatable {
    let name: Swift.String?
    let scope: Wafv2ClientTypes.Scope?
    let id: Swift.String?
    let lockToken: Swift.String?
    let versionToExpire: Swift.String?
    let expiryTimestamp: ClientRuntime.Date?
}

extension UpdateManagedRuleSetVersionExpiryDateInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case expiryTimestamp = "ExpiryTimestamp"
        case id = "Id"
        case lockToken = "LockToken"
        case name = "Name"
        case scope = "Scope"
        case versionToExpire = "VersionToExpire"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let scopeDecoded = try containerValues.decodeIfPresent(Wafv2ClientTypes.Scope.self, forKey: .scope)
        scope = scopeDecoded
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let lockTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lockToken)
        lockToken = lockTokenDecoded
        let versionToExpireDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .versionToExpire)
        versionToExpire = versionToExpireDecoded
        let expiryTimestampDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .expiryTimestamp)
        expiryTimestamp = expiryTimestampDecoded
    }
}
