// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Wafv2ClientTypes {
    /// A rule statement used to run the rules that are defined in a managed rule group. To use this, provide the vendor name and the name of the rule group in this statement. You can retrieve the required names by calling [ListAvailableManagedRuleGroups]. You cannot nest a ManagedRuleGroupStatement, for example for use inside a NotStatement or OrStatement. It can only be referenced as a top-level statement within a rule. You are charged additional fees when you use the WAF Bot Control managed rule group AWSManagedRulesBotControlRuleSet or the WAF Fraud Control account takeover prevention (ATP) managed rule group AWSManagedRulesATPRuleSet. For more information, see [WAF Pricing](http://aws.amazon.com/waf/pricing/).
    public struct ManagedRuleGroupStatement: Swift.Equatable {
        /// The rules in the referenced rule group whose actions are set to Count. When you exclude a rule, WAF evaluates it exactly as it would if the rule action setting were Count. This is a useful option for testing the rules in a rule group without modifying how they handle your web traffic.
        public var excludedRules: [Wafv2ClientTypes.ExcludedRule]?
        /// Additional information that's used by a managed rule group. Most managed rule groups don't require this. Use this for the account takeover prevention managed rule group AWSManagedRulesATPRuleSet, to provide information about the sign-in page of your application. You can provide multiple individual ManagedRuleGroupConfig objects for any rule group configuration, for example UsernameField and PasswordField. The configuration that you provide depends on the needs of the managed rule group. For the ATP managed rule group, you provide the following individual configuration objects: LoginPath, PasswordField, PayloadType and UsernameField.
        public var managedRuleGroupConfigs: [Wafv2ClientTypes.ManagedRuleGroupConfig]?
        /// The name of the managed rule group. You use this, along with the vendor name, to identify the rule group.
        /// This member is required.
        public var name: Swift.String?
        /// An optional nested statement that narrows the scope of the web requests that are evaluated by the managed rule group. Requests are only evaluated by the rule group if they match the scope-down statement. You can use any nestable [Statement] in the scope-down statement, and you can nest statements at any level, the same as you can for a rule statement.
        public var scopeDownStatement: Box<Wafv2ClientTypes.Statement>?
        /// The name of the managed rule group vendor. You use this, along with the rule group name, to identify the rule group.
        /// This member is required.
        public var vendorName: Swift.String?
        /// The version of the managed rule group to use. If you specify this, the version setting is fixed until you change it. If you don't specify this, WAF uses the vendor's default version, and then keeps the version at the vendor's default when the vendor updates the managed rule group settings.
        public var version: Swift.String?

        public init (
            excludedRules: [Wafv2ClientTypes.ExcludedRule]? = nil,
            managedRuleGroupConfigs: [Wafv2ClientTypes.ManagedRuleGroupConfig]? = nil,
            name: Swift.String? = nil,
            scopeDownStatement: Box<Wafv2ClientTypes.Statement>? = nil,
            vendorName: Swift.String? = nil,
            version: Swift.String? = nil
        )
        {
            self.excludedRules = excludedRules
            self.managedRuleGroupConfigs = managedRuleGroupConfigs
            self.name = name
            self.scopeDownStatement = scopeDownStatement
            self.vendorName = vendorName
            self.version = version
        }
    }

}
