// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension Wafv2ClientTypes {
    /// The part of the web request that you want WAF to inspect. Include the single FieldToMatch type that you want to inspect, with additional specifications as needed, according to the type. You specify a single request component in FieldToMatch for each rule statement that requires it. To inspect more than one component of the web request, create a separate rule statement for each component. Example JSON for a QueryString field to match:  "FieldToMatch": { "QueryString": {} } Example JSON for a Method field to match specification:  "FieldToMatch": { "Method": { "Name": "DELETE" } }
    public struct FieldToMatch: Swift.Equatable {
        /// Inspect all query arguments.
        public var allQueryArguments: Wafv2ClientTypes.AllQueryArguments?
        /// Inspect the request body as plain text. The request body immediately follows the request headers. This is the part of a request that contains any additional data that you want to send to your web server as the HTTP request body, such as data from a form. Only the first 8 KB (8192 bytes) of the request body are forwarded to WAF for inspection by the underlying host service. For information about how to handle oversized request bodies, see the Body object configuration.
        public var body: Wafv2ClientTypes.Body?
        /// Inspect the request cookies. You must configure scope and pattern matching filters in the Cookies object, to define the set of cookies and the parts of the cookies that WAF inspects. Only the first 8 KB (8192 bytes) of a request's cookies and only the first 200 cookies are forwarded to WAF for inspection by the underlying host service. You must configure how to handle any oversize cookie content in the Cookies object. WAF applies the pattern matching filters to the cookies that it receives from the underlying host service.
        public var cookies: Wafv2ClientTypes.Cookies?
        /// Inspect the request headers. You must configure scope and pattern matching filters in the Headers object, to define the set of headers to and the parts of the headers that WAF inspects. Only the first 8 KB (8192 bytes) of a request's headers and only the first 200 headers are forwarded to WAF for inspection by the underlying host service. You must configure how to handle any oversize header content in the Headers object. WAF applies the pattern matching filters to the headers that it receives from the underlying host service.
        public var headers: Wafv2ClientTypes.Headers?
        /// Inspect the request body as JSON. The request body immediately follows the request headers. This is the part of a request that contains any additional data that you want to send to your web server as the HTTP request body, such as data from a form. Only the first 8 KB (8192 bytes) of the request body are forwarded to WAF for inspection by the underlying host service. For information about how to handle oversized request bodies, see the JsonBody object configuration.
        public var jsonBody: Wafv2ClientTypes.JsonBody?
        /// Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
        public var method: Wafv2ClientTypes.Method?
        /// Inspect the query string. This is the part of a URL that appears after a ? character, if any.
        public var queryString: Wafv2ClientTypes.QueryString?
        /// Inspect a single header. Provide the name of the header to inspect, for example, User-Agent or Referer. This setting isn't case sensitive. Example JSON: "SingleHeader": { "Name": "haystack" } Alternately, you can filter and inspect all headers with the HeadersFieldToMatch setting.
        public var singleHeader: Wafv2ClientTypes.SingleHeader?
        /// Inspect a single query argument. Provide the name of the query argument to inspect, such as UserName or SalesRegion. The name can be up to 30 characters long and isn't case sensitive. Example JSON: "SingleQueryArgument": { "Name": "myArgument" }
        public var singleQueryArgument: Wafv2ClientTypes.SingleQueryArgument?
        /// Inspect the request URI path. This is the part of the web request that identifies a resource, for example, /images/daily-ad.jpg.
        public var uriPath: Wafv2ClientTypes.UriPath?

        public init (
            allQueryArguments: Wafv2ClientTypes.AllQueryArguments? = nil,
            body: Wafv2ClientTypes.Body? = nil,
            cookies: Wafv2ClientTypes.Cookies? = nil,
            headers: Wafv2ClientTypes.Headers? = nil,
            jsonBody: Wafv2ClientTypes.JsonBody? = nil,
            method: Wafv2ClientTypes.Method? = nil,
            queryString: Wafv2ClientTypes.QueryString? = nil,
            singleHeader: Wafv2ClientTypes.SingleHeader? = nil,
            singleQueryArgument: Wafv2ClientTypes.SingleQueryArgument? = nil,
            uriPath: Wafv2ClientTypes.UriPath? = nil
        )
        {
            self.allQueryArguments = allQueryArguments
            self.body = body
            self.cookies = cookies
            self.headers = headers
            self.jsonBody = jsonBody
            self.method = method
            self.queryString = queryString
            self.singleHeader = singleHeader
            self.singleQueryArgument = singleQueryArgument
            self.uriPath = uriPath
        }
    }

}
