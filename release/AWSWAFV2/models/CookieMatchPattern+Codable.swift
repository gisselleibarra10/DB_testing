// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Wafv2ClientTypes.CookieMatchPattern: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case all = "All"
        case excludedCookies = "ExcludedCookies"
        case includedCookies = "IncludedCookies"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let all = self.all {
            try encodeContainer.encode(all, forKey: .all)
        }
        if let excludedCookies = excludedCookies {
            var excludedCookiesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .excludedCookies)
            for cookienames0 in excludedCookies {
                try excludedCookiesContainer.encode(cookienames0)
            }
        }
        if let includedCookies = includedCookies {
            var includedCookiesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .includedCookies)
            for cookienames0 in includedCookies {
                try includedCookiesContainer.encode(cookienames0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let allDecoded = try containerValues.decodeIfPresent(Wafv2ClientTypes.All.self, forKey: .all)
        all = allDecoded
        let includedCookiesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .includedCookies)
        var includedCookiesDecoded0:[Swift.String]? = nil
        if let includedCookiesContainer = includedCookiesContainer {
            includedCookiesDecoded0 = [Swift.String]()
            for string0 in includedCookiesContainer {
                if let string0 = string0 {
                    includedCookiesDecoded0?.append(string0)
                }
            }
        }
        includedCookies = includedCookiesDecoded0
        let excludedCookiesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .excludedCookies)
        var excludedCookiesDecoded0:[Swift.String]? = nil
        if let excludedCookiesContainer = excludedCookiesContainer {
            excludedCookiesDecoded0 = [Swift.String]()
            for string0 in excludedCookiesContainer {
                if let string0 = string0 {
                    excludedCookiesDecoded0?.append(string0)
                }
            }
        }
        excludedCookies = excludedCookiesDecoded0
    }
}
