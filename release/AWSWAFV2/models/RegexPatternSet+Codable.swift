// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Wafv2ClientTypes.RegexPatternSet: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case aRN = "ARN"
        case description = "Description"
        case id = "Id"
        case name = "Name"
        case regularExpressionList = "RegularExpressionList"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let aRN = self.aRN {
            try encodeContainer.encode(aRN, forKey: .aRN)
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let regularExpressionList = regularExpressionList {
            var regularExpressionListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .regularExpressionList)
            for regularexpressionlist0 in regularExpressionList {
                try regularExpressionListContainer.encode(regularexpressionlist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let aRNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .aRN)
        aRN = aRNDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let regularExpressionListContainer = try containerValues.decodeIfPresent([Wafv2ClientTypes.Regex?].self, forKey: .regularExpressionList)
        var regularExpressionListDecoded0:[Wafv2ClientTypes.Regex]? = nil
        if let regularExpressionListContainer = regularExpressionListContainer {
            regularExpressionListDecoded0 = [Wafv2ClientTypes.Regex]()
            for structure0 in regularExpressionListContainer {
                if let structure0 = structure0 {
                    regularExpressionListDecoded0?.append(structure0)
                }
            }
        }
        regularExpressionList = regularExpressionListDecoded0
    }
}
