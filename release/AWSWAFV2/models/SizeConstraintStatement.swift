// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension Wafv2ClientTypes {
    /// A rule statement that compares a number of bytes against the size of a request component, using a comparison operator, such as greater than (>) or less than (<). For example, you can use a size constraint statement to look for query strings that are longer than 100 bytes. If you configure WAF to inspect the request body, WAF inspects only the first 8192 bytes (8 KB). If the request body for your web requests never exceeds 8192 bytes, you could use a size constraint statement to block requests that have a request body greater than 8192 bytes. If you choose URI for the value of Part of the request to filter on, the slash (/) in the URI counts as one character. For example, the URI /logo.jpg is nine characters long.
    public struct SizeConstraintStatement: Swift.Equatable {
        /// The operator to use to compare the request part to the size setting.
        /// This member is required.
        public var comparisonOperator: Wafv2ClientTypes.ComparisonOperator?
        /// The part of the web request that you want WAF to inspect.
        /// This member is required.
        public var fieldToMatch: Wafv2ClientTypes.FieldToMatch?
        /// The size, in byte, to compare to the request part, after any transformations.
        /// This member is required.
        public var size: Swift.Int
        /// Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. If you specify one or more transformations in a rule statement, WAF performs all transformations on the content of the request component identified by FieldToMatch, starting from the lowest priority setting, before inspecting the content for a match.
        /// This member is required.
        public var textTransformations: [Wafv2ClientTypes.TextTransformation]?

        public init (
            comparisonOperator: Wafv2ClientTypes.ComparisonOperator? = nil,
            fieldToMatch: Wafv2ClientTypes.FieldToMatch? = nil,
            size: Swift.Int = 0,
            textTransformations: [Wafv2ClientTypes.TextTransformation]? = nil
        )
        {
            self.comparisonOperator = comparisonOperator
            self.fieldToMatch = fieldToMatch
            self.size = size
            self.textTransformations = textTransformations
        }
    }

}
