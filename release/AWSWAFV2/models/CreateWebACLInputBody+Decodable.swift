// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateWebACLInputBody: Swift.Equatable {
    let name: Swift.String?
    let scope: Wafv2ClientTypes.Scope?
    let defaultAction: Wafv2ClientTypes.DefaultAction?
    let description: Swift.String?
    let rules: [Wafv2ClientTypes.Rule]?
    let visibilityConfig: Wafv2ClientTypes.VisibilityConfig?
    let tags: [Wafv2ClientTypes.Tag]?
    let customResponseBodies: [Swift.String:Wafv2ClientTypes.CustomResponseBody]?
    let captchaConfig: Wafv2ClientTypes.CaptchaConfig?
}

extension CreateWebACLInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case captchaConfig = "CaptchaConfig"
        case customResponseBodies = "CustomResponseBodies"
        case defaultAction = "DefaultAction"
        case description = "Description"
        case name = "Name"
        case rules = "Rules"
        case scope = "Scope"
        case tags = "Tags"
        case visibilityConfig = "VisibilityConfig"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let scopeDecoded = try containerValues.decodeIfPresent(Wafv2ClientTypes.Scope.self, forKey: .scope)
        scope = scopeDecoded
        let defaultActionDecoded = try containerValues.decodeIfPresent(Wafv2ClientTypes.DefaultAction.self, forKey: .defaultAction)
        defaultAction = defaultActionDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let rulesContainer = try containerValues.decodeIfPresent([Wafv2ClientTypes.Rule?].self, forKey: .rules)
        var rulesDecoded0:[Wafv2ClientTypes.Rule]? = nil
        if let rulesContainer = rulesContainer {
            rulesDecoded0 = [Wafv2ClientTypes.Rule]()
            for structure0 in rulesContainer {
                if let structure0 = structure0 {
                    rulesDecoded0?.append(structure0)
                }
            }
        }
        rules = rulesDecoded0
        let visibilityConfigDecoded = try containerValues.decodeIfPresent(Wafv2ClientTypes.VisibilityConfig.self, forKey: .visibilityConfig)
        visibilityConfig = visibilityConfigDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Wafv2ClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[Wafv2ClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Wafv2ClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let customResponseBodiesContainer = try containerValues.decodeIfPresent([Swift.String: Wafv2ClientTypes.CustomResponseBody?].self, forKey: .customResponseBodies)
        var customResponseBodiesDecoded0: [Swift.String:Wafv2ClientTypes.CustomResponseBody]? = nil
        if let customResponseBodiesContainer = customResponseBodiesContainer {
            customResponseBodiesDecoded0 = [Swift.String:Wafv2ClientTypes.CustomResponseBody]()
            for (key0, customresponsebody0) in customResponseBodiesContainer {
                if let customresponsebody0 = customresponsebody0 {
                    customResponseBodiesDecoded0?[key0] = customresponsebody0
                }
            }
        }
        customResponseBodies = customResponseBodiesDecoded0
        let captchaConfigDecoded = try containerValues.decodeIfPresent(Wafv2ClientTypes.CaptchaConfig.self, forKey: .captchaConfig)
        captchaConfig = captchaConfigDecoded
    }
}
