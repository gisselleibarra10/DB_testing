// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Wafv2ClientTypes.MobileSdkRelease: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case releaseNotes = "ReleaseNotes"
        case releaseVersion = "ReleaseVersion"
        case tags = "Tags"
        case timestamp = "Timestamp"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let releaseNotes = self.releaseNotes {
            try encodeContainer.encode(releaseNotes, forKey: .releaseNotes)
        }
        if let releaseVersion = self.releaseVersion {
            try encodeContainer.encode(releaseVersion, forKey: .releaseVersion)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
        if let timestamp = self.timestamp {
            try encodeContainer.encode(timestamp.timeIntervalSince1970, forKey: .timestamp)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let releaseVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .releaseVersion)
        releaseVersion = releaseVersionDecoded
        let timestampDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .timestamp)
        timestamp = timestampDecoded
        let releaseNotesDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .releaseNotes)
        releaseNotes = releaseNotesDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Wafv2ClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[Wafv2ClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Wafv2ClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}
