// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct PutManagedRuleSetVersionsInputBody: Swift.Equatable {
    let name: Swift.String?
    let scope: Wafv2ClientTypes.Scope?
    let id: Swift.String?
    let lockToken: Swift.String?
    let recommendedVersion: Swift.String?
    let versionsToPublish: [Swift.String:Wafv2ClientTypes.VersionToPublish]?
}

extension PutManagedRuleSetVersionsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case id = "Id"
        case lockToken = "LockToken"
        case name = "Name"
        case recommendedVersion = "RecommendedVersion"
        case scope = "Scope"
        case versionsToPublish = "VersionsToPublish"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let scopeDecoded = try containerValues.decodeIfPresent(Wafv2ClientTypes.Scope.self, forKey: .scope)
        scope = scopeDecoded
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let lockTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lockToken)
        lockToken = lockTokenDecoded
        let recommendedVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .recommendedVersion)
        recommendedVersion = recommendedVersionDecoded
        let versionsToPublishContainer = try containerValues.decodeIfPresent([Swift.String: Wafv2ClientTypes.VersionToPublish?].self, forKey: .versionsToPublish)
        var versionsToPublishDecoded0: [Swift.String:Wafv2ClientTypes.VersionToPublish]? = nil
        if let versionsToPublishContainer = versionsToPublishContainer {
            versionsToPublishDecoded0 = [Swift.String:Wafv2ClientTypes.VersionToPublish]()
            for (key0, versiontopublish0) in versionsToPublishContainer {
                if let versiontopublish0 = versiontopublish0 {
                    versionsToPublishDecoded0?[key0] = versiontopublish0
                }
            }
        }
        versionsToPublish = versionsToPublishDecoded0
    }
}
