// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Wafv2ClientTypes.ManagedRuleSet: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case aRN = "ARN"
        case description = "Description"
        case id = "Id"
        case labelNamespace = "LabelNamespace"
        case name = "Name"
        case publishedVersions = "PublishedVersions"
        case recommendedVersion = "RecommendedVersion"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let aRN = self.aRN {
            try encodeContainer.encode(aRN, forKey: .aRN)
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let labelNamespace = self.labelNamespace {
            try encodeContainer.encode(labelNamespace, forKey: .labelNamespace)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let publishedVersions = publishedVersions {
            var publishedVersionsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .publishedVersions)
            for (dictKey0, publishedversions0) in publishedVersions {
                try publishedVersionsContainer.encode(publishedversions0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let recommendedVersion = self.recommendedVersion {
            try encodeContainer.encode(recommendedVersion, forKey: .recommendedVersion)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let aRNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .aRN)
        aRN = aRNDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let publishedVersionsContainer = try containerValues.decodeIfPresent([Swift.String: Wafv2ClientTypes.ManagedRuleSetVersion?].self, forKey: .publishedVersions)
        var publishedVersionsDecoded0: [Swift.String:Wafv2ClientTypes.ManagedRuleSetVersion]? = nil
        if let publishedVersionsContainer = publishedVersionsContainer {
            publishedVersionsDecoded0 = [Swift.String:Wafv2ClientTypes.ManagedRuleSetVersion]()
            for (key0, managedrulesetversion0) in publishedVersionsContainer {
                if let managedrulesetversion0 = managedrulesetversion0 {
                    publishedVersionsDecoded0?[key0] = managedrulesetversion0
                }
            }
        }
        publishedVersions = publishedVersionsDecoded0
        let recommendedVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .recommendedVersion)
        recommendedVersion = recommendedVersionDecoded
        let labelNamespaceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .labelNamespace)
        labelNamespace = labelNamespaceDecoded
    }
}
