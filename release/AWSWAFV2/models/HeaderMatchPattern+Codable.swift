// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Wafv2ClientTypes.HeaderMatchPattern: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case all = "All"
        case excludedHeaders = "ExcludedHeaders"
        case includedHeaders = "IncludedHeaders"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let all = self.all {
            try encodeContainer.encode(all, forKey: .all)
        }
        if let excludedHeaders = excludedHeaders {
            var excludedHeadersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .excludedHeaders)
            for headernames0 in excludedHeaders {
                try excludedHeadersContainer.encode(headernames0)
            }
        }
        if let includedHeaders = includedHeaders {
            var includedHeadersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .includedHeaders)
            for headernames0 in includedHeaders {
                try includedHeadersContainer.encode(headernames0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let allDecoded = try containerValues.decodeIfPresent(Wafv2ClientTypes.All.self, forKey: .all)
        all = allDecoded
        let includedHeadersContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .includedHeaders)
        var includedHeadersDecoded0:[Swift.String]? = nil
        if let includedHeadersContainer = includedHeadersContainer {
            includedHeadersDecoded0 = [Swift.String]()
            for string0 in includedHeadersContainer {
                if let string0 = string0 {
                    includedHeadersDecoded0?.append(string0)
                }
            }
        }
        includedHeaders = includedHeadersDecoded0
        let excludedHeadersContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .excludedHeaders)
        var excludedHeadersDecoded0:[Swift.String]? = nil
        if let excludedHeadersContainer = excludedHeadersContainer {
            excludedHeadersDecoded0 = [Swift.String]()
            for string0 in excludedHeadersContainer {
                if let string0 = string0 {
                    excludedHeadersDecoded0?.append(string0)
                }
            }
        }
        excludedHeaders = excludedHeadersDecoded0
    }
}
