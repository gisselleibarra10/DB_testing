// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Wafv2ClientTypes.Rule: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case action = "Action"
        case captchaConfig = "CaptchaConfig"
        case name = "Name"
        case overrideAction = "OverrideAction"
        case priority = "Priority"
        case ruleLabels = "RuleLabels"
        case statement = "Statement"
        case visibilityConfig = "VisibilityConfig"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let action = self.action {
            try encodeContainer.encode(action, forKey: .action)
        }
        if let captchaConfig = self.captchaConfig {
            try encodeContainer.encode(captchaConfig, forKey: .captchaConfig)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let overrideAction = self.overrideAction {
            try encodeContainer.encode(overrideAction, forKey: .overrideAction)
        }
        if priority != 0 {
            try encodeContainer.encode(priority, forKey: .priority)
        }
        if let ruleLabels = ruleLabels {
            var ruleLabelsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .ruleLabels)
            for labels0 in ruleLabels {
                try ruleLabelsContainer.encode(labels0)
            }
        }
        if let statement = self.statement {
            try encodeContainer.encode(statement, forKey: .statement)
        }
        if let visibilityConfig = self.visibilityConfig {
            try encodeContainer.encode(visibilityConfig, forKey: .visibilityConfig)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let priorityDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .priority) ?? 0
        priority = priorityDecoded
        let statementDecoded = try containerValues.decodeIfPresent(Wafv2ClientTypes.Statement.self, forKey: .statement)
        statement = statementDecoded
        let actionDecoded = try containerValues.decodeIfPresent(Wafv2ClientTypes.RuleAction.self, forKey: .action)
        action = actionDecoded
        let overrideActionDecoded = try containerValues.decodeIfPresent(Wafv2ClientTypes.OverrideAction.self, forKey: .overrideAction)
        overrideAction = overrideActionDecoded
        let ruleLabelsContainer = try containerValues.decodeIfPresent([Wafv2ClientTypes.Label?].self, forKey: .ruleLabels)
        var ruleLabelsDecoded0:[Wafv2ClientTypes.Label]? = nil
        if let ruleLabelsContainer = ruleLabelsContainer {
            ruleLabelsDecoded0 = [Wafv2ClientTypes.Label]()
            for structure0 in ruleLabelsContainer {
                if let structure0 = structure0 {
                    ruleLabelsDecoded0?.append(structure0)
                }
            }
        }
        ruleLabels = ruleLabelsDecoded0
        let visibilityConfigDecoded = try containerValues.decodeIfPresent(Wafv2ClientTypes.VisibilityConfig.self, forKey: .visibilityConfig)
        visibilityConfig = visibilityConfigDecoded
        let captchaConfigDecoded = try containerValues.decodeIfPresent(Wafv2ClientTypes.CaptchaConfig.self, forKey: .captchaConfig)
        captchaConfig = captchaConfigDecoded
    }
}
