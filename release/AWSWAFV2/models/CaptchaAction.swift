// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension Wafv2ClientTypes {
    /// Specifies that WAF should run a CAPTCHA check against the request:
    ///
    /// * If the request includes a valid, unexpired CAPTCHA token, WAF allows the web request inspection to proceed to the next rule, similar to a CountAction.
    ///
    /// * If the request doesn't include a valid, unexpired CAPTCHA token, WAF discontinues the web ACL evaluation of the request and blocks it from going to its intended destination. WAF generates a response that it sends back to the client, which includes the following:
    ///
    /// * The header x-amzn-waf-action with a value of captcha.
    ///
    /// * The HTTP status code 405 Method Not Allowed.
    ///
    /// * If the request contains an Accept header with a value of text/html, the response includes a CAPTCHA challenge.
    ///
    ///
    ///
    ///
    ///
    /// You can configure the expiration time in the CaptchaConfigImmunityTimeProperty setting at the rule and web ACL level. The rule setting overrides the web ACL setting. This action option is available for rules. It isn't available for web ACL default actions.
    public struct CaptchaAction: Swift.Equatable {
        /// Defines custom handling for the web request. For information about customizing web requests and responses, see [Customizing web requests and responses in WAF](https://docs.aws.amazon.com/waf/latest/developerguide/waf-custom-request-response.html) in the [WAF Developer Guide](https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html).
        public var customRequestHandling: Wafv2ClientTypes.CustomRequestHandling?

        public init (
            customRequestHandling: Wafv2ClientTypes.CustomRequestHandling? = nil
        )
        {
            self.customRequestHandling = customRequestHandling
        }
    }

}
