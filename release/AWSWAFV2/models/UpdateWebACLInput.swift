// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct UpdateWebACLInput: Swift.Equatable {
    /// Specifies how WAF should handle CAPTCHA evaluations for rules that don't have their own CaptchaConfig settings. If you don't specify this, WAF uses its default settings for CaptchaConfig.
    public var captchaConfig: Wafv2ClientTypes.CaptchaConfig?
    /// A map of custom response keys and content bodies. When you create a rule with a block action, you can send a custom response to the web request. You define these for the web ACL, and then use them in the rules and default actions that you define in the web ACL. For information about customizing web requests and responses, see [Customizing web requests and responses in WAF](https://docs.aws.amazon.com/waf/latest/developerguide/waf-custom-request-response.html) in the [WAF Developer Guide](https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html). For information about the limits on count and size for custom request and response settings, see [WAF quotas](https://docs.aws.amazon.com/waf/latest/developerguide/limits.html) in the [WAF Developer Guide](https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html).
    public var customResponseBodies: [Swift.String:Wafv2ClientTypes.CustomResponseBody]?
    /// The action to perform if none of the Rules contained in the WebACL match.
    /// This member is required.
    public var defaultAction: Wafv2ClientTypes.DefaultAction?
    /// A description of the web ACL that helps with identification.
    public var description: Swift.String?
    /// The unique identifier for the web ACL. This ID is returned in the responses to create and list commands. You provide it to operations like update and delete.
    /// This member is required.
    public var id: Swift.String?
    /// A token used for optimistic locking. WAF returns a token to your get and list requests, to mark the state of the entity at the time of the request. To make changes to the entity associated with the token, you provide the token to operations like update and delete. WAF uses the token to ensure that no changes have been made to the entity since you last retrieved it. If a change has been made, the update fails with a WAFOptimisticLockException. If this happens, perform another get, and use the new token returned by that operation.
    /// This member is required.
    public var lockToken: Swift.String?
    /// The name of the web ACL. You cannot change the name of a web ACL after you create it.
    /// This member is required.
    public var name: Swift.String?
    /// The [Rule] statements used to identify the web requests that you want to allow, block, or count. Each rule includes one top-level statement that WAF uses to identify matching web requests, and parameters that govern how WAF handles them.
    public var rules: [Wafv2ClientTypes.Rule]?
    /// Specifies whether this is for an Amazon CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an Amazon API Gateway REST API, an AppSync GraphQL API, or an Amazon Cognito user pool. To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows:
    ///
    /// * CLI - Specify the Region when you use the CloudFront scope: --scope=CLOUDFRONT --region=us-east-1.
    ///
    /// * API and SDKs - For all calls, use the Region endpoint us-east-1.
    /// This member is required.
    public var scope: Wafv2ClientTypes.Scope?
    /// Defines and enables Amazon CloudWatch metrics and web request sample collection.
    /// This member is required.
    public var visibilityConfig: Wafv2ClientTypes.VisibilityConfig?

    public init (
        captchaConfig: Wafv2ClientTypes.CaptchaConfig? = nil,
        customResponseBodies: [Swift.String:Wafv2ClientTypes.CustomResponseBody]? = nil,
        defaultAction: Wafv2ClientTypes.DefaultAction? = nil,
        description: Swift.String? = nil,
        id: Swift.String? = nil,
        lockToken: Swift.String? = nil,
        name: Swift.String? = nil,
        rules: [Wafv2ClientTypes.Rule]? = nil,
        scope: Wafv2ClientTypes.Scope? = nil,
        visibilityConfig: Wafv2ClientTypes.VisibilityConfig? = nil
    )
    {
        self.captchaConfig = captchaConfig
        self.customResponseBodies = customResponseBodies
        self.defaultAction = defaultAction
        self.description = description
        self.id = id
        self.lockToken = lockToken
        self.name = name
        self.rules = rules
        self.scope = scope
        self.visibilityConfig = visibilityConfig
    }
}
