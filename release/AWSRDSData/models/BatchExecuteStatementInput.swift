// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// The request parameters represent the input of a SQL statement over an array of data.
public struct BatchExecuteStatementInput: Swift.Equatable {
    /// The name of the database.
    public var database: Swift.String?
    /// The parameter set for the batch operation. The SQL statement is executed as many times as the number of parameter sets provided. To execute a SQL statement with no parameters, use one of the following options:
    ///
    /// * Specify one or more empty parameter sets.
    ///
    /// * Use the ExecuteStatement operation instead of the BatchExecuteStatement operation.
    ///
    ///
    /// Array parameters are not supported.
    public var parameterSets: [[RdsDataClientTypes.SqlParameter]]?
    /// The Amazon Resource Name (ARN) of the Aurora Serverless DB cluster.
    /// This member is required.
    public var resourceArn: Swift.String?
    /// The name of the database schema.
    public var schema: Swift.String?
    /// The ARN of the secret that enables access to the DB cluster. Enter the database user name and password for the credentials in the secret. For information about creating the secret, see [Create a database secret](https://docs.aws.amazon.com/secretsmanager/latest/userguide/create_database_secret.html).
    /// This member is required.
    public var secretArn: Swift.String?
    /// The SQL statement to run. Don't include a semicolon (;) at the end of the SQL statement.
    /// This member is required.
    public var sql: Swift.String?
    /// The identifier of a transaction that was started by using the BeginTransaction operation. Specify the transaction ID of the transaction that you want to include the SQL statement in. If the SQL statement is not part of a transaction, don't set this parameter.
    public var transactionId: Swift.String?

    public init (
        database: Swift.String? = nil,
        parameterSets: [[RdsDataClientTypes.SqlParameter]]? = nil,
        resourceArn: Swift.String? = nil,
        schema: Swift.String? = nil,
        secretArn: Swift.String? = nil,
        sql: Swift.String? = nil,
        transactionId: Swift.String? = nil
    )
    {
        self.database = database
        self.parameterSets = parameterSets
        self.resourceArn = resourceArn
        self.schema = schema
        self.secretArn = secretArn
        self.sql = sql
        self.transactionId = transactionId
    }
}
