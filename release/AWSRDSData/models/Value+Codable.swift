// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension RdsDataClientTypes.Value: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arrayvalues = "arrayValues"
        case bigintvalue = "bigIntValue"
        case bitvalue = "bitValue"
        case blobvalue = "blobValue"
        case doublevalue = "doubleValue"
        case intvalue = "intValue"
        case isnull = "isNull"
        case realvalue = "realValue"
        case sdkUnknown
        case stringvalue = "stringValue"
        case structvalue = "structValue"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        switch self {
            case let .arrayvalues(arrayvalues):
                var arrayvaluesContainer = container.nestedUnkeyedContainer(forKey: .arrayvalues)
                for arrayvaluelist0 in arrayvalues {
                    try arrayvaluesContainer.encode(arrayvaluelist0)
                }
            case let .bigintvalue(bigintvalue):
                try container.encode(bigintvalue, forKey: .bigintvalue)
            case let .bitvalue(bitvalue):
                try container.encode(bitvalue, forKey: .bitvalue)
            case let .blobvalue(blobvalue):
                try container.encode(blobvalue.base64EncodedString(), forKey: .blobvalue)
            case let .doublevalue(doublevalue):
                try container.encode(doublevalue, forKey: .doublevalue)
            case let .intvalue(intvalue):
                try container.encode(intvalue, forKey: .intvalue)
            case let .isnull(isnull):
                try container.encode(isnull, forKey: .isnull)
            case let .realvalue(realvalue):
                try container.encode(realvalue, forKey: .realvalue)
            case let .stringvalue(stringvalue):
                try container.encode(stringvalue, forKey: .stringvalue)
            case let .structvalue(structvalue):
                try container.encode(structvalue, forKey: .structvalue)
            case let .sdkUnknown(sdkUnknown):
                try container.encode(sdkUnknown, forKey: .sdkUnknown)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let values = try decoder.container(keyedBy: CodingKeys.self)
        let isnullDecoded = try values.decodeIfPresent(Swift.Bool.self, forKey: .isnull)
        if let isnull = isnullDecoded {
            self = .isnull(isnull)
            return
        }
        let bitvalueDecoded = try values.decodeIfPresent(Swift.Bool.self, forKey: .bitvalue)
        if let bitvalue = bitvalueDecoded {
            self = .bitvalue(bitvalue)
            return
        }
        let bigintvalueDecoded = try values.decodeIfPresent(Swift.Int.self, forKey: .bigintvalue)
        if let bigintvalue = bigintvalueDecoded {
            self = .bigintvalue(bigintvalue)
            return
        }
        let intvalueDecoded = try values.decodeIfPresent(Swift.Int.self, forKey: .intvalue)
        if let intvalue = intvalueDecoded {
            self = .intvalue(intvalue)
            return
        }
        let doublevalueDecoded = try values.decodeIfPresent(Swift.Double.self, forKey: .doublevalue)
        if let doublevalue = doublevalueDecoded {
            self = .doublevalue(doublevalue)
            return
        }
        let realvalueDecoded = try values.decodeIfPresent(Swift.Float.self, forKey: .realvalue)
        if let realvalue = realvalueDecoded {
            self = .realvalue(realvalue)
            return
        }
        let stringvalueDecoded = try values.decodeIfPresent(Swift.String.self, forKey: .stringvalue)
        if let stringvalue = stringvalueDecoded {
            self = .stringvalue(stringvalue)
            return
        }
        let blobvalueDecoded = try values.decodeIfPresent(ClientRuntime.Data.self, forKey: .blobvalue)
        if let blobvalue = blobvalueDecoded {
            self = .blobvalue(blobvalue)
            return
        }
        let arrayvaluesContainer = try values.decodeIfPresent([RdsDataClientTypes.Value?].self, forKey: .arrayvalues)
        var arrayvaluesDecoded0:[RdsDataClientTypes.Value]? = nil
        if let arrayvaluesContainer = arrayvaluesContainer {
            arrayvaluesDecoded0 = [RdsDataClientTypes.Value]()
            for union0 in arrayvaluesContainer {
                if let union0 = union0 {
                    arrayvaluesDecoded0?.append(union0)
                }
            }
        }
        if let arrayvalues = arrayvaluesDecoded0 {
            self = .arrayvalues(arrayvalues)
            return
        }
        let structvalueDecoded = try values.decodeIfPresent(RdsDataClientTypes.StructValue.self, forKey: .structvalue)
        if let structvalue = structvalueDecoded {
            self = .structvalue(structvalue)
            return
        }
        self = .sdkUnknown("")
    }
}
