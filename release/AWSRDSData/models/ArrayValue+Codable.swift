// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension RdsDataClientTypes.ArrayValue: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arrayvalues = "arrayValues"
        case booleanvalues = "booleanValues"
        case doublevalues = "doubleValues"
        case longvalues = "longValues"
        case sdkUnknown
        case stringvalues = "stringValues"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        switch self {
            case let .arrayvalues(arrayvalues):
                var arrayvaluesContainer = container.nestedUnkeyedContainer(forKey: .arrayvalues)
                for arrayofarray0 in arrayvalues {
                    try arrayvaluesContainer.encode(arrayofarray0)
                }
            case let .booleanvalues(booleanvalues):
                var booleanvaluesContainer = container.nestedUnkeyedContainer(forKey: .booleanvalues)
                for booleanarray0 in booleanvalues {
                    try booleanvaluesContainer.encode(booleanarray0)
                }
            case let .doublevalues(doublevalues):
                var doublevaluesContainer = container.nestedUnkeyedContainer(forKey: .doublevalues)
                for doublearray0 in doublevalues {
                    try doublevaluesContainer.encode(doublearray0)
                }
            case let .longvalues(longvalues):
                var longvaluesContainer = container.nestedUnkeyedContainer(forKey: .longvalues)
                for longarray0 in longvalues {
                    try longvaluesContainer.encode(longarray0)
                }
            case let .stringvalues(stringvalues):
                var stringvaluesContainer = container.nestedUnkeyedContainer(forKey: .stringvalues)
                for stringarray0 in stringvalues {
                    try stringvaluesContainer.encode(stringarray0)
                }
            case let .sdkUnknown(sdkUnknown):
                try container.encode(sdkUnknown, forKey: .sdkUnknown)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let values = try decoder.container(keyedBy: CodingKeys.self)
        let booleanvaluesContainer = try values.decodeIfPresent([Swift.Bool?].self, forKey: .booleanvalues)
        var booleanvaluesDecoded0:[Swift.Bool]? = nil
        if let booleanvaluesContainer = booleanvaluesContainer {
            booleanvaluesDecoded0 = [Swift.Bool]()
            for boolean0 in booleanvaluesContainer {
                if let boolean0 = boolean0 {
                    booleanvaluesDecoded0?.append(boolean0)
                }
            }
        }
        if let booleanvalues = booleanvaluesDecoded0 {
            self = .booleanvalues(booleanvalues)
            return
        }
        let longvaluesContainer = try values.decodeIfPresent([Swift.Int?].self, forKey: .longvalues)
        var longvaluesDecoded0:[Swift.Int]? = nil
        if let longvaluesContainer = longvaluesContainer {
            longvaluesDecoded0 = [Swift.Int]()
            for long0 in longvaluesContainer {
                if let long0 = long0 {
                    longvaluesDecoded0?.append(long0)
                }
            }
        }
        if let longvalues = longvaluesDecoded0 {
            self = .longvalues(longvalues)
            return
        }
        let doublevaluesContainer = try values.decodeIfPresent([Swift.Double?].self, forKey: .doublevalues)
        var doublevaluesDecoded0:[Swift.Double]? = nil
        if let doublevaluesContainer = doublevaluesContainer {
            doublevaluesDecoded0 = [Swift.Double]()
            for double0 in doublevaluesContainer {
                if let double0 = double0 {
                    doublevaluesDecoded0?.append(double0)
                }
            }
        }
        if let doublevalues = doublevaluesDecoded0 {
            self = .doublevalues(doublevalues)
            return
        }
        let stringvaluesContainer = try values.decodeIfPresent([Swift.String?].self, forKey: .stringvalues)
        var stringvaluesDecoded0:[Swift.String]? = nil
        if let stringvaluesContainer = stringvaluesContainer {
            stringvaluesDecoded0 = [Swift.String]()
            for string0 in stringvaluesContainer {
                if let string0 = string0 {
                    stringvaluesDecoded0?.append(string0)
                }
            }
        }
        if let stringvalues = stringvaluesDecoded0 {
            self = .stringvalues(stringvalues)
            return
        }
        let arrayvaluesContainer = try values.decodeIfPresent([RdsDataClientTypes.ArrayValue?].self, forKey: .arrayvalues)
        var arrayvaluesDecoded0:[RdsDataClientTypes.ArrayValue]? = nil
        if let arrayvaluesContainer = arrayvaluesContainer {
            arrayvaluesDecoded0 = [RdsDataClientTypes.ArrayValue]()
            for union0 in arrayvaluesContainer {
                if let union0 = union0 {
                    arrayvaluesDecoded0?.append(union0)
                }
            }
        }
        if let arrayvalues = arrayvaluesDecoded0 {
            self = .arrayvalues(arrayvalues)
            return
        }
        self = .sdkUnknown("")
    }
}
