// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension EvidentlyClientTypes.MetricDefinitionConfig: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case entityIdKey
        case eventPattern
        case name
        case unitLabel
        case valueKey
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let entityIdKey = self.entityIdKey {
            try encodeContainer.encode(entityIdKey, forKey: .entityIdKey)
        }
        if let eventPattern = self.eventPattern {
            try encodeContainer.encode(eventPattern, forKey: .eventPattern)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let unitLabel = self.unitLabel {
            try encodeContainer.encode(unitLabel, forKey: .unitLabel)
        }
        if let valueKey = self.valueKey {
            try encodeContainer.encode(valueKey, forKey: .valueKey)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let entityIdKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .entityIdKey)
        entityIdKey = entityIdKeyDecoded
        let valueKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .valueKey)
        valueKey = valueKeyDecoded
        let eventPatternDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .eventPattern)
        eventPattern = eventPatternDecoded
        let unitLabelDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .unitLabel)
        unitLabel = unitLabelDecoded
    }
}
