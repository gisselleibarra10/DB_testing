// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateFeatureInputBody: Swift.Equatable {
    let name: Swift.String?
    let evaluationStrategy: EvidentlyClientTypes.FeatureEvaluationStrategy?
    let description: Swift.String?
    let variations: [EvidentlyClientTypes.VariationConfig]?
    let defaultVariation: Swift.String?
    let tags: [Swift.String:Swift.String]?
    let entityOverrides: [Swift.String:Swift.String]?
}

extension CreateFeatureInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case defaultVariation
        case description
        case entityOverrides
        case evaluationStrategy
        case name
        case tags
        case variations
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let evaluationStrategyDecoded = try containerValues.decodeIfPresent(EvidentlyClientTypes.FeatureEvaluationStrategy.self, forKey: .evaluationStrategy)
        evaluationStrategy = evaluationStrategyDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let variationsContainer = try containerValues.decodeIfPresent([EvidentlyClientTypes.VariationConfig?].self, forKey: .variations)
        var variationsDecoded0:[EvidentlyClientTypes.VariationConfig]? = nil
        if let variationsContainer = variationsContainer {
            variationsDecoded0 = [EvidentlyClientTypes.VariationConfig]()
            for structure0 in variationsContainer {
                if let structure0 = structure0 {
                    variationsDecoded0?.append(structure0)
                }
            }
        }
        variations = variationsDecoded0
        let defaultVariationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .defaultVariation)
        defaultVariation = defaultVariationDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
        let entityOverridesContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .entityOverrides)
        var entityOverridesDecoded0: [Swift.String:Swift.String]? = nil
        if let entityOverridesContainer = entityOverridesContainer {
            entityOverridesDecoded0 = [Swift.String:Swift.String]()
            for (key0, variationname0) in entityOverridesContainer {
                if let variationname0 = variationname0 {
                    entityOverridesDecoded0?[key0] = variationname0
                }
            }
        }
        entityOverrides = entityOverridesDecoded0
    }
}
