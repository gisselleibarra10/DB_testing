// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateExperimentInputBody: Swift.Equatable {
    let name: Swift.String?
    let description: Swift.String?
    let treatments: [EvidentlyClientTypes.TreatmentConfig]?
    let metricGoals: [EvidentlyClientTypes.MetricGoalConfig]?
    let randomizationSalt: Swift.String?
    let samplingRate: Swift.Int?
    let onlineAbConfig: EvidentlyClientTypes.OnlineAbConfig?
    let segment: Swift.String?
    let tags: [Swift.String:Swift.String]?
}

extension CreateExperimentInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description
        case metricGoals
        case name
        case onlineAbConfig
        case randomizationSalt
        case samplingRate
        case segment
        case tags
        case treatments
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let treatmentsContainer = try containerValues.decodeIfPresent([EvidentlyClientTypes.TreatmentConfig?].self, forKey: .treatments)
        var treatmentsDecoded0:[EvidentlyClientTypes.TreatmentConfig]? = nil
        if let treatmentsContainer = treatmentsContainer {
            treatmentsDecoded0 = [EvidentlyClientTypes.TreatmentConfig]()
            for structure0 in treatmentsContainer {
                if let structure0 = structure0 {
                    treatmentsDecoded0?.append(structure0)
                }
            }
        }
        treatments = treatmentsDecoded0
        let metricGoalsContainer = try containerValues.decodeIfPresent([EvidentlyClientTypes.MetricGoalConfig?].self, forKey: .metricGoals)
        var metricGoalsDecoded0:[EvidentlyClientTypes.MetricGoalConfig]? = nil
        if let metricGoalsContainer = metricGoalsContainer {
            metricGoalsDecoded0 = [EvidentlyClientTypes.MetricGoalConfig]()
            for structure0 in metricGoalsContainer {
                if let structure0 = structure0 {
                    metricGoalsDecoded0?.append(structure0)
                }
            }
        }
        metricGoals = metricGoalsDecoded0
        let randomizationSaltDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .randomizationSalt)
        randomizationSalt = randomizationSaltDecoded
        let samplingRateDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .samplingRate)
        samplingRate = samplingRateDecoded
        let onlineAbConfigDecoded = try containerValues.decodeIfPresent(EvidentlyClientTypes.OnlineAbConfig.self, forKey: .onlineAbConfig)
        onlineAbConfig = onlineAbConfigDecoded
        let segmentDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .segment)
        segment = segmentDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
    }
}
