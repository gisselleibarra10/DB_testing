// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension EvidentlyClientTypes {
    /// A structure containing the configuration details of an experiment.
    public struct Experiment: Swift.Equatable {
        /// The ARN of the experiment.
        /// This member is required.
        public var arn: Swift.String?
        /// The date and time that the experiment is first created.
        /// This member is required.
        public var createdTime: ClientRuntime.Date?
        /// A description of the experiment.
        public var description: Swift.String?
        /// A structure that contains the date and time that the experiment started and ended.
        public var execution: EvidentlyClientTypes.ExperimentExecution?
        /// The date and time that the experiment was most recently updated.
        /// This member is required.
        public var lastUpdatedTime: ClientRuntime.Date?
        /// An array of structures that defines the metrics used for the experiment, and whether a higher or lower value for each metric is the goal.
        public var metricGoals: [EvidentlyClientTypes.MetricGoal]?
        /// The name of the experiment.
        /// This member is required.
        public var name: Swift.String?
        /// A structure that contains the configuration of which variation to use as the "control" version. The "control" version is used for comparison with other variations. This structure also specifies how much experiment traffic is allocated to each variation.
        public var onlineAbDefinition: EvidentlyClientTypes.OnlineAbDefinition?
        /// The name or ARN of the project that contains this experiment.
        public var project: Swift.String?
        /// This value is used when Evidently assigns a particular user session to the experiment. It helps create a randomization ID to determine which variation the user session is served. This randomization ID is a combination of the entity ID and randomizationSalt.
        public var randomizationSalt: Swift.String?
        /// In thousandths of a percent, the amount of the available audience that is allocated to this experiment. The available audience is the total audience minus the audience that you have allocated to overrides or current launches of this feature. This is represented in thousandths of a percent, so a value of 10,000 is 10% of the available audience.
        public var samplingRate: Swift.Int
        /// A structure that contains the time and date that Evidently completed the analysis of the experiment.
        public var schedule: EvidentlyClientTypes.ExperimentSchedule?
        /// The audience segment being used for the experiment, if a segment is being used.
        public var segment: Swift.String?
        /// The current state of the experiment.
        /// This member is required.
        public var status: EvidentlyClientTypes.ExperimentStatus?
        /// If the experiment was stopped, this is the string that was entered by the person who stopped the experiment, to explain why it was stopped.
        public var statusReason: Swift.String?
        /// The list of tag keys and values associated with this experiment.
        public var tags: [Swift.String:Swift.String]?
        /// An array of structures that describe the configuration of each feature variation used in the experiment.
        public var treatments: [EvidentlyClientTypes.Treatment]?
        /// The type of this experiment. Currently, this value must be aws.experiment.onlineab.
        /// This member is required.
        public var type: EvidentlyClientTypes.ExperimentType?

        public init (
            arn: Swift.String? = nil,
            createdTime: ClientRuntime.Date? = nil,
            description: Swift.String? = nil,
            execution: EvidentlyClientTypes.ExperimentExecution? = nil,
            lastUpdatedTime: ClientRuntime.Date? = nil,
            metricGoals: [EvidentlyClientTypes.MetricGoal]? = nil,
            name: Swift.String? = nil,
            onlineAbDefinition: EvidentlyClientTypes.OnlineAbDefinition? = nil,
            project: Swift.String? = nil,
            randomizationSalt: Swift.String? = nil,
            samplingRate: Swift.Int = 0,
            schedule: EvidentlyClientTypes.ExperimentSchedule? = nil,
            segment: Swift.String? = nil,
            status: EvidentlyClientTypes.ExperimentStatus? = nil,
            statusReason: Swift.String? = nil,
            tags: [Swift.String:Swift.String]? = nil,
            treatments: [EvidentlyClientTypes.Treatment]? = nil,
            type: EvidentlyClientTypes.ExperimentType? = nil
        )
        {
            self.arn = arn
            self.createdTime = createdTime
            self.description = description
            self.execution = execution
            self.lastUpdatedTime = lastUpdatedTime
            self.metricGoals = metricGoals
            self.name = name
            self.onlineAbDefinition = onlineAbDefinition
            self.project = project
            self.randomizationSalt = randomizationSalt
            self.samplingRate = samplingRate
            self.schedule = schedule
            self.segment = segment
            self.status = status
            self.statusReason = statusReason
            self.tags = tags
            self.treatments = treatments
            self.type = type
        }
    }

}
