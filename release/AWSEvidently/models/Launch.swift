// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension EvidentlyClientTypes {
    /// This structure contains the configuration details of one Evidently launch.
    public struct Launch: Swift.Equatable {
        /// The ARN of the launch.
        /// This member is required.
        public var arn: Swift.String?
        /// The date and time that the launch is created.
        /// This member is required.
        public var createdTime: ClientRuntime.Date?
        /// The description of the launch.
        public var description: Swift.String?
        /// A structure that contains information about the start and end times of the launch.
        public var execution: EvidentlyClientTypes.LaunchExecution?
        /// An array of structures that define the feature variations that are being used in the launch.
        public var groups: [EvidentlyClientTypes.LaunchGroup]?
        /// The date and time that the launch was most recently updated.
        /// This member is required.
        public var lastUpdatedTime: ClientRuntime.Date?
        /// An array of structures that define the metrics that are being used to monitor the launch performance.
        public var metricMonitors: [EvidentlyClientTypes.MetricMonitor]?
        /// The name of the launch.
        /// This member is required.
        public var name: Swift.String?
        /// The name or ARN of the project that contains the launch.
        public var project: Swift.String?
        /// This value is used when Evidently assigns a particular user session to the launch, to help create a randomization ID to determine which variation the user session is served. This randomization ID is a combination of the entity ID and randomizationSalt.
        public var randomizationSalt: Swift.String?
        /// An array of structures that define the traffic allocation percentages among the feature variations during each step of the launch.
        public var scheduledSplitsDefinition: EvidentlyClientTypes.ScheduledSplitsLaunchDefinition?
        /// The current state of the launch.
        /// This member is required.
        public var status: EvidentlyClientTypes.LaunchStatus?
        /// If the launch was stopped, this is the string that was entered by the person who stopped the launch, to explain why it was stopped.
        public var statusReason: Swift.String?
        /// The list of tag keys and values associated with this launch.
        public var tags: [Swift.String:Swift.String]?
        /// The type of launch.
        /// This member is required.
        public var type: EvidentlyClientTypes.LaunchType?

        public init (
            arn: Swift.String? = nil,
            createdTime: ClientRuntime.Date? = nil,
            description: Swift.String? = nil,
            execution: EvidentlyClientTypes.LaunchExecution? = nil,
            groups: [EvidentlyClientTypes.LaunchGroup]? = nil,
            lastUpdatedTime: ClientRuntime.Date? = nil,
            metricMonitors: [EvidentlyClientTypes.MetricMonitor]? = nil,
            name: Swift.String? = nil,
            project: Swift.String? = nil,
            randomizationSalt: Swift.String? = nil,
            scheduledSplitsDefinition: EvidentlyClientTypes.ScheduledSplitsLaunchDefinition? = nil,
            status: EvidentlyClientTypes.LaunchStatus? = nil,
            statusReason: Swift.String? = nil,
            tags: [Swift.String:Swift.String]? = nil,
            type: EvidentlyClientTypes.LaunchType? = nil
        )
        {
            self.arn = arn
            self.createdTime = createdTime
            self.description = description
            self.execution = execution
            self.groups = groups
            self.lastUpdatedTime = lastUpdatedTime
            self.metricMonitors = metricMonitors
            self.name = name
            self.project = project
            self.randomizationSalt = randomizationSalt
            self.scheduledSplitsDefinition = scheduledSplitsDefinition
            self.status = status
            self.statusReason = statusReason
            self.tags = tags
            self.type = type
        }
    }

}
