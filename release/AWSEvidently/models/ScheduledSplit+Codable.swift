// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension EvidentlyClientTypes.ScheduledSplit: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case groupWeights
        case segmentOverrides
        case startTime
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let groupWeights = groupWeights {
            var groupWeightsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .groupWeights)
            for (dictKey0, grouptoweightmap0) in groupWeights {
                try groupWeightsContainer.encode(grouptoweightmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let segmentOverrides = segmentOverrides {
            var segmentOverridesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .segmentOverrides)
            for segmentoverrideslist0 in segmentOverrides {
                try segmentOverridesContainer.encode(segmentoverrideslist0)
            }
        }
        if let startTime = self.startTime {
            try encodeContainer.encode(startTime.timeIntervalSince1970, forKey: .startTime)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let startTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .startTime)
        startTime = startTimeDecoded
        let groupWeightsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.Int?].self, forKey: .groupWeights)
        var groupWeightsDecoded0: [Swift.String:Swift.Int]? = nil
        if let groupWeightsContainer = groupWeightsContainer {
            groupWeightsDecoded0 = [Swift.String:Swift.Int]()
            for (key0, splitweight0) in groupWeightsContainer {
                if let splitweight0 = splitweight0 {
                    groupWeightsDecoded0?[key0] = splitweight0
                }
            }
        }
        groupWeights = groupWeightsDecoded0
        let segmentOverridesContainer = try containerValues.decodeIfPresent([EvidentlyClientTypes.SegmentOverride?].self, forKey: .segmentOverrides)
        var segmentOverridesDecoded0:[EvidentlyClientTypes.SegmentOverride]? = nil
        if let segmentOverridesContainer = segmentOverridesContainer {
            segmentOverridesDecoded0 = [EvidentlyClientTypes.SegmentOverride]()
            for structure0 in segmentOverridesContainer {
                if let structure0 = structure0 {
                    segmentOverridesDecoded0?.append(structure0)
                }
            }
        }
        segmentOverrides = segmentOverridesDecoded0
    }
}
