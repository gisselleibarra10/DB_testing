// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension EvidentlyClientTypes.Feature: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn
        case createdTime
        case defaultVariation
        case description
        case entityOverrides
        case evaluationRules
        case evaluationStrategy
        case lastUpdatedTime
        case name
        case project
        case status
        case tags
        case valueType
        case variations
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = self.arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let createdTime = self.createdTime {
            try encodeContainer.encode(createdTime.timeIntervalSince1970, forKey: .createdTime)
        }
        if let defaultVariation = self.defaultVariation {
            try encodeContainer.encode(defaultVariation, forKey: .defaultVariation)
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let entityOverrides = entityOverrides {
            var entityOverridesContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .entityOverrides)
            for (dictKey0, entityoverridemap0) in entityOverrides {
                try entityOverridesContainer.encode(entityoverridemap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let evaluationRules = evaluationRules {
            var evaluationRulesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .evaluationRules)
            for evaluationruleslist0 in evaluationRules {
                try evaluationRulesContainer.encode(evaluationruleslist0)
            }
        }
        if let evaluationStrategy = self.evaluationStrategy {
            try encodeContainer.encode(evaluationStrategy.rawValue, forKey: .evaluationStrategy)
        }
        if let lastUpdatedTime = self.lastUpdatedTime {
            try encodeContainer.encode(lastUpdatedTime.timeIntervalSince1970, forKey: .lastUpdatedTime)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let project = self.project {
            try encodeContainer.encode(project, forKey: .project)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, tagmap0) in tags {
                try tagsContainer.encode(tagmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let valueType = self.valueType {
            try encodeContainer.encode(valueType.rawValue, forKey: .valueType)
        }
        if let variations = variations {
            var variationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .variations)
            for variationslist0 in variations {
                try variationsContainer.encode(variationslist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let projectDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .project)
        project = projectDecoded
        let statusDecoded = try containerValues.decodeIfPresent(EvidentlyClientTypes.FeatureStatus.self, forKey: .status)
        status = statusDecoded
        let createdTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdTime)
        createdTime = createdTimeDecoded
        let lastUpdatedTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastUpdatedTime)
        lastUpdatedTime = lastUpdatedTimeDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let evaluationStrategyDecoded = try containerValues.decodeIfPresent(EvidentlyClientTypes.FeatureEvaluationStrategy.self, forKey: .evaluationStrategy)
        evaluationStrategy = evaluationStrategyDecoded
        let valueTypeDecoded = try containerValues.decodeIfPresent(EvidentlyClientTypes.VariationValueType.self, forKey: .valueType)
        valueType = valueTypeDecoded
        let variationsContainer = try containerValues.decodeIfPresent([EvidentlyClientTypes.Variation?].self, forKey: .variations)
        var variationsDecoded0:[EvidentlyClientTypes.Variation]? = nil
        if let variationsContainer = variationsContainer {
            variationsDecoded0 = [EvidentlyClientTypes.Variation]()
            for structure0 in variationsContainer {
                if let structure0 = structure0 {
                    variationsDecoded0?.append(structure0)
                }
            }
        }
        variations = variationsDecoded0
        let defaultVariationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .defaultVariation)
        defaultVariation = defaultVariationDecoded
        let evaluationRulesContainer = try containerValues.decodeIfPresent([EvidentlyClientTypes.EvaluationRule?].self, forKey: .evaluationRules)
        var evaluationRulesDecoded0:[EvidentlyClientTypes.EvaluationRule]? = nil
        if let evaluationRulesContainer = evaluationRulesContainer {
            evaluationRulesDecoded0 = [EvidentlyClientTypes.EvaluationRule]()
            for structure0 in evaluationRulesContainer {
                if let structure0 = structure0 {
                    evaluationRulesDecoded0?.append(structure0)
                }
            }
        }
        evaluationRules = evaluationRulesDecoded0
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
        let entityOverridesContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .entityOverrides)
        var entityOverridesDecoded0: [Swift.String:Swift.String]? = nil
        if let entityOverridesContainer = entityOverridesContainer {
            entityOverridesDecoded0 = [Swift.String:Swift.String]()
            for (key0, variationname0) in entityOverridesContainer {
                if let variationname0 = variationname0 {
                    entityOverridesDecoded0?[key0] = variationname0
                }
            }
        }
        entityOverrides = entityOverridesDecoded0
    }
}
