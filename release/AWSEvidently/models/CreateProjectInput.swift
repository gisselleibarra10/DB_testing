// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct CreateProjectInput: Swift.Equatable {
    /// Use this parameter if the project will use client-side evaluation powered by AppConfig. Client-side evaluation allows your application to assign variations to user sessions locally instead of by calling the [EvaluateFeature](https://docs.aws.amazon.com/cloudwatchevidently/latest/APIReference/API_EvaluateFeature.html) operation. This mitigates the latency and availability risks that come with an API call. For more information, see [ Client-side evaluation - powered by AppConfig.](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-Evidently-client-side-evaluation.html) This parameter is a structure that contains information about the AppConfig application and environment that will be used as for client-side evaluation. To create a project that uses client-side evaluation, you must have the evidently:ExportProjectAsConfiguration permission.
    public var appConfigResource: EvidentlyClientTypes.ProjectAppConfigResourceConfig?
    /// A structure that contains information about where Evidently is to store evaluation events for longer term storage, if you choose to do so. If you choose not to store these events, Evidently deletes them after using them to produce metrics and other experiment results that you can view.
    public var dataDelivery: EvidentlyClientTypes.ProjectDataDeliveryConfig?
    /// An optional description of the project.
    public var description: Swift.String?
    /// The name for the project.
    /// This member is required.
    public var name: Swift.String?
    /// Assigns one or more tags (key-value pairs) to the project. Tags can help you organize and categorize your resources. You can also use them to scope user permissions by granting a user permission to access or change only resources with certain tag values. Tags don't have any semantic meaning to Amazon Web Services and are interpreted strictly as strings of characters. You can associate as many as 50 tags with a project. For more information, see [Tagging Amazon Web Services resources](https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html).
    public var tags: [Swift.String:Swift.String]?

    public init (
        appConfigResource: EvidentlyClientTypes.ProjectAppConfigResourceConfig? = nil,
        dataDelivery: EvidentlyClientTypes.ProjectDataDeliveryConfig? = nil,
        description: Swift.String? = nil,
        name: Swift.String? = nil,
        tags: [Swift.String:Swift.String]? = nil
    )
    {
        self.appConfigResource = appConfigResource
        self.dataDelivery = dataDelivery
        self.description = description
        self.name = name
        self.tags = tags
    }
}
