// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension EvidentlyClientTypes.ExperimentResultsData: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case metricName
        case resultStat
        case treatmentName
        case values
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let metricName = self.metricName {
            try encodeContainer.encode(metricName, forKey: .metricName)
        }
        if let resultStat = self.resultStat {
            try encodeContainer.encode(resultStat.rawValue, forKey: .resultStat)
        }
        if let treatmentName = self.treatmentName {
            try encodeContainer.encode(treatmentName, forKey: .treatmentName)
        }
        if let values = values {
            var valuesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .values)
            for doublevaluelist0 in values {
                try valuesContainer.encode(doublevaluelist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let metricNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .metricName)
        metricName = metricNameDecoded
        let treatmentNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .treatmentName)
        treatmentName = treatmentNameDecoded
        let resultStatDecoded = try containerValues.decodeIfPresent(EvidentlyClientTypes.ExperimentResultResponseType.self, forKey: .resultStat)
        resultStat = resultStatDecoded
        let valuesContainer = try containerValues.decodeIfPresent([Swift.Double?].self, forKey: .values)
        var valuesDecoded0:[Swift.Double]? = nil
        if let valuesContainer = valuesContainer {
            valuesDecoded0 = [Swift.Double]()
            for double0 in valuesContainer {
                if let double0 = double0 {
                    valuesDecoded0?.append(double0)
                }
            }
        }
        values = valuesDecoded0
    }
}
