// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension EvidentlyClientTypes.OnlineAbConfig: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case controlTreatmentName
        case treatmentWeights
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let controlTreatmentName = self.controlTreatmentName {
            try encodeContainer.encode(controlTreatmentName, forKey: .controlTreatmentName)
        }
        if let treatmentWeights = treatmentWeights {
            var treatmentWeightsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .treatmentWeights)
            for (dictKey0, treatmenttoweightmap0) in treatmentWeights {
                try treatmentWeightsContainer.encode(treatmenttoweightmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let controlTreatmentNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .controlTreatmentName)
        controlTreatmentName = controlTreatmentNameDecoded
        let treatmentWeightsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.Int?].self, forKey: .treatmentWeights)
        var treatmentWeightsDecoded0: [Swift.String:Swift.Int]? = nil
        if let treatmentWeightsContainer = treatmentWeightsContainer {
            treatmentWeightsDecoded0 = [Swift.String:Swift.Int]()
            for (key0, splitweight0) in treatmentWeightsContainer {
                if let splitweight0 = splitweight0 {
                    treatmentWeightsDecoded0?[key0] = splitweight0
                }
            }
        }
        treatmentWeights = treatmentWeightsDecoded0
    }
}
