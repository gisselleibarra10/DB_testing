// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension EvidentlyClientTypes {
    /// This structure contains information about one audience segment. You can use segments in your experiments and launches to narrow the user sessions used for experiment or launch to only the user sessions that match one or more criteria.
    public struct Segment: Swift.Equatable {
        /// The ARN of the segment.
        /// This member is required.
        public var arn: Swift.String?
        /// The date and time that this segment was created.
        /// This member is required.
        public var createdTime: ClientRuntime.Date?
        /// The customer-created description for this segment.
        public var description: Swift.String?
        /// The number of experiments that this segment is used in. This count includes all current experiments, not just those that are currently running.
        public var experimentCount: Swift.Int?
        /// The date and time that this segment was most recently updated.
        /// This member is required.
        public var lastUpdatedTime: ClientRuntime.Date?
        /// The number of launches that this segment is used in. This count includes all current launches, not just those that are currently running.
        public var launchCount: Swift.Int?
        /// The name of the segment.
        /// This member is required.
        public var name: Swift.String?
        /// The pattern that defines the attributes to use to evalute whether a user session will be in the segment. For more information about the pattern syntax, see [Segment rule pattern syntax](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-Evidently-segments.html).
        /// This member is required.
        public var pattern: Swift.String?
        /// The list of tag keys and values associated with this launch.
        public var tags: [Swift.String:Swift.String]?

        public init (
            arn: Swift.String? = nil,
            createdTime: ClientRuntime.Date? = nil,
            description: Swift.String? = nil,
            experimentCount: Swift.Int? = nil,
            lastUpdatedTime: ClientRuntime.Date? = nil,
            launchCount: Swift.Int? = nil,
            name: Swift.String? = nil,
            pattern: Swift.String? = nil,
            tags: [Swift.String:Swift.String]? = nil
        )
        {
            self.arn = arn
            self.createdTime = createdTime
            self.description = description
            self.experimentCount = experimentCount
            self.lastUpdatedTime = lastUpdatedTime
            self.launchCount = launchCount
            self.name = name
            self.pattern = pattern
            self.tags = tags
        }
    }

}
