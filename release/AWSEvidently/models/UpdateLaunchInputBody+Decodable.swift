// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct UpdateLaunchInputBody: Swift.Equatable {
    let description: Swift.String?
    let groups: [EvidentlyClientTypes.LaunchGroupConfig]?
    let metricMonitors: [EvidentlyClientTypes.MetricMonitorConfig]?
    let randomizationSalt: Swift.String?
    let scheduledSplitsConfig: EvidentlyClientTypes.ScheduledSplitsLaunchConfig?
}

extension UpdateLaunchInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description
        case groups
        case metricMonitors
        case randomizationSalt
        case scheduledSplitsConfig
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let groupsContainer = try containerValues.decodeIfPresent([EvidentlyClientTypes.LaunchGroupConfig?].self, forKey: .groups)
        var groupsDecoded0:[EvidentlyClientTypes.LaunchGroupConfig]? = nil
        if let groupsContainer = groupsContainer {
            groupsDecoded0 = [EvidentlyClientTypes.LaunchGroupConfig]()
            for structure0 in groupsContainer {
                if let structure0 = structure0 {
                    groupsDecoded0?.append(structure0)
                }
            }
        }
        groups = groupsDecoded0
        let metricMonitorsContainer = try containerValues.decodeIfPresent([EvidentlyClientTypes.MetricMonitorConfig?].self, forKey: .metricMonitors)
        var metricMonitorsDecoded0:[EvidentlyClientTypes.MetricMonitorConfig]? = nil
        if let metricMonitorsContainer = metricMonitorsContainer {
            metricMonitorsDecoded0 = [EvidentlyClientTypes.MetricMonitorConfig]()
            for structure0 in metricMonitorsContainer {
                if let structure0 = structure0 {
                    metricMonitorsDecoded0?.append(structure0)
                }
            }
        }
        metricMonitors = metricMonitorsDecoded0
        let randomizationSaltDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .randomizationSalt)
        randomizationSalt = randomizationSaltDecoded
        let scheduledSplitsConfigDecoded = try containerValues.decodeIfPresent(EvidentlyClientTypes.ScheduledSplitsLaunchConfig.self, forKey: .scheduledSplitsConfig)
        scheduledSplitsConfig = scheduledSplitsConfigDecoded
    }
}
