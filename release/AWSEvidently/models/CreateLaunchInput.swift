// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct CreateLaunchInput: Swift.Equatable {
    /// An optional description for the launch.
    public var description: Swift.String?
    /// An array of structures that contains the feature and variations that are to be used for the launch.
    /// This member is required.
    public var groups: [EvidentlyClientTypes.LaunchGroupConfig]?
    /// An array of structures that define the metrics that will be used to monitor the launch performance.
    public var metricMonitors: [EvidentlyClientTypes.MetricMonitorConfig]?
    /// The name for the new launch.
    /// This member is required.
    public var name: Swift.String?
    /// The name or ARN of the project that you want to create the launch in.
    /// This member is required.
    public var project: Swift.String?
    /// When Evidently assigns a particular user session to a launch, it must use a randomization ID to determine which variation the user session is served. This randomization ID is a combination of the entity ID and randomizationSalt. If you omit randomizationSalt, Evidently uses the launch name as the randomizationSalt.
    public var randomizationSalt: Swift.String?
    /// An array of structures that define the traffic allocation percentages among the feature variations during each step of the launch.
    public var scheduledSplitsConfig: EvidentlyClientTypes.ScheduledSplitsLaunchConfig?
    /// Assigns one or more tags (key-value pairs) to the launch. Tags can help you organize and categorize your resources. You can also use them to scope user permissions by granting a user permission to access or change only resources with certain tag values. Tags don't have any semantic meaning to Amazon Web Services and are interpreted strictly as strings of characters. You can associate as many as 50 tags with a launch. For more information, see [Tagging Amazon Web Services resources](https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html).
    public var tags: [Swift.String:Swift.String]?

    public init (
        description: Swift.String? = nil,
        groups: [EvidentlyClientTypes.LaunchGroupConfig]? = nil,
        metricMonitors: [EvidentlyClientTypes.MetricMonitorConfig]? = nil,
        name: Swift.String? = nil,
        project: Swift.String? = nil,
        randomizationSalt: Swift.String? = nil,
        scheduledSplitsConfig: EvidentlyClientTypes.ScheduledSplitsLaunchConfig? = nil,
        tags: [Swift.String:Swift.String]? = nil
    )
    {
        self.description = description
        self.groups = groups
        self.metricMonitors = metricMonitors
        self.name = name
        self.project = project
        self.randomizationSalt = randomizationSalt
        self.scheduledSplitsConfig = scheduledSplitsConfig
        self.tags = tags
    }
}
