// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct UpdateFeatureInputBody: Swift.Equatable {
    let evaluationStrategy: EvidentlyClientTypes.FeatureEvaluationStrategy?
    let description: Swift.String?
    let addOrUpdateVariations: [EvidentlyClientTypes.VariationConfig]?
    let removeVariations: [Swift.String]?
    let defaultVariation: Swift.String?
    let entityOverrides: [Swift.String:Swift.String]?
}

extension UpdateFeatureInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case addOrUpdateVariations
        case defaultVariation
        case description
        case entityOverrides
        case evaluationStrategy
        case removeVariations
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let evaluationStrategyDecoded = try containerValues.decodeIfPresent(EvidentlyClientTypes.FeatureEvaluationStrategy.self, forKey: .evaluationStrategy)
        evaluationStrategy = evaluationStrategyDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let addOrUpdateVariationsContainer = try containerValues.decodeIfPresent([EvidentlyClientTypes.VariationConfig?].self, forKey: .addOrUpdateVariations)
        var addOrUpdateVariationsDecoded0:[EvidentlyClientTypes.VariationConfig]? = nil
        if let addOrUpdateVariationsContainer = addOrUpdateVariationsContainer {
            addOrUpdateVariationsDecoded0 = [EvidentlyClientTypes.VariationConfig]()
            for structure0 in addOrUpdateVariationsContainer {
                if let structure0 = structure0 {
                    addOrUpdateVariationsDecoded0?.append(structure0)
                }
            }
        }
        addOrUpdateVariations = addOrUpdateVariationsDecoded0
        let removeVariationsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .removeVariations)
        var removeVariationsDecoded0:[Swift.String]? = nil
        if let removeVariationsContainer = removeVariationsContainer {
            removeVariationsDecoded0 = [Swift.String]()
            for string0 in removeVariationsContainer {
                if let string0 = string0 {
                    removeVariationsDecoded0?.append(string0)
                }
            }
        }
        removeVariations = removeVariationsDecoded0
        let defaultVariationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .defaultVariation)
        defaultVariation = defaultVariationDecoded
        let entityOverridesContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .entityOverrides)
        var entityOverridesDecoded0: [Swift.String:Swift.String]? = nil
        if let entityOverridesContainer = entityOverridesContainer {
            entityOverridesDecoded0 = [Swift.String:Swift.String]()
            for (key0, variationname0) in entityOverridesContainer {
                if let variationname0 = variationname0 {
                    entityOverridesDecoded0?[key0] = variationname0
                }
            }
        }
        entityOverrides = entityOverridesDecoded0
    }
}
