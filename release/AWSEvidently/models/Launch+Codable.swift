// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension EvidentlyClientTypes.Launch: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn
        case createdTime
        case description
        case execution
        case groups
        case lastUpdatedTime
        case metricMonitors
        case name
        case project
        case randomizationSalt
        case scheduledSplitsDefinition
        case status
        case statusReason
        case tags
        case type
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = self.arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let createdTime = self.createdTime {
            try encodeContainer.encode(createdTime.timeIntervalSince1970, forKey: .createdTime)
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let execution = self.execution {
            try encodeContainer.encode(execution, forKey: .execution)
        }
        if let groups = groups {
            var groupsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .groups)
            for launchgrouplist0 in groups {
                try groupsContainer.encode(launchgrouplist0)
            }
        }
        if let lastUpdatedTime = self.lastUpdatedTime {
            try encodeContainer.encode(lastUpdatedTime.timeIntervalSince1970, forKey: .lastUpdatedTime)
        }
        if let metricMonitors = metricMonitors {
            var metricMonitorsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .metricMonitors)
            for metricmonitorlist0 in metricMonitors {
                try metricMonitorsContainer.encode(metricmonitorlist0)
            }
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let project = self.project {
            try encodeContainer.encode(project, forKey: .project)
        }
        if let randomizationSalt = self.randomizationSalt {
            try encodeContainer.encode(randomizationSalt, forKey: .randomizationSalt)
        }
        if let scheduledSplitsDefinition = self.scheduledSplitsDefinition {
            try encodeContainer.encode(scheduledSplitsDefinition, forKey: .scheduledSplitsDefinition)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let statusReason = self.statusReason {
            try encodeContainer.encode(statusReason, forKey: .statusReason)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, tagmap0) in tags {
                try tagsContainer.encode(tagmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let type = self.type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let projectDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .project)
        project = projectDecoded
        let statusDecoded = try containerValues.decodeIfPresent(EvidentlyClientTypes.LaunchStatus.self, forKey: .status)
        status = statusDecoded
        let statusReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .statusReason)
        statusReason = statusReasonDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let createdTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdTime)
        createdTime = createdTimeDecoded
        let lastUpdatedTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastUpdatedTime)
        lastUpdatedTime = lastUpdatedTimeDecoded
        let executionDecoded = try containerValues.decodeIfPresent(EvidentlyClientTypes.LaunchExecution.self, forKey: .execution)
        execution = executionDecoded
        let groupsContainer = try containerValues.decodeIfPresent([EvidentlyClientTypes.LaunchGroup?].self, forKey: .groups)
        var groupsDecoded0:[EvidentlyClientTypes.LaunchGroup]? = nil
        if let groupsContainer = groupsContainer {
            groupsDecoded0 = [EvidentlyClientTypes.LaunchGroup]()
            for structure0 in groupsContainer {
                if let structure0 = structure0 {
                    groupsDecoded0?.append(structure0)
                }
            }
        }
        groups = groupsDecoded0
        let metricMonitorsContainer = try containerValues.decodeIfPresent([EvidentlyClientTypes.MetricMonitor?].self, forKey: .metricMonitors)
        var metricMonitorsDecoded0:[EvidentlyClientTypes.MetricMonitor]? = nil
        if let metricMonitorsContainer = metricMonitorsContainer {
            metricMonitorsDecoded0 = [EvidentlyClientTypes.MetricMonitor]()
            for structure0 in metricMonitorsContainer {
                if let structure0 = structure0 {
                    metricMonitorsDecoded0?.append(structure0)
                }
            }
        }
        metricMonitors = metricMonitorsDecoded0
        let randomizationSaltDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .randomizationSalt)
        randomizationSalt = randomizationSaltDecoded
        let typeDecoded = try containerValues.decodeIfPresent(EvidentlyClientTypes.LaunchType.self, forKey: .type)
        type = typeDecoded
        let scheduledSplitsDefinitionDecoded = try containerValues.decodeIfPresent(EvidentlyClientTypes.ScheduledSplitsLaunchDefinition.self, forKey: .scheduledSplitsDefinition)
        scheduledSplitsDefinition = scheduledSplitsDefinitionDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
    }
}
