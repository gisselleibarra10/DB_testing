// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension UpdateFeatureInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case addOrUpdateVariations
        case defaultVariation
        case description
        case entityOverrides
        case evaluationStrategy
        case removeVariations
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let addOrUpdateVariations = addOrUpdateVariations {
            var addOrUpdateVariationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .addOrUpdateVariations)
            for variationconfigslist0 in addOrUpdateVariations {
                try addOrUpdateVariationsContainer.encode(variationconfigslist0)
            }
        }
        if let defaultVariation = self.defaultVariation {
            try encodeContainer.encode(defaultVariation, forKey: .defaultVariation)
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let entityOverrides = entityOverrides {
            var entityOverridesContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .entityOverrides)
            for (dictKey0, entityoverridemap0) in entityOverrides {
                try entityOverridesContainer.encode(entityoverridemap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let evaluationStrategy = self.evaluationStrategy {
            try encodeContainer.encode(evaluationStrategy.rawValue, forKey: .evaluationStrategy)
        }
        if let removeVariations = removeVariations {
            var removeVariationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .removeVariations)
            for variationnamelist0 in removeVariations {
                try removeVariationsContainer.encode(variationnamelist0)
            }
        }
    }
}
