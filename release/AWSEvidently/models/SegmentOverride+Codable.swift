// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension EvidentlyClientTypes.SegmentOverride: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case evaluationOrder
        case segment
        case weights
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let evaluationOrder = self.evaluationOrder {
            try encodeContainer.encode(evaluationOrder, forKey: .evaluationOrder)
        }
        if let segment = self.segment {
            try encodeContainer.encode(segment, forKey: .segment)
        }
        if let weights = weights {
            var weightsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .weights)
            for (dictKey0, grouptoweightmap0) in weights {
                try weightsContainer.encode(grouptoweightmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let segmentDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .segment)
        segment = segmentDecoded
        let evaluationOrderDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .evaluationOrder)
        evaluationOrder = evaluationOrderDecoded
        let weightsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.Int?].self, forKey: .weights)
        var weightsDecoded0: [Swift.String:Swift.Int]? = nil
        if let weightsContainer = weightsContainer {
            weightsDecoded0 = [Swift.String:Swift.Int]()
            for (key0, splitweight0) in weightsContainer {
                if let splitweight0 = splitweight0 {
                    weightsDecoded0?[key0] = splitweight0
                }
            }
        }
        weights = weightsDecoded0
    }
}
