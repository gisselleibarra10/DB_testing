// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SesClientTypes.MessageDsn: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arrivalDate = "ArrivalDate"
        case extensionFields = "ExtensionFields"
        case reportingMta = "ReportingMta"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let arrivalDate = arrivalDate {
            try container.encode(ClientRuntime.TimestampWrapper(arrivalDate, format: .dateTime), forKey: ClientRuntime.Key("arrivalDate"))
        }
        if let extensionFields = extensionFields {
            var extensionFieldsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ExtensionFields"))
            for (index0, extensionfield0) in extensionFields.enumerated() {
                try extensionFieldsContainer.encode(extensionfield0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let reportingMta = reportingMta {
            try container.encode(reportingMta, forKey: ClientRuntime.Key("ReportingMta"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let reportingMtaDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .reportingMta)
        reportingMta = reportingMtaDecoded
        let arrivalDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arrivalDate)
        var arrivalDateBuffer:ClientRuntime.Date? = nil
        if let arrivalDateDecoded = arrivalDateDecoded {
            arrivalDateBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(arrivalDateDecoded, format: .dateTime)
        }
        arrivalDate = arrivalDateBuffer
        if containerValues.contains(.extensionFields) {
            struct KeyVal0{struct member{}}
            let extensionFieldsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .extensionFields)
            if let extensionFieldsWrappedContainer = extensionFieldsWrappedContainer {
                let extensionFieldsContainer = try extensionFieldsWrappedContainer.decodeIfPresent([SesClientTypes.ExtensionField].self, forKey: .member)
                var extensionFieldsBuffer:[SesClientTypes.ExtensionField]? = nil
                if let extensionFieldsContainer = extensionFieldsContainer {
                    extensionFieldsBuffer = [SesClientTypes.ExtensionField]()
                    for structureContainer0 in extensionFieldsContainer {
                        extensionFieldsBuffer?.append(structureContainer0)
                    }
                }
                extensionFields = extensionFieldsBuffer
            } else {
                extensionFields = []
            }
        } else {
            extensionFields = nil
        }
    }
}
