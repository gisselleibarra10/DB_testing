// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SesClientTypes.ReceiptRule: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case actions = "Actions"
        case enabled = "Enabled"
        case name = "Name"
        case recipients = "Recipients"
        case scanEnabled = "ScanEnabled"
        case tlsPolicy = "TlsPolicy"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let actions = actions {
            var actionsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Actions"))
            for (index0, receiptaction0) in actions.enumerated() {
                try actionsContainer.encode(receiptaction0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if enabled != false {
            try container.encode(enabled, forKey: ClientRuntime.Key("Enabled"))
        }
        if let name = name {
            try container.encode(name, forKey: ClientRuntime.Key("Name"))
        }
        if let recipients = recipients {
            var recipientsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Recipients"))
            for (index0, recipient0) in recipients.enumerated() {
                try recipientsContainer.encode(recipient0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if scanEnabled != false {
            try container.encode(scanEnabled, forKey: ClientRuntime.Key("ScanEnabled"))
        }
        if let tlsPolicy = tlsPolicy {
            try container.encode(tlsPolicy, forKey: ClientRuntime.Key("TlsPolicy"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let enabledDecoded = try containerValues.decode(Swift.Bool.self, forKey: .enabled)
        enabled = enabledDecoded
        let tlsPolicyDecoded = try containerValues.decodeIfPresent(SesClientTypes.TlsPolicy.self, forKey: .tlsPolicy)
        tlsPolicy = tlsPolicyDecoded
        if containerValues.contains(.recipients) {
            struct KeyVal0{struct member{}}
            let recipientsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .recipients)
            if let recipientsWrappedContainer = recipientsWrappedContainer {
                let recipientsContainer = try recipientsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var recipientsBuffer:[Swift.String]? = nil
                if let recipientsContainer = recipientsContainer {
                    recipientsBuffer = [Swift.String]()
                    for stringContainer0 in recipientsContainer {
                        recipientsBuffer?.append(stringContainer0)
                    }
                }
                recipients = recipientsBuffer
            } else {
                recipients = []
            }
        } else {
            recipients = nil
        }
        if containerValues.contains(.actions) {
            struct KeyVal0{struct member{}}
            let actionsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .actions)
            if let actionsWrappedContainer = actionsWrappedContainer {
                let actionsContainer = try actionsWrappedContainer.decodeIfPresent([SesClientTypes.ReceiptAction].self, forKey: .member)
                var actionsBuffer:[SesClientTypes.ReceiptAction]? = nil
                if let actionsContainer = actionsContainer {
                    actionsBuffer = [SesClientTypes.ReceiptAction]()
                    for structureContainer0 in actionsContainer {
                        actionsBuffer?.append(structureContainer0)
                    }
                }
                actions = actionsBuffer
            } else {
                actions = []
            }
        } else {
            actions = nil
        }
        let scanEnabledDecoded = try containerValues.decode(Swift.Bool.self, forKey: .scanEnabled)
        scanEnabled = scanEnabledDecoded
    }
}
