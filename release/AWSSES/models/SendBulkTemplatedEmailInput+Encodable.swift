// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SendBulkTemplatedEmailInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let configurationSetName = configurationSetName {
            try container.encode(configurationSetName, forKey: ClientRuntime.Key("ConfigurationSetName"))
        }
        if let defaultTags = defaultTags {
            var defaultTagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("DefaultTags"))
            for (index0, messagetag0) in defaultTags.enumerated() {
                try defaultTagsContainer.encode(messagetag0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let defaultTemplateData = defaultTemplateData {
            try container.encode(defaultTemplateData, forKey: ClientRuntime.Key("DefaultTemplateData"))
        }
        if let destinations = destinations {
            var destinationsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Destinations"))
            for (index0, bulkemaildestination0) in destinations.enumerated() {
                try destinationsContainer.encode(bulkemaildestination0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let replyToAddresses = replyToAddresses {
            var replyToAddressesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ReplyToAddresses"))
            for (index0, address0) in replyToAddresses.enumerated() {
                try replyToAddressesContainer.encode(address0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let returnPath = returnPath {
            try container.encode(returnPath, forKey: ClientRuntime.Key("ReturnPath"))
        }
        if let returnPathArn = returnPathArn {
            try container.encode(returnPathArn, forKey: ClientRuntime.Key("ReturnPathArn"))
        }
        if let source = source {
            try container.encode(source, forKey: ClientRuntime.Key("Source"))
        }
        if let sourceArn = sourceArn {
            try container.encode(sourceArn, forKey: ClientRuntime.Key("SourceArn"))
        }
        if let template = template {
            try container.encode(template, forKey: ClientRuntime.Key("Template"))
        }
        if let templateArn = templateArn {
            try container.encode(templateArn, forKey: ClientRuntime.Key("TemplateArn"))
        }
        try container.encode("SendBulkTemplatedEmail", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-12-01", forKey:ClientRuntime.Key("Version"))
    }
}
