// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SesClientTypes.RecipientDsnFields: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case action = "Action"
        case diagnosticCode = "DiagnosticCode"
        case extensionFields = "ExtensionFields"
        case finalRecipient = "FinalRecipient"
        case lastAttemptDate = "LastAttemptDate"
        case remoteMta = "RemoteMta"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let action = action {
            try container.encode(action, forKey: ClientRuntime.Key("Action"))
        }
        if let diagnosticCode = diagnosticCode {
            try container.encode(diagnosticCode, forKey: ClientRuntime.Key("DiagnosticCode"))
        }
        if let extensionFields = extensionFields {
            var extensionFieldsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ExtensionFields"))
            for (index0, extensionfield0) in extensionFields.enumerated() {
                try extensionFieldsContainer.encode(extensionfield0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let finalRecipient = finalRecipient {
            try container.encode(finalRecipient, forKey: ClientRuntime.Key("FinalRecipient"))
        }
        if let lastAttemptDate = lastAttemptDate {
            try container.encode(ClientRuntime.TimestampWrapper(lastAttemptDate, format: .dateTime), forKey: ClientRuntime.Key("lastAttemptDate"))
        }
        if let remoteMta = remoteMta {
            try container.encode(remoteMta, forKey: ClientRuntime.Key("RemoteMta"))
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let finalRecipientDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .finalRecipient)
        finalRecipient = finalRecipientDecoded
        let actionDecoded = try containerValues.decodeIfPresent(SesClientTypes.DsnAction.self, forKey: .action)
        action = actionDecoded
        let remoteMtaDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .remoteMta)
        remoteMta = remoteMtaDecoded
        let statusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .status)
        status = statusDecoded
        let diagnosticCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .diagnosticCode)
        diagnosticCode = diagnosticCodeDecoded
        let lastAttemptDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastAttemptDate)
        var lastAttemptDateBuffer:ClientRuntime.Date? = nil
        if let lastAttemptDateDecoded = lastAttemptDateDecoded {
            lastAttemptDateBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(lastAttemptDateDecoded, format: .dateTime)
        }
        lastAttemptDate = lastAttemptDateBuffer
        if containerValues.contains(.extensionFields) {
            struct KeyVal0{struct member{}}
            let extensionFieldsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .extensionFields)
            if let extensionFieldsWrappedContainer = extensionFieldsWrappedContainer {
                let extensionFieldsContainer = try extensionFieldsWrappedContainer.decodeIfPresent([SesClientTypes.ExtensionField].self, forKey: .member)
                var extensionFieldsBuffer:[SesClientTypes.ExtensionField]? = nil
                if let extensionFieldsContainer = extensionFieldsContainer {
                    extensionFieldsBuffer = [SesClientTypes.ExtensionField]()
                    for structureContainer0 in extensionFieldsContainer {
                        extensionFieldsBuffer?.append(structureContainer0)
                    }
                }
                extensionFields = extensionFieldsBuffer
            } else {
                extensionFields = []
            }
        } else {
            extensionFields = nil
        }
    }
}
