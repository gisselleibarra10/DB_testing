// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct SendBounceInputBody: Swift.Equatable {
    let originalMessageId: Swift.String?
    let bounceSender: Swift.String?
    let explanation: Swift.String?
    let messageDsn: SesClientTypes.MessageDsn?
    let bouncedRecipientInfoList: [SesClientTypes.BouncedRecipientInfo]?
    let bounceSenderArn: Swift.String?
}

extension SendBounceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bounceSender = "BounceSender"
        case bounceSenderArn = "BounceSenderArn"
        case bouncedRecipientInfoList = "BouncedRecipientInfoList"
        case explanation = "Explanation"
        case messageDsn = "MessageDsn"
        case originalMessageId = "OriginalMessageId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let originalMessageIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .originalMessageId)
        originalMessageId = originalMessageIdDecoded
        let bounceSenderDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .bounceSender)
        bounceSender = bounceSenderDecoded
        let explanationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .explanation)
        explanation = explanationDecoded
        let messageDsnDecoded = try containerValues.decodeIfPresent(SesClientTypes.MessageDsn.self, forKey: .messageDsn)
        messageDsn = messageDsnDecoded
        if containerValues.contains(.bouncedRecipientInfoList) {
            struct KeyVal0{struct member{}}
            let bouncedRecipientInfoListWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .bouncedRecipientInfoList)
            if let bouncedRecipientInfoListWrappedContainer = bouncedRecipientInfoListWrappedContainer {
                let bouncedRecipientInfoListContainer = try bouncedRecipientInfoListWrappedContainer.decodeIfPresent([SesClientTypes.BouncedRecipientInfo].self, forKey: .member)
                var bouncedRecipientInfoListBuffer:[SesClientTypes.BouncedRecipientInfo]? = nil
                if let bouncedRecipientInfoListContainer = bouncedRecipientInfoListContainer {
                    bouncedRecipientInfoListBuffer = [SesClientTypes.BouncedRecipientInfo]()
                    for structureContainer0 in bouncedRecipientInfoListContainer {
                        bouncedRecipientInfoListBuffer?.append(structureContainer0)
                    }
                }
                bouncedRecipientInfoList = bouncedRecipientInfoListBuffer
            } else {
                bouncedRecipientInfoList = []
            }
        } else {
            bouncedRecipientInfoList = nil
        }
        let bounceSenderArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .bounceSenderArn)
        bounceSenderArn = bounceSenderArnDecoded
    }
}
