// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SesClientTypes.CloudWatchDestination: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dimensionConfigurations = "DimensionConfigurations"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let dimensionConfigurations = dimensionConfigurations {
            var dimensionConfigurationsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("DimensionConfigurations"))
            for (index0, cloudwatchdimensionconfiguration0) in dimensionConfigurations.enumerated() {
                try dimensionConfigurationsContainer.encode(cloudwatchdimensionconfiguration0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.dimensionConfigurations) {
            struct KeyVal0{struct member{}}
            let dimensionConfigurationsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .dimensionConfigurations)
            if let dimensionConfigurationsWrappedContainer = dimensionConfigurationsWrappedContainer {
                let dimensionConfigurationsContainer = try dimensionConfigurationsWrappedContainer.decodeIfPresent([SesClientTypes.CloudWatchDimensionConfiguration].self, forKey: .member)
                var dimensionConfigurationsBuffer:[SesClientTypes.CloudWatchDimensionConfiguration]? = nil
                if let dimensionConfigurationsContainer = dimensionConfigurationsContainer {
                    dimensionConfigurationsBuffer = [SesClientTypes.CloudWatchDimensionConfiguration]()
                    for structureContainer0 in dimensionConfigurationsContainer {
                        dimensionConfigurationsBuffer?.append(structureContainer0)
                    }
                }
                dimensionConfigurations = dimensionConfigurationsBuffer
            } else {
                dimensionConfigurations = []
            }
        } else {
            dimensionConfigurations = nil
        }
    }
}
