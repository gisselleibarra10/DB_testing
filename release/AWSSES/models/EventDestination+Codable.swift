// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SesClientTypes.EventDestination: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cloudWatchDestination = "CloudWatchDestination"
        case enabled = "Enabled"
        case kinesisFirehoseDestination = "KinesisFirehoseDestination"
        case matchingEventTypes = "MatchingEventTypes"
        case name = "Name"
        case sNSDestination = "SNSDestination"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let cloudWatchDestination = cloudWatchDestination {
            try container.encode(cloudWatchDestination, forKey: ClientRuntime.Key("CloudWatchDestination"))
        }
        if enabled != false {
            try container.encode(enabled, forKey: ClientRuntime.Key("Enabled"))
        }
        if let kinesisFirehoseDestination = kinesisFirehoseDestination {
            try container.encode(kinesisFirehoseDestination, forKey: ClientRuntime.Key("KinesisFirehoseDestination"))
        }
        if let matchingEventTypes = matchingEventTypes {
            var matchingEventTypesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("MatchingEventTypes"))
            for (index0, eventtype0) in matchingEventTypes.enumerated() {
                try matchingEventTypesContainer.encode(eventtype0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let name = name {
            try container.encode(name, forKey: ClientRuntime.Key("Name"))
        }
        if let sNSDestination = sNSDestination {
            try container.encode(sNSDestination, forKey: ClientRuntime.Key("SNSDestination"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let enabledDecoded = try containerValues.decode(Swift.Bool.self, forKey: .enabled)
        enabled = enabledDecoded
        if containerValues.contains(.matchingEventTypes) {
            struct KeyVal0{struct member{}}
            let matchingEventTypesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .matchingEventTypes)
            if let matchingEventTypesWrappedContainer = matchingEventTypesWrappedContainer {
                let matchingEventTypesContainer = try matchingEventTypesWrappedContainer.decodeIfPresent([SesClientTypes.EventType].self, forKey: .member)
                var matchingEventTypesBuffer:[SesClientTypes.EventType]? = nil
                if let matchingEventTypesContainer = matchingEventTypesContainer {
                    matchingEventTypesBuffer = [SesClientTypes.EventType]()
                    for stringContainer0 in matchingEventTypesContainer {
                        matchingEventTypesBuffer?.append(stringContainer0)
                    }
                }
                matchingEventTypes = matchingEventTypesBuffer
            } else {
                matchingEventTypes = []
            }
        } else {
            matchingEventTypes = nil
        }
        let kinesisFirehoseDestinationDecoded = try containerValues.decodeIfPresent(SesClientTypes.KinesisFirehoseDestination.self, forKey: .kinesisFirehoseDestination)
        kinesisFirehoseDestination = kinesisFirehoseDestinationDecoded
        let cloudWatchDestinationDecoded = try containerValues.decodeIfPresent(SesClientTypes.CloudWatchDestination.self, forKey: .cloudWatchDestination)
        cloudWatchDestination = cloudWatchDestinationDecoded
        let sNSDestinationDecoded = try containerValues.decodeIfPresent(SesClientTypes.SNSDestination.self, forKey: .sNSDestination)
        sNSDestination = sNSDestinationDecoded
    }
}
