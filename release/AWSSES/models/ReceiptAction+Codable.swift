// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SesClientTypes.ReceiptAction: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case addHeaderAction = "AddHeaderAction"
        case bounceAction = "BounceAction"
        case lambdaAction = "LambdaAction"
        case s3Action = "S3Action"
        case sNSAction = "SNSAction"
        case stopAction = "StopAction"
        case workmailAction = "WorkmailAction"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let addHeaderAction = addHeaderAction {
            try container.encode(addHeaderAction, forKey: ClientRuntime.Key("AddHeaderAction"))
        }
        if let bounceAction = bounceAction {
            try container.encode(bounceAction, forKey: ClientRuntime.Key("BounceAction"))
        }
        if let lambdaAction = lambdaAction {
            try container.encode(lambdaAction, forKey: ClientRuntime.Key("LambdaAction"))
        }
        if let s3Action = s3Action {
            try container.encode(s3Action, forKey: ClientRuntime.Key("S3Action"))
        }
        if let sNSAction = sNSAction {
            try container.encode(sNSAction, forKey: ClientRuntime.Key("SNSAction"))
        }
        if let stopAction = stopAction {
            try container.encode(stopAction, forKey: ClientRuntime.Key("StopAction"))
        }
        if let workmailAction = workmailAction {
            try container.encode(workmailAction, forKey: ClientRuntime.Key("WorkmailAction"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let s3ActionDecoded = try containerValues.decodeIfPresent(SesClientTypes.S3Action.self, forKey: .s3Action)
        s3Action = s3ActionDecoded
        let bounceActionDecoded = try containerValues.decodeIfPresent(SesClientTypes.BounceAction.self, forKey: .bounceAction)
        bounceAction = bounceActionDecoded
        let workmailActionDecoded = try containerValues.decodeIfPresent(SesClientTypes.WorkmailAction.self, forKey: .workmailAction)
        workmailAction = workmailActionDecoded
        let lambdaActionDecoded = try containerValues.decodeIfPresent(SesClientTypes.LambdaAction.self, forKey: .lambdaAction)
        lambdaAction = lambdaActionDecoded
        let stopActionDecoded = try containerValues.decodeIfPresent(SesClientTypes.StopAction.self, forKey: .stopAction)
        stopAction = stopActionDecoded
        let addHeaderActionDecoded = try containerValues.decodeIfPresent(SesClientTypes.AddHeaderAction.self, forKey: .addHeaderAction)
        addHeaderAction = addHeaderActionDecoded
        let sNSActionDecoded = try containerValues.decodeIfPresent(SesClientTypes.SNSAction.self, forKey: .sNSAction)
        sNSAction = sNSActionDecoded
    }
}
