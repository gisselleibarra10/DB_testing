// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetSendStatisticsOutputResponseBody: Swift.Equatable {
    let sendDataPoints: [SesClientTypes.SendDataPoint]?
}

extension GetSendStatisticsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case sendDataPoints = "SendDataPoints"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("GetSendStatisticsResult"))
        if containerValues.contains(.sendDataPoints) {
            struct KeyVal0{struct member{}}
            let sendDataPointsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .sendDataPoints)
            if let sendDataPointsWrappedContainer = sendDataPointsWrappedContainer {
                let sendDataPointsContainer = try sendDataPointsWrappedContainer.decodeIfPresent([SesClientTypes.SendDataPoint].self, forKey: .member)
                var sendDataPointsBuffer:[SesClientTypes.SendDataPoint]? = nil
                if let sendDataPointsContainer = sendDataPointsContainer {
                    sendDataPointsBuffer = [SesClientTypes.SendDataPoint]()
                    for structureContainer0 in sendDataPointsContainer {
                        sendDataPointsBuffer?.append(structureContainer0)
                    }
                }
                sendDataPoints = sendDataPointsBuffer
            } else {
                sendDataPoints = []
            }
        } else {
            sendDataPoints = nil
        }
    }
}
