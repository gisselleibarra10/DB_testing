// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeConfigurationSetOutputResponseBody: Swift.Equatable {
    let configurationSet: SesClientTypes.ConfigurationSet?
    let eventDestinations: [SesClientTypes.EventDestination]?
    let trackingOptions: SesClientTypes.TrackingOptions?
    let deliveryOptions: SesClientTypes.DeliveryOptions?
    let reputationOptions: SesClientTypes.ReputationOptions?
}

extension DescribeConfigurationSetOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configurationSet = "ConfigurationSet"
        case deliveryOptions = "DeliveryOptions"
        case eventDestinations = "EventDestinations"
        case reputationOptions = "ReputationOptions"
        case trackingOptions = "TrackingOptions"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeConfigurationSetResult"))
        let configurationSetDecoded = try containerValues.decodeIfPresent(SesClientTypes.ConfigurationSet.self, forKey: .configurationSet)
        configurationSet = configurationSetDecoded
        if containerValues.contains(.eventDestinations) {
            struct KeyVal0{struct member{}}
            let eventDestinationsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .eventDestinations)
            if let eventDestinationsWrappedContainer = eventDestinationsWrappedContainer {
                let eventDestinationsContainer = try eventDestinationsWrappedContainer.decodeIfPresent([SesClientTypes.EventDestination].self, forKey: .member)
                var eventDestinationsBuffer:[SesClientTypes.EventDestination]? = nil
                if let eventDestinationsContainer = eventDestinationsContainer {
                    eventDestinationsBuffer = [SesClientTypes.EventDestination]()
                    for structureContainer0 in eventDestinationsContainer {
                        eventDestinationsBuffer?.append(structureContainer0)
                    }
                }
                eventDestinations = eventDestinationsBuffer
            } else {
                eventDestinations = []
            }
        } else {
            eventDestinations = nil
        }
        let trackingOptionsDecoded = try containerValues.decodeIfPresent(SesClientTypes.TrackingOptions.self, forKey: .trackingOptions)
        trackingOptions = trackingOptionsDecoded
        let deliveryOptionsDecoded = try containerValues.decodeIfPresent(SesClientTypes.DeliveryOptions.self, forKey: .deliveryOptions)
        deliveryOptions = deliveryOptionsDecoded
        let reputationOptionsDecoded = try containerValues.decodeIfPresent(SesClientTypes.ReputationOptions.self, forKey: .reputationOptions)
        reputationOptions = reputationOptionsDecoded
    }
}
