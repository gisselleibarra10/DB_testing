// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListTemplatesOutputResponseBody: Swift.Equatable {
    let templatesMetadata: [SesClientTypes.TemplateMetadata]?
    let nextToken: Swift.String?
}

extension ListTemplatesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case templatesMetadata = "TemplatesMetadata"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("ListTemplatesResult"))
        if containerValues.contains(.templatesMetadata) {
            struct KeyVal0{struct member{}}
            let templatesMetadataWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .templatesMetadata)
            if let templatesMetadataWrappedContainer = templatesMetadataWrappedContainer {
                let templatesMetadataContainer = try templatesMetadataWrappedContainer.decodeIfPresent([SesClientTypes.TemplateMetadata].self, forKey: .member)
                var templatesMetadataBuffer:[SesClientTypes.TemplateMetadata]? = nil
                if let templatesMetadataContainer = templatesMetadataContainer {
                    templatesMetadataBuffer = [SesClientTypes.TemplateMetadata]()
                    for structureContainer0 in templatesMetadataContainer {
                        templatesMetadataBuffer?.append(structureContainer0)
                    }
                }
                templatesMetadata = templatesMetadataBuffer
            } else {
                templatesMetadata = []
            }
        } else {
            templatesMetadata = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
