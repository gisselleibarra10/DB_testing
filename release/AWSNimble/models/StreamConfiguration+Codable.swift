// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension NimbleClientTypes.StreamConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clipboardMode
        case ec2InstanceTypes
        case maxSessionLengthInMinutes
        case maxStoppedSessionLengthInMinutes
        case sessionStorage
        case streamingImageIds
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clipboardMode = self.clipboardMode {
            try encodeContainer.encode(clipboardMode.rawValue, forKey: .clipboardMode)
        }
        if let ec2InstanceTypes = ec2InstanceTypes {
            var ec2InstanceTypesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .ec2InstanceTypes)
            for streaminginstancetypelist0 in ec2InstanceTypes {
                try ec2InstanceTypesContainer.encode(streaminginstancetypelist0.rawValue)
            }
        }
        if let maxSessionLengthInMinutes = self.maxSessionLengthInMinutes {
            try encodeContainer.encode(maxSessionLengthInMinutes, forKey: .maxSessionLengthInMinutes)
        }
        if let maxStoppedSessionLengthInMinutes = self.maxStoppedSessionLengthInMinutes {
            try encodeContainer.encode(maxStoppedSessionLengthInMinutes, forKey: .maxStoppedSessionLengthInMinutes)
        }
        if let sessionStorage = self.sessionStorage {
            try encodeContainer.encode(sessionStorage, forKey: .sessionStorage)
        }
        if let streamingImageIds = streamingImageIds {
            var streamingImageIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .streamingImageIds)
            for streamingimageidlist0 in streamingImageIds {
                try streamingImageIdsContainer.encode(streamingimageidlist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clipboardModeDecoded = try containerValues.decodeIfPresent(NimbleClientTypes.StreamingClipboardMode.self, forKey: .clipboardMode)
        clipboardMode = clipboardModeDecoded
        let ec2InstanceTypesContainer = try containerValues.decodeIfPresent([NimbleClientTypes.StreamingInstanceType?].self, forKey: .ec2InstanceTypes)
        var ec2InstanceTypesDecoded0:[NimbleClientTypes.StreamingInstanceType]? = nil
        if let ec2InstanceTypesContainer = ec2InstanceTypesContainer {
            ec2InstanceTypesDecoded0 = [NimbleClientTypes.StreamingInstanceType]()
            for string0 in ec2InstanceTypesContainer {
                if let string0 = string0 {
                    ec2InstanceTypesDecoded0?.append(string0)
                }
            }
        }
        ec2InstanceTypes = ec2InstanceTypesDecoded0
        let maxSessionLengthInMinutesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxSessionLengthInMinutes)
        maxSessionLengthInMinutes = maxSessionLengthInMinutesDecoded
        let streamingImageIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .streamingImageIds)
        var streamingImageIdsDecoded0:[Swift.String]? = nil
        if let streamingImageIdsContainer = streamingImageIdsContainer {
            streamingImageIdsDecoded0 = [Swift.String]()
            for string0 in streamingImageIdsContainer {
                if let string0 = string0 {
                    streamingImageIdsDecoded0?.append(string0)
                }
            }
        }
        streamingImageIds = streamingImageIdsDecoded0
        let maxStoppedSessionLengthInMinutesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxStoppedSessionLengthInMinutes)
        maxStoppedSessionLengthInMinutes = maxStoppedSessionLengthInMinutesDecoded
        let sessionStorageDecoded = try containerValues.decodeIfPresent(NimbleClientTypes.StreamConfigurationSessionStorage.self, forKey: .sessionStorage)
        sessionStorage = sessionStorageDecoded
    }
}
