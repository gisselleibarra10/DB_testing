// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension NimbleClientTypes.StreamConfigurationSessionStorage: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case mode
        case root
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let mode = mode {
            var modeContainer = encodeContainer.nestedUnkeyedContainer(forKey: .mode)
            for streamingsessionstoragemodelist0 in mode {
                try modeContainer.encode(streamingsessionstoragemodelist0.rawValue)
            }
        }
        if let root = self.root {
            try encodeContainer.encode(root, forKey: .root)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let rootDecoded = try containerValues.decodeIfPresent(NimbleClientTypes.StreamingSessionStorageRoot.self, forKey: .root)
        root = rootDecoded
        let modeContainer = try containerValues.decodeIfPresent([NimbleClientTypes.StreamingSessionStorageMode?].self, forKey: .mode)
        var modeDecoded0:[NimbleClientTypes.StreamingSessionStorageMode]? = nil
        if let modeContainer = modeContainer {
            modeDecoded0 = [NimbleClientTypes.StreamingSessionStorageMode]()
            for string0 in modeContainer {
                if let string0 = string0 {
                    modeDecoded0?.append(string0)
                }
            }
        }
        mode = modeDecoded0
    }
}
