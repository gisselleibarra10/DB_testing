// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension NimbleClientTypes.StudioComponentConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case activedirectoryconfiguration = "activeDirectoryConfiguration"
        case computefarmconfiguration = "computeFarmConfiguration"
        case licenseserviceconfiguration = "licenseServiceConfiguration"
        case sdkUnknown
        case sharedfilesystemconfiguration = "sharedFileSystemConfiguration"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        switch self {
            case let .activedirectoryconfiguration(activedirectoryconfiguration):
                try container.encode(activedirectoryconfiguration, forKey: .activedirectoryconfiguration)
            case let .computefarmconfiguration(computefarmconfiguration):
                try container.encode(computefarmconfiguration, forKey: .computefarmconfiguration)
            case let .licenseserviceconfiguration(licenseserviceconfiguration):
                try container.encode(licenseserviceconfiguration, forKey: .licenseserviceconfiguration)
            case let .sharedfilesystemconfiguration(sharedfilesystemconfiguration):
                try container.encode(sharedfilesystemconfiguration, forKey: .sharedfilesystemconfiguration)
            case let .sdkUnknown(sdkUnknown):
                try container.encode(sdkUnknown, forKey: .sdkUnknown)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let values = try decoder.container(keyedBy: CodingKeys.self)
        let activedirectoryconfigurationDecoded = try values.decodeIfPresent(NimbleClientTypes.ActiveDirectoryConfiguration.self, forKey: .activedirectoryconfiguration)
        if let activedirectoryconfiguration = activedirectoryconfigurationDecoded {
            self = .activedirectoryconfiguration(activedirectoryconfiguration)
            return
        }
        let computefarmconfigurationDecoded = try values.decodeIfPresent(NimbleClientTypes.ComputeFarmConfiguration.self, forKey: .computefarmconfiguration)
        if let computefarmconfiguration = computefarmconfigurationDecoded {
            self = .computefarmconfiguration(computefarmconfiguration)
            return
        }
        let licenseserviceconfigurationDecoded = try values.decodeIfPresent(NimbleClientTypes.LicenseServiceConfiguration.self, forKey: .licenseserviceconfiguration)
        if let licenseserviceconfiguration = licenseserviceconfigurationDecoded {
            self = .licenseserviceconfiguration(licenseserviceconfiguration)
            return
        }
        let sharedfilesystemconfigurationDecoded = try values.decodeIfPresent(NimbleClientTypes.SharedFileSystemConfiguration.self, forKey: .sharedfilesystemconfiguration)
        if let sharedfilesystemconfiguration = sharedfilesystemconfigurationDecoded {
            self = .sharedfilesystemconfiguration(sharedfilesystemconfiguration)
            return
        }
        self = .sdkUnknown("")
    }
}
