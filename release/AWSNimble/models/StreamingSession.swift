// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension NimbleClientTypes {
    /// A streaming session is a virtual workstation created using a particular launch profile.
    public struct StreamingSession: Swift.Equatable {
        /// The ARN of the resource.
        public var arn: Swift.String?
        /// The Unix epoch timestamp in seconds for when the resource was created.
        public var createdAt: ClientRuntime.Date?
        /// The user ID of the user that created the streaming session.
        public var createdBy: Swift.String?
        /// The EC2 Instance type used for the streaming session.
        public var ec2InstanceType: Swift.String?
        /// The ID of the launch profile used to control access from the streaming session.
        public var launchProfileId: Swift.String?
        /// The user ID of the user that owns the streaming session. The user that owns the session will be logging into the session and interacting with the virtual workstation.
        public var ownedBy: Swift.String?
        /// The session ID.
        public var sessionId: Swift.String?
        /// The time the session entered START_IN_PROGRESS state.
        public var startedAt: ClientRuntime.Date?
        /// The user ID of the user that started the streaming session.
        public var startedBy: Swift.String?
        /// The current state.
        public var state: NimbleClientTypes.StreamingSessionState?
        /// The status code.
        public var statusCode: NimbleClientTypes.StreamingSessionStatusCode?
        /// The status message for the streaming session.
        public var statusMessage: Swift.String?
        /// The time the streaming session will automatically be stopped if the user doesnâ€™t stop the session themselves.
        public var stopAt: ClientRuntime.Date?
        /// The time the session entered STOP_IN_PROGRESS state.
        public var stoppedAt: ClientRuntime.Date?
        /// The user ID of the user that stopped the streaming session.
        public var stoppedBy: Swift.String?
        /// The ID of the streaming image.
        public var streamingImageId: Swift.String?
        /// A collection of labels, in the form of key:value pairs, that apply to this resource.
        public var tags: [Swift.String:Swift.String]?
        /// The time the streaming session will automatically terminate if not terminated by the user.
        public var terminateAt: ClientRuntime.Date?
        /// The Unix epoch timestamp in seconds for when the resource was updated.
        public var updatedAt: ClientRuntime.Date?
        /// The user ID of the user that most recently updated the resource.
        public var updatedBy: Swift.String?

        public init (
            arn: Swift.String? = nil,
            createdAt: ClientRuntime.Date? = nil,
            createdBy: Swift.String? = nil,
            ec2InstanceType: Swift.String? = nil,
            launchProfileId: Swift.String? = nil,
            ownedBy: Swift.String? = nil,
            sessionId: Swift.String? = nil,
            startedAt: ClientRuntime.Date? = nil,
            startedBy: Swift.String? = nil,
            state: NimbleClientTypes.StreamingSessionState? = nil,
            statusCode: NimbleClientTypes.StreamingSessionStatusCode? = nil,
            statusMessage: Swift.String? = nil,
            stopAt: ClientRuntime.Date? = nil,
            stoppedAt: ClientRuntime.Date? = nil,
            stoppedBy: Swift.String? = nil,
            streamingImageId: Swift.String? = nil,
            tags: [Swift.String:Swift.String]? = nil,
            terminateAt: ClientRuntime.Date? = nil,
            updatedAt: ClientRuntime.Date? = nil,
            updatedBy: Swift.String? = nil
        )
        {
            self.arn = arn
            self.createdAt = createdAt
            self.createdBy = createdBy
            self.ec2InstanceType = ec2InstanceType
            self.launchProfileId = launchProfileId
            self.ownedBy = ownedBy
            self.sessionId = sessionId
            self.startedAt = startedAt
            self.startedBy = startedBy
            self.state = state
            self.statusCode = statusCode
            self.statusMessage = statusMessage
            self.stopAt = stopAt
            self.stoppedAt = stoppedAt
            self.stoppedBy = stoppedBy
            self.streamingImageId = streamingImageId
            self.tags = tags
            self.terminateAt = terminateAt
            self.updatedAt = updatedAt
            self.updatedBy = updatedBy
        }
    }

}
