// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateMeetingInputBody: Swift.Equatable {
    let clientRequestToken: Swift.String?
    let mediaRegion: Swift.String?
    let meetingHostId: Swift.String?
    let externalMeetingId: Swift.String?
    let notificationsConfiguration: ChimeSdkMeetingsClientTypes.NotificationsConfiguration?
    let meetingFeatures: ChimeSdkMeetingsClientTypes.MeetingFeaturesConfiguration?
    let primaryMeetingId: Swift.String?
    let tenantIds: [Swift.String]?
    let tags: [ChimeSdkMeetingsClientTypes.Tag]?
}

extension CreateMeetingInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientRequestToken = "ClientRequestToken"
        case externalMeetingId = "ExternalMeetingId"
        case mediaRegion = "MediaRegion"
        case meetingFeatures = "MeetingFeatures"
        case meetingHostId = "MeetingHostId"
        case notificationsConfiguration = "NotificationsConfiguration"
        case primaryMeetingId = "PrimaryMeetingId"
        case tags = "Tags"
        case tenantIds = "TenantIds"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clientRequestTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientRequestToken)
        clientRequestToken = clientRequestTokenDecoded
        let mediaRegionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .mediaRegion)
        mediaRegion = mediaRegionDecoded
        let meetingHostIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .meetingHostId)
        meetingHostId = meetingHostIdDecoded
        let externalMeetingIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .externalMeetingId)
        externalMeetingId = externalMeetingIdDecoded
        let notificationsConfigurationDecoded = try containerValues.decodeIfPresent(ChimeSdkMeetingsClientTypes.NotificationsConfiguration.self, forKey: .notificationsConfiguration)
        notificationsConfiguration = notificationsConfigurationDecoded
        let meetingFeaturesDecoded = try containerValues.decodeIfPresent(ChimeSdkMeetingsClientTypes.MeetingFeaturesConfiguration.self, forKey: .meetingFeatures)
        meetingFeatures = meetingFeaturesDecoded
        let primaryMeetingIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .primaryMeetingId)
        primaryMeetingId = primaryMeetingIdDecoded
        let tenantIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .tenantIds)
        var tenantIdsDecoded0:[Swift.String]? = nil
        if let tenantIdsContainer = tenantIdsContainer {
            tenantIdsDecoded0 = [Swift.String]()
            for string0 in tenantIdsContainer {
                if let string0 = string0 {
                    tenantIdsDecoded0?.append(string0)
                }
            }
        }
        tenantIds = tenantIdsDecoded0
        let tagsContainer = try containerValues.decodeIfPresent([ChimeSdkMeetingsClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[ChimeSdkMeetingsClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [ChimeSdkMeetingsClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}
