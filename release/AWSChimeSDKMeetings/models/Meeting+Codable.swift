// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ChimeSdkMeetingsClientTypes.Meeting: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case externalMeetingId = "ExternalMeetingId"
        case mediaPlacement = "MediaPlacement"
        case mediaRegion = "MediaRegion"
        case meetingArn = "MeetingArn"
        case meetingFeatures = "MeetingFeatures"
        case meetingHostId = "MeetingHostId"
        case meetingId = "MeetingId"
        case primaryMeetingId = "PrimaryMeetingId"
        case tenantIds = "TenantIds"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let externalMeetingId = self.externalMeetingId {
            try encodeContainer.encode(externalMeetingId, forKey: .externalMeetingId)
        }
        if let mediaPlacement = self.mediaPlacement {
            try encodeContainer.encode(mediaPlacement, forKey: .mediaPlacement)
        }
        if let mediaRegion = self.mediaRegion {
            try encodeContainer.encode(mediaRegion, forKey: .mediaRegion)
        }
        if let meetingArn = self.meetingArn {
            try encodeContainer.encode(meetingArn, forKey: .meetingArn)
        }
        if let meetingFeatures = self.meetingFeatures {
            try encodeContainer.encode(meetingFeatures, forKey: .meetingFeatures)
        }
        if let meetingHostId = self.meetingHostId {
            try encodeContainer.encode(meetingHostId, forKey: .meetingHostId)
        }
        if let meetingId = self.meetingId {
            try encodeContainer.encode(meetingId, forKey: .meetingId)
        }
        if let primaryMeetingId = self.primaryMeetingId {
            try encodeContainer.encode(primaryMeetingId, forKey: .primaryMeetingId)
        }
        if let tenantIds = tenantIds {
            var tenantIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tenantIds)
            for tenantidlist0 in tenantIds {
                try tenantIdsContainer.encode(tenantidlist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let meetingIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .meetingId)
        meetingId = meetingIdDecoded
        let meetingHostIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .meetingHostId)
        meetingHostId = meetingHostIdDecoded
        let externalMeetingIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .externalMeetingId)
        externalMeetingId = externalMeetingIdDecoded
        let mediaRegionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .mediaRegion)
        mediaRegion = mediaRegionDecoded
        let mediaPlacementDecoded = try containerValues.decodeIfPresent(ChimeSdkMeetingsClientTypes.MediaPlacement.self, forKey: .mediaPlacement)
        mediaPlacement = mediaPlacementDecoded
        let meetingFeaturesDecoded = try containerValues.decodeIfPresent(ChimeSdkMeetingsClientTypes.MeetingFeaturesConfiguration.self, forKey: .meetingFeatures)
        meetingFeatures = meetingFeaturesDecoded
        let primaryMeetingIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .primaryMeetingId)
        primaryMeetingId = primaryMeetingIdDecoded
        let tenantIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .tenantIds)
        var tenantIdsDecoded0:[Swift.String]? = nil
        if let tenantIdsContainer = tenantIdsContainer {
            tenantIdsDecoded0 = [Swift.String]()
            for string0 in tenantIdsContainer {
                if let string0 = string0 {
                    tenantIdsDecoded0?.append(string0)
                }
            }
        }
        tenantIds = tenantIdsDecoded0
        let meetingArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .meetingArn)
        meetingArn = meetingArnDecoded
    }
}
