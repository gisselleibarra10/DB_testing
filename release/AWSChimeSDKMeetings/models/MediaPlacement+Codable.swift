// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ChimeSdkMeetingsClientTypes.MediaPlacement: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case audioFallbackUrl = "AudioFallbackUrl"
        case audioHostUrl = "AudioHostUrl"
        case eventIngestionUrl = "EventIngestionUrl"
        case screenDataUrl = "ScreenDataUrl"
        case screenSharingUrl = "ScreenSharingUrl"
        case screenViewingUrl = "ScreenViewingUrl"
        case signalingUrl = "SignalingUrl"
        case turnControlUrl = "TurnControlUrl"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let audioFallbackUrl = self.audioFallbackUrl {
            try encodeContainer.encode(audioFallbackUrl, forKey: .audioFallbackUrl)
        }
        if let audioHostUrl = self.audioHostUrl {
            try encodeContainer.encode(audioHostUrl, forKey: .audioHostUrl)
        }
        if let eventIngestionUrl = self.eventIngestionUrl {
            try encodeContainer.encode(eventIngestionUrl, forKey: .eventIngestionUrl)
        }
        if let screenDataUrl = self.screenDataUrl {
            try encodeContainer.encode(screenDataUrl, forKey: .screenDataUrl)
        }
        if let screenSharingUrl = self.screenSharingUrl {
            try encodeContainer.encode(screenSharingUrl, forKey: .screenSharingUrl)
        }
        if let screenViewingUrl = self.screenViewingUrl {
            try encodeContainer.encode(screenViewingUrl, forKey: .screenViewingUrl)
        }
        if let signalingUrl = self.signalingUrl {
            try encodeContainer.encode(signalingUrl, forKey: .signalingUrl)
        }
        if let turnControlUrl = self.turnControlUrl {
            try encodeContainer.encode(turnControlUrl, forKey: .turnControlUrl)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let audioHostUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .audioHostUrl)
        audioHostUrl = audioHostUrlDecoded
        let audioFallbackUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .audioFallbackUrl)
        audioFallbackUrl = audioFallbackUrlDecoded
        let signalingUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .signalingUrl)
        signalingUrl = signalingUrlDecoded
        let turnControlUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .turnControlUrl)
        turnControlUrl = turnControlUrlDecoded
        let screenDataUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .screenDataUrl)
        screenDataUrl = screenDataUrlDecoded
        let screenViewingUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .screenViewingUrl)
        screenViewingUrl = screenViewingUrlDecoded
        let screenSharingUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .screenSharingUrl)
        screenSharingUrl = screenSharingUrlDecoded
        let eventIngestionUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .eventIngestionUrl)
        eventIngestionUrl = eventIngestionUrlDecoded
    }
}
