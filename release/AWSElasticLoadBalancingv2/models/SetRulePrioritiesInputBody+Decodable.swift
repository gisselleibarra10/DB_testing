// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct SetRulePrioritiesInputBody: Swift.Equatable {
    let rulePriorities: [ElasticLoadBalancingV2ClientTypes.RulePriorityPair]?
}

extension SetRulePrioritiesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case rulePriorities = "RulePriorities"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.rulePriorities) {
            struct KeyVal0{struct member{}}
            let rulePrioritiesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .rulePriorities)
            if let rulePrioritiesWrappedContainer = rulePrioritiesWrappedContainer {
                let rulePrioritiesContainer = try rulePrioritiesWrappedContainer.decodeIfPresent([ElasticLoadBalancingV2ClientTypes.RulePriorityPair].self, forKey: .member)
                var rulePrioritiesBuffer:[ElasticLoadBalancingV2ClientTypes.RulePriorityPair]? = nil
                if let rulePrioritiesContainer = rulePrioritiesContainer {
                    rulePrioritiesBuffer = [ElasticLoadBalancingV2ClientTypes.RulePriorityPair]()
                    for structureContainer0 in rulePrioritiesContainer {
                        rulePrioritiesBuffer?.append(structureContainer0)
                    }
                }
                rulePriorities = rulePrioritiesBuffer
            } else {
                rulePriorities = []
            }
        } else {
            rulePriorities = nil
        }
    }
}
