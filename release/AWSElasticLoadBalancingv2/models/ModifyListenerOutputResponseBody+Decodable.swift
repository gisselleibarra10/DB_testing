// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ModifyListenerOutputResponseBody: Swift.Equatable {
    let listeners: [ElasticLoadBalancingV2ClientTypes.Listener]?
}

extension ModifyListenerOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case listeners = "Listeners"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("ModifyListenerResult"))
        if containerValues.contains(.listeners) {
            struct KeyVal0{struct member{}}
            let listenersWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .listeners)
            if let listenersWrappedContainer = listenersWrappedContainer {
                let listenersContainer = try listenersWrappedContainer.decodeIfPresent([ElasticLoadBalancingV2ClientTypes.Listener].self, forKey: .member)
                var listenersBuffer:[ElasticLoadBalancingV2ClientTypes.Listener]? = nil
                if let listenersContainer = listenersContainer {
                    listenersBuffer = [ElasticLoadBalancingV2ClientTypes.Listener]()
                    for structureContainer0 in listenersContainer {
                        listenersBuffer?.append(structureContainer0)
                    }
                }
                listeners = listenersBuffer
            } else {
                listeners = []
            }
        } else {
            listeners = nil
        }
    }
}
