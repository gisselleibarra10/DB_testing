// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension ElasticLoadBalancingV2ClientTypes {
    /// Information about a target group.
    public struct TargetGroup: Swift.Equatable {
        /// Indicates whether health checks are enabled.
        public var healthCheckEnabled: Swift.Bool?
        /// The approximate amount of time, in seconds, between health checks of an individual target.
        public var healthCheckIntervalSeconds: Swift.Int?
        /// The destination for health checks on the targets.
        public var healthCheckPath: Swift.String?
        /// The port to use to connect with the target.
        public var healthCheckPort: Swift.String?
        /// The protocol to use to connect with the target. The GENEVE, TLS, UDP, and TCP_UDP protocols are not supported for health checks.
        public var healthCheckProtocol: ElasticLoadBalancingV2ClientTypes.ProtocolEnum?
        /// The amount of time, in seconds, during which no response means a failed health check.
        public var healthCheckTimeoutSeconds: Swift.Int?
        /// The number of consecutive health checks successes required before considering an unhealthy target healthy.
        public var healthyThresholdCount: Swift.Int?
        /// The type of IP address used for this target group. The possible values are ipv4 and ipv6. This is an optional parameter. If not specified, the IP address type defaults to ipv4.
        public var ipAddressType: ElasticLoadBalancingV2ClientTypes.TargetGroupIpAddressTypeEnum?
        /// The Amazon Resource Names (ARN) of the load balancers that route traffic to this target group.
        public var loadBalancerArns: [Swift.String]?
        /// The HTTP or gRPC codes to use when checking for a successful response from a target.
        public var matcher: ElasticLoadBalancingV2ClientTypes.Matcher?
        /// The port on which the targets are listening. Not used if the target is a Lambda function.
        public var port: Swift.Int?
        /// The protocol to use for routing traffic to the targets.
        public var `protocol`: ElasticLoadBalancingV2ClientTypes.ProtocolEnum?
        /// [HTTP/HTTPS protocol] The protocol version. The possible values are GRPC, HTTP1, and HTTP2.
        public var protocolVersion: Swift.String?
        /// The Amazon Resource Name (ARN) of the target group.
        public var targetGroupArn: Swift.String?
        /// The name of the target group.
        public var targetGroupName: Swift.String?
        /// The type of target that you must specify when registering targets with this target group. The possible values are instance (register targets by instance ID), ip (register targets by IP address), lambda (register a single Lambda function as a target), or alb (register a single Application Load Balancer as a target).
        public var targetType: ElasticLoadBalancingV2ClientTypes.TargetTypeEnum?
        /// The number of consecutive health check failures required before considering the target unhealthy.
        public var unhealthyThresholdCount: Swift.Int?
        /// The ID of the VPC for the targets.
        public var vpcId: Swift.String?

        public init (
            healthCheckEnabled: Swift.Bool? = nil,
            healthCheckIntervalSeconds: Swift.Int? = nil,
            healthCheckPath: Swift.String? = nil,
            healthCheckPort: Swift.String? = nil,
            healthCheckProtocol: ElasticLoadBalancingV2ClientTypes.ProtocolEnum? = nil,
            healthCheckTimeoutSeconds: Swift.Int? = nil,
            healthyThresholdCount: Swift.Int? = nil,
            ipAddressType: ElasticLoadBalancingV2ClientTypes.TargetGroupIpAddressTypeEnum? = nil,
            loadBalancerArns: [Swift.String]? = nil,
            matcher: ElasticLoadBalancingV2ClientTypes.Matcher? = nil,
            port: Swift.Int? = nil,
            `protocol`: ElasticLoadBalancingV2ClientTypes.ProtocolEnum? = nil,
            protocolVersion: Swift.String? = nil,
            targetGroupArn: Swift.String? = nil,
            targetGroupName: Swift.String? = nil,
            targetType: ElasticLoadBalancingV2ClientTypes.TargetTypeEnum? = nil,
            unhealthyThresholdCount: Swift.Int? = nil,
            vpcId: Swift.String? = nil
        )
        {
            self.healthCheckEnabled = healthCheckEnabled
            self.healthCheckIntervalSeconds = healthCheckIntervalSeconds
            self.healthCheckPath = healthCheckPath
            self.healthCheckPort = healthCheckPort
            self.healthCheckProtocol = healthCheckProtocol
            self.healthCheckTimeoutSeconds = healthCheckTimeoutSeconds
            self.healthyThresholdCount = healthyThresholdCount
            self.ipAddressType = ipAddressType
            self.loadBalancerArns = loadBalancerArns
            self.matcher = matcher
            self.port = port
            self.`protocol` = `protocol`
            self.protocolVersion = protocolVersion
            self.targetGroupArn = targetGroupArn
            self.targetGroupName = targetGroupName
            self.targetType = targetType
            self.unhealthyThresholdCount = unhealthyThresholdCount
            self.vpcId = vpcId
        }
    }

}
