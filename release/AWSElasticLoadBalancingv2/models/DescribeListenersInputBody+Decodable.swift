// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeListenersInputBody: Swift.Equatable {
    let loadBalancerArn: Swift.String?
    let listenerArns: [Swift.String]?
    let marker: Swift.String?
    let pageSize: Swift.Int?
}

extension DescribeListenersInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case listenerArns = "ListenerArns"
        case loadBalancerArn = "LoadBalancerArn"
        case marker = "Marker"
        case pageSize = "PageSize"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let loadBalancerArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .loadBalancerArn)
        loadBalancerArn = loadBalancerArnDecoded
        if containerValues.contains(.listenerArns) {
            struct KeyVal0{struct member{}}
            let listenerArnsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .listenerArns)
            if let listenerArnsWrappedContainer = listenerArnsWrappedContainer {
                let listenerArnsContainer = try listenerArnsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var listenerArnsBuffer:[Swift.String]? = nil
                if let listenerArnsContainer = listenerArnsContainer {
                    listenerArnsBuffer = [Swift.String]()
                    for stringContainer0 in listenerArnsContainer {
                        listenerArnsBuffer?.append(stringContainer0)
                    }
                }
                listenerArns = listenerArnsBuffer
            } else {
                listenerArns = []
            }
        } else {
            listenerArns = nil
        }
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
        let pageSizeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .pageSize)
        pageSize = pageSizeDecoded
    }
}
