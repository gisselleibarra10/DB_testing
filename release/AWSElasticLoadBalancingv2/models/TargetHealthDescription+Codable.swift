// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ElasticLoadBalancingV2ClientTypes.TargetHealthDescription: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case healthCheckPort = "HealthCheckPort"
        case target = "Target"
        case targetHealth = "TargetHealth"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let healthCheckPort = healthCheckPort {
            try container.encode(healthCheckPort, forKey: ClientRuntime.Key("HealthCheckPort"))
        }
        if let target = target {
            try container.encode(target, forKey: ClientRuntime.Key("Target"))
        }
        if let targetHealth = targetHealth {
            try container.encode(targetHealth, forKey: ClientRuntime.Key("TargetHealth"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let targetDecoded = try containerValues.decodeIfPresent(ElasticLoadBalancingV2ClientTypes.TargetDescription.self, forKey: .target)
        target = targetDecoded
        let healthCheckPortDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .healthCheckPort)
        healthCheckPort = healthCheckPortDecoded
        let targetHealthDecoded = try containerValues.decodeIfPresent(ElasticLoadBalancingV2ClientTypes.TargetHealth.self, forKey: .targetHealth)
        targetHealth = targetHealthDecoded
    }
}
