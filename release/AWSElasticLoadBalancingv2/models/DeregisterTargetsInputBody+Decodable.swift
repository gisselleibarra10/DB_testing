// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DeregisterTargetsInputBody: Swift.Equatable {
    let targetGroupArn: Swift.String?
    let targets: [ElasticLoadBalancingV2ClientTypes.TargetDescription]?
}

extension DeregisterTargetsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case targetGroupArn = "TargetGroupArn"
        case targets = "Targets"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let targetGroupArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .targetGroupArn)
        targetGroupArn = targetGroupArnDecoded
        if containerValues.contains(.targets) {
            struct KeyVal0{struct member{}}
            let targetsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .targets)
            if let targetsWrappedContainer = targetsWrappedContainer {
                let targetsContainer = try targetsWrappedContainer.decodeIfPresent([ElasticLoadBalancingV2ClientTypes.TargetDescription].self, forKey: .member)
                var targetsBuffer:[ElasticLoadBalancingV2ClientTypes.TargetDescription]? = nil
                if let targetsContainer = targetsContainer {
                    targetsBuffer = [ElasticLoadBalancingV2ClientTypes.TargetDescription]()
                    for structureContainer0 in targetsContainer {
                        targetsBuffer?.append(structureContainer0)
                    }
                }
                targets = targetsBuffer
            } else {
                targets = []
            }
        } else {
            targets = nil
        }
    }
}
