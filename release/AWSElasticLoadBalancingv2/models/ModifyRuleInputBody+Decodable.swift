// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ModifyRuleInputBody: Swift.Equatable {
    let ruleArn: Swift.String?
    let conditions: [ElasticLoadBalancingV2ClientTypes.RuleCondition]?
    let actions: [ElasticLoadBalancingV2ClientTypes.Action]?
}

extension ModifyRuleInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case actions = "Actions"
        case conditions = "Conditions"
        case ruleArn = "RuleArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ruleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ruleArn)
        ruleArn = ruleArnDecoded
        if containerValues.contains(.conditions) {
            struct KeyVal0{struct member{}}
            let conditionsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .conditions)
            if let conditionsWrappedContainer = conditionsWrappedContainer {
                let conditionsContainer = try conditionsWrappedContainer.decodeIfPresent([ElasticLoadBalancingV2ClientTypes.RuleCondition].self, forKey: .member)
                var conditionsBuffer:[ElasticLoadBalancingV2ClientTypes.RuleCondition]? = nil
                if let conditionsContainer = conditionsContainer {
                    conditionsBuffer = [ElasticLoadBalancingV2ClientTypes.RuleCondition]()
                    for structureContainer0 in conditionsContainer {
                        conditionsBuffer?.append(structureContainer0)
                    }
                }
                conditions = conditionsBuffer
            } else {
                conditions = []
            }
        } else {
            conditions = nil
        }
        if containerValues.contains(.actions) {
            struct KeyVal0{struct member{}}
            let actionsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .actions)
            if let actionsWrappedContainer = actionsWrappedContainer {
                let actionsContainer = try actionsWrappedContainer.decodeIfPresent([ElasticLoadBalancingV2ClientTypes.Action].self, forKey: .member)
                var actionsBuffer:[ElasticLoadBalancingV2ClientTypes.Action]? = nil
                if let actionsContainer = actionsContainer {
                    actionsBuffer = [ElasticLoadBalancingV2ClientTypes.Action]()
                    for structureContainer0 in actionsContainer {
                        actionsBuffer?.append(structureContainer0)
                    }
                }
                actions = actionsBuffer
            } else {
                actions = []
            }
        } else {
            actions = nil
        }
    }
}
