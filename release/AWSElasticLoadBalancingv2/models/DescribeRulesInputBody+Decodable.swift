// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeRulesInputBody: Swift.Equatable {
    let listenerArn: Swift.String?
    let ruleArns: [Swift.String]?
    let marker: Swift.String?
    let pageSize: Swift.Int?
}

extension DescribeRulesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case listenerArn = "ListenerArn"
        case marker = "Marker"
        case pageSize = "PageSize"
        case ruleArns = "RuleArns"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let listenerArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .listenerArn)
        listenerArn = listenerArnDecoded
        if containerValues.contains(.ruleArns) {
            struct KeyVal0{struct member{}}
            let ruleArnsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .ruleArns)
            if let ruleArnsWrappedContainer = ruleArnsWrappedContainer {
                let ruleArnsContainer = try ruleArnsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var ruleArnsBuffer:[Swift.String]? = nil
                if let ruleArnsContainer = ruleArnsContainer {
                    ruleArnsBuffer = [Swift.String]()
                    for stringContainer0 in ruleArnsContainer {
                        ruleArnsBuffer?.append(stringContainer0)
                    }
                }
                ruleArns = ruleArnsBuffer
            } else {
                ruleArns = []
            }
        } else {
            ruleArns = nil
        }
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
        let pageSizeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .pageSize)
        pageSize = pageSizeDecoded
    }
}
