// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ElasticLoadBalancingV2ClientTypes.AuthenticateOidcActionConfig: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case authenticationRequestExtraParams = "AuthenticationRequestExtraParams"
        case authorizationEndpoint = "AuthorizationEndpoint"
        case clientId = "ClientId"
        case clientSecret = "ClientSecret"
        case issuer = "Issuer"
        case onUnauthenticatedRequest = "OnUnauthenticatedRequest"
        case scope = "Scope"
        case sessionCookieName = "SessionCookieName"
        case sessionTimeout = "SessionTimeout"
        case tokenEndpoint = "TokenEndpoint"
        case useExistingClientSecret = "UseExistingClientSecret"
        case userInfoEndpoint = "UserInfoEndpoint"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let authenticationRequestExtraParams = authenticationRequestExtraParams {
            var authenticationRequestExtraParamsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AuthenticationRequestExtraParams"))
            for (index0, element0) in authenticationRequestExtraParams.sorted(by: { $0.key < $1.key }).enumerated() {
                let authenticateoidcactionauthenticationrequestparamnameKey0 = element0.key
                let authenticateoidcactionauthenticationrequestparamvalueValue0 = element0.value
                var entryContainer0 = authenticationRequestExtraParamsContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("entry.\(index0.advanced(by: 1))"))
                var keyContainer0 = entryContainer0.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("key"))
                try keyContainer0.encode(authenticateoidcactionauthenticationrequestparamnameKey0, forKey: ClientRuntime.Key(""))
                var valueContainer0 = entryContainer0.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("value"))
                try valueContainer0.encode(authenticateoidcactionauthenticationrequestparamvalueValue0, forKey: ClientRuntime.Key(""))
            }
        }
        if let authorizationEndpoint = authorizationEndpoint {
            try container.encode(authorizationEndpoint, forKey: ClientRuntime.Key("AuthorizationEndpoint"))
        }
        if let clientId = clientId {
            try container.encode(clientId, forKey: ClientRuntime.Key("ClientId"))
        }
        if let clientSecret = clientSecret {
            try container.encode(clientSecret, forKey: ClientRuntime.Key("ClientSecret"))
        }
        if let issuer = issuer {
            try container.encode(issuer, forKey: ClientRuntime.Key("Issuer"))
        }
        if let onUnauthenticatedRequest = onUnauthenticatedRequest {
            try container.encode(onUnauthenticatedRequest, forKey: ClientRuntime.Key("OnUnauthenticatedRequest"))
        }
        if let scope = scope {
            try container.encode(scope, forKey: ClientRuntime.Key("Scope"))
        }
        if let sessionCookieName = sessionCookieName {
            try container.encode(sessionCookieName, forKey: ClientRuntime.Key("SessionCookieName"))
        }
        if let sessionTimeout = sessionTimeout {
            try container.encode(sessionTimeout, forKey: ClientRuntime.Key("SessionTimeout"))
        }
        if let tokenEndpoint = tokenEndpoint {
            try container.encode(tokenEndpoint, forKey: ClientRuntime.Key("TokenEndpoint"))
        }
        if let useExistingClientSecret = useExistingClientSecret {
            try container.encode(useExistingClientSecret, forKey: ClientRuntime.Key("UseExistingClientSecret"))
        }
        if let userInfoEndpoint = userInfoEndpoint {
            try container.encode(userInfoEndpoint, forKey: ClientRuntime.Key("UserInfoEndpoint"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let issuerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .issuer)
        issuer = issuerDecoded
        let authorizationEndpointDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .authorizationEndpoint)
        authorizationEndpoint = authorizationEndpointDecoded
        let tokenEndpointDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tokenEndpoint)
        tokenEndpoint = tokenEndpointDecoded
        let userInfoEndpointDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userInfoEndpoint)
        userInfoEndpoint = userInfoEndpointDecoded
        let clientIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientId)
        clientId = clientIdDecoded
        let clientSecretDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientSecret)
        clientSecret = clientSecretDecoded
        let sessionCookieNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sessionCookieName)
        sessionCookieName = sessionCookieNameDecoded
        let scopeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .scope)
        scope = scopeDecoded
        let sessionTimeoutDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .sessionTimeout)
        sessionTimeout = sessionTimeoutDecoded
        if containerValues.contains(.authenticationRequestExtraParams) {
            struct KeyVal0{struct key{}; struct value{}}
            let authenticationRequestExtraParamsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: ClientRuntime.MapEntry<Swift.String, Swift.String, KeyVal0.key, KeyVal0.value>.CodingKeys.self, forKey: .authenticationRequestExtraParams)
            if let authenticationRequestExtraParamsWrappedContainer = authenticationRequestExtraParamsWrappedContainer {
                let authenticationRequestExtraParamsContainer = try authenticationRequestExtraParamsWrappedContainer.decodeIfPresent([ClientRuntime.MapKeyValue<Swift.String, Swift.String, KeyVal0.key, KeyVal0.value>].self, forKey: .entry)
                var authenticationRequestExtraParamsBuffer: [Swift.String:Swift.String]? = nil
                if let authenticationRequestExtraParamsContainer = authenticationRequestExtraParamsContainer {
                    authenticationRequestExtraParamsBuffer = [Swift.String:Swift.String]()
                    for stringContainer0 in authenticationRequestExtraParamsContainer {
                        authenticationRequestExtraParamsBuffer?[stringContainer0.key] = stringContainer0.value
                    }
                }
                authenticationRequestExtraParams = authenticationRequestExtraParamsBuffer
            } else {
                authenticationRequestExtraParams = [:]
            }
        } else {
            authenticationRequestExtraParams = nil
        }
        let onUnauthenticatedRequestDecoded = try containerValues.decodeIfPresent(ElasticLoadBalancingV2ClientTypes.AuthenticateOidcActionConditionalBehaviorEnum.self, forKey: .onUnauthenticatedRequest)
        onUnauthenticatedRequest = onUnauthenticatedRequestDecoded
        let useExistingClientSecretDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .useExistingClientSecret)
        useExistingClientSecret = useExistingClientSecretDecoded
    }
}
