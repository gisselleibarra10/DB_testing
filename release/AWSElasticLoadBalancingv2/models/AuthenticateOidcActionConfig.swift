// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension ElasticLoadBalancingV2ClientTypes {
    /// Request parameters when using an identity provider (IdP) that is compliant with OpenID Connect (OIDC) to authenticate users.
    public struct AuthenticateOidcActionConfig: Swift.Equatable {
        /// The query parameters (up to 10) to include in the redirect request to the authorization endpoint.
        public var authenticationRequestExtraParams: [Swift.String:Swift.String]?
        /// The authorization endpoint of the IdP. This must be a full URL, including the HTTPS protocol, the domain, and the path.
        /// This member is required.
        public var authorizationEndpoint: Swift.String?
        /// The OAuth 2.0 client identifier.
        /// This member is required.
        public var clientId: Swift.String?
        /// The OAuth 2.0 client secret. This parameter is required if you are creating a rule. If you are modifying a rule, you can omit this parameter if you set UseExistingClientSecret to true.
        public var clientSecret: Swift.String?
        /// The OIDC issuer identifier of the IdP. This must be a full URL, including the HTTPS protocol, the domain, and the path.
        /// This member is required.
        public var issuer: Swift.String?
        /// The behavior if the user is not authenticated. The following are possible values:
        ///
        /// * deny - Return an HTTP 401 Unauthorized error.
        ///
        /// * allow - Allow the request to be forwarded to the target.
        ///
        /// * authenticate - Redirect the request to the IdP authorization endpoint. This is the default value.
        public var onUnauthenticatedRequest: ElasticLoadBalancingV2ClientTypes.AuthenticateOidcActionConditionalBehaviorEnum?
        /// The set of user claims to be requested from the IdP. The default is openid. To verify which scope values your IdP supports and how to separate multiple values, see the documentation for your IdP.
        public var scope: Swift.String?
        /// The name of the cookie used to maintain session information. The default is AWSELBAuthSessionCookie.
        public var sessionCookieName: Swift.String?
        /// The maximum duration of the authentication session, in seconds. The default is 604800 seconds (7 days).
        public var sessionTimeout: Swift.Int?
        /// The token endpoint of the IdP. This must be a full URL, including the HTTPS protocol, the domain, and the path.
        /// This member is required.
        public var tokenEndpoint: Swift.String?
        /// Indicates whether to use the existing client secret when modifying a rule. If you are creating a rule, you can omit this parameter or set it to false.
        public var useExistingClientSecret: Swift.Bool?
        /// The user info endpoint of the IdP. This must be a full URL, including the HTTPS protocol, the domain, and the path.
        /// This member is required.
        public var userInfoEndpoint: Swift.String?

        public init (
            authenticationRequestExtraParams: [Swift.String:Swift.String]? = nil,
            authorizationEndpoint: Swift.String? = nil,
            clientId: Swift.String? = nil,
            clientSecret: Swift.String? = nil,
            issuer: Swift.String? = nil,
            onUnauthenticatedRequest: ElasticLoadBalancingV2ClientTypes.AuthenticateOidcActionConditionalBehaviorEnum? = nil,
            scope: Swift.String? = nil,
            sessionCookieName: Swift.String? = nil,
            sessionTimeout: Swift.Int? = nil,
            tokenEndpoint: Swift.String? = nil,
            useExistingClientSecret: Swift.Bool? = nil,
            userInfoEndpoint: Swift.String? = nil
        )
        {
            self.authenticationRequestExtraParams = authenticationRequestExtraParams
            self.authorizationEndpoint = authorizationEndpoint
            self.clientId = clientId
            self.clientSecret = clientSecret
            self.issuer = issuer
            self.onUnauthenticatedRequest = onUnauthenticatedRequest
            self.scope = scope
            self.sessionCookieName = sessionCookieName
            self.sessionTimeout = sessionTimeout
            self.tokenEndpoint = tokenEndpoint
            self.useExistingClientSecret = useExistingClientSecret
            self.userInfoEndpoint = userInfoEndpoint
        }
    }

}
