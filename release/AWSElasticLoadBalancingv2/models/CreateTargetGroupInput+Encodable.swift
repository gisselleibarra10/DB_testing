// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CreateTargetGroupInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let healthCheckEnabled = healthCheckEnabled {
            try container.encode(healthCheckEnabled, forKey: ClientRuntime.Key("HealthCheckEnabled"))
        }
        if let healthCheckIntervalSeconds = healthCheckIntervalSeconds {
            try container.encode(healthCheckIntervalSeconds, forKey: ClientRuntime.Key("HealthCheckIntervalSeconds"))
        }
        if let healthCheckPath = healthCheckPath {
            try container.encode(healthCheckPath, forKey: ClientRuntime.Key("HealthCheckPath"))
        }
        if let healthCheckPort = healthCheckPort {
            try container.encode(healthCheckPort, forKey: ClientRuntime.Key("HealthCheckPort"))
        }
        if let healthCheckProtocol = healthCheckProtocol {
            try container.encode(healthCheckProtocol, forKey: ClientRuntime.Key("HealthCheckProtocol"))
        }
        if let healthCheckTimeoutSeconds = healthCheckTimeoutSeconds {
            try container.encode(healthCheckTimeoutSeconds, forKey: ClientRuntime.Key("HealthCheckTimeoutSeconds"))
        }
        if let healthyThresholdCount = healthyThresholdCount {
            try container.encode(healthyThresholdCount, forKey: ClientRuntime.Key("HealthyThresholdCount"))
        }
        if let ipAddressType = ipAddressType {
            try container.encode(ipAddressType, forKey: ClientRuntime.Key("IpAddressType"))
        }
        if let matcher = matcher {
            try container.encode(matcher, forKey: ClientRuntime.Key("Matcher"))
        }
        if let name = name {
            try container.encode(name, forKey: ClientRuntime.Key("Name"))
        }
        if let port = port {
            try container.encode(port, forKey: ClientRuntime.Key("Port"))
        }
        if let `protocol` = `protocol` {
            try container.encode(`protocol`, forKey: ClientRuntime.Key("Protocol"))
        }
        if let protocolVersion = protocolVersion {
            try container.encode(protocolVersion, forKey: ClientRuntime.Key("ProtocolVersion"))
        }
        if let tags = tags {
            var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
            for (index0, tag0) in tags.enumerated() {
                try tagsContainer.encode(tag0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let targetType = targetType {
            try container.encode(targetType, forKey: ClientRuntime.Key("TargetType"))
        }
        if let unhealthyThresholdCount = unhealthyThresholdCount {
            try container.encode(unhealthyThresholdCount, forKey: ClientRuntime.Key("UnhealthyThresholdCount"))
        }
        if let vpcId = vpcId {
            try container.encode(vpcId, forKey: ClientRuntime.Key("VpcId"))
        }
        try container.encode("CreateTargetGroup", forKey:ClientRuntime.Key("Action"))
        try container.encode("2015-12-01", forKey:ClientRuntime.Key("Version"))
    }
}
