// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateLoadBalancerInputBody: Swift.Equatable {
    let name: Swift.String?
    let subnets: [Swift.String]?
    let subnetMappings: [ElasticLoadBalancingV2ClientTypes.SubnetMapping]?
    let securityGroups: [Swift.String]?
    let scheme: ElasticLoadBalancingV2ClientTypes.LoadBalancerSchemeEnum?
    let tags: [ElasticLoadBalancingV2ClientTypes.Tag]?
    let type: ElasticLoadBalancingV2ClientTypes.LoadBalancerTypeEnum?
    let ipAddressType: ElasticLoadBalancingV2ClientTypes.IpAddressType?
    let customerOwnedIpv4Pool: Swift.String?
}

extension CreateLoadBalancerInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case customerOwnedIpv4Pool = "CustomerOwnedIpv4Pool"
        case ipAddressType = "IpAddressType"
        case name = "Name"
        case scheme = "Scheme"
        case securityGroups = "SecurityGroups"
        case subnetMappings = "SubnetMappings"
        case subnets = "Subnets"
        case tags = "Tags"
        case type = "Type"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        if containerValues.contains(.subnets) {
            struct KeyVal0{struct member{}}
            let subnetsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .subnets)
            if let subnetsWrappedContainer = subnetsWrappedContainer {
                let subnetsContainer = try subnetsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var subnetsBuffer:[Swift.String]? = nil
                if let subnetsContainer = subnetsContainer {
                    subnetsBuffer = [Swift.String]()
                    for stringContainer0 in subnetsContainer {
                        subnetsBuffer?.append(stringContainer0)
                    }
                }
                subnets = subnetsBuffer
            } else {
                subnets = []
            }
        } else {
            subnets = nil
        }
        if containerValues.contains(.subnetMappings) {
            struct KeyVal0{struct member{}}
            let subnetMappingsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .subnetMappings)
            if let subnetMappingsWrappedContainer = subnetMappingsWrappedContainer {
                let subnetMappingsContainer = try subnetMappingsWrappedContainer.decodeIfPresent([ElasticLoadBalancingV2ClientTypes.SubnetMapping].self, forKey: .member)
                var subnetMappingsBuffer:[ElasticLoadBalancingV2ClientTypes.SubnetMapping]? = nil
                if let subnetMappingsContainer = subnetMappingsContainer {
                    subnetMappingsBuffer = [ElasticLoadBalancingV2ClientTypes.SubnetMapping]()
                    for structureContainer0 in subnetMappingsContainer {
                        subnetMappingsBuffer?.append(structureContainer0)
                    }
                }
                subnetMappings = subnetMappingsBuffer
            } else {
                subnetMappings = []
            }
        } else {
            subnetMappings = nil
        }
        if containerValues.contains(.securityGroups) {
            struct KeyVal0{struct member{}}
            let securityGroupsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .securityGroups)
            if let securityGroupsWrappedContainer = securityGroupsWrappedContainer {
                let securityGroupsContainer = try securityGroupsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var securityGroupsBuffer:[Swift.String]? = nil
                if let securityGroupsContainer = securityGroupsContainer {
                    securityGroupsBuffer = [Swift.String]()
                    for stringContainer0 in securityGroupsContainer {
                        securityGroupsBuffer?.append(stringContainer0)
                    }
                }
                securityGroups = securityGroupsBuffer
            } else {
                securityGroups = []
            }
        } else {
            securityGroups = nil
        }
        let schemeDecoded = try containerValues.decodeIfPresent(ElasticLoadBalancingV2ClientTypes.LoadBalancerSchemeEnum.self, forKey: .scheme)
        scheme = schemeDecoded
        if containerValues.contains(.tags) {
            struct KeyVal0{struct member{}}
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .tags)
            if let tagsWrappedContainer = tagsWrappedContainer {
                let tagsContainer = try tagsWrappedContainer.decodeIfPresent([ElasticLoadBalancingV2ClientTypes.Tag].self, forKey: .member)
                var tagsBuffer:[ElasticLoadBalancingV2ClientTypes.Tag]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [ElasticLoadBalancingV2ClientTypes.Tag]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
        let typeDecoded = try containerValues.decodeIfPresent(ElasticLoadBalancingV2ClientTypes.LoadBalancerTypeEnum.self, forKey: .type)
        type = typeDecoded
        let ipAddressTypeDecoded = try containerValues.decodeIfPresent(ElasticLoadBalancingV2ClientTypes.IpAddressType.self, forKey: .ipAddressType)
        ipAddressType = ipAddressTypeDecoded
        let customerOwnedIpv4PoolDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .customerOwnedIpv4Pool)
        customerOwnedIpv4Pool = customerOwnedIpv4PoolDecoded
    }
}
