// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeLoadBalancersInputBody: Swift.Equatable {
    let loadBalancerArns: [Swift.String]?
    let names: [Swift.String]?
    let marker: Swift.String?
    let pageSize: Swift.Int?
}

extension DescribeLoadBalancersInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case loadBalancerArns = "LoadBalancerArns"
        case marker = "Marker"
        case names = "Names"
        case pageSize = "PageSize"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.loadBalancerArns) {
            struct KeyVal0{struct member{}}
            let loadBalancerArnsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .loadBalancerArns)
            if let loadBalancerArnsWrappedContainer = loadBalancerArnsWrappedContainer {
                let loadBalancerArnsContainer = try loadBalancerArnsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var loadBalancerArnsBuffer:[Swift.String]? = nil
                if let loadBalancerArnsContainer = loadBalancerArnsContainer {
                    loadBalancerArnsBuffer = [Swift.String]()
                    for stringContainer0 in loadBalancerArnsContainer {
                        loadBalancerArnsBuffer?.append(stringContainer0)
                    }
                }
                loadBalancerArns = loadBalancerArnsBuffer
            } else {
                loadBalancerArns = []
            }
        } else {
            loadBalancerArns = nil
        }
        if containerValues.contains(.names) {
            struct KeyVal0{struct member{}}
            let namesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .names)
            if let namesWrappedContainer = namesWrappedContainer {
                let namesContainer = try namesWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var namesBuffer:[Swift.String]? = nil
                if let namesContainer = namesContainer {
                    namesBuffer = [Swift.String]()
                    for stringContainer0 in namesContainer {
                        namesBuffer?.append(stringContainer0)
                    }
                }
                names = namesBuffer
            } else {
                names = []
            }
        } else {
            names = nil
        }
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
        let pageSizeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .pageSize)
        pageSize = pageSizeDecoded
    }
}
