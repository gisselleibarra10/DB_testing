// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateTargetGroupInputBody: Swift.Equatable {
    let name: Swift.String?
    let `protocol`: ElasticLoadBalancingV2ClientTypes.ProtocolEnum?
    let protocolVersion: Swift.String?
    let port: Swift.Int?
    let vpcId: Swift.String?
    let healthCheckProtocol: ElasticLoadBalancingV2ClientTypes.ProtocolEnum?
    let healthCheckPort: Swift.String?
    let healthCheckEnabled: Swift.Bool?
    let healthCheckPath: Swift.String?
    let healthCheckIntervalSeconds: Swift.Int?
    let healthCheckTimeoutSeconds: Swift.Int?
    let healthyThresholdCount: Swift.Int?
    let unhealthyThresholdCount: Swift.Int?
    let matcher: ElasticLoadBalancingV2ClientTypes.Matcher?
    let targetType: ElasticLoadBalancingV2ClientTypes.TargetTypeEnum?
    let tags: [ElasticLoadBalancingV2ClientTypes.Tag]?
    let ipAddressType: ElasticLoadBalancingV2ClientTypes.TargetGroupIpAddressTypeEnum?
}

extension CreateTargetGroupInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case healthCheckEnabled = "HealthCheckEnabled"
        case healthCheckIntervalSeconds = "HealthCheckIntervalSeconds"
        case healthCheckPath = "HealthCheckPath"
        case healthCheckPort = "HealthCheckPort"
        case healthCheckProtocol = "HealthCheckProtocol"
        case healthCheckTimeoutSeconds = "HealthCheckTimeoutSeconds"
        case healthyThresholdCount = "HealthyThresholdCount"
        case ipAddressType = "IpAddressType"
        case matcher = "Matcher"
        case name = "Name"
        case port = "Port"
        case `protocol` = "Protocol"
        case protocolVersion = "ProtocolVersion"
        case tags = "Tags"
        case targetType = "TargetType"
        case unhealthyThresholdCount = "UnhealthyThresholdCount"
        case vpcId = "VpcId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let protocolDecoded = try containerValues.decodeIfPresent(ElasticLoadBalancingV2ClientTypes.ProtocolEnum.self, forKey: .protocol)
        `protocol` = protocolDecoded
        let protocolVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .protocolVersion)
        protocolVersion = protocolVersionDecoded
        let portDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .port)
        port = portDecoded
        let vpcIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vpcId)
        vpcId = vpcIdDecoded
        let healthCheckProtocolDecoded = try containerValues.decodeIfPresent(ElasticLoadBalancingV2ClientTypes.ProtocolEnum.self, forKey: .healthCheckProtocol)
        healthCheckProtocol = healthCheckProtocolDecoded
        let healthCheckPortDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .healthCheckPort)
        healthCheckPort = healthCheckPortDecoded
        let healthCheckEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .healthCheckEnabled)
        healthCheckEnabled = healthCheckEnabledDecoded
        let healthCheckPathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .healthCheckPath)
        healthCheckPath = healthCheckPathDecoded
        let healthCheckIntervalSecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .healthCheckIntervalSeconds)
        healthCheckIntervalSeconds = healthCheckIntervalSecondsDecoded
        let healthCheckTimeoutSecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .healthCheckTimeoutSeconds)
        healthCheckTimeoutSeconds = healthCheckTimeoutSecondsDecoded
        let healthyThresholdCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .healthyThresholdCount)
        healthyThresholdCount = healthyThresholdCountDecoded
        let unhealthyThresholdCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .unhealthyThresholdCount)
        unhealthyThresholdCount = unhealthyThresholdCountDecoded
        let matcherDecoded = try containerValues.decodeIfPresent(ElasticLoadBalancingV2ClientTypes.Matcher.self, forKey: .matcher)
        matcher = matcherDecoded
        let targetTypeDecoded = try containerValues.decodeIfPresent(ElasticLoadBalancingV2ClientTypes.TargetTypeEnum.self, forKey: .targetType)
        targetType = targetTypeDecoded
        if containerValues.contains(.tags) {
            struct KeyVal0{struct member{}}
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .tags)
            if let tagsWrappedContainer = tagsWrappedContainer {
                let tagsContainer = try tagsWrappedContainer.decodeIfPresent([ElasticLoadBalancingV2ClientTypes.Tag].self, forKey: .member)
                var tagsBuffer:[ElasticLoadBalancingV2ClientTypes.Tag]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [ElasticLoadBalancingV2ClientTypes.Tag]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
        let ipAddressTypeDecoded = try containerValues.decodeIfPresent(ElasticLoadBalancingV2ClientTypes.TargetGroupIpAddressTypeEnum.self, forKey: .ipAddressType)
        ipAddressType = ipAddressTypeDecoded
    }
}
