// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ModifyTargetGroupInputBody: Swift.Equatable {
    let targetGroupArn: Swift.String?
    let healthCheckProtocol: ElasticLoadBalancingV2ClientTypes.ProtocolEnum?
    let healthCheckPort: Swift.String?
    let healthCheckPath: Swift.String?
    let healthCheckEnabled: Swift.Bool?
    let healthCheckIntervalSeconds: Swift.Int?
    let healthCheckTimeoutSeconds: Swift.Int?
    let healthyThresholdCount: Swift.Int?
    let unhealthyThresholdCount: Swift.Int?
    let matcher: ElasticLoadBalancingV2ClientTypes.Matcher?
}

extension ModifyTargetGroupInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case healthCheckEnabled = "HealthCheckEnabled"
        case healthCheckIntervalSeconds = "HealthCheckIntervalSeconds"
        case healthCheckPath = "HealthCheckPath"
        case healthCheckPort = "HealthCheckPort"
        case healthCheckProtocol = "HealthCheckProtocol"
        case healthCheckTimeoutSeconds = "HealthCheckTimeoutSeconds"
        case healthyThresholdCount = "HealthyThresholdCount"
        case matcher = "Matcher"
        case targetGroupArn = "TargetGroupArn"
        case unhealthyThresholdCount = "UnhealthyThresholdCount"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let targetGroupArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .targetGroupArn)
        targetGroupArn = targetGroupArnDecoded
        let healthCheckProtocolDecoded = try containerValues.decodeIfPresent(ElasticLoadBalancingV2ClientTypes.ProtocolEnum.self, forKey: .healthCheckProtocol)
        healthCheckProtocol = healthCheckProtocolDecoded
        let healthCheckPortDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .healthCheckPort)
        healthCheckPort = healthCheckPortDecoded
        let healthCheckPathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .healthCheckPath)
        healthCheckPath = healthCheckPathDecoded
        let healthCheckEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .healthCheckEnabled)
        healthCheckEnabled = healthCheckEnabledDecoded
        let healthCheckIntervalSecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .healthCheckIntervalSeconds)
        healthCheckIntervalSeconds = healthCheckIntervalSecondsDecoded
        let healthCheckTimeoutSecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .healthCheckTimeoutSeconds)
        healthCheckTimeoutSeconds = healthCheckTimeoutSecondsDecoded
        let healthyThresholdCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .healthyThresholdCount)
        healthyThresholdCount = healthyThresholdCountDecoded
        let unhealthyThresholdCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .unhealthyThresholdCount)
        unhealthyThresholdCount = unhealthyThresholdCountDecoded
        let matcherDecoded = try containerValues.decodeIfPresent(ElasticLoadBalancingV2ClientTypes.Matcher.self, forKey: .matcher)
        matcher = matcherDecoded
    }
}
