// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateLoadBalancerOutputResponseBody: Swift.Equatable {
    let loadBalancers: [ElasticLoadBalancingV2ClientTypes.LoadBalancer]?
}

extension CreateLoadBalancerOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case loadBalancers = "LoadBalancers"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("CreateLoadBalancerResult"))
        if containerValues.contains(.loadBalancers) {
            struct KeyVal0{struct member{}}
            let loadBalancersWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .loadBalancers)
            if let loadBalancersWrappedContainer = loadBalancersWrappedContainer {
                let loadBalancersContainer = try loadBalancersWrappedContainer.decodeIfPresent([ElasticLoadBalancingV2ClientTypes.LoadBalancer].self, forKey: .member)
                var loadBalancersBuffer:[ElasticLoadBalancingV2ClientTypes.LoadBalancer]? = nil
                if let loadBalancersContainer = loadBalancersContainer {
                    loadBalancersBuffer = [ElasticLoadBalancingV2ClientTypes.LoadBalancer]()
                    for structureContainer0 in loadBalancersContainer {
                        loadBalancersBuffer?.append(structureContainer0)
                    }
                }
                loadBalancers = loadBalancersBuffer
            } else {
                loadBalancers = []
            }
        } else {
            loadBalancers = nil
        }
    }
}
