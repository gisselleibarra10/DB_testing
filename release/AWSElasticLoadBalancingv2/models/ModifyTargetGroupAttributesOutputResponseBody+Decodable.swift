// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ModifyTargetGroupAttributesOutputResponseBody: Swift.Equatable {
    let attributes: [ElasticLoadBalancingV2ClientTypes.TargetGroupAttribute]?
}

extension ModifyTargetGroupAttributesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attributes = "Attributes"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("ModifyTargetGroupAttributesResult"))
        if containerValues.contains(.attributes) {
            struct KeyVal0{struct member{}}
            let attributesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .attributes)
            if let attributesWrappedContainer = attributesWrappedContainer {
                let attributesContainer = try attributesWrappedContainer.decodeIfPresent([ElasticLoadBalancingV2ClientTypes.TargetGroupAttribute].self, forKey: .member)
                var attributesBuffer:[ElasticLoadBalancingV2ClientTypes.TargetGroupAttribute]? = nil
                if let attributesContainer = attributesContainer {
                    attributesBuffer = [ElasticLoadBalancingV2ClientTypes.TargetGroupAttribute]()
                    for structureContainer0 in attributesContainer {
                        attributesBuffer?.append(structureContainer0)
                    }
                }
                attributes = attributesBuffer
            } else {
                attributes = []
            }
        } else {
            attributes = nil
        }
    }
}
