// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeSSLPoliciesOutputResponseBody: Swift.Equatable {
    let sslPolicies: [ElasticLoadBalancingV2ClientTypes.SslPolicy]?
    let nextMarker: Swift.String?
}

extension DescribeSSLPoliciesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextMarker = "NextMarker"
        case sslPolicies = "SslPolicies"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeSSLPoliciesResult"))
        if containerValues.contains(.sslPolicies) {
            struct KeyVal0{struct member{}}
            let sslPoliciesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .sslPolicies)
            if let sslPoliciesWrappedContainer = sslPoliciesWrappedContainer {
                let sslPoliciesContainer = try sslPoliciesWrappedContainer.decodeIfPresent([ElasticLoadBalancingV2ClientTypes.SslPolicy].self, forKey: .member)
                var sslPoliciesBuffer:[ElasticLoadBalancingV2ClientTypes.SslPolicy]? = nil
                if let sslPoliciesContainer = sslPoliciesContainer {
                    sslPoliciesBuffer = [ElasticLoadBalancingV2ClientTypes.SslPolicy]()
                    for structureContainer0 in sslPoliciesContainer {
                        sslPoliciesBuffer?.append(structureContainer0)
                    }
                }
                sslPolicies = sslPoliciesBuffer
            } else {
                sslPolicies = []
            }
        } else {
            sslPolicies = nil
        }
        let nextMarkerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextMarker)
        nextMarker = nextMarkerDecoded
    }
}
