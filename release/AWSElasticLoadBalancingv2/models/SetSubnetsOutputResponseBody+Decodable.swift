// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct SetSubnetsOutputResponseBody: Swift.Equatable {
    let availabilityZones: [ElasticLoadBalancingV2ClientTypes.AvailabilityZone]?
    let ipAddressType: ElasticLoadBalancingV2ClientTypes.IpAddressType?
}

extension SetSubnetsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case availabilityZones = "AvailabilityZones"
        case ipAddressType = "IpAddressType"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("SetSubnetsResult"))
        if containerValues.contains(.availabilityZones) {
            struct KeyVal0{struct member{}}
            let availabilityZonesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .availabilityZones)
            if let availabilityZonesWrappedContainer = availabilityZonesWrappedContainer {
                let availabilityZonesContainer = try availabilityZonesWrappedContainer.decodeIfPresent([ElasticLoadBalancingV2ClientTypes.AvailabilityZone].self, forKey: .member)
                var availabilityZonesBuffer:[ElasticLoadBalancingV2ClientTypes.AvailabilityZone]? = nil
                if let availabilityZonesContainer = availabilityZonesContainer {
                    availabilityZonesBuffer = [ElasticLoadBalancingV2ClientTypes.AvailabilityZone]()
                    for structureContainer0 in availabilityZonesContainer {
                        availabilityZonesBuffer?.append(structureContainer0)
                    }
                }
                availabilityZones = availabilityZonesBuffer
            } else {
                availabilityZones = []
            }
        } else {
            availabilityZones = nil
        }
        let ipAddressTypeDecoded = try containerValues.decodeIfPresent(ElasticLoadBalancingV2ClientTypes.IpAddressType.self, forKey: .ipAddressType)
        ipAddressType = ipAddressTypeDecoded
    }
}
