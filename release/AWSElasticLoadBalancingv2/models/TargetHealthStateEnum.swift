// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension ElasticLoadBalancingV2ClientTypes {
    public enum TargetHealthStateEnum: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case draining
        case healthy
        case initial
        case unavailable
        case unhealthy
        case unused
        case sdkUnknown(Swift.String)

        public static var allCases: [TargetHealthStateEnum] {
            return [
                .draining,
                .healthy,
                .initial,
                .unavailable,
                .unhealthy,
                .unused,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .draining: return "draining"
            case .healthy: return "healthy"
            case .initial: return "initial"
            case .unavailable: return "unavailable"
            case .unhealthy: return "unhealthy"
            case .unused: return "unused"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = TargetHealthStateEnum(rawValue: rawValue) ?? TargetHealthStateEnum.sdkUnknown(rawValue)
        }
    }
}
