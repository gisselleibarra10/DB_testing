// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ElasticLoadBalancingV2ClientTypes {
    /// Information about a load balancer.
    public struct LoadBalancer: Swift.Equatable {
        /// The subnets for the load balancer.
        public var availabilityZones: [ElasticLoadBalancingV2ClientTypes.AvailabilityZone]?
        /// The ID of the Amazon Route 53 hosted zone associated with the load balancer.
        public var canonicalHostedZoneId: Swift.String?
        /// The date and time the load balancer was created.
        public var createdTime: ClientRuntime.Date?
        /// [Application Load Balancers on Outposts] The ID of the customer-owned address pool.
        public var customerOwnedIpv4Pool: Swift.String?
        /// The public DNS name of the load balancer.
        public var dNSName: Swift.String?
        /// The type of IP addresses used by the subnets for your load balancer. The possible values are ipv4 (for IPv4 addresses) and dualstack (for IPv4 and IPv6 addresses).
        public var ipAddressType: ElasticLoadBalancingV2ClientTypes.IpAddressType?
        /// The Amazon Resource Name (ARN) of the load balancer.
        public var loadBalancerArn: Swift.String?
        /// The name of the load balancer.
        public var loadBalancerName: Swift.String?
        /// The nodes of an Internet-facing load balancer have public IP addresses. The DNS name of an Internet-facing load balancer is publicly resolvable to the public IP addresses of the nodes. Therefore, Internet-facing load balancers can route requests from clients over the internet. The nodes of an internal load balancer have only private IP addresses. The DNS name of an internal load balancer is publicly resolvable to the private IP addresses of the nodes. Therefore, internal load balancers can route requests only from clients with access to the VPC for the load balancer.
        public var scheme: ElasticLoadBalancingV2ClientTypes.LoadBalancerSchemeEnum?
        /// The IDs of the security groups for the load balancer.
        public var securityGroups: [Swift.String]?
        /// The state of the load balancer.
        public var state: ElasticLoadBalancingV2ClientTypes.LoadBalancerState?
        /// The type of load balancer.
        public var type: ElasticLoadBalancingV2ClientTypes.LoadBalancerTypeEnum?
        /// The ID of the VPC for the load balancer.
        public var vpcId: Swift.String?

        public init (
            availabilityZones: [ElasticLoadBalancingV2ClientTypes.AvailabilityZone]? = nil,
            canonicalHostedZoneId: Swift.String? = nil,
            createdTime: ClientRuntime.Date? = nil,
            customerOwnedIpv4Pool: Swift.String? = nil,
            dNSName: Swift.String? = nil,
            ipAddressType: ElasticLoadBalancingV2ClientTypes.IpAddressType? = nil,
            loadBalancerArn: Swift.String? = nil,
            loadBalancerName: Swift.String? = nil,
            scheme: ElasticLoadBalancingV2ClientTypes.LoadBalancerSchemeEnum? = nil,
            securityGroups: [Swift.String]? = nil,
            state: ElasticLoadBalancingV2ClientTypes.LoadBalancerState? = nil,
            type: ElasticLoadBalancingV2ClientTypes.LoadBalancerTypeEnum? = nil,
            vpcId: Swift.String? = nil
        )
        {
            self.availabilityZones = availabilityZones
            self.canonicalHostedZoneId = canonicalHostedZoneId
            self.createdTime = createdTime
            self.customerOwnedIpv4Pool = customerOwnedIpv4Pool
            self.dNSName = dNSName
            self.ipAddressType = ipAddressType
            self.loadBalancerArn = loadBalancerArn
            self.loadBalancerName = loadBalancerName
            self.scheme = scheme
            self.securityGroups = securityGroups
            self.state = state
            self.type = type
            self.vpcId = vpcId
        }
    }

}
