// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct ModifyTargetGroupInput: Swift.Equatable {
    /// Indicates whether health checks are enabled.
    public var healthCheckEnabled: Swift.Bool?
    /// The approximate amount of time, in seconds, between health checks of an individual target. For TCP health checks, the supported values are 10 or 30 seconds.
    public var healthCheckIntervalSeconds: Swift.Int?
    /// [HTTP/HTTPS health checks] The destination for health checks on the targets. [HTTP1 or HTTP2 protocol version] The ping path. The default is /. [GRPC protocol version] The path of a custom health check method with the format /package.service/method. The default is /Amazon Web Services.ALB/healthcheck.
    public var healthCheckPath: Swift.String?
    /// The port the load balancer uses when performing health checks on targets.
    public var healthCheckPort: Swift.String?
    /// The protocol the load balancer uses when performing health checks on targets. For Application Load Balancers, the default is HTTP. For Network Load Balancers and Gateway Load Balancers, the default is TCP. The TCP protocol is not supported for health checks if the protocol of the target group is HTTP or HTTPS. It is supported for health checks only if the protocol of the target group is TCP, TLS, UDP, or TCP_UDP. The GENEVE, TLS, UDP, and TCP_UDP protocols are not supported for health checks.
    public var healthCheckProtocol: ElasticLoadBalancingV2ClientTypes.ProtocolEnum?
    /// [HTTP/HTTPS health checks] The amount of time, in seconds, during which no response means a failed health check.
    public var healthCheckTimeoutSeconds: Swift.Int?
    /// The number of consecutive health checks successes required before considering an unhealthy target healthy.
    public var healthyThresholdCount: Swift.Int?
    /// [HTTP/HTTPS health checks] The HTTP or gRPC codes to use when checking for a successful response from a target.
    public var matcher: ElasticLoadBalancingV2ClientTypes.Matcher?
    /// The Amazon Resource Name (ARN) of the target group.
    /// This member is required.
    public var targetGroupArn: Swift.String?
    /// The number of consecutive health check failures required before considering the target unhealthy. For target groups with a protocol of TCP or TLS, this value must be the same as the healthy threshold count.
    public var unhealthyThresholdCount: Swift.Int?

    public init (
        healthCheckEnabled: Swift.Bool? = nil,
        healthCheckIntervalSeconds: Swift.Int? = nil,
        healthCheckPath: Swift.String? = nil,
        healthCheckPort: Swift.String? = nil,
        healthCheckProtocol: ElasticLoadBalancingV2ClientTypes.ProtocolEnum? = nil,
        healthCheckTimeoutSeconds: Swift.Int? = nil,
        healthyThresholdCount: Swift.Int? = nil,
        matcher: ElasticLoadBalancingV2ClientTypes.Matcher? = nil,
        targetGroupArn: Swift.String? = nil,
        unhealthyThresholdCount: Swift.Int? = nil
    )
    {
        self.healthCheckEnabled = healthCheckEnabled
        self.healthCheckIntervalSeconds = healthCheckIntervalSeconds
        self.healthCheckPath = healthCheckPath
        self.healthCheckPort = healthCheckPort
        self.healthCheckProtocol = healthCheckProtocol
        self.healthCheckTimeoutSeconds = healthCheckTimeoutSeconds
        self.healthyThresholdCount = healthyThresholdCount
        self.matcher = matcher
        self.targetGroupArn = targetGroupArn
        self.unhealthyThresholdCount = unhealthyThresholdCount
    }
}
