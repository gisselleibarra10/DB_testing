// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AppIntegrationsClientTypes.EventIntegrationAssociation: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientAssociationMetadata = "ClientAssociationMetadata"
        case clientId = "ClientId"
        case eventBridgeRuleName = "EventBridgeRuleName"
        case eventIntegrationAssociationArn = "EventIntegrationAssociationArn"
        case eventIntegrationAssociationId = "EventIntegrationAssociationId"
        case eventIntegrationName = "EventIntegrationName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientAssociationMetadata = clientAssociationMetadata {
            var clientAssociationMetadataContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .clientAssociationMetadata)
            for (dictKey0, clientassociationmetadata0) in clientAssociationMetadata {
                try clientAssociationMetadataContainer.encode(clientassociationmetadata0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let clientId = self.clientId {
            try encodeContainer.encode(clientId, forKey: .clientId)
        }
        if let eventBridgeRuleName = self.eventBridgeRuleName {
            try encodeContainer.encode(eventBridgeRuleName, forKey: .eventBridgeRuleName)
        }
        if let eventIntegrationAssociationArn = self.eventIntegrationAssociationArn {
            try encodeContainer.encode(eventIntegrationAssociationArn, forKey: .eventIntegrationAssociationArn)
        }
        if let eventIntegrationAssociationId = self.eventIntegrationAssociationId {
            try encodeContainer.encode(eventIntegrationAssociationId, forKey: .eventIntegrationAssociationId)
        }
        if let eventIntegrationName = self.eventIntegrationName {
            try encodeContainer.encode(eventIntegrationName, forKey: .eventIntegrationName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let eventIntegrationAssociationArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .eventIntegrationAssociationArn)
        eventIntegrationAssociationArn = eventIntegrationAssociationArnDecoded
        let eventIntegrationAssociationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .eventIntegrationAssociationId)
        eventIntegrationAssociationId = eventIntegrationAssociationIdDecoded
        let eventIntegrationNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .eventIntegrationName)
        eventIntegrationName = eventIntegrationNameDecoded
        let clientIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientId)
        clientId = clientIdDecoded
        let eventBridgeRuleNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .eventBridgeRuleName)
        eventBridgeRuleName = eventBridgeRuleNameDecoded
        let clientAssociationMetadataContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .clientAssociationMetadata)
        var clientAssociationMetadataDecoded0: [Swift.String:Swift.String]? = nil
        if let clientAssociationMetadataContainer = clientAssociationMetadataContainer {
            clientAssociationMetadataDecoded0 = [Swift.String:Swift.String]()
            for (key0, nonblankstring0) in clientAssociationMetadataContainer {
                if let nonblankstring0 = nonblankstring0 {
                    clientAssociationMetadataDecoded0?[key0] = nonblankstring0
                }
            }
        }
        clientAssociationMetadata = clientAssociationMetadataDecoded0
    }
}
