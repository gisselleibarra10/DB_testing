// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListDataIntegrationsOutputResponseBody: Swift.Equatable {
    let dataIntegrations: [AppIntegrationsClientTypes.DataIntegrationSummary]?
    let nextToken: Swift.String?
}

extension ListDataIntegrationsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dataIntegrations = "DataIntegrations"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dataIntegrationsContainer = try containerValues.decodeIfPresent([AppIntegrationsClientTypes.DataIntegrationSummary?].self, forKey: .dataIntegrations)
        var dataIntegrationsDecoded0:[AppIntegrationsClientTypes.DataIntegrationSummary]? = nil
        if let dataIntegrationsContainer = dataIntegrationsContainer {
            dataIntegrationsDecoded0 = [AppIntegrationsClientTypes.DataIntegrationSummary]()
            for structure0 in dataIntegrationsContainer {
                if let structure0 = structure0 {
                    dataIntegrationsDecoded0?.append(structure0)
                }
            }
        }
        dataIntegrations = dataIntegrationsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
