// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListDataIntegrationAssociationsOutputResponseBody: Swift.Equatable {
    let dataIntegrationAssociations: [AppIntegrationsClientTypes.DataIntegrationAssociationSummary]?
    let nextToken: Swift.String?
}

extension ListDataIntegrationAssociationsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dataIntegrationAssociations = "DataIntegrationAssociations"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dataIntegrationAssociationsContainer = try containerValues.decodeIfPresent([AppIntegrationsClientTypes.DataIntegrationAssociationSummary?].self, forKey: .dataIntegrationAssociations)
        var dataIntegrationAssociationsDecoded0:[AppIntegrationsClientTypes.DataIntegrationAssociationSummary]? = nil
        if let dataIntegrationAssociationsContainer = dataIntegrationAssociationsContainer {
            dataIntegrationAssociationsDecoded0 = [AppIntegrationsClientTypes.DataIntegrationAssociationSummary]()
            for structure0 in dataIntegrationAssociationsContainer {
                if let structure0 = structure0 {
                    dataIntegrationAssociationsDecoded0?.append(structure0)
                }
            }
        }
        dataIntegrationAssociations = dataIntegrationAssociationsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
