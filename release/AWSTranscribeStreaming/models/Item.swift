// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension TranscribeStreamingClientTypes {
    /// A word, phrase, or punctuation mark that is transcribed from the input audio.
    public struct Item: Swift.Equatable {
        /// A value between zero and one for an item that is a confidence score that Amazon Transcribe assigns to each word or phrase that it transcribes.
        public var confidence: Swift.Double?
        /// The word or punctuation that was recognized in the input audio.
        public var content: Swift.String?
        /// The offset from the beginning of the audio stream to the end of the audio that resulted in the item.
        public var endTime: Swift.Double
        /// If speaker identification is enabled, shows the speakers identified in the media stream.
        public var speaker: Swift.String?
        /// If partial result stabilization has been enabled, indicates whether the word or phrase in the item is stable. If Stable is true, the result is stable.
        public var stable: Swift.Bool?
        /// The offset from the beginning of the audio stream to the beginning of the audio that resulted in the item.
        public var startTime: Swift.Double
        /// The type of the item. PRONUNCIATION indicates that the item is a word that was recognized in the input audio. PUNCTUATION indicates that the item was interpreted as a pause in the input audio.
        public var type: TranscribeStreamingClientTypes.ItemType?
        /// Indicates whether a word in the item matches a word in the vocabulary filter you've chosen for your media stream. If true then a word in the item matches your vocabulary filter.
        public var vocabularyFilterMatch: Swift.Bool

        public init (
            confidence: Swift.Double? = nil,
            content: Swift.String? = nil,
            endTime: Swift.Double = 0.0,
            speaker: Swift.String? = nil,
            stable: Swift.Bool? = nil,
            startTime: Swift.Double = 0.0,
            type: TranscribeStreamingClientTypes.ItemType? = nil,
            vocabularyFilterMatch: Swift.Bool = false
        )
        {
            self.confidence = confidence
            self.content = content
            self.endTime = endTime
            self.speaker = speaker
            self.stable = stable
            self.startTime = startTime
            self.type = type
            self.vocabularyFilterMatch = vocabularyFilterMatch
        }
    }

}
