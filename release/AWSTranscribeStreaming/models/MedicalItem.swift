// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension TranscribeStreamingClientTypes {
    /// A word, phrase, or punctuation mark that is transcribed from the input audio.
    public struct MedicalItem: Swift.Equatable {
        /// A value between 0 and 1 for an item that is a confidence score that Amazon Transcribe Medical assigns to each word that it transcribes.
        public var confidence: Swift.Double?
        /// The word or punctuation mark that was recognized in the input audio.
        public var content: Swift.String?
        /// The number of seconds into an audio stream that indicates the creation time of an item.
        public var endTime: Swift.Double
        /// If speaker identification is enabled, shows the integer values that correspond to the different speakers identified in the stream. For example, if the value of Speaker in the stream is either a 0 or a 1, that indicates that Amazon Transcribe Medical has identified two speakers in the stream. The value of 0 corresponds to one speaker and the value of 1 corresponds to the other speaker.
        public var speaker: Swift.String?
        /// The number of seconds into an audio stream that indicates the creation time of an item.
        public var startTime: Swift.Double
        /// The type of the item. PRONUNCIATION indicates that the item is a word that was recognized in the input audio. PUNCTUATION indicates that the item was interpreted as a pause in the input audio, such as a period to indicate the end of a sentence.
        public var type: TranscribeStreamingClientTypes.ItemType?

        public init (
            confidence: Swift.Double? = nil,
            content: Swift.String? = nil,
            endTime: Swift.Double = 0.0,
            speaker: Swift.String? = nil,
            startTime: Swift.Double = 0.0,
            type: TranscribeStreamingClientTypes.ItemType? = nil
        )
        {
            self.confidence = confidence
            self.content = content
            self.endTime = endTime
            self.speaker = speaker
            self.startTime = startTime
            self.type = type
        }
    }

}
