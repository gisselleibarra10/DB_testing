// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension TranscribeStreamingClientTypes.MedicalAlternative: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case entities = "Entities"
        case items = "Items"
        case transcript = "Transcript"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let entities = entities {
            var entitiesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .entities)
            for medicalentitylist0 in entities {
                try entitiesContainer.encode(medicalentitylist0)
            }
        }
        if let items = items {
            var itemsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .items)
            for medicalitemlist0 in items {
                try itemsContainer.encode(medicalitemlist0)
            }
        }
        if let transcript = self.transcript {
            try encodeContainer.encode(transcript, forKey: .transcript)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let transcriptDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .transcript)
        transcript = transcriptDecoded
        let itemsContainer = try containerValues.decodeIfPresent([TranscribeStreamingClientTypes.MedicalItem?].self, forKey: .items)
        var itemsDecoded0:[TranscribeStreamingClientTypes.MedicalItem]? = nil
        if let itemsContainer = itemsContainer {
            itemsDecoded0 = [TranscribeStreamingClientTypes.MedicalItem]()
            for structure0 in itemsContainer {
                if let structure0 = structure0 {
                    itemsDecoded0?.append(structure0)
                }
            }
        }
        items = itemsDecoded0
        let entitiesContainer = try containerValues.decodeIfPresent([TranscribeStreamingClientTypes.MedicalEntity?].self, forKey: .entities)
        var entitiesDecoded0:[TranscribeStreamingClientTypes.MedicalEntity]? = nil
        if let entitiesContainer = entitiesContainer {
            entitiesDecoded0 = [TranscribeStreamingClientTypes.MedicalEntity]()
            for structure0 in entitiesContainer {
                if let structure0 = structure0 {
                    entitiesDecoded0?.append(structure0)
                }
            }
        }
        entities = entitiesDecoded0
    }
}
