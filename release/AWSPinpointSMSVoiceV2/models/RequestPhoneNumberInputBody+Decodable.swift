// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct RequestPhoneNumberInputBody: Swift.Equatable {
    let isoCountryCode: Swift.String?
    let messageType: PinpointSmsVoiceV2ClientTypes.MessageType?
    let numberCapabilities: [PinpointSmsVoiceV2ClientTypes.NumberCapability]?
    let numberType: PinpointSmsVoiceV2ClientTypes.RequestableNumberType?
    let optOutListName: Swift.String?
    let poolId: Swift.String?
    let registrationId: Swift.String?
    let deletionProtectionEnabled: Swift.Bool?
    let tags: [PinpointSmsVoiceV2ClientTypes.Tag]?
    let clientToken: Swift.String?
}

extension RequestPhoneNumberInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientToken = "ClientToken"
        case deletionProtectionEnabled = "DeletionProtectionEnabled"
        case isoCountryCode = "IsoCountryCode"
        case messageType = "MessageType"
        case numberCapabilities = "NumberCapabilities"
        case numberType = "NumberType"
        case optOutListName = "OptOutListName"
        case poolId = "PoolId"
        case registrationId = "RegistrationId"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let isoCountryCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .isoCountryCode)
        isoCountryCode = isoCountryCodeDecoded
        let messageTypeDecoded = try containerValues.decodeIfPresent(PinpointSmsVoiceV2ClientTypes.MessageType.self, forKey: .messageType)
        messageType = messageTypeDecoded
        let numberCapabilitiesContainer = try containerValues.decodeIfPresent([PinpointSmsVoiceV2ClientTypes.NumberCapability?].self, forKey: .numberCapabilities)
        var numberCapabilitiesDecoded0:[PinpointSmsVoiceV2ClientTypes.NumberCapability]? = nil
        if let numberCapabilitiesContainer = numberCapabilitiesContainer {
            numberCapabilitiesDecoded0 = [PinpointSmsVoiceV2ClientTypes.NumberCapability]()
            for string0 in numberCapabilitiesContainer {
                if let string0 = string0 {
                    numberCapabilitiesDecoded0?.append(string0)
                }
            }
        }
        numberCapabilities = numberCapabilitiesDecoded0
        let numberTypeDecoded = try containerValues.decodeIfPresent(PinpointSmsVoiceV2ClientTypes.RequestableNumberType.self, forKey: .numberType)
        numberType = numberTypeDecoded
        let optOutListNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .optOutListName)
        optOutListName = optOutListNameDecoded
        let poolIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .poolId)
        poolId = poolIdDecoded
        let registrationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .registrationId)
        registrationId = registrationIdDecoded
        let deletionProtectionEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .deletionProtectionEnabled)
        deletionProtectionEnabled = deletionProtectionEnabledDecoded
        let tagsContainer = try containerValues.decodeIfPresent([PinpointSmsVoiceV2ClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[PinpointSmsVoiceV2ClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [PinpointSmsVoiceV2ClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let clientTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientToken)
        clientToken = clientTokenDecoded
    }
}
