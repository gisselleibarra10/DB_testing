// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension PinpointSmsVoiceV2ClientTypes.ConfigurationSetInformation: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configurationSetArn = "ConfigurationSetArn"
        case configurationSetName = "ConfigurationSetName"
        case createdTimestamp = "CreatedTimestamp"
        case defaultMessageType = "DefaultMessageType"
        case defaultSenderId = "DefaultSenderId"
        case eventDestinations = "EventDestinations"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let configurationSetArn = self.configurationSetArn {
            try encodeContainer.encode(configurationSetArn, forKey: .configurationSetArn)
        }
        if let configurationSetName = self.configurationSetName {
            try encodeContainer.encode(configurationSetName, forKey: .configurationSetName)
        }
        if let createdTimestamp = self.createdTimestamp {
            try encodeContainer.encode(createdTimestamp.timeIntervalSince1970, forKey: .createdTimestamp)
        }
        if let defaultMessageType = self.defaultMessageType {
            try encodeContainer.encode(defaultMessageType.rawValue, forKey: .defaultMessageType)
        }
        if let defaultSenderId = self.defaultSenderId {
            try encodeContainer.encode(defaultSenderId, forKey: .defaultSenderId)
        }
        if let eventDestinations = eventDestinations {
            var eventDestinationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .eventDestinations)
            for eventdestinationlist0 in eventDestinations {
                try eventDestinationsContainer.encode(eventdestinationlist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let configurationSetArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .configurationSetArn)
        configurationSetArn = configurationSetArnDecoded
        let configurationSetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .configurationSetName)
        configurationSetName = configurationSetNameDecoded
        let eventDestinationsContainer = try containerValues.decodeIfPresent([PinpointSmsVoiceV2ClientTypes.EventDestination?].self, forKey: .eventDestinations)
        var eventDestinationsDecoded0:[PinpointSmsVoiceV2ClientTypes.EventDestination]? = nil
        if let eventDestinationsContainer = eventDestinationsContainer {
            eventDestinationsDecoded0 = [PinpointSmsVoiceV2ClientTypes.EventDestination]()
            for structure0 in eventDestinationsContainer {
                if let structure0 = structure0 {
                    eventDestinationsDecoded0?.append(structure0)
                }
            }
        }
        eventDestinations = eventDestinationsDecoded0
        let defaultMessageTypeDecoded = try containerValues.decodeIfPresent(PinpointSmsVoiceV2ClientTypes.MessageType.self, forKey: .defaultMessageType)
        defaultMessageType = defaultMessageTypeDecoded
        let defaultSenderIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .defaultSenderId)
        defaultSenderId = defaultSenderIdDecoded
        let createdTimestampDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdTimestamp)
        createdTimestamp = createdTimestampDecoded
    }
}
