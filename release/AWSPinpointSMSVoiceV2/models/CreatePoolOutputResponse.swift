// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct CreatePoolOutputResponse: Swift.Equatable {
    /// The time when the pool was created, in [UNIX epoch time](https://www.epochconverter.com/) format.
    public var createdTimestamp: ClientRuntime.Date?
    /// When set to true deletion protection is enabled. By default this is set to false.
    public var deletionProtectionEnabled: Swift.Bool
    /// The type of message for the pool to use.
    public var messageType: PinpointSmsVoiceV2ClientTypes.MessageType?
    /// The name of the OptOutList associated with the pool.
    public var optOutListName: Swift.String?
    /// The Amazon Resource Name (ARN) for the pool.
    public var poolArn: Swift.String?
    /// The unique identifier for the pool.
    public var poolId: Swift.String?
    /// By default this is set to false. When an end recipient sends a message that begins with HELP or STOP to one of your dedicated numbers, Amazon Pinpoint automatically replies with a customizable message and adds the end recipient to the OptOutList. When set to true you're responsible for responding to HELP and STOP requests. You're also responsible for tracking and honoring opt-out requests.
    public var selfManagedOptOutsEnabled: Swift.Bool
    /// Indicates whether shared routes are enabled for the pool.
    public var sharedRoutesEnabled: Swift.Bool
    /// The current status of the pool.
    ///
    /// * CREATING: The pool is currently being created and isn't yet available for use.
    ///
    /// * ACTIVE: The pool is active and available for use.
    ///
    /// * DELETING: The pool is being deleted.
    public var status: PinpointSmsVoiceV2ClientTypes.PoolStatus?
    /// An array of tags (key and value pairs) associated with the pool.
    public var tags: [PinpointSmsVoiceV2ClientTypes.Tag]?
    /// The Amazon Resource Name (ARN) of the two way channel.
    public var twoWayChannelArn: Swift.String?
    /// By default this is set to false. When set to true you can receive incoming text messages from your end recipients.
    public var twoWayEnabled: Swift.Bool

    public init (
        createdTimestamp: ClientRuntime.Date? = nil,
        deletionProtectionEnabled: Swift.Bool = false,
        messageType: PinpointSmsVoiceV2ClientTypes.MessageType? = nil,
        optOutListName: Swift.String? = nil,
        poolArn: Swift.String? = nil,
        poolId: Swift.String? = nil,
        selfManagedOptOutsEnabled: Swift.Bool = false,
        sharedRoutesEnabled: Swift.Bool = false,
        status: PinpointSmsVoiceV2ClientTypes.PoolStatus? = nil,
        tags: [PinpointSmsVoiceV2ClientTypes.Tag]? = nil,
        twoWayChannelArn: Swift.String? = nil,
        twoWayEnabled: Swift.Bool = false
    )
    {
        self.createdTimestamp = createdTimestamp
        self.deletionProtectionEnabled = deletionProtectionEnabled
        self.messageType = messageType
        self.optOutListName = optOutListName
        self.poolArn = poolArn
        self.poolId = poolId
        self.selfManagedOptOutsEnabled = selfManagedOptOutsEnabled
        self.sharedRoutesEnabled = sharedRoutesEnabled
        self.status = status
        self.tags = tags
        self.twoWayChannelArn = twoWayChannelArn
        self.twoWayEnabled = twoWayEnabled
    }
}
