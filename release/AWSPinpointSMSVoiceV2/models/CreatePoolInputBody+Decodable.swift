// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreatePoolInputBody: Swift.Equatable {
    let originationIdentity: Swift.String?
    let isoCountryCode: Swift.String?
    let messageType: PinpointSmsVoiceV2ClientTypes.MessageType?
    let deletionProtectionEnabled: Swift.Bool?
    let tags: [PinpointSmsVoiceV2ClientTypes.Tag]?
    let clientToken: Swift.String?
}

extension CreatePoolInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientToken = "ClientToken"
        case deletionProtectionEnabled = "DeletionProtectionEnabled"
        case isoCountryCode = "IsoCountryCode"
        case messageType = "MessageType"
        case originationIdentity = "OriginationIdentity"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let originationIdentityDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .originationIdentity)
        originationIdentity = originationIdentityDecoded
        let isoCountryCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .isoCountryCode)
        isoCountryCode = isoCountryCodeDecoded
        let messageTypeDecoded = try containerValues.decodeIfPresent(PinpointSmsVoiceV2ClientTypes.MessageType.self, forKey: .messageType)
        messageType = messageTypeDecoded
        let deletionProtectionEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .deletionProtectionEnabled)
        deletionProtectionEnabled = deletionProtectionEnabledDecoded
        let tagsContainer = try containerValues.decodeIfPresent([PinpointSmsVoiceV2ClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[PinpointSmsVoiceV2ClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [PinpointSmsVoiceV2ClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let clientTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientToken)
        clientToken = clientTokenDecoded
    }
}
