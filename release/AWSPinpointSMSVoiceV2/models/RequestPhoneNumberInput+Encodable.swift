// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension RequestPhoneNumberInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientToken = "ClientToken"
        case deletionProtectionEnabled = "DeletionProtectionEnabled"
        case isoCountryCode = "IsoCountryCode"
        case messageType = "MessageType"
        case numberCapabilities = "NumberCapabilities"
        case numberType = "NumberType"
        case optOutListName = "OptOutListName"
        case poolId = "PoolId"
        case registrationId = "RegistrationId"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientToken = self.clientToken {
            try encodeContainer.encode(clientToken, forKey: .clientToken)
        }
        if let deletionProtectionEnabled = self.deletionProtectionEnabled {
            try encodeContainer.encode(deletionProtectionEnabled, forKey: .deletionProtectionEnabled)
        }
        if let isoCountryCode = self.isoCountryCode {
            try encodeContainer.encode(isoCountryCode, forKey: .isoCountryCode)
        }
        if let messageType = self.messageType {
            try encodeContainer.encode(messageType.rawValue, forKey: .messageType)
        }
        if let numberCapabilities = numberCapabilities {
            var numberCapabilitiesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .numberCapabilities)
            for numbercapabilitylist0 in numberCapabilities {
                try numberCapabilitiesContainer.encode(numbercapabilitylist0.rawValue)
            }
        }
        if let numberType = self.numberType {
            try encodeContainer.encode(numberType.rawValue, forKey: .numberType)
        }
        if let optOutListName = self.optOutListName {
            try encodeContainer.encode(optOutListName, forKey: .optOutListName)
        }
        if let poolId = self.poolId {
            try encodeContainer.encode(poolId, forKey: .poolId)
        }
        if let registrationId = self.registrationId {
            try encodeContainer.encode(registrationId, forKey: .registrationId)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }
}
