// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension PinpointSmsVoiceV2ClientTypes.PoolInformation: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createdTimestamp = "CreatedTimestamp"
        case deletionProtectionEnabled = "DeletionProtectionEnabled"
        case messageType = "MessageType"
        case optOutListName = "OptOutListName"
        case poolArn = "PoolArn"
        case poolId = "PoolId"
        case selfManagedOptOutsEnabled = "SelfManagedOptOutsEnabled"
        case sharedRoutesEnabled = "SharedRoutesEnabled"
        case status = "Status"
        case twoWayChannelArn = "TwoWayChannelArn"
        case twoWayEnabled = "TwoWayEnabled"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let createdTimestamp = self.createdTimestamp {
            try encodeContainer.encode(createdTimestamp.timeIntervalSince1970, forKey: .createdTimestamp)
        }
        if deletionProtectionEnabled != false {
            try encodeContainer.encode(deletionProtectionEnabled, forKey: .deletionProtectionEnabled)
        }
        if let messageType = self.messageType {
            try encodeContainer.encode(messageType.rawValue, forKey: .messageType)
        }
        if let optOutListName = self.optOutListName {
            try encodeContainer.encode(optOutListName, forKey: .optOutListName)
        }
        if let poolArn = self.poolArn {
            try encodeContainer.encode(poolArn, forKey: .poolArn)
        }
        if let poolId = self.poolId {
            try encodeContainer.encode(poolId, forKey: .poolId)
        }
        if selfManagedOptOutsEnabled != false {
            try encodeContainer.encode(selfManagedOptOutsEnabled, forKey: .selfManagedOptOutsEnabled)
        }
        if sharedRoutesEnabled != false {
            try encodeContainer.encode(sharedRoutesEnabled, forKey: .sharedRoutesEnabled)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let twoWayChannelArn = self.twoWayChannelArn {
            try encodeContainer.encode(twoWayChannelArn, forKey: .twoWayChannelArn)
        }
        if twoWayEnabled != false {
            try encodeContainer.encode(twoWayEnabled, forKey: .twoWayEnabled)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let poolArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .poolArn)
        poolArn = poolArnDecoded
        let poolIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .poolId)
        poolId = poolIdDecoded
        let statusDecoded = try containerValues.decodeIfPresent(PinpointSmsVoiceV2ClientTypes.PoolStatus.self, forKey: .status)
        status = statusDecoded
        let messageTypeDecoded = try containerValues.decodeIfPresent(PinpointSmsVoiceV2ClientTypes.MessageType.self, forKey: .messageType)
        messageType = messageTypeDecoded
        let twoWayEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .twoWayEnabled) ?? false
        twoWayEnabled = twoWayEnabledDecoded
        let twoWayChannelArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .twoWayChannelArn)
        twoWayChannelArn = twoWayChannelArnDecoded
        let selfManagedOptOutsEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .selfManagedOptOutsEnabled) ?? false
        selfManagedOptOutsEnabled = selfManagedOptOutsEnabledDecoded
        let optOutListNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .optOutListName)
        optOutListName = optOutListNameDecoded
        let sharedRoutesEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .sharedRoutesEnabled) ?? false
        sharedRoutesEnabled = sharedRoutesEnabledDecoded
        let deletionProtectionEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .deletionProtectionEnabled) ?? false
        deletionProtectionEnabled = deletionProtectionEnabledDecoded
        let createdTimestampDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdTimestamp)
        createdTimestamp = createdTimestampDecoded
    }
}
