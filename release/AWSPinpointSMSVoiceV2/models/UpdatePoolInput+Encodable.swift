// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension UpdatePoolInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deletionProtectionEnabled = "DeletionProtectionEnabled"
        case optOutListName = "OptOutListName"
        case poolId = "PoolId"
        case selfManagedOptOutsEnabled = "SelfManagedOptOutsEnabled"
        case sharedRoutesEnabled = "SharedRoutesEnabled"
        case twoWayChannelArn = "TwoWayChannelArn"
        case twoWayEnabled = "TwoWayEnabled"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let deletionProtectionEnabled = self.deletionProtectionEnabled {
            try encodeContainer.encode(deletionProtectionEnabled, forKey: .deletionProtectionEnabled)
        }
        if let optOutListName = self.optOutListName {
            try encodeContainer.encode(optOutListName, forKey: .optOutListName)
        }
        if let poolId = self.poolId {
            try encodeContainer.encode(poolId, forKey: .poolId)
        }
        if let selfManagedOptOutsEnabled = self.selfManagedOptOutsEnabled {
            try encodeContainer.encode(selfManagedOptOutsEnabled, forKey: .selfManagedOptOutsEnabled)
        }
        if let sharedRoutesEnabled = self.sharedRoutesEnabled {
            try encodeContainer.encode(sharedRoutesEnabled, forKey: .sharedRoutesEnabled)
        }
        if let twoWayChannelArn = self.twoWayChannelArn {
            try encodeContainer.encode(twoWayChannelArn, forKey: .twoWayChannelArn)
        }
        if let twoWayEnabled = self.twoWayEnabled {
            try encodeContainer.encode(twoWayEnabled, forKey: .twoWayEnabled)
        }
    }
}
