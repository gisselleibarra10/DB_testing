// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct UpdateEventDestinationInputBody: Swift.Equatable {
    let configurationSetName: Swift.String?
    let eventDestinationName: Swift.String?
    let enabled: Swift.Bool?
    let matchingEventTypes: [PinpointSmsVoiceV2ClientTypes.EventType]?
    let cloudWatchLogsDestination: PinpointSmsVoiceV2ClientTypes.CloudWatchLogsDestination?
    let kinesisFirehoseDestination: PinpointSmsVoiceV2ClientTypes.KinesisFirehoseDestination?
    let snsDestination: PinpointSmsVoiceV2ClientTypes.SnsDestination?
}

extension UpdateEventDestinationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cloudWatchLogsDestination = "CloudWatchLogsDestination"
        case configurationSetName = "ConfigurationSetName"
        case enabled = "Enabled"
        case eventDestinationName = "EventDestinationName"
        case kinesisFirehoseDestination = "KinesisFirehoseDestination"
        case matchingEventTypes = "MatchingEventTypes"
        case snsDestination = "SnsDestination"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let configurationSetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .configurationSetName)
        configurationSetName = configurationSetNameDecoded
        let eventDestinationNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .eventDestinationName)
        eventDestinationName = eventDestinationNameDecoded
        let enabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enabled)
        enabled = enabledDecoded
        let matchingEventTypesContainer = try containerValues.decodeIfPresent([PinpointSmsVoiceV2ClientTypes.EventType?].self, forKey: .matchingEventTypes)
        var matchingEventTypesDecoded0:[PinpointSmsVoiceV2ClientTypes.EventType]? = nil
        if let matchingEventTypesContainer = matchingEventTypesContainer {
            matchingEventTypesDecoded0 = [PinpointSmsVoiceV2ClientTypes.EventType]()
            for string0 in matchingEventTypesContainer {
                if let string0 = string0 {
                    matchingEventTypesDecoded0?.append(string0)
                }
            }
        }
        matchingEventTypes = matchingEventTypesDecoded0
        let cloudWatchLogsDestinationDecoded = try containerValues.decodeIfPresent(PinpointSmsVoiceV2ClientTypes.CloudWatchLogsDestination.self, forKey: .cloudWatchLogsDestination)
        cloudWatchLogsDestination = cloudWatchLogsDestinationDecoded
        let kinesisFirehoseDestinationDecoded = try containerValues.decodeIfPresent(PinpointSmsVoiceV2ClientTypes.KinesisFirehoseDestination.self, forKey: .kinesisFirehoseDestination)
        kinesisFirehoseDestination = kinesisFirehoseDestinationDecoded
        let snsDestinationDecoded = try containerValues.decodeIfPresent(PinpointSmsVoiceV2ClientTypes.SnsDestination.self, forKey: .snsDestination)
        snsDestination = snsDestinationDecoded
    }
}
