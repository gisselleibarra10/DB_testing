// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct SendTextMessageInputBody: Swift.Equatable {
    let destinationPhoneNumber: Swift.String?
    let originationIdentity: Swift.String?
    let messageBody: Swift.String?
    let messageType: PinpointSmsVoiceV2ClientTypes.MessageType?
    let keyword: Swift.String?
    let configurationSetName: Swift.String?
    let maxPrice: Swift.String?
    let timeToLive: Swift.Int?
    let context: [Swift.String:Swift.String]?
    let destinationCountryParameters: [Swift.String:Swift.String]?
    let dryRun: Swift.Bool
}

extension SendTextMessageInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configurationSetName = "ConfigurationSetName"
        case context = "Context"
        case destinationCountryParameters = "DestinationCountryParameters"
        case destinationPhoneNumber = "DestinationPhoneNumber"
        case dryRun = "DryRun"
        case keyword = "Keyword"
        case maxPrice = "MaxPrice"
        case messageBody = "MessageBody"
        case messageType = "MessageType"
        case originationIdentity = "OriginationIdentity"
        case timeToLive = "TimeToLive"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let destinationPhoneNumberDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .destinationPhoneNumber)
        destinationPhoneNumber = destinationPhoneNumberDecoded
        let originationIdentityDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .originationIdentity)
        originationIdentity = originationIdentityDecoded
        let messageBodyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .messageBody)
        messageBody = messageBodyDecoded
        let messageTypeDecoded = try containerValues.decodeIfPresent(PinpointSmsVoiceV2ClientTypes.MessageType.self, forKey: .messageType)
        messageType = messageTypeDecoded
        let keywordDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyword)
        keyword = keywordDecoded
        let configurationSetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .configurationSetName)
        configurationSetName = configurationSetNameDecoded
        let maxPriceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .maxPrice)
        maxPrice = maxPriceDecoded
        let timeToLiveDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .timeToLive)
        timeToLive = timeToLiveDecoded
        let contextContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .context)
        var contextDecoded0: [Swift.String:Swift.String]? = nil
        if let contextContainer = contextContainer {
            contextDecoded0 = [Swift.String:Swift.String]()
            for (key0, contextvalue0) in contextContainer {
                if let contextvalue0 = contextvalue0 {
                    contextDecoded0?[key0] = contextvalue0
                }
            }
        }
        context = contextDecoded0
        let destinationCountryParametersContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .destinationCountryParameters)
        var destinationCountryParametersDecoded0: [Swift.String:Swift.String]? = nil
        if let destinationCountryParametersContainer = destinationCountryParametersContainer {
            destinationCountryParametersDecoded0 = [Swift.String:Swift.String]()
            for (key0, destinationcountryparametervalue0) in destinationCountryParametersContainer {
                if let destinationcountryparametervalue0 = destinationcountryparametervalue0 {
                    destinationCountryParametersDecoded0?[key0] = destinationcountryparametervalue0
                }
            }
        }
        destinationCountryParameters = destinationCountryParametersDecoded0
        let dryRunDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .dryRun) ?? false
        dryRun = dryRunDecoded
    }
}
