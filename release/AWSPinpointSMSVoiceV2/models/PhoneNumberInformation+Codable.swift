// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension PinpointSmsVoiceV2ClientTypes.PhoneNumberInformation: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createdTimestamp = "CreatedTimestamp"
        case deletionProtectionEnabled = "DeletionProtectionEnabled"
        case isoCountryCode = "IsoCountryCode"
        case messageType = "MessageType"
        case monthlyLeasingPrice = "MonthlyLeasingPrice"
        case numberCapabilities = "NumberCapabilities"
        case numberType = "NumberType"
        case optOutListName = "OptOutListName"
        case phoneNumber = "PhoneNumber"
        case phoneNumberArn = "PhoneNumberArn"
        case phoneNumberId = "PhoneNumberId"
        case poolId = "PoolId"
        case selfManagedOptOutsEnabled = "SelfManagedOptOutsEnabled"
        case status = "Status"
        case twoWayChannelArn = "TwoWayChannelArn"
        case twoWayEnabled = "TwoWayEnabled"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let createdTimestamp = self.createdTimestamp {
            try encodeContainer.encode(createdTimestamp.timeIntervalSince1970, forKey: .createdTimestamp)
        }
        if deletionProtectionEnabled != false {
            try encodeContainer.encode(deletionProtectionEnabled, forKey: .deletionProtectionEnabled)
        }
        if let isoCountryCode = self.isoCountryCode {
            try encodeContainer.encode(isoCountryCode, forKey: .isoCountryCode)
        }
        if let messageType = self.messageType {
            try encodeContainer.encode(messageType.rawValue, forKey: .messageType)
        }
        if let monthlyLeasingPrice = self.monthlyLeasingPrice {
            try encodeContainer.encode(monthlyLeasingPrice, forKey: .monthlyLeasingPrice)
        }
        if let numberCapabilities = numberCapabilities {
            var numberCapabilitiesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .numberCapabilities)
            for numbercapabilitylist0 in numberCapabilities {
                try numberCapabilitiesContainer.encode(numbercapabilitylist0.rawValue)
            }
        }
        if let numberType = self.numberType {
            try encodeContainer.encode(numberType.rawValue, forKey: .numberType)
        }
        if let optOutListName = self.optOutListName {
            try encodeContainer.encode(optOutListName, forKey: .optOutListName)
        }
        if let phoneNumber = self.phoneNumber {
            try encodeContainer.encode(phoneNumber, forKey: .phoneNumber)
        }
        if let phoneNumberArn = self.phoneNumberArn {
            try encodeContainer.encode(phoneNumberArn, forKey: .phoneNumberArn)
        }
        if let phoneNumberId = self.phoneNumberId {
            try encodeContainer.encode(phoneNumberId, forKey: .phoneNumberId)
        }
        if let poolId = self.poolId {
            try encodeContainer.encode(poolId, forKey: .poolId)
        }
        if selfManagedOptOutsEnabled != false {
            try encodeContainer.encode(selfManagedOptOutsEnabled, forKey: .selfManagedOptOutsEnabled)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let twoWayChannelArn = self.twoWayChannelArn {
            try encodeContainer.encode(twoWayChannelArn, forKey: .twoWayChannelArn)
        }
        if twoWayEnabled != false {
            try encodeContainer.encode(twoWayEnabled, forKey: .twoWayEnabled)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let phoneNumberArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .phoneNumberArn)
        phoneNumberArn = phoneNumberArnDecoded
        let phoneNumberIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .phoneNumberId)
        phoneNumberId = phoneNumberIdDecoded
        let phoneNumberDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .phoneNumber)
        phoneNumber = phoneNumberDecoded
        let statusDecoded = try containerValues.decodeIfPresent(PinpointSmsVoiceV2ClientTypes.NumberStatus.self, forKey: .status)
        status = statusDecoded
        let isoCountryCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .isoCountryCode)
        isoCountryCode = isoCountryCodeDecoded
        let messageTypeDecoded = try containerValues.decodeIfPresent(PinpointSmsVoiceV2ClientTypes.MessageType.self, forKey: .messageType)
        messageType = messageTypeDecoded
        let numberCapabilitiesContainer = try containerValues.decodeIfPresent([PinpointSmsVoiceV2ClientTypes.NumberCapability?].self, forKey: .numberCapabilities)
        var numberCapabilitiesDecoded0:[PinpointSmsVoiceV2ClientTypes.NumberCapability]? = nil
        if let numberCapabilitiesContainer = numberCapabilitiesContainer {
            numberCapabilitiesDecoded0 = [PinpointSmsVoiceV2ClientTypes.NumberCapability]()
            for string0 in numberCapabilitiesContainer {
                if let string0 = string0 {
                    numberCapabilitiesDecoded0?.append(string0)
                }
            }
        }
        numberCapabilities = numberCapabilitiesDecoded0
        let numberTypeDecoded = try containerValues.decodeIfPresent(PinpointSmsVoiceV2ClientTypes.NumberType.self, forKey: .numberType)
        numberType = numberTypeDecoded
        let monthlyLeasingPriceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .monthlyLeasingPrice)
        monthlyLeasingPrice = monthlyLeasingPriceDecoded
        let twoWayEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .twoWayEnabled) ?? false
        twoWayEnabled = twoWayEnabledDecoded
        let twoWayChannelArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .twoWayChannelArn)
        twoWayChannelArn = twoWayChannelArnDecoded
        let selfManagedOptOutsEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .selfManagedOptOutsEnabled) ?? false
        selfManagedOptOutsEnabled = selfManagedOptOutsEnabledDecoded
        let optOutListNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .optOutListName)
        optOutListName = optOutListNameDecoded
        let deletionProtectionEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .deletionProtectionEnabled) ?? false
        deletionProtectionEnabled = deletionProtectionEnabledDecoded
        let poolIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .poolId)
        poolId = poolIdDecoded
        let createdTimestampDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdTimestamp)
        createdTimestamp = createdTimestampDecoded
    }
}
