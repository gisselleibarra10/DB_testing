// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetAccountAuthorizationDetailsInputBody: Swift.Equatable {
    let filter: [IamClientTypes.EntityType]?
    let maxItems: Swift.Int?
    let marker: Swift.String?
}

extension GetAccountAuthorizationDetailsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filter = "Filter"
        case marker = "Marker"
        case maxItems = "MaxItems"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.filter) {
            struct KeyVal0{struct member{}}
            let filterWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .filter)
            if let filterWrappedContainer = filterWrappedContainer {
                let filterContainer = try filterWrappedContainer.decodeIfPresent([IamClientTypes.EntityType].self, forKey: .member)
                var filterBuffer:[IamClientTypes.EntityType]? = nil
                if let filterContainer = filterContainer {
                    filterBuffer = [IamClientTypes.EntityType]()
                    for stringContainer0 in filterContainer {
                        filterBuffer?.append(stringContainer0)
                    }
                }
                filter = filterBuffer
            } else {
                filter = []
            }
        } else {
            filter = nil
        }
        let maxItemsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxItems)
        maxItems = maxItemsDecoded
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
    }
}
