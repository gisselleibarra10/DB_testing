// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension IamClientTypes.VirtualMFADevice: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case base32StringSeed = "Base32StringSeed"
        case enableDate = "EnableDate"
        case qRCodePNG = "QRCodePNG"
        case serialNumber = "SerialNumber"
        case tags = "Tags"
        case user = "User"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let base32StringSeed = base32StringSeed {
            try container.encode(base32StringSeed.base64EncodedString(), forKey: ClientRuntime.Key("Base32StringSeed"))
        }
        if let enableDate = enableDate {
            try container.encode(ClientRuntime.TimestampWrapper(enableDate, format: .dateTime), forKey: ClientRuntime.Key("enableDate"))
        }
        if let qRCodePNG = qRCodePNG {
            try container.encode(qRCodePNG.base64EncodedString(), forKey: ClientRuntime.Key("QRCodePNG"))
        }
        if let serialNumber = serialNumber {
            try container.encode(serialNumber, forKey: ClientRuntime.Key("SerialNumber"))
        }
        if let tags = tags {
            var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
            for (index0, tag0) in tags.enumerated() {
                try tagsContainer.encode(tag0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let user = user {
            try container.encode(user, forKey: ClientRuntime.Key("User"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let serialNumberDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serialNumber)
        serialNumber = serialNumberDecoded
        if containerValues.contains(.base32StringSeed) {
            do {
                let base32StringSeedDecoded = try containerValues.decodeIfPresent(ClientRuntime.Data.self, forKey: .base32StringSeed)
                base32StringSeed = base32StringSeedDecoded
            } catch {
                base32StringSeed = "".data(using: .utf8)
            }
        } else {
            base32StringSeed = nil
        }
        if containerValues.contains(.qRCodePNG) {
            do {
                let qRCodePNGDecoded = try containerValues.decodeIfPresent(ClientRuntime.Data.self, forKey: .qRCodePNG)
                qRCodePNG = qRCodePNGDecoded
            } catch {
                qRCodePNG = "".data(using: .utf8)
            }
        } else {
            qRCodePNG = nil
        }
        let userDecoded = try containerValues.decodeIfPresent(IamClientTypes.User.self, forKey: .user)
        user = userDecoded
        let enableDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .enableDate)
        var enableDateBuffer:ClientRuntime.Date? = nil
        if let enableDateDecoded = enableDateDecoded {
            enableDateBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(enableDateDecoded, format: .dateTime)
        }
        enableDate = enableDateBuffer
        if containerValues.contains(.tags) {
            struct KeyVal0{struct member{}}
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .tags)
            if let tagsWrappedContainer = tagsWrappedContainer {
                let tagsContainer = try tagsWrappedContainer.decodeIfPresent([IamClientTypes.Tag].self, forKey: .member)
                var tagsBuffer:[IamClientTypes.Tag]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [IamClientTypes.Tag]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
    }
}
