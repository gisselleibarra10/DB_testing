// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListGroupsForUserOutputResponseBody: Swift.Equatable {
    let groups: [IamClientTypes.Group]?
    let isTruncated: Swift.Bool
    let marker: Swift.String?
}

extension ListGroupsForUserOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case groups = "Groups"
        case isTruncated = "IsTruncated"
        case marker = "Marker"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("ListGroupsForUserResult"))
        if containerValues.contains(.groups) {
            struct KeyVal0{struct member{}}
            let groupsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .groups)
            if let groupsWrappedContainer = groupsWrappedContainer {
                let groupsContainer = try groupsWrappedContainer.decodeIfPresent([IamClientTypes.Group].self, forKey: .member)
                var groupsBuffer:[IamClientTypes.Group]? = nil
                if let groupsContainer = groupsContainer {
                    groupsBuffer = [IamClientTypes.Group]()
                    for structureContainer0 in groupsContainer {
                        groupsBuffer?.append(structureContainer0)
                    }
                }
                groups = groupsBuffer
            } else {
                groups = []
            }
        } else {
            groups = nil
        }
        let isTruncatedDecoded = try containerValues.decode(Swift.Bool.self, forKey: .isTruncated)
        isTruncated = isTruncatedDecoded
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
    }
}
