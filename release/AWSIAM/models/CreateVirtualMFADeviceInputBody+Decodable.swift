// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateVirtualMFADeviceInputBody: Swift.Equatable {
    let path: Swift.String?
    let virtualMFADeviceName: Swift.String?
    let tags: [IamClientTypes.Tag]?
}

extension CreateVirtualMFADeviceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case path = "Path"
        case tags = "Tags"
        case virtualMFADeviceName = "VirtualMFADeviceName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .path)
        path = pathDecoded
        let virtualMFADeviceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .virtualMFADeviceName)
        virtualMFADeviceName = virtualMFADeviceNameDecoded
        if containerValues.contains(.tags) {
            struct KeyVal0{struct member{}}
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .tags)
            if let tagsWrappedContainer = tagsWrappedContainer {
                let tagsContainer = try tagsWrappedContainer.decodeIfPresent([IamClientTypes.Tag].self, forKey: .member)
                var tagsBuffer:[IamClientTypes.Tag]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [IamClientTypes.Tag]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
    }
}
