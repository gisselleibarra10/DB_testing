// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension IamClientTypes.PasswordPolicy: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case allowUsersToChangePassword = "AllowUsersToChangePassword"
        case expirePasswords = "ExpirePasswords"
        case hardExpiry = "HardExpiry"
        case maxPasswordAge = "MaxPasswordAge"
        case minimumPasswordLength = "MinimumPasswordLength"
        case passwordReusePrevention = "PasswordReusePrevention"
        case requireLowercaseCharacters = "RequireLowercaseCharacters"
        case requireNumbers = "RequireNumbers"
        case requireSymbols = "RequireSymbols"
        case requireUppercaseCharacters = "RequireUppercaseCharacters"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if allowUsersToChangePassword != false {
            try container.encode(allowUsersToChangePassword, forKey: ClientRuntime.Key("AllowUsersToChangePassword"))
        }
        if expirePasswords != false {
            try container.encode(expirePasswords, forKey: ClientRuntime.Key("ExpirePasswords"))
        }
        if let hardExpiry = hardExpiry {
            try container.encode(hardExpiry, forKey: ClientRuntime.Key("HardExpiry"))
        }
        if let maxPasswordAge = maxPasswordAge {
            try container.encode(maxPasswordAge, forKey: ClientRuntime.Key("MaxPasswordAge"))
        }
        if let minimumPasswordLength = minimumPasswordLength {
            try container.encode(minimumPasswordLength, forKey: ClientRuntime.Key("MinimumPasswordLength"))
        }
        if let passwordReusePrevention = passwordReusePrevention {
            try container.encode(passwordReusePrevention, forKey: ClientRuntime.Key("PasswordReusePrevention"))
        }
        if requireLowercaseCharacters != false {
            try container.encode(requireLowercaseCharacters, forKey: ClientRuntime.Key("RequireLowercaseCharacters"))
        }
        if requireNumbers != false {
            try container.encode(requireNumbers, forKey: ClientRuntime.Key("RequireNumbers"))
        }
        if requireSymbols != false {
            try container.encode(requireSymbols, forKey: ClientRuntime.Key("RequireSymbols"))
        }
        if requireUppercaseCharacters != false {
            try container.encode(requireUppercaseCharacters, forKey: ClientRuntime.Key("RequireUppercaseCharacters"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let minimumPasswordLengthDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .minimumPasswordLength)
        minimumPasswordLength = minimumPasswordLengthDecoded
        let requireSymbolsDecoded = try containerValues.decode(Swift.Bool.self, forKey: .requireSymbols)
        requireSymbols = requireSymbolsDecoded
        let requireNumbersDecoded = try containerValues.decode(Swift.Bool.self, forKey: .requireNumbers)
        requireNumbers = requireNumbersDecoded
        let requireUppercaseCharactersDecoded = try containerValues.decode(Swift.Bool.self, forKey: .requireUppercaseCharacters)
        requireUppercaseCharacters = requireUppercaseCharactersDecoded
        let requireLowercaseCharactersDecoded = try containerValues.decode(Swift.Bool.self, forKey: .requireLowercaseCharacters)
        requireLowercaseCharacters = requireLowercaseCharactersDecoded
        let allowUsersToChangePasswordDecoded = try containerValues.decode(Swift.Bool.self, forKey: .allowUsersToChangePassword)
        allowUsersToChangePassword = allowUsersToChangePasswordDecoded
        let expirePasswordsDecoded = try containerValues.decode(Swift.Bool.self, forKey: .expirePasswords)
        expirePasswords = expirePasswordsDecoded
        let maxPasswordAgeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxPasswordAge)
        maxPasswordAge = maxPasswordAgeDecoded
        let passwordReusePreventionDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .passwordReusePrevention)
        passwordReusePrevention = passwordReusePreventionDecoded
        let hardExpiryDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .hardExpiry)
        hardExpiry = hardExpiryDecoded
    }
}
