// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListSSHPublicKeysOutputResponseBody: Swift.Equatable {
    let sSHPublicKeys: [IamClientTypes.SSHPublicKeyMetadata]?
    let isTruncated: Swift.Bool
    let marker: Swift.String?
}

extension ListSSHPublicKeysOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case isTruncated = "IsTruncated"
        case marker = "Marker"
        case sSHPublicKeys = "SSHPublicKeys"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("ListSSHPublicKeysResult"))
        if containerValues.contains(.sSHPublicKeys) {
            struct KeyVal0{struct member{}}
            let sSHPublicKeysWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .sSHPublicKeys)
            if let sSHPublicKeysWrappedContainer = sSHPublicKeysWrappedContainer {
                let sSHPublicKeysContainer = try sSHPublicKeysWrappedContainer.decodeIfPresent([IamClientTypes.SSHPublicKeyMetadata].self, forKey: .member)
                var sSHPublicKeysBuffer:[IamClientTypes.SSHPublicKeyMetadata]? = nil
                if let sSHPublicKeysContainer = sSHPublicKeysContainer {
                    sSHPublicKeysBuffer = [IamClientTypes.SSHPublicKeyMetadata]()
                    for structureContainer0 in sSHPublicKeysContainer {
                        sSHPublicKeysBuffer?.append(structureContainer0)
                    }
                }
                sSHPublicKeys = sSHPublicKeysBuffer
            } else {
                sSHPublicKeys = []
            }
        } else {
            sSHPublicKeys = nil
        }
        let isTruncatedDecoded = try containerValues.decode(Swift.Bool.self, forKey: .isTruncated)
        isTruncated = isTruncatedDecoded
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
    }
}
