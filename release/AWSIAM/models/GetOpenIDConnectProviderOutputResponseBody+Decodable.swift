// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetOpenIDConnectProviderOutputResponseBody: Swift.Equatable {
    let url: Swift.String?
    let clientIDList: [Swift.String]?
    let thumbprintList: [Swift.String]?
    let createDate: ClientRuntime.Date?
    let tags: [IamClientTypes.Tag]?
}

extension GetOpenIDConnectProviderOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientIDList = "ClientIDList"
        case createDate = "CreateDate"
        case tags = "Tags"
        case thumbprintList = "ThumbprintList"
        case url = "Url"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("GetOpenIDConnectProviderResult"))
        let urlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .url)
        url = urlDecoded
        if containerValues.contains(.clientIDList) {
            struct KeyVal0{struct member{}}
            let clientIDListWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .clientIDList)
            if let clientIDListWrappedContainer = clientIDListWrappedContainer {
                let clientIDListContainer = try clientIDListWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var clientIDListBuffer:[Swift.String]? = nil
                if let clientIDListContainer = clientIDListContainer {
                    clientIDListBuffer = [Swift.String]()
                    for stringContainer0 in clientIDListContainer {
                        clientIDListBuffer?.append(stringContainer0)
                    }
                }
                clientIDList = clientIDListBuffer
            } else {
                clientIDList = []
            }
        } else {
            clientIDList = nil
        }
        if containerValues.contains(.thumbprintList) {
            struct KeyVal0{struct member{}}
            let thumbprintListWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .thumbprintList)
            if let thumbprintListWrappedContainer = thumbprintListWrappedContainer {
                let thumbprintListContainer = try thumbprintListWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var thumbprintListBuffer:[Swift.String]? = nil
                if let thumbprintListContainer = thumbprintListContainer {
                    thumbprintListBuffer = [Swift.String]()
                    for stringContainer0 in thumbprintListContainer {
                        thumbprintListBuffer?.append(stringContainer0)
                    }
                }
                thumbprintList = thumbprintListBuffer
            } else {
                thumbprintList = []
            }
        } else {
            thumbprintList = nil
        }
        let createDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .createDate)
        var createDateBuffer:ClientRuntime.Date? = nil
        if let createDateDecoded = createDateDecoded {
            createDateBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(createDateDecoded, format: .dateTime)
        }
        createDate = createDateBuffer
        if containerValues.contains(.tags) {
            struct KeyVal0{struct member{}}
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .tags)
            if let tagsWrappedContainer = tagsWrappedContainer {
                let tagsContainer = try tagsWrappedContainer.decodeIfPresent([IamClientTypes.Tag].self, forKey: .member)
                var tagsBuffer:[IamClientTypes.Tag]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [IamClientTypes.Tag]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
    }
}
