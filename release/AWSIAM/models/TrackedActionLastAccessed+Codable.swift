// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension IamClientTypes.TrackedActionLastAccessed: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case actionName = "ActionName"
        case lastAccessedEntity = "LastAccessedEntity"
        case lastAccessedRegion = "LastAccessedRegion"
        case lastAccessedTime = "LastAccessedTime"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let actionName = actionName {
            try container.encode(actionName, forKey: ClientRuntime.Key("ActionName"))
        }
        if let lastAccessedEntity = lastAccessedEntity {
            try container.encode(lastAccessedEntity, forKey: ClientRuntime.Key("LastAccessedEntity"))
        }
        if let lastAccessedRegion = lastAccessedRegion {
            try container.encode(lastAccessedRegion, forKey: ClientRuntime.Key("LastAccessedRegion"))
        }
        if let lastAccessedTime = lastAccessedTime {
            try container.encode(ClientRuntime.TimestampWrapper(lastAccessedTime, format: .dateTime), forKey: ClientRuntime.Key("lastAccessedTime"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let actionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .actionName)
        actionName = actionNameDecoded
        let lastAccessedEntityDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastAccessedEntity)
        lastAccessedEntity = lastAccessedEntityDecoded
        let lastAccessedTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastAccessedTime)
        var lastAccessedTimeBuffer:ClientRuntime.Date? = nil
        if let lastAccessedTimeDecoded = lastAccessedTimeDecoded {
            lastAccessedTimeBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(lastAccessedTimeDecoded, format: .dateTime)
        }
        lastAccessedTime = lastAccessedTimeBuffer
        let lastAccessedRegionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastAccessedRegion)
        lastAccessedRegion = lastAccessedRegionDecoded
    }
}
