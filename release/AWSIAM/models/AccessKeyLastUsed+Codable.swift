// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension IamClientTypes.AccessKeyLastUsed: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case lastUsedDate = "LastUsedDate"
        case region = "Region"
        case serviceName = "ServiceName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let lastUsedDate = lastUsedDate {
            try container.encode(ClientRuntime.TimestampWrapper(lastUsedDate, format: .dateTime), forKey: ClientRuntime.Key("lastUsedDate"))
        }
        if let region = region {
            try container.encode(region, forKey: ClientRuntime.Key("Region"))
        }
        if let serviceName = serviceName {
            try container.encode(serviceName, forKey: ClientRuntime.Key("ServiceName"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let lastUsedDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastUsedDate)
        var lastUsedDateBuffer:ClientRuntime.Date? = nil
        if let lastUsedDateDecoded = lastUsedDateDecoded {
            lastUsedDateBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(lastUsedDateDecoded, format: .dateTime)
        }
        lastUsedDate = lastUsedDateBuffer
        let serviceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serviceName)
        serviceName = serviceNameDecoded
        let regionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .region)
        region = regionDecoded
    }
}
