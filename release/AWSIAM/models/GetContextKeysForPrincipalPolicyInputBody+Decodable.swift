// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetContextKeysForPrincipalPolicyInputBody: Swift.Equatable {
    let policySourceArn: Swift.String?
    let policyInputList: [Swift.String]?
}

extension GetContextKeysForPrincipalPolicyInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case policyInputList = "PolicyInputList"
        case policySourceArn = "PolicySourceArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let policySourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policySourceArn)
        policySourceArn = policySourceArnDecoded
        if containerValues.contains(.policyInputList) {
            struct KeyVal0{struct member{}}
            let policyInputListWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .policyInputList)
            if let policyInputListWrappedContainer = policyInputListWrappedContainer {
                let policyInputListContainer = try policyInputListWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var policyInputListBuffer:[Swift.String]? = nil
                if let policyInputListContainer = policyInputListContainer {
                    policyInputListBuffer = [Swift.String]()
                    for stringContainer0 in policyInputListContainer {
                        policyInputListBuffer?.append(stringContainer0)
                    }
                }
                policyInputList = policyInputListBuffer
            } else {
                policyInputList = []
            }
        } else {
            policyInputList = nil
        }
    }
}
