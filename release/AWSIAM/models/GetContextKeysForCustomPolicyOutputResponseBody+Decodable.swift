// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetContextKeysForCustomPolicyOutputResponseBody: Swift.Equatable {
    let contextKeyNames: [Swift.String]?
}

extension GetContextKeysForCustomPolicyOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case contextKeyNames = "ContextKeyNames"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("GetContextKeysForCustomPolicyResult"))
        if containerValues.contains(.contextKeyNames) {
            struct KeyVal0{struct member{}}
            let contextKeyNamesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .contextKeyNames)
            if let contextKeyNamesWrappedContainer = contextKeyNamesWrappedContainer {
                let contextKeyNamesContainer = try contextKeyNamesWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var contextKeyNamesBuffer:[Swift.String]? = nil
                if let contextKeyNamesContainer = contextKeyNamesContainer {
                    contextKeyNamesBuffer = [Swift.String]()
                    for stringContainer0 in contextKeyNamesContainer {
                        contextKeyNamesBuffer?.append(stringContainer0)
                    }
                }
                contextKeyNames = contextKeyNamesBuffer
            } else {
                contextKeyNames = []
            }
        } else {
            contextKeyNames = nil
        }
    }
}
