// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetServiceLastAccessedDetailsOutputResponseBody: Swift.Equatable {
    let jobStatus: IamClientTypes.JobStatusType?
    let jobType: IamClientTypes.AccessAdvisorUsageGranularityType?
    let jobCreationDate: ClientRuntime.Date?
    let servicesLastAccessed: [IamClientTypes.ServiceLastAccessed]?
    let jobCompletionDate: ClientRuntime.Date?
    let isTruncated: Swift.Bool
    let marker: Swift.String?
    let error: IamClientTypes.ErrorDetails?
}

extension GetServiceLastAccessedDetailsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case error = "Error"
        case isTruncated = "IsTruncated"
        case jobCompletionDate = "JobCompletionDate"
        case jobCreationDate = "JobCreationDate"
        case jobStatus = "JobStatus"
        case jobType = "JobType"
        case marker = "Marker"
        case servicesLastAccessed = "ServicesLastAccessed"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("GetServiceLastAccessedDetailsResult"))
        let jobStatusDecoded = try containerValues.decodeIfPresent(IamClientTypes.JobStatusType.self, forKey: .jobStatus)
        jobStatus = jobStatusDecoded
        let jobTypeDecoded = try containerValues.decodeIfPresent(IamClientTypes.AccessAdvisorUsageGranularityType.self, forKey: .jobType)
        jobType = jobTypeDecoded
        let jobCreationDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobCreationDate)
        var jobCreationDateBuffer:ClientRuntime.Date? = nil
        if let jobCreationDateDecoded = jobCreationDateDecoded {
            jobCreationDateBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(jobCreationDateDecoded, format: .dateTime)
        }
        jobCreationDate = jobCreationDateBuffer
        if containerValues.contains(.servicesLastAccessed) {
            struct KeyVal0{struct member{}}
            let servicesLastAccessedWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .servicesLastAccessed)
            if let servicesLastAccessedWrappedContainer = servicesLastAccessedWrappedContainer {
                let servicesLastAccessedContainer = try servicesLastAccessedWrappedContainer.decodeIfPresent([IamClientTypes.ServiceLastAccessed].self, forKey: .member)
                var servicesLastAccessedBuffer:[IamClientTypes.ServiceLastAccessed]? = nil
                if let servicesLastAccessedContainer = servicesLastAccessedContainer {
                    servicesLastAccessedBuffer = [IamClientTypes.ServiceLastAccessed]()
                    for structureContainer0 in servicesLastAccessedContainer {
                        servicesLastAccessedBuffer?.append(structureContainer0)
                    }
                }
                servicesLastAccessed = servicesLastAccessedBuffer
            } else {
                servicesLastAccessed = []
            }
        } else {
            servicesLastAccessed = nil
        }
        let jobCompletionDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobCompletionDate)
        var jobCompletionDateBuffer:ClientRuntime.Date? = nil
        if let jobCompletionDateDecoded = jobCompletionDateDecoded {
            jobCompletionDateBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(jobCompletionDateDecoded, format: .dateTime)
        }
        jobCompletionDate = jobCompletionDateBuffer
        let isTruncatedDecoded = try containerValues.decode(Swift.Bool.self, forKey: .isTruncated)
        isTruncated = isTruncatedDecoded
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
        let errorDecoded = try containerValues.decodeIfPresent(IamClientTypes.ErrorDetails.self, forKey: .error)
        error = errorDecoded
    }
}
