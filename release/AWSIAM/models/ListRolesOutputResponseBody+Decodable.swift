// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListRolesOutputResponseBody: Swift.Equatable {
    let roles: [IamClientTypes.Role]?
    let isTruncated: Swift.Bool
    let marker: Swift.String?
}

extension ListRolesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case isTruncated = "IsTruncated"
        case marker = "Marker"
        case roles = "Roles"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("ListRolesResult"))
        if containerValues.contains(.roles) {
            struct KeyVal0{struct member{}}
            let rolesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .roles)
            if let rolesWrappedContainer = rolesWrappedContainer {
                let rolesContainer = try rolesWrappedContainer.decodeIfPresent([IamClientTypes.Role].self, forKey: .member)
                var rolesBuffer:[IamClientTypes.Role]? = nil
                if let rolesContainer = rolesContainer {
                    rolesBuffer = [IamClientTypes.Role]()
                    for structureContainer0 in rolesContainer {
                        rolesBuffer?.append(structureContainer0)
                    }
                }
                roles = rolesBuffer
            } else {
                roles = []
            }
        } else {
            roles = nil
        }
        let isTruncatedDecoded = try containerValues.decode(Swift.Bool.self, forKey: .isTruncated)
        isTruncated = isTruncatedDecoded
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
    }
}
