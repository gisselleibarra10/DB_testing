// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetCredentialReportOutputResponseBody: Swift.Equatable {
    let content: ClientRuntime.Data?
    let reportFormat: IamClientTypes.ReportFormatType?
    let generatedTime: ClientRuntime.Date?
}

extension GetCredentialReportOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case content = "Content"
        case generatedTime = "GeneratedTime"
        case reportFormat = "ReportFormat"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("GetCredentialReportResult"))
        if containerValues.contains(.content) {
            do {
                let contentDecoded = try containerValues.decodeIfPresent(ClientRuntime.Data.self, forKey: .content)
                content = contentDecoded
            } catch {
                content = "".data(using: .utf8)
            }
        } else {
            content = nil
        }
        let reportFormatDecoded = try containerValues.decodeIfPresent(IamClientTypes.ReportFormatType.self, forKey: .reportFormat)
        reportFormat = reportFormatDecoded
        let generatedTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .generatedTime)
        var generatedTimeBuffer:ClientRuntime.Date? = nil
        if let generatedTimeDecoded = generatedTimeDecoded {
            generatedTimeBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(generatedTimeDecoded, format: .dateTime)
        }
        generatedTime = generatedTimeBuffer
    }
}
