// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListAttachedGroupPoliciesOutputResponseBody: Swift.Equatable {
    let attachedPolicies: [IamClientTypes.AttachedPolicy]?
    let isTruncated: Swift.Bool
    let marker: Swift.String?
}

extension ListAttachedGroupPoliciesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attachedPolicies = "AttachedPolicies"
        case isTruncated = "IsTruncated"
        case marker = "Marker"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("ListAttachedGroupPoliciesResult"))
        if containerValues.contains(.attachedPolicies) {
            struct KeyVal0{struct member{}}
            let attachedPoliciesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .attachedPolicies)
            if let attachedPoliciesWrappedContainer = attachedPoliciesWrappedContainer {
                let attachedPoliciesContainer = try attachedPoliciesWrappedContainer.decodeIfPresent([IamClientTypes.AttachedPolicy].self, forKey: .member)
                var attachedPoliciesBuffer:[IamClientTypes.AttachedPolicy]? = nil
                if let attachedPoliciesContainer = attachedPoliciesContainer {
                    attachedPoliciesBuffer = [IamClientTypes.AttachedPolicy]()
                    for structureContainer0 in attachedPoliciesContainer {
                        attachedPoliciesBuffer?.append(structureContainer0)
                    }
                }
                attachedPolicies = attachedPoliciesBuffer
            } else {
                attachedPolicies = []
            }
        } else {
            attachedPolicies = nil
        }
        let isTruncatedDecoded = try containerValues.decode(Swift.Bool.self, forKey: .isTruncated)
        isTruncated = isTruncatedDecoded
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
    }
}
