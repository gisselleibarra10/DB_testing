// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension IamClientTypes.ContextEntry: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case contextKeyName = "ContextKeyName"
        case contextKeyType = "ContextKeyType"
        case contextKeyValues = "ContextKeyValues"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let contextKeyName = contextKeyName {
            try container.encode(contextKeyName, forKey: ClientRuntime.Key("ContextKeyName"))
        }
        if let contextKeyType = contextKeyType {
            try container.encode(contextKeyType, forKey: ClientRuntime.Key("ContextKeyType"))
        }
        if let contextKeyValues = contextKeyValues {
            var contextKeyValuesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ContextKeyValues"))
            for (index0, contextkeyvaluetype0) in contextKeyValues.enumerated() {
                try contextKeyValuesContainer.encode(contextkeyvaluetype0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let contextKeyNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .contextKeyName)
        contextKeyName = contextKeyNameDecoded
        if containerValues.contains(.contextKeyValues) {
            struct KeyVal0{struct member{}}
            let contextKeyValuesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .contextKeyValues)
            if let contextKeyValuesWrappedContainer = contextKeyValuesWrappedContainer {
                let contextKeyValuesContainer = try contextKeyValuesWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var contextKeyValuesBuffer:[Swift.String]? = nil
                if let contextKeyValuesContainer = contextKeyValuesContainer {
                    contextKeyValuesBuffer = [Swift.String]()
                    for stringContainer0 in contextKeyValuesContainer {
                        contextKeyValuesBuffer?.append(stringContainer0)
                    }
                }
                contextKeyValues = contextKeyValuesBuffer
            } else {
                contextKeyValues = []
            }
        } else {
            contextKeyValues = nil
        }
        let contextKeyTypeDecoded = try containerValues.decodeIfPresent(IamClientTypes.ContextKeyTypeEnum.self, forKey: .contextKeyType)
        contextKeyType = contextKeyTypeDecoded
    }
}
