// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListPoliciesInputBody: Swift.Equatable {
    let scope: IamClientTypes.PolicyScopeType?
    let onlyAttached: Swift.Bool
    let pathPrefix: Swift.String?
    let policyUsageFilter: IamClientTypes.PolicyUsageType?
    let marker: Swift.String?
    let maxItems: Swift.Int?
}

extension ListPoliciesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case marker = "Marker"
        case maxItems = "MaxItems"
        case onlyAttached = "OnlyAttached"
        case pathPrefix = "PathPrefix"
        case policyUsageFilter = "PolicyUsageFilter"
        case scope = "Scope"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let scopeDecoded = try containerValues.decodeIfPresent(IamClientTypes.PolicyScopeType.self, forKey: .scope)
        scope = scopeDecoded
        let onlyAttachedDecoded = try containerValues.decode(Swift.Bool.self, forKey: .onlyAttached)
        onlyAttached = onlyAttachedDecoded
        let pathPrefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pathPrefix)
        pathPrefix = pathPrefixDecoded
        let policyUsageFilterDecoded = try containerValues.decodeIfPresent(IamClientTypes.PolicyUsageType.self, forKey: .policyUsageFilter)
        policyUsageFilter = policyUsageFilterDecoded
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
        let maxItemsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxItems)
        maxItems = maxItemsDecoded
    }
}
