// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension IamClientTypes.ServiceLastAccessed: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case lastAuthenticated = "LastAuthenticated"
        case lastAuthenticatedEntity = "LastAuthenticatedEntity"
        case lastAuthenticatedRegion = "LastAuthenticatedRegion"
        case serviceName = "ServiceName"
        case serviceNamespace = "ServiceNamespace"
        case totalAuthenticatedEntities = "TotalAuthenticatedEntities"
        case trackedActionsLastAccessed = "TrackedActionsLastAccessed"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let lastAuthenticated = lastAuthenticated {
            try container.encode(ClientRuntime.TimestampWrapper(lastAuthenticated, format: .dateTime), forKey: ClientRuntime.Key("lastAuthenticated"))
        }
        if let lastAuthenticatedEntity = lastAuthenticatedEntity {
            try container.encode(lastAuthenticatedEntity, forKey: ClientRuntime.Key("LastAuthenticatedEntity"))
        }
        if let lastAuthenticatedRegion = lastAuthenticatedRegion {
            try container.encode(lastAuthenticatedRegion, forKey: ClientRuntime.Key("LastAuthenticatedRegion"))
        }
        if let serviceName = serviceName {
            try container.encode(serviceName, forKey: ClientRuntime.Key("ServiceName"))
        }
        if let serviceNamespace = serviceNamespace {
            try container.encode(serviceNamespace, forKey: ClientRuntime.Key("ServiceNamespace"))
        }
        if let totalAuthenticatedEntities = totalAuthenticatedEntities {
            try container.encode(totalAuthenticatedEntities, forKey: ClientRuntime.Key("TotalAuthenticatedEntities"))
        }
        if let trackedActionsLastAccessed = trackedActionsLastAccessed {
            var trackedActionsLastAccessedContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TrackedActionsLastAccessed"))
            for (index0, trackedactionlastaccessed0) in trackedActionsLastAccessed.enumerated() {
                try trackedActionsLastAccessedContainer.encode(trackedactionlastaccessed0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let serviceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serviceName)
        serviceName = serviceNameDecoded
        let lastAuthenticatedDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastAuthenticated)
        var lastAuthenticatedBuffer:ClientRuntime.Date? = nil
        if let lastAuthenticatedDecoded = lastAuthenticatedDecoded {
            lastAuthenticatedBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(lastAuthenticatedDecoded, format: .dateTime)
        }
        lastAuthenticated = lastAuthenticatedBuffer
        let serviceNamespaceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serviceNamespace)
        serviceNamespace = serviceNamespaceDecoded
        let lastAuthenticatedEntityDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastAuthenticatedEntity)
        lastAuthenticatedEntity = lastAuthenticatedEntityDecoded
        let lastAuthenticatedRegionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastAuthenticatedRegion)
        lastAuthenticatedRegion = lastAuthenticatedRegionDecoded
        let totalAuthenticatedEntitiesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .totalAuthenticatedEntities)
        totalAuthenticatedEntities = totalAuthenticatedEntitiesDecoded
        if containerValues.contains(.trackedActionsLastAccessed) {
            struct KeyVal0{struct member{}}
            let trackedActionsLastAccessedWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .trackedActionsLastAccessed)
            if let trackedActionsLastAccessedWrappedContainer = trackedActionsLastAccessedWrappedContainer {
                let trackedActionsLastAccessedContainer = try trackedActionsLastAccessedWrappedContainer.decodeIfPresent([IamClientTypes.TrackedActionLastAccessed].self, forKey: .member)
                var trackedActionsLastAccessedBuffer:[IamClientTypes.TrackedActionLastAccessed]? = nil
                if let trackedActionsLastAccessedContainer = trackedActionsLastAccessedContainer {
                    trackedActionsLastAccessedBuffer = [IamClientTypes.TrackedActionLastAccessed]()
                    for structureContainer0 in trackedActionsLastAccessedContainer {
                        trackedActionsLastAccessedBuffer?.append(structureContainer0)
                    }
                }
                trackedActionsLastAccessed = trackedActionsLastAccessedBuffer
            } else {
                trackedActionsLastAccessed = []
            }
        } else {
            trackedActionsLastAccessed = nil
        }
    }
}
