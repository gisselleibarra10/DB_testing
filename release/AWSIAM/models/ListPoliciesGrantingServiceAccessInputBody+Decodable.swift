// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListPoliciesGrantingServiceAccessInputBody: Swift.Equatable {
    let marker: Swift.String?
    let arn: Swift.String?
    let serviceNamespaces: [Swift.String]?
}

extension ListPoliciesGrantingServiceAccessInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "Arn"
        case marker = "Marker"
        case serviceNamespaces = "ServiceNamespaces"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        if containerValues.contains(.serviceNamespaces) {
            struct KeyVal0{struct member{}}
            let serviceNamespacesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .serviceNamespaces)
            if let serviceNamespacesWrappedContainer = serviceNamespacesWrappedContainer {
                let serviceNamespacesContainer = try serviceNamespacesWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var serviceNamespacesBuffer:[Swift.String]? = nil
                if let serviceNamespacesContainer = serviceNamespacesContainer {
                    serviceNamespacesBuffer = [Swift.String]()
                    for stringContainer0 in serviceNamespacesContainer {
                        serviceNamespacesBuffer?.append(stringContainer0)
                    }
                }
                serviceNamespaces = serviceNamespacesBuffer
            } else {
                serviceNamespaces = []
            }
        } else {
            serviceNamespaces = nil
        }
    }
}
