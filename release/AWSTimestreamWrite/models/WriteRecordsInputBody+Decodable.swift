// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct WriteRecordsInputBody: Swift.Equatable {
    let databaseName: Swift.String?
    let tableName: Swift.String?
    let commonAttributes: TimestreamWriteClientTypes.Record?
    let records: [TimestreamWriteClientTypes.Record]?
}

extension WriteRecordsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case commonAttributes = "CommonAttributes"
        case databaseName = "DatabaseName"
        case records = "Records"
        case tableName = "TableName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let databaseNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .databaseName)
        databaseName = databaseNameDecoded
        let tableNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tableName)
        tableName = tableNameDecoded
        let commonAttributesDecoded = try containerValues.decodeIfPresent(TimestreamWriteClientTypes.Record.self, forKey: .commonAttributes)
        commonAttributes = commonAttributesDecoded
        let recordsContainer = try containerValues.decodeIfPresent([TimestreamWriteClientTypes.Record?].self, forKey: .records)
        var recordsDecoded0:[TimestreamWriteClientTypes.Record]? = nil
        if let recordsContainer = recordsContainer {
            recordsDecoded0 = [TimestreamWriteClientTypes.Record]()
            for structure0 in recordsContainer {
                if let structure0 = structure0 {
                    recordsDecoded0?.append(structure0)
                }
            }
        }
        records = recordsDecoded0
    }
}
