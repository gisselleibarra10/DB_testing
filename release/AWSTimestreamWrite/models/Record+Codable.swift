// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension TimestreamWriteClientTypes.Record: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dimensions = "Dimensions"
        case measureName = "MeasureName"
        case measureValue = "MeasureValue"
        case measureValueType = "MeasureValueType"
        case measureValues = "MeasureValues"
        case time = "Time"
        case timeUnit = "TimeUnit"
        case version = "Version"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dimensions = dimensions {
            var dimensionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .dimensions)
            for dimensions0 in dimensions {
                try dimensionsContainer.encode(dimensions0)
            }
        }
        if let measureName = self.measureName {
            try encodeContainer.encode(measureName, forKey: .measureName)
        }
        if let measureValue = self.measureValue {
            try encodeContainer.encode(measureValue, forKey: .measureValue)
        }
        if let measureValueType = self.measureValueType {
            try encodeContainer.encode(measureValueType.rawValue, forKey: .measureValueType)
        }
        if let measureValues = measureValues {
            var measureValuesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .measureValues)
            for measurevalues0 in measureValues {
                try measureValuesContainer.encode(measurevalues0)
            }
        }
        if let time = self.time {
            try encodeContainer.encode(time, forKey: .time)
        }
        if let timeUnit = self.timeUnit {
            try encodeContainer.encode(timeUnit.rawValue, forKey: .timeUnit)
        }
        if let version = self.version {
            try encodeContainer.encode(version, forKey: .version)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dimensionsContainer = try containerValues.decodeIfPresent([TimestreamWriteClientTypes.Dimension?].self, forKey: .dimensions)
        var dimensionsDecoded0:[TimestreamWriteClientTypes.Dimension]? = nil
        if let dimensionsContainer = dimensionsContainer {
            dimensionsDecoded0 = [TimestreamWriteClientTypes.Dimension]()
            for structure0 in dimensionsContainer {
                if let structure0 = structure0 {
                    dimensionsDecoded0?.append(structure0)
                }
            }
        }
        dimensions = dimensionsDecoded0
        let measureNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .measureName)
        measureName = measureNameDecoded
        let measureValueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .measureValue)
        measureValue = measureValueDecoded
        let measureValueTypeDecoded = try containerValues.decodeIfPresent(TimestreamWriteClientTypes.MeasureValueType.self, forKey: .measureValueType)
        measureValueType = measureValueTypeDecoded
        let timeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .time)
        time = timeDecoded
        let timeUnitDecoded = try containerValues.decodeIfPresent(TimestreamWriteClientTypes.TimeUnit.self, forKey: .timeUnit)
        timeUnit = timeUnitDecoded
        let versionDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .version)
        version = versionDecoded
        let measureValuesContainer = try containerValues.decodeIfPresent([TimestreamWriteClientTypes.MeasureValue?].self, forKey: .measureValues)
        var measureValuesDecoded0:[TimestreamWriteClientTypes.MeasureValue]? = nil
        if let measureValuesContainer = measureValuesContainer {
            measureValuesDecoded0 = [TimestreamWriteClientTypes.MeasureValue]()
            for structure0 in measureValuesContainer {
                if let structure0 = structure0 {
                    measureValuesDecoded0?.append(structure0)
                }
            }
        }
        measureValues = measureValuesDecoded0
    }
}
