// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension S3ControlClientTypes {
    /// Contains the configuration parameters for a PUT Copy object operation. S3 Batch Operations passes every object to the underlying PUT Copy object API. For more information about the parameters for this operation, see [PUT Object - Copy](https://docs.aws.amazon.com/AmazonS3/latest/API/RESTObjectCOPY.html).
    public struct S3CopyObjectOperation: Swift.Equatable {
        ///
        public var accessControlGrants: [S3ControlClientTypes.S3Grant]?
        /// Specifies whether Amazon S3 should use an S3 Bucket Key for object encryption with server-side encryption using Amazon Web Services KMS (SSE-KMS). Setting this header to true causes Amazon S3 to use an S3 Bucket Key for object encryption with SSE-KMS. Specifying this header with an object action doesnâ€™t affect bucket-level settings for S3 Bucket Key.
        public var bucketKeyEnabled: Swift.Bool
        ///
        public var cannedAccessControlList: S3ControlClientTypes.S3CannedAccessControlList?
        /// Indicates the algorithm you want Amazon S3 to use to create the checksum. For more information see [ Checking object integrity](https://docs.aws.amazon.com/AmazonS3/latest/userguide/CheckingObjectIntegrity.xml) in the Amazon S3 User Guide.
        public var checksumAlgorithm: S3ControlClientTypes.S3ChecksumAlgorithm?
        ///
        public var metadataDirective: S3ControlClientTypes.S3MetadataDirective?
        ///
        public var modifiedSinceConstraint: ClientRuntime.Date?
        /// If you don't provide this parameter, Amazon S3 copies all the metadata from the original objects. If you specify an empty set, the new objects will have no tags. Otherwise, Amazon S3 assigns the supplied tags to the new objects.
        public var newObjectMetadata: S3ControlClientTypes.S3ObjectMetadata?
        ///
        public var newObjectTagging: [S3ControlClientTypes.S3Tag]?
        /// The legal hold status to be applied to all objects in the Batch Operations job.
        public var objectLockLegalHoldStatus: S3ControlClientTypes.S3ObjectLockLegalHoldStatus?
        /// The retention mode to be applied to all objects in the Batch Operations job.
        public var objectLockMode: S3ControlClientTypes.S3ObjectLockMode?
        /// The date when the applied object retention configuration expires on all objects in the Batch Operations job.
        public var objectLockRetainUntilDate: ClientRuntime.Date?
        /// Specifies an optional metadata property for website redirects, x-amz-website-redirect-location. Allows webpage redirects if the object is accessed through a website endpoint.
        public var redirectLocation: Swift.String?
        ///
        public var requesterPays: Swift.Bool
        ///
        public var sSEAwsKmsKeyId: Swift.String?
        ///
        public var storageClass: S3ControlClientTypes.S3StorageClass?
        /// Specifies the folder prefix into which you would like the objects to be copied. For example, to copy objects into a folder named Folder1 in the destination bucket, set the TargetKeyPrefix to Folder1.
        public var targetKeyPrefix: Swift.String?
        /// Specifies the destination bucket ARN for the batch copy operation. For example, to copy objects to a bucket named "destinationBucket", set the TargetResource to "arn:aws:s3:::destinationBucket".
        public var targetResource: Swift.String?
        ///
        public var unModifiedSinceConstraint: ClientRuntime.Date?

        public init (
            accessControlGrants: [S3ControlClientTypes.S3Grant]? = nil,
            bucketKeyEnabled: Swift.Bool = false,
            cannedAccessControlList: S3ControlClientTypes.S3CannedAccessControlList? = nil,
            checksumAlgorithm: S3ControlClientTypes.S3ChecksumAlgorithm? = nil,
            metadataDirective: S3ControlClientTypes.S3MetadataDirective? = nil,
            modifiedSinceConstraint: ClientRuntime.Date? = nil,
            newObjectMetadata: S3ControlClientTypes.S3ObjectMetadata? = nil,
            newObjectTagging: [S3ControlClientTypes.S3Tag]? = nil,
            objectLockLegalHoldStatus: S3ControlClientTypes.S3ObjectLockLegalHoldStatus? = nil,
            objectLockMode: S3ControlClientTypes.S3ObjectLockMode? = nil,
            objectLockRetainUntilDate: ClientRuntime.Date? = nil,
            redirectLocation: Swift.String? = nil,
            requesterPays: Swift.Bool = false,
            sSEAwsKmsKeyId: Swift.String? = nil,
            storageClass: S3ControlClientTypes.S3StorageClass? = nil,
            targetKeyPrefix: Swift.String? = nil,
            targetResource: Swift.String? = nil,
            unModifiedSinceConstraint: ClientRuntime.Date? = nil
        )
        {
            self.accessControlGrants = accessControlGrants
            self.bucketKeyEnabled = bucketKeyEnabled
            self.cannedAccessControlList = cannedAccessControlList
            self.checksumAlgorithm = checksumAlgorithm
            self.metadataDirective = metadataDirective
            self.modifiedSinceConstraint = modifiedSinceConstraint
            self.newObjectMetadata = newObjectMetadata
            self.newObjectTagging = newObjectTagging
            self.objectLockLegalHoldStatus = objectLockLegalHoldStatus
            self.objectLockMode = objectLockMode
            self.objectLockRetainUntilDate = objectLockRetainUntilDate
            self.redirectLocation = redirectLocation
            self.requesterPays = requesterPays
            self.sSEAwsKmsKeyId = sSEAwsKmsKeyId
            self.storageClass = storageClass
            self.targetKeyPrefix = targetKeyPrefix
            self.targetResource = targetResource
            self.unModifiedSinceConstraint = unModifiedSinceConstraint
        }
    }

}
