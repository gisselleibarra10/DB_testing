// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListMultiRegionAccessPointsOutputResponseBody: Swift.Equatable {
    let accessPoints: [S3ControlClientTypes.MultiRegionAccessPointReport]?
    let nextToken: Swift.String?
}

extension ListMultiRegionAccessPointsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accessPoints = "AccessPoints"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.accessPoints) {
            struct KeyVal0{struct AccessPoint{}}
            let accessPointsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.AccessPoint>.CodingKeys.self, forKey: .accessPoints)
            if let accessPointsWrappedContainer = accessPointsWrappedContainer {
                let accessPointsContainer = try accessPointsWrappedContainer.decodeIfPresent([S3ControlClientTypes.MultiRegionAccessPointReport].self, forKey: .member)
                var accessPointsBuffer:[S3ControlClientTypes.MultiRegionAccessPointReport]? = nil
                if let accessPointsContainer = accessPointsContainer {
                    accessPointsBuffer = [S3ControlClientTypes.MultiRegionAccessPointReport]()
                    for structureContainer0 in accessPointsContainer {
                        accessPointsBuffer?.append(structureContainer0)
                    }
                }
                accessPoints = accessPointsBuffer
            } else {
                accessPoints = []
            }
        } else {
            accessPoints = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
