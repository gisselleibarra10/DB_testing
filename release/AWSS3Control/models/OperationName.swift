// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension S3ControlClientTypes {
    public enum OperationName: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case lambdainvoke
        case s3deleteobjecttagging
        case s3initiaterestoreobject
        case s3putobjectacl
        case s3putobjectcopy
        case s3putobjectlegalhold
        case s3putobjectretention
        case s3putobjecttagging
        case s3replicateobject
        case sdkUnknown(Swift.String)

        public static var allCases: [OperationName] {
            return [
                .lambdainvoke,
                .s3deleteobjecttagging,
                .s3initiaterestoreobject,
                .s3putobjectacl,
                .s3putobjectcopy,
                .s3putobjectlegalhold,
                .s3putobjectretention,
                .s3putobjecttagging,
                .s3replicateobject,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .lambdainvoke: return "LambdaInvoke"
            case .s3deleteobjecttagging: return "S3DeleteObjectTagging"
            case .s3initiaterestoreobject: return "S3InitiateRestoreObject"
            case .s3putobjectacl: return "S3PutObjectAcl"
            case .s3putobjectcopy: return "S3PutObjectCopy"
            case .s3putobjectlegalhold: return "S3PutObjectLegalHold"
            case .s3putobjectretention: return "S3PutObjectRetention"
            case .s3putobjecttagging: return "S3PutObjectTagging"
            case .s3replicateobject: return "S3ReplicateObject"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = OperationName(rawValue: rawValue) ?? OperationName.sdkUnknown(rawValue)
        }
    }
}
