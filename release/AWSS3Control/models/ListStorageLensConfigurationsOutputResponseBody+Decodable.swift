// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListStorageLensConfigurationsOutputResponseBody: Swift.Equatable {
    let nextToken: Swift.String?
    let storageLensConfigurationList: [S3ControlClientTypes.ListStorageLensConfigurationEntry]?
}

extension ListStorageLensConfigurationsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case storageLensConfigurationList = "StorageLensConfigurationList"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        if containerValues.contains(.storageLensConfigurationList) {
            let storageLensConfigurationListWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CodingKeys.self, forKey: .storageLensConfigurationList)
            if storageLensConfigurationListWrappedContainer != nil {
                let storageLensConfigurationListContainer = try containerValues.decodeIfPresent([S3ControlClientTypes.ListStorageLensConfigurationEntry].self, forKey: .storageLensConfigurationList)
                var storageLensConfigurationListBuffer:[S3ControlClientTypes.ListStorageLensConfigurationEntry]? = nil
                if let storageLensConfigurationListContainer = storageLensConfigurationListContainer {
                    storageLensConfigurationListBuffer = [S3ControlClientTypes.ListStorageLensConfigurationEntry]()
                    for structureContainer0 in storageLensConfigurationListContainer {
                        storageLensConfigurationListBuffer?.append(structureContainer0)
                    }
                }
                storageLensConfigurationList = storageLensConfigurationListBuffer
            } else {
                storageLensConfigurationList = []
            }
        } else {
            storageLensConfigurationList = nil
        }
    }
}
