// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListAccessPointsOutputResponseBody: Swift.Equatable {
    let accessPointList: [S3ControlClientTypes.AccessPoint]?
    let nextToken: Swift.String?
}

extension ListAccessPointsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accessPointList = "AccessPointList"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.accessPointList) {
            struct KeyVal0{struct AccessPoint{}}
            let accessPointListWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.AccessPoint>.CodingKeys.self, forKey: .accessPointList)
            if let accessPointListWrappedContainer = accessPointListWrappedContainer {
                let accessPointListContainer = try accessPointListWrappedContainer.decodeIfPresent([S3ControlClientTypes.AccessPoint].self, forKey: .member)
                var accessPointListBuffer:[S3ControlClientTypes.AccessPoint]? = nil
                if let accessPointListContainer = accessPointListContainer {
                    accessPointListBuffer = [S3ControlClientTypes.AccessPoint]()
                    for structureContainer0 in accessPointListContainer {
                        accessPointListBuffer?.append(structureContainer0)
                    }
                }
                accessPointList = accessPointListBuffer
            } else {
                accessPointList = []
            }
        } else {
            accessPointList = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
