// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension S3ControlClientTypes.ObjectLambdaTransformationConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case actions = "Actions"
        case contentTransformation = "ContentTransformation"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://awss3control.amazonaws.com/doc/2018-08-20/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let actions = actions {
            var actionsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Actions"))
            for objectlambdatransformationconfigurationaction0 in actions {
                try actionsContainer.encode(objectlambdatransformationconfigurationaction0, forKey: ClientRuntime.Key("Action"))
            }
        }
        if let contentTransformation = contentTransformation {
            try container.encode(contentTransformation, forKey: ClientRuntime.Key("ContentTransformation"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.actions) {
            struct KeyVal0{struct Action{}}
            let actionsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.Action>.CodingKeys.self, forKey: .actions)
            if let actionsWrappedContainer = actionsWrappedContainer {
                let actionsContainer = try actionsWrappedContainer.decodeIfPresent([S3ControlClientTypes.ObjectLambdaTransformationConfigurationAction].self, forKey: .member)
                var actionsBuffer:[S3ControlClientTypes.ObjectLambdaTransformationConfigurationAction]? = nil
                if let actionsContainer = actionsContainer {
                    actionsBuffer = [S3ControlClientTypes.ObjectLambdaTransformationConfigurationAction]()
                    for enumContainer0 in actionsContainer {
                        actionsBuffer?.append(enumContainer0)
                    }
                }
                actions = actionsBuffer
            } else {
                actions = []
            }
        } else {
            actions = nil
        }
        let contentTransformationDecoded = try containerValues.decodeIfPresent(S3ControlClientTypes.ObjectLambdaContentTransformation.self, forKey: .contentTransformation)
        contentTransformation = contentTransformationDecoded
    }
}
