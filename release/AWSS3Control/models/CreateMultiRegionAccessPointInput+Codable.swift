// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension S3ControlClientTypes.CreateMultiRegionAccessPointInput: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case publicAccessBlock = "PublicAccessBlock"
        case regions = "Regions"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://awss3control.amazonaws.com/doc/2018-08-20/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let name = name {
            try container.encode(name, forKey: ClientRuntime.Key("Name"))
        }
        if let publicAccessBlock = publicAccessBlock {
            try container.encode(publicAccessBlock, forKey: ClientRuntime.Key("PublicAccessBlock"))
        }
        if let regions = regions {
            var regionsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Regions"))
            for region0 in regions {
                try regionsContainer.encode(region0, forKey: ClientRuntime.Key("Region"))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let publicAccessBlockDecoded = try containerValues.decodeIfPresent(S3ControlClientTypes.PublicAccessBlockConfiguration.self, forKey: .publicAccessBlock)
        publicAccessBlock = publicAccessBlockDecoded
        if containerValues.contains(.regions) {
            struct KeyVal0{struct Region{}}
            let regionsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.Region>.CodingKeys.self, forKey: .regions)
            if let regionsWrappedContainer = regionsWrappedContainer {
                let regionsContainer = try regionsWrappedContainer.decodeIfPresent([S3ControlClientTypes.Region].self, forKey: .member)
                var regionsBuffer:[S3ControlClientTypes.Region]? = nil
                if let regionsContainer = regionsContainer {
                    regionsBuffer = [S3ControlClientTypes.Region]()
                    for structureContainer0 in regionsContainer {
                        regionsBuffer?.append(structureContainer0)
                    }
                }
                regions = regionsBuffer
            } else {
                regions = []
            }
        } else {
            regions = nil
        }
    }
}
