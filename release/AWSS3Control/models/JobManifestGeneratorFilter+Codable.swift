// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension S3ControlClientTypes.JobManifestGeneratorFilter: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createdAfter = "CreatedAfter"
        case createdBefore = "CreatedBefore"
        case eligibleForReplication = "EligibleForReplication"
        case objectReplicationStatuses = "ObjectReplicationStatuses"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://awss3control.amazonaws.com/doc/2018-08-20/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let createdAfter = createdAfter {
            try container.encode(ClientRuntime.TimestampWrapper(createdAfter, format: .dateTime), forKey: ClientRuntime.Key("CreatedAfter"))
        }
        if let createdBefore = createdBefore {
            try container.encode(ClientRuntime.TimestampWrapper(createdBefore, format: .dateTime), forKey: ClientRuntime.Key("CreatedBefore"))
        }
        if let eligibleForReplication = eligibleForReplication {
            try container.encode(eligibleForReplication, forKey: ClientRuntime.Key("EligibleForReplication"))
        }
        if let objectReplicationStatuses = objectReplicationStatuses {
            var objectReplicationStatusesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ObjectReplicationStatuses"))
            for replicationstatus0 in objectReplicationStatuses {
                try objectReplicationStatusesContainer.encode(replicationstatus0, forKey: ClientRuntime.Key("member"))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let eligibleForReplicationDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .eligibleForReplication)
        eligibleForReplication = eligibleForReplicationDecoded
        let createdAfterDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .createdAfter)
        var createdAfterBuffer:ClientRuntime.Date? = nil
        if let createdAfterDecoded = createdAfterDecoded {
            createdAfterBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(createdAfterDecoded, format: .dateTime)
        }
        createdAfter = createdAfterBuffer
        let createdBeforeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .createdBefore)
        var createdBeforeBuffer:ClientRuntime.Date? = nil
        if let createdBeforeDecoded = createdBeforeDecoded {
            createdBeforeBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(createdBeforeDecoded, format: .dateTime)
        }
        createdBefore = createdBeforeBuffer
        if containerValues.contains(.objectReplicationStatuses) {
            struct KeyVal0{struct member{}}
            let objectReplicationStatusesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .objectReplicationStatuses)
            if let objectReplicationStatusesWrappedContainer = objectReplicationStatusesWrappedContainer {
                let objectReplicationStatusesContainer = try objectReplicationStatusesWrappedContainer.decodeIfPresent([S3ControlClientTypes.ReplicationStatus].self, forKey: .member)
                var objectReplicationStatusesBuffer:[S3ControlClientTypes.ReplicationStatus]? = nil
                if let objectReplicationStatusesContainer = objectReplicationStatusesContainer {
                    objectReplicationStatusesBuffer = [S3ControlClientTypes.ReplicationStatus]()
                    for enumContainer0 in objectReplicationStatusesContainer {
                        objectReplicationStatusesBuffer?.append(enumContainer0)
                    }
                }
                objectReplicationStatuses = objectReplicationStatusesBuffer
            } else {
                objectReplicationStatuses = []
            }
        } else {
            objectReplicationStatuses = nil
        }
    }
}
