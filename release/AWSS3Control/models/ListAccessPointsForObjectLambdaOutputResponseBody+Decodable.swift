// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListAccessPointsForObjectLambdaOutputResponseBody: Swift.Equatable {
    let objectLambdaAccessPointList: [S3ControlClientTypes.ObjectLambdaAccessPoint]?
    let nextToken: Swift.String?
}

extension ListAccessPointsForObjectLambdaOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case objectLambdaAccessPointList = "ObjectLambdaAccessPointList"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.objectLambdaAccessPointList) {
            struct KeyVal0{struct ObjectLambdaAccessPoint{}}
            let objectLambdaAccessPointListWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.ObjectLambdaAccessPoint>.CodingKeys.self, forKey: .objectLambdaAccessPointList)
            if let objectLambdaAccessPointListWrappedContainer = objectLambdaAccessPointListWrappedContainer {
                let objectLambdaAccessPointListContainer = try objectLambdaAccessPointListWrappedContainer.decodeIfPresent([S3ControlClientTypes.ObjectLambdaAccessPoint].self, forKey: .member)
                var objectLambdaAccessPointListBuffer:[S3ControlClientTypes.ObjectLambdaAccessPoint]? = nil
                if let objectLambdaAccessPointListContainer = objectLambdaAccessPointListContainer {
                    objectLambdaAccessPointListBuffer = [S3ControlClientTypes.ObjectLambdaAccessPoint]()
                    for structureContainer0 in objectLambdaAccessPointListContainer {
                        objectLambdaAccessPointListBuffer?.append(structureContainer0)
                    }
                }
                objectLambdaAccessPointList = objectLambdaAccessPointListBuffer
            } else {
                objectLambdaAccessPointList = []
            }
        } else {
            objectLambdaAccessPointList = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
