// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateJobInputBody: Swift.Equatable {
    let confirmationRequired: Swift.Bool?
    let operation: S3ControlClientTypes.JobOperation?
    let report: S3ControlClientTypes.JobReport?
    let clientRequestToken: Swift.String?
    let manifest: S3ControlClientTypes.JobManifest?
    let description: Swift.String?
    let priority: Swift.Int?
    let roleArn: Swift.String?
    let tags: [S3ControlClientTypes.S3Tag]?
    let manifestGenerator: S3ControlClientTypes.JobManifestGenerator?
}

extension CreateJobInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientRequestToken = "ClientRequestToken"
        case confirmationRequired = "ConfirmationRequired"
        case description = "Description"
        case manifest = "Manifest"
        case manifestGenerator = "ManifestGenerator"
        case operation = "Operation"
        case priority = "Priority"
        case report = "Report"
        case roleArn = "RoleArn"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let confirmationRequiredDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .confirmationRequired)
        confirmationRequired = confirmationRequiredDecoded
        let operationDecoded = try containerValues.decodeIfPresent(S3ControlClientTypes.JobOperation.self, forKey: .operation)
        operation = operationDecoded
        let reportDecoded = try containerValues.decodeIfPresent(S3ControlClientTypes.JobReport.self, forKey: .report)
        report = reportDecoded
        let clientRequestTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientRequestToken)
        clientRequestToken = clientRequestTokenDecoded
        let manifestDecoded = try containerValues.decodeIfPresent(S3ControlClientTypes.JobManifest.self, forKey: .manifest)
        manifest = manifestDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let priorityDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .priority)
        priority = priorityDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        if containerValues.contains(.tags) {
            struct KeyVal0{struct member{}}
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .tags)
            if let tagsWrappedContainer = tagsWrappedContainer {
                let tagsContainer = try tagsWrappedContainer.decodeIfPresent([S3ControlClientTypes.S3Tag].self, forKey: .member)
                var tagsBuffer:[S3ControlClientTypes.S3Tag]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [S3ControlClientTypes.S3Tag]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
        let manifestGeneratorDecoded = try containerValues.decodeIfPresent(S3ControlClientTypes.JobManifestGenerator.self, forKey: .manifestGenerator)
        manifestGenerator = manifestGeneratorDecoded
    }
}
