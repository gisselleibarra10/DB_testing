// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension S3ControlClientTypes.JobManifestSpec: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case fields = "Fields"
        case format = "Format"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://awss3control.amazonaws.com/doc/2018-08-20/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let fields = fields {
            var fieldsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Fields"))
            for jobmanifestfieldname0 in fields {
                try fieldsContainer.encode(jobmanifestfieldname0, forKey: ClientRuntime.Key("member"))
            }
        }
        if let format = format {
            try container.encode(format, forKey: ClientRuntime.Key("Format"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let formatDecoded = try containerValues.decodeIfPresent(S3ControlClientTypes.JobManifestFormat.self, forKey: .format)
        format = formatDecoded
        if containerValues.contains(.fields) {
            struct KeyVal0{struct member{}}
            let fieldsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .fields)
            if let fieldsWrappedContainer = fieldsWrappedContainer {
                let fieldsContainer = try fieldsWrappedContainer.decodeIfPresent([S3ControlClientTypes.JobManifestFieldName].self, forKey: .member)
                var fieldsBuffer:[S3ControlClientTypes.JobManifestFieldName]? = nil
                if let fieldsContainer = fieldsContainer {
                    fieldsBuffer = [S3ControlClientTypes.JobManifestFieldName]()
                    for enumContainer0 in fieldsContainer {
                        fieldsBuffer?.append(enumContainer0)
                    }
                }
                fields = fieldsBuffer
            } else {
                fields = []
            }
        } else {
            fields = nil
        }
    }
}
