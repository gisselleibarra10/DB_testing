// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension GetMetricStatisticsInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let dimensions = dimensions {
            var dimensionsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Dimensions"))
            for (index0, dimension0) in dimensions.enumerated() {
                try dimensionsContainer.encode(dimension0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let endTime = endTime {
            try container.encode(ClientRuntime.TimestampWrapper(endTime, format: .dateTime), forKey: ClientRuntime.Key("endTime"))
        }
        if let extendedStatistics = extendedStatistics {
            var extendedStatisticsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ExtendedStatistics"))
            for (index0, extendedstatistic0) in extendedStatistics.enumerated() {
                try extendedStatisticsContainer.encode(extendedstatistic0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let metricName = metricName {
            try container.encode(metricName, forKey: ClientRuntime.Key("MetricName"))
        }
        if let namespace = namespace {
            try container.encode(namespace, forKey: ClientRuntime.Key("Namespace"))
        }
        if let period = period {
            try container.encode(period, forKey: ClientRuntime.Key("Period"))
        }
        if let startTime = startTime {
            try container.encode(ClientRuntime.TimestampWrapper(startTime, format: .dateTime), forKey: ClientRuntime.Key("startTime"))
        }
        if let statistics = statistics {
            var statisticsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Statistics"))
            for (index0, statistic0) in statistics.enumerated() {
                try statisticsContainer.encode(statistic0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let unit = unit {
            try container.encode(unit, forKey: ClientRuntime.Key("Unit"))
        }
        try container.encode("GetMetricStatistics", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-08-01", forKey:ClientRuntime.Key("Version"))
    }
}
