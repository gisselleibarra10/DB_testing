// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetInsightRuleReportInputBody: Swift.Equatable {
    let ruleName: Swift.String?
    let startTime: ClientRuntime.Date?
    let endTime: ClientRuntime.Date?
    let period: Swift.Int?
    let maxContributorCount: Swift.Int?
    let metrics: [Swift.String]?
    let orderBy: Swift.String?
}

extension GetInsightRuleReportInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case endTime = "EndTime"
        case maxContributorCount = "MaxContributorCount"
        case metrics = "Metrics"
        case orderBy = "OrderBy"
        case period = "Period"
        case ruleName = "RuleName"
        case startTime = "StartTime"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ruleNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ruleName)
        ruleName = ruleNameDecoded
        let startTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .startTime)
        var startTimeBuffer:ClientRuntime.Date? = nil
        if let startTimeDecoded = startTimeDecoded {
            startTimeBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(startTimeDecoded, format: .dateTime)
        }
        startTime = startTimeBuffer
        let endTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .endTime)
        var endTimeBuffer:ClientRuntime.Date? = nil
        if let endTimeDecoded = endTimeDecoded {
            endTimeBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(endTimeDecoded, format: .dateTime)
        }
        endTime = endTimeBuffer
        let periodDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .period)
        period = periodDecoded
        let maxContributorCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxContributorCount)
        maxContributorCount = maxContributorCountDecoded
        if containerValues.contains(.metrics) {
            struct KeyVal0{struct member{}}
            let metricsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .metrics)
            if let metricsWrappedContainer = metricsWrappedContainer {
                let metricsContainer = try metricsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var metricsBuffer:[Swift.String]? = nil
                if let metricsContainer = metricsContainer {
                    metricsBuffer = [Swift.String]()
                    for stringContainer0 in metricsContainer {
                        metricsBuffer?.append(stringContainer0)
                    }
                }
                metrics = metricsBuffer
            } else {
                metrics = []
            }
        } else {
            metrics = nil
        }
        let orderByDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .orderBy)
        orderBy = orderByDecoded
    }
}
