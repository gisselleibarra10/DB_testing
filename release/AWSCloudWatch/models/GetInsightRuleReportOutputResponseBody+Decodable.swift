// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetInsightRuleReportOutputResponseBody: Swift.Equatable {
    let keyLabels: [Swift.String]?
    let aggregationStatistic: Swift.String?
    let aggregateValue: Swift.Double?
    let approximateUniqueCount: Swift.Int?
    let contributors: [CloudWatchClientTypes.InsightRuleContributor]?
    let metricDatapoints: [CloudWatchClientTypes.InsightRuleMetricDatapoint]?
}

extension GetInsightRuleReportOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case aggregateValue = "AggregateValue"
        case aggregationStatistic = "AggregationStatistic"
        case approximateUniqueCount = "ApproximateUniqueCount"
        case contributors = "Contributors"
        case keyLabels = "KeyLabels"
        case metricDatapoints = "MetricDatapoints"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("GetInsightRuleReportResult"))
        if containerValues.contains(.keyLabels) {
            struct KeyVal0{struct member{}}
            let keyLabelsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .keyLabels)
            if let keyLabelsWrappedContainer = keyLabelsWrappedContainer {
                let keyLabelsContainer = try keyLabelsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var keyLabelsBuffer:[Swift.String]? = nil
                if let keyLabelsContainer = keyLabelsContainer {
                    keyLabelsBuffer = [Swift.String]()
                    for stringContainer0 in keyLabelsContainer {
                        keyLabelsBuffer?.append(stringContainer0)
                    }
                }
                keyLabels = keyLabelsBuffer
            } else {
                keyLabels = []
            }
        } else {
            keyLabels = nil
        }
        let aggregationStatisticDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .aggregationStatistic)
        aggregationStatistic = aggregationStatisticDecoded
        let aggregateValueDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .aggregateValue)
        aggregateValue = aggregateValueDecoded
        let approximateUniqueCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .approximateUniqueCount)
        approximateUniqueCount = approximateUniqueCountDecoded
        if containerValues.contains(.contributors) {
            struct KeyVal0{struct member{}}
            let contributorsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .contributors)
            if let contributorsWrappedContainer = contributorsWrappedContainer {
                let contributorsContainer = try contributorsWrappedContainer.decodeIfPresent([CloudWatchClientTypes.InsightRuleContributor].self, forKey: .member)
                var contributorsBuffer:[CloudWatchClientTypes.InsightRuleContributor]? = nil
                if let contributorsContainer = contributorsContainer {
                    contributorsBuffer = [CloudWatchClientTypes.InsightRuleContributor]()
                    for structureContainer0 in contributorsContainer {
                        contributorsBuffer?.append(structureContainer0)
                    }
                }
                contributors = contributorsBuffer
            } else {
                contributors = []
            }
        } else {
            contributors = nil
        }
        if containerValues.contains(.metricDatapoints) {
            struct KeyVal0{struct member{}}
            let metricDatapointsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .metricDatapoints)
            if let metricDatapointsWrappedContainer = metricDatapointsWrappedContainer {
                let metricDatapointsContainer = try metricDatapointsWrappedContainer.decodeIfPresent([CloudWatchClientTypes.InsightRuleMetricDatapoint].self, forKey: .member)
                var metricDatapointsBuffer:[CloudWatchClientTypes.InsightRuleMetricDatapoint]? = nil
                if let metricDatapointsContainer = metricDatapointsContainer {
                    metricDatapointsBuffer = [CloudWatchClientTypes.InsightRuleMetricDatapoint]()
                    for structureContainer0 in metricDatapointsContainer {
                        metricDatapointsBuffer?.append(structureContainer0)
                    }
                }
                metricDatapoints = metricDatapointsBuffer
            } else {
                metricDatapoints = []
            }
        } else {
            metricDatapoints = nil
        }
    }
}
