// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CloudWatchClientTypes.MetricMathAnomalyDetector: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case metricDataQueries = "MetricDataQueries"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let metricDataQueries = metricDataQueries {
            var metricDataQueriesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("MetricDataQueries"))
            for (index0, metricdataquery0) in metricDataQueries.enumerated() {
                try metricDataQueriesContainer.encode(metricdataquery0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.metricDataQueries) {
            struct KeyVal0{struct member{}}
            let metricDataQueriesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .metricDataQueries)
            if let metricDataQueriesWrappedContainer = metricDataQueriesWrappedContainer {
                let metricDataQueriesContainer = try metricDataQueriesWrappedContainer.decodeIfPresent([CloudWatchClientTypes.MetricDataQuery].self, forKey: .member)
                var metricDataQueriesBuffer:[CloudWatchClientTypes.MetricDataQuery]? = nil
                if let metricDataQueriesContainer = metricDataQueriesContainer {
                    metricDataQueriesBuffer = [CloudWatchClientTypes.MetricDataQuery]()
                    for structureContainer0 in metricDataQueriesContainer {
                        metricDataQueriesBuffer?.append(structureContainer0)
                    }
                }
                metricDataQueries = metricDataQueriesBuffer
            } else {
                metricDataQueries = []
            }
        } else {
            metricDataQueries = nil
        }
    }
}
