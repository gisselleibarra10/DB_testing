// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct PutCompositeAlarmInputBody: Swift.Equatable {
    let actionsEnabled: Swift.Bool?
    let alarmActions: [Swift.String]?
    let alarmDescription: Swift.String?
    let alarmName: Swift.String?
    let alarmRule: Swift.String?
    let insufficientDataActions: [Swift.String]?
    let oKActions: [Swift.String]?
    let tags: [CloudWatchClientTypes.Tag]?
    let actionsSuppressor: Swift.String?
    let actionsSuppressorWaitPeriod: Swift.Int?
    let actionsSuppressorExtensionPeriod: Swift.Int?
}

extension PutCompositeAlarmInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case actionsEnabled = "ActionsEnabled"
        case actionsSuppressor = "ActionsSuppressor"
        case actionsSuppressorExtensionPeriod = "ActionsSuppressorExtensionPeriod"
        case actionsSuppressorWaitPeriod = "ActionsSuppressorWaitPeriod"
        case alarmActions = "AlarmActions"
        case alarmDescription = "AlarmDescription"
        case alarmName = "AlarmName"
        case alarmRule = "AlarmRule"
        case insufficientDataActions = "InsufficientDataActions"
        case oKActions = "OKActions"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let actionsEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .actionsEnabled)
        actionsEnabled = actionsEnabledDecoded
        if containerValues.contains(.alarmActions) {
            struct KeyVal0{struct member{}}
            let alarmActionsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .alarmActions)
            if let alarmActionsWrappedContainer = alarmActionsWrappedContainer {
                let alarmActionsContainer = try alarmActionsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var alarmActionsBuffer:[Swift.String]? = nil
                if let alarmActionsContainer = alarmActionsContainer {
                    alarmActionsBuffer = [Swift.String]()
                    for stringContainer0 in alarmActionsContainer {
                        alarmActionsBuffer?.append(stringContainer0)
                    }
                }
                alarmActions = alarmActionsBuffer
            } else {
                alarmActions = []
            }
        } else {
            alarmActions = nil
        }
        let alarmDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .alarmDescription)
        alarmDescription = alarmDescriptionDecoded
        let alarmNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .alarmName)
        alarmName = alarmNameDecoded
        let alarmRuleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .alarmRule)
        alarmRule = alarmRuleDecoded
        if containerValues.contains(.insufficientDataActions) {
            struct KeyVal0{struct member{}}
            let insufficientDataActionsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .insufficientDataActions)
            if let insufficientDataActionsWrappedContainer = insufficientDataActionsWrappedContainer {
                let insufficientDataActionsContainer = try insufficientDataActionsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var insufficientDataActionsBuffer:[Swift.String]? = nil
                if let insufficientDataActionsContainer = insufficientDataActionsContainer {
                    insufficientDataActionsBuffer = [Swift.String]()
                    for stringContainer0 in insufficientDataActionsContainer {
                        insufficientDataActionsBuffer?.append(stringContainer0)
                    }
                }
                insufficientDataActions = insufficientDataActionsBuffer
            } else {
                insufficientDataActions = []
            }
        } else {
            insufficientDataActions = nil
        }
        if containerValues.contains(.oKActions) {
            struct KeyVal0{struct member{}}
            let oKActionsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .oKActions)
            if let oKActionsWrappedContainer = oKActionsWrappedContainer {
                let oKActionsContainer = try oKActionsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var oKActionsBuffer:[Swift.String]? = nil
                if let oKActionsContainer = oKActionsContainer {
                    oKActionsBuffer = [Swift.String]()
                    for stringContainer0 in oKActionsContainer {
                        oKActionsBuffer?.append(stringContainer0)
                    }
                }
                oKActions = oKActionsBuffer
            } else {
                oKActions = []
            }
        } else {
            oKActions = nil
        }
        if containerValues.contains(.tags) {
            struct KeyVal0{struct member{}}
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .tags)
            if let tagsWrappedContainer = tagsWrappedContainer {
                let tagsContainer = try tagsWrappedContainer.decodeIfPresent([CloudWatchClientTypes.Tag].self, forKey: .member)
                var tagsBuffer:[CloudWatchClientTypes.Tag]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [CloudWatchClientTypes.Tag]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
        let actionsSuppressorDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .actionsSuppressor)
        actionsSuppressor = actionsSuppressorDecoded
        let actionsSuppressorWaitPeriodDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .actionsSuppressorWaitPeriod)
        actionsSuppressorWaitPeriod = actionsSuppressorWaitPeriodDecoded
        let actionsSuppressorExtensionPeriodDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .actionsSuppressorExtensionPeriod)
        actionsSuppressorExtensionPeriod = actionsSuppressorExtensionPeriodDecoded
    }
}
