// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListMetricsInputBody: Swift.Equatable {
    let namespace: Swift.String?
    let metricName: Swift.String?
    let dimensions: [CloudWatchClientTypes.DimensionFilter]?
    let nextToken: Swift.String?
    let recentlyActive: CloudWatchClientTypes.RecentlyActive?
}

extension ListMetricsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dimensions = "Dimensions"
        case metricName = "MetricName"
        case namespace = "Namespace"
        case nextToken = "NextToken"
        case recentlyActive = "RecentlyActive"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let namespaceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .namespace)
        namespace = namespaceDecoded
        let metricNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .metricName)
        metricName = metricNameDecoded
        if containerValues.contains(.dimensions) {
            struct KeyVal0{struct member{}}
            let dimensionsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .dimensions)
            if let dimensionsWrappedContainer = dimensionsWrappedContainer {
                let dimensionsContainer = try dimensionsWrappedContainer.decodeIfPresent([CloudWatchClientTypes.DimensionFilter].self, forKey: .member)
                var dimensionsBuffer:[CloudWatchClientTypes.DimensionFilter]? = nil
                if let dimensionsContainer = dimensionsContainer {
                    dimensionsBuffer = [CloudWatchClientTypes.DimensionFilter]()
                    for structureContainer0 in dimensionsContainer {
                        dimensionsBuffer?.append(structureContainer0)
                    }
                }
                dimensions = dimensionsBuffer
            } else {
                dimensions = []
            }
        } else {
            dimensions = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let recentlyActiveDecoded = try containerValues.decodeIfPresent(CloudWatchClientTypes.RecentlyActive.self, forKey: .recentlyActive)
        recentlyActive = recentlyActiveDecoded
    }
}
