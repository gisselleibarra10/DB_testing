// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetMetricStatisticsOutputResponseBody: Swift.Equatable {
    let label: Swift.String?
    let datapoints: [CloudWatchClientTypes.Datapoint]?
}

extension GetMetricStatisticsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case datapoints = "Datapoints"
        case label = "Label"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("GetMetricStatisticsResult"))
        let labelDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .label)
        label = labelDecoded
        if containerValues.contains(.datapoints) {
            struct KeyVal0{struct member{}}
            let datapointsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .datapoints)
            if let datapointsWrappedContainer = datapointsWrappedContainer {
                let datapointsContainer = try datapointsWrappedContainer.decodeIfPresent([CloudWatchClientTypes.Datapoint].self, forKey: .member)
                var datapointsBuffer:[CloudWatchClientTypes.Datapoint]? = nil
                if let datapointsContainer = datapointsContainer {
                    datapointsBuffer = [CloudWatchClientTypes.Datapoint]()
                    for structureContainer0 in datapointsContainer {
                        datapointsBuffer?.append(structureContainer0)
                    }
                }
                datapoints = datapointsBuffer
            } else {
                datapoints = []
            }
        } else {
            datapoints = nil
        }
    }
}
