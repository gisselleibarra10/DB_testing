// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListMetricsOutputResponseBody: Swift.Equatable {
    let metrics: [CloudWatchClientTypes.Metric]?
    let nextToken: Swift.String?
}

extension ListMetricsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case metrics = "Metrics"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("ListMetricsResult"))
        if containerValues.contains(.metrics) {
            struct KeyVal0{struct member{}}
            let metricsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .metrics)
            if let metricsWrappedContainer = metricsWrappedContainer {
                let metricsContainer = try metricsWrappedContainer.decodeIfPresent([CloudWatchClientTypes.Metric].self, forKey: .member)
                var metricsBuffer:[CloudWatchClientTypes.Metric]? = nil
                if let metricsContainer = metricsContainer {
                    metricsBuffer = [CloudWatchClientTypes.Metric]()
                    for structureContainer0 in metricsContainer {
                        metricsBuffer?.append(structureContainer0)
                    }
                }
                metrics = metricsBuffer
            } else {
                metrics = []
            }
        } else {
            metrics = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
