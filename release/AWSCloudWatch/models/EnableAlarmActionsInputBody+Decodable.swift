// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct EnableAlarmActionsInputBody: Swift.Equatable {
    let alarmNames: [Swift.String]?
}

extension EnableAlarmActionsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case alarmNames = "AlarmNames"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.alarmNames) {
            struct KeyVal0{struct member{}}
            let alarmNamesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .alarmNames)
            if let alarmNamesWrappedContainer = alarmNamesWrappedContainer {
                let alarmNamesContainer = try alarmNamesWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var alarmNamesBuffer:[Swift.String]? = nil
                if let alarmNamesContainer = alarmNamesContainer {
                    alarmNamesBuffer = [Swift.String]()
                    for stringContainer0 in alarmNamesContainer {
                        alarmNamesBuffer?.append(stringContainer0)
                    }
                }
                alarmNames = alarmNamesBuffer
            } else {
                alarmNames = []
            }
        } else {
            alarmNames = nil
        }
    }
}
