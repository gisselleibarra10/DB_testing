// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeAlarmsInputBody: Swift.Equatable {
    let alarmNames: [Swift.String]?
    let alarmNamePrefix: Swift.String?
    let alarmTypes: [CloudWatchClientTypes.AlarmType]?
    let childrenOfAlarmName: Swift.String?
    let parentsOfAlarmName: Swift.String?
    let stateValue: CloudWatchClientTypes.StateValue?
    let actionPrefix: Swift.String?
    let maxRecords: Swift.Int?
    let nextToken: Swift.String?
}

extension DescribeAlarmsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case actionPrefix = "ActionPrefix"
        case alarmNamePrefix = "AlarmNamePrefix"
        case alarmNames = "AlarmNames"
        case alarmTypes = "AlarmTypes"
        case childrenOfAlarmName = "ChildrenOfAlarmName"
        case maxRecords = "MaxRecords"
        case nextToken = "NextToken"
        case parentsOfAlarmName = "ParentsOfAlarmName"
        case stateValue = "StateValue"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.alarmNames) {
            struct KeyVal0{struct member{}}
            let alarmNamesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .alarmNames)
            if let alarmNamesWrappedContainer = alarmNamesWrappedContainer {
                let alarmNamesContainer = try alarmNamesWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var alarmNamesBuffer:[Swift.String]? = nil
                if let alarmNamesContainer = alarmNamesContainer {
                    alarmNamesBuffer = [Swift.String]()
                    for stringContainer0 in alarmNamesContainer {
                        alarmNamesBuffer?.append(stringContainer0)
                    }
                }
                alarmNames = alarmNamesBuffer
            } else {
                alarmNames = []
            }
        } else {
            alarmNames = nil
        }
        let alarmNamePrefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .alarmNamePrefix)
        alarmNamePrefix = alarmNamePrefixDecoded
        if containerValues.contains(.alarmTypes) {
            struct KeyVal0{struct member{}}
            let alarmTypesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .alarmTypes)
            if let alarmTypesWrappedContainer = alarmTypesWrappedContainer {
                let alarmTypesContainer = try alarmTypesWrappedContainer.decodeIfPresent([CloudWatchClientTypes.AlarmType].self, forKey: .member)
                var alarmTypesBuffer:[CloudWatchClientTypes.AlarmType]? = nil
                if let alarmTypesContainer = alarmTypesContainer {
                    alarmTypesBuffer = [CloudWatchClientTypes.AlarmType]()
                    for stringContainer0 in alarmTypesContainer {
                        alarmTypesBuffer?.append(stringContainer0)
                    }
                }
                alarmTypes = alarmTypesBuffer
            } else {
                alarmTypes = []
            }
        } else {
            alarmTypes = nil
        }
        let childrenOfAlarmNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .childrenOfAlarmName)
        childrenOfAlarmName = childrenOfAlarmNameDecoded
        let parentsOfAlarmNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .parentsOfAlarmName)
        parentsOfAlarmName = parentsOfAlarmNameDecoded
        let stateValueDecoded = try containerValues.decodeIfPresent(CloudWatchClientTypes.StateValue.self, forKey: .stateValue)
        stateValue = stateValueDecoded
        let actionPrefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .actionPrefix)
        actionPrefix = actionPrefixDecoded
        let maxRecordsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxRecords)
        maxRecords = maxRecordsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
