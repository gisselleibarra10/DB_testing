// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension PutMetricAlarmInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let actionsEnabled = actionsEnabled {
            try container.encode(actionsEnabled, forKey: ClientRuntime.Key("ActionsEnabled"))
        }
        if let alarmActions = alarmActions {
            var alarmActionsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AlarmActions"))
            for (index0, resourcename0) in alarmActions.enumerated() {
                try alarmActionsContainer.encode(resourcename0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let alarmDescription = alarmDescription {
            try container.encode(alarmDescription, forKey: ClientRuntime.Key("AlarmDescription"))
        }
        if let alarmName = alarmName {
            try container.encode(alarmName, forKey: ClientRuntime.Key("AlarmName"))
        }
        if let comparisonOperator = comparisonOperator {
            try container.encode(comparisonOperator, forKey: ClientRuntime.Key("ComparisonOperator"))
        }
        if let datapointsToAlarm = datapointsToAlarm {
            try container.encode(datapointsToAlarm, forKey: ClientRuntime.Key("DatapointsToAlarm"))
        }
        if let dimensions = dimensions {
            var dimensionsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Dimensions"))
            for (index0, dimension0) in dimensions.enumerated() {
                try dimensionsContainer.encode(dimension0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let evaluateLowSampleCountPercentile = evaluateLowSampleCountPercentile {
            try container.encode(evaluateLowSampleCountPercentile, forKey: ClientRuntime.Key("EvaluateLowSampleCountPercentile"))
        }
        if let evaluationPeriods = evaluationPeriods {
            try container.encode(evaluationPeriods, forKey: ClientRuntime.Key("EvaluationPeriods"))
        }
        if let extendedStatistic = extendedStatistic {
            try container.encode(extendedStatistic, forKey: ClientRuntime.Key("ExtendedStatistic"))
        }
        if let insufficientDataActions = insufficientDataActions {
            var insufficientDataActionsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("InsufficientDataActions"))
            for (index0, resourcename0) in insufficientDataActions.enumerated() {
                try insufficientDataActionsContainer.encode(resourcename0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let metricName = metricName {
            try container.encode(metricName, forKey: ClientRuntime.Key("MetricName"))
        }
        if let metrics = metrics {
            var metricsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Metrics"))
            for (index0, metricdataquery0) in metrics.enumerated() {
                try metricsContainer.encode(metricdataquery0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let namespace = namespace {
            try container.encode(namespace, forKey: ClientRuntime.Key("Namespace"))
        }
        if let oKActions = oKActions {
            var oKActionsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("OKActions"))
            for (index0, resourcename0) in oKActions.enumerated() {
                try oKActionsContainer.encode(resourcename0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let period = period {
            try container.encode(period, forKey: ClientRuntime.Key("Period"))
        }
        if let statistic = statistic {
            try container.encode(statistic, forKey: ClientRuntime.Key("Statistic"))
        }
        if let tags = tags {
            var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
            for (index0, tag0) in tags.enumerated() {
                try tagsContainer.encode(tag0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let threshold = threshold {
            try container.encode(threshold, forKey: ClientRuntime.Key("Threshold"))
        }
        if let thresholdMetricId = thresholdMetricId {
            try container.encode(thresholdMetricId, forKey: ClientRuntime.Key("ThresholdMetricId"))
        }
        if let treatMissingData = treatMissingData {
            try container.encode(treatMissingData, forKey: ClientRuntime.Key("TreatMissingData"))
        }
        if let unit = unit {
            try container.encode(unit, forKey: ClientRuntime.Key("Unit"))
        }
        try container.encode("PutMetricAlarm", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-08-01", forKey:ClientRuntime.Key("Version"))
    }
}
