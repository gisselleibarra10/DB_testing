// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CloudWatchClientTypes.MetricAlarm: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case actionsEnabled = "ActionsEnabled"
        case alarmActions = "AlarmActions"
        case alarmArn = "AlarmArn"
        case alarmConfigurationUpdatedTimestamp = "AlarmConfigurationUpdatedTimestamp"
        case alarmDescription = "AlarmDescription"
        case alarmName = "AlarmName"
        case comparisonOperator = "ComparisonOperator"
        case datapointsToAlarm = "DatapointsToAlarm"
        case dimensions = "Dimensions"
        case evaluateLowSampleCountPercentile = "EvaluateLowSampleCountPercentile"
        case evaluationPeriods = "EvaluationPeriods"
        case extendedStatistic = "ExtendedStatistic"
        case insufficientDataActions = "InsufficientDataActions"
        case metricName = "MetricName"
        case metrics = "Metrics"
        case namespace = "Namespace"
        case oKActions = "OKActions"
        case period = "Period"
        case stateReason = "StateReason"
        case stateReasonData = "StateReasonData"
        case stateUpdatedTimestamp = "StateUpdatedTimestamp"
        case stateValue = "StateValue"
        case statistic = "Statistic"
        case threshold = "Threshold"
        case thresholdMetricId = "ThresholdMetricId"
        case treatMissingData = "TreatMissingData"
        case unit = "Unit"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let actionsEnabled = actionsEnabled {
            try container.encode(actionsEnabled, forKey: ClientRuntime.Key("ActionsEnabled"))
        }
        if let alarmActions = alarmActions {
            var alarmActionsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AlarmActions"))
            for (index0, resourcename0) in alarmActions.enumerated() {
                try alarmActionsContainer.encode(resourcename0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let alarmArn = alarmArn {
            try container.encode(alarmArn, forKey: ClientRuntime.Key("AlarmArn"))
        }
        if let alarmConfigurationUpdatedTimestamp = alarmConfigurationUpdatedTimestamp {
            try container.encode(ClientRuntime.TimestampWrapper(alarmConfigurationUpdatedTimestamp, format: .dateTime), forKey: ClientRuntime.Key("alarmConfigurationUpdatedTimestamp"))
        }
        if let alarmDescription = alarmDescription {
            try container.encode(alarmDescription, forKey: ClientRuntime.Key("AlarmDescription"))
        }
        if let alarmName = alarmName {
            try container.encode(alarmName, forKey: ClientRuntime.Key("AlarmName"))
        }
        if let comparisonOperator = comparisonOperator {
            try container.encode(comparisonOperator, forKey: ClientRuntime.Key("ComparisonOperator"))
        }
        if let datapointsToAlarm = datapointsToAlarm {
            try container.encode(datapointsToAlarm, forKey: ClientRuntime.Key("DatapointsToAlarm"))
        }
        if let dimensions = dimensions {
            var dimensionsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Dimensions"))
            for (index0, dimension0) in dimensions.enumerated() {
                try dimensionsContainer.encode(dimension0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let evaluateLowSampleCountPercentile = evaluateLowSampleCountPercentile {
            try container.encode(evaluateLowSampleCountPercentile, forKey: ClientRuntime.Key("EvaluateLowSampleCountPercentile"))
        }
        if let evaluationPeriods = evaluationPeriods {
            try container.encode(evaluationPeriods, forKey: ClientRuntime.Key("EvaluationPeriods"))
        }
        if let extendedStatistic = extendedStatistic {
            try container.encode(extendedStatistic, forKey: ClientRuntime.Key("ExtendedStatistic"))
        }
        if let insufficientDataActions = insufficientDataActions {
            var insufficientDataActionsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("InsufficientDataActions"))
            for (index0, resourcename0) in insufficientDataActions.enumerated() {
                try insufficientDataActionsContainer.encode(resourcename0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let metricName = metricName {
            try container.encode(metricName, forKey: ClientRuntime.Key("MetricName"))
        }
        if let metrics = metrics {
            var metricsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Metrics"))
            for (index0, metricdataquery0) in metrics.enumerated() {
                try metricsContainer.encode(metricdataquery0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let namespace = namespace {
            try container.encode(namespace, forKey: ClientRuntime.Key("Namespace"))
        }
        if let oKActions = oKActions {
            var oKActionsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("OKActions"))
            for (index0, resourcename0) in oKActions.enumerated() {
                try oKActionsContainer.encode(resourcename0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let period = period {
            try container.encode(period, forKey: ClientRuntime.Key("Period"))
        }
        if let stateReason = stateReason {
            try container.encode(stateReason, forKey: ClientRuntime.Key("StateReason"))
        }
        if let stateReasonData = stateReasonData {
            try container.encode(stateReasonData, forKey: ClientRuntime.Key("StateReasonData"))
        }
        if let stateUpdatedTimestamp = stateUpdatedTimestamp {
            try container.encode(ClientRuntime.TimestampWrapper(stateUpdatedTimestamp, format: .dateTime), forKey: ClientRuntime.Key("stateUpdatedTimestamp"))
        }
        if let stateValue = stateValue {
            try container.encode(stateValue, forKey: ClientRuntime.Key("StateValue"))
        }
        if let statistic = statistic {
            try container.encode(statistic, forKey: ClientRuntime.Key("Statistic"))
        }
        if let threshold = threshold {
            try container.encode(threshold, forKey: ClientRuntime.Key("Threshold"))
        }
        if let thresholdMetricId = thresholdMetricId {
            try container.encode(thresholdMetricId, forKey: ClientRuntime.Key("ThresholdMetricId"))
        }
        if let treatMissingData = treatMissingData {
            try container.encode(treatMissingData, forKey: ClientRuntime.Key("TreatMissingData"))
        }
        if let unit = unit {
            try container.encode(unit, forKey: ClientRuntime.Key("Unit"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let alarmNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .alarmName)
        alarmName = alarmNameDecoded
        let alarmArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .alarmArn)
        alarmArn = alarmArnDecoded
        let alarmDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .alarmDescription)
        alarmDescription = alarmDescriptionDecoded
        let alarmConfigurationUpdatedTimestampDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .alarmConfigurationUpdatedTimestamp)
        var alarmConfigurationUpdatedTimestampBuffer:ClientRuntime.Date? = nil
        if let alarmConfigurationUpdatedTimestampDecoded = alarmConfigurationUpdatedTimestampDecoded {
            alarmConfigurationUpdatedTimestampBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(alarmConfigurationUpdatedTimestampDecoded, format: .dateTime)
        }
        alarmConfigurationUpdatedTimestamp = alarmConfigurationUpdatedTimestampBuffer
        let actionsEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .actionsEnabled)
        actionsEnabled = actionsEnabledDecoded
        if containerValues.contains(.oKActions) {
            struct KeyVal0{struct member{}}
            let oKActionsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .oKActions)
            if let oKActionsWrappedContainer = oKActionsWrappedContainer {
                let oKActionsContainer = try oKActionsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var oKActionsBuffer:[Swift.String]? = nil
                if let oKActionsContainer = oKActionsContainer {
                    oKActionsBuffer = [Swift.String]()
                    for stringContainer0 in oKActionsContainer {
                        oKActionsBuffer?.append(stringContainer0)
                    }
                }
                oKActions = oKActionsBuffer
            } else {
                oKActions = []
            }
        } else {
            oKActions = nil
        }
        if containerValues.contains(.alarmActions) {
            struct KeyVal0{struct member{}}
            let alarmActionsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .alarmActions)
            if let alarmActionsWrappedContainer = alarmActionsWrappedContainer {
                let alarmActionsContainer = try alarmActionsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var alarmActionsBuffer:[Swift.String]? = nil
                if let alarmActionsContainer = alarmActionsContainer {
                    alarmActionsBuffer = [Swift.String]()
                    for stringContainer0 in alarmActionsContainer {
                        alarmActionsBuffer?.append(stringContainer0)
                    }
                }
                alarmActions = alarmActionsBuffer
            } else {
                alarmActions = []
            }
        } else {
            alarmActions = nil
        }
        if containerValues.contains(.insufficientDataActions) {
            struct KeyVal0{struct member{}}
            let insufficientDataActionsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .insufficientDataActions)
            if let insufficientDataActionsWrappedContainer = insufficientDataActionsWrappedContainer {
                let insufficientDataActionsContainer = try insufficientDataActionsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var insufficientDataActionsBuffer:[Swift.String]? = nil
                if let insufficientDataActionsContainer = insufficientDataActionsContainer {
                    insufficientDataActionsBuffer = [Swift.String]()
                    for stringContainer0 in insufficientDataActionsContainer {
                        insufficientDataActionsBuffer?.append(stringContainer0)
                    }
                }
                insufficientDataActions = insufficientDataActionsBuffer
            } else {
                insufficientDataActions = []
            }
        } else {
            insufficientDataActions = nil
        }
        let stateValueDecoded = try containerValues.decodeIfPresent(CloudWatchClientTypes.StateValue.self, forKey: .stateValue)
        stateValue = stateValueDecoded
        let stateReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stateReason)
        stateReason = stateReasonDecoded
        let stateReasonDataDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stateReasonData)
        stateReasonData = stateReasonDataDecoded
        let stateUpdatedTimestampDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stateUpdatedTimestamp)
        var stateUpdatedTimestampBuffer:ClientRuntime.Date? = nil
        if let stateUpdatedTimestampDecoded = stateUpdatedTimestampDecoded {
            stateUpdatedTimestampBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(stateUpdatedTimestampDecoded, format: .dateTime)
        }
        stateUpdatedTimestamp = stateUpdatedTimestampBuffer
        let metricNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .metricName)
        metricName = metricNameDecoded
        let namespaceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .namespace)
        namespace = namespaceDecoded
        let statisticDecoded = try containerValues.decodeIfPresent(CloudWatchClientTypes.Statistic.self, forKey: .statistic)
        statistic = statisticDecoded
        let extendedStatisticDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .extendedStatistic)
        extendedStatistic = extendedStatisticDecoded
        if containerValues.contains(.dimensions) {
            struct KeyVal0{struct member{}}
            let dimensionsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .dimensions)
            if let dimensionsWrappedContainer = dimensionsWrappedContainer {
                let dimensionsContainer = try dimensionsWrappedContainer.decodeIfPresent([CloudWatchClientTypes.Dimension].self, forKey: .member)
                var dimensionsBuffer:[CloudWatchClientTypes.Dimension]? = nil
                if let dimensionsContainer = dimensionsContainer {
                    dimensionsBuffer = [CloudWatchClientTypes.Dimension]()
                    for structureContainer0 in dimensionsContainer {
                        dimensionsBuffer?.append(structureContainer0)
                    }
                }
                dimensions = dimensionsBuffer
            } else {
                dimensions = []
            }
        } else {
            dimensions = nil
        }
        let periodDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .period)
        period = periodDecoded
        let unitDecoded = try containerValues.decodeIfPresent(CloudWatchClientTypes.StandardUnit.self, forKey: .unit)
        unit = unitDecoded
        let evaluationPeriodsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .evaluationPeriods)
        evaluationPeriods = evaluationPeriodsDecoded
        let datapointsToAlarmDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .datapointsToAlarm)
        datapointsToAlarm = datapointsToAlarmDecoded
        let thresholdDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .threshold)
        threshold = thresholdDecoded
        let comparisonOperatorDecoded = try containerValues.decodeIfPresent(CloudWatchClientTypes.ComparisonOperator.self, forKey: .comparisonOperator)
        comparisonOperator = comparisonOperatorDecoded
        let treatMissingDataDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .treatMissingData)
        treatMissingData = treatMissingDataDecoded
        let evaluateLowSampleCountPercentileDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .evaluateLowSampleCountPercentile)
        evaluateLowSampleCountPercentile = evaluateLowSampleCountPercentileDecoded
        if containerValues.contains(.metrics) {
            struct KeyVal0{struct member{}}
            let metricsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .metrics)
            if let metricsWrappedContainer = metricsWrappedContainer {
                let metricsContainer = try metricsWrappedContainer.decodeIfPresent([CloudWatchClientTypes.MetricDataQuery].self, forKey: .member)
                var metricsBuffer:[CloudWatchClientTypes.MetricDataQuery]? = nil
                if let metricsContainer = metricsContainer {
                    metricsBuffer = [CloudWatchClientTypes.MetricDataQuery]()
                    for structureContainer0 in metricsContainer {
                        metricsBuffer?.append(structureContainer0)
                    }
                }
                metrics = metricsBuffer
            } else {
                metrics = []
            }
        } else {
            metrics = nil
        }
        let thresholdMetricIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .thresholdMetricId)
        thresholdMetricId = thresholdMetricIdDecoded
    }
}
