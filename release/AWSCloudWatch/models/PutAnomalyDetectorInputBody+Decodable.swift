// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct PutAnomalyDetectorInputBody: Swift.Equatable {
    let namespace: Swift.String?
    let metricName: Swift.String?
    let dimensions: [CloudWatchClientTypes.Dimension]?
    let stat: Swift.String?
    let configuration: CloudWatchClientTypes.AnomalyDetectorConfiguration?
    let singleMetricAnomalyDetector: CloudWatchClientTypes.SingleMetricAnomalyDetector?
    let metricMathAnomalyDetector: CloudWatchClientTypes.MetricMathAnomalyDetector?
}

extension PutAnomalyDetectorInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configuration = "Configuration"
        case dimensions = "Dimensions"
        case metricMathAnomalyDetector = "MetricMathAnomalyDetector"
        case metricName = "MetricName"
        case namespace = "Namespace"
        case singleMetricAnomalyDetector = "SingleMetricAnomalyDetector"
        case stat = "Stat"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let namespaceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .namespace)
        namespace = namespaceDecoded
        let metricNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .metricName)
        metricName = metricNameDecoded
        if containerValues.contains(.dimensions) {
            struct KeyVal0{struct member{}}
            let dimensionsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .dimensions)
            if let dimensionsWrappedContainer = dimensionsWrappedContainer {
                let dimensionsContainer = try dimensionsWrappedContainer.decodeIfPresent([CloudWatchClientTypes.Dimension].self, forKey: .member)
                var dimensionsBuffer:[CloudWatchClientTypes.Dimension]? = nil
                if let dimensionsContainer = dimensionsContainer {
                    dimensionsBuffer = [CloudWatchClientTypes.Dimension]()
                    for structureContainer0 in dimensionsContainer {
                        dimensionsBuffer?.append(structureContainer0)
                    }
                }
                dimensions = dimensionsBuffer
            } else {
                dimensions = []
            }
        } else {
            dimensions = nil
        }
        let statDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stat)
        stat = statDecoded
        let configurationDecoded = try containerValues.decodeIfPresent(CloudWatchClientTypes.AnomalyDetectorConfiguration.self, forKey: .configuration)
        configuration = configurationDecoded
        let singleMetricAnomalyDetectorDecoded = try containerValues.decodeIfPresent(CloudWatchClientTypes.SingleMetricAnomalyDetector.self, forKey: .singleMetricAnomalyDetector)
        singleMetricAnomalyDetector = singleMetricAnomalyDetectorDecoded
        let metricMathAnomalyDetectorDecoded = try containerValues.decodeIfPresent(CloudWatchClientTypes.MetricMathAnomalyDetector.self, forKey: .metricMathAnomalyDetector)
        metricMathAnomalyDetector = metricMathAnomalyDetectorDecoded
    }
}
