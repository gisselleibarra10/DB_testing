// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetMetricStatisticsInputBody: Swift.Equatable {
    let namespace: Swift.String?
    let metricName: Swift.String?
    let dimensions: [CloudWatchClientTypes.Dimension]?
    let startTime: ClientRuntime.Date?
    let endTime: ClientRuntime.Date?
    let period: Swift.Int?
    let statistics: [CloudWatchClientTypes.Statistic]?
    let extendedStatistics: [Swift.String]?
    let unit: CloudWatchClientTypes.StandardUnit?
}

extension GetMetricStatisticsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dimensions = "Dimensions"
        case endTime = "EndTime"
        case extendedStatistics = "ExtendedStatistics"
        case metricName = "MetricName"
        case namespace = "Namespace"
        case period = "Period"
        case startTime = "StartTime"
        case statistics = "Statistics"
        case unit = "Unit"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let namespaceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .namespace)
        namespace = namespaceDecoded
        let metricNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .metricName)
        metricName = metricNameDecoded
        if containerValues.contains(.dimensions) {
            struct KeyVal0{struct member{}}
            let dimensionsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .dimensions)
            if let dimensionsWrappedContainer = dimensionsWrappedContainer {
                let dimensionsContainer = try dimensionsWrappedContainer.decodeIfPresent([CloudWatchClientTypes.Dimension].self, forKey: .member)
                var dimensionsBuffer:[CloudWatchClientTypes.Dimension]? = nil
                if let dimensionsContainer = dimensionsContainer {
                    dimensionsBuffer = [CloudWatchClientTypes.Dimension]()
                    for structureContainer0 in dimensionsContainer {
                        dimensionsBuffer?.append(structureContainer0)
                    }
                }
                dimensions = dimensionsBuffer
            } else {
                dimensions = []
            }
        } else {
            dimensions = nil
        }
        let startTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .startTime)
        var startTimeBuffer:ClientRuntime.Date? = nil
        if let startTimeDecoded = startTimeDecoded {
            startTimeBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(startTimeDecoded, format: .dateTime)
        }
        startTime = startTimeBuffer
        let endTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .endTime)
        var endTimeBuffer:ClientRuntime.Date? = nil
        if let endTimeDecoded = endTimeDecoded {
            endTimeBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(endTimeDecoded, format: .dateTime)
        }
        endTime = endTimeBuffer
        let periodDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .period)
        period = periodDecoded
        if containerValues.contains(.statistics) {
            struct KeyVal0{struct member{}}
            let statisticsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .statistics)
            if let statisticsWrappedContainer = statisticsWrappedContainer {
                let statisticsContainer = try statisticsWrappedContainer.decodeIfPresent([CloudWatchClientTypes.Statistic].self, forKey: .member)
                var statisticsBuffer:[CloudWatchClientTypes.Statistic]? = nil
                if let statisticsContainer = statisticsContainer {
                    statisticsBuffer = [CloudWatchClientTypes.Statistic]()
                    for stringContainer0 in statisticsContainer {
                        statisticsBuffer?.append(stringContainer0)
                    }
                }
                statistics = statisticsBuffer
            } else {
                statistics = []
            }
        } else {
            statistics = nil
        }
        if containerValues.contains(.extendedStatistics) {
            struct KeyVal0{struct member{}}
            let extendedStatisticsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .extendedStatistics)
            if let extendedStatisticsWrappedContainer = extendedStatisticsWrappedContainer {
                let extendedStatisticsContainer = try extendedStatisticsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var extendedStatisticsBuffer:[Swift.String]? = nil
                if let extendedStatisticsContainer = extendedStatisticsContainer {
                    extendedStatisticsBuffer = [Swift.String]()
                    for stringContainer0 in extendedStatisticsContainer {
                        extendedStatisticsBuffer?.append(stringContainer0)
                    }
                }
                extendedStatistics = extendedStatisticsBuffer
            } else {
                extendedStatistics = []
            }
        } else {
            extendedStatistics = nil
        }
        let unitDecoded = try containerValues.decodeIfPresent(CloudWatchClientTypes.StandardUnit.self, forKey: .unit)
        unit = unitDecoded
    }
}
