// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DeleteInsightRulesInputBody: Swift.Equatable {
    let ruleNames: [Swift.String]?
}

extension DeleteInsightRulesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case ruleNames = "RuleNames"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.ruleNames) {
            struct KeyVal0{struct member{}}
            let ruleNamesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .ruleNames)
            if let ruleNamesWrappedContainer = ruleNamesWrappedContainer {
                let ruleNamesContainer = try ruleNamesWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var ruleNamesBuffer:[Swift.String]? = nil
                if let ruleNamesContainer = ruleNamesContainer {
                    ruleNamesBuffer = [Swift.String]()
                    for stringContainer0 in ruleNamesContainer {
                        ruleNamesBuffer?.append(stringContainer0)
                    }
                }
                ruleNames = ruleNamesBuffer
            } else {
                ruleNames = []
            }
        } else {
            ruleNames = nil
        }
    }
}
