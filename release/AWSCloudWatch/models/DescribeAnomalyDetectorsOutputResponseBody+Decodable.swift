// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeAnomalyDetectorsOutputResponseBody: Swift.Equatable {
    let anomalyDetectors: [CloudWatchClientTypes.AnomalyDetector]?
    let nextToken: Swift.String?
}

extension DescribeAnomalyDetectorsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case anomalyDetectors = "AnomalyDetectors"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeAnomalyDetectorsResult"))
        if containerValues.contains(.anomalyDetectors) {
            struct KeyVal0{struct member{}}
            let anomalyDetectorsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .anomalyDetectors)
            if let anomalyDetectorsWrappedContainer = anomalyDetectorsWrappedContainer {
                let anomalyDetectorsContainer = try anomalyDetectorsWrappedContainer.decodeIfPresent([CloudWatchClientTypes.AnomalyDetector].self, forKey: .member)
                var anomalyDetectorsBuffer:[CloudWatchClientTypes.AnomalyDetector]? = nil
                if let anomalyDetectorsContainer = anomalyDetectorsContainer {
                    anomalyDetectorsBuffer = [CloudWatchClientTypes.AnomalyDetector]()
                    for structureContainer0 in anomalyDetectorsContainer {
                        anomalyDetectorsBuffer?.append(structureContainer0)
                    }
                }
                anomalyDetectors = anomalyDetectorsBuffer
            } else {
                anomalyDetectors = []
            }
        } else {
            anomalyDetectors = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
