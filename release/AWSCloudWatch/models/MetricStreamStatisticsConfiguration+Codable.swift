// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CloudWatchClientTypes.MetricStreamStatisticsConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case additionalStatistics = "AdditionalStatistics"
        case includeMetrics = "IncludeMetrics"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let additionalStatistics = additionalStatistics {
            var additionalStatisticsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AdditionalStatistics"))
            for (index0, metricstreamstatistic0) in additionalStatistics.enumerated() {
                try additionalStatisticsContainer.encode(metricstreamstatistic0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let includeMetrics = includeMetrics {
            var includeMetricsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("IncludeMetrics"))
            for (index0, metricstreamstatisticsmetric0) in includeMetrics.enumerated() {
                try includeMetricsContainer.encode(metricstreamstatisticsmetric0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.includeMetrics) {
            struct KeyVal0{struct member{}}
            let includeMetricsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .includeMetrics)
            if let includeMetricsWrappedContainer = includeMetricsWrappedContainer {
                let includeMetricsContainer = try includeMetricsWrappedContainer.decodeIfPresent([CloudWatchClientTypes.MetricStreamStatisticsMetric].self, forKey: .member)
                var includeMetricsBuffer:[CloudWatchClientTypes.MetricStreamStatisticsMetric]? = nil
                if let includeMetricsContainer = includeMetricsContainer {
                    includeMetricsBuffer = [CloudWatchClientTypes.MetricStreamStatisticsMetric]()
                    for structureContainer0 in includeMetricsContainer {
                        includeMetricsBuffer?.append(structureContainer0)
                    }
                }
                includeMetrics = includeMetricsBuffer
            } else {
                includeMetrics = []
            }
        } else {
            includeMetrics = nil
        }
        if containerValues.contains(.additionalStatistics) {
            struct KeyVal0{struct member{}}
            let additionalStatisticsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .additionalStatistics)
            if let additionalStatisticsWrappedContainer = additionalStatisticsWrappedContainer {
                let additionalStatisticsContainer = try additionalStatisticsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var additionalStatisticsBuffer:[Swift.String]? = nil
                if let additionalStatisticsContainer = additionalStatisticsContainer {
                    additionalStatisticsBuffer = [Swift.String]()
                    for stringContainer0 in additionalStatisticsContainer {
                        additionalStatisticsBuffer?.append(stringContainer0)
                    }
                }
                additionalStatistics = additionalStatisticsBuffer
            } else {
                additionalStatistics = []
            }
        } else {
            additionalStatistics = nil
        }
    }
}
