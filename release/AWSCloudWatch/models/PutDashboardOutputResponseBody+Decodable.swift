// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct PutDashboardOutputResponseBody: Swift.Equatable {
    let dashboardValidationMessages: [CloudWatchClientTypes.DashboardValidationMessage]?
}

extension PutDashboardOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dashboardValidationMessages = "DashboardValidationMessages"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("PutDashboardResult"))
        if containerValues.contains(.dashboardValidationMessages) {
            struct KeyVal0{struct member{}}
            let dashboardValidationMessagesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .dashboardValidationMessages)
            if let dashboardValidationMessagesWrappedContainer = dashboardValidationMessagesWrappedContainer {
                let dashboardValidationMessagesContainer = try dashboardValidationMessagesWrappedContainer.decodeIfPresent([CloudWatchClientTypes.DashboardValidationMessage].self, forKey: .member)
                var dashboardValidationMessagesBuffer:[CloudWatchClientTypes.DashboardValidationMessage]? = nil
                if let dashboardValidationMessagesContainer = dashboardValidationMessagesContainer {
                    dashboardValidationMessagesBuffer = [CloudWatchClientTypes.DashboardValidationMessage]()
                    for structureContainer0 in dashboardValidationMessagesContainer {
                        dashboardValidationMessagesBuffer?.append(structureContainer0)
                    }
                }
                dashboardValidationMessages = dashboardValidationMessagesBuffer
            } else {
                dashboardValidationMessages = []
            }
        } else {
            dashboardValidationMessages = nil
        }
    }
}
