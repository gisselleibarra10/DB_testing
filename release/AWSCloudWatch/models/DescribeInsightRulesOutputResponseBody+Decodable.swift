// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeInsightRulesOutputResponseBody: Swift.Equatable {
    let nextToken: Swift.String?
    let insightRules: [CloudWatchClientTypes.InsightRule]?
}

extension DescribeInsightRulesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case insightRules = "InsightRules"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeInsightRulesResult"))
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        if containerValues.contains(.insightRules) {
            struct KeyVal0{struct member{}}
            let insightRulesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .insightRules)
            if let insightRulesWrappedContainer = insightRulesWrappedContainer {
                let insightRulesContainer = try insightRulesWrappedContainer.decodeIfPresent([CloudWatchClientTypes.InsightRule].self, forKey: .member)
                var insightRulesBuffer:[CloudWatchClientTypes.InsightRule]? = nil
                if let insightRulesContainer = insightRulesContainer {
                    insightRulesBuffer = [CloudWatchClientTypes.InsightRule]()
                    for structureContainer0 in insightRulesContainer {
                        insightRulesBuffer?.append(structureContainer0)
                    }
                }
                insightRules = insightRulesBuffer
            } else {
                insightRules = []
            }
        } else {
            insightRules = nil
        }
    }
}
