// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct PutMetricStreamInputBody: Swift.Equatable {
    let name: Swift.String?
    let includeFilters: [CloudWatchClientTypes.MetricStreamFilter]?
    let excludeFilters: [CloudWatchClientTypes.MetricStreamFilter]?
    let firehoseArn: Swift.String?
    let roleArn: Swift.String?
    let outputFormat: CloudWatchClientTypes.MetricStreamOutputFormat?
    let tags: [CloudWatchClientTypes.Tag]?
    let statisticsConfigurations: [CloudWatchClientTypes.MetricStreamStatisticsConfiguration]?
}

extension PutMetricStreamInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case excludeFilters = "ExcludeFilters"
        case firehoseArn = "FirehoseArn"
        case includeFilters = "IncludeFilters"
        case name = "Name"
        case outputFormat = "OutputFormat"
        case roleArn = "RoleArn"
        case statisticsConfigurations = "StatisticsConfigurations"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        if containerValues.contains(.includeFilters) {
            struct KeyVal0{struct member{}}
            let includeFiltersWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .includeFilters)
            if let includeFiltersWrappedContainer = includeFiltersWrappedContainer {
                let includeFiltersContainer = try includeFiltersWrappedContainer.decodeIfPresent([CloudWatchClientTypes.MetricStreamFilter].self, forKey: .member)
                var includeFiltersBuffer:[CloudWatchClientTypes.MetricStreamFilter]? = nil
                if let includeFiltersContainer = includeFiltersContainer {
                    includeFiltersBuffer = [CloudWatchClientTypes.MetricStreamFilter]()
                    for structureContainer0 in includeFiltersContainer {
                        includeFiltersBuffer?.append(structureContainer0)
                    }
                }
                includeFilters = includeFiltersBuffer
            } else {
                includeFilters = []
            }
        } else {
            includeFilters = nil
        }
        if containerValues.contains(.excludeFilters) {
            struct KeyVal0{struct member{}}
            let excludeFiltersWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .excludeFilters)
            if let excludeFiltersWrappedContainer = excludeFiltersWrappedContainer {
                let excludeFiltersContainer = try excludeFiltersWrappedContainer.decodeIfPresent([CloudWatchClientTypes.MetricStreamFilter].self, forKey: .member)
                var excludeFiltersBuffer:[CloudWatchClientTypes.MetricStreamFilter]? = nil
                if let excludeFiltersContainer = excludeFiltersContainer {
                    excludeFiltersBuffer = [CloudWatchClientTypes.MetricStreamFilter]()
                    for structureContainer0 in excludeFiltersContainer {
                        excludeFiltersBuffer?.append(structureContainer0)
                    }
                }
                excludeFilters = excludeFiltersBuffer
            } else {
                excludeFilters = []
            }
        } else {
            excludeFilters = nil
        }
        let firehoseArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .firehoseArn)
        firehoseArn = firehoseArnDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let outputFormatDecoded = try containerValues.decodeIfPresent(CloudWatchClientTypes.MetricStreamOutputFormat.self, forKey: .outputFormat)
        outputFormat = outputFormatDecoded
        if containerValues.contains(.tags) {
            struct KeyVal0{struct member{}}
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .tags)
            if let tagsWrappedContainer = tagsWrappedContainer {
                let tagsContainer = try tagsWrappedContainer.decodeIfPresent([CloudWatchClientTypes.Tag].self, forKey: .member)
                var tagsBuffer:[CloudWatchClientTypes.Tag]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [CloudWatchClientTypes.Tag]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
        if containerValues.contains(.statisticsConfigurations) {
            struct KeyVal0{struct member{}}
            let statisticsConfigurationsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .statisticsConfigurations)
            if let statisticsConfigurationsWrappedContainer = statisticsConfigurationsWrappedContainer {
                let statisticsConfigurationsContainer = try statisticsConfigurationsWrappedContainer.decodeIfPresent([CloudWatchClientTypes.MetricStreamStatisticsConfiguration].self, forKey: .member)
                var statisticsConfigurationsBuffer:[CloudWatchClientTypes.MetricStreamStatisticsConfiguration]? = nil
                if let statisticsConfigurationsContainer = statisticsConfigurationsContainer {
                    statisticsConfigurationsBuffer = [CloudWatchClientTypes.MetricStreamStatisticsConfiguration]()
                    for structureContainer0 in statisticsConfigurationsContainer {
                        statisticsConfigurationsBuffer?.append(structureContainer0)
                    }
                }
                statisticsConfigurations = statisticsConfigurationsBuffer
            } else {
                statisticsConfigurations = []
            }
        } else {
            statisticsConfigurations = nil
        }
    }
}
