// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeAlarmHistoryOutputResponseBody: Swift.Equatable {
    let alarmHistoryItems: [CloudWatchClientTypes.AlarmHistoryItem]?
    let nextToken: Swift.String?
}

extension DescribeAlarmHistoryOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case alarmHistoryItems = "AlarmHistoryItems"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeAlarmHistoryResult"))
        if containerValues.contains(.alarmHistoryItems) {
            struct KeyVal0{struct member{}}
            let alarmHistoryItemsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .alarmHistoryItems)
            if let alarmHistoryItemsWrappedContainer = alarmHistoryItemsWrappedContainer {
                let alarmHistoryItemsContainer = try alarmHistoryItemsWrappedContainer.decodeIfPresent([CloudWatchClientTypes.AlarmHistoryItem].self, forKey: .member)
                var alarmHistoryItemsBuffer:[CloudWatchClientTypes.AlarmHistoryItem]? = nil
                if let alarmHistoryItemsContainer = alarmHistoryItemsContainer {
                    alarmHistoryItemsBuffer = [CloudWatchClientTypes.AlarmHistoryItem]()
                    for structureContainer0 in alarmHistoryItemsContainer {
                        alarmHistoryItemsBuffer?.append(structureContainer0)
                    }
                }
                alarmHistoryItems = alarmHistoryItemsBuffer
            } else {
                alarmHistoryItems = []
            }
        } else {
            alarmHistoryItems = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
