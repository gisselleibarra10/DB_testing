// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetMetricDataInputBody: Swift.Equatable {
    let metricDataQueries: [CloudWatchClientTypes.MetricDataQuery]?
    let startTime: ClientRuntime.Date?
    let endTime: ClientRuntime.Date?
    let nextToken: Swift.String?
    let scanBy: CloudWatchClientTypes.ScanBy?
    let maxDatapoints: Swift.Int?
    let labelOptions: CloudWatchClientTypes.LabelOptions?
}

extension GetMetricDataInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case endTime = "EndTime"
        case labelOptions = "LabelOptions"
        case maxDatapoints = "MaxDatapoints"
        case metricDataQueries = "MetricDataQueries"
        case nextToken = "NextToken"
        case scanBy = "ScanBy"
        case startTime = "StartTime"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.metricDataQueries) {
            struct KeyVal0{struct member{}}
            let metricDataQueriesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .metricDataQueries)
            if let metricDataQueriesWrappedContainer = metricDataQueriesWrappedContainer {
                let metricDataQueriesContainer = try metricDataQueriesWrappedContainer.decodeIfPresent([CloudWatchClientTypes.MetricDataQuery].self, forKey: .member)
                var metricDataQueriesBuffer:[CloudWatchClientTypes.MetricDataQuery]? = nil
                if let metricDataQueriesContainer = metricDataQueriesContainer {
                    metricDataQueriesBuffer = [CloudWatchClientTypes.MetricDataQuery]()
                    for structureContainer0 in metricDataQueriesContainer {
                        metricDataQueriesBuffer?.append(structureContainer0)
                    }
                }
                metricDataQueries = metricDataQueriesBuffer
            } else {
                metricDataQueries = []
            }
        } else {
            metricDataQueries = nil
        }
        let startTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .startTime)
        var startTimeBuffer:ClientRuntime.Date? = nil
        if let startTimeDecoded = startTimeDecoded {
            startTimeBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(startTimeDecoded, format: .dateTime)
        }
        startTime = startTimeBuffer
        let endTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .endTime)
        var endTimeBuffer:ClientRuntime.Date? = nil
        if let endTimeDecoded = endTimeDecoded {
            endTimeBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(endTimeDecoded, format: .dateTime)
        }
        endTime = endTimeBuffer
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let scanByDecoded = try containerValues.decodeIfPresent(CloudWatchClientTypes.ScanBy.self, forKey: .scanBy)
        scanBy = scanByDecoded
        let maxDatapointsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxDatapoints)
        maxDatapoints = maxDatapointsDecoded
        let labelOptionsDecoded = try containerValues.decodeIfPresent(CloudWatchClientTypes.LabelOptions.self, forKey: .labelOptions)
        labelOptions = labelOptionsDecoded
    }
}
