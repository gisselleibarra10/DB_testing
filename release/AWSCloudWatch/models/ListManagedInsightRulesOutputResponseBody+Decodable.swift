// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListManagedInsightRulesOutputResponseBody: Swift.Equatable {
    let managedRules: [CloudWatchClientTypes.ManagedRuleDescription]?
    let nextToken: Swift.String?
}

extension ListManagedInsightRulesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case managedRules = "ManagedRules"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("ListManagedInsightRulesResult"))
        if containerValues.contains(.managedRules) {
            struct KeyVal0{struct member{}}
            let managedRulesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .managedRules)
            if let managedRulesWrappedContainer = managedRulesWrappedContainer {
                let managedRulesContainer = try managedRulesWrappedContainer.decodeIfPresent([CloudWatchClientTypes.ManagedRuleDescription].self, forKey: .member)
                var managedRulesBuffer:[CloudWatchClientTypes.ManagedRuleDescription]? = nil
                if let managedRulesContainer = managedRulesContainer {
                    managedRulesBuffer = [CloudWatchClientTypes.ManagedRuleDescription]()
                    for structureContainer0 in managedRulesContainer {
                        managedRulesBuffer?.append(structureContainer0)
                    }
                }
                managedRules = managedRulesBuffer
            } else {
                managedRules = []
            }
        } else {
            managedRules = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
