// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeAlarmsForMetricOutputResponseBody: Swift.Equatable {
    let metricAlarms: [CloudWatchClientTypes.MetricAlarm]?
}

extension DescribeAlarmsForMetricOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case metricAlarms = "MetricAlarms"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeAlarmsForMetricResult"))
        if containerValues.contains(.metricAlarms) {
            struct KeyVal0{struct member{}}
            let metricAlarmsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .metricAlarms)
            if let metricAlarmsWrappedContainer = metricAlarmsWrappedContainer {
                let metricAlarmsContainer = try metricAlarmsWrappedContainer.decodeIfPresent([CloudWatchClientTypes.MetricAlarm].self, forKey: .member)
                var metricAlarmsBuffer:[CloudWatchClientTypes.MetricAlarm]? = nil
                if let metricAlarmsContainer = metricAlarmsContainer {
                    metricAlarmsBuffer = [CloudWatchClientTypes.MetricAlarm]()
                    for structureContainer0 in metricAlarmsContainer {
                        metricAlarmsBuffer?.append(structureContainer0)
                    }
                }
                metricAlarms = metricAlarmsBuffer
            } else {
                metricAlarms = []
            }
        } else {
            metricAlarms = nil
        }
    }
}
