// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CloudWatchClientTypes {
    /// The details about a composite alarm.
    public struct CompositeAlarm: Swift.Equatable {
        /// Indicates whether actions should be executed during any changes to the alarm state.
        public var actionsEnabled: Swift.Bool?
        /// When the value is ALARM, it means that the actions are suppressed because the suppressor alarm is in ALARM When the value is WaitPeriod, it means that the actions are suppressed because the composite alarm is waiting for the suppressor alarm to go into into the ALARM state. The maximum waiting time is as specified in ActionsSuppressorWaitPeriod. After this time, the composite alarm performs its actions. When the value is ExtensionPeriod, it means that the actions are suppressed because the composite alarm is waiting after the suppressor alarm went out of the ALARM state. The maximum waiting time is as specified in ActionsSuppressorExtensionPeriod. After this time, the composite alarm performs its actions.
        public var actionsSuppressedBy: CloudWatchClientTypes.ActionsSuppressedBy?
        /// Captures the reason for action suppression.
        public var actionsSuppressedReason: Swift.String?
        /// Actions will be suppressed if the suppressor alarm is in the ALARM state. ActionsSuppressor can be an AlarmName or an Amazon Resource Name (ARN) from an existing alarm.
        public var actionsSuppressor: Swift.String?
        /// The maximum time in seconds that the composite alarm waits after suppressor alarm goes out of the ALARM state. After this time, the composite alarm performs its actions. ExtensionPeriod is required only when ActionsSuppressor is specified.
        public var actionsSuppressorExtensionPeriod: Swift.Int?
        /// The maximum time in seconds that the composite alarm waits for the suppressor alarm to go into the ALARM state. After this time, the composite alarm performs its actions. WaitPeriod is required only when ActionsSuppressor is specified.
        public var actionsSuppressorWaitPeriod: Swift.Int?
        /// The actions to execute when this alarm transitions to the ALARM state from any other state. Each action is specified as an Amazon Resource Name (ARN).
        public var alarmActions: [Swift.String]?
        /// The Amazon Resource Name (ARN) of the alarm.
        public var alarmArn: Swift.String?
        /// The time stamp of the last update to the alarm configuration.
        public var alarmConfigurationUpdatedTimestamp: ClientRuntime.Date?
        /// The description of the alarm.
        public var alarmDescription: Swift.String?
        /// The name of the alarm.
        public var alarmName: Swift.String?
        /// The rule that this alarm uses to evaluate its alarm state.
        public var alarmRule: Swift.String?
        /// The actions to execute when this alarm transitions to the INSUFFICIENT_DATA state from any other state. Each action is specified as an Amazon Resource Name (ARN).
        public var insufficientDataActions: [Swift.String]?
        /// The actions to execute when this alarm transitions to the OK state from any other state. Each action is specified as an Amazon Resource Name (ARN).
        public var oKActions: [Swift.String]?
        /// An explanation for the alarm state, in text format.
        public var stateReason: Swift.String?
        /// An explanation for the alarm state, in JSON format.
        public var stateReasonData: Swift.String?
        /// The timestamp of the last change to the alarm's StateValue.
        public var stateTransitionedTimestamp: ClientRuntime.Date?
        /// Tracks the timestamp of any state update, even if StateValue doesn't change.
        public var stateUpdatedTimestamp: ClientRuntime.Date?
        /// The state value for the alarm.
        public var stateValue: CloudWatchClientTypes.StateValue?

        public init (
            actionsEnabled: Swift.Bool? = nil,
            actionsSuppressedBy: CloudWatchClientTypes.ActionsSuppressedBy? = nil,
            actionsSuppressedReason: Swift.String? = nil,
            actionsSuppressor: Swift.String? = nil,
            actionsSuppressorExtensionPeriod: Swift.Int? = nil,
            actionsSuppressorWaitPeriod: Swift.Int? = nil,
            alarmActions: [Swift.String]? = nil,
            alarmArn: Swift.String? = nil,
            alarmConfigurationUpdatedTimestamp: ClientRuntime.Date? = nil,
            alarmDescription: Swift.String? = nil,
            alarmName: Swift.String? = nil,
            alarmRule: Swift.String? = nil,
            insufficientDataActions: [Swift.String]? = nil,
            oKActions: [Swift.String]? = nil,
            stateReason: Swift.String? = nil,
            stateReasonData: Swift.String? = nil,
            stateTransitionedTimestamp: ClientRuntime.Date? = nil,
            stateUpdatedTimestamp: ClientRuntime.Date? = nil,
            stateValue: CloudWatchClientTypes.StateValue? = nil
        )
        {
            self.actionsEnabled = actionsEnabled
            self.actionsSuppressedBy = actionsSuppressedBy
            self.actionsSuppressedReason = actionsSuppressedReason
            self.actionsSuppressor = actionsSuppressor
            self.actionsSuppressorExtensionPeriod = actionsSuppressorExtensionPeriod
            self.actionsSuppressorWaitPeriod = actionsSuppressorWaitPeriod
            self.alarmActions = alarmActions
            self.alarmArn = alarmArn
            self.alarmConfigurationUpdatedTimestamp = alarmConfigurationUpdatedTimestamp
            self.alarmDescription = alarmDescription
            self.alarmName = alarmName
            self.alarmRule = alarmRule
            self.insufficientDataActions = insufficientDataActions
            self.oKActions = oKActions
            self.stateReason = stateReason
            self.stateReasonData = stateReasonData
            self.stateTransitionedTimestamp = stateTransitionedTimestamp
            self.stateUpdatedTimestamp = stateUpdatedTimestamp
            self.stateValue = stateValue
        }
    }

}
