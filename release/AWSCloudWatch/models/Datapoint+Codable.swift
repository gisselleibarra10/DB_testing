// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CloudWatchClientTypes.Datapoint: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case average = "Average"
        case extendedStatistics = "ExtendedStatistics"
        case maximum = "Maximum"
        case minimum = "Minimum"
        case sampleCount = "SampleCount"
        case sum = "Sum"
        case timestamp = "Timestamp"
        case unit = "Unit"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let average = average {
            try container.encode(average, forKey: ClientRuntime.Key("Average"))
        }
        if let extendedStatistics = extendedStatistics {
            var extendedStatisticsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ExtendedStatistics"))
            for (index0, element0) in extendedStatistics.sorted(by: { $0.key < $1.key }).enumerated() {
                let extendedstatisticKey0 = element0.key
                let datapointvalueValue0 = element0.value
                var entryContainer0 = extendedStatisticsContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("entry.\(index0.advanced(by: 1))"))
                var keyContainer0 = entryContainer0.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("key"))
                try keyContainer0.encode(extendedstatisticKey0, forKey: ClientRuntime.Key(""))
                var valueContainer0 = entryContainer0.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("value"))
                try valueContainer0.encode(datapointvalueValue0, forKey: ClientRuntime.Key(""))
            }
        }
        if let maximum = maximum {
            try container.encode(maximum, forKey: ClientRuntime.Key("Maximum"))
        }
        if let minimum = minimum {
            try container.encode(minimum, forKey: ClientRuntime.Key("Minimum"))
        }
        if let sampleCount = sampleCount {
            try container.encode(sampleCount, forKey: ClientRuntime.Key("SampleCount"))
        }
        if let sum = sum {
            try container.encode(sum, forKey: ClientRuntime.Key("Sum"))
        }
        if let timestamp = timestamp {
            try container.encode(ClientRuntime.TimestampWrapper(timestamp, format: .dateTime), forKey: ClientRuntime.Key("timestamp"))
        }
        if let unit = unit {
            try container.encode(unit, forKey: ClientRuntime.Key("Unit"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let timestampDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .timestamp)
        var timestampBuffer:ClientRuntime.Date? = nil
        if let timestampDecoded = timestampDecoded {
            timestampBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(timestampDecoded, format: .dateTime)
        }
        timestamp = timestampBuffer
        let sampleCountDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .sampleCount)
        sampleCount = sampleCountDecoded
        let averageDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .average)
        average = averageDecoded
        let sumDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .sum)
        sum = sumDecoded
        let minimumDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .minimum)
        minimum = minimumDecoded
        let maximumDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .maximum)
        maximum = maximumDecoded
        let unitDecoded = try containerValues.decodeIfPresent(CloudWatchClientTypes.StandardUnit.self, forKey: .unit)
        unit = unitDecoded
        if containerValues.contains(.extendedStatistics) {
            struct KeyVal0{struct key{}; struct value{}}
            let extendedStatisticsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: ClientRuntime.MapEntry<Swift.String, Swift.Double, KeyVal0.key, KeyVal0.value>.CodingKeys.self, forKey: .extendedStatistics)
            if let extendedStatisticsWrappedContainer = extendedStatisticsWrappedContainer {
                let extendedStatisticsContainer = try extendedStatisticsWrappedContainer.decodeIfPresent([ClientRuntime.MapKeyValue<Swift.String, Swift.Double, KeyVal0.key, KeyVal0.value>].self, forKey: .entry)
                var extendedStatisticsBuffer: [Swift.String:Swift.Double]? = nil
                if let extendedStatisticsContainer = extendedStatisticsContainer {
                    extendedStatisticsBuffer = [Swift.String:Swift.Double]()
                    for doubleContainer0 in extendedStatisticsContainer {
                        extendedStatisticsBuffer?[doubleContainer0.key] = doubleContainer0.value
                    }
                }
                extendedStatistics = extendedStatisticsBuffer
            } else {
                extendedStatistics = [:]
            }
        } else {
            extendedStatistics = nil
        }
    }
}
