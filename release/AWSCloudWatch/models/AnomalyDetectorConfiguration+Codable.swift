// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CloudWatchClientTypes.AnomalyDetectorConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case excludedTimeRanges = "ExcludedTimeRanges"
        case metricTimezone = "MetricTimezone"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let excludedTimeRanges = excludedTimeRanges {
            var excludedTimeRangesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ExcludedTimeRanges"))
            for (index0, range0) in excludedTimeRanges.enumerated() {
                try excludedTimeRangesContainer.encode(range0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let metricTimezone = metricTimezone {
            try container.encode(metricTimezone, forKey: ClientRuntime.Key("MetricTimezone"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.excludedTimeRanges) {
            struct KeyVal0{struct member{}}
            let excludedTimeRangesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .excludedTimeRanges)
            if let excludedTimeRangesWrappedContainer = excludedTimeRangesWrappedContainer {
                let excludedTimeRangesContainer = try excludedTimeRangesWrappedContainer.decodeIfPresent([CloudWatchClientTypes.Range].self, forKey: .member)
                var excludedTimeRangesBuffer:[CloudWatchClientTypes.Range]? = nil
                if let excludedTimeRangesContainer = excludedTimeRangesContainer {
                    excludedTimeRangesBuffer = [CloudWatchClientTypes.Range]()
                    for structureContainer0 in excludedTimeRangesContainer {
                        excludedTimeRangesBuffer?.append(structureContainer0)
                    }
                }
                excludedTimeRanges = excludedTimeRangesBuffer
            } else {
                excludedTimeRanges = []
            }
        } else {
            excludedTimeRanges = nil
        }
        let metricTimezoneDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .metricTimezone)
        metricTimezone = metricTimezoneDecoded
    }
}
