// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct PutMetricDataInputBody: Swift.Equatable {
    let namespace: Swift.String?
    let metricData: [CloudWatchClientTypes.MetricDatum]?
}

extension PutMetricDataInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case metricData = "MetricData"
        case namespace = "Namespace"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let namespaceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .namespace)
        namespace = namespaceDecoded
        if containerValues.contains(.metricData) {
            struct KeyVal0{struct member{}}
            let metricDataWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .metricData)
            if let metricDataWrappedContainer = metricDataWrappedContainer {
                let metricDataContainer = try metricDataWrappedContainer.decodeIfPresent([CloudWatchClientTypes.MetricDatum].self, forKey: .member)
                var metricDataBuffer:[CloudWatchClientTypes.MetricDatum]? = nil
                if let metricDataContainer = metricDataContainer {
                    metricDataBuffer = [CloudWatchClientTypes.MetricDatum]()
                    for structureContainer0 in metricDataContainer {
                        metricDataBuffer?.append(structureContainer0)
                    }
                }
                metricData = metricDataBuffer
            } else {
                metricData = []
            }
        } else {
            metricData = nil
        }
    }
}
