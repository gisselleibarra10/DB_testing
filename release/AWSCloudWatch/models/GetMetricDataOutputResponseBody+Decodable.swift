// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetMetricDataOutputResponseBody: Swift.Equatable {
    let metricDataResults: [CloudWatchClientTypes.MetricDataResult]?
    let nextToken: Swift.String?
    let messages: [CloudWatchClientTypes.MessageData]?
}

extension GetMetricDataOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case messages = "Messages"
        case metricDataResults = "MetricDataResults"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("GetMetricDataResult"))
        if containerValues.contains(.metricDataResults) {
            struct KeyVal0{struct member{}}
            let metricDataResultsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .metricDataResults)
            if let metricDataResultsWrappedContainer = metricDataResultsWrappedContainer {
                let metricDataResultsContainer = try metricDataResultsWrappedContainer.decodeIfPresent([CloudWatchClientTypes.MetricDataResult].self, forKey: .member)
                var metricDataResultsBuffer:[CloudWatchClientTypes.MetricDataResult]? = nil
                if let metricDataResultsContainer = metricDataResultsContainer {
                    metricDataResultsBuffer = [CloudWatchClientTypes.MetricDataResult]()
                    for structureContainer0 in metricDataResultsContainer {
                        metricDataResultsBuffer?.append(structureContainer0)
                    }
                }
                metricDataResults = metricDataResultsBuffer
            } else {
                metricDataResults = []
            }
        } else {
            metricDataResults = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        if containerValues.contains(.messages) {
            struct KeyVal0{struct member{}}
            let messagesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .messages)
            if let messagesWrappedContainer = messagesWrappedContainer {
                let messagesContainer = try messagesWrappedContainer.decodeIfPresent([CloudWatchClientTypes.MessageData].self, forKey: .member)
                var messagesBuffer:[CloudWatchClientTypes.MessageData]? = nil
                if let messagesContainer = messagesContainer {
                    messagesBuffer = [CloudWatchClientTypes.MessageData]()
                    for structureContainer0 in messagesContainer {
                        messagesBuffer?.append(structureContainer0)
                    }
                }
                messages = messagesBuffer
            } else {
                messages = []
            }
        } else {
            messages = nil
        }
    }
}
