// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension UpdateSlackChannelConfigurationInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case channelId
        case channelName
        case channelRoleArn
        case notifyOnAddCorrespondenceToCase
        case notifyOnCaseSeverity
        case notifyOnCreateOrReopenCase
        case notifyOnResolveCase
        case teamId
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let channelId = self.channelId {
            try encodeContainer.encode(channelId, forKey: .channelId)
        }
        if let channelName = self.channelName {
            try encodeContainer.encode(channelName, forKey: .channelName)
        }
        if let channelRoleArn = self.channelRoleArn {
            try encodeContainer.encode(channelRoleArn, forKey: .channelRoleArn)
        }
        if let notifyOnAddCorrespondenceToCase = self.notifyOnAddCorrespondenceToCase {
            try encodeContainer.encode(notifyOnAddCorrespondenceToCase, forKey: .notifyOnAddCorrespondenceToCase)
        }
        if let notifyOnCaseSeverity = self.notifyOnCaseSeverity {
            try encodeContainer.encode(notifyOnCaseSeverity.rawValue, forKey: .notifyOnCaseSeverity)
        }
        if let notifyOnCreateOrReopenCase = self.notifyOnCreateOrReopenCase {
            try encodeContainer.encode(notifyOnCreateOrReopenCase, forKey: .notifyOnCreateOrReopenCase)
        }
        if let notifyOnResolveCase = self.notifyOnResolveCase {
            try encodeContainer.encode(notifyOnResolveCase, forKey: .notifyOnResolveCase)
        }
        if let teamId = self.teamId {
            try encodeContainer.encode(teamId, forKey: .teamId)
        }
    }
}
