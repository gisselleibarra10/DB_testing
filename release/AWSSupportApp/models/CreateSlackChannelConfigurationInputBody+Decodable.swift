// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateSlackChannelConfigurationInputBody: Swift.Equatable {
    let teamId: Swift.String?
    let channelId: Swift.String?
    let channelName: Swift.String?
    let notifyOnCreateOrReopenCase: Swift.Bool?
    let notifyOnAddCorrespondenceToCase: Swift.Bool?
    let notifyOnResolveCase: Swift.Bool?
    let notifyOnCaseSeverity: SupportAppClientTypes.NotificationSeverityLevel?
    let channelRoleArn: Swift.String?
}

extension CreateSlackChannelConfigurationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case channelId
        case channelName
        case channelRoleArn
        case notifyOnAddCorrespondenceToCase
        case notifyOnCaseSeverity
        case notifyOnCreateOrReopenCase
        case notifyOnResolveCase
        case teamId
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let teamIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .teamId)
        teamId = teamIdDecoded
        let channelIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .channelId)
        channelId = channelIdDecoded
        let channelNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .channelName)
        channelName = channelNameDecoded
        let notifyOnCreateOrReopenCaseDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .notifyOnCreateOrReopenCase)
        notifyOnCreateOrReopenCase = notifyOnCreateOrReopenCaseDecoded
        let notifyOnAddCorrespondenceToCaseDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .notifyOnAddCorrespondenceToCase)
        notifyOnAddCorrespondenceToCase = notifyOnAddCorrespondenceToCaseDecoded
        let notifyOnResolveCaseDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .notifyOnResolveCase)
        notifyOnResolveCase = notifyOnResolveCaseDecoded
        let notifyOnCaseSeverityDecoded = try containerValues.decodeIfPresent(SupportAppClientTypes.NotificationSeverityLevel.self, forKey: .notifyOnCaseSeverity)
        notifyOnCaseSeverity = notifyOnCaseSeverityDecoded
        let channelRoleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .channelRoleArn)
        channelRoleArn = channelRoleArnDecoded
    }
}
