// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ElasticsearchClientTypes.UpgradeHistory: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case startTimestamp = "StartTimestamp"
        case stepsList = "StepsList"
        case upgradeName = "UpgradeName"
        case upgradeStatus = "UpgradeStatus"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let startTimestamp = self.startTimestamp {
            try encodeContainer.encode(startTimestamp.timeIntervalSince1970, forKey: .startTimestamp)
        }
        if let stepsList = stepsList {
            var stepsListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .stepsList)
            for upgradestepslist0 in stepsList {
                try stepsListContainer.encode(upgradestepslist0)
            }
        }
        if let upgradeName = self.upgradeName {
            try encodeContainer.encode(upgradeName, forKey: .upgradeName)
        }
        if let upgradeStatus = self.upgradeStatus {
            try encodeContainer.encode(upgradeStatus.rawValue, forKey: .upgradeStatus)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let upgradeNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .upgradeName)
        upgradeName = upgradeNameDecoded
        let startTimestampDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .startTimestamp)
        startTimestamp = startTimestampDecoded
        let upgradeStatusDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.UpgradeStatus.self, forKey: .upgradeStatus)
        upgradeStatus = upgradeStatusDecoded
        let stepsListContainer = try containerValues.decodeIfPresent([ElasticsearchClientTypes.UpgradeStepItem?].self, forKey: .stepsList)
        var stepsListDecoded0:[ElasticsearchClientTypes.UpgradeStepItem]? = nil
        if let stepsListContainer = stepsListContainer {
            stepsListDecoded0 = [ElasticsearchClientTypes.UpgradeStepItem]()
            for structure0 in stepsListContainer {
                if let structure0 = structure0 {
                    stepsListDecoded0?.append(structure0)
                }
            }
        }
        stepsList = stepsListDecoded0
    }
}
