// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeReservedElasticsearchInstanceOfferingsOutputResponseBody: Swift.Equatable {
    let nextToken: Swift.String?
    let reservedElasticsearchInstanceOfferings: [ElasticsearchClientTypes.ReservedElasticsearchInstanceOffering]?
}

extension DescribeReservedElasticsearchInstanceOfferingsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case reservedElasticsearchInstanceOfferings = "ReservedElasticsearchInstanceOfferings"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let reservedElasticsearchInstanceOfferingsContainer = try containerValues.decodeIfPresent([ElasticsearchClientTypes.ReservedElasticsearchInstanceOffering?].self, forKey: .reservedElasticsearchInstanceOfferings)
        var reservedElasticsearchInstanceOfferingsDecoded0:[ElasticsearchClientTypes.ReservedElasticsearchInstanceOffering]? = nil
        if let reservedElasticsearchInstanceOfferingsContainer = reservedElasticsearchInstanceOfferingsContainer {
            reservedElasticsearchInstanceOfferingsDecoded0 = [ElasticsearchClientTypes.ReservedElasticsearchInstanceOffering]()
            for structure0 in reservedElasticsearchInstanceOfferingsContainer {
                if let structure0 = structure0 {
                    reservedElasticsearchInstanceOfferingsDecoded0?.append(structure0)
                }
            }
        }
        reservedElasticsearchInstanceOfferings = reservedElasticsearchInstanceOfferingsDecoded0
    }
}
