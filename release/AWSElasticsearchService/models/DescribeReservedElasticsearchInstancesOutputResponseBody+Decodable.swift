// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeReservedElasticsearchInstancesOutputResponseBody: Swift.Equatable {
    let nextToken: Swift.String?
    let reservedElasticsearchInstances: [ElasticsearchClientTypes.ReservedElasticsearchInstance]?
}

extension DescribeReservedElasticsearchInstancesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case reservedElasticsearchInstances = "ReservedElasticsearchInstances"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let reservedElasticsearchInstancesContainer = try containerValues.decodeIfPresent([ElasticsearchClientTypes.ReservedElasticsearchInstance?].self, forKey: .reservedElasticsearchInstances)
        var reservedElasticsearchInstancesDecoded0:[ElasticsearchClientTypes.ReservedElasticsearchInstance]? = nil
        if let reservedElasticsearchInstancesContainer = reservedElasticsearchInstancesContainer {
            reservedElasticsearchInstancesDecoded0 = [ElasticsearchClientTypes.ReservedElasticsearchInstance]()
            for structure0 in reservedElasticsearchInstancesContainer {
                if let structure0 = structure0 {
                    reservedElasticsearchInstancesDecoded0?.append(structure0)
                }
            }
        }
        reservedElasticsearchInstances = reservedElasticsearchInstancesDecoded0
    }
}
