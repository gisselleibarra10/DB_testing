// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetPackageVersionHistoryOutputResponseBody: Swift.Equatable {
    let packageID: Swift.String?
    let packageVersionHistoryList: [ElasticsearchClientTypes.PackageVersionHistory]?
    let nextToken: Swift.String?
}

extension GetPackageVersionHistoryOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case packageID = "PackageID"
        case packageVersionHistoryList = "PackageVersionHistoryList"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let packageIDDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .packageID)
        packageID = packageIDDecoded
        let packageVersionHistoryListContainer = try containerValues.decodeIfPresent([ElasticsearchClientTypes.PackageVersionHistory?].self, forKey: .packageVersionHistoryList)
        var packageVersionHistoryListDecoded0:[ElasticsearchClientTypes.PackageVersionHistory]? = nil
        if let packageVersionHistoryListContainer = packageVersionHistoryListContainer {
            packageVersionHistoryListDecoded0 = [ElasticsearchClientTypes.PackageVersionHistory]()
            for structure0 in packageVersionHistoryListContainer {
                if let structure0 = structure0 {
                    packageVersionHistoryListDecoded0?.append(structure0)
                }
            }
        }
        packageVersionHistoryList = packageVersionHistoryListDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
