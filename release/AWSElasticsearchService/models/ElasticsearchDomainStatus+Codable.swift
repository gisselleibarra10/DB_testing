// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ElasticsearchClientTypes.ElasticsearchDomainStatus: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case aRN = "ARN"
        case accessPolicies = "AccessPolicies"
        case advancedOptions = "AdvancedOptions"
        case advancedSecurityOptions = "AdvancedSecurityOptions"
        case autoTuneOptions = "AutoTuneOptions"
        case changeProgressDetails = "ChangeProgressDetails"
        case cognitoOptions = "CognitoOptions"
        case created = "Created"
        case deleted = "Deleted"
        case domainEndpointOptions = "DomainEndpointOptions"
        case domainId = "DomainId"
        case domainName = "DomainName"
        case eBSOptions = "EBSOptions"
        case elasticsearchClusterConfig = "ElasticsearchClusterConfig"
        case elasticsearchVersion = "ElasticsearchVersion"
        case encryptionAtRestOptions = "EncryptionAtRestOptions"
        case endpoint = "Endpoint"
        case endpoints = "Endpoints"
        case logPublishingOptions = "LogPublishingOptions"
        case nodeToNodeEncryptionOptions = "NodeToNodeEncryptionOptions"
        case processing = "Processing"
        case serviceSoftwareOptions = "ServiceSoftwareOptions"
        case snapshotOptions = "SnapshotOptions"
        case upgradeProcessing = "UpgradeProcessing"
        case vPCOptions = "VPCOptions"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let aRN = self.aRN {
            try encodeContainer.encode(aRN, forKey: .aRN)
        }
        if let accessPolicies = self.accessPolicies {
            try encodeContainer.encode(accessPolicies, forKey: .accessPolicies)
        }
        if let advancedOptions = advancedOptions {
            var advancedOptionsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .advancedOptions)
            for (dictKey0, advancedoptions0) in advancedOptions {
                try advancedOptionsContainer.encode(advancedoptions0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let advancedSecurityOptions = self.advancedSecurityOptions {
            try encodeContainer.encode(advancedSecurityOptions, forKey: .advancedSecurityOptions)
        }
        if let autoTuneOptions = self.autoTuneOptions {
            try encodeContainer.encode(autoTuneOptions, forKey: .autoTuneOptions)
        }
        if let changeProgressDetails = self.changeProgressDetails {
            try encodeContainer.encode(changeProgressDetails, forKey: .changeProgressDetails)
        }
        if let cognitoOptions = self.cognitoOptions {
            try encodeContainer.encode(cognitoOptions, forKey: .cognitoOptions)
        }
        if let created = self.created {
            try encodeContainer.encode(created, forKey: .created)
        }
        if let deleted = self.deleted {
            try encodeContainer.encode(deleted, forKey: .deleted)
        }
        if let domainEndpointOptions = self.domainEndpointOptions {
            try encodeContainer.encode(domainEndpointOptions, forKey: .domainEndpointOptions)
        }
        if let domainId = self.domainId {
            try encodeContainer.encode(domainId, forKey: .domainId)
        }
        if let domainName = self.domainName {
            try encodeContainer.encode(domainName, forKey: .domainName)
        }
        if let eBSOptions = self.eBSOptions {
            try encodeContainer.encode(eBSOptions, forKey: .eBSOptions)
        }
        if let elasticsearchClusterConfig = self.elasticsearchClusterConfig {
            try encodeContainer.encode(elasticsearchClusterConfig, forKey: .elasticsearchClusterConfig)
        }
        if let elasticsearchVersion = self.elasticsearchVersion {
            try encodeContainer.encode(elasticsearchVersion, forKey: .elasticsearchVersion)
        }
        if let encryptionAtRestOptions = self.encryptionAtRestOptions {
            try encodeContainer.encode(encryptionAtRestOptions, forKey: .encryptionAtRestOptions)
        }
        if let endpoint = self.endpoint {
            try encodeContainer.encode(endpoint, forKey: .endpoint)
        }
        if let endpoints = endpoints {
            var endpointsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .endpoints)
            for (dictKey0, endpointsmap0) in endpoints {
                try endpointsContainer.encode(endpointsmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let logPublishingOptions = logPublishingOptions {
            var logPublishingOptionsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .logPublishingOptions)
            for (dictKey0, logpublishingoptions0) in logPublishingOptions {
                try logPublishingOptionsContainer.encode(logpublishingoptions0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let nodeToNodeEncryptionOptions = self.nodeToNodeEncryptionOptions {
            try encodeContainer.encode(nodeToNodeEncryptionOptions, forKey: .nodeToNodeEncryptionOptions)
        }
        if let processing = self.processing {
            try encodeContainer.encode(processing, forKey: .processing)
        }
        if let serviceSoftwareOptions = self.serviceSoftwareOptions {
            try encodeContainer.encode(serviceSoftwareOptions, forKey: .serviceSoftwareOptions)
        }
        if let snapshotOptions = self.snapshotOptions {
            try encodeContainer.encode(snapshotOptions, forKey: .snapshotOptions)
        }
        if let upgradeProcessing = self.upgradeProcessing {
            try encodeContainer.encode(upgradeProcessing, forKey: .upgradeProcessing)
        }
        if let vPCOptions = self.vPCOptions {
            try encodeContainer.encode(vPCOptions, forKey: .vPCOptions)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domainId)
        domainId = domainIdDecoded
        let domainNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domainName)
        domainName = domainNameDecoded
        let aRNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .aRN)
        aRN = aRNDecoded
        let createdDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .created)
        created = createdDecoded
        let deletedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .deleted)
        deleted = deletedDecoded
        let endpointDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .endpoint)
        endpoint = endpointDecoded
        let endpointsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .endpoints)
        var endpointsDecoded0: [Swift.String:Swift.String]? = nil
        if let endpointsContainer = endpointsContainer {
            endpointsDecoded0 = [Swift.String:Swift.String]()
            for (key0, serviceurl0) in endpointsContainer {
                if let serviceurl0 = serviceurl0 {
                    endpointsDecoded0?[key0] = serviceurl0
                }
            }
        }
        endpoints = endpointsDecoded0
        let processingDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .processing)
        processing = processingDecoded
        let upgradeProcessingDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .upgradeProcessing)
        upgradeProcessing = upgradeProcessingDecoded
        let elasticsearchVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .elasticsearchVersion)
        elasticsearchVersion = elasticsearchVersionDecoded
        let elasticsearchClusterConfigDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.ElasticsearchClusterConfig.self, forKey: .elasticsearchClusterConfig)
        elasticsearchClusterConfig = elasticsearchClusterConfigDecoded
        let eBSOptionsDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.EBSOptions.self, forKey: .eBSOptions)
        eBSOptions = eBSOptionsDecoded
        let accessPoliciesDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .accessPolicies)
        accessPolicies = accessPoliciesDecoded
        let snapshotOptionsDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.SnapshotOptions.self, forKey: .snapshotOptions)
        snapshotOptions = snapshotOptionsDecoded
        let vPCOptionsDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.VPCDerivedInfo.self, forKey: .vPCOptions)
        vPCOptions = vPCOptionsDecoded
        let cognitoOptionsDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.CognitoOptions.self, forKey: .cognitoOptions)
        cognitoOptions = cognitoOptionsDecoded
        let encryptionAtRestOptionsDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.EncryptionAtRestOptions.self, forKey: .encryptionAtRestOptions)
        encryptionAtRestOptions = encryptionAtRestOptionsDecoded
        let nodeToNodeEncryptionOptionsDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.NodeToNodeEncryptionOptions.self, forKey: .nodeToNodeEncryptionOptions)
        nodeToNodeEncryptionOptions = nodeToNodeEncryptionOptionsDecoded
        let advancedOptionsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .advancedOptions)
        var advancedOptionsDecoded0: [Swift.String:Swift.String]? = nil
        if let advancedOptionsContainer = advancedOptionsContainer {
            advancedOptionsDecoded0 = [Swift.String:Swift.String]()
            for (key0, string0) in advancedOptionsContainer {
                if let string0 = string0 {
                    advancedOptionsDecoded0?[key0] = string0
                }
            }
        }
        advancedOptions = advancedOptionsDecoded0
        let logPublishingOptionsContainer = try containerValues.decodeIfPresent([Swift.String: ElasticsearchClientTypes.LogPublishingOption?].self, forKey: .logPublishingOptions)
        var logPublishingOptionsDecoded0: [Swift.String:ElasticsearchClientTypes.LogPublishingOption]? = nil
        if let logPublishingOptionsContainer = logPublishingOptionsContainer {
            logPublishingOptionsDecoded0 = [Swift.String:ElasticsearchClientTypes.LogPublishingOption]()
            for (key0, logpublishingoption0) in logPublishingOptionsContainer {
                if let logpublishingoption0 = logpublishingoption0 {
                    logPublishingOptionsDecoded0?[key0] = logpublishingoption0
                }
            }
        }
        logPublishingOptions = logPublishingOptionsDecoded0
        let serviceSoftwareOptionsDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.ServiceSoftwareOptions.self, forKey: .serviceSoftwareOptions)
        serviceSoftwareOptions = serviceSoftwareOptionsDecoded
        let domainEndpointOptionsDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.DomainEndpointOptions.self, forKey: .domainEndpointOptions)
        domainEndpointOptions = domainEndpointOptionsDecoded
        let advancedSecurityOptionsDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.AdvancedSecurityOptions.self, forKey: .advancedSecurityOptions)
        advancedSecurityOptions = advancedSecurityOptionsDecoded
        let autoTuneOptionsDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.AutoTuneOptionsOutput.self, forKey: .autoTuneOptions)
        autoTuneOptions = autoTuneOptionsDecoded
        let changeProgressDetailsDecoded = try containerValues.decodeIfPresent(ElasticsearchClientTypes.ChangeProgressDetails.self, forKey: .changeProgressDetails)
        changeProgressDetails = changeProgressDetailsDecoded
    }
}
