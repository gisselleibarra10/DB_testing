// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AthenaClientTypes.QueryStage: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case executionTime = "ExecutionTime"
        case inputBytes = "InputBytes"
        case inputRows = "InputRows"
        case outputBytes = "OutputBytes"
        case outputRows = "OutputRows"
        case queryStagePlan = "QueryStagePlan"
        case stageId = "StageId"
        case state = "State"
        case subStages = "SubStages"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let executionTime = self.executionTime {
            try encodeContainer.encode(executionTime, forKey: .executionTime)
        }
        if let inputBytes = self.inputBytes {
            try encodeContainer.encode(inputBytes, forKey: .inputBytes)
        }
        if let inputRows = self.inputRows {
            try encodeContainer.encode(inputRows, forKey: .inputRows)
        }
        if let outputBytes = self.outputBytes {
            try encodeContainer.encode(outputBytes, forKey: .outputBytes)
        }
        if let outputRows = self.outputRows {
            try encodeContainer.encode(outputRows, forKey: .outputRows)
        }
        if let queryStagePlan = self.queryStagePlan {
            try encodeContainer.encode(queryStagePlan, forKey: .queryStagePlan)
        }
        if let stageId = self.stageId {
            try encodeContainer.encode(stageId, forKey: .stageId)
        }
        if let state = self.state {
            try encodeContainer.encode(state, forKey: .state)
        }
        if let subStages = subStages {
            var subStagesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .subStages)
            for querystages0 in subStages {
                try subStagesContainer.encode(querystages0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let stageIdDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .stageId)
        stageId = stageIdDecoded
        let stateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .state)
        state = stateDecoded
        let outputBytesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .outputBytes)
        outputBytes = outputBytesDecoded
        let outputRowsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .outputRows)
        outputRows = outputRowsDecoded
        let inputBytesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .inputBytes)
        inputBytes = inputBytesDecoded
        let inputRowsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .inputRows)
        inputRows = inputRowsDecoded
        let executionTimeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .executionTime)
        executionTime = executionTimeDecoded
        let queryStagePlanDecoded = try containerValues.decodeIfPresent(AthenaClientTypes.QueryStagePlanNode.self, forKey: .queryStagePlan)
        queryStagePlan = queryStagePlanDecoded
        let subStagesContainer = try containerValues.decodeIfPresent([AthenaClientTypes.QueryStage?].self, forKey: .subStages)
        var subStagesDecoded0:[AthenaClientTypes.QueryStage]? = nil
        if let subStagesContainer = subStagesContainer {
            subStagesDecoded0 = [AthenaClientTypes.QueryStage]()
            for structure0 in subStagesContainer {
                if let structure0 = structure0 {
                    subStagesDecoded0?.append(structure0)
                }
            }
        }
        subStages = subStagesDecoded0
    }
}
