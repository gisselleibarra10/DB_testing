// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AthenaClientTypes.ResultConfigurationUpdates: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case aclConfiguration = "AclConfiguration"
        case encryptionConfiguration = "EncryptionConfiguration"
        case expectedBucketOwner = "ExpectedBucketOwner"
        case outputLocation = "OutputLocation"
        case removeAclConfiguration = "RemoveAclConfiguration"
        case removeEncryptionConfiguration = "RemoveEncryptionConfiguration"
        case removeExpectedBucketOwner = "RemoveExpectedBucketOwner"
        case removeOutputLocation = "RemoveOutputLocation"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let aclConfiguration = self.aclConfiguration {
            try encodeContainer.encode(aclConfiguration, forKey: .aclConfiguration)
        }
        if let encryptionConfiguration = self.encryptionConfiguration {
            try encodeContainer.encode(encryptionConfiguration, forKey: .encryptionConfiguration)
        }
        if let expectedBucketOwner = self.expectedBucketOwner {
            try encodeContainer.encode(expectedBucketOwner, forKey: .expectedBucketOwner)
        }
        if let outputLocation = self.outputLocation {
            try encodeContainer.encode(outputLocation, forKey: .outputLocation)
        }
        if let removeAclConfiguration = self.removeAclConfiguration {
            try encodeContainer.encode(removeAclConfiguration, forKey: .removeAclConfiguration)
        }
        if let removeEncryptionConfiguration = self.removeEncryptionConfiguration {
            try encodeContainer.encode(removeEncryptionConfiguration, forKey: .removeEncryptionConfiguration)
        }
        if let removeExpectedBucketOwner = self.removeExpectedBucketOwner {
            try encodeContainer.encode(removeExpectedBucketOwner, forKey: .removeExpectedBucketOwner)
        }
        if let removeOutputLocation = self.removeOutputLocation {
            try encodeContainer.encode(removeOutputLocation, forKey: .removeOutputLocation)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let outputLocationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .outputLocation)
        outputLocation = outputLocationDecoded
        let removeOutputLocationDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .removeOutputLocation)
        removeOutputLocation = removeOutputLocationDecoded
        let encryptionConfigurationDecoded = try containerValues.decodeIfPresent(AthenaClientTypes.EncryptionConfiguration.self, forKey: .encryptionConfiguration)
        encryptionConfiguration = encryptionConfigurationDecoded
        let removeEncryptionConfigurationDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .removeEncryptionConfiguration)
        removeEncryptionConfiguration = removeEncryptionConfigurationDecoded
        let expectedBucketOwnerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .expectedBucketOwner)
        expectedBucketOwner = expectedBucketOwnerDecoded
        let removeExpectedBucketOwnerDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .removeExpectedBucketOwner)
        removeExpectedBucketOwner = removeExpectedBucketOwnerDecoded
        let aclConfigurationDecoded = try containerValues.decodeIfPresent(AthenaClientTypes.AclConfiguration.self, forKey: .aclConfiguration)
        aclConfiguration = aclConfigurationDecoded
        let removeAclConfigurationDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .removeAclConfiguration)
        removeAclConfiguration = removeAclConfigurationDecoded
    }
}
