// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct StartQueryExecutionInputBody: Swift.Equatable {
    let queryString: Swift.String?
    let clientRequestToken: Swift.String?
    let queryExecutionContext: AthenaClientTypes.QueryExecutionContext?
    let resultConfiguration: AthenaClientTypes.ResultConfiguration?
    let workGroup: Swift.String?
    let executionParameters: [Swift.String]?
}

extension StartQueryExecutionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientRequestToken = "ClientRequestToken"
        case executionParameters = "ExecutionParameters"
        case queryExecutionContext = "QueryExecutionContext"
        case queryString = "QueryString"
        case resultConfiguration = "ResultConfiguration"
        case workGroup = "WorkGroup"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let queryStringDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .queryString)
        queryString = queryStringDecoded
        let clientRequestTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientRequestToken)
        clientRequestToken = clientRequestTokenDecoded
        let queryExecutionContextDecoded = try containerValues.decodeIfPresent(AthenaClientTypes.QueryExecutionContext.self, forKey: .queryExecutionContext)
        queryExecutionContext = queryExecutionContextDecoded
        let resultConfigurationDecoded = try containerValues.decodeIfPresent(AthenaClientTypes.ResultConfiguration.self, forKey: .resultConfiguration)
        resultConfiguration = resultConfigurationDecoded
        let workGroupDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .workGroup)
        workGroup = workGroupDecoded
        let executionParametersContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .executionParameters)
        var executionParametersDecoded0:[Swift.String]? = nil
        if let executionParametersContainer = executionParametersContainer {
            executionParametersDecoded0 = [Swift.String]()
            for string0 in executionParametersContainer {
                if let string0 = string0 {
                    executionParametersDecoded0?.append(string0)
                }
            }
        }
        executionParameters = executionParametersDecoded0
    }
}
