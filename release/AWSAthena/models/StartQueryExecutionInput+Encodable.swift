// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension StartQueryExecutionInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientRequestToken = "ClientRequestToken"
        case executionParameters = "ExecutionParameters"
        case queryExecutionContext = "QueryExecutionContext"
        case queryString = "QueryString"
        case resultConfiguration = "ResultConfiguration"
        case workGroup = "WorkGroup"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientRequestToken = self.clientRequestToken {
            try encodeContainer.encode(clientRequestToken, forKey: .clientRequestToken)
        }
        if let executionParameters = executionParameters {
            var executionParametersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .executionParameters)
            for executionparameters0 in executionParameters {
                try executionParametersContainer.encode(executionparameters0)
            }
        }
        if let queryExecutionContext = self.queryExecutionContext {
            try encodeContainer.encode(queryExecutionContext, forKey: .queryExecutionContext)
        }
        if let queryString = self.queryString {
            try encodeContainer.encode(queryString, forKey: .queryString)
        }
        if let resultConfiguration = self.resultConfiguration {
            try encodeContainer.encode(resultConfiguration, forKey: .resultConfiguration)
        }
        if let workGroup = self.workGroup {
            try encodeContainer.encode(workGroup, forKey: .workGroup)
        }
    }
}
