// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AthenaClientTypes.QueryStagePlanNode: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case children = "Children"
        case identifier = "Identifier"
        case name = "Name"
        case remoteSources = "RemoteSources"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let children = children {
            var childrenContainer = encodeContainer.nestedUnkeyedContainer(forKey: .children)
            for querystageplannodes0 in children {
                try childrenContainer.encode(querystageplannodes0)
            }
        }
        if let identifier = self.identifier {
            try encodeContainer.encode(identifier, forKey: .identifier)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let remoteSources = remoteSources {
            var remoteSourcesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .remoteSources)
            for stringlist0 in remoteSources {
                try remoteSourcesContainer.encode(stringlist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let identifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .identifier)
        identifier = identifierDecoded
        let childrenContainer = try containerValues.decodeIfPresent([AthenaClientTypes.QueryStagePlanNode?].self, forKey: .children)
        var childrenDecoded0:[AthenaClientTypes.QueryStagePlanNode]? = nil
        if let childrenContainer = childrenContainer {
            childrenDecoded0 = [AthenaClientTypes.QueryStagePlanNode]()
            for structure0 in childrenContainer {
                if let structure0 = structure0 {
                    childrenDecoded0?.append(structure0)
                }
            }
        }
        children = childrenDecoded0
        let remoteSourcesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .remoteSources)
        var remoteSourcesDecoded0:[Swift.String]? = nil
        if let remoteSourcesContainer = remoteSourcesContainer {
            remoteSourcesDecoded0 = [Swift.String]()
            for string0 in remoteSourcesContainer {
                if let string0 = string0 {
                    remoteSourcesDecoded0?.append(string0)
                }
            }
        }
        remoteSources = remoteSourcesDecoded0
    }
}
