// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension ImagebuilderClientTypes {
    /// An Image Builder image. You must specify exactly one recipe for the image – either a container recipe (containerRecipe), which creates a container image, or an image recipe (imageRecipe), which creates an AMI.
    public struct Image: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the image. Semantic versioning is included in each object's Amazon Resource Name (ARN), at the level that applies to that object as follows:
        ///
        /// * Versionless ARNs and Name ARNs do not include specific values in any of the nodes. The nodes are either left off entirely, or they are specified as wildcards, for example: x.x.x.
        ///
        /// * Version ARNs have only the first three nodes: ..
        ///
        /// * Build version ARNs have all four nodes, and point to a specific build for a specific version of an object.
        public var arn: Swift.String?
        /// Indicates the type of build that created this image. The build can be initiated in the following ways:
        ///
        /// * USER_INITIATED – A manual pipeline build request.
        ///
        /// * SCHEDULED – A pipeline build initiated by a cron expression in the Image Builder pipeline, or from EventBridge.
        ///
        /// * IMPORT – A VM import created the image to use as the base image for the recipe.
        public var buildType: ImagebuilderClientTypes.BuildType?
        /// The recipe that is used to create an Image Builder container image.
        public var containerRecipe: ImagebuilderClientTypes.ContainerRecipe?
        /// The date on which this image was created.
        public var dateCreated: Swift.String?
        /// The distribution configuration used when creating this image.
        public var distributionConfiguration: ImagebuilderClientTypes.DistributionConfiguration?
        /// Collects additional information about the image being created, including the operating system (OS) version and package list. This information is used to enhance the overall experience of using EC2 Image Builder. Enabled by default.
        public var enhancedImageMetadataEnabled: Swift.Bool?
        /// The image recipe used when creating the image.
        public var imageRecipe: ImagebuilderClientTypes.ImageRecipe?
        /// The image tests configuration used when creating this image.
        public var imageTestsConfiguration: ImagebuilderClientTypes.ImageTestsConfiguration?
        /// The infrastructure used when creating this image.
        public var infrastructureConfiguration: ImagebuilderClientTypes.InfrastructureConfiguration?
        /// The name of the image.
        public var name: Swift.String?
        /// The operating system version of the instance. For example, Amazon Linux 2, Ubuntu 18, or Microsoft Windows Server 2019.
        public var osVersion: Swift.String?
        /// The output resources produced when creating this image.
        public var outputResources: ImagebuilderClientTypes.OutputResources?
        /// The platform of the image.
        public var platform: ImagebuilderClientTypes.Platform?
        /// The Amazon Resource Name (ARN) of the image pipeline that created this image.
        public var sourcePipelineArn: Swift.String?
        /// The name of the image pipeline that created this image.
        public var sourcePipelineName: Swift.String?
        /// The state of the image.
        public var state: ImagebuilderClientTypes.ImageState?
        /// The tags of the image.
        public var tags: [Swift.String:Swift.String]?
        /// Specifies whether this is an AMI or container image.
        public var type: ImagebuilderClientTypes.ImageType?
        /// The semantic version of the image. The semantic version has four nodes: ../. You can assign values for the first three, and can filter on all of them. Assignment: For the first three nodes you can assign any positive integer value, including zero, with an upper limit of 2^30-1, or 1073741823 for each node. Image Builder automatically assigns the build number to the fourth node. Patterns: You can use any numeric pattern that adheres to the assignment requirements for the nodes that you can assign. For example, you might choose a software version pattern, such as 1.0.0, or a date, such as 2021.01.01. Filtering: With semantic versioning, you have the flexibility to use wildcards (x) to specify the most recent versions or nodes when selecting the base image or components for your recipe. When you use a wildcard in any node, all nodes to the right of the first wildcard must also be wildcards.
        public var version: Swift.String?

        public init (
            arn: Swift.String? = nil,
            buildType: ImagebuilderClientTypes.BuildType? = nil,
            containerRecipe: ImagebuilderClientTypes.ContainerRecipe? = nil,
            dateCreated: Swift.String? = nil,
            distributionConfiguration: ImagebuilderClientTypes.DistributionConfiguration? = nil,
            enhancedImageMetadataEnabled: Swift.Bool? = nil,
            imageRecipe: ImagebuilderClientTypes.ImageRecipe? = nil,
            imageTestsConfiguration: ImagebuilderClientTypes.ImageTestsConfiguration? = nil,
            infrastructureConfiguration: ImagebuilderClientTypes.InfrastructureConfiguration? = nil,
            name: Swift.String? = nil,
            osVersion: Swift.String? = nil,
            outputResources: ImagebuilderClientTypes.OutputResources? = nil,
            platform: ImagebuilderClientTypes.Platform? = nil,
            sourcePipelineArn: Swift.String? = nil,
            sourcePipelineName: Swift.String? = nil,
            state: ImagebuilderClientTypes.ImageState? = nil,
            tags: [Swift.String:Swift.String]? = nil,
            type: ImagebuilderClientTypes.ImageType? = nil,
            version: Swift.String? = nil
        )
        {
            self.arn = arn
            self.buildType = buildType
            self.containerRecipe = containerRecipe
            self.dateCreated = dateCreated
            self.distributionConfiguration = distributionConfiguration
            self.enhancedImageMetadataEnabled = enhancedImageMetadataEnabled
            self.imageRecipe = imageRecipe
            self.imageTestsConfiguration = imageTestsConfiguration
            self.infrastructureConfiguration = infrastructureConfiguration
            self.name = name
            self.osVersion = osVersion
            self.outputResources = outputResources
            self.platform = platform
            self.sourcePipelineArn = sourcePipelineArn
            self.sourcePipelineName = sourcePipelineName
            self.state = state
            self.tags = tags
            self.type = type
            self.version = version
        }
    }

}
