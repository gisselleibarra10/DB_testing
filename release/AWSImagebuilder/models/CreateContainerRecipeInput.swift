// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct CreateContainerRecipeInput: Swift.Equatable {
    /// The client token used to make this request idempotent.
    /// This member is required.
    public var clientToken: Swift.String?
    /// Components for build and test that are included in the container recipe.
    /// This member is required.
    public var components: [ImagebuilderClientTypes.ComponentConfiguration]?
    /// The type of container to create.
    /// This member is required.
    public var containerType: ImagebuilderClientTypes.ContainerType?
    /// The description of the container recipe.
    public var description: Swift.String?
    /// The Dockerfile template used to build your image as an inline data blob.
    public var dockerfileTemplateData: Swift.String?
    /// The Amazon S3 URI for the Dockerfile that will be used to build your container image.
    public var dockerfileTemplateUri: Swift.String?
    /// Specifies the operating system version for the base image.
    public var imageOsVersionOverride: Swift.String?
    /// A group of options that can be used to configure an instance for building and testing container images.
    public var instanceConfiguration: ImagebuilderClientTypes.InstanceConfiguration?
    /// Identifies which KMS key is used to encrypt the container image.
    public var kmsKeyId: Swift.String?
    /// The name of the container recipe.
    /// This member is required.
    public var name: Swift.String?
    /// The base image for the container recipe.
    /// This member is required.
    public var parentImage: Swift.String?
    /// Specifies the operating system platform when you use a custom base image.
    public var platformOverride: ImagebuilderClientTypes.Platform?
    /// The semantic version of the container recipe. This version follows the semantic version syntax. The semantic version has four nodes: ../. You can assign values for the first three, and can filter on all of them. Assignment: For the first three nodes you can assign any positive integer value, including zero, with an upper limit of 2^30-1, or 1073741823 for each node. Image Builder automatically assigns the build number to the fourth node. Patterns: You can use any numeric pattern that adheres to the assignment requirements for the nodes that you can assign. For example, you might choose a software version pattern, such as 1.0.0, or a date, such as 2021.01.01.
    /// This member is required.
    public var semanticVersion: Swift.String?
    /// Tags that are attached to the container recipe.
    public var tags: [Swift.String:Swift.String]?
    /// The destination repository for the container image.
    /// This member is required.
    public var targetRepository: ImagebuilderClientTypes.TargetContainerRepository?
    /// The working directory for use during build and test workflows.
    public var workingDirectory: Swift.String?

    public init (
        clientToken: Swift.String? = nil,
        components: [ImagebuilderClientTypes.ComponentConfiguration]? = nil,
        containerType: ImagebuilderClientTypes.ContainerType? = nil,
        description: Swift.String? = nil,
        dockerfileTemplateData: Swift.String? = nil,
        dockerfileTemplateUri: Swift.String? = nil,
        imageOsVersionOverride: Swift.String? = nil,
        instanceConfiguration: ImagebuilderClientTypes.InstanceConfiguration? = nil,
        kmsKeyId: Swift.String? = nil,
        name: Swift.String? = nil,
        parentImage: Swift.String? = nil,
        platformOverride: ImagebuilderClientTypes.Platform? = nil,
        semanticVersion: Swift.String? = nil,
        tags: [Swift.String:Swift.String]? = nil,
        targetRepository: ImagebuilderClientTypes.TargetContainerRepository? = nil,
        workingDirectory: Swift.String? = nil
    )
    {
        self.clientToken = clientToken
        self.components = components
        self.containerType = containerType
        self.description = description
        self.dockerfileTemplateData = dockerfileTemplateData
        self.dockerfileTemplateUri = dockerfileTemplateUri
        self.imageOsVersionOverride = imageOsVersionOverride
        self.instanceConfiguration = instanceConfiguration
        self.kmsKeyId = kmsKeyId
        self.name = name
        self.parentImage = parentImage
        self.platformOverride = platformOverride
        self.semanticVersion = semanticVersion
        self.tags = tags
        self.targetRepository = targetRepository
        self.workingDirectory = workingDirectory
    }
}
