// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateComponentInputBody: Swift.Equatable {
    let name: Swift.String?
    let semanticVersion: Swift.String?
    let description: Swift.String?
    let changeDescription: Swift.String?
    let platform: ImagebuilderClientTypes.Platform?
    let supportedOsVersions: [Swift.String]?
    let data: Swift.String?
    let uri: Swift.String?
    let kmsKeyId: Swift.String?
    let tags: [Swift.String:Swift.String]?
    let clientToken: Swift.String?
}

extension CreateComponentInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case changeDescription
        case clientToken
        case data
        case description
        case kmsKeyId
        case name
        case platform
        case semanticVersion
        case supportedOsVersions
        case tags
        case uri
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let semanticVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .semanticVersion)
        semanticVersion = semanticVersionDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let changeDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .changeDescription)
        changeDescription = changeDescriptionDecoded
        let platformDecoded = try containerValues.decodeIfPresent(ImagebuilderClientTypes.Platform.self, forKey: .platform)
        platform = platformDecoded
        let supportedOsVersionsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .supportedOsVersions)
        var supportedOsVersionsDecoded0:[Swift.String]? = nil
        if let supportedOsVersionsContainer = supportedOsVersionsContainer {
            supportedOsVersionsDecoded0 = [Swift.String]()
            for string0 in supportedOsVersionsContainer {
                if let string0 = string0 {
                    supportedOsVersionsDecoded0?.append(string0)
                }
            }
        }
        supportedOsVersions = supportedOsVersionsDecoded0
        let dataDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .data)
        data = dataDecoded
        let uriDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .uri)
        uri = uriDecoded
        let kmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kmsKeyId)
        kmsKeyId = kmsKeyIdDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
        let clientTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientToken)
        clientToken = clientTokenDecoded
    }
}
