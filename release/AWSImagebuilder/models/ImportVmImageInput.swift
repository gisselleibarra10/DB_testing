// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct ImportVmImageInput: Swift.Equatable {
    /// Unique, case-sensitive identifier you provide to ensure idempotency of the request. For more information, see [Ensuring idempotency](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html) in the Amazon EC2 API Reference.
    /// This member is required.
    public var clientToken: Swift.String?
    /// The description for the base image that is created by the import process.
    public var description: Swift.String?
    /// The name of the base image that is created by the import process.
    /// This member is required.
    public var name: Swift.String?
    /// The operating system version for the imported VM.
    public var osVersion: Swift.String?
    /// The operating system platform for the imported VM.
    /// This member is required.
    public var platform: ImagebuilderClientTypes.Platform?
    /// The semantic version to attach to the base image that was created during the import process. This version follows the semantic version syntax. The semantic version has four nodes: ../. You can assign values for the first three, and can filter on all of them. Assignment: For the first three nodes you can assign any positive integer value, including zero, with an upper limit of 2^30-1, or 1073741823 for each node. Image Builder automatically assigns the build number to the fourth node. Patterns: You can use any numeric pattern that adheres to the assignment requirements for the nodes that you can assign. For example, you might choose a software version pattern, such as 1.0.0, or a date, such as 2021.01.01.
    /// This member is required.
    public var semanticVersion: Swift.String?
    /// Tags that are attached to the import resources.
    public var tags: [Swift.String:Swift.String]?
    /// The importTaskId (API) or ImportTaskId (CLI) from the Amazon EC2 VM import process. Image Builder retrieves information from the import process to pull in the AMI that is created from the VM source as the base image for your recipe.
    /// This member is required.
    public var vmImportTaskId: Swift.String?

    public init (
        clientToken: Swift.String? = nil,
        description: Swift.String? = nil,
        name: Swift.String? = nil,
        osVersion: Swift.String? = nil,
        platform: ImagebuilderClientTypes.Platform? = nil,
        semanticVersion: Swift.String? = nil,
        tags: [Swift.String:Swift.String]? = nil,
        vmImportTaskId: Swift.String? = nil
    )
    {
        self.clientToken = clientToken
        self.description = description
        self.name = name
        self.osVersion = osVersion
        self.platform = platform
        self.semanticVersion = semanticVersion
        self.tags = tags
        self.vmImportTaskId = vmImportTaskId
    }
}
