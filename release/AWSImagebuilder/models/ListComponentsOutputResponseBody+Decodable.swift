// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListComponentsOutputResponseBody: Swift.Equatable {
    let requestId: Swift.String?
    let componentVersionList: [ImagebuilderClientTypes.ComponentVersion]?
    let nextToken: Swift.String?
}

extension ListComponentsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case componentVersionList
        case nextToken
        case requestId
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let requestIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .requestId)
        requestId = requestIdDecoded
        let componentVersionListContainer = try containerValues.decodeIfPresent([ImagebuilderClientTypes.ComponentVersion?].self, forKey: .componentVersionList)
        var componentVersionListDecoded0:[ImagebuilderClientTypes.ComponentVersion]? = nil
        if let componentVersionListContainer = componentVersionListContainer {
            componentVersionListDecoded0 = [ImagebuilderClientTypes.ComponentVersion]()
            for structure0 in componentVersionListContainer {
                if let structure0 = structure0 {
                    componentVersionListDecoded0?.append(structure0)
                }
            }
        }
        componentVersionList = componentVersionListDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
