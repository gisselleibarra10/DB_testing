// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ImagebuilderClientTypes.Distribution: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case amiDistributionConfiguration
        case containerDistributionConfiguration
        case fastLaunchConfigurations
        case launchTemplateConfigurations
        case licenseConfigurationArns
        case region
        case s3ExportConfiguration
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let amiDistributionConfiguration = self.amiDistributionConfiguration {
            try encodeContainer.encode(amiDistributionConfiguration, forKey: .amiDistributionConfiguration)
        }
        if let containerDistributionConfiguration = self.containerDistributionConfiguration {
            try encodeContainer.encode(containerDistributionConfiguration, forKey: .containerDistributionConfiguration)
        }
        if let fastLaunchConfigurations = fastLaunchConfigurations {
            var fastLaunchConfigurationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .fastLaunchConfigurations)
            for fastlaunchconfigurationlist0 in fastLaunchConfigurations {
                try fastLaunchConfigurationsContainer.encode(fastlaunchconfigurationlist0)
            }
        }
        if let launchTemplateConfigurations = launchTemplateConfigurations {
            var launchTemplateConfigurationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .launchTemplateConfigurations)
            for launchtemplateconfigurationlist0 in launchTemplateConfigurations {
                try launchTemplateConfigurationsContainer.encode(launchtemplateconfigurationlist0)
            }
        }
        if let licenseConfigurationArns = licenseConfigurationArns {
            var licenseConfigurationArnsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .licenseConfigurationArns)
            for licenseconfigurationarnlist0 in licenseConfigurationArns {
                try licenseConfigurationArnsContainer.encode(licenseconfigurationarnlist0)
            }
        }
        if let region = self.region {
            try encodeContainer.encode(region, forKey: .region)
        }
        if let s3ExportConfiguration = self.s3ExportConfiguration {
            try encodeContainer.encode(s3ExportConfiguration, forKey: .s3ExportConfiguration)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let regionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .region)
        region = regionDecoded
        let amiDistributionConfigurationDecoded = try containerValues.decodeIfPresent(ImagebuilderClientTypes.AmiDistributionConfiguration.self, forKey: .amiDistributionConfiguration)
        amiDistributionConfiguration = amiDistributionConfigurationDecoded
        let containerDistributionConfigurationDecoded = try containerValues.decodeIfPresent(ImagebuilderClientTypes.ContainerDistributionConfiguration.self, forKey: .containerDistributionConfiguration)
        containerDistributionConfiguration = containerDistributionConfigurationDecoded
        let licenseConfigurationArnsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .licenseConfigurationArns)
        var licenseConfigurationArnsDecoded0:[Swift.String]? = nil
        if let licenseConfigurationArnsContainer = licenseConfigurationArnsContainer {
            licenseConfigurationArnsDecoded0 = [Swift.String]()
            for string0 in licenseConfigurationArnsContainer {
                if let string0 = string0 {
                    licenseConfigurationArnsDecoded0?.append(string0)
                }
            }
        }
        licenseConfigurationArns = licenseConfigurationArnsDecoded0
        let launchTemplateConfigurationsContainer = try containerValues.decodeIfPresent([ImagebuilderClientTypes.LaunchTemplateConfiguration?].self, forKey: .launchTemplateConfigurations)
        var launchTemplateConfigurationsDecoded0:[ImagebuilderClientTypes.LaunchTemplateConfiguration]? = nil
        if let launchTemplateConfigurationsContainer = launchTemplateConfigurationsContainer {
            launchTemplateConfigurationsDecoded0 = [ImagebuilderClientTypes.LaunchTemplateConfiguration]()
            for structure0 in launchTemplateConfigurationsContainer {
                if let structure0 = structure0 {
                    launchTemplateConfigurationsDecoded0?.append(structure0)
                }
            }
        }
        launchTemplateConfigurations = launchTemplateConfigurationsDecoded0
        let s3ExportConfigurationDecoded = try containerValues.decodeIfPresent(ImagebuilderClientTypes.S3ExportConfiguration.self, forKey: .s3ExportConfiguration)
        s3ExportConfiguration = s3ExportConfigurationDecoded
        let fastLaunchConfigurationsContainer = try containerValues.decodeIfPresent([ImagebuilderClientTypes.FastLaunchConfiguration?].self, forKey: .fastLaunchConfigurations)
        var fastLaunchConfigurationsDecoded0:[ImagebuilderClientTypes.FastLaunchConfiguration]? = nil
        if let fastLaunchConfigurationsContainer = fastLaunchConfigurationsContainer {
            fastLaunchConfigurationsDecoded0 = [ImagebuilderClientTypes.FastLaunchConfiguration]()
            for structure0 in fastLaunchConfigurationsContainer {
                if let structure0 = structure0 {
                    fastLaunchConfigurationsDecoded0?.append(structure0)
                }
            }
        }
        fastLaunchConfigurations = fastLaunchConfigurationsDecoded0
    }
}
