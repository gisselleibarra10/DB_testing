// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ImagebuilderClientTypes.Image: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn
        case buildType
        case containerRecipe
        case dateCreated
        case distributionConfiguration
        case enhancedImageMetadataEnabled
        case imageRecipe
        case imageTestsConfiguration
        case infrastructureConfiguration
        case name
        case osVersion
        case outputResources
        case platform
        case sourcePipelineArn
        case sourcePipelineName
        case state
        case tags
        case type
        case version
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = self.arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let buildType = self.buildType {
            try encodeContainer.encode(buildType.rawValue, forKey: .buildType)
        }
        if let containerRecipe = self.containerRecipe {
            try encodeContainer.encode(containerRecipe, forKey: .containerRecipe)
        }
        if let dateCreated = self.dateCreated {
            try encodeContainer.encode(dateCreated, forKey: .dateCreated)
        }
        if let distributionConfiguration = self.distributionConfiguration {
            try encodeContainer.encode(distributionConfiguration, forKey: .distributionConfiguration)
        }
        if let enhancedImageMetadataEnabled = self.enhancedImageMetadataEnabled {
            try encodeContainer.encode(enhancedImageMetadataEnabled, forKey: .enhancedImageMetadataEnabled)
        }
        if let imageRecipe = self.imageRecipe {
            try encodeContainer.encode(imageRecipe, forKey: .imageRecipe)
        }
        if let imageTestsConfiguration = self.imageTestsConfiguration {
            try encodeContainer.encode(imageTestsConfiguration, forKey: .imageTestsConfiguration)
        }
        if let infrastructureConfiguration = self.infrastructureConfiguration {
            try encodeContainer.encode(infrastructureConfiguration, forKey: .infrastructureConfiguration)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let osVersion = self.osVersion {
            try encodeContainer.encode(osVersion, forKey: .osVersion)
        }
        if let outputResources = self.outputResources {
            try encodeContainer.encode(outputResources, forKey: .outputResources)
        }
        if let platform = self.platform {
            try encodeContainer.encode(platform.rawValue, forKey: .platform)
        }
        if let sourcePipelineArn = self.sourcePipelineArn {
            try encodeContainer.encode(sourcePipelineArn, forKey: .sourcePipelineArn)
        }
        if let sourcePipelineName = self.sourcePipelineName {
            try encodeContainer.encode(sourcePipelineName, forKey: .sourcePipelineName)
        }
        if let state = self.state {
            try encodeContainer.encode(state, forKey: .state)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, tagmap0) in tags {
                try tagsContainer.encode(tagmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let type = self.type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
        if let version = self.version {
            try encodeContainer.encode(version, forKey: .version)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let typeDecoded = try containerValues.decodeIfPresent(ImagebuilderClientTypes.ImageType.self, forKey: .type)
        type = typeDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let versionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .version)
        version = versionDecoded
        let platformDecoded = try containerValues.decodeIfPresent(ImagebuilderClientTypes.Platform.self, forKey: .platform)
        platform = platformDecoded
        let enhancedImageMetadataEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enhancedImageMetadataEnabled)
        enhancedImageMetadataEnabled = enhancedImageMetadataEnabledDecoded
        let osVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .osVersion)
        osVersion = osVersionDecoded
        let stateDecoded = try containerValues.decodeIfPresent(ImagebuilderClientTypes.ImageState.self, forKey: .state)
        state = stateDecoded
        let imageRecipeDecoded = try containerValues.decodeIfPresent(ImagebuilderClientTypes.ImageRecipe.self, forKey: .imageRecipe)
        imageRecipe = imageRecipeDecoded
        let containerRecipeDecoded = try containerValues.decodeIfPresent(ImagebuilderClientTypes.ContainerRecipe.self, forKey: .containerRecipe)
        containerRecipe = containerRecipeDecoded
        let sourcePipelineNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourcePipelineName)
        sourcePipelineName = sourcePipelineNameDecoded
        let sourcePipelineArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourcePipelineArn)
        sourcePipelineArn = sourcePipelineArnDecoded
        let infrastructureConfigurationDecoded = try containerValues.decodeIfPresent(ImagebuilderClientTypes.InfrastructureConfiguration.self, forKey: .infrastructureConfiguration)
        infrastructureConfiguration = infrastructureConfigurationDecoded
        let distributionConfigurationDecoded = try containerValues.decodeIfPresent(ImagebuilderClientTypes.DistributionConfiguration.self, forKey: .distributionConfiguration)
        distributionConfiguration = distributionConfigurationDecoded
        let imageTestsConfigurationDecoded = try containerValues.decodeIfPresent(ImagebuilderClientTypes.ImageTestsConfiguration.self, forKey: .imageTestsConfiguration)
        imageTestsConfiguration = imageTestsConfigurationDecoded
        let dateCreatedDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dateCreated)
        dateCreated = dateCreatedDecoded
        let outputResourcesDecoded = try containerValues.decodeIfPresent(ImagebuilderClientTypes.OutputResources.self, forKey: .outputResources)
        outputResources = outputResourcesDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
        let buildTypeDecoded = try containerValues.decodeIfPresent(ImagebuilderClientTypes.BuildType.self, forKey: .buildType)
        buildType = buildTypeDecoded
    }
}
