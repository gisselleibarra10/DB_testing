// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ImagebuilderClientTypes.LaunchPermissionConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case organizationArns
        case organizationalUnitArns
        case userGroups
        case userIds
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let organizationArns = organizationArns {
            var organizationArnsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .organizationArns)
            for organizationarnlist0 in organizationArns {
                try organizationArnsContainer.encode(organizationarnlist0)
            }
        }
        if let organizationalUnitArns = organizationalUnitArns {
            var organizationalUnitArnsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .organizationalUnitArns)
            for organizationalunitarnlist0 in organizationalUnitArns {
                try organizationalUnitArnsContainer.encode(organizationalunitarnlist0)
            }
        }
        if let userGroups = userGroups {
            var userGroupsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .userGroups)
            for stringlist0 in userGroups {
                try userGroupsContainer.encode(stringlist0)
            }
        }
        if let userIds = userIds {
            var userIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .userIds)
            for accountlist0 in userIds {
                try userIdsContainer.encode(accountlist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let userIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .userIds)
        var userIdsDecoded0:[Swift.String]? = nil
        if let userIdsContainer = userIdsContainer {
            userIdsDecoded0 = [Swift.String]()
            for string0 in userIdsContainer {
                if let string0 = string0 {
                    userIdsDecoded0?.append(string0)
                }
            }
        }
        userIds = userIdsDecoded0
        let userGroupsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .userGroups)
        var userGroupsDecoded0:[Swift.String]? = nil
        if let userGroupsContainer = userGroupsContainer {
            userGroupsDecoded0 = [Swift.String]()
            for string0 in userGroupsContainer {
                if let string0 = string0 {
                    userGroupsDecoded0?.append(string0)
                }
            }
        }
        userGroups = userGroupsDecoded0
        let organizationArnsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .organizationArns)
        var organizationArnsDecoded0:[Swift.String]? = nil
        if let organizationArnsContainer = organizationArnsContainer {
            organizationArnsDecoded0 = [Swift.String]()
            for string0 in organizationArnsContainer {
                if let string0 = string0 {
                    organizationArnsDecoded0?.append(string0)
                }
            }
        }
        organizationArns = organizationArnsDecoded0
        let organizationalUnitArnsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .organizationalUnitArns)
        var organizationalUnitArnsDecoded0:[Swift.String]? = nil
        if let organizationalUnitArnsContainer = organizationalUnitArnsContainer {
            organizationalUnitArnsDecoded0 = [Swift.String]()
            for string0 in organizationalUnitArnsContainer {
                if let string0 = string0 {
                    organizationalUnitArnsDecoded0?.append(string0)
                }
            }
        }
        organizationalUnitArns = organizationalUnitArnsDecoded0
    }
}
