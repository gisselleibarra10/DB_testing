// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension DirectoryClientTypes.DirectoryLimits: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cloudOnlyDirectoriesCurrentCount = "CloudOnlyDirectoriesCurrentCount"
        case cloudOnlyDirectoriesLimit = "CloudOnlyDirectoriesLimit"
        case cloudOnlyDirectoriesLimitReached = "CloudOnlyDirectoriesLimitReached"
        case cloudOnlyMicrosoftADCurrentCount = "CloudOnlyMicrosoftADCurrentCount"
        case cloudOnlyMicrosoftADLimit = "CloudOnlyMicrosoftADLimit"
        case cloudOnlyMicrosoftADLimitReached = "CloudOnlyMicrosoftADLimitReached"
        case connectedDirectoriesCurrentCount = "ConnectedDirectoriesCurrentCount"
        case connectedDirectoriesLimit = "ConnectedDirectoriesLimit"
        case connectedDirectoriesLimitReached = "ConnectedDirectoriesLimitReached"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cloudOnlyDirectoriesCurrentCount = self.cloudOnlyDirectoriesCurrentCount {
            try encodeContainer.encode(cloudOnlyDirectoriesCurrentCount, forKey: .cloudOnlyDirectoriesCurrentCount)
        }
        if let cloudOnlyDirectoriesLimit = self.cloudOnlyDirectoriesLimit {
            try encodeContainer.encode(cloudOnlyDirectoriesLimit, forKey: .cloudOnlyDirectoriesLimit)
        }
        if cloudOnlyDirectoriesLimitReached != false {
            try encodeContainer.encode(cloudOnlyDirectoriesLimitReached, forKey: .cloudOnlyDirectoriesLimitReached)
        }
        if let cloudOnlyMicrosoftADCurrentCount = self.cloudOnlyMicrosoftADCurrentCount {
            try encodeContainer.encode(cloudOnlyMicrosoftADCurrentCount, forKey: .cloudOnlyMicrosoftADCurrentCount)
        }
        if let cloudOnlyMicrosoftADLimit = self.cloudOnlyMicrosoftADLimit {
            try encodeContainer.encode(cloudOnlyMicrosoftADLimit, forKey: .cloudOnlyMicrosoftADLimit)
        }
        if cloudOnlyMicrosoftADLimitReached != false {
            try encodeContainer.encode(cloudOnlyMicrosoftADLimitReached, forKey: .cloudOnlyMicrosoftADLimitReached)
        }
        if let connectedDirectoriesCurrentCount = self.connectedDirectoriesCurrentCount {
            try encodeContainer.encode(connectedDirectoriesCurrentCount, forKey: .connectedDirectoriesCurrentCount)
        }
        if let connectedDirectoriesLimit = self.connectedDirectoriesLimit {
            try encodeContainer.encode(connectedDirectoriesLimit, forKey: .connectedDirectoriesLimit)
        }
        if connectedDirectoriesLimitReached != false {
            try encodeContainer.encode(connectedDirectoriesLimitReached, forKey: .connectedDirectoriesLimitReached)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let cloudOnlyDirectoriesLimitDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .cloudOnlyDirectoriesLimit)
        cloudOnlyDirectoriesLimit = cloudOnlyDirectoriesLimitDecoded
        let cloudOnlyDirectoriesCurrentCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .cloudOnlyDirectoriesCurrentCount)
        cloudOnlyDirectoriesCurrentCount = cloudOnlyDirectoriesCurrentCountDecoded
        let cloudOnlyDirectoriesLimitReachedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .cloudOnlyDirectoriesLimitReached) ?? false
        cloudOnlyDirectoriesLimitReached = cloudOnlyDirectoriesLimitReachedDecoded
        let cloudOnlyMicrosoftADLimitDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .cloudOnlyMicrosoftADLimit)
        cloudOnlyMicrosoftADLimit = cloudOnlyMicrosoftADLimitDecoded
        let cloudOnlyMicrosoftADCurrentCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .cloudOnlyMicrosoftADCurrentCount)
        cloudOnlyMicrosoftADCurrentCount = cloudOnlyMicrosoftADCurrentCountDecoded
        let cloudOnlyMicrosoftADLimitReachedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .cloudOnlyMicrosoftADLimitReached) ?? false
        cloudOnlyMicrosoftADLimitReached = cloudOnlyMicrosoftADLimitReachedDecoded
        let connectedDirectoriesLimitDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .connectedDirectoriesLimit)
        connectedDirectoriesLimit = connectedDirectoriesLimitDecoded
        let connectedDirectoriesCurrentCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .connectedDirectoriesCurrentCount)
        connectedDirectoriesCurrentCount = connectedDirectoriesCurrentCountDecoded
        let connectedDirectoriesLimitReachedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .connectedDirectoriesLimitReached) ?? false
        connectedDirectoriesLimitReached = connectedDirectoriesLimitReachedDecoded
    }
}
