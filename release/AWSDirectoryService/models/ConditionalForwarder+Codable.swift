// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension DirectoryClientTypes.ConditionalForwarder: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dnsIpAddrs = "DnsIpAddrs"
        case remoteDomainName = "RemoteDomainName"
        case replicationScope = "ReplicationScope"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dnsIpAddrs = dnsIpAddrs {
            var dnsIpAddrsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .dnsIpAddrs)
            for dnsipaddrs0 in dnsIpAddrs {
                try dnsIpAddrsContainer.encode(dnsipaddrs0)
            }
        }
        if let remoteDomainName = self.remoteDomainName {
            try encodeContainer.encode(remoteDomainName, forKey: .remoteDomainName)
        }
        if let replicationScope = self.replicationScope {
            try encodeContainer.encode(replicationScope.rawValue, forKey: .replicationScope)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let remoteDomainNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .remoteDomainName)
        remoteDomainName = remoteDomainNameDecoded
        let dnsIpAddrsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .dnsIpAddrs)
        var dnsIpAddrsDecoded0:[Swift.String]? = nil
        if let dnsIpAddrsContainer = dnsIpAddrsContainer {
            dnsIpAddrsDecoded0 = [Swift.String]()
            for string0 in dnsIpAddrsContainer {
                if let string0 = string0 {
                    dnsIpAddrsDecoded0?.append(string0)
                }
            }
        }
        dnsIpAddrs = dnsIpAddrsDecoded0
        let replicationScopeDecoded = try containerValues.decodeIfPresent(DirectoryClientTypes.ReplicationScope.self, forKey: .replicationScope)
        replicationScope = replicationScopeDecoded
    }
}
