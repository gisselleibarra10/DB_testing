// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension DirectoryClientTypes.SchemaExtensionInfo: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description = "Description"
        case directoryId = "DirectoryId"
        case endDateTime = "EndDateTime"
        case schemaExtensionId = "SchemaExtensionId"
        case schemaExtensionStatus = "SchemaExtensionStatus"
        case schemaExtensionStatusReason = "SchemaExtensionStatusReason"
        case startDateTime = "StartDateTime"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let directoryId = self.directoryId {
            try encodeContainer.encode(directoryId, forKey: .directoryId)
        }
        if let endDateTime = self.endDateTime {
            try encodeContainer.encode(endDateTime.timeIntervalSince1970, forKey: .endDateTime)
        }
        if let schemaExtensionId = self.schemaExtensionId {
            try encodeContainer.encode(schemaExtensionId, forKey: .schemaExtensionId)
        }
        if let schemaExtensionStatus = self.schemaExtensionStatus {
            try encodeContainer.encode(schemaExtensionStatus.rawValue, forKey: .schemaExtensionStatus)
        }
        if let schemaExtensionStatusReason = self.schemaExtensionStatusReason {
            try encodeContainer.encode(schemaExtensionStatusReason, forKey: .schemaExtensionStatusReason)
        }
        if let startDateTime = self.startDateTime {
            try encodeContainer.encode(startDateTime.timeIntervalSince1970, forKey: .startDateTime)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let directoryIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .directoryId)
        directoryId = directoryIdDecoded
        let schemaExtensionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .schemaExtensionId)
        schemaExtensionId = schemaExtensionIdDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let schemaExtensionStatusDecoded = try containerValues.decodeIfPresent(DirectoryClientTypes.SchemaExtensionStatus.self, forKey: .schemaExtensionStatus)
        schemaExtensionStatus = schemaExtensionStatusDecoded
        let schemaExtensionStatusReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .schemaExtensionStatusReason)
        schemaExtensionStatusReason = schemaExtensionStatusReasonDecoded
        let startDateTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .startDateTime)
        startDateTime = startDateTimeDecoded
        let endDateTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .endDateTime)
        endDateTime = endDateTimeDecoded
    }
}
