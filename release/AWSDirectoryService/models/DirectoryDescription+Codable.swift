// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension DirectoryClientTypes.DirectoryDescription: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accessUrl = "AccessUrl"
        case alias = "Alias"
        case connectSettings = "ConnectSettings"
        case description = "Description"
        case desiredNumberOfDomainControllers = "DesiredNumberOfDomainControllers"
        case directoryId = "DirectoryId"
        case dnsIpAddrs = "DnsIpAddrs"
        case edition = "Edition"
        case launchTime = "LaunchTime"
        case name = "Name"
        case ownerDirectoryDescription = "OwnerDirectoryDescription"
        case radiusSettings = "RadiusSettings"
        case radiusStatus = "RadiusStatus"
        case regionsInfo = "RegionsInfo"
        case shareMethod = "ShareMethod"
        case shareNotes = "ShareNotes"
        case shareStatus = "ShareStatus"
        case shortName = "ShortName"
        case size = "Size"
        case ssoEnabled = "SsoEnabled"
        case stage = "Stage"
        case stageLastUpdatedDateTime = "StageLastUpdatedDateTime"
        case stageReason = "StageReason"
        case type = "Type"
        case vpcSettings = "VpcSettings"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accessUrl = self.accessUrl {
            try encodeContainer.encode(accessUrl, forKey: .accessUrl)
        }
        if let alias = self.alias {
            try encodeContainer.encode(alias, forKey: .alias)
        }
        if let connectSettings = self.connectSettings {
            try encodeContainer.encode(connectSettings, forKey: .connectSettings)
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if desiredNumberOfDomainControllers != 0 {
            try encodeContainer.encode(desiredNumberOfDomainControllers, forKey: .desiredNumberOfDomainControllers)
        }
        if let directoryId = self.directoryId {
            try encodeContainer.encode(directoryId, forKey: .directoryId)
        }
        if let dnsIpAddrs = dnsIpAddrs {
            var dnsIpAddrsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .dnsIpAddrs)
            for dnsipaddrs0 in dnsIpAddrs {
                try dnsIpAddrsContainer.encode(dnsipaddrs0)
            }
        }
        if let edition = self.edition {
            try encodeContainer.encode(edition.rawValue, forKey: .edition)
        }
        if let launchTime = self.launchTime {
            try encodeContainer.encode(launchTime.timeIntervalSince1970, forKey: .launchTime)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let ownerDirectoryDescription = self.ownerDirectoryDescription {
            try encodeContainer.encode(ownerDirectoryDescription, forKey: .ownerDirectoryDescription)
        }
        if let radiusSettings = self.radiusSettings {
            try encodeContainer.encode(radiusSettings, forKey: .radiusSettings)
        }
        if let radiusStatus = self.radiusStatus {
            try encodeContainer.encode(radiusStatus.rawValue, forKey: .radiusStatus)
        }
        if let regionsInfo = self.regionsInfo {
            try encodeContainer.encode(regionsInfo, forKey: .regionsInfo)
        }
        if let shareMethod = self.shareMethod {
            try encodeContainer.encode(shareMethod.rawValue, forKey: .shareMethod)
        }
        if let shareNotes = self.shareNotes {
            try encodeContainer.encode(shareNotes, forKey: .shareNotes)
        }
        if let shareStatus = self.shareStatus {
            try encodeContainer.encode(shareStatus.rawValue, forKey: .shareStatus)
        }
        if let shortName = self.shortName {
            try encodeContainer.encode(shortName, forKey: .shortName)
        }
        if let size = self.size {
            try encodeContainer.encode(size.rawValue, forKey: .size)
        }
        if ssoEnabled != false {
            try encodeContainer.encode(ssoEnabled, forKey: .ssoEnabled)
        }
        if let stage = self.stage {
            try encodeContainer.encode(stage.rawValue, forKey: .stage)
        }
        if let stageLastUpdatedDateTime = self.stageLastUpdatedDateTime {
            try encodeContainer.encode(stageLastUpdatedDateTime.timeIntervalSince1970, forKey: .stageLastUpdatedDateTime)
        }
        if let stageReason = self.stageReason {
            try encodeContainer.encode(stageReason, forKey: .stageReason)
        }
        if let type = self.type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
        if let vpcSettings = self.vpcSettings {
            try encodeContainer.encode(vpcSettings, forKey: .vpcSettings)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let directoryIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .directoryId)
        directoryId = directoryIdDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let shortNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .shortName)
        shortName = shortNameDecoded
        let sizeDecoded = try containerValues.decodeIfPresent(DirectoryClientTypes.DirectorySize.self, forKey: .size)
        size = sizeDecoded
        let editionDecoded = try containerValues.decodeIfPresent(DirectoryClientTypes.DirectoryEdition.self, forKey: .edition)
        edition = editionDecoded
        let aliasDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .alias)
        alias = aliasDecoded
        let accessUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .accessUrl)
        accessUrl = accessUrlDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let dnsIpAddrsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .dnsIpAddrs)
        var dnsIpAddrsDecoded0:[Swift.String]? = nil
        if let dnsIpAddrsContainer = dnsIpAddrsContainer {
            dnsIpAddrsDecoded0 = [Swift.String]()
            for string0 in dnsIpAddrsContainer {
                if let string0 = string0 {
                    dnsIpAddrsDecoded0?.append(string0)
                }
            }
        }
        dnsIpAddrs = dnsIpAddrsDecoded0
        let stageDecoded = try containerValues.decodeIfPresent(DirectoryClientTypes.DirectoryStage.self, forKey: .stage)
        stage = stageDecoded
        let shareStatusDecoded = try containerValues.decodeIfPresent(DirectoryClientTypes.ShareStatus.self, forKey: .shareStatus)
        shareStatus = shareStatusDecoded
        let shareMethodDecoded = try containerValues.decodeIfPresent(DirectoryClientTypes.ShareMethod.self, forKey: .shareMethod)
        shareMethod = shareMethodDecoded
        let shareNotesDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .shareNotes)
        shareNotes = shareNotesDecoded
        let launchTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .launchTime)
        launchTime = launchTimeDecoded
        let stageLastUpdatedDateTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .stageLastUpdatedDateTime)
        stageLastUpdatedDateTime = stageLastUpdatedDateTimeDecoded
        let typeDecoded = try containerValues.decodeIfPresent(DirectoryClientTypes.DirectoryType.self, forKey: .type)
        type = typeDecoded
        let vpcSettingsDecoded = try containerValues.decodeIfPresent(DirectoryClientTypes.DirectoryVpcSettingsDescription.self, forKey: .vpcSettings)
        vpcSettings = vpcSettingsDecoded
        let connectSettingsDecoded = try containerValues.decodeIfPresent(DirectoryClientTypes.DirectoryConnectSettingsDescription.self, forKey: .connectSettings)
        connectSettings = connectSettingsDecoded
        let radiusSettingsDecoded = try containerValues.decodeIfPresent(DirectoryClientTypes.RadiusSettings.self, forKey: .radiusSettings)
        radiusSettings = radiusSettingsDecoded
        let radiusStatusDecoded = try containerValues.decodeIfPresent(DirectoryClientTypes.RadiusStatus.self, forKey: .radiusStatus)
        radiusStatus = radiusStatusDecoded
        let stageReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stageReason)
        stageReason = stageReasonDecoded
        let ssoEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .ssoEnabled) ?? false
        ssoEnabled = ssoEnabledDecoded
        let desiredNumberOfDomainControllersDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .desiredNumberOfDomainControllers) ?? 0
        desiredNumberOfDomainControllers = desiredNumberOfDomainControllersDecoded
        let ownerDirectoryDescriptionDecoded = try containerValues.decodeIfPresent(DirectoryClientTypes.OwnerDirectoryDescription.self, forKey: .ownerDirectoryDescription)
        ownerDirectoryDescription = ownerDirectoryDescriptionDecoded
        let regionsInfoDecoded = try containerValues.decodeIfPresent(DirectoryClientTypes.RegionsInfo.self, forKey: .regionsInfo)
        regionsInfo = regionsInfoDecoded
    }
}
