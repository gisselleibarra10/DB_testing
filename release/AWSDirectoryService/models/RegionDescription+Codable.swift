// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension DirectoryClientTypes.RegionDescription: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case desiredNumberOfDomainControllers = "DesiredNumberOfDomainControllers"
        case directoryId = "DirectoryId"
        case lastUpdatedDateTime = "LastUpdatedDateTime"
        case launchTime = "LaunchTime"
        case regionName = "RegionName"
        case regionType = "RegionType"
        case status = "Status"
        case statusLastUpdatedDateTime = "StatusLastUpdatedDateTime"
        case vpcSettings = "VpcSettings"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if desiredNumberOfDomainControllers != 0 {
            try encodeContainer.encode(desiredNumberOfDomainControllers, forKey: .desiredNumberOfDomainControllers)
        }
        if let directoryId = self.directoryId {
            try encodeContainer.encode(directoryId, forKey: .directoryId)
        }
        if let lastUpdatedDateTime = self.lastUpdatedDateTime {
            try encodeContainer.encode(lastUpdatedDateTime.timeIntervalSince1970, forKey: .lastUpdatedDateTime)
        }
        if let launchTime = self.launchTime {
            try encodeContainer.encode(launchTime.timeIntervalSince1970, forKey: .launchTime)
        }
        if let regionName = self.regionName {
            try encodeContainer.encode(regionName, forKey: .regionName)
        }
        if let regionType = self.regionType {
            try encodeContainer.encode(regionType.rawValue, forKey: .regionType)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let statusLastUpdatedDateTime = self.statusLastUpdatedDateTime {
            try encodeContainer.encode(statusLastUpdatedDateTime.timeIntervalSince1970, forKey: .statusLastUpdatedDateTime)
        }
        if let vpcSettings = self.vpcSettings {
            try encodeContainer.encode(vpcSettings, forKey: .vpcSettings)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let directoryIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .directoryId)
        directoryId = directoryIdDecoded
        let regionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .regionName)
        regionName = regionNameDecoded
        let regionTypeDecoded = try containerValues.decodeIfPresent(DirectoryClientTypes.RegionType.self, forKey: .regionType)
        regionType = regionTypeDecoded
        let statusDecoded = try containerValues.decodeIfPresent(DirectoryClientTypes.DirectoryStage.self, forKey: .status)
        status = statusDecoded
        let vpcSettingsDecoded = try containerValues.decodeIfPresent(DirectoryClientTypes.DirectoryVpcSettings.self, forKey: .vpcSettings)
        vpcSettings = vpcSettingsDecoded
        let desiredNumberOfDomainControllersDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .desiredNumberOfDomainControllers) ?? 0
        desiredNumberOfDomainControllers = desiredNumberOfDomainControllersDecoded
        let launchTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .launchTime)
        launchTime = launchTimeDecoded
        let statusLastUpdatedDateTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .statusLastUpdatedDateTime)
        statusLastUpdatedDateTime = statusLastUpdatedDateTimeDecoded
        let lastUpdatedDateTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastUpdatedDateTime)
        lastUpdatedDateTime = lastUpdatedDateTimeDecoded
    }
}
