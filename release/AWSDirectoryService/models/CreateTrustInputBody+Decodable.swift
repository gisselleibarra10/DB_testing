// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateTrustInputBody: Swift.Equatable {
    let directoryId: Swift.String?
    let remoteDomainName: Swift.String?
    let trustPassword: Swift.String?
    let trustDirection: DirectoryClientTypes.TrustDirection?
    let trustType: DirectoryClientTypes.TrustType?
    let conditionalForwarderIpAddrs: [Swift.String]?
    let selectiveAuth: DirectoryClientTypes.SelectiveAuth?
}

extension CreateTrustInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case conditionalForwarderIpAddrs = "ConditionalForwarderIpAddrs"
        case directoryId = "DirectoryId"
        case remoteDomainName = "RemoteDomainName"
        case selectiveAuth = "SelectiveAuth"
        case trustDirection = "TrustDirection"
        case trustPassword = "TrustPassword"
        case trustType = "TrustType"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let directoryIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .directoryId)
        directoryId = directoryIdDecoded
        let remoteDomainNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .remoteDomainName)
        remoteDomainName = remoteDomainNameDecoded
        let trustPasswordDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .trustPassword)
        trustPassword = trustPasswordDecoded
        let trustDirectionDecoded = try containerValues.decodeIfPresent(DirectoryClientTypes.TrustDirection.self, forKey: .trustDirection)
        trustDirection = trustDirectionDecoded
        let trustTypeDecoded = try containerValues.decodeIfPresent(DirectoryClientTypes.TrustType.self, forKey: .trustType)
        trustType = trustTypeDecoded
        let conditionalForwarderIpAddrsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .conditionalForwarderIpAddrs)
        var conditionalForwarderIpAddrsDecoded0:[Swift.String]? = nil
        if let conditionalForwarderIpAddrsContainer = conditionalForwarderIpAddrsContainer {
            conditionalForwarderIpAddrsDecoded0 = [Swift.String]()
            for string0 in conditionalForwarderIpAddrsContainer {
                if let string0 = string0 {
                    conditionalForwarderIpAddrsDecoded0?.append(string0)
                }
            }
        }
        conditionalForwarderIpAddrs = conditionalForwarderIpAddrsDecoded0
        let selectiveAuthDecoded = try containerValues.decodeIfPresent(DirectoryClientTypes.SelectiveAuth.self, forKey: .selectiveAuth)
        selectiveAuth = selectiveAuthDecoded
    }
}
