// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListSchemaExtensionsOutputResponseBody: Swift.Equatable {
    let schemaExtensionsInfo: [DirectoryClientTypes.SchemaExtensionInfo]?
    let nextToken: Swift.String?
}

extension ListSchemaExtensionsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case schemaExtensionsInfo = "SchemaExtensionsInfo"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let schemaExtensionsInfoContainer = try containerValues.decodeIfPresent([DirectoryClientTypes.SchemaExtensionInfo?].self, forKey: .schemaExtensionsInfo)
        var schemaExtensionsInfoDecoded0:[DirectoryClientTypes.SchemaExtensionInfo]? = nil
        if let schemaExtensionsInfoContainer = schemaExtensionsInfoContainer {
            schemaExtensionsInfoDecoded0 = [DirectoryClientTypes.SchemaExtensionInfo]()
            for structure0 in schemaExtensionsInfoContainer {
                if let structure0 = structure0 {
                    schemaExtensionsInfoDecoded0?.append(structure0)
                }
            }
        }
        schemaExtensionsInfo = schemaExtensionsInfoDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
