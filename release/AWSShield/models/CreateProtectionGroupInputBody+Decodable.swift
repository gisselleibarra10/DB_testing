// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateProtectionGroupInputBody: Swift.Equatable {
    let protectionGroupId: Swift.String?
    let aggregation: ShieldClientTypes.ProtectionGroupAggregation?
    let pattern: ShieldClientTypes.ProtectionGroupPattern?
    let resourceType: ShieldClientTypes.ProtectedResourceType?
    let members: [Swift.String]?
    let tags: [ShieldClientTypes.Tag]?
}

extension CreateProtectionGroupInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case aggregation = "Aggregation"
        case members = "Members"
        case pattern = "Pattern"
        case protectionGroupId = "ProtectionGroupId"
        case resourceType = "ResourceType"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let protectionGroupIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .protectionGroupId)
        protectionGroupId = protectionGroupIdDecoded
        let aggregationDecoded = try containerValues.decodeIfPresent(ShieldClientTypes.ProtectionGroupAggregation.self, forKey: .aggregation)
        aggregation = aggregationDecoded
        let patternDecoded = try containerValues.decodeIfPresent(ShieldClientTypes.ProtectionGroupPattern.self, forKey: .pattern)
        pattern = patternDecoded
        let resourceTypeDecoded = try containerValues.decodeIfPresent(ShieldClientTypes.ProtectedResourceType.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let membersContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .members)
        var membersDecoded0:[Swift.String]? = nil
        if let membersContainer = membersContainer {
            membersDecoded0 = [Swift.String]()
            for string0 in membersContainer {
                if let string0 = string0 {
                    membersDecoded0?.append(string0)
                }
            }
        }
        members = membersDecoded0
        let tagsContainer = try containerValues.decodeIfPresent([ShieldClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[ShieldClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [ShieldClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}
