// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ShieldClientTypes.Subscription: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case autoRenew = "AutoRenew"
        case endTime = "EndTime"
        case limits = "Limits"
        case proactiveEngagementStatus = "ProactiveEngagementStatus"
        case startTime = "StartTime"
        case subscriptionArn = "SubscriptionArn"
        case subscriptionLimits = "SubscriptionLimits"
        case timeCommitmentInSeconds = "TimeCommitmentInSeconds"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let autoRenew = self.autoRenew {
            try encodeContainer.encode(autoRenew.rawValue, forKey: .autoRenew)
        }
        if let endTime = self.endTime {
            try encodeContainer.encode(endTime.timeIntervalSince1970, forKey: .endTime)
        }
        if let limits = limits {
            var limitsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .limits)
            for limits0 in limits {
                try limitsContainer.encode(limits0)
            }
        }
        if let proactiveEngagementStatus = self.proactiveEngagementStatus {
            try encodeContainer.encode(proactiveEngagementStatus.rawValue, forKey: .proactiveEngagementStatus)
        }
        if let startTime = self.startTime {
            try encodeContainer.encode(startTime.timeIntervalSince1970, forKey: .startTime)
        }
        if let subscriptionArn = self.subscriptionArn {
            try encodeContainer.encode(subscriptionArn, forKey: .subscriptionArn)
        }
        if let subscriptionLimits = self.subscriptionLimits {
            try encodeContainer.encode(subscriptionLimits, forKey: .subscriptionLimits)
        }
        if timeCommitmentInSeconds != 0 {
            try encodeContainer.encode(timeCommitmentInSeconds, forKey: .timeCommitmentInSeconds)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let startTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .startTime)
        startTime = startTimeDecoded
        let endTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .endTime)
        endTime = endTimeDecoded
        let timeCommitmentInSecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .timeCommitmentInSeconds) ?? 0
        timeCommitmentInSeconds = timeCommitmentInSecondsDecoded
        let autoRenewDecoded = try containerValues.decodeIfPresent(ShieldClientTypes.AutoRenew.self, forKey: .autoRenew)
        autoRenew = autoRenewDecoded
        let limitsContainer = try containerValues.decodeIfPresent([ShieldClientTypes.Limit?].self, forKey: .limits)
        var limitsDecoded0:[ShieldClientTypes.Limit]? = nil
        if let limitsContainer = limitsContainer {
            limitsDecoded0 = [ShieldClientTypes.Limit]()
            for structure0 in limitsContainer {
                if let structure0 = structure0 {
                    limitsDecoded0?.append(structure0)
                }
            }
        }
        limits = limitsDecoded0
        let proactiveEngagementStatusDecoded = try containerValues.decodeIfPresent(ShieldClientTypes.ProactiveEngagementStatus.self, forKey: .proactiveEngagementStatus)
        proactiveEngagementStatus = proactiveEngagementStatusDecoded
        let subscriptionLimitsDecoded = try containerValues.decodeIfPresent(ShieldClientTypes.SubscriptionLimits.self, forKey: .subscriptionLimits)
        subscriptionLimits = subscriptionLimitsDecoded
        let subscriptionArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .subscriptionArn)
        subscriptionArn = subscriptionArnDecoded
    }
}
