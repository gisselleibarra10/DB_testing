// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ShieldClientTypes.InclusionProtectionGroupFilters: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case aggregations = "Aggregations"
        case patterns = "Patterns"
        case protectionGroupIds = "ProtectionGroupIds"
        case resourceTypes = "ResourceTypes"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let aggregations = aggregations {
            var aggregationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .aggregations)
            for protectiongroupaggregationfilters0 in aggregations {
                try aggregationsContainer.encode(protectiongroupaggregationfilters0.rawValue)
            }
        }
        if let patterns = patterns {
            var patternsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .patterns)
            for protectiongrouppatternfilters0 in patterns {
                try patternsContainer.encode(protectiongrouppatternfilters0.rawValue)
            }
        }
        if let protectionGroupIds = protectionGroupIds {
            var protectionGroupIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .protectionGroupIds)
            for protectiongroupidfilters0 in protectionGroupIds {
                try protectionGroupIdsContainer.encode(protectiongroupidfilters0)
            }
        }
        if let resourceTypes = resourceTypes {
            var resourceTypesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .resourceTypes)
            for protectedresourcetypefilters0 in resourceTypes {
                try resourceTypesContainer.encode(protectedresourcetypefilters0.rawValue)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let protectionGroupIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .protectionGroupIds)
        var protectionGroupIdsDecoded0:[Swift.String]? = nil
        if let protectionGroupIdsContainer = protectionGroupIdsContainer {
            protectionGroupIdsDecoded0 = [Swift.String]()
            for string0 in protectionGroupIdsContainer {
                if let string0 = string0 {
                    protectionGroupIdsDecoded0?.append(string0)
                }
            }
        }
        protectionGroupIds = protectionGroupIdsDecoded0
        let patternsContainer = try containerValues.decodeIfPresent([ShieldClientTypes.ProtectionGroupPattern?].self, forKey: .patterns)
        var patternsDecoded0:[ShieldClientTypes.ProtectionGroupPattern]? = nil
        if let patternsContainer = patternsContainer {
            patternsDecoded0 = [ShieldClientTypes.ProtectionGroupPattern]()
            for string0 in patternsContainer {
                if let string0 = string0 {
                    patternsDecoded0?.append(string0)
                }
            }
        }
        patterns = patternsDecoded0
        let resourceTypesContainer = try containerValues.decodeIfPresent([ShieldClientTypes.ProtectedResourceType?].self, forKey: .resourceTypes)
        var resourceTypesDecoded0:[ShieldClientTypes.ProtectedResourceType]? = nil
        if let resourceTypesContainer = resourceTypesContainer {
            resourceTypesDecoded0 = [ShieldClientTypes.ProtectedResourceType]()
            for string0 in resourceTypesContainer {
                if let string0 = string0 {
                    resourceTypesDecoded0?.append(string0)
                }
            }
        }
        resourceTypes = resourceTypesDecoded0
        let aggregationsContainer = try containerValues.decodeIfPresent([ShieldClientTypes.ProtectionGroupAggregation?].self, forKey: .aggregations)
        var aggregationsDecoded0:[ShieldClientTypes.ProtectionGroupAggregation]? = nil
        if let aggregationsContainer = aggregationsContainer {
            aggregationsDecoded0 = [ShieldClientTypes.ProtectionGroupAggregation]()
            for string0 in aggregationsContainer {
                if let string0 = string0 {
                    aggregationsDecoded0?.append(string0)
                }
            }
        }
        aggregations = aggregationsDecoded0
    }
}
