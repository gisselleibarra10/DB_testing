// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ShieldClientTypes.TimeRange: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case fromInclusive = "FromInclusive"
        case toExclusive = "ToExclusive"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let fromInclusive = self.fromInclusive {
            try encodeContainer.encode(fromInclusive.timeIntervalSince1970, forKey: .fromInclusive)
        }
        if let toExclusive = self.toExclusive {
            try encodeContainer.encode(toExclusive.timeIntervalSince1970, forKey: .toExclusive)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fromInclusiveDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .fromInclusive)
        fromInclusive = fromInclusiveDecoded
        let toExclusiveDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .toExclusive)
        toExclusive = toExclusiveDecoded
    }
}
