// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ShieldClientTypes.AttackVolume: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bitsPerSecond = "BitsPerSecond"
        case packetsPerSecond = "PacketsPerSecond"
        case requestsPerSecond = "RequestsPerSecond"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let bitsPerSecond = self.bitsPerSecond {
            try encodeContainer.encode(bitsPerSecond, forKey: .bitsPerSecond)
        }
        if let packetsPerSecond = self.packetsPerSecond {
            try encodeContainer.encode(packetsPerSecond, forKey: .packetsPerSecond)
        }
        if let requestsPerSecond = self.requestsPerSecond {
            try encodeContainer.encode(requestsPerSecond, forKey: .requestsPerSecond)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let bitsPerSecondDecoded = try containerValues.decodeIfPresent(ShieldClientTypes.AttackVolumeStatistics.self, forKey: .bitsPerSecond)
        bitsPerSecond = bitsPerSecondDecoded
        let packetsPerSecondDecoded = try containerValues.decodeIfPresent(ShieldClientTypes.AttackVolumeStatistics.self, forKey: .packetsPerSecond)
        packetsPerSecond = packetsPerSecondDecoded
        let requestsPerSecondDecoded = try containerValues.decodeIfPresent(ShieldClientTypes.AttackVolumeStatistics.self, forKey: .requestsPerSecond)
        requestsPerSecond = requestsPerSecondDecoded
    }
}
