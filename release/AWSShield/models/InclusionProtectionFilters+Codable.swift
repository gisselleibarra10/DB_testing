// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ShieldClientTypes.InclusionProtectionFilters: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case protectionNames = "ProtectionNames"
        case resourceArns = "ResourceArns"
        case resourceTypes = "ResourceTypes"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let protectionNames = protectionNames {
            var protectionNamesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .protectionNames)
            for protectionnamefilters0 in protectionNames {
                try protectionNamesContainer.encode(protectionnamefilters0)
            }
        }
        if let resourceArns = resourceArns {
            var resourceArnsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .resourceArns)
            for resourcearnfilters0 in resourceArns {
                try resourceArnsContainer.encode(resourcearnfilters0)
            }
        }
        if let resourceTypes = resourceTypes {
            var resourceTypesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .resourceTypes)
            for protectedresourcetypefilters0 in resourceTypes {
                try resourceTypesContainer.encode(protectedresourcetypefilters0.rawValue)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceArnsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .resourceArns)
        var resourceArnsDecoded0:[Swift.String]? = nil
        if let resourceArnsContainer = resourceArnsContainer {
            resourceArnsDecoded0 = [Swift.String]()
            for string0 in resourceArnsContainer {
                if let string0 = string0 {
                    resourceArnsDecoded0?.append(string0)
                }
            }
        }
        resourceArns = resourceArnsDecoded0
        let protectionNamesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .protectionNames)
        var protectionNamesDecoded0:[Swift.String]? = nil
        if let protectionNamesContainer = protectionNamesContainer {
            protectionNamesDecoded0 = [Swift.String]()
            for string0 in protectionNamesContainer {
                if let string0 = string0 {
                    protectionNamesDecoded0?.append(string0)
                }
            }
        }
        protectionNames = protectionNamesDecoded0
        let resourceTypesContainer = try containerValues.decodeIfPresent([ShieldClientTypes.ProtectedResourceType?].self, forKey: .resourceTypes)
        var resourceTypesDecoded0:[ShieldClientTypes.ProtectedResourceType]? = nil
        if let resourceTypesContainer = resourceTypesContainer {
            resourceTypesDecoded0 = [ShieldClientTypes.ProtectedResourceType]()
            for string0 in resourceTypesContainer {
                if let string0 = string0 {
                    resourceTypesDecoded0?.append(string0)
                }
            }
        }
        resourceTypes = resourceTypesDecoded0
    }
}
