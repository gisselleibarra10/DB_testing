// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ShieldClientTypes.SummarizedAttackVector: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case vectorCounters = "VectorCounters"
        case vectorType = "VectorType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let vectorCounters = vectorCounters {
            var vectorCountersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .vectorCounters)
            for summarizedcounterlist0 in vectorCounters {
                try vectorCountersContainer.encode(summarizedcounterlist0)
            }
        }
        if let vectorType = self.vectorType {
            try encodeContainer.encode(vectorType, forKey: .vectorType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let vectorTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vectorType)
        vectorType = vectorTypeDecoded
        let vectorCountersContainer = try containerValues.decodeIfPresent([ShieldClientTypes.SummarizedCounter?].self, forKey: .vectorCounters)
        var vectorCountersDecoded0:[ShieldClientTypes.SummarizedCounter]? = nil
        if let vectorCountersContainer = vectorCountersContainer {
            vectorCountersDecoded0 = [ShieldClientTypes.SummarizedCounter]()
            for structure0 in vectorCountersContainer {
                if let structure0 = structure0 {
                    vectorCountersDecoded0?.append(structure0)
                }
            }
        }
        vectorCounters = vectorCountersDecoded0
    }
}
