// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ShieldClientTypes.Protection: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applicationLayerAutomaticResponseConfiguration = "ApplicationLayerAutomaticResponseConfiguration"
        case healthCheckIds = "HealthCheckIds"
        case id = "Id"
        case name = "Name"
        case protectionArn = "ProtectionArn"
        case resourceArn = "ResourceArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let applicationLayerAutomaticResponseConfiguration = self.applicationLayerAutomaticResponseConfiguration {
            try encodeContainer.encode(applicationLayerAutomaticResponseConfiguration, forKey: .applicationLayerAutomaticResponseConfiguration)
        }
        if let healthCheckIds = healthCheckIds {
            var healthCheckIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .healthCheckIds)
            for healthcheckids0 in healthCheckIds {
                try healthCheckIdsContainer.encode(healthcheckids0)
            }
        }
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let protectionArn = self.protectionArn {
            try encodeContainer.encode(protectionArn, forKey: .protectionArn)
        }
        if let resourceArn = self.resourceArn {
            try encodeContainer.encode(resourceArn, forKey: .resourceArn)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let resourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceArn)
        resourceArn = resourceArnDecoded
        let healthCheckIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .healthCheckIds)
        var healthCheckIdsDecoded0:[Swift.String]? = nil
        if let healthCheckIdsContainer = healthCheckIdsContainer {
            healthCheckIdsDecoded0 = [Swift.String]()
            for string0 in healthCheckIdsContainer {
                if let string0 = string0 {
                    healthCheckIdsDecoded0?.append(string0)
                }
            }
        }
        healthCheckIds = healthCheckIdsDecoded0
        let protectionArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .protectionArn)
        protectionArn = protectionArnDecoded
        let applicationLayerAutomaticResponseConfigurationDecoded = try containerValues.decodeIfPresent(ShieldClientTypes.ApplicationLayerAutomaticResponseConfiguration.self, forKey: .applicationLayerAutomaticResponseConfiguration)
        applicationLayerAutomaticResponseConfiguration = applicationLayerAutomaticResponseConfigurationDecoded
    }
}
