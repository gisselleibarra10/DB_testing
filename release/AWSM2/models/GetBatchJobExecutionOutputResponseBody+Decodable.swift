// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetBatchJobExecutionOutputResponseBody: Swift.Equatable {
    let executionId: Swift.String?
    let applicationId: Swift.String?
    let jobId: Swift.String?
    let jobName: Swift.String?
    let jobUser: Swift.String?
    let jobType: M2ClientTypes.BatchJobType?
    let status: M2ClientTypes.BatchJobExecutionStatus?
    let startTime: ClientRuntime.Date?
    let endTime: ClientRuntime.Date?
    let statusReason: Swift.String?
}

extension GetBatchJobExecutionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applicationId
        case endTime
        case executionId
        case jobId
        case jobName
        case jobType
        case jobUser
        case startTime
        case status
        case statusReason
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let executionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .executionId)
        executionId = executionIdDecoded
        let applicationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .applicationId)
        applicationId = applicationIdDecoded
        let jobIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobId)
        jobId = jobIdDecoded
        let jobNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobName)
        jobName = jobNameDecoded
        let jobUserDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobUser)
        jobUser = jobUserDecoded
        let jobTypeDecoded = try containerValues.decodeIfPresent(M2ClientTypes.BatchJobType.self, forKey: .jobType)
        jobType = jobTypeDecoded
        let statusDecoded = try containerValues.decodeIfPresent(M2ClientTypes.BatchJobExecutionStatus.self, forKey: .status)
        status = statusDecoded
        let startTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .startTime)
        startTime = startTimeDecoded
        let endTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .endTime)
        endTime = endTimeDecoded
        let statusReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .statusReason)
        statusReason = statusReasonDecoded
    }
}
