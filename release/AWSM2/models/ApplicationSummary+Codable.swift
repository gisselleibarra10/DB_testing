// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension M2ClientTypes.ApplicationSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applicationArn
        case applicationId
        case applicationVersion
        case creationTime
        case deploymentStatus
        case description
        case engineType
        case environmentId
        case lastStartTime
        case name
        case status
        case versionStatus
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let applicationArn = self.applicationArn {
            try encodeContainer.encode(applicationArn, forKey: .applicationArn)
        }
        if let applicationId = self.applicationId {
            try encodeContainer.encode(applicationId, forKey: .applicationId)
        }
        if let applicationVersion = self.applicationVersion {
            try encodeContainer.encode(applicationVersion, forKey: .applicationVersion)
        }
        if let creationTime = self.creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let deploymentStatus = self.deploymentStatus {
            try encodeContainer.encode(deploymentStatus.rawValue, forKey: .deploymentStatus)
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let engineType = self.engineType {
            try encodeContainer.encode(engineType.rawValue, forKey: .engineType)
        }
        if let environmentId = self.environmentId {
            try encodeContainer.encode(environmentId, forKey: .environmentId)
        }
        if let lastStartTime = self.lastStartTime {
            try encodeContainer.encode(lastStartTime.timeIntervalSince1970, forKey: .lastStartTime)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let versionStatus = self.versionStatus {
            try encodeContainer.encode(versionStatus.rawValue, forKey: .versionStatus)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let applicationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .applicationId)
        applicationId = applicationIdDecoded
        let applicationArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .applicationArn)
        applicationArn = applicationArnDecoded
        let applicationVersionDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .applicationVersion)
        applicationVersion = applicationVersionDecoded
        let statusDecoded = try containerValues.decodeIfPresent(M2ClientTypes.ApplicationLifecycle.self, forKey: .status)
        status = statusDecoded
        let engineTypeDecoded = try containerValues.decodeIfPresent(M2ClientTypes.EngineType.self, forKey: .engineType)
        engineType = engineTypeDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let environmentIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .environmentId)
        environmentId = environmentIdDecoded
        let lastStartTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastStartTime)
        lastStartTime = lastStartTimeDecoded
        let versionStatusDecoded = try containerValues.decodeIfPresent(M2ClientTypes.ApplicationVersionLifecycle.self, forKey: .versionStatus)
        versionStatus = versionStatusDecoded
        let deploymentStatusDecoded = try containerValues.decodeIfPresent(M2ClientTypes.ApplicationDeploymentLifecycle.self, forKey: .deploymentStatus)
        deploymentStatus = deploymentStatusDecoded
    }
}
