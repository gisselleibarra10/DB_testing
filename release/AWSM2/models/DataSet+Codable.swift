// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension M2ClientTypes.DataSet: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case datasetName
        case datasetOrg
        case recordLength
        case relativePath
        case storageType
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let datasetName = self.datasetName {
            try encodeContainer.encode(datasetName, forKey: .datasetName)
        }
        if let datasetOrg = self.datasetOrg {
            try encodeContainer.encode(datasetOrg, forKey: .datasetOrg)
        }
        if let recordLength = self.recordLength {
            try encodeContainer.encode(recordLength, forKey: .recordLength)
        }
        if let relativePath = self.relativePath {
            try encodeContainer.encode(relativePath, forKey: .relativePath)
        }
        if let storageType = self.storageType {
            try encodeContainer.encode(storageType, forKey: .storageType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let storageTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .storageType)
        storageType = storageTypeDecoded
        let datasetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .datasetName)
        datasetName = datasetNameDecoded
        let datasetOrgDecoded = try containerValues.decodeIfPresent(M2ClientTypes.DatasetOrgAttributes.self, forKey: .datasetOrg)
        datasetOrg = datasetOrgDecoded
        let relativePathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .relativePath)
        relativePath = relativePathDecoded
        let recordLengthDecoded = try containerValues.decodeIfPresent(M2ClientTypes.RecordLength.self, forKey: .recordLength)
        recordLength = recordLengthDecoded
    }
}
