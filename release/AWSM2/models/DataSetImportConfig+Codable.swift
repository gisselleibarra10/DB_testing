// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension M2ClientTypes.DataSetImportConfig: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case datasets = "dataSets"
        case s3location = "s3Location"
        case sdkUnknown
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        switch self {
            case let .datasets(datasets):
                var datasetsContainer = container.nestedUnkeyedContainer(forKey: .datasets)
                for datasetimportlist0 in datasets {
                    try datasetsContainer.encode(datasetimportlist0)
                }
            case let .s3location(s3location):
                try container.encode(s3location, forKey: .s3location)
            case let .sdkUnknown(sdkUnknown):
                try container.encode(sdkUnknown, forKey: .sdkUnknown)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let values = try decoder.container(keyedBy: CodingKeys.self)
        let s3locationDecoded = try values.decodeIfPresent(Swift.String.self, forKey: .s3location)
        if let s3location = s3locationDecoded {
            self = .s3location(s3location)
            return
        }
        let datasetsContainer = try values.decodeIfPresent([M2ClientTypes.DataSetImportItem?].self, forKey: .datasets)
        var datasetsDecoded0:[M2ClientTypes.DataSetImportItem]? = nil
        if let datasetsContainer = datasetsContainer {
            datasetsDecoded0 = [M2ClientTypes.DataSetImportItem]()
            for structure0 in datasetsContainer {
                if let structure0 = structure0 {
                    datasetsDecoded0?.append(structure0)
                }
            }
        }
        if let datasets = datasetsDecoded0 {
            self = .datasets(datasets)
            return
        }
        self = .sdkUnknown("")
    }
}
