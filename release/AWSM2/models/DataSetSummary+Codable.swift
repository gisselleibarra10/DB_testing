// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension M2ClientTypes.DataSetSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTime
        case dataSetName
        case dataSetOrg
        case format
        case lastReferencedTime
        case lastUpdatedTime
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationTime = self.creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let dataSetName = self.dataSetName {
            try encodeContainer.encode(dataSetName, forKey: .dataSetName)
        }
        if let dataSetOrg = self.dataSetOrg {
            try encodeContainer.encode(dataSetOrg, forKey: .dataSetOrg)
        }
        if let format = self.format {
            try encodeContainer.encode(format, forKey: .format)
        }
        if let lastReferencedTime = self.lastReferencedTime {
            try encodeContainer.encode(lastReferencedTime.timeIntervalSince1970, forKey: .lastReferencedTime)
        }
        if let lastUpdatedTime = self.lastUpdatedTime {
            try encodeContainer.encode(lastUpdatedTime.timeIntervalSince1970, forKey: .lastUpdatedTime)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dataSetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataSetName)
        dataSetName = dataSetNameDecoded
        let dataSetOrgDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataSetOrg)
        dataSetOrg = dataSetOrgDecoded
        let formatDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .format)
        format = formatDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let lastUpdatedTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastUpdatedTime)
        lastUpdatedTime = lastUpdatedTimeDecoded
        let lastReferencedTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastReferencedTime)
        lastReferencedTime = lastReferencedTimeDecoded
    }
}
