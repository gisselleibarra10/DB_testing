// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CreateEnvironmentInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientToken
        case description
        case engineType
        case engineVersion
        case highAvailabilityConfig
        case instanceType
        case name
        case preferredMaintenanceWindow
        case publiclyAccessible
        case securityGroupIds
        case storageConfigurations
        case subnetIds
        case tags
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientToken = self.clientToken {
            try encodeContainer.encode(clientToken, forKey: .clientToken)
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let engineType = self.engineType {
            try encodeContainer.encode(engineType.rawValue, forKey: .engineType)
        }
        if let engineVersion = self.engineVersion {
            try encodeContainer.encode(engineVersion, forKey: .engineVersion)
        }
        if let highAvailabilityConfig = self.highAvailabilityConfig {
            try encodeContainer.encode(highAvailabilityConfig, forKey: .highAvailabilityConfig)
        }
        if let instanceType = self.instanceType {
            try encodeContainer.encode(instanceType, forKey: .instanceType)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let preferredMaintenanceWindow = self.preferredMaintenanceWindow {
            try encodeContainer.encode(preferredMaintenanceWindow, forKey: .preferredMaintenanceWindow)
        }
        if publiclyAccessible != false {
            try encodeContainer.encode(publiclyAccessible, forKey: .publiclyAccessible)
        }
        if let securityGroupIds = securityGroupIds {
            var securityGroupIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .securityGroupIds)
            for string50list0 in securityGroupIds {
                try securityGroupIdsContainer.encode(string50list0)
            }
        }
        if let storageConfigurations = storageConfigurations {
            var storageConfigurationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .storageConfigurations)
            for storageconfigurationlist0 in storageConfigurations {
                try storageConfigurationsContainer.encode(storageconfigurationlist0)
            }
        }
        if let subnetIds = subnetIds {
            var subnetIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .subnetIds)
            for string50list0 in subnetIds {
                try subnetIdsContainer.encode(string50list0)
            }
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, tagmap0) in tags {
                try tagsContainer.encode(tagmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }
}
