// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetEnvironmentOutputResponseBody: Swift.Equatable {
    let name: Swift.String?
    let description: Swift.String?
    let environmentArn: Swift.String?
    let environmentId: Swift.String?
    let instanceType: Swift.String?
    let status: M2ClientTypes.EnvironmentLifecycle?
    let engineType: M2ClientTypes.EngineType?
    let engineVersion: Swift.String?
    let vpcId: Swift.String?
    let subnetIds: [Swift.String]?
    let securityGroupIds: [Swift.String]?
    let creationTime: ClientRuntime.Date?
    let storageConfigurations: [M2ClientTypes.StorageConfiguration]?
    let tags: [Swift.String:Swift.String]?
    let highAvailabilityConfig: M2ClientTypes.HighAvailabilityConfig?
    let publiclyAccessible: Swift.Bool
    let actualCapacity: Swift.Int?
    let loadBalancerArn: Swift.String?
    let statusReason: Swift.String?
    let preferredMaintenanceWindow: Swift.String?
    let pendingMaintenance: M2ClientTypes.PendingMaintenance?
}

extension GetEnvironmentOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case actualCapacity
        case creationTime
        case description
        case engineType
        case engineVersion
        case environmentArn
        case environmentId
        case highAvailabilityConfig
        case instanceType
        case loadBalancerArn
        case name
        case pendingMaintenance
        case preferredMaintenanceWindow
        case publiclyAccessible
        case securityGroupIds
        case status
        case statusReason
        case storageConfigurations
        case subnetIds
        case tags
        case vpcId
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let environmentArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .environmentArn)
        environmentArn = environmentArnDecoded
        let environmentIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .environmentId)
        environmentId = environmentIdDecoded
        let instanceTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceType)
        instanceType = instanceTypeDecoded
        let statusDecoded = try containerValues.decodeIfPresent(M2ClientTypes.EnvironmentLifecycle.self, forKey: .status)
        status = statusDecoded
        let engineTypeDecoded = try containerValues.decodeIfPresent(M2ClientTypes.EngineType.self, forKey: .engineType)
        engineType = engineTypeDecoded
        let engineVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .engineVersion)
        engineVersion = engineVersionDecoded
        let vpcIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vpcId)
        vpcId = vpcIdDecoded
        let subnetIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .subnetIds)
        var subnetIdsDecoded0:[Swift.String]? = nil
        if let subnetIdsContainer = subnetIdsContainer {
            subnetIdsDecoded0 = [Swift.String]()
            for string0 in subnetIdsContainer {
                if let string0 = string0 {
                    subnetIdsDecoded0?.append(string0)
                }
            }
        }
        subnetIds = subnetIdsDecoded0
        let securityGroupIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .securityGroupIds)
        var securityGroupIdsDecoded0:[Swift.String]? = nil
        if let securityGroupIdsContainer = securityGroupIdsContainer {
            securityGroupIdsDecoded0 = [Swift.String]()
            for string0 in securityGroupIdsContainer {
                if let string0 = string0 {
                    securityGroupIdsDecoded0?.append(string0)
                }
            }
        }
        securityGroupIds = securityGroupIdsDecoded0
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let storageConfigurationsContainer = try containerValues.decodeIfPresent([M2ClientTypes.StorageConfiguration?].self, forKey: .storageConfigurations)
        var storageConfigurationsDecoded0:[M2ClientTypes.StorageConfiguration]? = nil
        if let storageConfigurationsContainer = storageConfigurationsContainer {
            storageConfigurationsDecoded0 = [M2ClientTypes.StorageConfiguration]()
            for union0 in storageConfigurationsContainer {
                if let union0 = union0 {
                    storageConfigurationsDecoded0?.append(union0)
                }
            }
        }
        storageConfigurations = storageConfigurationsDecoded0
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
        let highAvailabilityConfigDecoded = try containerValues.decodeIfPresent(M2ClientTypes.HighAvailabilityConfig.self, forKey: .highAvailabilityConfig)
        highAvailabilityConfig = highAvailabilityConfigDecoded
        let publiclyAccessibleDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .publiclyAccessible) ?? false
        publiclyAccessible = publiclyAccessibleDecoded
        let actualCapacityDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .actualCapacity)
        actualCapacity = actualCapacityDecoded
        let loadBalancerArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .loadBalancerArn)
        loadBalancerArn = loadBalancerArnDecoded
        let statusReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .statusReason)
        statusReason = statusReasonDecoded
        let preferredMaintenanceWindowDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .preferredMaintenanceWindow)
        preferredMaintenanceWindow = preferredMaintenanceWindowDecoded
        let pendingMaintenanceDecoded = try containerValues.decodeIfPresent(M2ClientTypes.PendingMaintenance.self, forKey: .pendingMaintenance)
        pendingMaintenance = pendingMaintenanceDecoded
    }
}
