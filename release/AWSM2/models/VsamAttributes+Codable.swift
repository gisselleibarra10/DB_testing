// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension M2ClientTypes.VsamAttributes: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case alternateKeys
        case compressed
        case encoding
        case format
        case primaryKey
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let alternateKeys = alternateKeys {
            var alternateKeysContainer = encodeContainer.nestedUnkeyedContainer(forKey: .alternateKeys)
            for alternatekeylist0 in alternateKeys {
                try alternateKeysContainer.encode(alternatekeylist0)
            }
        }
        if compressed != false {
            try encodeContainer.encode(compressed, forKey: .compressed)
        }
        if let encoding = self.encoding {
            try encodeContainer.encode(encoding, forKey: .encoding)
        }
        if let format = self.format {
            try encodeContainer.encode(format, forKey: .format)
        }
        if let primaryKey = self.primaryKey {
            try encodeContainer.encode(primaryKey, forKey: .primaryKey)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let formatDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .format)
        format = formatDecoded
        let encodingDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .encoding)
        encoding = encodingDecoded
        let compressedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .compressed) ?? false
        compressed = compressedDecoded
        let primaryKeyDecoded = try containerValues.decodeIfPresent(M2ClientTypes.PrimaryKey.self, forKey: .primaryKey)
        primaryKey = primaryKeyDecoded
        let alternateKeysContainer = try containerValues.decodeIfPresent([M2ClientTypes.AlternateKey?].self, forKey: .alternateKeys)
        var alternateKeysDecoded0:[M2ClientTypes.AlternateKey]? = nil
        if let alternateKeysContainer = alternateKeysContainer {
            alternateKeysDecoded0 = [M2ClientTypes.AlternateKey]()
            for structure0 in alternateKeysContainer {
                if let structure0 = structure0 {
                    alternateKeysDecoded0?.append(structure0)
                }
            }
        }
        alternateKeys = alternateKeysDecoded0
    }
}
