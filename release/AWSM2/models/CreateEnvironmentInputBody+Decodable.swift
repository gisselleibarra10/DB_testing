// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateEnvironmentInputBody: Swift.Equatable {
    let name: Swift.String?
    let instanceType: Swift.String?
    let description: Swift.String?
    let engineType: M2ClientTypes.EngineType?
    let engineVersion: Swift.String?
    let subnetIds: [Swift.String]?
    let securityGroupIds: [Swift.String]?
    let storageConfigurations: [M2ClientTypes.StorageConfiguration]?
    let publiclyAccessible: Swift.Bool
    let highAvailabilityConfig: M2ClientTypes.HighAvailabilityConfig?
    let tags: [Swift.String:Swift.String]?
    let preferredMaintenanceWindow: Swift.String?
    let clientToken: Swift.String?
}

extension CreateEnvironmentInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientToken
        case description
        case engineType
        case engineVersion
        case highAvailabilityConfig
        case instanceType
        case name
        case preferredMaintenanceWindow
        case publiclyAccessible
        case securityGroupIds
        case storageConfigurations
        case subnetIds
        case tags
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let instanceTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceType)
        instanceType = instanceTypeDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let engineTypeDecoded = try containerValues.decodeIfPresent(M2ClientTypes.EngineType.self, forKey: .engineType)
        engineType = engineTypeDecoded
        let engineVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .engineVersion)
        engineVersion = engineVersionDecoded
        let subnetIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .subnetIds)
        var subnetIdsDecoded0:[Swift.String]? = nil
        if let subnetIdsContainer = subnetIdsContainer {
            subnetIdsDecoded0 = [Swift.String]()
            for string0 in subnetIdsContainer {
                if let string0 = string0 {
                    subnetIdsDecoded0?.append(string0)
                }
            }
        }
        subnetIds = subnetIdsDecoded0
        let securityGroupIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .securityGroupIds)
        var securityGroupIdsDecoded0:[Swift.String]? = nil
        if let securityGroupIdsContainer = securityGroupIdsContainer {
            securityGroupIdsDecoded0 = [Swift.String]()
            for string0 in securityGroupIdsContainer {
                if let string0 = string0 {
                    securityGroupIdsDecoded0?.append(string0)
                }
            }
        }
        securityGroupIds = securityGroupIdsDecoded0
        let storageConfigurationsContainer = try containerValues.decodeIfPresent([M2ClientTypes.StorageConfiguration?].self, forKey: .storageConfigurations)
        var storageConfigurationsDecoded0:[M2ClientTypes.StorageConfiguration]? = nil
        if let storageConfigurationsContainer = storageConfigurationsContainer {
            storageConfigurationsDecoded0 = [M2ClientTypes.StorageConfiguration]()
            for union0 in storageConfigurationsContainer {
                if let union0 = union0 {
                    storageConfigurationsDecoded0?.append(union0)
                }
            }
        }
        storageConfigurations = storageConfigurationsDecoded0
        let publiclyAccessibleDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .publiclyAccessible) ?? false
        publiclyAccessible = publiclyAccessibleDecoded
        let highAvailabilityConfigDecoded = try containerValues.decodeIfPresent(M2ClientTypes.HighAvailabilityConfig.self, forKey: .highAvailabilityConfig)
        highAvailabilityConfig = highAvailabilityConfigDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
        let preferredMaintenanceWindowDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .preferredMaintenanceWindow)
        preferredMaintenanceWindow = preferredMaintenanceWindowDecoded
        let clientTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientToken)
        clientToken = clientTokenDecoded
    }
}
