// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetApplicationOutputResponseBody: Swift.Equatable {
    let name: Swift.String?
    let description: Swift.String?
    let applicationId: Swift.String?
    let applicationArn: Swift.String?
    let status: M2ClientTypes.ApplicationLifecycle?
    let latestVersion: M2ClientTypes.ApplicationVersionSummary?
    let deployedVersion: M2ClientTypes.DeployedVersionSummary?
    let engineType: M2ClientTypes.EngineType?
    let logGroups: [M2ClientTypes.LogGroupSummary]?
    let creationTime: ClientRuntime.Date?
    let lastStartTime: ClientRuntime.Date?
    let tags: [Swift.String:Swift.String]?
    let environmentId: Swift.String?
    let targetGroupArns: [Swift.String]?
    let listenerArns: [Swift.String]?
    let listenerPorts: [Swift.Int]?
    let loadBalancerDnsName: Swift.String?
    let statusReason: Swift.String?
}

extension GetApplicationOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applicationArn
        case applicationId
        case creationTime
        case deployedVersion
        case description
        case engineType
        case environmentId
        case lastStartTime
        case latestVersion
        case listenerArns
        case listenerPorts
        case loadBalancerDnsName
        case logGroups
        case name
        case status
        case statusReason
        case tags
        case targetGroupArns
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let applicationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .applicationId)
        applicationId = applicationIdDecoded
        let applicationArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .applicationArn)
        applicationArn = applicationArnDecoded
        let statusDecoded = try containerValues.decodeIfPresent(M2ClientTypes.ApplicationLifecycle.self, forKey: .status)
        status = statusDecoded
        let latestVersionDecoded = try containerValues.decodeIfPresent(M2ClientTypes.ApplicationVersionSummary.self, forKey: .latestVersion)
        latestVersion = latestVersionDecoded
        let deployedVersionDecoded = try containerValues.decodeIfPresent(M2ClientTypes.DeployedVersionSummary.self, forKey: .deployedVersion)
        deployedVersion = deployedVersionDecoded
        let engineTypeDecoded = try containerValues.decodeIfPresent(M2ClientTypes.EngineType.self, forKey: .engineType)
        engineType = engineTypeDecoded
        let logGroupsContainer = try containerValues.decodeIfPresent([M2ClientTypes.LogGroupSummary?].self, forKey: .logGroups)
        var logGroupsDecoded0:[M2ClientTypes.LogGroupSummary]? = nil
        if let logGroupsContainer = logGroupsContainer {
            logGroupsDecoded0 = [M2ClientTypes.LogGroupSummary]()
            for structure0 in logGroupsContainer {
                if let structure0 = structure0 {
                    logGroupsDecoded0?.append(structure0)
                }
            }
        }
        logGroups = logGroupsDecoded0
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let lastStartTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastStartTime)
        lastStartTime = lastStartTimeDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
        let environmentIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .environmentId)
        environmentId = environmentIdDecoded
        let targetGroupArnsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .targetGroupArns)
        var targetGroupArnsDecoded0:[Swift.String]? = nil
        if let targetGroupArnsContainer = targetGroupArnsContainer {
            targetGroupArnsDecoded0 = [Swift.String]()
            for string0 in targetGroupArnsContainer {
                if let string0 = string0 {
                    targetGroupArnsDecoded0?.append(string0)
                }
            }
        }
        targetGroupArns = targetGroupArnsDecoded0
        let listenerArnsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .listenerArns)
        var listenerArnsDecoded0:[Swift.String]? = nil
        if let listenerArnsContainer = listenerArnsContainer {
            listenerArnsDecoded0 = [Swift.String]()
            for string0 in listenerArnsContainer {
                if let string0 = string0 {
                    listenerArnsDecoded0?.append(string0)
                }
            }
        }
        listenerArns = listenerArnsDecoded0
        let listenerPortsContainer = try containerValues.decodeIfPresent([Swift.Int?].self, forKey: .listenerPorts)
        var listenerPortsDecoded0:[Swift.Int]? = nil
        if let listenerPortsContainer = listenerPortsContainer {
            listenerPortsDecoded0 = [Swift.Int]()
            for integer0 in listenerPortsContainer {
                if let integer0 = integer0 {
                    listenerPortsDecoded0?.append(integer0)
                }
            }
        }
        listenerPorts = listenerPortsDecoded0
        let loadBalancerDnsNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .loadBalancerDnsName)
        loadBalancerDnsName = loadBalancerDnsNameDecoded
        let statusReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .statusReason)
        statusReason = statusReasonDecoded
    }
}
