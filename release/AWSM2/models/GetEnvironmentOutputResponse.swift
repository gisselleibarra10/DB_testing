// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct GetEnvironmentOutputResponse: Swift.Equatable {
    /// The number of instances included in the runtime environment. A standalone runtime environment has a maxiumum of one instance. Currently, a high availability runtime environment has a maximum of two instances.
    public var actualCapacity: Swift.Int?
    /// The timestamp when the runtime environment was created.
    /// This member is required.
    public var creationTime: ClientRuntime.Date?
    /// The description of the runtime environment.
    public var description: Swift.String?
    /// The target platform for the runtime environment.
    /// This member is required.
    public var engineType: M2ClientTypes.EngineType?
    /// The version of the runtime engine.
    /// This member is required.
    public var engineVersion: Swift.String?
    /// The Amazon Resource Name (ARN) of the runtime environment.
    /// This member is required.
    public var environmentArn: Swift.String?
    /// The unique identifier of the runtime environment.
    /// This member is required.
    public var environmentId: Swift.String?
    /// The desired capacity of the high availability configuration for the runtime environment.
    public var highAvailabilityConfig: M2ClientTypes.HighAvailabilityConfig?
    /// The type of instance underlying the runtime environment.
    /// This member is required.
    public var instanceType: Swift.String?
    /// The Amazon Resource Name (ARN) for the load balancer used with the runtime environment.
    public var loadBalancerArn: Swift.String?
    /// The name of the runtime environment.
    /// This member is required.
    public var name: Swift.String?
    /// Indicates the pending maintenance scheduled on this environment.
    public var pendingMaintenance: M2ClientTypes.PendingMaintenance?
    /// Configures a desired maintenance window for the environment. If you do not provide a value, a random system-generated value will be assigned.
    public var preferredMaintenanceWindow: Swift.String?
    /// Whether applications running in this runtime environment are publicly accessible.
    public var publiclyAccessible: Swift.Bool
    /// The unique identifiers of the security groups assigned to this runtime environment.
    /// This member is required.
    public var securityGroupIds: [Swift.String]?
    /// The status of the runtime environment.
    /// This member is required.
    public var status: M2ClientTypes.EnvironmentLifecycle?
    /// The reason for the reported status.
    public var statusReason: Swift.String?
    /// The storage configurations defined for the runtime environment.
    public var storageConfigurations: [M2ClientTypes.StorageConfiguration]?
    /// The unique identifiers of the subnets assigned to this runtime environment.
    /// This member is required.
    public var subnetIds: [Swift.String]?
    /// The tags defined for this runtime environment.
    public var tags: [Swift.String:Swift.String]?
    /// The unique identifier for the VPC used with this runtime environment.
    /// This member is required.
    public var vpcId: Swift.String?

    public init (
        actualCapacity: Swift.Int? = nil,
        creationTime: ClientRuntime.Date? = nil,
        description: Swift.String? = nil,
        engineType: M2ClientTypes.EngineType? = nil,
        engineVersion: Swift.String? = nil,
        environmentArn: Swift.String? = nil,
        environmentId: Swift.String? = nil,
        highAvailabilityConfig: M2ClientTypes.HighAvailabilityConfig? = nil,
        instanceType: Swift.String? = nil,
        loadBalancerArn: Swift.String? = nil,
        name: Swift.String? = nil,
        pendingMaintenance: M2ClientTypes.PendingMaintenance? = nil,
        preferredMaintenanceWindow: Swift.String? = nil,
        publiclyAccessible: Swift.Bool = false,
        securityGroupIds: [Swift.String]? = nil,
        status: M2ClientTypes.EnvironmentLifecycle? = nil,
        statusReason: Swift.String? = nil,
        storageConfigurations: [M2ClientTypes.StorageConfiguration]? = nil,
        subnetIds: [Swift.String]? = nil,
        tags: [Swift.String:Swift.String]? = nil,
        vpcId: Swift.String? = nil
    )
    {
        self.actualCapacity = actualCapacity
        self.creationTime = creationTime
        self.description = description
        self.engineType = engineType
        self.engineVersion = engineVersion
        self.environmentArn = environmentArn
        self.environmentId = environmentId
        self.highAvailabilityConfig = highAvailabilityConfig
        self.instanceType = instanceType
        self.loadBalancerArn = loadBalancerArn
        self.name = name
        self.pendingMaintenance = pendingMaintenance
        self.preferredMaintenanceWindow = preferredMaintenanceWindow
        self.publiclyAccessible = publiclyAccessible
        self.securityGroupIds = securityGroupIds
        self.status = status
        self.statusReason = statusReason
        self.storageConfigurations = storageConfigurations
        self.subnetIds = subnetIds
        self.tags = tags
        self.vpcId = vpcId
    }
}
