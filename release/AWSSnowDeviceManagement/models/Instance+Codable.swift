// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SnowDeviceManagementClientTypes.Instance: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case amiLaunchIndex
        case blockDeviceMappings
        case cpuOptions
        case createdAt
        case imageId
        case instanceId
        case instanceType
        case privateIpAddress
        case publicIpAddress
        case rootDeviceName
        case securityGroups
        case state
        case updatedAt
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let amiLaunchIndex = self.amiLaunchIndex {
            try encodeContainer.encode(amiLaunchIndex, forKey: .amiLaunchIndex)
        }
        if let blockDeviceMappings = blockDeviceMappings {
            var blockDeviceMappingsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .blockDeviceMappings)
            for instanceblockdevicemappinglist0 in blockDeviceMappings {
                try blockDeviceMappingsContainer.encode(instanceblockdevicemappinglist0)
            }
        }
        if let cpuOptions = self.cpuOptions {
            try encodeContainer.encode(cpuOptions, forKey: .cpuOptions)
        }
        if let createdAt = self.createdAt {
            try encodeContainer.encode(createdAt.timeIntervalSince1970, forKey: .createdAt)
        }
        if let imageId = self.imageId {
            try encodeContainer.encode(imageId, forKey: .imageId)
        }
        if let instanceId = self.instanceId {
            try encodeContainer.encode(instanceId, forKey: .instanceId)
        }
        if let instanceType = self.instanceType {
            try encodeContainer.encode(instanceType, forKey: .instanceType)
        }
        if let privateIpAddress = self.privateIpAddress {
            try encodeContainer.encode(privateIpAddress, forKey: .privateIpAddress)
        }
        if let publicIpAddress = self.publicIpAddress {
            try encodeContainer.encode(publicIpAddress, forKey: .publicIpAddress)
        }
        if let rootDeviceName = self.rootDeviceName {
            try encodeContainer.encode(rootDeviceName, forKey: .rootDeviceName)
        }
        if let securityGroups = securityGroups {
            var securityGroupsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .securityGroups)
            for securitygroupidentifierlist0 in securityGroups {
                try securityGroupsContainer.encode(securitygroupidentifierlist0)
            }
        }
        if let state = self.state {
            try encodeContainer.encode(state, forKey: .state)
        }
        if let updatedAt = self.updatedAt {
            try encodeContainer.encode(updatedAt.timeIntervalSince1970, forKey: .updatedAt)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let imageIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .imageId)
        imageId = imageIdDecoded
        let amiLaunchIndexDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .amiLaunchIndex)
        amiLaunchIndex = amiLaunchIndexDecoded
        let instanceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceId)
        instanceId = instanceIdDecoded
        let stateDecoded = try containerValues.decodeIfPresent(SnowDeviceManagementClientTypes.InstanceState.self, forKey: .state)
        state = stateDecoded
        let instanceTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceType)
        instanceType = instanceTypeDecoded
        let privateIpAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .privateIpAddress)
        privateIpAddress = privateIpAddressDecoded
        let publicIpAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .publicIpAddress)
        publicIpAddress = publicIpAddressDecoded
        let createdAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdAt)
        createdAt = createdAtDecoded
        let updatedAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .updatedAt)
        updatedAt = updatedAtDecoded
        let blockDeviceMappingsContainer = try containerValues.decodeIfPresent([SnowDeviceManagementClientTypes.InstanceBlockDeviceMapping?].self, forKey: .blockDeviceMappings)
        var blockDeviceMappingsDecoded0:[SnowDeviceManagementClientTypes.InstanceBlockDeviceMapping]? = nil
        if let blockDeviceMappingsContainer = blockDeviceMappingsContainer {
            blockDeviceMappingsDecoded0 = [SnowDeviceManagementClientTypes.InstanceBlockDeviceMapping]()
            for structure0 in blockDeviceMappingsContainer {
                if let structure0 = structure0 {
                    blockDeviceMappingsDecoded0?.append(structure0)
                }
            }
        }
        blockDeviceMappings = blockDeviceMappingsDecoded0
        let securityGroupsContainer = try containerValues.decodeIfPresent([SnowDeviceManagementClientTypes.SecurityGroupIdentifier?].self, forKey: .securityGroups)
        var securityGroupsDecoded0:[SnowDeviceManagementClientTypes.SecurityGroupIdentifier]? = nil
        if let securityGroupsContainer = securityGroupsContainer {
            securityGroupsDecoded0 = [SnowDeviceManagementClientTypes.SecurityGroupIdentifier]()
            for structure0 in securityGroupsContainer {
                if let structure0 = structure0 {
                    securityGroupsDecoded0?.append(structure0)
                }
            }
        }
        securityGroups = securityGroupsDecoded0
        let cpuOptionsDecoded = try containerValues.decodeIfPresent(SnowDeviceManagementClientTypes.CpuOptions.self, forKey: .cpuOptions)
        cpuOptions = cpuOptionsDecoded
        let rootDeviceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .rootDeviceName)
        rootDeviceName = rootDeviceNameDecoded
    }
}
