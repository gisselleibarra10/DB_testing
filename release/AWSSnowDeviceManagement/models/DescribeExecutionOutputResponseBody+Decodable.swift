// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeExecutionOutputResponseBody: Swift.Equatable {
    let taskId: Swift.String?
    let executionId: Swift.String?
    let managedDeviceId: Swift.String?
    let state: SnowDeviceManagementClientTypes.ExecutionState?
    let startedAt: ClientRuntime.Date?
    let lastUpdatedAt: ClientRuntime.Date?
}

extension DescribeExecutionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case executionId
        case lastUpdatedAt
        case managedDeviceId
        case startedAt
        case state
        case taskId
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let taskIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .taskId)
        taskId = taskIdDecoded
        let executionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .executionId)
        executionId = executionIdDecoded
        let managedDeviceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .managedDeviceId)
        managedDeviceId = managedDeviceIdDecoded
        let stateDecoded = try containerValues.decodeIfPresent(SnowDeviceManagementClientTypes.ExecutionState.self, forKey: .state)
        state = stateDecoded
        let startedAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .startedAt)
        startedAt = startedAtDecoded
        let lastUpdatedAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastUpdatedAt)
        lastUpdatedAt = lastUpdatedAtDecoded
    }
}
