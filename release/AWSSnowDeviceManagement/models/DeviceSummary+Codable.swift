// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SnowDeviceManagementClientTypes.DeviceSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case associatedWithJob
        case managedDeviceArn
        case managedDeviceId
        case tags
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let associatedWithJob = self.associatedWithJob {
            try encodeContainer.encode(associatedWithJob, forKey: .associatedWithJob)
        }
        if let managedDeviceArn = self.managedDeviceArn {
            try encodeContainer.encode(managedDeviceArn, forKey: .managedDeviceArn)
        }
        if let managedDeviceId = self.managedDeviceId {
            try encodeContainer.encode(managedDeviceId, forKey: .managedDeviceId)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, tagmap0) in tags {
                try tagsContainer.encode(tagmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let managedDeviceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .managedDeviceId)
        managedDeviceId = managedDeviceIdDecoded
        let managedDeviceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .managedDeviceArn)
        managedDeviceArn = managedDeviceArnDecoded
        let associatedWithJobDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .associatedWithJob)
        associatedWithJob = associatedWithJobDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, string0) in tagsContainer {
                if let string0 = string0 {
                    tagsDecoded0?[key0] = string0
                }
            }
        }
        tags = tagsDecoded0
    }
}
