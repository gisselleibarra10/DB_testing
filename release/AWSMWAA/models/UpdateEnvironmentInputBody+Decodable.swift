// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct UpdateEnvironmentInputBody: Swift.Equatable {
    let executionRoleArn: Swift.String?
    let airflowVersion: Swift.String?
    let sourceBucketArn: Swift.String?
    let dagS3Path: Swift.String?
    let pluginsS3Path: Swift.String?
    let pluginsS3ObjectVersion: Swift.String?
    let requirementsS3Path: Swift.String?
    let requirementsS3ObjectVersion: Swift.String?
    let airflowConfigurationOptions: [Swift.String:Swift.String]?
    let environmentClass: Swift.String?
    let maxWorkers: Swift.Int?
    let networkConfiguration: MwaaClientTypes.UpdateNetworkConfigurationInput?
    let loggingConfiguration: MwaaClientTypes.LoggingConfigurationInput?
    let weeklyMaintenanceWindowStart: Swift.String?
    let webserverAccessMode: MwaaClientTypes.WebserverAccessMode?
    let minWorkers: Swift.Int?
    let schedulers: Swift.Int?
}

extension UpdateEnvironmentInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case airflowConfigurationOptions = "AirflowConfigurationOptions"
        case airflowVersion = "AirflowVersion"
        case dagS3Path = "DagS3Path"
        case environmentClass = "EnvironmentClass"
        case executionRoleArn = "ExecutionRoleArn"
        case loggingConfiguration = "LoggingConfiguration"
        case maxWorkers = "MaxWorkers"
        case minWorkers = "MinWorkers"
        case networkConfiguration = "NetworkConfiguration"
        case pluginsS3ObjectVersion = "PluginsS3ObjectVersion"
        case pluginsS3Path = "PluginsS3Path"
        case requirementsS3ObjectVersion = "RequirementsS3ObjectVersion"
        case requirementsS3Path = "RequirementsS3Path"
        case schedulers = "Schedulers"
        case sourceBucketArn = "SourceBucketArn"
        case webserverAccessMode = "WebserverAccessMode"
        case weeklyMaintenanceWindowStart = "WeeklyMaintenanceWindowStart"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let executionRoleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .executionRoleArn)
        executionRoleArn = executionRoleArnDecoded
        let airflowVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .airflowVersion)
        airflowVersion = airflowVersionDecoded
        let sourceBucketArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceBucketArn)
        sourceBucketArn = sourceBucketArnDecoded
        let dagS3PathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dagS3Path)
        dagS3Path = dagS3PathDecoded
        let pluginsS3PathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pluginsS3Path)
        pluginsS3Path = pluginsS3PathDecoded
        let pluginsS3ObjectVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pluginsS3ObjectVersion)
        pluginsS3ObjectVersion = pluginsS3ObjectVersionDecoded
        let requirementsS3PathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .requirementsS3Path)
        requirementsS3Path = requirementsS3PathDecoded
        let requirementsS3ObjectVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .requirementsS3ObjectVersion)
        requirementsS3ObjectVersion = requirementsS3ObjectVersionDecoded
        let airflowConfigurationOptionsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .airflowConfigurationOptions)
        var airflowConfigurationOptionsDecoded0: [Swift.String:Swift.String]? = nil
        if let airflowConfigurationOptionsContainer = airflowConfigurationOptionsContainer {
            airflowConfigurationOptionsDecoded0 = [Swift.String:Swift.String]()
            for (key0, configvalue0) in airflowConfigurationOptionsContainer {
                if let configvalue0 = configvalue0 {
                    airflowConfigurationOptionsDecoded0?[key0] = configvalue0
                }
            }
        }
        airflowConfigurationOptions = airflowConfigurationOptionsDecoded0
        let environmentClassDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .environmentClass)
        environmentClass = environmentClassDecoded
        let maxWorkersDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxWorkers)
        maxWorkers = maxWorkersDecoded
        let networkConfigurationDecoded = try containerValues.decodeIfPresent(MwaaClientTypes.UpdateNetworkConfigurationInput.self, forKey: .networkConfiguration)
        networkConfiguration = networkConfigurationDecoded
        let loggingConfigurationDecoded = try containerValues.decodeIfPresent(MwaaClientTypes.LoggingConfigurationInput.self, forKey: .loggingConfiguration)
        loggingConfiguration = loggingConfigurationDecoded
        let weeklyMaintenanceWindowStartDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .weeklyMaintenanceWindowStart)
        weeklyMaintenanceWindowStart = weeklyMaintenanceWindowStartDecoded
        let webserverAccessModeDecoded = try containerValues.decodeIfPresent(MwaaClientTypes.WebserverAccessMode.self, forKey: .webserverAccessMode)
        webserverAccessMode = webserverAccessModeDecoded
        let minWorkersDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .minWorkers)
        minWorkers = minWorkersDecoded
        let schedulersDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .schedulers)
        schedulers = schedulersDecoded
    }
}
