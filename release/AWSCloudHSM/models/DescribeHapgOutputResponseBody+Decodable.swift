// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeHapgOutputResponseBody: Swift.Equatable {
    let hapgArn: Swift.String?
    let hapgSerial: Swift.String?
    let hsmsLastActionFailed: [Swift.String]?
    let hsmsPendingDeletion: [Swift.String]?
    let hsmsPendingRegistration: [Swift.String]?
    let label: Swift.String?
    let lastModifiedTimestamp: Swift.String?
    let partitionSerialList: [Swift.String]?
    let state: CloudHsmClientTypes.CloudHsmObjectState?
}

extension DescribeHapgOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case hapgArn = "HapgArn"
        case hapgSerial = "HapgSerial"
        case hsmsLastActionFailed = "HsmsLastActionFailed"
        case hsmsPendingDeletion = "HsmsPendingDeletion"
        case hsmsPendingRegistration = "HsmsPendingRegistration"
        case label = "Label"
        case lastModifiedTimestamp = "LastModifiedTimestamp"
        case partitionSerialList = "PartitionSerialList"
        case state = "State"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let hapgArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .hapgArn)
        hapgArn = hapgArnDecoded
        let hapgSerialDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .hapgSerial)
        hapgSerial = hapgSerialDecoded
        let hsmsLastActionFailedContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .hsmsLastActionFailed)
        var hsmsLastActionFailedDecoded0:[Swift.String]? = nil
        if let hsmsLastActionFailedContainer = hsmsLastActionFailedContainer {
            hsmsLastActionFailedDecoded0 = [Swift.String]()
            for string0 in hsmsLastActionFailedContainer {
                if let string0 = string0 {
                    hsmsLastActionFailedDecoded0?.append(string0)
                }
            }
        }
        hsmsLastActionFailed = hsmsLastActionFailedDecoded0
        let hsmsPendingDeletionContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .hsmsPendingDeletion)
        var hsmsPendingDeletionDecoded0:[Swift.String]? = nil
        if let hsmsPendingDeletionContainer = hsmsPendingDeletionContainer {
            hsmsPendingDeletionDecoded0 = [Swift.String]()
            for string0 in hsmsPendingDeletionContainer {
                if let string0 = string0 {
                    hsmsPendingDeletionDecoded0?.append(string0)
                }
            }
        }
        hsmsPendingDeletion = hsmsPendingDeletionDecoded0
        let hsmsPendingRegistrationContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .hsmsPendingRegistration)
        var hsmsPendingRegistrationDecoded0:[Swift.String]? = nil
        if let hsmsPendingRegistrationContainer = hsmsPendingRegistrationContainer {
            hsmsPendingRegistrationDecoded0 = [Swift.String]()
            for string0 in hsmsPendingRegistrationContainer {
                if let string0 = string0 {
                    hsmsPendingRegistrationDecoded0?.append(string0)
                }
            }
        }
        hsmsPendingRegistration = hsmsPendingRegistrationDecoded0
        let labelDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .label)
        label = labelDecoded
        let lastModifiedTimestampDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastModifiedTimestamp)
        lastModifiedTimestamp = lastModifiedTimestampDecoded
        let partitionSerialListContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .partitionSerialList)
        var partitionSerialListDecoded0:[Swift.String]? = nil
        if let partitionSerialListContainer = partitionSerialListContainer {
            partitionSerialListDecoded0 = [Swift.String]()
            for string0 in partitionSerialListContainer {
                if let string0 = string0 {
                    partitionSerialListDecoded0?.append(string0)
                }
            }
        }
        partitionSerialList = partitionSerialListDecoded0
        let stateDecoded = try containerValues.decodeIfPresent(CloudHsmClientTypes.CloudHsmObjectState.self, forKey: .state)
        state = stateDecoded
    }
}
