// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct AddPermissionInputBody: Swift.Equatable {
    let topicArn: Swift.String?
    let label: Swift.String?
    let aWSAccountId: [Swift.String]?
    let actionName: [Swift.String]?
}

extension AddPermissionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case aWSAccountId = "AWSAccountId"
        case actionName = "ActionName"
        case label = "Label"
        case topicArn = "TopicArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let topicArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .topicArn)
        topicArn = topicArnDecoded
        let labelDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .label)
        label = labelDecoded
        if containerValues.contains(.aWSAccountId) {
            struct KeyVal0{struct member{}}
            let aWSAccountIdWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .aWSAccountId)
            if let aWSAccountIdWrappedContainer = aWSAccountIdWrappedContainer {
                let aWSAccountIdContainer = try aWSAccountIdWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var aWSAccountIdBuffer:[Swift.String]? = nil
                if let aWSAccountIdContainer = aWSAccountIdContainer {
                    aWSAccountIdBuffer = [Swift.String]()
                    for stringContainer0 in aWSAccountIdContainer {
                        aWSAccountIdBuffer?.append(stringContainer0)
                    }
                }
                aWSAccountId = aWSAccountIdBuffer
            } else {
                aWSAccountId = []
            }
        } else {
            aWSAccountId = nil
        }
        if containerValues.contains(.actionName) {
            struct KeyVal0{struct member{}}
            let actionNameWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .actionName)
            if let actionNameWrappedContainer = actionNameWrappedContainer {
                let actionNameContainer = try actionNameWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var actionNameBuffer:[Swift.String]? = nil
                if let actionNameContainer = actionNameContainer {
                    actionNameBuffer = [Swift.String]()
                    for stringContainer0 in actionNameContainer {
                        actionNameBuffer?.append(stringContainer0)
                    }
                }
                actionName = actionNameBuffer
            } else {
                actionName = []
            }
        } else {
            actionName = nil
        }
    }
}
