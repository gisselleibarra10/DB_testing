// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListTopicsOutputResponseBody: Swift.Equatable {
    let topics: [SnsClientTypes.Topic]?
    let nextToken: Swift.String?
}

extension ListTopicsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case topics = "Topics"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("ListTopicsResult"))
        if containerValues.contains(.topics) {
            struct KeyVal0{struct member{}}
            let topicsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .topics)
            if let topicsWrappedContainer = topicsWrappedContainer {
                let topicsContainer = try topicsWrappedContainer.decodeIfPresent([SnsClientTypes.Topic].self, forKey: .member)
                var topicsBuffer:[SnsClientTypes.Topic]? = nil
                if let topicsContainer = topicsContainer {
                    topicsBuffer = [SnsClientTypes.Topic]()
                    for structureContainer0 in topicsContainer {
                        topicsBuffer?.append(structureContainer0)
                    }
                }
                topics = topicsBuffer
            } else {
                topics = []
            }
        } else {
            topics = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
