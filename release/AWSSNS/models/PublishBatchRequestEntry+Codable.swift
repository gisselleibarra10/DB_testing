// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SnsClientTypes.PublishBatchRequestEntry: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case id = "Id"
        case message = "Message"
        case messageAttributes = "MessageAttributes"
        case messageDeduplicationId = "MessageDeduplicationId"
        case messageGroupId = "MessageGroupId"
        case messageStructure = "MessageStructure"
        case subject = "Subject"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let id = id {
            try container.encode(id, forKey: ClientRuntime.Key("Id"))
        }
        if let message = message {
            try container.encode(message, forKey: ClientRuntime.Key("Message"))
        }
        if let messageAttributes = messageAttributes {
            var messageAttributesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("MessageAttributes"))
            for (index0, element0) in messageAttributes.sorted(by: { $0.key < $1.key }).enumerated() {
                let stringKey0 = element0.key
                let messageattributevalueValue0 = element0.value
                var entryContainer0 = messageAttributesContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("entry.\(index0.advanced(by: 1))"))
                var keyContainer0 = entryContainer0.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Name"))
                try keyContainer0.encode(stringKey0, forKey: ClientRuntime.Key(""))
                var valueContainer0 = entryContainer0.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Value"))
                try valueContainer0.encode(messageattributevalueValue0, forKey: ClientRuntime.Key(""))
            }
        }
        if let messageDeduplicationId = messageDeduplicationId {
            try container.encode(messageDeduplicationId, forKey: ClientRuntime.Key("MessageDeduplicationId"))
        }
        if let messageGroupId = messageGroupId {
            try container.encode(messageGroupId, forKey: ClientRuntime.Key("MessageGroupId"))
        }
        if let messageStructure = messageStructure {
            try container.encode(messageStructure, forKey: ClientRuntime.Key("MessageStructure"))
        }
        if let subject = subject {
            try container.encode(subject, forKey: ClientRuntime.Key("Subject"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let subjectDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .subject)
        subject = subjectDecoded
        let messageStructureDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .messageStructure)
        messageStructure = messageStructureDecoded
        if containerValues.contains(.messageAttributes) {
            struct KeyVal0{struct Name{}; struct Value{}}
            let messageAttributesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: ClientRuntime.MapEntry<Swift.String, SnsClientTypes.MessageAttributeValue, KeyVal0.Name, KeyVal0.Value>.CodingKeys.self, forKey: .messageAttributes)
            if let messageAttributesWrappedContainer = messageAttributesWrappedContainer {
                let messageAttributesContainer = try messageAttributesWrappedContainer.decodeIfPresent([ClientRuntime.MapKeyValue<Swift.String, SnsClientTypes.MessageAttributeValue, KeyVal0.Name, KeyVal0.Value>].self, forKey: .entry)
                var messageAttributesBuffer: [Swift.String:SnsClientTypes.MessageAttributeValue]? = nil
                if let messageAttributesContainer = messageAttributesContainer {
                    messageAttributesBuffer = [Swift.String:SnsClientTypes.MessageAttributeValue]()
                    for structureContainer0 in messageAttributesContainer {
                        messageAttributesBuffer?[structureContainer0.key] = structureContainer0.value
                    }
                }
                messageAttributes = messageAttributesBuffer
            } else {
                messageAttributes = [:]
            }
        } else {
            messageAttributes = nil
        }
        let messageDeduplicationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .messageDeduplicationId)
        messageDeduplicationId = messageDeduplicationIdDecoded
        let messageGroupIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .messageGroupId)
        messageGroupId = messageGroupIdDecoded
    }
}
