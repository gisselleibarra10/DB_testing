// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct SubscribeInputBody: Swift.Equatable {
    let topicArn: Swift.String?
    let `protocol`: Swift.String?
    let endpoint: Swift.String?
    let attributes: [Swift.String:Swift.String]?
    let returnSubscriptionArn: Swift.Bool
}

extension SubscribeInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attributes = "Attributes"
        case endpoint = "Endpoint"
        case `protocol` = "Protocol"
        case returnSubscriptionArn = "ReturnSubscriptionArn"
        case topicArn = "TopicArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let topicArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .topicArn)
        topicArn = topicArnDecoded
        let protocolDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .protocol)
        `protocol` = protocolDecoded
        let endpointDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .endpoint)
        endpoint = endpointDecoded
        if containerValues.contains(.attributes) {
            struct KeyVal0{struct key{}; struct value{}}
            let attributesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: ClientRuntime.MapEntry<Swift.String, Swift.String, KeyVal0.key, KeyVal0.value>.CodingKeys.self, forKey: .attributes)
            if let attributesWrappedContainer = attributesWrappedContainer {
                let attributesContainer = try attributesWrappedContainer.decodeIfPresent([ClientRuntime.MapKeyValue<Swift.String, Swift.String, KeyVal0.key, KeyVal0.value>].self, forKey: .entry)
                var attributesBuffer: [Swift.String:Swift.String]? = nil
                if let attributesContainer = attributesContainer {
                    attributesBuffer = [Swift.String:Swift.String]()
                    for stringContainer0 in attributesContainer {
                        attributesBuffer?[stringContainer0.key] = stringContainer0.value
                    }
                }
                attributes = attributesBuffer
            } else {
                attributes = [:]
            }
        } else {
            attributes = nil
        }
        let returnSubscriptionArnDecoded = try containerValues.decode(Swift.Bool.self, forKey: .returnSubscriptionArn)
        returnSubscriptionArn = returnSubscriptionArnDecoded
    }
}
