// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct PublishInputBody: Swift.Equatable {
    let topicArn: Swift.String?
    let targetArn: Swift.String?
    let phoneNumber: Swift.String?
    let message: Swift.String?
    let subject: Swift.String?
    let messageStructure: Swift.String?
    let messageAttributes: [Swift.String:SnsClientTypes.MessageAttributeValue]?
    let messageDeduplicationId: Swift.String?
    let messageGroupId: Swift.String?
}

extension PublishInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
        case messageAttributes = "MessageAttributes"
        case messageDeduplicationId = "MessageDeduplicationId"
        case messageGroupId = "MessageGroupId"
        case messageStructure = "MessageStructure"
        case phoneNumber = "PhoneNumber"
        case subject = "Subject"
        case targetArn = "TargetArn"
        case topicArn = "TopicArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let topicArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .topicArn)
        topicArn = topicArnDecoded
        let targetArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .targetArn)
        targetArn = targetArnDecoded
        let phoneNumberDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .phoneNumber)
        phoneNumber = phoneNumberDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let subjectDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .subject)
        subject = subjectDecoded
        let messageStructureDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .messageStructure)
        messageStructure = messageStructureDecoded
        if containerValues.contains(.messageAttributes) {
            struct KeyVal0{struct Name{}; struct Value{}}
            let messageAttributesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: ClientRuntime.MapEntry<Swift.String, SnsClientTypes.MessageAttributeValue, KeyVal0.Name, KeyVal0.Value>.CodingKeys.self, forKey: .messageAttributes)
            if let messageAttributesWrappedContainer = messageAttributesWrappedContainer {
                let messageAttributesContainer = try messageAttributesWrappedContainer.decodeIfPresent([ClientRuntime.MapKeyValue<Swift.String, SnsClientTypes.MessageAttributeValue, KeyVal0.Name, KeyVal0.Value>].self, forKey: .entry)
                var messageAttributesBuffer: [Swift.String:SnsClientTypes.MessageAttributeValue]? = nil
                if let messageAttributesContainer = messageAttributesContainer {
                    messageAttributesBuffer = [Swift.String:SnsClientTypes.MessageAttributeValue]()
                    for structureContainer0 in messageAttributesContainer {
                        messageAttributesBuffer?[structureContainer0.key] = structureContainer0.value
                    }
                }
                messageAttributes = messageAttributesBuffer
            } else {
                messageAttributes = [:]
            }
        } else {
            messageAttributes = nil
        }
        let messageDeduplicationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .messageDeduplicationId)
        messageDeduplicationId = messageDeduplicationIdDecoded
        let messageGroupIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .messageGroupId)
        messageGroupId = messageGroupIdDecoded
    }
}
