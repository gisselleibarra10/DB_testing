// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct GenerateMacInput: Swift.Equatable {
    /// A list of grant tokens. Use a grant token when your permission to call this operation comes from a new grant that has not yet achieved eventual consistency. For more information, see [Grant token](https://docs.aws.amazon.com/kms/latest/developerguide/grants.html#grant_token) and [Using a grant token](https://docs.aws.amazon.com/kms/latest/developerguide/grant-manage.html#using-grant-token) in the Key Management Service Developer Guide.
    public var grantTokens: [Swift.String]?
    /// The HMAC KMS key to use in the operation. The MAC algorithm computes the HMAC for the message and the key as described in [RFC 2104](https://datatracker.ietf.org/doc/html/rfc2104). To identify an HMAC KMS key, use the [DescribeKey] operation and see the KeySpec field in the response.
    /// This member is required.
    public var keyId: Swift.String?
    /// The MAC algorithm used in the operation. The algorithm must be compatible with the HMAC KMS key that you specify. To find the MAC algorithms that your HMAC KMS key supports, use the [DescribeKey] operation and see the MacAlgorithms field in the DescribeKey response.
    /// This member is required.
    public var macAlgorithm: KmsClientTypes.MacAlgorithmSpec?
    /// The message to be hashed. Specify a message of up to 4,096 bytes. GenerateMac and [VerifyMac] do not provide special handling for message digests. If you generate an HMAC for a hash digest of a message, you must verify the HMAC of the same hash digest.
    /// This member is required.
    public var message: ClientRuntime.Data?

    public init (
        grantTokens: [Swift.String]? = nil,
        keyId: Swift.String? = nil,
        macAlgorithm: KmsClientTypes.MacAlgorithmSpec? = nil,
        message: ClientRuntime.Data? = nil
    )
    {
        self.grantTokens = grantTokens
        self.keyId = keyId
        self.macAlgorithm = macAlgorithm
        self.message = message
    }
}
