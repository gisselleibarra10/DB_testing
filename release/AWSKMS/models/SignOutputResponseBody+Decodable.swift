// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct SignOutputResponseBody: Swift.Equatable {
    let keyId: Swift.String?
    let signature: ClientRuntime.Data?
    let signingAlgorithm: KmsClientTypes.SigningAlgorithmSpec?
}

extension SignOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case keyId = "KeyId"
        case signature = "Signature"
        case signingAlgorithm = "SigningAlgorithm"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyId)
        keyId = keyIdDecoded
        let signatureDecoded = try containerValues.decodeIfPresent(ClientRuntime.Data.self, forKey: .signature)
        signature = signatureDecoded
        let signingAlgorithmDecoded = try containerValues.decodeIfPresent(KmsClientTypes.SigningAlgorithmSpec.self, forKey: .signingAlgorithm)
        signingAlgorithm = signingAlgorithmDecoded
    }
}
