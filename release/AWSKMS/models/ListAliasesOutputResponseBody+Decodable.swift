// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListAliasesOutputResponseBody: Swift.Equatable {
    let aliases: [KmsClientTypes.AliasListEntry]?
    let nextMarker: Swift.String?
    let truncated: Swift.Bool
}

extension ListAliasesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case aliases = "Aliases"
        case nextMarker = "NextMarker"
        case truncated = "Truncated"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let aliasesContainer = try containerValues.decodeIfPresent([KmsClientTypes.AliasListEntry?].self, forKey: .aliases)
        var aliasesDecoded0:[KmsClientTypes.AliasListEntry]? = nil
        if let aliasesContainer = aliasesContainer {
            aliasesDecoded0 = [KmsClientTypes.AliasListEntry]()
            for structure0 in aliasesContainer {
                if let structure0 = structure0 {
                    aliasesDecoded0?.append(structure0)
                }
            }
        }
        aliases = aliasesDecoded0
        let nextMarkerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextMarker)
        nextMarker = nextMarkerDecoded
        let truncatedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .truncated) ?? false
        truncated = truncatedDecoded
    }
}
