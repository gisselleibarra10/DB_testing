// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension KmsClientTypes.MultiRegionConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case multiRegionKeyType = "MultiRegionKeyType"
        case primaryKey = "PrimaryKey"
        case replicaKeys = "ReplicaKeys"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let multiRegionKeyType = self.multiRegionKeyType {
            try encodeContainer.encode(multiRegionKeyType.rawValue, forKey: .multiRegionKeyType)
        }
        if let primaryKey = self.primaryKey {
            try encodeContainer.encode(primaryKey, forKey: .primaryKey)
        }
        if let replicaKeys = replicaKeys {
            var replicaKeysContainer = encodeContainer.nestedUnkeyedContainer(forKey: .replicaKeys)
            for multiregionkeylist0 in replicaKeys {
                try replicaKeysContainer.encode(multiregionkeylist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let multiRegionKeyTypeDecoded = try containerValues.decodeIfPresent(KmsClientTypes.MultiRegionKeyType.self, forKey: .multiRegionKeyType)
        multiRegionKeyType = multiRegionKeyTypeDecoded
        let primaryKeyDecoded = try containerValues.decodeIfPresent(KmsClientTypes.MultiRegionKey.self, forKey: .primaryKey)
        primaryKey = primaryKeyDecoded
        let replicaKeysContainer = try containerValues.decodeIfPresent([KmsClientTypes.MultiRegionKey?].self, forKey: .replicaKeys)
        var replicaKeysDecoded0:[KmsClientTypes.MultiRegionKey]? = nil
        if let replicaKeysContainer = replicaKeysContainer {
            replicaKeysDecoded0 = [KmsClientTypes.MultiRegionKey]()
            for structure0 in replicaKeysContainer {
                if let structure0 = structure0 {
                    replicaKeysDecoded0?.append(structure0)
                }
            }
        }
        replicaKeys = replicaKeysDecoded0
    }
}
