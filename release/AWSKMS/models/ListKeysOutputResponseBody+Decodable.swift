// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListKeysOutputResponseBody: Swift.Equatable {
    let keys: [KmsClientTypes.KeyListEntry]?
    let nextMarker: Swift.String?
    let truncated: Swift.Bool
}

extension ListKeysOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case keys = "Keys"
        case nextMarker = "NextMarker"
        case truncated = "Truncated"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keysContainer = try containerValues.decodeIfPresent([KmsClientTypes.KeyListEntry?].self, forKey: .keys)
        var keysDecoded0:[KmsClientTypes.KeyListEntry]? = nil
        if let keysContainer = keysContainer {
            keysDecoded0 = [KmsClientTypes.KeyListEntry]()
            for structure0 in keysContainer {
                if let structure0 = structure0 {
                    keysDecoded0?.append(structure0)
                }
            }
        }
        keys = keysDecoded0
        let nextMarkerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextMarker)
        nextMarker = nextMarkerDecoded
        let truncatedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .truncated) ?? false
        truncated = truncatedDecoded
    }
}
