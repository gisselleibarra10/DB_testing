// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ReplicateKeyInputBody: Swift.Equatable {
    let keyId: Swift.String?
    let replicaRegion: Swift.String?
    let policy: Swift.String?
    let bypassPolicyLockoutSafetyCheck: Swift.Bool
    let description: Swift.String?
    let tags: [KmsClientTypes.Tag]?
}

extension ReplicateKeyInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bypassPolicyLockoutSafetyCheck = "BypassPolicyLockoutSafetyCheck"
        case description = "Description"
        case keyId = "KeyId"
        case policy = "Policy"
        case replicaRegion = "ReplicaRegion"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyId)
        keyId = keyIdDecoded
        let replicaRegionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .replicaRegion)
        replicaRegion = replicaRegionDecoded
        let policyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policy)
        policy = policyDecoded
        let bypassPolicyLockoutSafetyCheckDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .bypassPolicyLockoutSafetyCheck) ?? false
        bypassPolicyLockoutSafetyCheck = bypassPolicyLockoutSafetyCheckDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let tagsContainer = try containerValues.decodeIfPresent([KmsClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[KmsClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [KmsClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}
