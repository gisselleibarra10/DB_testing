// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension GenerateDataKeyPairWithoutPlaintextInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case encryptionContext = "EncryptionContext"
        case grantTokens = "GrantTokens"
        case keyId = "KeyId"
        case keyPairSpec = "KeyPairSpec"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let encryptionContext = encryptionContext {
            var encryptionContextContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .encryptionContext)
            for (dictKey0, encryptioncontexttype0) in encryptionContext {
                try encryptionContextContainer.encode(encryptioncontexttype0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let grantTokens = grantTokens {
            var grantTokensContainer = encodeContainer.nestedUnkeyedContainer(forKey: .grantTokens)
            for granttokenlist0 in grantTokens {
                try grantTokensContainer.encode(granttokenlist0)
            }
        }
        if let keyId = self.keyId {
            try encodeContainer.encode(keyId, forKey: .keyId)
        }
        if let keyPairSpec = self.keyPairSpec {
            try encodeContainer.encode(keyPairSpec.rawValue, forKey: .keyPairSpec)
        }
    }
}
