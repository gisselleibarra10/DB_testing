// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ImportKeyMaterialInputBody: Swift.Equatable {
    let keyId: Swift.String?
    let importToken: ClientRuntime.Data?
    let encryptedKeyMaterial: ClientRuntime.Data?
    let validTo: ClientRuntime.Date?
    let expirationModel: KmsClientTypes.ExpirationModelType?
}

extension ImportKeyMaterialInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case encryptedKeyMaterial = "EncryptedKeyMaterial"
        case expirationModel = "ExpirationModel"
        case importToken = "ImportToken"
        case keyId = "KeyId"
        case validTo = "ValidTo"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyId)
        keyId = keyIdDecoded
        let importTokenDecoded = try containerValues.decodeIfPresent(ClientRuntime.Data.self, forKey: .importToken)
        importToken = importTokenDecoded
        let encryptedKeyMaterialDecoded = try containerValues.decodeIfPresent(ClientRuntime.Data.self, forKey: .encryptedKeyMaterial)
        encryptedKeyMaterial = encryptedKeyMaterialDecoded
        let validToDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .validTo)
        validTo = validToDecoded
        let expirationModelDecoded = try containerValues.decodeIfPresent(KmsClientTypes.ExpirationModelType.self, forKey: .expirationModel)
        expirationModel = expirationModelDecoded
    }
}
