// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GenerateDataKeyPairInputBody: Swift.Equatable {
    let encryptionContext: [Swift.String:Swift.String]?
    let keyId: Swift.String?
    let keyPairSpec: KmsClientTypes.DataKeyPairSpec?
    let grantTokens: [Swift.String]?
}

extension GenerateDataKeyPairInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case encryptionContext = "EncryptionContext"
        case grantTokens = "GrantTokens"
        case keyId = "KeyId"
        case keyPairSpec = "KeyPairSpec"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let encryptionContextContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .encryptionContext)
        var encryptionContextDecoded0: [Swift.String:Swift.String]? = nil
        if let encryptionContextContainer = encryptionContextContainer {
            encryptionContextDecoded0 = [Swift.String:Swift.String]()
            for (key0, encryptioncontextvalue0) in encryptionContextContainer {
                if let encryptioncontextvalue0 = encryptioncontextvalue0 {
                    encryptionContextDecoded0?[key0] = encryptioncontextvalue0
                }
            }
        }
        encryptionContext = encryptionContextDecoded0
        let keyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyId)
        keyId = keyIdDecoded
        let keyPairSpecDecoded = try containerValues.decodeIfPresent(KmsClientTypes.DataKeyPairSpec.self, forKey: .keyPairSpec)
        keyPairSpec = keyPairSpecDecoded
        let grantTokensContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .grantTokens)
        var grantTokensDecoded0:[Swift.String]? = nil
        if let grantTokensContainer = grantTokensContainer {
            grantTokensDecoded0 = [Swift.String]()
            for string0 in grantTokensContainer {
                if let string0 = string0 {
                    grantTokensDecoded0?.append(string0)
                }
            }
        }
        grantTokens = grantTokensDecoded0
    }
}
