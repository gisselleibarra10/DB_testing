// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct VerifyInputBody: Swift.Equatable {
    let keyId: Swift.String?
    let message: ClientRuntime.Data?
    let messageType: KmsClientTypes.MessageType?
    let signature: ClientRuntime.Data?
    let signingAlgorithm: KmsClientTypes.SigningAlgorithmSpec?
    let grantTokens: [Swift.String]?
}

extension VerifyInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case grantTokens = "GrantTokens"
        case keyId = "KeyId"
        case message = "Message"
        case messageType = "MessageType"
        case signature = "Signature"
        case signingAlgorithm = "SigningAlgorithm"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyId)
        keyId = keyIdDecoded
        let messageDecoded = try containerValues.decodeIfPresent(ClientRuntime.Data.self, forKey: .message)
        message = messageDecoded
        let messageTypeDecoded = try containerValues.decodeIfPresent(KmsClientTypes.MessageType.self, forKey: .messageType)
        messageType = messageTypeDecoded
        let signatureDecoded = try containerValues.decodeIfPresent(ClientRuntime.Data.self, forKey: .signature)
        signature = signatureDecoded
        let signingAlgorithmDecoded = try containerValues.decodeIfPresent(KmsClientTypes.SigningAlgorithmSpec.self, forKey: .signingAlgorithm)
        signingAlgorithm = signingAlgorithmDecoded
        let grantTokensContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .grantTokens)
        var grantTokensDecoded0:[Swift.String]? = nil
        if let grantTokensContainer = grantTokensContainer {
            grantTokensDecoded0 = [Swift.String]()
            for string0 in grantTokensContainer {
                if let string0 = string0 {
                    grantTokensDecoded0?.append(string0)
                }
            }
        }
        grantTokens = grantTokensDecoded0
    }
}
