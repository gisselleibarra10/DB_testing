// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension KmsClientTypes {
    public enum ConnectionErrorCodeType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case clusterNotFound
        case insufficientCloudhsmHsms
        case insufficientFreeAddressesInSubnet
        case internalError
        case invalidCredentials
        case networkErrors
        case subnetNotFound
        case userLockedOut
        case userLoggedIn
        case userNotFound
        case sdkUnknown(Swift.String)

        public static var allCases: [ConnectionErrorCodeType] {
            return [
                .clusterNotFound,
                .insufficientCloudhsmHsms,
                .insufficientFreeAddressesInSubnet,
                .internalError,
                .invalidCredentials,
                .networkErrors,
                .subnetNotFound,
                .userLockedOut,
                .userLoggedIn,
                .userNotFound,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .clusterNotFound: return "CLUSTER_NOT_FOUND"
            case .insufficientCloudhsmHsms: return "INSUFFICIENT_CLOUDHSM_HSMS"
            case .insufficientFreeAddressesInSubnet: return "INSUFFICIENT_FREE_ADDRESSES_IN_SUBNET"
            case .internalError: return "INTERNAL_ERROR"
            case .invalidCredentials: return "INVALID_CREDENTIALS"
            case .networkErrors: return "NETWORK_ERRORS"
            case .subnetNotFound: return "SUBNET_NOT_FOUND"
            case .userLockedOut: return "USER_LOCKED_OUT"
            case .userLoggedIn: return "USER_LOGGED_IN"
            case .userNotFound: return "USER_NOT_FOUND"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ConnectionErrorCodeType(rawValue: rawValue) ?? ConnectionErrorCodeType.sdkUnknown(rawValue)
        }
    }
}
