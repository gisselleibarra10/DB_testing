// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetPublicKeyOutputResponseBody: Swift.Equatable {
    let keyId: Swift.String?
    let publicKey: ClientRuntime.Data?
    let customerMasterKeySpec: KmsClientTypes.CustomerMasterKeySpec?
    let keySpec: KmsClientTypes.KeySpec?
    let keyUsage: KmsClientTypes.KeyUsageType?
    let encryptionAlgorithms: [KmsClientTypes.EncryptionAlgorithmSpec]?
    let signingAlgorithms: [KmsClientTypes.SigningAlgorithmSpec]?
}

extension GetPublicKeyOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case customerMasterKeySpec = "CustomerMasterKeySpec"
        case encryptionAlgorithms = "EncryptionAlgorithms"
        case keyId = "KeyId"
        case keySpec = "KeySpec"
        case keyUsage = "KeyUsage"
        case publicKey = "PublicKey"
        case signingAlgorithms = "SigningAlgorithms"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyId)
        keyId = keyIdDecoded
        let publicKeyDecoded = try containerValues.decodeIfPresent(ClientRuntime.Data.self, forKey: .publicKey)
        publicKey = publicKeyDecoded
        let customerMasterKeySpecDecoded = try containerValues.decodeIfPresent(KmsClientTypes.CustomerMasterKeySpec.self, forKey: .customerMasterKeySpec)
        customerMasterKeySpec = customerMasterKeySpecDecoded
        let keySpecDecoded = try containerValues.decodeIfPresent(KmsClientTypes.KeySpec.self, forKey: .keySpec)
        keySpec = keySpecDecoded
        let keyUsageDecoded = try containerValues.decodeIfPresent(KmsClientTypes.KeyUsageType.self, forKey: .keyUsage)
        keyUsage = keyUsageDecoded
        let encryptionAlgorithmsContainer = try containerValues.decodeIfPresent([KmsClientTypes.EncryptionAlgorithmSpec?].self, forKey: .encryptionAlgorithms)
        var encryptionAlgorithmsDecoded0:[KmsClientTypes.EncryptionAlgorithmSpec]? = nil
        if let encryptionAlgorithmsContainer = encryptionAlgorithmsContainer {
            encryptionAlgorithmsDecoded0 = [KmsClientTypes.EncryptionAlgorithmSpec]()
            for string0 in encryptionAlgorithmsContainer {
                if let string0 = string0 {
                    encryptionAlgorithmsDecoded0?.append(string0)
                }
            }
        }
        encryptionAlgorithms = encryptionAlgorithmsDecoded0
        let signingAlgorithmsContainer = try containerValues.decodeIfPresent([KmsClientTypes.SigningAlgorithmSpec?].self, forKey: .signingAlgorithms)
        var signingAlgorithmsDecoded0:[KmsClientTypes.SigningAlgorithmSpec]? = nil
        if let signingAlgorithmsContainer = signingAlgorithmsContainer {
            signingAlgorithmsDecoded0 = [KmsClientTypes.SigningAlgorithmSpec]()
            for string0 in signingAlgorithmsContainer {
                if let string0 = string0 {
                    signingAlgorithmsDecoded0?.append(string0)
                }
            }
        }
        signingAlgorithms = signingAlgorithmsDecoded0
    }
}
