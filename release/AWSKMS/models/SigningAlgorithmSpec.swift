// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension KmsClientTypes {
    public enum SigningAlgorithmSpec: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case ecdsaSha256
        case ecdsaSha384
        case ecdsaSha512
        case rsassaPkcs1V15Sha256
        case rsassaPkcs1V15Sha384
        case rsassaPkcs1V15Sha512
        case rsassaPssSha256
        case rsassaPssSha384
        case rsassaPssSha512
        case sm2dsa
        case sdkUnknown(Swift.String)

        public static var allCases: [SigningAlgorithmSpec] {
            return [
                .ecdsaSha256,
                .ecdsaSha384,
                .ecdsaSha512,
                .rsassaPkcs1V15Sha256,
                .rsassaPkcs1V15Sha384,
                .rsassaPkcs1V15Sha512,
                .rsassaPssSha256,
                .rsassaPssSha384,
                .rsassaPssSha512,
                .sm2dsa,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .ecdsaSha256: return "ECDSA_SHA_256"
            case .ecdsaSha384: return "ECDSA_SHA_384"
            case .ecdsaSha512: return "ECDSA_SHA_512"
            case .rsassaPkcs1V15Sha256: return "RSASSA_PKCS1_V1_5_SHA_256"
            case .rsassaPkcs1V15Sha384: return "RSASSA_PKCS1_V1_5_SHA_384"
            case .rsassaPkcs1V15Sha512: return "RSASSA_PKCS1_V1_5_SHA_512"
            case .rsassaPssSha256: return "RSASSA_PSS_SHA_256"
            case .rsassaPssSha384: return "RSASSA_PSS_SHA_384"
            case .rsassaPssSha512: return "RSASSA_PSS_SHA_512"
            case .sm2dsa: return "SM2DSA"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = SigningAlgorithmSpec(rawValue: rawValue) ?? SigningAlgorithmSpec.sdkUnknown(rawValue)
        }
    }
}
