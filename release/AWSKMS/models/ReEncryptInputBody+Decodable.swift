// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ReEncryptInputBody: Swift.Equatable {
    let ciphertextBlob: ClientRuntime.Data?
    let sourceEncryptionContext: [Swift.String:Swift.String]?
    let sourceKeyId: Swift.String?
    let destinationKeyId: Swift.String?
    let destinationEncryptionContext: [Swift.String:Swift.String]?
    let sourceEncryptionAlgorithm: KmsClientTypes.EncryptionAlgorithmSpec?
    let destinationEncryptionAlgorithm: KmsClientTypes.EncryptionAlgorithmSpec?
    let grantTokens: [Swift.String]?
}

extension ReEncryptInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case ciphertextBlob = "CiphertextBlob"
        case destinationEncryptionAlgorithm = "DestinationEncryptionAlgorithm"
        case destinationEncryptionContext = "DestinationEncryptionContext"
        case destinationKeyId = "DestinationKeyId"
        case grantTokens = "GrantTokens"
        case sourceEncryptionAlgorithm = "SourceEncryptionAlgorithm"
        case sourceEncryptionContext = "SourceEncryptionContext"
        case sourceKeyId = "SourceKeyId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ciphertextBlobDecoded = try containerValues.decodeIfPresent(ClientRuntime.Data.self, forKey: .ciphertextBlob)
        ciphertextBlob = ciphertextBlobDecoded
        let sourceEncryptionContextContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .sourceEncryptionContext)
        var sourceEncryptionContextDecoded0: [Swift.String:Swift.String]? = nil
        if let sourceEncryptionContextContainer = sourceEncryptionContextContainer {
            sourceEncryptionContextDecoded0 = [Swift.String:Swift.String]()
            for (key0, encryptioncontextvalue0) in sourceEncryptionContextContainer {
                if let encryptioncontextvalue0 = encryptioncontextvalue0 {
                    sourceEncryptionContextDecoded0?[key0] = encryptioncontextvalue0
                }
            }
        }
        sourceEncryptionContext = sourceEncryptionContextDecoded0
        let sourceKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceKeyId)
        sourceKeyId = sourceKeyIdDecoded
        let destinationKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .destinationKeyId)
        destinationKeyId = destinationKeyIdDecoded
        let destinationEncryptionContextContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .destinationEncryptionContext)
        var destinationEncryptionContextDecoded0: [Swift.String:Swift.String]? = nil
        if let destinationEncryptionContextContainer = destinationEncryptionContextContainer {
            destinationEncryptionContextDecoded0 = [Swift.String:Swift.String]()
            for (key0, encryptioncontextvalue0) in destinationEncryptionContextContainer {
                if let encryptioncontextvalue0 = encryptioncontextvalue0 {
                    destinationEncryptionContextDecoded0?[key0] = encryptioncontextvalue0
                }
            }
        }
        destinationEncryptionContext = destinationEncryptionContextDecoded0
        let sourceEncryptionAlgorithmDecoded = try containerValues.decodeIfPresent(KmsClientTypes.EncryptionAlgorithmSpec.self, forKey: .sourceEncryptionAlgorithm)
        sourceEncryptionAlgorithm = sourceEncryptionAlgorithmDecoded
        let destinationEncryptionAlgorithmDecoded = try containerValues.decodeIfPresent(KmsClientTypes.EncryptionAlgorithmSpec.self, forKey: .destinationEncryptionAlgorithm)
        destinationEncryptionAlgorithm = destinationEncryptionAlgorithmDecoded
        let grantTokensContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .grantTokens)
        var grantTokensDecoded0:[Swift.String]? = nil
        if let grantTokensContainer = grantTokensContainer {
            grantTokensDecoded0 = [Swift.String]()
            for string0 in grantTokensContainer {
                if let string0 = string0 {
                    grantTokensDecoded0?.append(string0)
                }
            }
        }
        grantTokens = grantTokensDecoded0
    }
}
