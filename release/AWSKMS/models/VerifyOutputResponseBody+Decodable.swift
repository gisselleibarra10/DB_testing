// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct VerifyOutputResponseBody: Swift.Equatable {
    let keyId: Swift.String?
    let signatureValid: Swift.Bool
    let signingAlgorithm: KmsClientTypes.SigningAlgorithmSpec?
}

extension VerifyOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case keyId = "KeyId"
        case signatureValid = "SignatureValid"
        case signingAlgorithm = "SigningAlgorithm"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyId)
        keyId = keyIdDecoded
        let signatureValidDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .signatureValid) ?? false
        signatureValid = signatureValidDecoded
        let signingAlgorithmDecoded = try containerValues.decodeIfPresent(KmsClientTypes.SigningAlgorithmSpec.self, forKey: .signingAlgorithm)
        signingAlgorithm = signingAlgorithmDecoded
    }
}
