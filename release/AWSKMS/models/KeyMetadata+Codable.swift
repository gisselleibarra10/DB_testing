// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension KmsClientTypes.KeyMetadata: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case aWSAccountId = "AWSAccountId"
        case arn = "Arn"
        case cloudHsmClusterId = "CloudHsmClusterId"
        case creationDate = "CreationDate"
        case customKeyStoreId = "CustomKeyStoreId"
        case customerMasterKeySpec = "CustomerMasterKeySpec"
        case deletionDate = "DeletionDate"
        case description = "Description"
        case enabled = "Enabled"
        case encryptionAlgorithms = "EncryptionAlgorithms"
        case expirationModel = "ExpirationModel"
        case keyId = "KeyId"
        case keyManager = "KeyManager"
        case keySpec = "KeySpec"
        case keyState = "KeyState"
        case keyUsage = "KeyUsage"
        case macAlgorithms = "MacAlgorithms"
        case multiRegion = "MultiRegion"
        case multiRegionConfiguration = "MultiRegionConfiguration"
        case origin = "Origin"
        case pendingDeletionWindowInDays = "PendingDeletionWindowInDays"
        case signingAlgorithms = "SigningAlgorithms"
        case validTo = "ValidTo"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let aWSAccountId = self.aWSAccountId {
            try encodeContainer.encode(aWSAccountId, forKey: .aWSAccountId)
        }
        if let arn = self.arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let cloudHsmClusterId = self.cloudHsmClusterId {
            try encodeContainer.encode(cloudHsmClusterId, forKey: .cloudHsmClusterId)
        }
        if let creationDate = self.creationDate {
            try encodeContainer.encode(creationDate.timeIntervalSince1970, forKey: .creationDate)
        }
        if let customKeyStoreId = self.customKeyStoreId {
            try encodeContainer.encode(customKeyStoreId, forKey: .customKeyStoreId)
        }
        if let customerMasterKeySpec = self.customerMasterKeySpec {
            try encodeContainer.encode(customerMasterKeySpec.rawValue, forKey: .customerMasterKeySpec)
        }
        if let deletionDate = self.deletionDate {
            try encodeContainer.encode(deletionDate.timeIntervalSince1970, forKey: .deletionDate)
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if enabled != false {
            try encodeContainer.encode(enabled, forKey: .enabled)
        }
        if let encryptionAlgorithms = encryptionAlgorithms {
            var encryptionAlgorithmsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .encryptionAlgorithms)
            for encryptionalgorithmspeclist0 in encryptionAlgorithms {
                try encryptionAlgorithmsContainer.encode(encryptionalgorithmspeclist0.rawValue)
            }
        }
        if let expirationModel = self.expirationModel {
            try encodeContainer.encode(expirationModel.rawValue, forKey: .expirationModel)
        }
        if let keyId = self.keyId {
            try encodeContainer.encode(keyId, forKey: .keyId)
        }
        if let keyManager = self.keyManager {
            try encodeContainer.encode(keyManager.rawValue, forKey: .keyManager)
        }
        if let keySpec = self.keySpec {
            try encodeContainer.encode(keySpec.rawValue, forKey: .keySpec)
        }
        if let keyState = self.keyState {
            try encodeContainer.encode(keyState.rawValue, forKey: .keyState)
        }
        if let keyUsage = self.keyUsage {
            try encodeContainer.encode(keyUsage.rawValue, forKey: .keyUsage)
        }
        if let macAlgorithms = macAlgorithms {
            var macAlgorithmsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .macAlgorithms)
            for macalgorithmspeclist0 in macAlgorithms {
                try macAlgorithmsContainer.encode(macalgorithmspeclist0.rawValue)
            }
        }
        if let multiRegion = self.multiRegion {
            try encodeContainer.encode(multiRegion, forKey: .multiRegion)
        }
        if let multiRegionConfiguration = self.multiRegionConfiguration {
            try encodeContainer.encode(multiRegionConfiguration, forKey: .multiRegionConfiguration)
        }
        if let origin = self.origin {
            try encodeContainer.encode(origin.rawValue, forKey: .origin)
        }
        if let pendingDeletionWindowInDays = self.pendingDeletionWindowInDays {
            try encodeContainer.encode(pendingDeletionWindowInDays, forKey: .pendingDeletionWindowInDays)
        }
        if let signingAlgorithms = signingAlgorithms {
            var signingAlgorithmsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .signingAlgorithms)
            for signingalgorithmspeclist0 in signingAlgorithms {
                try signingAlgorithmsContainer.encode(signingalgorithmspeclist0.rawValue)
            }
        }
        if let validTo = self.validTo {
            try encodeContainer.encode(validTo.timeIntervalSince1970, forKey: .validTo)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let aWSAccountIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .aWSAccountId)
        aWSAccountId = aWSAccountIdDecoded
        let keyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyId)
        keyId = keyIdDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let creationDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationDate)
        creationDate = creationDateDecoded
        let enabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enabled) ?? false
        enabled = enabledDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let keyUsageDecoded = try containerValues.decodeIfPresent(KmsClientTypes.KeyUsageType.self, forKey: .keyUsage)
        keyUsage = keyUsageDecoded
        let keyStateDecoded = try containerValues.decodeIfPresent(KmsClientTypes.KeyState.self, forKey: .keyState)
        keyState = keyStateDecoded
        let deletionDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .deletionDate)
        deletionDate = deletionDateDecoded
        let validToDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .validTo)
        validTo = validToDecoded
        let originDecoded = try containerValues.decodeIfPresent(KmsClientTypes.OriginType.self, forKey: .origin)
        origin = originDecoded
        let customKeyStoreIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .customKeyStoreId)
        customKeyStoreId = customKeyStoreIdDecoded
        let cloudHsmClusterIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cloudHsmClusterId)
        cloudHsmClusterId = cloudHsmClusterIdDecoded
        let expirationModelDecoded = try containerValues.decodeIfPresent(KmsClientTypes.ExpirationModelType.self, forKey: .expirationModel)
        expirationModel = expirationModelDecoded
        let keyManagerDecoded = try containerValues.decodeIfPresent(KmsClientTypes.KeyManagerType.self, forKey: .keyManager)
        keyManager = keyManagerDecoded
        let customerMasterKeySpecDecoded = try containerValues.decodeIfPresent(KmsClientTypes.CustomerMasterKeySpec.self, forKey: .customerMasterKeySpec)
        customerMasterKeySpec = customerMasterKeySpecDecoded
        let keySpecDecoded = try containerValues.decodeIfPresent(KmsClientTypes.KeySpec.self, forKey: .keySpec)
        keySpec = keySpecDecoded
        let encryptionAlgorithmsContainer = try containerValues.decodeIfPresent([KmsClientTypes.EncryptionAlgorithmSpec?].self, forKey: .encryptionAlgorithms)
        var encryptionAlgorithmsDecoded0:[KmsClientTypes.EncryptionAlgorithmSpec]? = nil
        if let encryptionAlgorithmsContainer = encryptionAlgorithmsContainer {
            encryptionAlgorithmsDecoded0 = [KmsClientTypes.EncryptionAlgorithmSpec]()
            for string0 in encryptionAlgorithmsContainer {
                if let string0 = string0 {
                    encryptionAlgorithmsDecoded0?.append(string0)
                }
            }
        }
        encryptionAlgorithms = encryptionAlgorithmsDecoded0
        let signingAlgorithmsContainer = try containerValues.decodeIfPresent([KmsClientTypes.SigningAlgorithmSpec?].self, forKey: .signingAlgorithms)
        var signingAlgorithmsDecoded0:[KmsClientTypes.SigningAlgorithmSpec]? = nil
        if let signingAlgorithmsContainer = signingAlgorithmsContainer {
            signingAlgorithmsDecoded0 = [KmsClientTypes.SigningAlgorithmSpec]()
            for string0 in signingAlgorithmsContainer {
                if let string0 = string0 {
                    signingAlgorithmsDecoded0?.append(string0)
                }
            }
        }
        signingAlgorithms = signingAlgorithmsDecoded0
        let multiRegionDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .multiRegion)
        multiRegion = multiRegionDecoded
        let multiRegionConfigurationDecoded = try containerValues.decodeIfPresent(KmsClientTypes.MultiRegionConfiguration.self, forKey: .multiRegionConfiguration)
        multiRegionConfiguration = multiRegionConfigurationDecoded
        let pendingDeletionWindowInDaysDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .pendingDeletionWindowInDays)
        pendingDeletionWindowInDays = pendingDeletionWindowInDaysDecoded
        let macAlgorithmsContainer = try containerValues.decodeIfPresent([KmsClientTypes.MacAlgorithmSpec?].self, forKey: .macAlgorithms)
        var macAlgorithmsDecoded0:[KmsClientTypes.MacAlgorithmSpec]? = nil
        if let macAlgorithmsContainer = macAlgorithmsContainer {
            macAlgorithmsDecoded0 = [KmsClientTypes.MacAlgorithmSpec]()
            for string0 in macAlgorithmsContainer {
                if let string0 = string0 {
                    macAlgorithmsDecoded0?.append(string0)
                }
            }
        }
        macAlgorithms = macAlgorithmsDecoded0
    }
}
