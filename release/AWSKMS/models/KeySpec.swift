// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension KmsClientTypes {
    public enum KeySpec: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case eccNistP256
        case eccNistP384
        case eccNistP521
        case eccSecgP256k1
        case hmac224
        case hmac256
        case hmac384
        case hmac512
        case rsa2048
        case rsa3072
        case rsa4096
        case sm2
        case symmetricDefault
        case sdkUnknown(Swift.String)

        public static var allCases: [KeySpec] {
            return [
                .eccNistP256,
                .eccNistP384,
                .eccNistP521,
                .eccSecgP256k1,
                .hmac224,
                .hmac256,
                .hmac384,
                .hmac512,
                .rsa2048,
                .rsa3072,
                .rsa4096,
                .sm2,
                .symmetricDefault,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .eccNistP256: return "ECC_NIST_P256"
            case .eccNistP384: return "ECC_NIST_P384"
            case .eccNistP521: return "ECC_NIST_P521"
            case .eccSecgP256k1: return "ECC_SECG_P256K1"
            case .hmac224: return "HMAC_224"
            case .hmac256: return "HMAC_256"
            case .hmac384: return "HMAC_384"
            case .hmac512: return "HMAC_512"
            case .rsa2048: return "RSA_2048"
            case .rsa3072: return "RSA_3072"
            case .rsa4096: return "RSA_4096"
            case .sm2: return "SM2"
            case .symmetricDefault: return "SYMMETRIC_DEFAULT"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = KeySpec(rawValue: rawValue) ?? KeySpec.sdkUnknown(rawValue)
        }
    }
}
