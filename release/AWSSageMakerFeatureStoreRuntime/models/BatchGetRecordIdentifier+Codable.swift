// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SageMakerFeatureStoreRuntimeClientTypes.BatchGetRecordIdentifier: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case featureGroupName = "FeatureGroupName"
        case featureNames = "FeatureNames"
        case recordIdentifiersValueAsString = "RecordIdentifiersValueAsString"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let featureGroupName = self.featureGroupName {
            try encodeContainer.encode(featureGroupName, forKey: .featureGroupName)
        }
        if let featureNames = featureNames {
            var featureNamesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .featureNames)
            for featurenames0 in featureNames {
                try featureNamesContainer.encode(featurenames0)
            }
        }
        if let recordIdentifiersValueAsString = recordIdentifiersValueAsString {
            var recordIdentifiersValueAsStringContainer = encodeContainer.nestedUnkeyedContainer(forKey: .recordIdentifiersValueAsString)
            for recordidentifiers0 in recordIdentifiersValueAsString {
                try recordIdentifiersValueAsStringContainer.encode(recordidentifiers0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let featureGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .featureGroupName)
        featureGroupName = featureGroupNameDecoded
        let recordIdentifiersValueAsStringContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .recordIdentifiersValueAsString)
        var recordIdentifiersValueAsStringDecoded0:[Swift.String]? = nil
        if let recordIdentifiersValueAsStringContainer = recordIdentifiersValueAsStringContainer {
            recordIdentifiersValueAsStringDecoded0 = [Swift.String]()
            for string0 in recordIdentifiersValueAsStringContainer {
                if let string0 = string0 {
                    recordIdentifiersValueAsStringDecoded0?.append(string0)
                }
            }
        }
        recordIdentifiersValueAsString = recordIdentifiersValueAsStringDecoded0
        let featureNamesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .featureNames)
        var featureNamesDecoded0:[Swift.String]? = nil
        if let featureNamesContainer = featureNamesContainer {
            featureNamesDecoded0 = [Swift.String]()
            for string0 in featureNamesContainer {
                if let string0 = string0 {
                    featureNamesDecoded0?.append(string0)
                }
            }
        }
        featureNames = featureNamesDecoded0
    }
}
