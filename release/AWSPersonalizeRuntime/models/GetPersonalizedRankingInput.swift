// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct GetPersonalizedRankingInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the campaign to use for generating the personalized ranking.
    /// This member is required.
    public var campaignArn: Swift.String?
    /// The contextual metadata to use when getting recommendations. Contextual metadata includes any interaction information that might be relevant when getting a user's recommendations, such as the user's current location or device type.
    public var context: [Swift.String:Swift.String]?
    /// The Amazon Resource Name (ARN) of a filter you created to include items or exclude items from recommendations for a given user. For more information, see [Filtering Recommendations](https://docs.aws.amazon.com/personalize/latest/dg/filter.html).
    public var filterArn: Swift.String?
    /// The values to use when filtering recommendations. For each placeholder parameter in your filter expression, provide the parameter name (in matching case) as a key and the filter value(s) as the corresponding value. Separate multiple values for one parameter with a comma. For filter expressions that use an INCLUDE element to include items, you must provide values for all parameters that are defined in the expression. For filters with expressions that use an EXCLUDE element to exclude items, you can omit the filter-values.In this case, Amazon Personalize doesn't use that portion of the expression to filter recommendations. For more information, see [Filtering Recommendations](https://docs.aws.amazon.com/personalize/latest/dg/filter.html).
    public var filterValues: [Swift.String:Swift.String]?
    /// A list of items (by itemId) to rank. If an item was not included in the training dataset, the item is appended to the end of the reranked list. The maximum is 500.
    /// This member is required.
    public var inputList: [Swift.String]?
    /// The user for which you want the campaign to provide a personalized ranking.
    /// This member is required.
    public var userId: Swift.String?

    public init (
        campaignArn: Swift.String? = nil,
        context: [Swift.String:Swift.String]? = nil,
        filterArn: Swift.String? = nil,
        filterValues: [Swift.String:Swift.String]? = nil,
        inputList: [Swift.String]? = nil,
        userId: Swift.String? = nil
    )
    {
        self.campaignArn = campaignArn
        self.context = context
        self.filterArn = filterArn
        self.filterValues = filterValues
        self.inputList = inputList
        self.userId = userId
    }
}
