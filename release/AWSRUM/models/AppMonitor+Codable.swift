// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension RumClientTypes.AppMonitor: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case appMonitorConfiguration = "AppMonitorConfiguration"
        case created = "Created"
        case dataStorage = "DataStorage"
        case domain = "Domain"
        case id = "Id"
        case lastModified = "LastModified"
        case name = "Name"
        case state = "State"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let appMonitorConfiguration = self.appMonitorConfiguration {
            try encodeContainer.encode(appMonitorConfiguration, forKey: .appMonitorConfiguration)
        }
        if let created = self.created {
            try encodeContainer.encode(created, forKey: .created)
        }
        if let dataStorage = self.dataStorage {
            try encodeContainer.encode(dataStorage, forKey: .dataStorage)
        }
        if let domain = self.domain {
            try encodeContainer.encode(domain, forKey: .domain)
        }
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let lastModified = self.lastModified {
            try encodeContainer.encode(lastModified, forKey: .lastModified)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let state = self.state {
            try encodeContainer.encode(state.rawValue, forKey: .state)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, tagmap0) in tags {
                try tagsContainer.encode(tagmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let domainDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domain)
        domain = domainDecoded
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let createdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .created)
        created = createdDecoded
        let lastModifiedDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastModified)
        lastModified = lastModifiedDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
        let stateDecoded = try containerValues.decodeIfPresent(RumClientTypes.StateEnum.self, forKey: .state)
        state = stateDecoded
        let appMonitorConfigurationDecoded = try containerValues.decodeIfPresent(RumClientTypes.AppMonitorConfiguration.self, forKey: .appMonitorConfiguration)
        appMonitorConfiguration = appMonitorConfigurationDecoded
        let dataStorageDecoded = try containerValues.decodeIfPresent(RumClientTypes.DataStorage.self, forKey: .dataStorage)
        dataStorage = dataStorageDecoded
    }
}
