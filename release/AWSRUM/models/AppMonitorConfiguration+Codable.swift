// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension RumClientTypes.AppMonitorConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case allowCookies = "AllowCookies"
        case enableXRay = "EnableXRay"
        case excludedPages = "ExcludedPages"
        case favoritePages = "FavoritePages"
        case guestRoleArn = "GuestRoleArn"
        case identityPoolId = "IdentityPoolId"
        case includedPages = "IncludedPages"
        case sessionSampleRate = "SessionSampleRate"
        case telemetries = "Telemetries"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let allowCookies = self.allowCookies {
            try encodeContainer.encode(allowCookies, forKey: .allowCookies)
        }
        if let enableXRay = self.enableXRay {
            try encodeContainer.encode(enableXRay, forKey: .enableXRay)
        }
        if let excludedPages = excludedPages {
            var excludedPagesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .excludedPages)
            for pages0 in excludedPages {
                try excludedPagesContainer.encode(pages0)
            }
        }
        if let favoritePages = favoritePages {
            var favoritePagesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .favoritePages)
            for favoritepages0 in favoritePages {
                try favoritePagesContainer.encode(favoritepages0)
            }
        }
        if let guestRoleArn = self.guestRoleArn {
            try encodeContainer.encode(guestRoleArn, forKey: .guestRoleArn)
        }
        if let identityPoolId = self.identityPoolId {
            try encodeContainer.encode(identityPoolId, forKey: .identityPoolId)
        }
        if let includedPages = includedPages {
            var includedPagesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .includedPages)
            for pages0 in includedPages {
                try includedPagesContainer.encode(pages0)
            }
        }
        if sessionSampleRate != 0.0 {
            try encodeContainer.encode(sessionSampleRate, forKey: .sessionSampleRate)
        }
        if let telemetries = telemetries {
            var telemetriesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .telemetries)
            for telemetries0 in telemetries {
                try telemetriesContainer.encode(telemetries0.rawValue)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let identityPoolIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .identityPoolId)
        identityPoolId = identityPoolIdDecoded
        let excludedPagesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .excludedPages)
        var excludedPagesDecoded0:[Swift.String]? = nil
        if let excludedPagesContainer = excludedPagesContainer {
            excludedPagesDecoded0 = [Swift.String]()
            for string0 in excludedPagesContainer {
                if let string0 = string0 {
                    excludedPagesDecoded0?.append(string0)
                }
            }
        }
        excludedPages = excludedPagesDecoded0
        let includedPagesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .includedPages)
        var includedPagesDecoded0:[Swift.String]? = nil
        if let includedPagesContainer = includedPagesContainer {
            includedPagesDecoded0 = [Swift.String]()
            for string0 in includedPagesContainer {
                if let string0 = string0 {
                    includedPagesDecoded0?.append(string0)
                }
            }
        }
        includedPages = includedPagesDecoded0
        let favoritePagesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .favoritePages)
        var favoritePagesDecoded0:[Swift.String]? = nil
        if let favoritePagesContainer = favoritePagesContainer {
            favoritePagesDecoded0 = [Swift.String]()
            for string0 in favoritePagesContainer {
                if let string0 = string0 {
                    favoritePagesDecoded0?.append(string0)
                }
            }
        }
        favoritePages = favoritePagesDecoded0
        let sessionSampleRateDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .sessionSampleRate) ?? 0.0
        sessionSampleRate = sessionSampleRateDecoded
        let guestRoleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .guestRoleArn)
        guestRoleArn = guestRoleArnDecoded
        let allowCookiesDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .allowCookies)
        allowCookies = allowCookiesDecoded
        let telemetriesContainer = try containerValues.decodeIfPresent([RumClientTypes.Telemetry?].self, forKey: .telemetries)
        var telemetriesDecoded0:[RumClientTypes.Telemetry]? = nil
        if let telemetriesContainer = telemetriesContainer {
            telemetriesDecoded0 = [RumClientTypes.Telemetry]()
            for string0 in telemetriesContainer {
                if let string0 = string0 {
                    telemetriesDecoded0?.append(string0)
                }
            }
        }
        telemetries = telemetriesDecoded0
        let enableXRayDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enableXRay)
        enableXRay = enableXRayDecoded
    }
}
