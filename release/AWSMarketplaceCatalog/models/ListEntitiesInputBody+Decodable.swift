// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListEntitiesInputBody: Swift.Equatable {
    let catalog: Swift.String?
    let entityType: Swift.String?
    let filterList: [MarketplaceCatalogClientTypes.Filter]?
    let sort: MarketplaceCatalogClientTypes.Sort?
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
}

extension ListEntitiesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case catalog = "Catalog"
        case entityType = "EntityType"
        case filterList = "FilterList"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case sort = "Sort"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let catalogDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .catalog)
        catalog = catalogDecoded
        let entityTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .entityType)
        entityType = entityTypeDecoded
        let filterListContainer = try containerValues.decodeIfPresent([MarketplaceCatalogClientTypes.Filter?].self, forKey: .filterList)
        var filterListDecoded0:[MarketplaceCatalogClientTypes.Filter]? = nil
        if let filterListContainer = filterListContainer {
            filterListDecoded0 = [MarketplaceCatalogClientTypes.Filter]()
            for structure0 in filterListContainer {
                if let structure0 = structure0 {
                    filterListDecoded0?.append(structure0)
                }
            }
        }
        filterList = filterListDecoded0
        let sortDecoded = try containerValues.decodeIfPresent(MarketplaceCatalogClientTypes.Sort.self, forKey: .sort)
        sort = sortDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
    }
}
