// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListEntitiesOutputResponseBody: Swift.Equatable {
    let entitySummaryList: [MarketplaceCatalogClientTypes.EntitySummary]?
    let nextToken: Swift.String?
}

extension ListEntitiesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case entitySummaryList = "EntitySummaryList"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let entitySummaryListContainer = try containerValues.decodeIfPresent([MarketplaceCatalogClientTypes.EntitySummary?].self, forKey: .entitySummaryList)
        var entitySummaryListDecoded0:[MarketplaceCatalogClientTypes.EntitySummary]? = nil
        if let entitySummaryListContainer = entitySummaryListContainer {
            entitySummaryListDecoded0 = [MarketplaceCatalogClientTypes.EntitySummary]()
            for structure0 in entitySummaryListContainer {
                if let structure0 = structure0 {
                    entitySummaryListDecoded0?.append(structure0)
                }
            }
        }
        entitySummaryList = entitySummaryListDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
