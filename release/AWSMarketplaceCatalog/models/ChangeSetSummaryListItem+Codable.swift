// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension MarketplaceCatalogClientTypes.ChangeSetSummaryListItem: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case changeSetArn = "ChangeSetArn"
        case changeSetId = "ChangeSetId"
        case changeSetName = "ChangeSetName"
        case endTime = "EndTime"
        case entityIdList = "EntityIdList"
        case failureCode = "FailureCode"
        case startTime = "StartTime"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let changeSetArn = self.changeSetArn {
            try encodeContainer.encode(changeSetArn, forKey: .changeSetArn)
        }
        if let changeSetId = self.changeSetId {
            try encodeContainer.encode(changeSetId, forKey: .changeSetId)
        }
        if let changeSetName = self.changeSetName {
            try encodeContainer.encode(changeSetName, forKey: .changeSetName)
        }
        if let endTime = self.endTime {
            try encodeContainer.encode(endTime, forKey: .endTime)
        }
        if let entityIdList = entityIdList {
            var entityIdListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .entityIdList)
            for resourceidlist0 in entityIdList {
                try entityIdListContainer.encode(resourceidlist0)
            }
        }
        if let failureCode = self.failureCode {
            try encodeContainer.encode(failureCode.rawValue, forKey: .failureCode)
        }
        if let startTime = self.startTime {
            try encodeContainer.encode(startTime, forKey: .startTime)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let changeSetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .changeSetId)
        changeSetId = changeSetIdDecoded
        let changeSetArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .changeSetArn)
        changeSetArn = changeSetArnDecoded
        let changeSetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .changeSetName)
        changeSetName = changeSetNameDecoded
        let startTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .startTime)
        startTime = startTimeDecoded
        let endTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .endTime)
        endTime = endTimeDecoded
        let statusDecoded = try containerValues.decodeIfPresent(MarketplaceCatalogClientTypes.ChangeStatus.self, forKey: .status)
        status = statusDecoded
        let entityIdListContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .entityIdList)
        var entityIdListDecoded0:[Swift.String]? = nil
        if let entityIdListContainer = entityIdListContainer {
            entityIdListDecoded0 = [Swift.String]()
            for string0 in entityIdListContainer {
                if let string0 = string0 {
                    entityIdListDecoded0?.append(string0)
                }
            }
        }
        entityIdList = entityIdListDecoded0
        let failureCodeDecoded = try containerValues.decodeIfPresent(MarketplaceCatalogClientTypes.FailureCode.self, forKey: .failureCode)
        failureCode = failureCodeDecoded
    }
}
