// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateGroupInputBody: Swift.Equatable {
    let groupName: Swift.String?
    let filterExpression: Swift.String?
    let insightsConfiguration: XRayClientTypes.InsightsConfiguration?
    let tags: [XRayClientTypes.Tag]?
}

extension CreateGroupInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filterExpression = "FilterExpression"
        case groupName = "GroupName"
        case insightsConfiguration = "InsightsConfiguration"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let groupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .groupName)
        groupName = groupNameDecoded
        let filterExpressionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .filterExpression)
        filterExpression = filterExpressionDecoded
        let insightsConfigurationDecoded = try containerValues.decodeIfPresent(XRayClientTypes.InsightsConfiguration.self, forKey: .insightsConfiguration)
        insightsConfiguration = insightsConfigurationDecoded
        let tagsContainer = try containerValues.decodeIfPresent([XRayClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[XRayClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [XRayClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}
