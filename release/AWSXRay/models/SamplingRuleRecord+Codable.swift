// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension XRayClientTypes.SamplingRuleRecord: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createdAt = "CreatedAt"
        case modifiedAt = "ModifiedAt"
        case samplingRule = "SamplingRule"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let createdAt = self.createdAt {
            try encodeContainer.encode(createdAt.timeIntervalSince1970, forKey: .createdAt)
        }
        if let modifiedAt = self.modifiedAt {
            try encodeContainer.encode(modifiedAt.timeIntervalSince1970, forKey: .modifiedAt)
        }
        if let samplingRule = self.samplingRule {
            try encodeContainer.encode(samplingRule, forKey: .samplingRule)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let samplingRuleDecoded = try containerValues.decodeIfPresent(XRayClientTypes.SamplingRule.self, forKey: .samplingRule)
        samplingRule = samplingRuleDecoded
        let createdAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdAt)
        createdAt = createdAtDecoded
        let modifiedAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .modifiedAt)
        modifiedAt = modifiedAtDecoded
    }
}
