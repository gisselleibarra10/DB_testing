// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension XRayClientTypes.TimeSeriesServiceStatistics: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case edgeSummaryStatistics = "EdgeSummaryStatistics"
        case responseTimeHistogram = "ResponseTimeHistogram"
        case serviceForecastStatistics = "ServiceForecastStatistics"
        case serviceSummaryStatistics = "ServiceSummaryStatistics"
        case timestamp = "Timestamp"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let edgeSummaryStatistics = self.edgeSummaryStatistics {
            try encodeContainer.encode(edgeSummaryStatistics, forKey: .edgeSummaryStatistics)
        }
        if let responseTimeHistogram = responseTimeHistogram {
            var responseTimeHistogramContainer = encodeContainer.nestedUnkeyedContainer(forKey: .responseTimeHistogram)
            for histogram0 in responseTimeHistogram {
                try responseTimeHistogramContainer.encode(histogram0)
            }
        }
        if let serviceForecastStatistics = self.serviceForecastStatistics {
            try encodeContainer.encode(serviceForecastStatistics, forKey: .serviceForecastStatistics)
        }
        if let serviceSummaryStatistics = self.serviceSummaryStatistics {
            try encodeContainer.encode(serviceSummaryStatistics, forKey: .serviceSummaryStatistics)
        }
        if let timestamp = self.timestamp {
            try encodeContainer.encode(timestamp.timeIntervalSince1970, forKey: .timestamp)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let timestampDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .timestamp)
        timestamp = timestampDecoded
        let edgeSummaryStatisticsDecoded = try containerValues.decodeIfPresent(XRayClientTypes.EdgeStatistics.self, forKey: .edgeSummaryStatistics)
        edgeSummaryStatistics = edgeSummaryStatisticsDecoded
        let serviceSummaryStatisticsDecoded = try containerValues.decodeIfPresent(XRayClientTypes.ServiceStatistics.self, forKey: .serviceSummaryStatistics)
        serviceSummaryStatistics = serviceSummaryStatisticsDecoded
        let serviceForecastStatisticsDecoded = try containerValues.decodeIfPresent(XRayClientTypes.ForecastStatistics.self, forKey: .serviceForecastStatistics)
        serviceForecastStatistics = serviceForecastStatisticsDecoded
        let responseTimeHistogramContainer = try containerValues.decodeIfPresent([XRayClientTypes.HistogramEntry?].self, forKey: .responseTimeHistogram)
        var responseTimeHistogramDecoded0:[XRayClientTypes.HistogramEntry]? = nil
        if let responseTimeHistogramContainer = responseTimeHistogramContainer {
            responseTimeHistogramDecoded0 = [XRayClientTypes.HistogramEntry]()
            for structure0 in responseTimeHistogramContainer {
                if let structure0 = structure0 {
                    responseTimeHistogramDecoded0?.append(structure0)
                }
            }
        }
        responseTimeHistogram = responseTimeHistogramDecoded0
    }
}
