// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetTimeSeriesServiceStatisticsOutputResponseBody: Swift.Equatable {
    let timeSeriesServiceStatistics: [XRayClientTypes.TimeSeriesServiceStatistics]?
    let containsOldGroupVersions: Swift.Bool
    let nextToken: Swift.String?
}

extension GetTimeSeriesServiceStatisticsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case containsOldGroupVersions = "ContainsOldGroupVersions"
        case nextToken = "NextToken"
        case timeSeriesServiceStatistics = "TimeSeriesServiceStatistics"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let timeSeriesServiceStatisticsContainer = try containerValues.decodeIfPresent([XRayClientTypes.TimeSeriesServiceStatistics?].self, forKey: .timeSeriesServiceStatistics)
        var timeSeriesServiceStatisticsDecoded0:[XRayClientTypes.TimeSeriesServiceStatistics]? = nil
        if let timeSeriesServiceStatisticsContainer = timeSeriesServiceStatisticsContainer {
            timeSeriesServiceStatisticsDecoded0 = [XRayClientTypes.TimeSeriesServiceStatistics]()
            for structure0 in timeSeriesServiceStatisticsContainer {
                if let structure0 = structure0 {
                    timeSeriesServiceStatisticsDecoded0?.append(structure0)
                }
            }
        }
        timeSeriesServiceStatistics = timeSeriesServiceStatisticsDecoded0
        let containsOldGroupVersionsDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .containsOldGroupVersions) ?? false
        containsOldGroupVersions = containsOldGroupVersionsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
