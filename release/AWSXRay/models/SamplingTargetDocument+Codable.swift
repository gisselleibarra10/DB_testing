// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension XRayClientTypes.SamplingTargetDocument: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case fixedRate = "FixedRate"
        case interval = "Interval"
        case reservoirQuota = "ReservoirQuota"
        case reservoirQuotaTTL = "ReservoirQuotaTTL"
        case ruleName = "RuleName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if fixedRate != 0.0 {
            try encodeContainer.encode(fixedRate, forKey: .fixedRate)
        }
        if let interval = self.interval {
            try encodeContainer.encode(interval, forKey: .interval)
        }
        if let reservoirQuota = self.reservoirQuota {
            try encodeContainer.encode(reservoirQuota, forKey: .reservoirQuota)
        }
        if let reservoirQuotaTTL = self.reservoirQuotaTTL {
            try encodeContainer.encode(reservoirQuotaTTL.timeIntervalSince1970, forKey: .reservoirQuotaTTL)
        }
        if let ruleName = self.ruleName {
            try encodeContainer.encode(ruleName, forKey: .ruleName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ruleNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ruleName)
        ruleName = ruleNameDecoded
        let fixedRateDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .fixedRate) ?? 0.0
        fixedRate = fixedRateDecoded
        let reservoirQuotaDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .reservoirQuota)
        reservoirQuota = reservoirQuotaDecoded
        let reservoirQuotaTTLDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .reservoirQuotaTTL)
        reservoirQuotaTTL = reservoirQuotaTTLDecoded
        let intervalDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .interval)
        interval = intervalDecoded
    }
}
