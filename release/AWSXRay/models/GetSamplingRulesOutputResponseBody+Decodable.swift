// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetSamplingRulesOutputResponseBody: Swift.Equatable {
    let samplingRuleRecords: [XRayClientTypes.SamplingRuleRecord]?
    let nextToken: Swift.String?
}

extension GetSamplingRulesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case samplingRuleRecords = "SamplingRuleRecords"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let samplingRuleRecordsContainer = try containerValues.decodeIfPresent([XRayClientTypes.SamplingRuleRecord?].self, forKey: .samplingRuleRecords)
        var samplingRuleRecordsDecoded0:[XRayClientTypes.SamplingRuleRecord]? = nil
        if let samplingRuleRecordsContainer = samplingRuleRecordsContainer {
            samplingRuleRecordsDecoded0 = [XRayClientTypes.SamplingRuleRecord]()
            for structure0 in samplingRuleRecordsContainer {
                if let structure0 = structure0 {
                    samplingRuleRecordsDecoded0?.append(structure0)
                }
            }
        }
        samplingRuleRecords = samplingRuleRecordsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
