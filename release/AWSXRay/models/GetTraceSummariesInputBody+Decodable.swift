// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetTraceSummariesInputBody: Swift.Equatable {
    let startTime: ClientRuntime.Date?
    let endTime: ClientRuntime.Date?
    let timeRangeType: XRayClientTypes.TimeRangeType?
    let sampling: Swift.Bool?
    let samplingStrategy: XRayClientTypes.SamplingStrategy?
    let filterExpression: Swift.String?
    let nextToken: Swift.String?
}

extension GetTraceSummariesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case endTime = "EndTime"
        case filterExpression = "FilterExpression"
        case nextToken = "NextToken"
        case sampling = "Sampling"
        case samplingStrategy = "SamplingStrategy"
        case startTime = "StartTime"
        case timeRangeType = "TimeRangeType"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let startTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .startTime)
        startTime = startTimeDecoded
        let endTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .endTime)
        endTime = endTimeDecoded
        let timeRangeTypeDecoded = try containerValues.decodeIfPresent(XRayClientTypes.TimeRangeType.self, forKey: .timeRangeType)
        timeRangeType = timeRangeTypeDecoded
        let samplingDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .sampling)
        sampling = samplingDecoded
        let samplingStrategyDecoded = try containerValues.decodeIfPresent(XRayClientTypes.SamplingStrategy.self, forKey: .samplingStrategy)
        samplingStrategy = samplingStrategyDecoded
        let filterExpressionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .filterExpression)
        filterExpression = filterExpressionDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
