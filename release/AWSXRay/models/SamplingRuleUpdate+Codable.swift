// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension XRayClientTypes.SamplingRuleUpdate: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attributes = "Attributes"
        case fixedRate = "FixedRate"
        case hTTPMethod = "HTTPMethod"
        case host = "Host"
        case priority = "Priority"
        case reservoirSize = "ReservoirSize"
        case resourceARN = "ResourceARN"
        case ruleARN = "RuleARN"
        case ruleName = "RuleName"
        case serviceName = "ServiceName"
        case serviceType = "ServiceType"
        case uRLPath = "URLPath"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let attributes = attributes {
            var attributesContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .attributes)
            for (dictKey0, attributemap0) in attributes {
                try attributesContainer.encode(attributemap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let fixedRate = self.fixedRate {
            try encodeContainer.encode(fixedRate, forKey: .fixedRate)
        }
        if let hTTPMethod = self.hTTPMethod {
            try encodeContainer.encode(hTTPMethod, forKey: .hTTPMethod)
        }
        if let host = self.host {
            try encodeContainer.encode(host, forKey: .host)
        }
        if let priority = self.priority {
            try encodeContainer.encode(priority, forKey: .priority)
        }
        if let reservoirSize = self.reservoirSize {
            try encodeContainer.encode(reservoirSize, forKey: .reservoirSize)
        }
        if let resourceARN = self.resourceARN {
            try encodeContainer.encode(resourceARN, forKey: .resourceARN)
        }
        if let ruleARN = self.ruleARN {
            try encodeContainer.encode(ruleARN, forKey: .ruleARN)
        }
        if let ruleName = self.ruleName {
            try encodeContainer.encode(ruleName, forKey: .ruleName)
        }
        if let serviceName = self.serviceName {
            try encodeContainer.encode(serviceName, forKey: .serviceName)
        }
        if let serviceType = self.serviceType {
            try encodeContainer.encode(serviceType, forKey: .serviceType)
        }
        if let uRLPath = self.uRLPath {
            try encodeContainer.encode(uRLPath, forKey: .uRLPath)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ruleNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ruleName)
        ruleName = ruleNameDecoded
        let ruleARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ruleARN)
        ruleARN = ruleARNDecoded
        let resourceARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceARN)
        resourceARN = resourceARNDecoded
        let priorityDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .priority)
        priority = priorityDecoded
        let fixedRateDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .fixedRate)
        fixedRate = fixedRateDecoded
        let reservoirSizeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .reservoirSize)
        reservoirSize = reservoirSizeDecoded
        let hostDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .host)
        host = hostDecoded
        let serviceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serviceName)
        serviceName = serviceNameDecoded
        let serviceTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serviceType)
        serviceType = serviceTypeDecoded
        let hTTPMethodDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .hTTPMethod)
        hTTPMethod = hTTPMethodDecoded
        let uRLPathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .uRLPath)
        uRLPath = uRLPathDecoded
        let attributesContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .attributes)
        var attributesDecoded0: [Swift.String:Swift.String]? = nil
        if let attributesContainer = attributesContainer {
            attributesDecoded0 = [Swift.String:Swift.String]()
            for (key0, attributevalue0) in attributesContainer {
                if let attributevalue0 = attributevalue0 {
                    attributesDecoded0?[key0] = attributevalue0
                }
            }
        }
        attributes = attributesDecoded0
    }
}
