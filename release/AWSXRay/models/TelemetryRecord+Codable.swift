// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension XRayClientTypes.TelemetryRecord: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case backendConnectionErrors = "BackendConnectionErrors"
        case segmentsReceivedCount = "SegmentsReceivedCount"
        case segmentsRejectedCount = "SegmentsRejectedCount"
        case segmentsSentCount = "SegmentsSentCount"
        case segmentsSpilloverCount = "SegmentsSpilloverCount"
        case timestamp = "Timestamp"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let backendConnectionErrors = self.backendConnectionErrors {
            try encodeContainer.encode(backendConnectionErrors, forKey: .backendConnectionErrors)
        }
        if let segmentsReceivedCount = self.segmentsReceivedCount {
            try encodeContainer.encode(segmentsReceivedCount, forKey: .segmentsReceivedCount)
        }
        if let segmentsRejectedCount = self.segmentsRejectedCount {
            try encodeContainer.encode(segmentsRejectedCount, forKey: .segmentsRejectedCount)
        }
        if let segmentsSentCount = self.segmentsSentCount {
            try encodeContainer.encode(segmentsSentCount, forKey: .segmentsSentCount)
        }
        if let segmentsSpilloverCount = self.segmentsSpilloverCount {
            try encodeContainer.encode(segmentsSpilloverCount, forKey: .segmentsSpilloverCount)
        }
        if let timestamp = self.timestamp {
            try encodeContainer.encode(timestamp.timeIntervalSince1970, forKey: .timestamp)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let timestampDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .timestamp)
        timestamp = timestampDecoded
        let segmentsReceivedCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .segmentsReceivedCount)
        segmentsReceivedCount = segmentsReceivedCountDecoded
        let segmentsSentCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .segmentsSentCount)
        segmentsSentCount = segmentsSentCountDecoded
        let segmentsSpilloverCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .segmentsSpilloverCount)
        segmentsSpilloverCount = segmentsSpilloverCountDecoded
        let segmentsRejectedCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .segmentsRejectedCount)
        segmentsRejectedCount = segmentsRejectedCountDecoded
        let backendConnectionErrorsDecoded = try containerValues.decodeIfPresent(XRayClientTypes.BackendConnectionErrors.self, forKey: .backendConnectionErrors)
        backendConnectionErrors = backendConnectionErrorsDecoded
    }
}
