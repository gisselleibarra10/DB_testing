// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension XRayClientTypes.Trace: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case duration = "Duration"
        case id = "Id"
        case limitExceeded = "LimitExceeded"
        case segments = "Segments"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let duration = self.duration {
            try encodeContainer.encode(duration, forKey: .duration)
        }
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let limitExceeded = self.limitExceeded {
            try encodeContainer.encode(limitExceeded, forKey: .limitExceeded)
        }
        if let segments = segments {
            var segmentsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .segments)
            for segmentlist0 in segments {
                try segmentsContainer.encode(segmentlist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let durationDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .duration)
        duration = durationDecoded
        let limitExceededDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .limitExceeded)
        limitExceeded = limitExceededDecoded
        let segmentsContainer = try containerValues.decodeIfPresent([XRayClientTypes.Segment?].self, forKey: .segments)
        var segmentsDecoded0:[XRayClientTypes.Segment]? = nil
        if let segmentsContainer = segmentsContainer {
            segmentsDecoded0 = [XRayClientTypes.Segment]()
            for structure0 in segmentsContainer {
                if let structure0 = structure0 {
                    segmentsDecoded0?.append(structure0)
                }
            }
        }
        segments = segmentsDecoded0
    }
}
