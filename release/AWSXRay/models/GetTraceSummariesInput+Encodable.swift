// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension GetTraceSummariesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case endTime = "EndTime"
        case filterExpression = "FilterExpression"
        case nextToken = "NextToken"
        case sampling = "Sampling"
        case samplingStrategy = "SamplingStrategy"
        case startTime = "StartTime"
        case timeRangeType = "TimeRangeType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let endTime = self.endTime {
            try encodeContainer.encode(endTime.timeIntervalSince1970, forKey: .endTime)
        }
        if let filterExpression = self.filterExpression {
            try encodeContainer.encode(filterExpression, forKey: .filterExpression)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let sampling = self.sampling {
            try encodeContainer.encode(sampling, forKey: .sampling)
        }
        if let samplingStrategy = self.samplingStrategy {
            try encodeContainer.encode(samplingStrategy, forKey: .samplingStrategy)
        }
        if let startTime = self.startTime {
            try encodeContainer.encode(startTime.timeIntervalSince1970, forKey: .startTime)
        }
        if let timeRangeType = self.timeRangeType {
            try encodeContainer.encode(timeRangeType.rawValue, forKey: .timeRangeType)
        }
    }
}
