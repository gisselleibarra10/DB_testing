// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension GetTimeSeriesServiceStatisticsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case endTime = "EndTime"
        case entitySelectorExpression = "EntitySelectorExpression"
        case forecastStatistics = "ForecastStatistics"
        case groupARN = "GroupARN"
        case groupName = "GroupName"
        case nextToken = "NextToken"
        case period = "Period"
        case startTime = "StartTime"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let endTime = self.endTime {
            try encodeContainer.encode(endTime.timeIntervalSince1970, forKey: .endTime)
        }
        if let entitySelectorExpression = self.entitySelectorExpression {
            try encodeContainer.encode(entitySelectorExpression, forKey: .entitySelectorExpression)
        }
        if let forecastStatistics = self.forecastStatistics {
            try encodeContainer.encode(forecastStatistics, forKey: .forecastStatistics)
        }
        if let groupARN = self.groupARN {
            try encodeContainer.encode(groupARN, forKey: .groupARN)
        }
        if let groupName = self.groupName {
            try encodeContainer.encode(groupName, forKey: .groupName)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let period = self.period {
            try encodeContainer.encode(period, forKey: .period)
        }
        if let startTime = self.startTime {
            try encodeContainer.encode(startTime.timeIntervalSince1970, forKey: .startTime)
        }
    }
}
