// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetTraceSummariesOutputResponseBody: Swift.Equatable {
    let traceSummaries: [XRayClientTypes.TraceSummary]?
    let approximateTime: ClientRuntime.Date?
    let tracesProcessedCount: Swift.Int?
    let nextToken: Swift.String?
}

extension GetTraceSummariesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case approximateTime = "ApproximateTime"
        case nextToken = "NextToken"
        case traceSummaries = "TraceSummaries"
        case tracesProcessedCount = "TracesProcessedCount"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let traceSummariesContainer = try containerValues.decodeIfPresent([XRayClientTypes.TraceSummary?].self, forKey: .traceSummaries)
        var traceSummariesDecoded0:[XRayClientTypes.TraceSummary]? = nil
        if let traceSummariesContainer = traceSummariesContainer {
            traceSummariesDecoded0 = [XRayClientTypes.TraceSummary]()
            for structure0 in traceSummariesContainer {
                if let structure0 = structure0 {
                    traceSummariesDecoded0?.append(structure0)
                }
            }
        }
        traceSummaries = traceSummariesDecoded0
        let approximateTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .approximateTime)
        approximateTime = approximateTimeDecoded
        let tracesProcessedCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .tracesProcessedCount)
        tracesProcessedCount = tracesProcessedCountDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
