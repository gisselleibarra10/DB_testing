// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension XRayClientTypes {
    /// Metadata generated from the segment documents in a trace.
    public struct TraceSummary: Swift.Equatable {
        /// Annotations from the trace's segment documents.
        public var annotations: [Swift.String:[XRayClientTypes.ValueWithServiceIds]]?
        /// A list of Availability Zones for any zone corresponding to the trace segments.
        public var availabilityZones: [XRayClientTypes.AvailabilityZoneDetail]?
        /// The length of time in seconds between the start time of the root segment and the end time of the last segment that completed.
        public var duration: Swift.Double?
        /// The root of a trace.
        public var entryPoint: XRayClientTypes.ServiceId?
        /// A collection of ErrorRootCause structures corresponding to the trace segments.
        public var errorRootCauses: [XRayClientTypes.ErrorRootCause]?
        /// A collection of FaultRootCause structures corresponding to the trace segments.
        public var faultRootCauses: [XRayClientTypes.FaultRootCause]?
        /// The root segment document has a 400 series error.
        public var hasError: Swift.Bool?
        /// The root segment document has a 500 series error.
        public var hasFault: Swift.Bool?
        /// One or more of the segment documents has a 429 throttling error.
        public var hasThrottle: Swift.Bool?
        /// Information about the HTTP request served by the trace.
        public var http: XRayClientTypes.Http?
        /// The unique identifier for the request that generated the trace's segments and subsegments.
        public var id: Swift.String?
        /// A list of EC2 instance IDs for any instance corresponding to the trace segments.
        public var instanceIds: [XRayClientTypes.InstanceIdDetail]?
        /// One or more of the segment documents is in progress.
        public var isPartial: Swift.Bool?
        /// The matched time stamp of a defined event.
        public var matchedEventTime: ClientRuntime.Date?
        /// A list of resource ARNs for any resource corresponding to the trace segments.
        public var resourceARNs: [XRayClientTypes.ResourceARNDetail]?
        /// The length of time in seconds between the start and end times of the root segment. If the service performs work asynchronously, the response time measures the time before the response is sent to the user, while the duration measures the amount of time before the last traced activity completes.
        public var responseTime: Swift.Double?
        /// A collection of ResponseTimeRootCause structures corresponding to the trace segments.
        public var responseTimeRootCauses: [XRayClientTypes.ResponseTimeRootCause]?
        /// The revision number of a trace.
        public var revision: Swift.Int
        /// Service IDs from the trace's segment documents.
        public var serviceIds: [XRayClientTypes.ServiceId]?
        /// Users from the trace's segment documents.
        public var users: [XRayClientTypes.TraceUser]?

        public init (
            annotations: [Swift.String:[XRayClientTypes.ValueWithServiceIds]]? = nil,
            availabilityZones: [XRayClientTypes.AvailabilityZoneDetail]? = nil,
            duration: Swift.Double? = nil,
            entryPoint: XRayClientTypes.ServiceId? = nil,
            errorRootCauses: [XRayClientTypes.ErrorRootCause]? = nil,
            faultRootCauses: [XRayClientTypes.FaultRootCause]? = nil,
            hasError: Swift.Bool? = nil,
            hasFault: Swift.Bool? = nil,
            hasThrottle: Swift.Bool? = nil,
            http: XRayClientTypes.Http? = nil,
            id: Swift.String? = nil,
            instanceIds: [XRayClientTypes.InstanceIdDetail]? = nil,
            isPartial: Swift.Bool? = nil,
            matchedEventTime: ClientRuntime.Date? = nil,
            resourceARNs: [XRayClientTypes.ResourceARNDetail]? = nil,
            responseTime: Swift.Double? = nil,
            responseTimeRootCauses: [XRayClientTypes.ResponseTimeRootCause]? = nil,
            revision: Swift.Int = 0,
            serviceIds: [XRayClientTypes.ServiceId]? = nil,
            users: [XRayClientTypes.TraceUser]? = nil
        )
        {
            self.annotations = annotations
            self.availabilityZones = availabilityZones
            self.duration = duration
            self.entryPoint = entryPoint
            self.errorRootCauses = errorRootCauses
            self.faultRootCauses = faultRootCauses
            self.hasError = hasError
            self.hasFault = hasFault
            self.hasThrottle = hasThrottle
            self.http = http
            self.id = id
            self.instanceIds = instanceIds
            self.isPartial = isPartial
            self.matchedEventTime = matchedEventTime
            self.resourceARNs = resourceARNs
            self.responseTime = responseTime
            self.responseTimeRootCauses = responseTimeRootCauses
            self.revision = revision
            self.serviceIds = serviceIds
            self.users = users
        }
    }

}
