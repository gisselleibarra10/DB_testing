// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension XRayClientTypes.Service: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountId = "AccountId"
        case durationHistogram = "DurationHistogram"
        case edges = "Edges"
        case endTime = "EndTime"
        case name = "Name"
        case names = "Names"
        case referenceId = "ReferenceId"
        case responseTimeHistogram = "ResponseTimeHistogram"
        case root = "Root"
        case startTime = "StartTime"
        case state = "State"
        case summaryStatistics = "SummaryStatistics"
        case type = "Type"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accountId = self.accountId {
            try encodeContainer.encode(accountId, forKey: .accountId)
        }
        if let durationHistogram = durationHistogram {
            var durationHistogramContainer = encodeContainer.nestedUnkeyedContainer(forKey: .durationHistogram)
            for histogram0 in durationHistogram {
                try durationHistogramContainer.encode(histogram0)
            }
        }
        if let edges = edges {
            var edgesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .edges)
            for edgelist0 in edges {
                try edgesContainer.encode(edgelist0)
            }
        }
        if let endTime = self.endTime {
            try encodeContainer.encode(endTime.timeIntervalSince1970, forKey: .endTime)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let names = names {
            var namesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .names)
            for servicenames0 in names {
                try namesContainer.encode(servicenames0)
            }
        }
        if let referenceId = self.referenceId {
            try encodeContainer.encode(referenceId, forKey: .referenceId)
        }
        if let responseTimeHistogram = responseTimeHistogram {
            var responseTimeHistogramContainer = encodeContainer.nestedUnkeyedContainer(forKey: .responseTimeHistogram)
            for histogram0 in responseTimeHistogram {
                try responseTimeHistogramContainer.encode(histogram0)
            }
        }
        if let root = self.root {
            try encodeContainer.encode(root, forKey: .root)
        }
        if let startTime = self.startTime {
            try encodeContainer.encode(startTime.timeIntervalSince1970, forKey: .startTime)
        }
        if let state = self.state {
            try encodeContainer.encode(state, forKey: .state)
        }
        if let summaryStatistics = self.summaryStatistics {
            try encodeContainer.encode(summaryStatistics, forKey: .summaryStatistics)
        }
        if let type = self.type {
            try encodeContainer.encode(type, forKey: .type)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let referenceIdDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .referenceId)
        referenceId = referenceIdDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let namesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .names)
        var namesDecoded0:[Swift.String]? = nil
        if let namesContainer = namesContainer {
            namesDecoded0 = [Swift.String]()
            for string0 in namesContainer {
                if let string0 = string0 {
                    namesDecoded0?.append(string0)
                }
            }
        }
        names = namesDecoded0
        let rootDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .root)
        root = rootDecoded
        let accountIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .accountId)
        accountId = accountIdDecoded
        let typeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .type)
        type = typeDecoded
        let stateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .state)
        state = stateDecoded
        let startTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .startTime)
        startTime = startTimeDecoded
        let endTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .endTime)
        endTime = endTimeDecoded
        let edgesContainer = try containerValues.decodeIfPresent([XRayClientTypes.Edge?].self, forKey: .edges)
        var edgesDecoded0:[XRayClientTypes.Edge]? = nil
        if let edgesContainer = edgesContainer {
            edgesDecoded0 = [XRayClientTypes.Edge]()
            for structure0 in edgesContainer {
                if let structure0 = structure0 {
                    edgesDecoded0?.append(structure0)
                }
            }
        }
        edges = edgesDecoded0
        let summaryStatisticsDecoded = try containerValues.decodeIfPresent(XRayClientTypes.ServiceStatistics.self, forKey: .summaryStatistics)
        summaryStatistics = summaryStatisticsDecoded
        let durationHistogramContainer = try containerValues.decodeIfPresent([XRayClientTypes.HistogramEntry?].self, forKey: .durationHistogram)
        var durationHistogramDecoded0:[XRayClientTypes.HistogramEntry]? = nil
        if let durationHistogramContainer = durationHistogramContainer {
            durationHistogramDecoded0 = [XRayClientTypes.HistogramEntry]()
            for structure0 in durationHistogramContainer {
                if let structure0 = structure0 {
                    durationHistogramDecoded0?.append(structure0)
                }
            }
        }
        durationHistogram = durationHistogramDecoded0
        let responseTimeHistogramContainer = try containerValues.decodeIfPresent([XRayClientTypes.HistogramEntry?].self, forKey: .responseTimeHistogram)
        var responseTimeHistogramDecoded0:[XRayClientTypes.HistogramEntry]? = nil
        if let responseTimeHistogramContainer = responseTimeHistogramContainer {
            responseTimeHistogramDecoded0 = [XRayClientTypes.HistogramEntry]()
            for structure0 in responseTimeHistogramContainer {
                if let structure0 = structure0 {
                    responseTimeHistogramDecoded0?.append(structure0)
                }
            }
        }
        responseTimeHistogram = responseTimeHistogramDecoded0
    }
}
