// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension DynamoDbStreamsClientTypes.StreamDescription: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationRequestDateTime = "CreationRequestDateTime"
        case keySchema = "KeySchema"
        case lastEvaluatedShardId = "LastEvaluatedShardId"
        case shards = "Shards"
        case streamArn = "StreamArn"
        case streamLabel = "StreamLabel"
        case streamStatus = "StreamStatus"
        case streamViewType = "StreamViewType"
        case tableName = "TableName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationRequestDateTime = self.creationRequestDateTime {
            try encodeContainer.encode(creationRequestDateTime.timeIntervalSince1970, forKey: .creationRequestDateTime)
        }
        if let keySchema = keySchema {
            var keySchemaContainer = encodeContainer.nestedUnkeyedContainer(forKey: .keySchema)
            for keyschema0 in keySchema {
                try keySchemaContainer.encode(keyschema0)
            }
        }
        if let lastEvaluatedShardId = self.lastEvaluatedShardId {
            try encodeContainer.encode(lastEvaluatedShardId, forKey: .lastEvaluatedShardId)
        }
        if let shards = shards {
            var shardsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .shards)
            for sharddescriptionlist0 in shards {
                try shardsContainer.encode(sharddescriptionlist0)
            }
        }
        if let streamArn = self.streamArn {
            try encodeContainer.encode(streamArn, forKey: .streamArn)
        }
        if let streamLabel = self.streamLabel {
            try encodeContainer.encode(streamLabel, forKey: .streamLabel)
        }
        if let streamStatus = self.streamStatus {
            try encodeContainer.encode(streamStatus.rawValue, forKey: .streamStatus)
        }
        if let streamViewType = self.streamViewType {
            try encodeContainer.encode(streamViewType.rawValue, forKey: .streamViewType)
        }
        if let tableName = self.tableName {
            try encodeContainer.encode(tableName, forKey: .tableName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let streamArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .streamArn)
        streamArn = streamArnDecoded
        let streamLabelDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .streamLabel)
        streamLabel = streamLabelDecoded
        let streamStatusDecoded = try containerValues.decodeIfPresent(DynamoDbStreamsClientTypes.StreamStatus.self, forKey: .streamStatus)
        streamStatus = streamStatusDecoded
        let streamViewTypeDecoded = try containerValues.decodeIfPresent(DynamoDbStreamsClientTypes.StreamViewType.self, forKey: .streamViewType)
        streamViewType = streamViewTypeDecoded
        let creationRequestDateTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationRequestDateTime)
        creationRequestDateTime = creationRequestDateTimeDecoded
        let tableNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tableName)
        tableName = tableNameDecoded
        let keySchemaContainer = try containerValues.decodeIfPresent([DynamoDbStreamsClientTypes.KeySchemaElement?].self, forKey: .keySchema)
        var keySchemaDecoded0:[DynamoDbStreamsClientTypes.KeySchemaElement]? = nil
        if let keySchemaContainer = keySchemaContainer {
            keySchemaDecoded0 = [DynamoDbStreamsClientTypes.KeySchemaElement]()
            for structure0 in keySchemaContainer {
                if let structure0 = structure0 {
                    keySchemaDecoded0?.append(structure0)
                }
            }
        }
        keySchema = keySchemaDecoded0
        let shardsContainer = try containerValues.decodeIfPresent([DynamoDbStreamsClientTypes.Shard?].self, forKey: .shards)
        var shardsDecoded0:[DynamoDbStreamsClientTypes.Shard]? = nil
        if let shardsContainer = shardsContainer {
            shardsDecoded0 = [DynamoDbStreamsClientTypes.Shard]()
            for structure0 in shardsContainer {
                if let structure0 = structure0 {
                    shardsDecoded0?.append(structure0)
                }
            }
        }
        shards = shardsDecoded0
        let lastEvaluatedShardIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastEvaluatedShardId)
        lastEvaluatedShardId = lastEvaluatedShardIdDecoded
    }
}
