// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension DynamoDbStreamsClientTypes {
    /// A description of a unique event within a stream.
    public struct Record: Swift.Equatable {
        /// The region in which the GetRecords request was received.
        public var awsRegion: Swift.String?
        /// The main body of the stream record, containing all of the DynamoDB-specific fields.
        public var dynamodb: DynamoDbStreamsClientTypes.StreamRecord?
        /// A globally unique identifier for the event that was recorded in this stream record.
        public var eventID: Swift.String?
        /// The type of data modification that was performed on the DynamoDB table:
        ///
        /// * INSERT - a new item was added to the table.
        ///
        /// * MODIFY - one or more of an existing item's attributes were modified.
        ///
        /// * REMOVE - the item was deleted from the table
        public var eventName: DynamoDbStreamsClientTypes.OperationType?
        /// The AWS service from which the stream record originated. For DynamoDB Streams, this is aws:dynamodb.
        public var eventSource: Swift.String?
        /// The version number of the stream record format. This number is updated whenever the structure of Record is modified. Client applications must not assume that eventVersion will remain at a particular value, as this number is subject to change at any time. In general, eventVersion will only increase as the low-level DynamoDB Streams API evolves.
        public var eventVersion: Swift.String?
        /// Items that are deleted by the Time to Live process after expiration have the following fields:
        ///
        /// * Records[].userIdentity.type "Service"
        ///
        /// * Records[].userIdentity.principalId "dynamodb.amazonaws.com"
        public var userIdentity: DynamoDbStreamsClientTypes.Identity?

        public init (
            awsRegion: Swift.String? = nil,
            dynamodb: DynamoDbStreamsClientTypes.StreamRecord? = nil,
            eventID: Swift.String? = nil,
            eventName: DynamoDbStreamsClientTypes.OperationType? = nil,
            eventSource: Swift.String? = nil,
            eventVersion: Swift.String? = nil,
            userIdentity: DynamoDbStreamsClientTypes.Identity? = nil
        )
        {
            self.awsRegion = awsRegion
            self.dynamodb = dynamodb
            self.eventID = eventID
            self.eventName = eventName
            self.eventSource = eventSource
            self.eventVersion = eventVersion
            self.userIdentity = userIdentity
        }
    }

}
