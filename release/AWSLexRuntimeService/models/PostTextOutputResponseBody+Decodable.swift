// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct PostTextOutputResponseBody: Swift.Equatable {
    let intentName: Swift.String?
    let nluIntentConfidence: LexRuntimeClientTypes.IntentConfidence?
    let alternativeIntents: [LexRuntimeClientTypes.PredictedIntent]?
    let slots: [Swift.String:Swift.String]?
    let sessionAttributes: [Swift.String:Swift.String]?
    let message: Swift.String?
    let sentimentResponse: LexRuntimeClientTypes.SentimentResponse?
    let messageFormat: LexRuntimeClientTypes.MessageFormatType?
    let dialogState: LexRuntimeClientTypes.DialogState?
    let slotToElicit: Swift.String?
    let responseCard: LexRuntimeClientTypes.ResponseCard?
    let sessionId: Swift.String?
    let botVersion: Swift.String?
    let activeContexts: [LexRuntimeClientTypes.ActiveContext]?
}

extension PostTextOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case activeContexts
        case alternativeIntents
        case botVersion
        case dialogState
        case intentName
        case message
        case messageFormat
        case nluIntentConfidence
        case responseCard
        case sentimentResponse
        case sessionAttributes
        case sessionId
        case slotToElicit
        case slots
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let intentNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .intentName)
        intentName = intentNameDecoded
        let nluIntentConfidenceDecoded = try containerValues.decodeIfPresent(LexRuntimeClientTypes.IntentConfidence.self, forKey: .nluIntentConfidence)
        nluIntentConfidence = nluIntentConfidenceDecoded
        let alternativeIntentsContainer = try containerValues.decodeIfPresent([LexRuntimeClientTypes.PredictedIntent?].self, forKey: .alternativeIntents)
        var alternativeIntentsDecoded0:[LexRuntimeClientTypes.PredictedIntent]? = nil
        if let alternativeIntentsContainer = alternativeIntentsContainer {
            alternativeIntentsDecoded0 = [LexRuntimeClientTypes.PredictedIntent]()
            for structure0 in alternativeIntentsContainer {
                if let structure0 = structure0 {
                    alternativeIntentsDecoded0?.append(structure0)
                }
            }
        }
        alternativeIntents = alternativeIntentsDecoded0
        let slotsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .slots)
        var slotsDecoded0: [Swift.String:Swift.String]? = nil
        if let slotsContainer = slotsContainer {
            slotsDecoded0 = [Swift.String:Swift.String]()
            for (key0, string0) in slotsContainer {
                if let string0 = string0 {
                    slotsDecoded0?[key0] = string0
                }
            }
        }
        slots = slotsDecoded0
        let sessionAttributesContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .sessionAttributes)
        var sessionAttributesDecoded0: [Swift.String:Swift.String]? = nil
        if let sessionAttributesContainer = sessionAttributesContainer {
            sessionAttributesDecoded0 = [Swift.String:Swift.String]()
            for (key0, string0) in sessionAttributesContainer {
                if let string0 = string0 {
                    sessionAttributesDecoded0?[key0] = string0
                }
            }
        }
        sessionAttributes = sessionAttributesDecoded0
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let sentimentResponseDecoded = try containerValues.decodeIfPresent(LexRuntimeClientTypes.SentimentResponse.self, forKey: .sentimentResponse)
        sentimentResponse = sentimentResponseDecoded
        let messageFormatDecoded = try containerValues.decodeIfPresent(LexRuntimeClientTypes.MessageFormatType.self, forKey: .messageFormat)
        messageFormat = messageFormatDecoded
        let dialogStateDecoded = try containerValues.decodeIfPresent(LexRuntimeClientTypes.DialogState.self, forKey: .dialogState)
        dialogState = dialogStateDecoded
        let slotToElicitDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .slotToElicit)
        slotToElicit = slotToElicitDecoded
        let responseCardDecoded = try containerValues.decodeIfPresent(LexRuntimeClientTypes.ResponseCard.self, forKey: .responseCard)
        responseCard = responseCardDecoded
        let sessionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sessionId)
        sessionId = sessionIdDecoded
        let botVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .botVersion)
        botVersion = botVersionDecoded
        let activeContextsContainer = try containerValues.decodeIfPresent([LexRuntimeClientTypes.ActiveContext?].self, forKey: .activeContexts)
        var activeContextsDecoded0:[LexRuntimeClientTypes.ActiveContext]? = nil
        if let activeContextsContainer = activeContextsContainer {
            activeContextsDecoded0 = [LexRuntimeClientTypes.ActiveContext]()
            for structure0 in activeContextsContainer {
                if let structure0 = structure0 {
                    activeContextsDecoded0?.append(structure0)
                }
            }
        }
        activeContexts = activeContextsDecoded0
    }
}
