// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetSessionOutputResponseBody: Swift.Equatable {
    let recentIntentSummaryView: [LexRuntimeClientTypes.IntentSummary]?
    let sessionAttributes: [Swift.String:Swift.String]?
    let sessionId: Swift.String?
    let dialogAction: LexRuntimeClientTypes.DialogAction?
    let activeContexts: [LexRuntimeClientTypes.ActiveContext]?
}

extension GetSessionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case activeContexts
        case dialogAction
        case recentIntentSummaryView
        case sessionAttributes
        case sessionId
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let recentIntentSummaryViewContainer = try containerValues.decodeIfPresent([LexRuntimeClientTypes.IntentSummary?].self, forKey: .recentIntentSummaryView)
        var recentIntentSummaryViewDecoded0:[LexRuntimeClientTypes.IntentSummary]? = nil
        if let recentIntentSummaryViewContainer = recentIntentSummaryViewContainer {
            recentIntentSummaryViewDecoded0 = [LexRuntimeClientTypes.IntentSummary]()
            for structure0 in recentIntentSummaryViewContainer {
                if let structure0 = structure0 {
                    recentIntentSummaryViewDecoded0?.append(structure0)
                }
            }
        }
        recentIntentSummaryView = recentIntentSummaryViewDecoded0
        let sessionAttributesContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .sessionAttributes)
        var sessionAttributesDecoded0: [Swift.String:Swift.String]? = nil
        if let sessionAttributesContainer = sessionAttributesContainer {
            sessionAttributesDecoded0 = [Swift.String:Swift.String]()
            for (key0, string0) in sessionAttributesContainer {
                if let string0 = string0 {
                    sessionAttributesDecoded0?[key0] = string0
                }
            }
        }
        sessionAttributes = sessionAttributesDecoded0
        let sessionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sessionId)
        sessionId = sessionIdDecoded
        let dialogActionDecoded = try containerValues.decodeIfPresent(LexRuntimeClientTypes.DialogAction.self, forKey: .dialogAction)
        dialogAction = dialogActionDecoded
        let activeContextsContainer = try containerValues.decodeIfPresent([LexRuntimeClientTypes.ActiveContext?].self, forKey: .activeContexts)
        var activeContextsDecoded0:[LexRuntimeClientTypes.ActiveContext]? = nil
        if let activeContextsContainer = activeContextsContainer {
            activeContextsDecoded0 = [LexRuntimeClientTypes.ActiveContext]()
            for structure0 in activeContextsContainer {
                if let structure0 = structure0 {
                    activeContextsDecoded0?.append(structure0)
                }
            }
        }
        activeContexts = activeContextsDecoded0
    }
}
