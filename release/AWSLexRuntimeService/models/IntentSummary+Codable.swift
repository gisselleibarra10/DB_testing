// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension LexRuntimeClientTypes.IntentSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case checkpointLabel
        case confirmationStatus
        case dialogActionType
        case fulfillmentState
        case intentName
        case slotToElicit
        case slots
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let checkpointLabel = self.checkpointLabel {
            try encodeContainer.encode(checkpointLabel, forKey: .checkpointLabel)
        }
        if let confirmationStatus = self.confirmationStatus {
            try encodeContainer.encode(confirmationStatus.rawValue, forKey: .confirmationStatus)
        }
        if let dialogActionType = self.dialogActionType {
            try encodeContainer.encode(dialogActionType.rawValue, forKey: .dialogActionType)
        }
        if let fulfillmentState = self.fulfillmentState {
            try encodeContainer.encode(fulfillmentState.rawValue, forKey: .fulfillmentState)
        }
        if let intentName = self.intentName {
            try encodeContainer.encode(intentName, forKey: .intentName)
        }
        if let slotToElicit = self.slotToElicit {
            try encodeContainer.encode(slotToElicit, forKey: .slotToElicit)
        }
        if let slots = slots {
            var slotsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .slots)
            for (dictKey0, stringmap0) in slots {
                try slotsContainer.encode(stringmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let intentNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .intentName)
        intentName = intentNameDecoded
        let checkpointLabelDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .checkpointLabel)
        checkpointLabel = checkpointLabelDecoded
        let slotsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .slots)
        var slotsDecoded0: [Swift.String:Swift.String]? = nil
        if let slotsContainer = slotsContainer {
            slotsDecoded0 = [Swift.String:Swift.String]()
            for (key0, string0) in slotsContainer {
                if let string0 = string0 {
                    slotsDecoded0?[key0] = string0
                }
            }
        }
        slots = slotsDecoded0
        let confirmationStatusDecoded = try containerValues.decodeIfPresent(LexRuntimeClientTypes.ConfirmationStatus.self, forKey: .confirmationStatus)
        confirmationStatus = confirmationStatusDecoded
        let dialogActionTypeDecoded = try containerValues.decodeIfPresent(LexRuntimeClientTypes.DialogActionType.self, forKey: .dialogActionType)
        dialogActionType = dialogActionTypeDecoded
        let fulfillmentStateDecoded = try containerValues.decodeIfPresent(LexRuntimeClientTypes.FulfillmentState.self, forKey: .fulfillmentState)
        fulfillmentState = fulfillmentStateDecoded
        let slotToElicitDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .slotToElicit)
        slotToElicit = slotToElicitDecoded
    }
}
