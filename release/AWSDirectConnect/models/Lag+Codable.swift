// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension DirectConnectClientTypes.Lag: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case allowsHostedConnections
        case awsDevice
        case awsDeviceV2
        case awsLogicalDeviceId
        case connections
        case connectionsBandwidth
        case encryptionMode
        case hasLogicalRedundancy
        case jumboFrameCapable
        case lagId
        case lagName
        case lagState
        case location
        case macSecCapable
        case macSecKeys
        case minimumLinks
        case numberOfConnections
        case ownerAccount
        case providerName
        case region
        case tags
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if allowsHostedConnections != false {
            try encodeContainer.encode(allowsHostedConnections, forKey: .allowsHostedConnections)
        }
        if let awsDevice = self.awsDevice {
            try encodeContainer.encode(awsDevice, forKey: .awsDevice)
        }
        if let awsDeviceV2 = self.awsDeviceV2 {
            try encodeContainer.encode(awsDeviceV2, forKey: .awsDeviceV2)
        }
        if let awsLogicalDeviceId = self.awsLogicalDeviceId {
            try encodeContainer.encode(awsLogicalDeviceId, forKey: .awsLogicalDeviceId)
        }
        if let connections = connections {
            var connectionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .connections)
            for connectionlist0 in connections {
                try connectionsContainer.encode(connectionlist0)
            }
        }
        if let connectionsBandwidth = self.connectionsBandwidth {
            try encodeContainer.encode(connectionsBandwidth, forKey: .connectionsBandwidth)
        }
        if let encryptionMode = self.encryptionMode {
            try encodeContainer.encode(encryptionMode, forKey: .encryptionMode)
        }
        if let hasLogicalRedundancy = self.hasLogicalRedundancy {
            try encodeContainer.encode(hasLogicalRedundancy.rawValue, forKey: .hasLogicalRedundancy)
        }
        if let jumboFrameCapable = self.jumboFrameCapable {
            try encodeContainer.encode(jumboFrameCapable, forKey: .jumboFrameCapable)
        }
        if let lagId = self.lagId {
            try encodeContainer.encode(lagId, forKey: .lagId)
        }
        if let lagName = self.lagName {
            try encodeContainer.encode(lagName, forKey: .lagName)
        }
        if let lagState = self.lagState {
            try encodeContainer.encode(lagState.rawValue, forKey: .lagState)
        }
        if let location = self.location {
            try encodeContainer.encode(location, forKey: .location)
        }
        if let macSecCapable = self.macSecCapable {
            try encodeContainer.encode(macSecCapable, forKey: .macSecCapable)
        }
        if let macSecKeys = macSecKeys {
            var macSecKeysContainer = encodeContainer.nestedUnkeyedContainer(forKey: .macSecKeys)
            for macseckeylist0 in macSecKeys {
                try macSecKeysContainer.encode(macseckeylist0)
            }
        }
        if minimumLinks != 0 {
            try encodeContainer.encode(minimumLinks, forKey: .minimumLinks)
        }
        if numberOfConnections != 0 {
            try encodeContainer.encode(numberOfConnections, forKey: .numberOfConnections)
        }
        if let ownerAccount = self.ownerAccount {
            try encodeContainer.encode(ownerAccount, forKey: .ownerAccount)
        }
        if let providerName = self.providerName {
            try encodeContainer.encode(providerName, forKey: .providerName)
        }
        if let region = self.region {
            try encodeContainer.encode(region, forKey: .region)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let connectionsBandwidthDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .connectionsBandwidth)
        connectionsBandwidth = connectionsBandwidthDecoded
        let numberOfConnectionsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .numberOfConnections) ?? 0
        numberOfConnections = numberOfConnectionsDecoded
        let lagIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lagId)
        lagId = lagIdDecoded
        let ownerAccountDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ownerAccount)
        ownerAccount = ownerAccountDecoded
        let lagNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lagName)
        lagName = lagNameDecoded
        let lagStateDecoded = try containerValues.decodeIfPresent(DirectConnectClientTypes.LagState.self, forKey: .lagState)
        lagState = lagStateDecoded
        let locationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .location)
        location = locationDecoded
        let regionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .region)
        region = regionDecoded
        let minimumLinksDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .minimumLinks) ?? 0
        minimumLinks = minimumLinksDecoded
        let awsDeviceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .awsDevice)
        awsDevice = awsDeviceDecoded
        let awsDeviceV2Decoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .awsDeviceV2)
        awsDeviceV2 = awsDeviceV2Decoded
        let awsLogicalDeviceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .awsLogicalDeviceId)
        awsLogicalDeviceId = awsLogicalDeviceIdDecoded
        let connectionsContainer = try containerValues.decodeIfPresent([DirectConnectClientTypes.Connection?].self, forKey: .connections)
        var connectionsDecoded0:[DirectConnectClientTypes.Connection]? = nil
        if let connectionsContainer = connectionsContainer {
            connectionsDecoded0 = [DirectConnectClientTypes.Connection]()
            for structure0 in connectionsContainer {
                if let structure0 = structure0 {
                    connectionsDecoded0?.append(structure0)
                }
            }
        }
        connections = connectionsDecoded0
        let allowsHostedConnectionsDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .allowsHostedConnections) ?? false
        allowsHostedConnections = allowsHostedConnectionsDecoded
        let jumboFrameCapableDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .jumboFrameCapable)
        jumboFrameCapable = jumboFrameCapableDecoded
        let hasLogicalRedundancyDecoded = try containerValues.decodeIfPresent(DirectConnectClientTypes.HasLogicalRedundancy.self, forKey: .hasLogicalRedundancy)
        hasLogicalRedundancy = hasLogicalRedundancyDecoded
        let tagsContainer = try containerValues.decodeIfPresent([DirectConnectClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[DirectConnectClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [DirectConnectClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let providerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .providerName)
        providerName = providerNameDecoded
        let macSecCapableDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .macSecCapable)
        macSecCapable = macSecCapableDecoded
        let encryptionModeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .encryptionMode)
        encryptionMode = encryptionModeDecoded
        let macSecKeysContainer = try containerValues.decodeIfPresent([DirectConnectClientTypes.MacSecKey?].self, forKey: .macSecKeys)
        var macSecKeysDecoded0:[DirectConnectClientTypes.MacSecKey]? = nil
        if let macSecKeysContainer = macSecKeysContainer {
            macSecKeysDecoded0 = [DirectConnectClientTypes.MacSecKey]()
            for structure0 in macSecKeysContainer {
                if let structure0 = structure0 {
                    macSecKeysDecoded0?.append(structure0)
                }
            }
        }
        macSecKeys = macSecKeysDecoded0
    }
}
