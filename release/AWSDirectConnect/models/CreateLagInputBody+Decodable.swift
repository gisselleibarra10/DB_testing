// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateLagInputBody: Swift.Equatable {
    let numberOfConnections: Swift.Int
    let location: Swift.String?
    let connectionsBandwidth: Swift.String?
    let lagName: Swift.String?
    let connectionId: Swift.String?
    let tags: [DirectConnectClientTypes.Tag]?
    let childConnectionTags: [DirectConnectClientTypes.Tag]?
    let providerName: Swift.String?
    let requestMACSec: Swift.Bool?
}

extension CreateLagInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case childConnectionTags
        case connectionId
        case connectionsBandwidth
        case lagName
        case location
        case numberOfConnections
        case providerName
        case requestMACSec
        case tags
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let numberOfConnectionsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .numberOfConnections) ?? 0
        numberOfConnections = numberOfConnectionsDecoded
        let locationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .location)
        location = locationDecoded
        let connectionsBandwidthDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .connectionsBandwidth)
        connectionsBandwidth = connectionsBandwidthDecoded
        let lagNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lagName)
        lagName = lagNameDecoded
        let connectionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .connectionId)
        connectionId = connectionIdDecoded
        let tagsContainer = try containerValues.decodeIfPresent([DirectConnectClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[DirectConnectClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [DirectConnectClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let childConnectionTagsContainer = try containerValues.decodeIfPresent([DirectConnectClientTypes.Tag?].self, forKey: .childConnectionTags)
        var childConnectionTagsDecoded0:[DirectConnectClientTypes.Tag]? = nil
        if let childConnectionTagsContainer = childConnectionTagsContainer {
            childConnectionTagsDecoded0 = [DirectConnectClientTypes.Tag]()
            for structure0 in childConnectionTagsContainer {
                if let structure0 = structure0 {
                    childConnectionTagsDecoded0?.append(structure0)
                }
            }
        }
        childConnectionTags = childConnectionTagsDecoded0
        let providerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .providerName)
        providerName = providerNameDecoded
        let requestMACSecDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .requestMACSec)
        requestMACSec = requestMACSecDecoded
    }
}
