// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension DirectConnectClientTypes.Interconnect: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case awsDevice
        case awsDeviceV2
        case awsLogicalDeviceId
        case bandwidth
        case hasLogicalRedundancy
        case interconnectId
        case interconnectName
        case interconnectState
        case jumboFrameCapable
        case lagId
        case loaIssueTime
        case location
        case providerName
        case region
        case tags
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let awsDevice = self.awsDevice {
            try encodeContainer.encode(awsDevice, forKey: .awsDevice)
        }
        if let awsDeviceV2 = self.awsDeviceV2 {
            try encodeContainer.encode(awsDeviceV2, forKey: .awsDeviceV2)
        }
        if let awsLogicalDeviceId = self.awsLogicalDeviceId {
            try encodeContainer.encode(awsLogicalDeviceId, forKey: .awsLogicalDeviceId)
        }
        if let bandwidth = self.bandwidth {
            try encodeContainer.encode(bandwidth, forKey: .bandwidth)
        }
        if let hasLogicalRedundancy = self.hasLogicalRedundancy {
            try encodeContainer.encode(hasLogicalRedundancy.rawValue, forKey: .hasLogicalRedundancy)
        }
        if let interconnectId = self.interconnectId {
            try encodeContainer.encode(interconnectId, forKey: .interconnectId)
        }
        if let interconnectName = self.interconnectName {
            try encodeContainer.encode(interconnectName, forKey: .interconnectName)
        }
        if let interconnectState = self.interconnectState {
            try encodeContainer.encode(interconnectState.rawValue, forKey: .interconnectState)
        }
        if let jumboFrameCapable = self.jumboFrameCapable {
            try encodeContainer.encode(jumboFrameCapable, forKey: .jumboFrameCapable)
        }
        if let lagId = self.lagId {
            try encodeContainer.encode(lagId, forKey: .lagId)
        }
        if let loaIssueTime = self.loaIssueTime {
            try encodeContainer.encode(loaIssueTime.timeIntervalSince1970, forKey: .loaIssueTime)
        }
        if let location = self.location {
            try encodeContainer.encode(location, forKey: .location)
        }
        if let providerName = self.providerName {
            try encodeContainer.encode(providerName, forKey: .providerName)
        }
        if let region = self.region {
            try encodeContainer.encode(region, forKey: .region)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let interconnectIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .interconnectId)
        interconnectId = interconnectIdDecoded
        let interconnectNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .interconnectName)
        interconnectName = interconnectNameDecoded
        let interconnectStateDecoded = try containerValues.decodeIfPresent(DirectConnectClientTypes.InterconnectState.self, forKey: .interconnectState)
        interconnectState = interconnectStateDecoded
        let regionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .region)
        region = regionDecoded
        let locationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .location)
        location = locationDecoded
        let bandwidthDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .bandwidth)
        bandwidth = bandwidthDecoded
        let loaIssueTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .loaIssueTime)
        loaIssueTime = loaIssueTimeDecoded
        let lagIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lagId)
        lagId = lagIdDecoded
        let awsDeviceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .awsDevice)
        awsDevice = awsDeviceDecoded
        let jumboFrameCapableDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .jumboFrameCapable)
        jumboFrameCapable = jumboFrameCapableDecoded
        let awsDeviceV2Decoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .awsDeviceV2)
        awsDeviceV2 = awsDeviceV2Decoded
        let awsLogicalDeviceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .awsLogicalDeviceId)
        awsLogicalDeviceId = awsLogicalDeviceIdDecoded
        let hasLogicalRedundancyDecoded = try containerValues.decodeIfPresent(DirectConnectClientTypes.HasLogicalRedundancy.self, forKey: .hasLogicalRedundancy)
        hasLogicalRedundancy = hasLogicalRedundancyDecoded
        let tagsContainer = try containerValues.decodeIfPresent([DirectConnectClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[DirectConnectClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [DirectConnectClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let providerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .providerName)
        providerName = providerNameDecoded
    }
}
