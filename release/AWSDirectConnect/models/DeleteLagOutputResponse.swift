// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// Information about a link aggregation group (LAG).
public struct DeleteLagOutputResponse: Swift.Equatable {
    /// Indicates whether the LAG can host other connections.
    public var allowsHostedConnections: Swift.Bool
    /// The Direct Connect endpoint that hosts the LAG.
    @available(*, deprecated)
    public var awsDevice: Swift.String?
    /// The Direct Connect endpoint that hosts the LAG.
    public var awsDeviceV2: Swift.String?
    /// The Direct Connect endpoint that terminates the logical connection. This device might be different than the device that terminates the physical connection.
    public var awsLogicalDeviceId: Swift.String?
    /// The connections bundled by the LAG.
    public var connections: [DirectConnectClientTypes.Connection]?
    /// The individual bandwidth of the physical connections bundled by the LAG. The possible values are 1Gbps and 10Gbps.
    public var connectionsBandwidth: Swift.String?
    /// The LAG MAC Security (MACsec) encryption mode. The valid values are no_encrypt, should_encrypt, and must_encrypt.
    public var encryptionMode: Swift.String?
    /// Indicates whether the LAG supports a secondary BGP peer in the same address family (IPv4/IPv6).
    public var hasLogicalRedundancy: DirectConnectClientTypes.HasLogicalRedundancy?
    /// Indicates whether jumbo frames (9001 MTU) are supported.
    public var jumboFrameCapable: Swift.Bool?
    /// The ID of the LAG.
    public var lagId: Swift.String?
    /// The name of the LAG.
    public var lagName: Swift.String?
    /// The state of the LAG. The following are the possible values:
    ///
    /// * requested: The initial state of a LAG. The LAG stays in the requested state until the Letter of Authorization (LOA) is available.
    ///
    /// * pending: The LAG has been approved and is being initialized.
    ///
    /// * available: The network link is established and the LAG is ready for use.
    ///
    /// * down: The network link is down.
    ///
    /// * deleting: The LAG is being deleted.
    ///
    /// * deleted: The LAG is deleted.
    ///
    /// * unknown: The state of the LAG is not available.
    public var lagState: DirectConnectClientTypes.LagState?
    /// The location of the LAG.
    public var location: Swift.String?
    /// Indicates whether the LAG supports MAC Security (MACsec).
    public var macSecCapable: Swift.Bool?
    /// The MAC Security (MACsec) security keys associated with the LAG.
    public var macSecKeys: [DirectConnectClientTypes.MacSecKey]?
    /// The minimum number of physical dedicated connections that must be operational for the LAG itself to be operational.
    public var minimumLinks: Swift.Int
    /// The number of physical dedicated connections bundled by the LAG, up to a maximum of 10.
    public var numberOfConnections: Swift.Int
    /// The ID of the Amazon Web Services account that owns the LAG.
    public var ownerAccount: Swift.String?
    /// The name of the service provider associated with the LAG.
    public var providerName: Swift.String?
    /// The Amazon Web Services Region where the connection is located.
    public var region: Swift.String?
    /// The tags associated with the LAG.
    public var tags: [DirectConnectClientTypes.Tag]?

    public init (
        allowsHostedConnections: Swift.Bool = false,
        awsDevice: Swift.String? = nil,
        awsDeviceV2: Swift.String? = nil,
        awsLogicalDeviceId: Swift.String? = nil,
        connections: [DirectConnectClientTypes.Connection]? = nil,
        connectionsBandwidth: Swift.String? = nil,
        encryptionMode: Swift.String? = nil,
        hasLogicalRedundancy: DirectConnectClientTypes.HasLogicalRedundancy? = nil,
        jumboFrameCapable: Swift.Bool? = nil,
        lagId: Swift.String? = nil,
        lagName: Swift.String? = nil,
        lagState: DirectConnectClientTypes.LagState? = nil,
        location: Swift.String? = nil,
        macSecCapable: Swift.Bool? = nil,
        macSecKeys: [DirectConnectClientTypes.MacSecKey]? = nil,
        minimumLinks: Swift.Int = 0,
        numberOfConnections: Swift.Int = 0,
        ownerAccount: Swift.String? = nil,
        providerName: Swift.String? = nil,
        region: Swift.String? = nil,
        tags: [DirectConnectClientTypes.Tag]? = nil
    )
    {
        self.allowsHostedConnections = allowsHostedConnections
        self.awsDevice = awsDevice
        self.awsDeviceV2 = awsDeviceV2
        self.awsLogicalDeviceId = awsLogicalDeviceId
        self.connections = connections
        self.connectionsBandwidth = connectionsBandwidth
        self.encryptionMode = encryptionMode
        self.hasLogicalRedundancy = hasLogicalRedundancy
        self.jumboFrameCapable = jumboFrameCapable
        self.lagId = lagId
        self.lagName = lagName
        self.lagState = lagState
        self.location = location
        self.macSecCapable = macSecCapable
        self.macSecKeys = macSecKeys
        self.minimumLinks = minimumLinks
        self.numberOfConnections = numberOfConnections
        self.ownerAccount = ownerAccount
        self.providerName = providerName
        self.region = region
        self.tags = tags
    }
}
