// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension DirectConnectClientTypes.RouterType: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case platform
        case routerTypeIdentifier
        case software
        case vendor
        case xsltTemplateName
        case xsltTemplateNameForMacSec
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let platform = self.platform {
            try encodeContainer.encode(platform, forKey: .platform)
        }
        if let routerTypeIdentifier = self.routerTypeIdentifier {
            try encodeContainer.encode(routerTypeIdentifier, forKey: .routerTypeIdentifier)
        }
        if let software = self.software {
            try encodeContainer.encode(software, forKey: .software)
        }
        if let vendor = self.vendor {
            try encodeContainer.encode(vendor, forKey: .vendor)
        }
        if let xsltTemplateName = self.xsltTemplateName {
            try encodeContainer.encode(xsltTemplateName, forKey: .xsltTemplateName)
        }
        if let xsltTemplateNameForMacSec = self.xsltTemplateNameForMacSec {
            try encodeContainer.encode(xsltTemplateNameForMacSec, forKey: .xsltTemplateNameForMacSec)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let vendorDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vendor)
        vendor = vendorDecoded
        let platformDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .platform)
        platform = platformDecoded
        let softwareDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .software)
        software = softwareDecoded
        let xsltTemplateNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .xsltTemplateName)
        xsltTemplateName = xsltTemplateNameDecoded
        let xsltTemplateNameForMacSecDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .xsltTemplateNameForMacSec)
        xsltTemplateNameForMacSec = xsltTemplateNameForMacSecDecoded
        let routerTypeIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .routerTypeIdentifier)
        routerTypeIdentifier = routerTypeIdentifierDecoded
    }
}
