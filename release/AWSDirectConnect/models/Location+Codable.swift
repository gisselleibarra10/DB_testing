// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension DirectConnectClientTypes.Location: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case availableMacSecPortSpeeds
        case availablePortSpeeds
        case availableProviders
        case locationCode
        case locationName
        case region
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let availableMacSecPortSpeeds = availableMacSecPortSpeeds {
            var availableMacSecPortSpeedsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .availableMacSecPortSpeeds)
            for availablemacsecportspeeds0 in availableMacSecPortSpeeds {
                try availableMacSecPortSpeedsContainer.encode(availablemacsecportspeeds0)
            }
        }
        if let availablePortSpeeds = availablePortSpeeds {
            var availablePortSpeedsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .availablePortSpeeds)
            for availableportspeeds0 in availablePortSpeeds {
                try availablePortSpeedsContainer.encode(availableportspeeds0)
            }
        }
        if let availableProviders = availableProviders {
            var availableProvidersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .availableProviders)
            for providerlist0 in availableProviders {
                try availableProvidersContainer.encode(providerlist0)
            }
        }
        if let locationCode = self.locationCode {
            try encodeContainer.encode(locationCode, forKey: .locationCode)
        }
        if let locationName = self.locationName {
            try encodeContainer.encode(locationName, forKey: .locationName)
        }
        if let region = self.region {
            try encodeContainer.encode(region, forKey: .region)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let locationCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .locationCode)
        locationCode = locationCodeDecoded
        let locationNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .locationName)
        locationName = locationNameDecoded
        let regionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .region)
        region = regionDecoded
        let availablePortSpeedsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .availablePortSpeeds)
        var availablePortSpeedsDecoded0:[Swift.String]? = nil
        if let availablePortSpeedsContainer = availablePortSpeedsContainer {
            availablePortSpeedsDecoded0 = [Swift.String]()
            for string0 in availablePortSpeedsContainer {
                if let string0 = string0 {
                    availablePortSpeedsDecoded0?.append(string0)
                }
            }
        }
        availablePortSpeeds = availablePortSpeedsDecoded0
        let availableProvidersContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .availableProviders)
        var availableProvidersDecoded0:[Swift.String]? = nil
        if let availableProvidersContainer = availableProvidersContainer {
            availableProvidersDecoded0 = [Swift.String]()
            for string0 in availableProvidersContainer {
                if let string0 = string0 {
                    availableProvidersDecoded0?.append(string0)
                }
            }
        }
        availableProviders = availableProvidersDecoded0
        let availableMacSecPortSpeedsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .availableMacSecPortSpeeds)
        var availableMacSecPortSpeedsDecoded0:[Swift.String]? = nil
        if let availableMacSecPortSpeedsContainer = availableMacSecPortSpeedsContainer {
            availableMacSecPortSpeedsDecoded0 = [Swift.String]()
            for string0 in availableMacSecPortSpeedsContainer {
                if let string0 = string0 {
                    availableMacSecPortSpeedsDecoded0?.append(string0)
                }
            }
        }
        availableMacSecPortSpeeds = availableMacSecPortSpeedsDecoded0
    }
}
