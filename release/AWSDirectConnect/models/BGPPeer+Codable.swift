// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension DirectConnectClientTypes.BGPPeer: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case addressFamily
        case amazonAddress
        case asn
        case authKey
        case awsDeviceV2
        case awsLogicalDeviceId
        case bgpPeerId
        case bgpPeerState
        case bgpStatus
        case customerAddress
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let addressFamily = self.addressFamily {
            try encodeContainer.encode(addressFamily.rawValue, forKey: .addressFamily)
        }
        if let amazonAddress = self.amazonAddress {
            try encodeContainer.encode(amazonAddress, forKey: .amazonAddress)
        }
        if asn != 0 {
            try encodeContainer.encode(asn, forKey: .asn)
        }
        if let authKey = self.authKey {
            try encodeContainer.encode(authKey, forKey: .authKey)
        }
        if let awsDeviceV2 = self.awsDeviceV2 {
            try encodeContainer.encode(awsDeviceV2, forKey: .awsDeviceV2)
        }
        if let awsLogicalDeviceId = self.awsLogicalDeviceId {
            try encodeContainer.encode(awsLogicalDeviceId, forKey: .awsLogicalDeviceId)
        }
        if let bgpPeerId = self.bgpPeerId {
            try encodeContainer.encode(bgpPeerId, forKey: .bgpPeerId)
        }
        if let bgpPeerState = self.bgpPeerState {
            try encodeContainer.encode(bgpPeerState.rawValue, forKey: .bgpPeerState)
        }
        if let bgpStatus = self.bgpStatus {
            try encodeContainer.encode(bgpStatus.rawValue, forKey: .bgpStatus)
        }
        if let customerAddress = self.customerAddress {
            try encodeContainer.encode(customerAddress, forKey: .customerAddress)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let bgpPeerIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .bgpPeerId)
        bgpPeerId = bgpPeerIdDecoded
        let asnDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .asn) ?? 0
        asn = asnDecoded
        let authKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .authKey)
        authKey = authKeyDecoded
        let addressFamilyDecoded = try containerValues.decodeIfPresent(DirectConnectClientTypes.AddressFamily.self, forKey: .addressFamily)
        addressFamily = addressFamilyDecoded
        let amazonAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .amazonAddress)
        amazonAddress = amazonAddressDecoded
        let customerAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .customerAddress)
        customerAddress = customerAddressDecoded
        let bgpPeerStateDecoded = try containerValues.decodeIfPresent(DirectConnectClientTypes.BGPPeerState.self, forKey: .bgpPeerState)
        bgpPeerState = bgpPeerStateDecoded
        let bgpStatusDecoded = try containerValues.decodeIfPresent(DirectConnectClientTypes.BGPStatus.self, forKey: .bgpStatus)
        bgpStatus = bgpStatusDecoded
        let awsDeviceV2Decoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .awsDeviceV2)
        awsDeviceV2 = awsDeviceV2Decoded
        let awsLogicalDeviceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .awsLogicalDeviceId)
        awsLogicalDeviceId = awsLogicalDeviceIdDecoded
    }
}
