// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension DirectConnectClientTypes.VirtualInterfaceTestHistory: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bgpPeers
        case endTime
        case ownerAccount
        case startTime
        case status
        case testDurationInMinutes
        case testId
        case virtualInterfaceId
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let bgpPeers = bgpPeers {
            var bgpPeersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .bgpPeers)
            for bgppeeridlist0 in bgpPeers {
                try bgpPeersContainer.encode(bgppeeridlist0)
            }
        }
        if let endTime = self.endTime {
            try encodeContainer.encode(endTime.timeIntervalSince1970, forKey: .endTime)
        }
        if let ownerAccount = self.ownerAccount {
            try encodeContainer.encode(ownerAccount, forKey: .ownerAccount)
        }
        if let startTime = self.startTime {
            try encodeContainer.encode(startTime.timeIntervalSince1970, forKey: .startTime)
        }
        if let status = self.status {
            try encodeContainer.encode(status, forKey: .status)
        }
        if let testDurationInMinutes = self.testDurationInMinutes {
            try encodeContainer.encode(testDurationInMinutes, forKey: .testDurationInMinutes)
        }
        if let testId = self.testId {
            try encodeContainer.encode(testId, forKey: .testId)
        }
        if let virtualInterfaceId = self.virtualInterfaceId {
            try encodeContainer.encode(virtualInterfaceId, forKey: .virtualInterfaceId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let testIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .testId)
        testId = testIdDecoded
        let virtualInterfaceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .virtualInterfaceId)
        virtualInterfaceId = virtualInterfaceIdDecoded
        let bgpPeersContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .bgpPeers)
        var bgpPeersDecoded0:[Swift.String]? = nil
        if let bgpPeersContainer = bgpPeersContainer {
            bgpPeersDecoded0 = [Swift.String]()
            for string0 in bgpPeersContainer {
                if let string0 = string0 {
                    bgpPeersDecoded0?.append(string0)
                }
            }
        }
        bgpPeers = bgpPeersDecoded0
        let statusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .status)
        status = statusDecoded
        let ownerAccountDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ownerAccount)
        ownerAccount = ownerAccountDecoded
        let testDurationInMinutesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .testDurationInMinutes)
        testDurationInMinutes = testDurationInMinutesDecoded
        let startTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .startTime)
        startTime = startTimeDecoded
        let endTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .endTime)
        endTime = endTimeDecoded
    }
}
