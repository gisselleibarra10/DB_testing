// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct AllocatePublicVirtualInterfaceOutputResponseBody: Swift.Equatable {
    let ownerAccount: Swift.String?
    let virtualInterfaceId: Swift.String?
    let location: Swift.String?
    let connectionId: Swift.String?
    let virtualInterfaceType: Swift.String?
    let virtualInterfaceName: Swift.String?
    let vlan: Swift.Int
    let asn: Swift.Int
    let amazonSideAsn: Swift.Int?
    let authKey: Swift.String?
    let amazonAddress: Swift.String?
    let customerAddress: Swift.String?
    let addressFamily: DirectConnectClientTypes.AddressFamily?
    let virtualInterfaceState: DirectConnectClientTypes.VirtualInterfaceState?
    let customerRouterConfig: Swift.String?
    let mtu: Swift.Int?
    let jumboFrameCapable: Swift.Bool?
    let virtualGatewayId: Swift.String?
    let directConnectGatewayId: Swift.String?
    let routeFilterPrefixes: [DirectConnectClientTypes.RouteFilterPrefix]?
    let bgpPeers: [DirectConnectClientTypes.BGPPeer]?
    let region: Swift.String?
    let awsDeviceV2: Swift.String?
    let awsLogicalDeviceId: Swift.String?
    let tags: [DirectConnectClientTypes.Tag]?
    let siteLinkEnabled: Swift.Bool?
}

extension AllocatePublicVirtualInterfaceOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case addressFamily
        case amazonAddress
        case amazonSideAsn
        case asn
        case authKey
        case awsDeviceV2
        case awsLogicalDeviceId
        case bgpPeers
        case connectionId
        case customerAddress
        case customerRouterConfig
        case directConnectGatewayId
        case jumboFrameCapable
        case location
        case mtu
        case ownerAccount
        case region
        case routeFilterPrefixes
        case siteLinkEnabled
        case tags
        case virtualGatewayId
        case virtualInterfaceId
        case virtualInterfaceName
        case virtualInterfaceState
        case virtualInterfaceType
        case vlan
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ownerAccountDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ownerAccount)
        ownerAccount = ownerAccountDecoded
        let virtualInterfaceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .virtualInterfaceId)
        virtualInterfaceId = virtualInterfaceIdDecoded
        let locationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .location)
        location = locationDecoded
        let connectionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .connectionId)
        connectionId = connectionIdDecoded
        let virtualInterfaceTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .virtualInterfaceType)
        virtualInterfaceType = virtualInterfaceTypeDecoded
        let virtualInterfaceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .virtualInterfaceName)
        virtualInterfaceName = virtualInterfaceNameDecoded
        let vlanDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .vlan) ?? 0
        vlan = vlanDecoded
        let asnDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .asn) ?? 0
        asn = asnDecoded
        let amazonSideAsnDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .amazonSideAsn)
        amazonSideAsn = amazonSideAsnDecoded
        let authKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .authKey)
        authKey = authKeyDecoded
        let amazonAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .amazonAddress)
        amazonAddress = amazonAddressDecoded
        let customerAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .customerAddress)
        customerAddress = customerAddressDecoded
        let addressFamilyDecoded = try containerValues.decodeIfPresent(DirectConnectClientTypes.AddressFamily.self, forKey: .addressFamily)
        addressFamily = addressFamilyDecoded
        let virtualInterfaceStateDecoded = try containerValues.decodeIfPresent(DirectConnectClientTypes.VirtualInterfaceState.self, forKey: .virtualInterfaceState)
        virtualInterfaceState = virtualInterfaceStateDecoded
        let customerRouterConfigDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .customerRouterConfig)
        customerRouterConfig = customerRouterConfigDecoded
        let mtuDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .mtu)
        mtu = mtuDecoded
        let jumboFrameCapableDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .jumboFrameCapable)
        jumboFrameCapable = jumboFrameCapableDecoded
        let virtualGatewayIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .virtualGatewayId)
        virtualGatewayId = virtualGatewayIdDecoded
        let directConnectGatewayIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .directConnectGatewayId)
        directConnectGatewayId = directConnectGatewayIdDecoded
        let routeFilterPrefixesContainer = try containerValues.decodeIfPresent([DirectConnectClientTypes.RouteFilterPrefix?].self, forKey: .routeFilterPrefixes)
        var routeFilterPrefixesDecoded0:[DirectConnectClientTypes.RouteFilterPrefix]? = nil
        if let routeFilterPrefixesContainer = routeFilterPrefixesContainer {
            routeFilterPrefixesDecoded0 = [DirectConnectClientTypes.RouteFilterPrefix]()
            for structure0 in routeFilterPrefixesContainer {
                if let structure0 = structure0 {
                    routeFilterPrefixesDecoded0?.append(structure0)
                }
            }
        }
        routeFilterPrefixes = routeFilterPrefixesDecoded0
        let bgpPeersContainer = try containerValues.decodeIfPresent([DirectConnectClientTypes.BGPPeer?].self, forKey: .bgpPeers)
        var bgpPeersDecoded0:[DirectConnectClientTypes.BGPPeer]? = nil
        if let bgpPeersContainer = bgpPeersContainer {
            bgpPeersDecoded0 = [DirectConnectClientTypes.BGPPeer]()
            for structure0 in bgpPeersContainer {
                if let structure0 = structure0 {
                    bgpPeersDecoded0?.append(structure0)
                }
            }
        }
        bgpPeers = bgpPeersDecoded0
        let regionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .region)
        region = regionDecoded
        let awsDeviceV2Decoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .awsDeviceV2)
        awsDeviceV2 = awsDeviceV2Decoded
        let awsLogicalDeviceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .awsLogicalDeviceId)
        awsLogicalDeviceId = awsLogicalDeviceIdDecoded
        let tagsContainer = try containerValues.decodeIfPresent([DirectConnectClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[DirectConnectClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [DirectConnectClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let siteLinkEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .siteLinkEnabled)
        siteLinkEnabled = siteLinkEnabledDecoded
    }
}
