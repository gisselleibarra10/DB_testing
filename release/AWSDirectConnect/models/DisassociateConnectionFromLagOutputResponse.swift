// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

/// Information about an Direct Connect connection.
public struct DisassociateConnectionFromLagOutputResponse: Swift.Equatable {
    /// The Direct Connect endpoint on which the physical connection terminates.
    @available(*, deprecated)
    public var awsDevice: Swift.String?
    /// The Direct Connect endpoint that terminates the physical connection.
    public var awsDeviceV2: Swift.String?
    /// The Direct Connect endpoint that terminates the logical connection. This device might be different than the device that terminates the physical connection.
    public var awsLogicalDeviceId: Swift.String?
    /// The bandwidth of the connection.
    public var bandwidth: Swift.String?
    /// The ID of the connection.
    public var connectionId: Swift.String?
    /// The name of the connection.
    public var connectionName: Swift.String?
    /// The state of the connection. The following are the possible values:
    ///
    /// * ordering: The initial state of a hosted connection provisioned on an interconnect. The connection stays in the ordering state until the owner of the hosted connection confirms or declines the connection order.
    ///
    /// * requested: The initial state of a standard connection. The connection stays in the requested state until the Letter of Authorization (LOA) is sent to the customer.
    ///
    /// * pending: The connection has been approved and is being initialized.
    ///
    /// * available: The network link is up and the connection is ready for use.
    ///
    /// * down: The network link is down.
    ///
    /// * deleting: The connection is being deleted.
    ///
    /// * deleted: The connection has been deleted.
    ///
    /// * rejected: A hosted connection in the ordering state enters the rejected state if it is deleted by the customer.
    ///
    /// * unknown: The state of the connection is not available.
    public var connectionState: DirectConnectClientTypes.ConnectionState?
    /// The MAC Security (MACsec) connection encryption mode. The valid values are no_encrypt, should_encrypt, and must_encrypt.
    public var encryptionMode: Swift.String?
    /// Indicates whether the connection supports a secondary BGP peer in the same address family (IPv4/IPv6).
    public var hasLogicalRedundancy: DirectConnectClientTypes.HasLogicalRedundancy?
    /// Indicates whether jumbo frames (9001 MTU) are supported.
    public var jumboFrameCapable: Swift.Bool?
    /// The ID of the LAG.
    public var lagId: Swift.String?
    /// The time of the most recent call to [DescribeLoa] for this connection.
    public var loaIssueTime: ClientRuntime.Date?
    /// The location of the connection.
    public var location: Swift.String?
    /// Indicates whether the connection supports MAC Security (MACsec).
    public var macSecCapable: Swift.Bool?
    /// The MAC Security (MACsec) security keys associated with the connection.
    public var macSecKeys: [DirectConnectClientTypes.MacSecKey]?
    /// The ID of the Amazon Web Services account that owns the connection.
    public var ownerAccount: Swift.String?
    /// The name of the Direct Connect service provider associated with the connection.
    public var partnerName: Swift.String?
    /// The MAC Security (MACsec) port link status of the connection. The valid values are Encryption Up, which means that there is an active Connection Key Name, or Encryption Down.
    public var portEncryptionStatus: Swift.String?
    /// The name of the service provider associated with the connection.
    public var providerName: Swift.String?
    /// The Amazon Web Services Region where the connection is located.
    public var region: Swift.String?
    /// The tags associated with the connection.
    public var tags: [DirectConnectClientTypes.Tag]?
    /// The ID of the VLAN.
    public var vlan: Swift.Int

    public init (
        awsDevice: Swift.String? = nil,
        awsDeviceV2: Swift.String? = nil,
        awsLogicalDeviceId: Swift.String? = nil,
        bandwidth: Swift.String? = nil,
        connectionId: Swift.String? = nil,
        connectionName: Swift.String? = nil,
        connectionState: DirectConnectClientTypes.ConnectionState? = nil,
        encryptionMode: Swift.String? = nil,
        hasLogicalRedundancy: DirectConnectClientTypes.HasLogicalRedundancy? = nil,
        jumboFrameCapable: Swift.Bool? = nil,
        lagId: Swift.String? = nil,
        loaIssueTime: ClientRuntime.Date? = nil,
        location: Swift.String? = nil,
        macSecCapable: Swift.Bool? = nil,
        macSecKeys: [DirectConnectClientTypes.MacSecKey]? = nil,
        ownerAccount: Swift.String? = nil,
        partnerName: Swift.String? = nil,
        portEncryptionStatus: Swift.String? = nil,
        providerName: Swift.String? = nil,
        region: Swift.String? = nil,
        tags: [DirectConnectClientTypes.Tag]? = nil,
        vlan: Swift.Int = 0
    )
    {
        self.awsDevice = awsDevice
        self.awsDeviceV2 = awsDeviceV2
        self.awsLogicalDeviceId = awsLogicalDeviceId
        self.bandwidth = bandwidth
        self.connectionId = connectionId
        self.connectionName = connectionName
        self.connectionState = connectionState
        self.encryptionMode = encryptionMode
        self.hasLogicalRedundancy = hasLogicalRedundancy
        self.jumboFrameCapable = jumboFrameCapable
        self.lagId = lagId
        self.loaIssueTime = loaIssueTime
        self.location = location
        self.macSecCapable = macSecCapable
        self.macSecKeys = macSecKeys
        self.ownerAccount = ownerAccount
        self.partnerName = partnerName
        self.portEncryptionStatus = portEncryptionStatus
        self.providerName = providerName
        self.region = region
        self.tags = tags
        self.vlan = vlan
    }
}
