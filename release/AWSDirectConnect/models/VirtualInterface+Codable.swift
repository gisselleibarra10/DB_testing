// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension DirectConnectClientTypes.VirtualInterface: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case addressFamily
        case amazonAddress
        case amazonSideAsn
        case asn
        case authKey
        case awsDeviceV2
        case awsLogicalDeviceId
        case bgpPeers
        case connectionId
        case customerAddress
        case customerRouterConfig
        case directConnectGatewayId
        case jumboFrameCapable
        case location
        case mtu
        case ownerAccount
        case region
        case routeFilterPrefixes
        case siteLinkEnabled
        case tags
        case virtualGatewayId
        case virtualInterfaceId
        case virtualInterfaceName
        case virtualInterfaceState
        case virtualInterfaceType
        case vlan
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let addressFamily = self.addressFamily {
            try encodeContainer.encode(addressFamily.rawValue, forKey: .addressFamily)
        }
        if let amazonAddress = self.amazonAddress {
            try encodeContainer.encode(amazonAddress, forKey: .amazonAddress)
        }
        if let amazonSideAsn = self.amazonSideAsn {
            try encodeContainer.encode(amazonSideAsn, forKey: .amazonSideAsn)
        }
        if asn != 0 {
            try encodeContainer.encode(asn, forKey: .asn)
        }
        if let authKey = self.authKey {
            try encodeContainer.encode(authKey, forKey: .authKey)
        }
        if let awsDeviceV2 = self.awsDeviceV2 {
            try encodeContainer.encode(awsDeviceV2, forKey: .awsDeviceV2)
        }
        if let awsLogicalDeviceId = self.awsLogicalDeviceId {
            try encodeContainer.encode(awsLogicalDeviceId, forKey: .awsLogicalDeviceId)
        }
        if let bgpPeers = bgpPeers {
            var bgpPeersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .bgpPeers)
            for bgppeerlist0 in bgpPeers {
                try bgpPeersContainer.encode(bgppeerlist0)
            }
        }
        if let connectionId = self.connectionId {
            try encodeContainer.encode(connectionId, forKey: .connectionId)
        }
        if let customerAddress = self.customerAddress {
            try encodeContainer.encode(customerAddress, forKey: .customerAddress)
        }
        if let customerRouterConfig = self.customerRouterConfig {
            try encodeContainer.encode(customerRouterConfig, forKey: .customerRouterConfig)
        }
        if let directConnectGatewayId = self.directConnectGatewayId {
            try encodeContainer.encode(directConnectGatewayId, forKey: .directConnectGatewayId)
        }
        if let jumboFrameCapable = self.jumboFrameCapable {
            try encodeContainer.encode(jumboFrameCapable, forKey: .jumboFrameCapable)
        }
        if let location = self.location {
            try encodeContainer.encode(location, forKey: .location)
        }
        if let mtu = self.mtu {
            try encodeContainer.encode(mtu, forKey: .mtu)
        }
        if let ownerAccount = self.ownerAccount {
            try encodeContainer.encode(ownerAccount, forKey: .ownerAccount)
        }
        if let region = self.region {
            try encodeContainer.encode(region, forKey: .region)
        }
        if let routeFilterPrefixes = routeFilterPrefixes {
            var routeFilterPrefixesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .routeFilterPrefixes)
            for routefilterprefixlist0 in routeFilterPrefixes {
                try routeFilterPrefixesContainer.encode(routefilterprefixlist0)
            }
        }
        if let siteLinkEnabled = self.siteLinkEnabled {
            try encodeContainer.encode(siteLinkEnabled, forKey: .siteLinkEnabled)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
        if let virtualGatewayId = self.virtualGatewayId {
            try encodeContainer.encode(virtualGatewayId, forKey: .virtualGatewayId)
        }
        if let virtualInterfaceId = self.virtualInterfaceId {
            try encodeContainer.encode(virtualInterfaceId, forKey: .virtualInterfaceId)
        }
        if let virtualInterfaceName = self.virtualInterfaceName {
            try encodeContainer.encode(virtualInterfaceName, forKey: .virtualInterfaceName)
        }
        if let virtualInterfaceState = self.virtualInterfaceState {
            try encodeContainer.encode(virtualInterfaceState.rawValue, forKey: .virtualInterfaceState)
        }
        if let virtualInterfaceType = self.virtualInterfaceType {
            try encodeContainer.encode(virtualInterfaceType, forKey: .virtualInterfaceType)
        }
        if vlan != 0 {
            try encodeContainer.encode(vlan, forKey: .vlan)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ownerAccountDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ownerAccount)
        ownerAccount = ownerAccountDecoded
        let virtualInterfaceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .virtualInterfaceId)
        virtualInterfaceId = virtualInterfaceIdDecoded
        let locationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .location)
        location = locationDecoded
        let connectionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .connectionId)
        connectionId = connectionIdDecoded
        let virtualInterfaceTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .virtualInterfaceType)
        virtualInterfaceType = virtualInterfaceTypeDecoded
        let virtualInterfaceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .virtualInterfaceName)
        virtualInterfaceName = virtualInterfaceNameDecoded
        let vlanDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .vlan) ?? 0
        vlan = vlanDecoded
        let asnDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .asn) ?? 0
        asn = asnDecoded
        let amazonSideAsnDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .amazonSideAsn)
        amazonSideAsn = amazonSideAsnDecoded
        let authKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .authKey)
        authKey = authKeyDecoded
        let amazonAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .amazonAddress)
        amazonAddress = amazonAddressDecoded
        let customerAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .customerAddress)
        customerAddress = customerAddressDecoded
        let addressFamilyDecoded = try containerValues.decodeIfPresent(DirectConnectClientTypes.AddressFamily.self, forKey: .addressFamily)
        addressFamily = addressFamilyDecoded
        let virtualInterfaceStateDecoded = try containerValues.decodeIfPresent(DirectConnectClientTypes.VirtualInterfaceState.self, forKey: .virtualInterfaceState)
        virtualInterfaceState = virtualInterfaceStateDecoded
        let customerRouterConfigDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .customerRouterConfig)
        customerRouterConfig = customerRouterConfigDecoded
        let mtuDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .mtu)
        mtu = mtuDecoded
        let jumboFrameCapableDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .jumboFrameCapable)
        jumboFrameCapable = jumboFrameCapableDecoded
        let virtualGatewayIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .virtualGatewayId)
        virtualGatewayId = virtualGatewayIdDecoded
        let directConnectGatewayIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .directConnectGatewayId)
        directConnectGatewayId = directConnectGatewayIdDecoded
        let routeFilterPrefixesContainer = try containerValues.decodeIfPresent([DirectConnectClientTypes.RouteFilterPrefix?].self, forKey: .routeFilterPrefixes)
        var routeFilterPrefixesDecoded0:[DirectConnectClientTypes.RouteFilterPrefix]? = nil
        if let routeFilterPrefixesContainer = routeFilterPrefixesContainer {
            routeFilterPrefixesDecoded0 = [DirectConnectClientTypes.RouteFilterPrefix]()
            for structure0 in routeFilterPrefixesContainer {
                if let structure0 = structure0 {
                    routeFilterPrefixesDecoded0?.append(structure0)
                }
            }
        }
        routeFilterPrefixes = routeFilterPrefixesDecoded0
        let bgpPeersContainer = try containerValues.decodeIfPresent([DirectConnectClientTypes.BGPPeer?].self, forKey: .bgpPeers)
        var bgpPeersDecoded0:[DirectConnectClientTypes.BGPPeer]? = nil
        if let bgpPeersContainer = bgpPeersContainer {
            bgpPeersDecoded0 = [DirectConnectClientTypes.BGPPeer]()
            for structure0 in bgpPeersContainer {
                if let structure0 = structure0 {
                    bgpPeersDecoded0?.append(structure0)
                }
            }
        }
        bgpPeers = bgpPeersDecoded0
        let regionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .region)
        region = regionDecoded
        let awsDeviceV2Decoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .awsDeviceV2)
        awsDeviceV2 = awsDeviceV2Decoded
        let awsLogicalDeviceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .awsLogicalDeviceId)
        awsLogicalDeviceId = awsLogicalDeviceIdDecoded
        let tagsContainer = try containerValues.decodeIfPresent([DirectConnectClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[DirectConnectClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [DirectConnectClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let siteLinkEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .siteLinkEnabled)
        siteLinkEnabled = siteLinkEnabledDecoded
    }
}
