// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension WorkDocsClientTypes.Subscription: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case endPoint = "EndPoint"
        case `protocol` = "Protocol"
        case subscriptionId = "SubscriptionId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let endPoint = self.endPoint {
            try encodeContainer.encode(endPoint, forKey: .endPoint)
        }
        if let `protocol` = self.`protocol` {
            try encodeContainer.encode(`protocol`.rawValue, forKey: .`protocol`)
        }
        if let subscriptionId = self.subscriptionId {
            try encodeContainer.encode(subscriptionId, forKey: .subscriptionId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let subscriptionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .subscriptionId)
        subscriptionId = subscriptionIdDecoded
        let endPointDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .endPoint)
        endPoint = endPointDecoded
        let protocolDecoded = try containerValues.decodeIfPresent(WorkDocsClientTypes.SubscriptionProtocolType.self, forKey: .protocol)
        `protocol` = protocolDecoded
    }
}
