// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension WorkDocsClientTypes.FolderMetadata: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createdTimestamp = "CreatedTimestamp"
        case creatorId = "CreatorId"
        case id = "Id"
        case labels = "Labels"
        case latestVersionSize = "LatestVersionSize"
        case modifiedTimestamp = "ModifiedTimestamp"
        case name = "Name"
        case parentFolderId = "ParentFolderId"
        case resourceState = "ResourceState"
        case signature = "Signature"
        case size = "Size"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let createdTimestamp = self.createdTimestamp {
            try encodeContainer.encode(createdTimestamp.timeIntervalSince1970, forKey: .createdTimestamp)
        }
        if let creatorId = self.creatorId {
            try encodeContainer.encode(creatorId, forKey: .creatorId)
        }
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let labels = labels {
            var labelsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .labels)
            for sharedlabels0 in labels {
                try labelsContainer.encode(sharedlabels0)
            }
        }
        if let latestVersionSize = self.latestVersionSize {
            try encodeContainer.encode(latestVersionSize, forKey: .latestVersionSize)
        }
        if let modifiedTimestamp = self.modifiedTimestamp {
            try encodeContainer.encode(modifiedTimestamp.timeIntervalSince1970, forKey: .modifiedTimestamp)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let parentFolderId = self.parentFolderId {
            try encodeContainer.encode(parentFolderId, forKey: .parentFolderId)
        }
        if let resourceState = self.resourceState {
            try encodeContainer.encode(resourceState.rawValue, forKey: .resourceState)
        }
        if let signature = self.signature {
            try encodeContainer.encode(signature, forKey: .signature)
        }
        if let size = self.size {
            try encodeContainer.encode(size, forKey: .size)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let creatorIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .creatorId)
        creatorId = creatorIdDecoded
        let parentFolderIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .parentFolderId)
        parentFolderId = parentFolderIdDecoded
        let createdTimestampDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdTimestamp)
        createdTimestamp = createdTimestampDecoded
        let modifiedTimestampDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .modifiedTimestamp)
        modifiedTimestamp = modifiedTimestampDecoded
        let resourceStateDecoded = try containerValues.decodeIfPresent(WorkDocsClientTypes.ResourceStateType.self, forKey: .resourceState)
        resourceState = resourceStateDecoded
        let signatureDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .signature)
        signature = signatureDecoded
        let labelsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .labels)
        var labelsDecoded0:[Swift.String]? = nil
        if let labelsContainer = labelsContainer {
            labelsDecoded0 = [Swift.String]()
            for string0 in labelsContainer {
                if let string0 = string0 {
                    labelsDecoded0?.append(string0)
                }
            }
        }
        labels = labelsDecoded0
        let sizeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .size)
        size = sizeDecoded
        let latestVersionSizeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .latestVersionSize)
        latestVersionSize = latestVersionSizeDecoded
    }
}
