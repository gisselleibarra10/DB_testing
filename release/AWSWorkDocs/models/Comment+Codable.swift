// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension WorkDocsClientTypes.Comment: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case commentId = "CommentId"
        case contributor = "Contributor"
        case createdTimestamp = "CreatedTimestamp"
        case parentId = "ParentId"
        case recipientId = "RecipientId"
        case status = "Status"
        case text = "Text"
        case threadId = "ThreadId"
        case visibility = "Visibility"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let commentId = self.commentId {
            try encodeContainer.encode(commentId, forKey: .commentId)
        }
        if let contributor = self.contributor {
            try encodeContainer.encode(contributor, forKey: .contributor)
        }
        if let createdTimestamp = self.createdTimestamp {
            try encodeContainer.encode(createdTimestamp.timeIntervalSince1970, forKey: .createdTimestamp)
        }
        if let parentId = self.parentId {
            try encodeContainer.encode(parentId, forKey: .parentId)
        }
        if let recipientId = self.recipientId {
            try encodeContainer.encode(recipientId, forKey: .recipientId)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let text = self.text {
            try encodeContainer.encode(text, forKey: .text)
        }
        if let threadId = self.threadId {
            try encodeContainer.encode(threadId, forKey: .threadId)
        }
        if let visibility = self.visibility {
            try encodeContainer.encode(visibility.rawValue, forKey: .visibility)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let commentIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .commentId)
        commentId = commentIdDecoded
        let parentIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .parentId)
        parentId = parentIdDecoded
        let threadIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .threadId)
        threadId = threadIdDecoded
        let textDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .text)
        text = textDecoded
        let contributorDecoded = try containerValues.decodeIfPresent(WorkDocsClientTypes.User.self, forKey: .contributor)
        contributor = contributorDecoded
        let createdTimestampDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdTimestamp)
        createdTimestamp = createdTimestampDecoded
        let statusDecoded = try containerValues.decodeIfPresent(WorkDocsClientTypes.CommentStatusType.self, forKey: .status)
        status = statusDecoded
        let visibilityDecoded = try containerValues.decodeIfPresent(WorkDocsClientTypes.CommentVisibilityType.self, forKey: .visibility)
        visibility = visibilityDecoded
        let recipientIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .recipientId)
        recipientId = recipientIdDecoded
    }
}
