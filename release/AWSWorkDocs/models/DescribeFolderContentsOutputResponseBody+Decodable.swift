// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeFolderContentsOutputResponseBody: Swift.Equatable {
    let folders: [WorkDocsClientTypes.FolderMetadata]?
    let documents: [WorkDocsClientTypes.DocumentMetadata]?
    let marker: Swift.String?
}

extension DescribeFolderContentsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case documents = "Documents"
        case folders = "Folders"
        case marker = "Marker"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let foldersContainer = try containerValues.decodeIfPresent([WorkDocsClientTypes.FolderMetadata?].self, forKey: .folders)
        var foldersDecoded0:[WorkDocsClientTypes.FolderMetadata]? = nil
        if let foldersContainer = foldersContainer {
            foldersDecoded0 = [WorkDocsClientTypes.FolderMetadata]()
            for structure0 in foldersContainer {
                if let structure0 = structure0 {
                    foldersDecoded0?.append(structure0)
                }
            }
        }
        folders = foldersDecoded0
        let documentsContainer = try containerValues.decodeIfPresent([WorkDocsClientTypes.DocumentMetadata?].self, forKey: .documents)
        var documentsDecoded0:[WorkDocsClientTypes.DocumentMetadata]? = nil
        if let documentsContainer = documentsContainer {
            documentsDecoded0 = [WorkDocsClientTypes.DocumentMetadata]()
            for structure0 in documentsContainer {
                if let structure0 = structure0 {
                    documentsDecoded0?.append(structure0)
                }
            }
        }
        documents = documentsDecoded0
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
    }
}
