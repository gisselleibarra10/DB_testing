// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension WorkDocsClientTypes.Activity: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case commentMetadata = "CommentMetadata"
        case initiator = "Initiator"
        case isIndirectActivity = "IsIndirectActivity"
        case organizationId = "OrganizationId"
        case originalParent = "OriginalParent"
        case participants = "Participants"
        case resourceMetadata = "ResourceMetadata"
        case timeStamp = "TimeStamp"
        case type = "Type"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let commentMetadata = self.commentMetadata {
            try encodeContainer.encode(commentMetadata, forKey: .commentMetadata)
        }
        if let initiator = self.initiator {
            try encodeContainer.encode(initiator, forKey: .initiator)
        }
        if isIndirectActivity != false {
            try encodeContainer.encode(isIndirectActivity, forKey: .isIndirectActivity)
        }
        if let organizationId = self.organizationId {
            try encodeContainer.encode(organizationId, forKey: .organizationId)
        }
        if let originalParent = self.originalParent {
            try encodeContainer.encode(originalParent, forKey: .originalParent)
        }
        if let participants = self.participants {
            try encodeContainer.encode(participants, forKey: .participants)
        }
        if let resourceMetadata = self.resourceMetadata {
            try encodeContainer.encode(resourceMetadata, forKey: .resourceMetadata)
        }
        if let timeStamp = self.timeStamp {
            try encodeContainer.encode(timeStamp.timeIntervalSince1970, forKey: .timeStamp)
        }
        if let type = self.type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let typeDecoded = try containerValues.decodeIfPresent(WorkDocsClientTypes.ActivityType.self, forKey: .type)
        type = typeDecoded
        let timeStampDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .timeStamp)
        timeStamp = timeStampDecoded
        let isIndirectActivityDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .isIndirectActivity) ?? false
        isIndirectActivity = isIndirectActivityDecoded
        let organizationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .organizationId)
        organizationId = organizationIdDecoded
        let initiatorDecoded = try containerValues.decodeIfPresent(WorkDocsClientTypes.UserMetadata.self, forKey: .initiator)
        initiator = initiatorDecoded
        let participantsDecoded = try containerValues.decodeIfPresent(WorkDocsClientTypes.Participants.self, forKey: .participants)
        participants = participantsDecoded
        let resourceMetadataDecoded = try containerValues.decodeIfPresent(WorkDocsClientTypes.ResourceMetadata.self, forKey: .resourceMetadata)
        resourceMetadata = resourceMetadataDecoded
        let originalParentDecoded = try containerValues.decodeIfPresent(WorkDocsClientTypes.ResourceMetadata.self, forKey: .originalParent)
        originalParent = originalParentDecoded
        let commentMetadataDecoded = try containerValues.decodeIfPresent(WorkDocsClientTypes.CommentMetadata.self, forKey: .commentMetadata)
        commentMetadata = commentMetadataDecoded
    }
}
