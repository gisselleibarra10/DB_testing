// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateCommentInputBody: Swift.Equatable {
    let parentId: Swift.String?
    let threadId: Swift.String?
    let text: Swift.String?
    let visibility: WorkDocsClientTypes.CommentVisibilityType?
    let notifyCollaborators: Swift.Bool
}

extension CreateCommentInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case notifyCollaborators = "NotifyCollaborators"
        case parentId = "ParentId"
        case text = "Text"
        case threadId = "ThreadId"
        case visibility = "Visibility"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let parentIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .parentId)
        parentId = parentIdDecoded
        let threadIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .threadId)
        threadId = threadIdDecoded
        let textDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .text)
        text = textDecoded
        let visibilityDecoded = try containerValues.decodeIfPresent(WorkDocsClientTypes.CommentVisibilityType.self, forKey: .visibility)
        visibility = visibilityDecoded
        let notifyCollaboratorsDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .notifyCollaborators) ?? false
        notifyCollaborators = notifyCollaboratorsDecoded
    }
}
