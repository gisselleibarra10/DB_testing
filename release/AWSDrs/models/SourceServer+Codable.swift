// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension DrsClientTypes.SourceServer: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn
        case dataReplicationInfo
        case lastLaunchResult
        case lifeCycle
        case recoveryInstanceId
        case sourceProperties
        case sourceServerID
        case stagingArea
        case tags
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = self.arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let dataReplicationInfo = self.dataReplicationInfo {
            try encodeContainer.encode(dataReplicationInfo, forKey: .dataReplicationInfo)
        }
        if let lastLaunchResult = self.lastLaunchResult {
            try encodeContainer.encode(lastLaunchResult.rawValue, forKey: .lastLaunchResult)
        }
        if let lifeCycle = self.lifeCycle {
            try encodeContainer.encode(lifeCycle, forKey: .lifeCycle)
        }
        if let recoveryInstanceId = self.recoveryInstanceId {
            try encodeContainer.encode(recoveryInstanceId, forKey: .recoveryInstanceId)
        }
        if let sourceProperties = self.sourceProperties {
            try encodeContainer.encode(sourceProperties, forKey: .sourceProperties)
        }
        if let sourceServerID = self.sourceServerID {
            try encodeContainer.encode(sourceServerID, forKey: .sourceServerID)
        }
        if let stagingArea = self.stagingArea {
            try encodeContainer.encode(stagingArea, forKey: .stagingArea)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, tagsmap0) in tags {
                try tagsContainer.encode(tagsmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sourceServerIDDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceServerID)
        sourceServerID = sourceServerIDDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
        let recoveryInstanceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .recoveryInstanceId)
        recoveryInstanceId = recoveryInstanceIdDecoded
        let lastLaunchResultDecoded = try containerValues.decodeIfPresent(DrsClientTypes.LastLaunchResult.self, forKey: .lastLaunchResult)
        lastLaunchResult = lastLaunchResultDecoded
        let dataReplicationInfoDecoded = try containerValues.decodeIfPresent(DrsClientTypes.DataReplicationInfo.self, forKey: .dataReplicationInfo)
        dataReplicationInfo = dataReplicationInfoDecoded
        let lifeCycleDecoded = try containerValues.decodeIfPresent(DrsClientTypes.LifeCycle.self, forKey: .lifeCycle)
        lifeCycle = lifeCycleDecoded
        let sourcePropertiesDecoded = try containerValues.decodeIfPresent(DrsClientTypes.SourceProperties.self, forKey: .sourceProperties)
        sourceProperties = sourcePropertiesDecoded
        let stagingAreaDecoded = try containerValues.decodeIfPresent(DrsClientTypes.StagingArea.self, forKey: .stagingArea)
        stagingArea = stagingAreaDecoded
    }
}
