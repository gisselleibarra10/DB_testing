// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension DrsClientTypes.PITPolicyRule: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case enabled
        case interval
        case retentionDuration
        case ruleID
        case units
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let enabled = self.enabled {
            try encodeContainer.encode(enabled, forKey: .enabled)
        }
        if interval != 0 {
            try encodeContainer.encode(interval, forKey: .interval)
        }
        if retentionDuration != 0 {
            try encodeContainer.encode(retentionDuration, forKey: .retentionDuration)
        }
        if ruleID != 0 {
            try encodeContainer.encode(ruleID, forKey: .ruleID)
        }
        if let units = self.units {
            try encodeContainer.encode(units.rawValue, forKey: .units)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ruleIDDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .ruleID) ?? 0
        ruleID = ruleIDDecoded
        let unitsDecoded = try containerValues.decodeIfPresent(DrsClientTypes.PITPolicyRuleUnits.self, forKey: .units)
        units = unitsDecoded
        let intervalDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .interval) ?? 0
        interval = intervalDecoded
        let retentionDurationDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .retentionDuration) ?? 0
        retentionDuration = retentionDurationDecoded
        let enabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enabled)
        enabled = enabledDecoded
    }
}
