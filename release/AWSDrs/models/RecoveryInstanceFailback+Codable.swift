// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension DrsClientTypes.RecoveryInstanceFailback: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case agentLastSeenByServiceDateTime
        case elapsedReplicationDuration
        case failbackClientID
        case failbackClientLastSeenByServiceDateTime
        case failbackInitiationTime
        case failbackJobID
        case failbackToOriginalServer
        case firstByteDateTime
        case state
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let agentLastSeenByServiceDateTime = self.agentLastSeenByServiceDateTime {
            try encodeContainer.encode(agentLastSeenByServiceDateTime, forKey: .agentLastSeenByServiceDateTime)
        }
        if let elapsedReplicationDuration = self.elapsedReplicationDuration {
            try encodeContainer.encode(elapsedReplicationDuration, forKey: .elapsedReplicationDuration)
        }
        if let failbackClientID = self.failbackClientID {
            try encodeContainer.encode(failbackClientID, forKey: .failbackClientID)
        }
        if let failbackClientLastSeenByServiceDateTime = self.failbackClientLastSeenByServiceDateTime {
            try encodeContainer.encode(failbackClientLastSeenByServiceDateTime, forKey: .failbackClientLastSeenByServiceDateTime)
        }
        if let failbackInitiationTime = self.failbackInitiationTime {
            try encodeContainer.encode(failbackInitiationTime, forKey: .failbackInitiationTime)
        }
        if let failbackJobID = self.failbackJobID {
            try encodeContainer.encode(failbackJobID, forKey: .failbackJobID)
        }
        if let failbackToOriginalServer = self.failbackToOriginalServer {
            try encodeContainer.encode(failbackToOriginalServer, forKey: .failbackToOriginalServer)
        }
        if let firstByteDateTime = self.firstByteDateTime {
            try encodeContainer.encode(firstByteDateTime, forKey: .firstByteDateTime)
        }
        if let state = self.state {
            try encodeContainer.encode(state.rawValue, forKey: .state)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let failbackClientIDDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .failbackClientID)
        failbackClientID = failbackClientIDDecoded
        let failbackJobIDDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .failbackJobID)
        failbackJobID = failbackJobIDDecoded
        let failbackInitiationTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .failbackInitiationTime)
        failbackInitiationTime = failbackInitiationTimeDecoded
        let stateDecoded = try containerValues.decodeIfPresent(DrsClientTypes.FailbackState.self, forKey: .state)
        state = stateDecoded
        let agentLastSeenByServiceDateTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .agentLastSeenByServiceDateTime)
        agentLastSeenByServiceDateTime = agentLastSeenByServiceDateTimeDecoded
        let failbackClientLastSeenByServiceDateTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .failbackClientLastSeenByServiceDateTime)
        failbackClientLastSeenByServiceDateTime = failbackClientLastSeenByServiceDateTimeDecoded
        let failbackToOriginalServerDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .failbackToOriginalServer)
        failbackToOriginalServer = failbackToOriginalServerDecoded
        let firstByteDateTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .firstByteDateTime)
        firstByteDateTime = firstByteDateTimeDecoded
        let elapsedReplicationDurationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .elapsedReplicationDuration)
        elapsedReplicationDuration = elapsedReplicationDurationDecoded
    }
}
