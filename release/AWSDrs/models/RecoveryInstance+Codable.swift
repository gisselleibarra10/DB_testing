// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension DrsClientTypes.RecoveryInstance: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn
        case dataReplicationInfo
        case ec2InstanceID
        case ec2InstanceState
        case failback
        case isDrill
        case jobID
        case pointInTimeSnapshotDateTime
        case recoveryInstanceID
        case recoveryInstanceProperties
        case sourceServerID
        case tags
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = self.arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let dataReplicationInfo = self.dataReplicationInfo {
            try encodeContainer.encode(dataReplicationInfo, forKey: .dataReplicationInfo)
        }
        if let ec2InstanceID = self.ec2InstanceID {
            try encodeContainer.encode(ec2InstanceID, forKey: .ec2InstanceID)
        }
        if let ec2InstanceState = self.ec2InstanceState {
            try encodeContainer.encode(ec2InstanceState.rawValue, forKey: .ec2InstanceState)
        }
        if let failback = self.failback {
            try encodeContainer.encode(failback, forKey: .failback)
        }
        if let isDrill = self.isDrill {
            try encodeContainer.encode(isDrill, forKey: .isDrill)
        }
        if let jobID = self.jobID {
            try encodeContainer.encode(jobID, forKey: .jobID)
        }
        if let pointInTimeSnapshotDateTime = self.pointInTimeSnapshotDateTime {
            try encodeContainer.encode(pointInTimeSnapshotDateTime, forKey: .pointInTimeSnapshotDateTime)
        }
        if let recoveryInstanceID = self.recoveryInstanceID {
            try encodeContainer.encode(recoveryInstanceID, forKey: .recoveryInstanceID)
        }
        if let recoveryInstanceProperties = self.recoveryInstanceProperties {
            try encodeContainer.encode(recoveryInstanceProperties, forKey: .recoveryInstanceProperties)
        }
        if let sourceServerID = self.sourceServerID {
            try encodeContainer.encode(sourceServerID, forKey: .sourceServerID)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, tagsmap0) in tags {
                try tagsContainer.encode(tagsmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ec2InstanceIDDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ec2InstanceID)
        ec2InstanceID = ec2InstanceIDDecoded
        let ec2InstanceStateDecoded = try containerValues.decodeIfPresent(DrsClientTypes.EC2InstanceState.self, forKey: .ec2InstanceState)
        ec2InstanceState = ec2InstanceStateDecoded
        let jobIDDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobID)
        jobID = jobIDDecoded
        let recoveryInstanceIDDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .recoveryInstanceID)
        recoveryInstanceID = recoveryInstanceIDDecoded
        let sourceServerIDDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceServerID)
        sourceServerID = sourceServerIDDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
        let failbackDecoded = try containerValues.decodeIfPresent(DrsClientTypes.RecoveryInstanceFailback.self, forKey: .failback)
        failback = failbackDecoded
        let dataReplicationInfoDecoded = try containerValues.decodeIfPresent(DrsClientTypes.RecoveryInstanceDataReplicationInfo.self, forKey: .dataReplicationInfo)
        dataReplicationInfo = dataReplicationInfoDecoded
        let recoveryInstancePropertiesDecoded = try containerValues.decodeIfPresent(DrsClientTypes.RecoveryInstanceProperties.self, forKey: .recoveryInstanceProperties)
        recoveryInstanceProperties = recoveryInstancePropertiesDecoded
        let pointInTimeSnapshotDateTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pointInTimeSnapshotDateTime)
        pointInTimeSnapshotDateTime = pointInTimeSnapshotDateTimeDecoded
        let isDrillDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .isDrill)
        isDrill = isDrillDecoded
    }
}
