// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension DrsClientTypes.ConversionProperties: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dataTimestamp
        case forceUefi
        case rootVolumeName
        case volumeToConversionMap
        case volumeToVolumeSize
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dataTimestamp = self.dataTimestamp {
            try encodeContainer.encode(dataTimestamp, forKey: .dataTimestamp)
        }
        if let forceUefi = self.forceUefi {
            try encodeContainer.encode(forceUefi, forKey: .forceUefi)
        }
        if let rootVolumeName = self.rootVolumeName {
            try encodeContainer.encode(rootVolumeName, forKey: .rootVolumeName)
        }
        if let volumeToConversionMap = volumeToConversionMap {
            var volumeToConversionMapContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .volumeToConversionMap)
            for (dictKey0, volumetoconversionmap0) in volumeToConversionMap {
                try volumeToConversionMapContainer.encode(volumetoconversionmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let volumeToVolumeSize = volumeToVolumeSize {
            var volumeToVolumeSizeContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .volumeToVolumeSize)
            for (dictKey0, volumetosizemap0) in volumeToVolumeSize {
                try volumeToVolumeSizeContainer.encode(volumetosizemap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let volumeToConversionMapContainer = try containerValues.decodeIfPresent([Swift.String: [Swift.String: Swift.String?]?].self, forKey: .volumeToConversionMap)
        var volumeToConversionMapDecoded0: [Swift.String:[Swift.String:Swift.String]]? = nil
        if let volumeToConversionMapContainer = volumeToConversionMapContainer {
            volumeToConversionMapDecoded0 = [Swift.String:[Swift.String:Swift.String]]()
            for (key0, conversionmap0) in volumeToConversionMapContainer {
                var conversionmap0Decoded0: [Swift.String: Swift.String]? = nil
                if let conversionmap0 = conversionmap0 {
                    conversionmap0Decoded0 = [Swift.String: Swift.String]()
                    for (key1, ebssnapshot1) in conversionmap0 {
                        if let ebssnapshot1 = ebssnapshot1 {
                            conversionmap0Decoded0?[key1] = ebssnapshot1
                        }
                    }
                }
                volumeToConversionMapDecoded0?[key0] = conversionmap0Decoded0
            }
        }
        volumeToConversionMap = volumeToConversionMapDecoded0
        let rootVolumeNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .rootVolumeName)
        rootVolumeName = rootVolumeNameDecoded
        let forceUefiDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .forceUefi)
        forceUefi = forceUefiDecoded
        let dataTimestampDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataTimestamp)
        dataTimestamp = dataTimestampDecoded
        let volumeToVolumeSizeContainer = try containerValues.decodeIfPresent([Swift.String: Swift.Int?].self, forKey: .volumeToVolumeSize)
        var volumeToVolumeSizeDecoded0: [Swift.String:Swift.Int]? = nil
        if let volumeToVolumeSizeContainer = volumeToVolumeSizeContainer {
            volumeToVolumeSizeDecoded0 = [Swift.String:Swift.Int]()
            for (key0, positiveinteger0) in volumeToVolumeSizeContainer {
                if let positiveinteger0 = positiveinteger0 {
                    volumeToVolumeSizeDecoded0?[key0] = positiveinteger0
                }
            }
        }
        volumeToVolumeSize = volumeToVolumeSizeDecoded0
    }
}
