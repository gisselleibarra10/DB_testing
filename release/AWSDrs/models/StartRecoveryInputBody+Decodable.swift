// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct StartRecoveryInputBody: Swift.Equatable {
    let sourceServers: [DrsClientTypes.StartRecoveryRequestSourceServer]?
    let isDrill: Swift.Bool?
    let tags: [Swift.String:Swift.String]?
}

extension StartRecoveryInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case isDrill
        case sourceServers
        case tags
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sourceServersContainer = try containerValues.decodeIfPresent([DrsClientTypes.StartRecoveryRequestSourceServer?].self, forKey: .sourceServers)
        var sourceServersDecoded0:[DrsClientTypes.StartRecoveryRequestSourceServer]? = nil
        if let sourceServersContainer = sourceServersContainer {
            sourceServersDecoded0 = [DrsClientTypes.StartRecoveryRequestSourceServer]()
            for structure0 in sourceServersContainer {
                if let structure0 = structure0 {
                    sourceServersDecoded0?.append(structure0)
                }
            }
        }
        sourceServers = sourceServersDecoded0
        let isDrillDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .isDrill)
        isDrill = isDrillDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
    }
}
