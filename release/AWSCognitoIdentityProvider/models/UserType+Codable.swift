// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CognitoIdentityProviderClientTypes.UserType: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attributes = "Attributes"
        case enabled = "Enabled"
        case mFAOptions = "MFAOptions"
        case userCreateDate = "UserCreateDate"
        case userLastModifiedDate = "UserLastModifiedDate"
        case userStatus = "UserStatus"
        case username = "Username"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let attributes = attributes {
            var attributesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .attributes)
            for attributelisttype0 in attributes {
                try attributesContainer.encode(attributelisttype0)
            }
        }
        if enabled != false {
            try encodeContainer.encode(enabled, forKey: .enabled)
        }
        if let mFAOptions = mFAOptions {
            var mFAOptionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .mFAOptions)
            for mfaoptionlisttype0 in mFAOptions {
                try mFAOptionsContainer.encode(mfaoptionlisttype0)
            }
        }
        if let userCreateDate = self.userCreateDate {
            try encodeContainer.encode(userCreateDate.timeIntervalSince1970, forKey: .userCreateDate)
        }
        if let userLastModifiedDate = self.userLastModifiedDate {
            try encodeContainer.encode(userLastModifiedDate.timeIntervalSince1970, forKey: .userLastModifiedDate)
        }
        if let userStatus = self.userStatus {
            try encodeContainer.encode(userStatus.rawValue, forKey: .userStatus)
        }
        if let username = self.username {
            try encodeContainer.encode(username, forKey: .username)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let usernameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .username)
        username = usernameDecoded
        let attributesContainer = try containerValues.decodeIfPresent([CognitoIdentityProviderClientTypes.AttributeType?].self, forKey: .attributes)
        var attributesDecoded0:[CognitoIdentityProviderClientTypes.AttributeType]? = nil
        if let attributesContainer = attributesContainer {
            attributesDecoded0 = [CognitoIdentityProviderClientTypes.AttributeType]()
            for structure0 in attributesContainer {
                if let structure0 = structure0 {
                    attributesDecoded0?.append(structure0)
                }
            }
        }
        attributes = attributesDecoded0
        let userCreateDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .userCreateDate)
        userCreateDate = userCreateDateDecoded
        let userLastModifiedDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .userLastModifiedDate)
        userLastModifiedDate = userLastModifiedDateDecoded
        let enabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enabled) ?? false
        enabled = enabledDecoded
        let userStatusDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.UserStatusType.self, forKey: .userStatus)
        userStatus = userStatusDecoded
        let mFAOptionsContainer = try containerValues.decodeIfPresent([CognitoIdentityProviderClientTypes.MFAOptionType?].self, forKey: .mFAOptions)
        var mFAOptionsDecoded0:[CognitoIdentityProviderClientTypes.MFAOptionType]? = nil
        if let mFAOptionsContainer = mFAOptionsContainer {
            mFAOptionsDecoded0 = [CognitoIdentityProviderClientTypes.MFAOptionType]()
            for structure0 in mFAOptionsContainer {
                if let structure0 = structure0 {
                    mFAOptionsDecoded0?.append(structure0)
                }
            }
        }
        mFAOptions = mFAOptionsDecoded0
    }
}
