// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ConfirmSignUpInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case analyticsMetadata = "AnalyticsMetadata"
        case clientId = "ClientId"
        case clientMetadata = "ClientMetadata"
        case confirmationCode = "ConfirmationCode"
        case forceAliasCreation = "ForceAliasCreation"
        case secretHash = "SecretHash"
        case userContextData = "UserContextData"
        case username = "Username"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let analyticsMetadata = self.analyticsMetadata {
            try encodeContainer.encode(analyticsMetadata, forKey: .analyticsMetadata)
        }
        if let clientId = self.clientId {
            try encodeContainer.encode(clientId, forKey: .clientId)
        }
        if let clientMetadata = clientMetadata {
            var clientMetadataContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .clientMetadata)
            for (dictKey0, clientmetadatatype0) in clientMetadata {
                try clientMetadataContainer.encode(clientmetadatatype0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let confirmationCode = self.confirmationCode {
            try encodeContainer.encode(confirmationCode, forKey: .confirmationCode)
        }
        if forceAliasCreation != false {
            try encodeContainer.encode(forceAliasCreation, forKey: .forceAliasCreation)
        }
        if let secretHash = self.secretHash {
            try encodeContainer.encode(secretHash, forKey: .secretHash)
        }
        if let userContextData = self.userContextData {
            try encodeContainer.encode(userContextData, forKey: .userContextData)
        }
        if let username = self.username {
            try encodeContainer.encode(username, forKey: .username)
        }
    }
}
