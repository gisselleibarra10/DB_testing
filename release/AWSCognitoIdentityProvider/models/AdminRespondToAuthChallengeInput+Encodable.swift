// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AdminRespondToAuthChallengeInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case analyticsMetadata = "AnalyticsMetadata"
        case challengeName = "ChallengeName"
        case challengeResponses = "ChallengeResponses"
        case clientId = "ClientId"
        case clientMetadata = "ClientMetadata"
        case contextData = "ContextData"
        case session = "Session"
        case userPoolId = "UserPoolId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let analyticsMetadata = self.analyticsMetadata {
            try encodeContainer.encode(analyticsMetadata, forKey: .analyticsMetadata)
        }
        if let challengeName = self.challengeName {
            try encodeContainer.encode(challengeName.rawValue, forKey: .challengeName)
        }
        if let challengeResponses = challengeResponses {
            var challengeResponsesContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .challengeResponses)
            for (dictKey0, challengeresponsestype0) in challengeResponses {
                try challengeResponsesContainer.encode(challengeresponsestype0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let clientId = self.clientId {
            try encodeContainer.encode(clientId, forKey: .clientId)
        }
        if let clientMetadata = clientMetadata {
            var clientMetadataContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .clientMetadata)
            for (dictKey0, clientmetadatatype0) in clientMetadata {
                try clientMetadataContainer.encode(clientmetadatatype0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let contextData = self.contextData {
            try encodeContainer.encode(contextData, forKey: .contextData)
        }
        if let session = self.session {
            try encodeContainer.encode(session, forKey: .session)
        }
        if let userPoolId = self.userPoolId {
            try encodeContainer.encode(userPoolId, forKey: .userPoolId)
        }
    }
}
