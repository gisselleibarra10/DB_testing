// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct UpdateUserPoolInputBody: Swift.Equatable {
    let userPoolId: Swift.String?
    let policies: CognitoIdentityProviderClientTypes.UserPoolPolicyType?
    let lambdaConfig: CognitoIdentityProviderClientTypes.LambdaConfigType?
    let autoVerifiedAttributes: [CognitoIdentityProviderClientTypes.VerifiedAttributeType]?
    let smsVerificationMessage: Swift.String?
    let emailVerificationMessage: Swift.String?
    let emailVerificationSubject: Swift.String?
    let verificationMessageTemplate: CognitoIdentityProviderClientTypes.VerificationMessageTemplateType?
    let smsAuthenticationMessage: Swift.String?
    let userAttributeUpdateSettings: CognitoIdentityProviderClientTypes.UserAttributeUpdateSettingsType?
    let mfaConfiguration: CognitoIdentityProviderClientTypes.UserPoolMfaType?
    let deviceConfiguration: CognitoIdentityProviderClientTypes.DeviceConfigurationType?
    let emailConfiguration: CognitoIdentityProviderClientTypes.EmailConfigurationType?
    let smsConfiguration: CognitoIdentityProviderClientTypes.SmsConfigurationType?
    let userPoolTags: [Swift.String:Swift.String]?
    let adminCreateUserConfig: CognitoIdentityProviderClientTypes.AdminCreateUserConfigType?
    let userPoolAddOns: CognitoIdentityProviderClientTypes.UserPoolAddOnsType?
    let accountRecoverySetting: CognitoIdentityProviderClientTypes.AccountRecoverySettingType?
}

extension UpdateUserPoolInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountRecoverySetting = "AccountRecoverySetting"
        case adminCreateUserConfig = "AdminCreateUserConfig"
        case autoVerifiedAttributes = "AutoVerifiedAttributes"
        case deviceConfiguration = "DeviceConfiguration"
        case emailConfiguration = "EmailConfiguration"
        case emailVerificationMessage = "EmailVerificationMessage"
        case emailVerificationSubject = "EmailVerificationSubject"
        case lambdaConfig = "LambdaConfig"
        case mfaConfiguration = "MfaConfiguration"
        case policies = "Policies"
        case smsAuthenticationMessage = "SmsAuthenticationMessage"
        case smsConfiguration = "SmsConfiguration"
        case smsVerificationMessage = "SmsVerificationMessage"
        case userAttributeUpdateSettings = "UserAttributeUpdateSettings"
        case userPoolAddOns = "UserPoolAddOns"
        case userPoolId = "UserPoolId"
        case userPoolTags = "UserPoolTags"
        case verificationMessageTemplate = "VerificationMessageTemplate"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let userPoolIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userPoolId)
        userPoolId = userPoolIdDecoded
        let policiesDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.UserPoolPolicyType.self, forKey: .policies)
        policies = policiesDecoded
        let lambdaConfigDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.LambdaConfigType.self, forKey: .lambdaConfig)
        lambdaConfig = lambdaConfigDecoded
        let autoVerifiedAttributesContainer = try containerValues.decodeIfPresent([CognitoIdentityProviderClientTypes.VerifiedAttributeType?].self, forKey: .autoVerifiedAttributes)
        var autoVerifiedAttributesDecoded0:[CognitoIdentityProviderClientTypes.VerifiedAttributeType]? = nil
        if let autoVerifiedAttributesContainer = autoVerifiedAttributesContainer {
            autoVerifiedAttributesDecoded0 = [CognitoIdentityProviderClientTypes.VerifiedAttributeType]()
            for string0 in autoVerifiedAttributesContainer {
                if let string0 = string0 {
                    autoVerifiedAttributesDecoded0?.append(string0)
                }
            }
        }
        autoVerifiedAttributes = autoVerifiedAttributesDecoded0
        let smsVerificationMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .smsVerificationMessage)
        smsVerificationMessage = smsVerificationMessageDecoded
        let emailVerificationMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .emailVerificationMessage)
        emailVerificationMessage = emailVerificationMessageDecoded
        let emailVerificationSubjectDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .emailVerificationSubject)
        emailVerificationSubject = emailVerificationSubjectDecoded
        let verificationMessageTemplateDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.VerificationMessageTemplateType.self, forKey: .verificationMessageTemplate)
        verificationMessageTemplate = verificationMessageTemplateDecoded
        let smsAuthenticationMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .smsAuthenticationMessage)
        smsAuthenticationMessage = smsAuthenticationMessageDecoded
        let userAttributeUpdateSettingsDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.UserAttributeUpdateSettingsType.self, forKey: .userAttributeUpdateSettings)
        userAttributeUpdateSettings = userAttributeUpdateSettingsDecoded
        let mfaConfigurationDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.UserPoolMfaType.self, forKey: .mfaConfiguration)
        mfaConfiguration = mfaConfigurationDecoded
        let deviceConfigurationDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.DeviceConfigurationType.self, forKey: .deviceConfiguration)
        deviceConfiguration = deviceConfigurationDecoded
        let emailConfigurationDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.EmailConfigurationType.self, forKey: .emailConfiguration)
        emailConfiguration = emailConfigurationDecoded
        let smsConfigurationDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.SmsConfigurationType.self, forKey: .smsConfiguration)
        smsConfiguration = smsConfigurationDecoded
        let userPoolTagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .userPoolTags)
        var userPoolTagsDecoded0: [Swift.String:Swift.String]? = nil
        if let userPoolTagsContainer = userPoolTagsContainer {
            userPoolTagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvaluetype0) in userPoolTagsContainer {
                if let tagvaluetype0 = tagvaluetype0 {
                    userPoolTagsDecoded0?[key0] = tagvaluetype0
                }
            }
        }
        userPoolTags = userPoolTagsDecoded0
        let adminCreateUserConfigDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.AdminCreateUserConfigType.self, forKey: .adminCreateUserConfig)
        adminCreateUserConfig = adminCreateUserConfigDecoded
        let userPoolAddOnsDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.UserPoolAddOnsType.self, forKey: .userPoolAddOns)
        userPoolAddOns = userPoolAddOnsDecoded
        let accountRecoverySettingDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.AccountRecoverySettingType.self, forKey: .accountRecoverySetting)
        accountRecoverySetting = accountRecoverySettingDecoded
    }
}
