// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// Represents the request to create a user pool.
public struct CreateUserPoolInput: Swift.Equatable {
    /// The available verified method a user can use to recover their password when they call ForgotPassword. You can use this setting to define a preferred method when a user has more than one method available. With this setting, SMS doesn't qualify for a valid password recovery mechanism if the user also has SMS multi-factor authentication (MFA) activated. In the absence of this setting, Amazon Cognito uses the legacy behavior to determine the recovery method where SMS is preferred through email.
    public var accountRecoverySetting: CognitoIdentityProviderClientTypes.AccountRecoverySettingType?
    /// The configuration for AdminCreateUser requests.
    public var adminCreateUserConfig: CognitoIdentityProviderClientTypes.AdminCreateUserConfigType?
    /// Attributes supported as an alias for this user pool. Possible values: phone_number, email, or preferred_username.
    public var aliasAttributes: [CognitoIdentityProviderClientTypes.AliasAttributeType]?
    /// The attributes to be auto-verified. Possible values: email, phone_number.
    public var autoVerifiedAttributes: [CognitoIdentityProviderClientTypes.VerifiedAttributeType]?
    /// The device-remembering configuration for a user pool. A null value indicates that you have deactivated device remembering in your user pool. When you provide a value for any DeviceConfiguration field, you activate the Amazon Cognito device-remembering feature.
    public var deviceConfiguration: CognitoIdentityProviderClientTypes.DeviceConfigurationType?
    /// The email configuration of your user pool. The email configuration type sets your preferred sending method, Amazon Web Services Region, and sender for messages from your user pool.
    public var emailConfiguration: CognitoIdentityProviderClientTypes.EmailConfigurationType?
    /// This parameter is no longer used. See [VerificationMessageTemplateType](https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_VerificationMessageTemplateType.html).
    public var emailVerificationMessage: Swift.String?
    /// This parameter is no longer used. See [VerificationMessageTemplateType](https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_VerificationMessageTemplateType.html).
    public var emailVerificationSubject: Swift.String?
    /// The Lambda trigger configuration information for the new user pool. In a push model, event sources (such as Amazon S3 and custom applications) need permission to invoke a function. So you must make an extra call to add permission for these event sources to invoke your Lambda function. For more information on using the Lambda API to add permission, see[ AddPermission ](https://docs.aws.amazon.com/lambda/latest/dg/API_AddPermission.html). For adding permission using the CLI, see[ add-permission ](https://docs.aws.amazon.com/cli/latest/reference/lambda/add-permission.html).
    public var lambdaConfig: CognitoIdentityProviderClientTypes.LambdaConfigType?
    /// Specifies MFA configuration details.
    public var mfaConfiguration: CognitoIdentityProviderClientTypes.UserPoolMfaType?
    /// The policies associated with the new user pool.
    public var policies: CognitoIdentityProviderClientTypes.UserPoolPolicyType?
    /// A string used to name the user pool.
    /// This member is required.
    public var poolName: Swift.String?
    /// An array of schema attributes for the new user pool. These attributes can be standard or custom attributes.
    public var schema: [CognitoIdentityProviderClientTypes.SchemaAttributeType]?
    /// A string representing the SMS authentication message.
    public var smsAuthenticationMessage: Swift.String?
    /// The SMS configuration with the settings that your Amazon Cognito user pool must use to send an SMS message from your Amazon Web Services account through Amazon Simple Notification Service. To send SMS messages with Amazon SNS in the Amazon Web Services Region that you want, the Amazon Cognito user pool uses an Identity and Access Management (IAM) role in your Amazon Web Services account.
    public var smsConfiguration: CognitoIdentityProviderClientTypes.SmsConfigurationType?
    /// This parameter is no longer used. See [VerificationMessageTemplateType](https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_VerificationMessageTemplateType.html).
    public var smsVerificationMessage: Swift.String?
    /// The settings for updates to user attributes. These settings include the property AttributesRequireVerificationBeforeUpdate, a user-pool setting that tells Amazon Cognito how to handle changes to the value of your users' email address and phone number attributes. For more information, see [ Verifying updates to email addresses and phone numbers](https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-settings-email-phone-verification.html#user-pool-settings-verifications-verify-attribute-updates).
    public var userAttributeUpdateSettings: CognitoIdentityProviderClientTypes.UserAttributeUpdateSettingsType?
    /// Enables advanced security risk detection. Set the key AdvancedSecurityMode to the value "AUDIT".
    public var userPoolAddOns: CognitoIdentityProviderClientTypes.UserPoolAddOnsType?
    /// The tag keys and values to assign to the user pool. A tag is a label that you can use to categorize and manage user pools in different ways, such as by purpose, owner, environment, or other criteria.
    public var userPoolTags: [Swift.String:Swift.String]?
    /// Specifies whether a user can use an email address or phone number as a username when they sign up.
    public var usernameAttributes: [CognitoIdentityProviderClientTypes.UsernameAttributeType]?
    /// Case sensitivity on the username input for the selected sign-in option. For example, when case sensitivity is set to False, users can sign in using either "username" or "Username". This configuration is immutable once it has been set. For more information, see [UsernameConfigurationType](https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_UsernameConfigurationType.html).
    public var usernameConfiguration: CognitoIdentityProviderClientTypes.UsernameConfigurationType?
    /// The template for the verification message that the user sees when the app requests permission to access the user's information.
    public var verificationMessageTemplate: CognitoIdentityProviderClientTypes.VerificationMessageTemplateType?

    public init (
        accountRecoverySetting: CognitoIdentityProviderClientTypes.AccountRecoverySettingType? = nil,
        adminCreateUserConfig: CognitoIdentityProviderClientTypes.AdminCreateUserConfigType? = nil,
        aliasAttributes: [CognitoIdentityProviderClientTypes.AliasAttributeType]? = nil,
        autoVerifiedAttributes: [CognitoIdentityProviderClientTypes.VerifiedAttributeType]? = nil,
        deviceConfiguration: CognitoIdentityProviderClientTypes.DeviceConfigurationType? = nil,
        emailConfiguration: CognitoIdentityProviderClientTypes.EmailConfigurationType? = nil,
        emailVerificationMessage: Swift.String? = nil,
        emailVerificationSubject: Swift.String? = nil,
        lambdaConfig: CognitoIdentityProviderClientTypes.LambdaConfigType? = nil,
        mfaConfiguration: CognitoIdentityProviderClientTypes.UserPoolMfaType? = nil,
        policies: CognitoIdentityProviderClientTypes.UserPoolPolicyType? = nil,
        poolName: Swift.String? = nil,
        schema: [CognitoIdentityProviderClientTypes.SchemaAttributeType]? = nil,
        smsAuthenticationMessage: Swift.String? = nil,
        smsConfiguration: CognitoIdentityProviderClientTypes.SmsConfigurationType? = nil,
        smsVerificationMessage: Swift.String? = nil,
        userAttributeUpdateSettings: CognitoIdentityProviderClientTypes.UserAttributeUpdateSettingsType? = nil,
        userPoolAddOns: CognitoIdentityProviderClientTypes.UserPoolAddOnsType? = nil,
        userPoolTags: [Swift.String:Swift.String]? = nil,
        usernameAttributes: [CognitoIdentityProviderClientTypes.UsernameAttributeType]? = nil,
        usernameConfiguration: CognitoIdentityProviderClientTypes.UsernameConfigurationType? = nil,
        verificationMessageTemplate: CognitoIdentityProviderClientTypes.VerificationMessageTemplateType? = nil
    )
    {
        self.accountRecoverySetting = accountRecoverySetting
        self.adminCreateUserConfig = adminCreateUserConfig
        self.aliasAttributes = aliasAttributes
        self.autoVerifiedAttributes = autoVerifiedAttributes
        self.deviceConfiguration = deviceConfiguration
        self.emailConfiguration = emailConfiguration
        self.emailVerificationMessage = emailVerificationMessage
        self.emailVerificationSubject = emailVerificationSubject
        self.lambdaConfig = lambdaConfig
        self.mfaConfiguration = mfaConfiguration
        self.policies = policies
        self.poolName = poolName
        self.schema = schema
        self.smsAuthenticationMessage = smsAuthenticationMessage
        self.smsConfiguration = smsConfiguration
        self.smsVerificationMessage = smsVerificationMessage
        self.userAttributeUpdateSettings = userAttributeUpdateSettings
        self.userPoolAddOns = userPoolAddOns
        self.userPoolTags = userPoolTags
        self.usernameAttributes = usernameAttributes
        self.usernameConfiguration = usernameConfiguration
        self.verificationMessageTemplate = verificationMessageTemplate
    }
}
