// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CognitoIdentityProviderClientTypes.TokenValidityUnitsType: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accessToken = "AccessToken"
        case idToken = "IdToken"
        case refreshToken = "RefreshToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accessToken = self.accessToken {
            try encodeContainer.encode(accessToken.rawValue, forKey: .accessToken)
        }
        if let idToken = self.idToken {
            try encodeContainer.encode(idToken.rawValue, forKey: .idToken)
        }
        if let refreshToken = self.refreshToken {
            try encodeContainer.encode(refreshToken.rawValue, forKey: .refreshToken)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let accessTokenDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.TimeUnitsType.self, forKey: .accessToken)
        accessToken = accessTokenDecoded
        let idTokenDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.TimeUnitsType.self, forKey: .idToken)
        idToken = idTokenDecoded
        let refreshTokenDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.TimeUnitsType.self, forKey: .refreshToken)
        refreshToken = refreshTokenDecoded
    }
}
