// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateUserPoolClientInputBody: Swift.Equatable {
    let userPoolId: Swift.String?
    let clientName: Swift.String?
    let generateSecret: Swift.Bool
    let refreshTokenValidity: Swift.Int
    let accessTokenValidity: Swift.Int?
    let idTokenValidity: Swift.Int?
    let tokenValidityUnits: CognitoIdentityProviderClientTypes.TokenValidityUnitsType?
    let readAttributes: [Swift.String]?
    let writeAttributes: [Swift.String]?
    let explicitAuthFlows: [CognitoIdentityProviderClientTypes.ExplicitAuthFlowsType]?
    let supportedIdentityProviders: [Swift.String]?
    let callbackURLs: [Swift.String]?
    let logoutURLs: [Swift.String]?
    let defaultRedirectURI: Swift.String?
    let allowedOAuthFlows: [CognitoIdentityProviderClientTypes.OAuthFlowType]?
    let allowedOAuthScopes: [Swift.String]?
    let allowedOAuthFlowsUserPoolClient: Swift.Bool
    let analyticsConfiguration: CognitoIdentityProviderClientTypes.AnalyticsConfigurationType?
    let preventUserExistenceErrors: CognitoIdentityProviderClientTypes.PreventUserExistenceErrorTypes?
    let enableTokenRevocation: Swift.Bool?
    let enablePropagateAdditionalUserContextData: Swift.Bool?
    let authSessionValidity: Swift.Int?
}

extension CreateUserPoolClientInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accessTokenValidity = "AccessTokenValidity"
        case allowedOAuthFlows = "AllowedOAuthFlows"
        case allowedOAuthFlowsUserPoolClient = "AllowedOAuthFlowsUserPoolClient"
        case allowedOAuthScopes = "AllowedOAuthScopes"
        case analyticsConfiguration = "AnalyticsConfiguration"
        case authSessionValidity = "AuthSessionValidity"
        case callbackURLs = "CallbackURLs"
        case clientName = "ClientName"
        case defaultRedirectURI = "DefaultRedirectURI"
        case enablePropagateAdditionalUserContextData = "EnablePropagateAdditionalUserContextData"
        case enableTokenRevocation = "EnableTokenRevocation"
        case explicitAuthFlows = "ExplicitAuthFlows"
        case generateSecret = "GenerateSecret"
        case idTokenValidity = "IdTokenValidity"
        case logoutURLs = "LogoutURLs"
        case preventUserExistenceErrors = "PreventUserExistenceErrors"
        case readAttributes = "ReadAttributes"
        case refreshTokenValidity = "RefreshTokenValidity"
        case supportedIdentityProviders = "SupportedIdentityProviders"
        case tokenValidityUnits = "TokenValidityUnits"
        case userPoolId = "UserPoolId"
        case writeAttributes = "WriteAttributes"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let userPoolIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userPoolId)
        userPoolId = userPoolIdDecoded
        let clientNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientName)
        clientName = clientNameDecoded
        let generateSecretDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .generateSecret) ?? false
        generateSecret = generateSecretDecoded
        let refreshTokenValidityDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .refreshTokenValidity) ?? 0
        refreshTokenValidity = refreshTokenValidityDecoded
        let accessTokenValidityDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .accessTokenValidity)
        accessTokenValidity = accessTokenValidityDecoded
        let idTokenValidityDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .idTokenValidity)
        idTokenValidity = idTokenValidityDecoded
        let tokenValidityUnitsDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.TokenValidityUnitsType.self, forKey: .tokenValidityUnits)
        tokenValidityUnits = tokenValidityUnitsDecoded
        let readAttributesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .readAttributes)
        var readAttributesDecoded0:[Swift.String]? = nil
        if let readAttributesContainer = readAttributesContainer {
            readAttributesDecoded0 = [Swift.String]()
            for string0 in readAttributesContainer {
                if let string0 = string0 {
                    readAttributesDecoded0?.append(string0)
                }
            }
        }
        readAttributes = readAttributesDecoded0
        let writeAttributesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .writeAttributes)
        var writeAttributesDecoded0:[Swift.String]? = nil
        if let writeAttributesContainer = writeAttributesContainer {
            writeAttributesDecoded0 = [Swift.String]()
            for string0 in writeAttributesContainer {
                if let string0 = string0 {
                    writeAttributesDecoded0?.append(string0)
                }
            }
        }
        writeAttributes = writeAttributesDecoded0
        let explicitAuthFlowsContainer = try containerValues.decodeIfPresent([CognitoIdentityProviderClientTypes.ExplicitAuthFlowsType?].self, forKey: .explicitAuthFlows)
        var explicitAuthFlowsDecoded0:[CognitoIdentityProviderClientTypes.ExplicitAuthFlowsType]? = nil
        if let explicitAuthFlowsContainer = explicitAuthFlowsContainer {
            explicitAuthFlowsDecoded0 = [CognitoIdentityProviderClientTypes.ExplicitAuthFlowsType]()
            for string0 in explicitAuthFlowsContainer {
                if let string0 = string0 {
                    explicitAuthFlowsDecoded0?.append(string0)
                }
            }
        }
        explicitAuthFlows = explicitAuthFlowsDecoded0
        let supportedIdentityProvidersContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .supportedIdentityProviders)
        var supportedIdentityProvidersDecoded0:[Swift.String]? = nil
        if let supportedIdentityProvidersContainer = supportedIdentityProvidersContainer {
            supportedIdentityProvidersDecoded0 = [Swift.String]()
            for string0 in supportedIdentityProvidersContainer {
                if let string0 = string0 {
                    supportedIdentityProvidersDecoded0?.append(string0)
                }
            }
        }
        supportedIdentityProviders = supportedIdentityProvidersDecoded0
        let callbackURLsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .callbackURLs)
        var callbackURLsDecoded0:[Swift.String]? = nil
        if let callbackURLsContainer = callbackURLsContainer {
            callbackURLsDecoded0 = [Swift.String]()
            for string0 in callbackURLsContainer {
                if let string0 = string0 {
                    callbackURLsDecoded0?.append(string0)
                }
            }
        }
        callbackURLs = callbackURLsDecoded0
        let logoutURLsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .logoutURLs)
        var logoutURLsDecoded0:[Swift.String]? = nil
        if let logoutURLsContainer = logoutURLsContainer {
            logoutURLsDecoded0 = [Swift.String]()
            for string0 in logoutURLsContainer {
                if let string0 = string0 {
                    logoutURLsDecoded0?.append(string0)
                }
            }
        }
        logoutURLs = logoutURLsDecoded0
        let defaultRedirectURIDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .defaultRedirectURI)
        defaultRedirectURI = defaultRedirectURIDecoded
        let allowedOAuthFlowsContainer = try containerValues.decodeIfPresent([CognitoIdentityProviderClientTypes.OAuthFlowType?].self, forKey: .allowedOAuthFlows)
        var allowedOAuthFlowsDecoded0:[CognitoIdentityProviderClientTypes.OAuthFlowType]? = nil
        if let allowedOAuthFlowsContainer = allowedOAuthFlowsContainer {
            allowedOAuthFlowsDecoded0 = [CognitoIdentityProviderClientTypes.OAuthFlowType]()
            for string0 in allowedOAuthFlowsContainer {
                if let string0 = string0 {
                    allowedOAuthFlowsDecoded0?.append(string0)
                }
            }
        }
        allowedOAuthFlows = allowedOAuthFlowsDecoded0
        let allowedOAuthScopesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .allowedOAuthScopes)
        var allowedOAuthScopesDecoded0:[Swift.String]? = nil
        if let allowedOAuthScopesContainer = allowedOAuthScopesContainer {
            allowedOAuthScopesDecoded0 = [Swift.String]()
            for string0 in allowedOAuthScopesContainer {
                if let string0 = string0 {
                    allowedOAuthScopesDecoded0?.append(string0)
                }
            }
        }
        allowedOAuthScopes = allowedOAuthScopesDecoded0
        let allowedOAuthFlowsUserPoolClientDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .allowedOAuthFlowsUserPoolClient) ?? false
        allowedOAuthFlowsUserPoolClient = allowedOAuthFlowsUserPoolClientDecoded
        let analyticsConfigurationDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.AnalyticsConfigurationType.self, forKey: .analyticsConfiguration)
        analyticsConfiguration = analyticsConfigurationDecoded
        let preventUserExistenceErrorsDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.PreventUserExistenceErrorTypes.self, forKey: .preventUserExistenceErrors)
        preventUserExistenceErrors = preventUserExistenceErrorsDecoded
        let enableTokenRevocationDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enableTokenRevocation)
        enableTokenRevocation = enableTokenRevocationDecoded
        let enablePropagateAdditionalUserContextDataDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enablePropagateAdditionalUserContextData)
        enablePropagateAdditionalUserContextData = enablePropagateAdditionalUserContextDataDecoded
        let authSessionValidityDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .authSessionValidity)
        authSessionValidity = authSessionValidityDecoded
    }
}
