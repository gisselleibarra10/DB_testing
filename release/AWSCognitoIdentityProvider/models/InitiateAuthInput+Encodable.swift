// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension InitiateAuthInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case analyticsMetadata = "AnalyticsMetadata"
        case authFlow = "AuthFlow"
        case authParameters = "AuthParameters"
        case clientId = "ClientId"
        case clientMetadata = "ClientMetadata"
        case userContextData = "UserContextData"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let analyticsMetadata = self.analyticsMetadata {
            try encodeContainer.encode(analyticsMetadata, forKey: .analyticsMetadata)
        }
        if let authFlow = self.authFlow {
            try encodeContainer.encode(authFlow.rawValue, forKey: .authFlow)
        }
        if let authParameters = authParameters {
            var authParametersContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .authParameters)
            for (dictKey0, authparameterstype0) in authParameters {
                try authParametersContainer.encode(authparameterstype0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let clientId = self.clientId {
            try encodeContainer.encode(clientId, forKey: .clientId)
        }
        if let clientMetadata = clientMetadata {
            var clientMetadataContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .clientMetadata)
            for (dictKey0, clientmetadatatype0) in clientMetadata {
                try clientMetadataContainer.encode(clientmetadatatype0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let userContextData = self.userContextData {
            try encodeContainer.encode(userContextData, forKey: .userContextData)
        }
    }
}
