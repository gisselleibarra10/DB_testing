// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct RespondToAuthChallengeInputBody: Swift.Equatable {
    let clientId: Swift.String?
    let challengeName: CognitoIdentityProviderClientTypes.ChallengeNameType?
    let session: Swift.String?
    let challengeResponses: [Swift.String:Swift.String]?
    let analyticsMetadata: CognitoIdentityProviderClientTypes.AnalyticsMetadataType?
    let userContextData: CognitoIdentityProviderClientTypes.UserContextDataType?
    let clientMetadata: [Swift.String:Swift.String]?
}

extension RespondToAuthChallengeInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case analyticsMetadata = "AnalyticsMetadata"
        case challengeName = "ChallengeName"
        case challengeResponses = "ChallengeResponses"
        case clientId = "ClientId"
        case clientMetadata = "ClientMetadata"
        case session = "Session"
        case userContextData = "UserContextData"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clientIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientId)
        clientId = clientIdDecoded
        let challengeNameDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.ChallengeNameType.self, forKey: .challengeName)
        challengeName = challengeNameDecoded
        let sessionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .session)
        session = sessionDecoded
        let challengeResponsesContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .challengeResponses)
        var challengeResponsesDecoded0: [Swift.String:Swift.String]? = nil
        if let challengeResponsesContainer = challengeResponsesContainer {
            challengeResponsesDecoded0 = [Swift.String:Swift.String]()
            for (key0, stringtype0) in challengeResponsesContainer {
                if let stringtype0 = stringtype0 {
                    challengeResponsesDecoded0?[key0] = stringtype0
                }
            }
        }
        challengeResponses = challengeResponsesDecoded0
        let analyticsMetadataDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.AnalyticsMetadataType.self, forKey: .analyticsMetadata)
        analyticsMetadata = analyticsMetadataDecoded
        let userContextDataDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.UserContextDataType.self, forKey: .userContextData)
        userContextData = userContextDataDecoded
        let clientMetadataContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .clientMetadata)
        var clientMetadataDecoded0: [Swift.String:Swift.String]? = nil
        if let clientMetadataContainer = clientMetadataContainer {
            clientMetadataDecoded0 = [Swift.String:Swift.String]()
            for (key0, stringtype0) in clientMetadataContainer {
                if let stringtype0 = stringtype0 {
                    clientMetadataDecoded0?[key0] = stringtype0
                }
            }
        }
        clientMetadata = clientMetadataDecoded0
    }
}
