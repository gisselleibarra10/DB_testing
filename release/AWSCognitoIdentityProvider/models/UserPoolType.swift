// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CognitoIdentityProviderClientTypes {
    /// A container for information about the user pool.
    public struct UserPoolType: Swift.Equatable {
        /// The available verified method a user can use to recover their password when they call ForgotPassword. You can use this setting to define a preferred method when a user has more than one method available. With this setting, SMS doesn't qualify for a valid password recovery mechanism if the user also has SMS multi-factor authentication (MFA) activated. In the absence of this setting, Amazon Cognito uses the legacy behavior to determine the recovery method where SMS is preferred through email.
        public var accountRecoverySetting: CognitoIdentityProviderClientTypes.AccountRecoverySettingType?
        /// The configuration for AdminCreateUser requests.
        public var adminCreateUserConfig: CognitoIdentityProviderClientTypes.AdminCreateUserConfigType?
        /// The attributes that are aliased in a user pool.
        public var aliasAttributes: [CognitoIdentityProviderClientTypes.AliasAttributeType]?
        /// The Amazon Resource Name (ARN) for the user pool.
        public var arn: Swift.String?
        /// The attributes that are auto-verified in a user pool.
        public var autoVerifiedAttributes: [CognitoIdentityProviderClientTypes.VerifiedAttributeType]?
        /// The date the user pool was created.
        public var creationDate: ClientRuntime.Date?
        /// A custom domain name that you provide to Amazon Cognito. This parameter applies only if you use a custom domain to host the sign-up and sign-in pages for your application. An example of a custom domain name might be auth.example.com. For more information about adding a custom domain to your user pool, see [Using Your Own Domain for the Hosted UI](https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-add-custom-domain.html).
        public var customDomain: Swift.String?
        /// The device-remembering configuration for a user pool. A null value indicates that you have deactivated device remembering in your user pool. When you provide a value for any DeviceConfiguration field, you activate the Amazon Cognito device-remembering feature.
        public var deviceConfiguration: CognitoIdentityProviderClientTypes.DeviceConfigurationType?
        /// The domain prefix, if the user pool has a domain associated with it.
        public var domain: Swift.String?
        /// The email configuration of your user pool. The email configuration type sets your preferred sending method, Amazon Web Services Region, and sender for messages tfrom your user pool.
        public var emailConfiguration: CognitoIdentityProviderClientTypes.EmailConfigurationType?
        /// Deprecated. Review error codes from API requests with EventSource:cognito-idp.amazonaws.com in CloudTrail for information about problems with user pool email configuration.
        public var emailConfigurationFailure: Swift.String?
        /// This parameter is no longer used. See [VerificationMessageTemplateType](https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_VerificationMessageTemplateType.html).
        public var emailVerificationMessage: Swift.String?
        /// This parameter is no longer used. See [VerificationMessageTemplateType](https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_VerificationMessageTemplateType.html).
        public var emailVerificationSubject: Swift.String?
        /// A number estimating the size of the user pool.
        public var estimatedNumberOfUsers: Swift.Int
        /// The ID of the user pool.
        public var id: Swift.String?
        /// The Lambda triggers associated with the user pool.
        public var lambdaConfig: CognitoIdentityProviderClientTypes.LambdaConfigType?
        /// The date the user pool was last modified.
        public var lastModifiedDate: ClientRuntime.Date?
        /// Can be one of the following values:
        ///
        /// * OFF - MFA tokens aren't required and can't be specified during user registration.
        ///
        /// * ON - MFA tokens are required for all user registrations. You can only specify required when you're initially creating a user pool.
        ///
        /// * OPTIONAL - Users have the option when registering to create an MFA token.
        public var mfaConfiguration: CognitoIdentityProviderClientTypes.UserPoolMfaType?
        /// The name of the user pool.
        public var name: Swift.String?
        /// The policies associated with the user pool.
        public var policies: CognitoIdentityProviderClientTypes.UserPoolPolicyType?
        /// A container with the schema attributes of a user pool.
        public var schemaAttributes: [CognitoIdentityProviderClientTypes.SchemaAttributeType]?
        /// The contents of the SMS authentication message.
        public var smsAuthenticationMessage: Swift.String?
        /// The SMS configuration with the settings that your Amazon Cognito user pool must use to send an SMS message from your Amazon Web Services account through Amazon Simple Notification Service. To send SMS messages with Amazon SNS in the Amazon Web Services Region that you want, the Amazon Cognito user pool uses an Identity and Access Management (IAM) role in your Amazon Web Services account.
        public var smsConfiguration: CognitoIdentityProviderClientTypes.SmsConfigurationType?
        /// The reason why the SMS configuration can't send the messages to your users. This message might include comma-separated values to describe why your SMS configuration can't send messages to user pool end users. InvalidSmsRoleAccessPolicyException The Identity and Access Management role that Amazon Cognito uses to send SMS messages isn't properly configured. For more information, see [SmsConfigurationType](https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_SmsConfigurationType.html). SNSSandbox The Amazon Web Services account is in the SNS SMS Sandbox and messages will only reach verified end users. This parameter won’t get populated with SNSSandbox if the IAM user creating the user pool doesn’t have SNS permissions. To learn how to move your Amazon Web Services account out of the sandbox, see [Moving out of the SMS sandbox](https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox-moving-to-production.html).
        public var smsConfigurationFailure: Swift.String?
        /// This parameter is no longer used. See [VerificationMessageTemplateType](https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_VerificationMessageTemplateType.html).
        public var smsVerificationMessage: Swift.String?
        /// The status of a user pool.
        public var status: CognitoIdentityProviderClientTypes.StatusType?
        /// The settings for updates to user attributes. These settings include the property AttributesRequireVerificationBeforeUpdate, a user-pool setting that tells Amazon Cognito how to handle changes to the value of your users' email address and phone number attributes. For more information, see [ Verifying updates to email addresses and phone numbers](https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-settings-email-phone-verification.html#user-pool-settings-verifications-verify-attribute-updates).
        public var userAttributeUpdateSettings: CognitoIdentityProviderClientTypes.UserAttributeUpdateSettingsType?
        /// The user pool add-ons.
        public var userPoolAddOns: CognitoIdentityProviderClientTypes.UserPoolAddOnsType?
        /// The tags that are assigned to the user pool. A tag is a label that you can apply to user pools to categorize and manage them in different ways, such as by purpose, owner, environment, or other criteria.
        public var userPoolTags: [Swift.String:Swift.String]?
        /// Specifies whether a user can use an email address or phone number as a username when they sign up.
        public var usernameAttributes: [CognitoIdentityProviderClientTypes.UsernameAttributeType]?
        /// Case sensitivity of the username input for the selected sign-in option. For example, when case sensitivity is set to False, users can sign in using either "username" or "Username". This configuration is immutable once it has been set. For more information, see [UsernameConfigurationType](https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_UsernameConfigurationType.html).
        public var usernameConfiguration: CognitoIdentityProviderClientTypes.UsernameConfigurationType?
        /// The template for verification messages.
        public var verificationMessageTemplate: CognitoIdentityProviderClientTypes.VerificationMessageTemplateType?

        public init (
            accountRecoverySetting: CognitoIdentityProviderClientTypes.AccountRecoverySettingType? = nil,
            adminCreateUserConfig: CognitoIdentityProviderClientTypes.AdminCreateUserConfigType? = nil,
            aliasAttributes: [CognitoIdentityProviderClientTypes.AliasAttributeType]? = nil,
            arn: Swift.String? = nil,
            autoVerifiedAttributes: [CognitoIdentityProviderClientTypes.VerifiedAttributeType]? = nil,
            creationDate: ClientRuntime.Date? = nil,
            customDomain: Swift.String? = nil,
            deviceConfiguration: CognitoIdentityProviderClientTypes.DeviceConfigurationType? = nil,
            domain: Swift.String? = nil,
            emailConfiguration: CognitoIdentityProviderClientTypes.EmailConfigurationType? = nil,
            emailConfigurationFailure: Swift.String? = nil,
            emailVerificationMessage: Swift.String? = nil,
            emailVerificationSubject: Swift.String? = nil,
            estimatedNumberOfUsers: Swift.Int = 0,
            id: Swift.String? = nil,
            lambdaConfig: CognitoIdentityProviderClientTypes.LambdaConfigType? = nil,
            lastModifiedDate: ClientRuntime.Date? = nil,
            mfaConfiguration: CognitoIdentityProviderClientTypes.UserPoolMfaType? = nil,
            name: Swift.String? = nil,
            policies: CognitoIdentityProviderClientTypes.UserPoolPolicyType? = nil,
            schemaAttributes: [CognitoIdentityProviderClientTypes.SchemaAttributeType]? = nil,
            smsAuthenticationMessage: Swift.String? = nil,
            smsConfiguration: CognitoIdentityProviderClientTypes.SmsConfigurationType? = nil,
            smsConfigurationFailure: Swift.String? = nil,
            smsVerificationMessage: Swift.String? = nil,
            status: CognitoIdentityProviderClientTypes.StatusType? = nil,
            userAttributeUpdateSettings: CognitoIdentityProviderClientTypes.UserAttributeUpdateSettingsType? = nil,
            userPoolAddOns: CognitoIdentityProviderClientTypes.UserPoolAddOnsType? = nil,
            userPoolTags: [Swift.String:Swift.String]? = nil,
            usernameAttributes: [CognitoIdentityProviderClientTypes.UsernameAttributeType]? = nil,
            usernameConfiguration: CognitoIdentityProviderClientTypes.UsernameConfigurationType? = nil,
            verificationMessageTemplate: CognitoIdentityProviderClientTypes.VerificationMessageTemplateType? = nil
        )
        {
            self.accountRecoverySetting = accountRecoverySetting
            self.adminCreateUserConfig = adminCreateUserConfig
            self.aliasAttributes = aliasAttributes
            self.arn = arn
            self.autoVerifiedAttributes = autoVerifiedAttributes
            self.creationDate = creationDate
            self.customDomain = customDomain
            self.deviceConfiguration = deviceConfiguration
            self.domain = domain
            self.emailConfiguration = emailConfiguration
            self.emailConfigurationFailure = emailConfigurationFailure
            self.emailVerificationMessage = emailVerificationMessage
            self.emailVerificationSubject = emailVerificationSubject
            self.estimatedNumberOfUsers = estimatedNumberOfUsers
            self.id = id
            self.lambdaConfig = lambdaConfig
            self.lastModifiedDate = lastModifiedDate
            self.mfaConfiguration = mfaConfiguration
            self.name = name
            self.policies = policies
            self.schemaAttributes = schemaAttributes
            self.smsAuthenticationMessage = smsAuthenticationMessage
            self.smsConfiguration = smsConfiguration
            self.smsConfigurationFailure = smsConfigurationFailure
            self.smsVerificationMessage = smsVerificationMessage
            self.status = status
            self.userAttributeUpdateSettings = userAttributeUpdateSettings
            self.userPoolAddOns = userPoolAddOns
            self.userPoolTags = userPoolTags
            self.usernameAttributes = usernameAttributes
            self.usernameConfiguration = usernameConfiguration
            self.verificationMessageTemplate = verificationMessageTemplate
        }
    }

}
