// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListUsersInputBody: Swift.Equatable {
    let userPoolId: Swift.String?
    let attributesToGet: [Swift.String]?
    let limit: Swift.Int?
    let paginationToken: Swift.String?
    let filter: Swift.String?
}

extension ListUsersInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attributesToGet = "AttributesToGet"
        case filter = "Filter"
        case limit = "Limit"
        case paginationToken = "PaginationToken"
        case userPoolId = "UserPoolId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let userPoolIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userPoolId)
        userPoolId = userPoolIdDecoded
        let attributesToGetContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .attributesToGet)
        var attributesToGetDecoded0:[Swift.String]? = nil
        if let attributesToGetContainer = attributesToGetContainer {
            attributesToGetDecoded0 = [Swift.String]()
            for string0 in attributesToGetContainer {
                if let string0 = string0 {
                    attributesToGetDecoded0?.append(string0)
                }
            }
        }
        attributesToGet = attributesToGetDecoded0
        let limitDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .limit)
        limit = limitDecoded
        let paginationTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .paginationToken)
        paginationToken = paginationTokenDecoded
        let filterDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .filter)
        filter = filterDecoded
    }
}
