// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// Responds to the authentication challenge, as an administrator.
public struct AdminRespondToAuthChallengeOutputResponse: Swift.Equatable {
    /// The result returned by the server in response to the authentication request.
    public var authenticationResult: CognitoIdentityProviderClientTypes.AuthenticationResultType?
    /// The name of the challenge. For more information, see [AdminInitiateAuth](https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_AdminInitiateAuth.html).
    public var challengeName: CognitoIdentityProviderClientTypes.ChallengeNameType?
    /// The challenge parameters. For more information, see [AdminInitiateAuth](https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_AdminInitiateAuth.html).
    public var challengeParameters: [Swift.String:Swift.String]?
    /// The session that should be passed both ways in challenge-response calls to the service. If the caller must pass another challenge, they return a session with other challenge parameters. This session should be passed as it is to the next RespondToAuthChallenge API call.
    public var session: Swift.String?

    public init (
        authenticationResult: CognitoIdentityProviderClientTypes.AuthenticationResultType? = nil,
        challengeName: CognitoIdentityProviderClientTypes.ChallengeNameType? = nil,
        challengeParameters: [Swift.String:Swift.String]? = nil,
        session: Swift.String? = nil
    )
    {
        self.authenticationResult = authenticationResult
        self.challengeName = challengeName
        self.challengeParameters = challengeParameters
        self.session = session
    }
}
