// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CognitoIdentityProviderClientTypes.EventRiskType: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case compromisedCredentialsDetected = "CompromisedCredentialsDetected"
        case riskDecision = "RiskDecision"
        case riskLevel = "RiskLevel"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let compromisedCredentialsDetected = self.compromisedCredentialsDetected {
            try encodeContainer.encode(compromisedCredentialsDetected, forKey: .compromisedCredentialsDetected)
        }
        if let riskDecision = self.riskDecision {
            try encodeContainer.encode(riskDecision.rawValue, forKey: .riskDecision)
        }
        if let riskLevel = self.riskLevel {
            try encodeContainer.encode(riskLevel.rawValue, forKey: .riskLevel)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let riskDecisionDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.RiskDecisionType.self, forKey: .riskDecision)
        riskDecision = riskDecisionDecoded
        let riskLevelDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.RiskLevelType.self, forKey: .riskLevel)
        riskLevel = riskLevelDecoded
        let compromisedCredentialsDetectedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .compromisedCredentialsDetected)
        compromisedCredentialsDetected = compromisedCredentialsDetectedDecoded
    }
}
