// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CognitoIdentityProviderClientTypes.AuthEventType: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case challengeResponses = "ChallengeResponses"
        case creationDate = "CreationDate"
        case eventContextData = "EventContextData"
        case eventFeedback = "EventFeedback"
        case eventId = "EventId"
        case eventResponse = "EventResponse"
        case eventRisk = "EventRisk"
        case eventType = "EventType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let challengeResponses = challengeResponses {
            var challengeResponsesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .challengeResponses)
            for challengeresponselisttype0 in challengeResponses {
                try challengeResponsesContainer.encode(challengeresponselisttype0)
            }
        }
        if let creationDate = self.creationDate {
            try encodeContainer.encode(creationDate.timeIntervalSince1970, forKey: .creationDate)
        }
        if let eventContextData = self.eventContextData {
            try encodeContainer.encode(eventContextData, forKey: .eventContextData)
        }
        if let eventFeedback = self.eventFeedback {
            try encodeContainer.encode(eventFeedback, forKey: .eventFeedback)
        }
        if let eventId = self.eventId {
            try encodeContainer.encode(eventId, forKey: .eventId)
        }
        if let eventResponse = self.eventResponse {
            try encodeContainer.encode(eventResponse.rawValue, forKey: .eventResponse)
        }
        if let eventRisk = self.eventRisk {
            try encodeContainer.encode(eventRisk, forKey: .eventRisk)
        }
        if let eventType = self.eventType {
            try encodeContainer.encode(eventType.rawValue, forKey: .eventType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let eventIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .eventId)
        eventId = eventIdDecoded
        let eventTypeDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.EventType.self, forKey: .eventType)
        eventType = eventTypeDecoded
        let creationDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationDate)
        creationDate = creationDateDecoded
        let eventResponseDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.EventResponseType.self, forKey: .eventResponse)
        eventResponse = eventResponseDecoded
        let eventRiskDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.EventRiskType.self, forKey: .eventRisk)
        eventRisk = eventRiskDecoded
        let challengeResponsesContainer = try containerValues.decodeIfPresent([CognitoIdentityProviderClientTypes.ChallengeResponseType?].self, forKey: .challengeResponses)
        var challengeResponsesDecoded0:[CognitoIdentityProviderClientTypes.ChallengeResponseType]? = nil
        if let challengeResponsesContainer = challengeResponsesContainer {
            challengeResponsesDecoded0 = [CognitoIdentityProviderClientTypes.ChallengeResponseType]()
            for structure0 in challengeResponsesContainer {
                if let structure0 = structure0 {
                    challengeResponsesDecoded0?.append(structure0)
                }
            }
        }
        challengeResponses = challengeResponsesDecoded0
        let eventContextDataDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.EventContextDataType.self, forKey: .eventContextData)
        eventContextData = eventContextDataDecoded
        let eventFeedbackDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.EventFeedbackType.self, forKey: .eventFeedback)
        eventFeedback = eventFeedbackDecoded
    }
}
