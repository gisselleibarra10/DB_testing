// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// Represents the request to list users.
public struct ListUsersInput: Swift.Equatable {
    /// An array of strings, where each string is the name of a user attribute to be returned for each user in the search results. If the array is null, all attributes are returned.
    public var attributesToGet: [Swift.String]?
    /// A filter string of the form "AttributeName Filter-Type "AttributeValue"". Quotation marks within the filter string must be escaped using the backslash (\) character. For example, "family_name = \"Reddy\"".
    ///
    /// * AttributeName: The name of the attribute to search for. You can only search for one attribute at a time.
    ///
    /// * Filter-Type: For an exact match, use =, for example, "given_name = \"Jon\"". For a prefix ("starts with") match, use ^=, for example, "given_name ^= \"Jon\"".
    ///
    /// * AttributeValue: The attribute value that must be matched for each user.
    ///
    ///
    /// If the filter string is empty, ListUsers returns all users in the user pool. You can only search for the following standard attributes:
    ///
    /// * username (case-sensitive)
    ///
    /// * email
    ///
    /// * phone_number
    ///
    /// * name
    ///
    /// * given_name
    ///
    /// * family_name
    ///
    /// * preferred_username
    ///
    /// * cognito:user_status (called Status in the Console) (case-insensitive)
    ///
    /// * status (called Enabled in the Console) (case-sensitive)
    ///
    /// * sub
    ///
    ///
    /// Custom attributes aren't searchable. You can also list users with a client-side filter. The server-side filter matches no more than one attribute. For an advanced search, use a client-side filter with the --query parameter of the list-users action in the CLI. When you use a client-side filter, ListUsers returns a paginated list of zero or more users. You can receive multiple pages in a row with zero results. Repeat the query with each pagination token that is returned until you receive a null pagination token value, and then review the combined result. For more information about server-side and client-side filtering, see [FilteringCLI output](https://docs.aws.amazon.com/cli/latest/userguide/cli-usage-filter.html) in the [Command Line Interface User Guide](https://docs.aws.amazon.com/cli/latest/userguide/cli-usage-filter.html). For more information, see [Searching for Users Using the ListUsers API](https://docs.aws.amazon.com/cognito/latest/developerguide/how-to-manage-user-accounts.html#cognito-user-pools-searching-for-users-using-listusers-api) and [Examples of Using the ListUsers API](https://docs.aws.amazon.com/cognito/latest/developerguide/how-to-manage-user-accounts.html#cognito-user-pools-searching-for-users-listusers-api-examples) in the Amazon Cognito Developer Guide.
    public var filter: Swift.String?
    /// Maximum number of users to be returned.
    public var limit: Swift.Int?
    /// An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
    public var paginationToken: Swift.String?
    /// The user pool ID for the user pool on which the search should be performed.
    /// This member is required.
    public var userPoolId: Swift.String?

    public init (
        attributesToGet: [Swift.String]? = nil,
        filter: Swift.String? = nil,
        limit: Swift.Int? = nil,
        paginationToken: Swift.String? = nil,
        userPoolId: Swift.String? = nil
    )
    {
        self.attributesToGet = attributesToGet
        self.filter = filter
        self.limit = limit
        self.paginationToken = paginationToken
        self.userPoolId = userPoolId
    }
}
