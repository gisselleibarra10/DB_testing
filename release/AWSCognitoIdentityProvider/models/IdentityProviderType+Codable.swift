// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CognitoIdentityProviderClientTypes.IdentityProviderType: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attributeMapping = "AttributeMapping"
        case creationDate = "CreationDate"
        case idpIdentifiers = "IdpIdentifiers"
        case lastModifiedDate = "LastModifiedDate"
        case providerDetails = "ProviderDetails"
        case providerName = "ProviderName"
        case providerType = "ProviderType"
        case userPoolId = "UserPoolId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let attributeMapping = attributeMapping {
            var attributeMappingContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .attributeMapping)
            for (dictKey0, attributemappingtype0) in attributeMapping {
                try attributeMappingContainer.encode(attributemappingtype0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let creationDate = self.creationDate {
            try encodeContainer.encode(creationDate.timeIntervalSince1970, forKey: .creationDate)
        }
        if let idpIdentifiers = idpIdentifiers {
            var idpIdentifiersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .idpIdentifiers)
            for idpidentifierslisttype0 in idpIdentifiers {
                try idpIdentifiersContainer.encode(idpidentifierslisttype0)
            }
        }
        if let lastModifiedDate = self.lastModifiedDate {
            try encodeContainer.encode(lastModifiedDate.timeIntervalSince1970, forKey: .lastModifiedDate)
        }
        if let providerDetails = providerDetails {
            var providerDetailsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .providerDetails)
            for (dictKey0, providerdetailstype0) in providerDetails {
                try providerDetailsContainer.encode(providerdetailstype0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let providerName = self.providerName {
            try encodeContainer.encode(providerName, forKey: .providerName)
        }
        if let providerType = self.providerType {
            try encodeContainer.encode(providerType.rawValue, forKey: .providerType)
        }
        if let userPoolId = self.userPoolId {
            try encodeContainer.encode(userPoolId, forKey: .userPoolId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let userPoolIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userPoolId)
        userPoolId = userPoolIdDecoded
        let providerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .providerName)
        providerName = providerNameDecoded
        let providerTypeDecoded = try containerValues.decodeIfPresent(CognitoIdentityProviderClientTypes.IdentityProviderTypeType.self, forKey: .providerType)
        providerType = providerTypeDecoded
        let providerDetailsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .providerDetails)
        var providerDetailsDecoded0: [Swift.String:Swift.String]? = nil
        if let providerDetailsContainer = providerDetailsContainer {
            providerDetailsDecoded0 = [Swift.String:Swift.String]()
            for (key0, stringtype0) in providerDetailsContainer {
                if let stringtype0 = stringtype0 {
                    providerDetailsDecoded0?[key0] = stringtype0
                }
            }
        }
        providerDetails = providerDetailsDecoded0
        let attributeMappingContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .attributeMapping)
        var attributeMappingDecoded0: [Swift.String:Swift.String]? = nil
        if let attributeMappingContainer = attributeMappingContainer {
            attributeMappingDecoded0 = [Swift.String:Swift.String]()
            for (key0, stringtype0) in attributeMappingContainer {
                if let stringtype0 = stringtype0 {
                    attributeMappingDecoded0?[key0] = stringtype0
                }
            }
        }
        attributeMapping = attributeMappingDecoded0
        let idpIdentifiersContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .idpIdentifiers)
        var idpIdentifiersDecoded0:[Swift.String]? = nil
        if let idpIdentifiersContainer = idpIdentifiersContainer {
            idpIdentifiersDecoded0 = [Swift.String]()
            for string0 in idpIdentifiersContainer {
                if let string0 = string0 {
                    idpIdentifiersDecoded0?.append(string0)
                }
            }
        }
        idpIdentifiers = idpIdentifiersDecoded0
        let lastModifiedDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedDate)
        lastModifiedDate = lastModifiedDateDecoded
        let creationDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationDate)
        creationDate = creationDateDecoded
    }
}
