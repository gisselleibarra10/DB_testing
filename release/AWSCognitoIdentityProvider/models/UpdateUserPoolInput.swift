// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// Represents the request to update the user pool.
public struct UpdateUserPoolInput: Swift.Equatable {
    /// The available verified method a user can use to recover their password when they call ForgotPassword. You can use this setting to define a preferred method when a user has more than one method available. With this setting, SMS doesn't qualify for a valid password recovery mechanism if the user also has SMS multi-factor authentication (MFA) activated. In the absence of this setting, Amazon Cognito uses the legacy behavior to determine the recovery method where SMS is preferred through email.
    public var accountRecoverySetting: CognitoIdentityProviderClientTypes.AccountRecoverySettingType?
    /// The configuration for AdminCreateUser requests.
    public var adminCreateUserConfig: CognitoIdentityProviderClientTypes.AdminCreateUserConfigType?
    /// The attributes that are automatically verified when Amazon Cognito requests to update user pools.
    public var autoVerifiedAttributes: [CognitoIdentityProviderClientTypes.VerifiedAttributeType]?
    /// The device-remembering configuration for a user pool. A null value indicates that you have deactivated device remembering in your user pool. When you provide a value for any DeviceConfiguration field, you activate the Amazon Cognito device-remembering feature.
    public var deviceConfiguration: CognitoIdentityProviderClientTypes.DeviceConfigurationType?
    /// The email configuration of your user pool. The email configuration type sets your preferred sending method, Amazon Web Services Region, and sender for email invitation and verification messages from your user pool.
    public var emailConfiguration: CognitoIdentityProviderClientTypes.EmailConfigurationType?
    /// This parameter is no longer used. See [VerificationMessageTemplateType](https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_VerificationMessageTemplateType.html).
    public var emailVerificationMessage: Swift.String?
    /// This parameter is no longer used. See [VerificationMessageTemplateType](https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_VerificationMessageTemplateType.html).
    public var emailVerificationSubject: Swift.String?
    /// The Lambda configuration information from the request to update the user pool.
    public var lambdaConfig: CognitoIdentityProviderClientTypes.LambdaConfigType?
    /// Possible values include:
    ///
    /// * OFF - MFA tokens aren't required and can't be specified during user registration.
    ///
    /// * ON - MFA tokens are required for all user registrations. You can only specify ON when you're initially creating a user pool. You can use the [SetUserPoolMfaConfig](https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_SetUserPoolMfaConfig.html) API operation to turn MFA "ON" for existing user pools.
    ///
    /// * OPTIONAL - Users have the option when registering to create an MFA token.
    public var mfaConfiguration: CognitoIdentityProviderClientTypes.UserPoolMfaType?
    /// A container with the policies you want to update in a user pool.
    public var policies: CognitoIdentityProviderClientTypes.UserPoolPolicyType?
    /// The contents of the SMS authentication message.
    public var smsAuthenticationMessage: Swift.String?
    /// The SMS configuration with the settings that your Amazon Cognito user pool must use to send an SMS message from your Amazon Web Services account through Amazon Simple Notification Service. To send SMS messages with Amazon SNS in the Amazon Web Services Region that you want, the Amazon Cognito user pool uses an Identity and Access Management (IAM) role in your Amazon Web Services account.
    public var smsConfiguration: CognitoIdentityProviderClientTypes.SmsConfigurationType?
    /// This parameter is no longer used. See [VerificationMessageTemplateType](https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_VerificationMessageTemplateType.html).
    public var smsVerificationMessage: Swift.String?
    /// The settings for updates to user attributes. These settings include the property AttributesRequireVerificationBeforeUpdate, a user-pool setting that tells Amazon Cognito how to handle changes to the value of your users' email address and phone number attributes. For more information, see [ Verifying updates to email addresses and phone numbers](https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-settings-email-phone-verification.html#user-pool-settings-verifications-verify-attribute-updates).
    public var userAttributeUpdateSettings: CognitoIdentityProviderClientTypes.UserAttributeUpdateSettingsType?
    /// Enables advanced security risk detection. Set the key AdvancedSecurityMode to the value "AUDIT".
    public var userPoolAddOns: CognitoIdentityProviderClientTypes.UserPoolAddOnsType?
    /// The user pool ID for the user pool you want to update.
    /// This member is required.
    public var userPoolId: Swift.String?
    /// The tag keys and values to assign to the user pool. A tag is a label that you can use to categorize and manage user pools in different ways, such as by purpose, owner, environment, or other criteria.
    public var userPoolTags: [Swift.String:Swift.String]?
    /// The template for verification messages.
    public var verificationMessageTemplate: CognitoIdentityProviderClientTypes.VerificationMessageTemplateType?

    public init (
        accountRecoverySetting: CognitoIdentityProviderClientTypes.AccountRecoverySettingType? = nil,
        adminCreateUserConfig: CognitoIdentityProviderClientTypes.AdminCreateUserConfigType? = nil,
        autoVerifiedAttributes: [CognitoIdentityProviderClientTypes.VerifiedAttributeType]? = nil,
        deviceConfiguration: CognitoIdentityProviderClientTypes.DeviceConfigurationType? = nil,
        emailConfiguration: CognitoIdentityProviderClientTypes.EmailConfigurationType? = nil,
        emailVerificationMessage: Swift.String? = nil,
        emailVerificationSubject: Swift.String? = nil,
        lambdaConfig: CognitoIdentityProviderClientTypes.LambdaConfigType? = nil,
        mfaConfiguration: CognitoIdentityProviderClientTypes.UserPoolMfaType? = nil,
        policies: CognitoIdentityProviderClientTypes.UserPoolPolicyType? = nil,
        smsAuthenticationMessage: Swift.String? = nil,
        smsConfiguration: CognitoIdentityProviderClientTypes.SmsConfigurationType? = nil,
        smsVerificationMessage: Swift.String? = nil,
        userAttributeUpdateSettings: CognitoIdentityProviderClientTypes.UserAttributeUpdateSettingsType? = nil,
        userPoolAddOns: CognitoIdentityProviderClientTypes.UserPoolAddOnsType? = nil,
        userPoolId: Swift.String? = nil,
        userPoolTags: [Swift.String:Swift.String]? = nil,
        verificationMessageTemplate: CognitoIdentityProviderClientTypes.VerificationMessageTemplateType? = nil
    )
    {
        self.accountRecoverySetting = accountRecoverySetting
        self.adminCreateUserConfig = adminCreateUserConfig
        self.autoVerifiedAttributes = autoVerifiedAttributes
        self.deviceConfiguration = deviceConfiguration
        self.emailConfiguration = emailConfiguration
        self.emailVerificationMessage = emailVerificationMessage
        self.emailVerificationSubject = emailVerificationSubject
        self.lambdaConfig = lambdaConfig
        self.mfaConfiguration = mfaConfiguration
        self.policies = policies
        self.smsAuthenticationMessage = smsAuthenticationMessage
        self.smsConfiguration = smsConfiguration
        self.smsVerificationMessage = smsVerificationMessage
        self.userAttributeUpdateSettings = userAttributeUpdateSettings
        self.userPoolAddOns = userPoolAddOns
        self.userPoolId = userPoolId
        self.userPoolTags = userPoolTags
        self.verificationMessageTemplate = verificationMessageTemplate
    }
}
