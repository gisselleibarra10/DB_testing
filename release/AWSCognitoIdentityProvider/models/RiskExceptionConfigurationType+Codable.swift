// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CognitoIdentityProviderClientTypes.RiskExceptionConfigurationType: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case blockedIPRangeList = "BlockedIPRangeList"
        case skippedIPRangeList = "SkippedIPRangeList"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let blockedIPRangeList = blockedIPRangeList {
            var blockedIPRangeListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .blockedIPRangeList)
            for blockediprangelisttype0 in blockedIPRangeList {
                try blockedIPRangeListContainer.encode(blockediprangelisttype0)
            }
        }
        if let skippedIPRangeList = skippedIPRangeList {
            var skippedIPRangeListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .skippedIPRangeList)
            for skippediprangelisttype0 in skippedIPRangeList {
                try skippedIPRangeListContainer.encode(skippediprangelisttype0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let blockedIPRangeListContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .blockedIPRangeList)
        var blockedIPRangeListDecoded0:[Swift.String]? = nil
        if let blockedIPRangeListContainer = blockedIPRangeListContainer {
            blockedIPRangeListDecoded0 = [Swift.String]()
            for string0 in blockedIPRangeListContainer {
                if let string0 = string0 {
                    blockedIPRangeListDecoded0?.append(string0)
                }
            }
        }
        blockedIPRangeList = blockedIPRangeListDecoded0
        let skippedIPRangeListContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .skippedIPRangeList)
        var skippedIPRangeListDecoded0:[Swift.String]? = nil
        if let skippedIPRangeListContainer = skippedIPRangeListContainer {
            skippedIPRangeListDecoded0 = [Swift.String]()
            for string0 in skippedIPRangeListContainer {
                if let string0 = string0 {
                    skippedIPRangeListDecoded0?.append(string0)
                }
            }
        }
        skippedIPRangeList = skippedIPRangeListDecoded0
    }
}
