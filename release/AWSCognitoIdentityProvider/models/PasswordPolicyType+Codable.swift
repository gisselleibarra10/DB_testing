// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CognitoIdentityProviderClientTypes.PasswordPolicyType: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case minimumLength = "MinimumLength"
        case requireLowercase = "RequireLowercase"
        case requireNumbers = "RequireNumbers"
        case requireSymbols = "RequireSymbols"
        case requireUppercase = "RequireUppercase"
        case temporaryPasswordValidityDays = "TemporaryPasswordValidityDays"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if minimumLength != 0 {
            try encodeContainer.encode(minimumLength, forKey: .minimumLength)
        }
        if requireLowercase != false {
            try encodeContainer.encode(requireLowercase, forKey: .requireLowercase)
        }
        if requireNumbers != false {
            try encodeContainer.encode(requireNumbers, forKey: .requireNumbers)
        }
        if requireSymbols != false {
            try encodeContainer.encode(requireSymbols, forKey: .requireSymbols)
        }
        if requireUppercase != false {
            try encodeContainer.encode(requireUppercase, forKey: .requireUppercase)
        }
        if temporaryPasswordValidityDays != 0 {
            try encodeContainer.encode(temporaryPasswordValidityDays, forKey: .temporaryPasswordValidityDays)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let minimumLengthDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .minimumLength) ?? 0
        minimumLength = minimumLengthDecoded
        let requireUppercaseDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .requireUppercase) ?? false
        requireUppercase = requireUppercaseDecoded
        let requireLowercaseDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .requireLowercase) ?? false
        requireLowercase = requireLowercaseDecoded
        let requireNumbersDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .requireNumbers) ?? false
        requireNumbers = requireNumbersDecoded
        let requireSymbolsDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .requireSymbols) ?? false
        requireSymbols = requireSymbolsDecoded
        let temporaryPasswordValidityDaysDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .temporaryPasswordValidityDays) ?? 0
        temporaryPasswordValidityDays = temporaryPasswordValidityDaysDecoded
    }
}
