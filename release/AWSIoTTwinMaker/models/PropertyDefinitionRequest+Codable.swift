// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension IoTTwinMakerClientTypes.PropertyDefinitionRequest: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configuration
        case dataType
        case defaultValue
        case isExternalId
        case isRequiredInEntity
        case isStoredExternally
        case isTimeSeries
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let configuration = configuration {
            var configurationContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .configuration)
            for (dictKey0, configuration0) in configuration {
                try configurationContainer.encode(configuration0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let dataType = self.dataType {
            try encodeContainer.encode(dataType, forKey: .dataType)
        }
        if let defaultValue = self.defaultValue {
            try encodeContainer.encode(defaultValue, forKey: .defaultValue)
        }
        if let isExternalId = self.isExternalId {
            try encodeContainer.encode(isExternalId, forKey: .isExternalId)
        }
        if let isRequiredInEntity = self.isRequiredInEntity {
            try encodeContainer.encode(isRequiredInEntity, forKey: .isRequiredInEntity)
        }
        if let isStoredExternally = self.isStoredExternally {
            try encodeContainer.encode(isStoredExternally, forKey: .isStoredExternally)
        }
        if let isTimeSeries = self.isTimeSeries {
            try encodeContainer.encode(isTimeSeries, forKey: .isTimeSeries)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dataTypeDecoded = try containerValues.decodeIfPresent(IoTTwinMakerClientTypes.DataType.self, forKey: .dataType)
        dataType = dataTypeDecoded
        let isRequiredInEntityDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .isRequiredInEntity)
        isRequiredInEntity = isRequiredInEntityDecoded
        let isExternalIdDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .isExternalId)
        isExternalId = isExternalIdDecoded
        let isStoredExternallyDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .isStoredExternally)
        isStoredExternally = isStoredExternallyDecoded
        let isTimeSeriesDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .isTimeSeries)
        isTimeSeries = isTimeSeriesDecoded
        let defaultValueDecoded = try containerValues.decodeIfPresent(IoTTwinMakerClientTypes.DataValue.self, forKey: .defaultValue)
        defaultValue = defaultValueDecoded
        let configurationContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .configuration)
        var configurationDecoded0: [Swift.String:Swift.String]? = nil
        if let configurationContainer = configurationContainer {
            configurationDecoded0 = [Swift.String:Swift.String]()
            for (key0, value0) in configurationContainer {
                if let value0 = value0 {
                    configurationDecoded0?[key0] = value0
                }
            }
        }
        configuration = configurationDecoded0
    }
}
