// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListComponentTypesOutputResponseBody: Swift.Equatable {
    let workspaceId: Swift.String?
    let componentTypeSummaries: [IoTTwinMakerClientTypes.ComponentTypeSummary]?
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
}

extension ListComponentTypesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case componentTypeSummaries
        case maxResults
        case nextToken
        case workspaceId
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let workspaceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .workspaceId)
        workspaceId = workspaceIdDecoded
        let componentTypeSummariesContainer = try containerValues.decodeIfPresent([IoTTwinMakerClientTypes.ComponentTypeSummary?].self, forKey: .componentTypeSummaries)
        var componentTypeSummariesDecoded0:[IoTTwinMakerClientTypes.ComponentTypeSummary]? = nil
        if let componentTypeSummariesContainer = componentTypeSummariesContainer {
            componentTypeSummariesDecoded0 = [IoTTwinMakerClientTypes.ComponentTypeSummary]()
            for structure0 in componentTypeSummariesContainer {
                if let structure0 = structure0 {
                    componentTypeSummariesDecoded0?.append(structure0)
                }
            }
        }
        componentTypeSummaries = componentTypeSummariesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
    }
}
