// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension IoTTwinMakerClientTypes.EntityPropertyReference: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case componentName
        case entityId
        case externalIdProperty
        case propertyName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let componentName = self.componentName {
            try encodeContainer.encode(componentName, forKey: .componentName)
        }
        if let entityId = self.entityId {
            try encodeContainer.encode(entityId, forKey: .entityId)
        }
        if let externalIdProperty = externalIdProperty {
            var externalIdPropertyContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .externalIdProperty)
            for (dictKey0, externalidproperty0) in externalIdProperty {
                try externalIdPropertyContainer.encode(externalidproperty0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let propertyName = self.propertyName {
            try encodeContainer.encode(propertyName, forKey: .propertyName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let componentNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .componentName)
        componentName = componentNameDecoded
        let externalIdPropertyContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .externalIdProperty)
        var externalIdPropertyDecoded0: [Swift.String:Swift.String]? = nil
        if let externalIdPropertyContainer = externalIdPropertyContainer {
            externalIdPropertyDecoded0 = [Swift.String:Swift.String]()
            for (key0, string0) in externalIdPropertyContainer {
                if let string0 = string0 {
                    externalIdPropertyDecoded0?[key0] = string0
                }
            }
        }
        externalIdProperty = externalIdPropertyDecoded0
        let entityIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .entityId)
        entityId = entityIdDecoded
        let propertyNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .propertyName)
        propertyName = propertyNameDecoded
    }
}
