// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension IoTTwinMakerClientTypes.ListEntitiesFilter: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case componenttypeid = "componentTypeId"
        case externalid = "externalId"
        case parententityid = "parentEntityId"
        case sdkUnknown
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        switch self {
            case let .componenttypeid(componenttypeid):
                try container.encode(componenttypeid, forKey: .componenttypeid)
            case let .externalid(externalid):
                try container.encode(externalid, forKey: .externalid)
            case let .parententityid(parententityid):
                try container.encode(parententityid, forKey: .parententityid)
            case let .sdkUnknown(sdkUnknown):
                try container.encode(sdkUnknown, forKey: .sdkUnknown)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let values = try decoder.container(keyedBy: CodingKeys.self)
        let parententityidDecoded = try values.decodeIfPresent(Swift.String.self, forKey: .parententityid)
        if let parententityid = parententityidDecoded {
            self = .parententityid(parententityid)
            return
        }
        let componenttypeidDecoded = try values.decodeIfPresent(Swift.String.self, forKey: .componenttypeid)
        if let componenttypeid = componenttypeidDecoded {
            self = .componenttypeid(componenttypeid)
            return
        }
        let externalidDecoded = try values.decodeIfPresent(Swift.String.self, forKey: .externalid)
        if let externalid = externalidDecoded {
            self = .externalid(externalid)
            return
        }
        self = .sdkUnknown("")
    }
}
