// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetPropertyValueHistoryInputBody: Swift.Equatable {
    let entityId: Swift.String?
    let componentName: Swift.String?
    let componentTypeId: Swift.String?
    let selectedProperties: [Swift.String]?
    let propertyFilters: [IoTTwinMakerClientTypes.PropertyFilter]?
    let startDateTime: ClientRuntime.Date?
    let endDateTime: ClientRuntime.Date?
    let interpolation: IoTTwinMakerClientTypes.InterpolationParameters?
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
    let orderByTime: IoTTwinMakerClientTypes.OrderByTime?
    let startTime: Swift.String?
    let endTime: Swift.String?
}

extension GetPropertyValueHistoryInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case componentName
        case componentTypeId
        case endDateTime
        case endTime
        case entityId
        case interpolation
        case maxResults
        case nextToken
        case orderByTime
        case propertyFilters
        case selectedProperties
        case startDateTime
        case startTime
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let entityIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .entityId)
        entityId = entityIdDecoded
        let componentNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .componentName)
        componentName = componentNameDecoded
        let componentTypeIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .componentTypeId)
        componentTypeId = componentTypeIdDecoded
        let selectedPropertiesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .selectedProperties)
        var selectedPropertiesDecoded0:[Swift.String]? = nil
        if let selectedPropertiesContainer = selectedPropertiesContainer {
            selectedPropertiesDecoded0 = [Swift.String]()
            for string0 in selectedPropertiesContainer {
                if let string0 = string0 {
                    selectedPropertiesDecoded0?.append(string0)
                }
            }
        }
        selectedProperties = selectedPropertiesDecoded0
        let propertyFiltersContainer = try containerValues.decodeIfPresent([IoTTwinMakerClientTypes.PropertyFilter?].self, forKey: .propertyFilters)
        var propertyFiltersDecoded0:[IoTTwinMakerClientTypes.PropertyFilter]? = nil
        if let propertyFiltersContainer = propertyFiltersContainer {
            propertyFiltersDecoded0 = [IoTTwinMakerClientTypes.PropertyFilter]()
            for structure0 in propertyFiltersContainer {
                if let structure0 = structure0 {
                    propertyFiltersDecoded0?.append(structure0)
                }
            }
        }
        propertyFilters = propertyFiltersDecoded0
        let startDateTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .startDateTime)
        startDateTime = startDateTimeDecoded
        let endDateTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .endDateTime)
        endDateTime = endDateTimeDecoded
        let interpolationDecoded = try containerValues.decodeIfPresent(IoTTwinMakerClientTypes.InterpolationParameters.self, forKey: .interpolation)
        interpolation = interpolationDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let orderByTimeDecoded = try containerValues.decodeIfPresent(IoTTwinMakerClientTypes.OrderByTime.self, forKey: .orderByTime)
        orderByTime = orderByTimeDecoded
        let startTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .startTime)
        startTime = startTimeDecoded
        let endTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .endTime)
        endTime = endTimeDecoded
    }
}
