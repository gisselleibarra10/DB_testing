// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension IoTTwinMakerClientTypes.ComponentUpdateRequest: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case componentTypeId
        case description
        case propertyUpdates
        case updateType
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let componentTypeId = self.componentTypeId {
            try encodeContainer.encode(componentTypeId, forKey: .componentTypeId)
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let propertyUpdates = propertyUpdates {
            var propertyUpdatesContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .propertyUpdates)
            for (dictKey0, propertyrequests0) in propertyUpdates {
                try propertyUpdatesContainer.encode(propertyrequests0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let updateType = self.updateType {
            try encodeContainer.encode(updateType.rawValue, forKey: .updateType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let updateTypeDecoded = try containerValues.decodeIfPresent(IoTTwinMakerClientTypes.ComponentUpdateType.self, forKey: .updateType)
        updateType = updateTypeDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let componentTypeIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .componentTypeId)
        componentTypeId = componentTypeIdDecoded
        let propertyUpdatesContainer = try containerValues.decodeIfPresent([Swift.String: IoTTwinMakerClientTypes.PropertyRequest?].self, forKey: .propertyUpdates)
        var propertyUpdatesDecoded0: [Swift.String:IoTTwinMakerClientTypes.PropertyRequest]? = nil
        if let propertyUpdatesContainer = propertyUpdatesContainer {
            propertyUpdatesDecoded0 = [Swift.String:IoTTwinMakerClientTypes.PropertyRequest]()
            for (key0, propertyrequest0) in propertyUpdatesContainer {
                if let propertyrequest0 = propertyrequest0 {
                    propertyUpdatesDecoded0?[key0] = propertyrequest0
                }
            }
        }
        propertyUpdates = propertyUpdatesDecoded0
    }
}
