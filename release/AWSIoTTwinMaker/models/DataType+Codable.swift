// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension IoTTwinMakerClientTypes.DataType: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case allowedValues
        case nestedType
        case relationship
        case type
        case unitOfMeasure
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let allowedValues = allowedValues {
            var allowedValuesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .allowedValues)
            for datavaluelist0 in allowedValues {
                try allowedValuesContainer.encode(datavaluelist0)
            }
        }
        if let nestedType = self.nestedType {
            try encodeContainer.encode(nestedType.value, forKey: .nestedType)
        }
        if let relationship = self.relationship {
            try encodeContainer.encode(relationship, forKey: .relationship)
        }
        if let type = self.type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
        if let unitOfMeasure = self.unitOfMeasure {
            try encodeContainer.encode(unitOfMeasure, forKey: .unitOfMeasure)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let typeDecoded = try containerValues.decodeIfPresent(IoTTwinMakerClientTypes.ModelType.self, forKey: .type)
        type = typeDecoded
        let nestedTypeDecoded = try containerValues.decodeIfPresent(Box<IoTTwinMakerClientTypes.DataType>.self, forKey: .nestedType)
        nestedType = nestedTypeDecoded
        let allowedValuesContainer = try containerValues.decodeIfPresent([IoTTwinMakerClientTypes.DataValue?].self, forKey: .allowedValues)
        var allowedValuesDecoded0:[IoTTwinMakerClientTypes.DataValue]? = nil
        if let allowedValuesContainer = allowedValuesContainer {
            allowedValuesDecoded0 = [IoTTwinMakerClientTypes.DataValue]()
            for structure0 in allowedValuesContainer {
                if let structure0 = structure0 {
                    allowedValuesDecoded0?.append(structure0)
                }
            }
        }
        allowedValues = allowedValuesDecoded0
        let unitOfMeasureDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .unitOfMeasure)
        unitOfMeasure = unitOfMeasureDecoded
        let relationshipDecoded = try containerValues.decodeIfPresent(IoTTwinMakerClientTypes.Relationship.self, forKey: .relationship)
        relationship = relationshipDecoded
    }
}
