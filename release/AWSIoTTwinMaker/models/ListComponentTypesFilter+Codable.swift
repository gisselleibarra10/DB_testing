// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension IoTTwinMakerClientTypes.ListComponentTypesFilter: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case extendsfrom = "extendsFrom"
        case isabstract = "isAbstract"
        case namespace
        case sdkUnknown
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        switch self {
            case let .extendsfrom(extendsfrom):
                try container.encode(extendsfrom, forKey: .extendsfrom)
            case let .isabstract(isabstract):
                try container.encode(isabstract, forKey: .isabstract)
            case let .namespace(namespace):
                try container.encode(namespace, forKey: .namespace)
            case let .sdkUnknown(sdkUnknown):
                try container.encode(sdkUnknown, forKey: .sdkUnknown)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let values = try decoder.container(keyedBy: CodingKeys.self)
        let extendsfromDecoded = try values.decodeIfPresent(Swift.String.self, forKey: .extendsfrom)
        if let extendsfrom = extendsfromDecoded {
            self = .extendsfrom(extendsfrom)
            return
        }
        let namespaceDecoded = try values.decodeIfPresent(Swift.String.self, forKey: .namespace)
        if let namespace = namespaceDecoded {
            self = .namespace(namespace)
            return
        }
        let isabstractDecoded = try values.decodeIfPresent(Swift.Bool.self, forKey: .isabstract)
        if let isabstract = isabstractDecoded {
            self = .isabstract(isabstract)
            return
        }
        self = .sdkUnknown("")
    }
}
