// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension GetPropertyValueHistoryInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case componentName
        case componentTypeId
        case endDateTime
        case endTime
        case entityId
        case interpolation
        case maxResults
        case nextToken
        case orderByTime
        case propertyFilters
        case selectedProperties
        case startDateTime
        case startTime
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let componentName = self.componentName {
            try encodeContainer.encode(componentName, forKey: .componentName)
        }
        if let componentTypeId = self.componentTypeId {
            try encodeContainer.encode(componentTypeId, forKey: .componentTypeId)
        }
        if let endDateTime = self.endDateTime {
            try encodeContainer.encode(endDateTime.timeIntervalSince1970, forKey: .endDateTime)
        }
        if let endTime = self.endTime {
            try encodeContainer.encode(endTime, forKey: .endTime)
        }
        if let entityId = self.entityId {
            try encodeContainer.encode(entityId, forKey: .entityId)
        }
        if let interpolation = self.interpolation {
            try encodeContainer.encode(interpolation, forKey: .interpolation)
        }
        if let maxResults = self.maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let orderByTime = self.orderByTime {
            try encodeContainer.encode(orderByTime.rawValue, forKey: .orderByTime)
        }
        if let propertyFilters = propertyFilters {
            var propertyFiltersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .propertyFilters)
            for propertyfilters0 in propertyFilters {
                try propertyFiltersContainer.encode(propertyfilters0)
            }
        }
        if let selectedProperties = selectedProperties {
            var selectedPropertiesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .selectedProperties)
            for selectedpropertylist0 in selectedProperties {
                try selectedPropertiesContainer.encode(selectedpropertylist0)
            }
        }
        if let startDateTime = self.startDateTime {
            try encodeContainer.encode(startDateTime.timeIntervalSince1970, forKey: .startDateTime)
        }
        if let startTime = self.startTime {
            try encodeContainer.encode(startTime, forKey: .startTime)
        }
    }
}
