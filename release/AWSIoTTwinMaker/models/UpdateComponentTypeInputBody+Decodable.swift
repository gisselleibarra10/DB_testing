// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct UpdateComponentTypeInputBody: Swift.Equatable {
    let isSingleton: Swift.Bool?
    let description: Swift.String?
    let propertyDefinitions: [Swift.String:IoTTwinMakerClientTypes.PropertyDefinitionRequest]?
    let extendsFrom: [Swift.String]?
    let functions: [Swift.String:IoTTwinMakerClientTypes.FunctionRequest]?
}

extension UpdateComponentTypeInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description
        case extendsFrom
        case functions
        case isSingleton
        case propertyDefinitions
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let isSingletonDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .isSingleton)
        isSingleton = isSingletonDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let propertyDefinitionsContainer = try containerValues.decodeIfPresent([Swift.String: IoTTwinMakerClientTypes.PropertyDefinitionRequest?].self, forKey: .propertyDefinitions)
        var propertyDefinitionsDecoded0: [Swift.String:IoTTwinMakerClientTypes.PropertyDefinitionRequest]? = nil
        if let propertyDefinitionsContainer = propertyDefinitionsContainer {
            propertyDefinitionsDecoded0 = [Swift.String:IoTTwinMakerClientTypes.PropertyDefinitionRequest]()
            for (key0, propertydefinitionrequest0) in propertyDefinitionsContainer {
                if let propertydefinitionrequest0 = propertydefinitionrequest0 {
                    propertyDefinitionsDecoded0?[key0] = propertydefinitionrequest0
                }
            }
        }
        propertyDefinitions = propertyDefinitionsDecoded0
        let extendsFromContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .extendsFrom)
        var extendsFromDecoded0:[Swift.String]? = nil
        if let extendsFromContainer = extendsFromContainer {
            extendsFromDecoded0 = [Swift.String]()
            for string0 in extendsFromContainer {
                if let string0 = string0 {
                    extendsFromDecoded0?.append(string0)
                }
            }
        }
        extendsFrom = extendsFromDecoded0
        let functionsContainer = try containerValues.decodeIfPresent([Swift.String: IoTTwinMakerClientTypes.FunctionRequest?].self, forKey: .functions)
        var functionsDecoded0: [Swift.String:IoTTwinMakerClientTypes.FunctionRequest]? = nil
        if let functionsContainer = functionsContainer {
            functionsDecoded0 = [Swift.String:IoTTwinMakerClientTypes.FunctionRequest]()
            for (key0, functionrequest0) in functionsContainer {
                if let functionrequest0 = functionrequest0 {
                    functionsDecoded0?[key0] = functionrequest0
                }
            }
        }
        functions = functionsDecoded0
    }
}
