// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension IoTTwinMakerClientTypes.FunctionRequest: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case implementedBy
        case requiredProperties
        case scope
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let implementedBy = self.implementedBy {
            try encodeContainer.encode(implementedBy, forKey: .implementedBy)
        }
        if let requiredProperties = requiredProperties {
            var requiredPropertiesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .requiredProperties)
            for requiredproperties0 in requiredProperties {
                try requiredPropertiesContainer.encode(requiredproperties0)
            }
        }
        if let scope = self.scope {
            try encodeContainer.encode(scope.rawValue, forKey: .scope)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let requiredPropertiesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .requiredProperties)
        var requiredPropertiesDecoded0:Swift.Set<Swift.String>? = nil
        if let requiredPropertiesContainer = requiredPropertiesContainer {
            requiredPropertiesDecoded0 = Swift.Set<Swift.String>()
            for string0 in requiredPropertiesContainer {
                if let string0 = string0 {
                    requiredPropertiesDecoded0?.insert(string0)
                }
            }
        }
        requiredProperties = requiredPropertiesDecoded0
        let scopeDecoded = try containerValues.decodeIfPresent(IoTTwinMakerClientTypes.Scope.self, forKey: .scope)
        scope = scopeDecoded
        let implementedByDecoded = try containerValues.decodeIfPresent(IoTTwinMakerClientTypes.DataConnector.self, forKey: .implementedBy)
        implementedBy = implementedByDecoded
    }
}
