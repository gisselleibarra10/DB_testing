// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetEntityOutputResponseBody: Swift.Equatable {
    let entityId: Swift.String?
    let entityName: Swift.String?
    let arn: Swift.String?
    let status: IoTTwinMakerClientTypes.Status?
    let workspaceId: Swift.String?
    let description: Swift.String?
    let components: [Swift.String:IoTTwinMakerClientTypes.ComponentResponse]?
    let parentEntityId: Swift.String?
    let hasChildEntities: Swift.Bool?
    let creationDateTime: ClientRuntime.Date?
    let updateDateTime: ClientRuntime.Date?
}

extension GetEntityOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn
        case components
        case creationDateTime
        case description
        case entityId
        case entityName
        case hasChildEntities
        case parentEntityId
        case status
        case updateDateTime
        case workspaceId
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let entityIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .entityId)
        entityId = entityIdDecoded
        let entityNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .entityName)
        entityName = entityNameDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let statusDecoded = try containerValues.decodeIfPresent(IoTTwinMakerClientTypes.Status.self, forKey: .status)
        status = statusDecoded
        let workspaceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .workspaceId)
        workspaceId = workspaceIdDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let componentsContainer = try containerValues.decodeIfPresent([Swift.String: IoTTwinMakerClientTypes.ComponentResponse?].self, forKey: .components)
        var componentsDecoded0: [Swift.String:IoTTwinMakerClientTypes.ComponentResponse]? = nil
        if let componentsContainer = componentsContainer {
            componentsDecoded0 = [Swift.String:IoTTwinMakerClientTypes.ComponentResponse]()
            for (key0, componentresponse0) in componentsContainer {
                if let componentresponse0 = componentresponse0 {
                    componentsDecoded0?[key0] = componentresponse0
                }
            }
        }
        components = componentsDecoded0
        let parentEntityIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .parentEntityId)
        parentEntityId = parentEntityIdDecoded
        let hasChildEntitiesDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .hasChildEntities)
        hasChildEntities = hasChildEntitiesDecoded
        let creationDateTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationDateTime)
        creationDateTime = creationDateTimeDecoded
        let updateDateTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .updateDateTime)
        updateDateTime = updateDateTimeDecoded
    }
}
