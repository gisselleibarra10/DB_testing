// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetSceneOutputResponseBody: Swift.Equatable {
    let workspaceId: Swift.String?
    let sceneId: Swift.String?
    let contentLocation: Swift.String?
    let arn: Swift.String?
    let creationDateTime: ClientRuntime.Date?
    let updateDateTime: ClientRuntime.Date?
    let description: Swift.String?
    let capabilities: [Swift.String]?
}

extension GetSceneOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn
        case capabilities
        case contentLocation
        case creationDateTime
        case description
        case sceneId
        case updateDateTime
        case workspaceId
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let workspaceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .workspaceId)
        workspaceId = workspaceIdDecoded
        let sceneIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sceneId)
        sceneId = sceneIdDecoded
        let contentLocationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .contentLocation)
        contentLocation = contentLocationDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let creationDateTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationDateTime)
        creationDateTime = creationDateTimeDecoded
        let updateDateTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .updateDateTime)
        updateDateTime = updateDateTimeDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let capabilitiesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .capabilities)
        var capabilitiesDecoded0:[Swift.String]? = nil
        if let capabilitiesContainer = capabilitiesContainer {
            capabilitiesDecoded0 = [Swift.String]()
            for string0 in capabilitiesContainer {
                if let string0 = string0 {
                    capabilitiesDecoded0?.append(string0)
                }
            }
        }
        capabilities = capabilitiesDecoded0
    }
}
