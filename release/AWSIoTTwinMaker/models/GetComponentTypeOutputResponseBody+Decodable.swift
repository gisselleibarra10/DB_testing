// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetComponentTypeOutputResponseBody: Swift.Equatable {
    let workspaceId: Swift.String?
    let isSingleton: Swift.Bool?
    let componentTypeId: Swift.String?
    let description: Swift.String?
    let propertyDefinitions: [Swift.String:IoTTwinMakerClientTypes.PropertyDefinitionResponse]?
    let extendsFrom: [Swift.String]?
    let functions: [Swift.String:IoTTwinMakerClientTypes.FunctionResponse]?
    let creationDateTime: ClientRuntime.Date?
    let updateDateTime: ClientRuntime.Date?
    let arn: Swift.String?
    let isAbstract: Swift.Bool?
    let isSchemaInitialized: Swift.Bool?
    let status: IoTTwinMakerClientTypes.Status?
}

extension GetComponentTypeOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn
        case componentTypeId
        case creationDateTime
        case description
        case extendsFrom
        case functions
        case isAbstract
        case isSchemaInitialized
        case isSingleton
        case propertyDefinitions
        case status
        case updateDateTime
        case workspaceId
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let workspaceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .workspaceId)
        workspaceId = workspaceIdDecoded
        let isSingletonDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .isSingleton)
        isSingleton = isSingletonDecoded
        let componentTypeIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .componentTypeId)
        componentTypeId = componentTypeIdDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let propertyDefinitionsContainer = try containerValues.decodeIfPresent([Swift.String: IoTTwinMakerClientTypes.PropertyDefinitionResponse?].self, forKey: .propertyDefinitions)
        var propertyDefinitionsDecoded0: [Swift.String:IoTTwinMakerClientTypes.PropertyDefinitionResponse]? = nil
        if let propertyDefinitionsContainer = propertyDefinitionsContainer {
            propertyDefinitionsDecoded0 = [Swift.String:IoTTwinMakerClientTypes.PropertyDefinitionResponse]()
            for (key0, propertydefinitionresponse0) in propertyDefinitionsContainer {
                if let propertydefinitionresponse0 = propertydefinitionresponse0 {
                    propertyDefinitionsDecoded0?[key0] = propertydefinitionresponse0
                }
            }
        }
        propertyDefinitions = propertyDefinitionsDecoded0
        let extendsFromContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .extendsFrom)
        var extendsFromDecoded0:[Swift.String]? = nil
        if let extendsFromContainer = extendsFromContainer {
            extendsFromDecoded0 = [Swift.String]()
            for string0 in extendsFromContainer {
                if let string0 = string0 {
                    extendsFromDecoded0?.append(string0)
                }
            }
        }
        extendsFrom = extendsFromDecoded0
        let functionsContainer = try containerValues.decodeIfPresent([Swift.String: IoTTwinMakerClientTypes.FunctionResponse?].self, forKey: .functions)
        var functionsDecoded0: [Swift.String:IoTTwinMakerClientTypes.FunctionResponse]? = nil
        if let functionsContainer = functionsContainer {
            functionsDecoded0 = [Swift.String:IoTTwinMakerClientTypes.FunctionResponse]()
            for (key0, functionresponse0) in functionsContainer {
                if let functionresponse0 = functionresponse0 {
                    functionsDecoded0?[key0] = functionresponse0
                }
            }
        }
        functions = functionsDecoded0
        let creationDateTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationDateTime)
        creationDateTime = creationDateTimeDecoded
        let updateDateTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .updateDateTime)
        updateDateTime = updateDateTimeDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let isAbstractDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .isAbstract)
        isAbstract = isAbstractDecoded
        let isSchemaInitializedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .isSchemaInitialized)
        isSchemaInitialized = isSchemaInitializedDecoded
        let statusDecoded = try containerValues.decodeIfPresent(IoTTwinMakerClientTypes.Status.self, forKey: .status)
        status = statusDecoded
    }
}
