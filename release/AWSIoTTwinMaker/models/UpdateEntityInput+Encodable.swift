// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension UpdateEntityInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case componentUpdates
        case description
        case entityName
        case parentEntityUpdate
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let componentUpdates = componentUpdates {
            var componentUpdatesContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .componentUpdates)
            for (dictKey0, componentupdatesmaprequest0) in componentUpdates {
                try componentUpdatesContainer.encode(componentupdatesmaprequest0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let entityName = self.entityName {
            try encodeContainer.encode(entityName, forKey: .entityName)
        }
        if let parentEntityUpdate = self.parentEntityUpdate {
            try encodeContainer.encode(parentEntityUpdate, forKey: .parentEntityUpdate)
        }
    }
}
