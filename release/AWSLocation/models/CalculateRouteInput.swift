// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct CalculateRouteInput: Swift.Equatable {
    /// The name of the route calculator resource that you want to use to calculate the route.
    /// This member is required.
    public var calculatorName: Swift.String?
    /// Specifies route preferences when traveling by Car, such as avoiding routes that use ferries or tolls. Requirements: TravelMode must be specified as Car.
    public var carModeOptions: LocationClientTypes.CalculateRouteCarModeOptions?
    /// Sets the time of departure as the current time. Uses the current time to calculate a route. Otherwise, the best time of day to travel with the best traffic conditions is used to calculate the route. Default Value: false Valid Values: false | true
    public var departNow: Swift.Bool?
    /// The start position for the route. Defined in [World Geodetic System (WGS 84)](https://earth-info.nga.mil/index.php?dir=wgs84&action=wgs84) format: [longitude, latitude].
    ///
    /// * For example, [-123.115, 49.285]
    ///
    ///
    /// If you specify a departure that's not located on a road, Amazon Location [moves the position to the nearest road](https://docs.aws.amazon.com/location/latest/developerguide/snap-to-nearby-road.html). If Esri is the provider for your route calculator, specifying a route that is longer than 400 km returns a 400 RoutesValidationException error. Valid Values: [-180 to 180,-90 to 90]
    /// This member is required.
    public var departurePosition: [Swift.Double]?
    /// Specifies the desired time of departure. Uses the given time to calculate the route. Otherwise, the best time of day to travel with the best traffic conditions is used to calculate the route. Setting a departure time in the past returns a 400 ValidationException error.
    ///
    /// * In [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) format: YYYY-MM-DDThh:mm:ss.sssZ. For example, 2020â€“07-2T12:15:20.000Z+01:00
    public var departureTime: ClientRuntime.Date?
    /// The finish position for the route. Defined in [World Geodetic System (WGS 84)](https://earth-info.nga.mil/index.php?dir=wgs84&action=wgs84) format: [longitude, latitude].
    ///
    /// * For example, [-122.339, 47.615]
    ///
    ///
    /// If you specify a destination that's not located on a road, Amazon Location [moves the position to the nearest road](https://docs.aws.amazon.com/location/latest/developerguide/snap-to-nearby-road.html). Valid Values: [-180 to 180,-90 to 90]
    /// This member is required.
    public var destinationPosition: [Swift.Double]?
    /// Set the unit system to specify the distance. Default Value: Kilometers
    public var distanceUnit: LocationClientTypes.DistanceUnit?
    /// Set to include the geometry details in the result for each path between a pair of positions. Default Value: false Valid Values: false | true
    public var includeLegGeometry: Swift.Bool?
    /// Specifies the mode of transport when calculating a route. Used in estimating the speed of travel and road compatibility. You can choose Car, Truck, or Walking as options for the TravelMode. The TravelMode you specify also determines how you specify route preferences:
    ///
    /// * If traveling by Car use the CarModeOptions parameter.
    ///
    /// * If traveling by Truck use the TruckModeOptions parameter.
    ///
    ///
    /// Default Value: Car
    public var travelMode: LocationClientTypes.TravelMode?
    /// Specifies route preferences when traveling by Truck, such as avoiding routes that use ferries or tolls, and truck specifications to consider when choosing an optimal road. Requirements: TravelMode must be specified as Truck.
    public var truckModeOptions: LocationClientTypes.CalculateRouteTruckModeOptions?
    /// Specifies an ordered list of up to 23 intermediate positions to include along a route between the departure position and destination position.
    ///
    /// * For example, from the DeparturePosition[-123.115, 49.285], the route follows the order that the waypoint positions are given [[-122.757, 49.0021],[-122.349, 47.620]]
    ///
    ///
    /// If you specify a waypoint position that's not located on a road, Amazon Location [moves the position to the nearest road](https://docs.aws.amazon.com/location/latest/developerguide/snap-to-nearby-road.html). Specifying more than 23 waypoints returns a 400 ValidationException error. If Esri is the provider for your route calculator, specifying a route that is longer than 400 km returns a 400 RoutesValidationException error. Valid Values: [-180 to 180,-90 to 90]
    public var waypointPositions: [[Swift.Double]]?

    public init (
        calculatorName: Swift.String? = nil,
        carModeOptions: LocationClientTypes.CalculateRouteCarModeOptions? = nil,
        departNow: Swift.Bool? = nil,
        departurePosition: [Swift.Double]? = nil,
        departureTime: ClientRuntime.Date? = nil,
        destinationPosition: [Swift.Double]? = nil,
        distanceUnit: LocationClientTypes.DistanceUnit? = nil,
        includeLegGeometry: Swift.Bool? = nil,
        travelMode: LocationClientTypes.TravelMode? = nil,
        truckModeOptions: LocationClientTypes.CalculateRouteTruckModeOptions? = nil,
        waypointPositions: [[Swift.Double]]? = nil
    )
    {
        self.calculatorName = calculatorName
        self.carModeOptions = carModeOptions
        self.departNow = departNow
        self.departurePosition = departurePosition
        self.departureTime = departureTime
        self.destinationPosition = destinationPosition
        self.distanceUnit = distanceUnit
        self.includeLegGeometry = includeLegGeometry
        self.travelMode = travelMode
        self.truckModeOptions = truckModeOptions
        self.waypointPositions = waypointPositions
    }
}
