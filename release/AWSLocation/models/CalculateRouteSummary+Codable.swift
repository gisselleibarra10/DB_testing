// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension LocationClientTypes.CalculateRouteSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dataSource = "DataSource"
        case distance = "Distance"
        case distanceUnit = "DistanceUnit"
        case durationSeconds = "DurationSeconds"
        case routeBBox = "RouteBBox"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dataSource = self.dataSource {
            try encodeContainer.encode(dataSource, forKey: .dataSource)
        }
        if let distance = self.distance {
            try encodeContainer.encode(distance, forKey: .distance)
        }
        if let distanceUnit = self.distanceUnit {
            try encodeContainer.encode(distanceUnit.rawValue, forKey: .distanceUnit)
        }
        if let durationSeconds = self.durationSeconds {
            try encodeContainer.encode(durationSeconds, forKey: .durationSeconds)
        }
        if let routeBBox = routeBBox {
            var routeBBoxContainer = encodeContainer.nestedUnkeyedContainer(forKey: .routeBBox)
            for boundingbox0 in routeBBox {
                try routeBBoxContainer.encode(boundingbox0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let routeBBoxContainer = try containerValues.decodeIfPresent([Swift.Double?].self, forKey: .routeBBox)
        var routeBBoxDecoded0:[Swift.Double]? = nil
        if let routeBBoxContainer = routeBBoxContainer {
            routeBBoxDecoded0 = [Swift.Double]()
            for double0 in routeBBoxContainer {
                if let double0 = double0 {
                    routeBBoxDecoded0?.append(double0)
                }
            }
        }
        routeBBox = routeBBoxDecoded0
        let dataSourceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataSource)
        dataSource = dataSourceDecoded
        let distanceDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .distance)
        distance = distanceDecoded
        let durationSecondsDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .durationSeconds)
        durationSeconds = durationSecondsDecoded
        let distanceUnitDecoded = try containerValues.decodeIfPresent(LocationClientTypes.DistanceUnit.self, forKey: .distanceUnit)
        distanceUnit = distanceUnitDecoded
    }
}
