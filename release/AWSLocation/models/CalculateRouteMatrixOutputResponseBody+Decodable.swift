// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CalculateRouteMatrixOutputResponseBody: Swift.Equatable {
    let routeMatrix: [[LocationClientTypes.RouteMatrixEntry]]?
    let snappedDeparturePositions: [[Swift.Double]]?
    let snappedDestinationPositions: [[Swift.Double]]?
    let summary: LocationClientTypes.CalculateRouteMatrixSummary?
}

extension CalculateRouteMatrixOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case routeMatrix = "RouteMatrix"
        case snappedDeparturePositions = "SnappedDeparturePositions"
        case snappedDestinationPositions = "SnappedDestinationPositions"
        case summary = "Summary"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let routeMatrixContainer = try containerValues.decodeIfPresent([[LocationClientTypes.RouteMatrixEntry?]?].self, forKey: .routeMatrix)
        var routeMatrixDecoded0:[[LocationClientTypes.RouteMatrixEntry]]? = nil
        if let routeMatrixContainer = routeMatrixContainer {
            routeMatrixDecoded0 = [[LocationClientTypes.RouteMatrixEntry]]()
            for list0 in routeMatrixContainer {
                var list0Decoded0: [LocationClientTypes.RouteMatrixEntry]? = nil
                if let list0 = list0 {
                    list0Decoded0 = [LocationClientTypes.RouteMatrixEntry]()
                    for structure1 in list0 {
                        if let structure1 = structure1 {
                            list0Decoded0?.append(structure1)
                        }
                    }
                }
                if let list0Decoded0 = list0Decoded0 {
                    routeMatrixDecoded0?.append(list0Decoded0)
                }
            }
        }
        routeMatrix = routeMatrixDecoded0
        let snappedDeparturePositionsContainer = try containerValues.decodeIfPresent([[Swift.Double?]?].self, forKey: .snappedDeparturePositions)
        var snappedDeparturePositionsDecoded0:[[Swift.Double]]? = nil
        if let snappedDeparturePositionsContainer = snappedDeparturePositionsContainer {
            snappedDeparturePositionsDecoded0 = [[Swift.Double]]()
            for list0 in snappedDeparturePositionsContainer {
                var list0Decoded0: [Swift.Double]? = nil
                if let list0 = list0 {
                    list0Decoded0 = [Swift.Double]()
                    for double1 in list0 {
                        if let double1 = double1 {
                            list0Decoded0?.append(double1)
                        }
                    }
                }
                if let list0Decoded0 = list0Decoded0 {
                    snappedDeparturePositionsDecoded0?.append(list0Decoded0)
                }
            }
        }
        snappedDeparturePositions = snappedDeparturePositionsDecoded0
        let snappedDestinationPositionsContainer = try containerValues.decodeIfPresent([[Swift.Double?]?].self, forKey: .snappedDestinationPositions)
        var snappedDestinationPositionsDecoded0:[[Swift.Double]]? = nil
        if let snappedDestinationPositionsContainer = snappedDestinationPositionsContainer {
            snappedDestinationPositionsDecoded0 = [[Swift.Double]]()
            for list0 in snappedDestinationPositionsContainer {
                var list0Decoded0: [Swift.Double]? = nil
                if let list0 = list0 {
                    list0Decoded0 = [Swift.Double]()
                    for double1 in list0 {
                        if let double1 = double1 {
                            list0Decoded0?.append(double1)
                        }
                    }
                }
                if let list0Decoded0 = list0Decoded0 {
                    snappedDestinationPositionsDecoded0?.append(list0Decoded0)
                }
            }
        }
        snappedDestinationPositions = snappedDestinationPositionsDecoded0
        let summaryDecoded = try containerValues.decodeIfPresent(LocationClientTypes.CalculateRouteMatrixSummary.self, forKey: .summary)
        summary = summaryDecoded
    }
}
