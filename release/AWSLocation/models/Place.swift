// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension LocationClientTypes {
    /// Contains details about addresses or points of interest that match the search criteria. Not all details are included with all responses. Some details may only be returned by specific data partners.
    public struct Place: Swift.Equatable {
        /// The numerical portion of an address, such as a building number.
        public var addressNumber: Swift.String?
        /// A country/region specified using [ISO 3166](https://www.iso.org/iso-3166-country-codes.html) 3-digit country/region code. For example, CAN.
        public var country: Swift.String?
        /// Places uses a point geometry to specify a location or a Place.
        /// This member is required.
        public var geometry: LocationClientTypes.PlaceGeometry?
        /// True if the result is interpolated from other known places. False if the Place is a known place. Not returned when the partner does not provide the information. For example, returns False for an address location that is found in the partner data, but returns True if an address does not exist in the partner data and its location is calculated by interpolating between other known addresses.
        public var interpolated: Swift.Bool?
        /// The full name and address of the point of interest such as a city, region, or country. For example, 123 Any Street, Any Town, USA.
        public var label: Swift.String?
        /// A name for a local area, such as a city or town name. For example, Toronto.
        public var municipality: Swift.String?
        /// The name of a community district. For example, Downtown.
        public var neighborhood: Swift.String?
        /// A group of numbers and letters in a country-specific format, which accompanies the address for the purpose of identifying a location.
        public var postalCode: Swift.String?
        /// A name for an area or geographical division, such as a province or state name. For example, British Columbia.
        public var region: Swift.String?
        /// The name for a street or a road to identify a location. For example, Main Street.
        public var street: Swift.String?
        /// A country, or an area that's part of a larger region. For example, Metro Vancouver.
        public var subRegion: Swift.String?
        /// The time zone in which the Place is located. Returned only when using Here as the selected partner.
        public var timeZone: LocationClientTypes.TimeZone?
        /// For addresses with multiple units, the unit identifier. Can include numbers and letters, for example 3B or Unit 123. Returned only for a place index that uses Esri as a data provider. Is not returned for SearchPlaceIndexForPosition.
        public var unitNumber: Swift.String?
        /// For addresses with a UnitNumber, the type of unit. For example, Apartment.
        public var unitType: Swift.String?

        public init (
            addressNumber: Swift.String? = nil,
            country: Swift.String? = nil,
            geometry: LocationClientTypes.PlaceGeometry? = nil,
            interpolated: Swift.Bool? = nil,
            label: Swift.String? = nil,
            municipality: Swift.String? = nil,
            neighborhood: Swift.String? = nil,
            postalCode: Swift.String? = nil,
            region: Swift.String? = nil,
            street: Swift.String? = nil,
            subRegion: Swift.String? = nil,
            timeZone: LocationClientTypes.TimeZone? = nil,
            unitNumber: Swift.String? = nil,
            unitType: Swift.String? = nil
        )
        {
            self.addressNumber = addressNumber
            self.country = country
            self.geometry = geometry
            self.interpolated = interpolated
            self.label = label
            self.municipality = municipality
            self.neighborhood = neighborhood
            self.postalCode = postalCode
            self.region = region
            self.street = street
            self.subRegion = subRegion
            self.timeZone = timeZone
            self.unitNumber = unitNumber
            self.unitType = unitType
        }
    }

}
