// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetDevicePositionOutputResponseBody: Swift.Equatable {
    let deviceId: Swift.String?
    let sampleTime: ClientRuntime.Date?
    let receivedTime: ClientRuntime.Date?
    let position: [Swift.Double]?
    let accuracy: LocationClientTypes.PositionalAccuracy?
    let positionProperties: [Swift.String:Swift.String]?
}

extension GetDevicePositionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accuracy = "Accuracy"
        case deviceId = "DeviceId"
        case position = "Position"
        case positionProperties = "PositionProperties"
        case receivedTime = "ReceivedTime"
        case sampleTime = "SampleTime"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deviceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deviceId)
        deviceId = deviceIdDecoded
        let sampleTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .sampleTime)
        sampleTime = sampleTimeDecoded
        let receivedTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .receivedTime)
        receivedTime = receivedTimeDecoded
        let positionContainer = try containerValues.decodeIfPresent([Swift.Double?].self, forKey: .position)
        var positionDecoded0:[Swift.Double]? = nil
        if let positionContainer = positionContainer {
            positionDecoded0 = [Swift.Double]()
            for double0 in positionContainer {
                if let double0 = double0 {
                    positionDecoded0?.append(double0)
                }
            }
        }
        position = positionDecoded0
        let accuracyDecoded = try containerValues.decodeIfPresent(LocationClientTypes.PositionalAccuracy.self, forKey: .accuracy)
        accuracy = accuracyDecoded
        let positionPropertiesContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .positionProperties)
        var positionPropertiesDecoded0: [Swift.String:Swift.String]? = nil
        if let positionPropertiesContainer = positionPropertiesContainer {
            positionPropertiesDecoded0 = [Swift.String:Swift.String]()
            for (key0, string0) in positionPropertiesContainer {
                if let string0 = string0 {
                    positionPropertiesDecoded0?[key0] = string0
                }
            }
        }
        positionProperties = positionPropertiesDecoded0
    }
}
