// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct GetDevicePositionHistoryInput: Swift.Equatable {
    /// The device whose position history you want to retrieve.
    /// This member is required.
    public var deviceId: Swift.String?
    /// Specify the end time for the position history in [ ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) format: YYYY-MM-DDThh:mm:ss.sssZ. By default, the value will be the time that the request is made. Requirement:
    ///
    /// * The time specified for EndTimeExclusive must be after the time for StartTimeInclusive.
    public var endTimeExclusive: ClientRuntime.Date?
    /// An optional limit for the number of device positions returned in a single call. Default value: 100
    public var maxResults: Swift.Int?
    /// The pagination token specifying which page of results to return in the response. If no token is provided, the default page is the first page. Default value: null
    public var nextToken: Swift.String?
    /// Specify the start time for the position history in [ ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) format: YYYY-MM-DDThh:mm:ss.sssZ. By default, the value will be 24 hours prior to the time that the request is made. Requirement:
    ///
    /// * The time specified for StartTimeInclusive must be before EndTimeExclusive.
    public var startTimeInclusive: ClientRuntime.Date?
    /// The tracker resource receiving the request for the device position history.
    /// This member is required.
    public var trackerName: Swift.String?

    public init (
        deviceId: Swift.String? = nil,
        endTimeExclusive: ClientRuntime.Date? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        startTimeInclusive: ClientRuntime.Date? = nil,
        trackerName: Swift.String? = nil
    )
    {
        self.deviceId = deviceId
        self.endTimeExclusive = endTimeExclusive
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.startTimeInclusive = startTimeInclusive
        self.trackerName = trackerName
    }
}
