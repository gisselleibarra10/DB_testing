// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension LocationClientTypes.LegGeometry: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case lineString = "LineString"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let lineString = lineString {
            var lineStringContainer = encodeContainer.nestedUnkeyedContainer(forKey: .lineString)
            for linestring0 in lineString {
                var linestring0Container = lineStringContainer.nestedUnkeyedContainer()
                for position1 in linestring0 {
                    try linestring0Container.encode(position1)
                }
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let lineStringContainer = try containerValues.decodeIfPresent([[Swift.Double?]?].self, forKey: .lineString)
        var lineStringDecoded0:[[Swift.Double]]? = nil
        if let lineStringContainer = lineStringContainer {
            lineStringDecoded0 = [[Swift.Double]]()
            for list0 in lineStringContainer {
                var list0Decoded0: [Swift.Double]? = nil
                if let list0 = list0 {
                    list0Decoded0 = [Swift.Double]()
                    for double1 in list0 {
                        if let double1 = double1 {
                            list0Decoded0?.append(double1)
                        }
                    }
                }
                if let list0Decoded0 = list0Decoded0 {
                    lineStringDecoded0?.append(list0Decoded0)
                }
            }
        }
        lineString = lineStringDecoded0
    }
}
