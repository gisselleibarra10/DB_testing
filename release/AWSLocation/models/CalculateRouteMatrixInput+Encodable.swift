// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CalculateRouteMatrixInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case carModeOptions = "CarModeOptions"
        case departNow = "DepartNow"
        case departurePositions = "DeparturePositions"
        case departureTime = "DepartureTime"
        case destinationPositions = "DestinationPositions"
        case distanceUnit = "DistanceUnit"
        case travelMode = "TravelMode"
        case truckModeOptions = "TruckModeOptions"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let carModeOptions = self.carModeOptions {
            try encodeContainer.encode(carModeOptions, forKey: .carModeOptions)
        }
        if let departNow = self.departNow {
            try encodeContainer.encode(departNow, forKey: .departNow)
        }
        if let departurePositions = departurePositions {
            var departurePositionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .departurePositions)
            for positionlist0 in departurePositions {
                var positionlist0Container = departurePositionsContainer.nestedUnkeyedContainer()
                for position1 in positionlist0 {
                    try positionlist0Container.encode(position1)
                }
            }
        }
        if let departureTime = self.departureTime {
            try encodeContainer.encode(departureTime.timeIntervalSince1970, forKey: .departureTime)
        }
        if let destinationPositions = destinationPositions {
            var destinationPositionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .destinationPositions)
            for positionlist0 in destinationPositions {
                var positionlist0Container = destinationPositionsContainer.nestedUnkeyedContainer()
                for position1 in positionlist0 {
                    try positionlist0Container.encode(position1)
                }
            }
        }
        if let distanceUnit = self.distanceUnit {
            try encodeContainer.encode(distanceUnit.rawValue, forKey: .distanceUnit)
        }
        if let travelMode = self.travelMode {
            try encodeContainer.encode(travelMode.rawValue, forKey: .travelMode)
        }
        if let truckModeOptions = self.truckModeOptions {
            try encodeContainer.encode(truckModeOptions, forKey: .truckModeOptions)
        }
    }
}
