// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CreateTrackerInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description = "Description"
        case kmsKeyId = "KmsKeyId"
        case positionFiltering = "PositionFiltering"
        case pricingPlan = "PricingPlan"
        case pricingPlanDataSource = "PricingPlanDataSource"
        case tags = "Tags"
        case trackerName = "TrackerName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let kmsKeyId = self.kmsKeyId {
            try encodeContainer.encode(kmsKeyId, forKey: .kmsKeyId)
        }
        if let positionFiltering = self.positionFiltering {
            try encodeContainer.encode(positionFiltering.rawValue, forKey: .positionFiltering)
        }
        if let pricingPlan = self.pricingPlan {
            try encodeContainer.encode(pricingPlan.rawValue, forKey: .pricingPlan)
        }
        if let pricingPlanDataSource = self.pricingPlanDataSource {
            try encodeContainer.encode(pricingPlanDataSource, forKey: .pricingPlanDataSource)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, tagmap0) in tags {
                try tagsContainer.encode(tagmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let trackerName = self.trackerName {
            try encodeContainer.encode(trackerName, forKey: .trackerName)
        }
    }
}
