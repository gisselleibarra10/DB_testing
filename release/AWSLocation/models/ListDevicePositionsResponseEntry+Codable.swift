// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension LocationClientTypes.ListDevicePositionsResponseEntry: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accuracy = "Accuracy"
        case deviceId = "DeviceId"
        case position = "Position"
        case positionProperties = "PositionProperties"
        case sampleTime = "SampleTime"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accuracy = self.accuracy {
            try encodeContainer.encode(accuracy, forKey: .accuracy)
        }
        if let deviceId = self.deviceId {
            try encodeContainer.encode(deviceId, forKey: .deviceId)
        }
        if let position = position {
            var positionContainer = encodeContainer.nestedUnkeyedContainer(forKey: .position)
            for position0 in position {
                try positionContainer.encode(position0)
            }
        }
        if let positionProperties = positionProperties {
            var positionPropertiesContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .positionProperties)
            for (dictKey0, propertymap0) in positionProperties {
                try positionPropertiesContainer.encode(propertymap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let sampleTime = self.sampleTime {
            try encodeContainer.encode(sampleTime.timeIntervalSince1970, forKey: .sampleTime)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deviceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deviceId)
        deviceId = deviceIdDecoded
        let sampleTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .sampleTime)
        sampleTime = sampleTimeDecoded
        let positionContainer = try containerValues.decodeIfPresent([Swift.Double?].self, forKey: .position)
        var positionDecoded0:[Swift.Double]? = nil
        if let positionContainer = positionContainer {
            positionDecoded0 = [Swift.Double]()
            for double0 in positionContainer {
                if let double0 = double0 {
                    positionDecoded0?.append(double0)
                }
            }
        }
        position = positionDecoded0
        let accuracyDecoded = try containerValues.decodeIfPresent(LocationClientTypes.PositionalAccuracy.self, forKey: .accuracy)
        accuracy = accuracyDecoded
        let positionPropertiesContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .positionProperties)
        var positionPropertiesDecoded0: [Swift.String:Swift.String]? = nil
        if let positionPropertiesContainer = positionPropertiesContainer {
            positionPropertiesDecoded0 = [Swift.String:Swift.String]()
            for (key0, string0) in positionPropertiesContainer {
                if let string0 = string0 {
                    positionPropertiesDecoded0?[key0] = string0
                }
            }
        }
        positionProperties = positionPropertiesDecoded0
    }
}
