// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CalculateRouteMatrixInputBody: Swift.Equatable {
    let departurePositions: [[Swift.Double]]?
    let destinationPositions: [[Swift.Double]]?
    let travelMode: LocationClientTypes.TravelMode?
    let departureTime: ClientRuntime.Date?
    let departNow: Swift.Bool?
    let distanceUnit: LocationClientTypes.DistanceUnit?
    let carModeOptions: LocationClientTypes.CalculateRouteCarModeOptions?
    let truckModeOptions: LocationClientTypes.CalculateRouteTruckModeOptions?
}

extension CalculateRouteMatrixInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case carModeOptions = "CarModeOptions"
        case departNow = "DepartNow"
        case departurePositions = "DeparturePositions"
        case departureTime = "DepartureTime"
        case destinationPositions = "DestinationPositions"
        case distanceUnit = "DistanceUnit"
        case travelMode = "TravelMode"
        case truckModeOptions = "TruckModeOptions"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let departurePositionsContainer = try containerValues.decodeIfPresent([[Swift.Double?]?].self, forKey: .departurePositions)
        var departurePositionsDecoded0:[[Swift.Double]]? = nil
        if let departurePositionsContainer = departurePositionsContainer {
            departurePositionsDecoded0 = [[Swift.Double]]()
            for list0 in departurePositionsContainer {
                var list0Decoded0: [Swift.Double]? = nil
                if let list0 = list0 {
                    list0Decoded0 = [Swift.Double]()
                    for double1 in list0 {
                        if let double1 = double1 {
                            list0Decoded0?.append(double1)
                        }
                    }
                }
                if let list0Decoded0 = list0Decoded0 {
                    departurePositionsDecoded0?.append(list0Decoded0)
                }
            }
        }
        departurePositions = departurePositionsDecoded0
        let destinationPositionsContainer = try containerValues.decodeIfPresent([[Swift.Double?]?].self, forKey: .destinationPositions)
        var destinationPositionsDecoded0:[[Swift.Double]]? = nil
        if let destinationPositionsContainer = destinationPositionsContainer {
            destinationPositionsDecoded0 = [[Swift.Double]]()
            for list0 in destinationPositionsContainer {
                var list0Decoded0: [Swift.Double]? = nil
                if let list0 = list0 {
                    list0Decoded0 = [Swift.Double]()
                    for double1 in list0 {
                        if let double1 = double1 {
                            list0Decoded0?.append(double1)
                        }
                    }
                }
                if let list0Decoded0 = list0Decoded0 {
                    destinationPositionsDecoded0?.append(list0Decoded0)
                }
            }
        }
        destinationPositions = destinationPositionsDecoded0
        let travelModeDecoded = try containerValues.decodeIfPresent(LocationClientTypes.TravelMode.self, forKey: .travelMode)
        travelMode = travelModeDecoded
        let departureTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .departureTime)
        departureTime = departureTimeDecoded
        let departNowDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .departNow)
        departNow = departNowDecoded
        let distanceUnitDecoded = try containerValues.decodeIfPresent(LocationClientTypes.DistanceUnit.self, forKey: .distanceUnit)
        distanceUnit = distanceUnitDecoded
        let carModeOptionsDecoded = try containerValues.decodeIfPresent(LocationClientTypes.CalculateRouteCarModeOptions.self, forKey: .carModeOptions)
        carModeOptions = carModeOptionsDecoded
        let truckModeOptionsDecoded = try containerValues.decodeIfPresent(LocationClientTypes.CalculateRouteTruckModeOptions.self, forKey: .truckModeOptions)
        truckModeOptions = truckModeOptionsDecoded
    }
}
