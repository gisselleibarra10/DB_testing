// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension LocationClientTypes.Place: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case addressNumber = "AddressNumber"
        case country = "Country"
        case geometry = "Geometry"
        case interpolated = "Interpolated"
        case label = "Label"
        case municipality = "Municipality"
        case neighborhood = "Neighborhood"
        case postalCode = "PostalCode"
        case region = "Region"
        case street = "Street"
        case subRegion = "SubRegion"
        case timeZone = "TimeZone"
        case unitNumber = "UnitNumber"
        case unitType = "UnitType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let addressNumber = self.addressNumber {
            try encodeContainer.encode(addressNumber, forKey: .addressNumber)
        }
        if let country = self.country {
            try encodeContainer.encode(country, forKey: .country)
        }
        if let geometry = self.geometry {
            try encodeContainer.encode(geometry, forKey: .geometry)
        }
        if let interpolated = self.interpolated {
            try encodeContainer.encode(interpolated, forKey: .interpolated)
        }
        if let label = self.label {
            try encodeContainer.encode(label, forKey: .label)
        }
        if let municipality = self.municipality {
            try encodeContainer.encode(municipality, forKey: .municipality)
        }
        if let neighborhood = self.neighborhood {
            try encodeContainer.encode(neighborhood, forKey: .neighborhood)
        }
        if let postalCode = self.postalCode {
            try encodeContainer.encode(postalCode, forKey: .postalCode)
        }
        if let region = self.region {
            try encodeContainer.encode(region, forKey: .region)
        }
        if let street = self.street {
            try encodeContainer.encode(street, forKey: .street)
        }
        if let subRegion = self.subRegion {
            try encodeContainer.encode(subRegion, forKey: .subRegion)
        }
        if let timeZone = self.timeZone {
            try encodeContainer.encode(timeZone, forKey: .timeZone)
        }
        if let unitNumber = self.unitNumber {
            try encodeContainer.encode(unitNumber, forKey: .unitNumber)
        }
        if let unitType = self.unitType {
            try encodeContainer.encode(unitType, forKey: .unitType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let labelDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .label)
        label = labelDecoded
        let geometryDecoded = try containerValues.decodeIfPresent(LocationClientTypes.PlaceGeometry.self, forKey: .geometry)
        geometry = geometryDecoded
        let addressNumberDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .addressNumber)
        addressNumber = addressNumberDecoded
        let streetDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .street)
        street = streetDecoded
        let neighborhoodDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .neighborhood)
        neighborhood = neighborhoodDecoded
        let municipalityDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .municipality)
        municipality = municipalityDecoded
        let subRegionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .subRegion)
        subRegion = subRegionDecoded
        let regionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .region)
        region = regionDecoded
        let countryDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .country)
        country = countryDecoded
        let postalCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .postalCode)
        postalCode = postalCodeDecoded
        let interpolatedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .interpolated)
        interpolated = interpolatedDecoded
        let timeZoneDecoded = try containerValues.decodeIfPresent(LocationClientTypes.TimeZone.self, forKey: .timeZone)
        timeZone = timeZoneDecoded
        let unitTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .unitType)
        unitType = unitTypeDecoded
        let unitNumberDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .unitNumber)
        unitNumber = unitNumberDecoded
    }
}
