// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CalculateRouteInputBody: Swift.Equatable {
    let departurePosition: [Swift.Double]?
    let destinationPosition: [Swift.Double]?
    let waypointPositions: [[Swift.Double]]?
    let travelMode: LocationClientTypes.TravelMode?
    let departureTime: ClientRuntime.Date?
    let departNow: Swift.Bool?
    let distanceUnit: LocationClientTypes.DistanceUnit?
    let includeLegGeometry: Swift.Bool?
    let carModeOptions: LocationClientTypes.CalculateRouteCarModeOptions?
    let truckModeOptions: LocationClientTypes.CalculateRouteTruckModeOptions?
}

extension CalculateRouteInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case carModeOptions = "CarModeOptions"
        case departNow = "DepartNow"
        case departurePosition = "DeparturePosition"
        case departureTime = "DepartureTime"
        case destinationPosition = "DestinationPosition"
        case distanceUnit = "DistanceUnit"
        case includeLegGeometry = "IncludeLegGeometry"
        case travelMode = "TravelMode"
        case truckModeOptions = "TruckModeOptions"
        case waypointPositions = "WaypointPositions"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let departurePositionContainer = try containerValues.decodeIfPresent([Swift.Double?].self, forKey: .departurePosition)
        var departurePositionDecoded0:[Swift.Double]? = nil
        if let departurePositionContainer = departurePositionContainer {
            departurePositionDecoded0 = [Swift.Double]()
            for double0 in departurePositionContainer {
                if let double0 = double0 {
                    departurePositionDecoded0?.append(double0)
                }
            }
        }
        departurePosition = departurePositionDecoded0
        let destinationPositionContainer = try containerValues.decodeIfPresent([Swift.Double?].self, forKey: .destinationPosition)
        var destinationPositionDecoded0:[Swift.Double]? = nil
        if let destinationPositionContainer = destinationPositionContainer {
            destinationPositionDecoded0 = [Swift.Double]()
            for double0 in destinationPositionContainer {
                if let double0 = double0 {
                    destinationPositionDecoded0?.append(double0)
                }
            }
        }
        destinationPosition = destinationPositionDecoded0
        let waypointPositionsContainer = try containerValues.decodeIfPresent([[Swift.Double?]?].self, forKey: .waypointPositions)
        var waypointPositionsDecoded0:[[Swift.Double]]? = nil
        if let waypointPositionsContainer = waypointPositionsContainer {
            waypointPositionsDecoded0 = [[Swift.Double]]()
            for list0 in waypointPositionsContainer {
                var list0Decoded0: [Swift.Double]? = nil
                if let list0 = list0 {
                    list0Decoded0 = [Swift.Double]()
                    for double1 in list0 {
                        if let double1 = double1 {
                            list0Decoded0?.append(double1)
                        }
                    }
                }
                if let list0Decoded0 = list0Decoded0 {
                    waypointPositionsDecoded0?.append(list0Decoded0)
                }
            }
        }
        waypointPositions = waypointPositionsDecoded0
        let travelModeDecoded = try containerValues.decodeIfPresent(LocationClientTypes.TravelMode.self, forKey: .travelMode)
        travelMode = travelModeDecoded
        let departureTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .departureTime)
        departureTime = departureTimeDecoded
        let departNowDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .departNow)
        departNow = departNowDecoded
        let distanceUnitDecoded = try containerValues.decodeIfPresent(LocationClientTypes.DistanceUnit.self, forKey: .distanceUnit)
        distanceUnit = distanceUnitDecoded
        let includeLegGeometryDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .includeLegGeometry)
        includeLegGeometry = includeLegGeometryDecoded
        let carModeOptionsDecoded = try containerValues.decodeIfPresent(LocationClientTypes.CalculateRouteCarModeOptions.self, forKey: .carModeOptions)
        carModeOptions = carModeOptionsDecoded
        let truckModeOptionsDecoded = try containerValues.decodeIfPresent(LocationClientTypes.CalculateRouteTruckModeOptions.self, forKey: .truckModeOptions)
        truckModeOptions = truckModeOptionsDecoded
    }
}
