// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension LocationClientTypes.SearchPlaceIndexForTextSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case biasPosition = "BiasPosition"
        case dataSource = "DataSource"
        case filterBBox = "FilterBBox"
        case filterCountries = "FilterCountries"
        case language = "Language"
        case maxResults = "MaxResults"
        case resultBBox = "ResultBBox"
        case text = "Text"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let biasPosition = biasPosition {
            var biasPositionContainer = encodeContainer.nestedUnkeyedContainer(forKey: .biasPosition)
            for position0 in biasPosition {
                try biasPositionContainer.encode(position0)
            }
        }
        if let dataSource = self.dataSource {
            try encodeContainer.encode(dataSource, forKey: .dataSource)
        }
        if let filterBBox = filterBBox {
            var filterBBoxContainer = encodeContainer.nestedUnkeyedContainer(forKey: .filterBBox)
            for boundingbox0 in filterBBox {
                try filterBBoxContainer.encode(boundingbox0)
            }
        }
        if let filterCountries = filterCountries {
            var filterCountriesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .filterCountries)
            for countrycodelist0 in filterCountries {
                try filterCountriesContainer.encode(countrycodelist0)
            }
        }
        if let language = self.language {
            try encodeContainer.encode(language, forKey: .language)
        }
        if maxResults != 0 {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let resultBBox = resultBBox {
            var resultBBoxContainer = encodeContainer.nestedUnkeyedContainer(forKey: .resultBBox)
            for boundingbox0 in resultBBox {
                try resultBBoxContainer.encode(boundingbox0)
            }
        }
        if let text = self.text {
            try encodeContainer.encode(text, forKey: .text)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let textDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .text)
        text = textDecoded
        let biasPositionContainer = try containerValues.decodeIfPresent([Swift.Double?].self, forKey: .biasPosition)
        var biasPositionDecoded0:[Swift.Double]? = nil
        if let biasPositionContainer = biasPositionContainer {
            biasPositionDecoded0 = [Swift.Double]()
            for double0 in biasPositionContainer {
                if let double0 = double0 {
                    biasPositionDecoded0?.append(double0)
                }
            }
        }
        biasPosition = biasPositionDecoded0
        let filterBBoxContainer = try containerValues.decodeIfPresent([Swift.Double?].self, forKey: .filterBBox)
        var filterBBoxDecoded0:[Swift.Double]? = nil
        if let filterBBoxContainer = filterBBoxContainer {
            filterBBoxDecoded0 = [Swift.Double]()
            for double0 in filterBBoxContainer {
                if let double0 = double0 {
                    filterBBoxDecoded0?.append(double0)
                }
            }
        }
        filterBBox = filterBBoxDecoded0
        let filterCountriesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .filterCountries)
        var filterCountriesDecoded0:[Swift.String]? = nil
        if let filterCountriesContainer = filterCountriesContainer {
            filterCountriesDecoded0 = [Swift.String]()
            for string0 in filterCountriesContainer {
                if let string0 = string0 {
                    filterCountriesDecoded0?.append(string0)
                }
            }
        }
        filterCountries = filterCountriesDecoded0
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults) ?? 0
        maxResults = maxResultsDecoded
        let resultBBoxContainer = try containerValues.decodeIfPresent([Swift.Double?].self, forKey: .resultBBox)
        var resultBBoxDecoded0:[Swift.Double]? = nil
        if let resultBBoxContainer = resultBBoxContainer {
            resultBBoxDecoded0 = [Swift.Double]()
            for double0 in resultBBoxContainer {
                if let double0 = double0 {
                    resultBBoxDecoded0?.append(double0)
                }
            }
        }
        resultBBox = resultBBoxDecoded0
        let dataSourceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataSource)
        dataSource = dataSourceDecoded
        let languageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .language)
        language = languageDecoded
    }
}
