// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension LocationClientTypes {
    /// Contains the calculated route's details for each path between a pair of positions. The number of legs returned corresponds to one fewer than the total number of positions in the request. For example, a route with a departure position and destination position returns one leg with the positions [snapped to a nearby road](https://docs.aws.amazon.com/location/latest/developerguide/snap-to-nearby-road.html):
    ///
    /// * The StartPosition is the departure position.
    ///
    /// * The EndPosition is the destination position.
    ///
    ///
    /// A route with a waypoint between the departure and destination position returns two legs with the positions snapped to a nearby road:
    ///
    /// * Leg 1: The StartPosition is the departure position . The EndPosition is the waypoint positon.
    ///
    /// * Leg 2: The StartPosition is the waypoint position. The EndPosition is the destination position.
    public struct Leg: Swift.Equatable {
        /// The distance between the leg's StartPosition and EndPosition along a calculated route.
        ///
        /// * The default measurement is Kilometers unless the request specifies a DistanceUnit of Miles.
        /// This member is required.
        public var distance: Swift.Double?
        /// The estimated travel time between the leg's StartPosition and EndPosition. The travel mode and departure time that you specify in the request determines the calculated time.
        /// This member is required.
        public var durationSeconds: Swift.Double?
        /// The terminating position of the leg. Follows the format [longitude,latitude]. If the EndPosition isn't located on a road, it's [snapped to a nearby road](https://docs.aws.amazon.com/location/latest/developerguide/nap-to-nearby-road.html).
        /// This member is required.
        public var endPosition: [Swift.Double]?
        /// Contains the calculated route's path as a linestring geometry.
        public var geometry: LocationClientTypes.LegGeometry?
        /// The starting position of the leg. Follows the format [longitude,latitude]. If the StartPosition isn't located on a road, it's [snapped to a nearby road](https://docs.aws.amazon.com/location/latest/developerguide/snap-to-nearby-road.html).
        /// This member is required.
        public var startPosition: [Swift.Double]?
        /// Contains a list of steps, which represent subsections of a leg. Each step provides instructions for how to move to the next step in the leg such as the step's start position, end position, travel distance, travel duration, and geometry offset.
        /// This member is required.
        public var steps: [LocationClientTypes.Step]?

        public init (
            distance: Swift.Double? = nil,
            durationSeconds: Swift.Double? = nil,
            endPosition: [Swift.Double]? = nil,
            geometry: LocationClientTypes.LegGeometry? = nil,
            startPosition: [Swift.Double]? = nil,
            steps: [LocationClientTypes.Step]? = nil
        )
        {
            self.distance = distance
            self.durationSeconds = durationSeconds
            self.endPosition = endPosition
            self.geometry = geometry
            self.startPosition = startPosition
            self.steps = steps
        }
    }

}
