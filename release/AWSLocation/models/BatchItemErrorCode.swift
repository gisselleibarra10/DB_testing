// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension LocationClientTypes {
    public enum BatchItemErrorCode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        /// Access to the resource was denied.
        case accessdeniederror
        /// The target resource already exists.
        case conflicterror
        /// Internal server error.
        case internalservererror
        /// The target resource does not exist.
        case resourcenotfounderror
        /// Too many requests.
        case throttlingerror
        /// Input fails to satisfy the constraints specified by the service.
        case validationerror
        case sdkUnknown(Swift.String)

        public static var allCases: [BatchItemErrorCode] {
            return [
                .accessdeniederror,
                .conflicterror,
                .internalservererror,
                .resourcenotfounderror,
                .throttlingerror,
                .validationerror,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .accessdeniederror: return "AccessDeniedError"
            case .conflicterror: return "ConflictError"
            case .internalservererror: return "InternalServerError"
            case .resourcenotfounderror: return "ResourceNotFoundError"
            case .throttlingerror: return "ThrottlingError"
            case .validationerror: return "ValidationError"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = BatchItemErrorCode(rawValue: rawValue) ?? BatchItemErrorCode.sdkUnknown(rawValue)
        }
    }
}
