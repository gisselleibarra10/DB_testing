// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct SearchPlaceIndexForTextInputBody: Swift.Equatable {
    let text: Swift.String?
    let biasPosition: [Swift.Double]?
    let filterBBox: [Swift.Double]?
    let filterCountries: [Swift.String]?
    let maxResults: Swift.Int
    let language: Swift.String?
}

extension SearchPlaceIndexForTextInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case biasPosition = "BiasPosition"
        case filterBBox = "FilterBBox"
        case filterCountries = "FilterCountries"
        case language = "Language"
        case maxResults = "MaxResults"
        case text = "Text"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let textDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .text)
        text = textDecoded
        let biasPositionContainer = try containerValues.decodeIfPresent([Swift.Double?].self, forKey: .biasPosition)
        var biasPositionDecoded0:[Swift.Double]? = nil
        if let biasPositionContainer = biasPositionContainer {
            biasPositionDecoded0 = [Swift.Double]()
            for double0 in biasPositionContainer {
                if let double0 = double0 {
                    biasPositionDecoded0?.append(double0)
                }
            }
        }
        biasPosition = biasPositionDecoded0
        let filterBBoxContainer = try containerValues.decodeIfPresent([Swift.Double?].self, forKey: .filterBBox)
        var filterBBoxDecoded0:[Swift.Double]? = nil
        if let filterBBoxContainer = filterBBoxContainer {
            filterBBoxDecoded0 = [Swift.Double]()
            for double0 in filterBBoxContainer {
                if let double0 = double0 {
                    filterBBoxDecoded0?.append(double0)
                }
            }
        }
        filterBBox = filterBBoxDecoded0
        let filterCountriesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .filterCountries)
        var filterCountriesDecoded0:[Swift.String]? = nil
        if let filterCountriesContainer = filterCountriesContainer {
            filterCountriesDecoded0 = [Swift.String]()
            for string0 in filterCountriesContainer {
                if let string0 = string0 {
                    filterCountriesDecoded0?.append(string0)
                }
            }
        }
        filterCountries = filterCountriesDecoded0
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults) ?? 0
        maxResults = maxResultsDecoded
        let languageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .language)
        language = languageDecoded
    }
}
