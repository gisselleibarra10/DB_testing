// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension GreengrassV2ClientTypes.LambdaFunctionRecipeSource: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case componentDependencies
        case componentLambdaParameters
        case componentName
        case componentPlatforms
        case componentVersion
        case lambdaArn
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let componentDependencies = componentDependencies {
            var componentDependenciesContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .componentDependencies)
            for (dictKey0, componentdependencymap0) in componentDependencies {
                try componentDependenciesContainer.encode(componentdependencymap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let componentLambdaParameters = self.componentLambdaParameters {
            try encodeContainer.encode(componentLambdaParameters, forKey: .componentLambdaParameters)
        }
        if let componentName = self.componentName {
            try encodeContainer.encode(componentName, forKey: .componentName)
        }
        if let componentPlatforms = componentPlatforms {
            var componentPlatformsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .componentPlatforms)
            for componentplatformlist0 in componentPlatforms {
                try componentPlatformsContainer.encode(componentplatformlist0)
            }
        }
        if let componentVersion = self.componentVersion {
            try encodeContainer.encode(componentVersion, forKey: .componentVersion)
        }
        if let lambdaArn = self.lambdaArn {
            try encodeContainer.encode(lambdaArn, forKey: .lambdaArn)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let lambdaArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lambdaArn)
        lambdaArn = lambdaArnDecoded
        let componentNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .componentName)
        componentName = componentNameDecoded
        let componentVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .componentVersion)
        componentVersion = componentVersionDecoded
        let componentPlatformsContainer = try containerValues.decodeIfPresent([GreengrassV2ClientTypes.ComponentPlatform?].self, forKey: .componentPlatforms)
        var componentPlatformsDecoded0:[GreengrassV2ClientTypes.ComponentPlatform]? = nil
        if let componentPlatformsContainer = componentPlatformsContainer {
            componentPlatformsDecoded0 = [GreengrassV2ClientTypes.ComponentPlatform]()
            for structure0 in componentPlatformsContainer {
                if let structure0 = structure0 {
                    componentPlatformsDecoded0?.append(structure0)
                }
            }
        }
        componentPlatforms = componentPlatformsDecoded0
        let componentDependenciesContainer = try containerValues.decodeIfPresent([Swift.String: GreengrassV2ClientTypes.ComponentDependencyRequirement?].self, forKey: .componentDependencies)
        var componentDependenciesDecoded0: [Swift.String:GreengrassV2ClientTypes.ComponentDependencyRequirement]? = nil
        if let componentDependenciesContainer = componentDependenciesContainer {
            componentDependenciesDecoded0 = [Swift.String:GreengrassV2ClientTypes.ComponentDependencyRequirement]()
            for (key0, componentdependencyrequirement0) in componentDependenciesContainer {
                if let componentdependencyrequirement0 = componentdependencyrequirement0 {
                    componentDependenciesDecoded0?[key0] = componentdependencyrequirement0
                }
            }
        }
        componentDependencies = componentDependenciesDecoded0
        let componentLambdaParametersDecoded = try containerValues.decodeIfPresent(GreengrassV2ClientTypes.LambdaExecutionParameters.self, forKey: .componentLambdaParameters)
        componentLambdaParameters = componentLambdaParametersDecoded
    }
}
