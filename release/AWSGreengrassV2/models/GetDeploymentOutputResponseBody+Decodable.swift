// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetDeploymentOutputResponseBody: Swift.Equatable {
    let targetArn: Swift.String?
    let revisionId: Swift.String?
    let deploymentId: Swift.String?
    let deploymentName: Swift.String?
    let deploymentStatus: GreengrassV2ClientTypes.DeploymentStatus?
    let iotJobId: Swift.String?
    let iotJobArn: Swift.String?
    let components: [Swift.String:GreengrassV2ClientTypes.ComponentDeploymentSpecification]?
    let deploymentPolicies: GreengrassV2ClientTypes.DeploymentPolicies?
    let iotJobConfiguration: GreengrassV2ClientTypes.DeploymentIoTJobConfiguration?
    let creationTimestamp: ClientRuntime.Date?
    let isLatestForTarget: Swift.Bool
    let tags: [Swift.String:Swift.String]?
}

extension GetDeploymentOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case components
        case creationTimestamp
        case deploymentId
        case deploymentName
        case deploymentPolicies
        case deploymentStatus
        case iotJobArn
        case iotJobConfiguration
        case iotJobId
        case isLatestForTarget
        case revisionId
        case tags
        case targetArn
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let targetArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .targetArn)
        targetArn = targetArnDecoded
        let revisionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .revisionId)
        revisionId = revisionIdDecoded
        let deploymentIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deploymentId)
        deploymentId = deploymentIdDecoded
        let deploymentNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deploymentName)
        deploymentName = deploymentNameDecoded
        let deploymentStatusDecoded = try containerValues.decodeIfPresent(GreengrassV2ClientTypes.DeploymentStatus.self, forKey: .deploymentStatus)
        deploymentStatus = deploymentStatusDecoded
        let iotJobIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .iotJobId)
        iotJobId = iotJobIdDecoded
        let iotJobArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .iotJobArn)
        iotJobArn = iotJobArnDecoded
        let componentsContainer = try containerValues.decodeIfPresent([Swift.String: GreengrassV2ClientTypes.ComponentDeploymentSpecification?].self, forKey: .components)
        var componentsDecoded0: [Swift.String:GreengrassV2ClientTypes.ComponentDeploymentSpecification]? = nil
        if let componentsContainer = componentsContainer {
            componentsDecoded0 = [Swift.String:GreengrassV2ClientTypes.ComponentDeploymentSpecification]()
            for (key0, componentdeploymentspecification0) in componentsContainer {
                if let componentdeploymentspecification0 = componentdeploymentspecification0 {
                    componentsDecoded0?[key0] = componentdeploymentspecification0
                }
            }
        }
        components = componentsDecoded0
        let deploymentPoliciesDecoded = try containerValues.decodeIfPresent(GreengrassV2ClientTypes.DeploymentPolicies.self, forKey: .deploymentPolicies)
        deploymentPolicies = deploymentPoliciesDecoded
        let iotJobConfigurationDecoded = try containerValues.decodeIfPresent(GreengrassV2ClientTypes.DeploymentIoTJobConfiguration.self, forKey: .iotJobConfiguration)
        iotJobConfiguration = iotJobConfigurationDecoded
        let creationTimestampDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTimestamp)
        creationTimestamp = creationTimestampDecoded
        let isLatestForTargetDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .isLatestForTarget) ?? false
        isLatestForTarget = isLatestForTargetDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
    }
}
