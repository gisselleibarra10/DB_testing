// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetCoreDeviceOutputResponseBody: Swift.Equatable {
    let coreDeviceThingName: Swift.String?
    let coreVersion: Swift.String?
    let platform: Swift.String?
    let architecture: Swift.String?
    let status: GreengrassV2ClientTypes.CoreDeviceStatus?
    let lastStatusUpdateTimestamp: ClientRuntime.Date?
    let tags: [Swift.String:Swift.String]?
}

extension GetCoreDeviceOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case architecture
        case coreDeviceThingName
        case coreVersion
        case lastStatusUpdateTimestamp
        case platform
        case status
        case tags
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let coreDeviceThingNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .coreDeviceThingName)
        coreDeviceThingName = coreDeviceThingNameDecoded
        let coreVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .coreVersion)
        coreVersion = coreVersionDecoded
        let platformDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .platform)
        platform = platformDecoded
        let architectureDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .architecture)
        architecture = architectureDecoded
        let statusDecoded = try containerValues.decodeIfPresent(GreengrassV2ClientTypes.CoreDeviceStatus.self, forKey: .status)
        status = statusDecoded
        let lastStatusUpdateTimestampDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastStatusUpdateTimestamp)
        lastStatusUpdateTimestamp = lastStatusUpdateTimestampDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
    }
}
