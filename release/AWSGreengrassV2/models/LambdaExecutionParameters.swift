// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension GreengrassV2ClientTypes {
    /// Contains parameters for a Lambda function that runs on IoT Greengrass.
    public struct LambdaExecutionParameters: Swift.Equatable {
        /// The map of environment variables that are available to the Lambda function when it runs.
        public var environmentVariables: [Swift.String:Swift.String]?
        /// The list of event sources to which to subscribe to receive work messages. The Lambda function runs when it receives a message from an event source. You can subscribe this function to local publish/subscribe messages and Amazon Web Services IoT Core MQTT messages.
        public var eventSources: [GreengrassV2ClientTypes.LambdaEventSource]?
        /// The list of arguments to pass to the Lambda function when it runs.
        public var execArgs: [Swift.String]?
        /// The encoding type that the Lambda function supports. Default: json
        public var inputPayloadEncodingType: GreengrassV2ClientTypes.LambdaInputPayloadEncodingType?
        /// The parameters for the Linux process that contains the Lambda function.
        public var linuxProcessParams: GreengrassV2ClientTypes.LambdaLinuxProcessParams?
        /// The maximum amount of time in seconds that a non-pinned Lambda function can idle before the IoT Greengrass Core software stops its process.
        public var maxIdleTimeInSeconds: Swift.Int?
        /// The maximum number of instances that a non-pinned Lambda function can run at the same time.
        public var maxInstancesCount: Swift.Int?
        /// The maximum size of the message queue for the Lambda function component. The IoT Greengrass core stores messages in a FIFO (first-in-first-out) queue until it can run the Lambda function to consume each message.
        public var maxQueueSize: Swift.Int?
        /// Whether or not the Lambda function is pinned, or long-lived.
        ///
        /// * A pinned Lambda function starts when IoT Greengrass starts and keeps running in its own container.
        ///
        /// * A non-pinned Lambda function starts only when it receives a work item and exists after it idles for maxIdleTimeInSeconds. If the function has multiple work items, the IoT Greengrass Core software creates multiple instances of the function.
        ///
        ///
        /// Default: true
        public var pinned: Swift.Bool?
        /// The interval in seconds at which a pinned (also known as long-lived) Lambda function component sends status updates to the Lambda manager component.
        public var statusTimeoutInSeconds: Swift.Int?
        /// The maximum amount of time in seconds that the Lambda function can process a work item.
        public var timeoutInSeconds: Swift.Int?

        public init (
            environmentVariables: [Swift.String:Swift.String]? = nil,
            eventSources: [GreengrassV2ClientTypes.LambdaEventSource]? = nil,
            execArgs: [Swift.String]? = nil,
            inputPayloadEncodingType: GreengrassV2ClientTypes.LambdaInputPayloadEncodingType? = nil,
            linuxProcessParams: GreengrassV2ClientTypes.LambdaLinuxProcessParams? = nil,
            maxIdleTimeInSeconds: Swift.Int? = nil,
            maxInstancesCount: Swift.Int? = nil,
            maxQueueSize: Swift.Int? = nil,
            pinned: Swift.Bool? = nil,
            statusTimeoutInSeconds: Swift.Int? = nil,
            timeoutInSeconds: Swift.Int? = nil
        )
        {
            self.environmentVariables = environmentVariables
            self.eventSources = eventSources
            self.execArgs = execArgs
            self.inputPayloadEncodingType = inputPayloadEncodingType
            self.linuxProcessParams = linuxProcessParams
            self.maxIdleTimeInSeconds = maxIdleTimeInSeconds
            self.maxInstancesCount = maxInstancesCount
            self.maxQueueSize = maxQueueSize
            self.pinned = pinned
            self.statusTimeoutInSeconds = statusTimeoutInSeconds
            self.timeoutInSeconds = timeoutInSeconds
        }
    }

}
