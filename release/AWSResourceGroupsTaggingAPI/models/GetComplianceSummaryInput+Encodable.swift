// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension GetComplianceSummaryInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case groupBy = "GroupBy"
        case maxResults = "MaxResults"
        case paginationToken = "PaginationToken"
        case regionFilters = "RegionFilters"
        case resourceTypeFilters = "ResourceTypeFilters"
        case tagKeyFilters = "TagKeyFilters"
        case targetIdFilters = "TargetIdFilters"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let groupBy = groupBy {
            var groupByContainer = encodeContainer.nestedUnkeyedContainer(forKey: .groupBy)
            for groupby0 in groupBy {
                try groupByContainer.encode(groupby0.rawValue)
            }
        }
        if let maxResults = self.maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let paginationToken = self.paginationToken {
            try encodeContainer.encode(paginationToken, forKey: .paginationToken)
        }
        if let regionFilters = regionFilters {
            var regionFiltersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .regionFilters)
            for regionfilterlist0 in regionFilters {
                try regionFiltersContainer.encode(regionfilterlist0)
            }
        }
        if let resourceTypeFilters = resourceTypeFilters {
            var resourceTypeFiltersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .resourceTypeFilters)
            for resourcetypefilterlist0 in resourceTypeFilters {
                try resourceTypeFiltersContainer.encode(resourcetypefilterlist0)
            }
        }
        if let tagKeyFilters = tagKeyFilters {
            var tagKeyFiltersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tagKeyFilters)
            for tagkeyfilterlist0 in tagKeyFilters {
                try tagKeyFiltersContainer.encode(tagkeyfilterlist0)
            }
        }
        if let targetIdFilters = targetIdFilters {
            var targetIdFiltersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .targetIdFilters)
            for targetidfilterlist0 in targetIdFilters {
                try targetIdFiltersContainer.encode(targetidfilterlist0)
            }
        }
    }
}
