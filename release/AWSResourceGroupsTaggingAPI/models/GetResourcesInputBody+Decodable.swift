// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetResourcesInputBody: Swift.Equatable {
    let paginationToken: Swift.String?
    let tagFilters: [ResourceGroupsTaggingApiClientTypes.TagFilter]?
    let resourcesPerPage: Swift.Int?
    let tagsPerPage: Swift.Int?
    let resourceTypeFilters: [Swift.String]?
    let includeComplianceDetails: Swift.Bool?
    let excludeCompliantResources: Swift.Bool?
    let resourceARNList: [Swift.String]?
}

extension GetResourcesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case excludeCompliantResources = "ExcludeCompliantResources"
        case includeComplianceDetails = "IncludeComplianceDetails"
        case paginationToken = "PaginationToken"
        case resourceARNList = "ResourceARNList"
        case resourceTypeFilters = "ResourceTypeFilters"
        case resourcesPerPage = "ResourcesPerPage"
        case tagFilters = "TagFilters"
        case tagsPerPage = "TagsPerPage"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let paginationTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .paginationToken)
        paginationToken = paginationTokenDecoded
        let tagFiltersContainer = try containerValues.decodeIfPresent([ResourceGroupsTaggingApiClientTypes.TagFilter?].self, forKey: .tagFilters)
        var tagFiltersDecoded0:[ResourceGroupsTaggingApiClientTypes.TagFilter]? = nil
        if let tagFiltersContainer = tagFiltersContainer {
            tagFiltersDecoded0 = [ResourceGroupsTaggingApiClientTypes.TagFilter]()
            for structure0 in tagFiltersContainer {
                if let structure0 = structure0 {
                    tagFiltersDecoded0?.append(structure0)
                }
            }
        }
        tagFilters = tagFiltersDecoded0
        let resourcesPerPageDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .resourcesPerPage)
        resourcesPerPage = resourcesPerPageDecoded
        let tagsPerPageDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .tagsPerPage)
        tagsPerPage = tagsPerPageDecoded
        let resourceTypeFiltersContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .resourceTypeFilters)
        var resourceTypeFiltersDecoded0:[Swift.String]? = nil
        if let resourceTypeFiltersContainer = resourceTypeFiltersContainer {
            resourceTypeFiltersDecoded0 = [Swift.String]()
            for string0 in resourceTypeFiltersContainer {
                if let string0 = string0 {
                    resourceTypeFiltersDecoded0?.append(string0)
                }
            }
        }
        resourceTypeFilters = resourceTypeFiltersDecoded0
        let includeComplianceDetailsDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .includeComplianceDetails)
        includeComplianceDetails = includeComplianceDetailsDecoded
        let excludeCompliantResourcesDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .excludeCompliantResources)
        excludeCompliantResources = excludeCompliantResourcesDecoded
        let resourceARNListContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .resourceARNList)
        var resourceARNListDecoded0:[Swift.String]? = nil
        if let resourceARNListContainer = resourceARNListContainer {
            resourceARNListDecoded0 = [Swift.String]()
            for string0 in resourceARNListContainer {
                if let string0 = string0 {
                    resourceARNListDecoded0?.append(string0)
                }
            }
        }
        resourceARNList = resourceARNListDecoded0
    }
}
