// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ResourceGroupsTaggingApiClientTypes.ComplianceDetails: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case complianceStatus = "ComplianceStatus"
        case keysWithNoncompliantValues = "KeysWithNoncompliantValues"
        case noncompliantKeys = "NoncompliantKeys"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let complianceStatus = self.complianceStatus {
            try encodeContainer.encode(complianceStatus, forKey: .complianceStatus)
        }
        if let keysWithNoncompliantValues = keysWithNoncompliantValues {
            var keysWithNoncompliantValuesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .keysWithNoncompliantValues)
            for tagkeylist0 in keysWithNoncompliantValues {
                try keysWithNoncompliantValuesContainer.encode(tagkeylist0)
            }
        }
        if let noncompliantKeys = noncompliantKeys {
            var noncompliantKeysContainer = encodeContainer.nestedUnkeyedContainer(forKey: .noncompliantKeys)
            for tagkeylist0 in noncompliantKeys {
                try noncompliantKeysContainer.encode(tagkeylist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let noncompliantKeysContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .noncompliantKeys)
        var noncompliantKeysDecoded0:[Swift.String]? = nil
        if let noncompliantKeysContainer = noncompliantKeysContainer {
            noncompliantKeysDecoded0 = [Swift.String]()
            for string0 in noncompliantKeysContainer {
                if let string0 = string0 {
                    noncompliantKeysDecoded0?.append(string0)
                }
            }
        }
        noncompliantKeys = noncompliantKeysDecoded0
        let keysWithNoncompliantValuesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .keysWithNoncompliantValues)
        var keysWithNoncompliantValuesDecoded0:[Swift.String]? = nil
        if let keysWithNoncompliantValuesContainer = keysWithNoncompliantValuesContainer {
            keysWithNoncompliantValuesDecoded0 = [Swift.String]()
            for string0 in keysWithNoncompliantValuesContainer {
                if let string0 = string0 {
                    keysWithNoncompliantValuesDecoded0?.append(string0)
                }
            }
        }
        keysWithNoncompliantValues = keysWithNoncompliantValuesDecoded0
        let complianceStatusDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .complianceStatus)
        complianceStatus = complianceStatusDecoded
    }
}
