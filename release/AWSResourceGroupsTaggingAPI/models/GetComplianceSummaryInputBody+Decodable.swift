// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetComplianceSummaryInputBody: Swift.Equatable {
    let targetIdFilters: [Swift.String]?
    let regionFilters: [Swift.String]?
    let resourceTypeFilters: [Swift.String]?
    let tagKeyFilters: [Swift.String]?
    let groupBy: [ResourceGroupsTaggingApiClientTypes.GroupByAttribute]?
    let maxResults: Swift.Int?
    let paginationToken: Swift.String?
}

extension GetComplianceSummaryInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case groupBy = "GroupBy"
        case maxResults = "MaxResults"
        case paginationToken = "PaginationToken"
        case regionFilters = "RegionFilters"
        case resourceTypeFilters = "ResourceTypeFilters"
        case tagKeyFilters = "TagKeyFilters"
        case targetIdFilters = "TargetIdFilters"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let targetIdFiltersContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .targetIdFilters)
        var targetIdFiltersDecoded0:[Swift.String]? = nil
        if let targetIdFiltersContainer = targetIdFiltersContainer {
            targetIdFiltersDecoded0 = [Swift.String]()
            for string0 in targetIdFiltersContainer {
                if let string0 = string0 {
                    targetIdFiltersDecoded0?.append(string0)
                }
            }
        }
        targetIdFilters = targetIdFiltersDecoded0
        let regionFiltersContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .regionFilters)
        var regionFiltersDecoded0:[Swift.String]? = nil
        if let regionFiltersContainer = regionFiltersContainer {
            regionFiltersDecoded0 = [Swift.String]()
            for string0 in regionFiltersContainer {
                if let string0 = string0 {
                    regionFiltersDecoded0?.append(string0)
                }
            }
        }
        regionFilters = regionFiltersDecoded0
        let resourceTypeFiltersContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .resourceTypeFilters)
        var resourceTypeFiltersDecoded0:[Swift.String]? = nil
        if let resourceTypeFiltersContainer = resourceTypeFiltersContainer {
            resourceTypeFiltersDecoded0 = [Swift.String]()
            for string0 in resourceTypeFiltersContainer {
                if let string0 = string0 {
                    resourceTypeFiltersDecoded0?.append(string0)
                }
            }
        }
        resourceTypeFilters = resourceTypeFiltersDecoded0
        let tagKeyFiltersContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .tagKeyFilters)
        var tagKeyFiltersDecoded0:[Swift.String]? = nil
        if let tagKeyFiltersContainer = tagKeyFiltersContainer {
            tagKeyFiltersDecoded0 = [Swift.String]()
            for string0 in tagKeyFiltersContainer {
                if let string0 = string0 {
                    tagKeyFiltersDecoded0?.append(string0)
                }
            }
        }
        tagKeyFilters = tagKeyFiltersDecoded0
        let groupByContainer = try containerValues.decodeIfPresent([ResourceGroupsTaggingApiClientTypes.GroupByAttribute?].self, forKey: .groupBy)
        var groupByDecoded0:[ResourceGroupsTaggingApiClientTypes.GroupByAttribute]? = nil
        if let groupByContainer = groupByContainer {
            groupByDecoded0 = [ResourceGroupsTaggingApiClientTypes.GroupByAttribute]()
            for string0 in groupByContainer {
                if let string0 = string0 {
                    groupByDecoded0?.append(string0)
                }
            }
        }
        groupBy = groupByDecoded0
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let paginationTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .paginationToken)
        paginationToken = paginationTokenDecoded
    }
}
