// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AppConfigDataClientTypes.BadRequestDetails: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case invalidparameters = "InvalidParameters"
        case sdkUnknown
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        switch self {
            case let .invalidparameters(invalidparameters):
                var invalidparametersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .invalidparameters)
                for (dictKey0, invalidparametermap0) in invalidparameters {
                    try invalidparametersContainer.encode(invalidparametermap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
                }
            case let .sdkUnknown(sdkUnknown):
                try container.encode(sdkUnknown, forKey: .sdkUnknown)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let values = try decoder.container(keyedBy: CodingKeys.self)
        let invalidparametersContainer = try values.decodeIfPresent([Swift.String: AppConfigDataClientTypes.InvalidParameterDetail?].self, forKey: .invalidparameters)
        var invalidparametersDecoded0: [Swift.String:AppConfigDataClientTypes.InvalidParameterDetail]? = nil
        if let invalidparametersContainer = invalidparametersContainer {
            invalidparametersDecoded0 = [Swift.String:AppConfigDataClientTypes.InvalidParameterDetail]()
            for (key0, invalidparameterdetail0) in invalidparametersContainer {
                if let invalidparameterdetail0 = invalidparameterdetail0 {
                    invalidparametersDecoded0?[key0] = invalidparameterdetail0
                }
            }
        }
        if let invalidparameters = invalidparametersDecoded0 {
            self = .invalidparameters(invalidparameters)
            return
        }
        self = .sdkUnknown("")
    }
}
