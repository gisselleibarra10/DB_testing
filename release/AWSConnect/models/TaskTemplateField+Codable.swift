// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ConnectClientTypes.TaskTemplateField: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description = "Description"
        case id = "Id"
        case singleSelectOptions = "SingleSelectOptions"
        case type = "Type"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let singleSelectOptions = singleSelectOptions {
            var singleSelectOptionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .singleSelectOptions)
            for singleselectoptions0 in singleSelectOptions {
                try singleSelectOptionsContainer.encode(singleselectoptions0)
            }
        }
        if let type = self.type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(ConnectClientTypes.TaskTemplateFieldIdentifier.self, forKey: .id)
        id = idDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let typeDecoded = try containerValues.decodeIfPresent(ConnectClientTypes.TaskTemplateFieldType.self, forKey: .type)
        type = typeDecoded
        let singleSelectOptionsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .singleSelectOptions)
        var singleSelectOptionsDecoded0:[Swift.String]? = nil
        if let singleSelectOptionsContainer = singleSelectOptionsContainer {
            singleSelectOptionsDecoded0 = [Swift.String]()
            for string0 in singleSelectOptionsContainer {
                if let string0 = string0 {
                    singleSelectOptionsDecoded0?.append(string0)
                }
            }
        }
        singleSelectOptions = singleSelectOptionsDecoded0
    }
}
