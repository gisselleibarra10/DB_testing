// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ConnectClientTypes.ClaimedPhoneNumberSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case phoneNumber = "PhoneNumber"
        case phoneNumberArn = "PhoneNumberArn"
        case phoneNumberCountryCode = "PhoneNumberCountryCode"
        case phoneNumberDescription = "PhoneNumberDescription"
        case phoneNumberId = "PhoneNumberId"
        case phoneNumberStatus = "PhoneNumberStatus"
        case phoneNumberType = "PhoneNumberType"
        case tags = "Tags"
        case targetArn = "TargetArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let phoneNumber = self.phoneNumber {
            try encodeContainer.encode(phoneNumber, forKey: .phoneNumber)
        }
        if let phoneNumberArn = self.phoneNumberArn {
            try encodeContainer.encode(phoneNumberArn, forKey: .phoneNumberArn)
        }
        if let phoneNumberCountryCode = self.phoneNumberCountryCode {
            try encodeContainer.encode(phoneNumberCountryCode.rawValue, forKey: .phoneNumberCountryCode)
        }
        if let phoneNumberDescription = self.phoneNumberDescription {
            try encodeContainer.encode(phoneNumberDescription, forKey: .phoneNumberDescription)
        }
        if let phoneNumberId = self.phoneNumberId {
            try encodeContainer.encode(phoneNumberId, forKey: .phoneNumberId)
        }
        if let phoneNumberStatus = self.phoneNumberStatus {
            try encodeContainer.encode(phoneNumberStatus, forKey: .phoneNumberStatus)
        }
        if let phoneNumberType = self.phoneNumberType {
            try encodeContainer.encode(phoneNumberType.rawValue, forKey: .phoneNumberType)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, tagmap0) in tags {
                try tagsContainer.encode(tagmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let targetArn = self.targetArn {
            try encodeContainer.encode(targetArn, forKey: .targetArn)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let phoneNumberIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .phoneNumberId)
        phoneNumberId = phoneNumberIdDecoded
        let phoneNumberArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .phoneNumberArn)
        phoneNumberArn = phoneNumberArnDecoded
        let phoneNumberDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .phoneNumber)
        phoneNumber = phoneNumberDecoded
        let phoneNumberCountryCodeDecoded = try containerValues.decodeIfPresent(ConnectClientTypes.PhoneNumberCountryCode.self, forKey: .phoneNumberCountryCode)
        phoneNumberCountryCode = phoneNumberCountryCodeDecoded
        let phoneNumberTypeDecoded = try containerValues.decodeIfPresent(ConnectClientTypes.PhoneNumberType.self, forKey: .phoneNumberType)
        phoneNumberType = phoneNumberTypeDecoded
        let phoneNumberDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .phoneNumberDescription)
        phoneNumberDescription = phoneNumberDescriptionDecoded
        let targetArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .targetArn)
        targetArn = targetArnDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
        let phoneNumberStatusDecoded = try containerValues.decodeIfPresent(ConnectClientTypes.PhoneNumberStatus.self, forKey: .phoneNumberStatus)
        phoneNumberStatus = phoneNumberStatusDecoded
    }
}
