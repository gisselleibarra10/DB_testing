// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListUseCasesOutputResponseBody: Swift.Equatable {
    let useCaseSummaryList: [ConnectClientTypes.UseCase]?
    let nextToken: Swift.String?
}

extension ListUseCasesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case useCaseSummaryList = "UseCaseSummaryList"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let useCaseSummaryListContainer = try containerValues.decodeIfPresent([ConnectClientTypes.UseCase?].self, forKey: .useCaseSummaryList)
        var useCaseSummaryListDecoded0:[ConnectClientTypes.UseCase]? = nil
        if let useCaseSummaryListContainer = useCaseSummaryListContainer {
            useCaseSummaryListDecoded0 = [ConnectClientTypes.UseCase]()
            for structure0 in useCaseSummaryListContainer {
                if let structure0 = structure0 {
                    useCaseSummaryListDecoded0?.append(structure0)
                }
            }
        }
        useCaseSummaryList = useCaseSummaryListDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
