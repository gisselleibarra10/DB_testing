// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ConnectClientTypes.Contact: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case agentInfo = "AgentInfo"
        case arn = "Arn"
        case channel = "Channel"
        case description = "Description"
        case disconnectTimestamp = "DisconnectTimestamp"
        case id = "Id"
        case initialContactId = "InitialContactId"
        case initiationMethod = "InitiationMethod"
        case initiationTimestamp = "InitiationTimestamp"
        case lastUpdateTimestamp = "LastUpdateTimestamp"
        case name = "Name"
        case previousContactId = "PreviousContactId"
        case queueInfo = "QueueInfo"
        case scheduledTimestamp = "ScheduledTimestamp"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let agentInfo = self.agentInfo {
            try encodeContainer.encode(agentInfo, forKey: .agentInfo)
        }
        if let arn = self.arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let channel = self.channel {
            try encodeContainer.encode(channel.rawValue, forKey: .channel)
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let disconnectTimestamp = self.disconnectTimestamp {
            try encodeContainer.encode(disconnectTimestamp.timeIntervalSince1970, forKey: .disconnectTimestamp)
        }
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let initialContactId = self.initialContactId {
            try encodeContainer.encode(initialContactId, forKey: .initialContactId)
        }
        if let initiationMethod = self.initiationMethod {
            try encodeContainer.encode(initiationMethod.rawValue, forKey: .initiationMethod)
        }
        if let initiationTimestamp = self.initiationTimestamp {
            try encodeContainer.encode(initiationTimestamp.timeIntervalSince1970, forKey: .initiationTimestamp)
        }
        if let lastUpdateTimestamp = self.lastUpdateTimestamp {
            try encodeContainer.encode(lastUpdateTimestamp.timeIntervalSince1970, forKey: .lastUpdateTimestamp)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let previousContactId = self.previousContactId {
            try encodeContainer.encode(previousContactId, forKey: .previousContactId)
        }
        if let queueInfo = self.queueInfo {
            try encodeContainer.encode(queueInfo, forKey: .queueInfo)
        }
        if let scheduledTimestamp = self.scheduledTimestamp {
            try encodeContainer.encode(scheduledTimestamp.timeIntervalSince1970, forKey: .scheduledTimestamp)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let initialContactIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .initialContactId)
        initialContactId = initialContactIdDecoded
        let previousContactIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .previousContactId)
        previousContactId = previousContactIdDecoded
        let initiationMethodDecoded = try containerValues.decodeIfPresent(ConnectClientTypes.ContactInitiationMethod.self, forKey: .initiationMethod)
        initiationMethod = initiationMethodDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let channelDecoded = try containerValues.decodeIfPresent(ConnectClientTypes.Channel.self, forKey: .channel)
        channel = channelDecoded
        let queueInfoDecoded = try containerValues.decodeIfPresent(ConnectClientTypes.QueueInfo.self, forKey: .queueInfo)
        queueInfo = queueInfoDecoded
        let agentInfoDecoded = try containerValues.decodeIfPresent(ConnectClientTypes.AgentInfo.self, forKey: .agentInfo)
        agentInfo = agentInfoDecoded
        let initiationTimestampDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .initiationTimestamp)
        initiationTimestamp = initiationTimestampDecoded
        let disconnectTimestampDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .disconnectTimestamp)
        disconnectTimestamp = disconnectTimestampDecoded
        let lastUpdateTimestampDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastUpdateTimestamp)
        lastUpdateTimestamp = lastUpdateTimestampDecoded
        let scheduledTimestampDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .scheduledTimestamp)
        scheduledTimestamp = scheduledTimestampDecoded
    }
}
