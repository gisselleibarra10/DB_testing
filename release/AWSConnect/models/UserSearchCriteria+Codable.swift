// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ConnectClientTypes.UserSearchCriteria: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case andConditions = "AndConditions"
        case hierarchyGroupCondition = "HierarchyGroupCondition"
        case orConditions = "OrConditions"
        case stringCondition = "StringCondition"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let andConditions = andConditions {
            var andConditionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .andConditions)
            for usersearchconditionlist0 in andConditions {
                try andConditionsContainer.encode(usersearchconditionlist0)
            }
        }
        if let hierarchyGroupCondition = self.hierarchyGroupCondition {
            try encodeContainer.encode(hierarchyGroupCondition, forKey: .hierarchyGroupCondition)
        }
        if let orConditions = orConditions {
            var orConditionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .orConditions)
            for usersearchconditionlist0 in orConditions {
                try orConditionsContainer.encode(usersearchconditionlist0)
            }
        }
        if let stringCondition = self.stringCondition {
            try encodeContainer.encode(stringCondition, forKey: .stringCondition)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let orConditionsContainer = try containerValues.decodeIfPresent([ConnectClientTypes.UserSearchCriteria?].self, forKey: .orConditions)
        var orConditionsDecoded0:[ConnectClientTypes.UserSearchCriteria]? = nil
        if let orConditionsContainer = orConditionsContainer {
            orConditionsDecoded0 = [ConnectClientTypes.UserSearchCriteria]()
            for structure0 in orConditionsContainer {
                if let structure0 = structure0 {
                    orConditionsDecoded0?.append(structure0)
                }
            }
        }
        orConditions = orConditionsDecoded0
        let andConditionsContainer = try containerValues.decodeIfPresent([ConnectClientTypes.UserSearchCriteria?].self, forKey: .andConditions)
        var andConditionsDecoded0:[ConnectClientTypes.UserSearchCriteria]? = nil
        if let andConditionsContainer = andConditionsContainer {
            andConditionsDecoded0 = [ConnectClientTypes.UserSearchCriteria]()
            for structure0 in andConditionsContainer {
                if let structure0 = structure0 {
                    andConditionsDecoded0?.append(structure0)
                }
            }
        }
        andConditions = andConditionsDecoded0
        let stringConditionDecoded = try containerValues.decodeIfPresent(ConnectClientTypes.StringCondition.self, forKey: .stringCondition)
        stringCondition = stringConditionDecoded
        let hierarchyGroupConditionDecoded = try containerValues.decodeIfPresent(ConnectClientTypes.HierarchyGroupCondition.self, forKey: .hierarchyGroupCondition)
        hierarchyGroupCondition = hierarchyGroupConditionDecoded
    }
}
