// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CreateQueueInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description = "Description"
        case hoursOfOperationId = "HoursOfOperationId"
        case maxContacts = "MaxContacts"
        case name = "Name"
        case outboundCallerConfig = "OutboundCallerConfig"
        case quickConnectIds = "QuickConnectIds"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let hoursOfOperationId = self.hoursOfOperationId {
            try encodeContainer.encode(hoursOfOperationId, forKey: .hoursOfOperationId)
        }
        if let maxContacts = self.maxContacts {
            try encodeContainer.encode(maxContacts, forKey: .maxContacts)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let outboundCallerConfig = self.outboundCallerConfig {
            try encodeContainer.encode(outboundCallerConfig, forKey: .outboundCallerConfig)
        }
        if let quickConnectIds = quickConnectIds {
            var quickConnectIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .quickConnectIds)
            for quickconnectslist0 in quickConnectIds {
                try quickConnectIdsContainer.encode(quickconnectslist0)
            }
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, tagmap0) in tags {
                try tagsContainer.encode(tagmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }
}
