// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ConnectClientTypes.RoutingProfile: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case defaultOutboundQueueId = "DefaultOutboundQueueId"
        case description = "Description"
        case instanceId = "InstanceId"
        case mediaConcurrencies = "MediaConcurrencies"
        case name = "Name"
        case numberOfAssociatedQueues = "NumberOfAssociatedQueues"
        case numberOfAssociatedUsers = "NumberOfAssociatedUsers"
        case routingProfileArn = "RoutingProfileArn"
        case routingProfileId = "RoutingProfileId"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let defaultOutboundQueueId = self.defaultOutboundQueueId {
            try encodeContainer.encode(defaultOutboundQueueId, forKey: .defaultOutboundQueueId)
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let instanceId = self.instanceId {
            try encodeContainer.encode(instanceId, forKey: .instanceId)
        }
        if let mediaConcurrencies = mediaConcurrencies {
            var mediaConcurrenciesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .mediaConcurrencies)
            for mediaconcurrencies0 in mediaConcurrencies {
                try mediaConcurrenciesContainer.encode(mediaconcurrencies0)
            }
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let numberOfAssociatedQueues = self.numberOfAssociatedQueues {
            try encodeContainer.encode(numberOfAssociatedQueues, forKey: .numberOfAssociatedQueues)
        }
        if let numberOfAssociatedUsers = self.numberOfAssociatedUsers {
            try encodeContainer.encode(numberOfAssociatedUsers, forKey: .numberOfAssociatedUsers)
        }
        if let routingProfileArn = self.routingProfileArn {
            try encodeContainer.encode(routingProfileArn, forKey: .routingProfileArn)
        }
        if let routingProfileId = self.routingProfileId {
            try encodeContainer.encode(routingProfileId, forKey: .routingProfileId)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, tagmap0) in tags {
                try tagsContainer.encode(tagmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instanceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceId)
        instanceId = instanceIdDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let routingProfileArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .routingProfileArn)
        routingProfileArn = routingProfileArnDecoded
        let routingProfileIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .routingProfileId)
        routingProfileId = routingProfileIdDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let mediaConcurrenciesContainer = try containerValues.decodeIfPresent([ConnectClientTypes.MediaConcurrency?].self, forKey: .mediaConcurrencies)
        var mediaConcurrenciesDecoded0:[ConnectClientTypes.MediaConcurrency]? = nil
        if let mediaConcurrenciesContainer = mediaConcurrenciesContainer {
            mediaConcurrenciesDecoded0 = [ConnectClientTypes.MediaConcurrency]()
            for structure0 in mediaConcurrenciesContainer {
                if let structure0 = structure0 {
                    mediaConcurrenciesDecoded0?.append(structure0)
                }
            }
        }
        mediaConcurrencies = mediaConcurrenciesDecoded0
        let defaultOutboundQueueIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .defaultOutboundQueueId)
        defaultOutboundQueueId = defaultOutboundQueueIdDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
        let numberOfAssociatedQueuesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .numberOfAssociatedQueues)
        numberOfAssociatedQueues = numberOfAssociatedQueuesDecoded
        let numberOfAssociatedUsersDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .numberOfAssociatedUsers)
        numberOfAssociatedUsers = numberOfAssociatedUsersDecoded
    }
}
