// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct SearchQueuesOutputResponseBody: Swift.Equatable {
    let queues: [ConnectClientTypes.Queue]?
    let nextToken: Swift.String?
    let approximateTotalCount: Swift.Int?
}

extension SearchQueuesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case approximateTotalCount = "ApproximateTotalCount"
        case nextToken = "NextToken"
        case queues = "Queues"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let queuesContainer = try containerValues.decodeIfPresent([ConnectClientTypes.Queue?].self, forKey: .queues)
        var queuesDecoded0:[ConnectClientTypes.Queue]? = nil
        if let queuesContainer = queuesContainer {
            queuesDecoded0 = [ConnectClientTypes.Queue]()
            for structure0 in queuesContainer {
                if let structure0 = structure0 {
                    queuesDecoded0?.append(structure0)
                }
            }
        }
        queues = queuesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let approximateTotalCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .approximateTotalCount)
        approximateTotalCount = approximateTotalCountDecoded
    }
}
