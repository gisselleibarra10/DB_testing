// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct TransferContactInputBody: Swift.Equatable {
    let instanceId: Swift.String?
    let contactId: Swift.String?
    let queueId: Swift.String?
    let userId: Swift.String?
    let contactFlowId: Swift.String?
    let clientToken: Swift.String?
}

extension TransferContactInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientToken = "ClientToken"
        case contactFlowId = "ContactFlowId"
        case contactId = "ContactId"
        case instanceId = "InstanceId"
        case queueId = "QueueId"
        case userId = "UserId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instanceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceId)
        instanceId = instanceIdDecoded
        let contactIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .contactId)
        contactId = contactIdDecoded
        let queueIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .queueId)
        queueId = queueIdDecoded
        let userIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userId)
        userId = userIdDecoded
        let contactFlowIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .contactFlowId)
        contactFlowId = contactFlowIdDecoded
        let clientTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientToken)
        clientToken = clientTokenDecoded
    }
}
