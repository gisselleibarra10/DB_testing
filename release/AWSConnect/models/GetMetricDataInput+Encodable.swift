// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension GetMetricDataInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case endTime = "EndTime"
        case filters = "Filters"
        case groupings = "Groupings"
        case historicalMetrics = "HistoricalMetrics"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case startTime = "StartTime"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let endTime = self.endTime {
            try encodeContainer.encode(endTime.timeIntervalSince1970, forKey: .endTime)
        }
        if let filters = self.filters {
            try encodeContainer.encode(filters, forKey: .filters)
        }
        if let groupings = groupings {
            var groupingsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .groupings)
            for groupings0 in groupings {
                try groupingsContainer.encode(groupings0.rawValue)
            }
        }
        if let historicalMetrics = historicalMetrics {
            var historicalMetricsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .historicalMetrics)
            for historicalmetrics0 in historicalMetrics {
                try historicalMetricsContainer.encode(historicalmetrics0)
            }
        }
        if let maxResults = self.maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let startTime = self.startTime {
            try encodeContainer.encode(startTime.timeIntervalSince1970, forKey: .startTime)
        }
    }
}
