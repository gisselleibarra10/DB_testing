// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ConnectClientTypes.ReferenceSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attachment = "Attachment"
        case date = "Date"
        case email = "Email"
        case number = "Number"
        case string = "String"
        case url = "Url"
        case sdkUnknown
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        switch self {
            case let .attachment(attachment):
                try container.encode(attachment, forKey: .attachment)
            case let .date(date):
                try container.encode(date, forKey: .date)
            case let .email(email):
                try container.encode(email, forKey: .email)
            case let .number(number):
                try container.encode(number, forKey: .number)
            case let .string(string):
                try container.encode(string, forKey: .string)
            case let .url(url):
                try container.encode(url, forKey: .url)
            case let .sdkUnknown(sdkUnknown):
                try container.encode(sdkUnknown, forKey: .sdkUnknown)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let values = try decoder.container(keyedBy: CodingKeys.self)
        let urlDecoded = try values.decodeIfPresent(ConnectClientTypes.UrlReference.self, forKey: .url)
        if let url = urlDecoded {
            self = .url(url)
            return
        }
        let attachmentDecoded = try values.decodeIfPresent(ConnectClientTypes.AttachmentReference.self, forKey: .attachment)
        if let attachment = attachmentDecoded {
            self = .attachment(attachment)
            return
        }
        let stringDecoded = try values.decodeIfPresent(ConnectClientTypes.StringReference.self, forKey: .string)
        if let string = stringDecoded {
            self = .string(string)
            return
        }
        let numberDecoded = try values.decodeIfPresent(ConnectClientTypes.NumberReference.self, forKey: .number)
        if let number = numberDecoded {
            self = .number(number)
            return
        }
        let dateDecoded = try values.decodeIfPresent(ConnectClientTypes.DateReference.self, forKey: .date)
        if let date = dateDecoded {
            self = .date(date)
            return
        }
        let emailDecoded = try values.decodeIfPresent(ConnectClientTypes.EmailReference.self, forKey: .email)
        if let email = emailDecoded {
            self = .email(email)
            return
        }
        self = .sdkUnknown("")
    }
}
