// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateVocabularyInputBody: Swift.Equatable {
    let clientToken: Swift.String?
    let vocabularyName: Swift.String?
    let languageCode: ConnectClientTypes.VocabularyLanguageCode?
    let content: Swift.String?
    let tags: [Swift.String:Swift.String]?
}

extension CreateVocabularyInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientToken = "ClientToken"
        case content = "Content"
        case languageCode = "LanguageCode"
        case tags = "Tags"
        case vocabularyName = "VocabularyName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clientTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientToken)
        clientToken = clientTokenDecoded
        let vocabularyNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vocabularyName)
        vocabularyName = vocabularyNameDecoded
        let languageCodeDecoded = try containerValues.decodeIfPresent(ConnectClientTypes.VocabularyLanguageCode.self, forKey: .languageCode)
        languageCode = languageCodeDecoded
        let contentDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .content)
        content = contentDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
    }
}
