// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ListPhoneNumbersV2Input: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case phoneNumberCountryCodes = "PhoneNumberCountryCodes"
        case phoneNumberPrefix = "PhoneNumberPrefix"
        case phoneNumberTypes = "PhoneNumberTypes"
        case targetArn = "TargetArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let maxResults = self.maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let phoneNumberCountryCodes = phoneNumberCountryCodes {
            var phoneNumberCountryCodesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .phoneNumberCountryCodes)
            for phonenumbercountrycodes0 in phoneNumberCountryCodes {
                try phoneNumberCountryCodesContainer.encode(phonenumbercountrycodes0.rawValue)
            }
        }
        if let phoneNumberPrefix = self.phoneNumberPrefix {
            try encodeContainer.encode(phoneNumberPrefix, forKey: .phoneNumberPrefix)
        }
        if let phoneNumberTypes = phoneNumberTypes {
            var phoneNumberTypesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .phoneNumberTypes)
            for phonenumbertypes0 in phoneNumberTypes {
                try phoneNumberTypesContainer.encode(phonenumbertypes0.rawValue)
            }
        }
        if let targetArn = self.targetArn {
            try encodeContainer.encode(targetArn, forKey: .targetArn)
        }
    }
}
