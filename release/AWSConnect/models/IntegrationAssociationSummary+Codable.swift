// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ConnectClientTypes.IntegrationAssociationSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case instanceId = "InstanceId"
        case integrationArn = "IntegrationArn"
        case integrationAssociationArn = "IntegrationAssociationArn"
        case integrationAssociationId = "IntegrationAssociationId"
        case integrationType = "IntegrationType"
        case sourceApplicationName = "SourceApplicationName"
        case sourceApplicationUrl = "SourceApplicationUrl"
        case sourceType = "SourceType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let instanceId = self.instanceId {
            try encodeContainer.encode(instanceId, forKey: .instanceId)
        }
        if let integrationArn = self.integrationArn {
            try encodeContainer.encode(integrationArn, forKey: .integrationArn)
        }
        if let integrationAssociationArn = self.integrationAssociationArn {
            try encodeContainer.encode(integrationAssociationArn, forKey: .integrationAssociationArn)
        }
        if let integrationAssociationId = self.integrationAssociationId {
            try encodeContainer.encode(integrationAssociationId, forKey: .integrationAssociationId)
        }
        if let integrationType = self.integrationType {
            try encodeContainer.encode(integrationType.rawValue, forKey: .integrationType)
        }
        if let sourceApplicationName = self.sourceApplicationName {
            try encodeContainer.encode(sourceApplicationName, forKey: .sourceApplicationName)
        }
        if let sourceApplicationUrl = self.sourceApplicationUrl {
            try encodeContainer.encode(sourceApplicationUrl, forKey: .sourceApplicationUrl)
        }
        if let sourceType = self.sourceType {
            try encodeContainer.encode(sourceType.rawValue, forKey: .sourceType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let integrationAssociationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .integrationAssociationId)
        integrationAssociationId = integrationAssociationIdDecoded
        let integrationAssociationArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .integrationAssociationArn)
        integrationAssociationArn = integrationAssociationArnDecoded
        let instanceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceId)
        instanceId = instanceIdDecoded
        let integrationTypeDecoded = try containerValues.decodeIfPresent(ConnectClientTypes.IntegrationType.self, forKey: .integrationType)
        integrationType = integrationTypeDecoded
        let integrationArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .integrationArn)
        integrationArn = integrationArnDecoded
        let sourceApplicationUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceApplicationUrl)
        sourceApplicationUrl = sourceApplicationUrlDecoded
        let sourceApplicationNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceApplicationName)
        sourceApplicationName = sourceApplicationNameDecoded
        let sourceTypeDecoded = try containerValues.decodeIfPresent(ConnectClientTypes.SourceType.self, forKey: .sourceType)
        sourceType = sourceTypeDecoded
    }
}
