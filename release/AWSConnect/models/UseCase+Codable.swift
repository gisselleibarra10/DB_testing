// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ConnectClientTypes.UseCase: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case useCaseArn = "UseCaseArn"
        case useCaseId = "UseCaseId"
        case useCaseType = "UseCaseType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let useCaseArn = self.useCaseArn {
            try encodeContainer.encode(useCaseArn, forKey: .useCaseArn)
        }
        if let useCaseId = self.useCaseId {
            try encodeContainer.encode(useCaseId, forKey: .useCaseId)
        }
        if let useCaseType = self.useCaseType {
            try encodeContainer.encode(useCaseType.rawValue, forKey: .useCaseType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let useCaseIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .useCaseId)
        useCaseId = useCaseIdDecoded
        let useCaseArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .useCaseArn)
        useCaseArn = useCaseArnDecoded
        let useCaseTypeDecoded = try containerValues.decodeIfPresent(ConnectClientTypes.UseCaseType.self, forKey: .useCaseType)
        useCaseType = useCaseTypeDecoded
    }
}
