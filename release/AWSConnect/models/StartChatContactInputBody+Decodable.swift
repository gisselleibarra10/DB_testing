// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct StartChatContactInputBody: Swift.Equatable {
    let instanceId: Swift.String?
    let contactFlowId: Swift.String?
    let attributes: [Swift.String:Swift.String]?
    let participantDetails: ConnectClientTypes.ParticipantDetails?
    let initialMessage: ConnectClientTypes.ChatMessage?
    let clientToken: Swift.String?
    let chatDurationInMinutes: Swift.Int?
    let supportedMessagingContentTypes: [Swift.String]?
}

extension StartChatContactInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attributes = "Attributes"
        case chatDurationInMinutes = "ChatDurationInMinutes"
        case clientToken = "ClientToken"
        case contactFlowId = "ContactFlowId"
        case initialMessage = "InitialMessage"
        case instanceId = "InstanceId"
        case participantDetails = "ParticipantDetails"
        case supportedMessagingContentTypes = "SupportedMessagingContentTypes"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instanceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceId)
        instanceId = instanceIdDecoded
        let contactFlowIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .contactFlowId)
        contactFlowId = contactFlowIdDecoded
        let attributesContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .attributes)
        var attributesDecoded0: [Swift.String:Swift.String]? = nil
        if let attributesContainer = attributesContainer {
            attributesDecoded0 = [Swift.String:Swift.String]()
            for (key0, attributevalue0) in attributesContainer {
                if let attributevalue0 = attributevalue0 {
                    attributesDecoded0?[key0] = attributevalue0
                }
            }
        }
        attributes = attributesDecoded0
        let participantDetailsDecoded = try containerValues.decodeIfPresent(ConnectClientTypes.ParticipantDetails.self, forKey: .participantDetails)
        participantDetails = participantDetailsDecoded
        let initialMessageDecoded = try containerValues.decodeIfPresent(ConnectClientTypes.ChatMessage.self, forKey: .initialMessage)
        initialMessage = initialMessageDecoded
        let clientTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientToken)
        clientToken = clientTokenDecoded
        let chatDurationInMinutesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .chatDurationInMinutes)
        chatDurationInMinutes = chatDurationInMinutesDecoded
        let supportedMessagingContentTypesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .supportedMessagingContentTypes)
        var supportedMessagingContentTypesDecoded0:[Swift.String]? = nil
        if let supportedMessagingContentTypesContainer = supportedMessagingContentTypesContainer {
            supportedMessagingContentTypesDecoded0 = [Swift.String]()
            for string0 in supportedMessagingContentTypesContainer {
                if let string0 = string0 {
                    supportedMessagingContentTypesDecoded0?.append(string0)
                }
            }
        }
        supportedMessagingContentTypes = supportedMessagingContentTypesDecoded0
    }
}
