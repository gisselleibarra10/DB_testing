// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ConnectClientTypes.ControlPlaneTagFilter: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case andConditions = "AndConditions"
        case orConditions = "OrConditions"
        case tagCondition = "TagCondition"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let andConditions = andConditions {
            var andConditionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .andConditions)
            for tagandconditionlist0 in andConditions {
                try andConditionsContainer.encode(tagandconditionlist0)
            }
        }
        if let orConditions = orConditions {
            var orConditionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .orConditions)
            for tagorconditionlist0 in orConditions {
                var tagorconditionlist0Container = orConditionsContainer.nestedUnkeyedContainer()
                for tagandconditionlist1 in tagorconditionlist0 {
                    try tagorconditionlist0Container.encode(tagandconditionlist1)
                }
            }
        }
        if let tagCondition = self.tagCondition {
            try encodeContainer.encode(tagCondition, forKey: .tagCondition)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let orConditionsContainer = try containerValues.decodeIfPresent([[ConnectClientTypes.TagCondition?]?].self, forKey: .orConditions)
        var orConditionsDecoded0:[[ConnectClientTypes.TagCondition]]? = nil
        if let orConditionsContainer = orConditionsContainer {
            orConditionsDecoded0 = [[ConnectClientTypes.TagCondition]]()
            for list0 in orConditionsContainer {
                var list0Decoded0: [ConnectClientTypes.TagCondition]? = nil
                if let list0 = list0 {
                    list0Decoded0 = [ConnectClientTypes.TagCondition]()
                    for structure1 in list0 {
                        if let structure1 = structure1 {
                            list0Decoded0?.append(structure1)
                        }
                    }
                }
                if let list0Decoded0 = list0Decoded0 {
                    orConditionsDecoded0?.append(list0Decoded0)
                }
            }
        }
        orConditions = orConditionsDecoded0
        let andConditionsContainer = try containerValues.decodeIfPresent([ConnectClientTypes.TagCondition?].self, forKey: .andConditions)
        var andConditionsDecoded0:[ConnectClientTypes.TagCondition]? = nil
        if let andConditionsContainer = andConditionsContainer {
            andConditionsDecoded0 = [ConnectClientTypes.TagCondition]()
            for structure0 in andConditionsContainer {
                if let structure0 = structure0 {
                    andConditionsDecoded0?.append(structure0)
                }
            }
        }
        andConditions = andConditionsDecoded0
        let tagConditionDecoded = try containerValues.decodeIfPresent(ConnectClientTypes.TagCondition.self, forKey: .tagCondition)
        tagCondition = tagConditionDecoded
    }
}
