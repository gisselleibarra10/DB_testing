// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension ConnectClientTypes {
    public enum ContactState: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case connected
        case connectedOnhold
        case connecting
        case ended
        case error
        case incoming
        case missed
        case pending
        case rejected
        case sdkUnknown(Swift.String)

        public static var allCases: [ContactState] {
            return [
                .connected,
                .connectedOnhold,
                .connecting,
                .ended,
                .error,
                .incoming,
                .missed,
                .pending,
                .rejected,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .connected: return "CONNECTED"
            case .connectedOnhold: return "CONNECTED_ONHOLD"
            case .connecting: return "CONNECTING"
            case .ended: return "ENDED"
            case .error: return "ERROR"
            case .incoming: return "INCOMING"
            case .missed: return "MISSED"
            case .pending: return "PENDING"
            case .rejected: return "REJECTED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ContactState(rawValue: rawValue) ?? ContactState.sdkUnknown(rawValue)
        }
    }
}
