// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateRoutingProfileInputBody: Swift.Equatable {
    let name: Swift.String?
    let description: Swift.String?
    let defaultOutboundQueueId: Swift.String?
    let queueConfigs: [ConnectClientTypes.RoutingProfileQueueConfig]?
    let mediaConcurrencies: [ConnectClientTypes.MediaConcurrency]?
    let tags: [Swift.String:Swift.String]?
}

extension CreateRoutingProfileInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case defaultOutboundQueueId = "DefaultOutboundQueueId"
        case description = "Description"
        case mediaConcurrencies = "MediaConcurrencies"
        case name = "Name"
        case queueConfigs = "QueueConfigs"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let defaultOutboundQueueIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .defaultOutboundQueueId)
        defaultOutboundQueueId = defaultOutboundQueueIdDecoded
        let queueConfigsContainer = try containerValues.decodeIfPresent([ConnectClientTypes.RoutingProfileQueueConfig?].self, forKey: .queueConfigs)
        var queueConfigsDecoded0:[ConnectClientTypes.RoutingProfileQueueConfig]? = nil
        if let queueConfigsContainer = queueConfigsContainer {
            queueConfigsDecoded0 = [ConnectClientTypes.RoutingProfileQueueConfig]()
            for structure0 in queueConfigsContainer {
                if let structure0 = structure0 {
                    queueConfigsDecoded0?.append(structure0)
                }
            }
        }
        queueConfigs = queueConfigsDecoded0
        let mediaConcurrenciesContainer = try containerValues.decodeIfPresent([ConnectClientTypes.MediaConcurrency?].self, forKey: .mediaConcurrencies)
        var mediaConcurrenciesDecoded0:[ConnectClientTypes.MediaConcurrency]? = nil
        if let mediaConcurrenciesContainer = mediaConcurrenciesContainer {
            mediaConcurrenciesDecoded0 = [ConnectClientTypes.MediaConcurrency]()
            for structure0 in mediaConcurrenciesContainer {
                if let structure0 = structure0 {
                    mediaConcurrenciesDecoded0?.append(structure0)
                }
            }
        }
        mediaConcurrencies = mediaConcurrenciesDecoded0
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
    }
}
