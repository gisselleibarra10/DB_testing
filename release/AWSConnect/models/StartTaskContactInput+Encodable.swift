// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension StartTaskContactInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attributes = "Attributes"
        case clientToken = "ClientToken"
        case contactFlowId = "ContactFlowId"
        case description = "Description"
        case instanceId = "InstanceId"
        case name = "Name"
        case previousContactId = "PreviousContactId"
        case quickConnectId = "QuickConnectId"
        case references = "References"
        case scheduledTime = "ScheduledTime"
        case taskTemplateId = "TaskTemplateId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let attributes = attributes {
            var attributesContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .attributes)
            for (dictKey0, attributes0) in attributes {
                try attributesContainer.encode(attributes0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let clientToken = self.clientToken {
            try encodeContainer.encode(clientToken, forKey: .clientToken)
        }
        if let contactFlowId = self.contactFlowId {
            try encodeContainer.encode(contactFlowId, forKey: .contactFlowId)
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let instanceId = self.instanceId {
            try encodeContainer.encode(instanceId, forKey: .instanceId)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let previousContactId = self.previousContactId {
            try encodeContainer.encode(previousContactId, forKey: .previousContactId)
        }
        if let quickConnectId = self.quickConnectId {
            try encodeContainer.encode(quickConnectId, forKey: .quickConnectId)
        }
        if let references = references {
            var referencesContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .references)
            for (dictKey0, contactreferences0) in references {
                try referencesContainer.encode(contactreferences0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let scheduledTime = self.scheduledTime {
            try encodeContainer.encode(scheduledTime.timeIntervalSince1970, forKey: .scheduledTime)
        }
        if let taskTemplateId = self.taskTemplateId {
            try encodeContainer.encode(taskTemplateId, forKey: .taskTemplateId)
        }
    }
}
