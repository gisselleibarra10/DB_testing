// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateQueueInputBody: Swift.Equatable {
    let name: Swift.String?
    let description: Swift.String?
    let outboundCallerConfig: ConnectClientTypes.OutboundCallerConfig?
    let hoursOfOperationId: Swift.String?
    let maxContacts: Swift.Int?
    let quickConnectIds: [Swift.String]?
    let tags: [Swift.String:Swift.String]?
}

extension CreateQueueInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description = "Description"
        case hoursOfOperationId = "HoursOfOperationId"
        case maxContacts = "MaxContacts"
        case name = "Name"
        case outboundCallerConfig = "OutboundCallerConfig"
        case quickConnectIds = "QuickConnectIds"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let outboundCallerConfigDecoded = try containerValues.decodeIfPresent(ConnectClientTypes.OutboundCallerConfig.self, forKey: .outboundCallerConfig)
        outboundCallerConfig = outboundCallerConfigDecoded
        let hoursOfOperationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .hoursOfOperationId)
        hoursOfOperationId = hoursOfOperationIdDecoded
        let maxContactsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxContacts)
        maxContacts = maxContactsDecoded
        let quickConnectIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .quickConnectIds)
        var quickConnectIdsDecoded0:[Swift.String]? = nil
        if let quickConnectIdsContainer = quickConnectIdsContainer {
            quickConnectIdsDecoded0 = [Swift.String]()
            for string0 in quickConnectIdsContainer {
                if let string0 = string0 {
                    quickConnectIdsDecoded0?.append(string0)
                }
            }
        }
        quickConnectIds = quickConnectIdsDecoded0
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
    }
}
