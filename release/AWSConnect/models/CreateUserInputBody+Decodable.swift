// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateUserInputBody: Swift.Equatable {
    let username: Swift.String?
    let password: Swift.String?
    let identityInfo: ConnectClientTypes.UserIdentityInfo?
    let phoneConfig: ConnectClientTypes.UserPhoneConfig?
    let directoryUserId: Swift.String?
    let securityProfileIds: [Swift.String]?
    let routingProfileId: Swift.String?
    let hierarchyGroupId: Swift.String?
    let tags: [Swift.String:Swift.String]?
}

extension CreateUserInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case directoryUserId = "DirectoryUserId"
        case hierarchyGroupId = "HierarchyGroupId"
        case identityInfo = "IdentityInfo"
        case password = "Password"
        case phoneConfig = "PhoneConfig"
        case routingProfileId = "RoutingProfileId"
        case securityProfileIds = "SecurityProfileIds"
        case tags = "Tags"
        case username = "Username"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let usernameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .username)
        username = usernameDecoded
        let passwordDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .password)
        password = passwordDecoded
        let identityInfoDecoded = try containerValues.decodeIfPresent(ConnectClientTypes.UserIdentityInfo.self, forKey: .identityInfo)
        identityInfo = identityInfoDecoded
        let phoneConfigDecoded = try containerValues.decodeIfPresent(ConnectClientTypes.UserPhoneConfig.self, forKey: .phoneConfig)
        phoneConfig = phoneConfigDecoded
        let directoryUserIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .directoryUserId)
        directoryUserId = directoryUserIdDecoded
        let securityProfileIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .securityProfileIds)
        var securityProfileIdsDecoded0:[Swift.String]? = nil
        if let securityProfileIdsContainer = securityProfileIdsContainer {
            securityProfileIdsDecoded0 = [Swift.String]()
            for string0 in securityProfileIdsContainer {
                if let string0 = string0 {
                    securityProfileIdsDecoded0?.append(string0)
                }
            }
        }
        securityProfileIds = securityProfileIdsDecoded0
        let routingProfileIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .routingProfileId)
        routingProfileId = routingProfileIdDecoded
        let hierarchyGroupIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .hierarchyGroupId)
        hierarchyGroupId = hierarchyGroupIdDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
    }
}
