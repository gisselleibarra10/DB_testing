// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension StartChatContactInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attributes = "Attributes"
        case chatDurationInMinutes = "ChatDurationInMinutes"
        case clientToken = "ClientToken"
        case contactFlowId = "ContactFlowId"
        case initialMessage = "InitialMessage"
        case instanceId = "InstanceId"
        case participantDetails = "ParticipantDetails"
        case supportedMessagingContentTypes = "SupportedMessagingContentTypes"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let attributes = attributes {
            var attributesContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .attributes)
            for (dictKey0, attributes0) in attributes {
                try attributesContainer.encode(attributes0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let chatDurationInMinutes = self.chatDurationInMinutes {
            try encodeContainer.encode(chatDurationInMinutes, forKey: .chatDurationInMinutes)
        }
        if let clientToken = self.clientToken {
            try encodeContainer.encode(clientToken, forKey: .clientToken)
        }
        if let contactFlowId = self.contactFlowId {
            try encodeContainer.encode(contactFlowId, forKey: .contactFlowId)
        }
        if let initialMessage = self.initialMessage {
            try encodeContainer.encode(initialMessage, forKey: .initialMessage)
        }
        if let instanceId = self.instanceId {
            try encodeContainer.encode(instanceId, forKey: .instanceId)
        }
        if let participantDetails = self.participantDetails {
            try encodeContainer.encode(participantDetails, forKey: .participantDetails)
        }
        if let supportedMessagingContentTypes = supportedMessagingContentTypes {
            var supportedMessagingContentTypesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .supportedMessagingContentTypes)
            for supportedmessagingcontenttypes0 in supportedMessagingContentTypes {
                try supportedMessagingContentTypesContainer.encode(supportedmessagingcontenttypes0)
            }
        }
    }
}
