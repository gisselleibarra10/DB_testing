// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ConnectClientTypes.TaskTemplateConstraints: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case invisibleFields = "InvisibleFields"
        case readOnlyFields = "ReadOnlyFields"
        case requiredFields = "RequiredFields"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let invisibleFields = invisibleFields {
            var invisibleFieldsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .invisibleFields)
            for invisibletasktemplatefields0 in invisibleFields {
                try invisibleFieldsContainer.encode(invisibletasktemplatefields0)
            }
        }
        if let readOnlyFields = readOnlyFields {
            var readOnlyFieldsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .readOnlyFields)
            for readonlytasktemplatefields0 in readOnlyFields {
                try readOnlyFieldsContainer.encode(readonlytasktemplatefields0)
            }
        }
        if let requiredFields = requiredFields {
            var requiredFieldsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .requiredFields)
            for requiredtasktemplatefields0 in requiredFields {
                try requiredFieldsContainer.encode(requiredtasktemplatefields0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let requiredFieldsContainer = try containerValues.decodeIfPresent([ConnectClientTypes.RequiredFieldInfo?].self, forKey: .requiredFields)
        var requiredFieldsDecoded0:[ConnectClientTypes.RequiredFieldInfo]? = nil
        if let requiredFieldsContainer = requiredFieldsContainer {
            requiredFieldsDecoded0 = [ConnectClientTypes.RequiredFieldInfo]()
            for structure0 in requiredFieldsContainer {
                if let structure0 = structure0 {
                    requiredFieldsDecoded0?.append(structure0)
                }
            }
        }
        requiredFields = requiredFieldsDecoded0
        let readOnlyFieldsContainer = try containerValues.decodeIfPresent([ConnectClientTypes.ReadOnlyFieldInfo?].self, forKey: .readOnlyFields)
        var readOnlyFieldsDecoded0:[ConnectClientTypes.ReadOnlyFieldInfo]? = nil
        if let readOnlyFieldsContainer = readOnlyFieldsContainer {
            readOnlyFieldsDecoded0 = [ConnectClientTypes.ReadOnlyFieldInfo]()
            for structure0 in readOnlyFieldsContainer {
                if let structure0 = structure0 {
                    readOnlyFieldsDecoded0?.append(structure0)
                }
            }
        }
        readOnlyFields = readOnlyFieldsDecoded0
        let invisibleFieldsContainer = try containerValues.decodeIfPresent([ConnectClientTypes.InvisibleFieldInfo?].self, forKey: .invisibleFields)
        var invisibleFieldsDecoded0:[ConnectClientTypes.InvisibleFieldInfo]? = nil
        if let invisibleFieldsContainer = invisibleFieldsContainer {
            invisibleFieldsDecoded0 = [ConnectClientTypes.InvisibleFieldInfo]()
            for structure0 in invisibleFieldsContainer {
                if let structure0 = structure0 {
                    invisibleFieldsDecoded0?.append(structure0)
                }
            }
        }
        invisibleFields = invisibleFieldsDecoded0
    }
}
