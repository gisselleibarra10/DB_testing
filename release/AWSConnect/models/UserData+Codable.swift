// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ConnectClientTypes.UserData: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case activeSlotsByChannel = "ActiveSlotsByChannel"
        case availableSlotsByChannel = "AvailableSlotsByChannel"
        case contacts = "Contacts"
        case hierarchyPath = "HierarchyPath"
        case maxSlotsByChannel = "MaxSlotsByChannel"
        case routingProfile = "RoutingProfile"
        case status = "Status"
        case user = "User"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let activeSlotsByChannel = activeSlotsByChannel {
            var activeSlotsByChannelContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .activeSlotsByChannel)
            for (dictKey0, channeltocountmap0) in activeSlotsByChannel {
                try activeSlotsByChannelContainer.encode(channeltocountmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let availableSlotsByChannel = availableSlotsByChannel {
            var availableSlotsByChannelContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .availableSlotsByChannel)
            for (dictKey0, channeltocountmap0) in availableSlotsByChannel {
                try availableSlotsByChannelContainer.encode(channeltocountmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let contacts = contacts {
            var contactsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .contacts)
            for agentcontactreferencelist0 in contacts {
                try contactsContainer.encode(agentcontactreferencelist0)
            }
        }
        if let hierarchyPath = self.hierarchyPath {
            try encodeContainer.encode(hierarchyPath, forKey: .hierarchyPath)
        }
        if let maxSlotsByChannel = maxSlotsByChannel {
            var maxSlotsByChannelContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .maxSlotsByChannel)
            for (dictKey0, channeltocountmap0) in maxSlotsByChannel {
                try maxSlotsByChannelContainer.encode(channeltocountmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let routingProfile = self.routingProfile {
            try encodeContainer.encode(routingProfile, forKey: .routingProfile)
        }
        if let status = self.status {
            try encodeContainer.encode(status, forKey: .status)
        }
        if let user = self.user {
            try encodeContainer.encode(user, forKey: .user)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let userDecoded = try containerValues.decodeIfPresent(ConnectClientTypes.UserReference.self, forKey: .user)
        user = userDecoded
        let routingProfileDecoded = try containerValues.decodeIfPresent(ConnectClientTypes.RoutingProfileReference.self, forKey: .routingProfile)
        routingProfile = routingProfileDecoded
        let hierarchyPathDecoded = try containerValues.decodeIfPresent(ConnectClientTypes.HierarchyPathReference.self, forKey: .hierarchyPath)
        hierarchyPath = hierarchyPathDecoded
        let statusDecoded = try containerValues.decodeIfPresent(ConnectClientTypes.AgentStatusReference.self, forKey: .status)
        status = statusDecoded
        let availableSlotsByChannelContainer = try containerValues.decodeIfPresent([Swift.String: Swift.Int?].self, forKey: .availableSlotsByChannel)
        var availableSlotsByChannelDecoded0: [Swift.String:Swift.Int]? = nil
        if let availableSlotsByChannelContainer = availableSlotsByChannelContainer {
            availableSlotsByChannelDecoded0 = [Swift.String:Swift.Int]()
            for (key0, integercount0) in availableSlotsByChannelContainer {
                if let integercount0 = integercount0 {
                    availableSlotsByChannelDecoded0?[key0] = integercount0
                }
            }
        }
        availableSlotsByChannel = availableSlotsByChannelDecoded0
        let maxSlotsByChannelContainer = try containerValues.decodeIfPresent([Swift.String: Swift.Int?].self, forKey: .maxSlotsByChannel)
        var maxSlotsByChannelDecoded0: [Swift.String:Swift.Int]? = nil
        if let maxSlotsByChannelContainer = maxSlotsByChannelContainer {
            maxSlotsByChannelDecoded0 = [Swift.String:Swift.Int]()
            for (key0, integercount0) in maxSlotsByChannelContainer {
                if let integercount0 = integercount0 {
                    maxSlotsByChannelDecoded0?[key0] = integercount0
                }
            }
        }
        maxSlotsByChannel = maxSlotsByChannelDecoded0
        let activeSlotsByChannelContainer = try containerValues.decodeIfPresent([Swift.String: Swift.Int?].self, forKey: .activeSlotsByChannel)
        var activeSlotsByChannelDecoded0: [Swift.String:Swift.Int]? = nil
        if let activeSlotsByChannelContainer = activeSlotsByChannelContainer {
            activeSlotsByChannelDecoded0 = [Swift.String:Swift.Int]()
            for (key0, integercount0) in activeSlotsByChannelContainer {
                if let integercount0 = integercount0 {
                    activeSlotsByChannelDecoded0?[key0] = integercount0
                }
            }
        }
        activeSlotsByChannel = activeSlotsByChannelDecoded0
        let contactsContainer = try containerValues.decodeIfPresent([ConnectClientTypes.AgentContactReference?].self, forKey: .contacts)
        var contactsDecoded0:[ConnectClientTypes.AgentContactReference]? = nil
        if let contactsContainer = contactsContainer {
            contactsDecoded0 = [ConnectClientTypes.AgentContactReference]()
            for structure0 in contactsContainer {
                if let structure0 = structure0 {
                    contactsDecoded0?.append(structure0)
                }
            }
        }
        contacts = contactsDecoded0
    }
}
