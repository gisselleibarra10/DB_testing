// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ConnectClientTypes.AgentContactReference: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case agentContactState = "AgentContactState"
        case channel = "Channel"
        case connectedToAgentTimestamp = "ConnectedToAgentTimestamp"
        case contactId = "ContactId"
        case initiationMethod = "InitiationMethod"
        case queue = "Queue"
        case stateStartTimestamp = "StateStartTimestamp"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let agentContactState = self.agentContactState {
            try encodeContainer.encode(agentContactState.rawValue, forKey: .agentContactState)
        }
        if let channel = self.channel {
            try encodeContainer.encode(channel.rawValue, forKey: .channel)
        }
        if let connectedToAgentTimestamp = self.connectedToAgentTimestamp {
            try encodeContainer.encode(connectedToAgentTimestamp.timeIntervalSince1970, forKey: .connectedToAgentTimestamp)
        }
        if let contactId = self.contactId {
            try encodeContainer.encode(contactId, forKey: .contactId)
        }
        if let initiationMethod = self.initiationMethod {
            try encodeContainer.encode(initiationMethod.rawValue, forKey: .initiationMethod)
        }
        if let queue = self.queue {
            try encodeContainer.encode(queue, forKey: .queue)
        }
        if let stateStartTimestamp = self.stateStartTimestamp {
            try encodeContainer.encode(stateStartTimestamp.timeIntervalSince1970, forKey: .stateStartTimestamp)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let contactIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .contactId)
        contactId = contactIdDecoded
        let channelDecoded = try containerValues.decodeIfPresent(ConnectClientTypes.Channel.self, forKey: .channel)
        channel = channelDecoded
        let initiationMethodDecoded = try containerValues.decodeIfPresent(ConnectClientTypes.ContactInitiationMethod.self, forKey: .initiationMethod)
        initiationMethod = initiationMethodDecoded
        let agentContactStateDecoded = try containerValues.decodeIfPresent(ConnectClientTypes.ContactState.self, forKey: .agentContactState)
        agentContactState = agentContactStateDecoded
        let stateStartTimestampDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .stateStartTimestamp)
        stateStartTimestamp = stateStartTimestampDecoded
        let connectedToAgentTimestampDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .connectedToAgentTimestamp)
        connectedToAgentTimestamp = connectedToAgentTimestampDecoded
        let queueDecoded = try containerValues.decodeIfPresent(ConnectClientTypes.QueueReference.self, forKey: .queue)
        queue = queueDecoded
    }
}
