// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetCurrentMetricDataInputBody: Swift.Equatable {
    let filters: ConnectClientTypes.Filters?
    let groupings: [ConnectClientTypes.Grouping]?
    let currentMetrics: [ConnectClientTypes.CurrentMetric]?
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
}

extension GetCurrentMetricDataInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case currentMetrics = "CurrentMetrics"
        case filters = "Filters"
        case groupings = "Groupings"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let filtersDecoded = try containerValues.decodeIfPresent(ConnectClientTypes.Filters.self, forKey: .filters)
        filters = filtersDecoded
        let groupingsContainer = try containerValues.decodeIfPresent([ConnectClientTypes.Grouping?].self, forKey: .groupings)
        var groupingsDecoded0:[ConnectClientTypes.Grouping]? = nil
        if let groupingsContainer = groupingsContainer {
            groupingsDecoded0 = [ConnectClientTypes.Grouping]()
            for string0 in groupingsContainer {
                if let string0 = string0 {
                    groupingsDecoded0?.append(string0)
                }
            }
        }
        groupings = groupingsDecoded0
        let currentMetricsContainer = try containerValues.decodeIfPresent([ConnectClientTypes.CurrentMetric?].self, forKey: .currentMetrics)
        var currentMetricsDecoded0:[ConnectClientTypes.CurrentMetric]? = nil
        if let currentMetricsContainer = currentMetricsContainer {
            currentMetricsDecoded0 = [ConnectClientTypes.CurrentMetric]()
            for structure0 in currentMetricsContainer {
                if let structure0 = structure0 {
                    currentMetricsDecoded0?.append(structure0)
                }
            }
        }
        currentMetrics = currentMetricsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
    }
}
