// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension RdsClientTypes.DBSnapshotAttributesResult: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dBSnapshotAttributes = "DBSnapshotAttributes"
        case dBSnapshotIdentifier = "DBSnapshotIdentifier"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let dBSnapshotAttributes = dBSnapshotAttributes {
            var dBSnapshotAttributesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("DBSnapshotAttributes"))
            for (index0, dbsnapshotattribute0) in dBSnapshotAttributes.enumerated() {
                try dBSnapshotAttributesContainer.encode(dbsnapshotattribute0, forKey: ClientRuntime.Key("DBSnapshotAttribute.\(index0.advanced(by: 1))"))
            }
        }
        if let dBSnapshotIdentifier = dBSnapshotIdentifier {
            try container.encode(dBSnapshotIdentifier, forKey: ClientRuntime.Key("DBSnapshotIdentifier"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dBSnapshotIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dBSnapshotIdentifier)
        dBSnapshotIdentifier = dBSnapshotIdentifierDecoded
        if containerValues.contains(.dBSnapshotAttributes) {
            struct KeyVal0{struct DBSnapshotAttribute{}}
            let dBSnapshotAttributesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.DBSnapshotAttribute>.CodingKeys.self, forKey: .dBSnapshotAttributes)
            if let dBSnapshotAttributesWrappedContainer = dBSnapshotAttributesWrappedContainer {
                let dBSnapshotAttributesContainer = try dBSnapshotAttributesWrappedContainer.decodeIfPresent([RdsClientTypes.DBSnapshotAttribute].self, forKey: .member)
                var dBSnapshotAttributesBuffer:[RdsClientTypes.DBSnapshotAttribute]? = nil
                if let dBSnapshotAttributesContainer = dBSnapshotAttributesContainer {
                    dBSnapshotAttributesBuffer = [RdsClientTypes.DBSnapshotAttribute]()
                    for structureContainer0 in dBSnapshotAttributesContainer {
                        dBSnapshotAttributesBuffer?.append(structureContainer0)
                    }
                }
                dBSnapshotAttributes = dBSnapshotAttributesBuffer
            } else {
                dBSnapshotAttributes = []
            }
        } else {
            dBSnapshotAttributes = nil
        }
    }
}
