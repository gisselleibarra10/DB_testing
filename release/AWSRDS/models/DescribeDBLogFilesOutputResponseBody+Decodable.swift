// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeDBLogFilesOutputResponseBody: Swift.Equatable {
    let describeDBLogFiles: [RdsClientTypes.DescribeDBLogFilesDetails]?
    let marker: Swift.String?
}

extension DescribeDBLogFilesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case describeDBLogFiles = "DescribeDBLogFiles"
        case marker = "Marker"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeDBLogFilesResult"))
        if containerValues.contains(.describeDBLogFiles) {
            struct KeyVal0{struct DescribeDBLogFilesDetails{}}
            let describeDBLogFilesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.DescribeDBLogFilesDetails>.CodingKeys.self, forKey: .describeDBLogFiles)
            if let describeDBLogFilesWrappedContainer = describeDBLogFilesWrappedContainer {
                let describeDBLogFilesContainer = try describeDBLogFilesWrappedContainer.decodeIfPresent([RdsClientTypes.DescribeDBLogFilesDetails].self, forKey: .member)
                var describeDBLogFilesBuffer:[RdsClientTypes.DescribeDBLogFilesDetails]? = nil
                if let describeDBLogFilesContainer = describeDBLogFilesContainer {
                    describeDBLogFilesBuffer = [RdsClientTypes.DescribeDBLogFilesDetails]()
                    for structureContainer0 in describeDBLogFilesContainer {
                        describeDBLogFilesBuffer?.append(structureContainer0)
                    }
                }
                describeDBLogFiles = describeDBLogFilesBuffer
            } else {
                describeDBLogFiles = []
            }
        } else {
            describeDBLogFiles = nil
        }
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
    }
}
