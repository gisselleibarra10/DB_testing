// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ModifyDBProxyEndpointInputBody: Swift.Equatable {
    let dBProxyEndpointName: Swift.String?
    let newDBProxyEndpointName: Swift.String?
    let vpcSecurityGroupIds: [Swift.String]?
}

extension ModifyDBProxyEndpointInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dBProxyEndpointName = "DBProxyEndpointName"
        case newDBProxyEndpointName = "NewDBProxyEndpointName"
        case vpcSecurityGroupIds = "VpcSecurityGroupIds"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dBProxyEndpointNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dBProxyEndpointName)
        dBProxyEndpointName = dBProxyEndpointNameDecoded
        let newDBProxyEndpointNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .newDBProxyEndpointName)
        newDBProxyEndpointName = newDBProxyEndpointNameDecoded
        if containerValues.contains(.vpcSecurityGroupIds) {
            struct KeyVal0{struct member{}}
            let vpcSecurityGroupIdsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .vpcSecurityGroupIds)
            if let vpcSecurityGroupIdsWrappedContainer = vpcSecurityGroupIdsWrappedContainer {
                let vpcSecurityGroupIdsContainer = try vpcSecurityGroupIdsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var vpcSecurityGroupIdsBuffer:[Swift.String]? = nil
                if let vpcSecurityGroupIdsContainer = vpcSecurityGroupIdsContainer {
                    vpcSecurityGroupIdsBuffer = [Swift.String]()
                    for stringContainer0 in vpcSecurityGroupIdsContainer {
                        vpcSecurityGroupIdsBuffer?.append(stringContainer0)
                    }
                }
                vpcSecurityGroupIds = vpcSecurityGroupIdsBuffer
            } else {
                vpcSecurityGroupIds = []
            }
        } else {
            vpcSecurityGroupIds = nil
        }
    }
}
