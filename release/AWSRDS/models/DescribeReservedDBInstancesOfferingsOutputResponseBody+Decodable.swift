// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeReservedDBInstancesOfferingsOutputResponseBody: Swift.Equatable {
    let marker: Swift.String?
    let reservedDBInstancesOfferings: [RdsClientTypes.ReservedDBInstancesOffering]?
}

extension DescribeReservedDBInstancesOfferingsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case marker = "Marker"
        case reservedDBInstancesOfferings = "ReservedDBInstancesOfferings"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeReservedDBInstancesOfferingsResult"))
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
        if containerValues.contains(.reservedDBInstancesOfferings) {
            struct KeyVal0{struct ReservedDBInstancesOffering{}}
            let reservedDBInstancesOfferingsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.ReservedDBInstancesOffering>.CodingKeys.self, forKey: .reservedDBInstancesOfferings)
            if let reservedDBInstancesOfferingsWrappedContainer = reservedDBInstancesOfferingsWrappedContainer {
                let reservedDBInstancesOfferingsContainer = try reservedDBInstancesOfferingsWrappedContainer.decodeIfPresent([RdsClientTypes.ReservedDBInstancesOffering].self, forKey: .member)
                var reservedDBInstancesOfferingsBuffer:[RdsClientTypes.ReservedDBInstancesOffering]? = nil
                if let reservedDBInstancesOfferingsContainer = reservedDBInstancesOfferingsContainer {
                    reservedDBInstancesOfferingsBuffer = [RdsClientTypes.ReservedDBInstancesOffering]()
                    for structureContainer0 in reservedDBInstancesOfferingsContainer {
                        reservedDBInstancesOfferingsBuffer?.append(structureContainer0)
                    }
                }
                reservedDBInstancesOfferings = reservedDBInstancesOfferingsBuffer
            } else {
                reservedDBInstancesOfferings = []
            }
        } else {
            reservedDBInstancesOfferings = nil
        }
    }
}
