// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeDBProxiesOutputResponseBody: Swift.Equatable {
    let dBProxies: [RdsClientTypes.DBProxy]?
    let marker: Swift.String?
}

extension DescribeDBProxiesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dBProxies = "DBProxies"
        case marker = "Marker"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeDBProxiesResult"))
        if containerValues.contains(.dBProxies) {
            struct KeyVal0{struct member{}}
            let dBProxiesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .dBProxies)
            if let dBProxiesWrappedContainer = dBProxiesWrappedContainer {
                let dBProxiesContainer = try dBProxiesWrappedContainer.decodeIfPresent([RdsClientTypes.DBProxy].self, forKey: .member)
                var dBProxiesBuffer:[RdsClientTypes.DBProxy]? = nil
                if let dBProxiesContainer = dBProxiesContainer {
                    dBProxiesBuffer = [RdsClientTypes.DBProxy]()
                    for structureContainer0 in dBProxiesContainer {
                        dBProxiesBuffer?.append(structureContainer0)
                    }
                }
                dBProxies = dBProxiesBuffer
            } else {
                dBProxies = []
            }
        } else {
            dBProxies = nil
        }
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
    }
}
