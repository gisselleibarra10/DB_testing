// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension RdsClientTypes {
    /// A data type representing an Aurora global database.
    public struct GlobalCluster: Swift.Equatable {
        /// The default database name within the new global database cluster.
        public var databaseName: Swift.String?
        /// The deletion protection setting for the new global database cluster.
        public var deletionProtection: Swift.Bool?
        /// The Aurora database engine used by the global database cluster.
        public var engine: Swift.String?
        /// Indicates the database engine version.
        public var engineVersion: Swift.String?
        /// A data object containing all properties for the current state of an in-process or pending failover process for this Aurora global database. This object is empty unless the [FailoverGlobalCluster] API operation has been called on this Aurora global database ([GlobalCluster]).
        public var failoverState: RdsClientTypes.FailoverState?
        /// The Amazon Resource Name (ARN) for the global database cluster.
        public var globalClusterArn: Swift.String?
        /// Contains a user-supplied global database cluster identifier. This identifier is the unique key that identifies a global database cluster.
        public var globalClusterIdentifier: Swift.String?
        /// The list of cluster IDs for secondary clusters within the global database cluster. Currently limited to 1 item.
        public var globalClusterMembers: [RdsClientTypes.GlobalClusterMember]?
        /// The Amazon Web Services Region-unique, immutable identifier for the global database cluster. This identifier is found in Amazon Web Services CloudTrail log entries whenever the Amazon Web Services KMS key for the DB cluster is accessed.
        public var globalClusterResourceId: Swift.String?
        /// Specifies the current state of this global database cluster.
        public var status: Swift.String?
        /// The storage encryption setting for the global database cluster.
        public var storageEncrypted: Swift.Bool?

        public init (
            databaseName: Swift.String? = nil,
            deletionProtection: Swift.Bool? = nil,
            engine: Swift.String? = nil,
            engineVersion: Swift.String? = nil,
            failoverState: RdsClientTypes.FailoverState? = nil,
            globalClusterArn: Swift.String? = nil,
            globalClusterIdentifier: Swift.String? = nil,
            globalClusterMembers: [RdsClientTypes.GlobalClusterMember]? = nil,
            globalClusterResourceId: Swift.String? = nil,
            status: Swift.String? = nil,
            storageEncrypted: Swift.Bool? = nil
        )
        {
            self.databaseName = databaseName
            self.deletionProtection = deletionProtection
            self.engine = engine
            self.engineVersion = engineVersion
            self.failoverState = failoverState
            self.globalClusterArn = globalClusterArn
            self.globalClusterIdentifier = globalClusterIdentifier
            self.globalClusterMembers = globalClusterMembers
            self.globalClusterResourceId = globalClusterResourceId
            self.status = status
            self.storageEncrypted = storageEncrypted
        }
    }

}
