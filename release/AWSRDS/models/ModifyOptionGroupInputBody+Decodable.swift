// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ModifyOptionGroupInputBody: Swift.Equatable {
    let optionGroupName: Swift.String?
    let optionsToInclude: [RdsClientTypes.OptionConfiguration]?
    let optionsToRemove: [Swift.String]?
    let applyImmediately: Swift.Bool
}

extension ModifyOptionGroupInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applyImmediately = "ApplyImmediately"
        case optionGroupName = "OptionGroupName"
        case optionsToInclude = "OptionsToInclude"
        case optionsToRemove = "OptionsToRemove"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let optionGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .optionGroupName)
        optionGroupName = optionGroupNameDecoded
        if containerValues.contains(.optionsToInclude) {
            struct KeyVal0{struct OptionConfiguration{}}
            let optionsToIncludeWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.OptionConfiguration>.CodingKeys.self, forKey: .optionsToInclude)
            if let optionsToIncludeWrappedContainer = optionsToIncludeWrappedContainer {
                let optionsToIncludeContainer = try optionsToIncludeWrappedContainer.decodeIfPresent([RdsClientTypes.OptionConfiguration].self, forKey: .member)
                var optionsToIncludeBuffer:[RdsClientTypes.OptionConfiguration]? = nil
                if let optionsToIncludeContainer = optionsToIncludeContainer {
                    optionsToIncludeBuffer = [RdsClientTypes.OptionConfiguration]()
                    for structureContainer0 in optionsToIncludeContainer {
                        optionsToIncludeBuffer?.append(structureContainer0)
                    }
                }
                optionsToInclude = optionsToIncludeBuffer
            } else {
                optionsToInclude = []
            }
        } else {
            optionsToInclude = nil
        }
        if containerValues.contains(.optionsToRemove) {
            struct KeyVal0{struct member{}}
            let optionsToRemoveWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .optionsToRemove)
            if let optionsToRemoveWrappedContainer = optionsToRemoveWrappedContainer {
                let optionsToRemoveContainer = try optionsToRemoveWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var optionsToRemoveBuffer:[Swift.String]? = nil
                if let optionsToRemoveContainer = optionsToRemoveContainer {
                    optionsToRemoveBuffer = [Swift.String]()
                    for stringContainer0 in optionsToRemoveContainer {
                        optionsToRemoveBuffer?.append(stringContainer0)
                    }
                }
                optionsToRemove = optionsToRemoveBuffer
            } else {
                optionsToRemove = []
            }
        } else {
            optionsToRemove = nil
        }
        let applyImmediatelyDecoded = try containerValues.decode(Swift.Bool.self, forKey: .applyImmediately)
        applyImmediately = applyImmediatelyDecoded
    }
}
