// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeOptionGroupOptionsOutputResponseBody: Swift.Equatable {
    let optionGroupOptions: [RdsClientTypes.OptionGroupOption]?
    let marker: Swift.String?
}

extension DescribeOptionGroupOptionsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case marker = "Marker"
        case optionGroupOptions = "OptionGroupOptions"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeOptionGroupOptionsResult"))
        if containerValues.contains(.optionGroupOptions) {
            struct KeyVal0{struct OptionGroupOption{}}
            let optionGroupOptionsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.OptionGroupOption>.CodingKeys.self, forKey: .optionGroupOptions)
            if let optionGroupOptionsWrappedContainer = optionGroupOptionsWrappedContainer {
                let optionGroupOptionsContainer = try optionGroupOptionsWrappedContainer.decodeIfPresent([RdsClientTypes.OptionGroupOption].self, forKey: .member)
                var optionGroupOptionsBuffer:[RdsClientTypes.OptionGroupOption]? = nil
                if let optionGroupOptionsContainer = optionGroupOptionsContainer {
                    optionGroupOptionsBuffer = [RdsClientTypes.OptionGroupOption]()
                    for structureContainer0 in optionGroupOptionsContainer {
                        optionGroupOptionsBuffer?.append(structureContainer0)
                    }
                }
                optionGroupOptions = optionGroupOptionsBuffer
            } else {
                optionGroupOptions = []
            }
        } else {
            optionGroupOptions = nil
        }
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
    }
}
