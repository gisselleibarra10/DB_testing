// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension RdsClientTypes {
    /// The data structure representing a proxy managed by the RDS Proxy. This data type is used as a response element in the DescribeDBProxies action.
    public struct DBProxy: Swift.Equatable {
        /// One or more data structures specifying the authorization mechanism to connect to the associated RDS DB instance or Aurora DB cluster.
        public var auth: [RdsClientTypes.UserAuthConfigInfo]?
        /// The date and time when the proxy was first created.
        public var createdDate: ClientRuntime.Date?
        /// The Amazon Resource Name (ARN) for the proxy.
        public var dBProxyArn: Swift.String?
        /// The identifier for the proxy. This name must be unique for all proxies owned by your Amazon Web Services account in the specified Amazon Web Services Region.
        public var dBProxyName: Swift.String?
        /// Whether the proxy includes detailed information about SQL statements in its logs. This information helps you to debug issues involving SQL behavior or the performance and scalability of the proxy connections. The debug information includes the text of SQL statements that you submit through the proxy. Thus, only enable this setting when needed for debugging, and only when you have security measures in place to safeguard any sensitive information that appears in the logs.
        public var debugLogging: Swift.Bool
        /// The endpoint that you can use to connect to the DB proxy. You include the endpoint value in the connection string for a database client application.
        public var endpoint: Swift.String?
        /// The kinds of databases that the proxy can connect to. This value determines which database network protocol the proxy recognizes when it interprets network traffic to and from the database. MYSQL supports Aurora MySQL, RDS for MariaDB, and RDS for MySQL databases. POSTGRESQL supports Aurora PostgreSQL and RDS for PostgreSQL databases. SQLSERVER supports RDS for Microsoft SQL Server databases.
        public var engineFamily: Swift.String?
        /// The number of seconds a connection to the proxy can have no activity before the proxy drops the client connection. The proxy keeps the underlying database connection open and puts it back into the connection pool for reuse by later connection requests. Default: 1800 (30 minutes) Constraints: 1 to 28,800
        public var idleClientTimeout: Swift.Int
        /// Indicates whether Transport Layer Security (TLS) encryption is required for connections to the proxy.
        public var requireTLS: Swift.Bool
        /// The Amazon Resource Name (ARN) for the IAM role that the proxy uses to access Amazon Secrets Manager.
        public var roleArn: Swift.String?
        /// The current status of this proxy. A status of available means the proxy is ready to handle requests. Other values indicate that you must wait for the proxy to be ready, or take some action to resolve an issue.
        public var status: RdsClientTypes.DBProxyStatus?
        /// The date and time when the proxy was last updated.
        public var updatedDate: ClientRuntime.Date?
        /// Provides the VPC ID of the DB proxy.
        public var vpcId: Swift.String?
        /// Provides a list of VPC security groups that the proxy belongs to.
        public var vpcSecurityGroupIds: [Swift.String]?
        /// The EC2 subnet IDs for the proxy.
        public var vpcSubnetIds: [Swift.String]?

        public init (
            auth: [RdsClientTypes.UserAuthConfigInfo]? = nil,
            createdDate: ClientRuntime.Date? = nil,
            dBProxyArn: Swift.String? = nil,
            dBProxyName: Swift.String? = nil,
            debugLogging: Swift.Bool = false,
            endpoint: Swift.String? = nil,
            engineFamily: Swift.String? = nil,
            idleClientTimeout: Swift.Int = 0,
            requireTLS: Swift.Bool = false,
            roleArn: Swift.String? = nil,
            status: RdsClientTypes.DBProxyStatus? = nil,
            updatedDate: ClientRuntime.Date? = nil,
            vpcId: Swift.String? = nil,
            vpcSecurityGroupIds: [Swift.String]? = nil,
            vpcSubnetIds: [Swift.String]? = nil
        )
        {
            self.auth = auth
            self.createdDate = createdDate
            self.dBProxyArn = dBProxyArn
            self.dBProxyName = dBProxyName
            self.debugLogging = debugLogging
            self.endpoint = endpoint
            self.engineFamily = engineFamily
            self.idleClientTimeout = idleClientTimeout
            self.requireTLS = requireTLS
            self.roleArn = roleArn
            self.status = status
            self.updatedDate = updatedDate
            self.vpcId = vpcId
            self.vpcSecurityGroupIds = vpcSecurityGroupIds
            self.vpcSubnetIds = vpcSubnetIds
        }
    }

}
