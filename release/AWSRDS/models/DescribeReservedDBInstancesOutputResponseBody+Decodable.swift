// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeReservedDBInstancesOutputResponseBody: Swift.Equatable {
    let marker: Swift.String?
    let reservedDBInstances: [RdsClientTypes.ReservedDBInstance]?
}

extension DescribeReservedDBInstancesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case marker = "Marker"
        case reservedDBInstances = "ReservedDBInstances"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeReservedDBInstancesResult"))
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
        if containerValues.contains(.reservedDBInstances) {
            struct KeyVal0{struct ReservedDBInstance{}}
            let reservedDBInstancesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.ReservedDBInstance>.CodingKeys.self, forKey: .reservedDBInstances)
            if let reservedDBInstancesWrappedContainer = reservedDBInstancesWrappedContainer {
                let reservedDBInstancesContainer = try reservedDBInstancesWrappedContainer.decodeIfPresent([RdsClientTypes.ReservedDBInstance].self, forKey: .member)
                var reservedDBInstancesBuffer:[RdsClientTypes.ReservedDBInstance]? = nil
                if let reservedDBInstancesContainer = reservedDBInstancesContainer {
                    reservedDBInstancesBuffer = [RdsClientTypes.ReservedDBInstance]()
                    for structureContainer0 in reservedDBInstancesContainer {
                        reservedDBInstancesBuffer?.append(structureContainer0)
                    }
                }
                reservedDBInstances = reservedDBInstancesBuffer
            } else {
                reservedDBInstances = []
            }
        } else {
            reservedDBInstances = nil
        }
    }
}
