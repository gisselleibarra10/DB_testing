// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeDBProxyTargetsOutputResponseBody: Swift.Equatable {
    let targets: [RdsClientTypes.DBProxyTarget]?
    let marker: Swift.String?
}

extension DescribeDBProxyTargetsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case marker = "Marker"
        case targets = "Targets"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeDBProxyTargetsResult"))
        if containerValues.contains(.targets) {
            struct KeyVal0{struct member{}}
            let targetsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .targets)
            if let targetsWrappedContainer = targetsWrappedContainer {
                let targetsContainer = try targetsWrappedContainer.decodeIfPresent([RdsClientTypes.DBProxyTarget].self, forKey: .member)
                var targetsBuffer:[RdsClientTypes.DBProxyTarget]? = nil
                if let targetsContainer = targetsContainer {
                    targetsBuffer = [RdsClientTypes.DBProxyTarget]()
                    for structureContainer0 in targetsContainer {
                        targetsBuffer?.append(structureContainer0)
                    }
                }
                targets = targetsBuffer
            } else {
                targets = []
            }
        } else {
            targets = nil
        }
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
    }
}
