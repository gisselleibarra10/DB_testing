// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct RegisterDBProxyTargetsOutputResponseBody: Swift.Equatable {
    let dBProxyTargets: [RdsClientTypes.DBProxyTarget]?
}

extension RegisterDBProxyTargetsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dBProxyTargets = "DBProxyTargets"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("RegisterDBProxyTargetsResult"))
        if containerValues.contains(.dBProxyTargets) {
            struct KeyVal0{struct member{}}
            let dBProxyTargetsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .dBProxyTargets)
            if let dBProxyTargetsWrappedContainer = dBProxyTargetsWrappedContainer {
                let dBProxyTargetsContainer = try dBProxyTargetsWrappedContainer.decodeIfPresent([RdsClientTypes.DBProxyTarget].self, forKey: .member)
                var dBProxyTargetsBuffer:[RdsClientTypes.DBProxyTarget]? = nil
                if let dBProxyTargetsContainer = dBProxyTargetsContainer {
                    dBProxyTargetsBuffer = [RdsClientTypes.DBProxyTarget]()
                    for structureContainer0 in dBProxyTargetsContainer {
                        dBProxyTargetsBuffer?.append(structureContainer0)
                    }
                }
                dBProxyTargets = dBProxyTargetsBuffer
            } else {
                dBProxyTargets = []
            }
        } else {
            dBProxyTargets = nil
        }
    }
}
