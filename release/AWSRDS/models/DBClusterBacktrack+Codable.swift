// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension RdsClientTypes.DBClusterBacktrack: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case backtrackIdentifier = "BacktrackIdentifier"
        case backtrackRequestCreationTime = "BacktrackRequestCreationTime"
        case backtrackTo = "BacktrackTo"
        case backtrackedFrom = "BacktrackedFrom"
        case dBClusterIdentifier = "DBClusterIdentifier"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let backtrackIdentifier = backtrackIdentifier {
            try container.encode(backtrackIdentifier, forKey: ClientRuntime.Key("BacktrackIdentifier"))
        }
        if let backtrackRequestCreationTime = backtrackRequestCreationTime {
            try container.encode(ClientRuntime.TimestampWrapper(backtrackRequestCreationTime, format: .dateTime), forKey: ClientRuntime.Key("backtrackRequestCreationTime"))
        }
        if let backtrackTo = backtrackTo {
            try container.encode(ClientRuntime.TimestampWrapper(backtrackTo, format: .dateTime), forKey: ClientRuntime.Key("backtrackTo"))
        }
        if let backtrackedFrom = backtrackedFrom {
            try container.encode(ClientRuntime.TimestampWrapper(backtrackedFrom, format: .dateTime), forKey: ClientRuntime.Key("backtrackedFrom"))
        }
        if let dBClusterIdentifier = dBClusterIdentifier {
            try container.encode(dBClusterIdentifier, forKey: ClientRuntime.Key("DBClusterIdentifier"))
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dBClusterIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dBClusterIdentifier)
        dBClusterIdentifier = dBClusterIdentifierDecoded
        let backtrackIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .backtrackIdentifier)
        backtrackIdentifier = backtrackIdentifierDecoded
        let backtrackToDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .backtrackTo)
        var backtrackToBuffer:ClientRuntime.Date? = nil
        if let backtrackToDecoded = backtrackToDecoded {
            backtrackToBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(backtrackToDecoded, format: .dateTime)
        }
        backtrackTo = backtrackToBuffer
        let backtrackedFromDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .backtrackedFrom)
        var backtrackedFromBuffer:ClientRuntime.Date? = nil
        if let backtrackedFromDecoded = backtrackedFromDecoded {
            backtrackedFromBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(backtrackedFromDecoded, format: .dateTime)
        }
        backtrackedFrom = backtrackedFromBuffer
        let backtrackRequestCreationTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .backtrackRequestCreationTime)
        var backtrackRequestCreationTimeBuffer:ClientRuntime.Date? = nil
        if let backtrackRequestCreationTimeDecoded = backtrackRequestCreationTimeDecoded {
            backtrackRequestCreationTimeBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(backtrackRequestCreationTimeDecoded, format: .dateTime)
        }
        backtrackRequestCreationTime = backtrackRequestCreationTimeBuffer
        let statusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .status)
        status = statusDecoded
    }
}
