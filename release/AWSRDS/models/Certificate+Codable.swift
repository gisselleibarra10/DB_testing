// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension RdsClientTypes.Certificate: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case certificateArn = "CertificateArn"
        case certificateIdentifier = "CertificateIdentifier"
        case certificateType = "CertificateType"
        case customerOverride = "CustomerOverride"
        case customerOverrideValidTill = "CustomerOverrideValidTill"
        case thumbprint = "Thumbprint"
        case validFrom = "ValidFrom"
        case validTill = "ValidTill"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let certificateArn = certificateArn {
            try container.encode(certificateArn, forKey: ClientRuntime.Key("CertificateArn"))
        }
        if let certificateIdentifier = certificateIdentifier {
            try container.encode(certificateIdentifier, forKey: ClientRuntime.Key("CertificateIdentifier"))
        }
        if let certificateType = certificateType {
            try container.encode(certificateType, forKey: ClientRuntime.Key("CertificateType"))
        }
        if let customerOverride = customerOverride {
            try container.encode(customerOverride, forKey: ClientRuntime.Key("CustomerOverride"))
        }
        if let customerOverrideValidTill = customerOverrideValidTill {
            try container.encode(ClientRuntime.TimestampWrapper(customerOverrideValidTill, format: .dateTime), forKey: ClientRuntime.Key("customerOverrideValidTill"))
        }
        if let thumbprint = thumbprint {
            try container.encode(thumbprint, forKey: ClientRuntime.Key("Thumbprint"))
        }
        if let validFrom = validFrom {
            try container.encode(ClientRuntime.TimestampWrapper(validFrom, format: .dateTime), forKey: ClientRuntime.Key("validFrom"))
        }
        if let validTill = validTill {
            try container.encode(ClientRuntime.TimestampWrapper(validTill, format: .dateTime), forKey: ClientRuntime.Key("validTill"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let certificateIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .certificateIdentifier)
        certificateIdentifier = certificateIdentifierDecoded
        let certificateTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .certificateType)
        certificateType = certificateTypeDecoded
        let thumbprintDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .thumbprint)
        thumbprint = thumbprintDecoded
        let validFromDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .validFrom)
        var validFromBuffer:ClientRuntime.Date? = nil
        if let validFromDecoded = validFromDecoded {
            validFromBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(validFromDecoded, format: .dateTime)
        }
        validFrom = validFromBuffer
        let validTillDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .validTill)
        var validTillBuffer:ClientRuntime.Date? = nil
        if let validTillDecoded = validTillDecoded {
            validTillBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(validTillDecoded, format: .dateTime)
        }
        validTill = validTillBuffer
        let certificateArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .certificateArn)
        certificateArn = certificateArnDecoded
        let customerOverrideDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .customerOverride)
        customerOverride = customerOverrideDecoded
        let customerOverrideValidTillDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .customerOverrideValidTill)
        var customerOverrideValidTillBuffer:ClientRuntime.Date? = nil
        if let customerOverrideValidTillDecoded = customerOverrideValidTillDecoded {
            customerOverrideValidTillBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(customerOverrideValidTillDecoded, format: .dateTime)
        }
        customerOverrideValidTill = customerOverrideValidTillBuffer
    }
}
