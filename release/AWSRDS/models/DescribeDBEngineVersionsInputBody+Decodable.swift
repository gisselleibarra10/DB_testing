// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeDBEngineVersionsInputBody: Swift.Equatable {
    let engine: Swift.String?
    let engineVersion: Swift.String?
    let dBParameterGroupFamily: Swift.String?
    let filters: [RdsClientTypes.Filter]?
    let maxRecords: Swift.Int?
    let marker: Swift.String?
    let defaultOnly: Swift.Bool
    let listSupportedCharacterSets: Swift.Bool?
    let listSupportedTimezones: Swift.Bool?
    let includeAll: Swift.Bool?
}

extension DescribeDBEngineVersionsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dBParameterGroupFamily = "DBParameterGroupFamily"
        case defaultOnly = "DefaultOnly"
        case engine = "Engine"
        case engineVersion = "EngineVersion"
        case filters = "Filters"
        case includeAll = "IncludeAll"
        case listSupportedCharacterSets = "ListSupportedCharacterSets"
        case listSupportedTimezones = "ListSupportedTimezones"
        case marker = "Marker"
        case maxRecords = "MaxRecords"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let engineDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .engine)
        engine = engineDecoded
        let engineVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .engineVersion)
        engineVersion = engineVersionDecoded
        let dBParameterGroupFamilyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dBParameterGroupFamily)
        dBParameterGroupFamily = dBParameterGroupFamilyDecoded
        if containerValues.contains(.filters) {
            struct KeyVal0{struct Filter{}}
            let filtersWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.Filter>.CodingKeys.self, forKey: .filters)
            if let filtersWrappedContainer = filtersWrappedContainer {
                let filtersContainer = try filtersWrappedContainer.decodeIfPresent([RdsClientTypes.Filter].self, forKey: .member)
                var filtersBuffer:[RdsClientTypes.Filter]? = nil
                if let filtersContainer = filtersContainer {
                    filtersBuffer = [RdsClientTypes.Filter]()
                    for structureContainer0 in filtersContainer {
                        filtersBuffer?.append(structureContainer0)
                    }
                }
                filters = filtersBuffer
            } else {
                filters = []
            }
        } else {
            filters = nil
        }
        let maxRecordsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxRecords)
        maxRecords = maxRecordsDecoded
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
        let defaultOnlyDecoded = try containerValues.decode(Swift.Bool.self, forKey: .defaultOnly)
        defaultOnly = defaultOnlyDecoded
        let listSupportedCharacterSetsDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .listSupportedCharacterSets)
        listSupportedCharacterSets = listSupportedCharacterSetsDecoded
        let listSupportedTimezonesDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .listSupportedTimezones)
        listSupportedTimezones = listSupportedTimezonesDecoded
        let includeAllDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .includeAll)
        includeAll = includeAllDecoded
    }
}
