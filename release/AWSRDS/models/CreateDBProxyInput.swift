// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct CreateDBProxyInput: Swift.Equatable {
    /// The authorization mechanism that the proxy uses.
    /// This member is required.
    public var auth: [RdsClientTypes.UserAuthConfig]?
    /// The identifier for the proxy. This name must be unique for all proxies owned by your Amazon Web Services account in the specified Amazon Web Services Region. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it can't end with a hyphen or contain two consecutive hyphens.
    /// This member is required.
    public var dBProxyName: Swift.String?
    /// Whether the proxy includes detailed information about SQL statements in its logs. This information helps you to debug issues involving SQL behavior or the performance and scalability of the proxy connections. The debug information includes the text of SQL statements that you submit through the proxy. Thus, only enable this setting when needed for debugging, and only when you have security measures in place to safeguard any sensitive information that appears in the logs.
    public var debugLogging: Swift.Bool
    /// The kinds of databases that the proxy can connect to. This value determines which database network protocol the proxy recognizes when it interprets network traffic to and from the database. For Aurora MySQL, RDS for MariaDB, and RDS for MySQL databases, specify MYSQL. For Aurora PostgreSQL and RDS for PostgreSQL databases, specify POSTGRESQL. For RDS for Microsoft SQL Server, specify SQLSERVER.
    /// This member is required.
    public var engineFamily: RdsClientTypes.EngineFamily?
    /// The number of seconds that a connection to the proxy can be inactive before the proxy disconnects it. You can set this value higher or lower than the connection timeout limit for the associated database.
    public var idleClientTimeout: Swift.Int?
    /// A Boolean parameter that specifies whether Transport Layer Security (TLS) encryption is required for connections to the proxy. By enabling this setting, you can enforce encrypted TLS connections to the proxy.
    public var requireTLS: Swift.Bool
    /// The Amazon Resource Name (ARN) of the IAM role that the proxy uses to access secrets in Amazon Web Services Secrets Manager.
    /// This member is required.
    public var roleArn: Swift.String?
    /// An optional set of key-value pairs to associate arbitrary data of your choosing with the proxy.
    public var tags: [RdsClientTypes.Tag]?
    /// One or more VPC security group IDs to associate with the new proxy.
    public var vpcSecurityGroupIds: [Swift.String]?
    /// One or more VPC subnet IDs to associate with the new proxy.
    /// This member is required.
    public var vpcSubnetIds: [Swift.String]?

    public init (
        auth: [RdsClientTypes.UserAuthConfig]? = nil,
        dBProxyName: Swift.String? = nil,
        debugLogging: Swift.Bool = false,
        engineFamily: RdsClientTypes.EngineFamily? = nil,
        idleClientTimeout: Swift.Int? = nil,
        requireTLS: Swift.Bool = false,
        roleArn: Swift.String? = nil,
        tags: [RdsClientTypes.Tag]? = nil,
        vpcSecurityGroupIds: [Swift.String]? = nil,
        vpcSubnetIds: [Swift.String]? = nil
    )
    {
        self.auth = auth
        self.dBProxyName = dBProxyName
        self.debugLogging = debugLogging
        self.engineFamily = engineFamily
        self.idleClientTimeout = idleClientTimeout
        self.requireTLS = requireTLS
        self.roleArn = roleArn
        self.tags = tags
        self.vpcSecurityGroupIds = vpcSecurityGroupIds
        self.vpcSubnetIds = vpcSubnetIds
    }
}
