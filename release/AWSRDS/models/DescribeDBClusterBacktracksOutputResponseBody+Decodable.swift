// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeDBClusterBacktracksOutputResponseBody: Swift.Equatable {
    let marker: Swift.String?
    let dBClusterBacktracks: [RdsClientTypes.DBClusterBacktrack]?
}

extension DescribeDBClusterBacktracksOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dBClusterBacktracks = "DBClusterBacktracks"
        case marker = "Marker"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeDBClusterBacktracksResult"))
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
        if containerValues.contains(.dBClusterBacktracks) {
            struct KeyVal0{struct DBClusterBacktrack{}}
            let dBClusterBacktracksWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.DBClusterBacktrack>.CodingKeys.self, forKey: .dBClusterBacktracks)
            if let dBClusterBacktracksWrappedContainer = dBClusterBacktracksWrappedContainer {
                let dBClusterBacktracksContainer = try dBClusterBacktracksWrappedContainer.decodeIfPresent([RdsClientTypes.DBClusterBacktrack].self, forKey: .member)
                var dBClusterBacktracksBuffer:[RdsClientTypes.DBClusterBacktrack]? = nil
                if let dBClusterBacktracksContainer = dBClusterBacktracksContainer {
                    dBClusterBacktracksBuffer = [RdsClientTypes.DBClusterBacktrack]()
                    for structureContainer0 in dBClusterBacktracksContainer {
                        dBClusterBacktracksBuffer?.append(structureContainer0)
                    }
                }
                dBClusterBacktracks = dBClusterBacktracksBuffer
            } else {
                dBClusterBacktracks = []
            }
        } else {
            dBClusterBacktracks = nil
        }
    }
}
