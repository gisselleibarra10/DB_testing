// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DeregisterDBProxyTargetsInputBody: Swift.Equatable {
    let dBProxyName: Swift.String?
    let targetGroupName: Swift.String?
    let dBInstanceIdentifiers: [Swift.String]?
    let dBClusterIdentifiers: [Swift.String]?
}

extension DeregisterDBProxyTargetsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dBClusterIdentifiers = "DBClusterIdentifiers"
        case dBInstanceIdentifiers = "DBInstanceIdentifiers"
        case dBProxyName = "DBProxyName"
        case targetGroupName = "TargetGroupName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dBProxyNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dBProxyName)
        dBProxyName = dBProxyNameDecoded
        let targetGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .targetGroupName)
        targetGroupName = targetGroupNameDecoded
        if containerValues.contains(.dBInstanceIdentifiers) {
            struct KeyVal0{struct member{}}
            let dBInstanceIdentifiersWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .dBInstanceIdentifiers)
            if let dBInstanceIdentifiersWrappedContainer = dBInstanceIdentifiersWrappedContainer {
                let dBInstanceIdentifiersContainer = try dBInstanceIdentifiersWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var dBInstanceIdentifiersBuffer:[Swift.String]? = nil
                if let dBInstanceIdentifiersContainer = dBInstanceIdentifiersContainer {
                    dBInstanceIdentifiersBuffer = [Swift.String]()
                    for stringContainer0 in dBInstanceIdentifiersContainer {
                        dBInstanceIdentifiersBuffer?.append(stringContainer0)
                    }
                }
                dBInstanceIdentifiers = dBInstanceIdentifiersBuffer
            } else {
                dBInstanceIdentifiers = []
            }
        } else {
            dBInstanceIdentifiers = nil
        }
        if containerValues.contains(.dBClusterIdentifiers) {
            struct KeyVal0{struct member{}}
            let dBClusterIdentifiersWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .dBClusterIdentifiers)
            if let dBClusterIdentifiersWrappedContainer = dBClusterIdentifiersWrappedContainer {
                let dBClusterIdentifiersContainer = try dBClusterIdentifiersWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var dBClusterIdentifiersBuffer:[Swift.String]? = nil
                if let dBClusterIdentifiersContainer = dBClusterIdentifiersContainer {
                    dBClusterIdentifiersBuffer = [Swift.String]()
                    for stringContainer0 in dBClusterIdentifiersContainer {
                        dBClusterIdentifiersBuffer?.append(stringContainer0)
                    }
                }
                dBClusterIdentifiers = dBClusterIdentifiersBuffer
            } else {
                dBClusterIdentifiers = []
            }
        } else {
            dBClusterIdentifiers = nil
        }
    }
}
