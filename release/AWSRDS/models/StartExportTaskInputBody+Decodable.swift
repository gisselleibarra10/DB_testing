// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct StartExportTaskInputBody: Swift.Equatable {
    let exportTaskIdentifier: Swift.String?
    let sourceArn: Swift.String?
    let s3BucketName: Swift.String?
    let iamRoleArn: Swift.String?
    let kmsKeyId: Swift.String?
    let s3Prefix: Swift.String?
    let exportOnly: [Swift.String]?
}

extension StartExportTaskInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case exportOnly = "ExportOnly"
        case exportTaskIdentifier = "ExportTaskIdentifier"
        case iamRoleArn = "IamRoleArn"
        case kmsKeyId = "KmsKeyId"
        case s3BucketName = "S3BucketName"
        case s3Prefix = "S3Prefix"
        case sourceArn = "SourceArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let exportTaskIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .exportTaskIdentifier)
        exportTaskIdentifier = exportTaskIdentifierDecoded
        let sourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceArn)
        sourceArn = sourceArnDecoded
        let s3BucketNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .s3BucketName)
        s3BucketName = s3BucketNameDecoded
        let iamRoleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .iamRoleArn)
        iamRoleArn = iamRoleArnDecoded
        let kmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kmsKeyId)
        kmsKeyId = kmsKeyIdDecoded
        let s3PrefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .s3Prefix)
        s3Prefix = s3PrefixDecoded
        if containerValues.contains(.exportOnly) {
            struct KeyVal0{struct member{}}
            let exportOnlyWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .exportOnly)
            if let exportOnlyWrappedContainer = exportOnlyWrappedContainer {
                let exportOnlyContainer = try exportOnlyWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var exportOnlyBuffer:[Swift.String]? = nil
                if let exportOnlyContainer = exportOnlyContainer {
                    exportOnlyBuffer = [Swift.String]()
                    for stringContainer0 in exportOnlyContainer {
                        exportOnlyBuffer?.append(stringContainer0)
                    }
                }
                exportOnly = exportOnlyBuffer
            } else {
                exportOnly = []
            }
        } else {
            exportOnly = nil
        }
    }
}
