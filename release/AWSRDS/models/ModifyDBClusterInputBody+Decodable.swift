// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ModifyDBClusterInputBody: Swift.Equatable {
    let dBClusterIdentifier: Swift.String?
    let newDBClusterIdentifier: Swift.String?
    let applyImmediately: Swift.Bool
    let backupRetentionPeriod: Swift.Int?
    let dBClusterParameterGroupName: Swift.String?
    let vpcSecurityGroupIds: [Swift.String]?
    let port: Swift.Int?
    let masterUserPassword: Swift.String?
    let optionGroupName: Swift.String?
    let preferredBackupWindow: Swift.String?
    let preferredMaintenanceWindow: Swift.String?
    let enableIAMDatabaseAuthentication: Swift.Bool?
    let backtrackWindow: Swift.Int?
    let cloudwatchLogsExportConfiguration: RdsClientTypes.CloudwatchLogsExportConfiguration?
    let engineVersion: Swift.String?
    let allowMajorVersionUpgrade: Swift.Bool
    let dBInstanceParameterGroupName: Swift.String?
    let domain: Swift.String?
    let domainIAMRoleName: Swift.String?
    let scalingConfiguration: RdsClientTypes.ScalingConfiguration?
    let deletionProtection: Swift.Bool?
    let enableHttpEndpoint: Swift.Bool?
    let copyTagsToSnapshot: Swift.Bool?
    let enableGlobalWriteForwarding: Swift.Bool?
    let dBClusterInstanceClass: Swift.String?
    let allocatedStorage: Swift.Int?
    let storageType: Swift.String?
    let iops: Swift.Int?
    let autoMinorVersionUpgrade: Swift.Bool?
    let monitoringInterval: Swift.Int?
    let monitoringRoleArn: Swift.String?
    let enablePerformanceInsights: Swift.Bool?
    let performanceInsightsKMSKeyId: Swift.String?
    let performanceInsightsRetentionPeriod: Swift.Int?
    let serverlessV2ScalingConfiguration: RdsClientTypes.ServerlessV2ScalingConfiguration?
    let networkType: Swift.String?
}

extension ModifyDBClusterInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case allocatedStorage = "AllocatedStorage"
        case allowMajorVersionUpgrade = "AllowMajorVersionUpgrade"
        case applyImmediately = "ApplyImmediately"
        case autoMinorVersionUpgrade = "AutoMinorVersionUpgrade"
        case backtrackWindow = "BacktrackWindow"
        case backupRetentionPeriod = "BackupRetentionPeriod"
        case cloudwatchLogsExportConfiguration = "CloudwatchLogsExportConfiguration"
        case copyTagsToSnapshot = "CopyTagsToSnapshot"
        case dBClusterIdentifier = "DBClusterIdentifier"
        case dBClusterInstanceClass = "DBClusterInstanceClass"
        case dBClusterParameterGroupName = "DBClusterParameterGroupName"
        case dBInstanceParameterGroupName = "DBInstanceParameterGroupName"
        case deletionProtection = "DeletionProtection"
        case domain = "Domain"
        case domainIAMRoleName = "DomainIAMRoleName"
        case enableGlobalWriteForwarding = "EnableGlobalWriteForwarding"
        case enableHttpEndpoint = "EnableHttpEndpoint"
        case enableIAMDatabaseAuthentication = "EnableIAMDatabaseAuthentication"
        case enablePerformanceInsights = "EnablePerformanceInsights"
        case engineVersion = "EngineVersion"
        case iops = "Iops"
        case masterUserPassword = "MasterUserPassword"
        case monitoringInterval = "MonitoringInterval"
        case monitoringRoleArn = "MonitoringRoleArn"
        case networkType = "NetworkType"
        case newDBClusterIdentifier = "NewDBClusterIdentifier"
        case optionGroupName = "OptionGroupName"
        case performanceInsightsKMSKeyId = "PerformanceInsightsKMSKeyId"
        case performanceInsightsRetentionPeriod = "PerformanceInsightsRetentionPeriod"
        case port = "Port"
        case preferredBackupWindow = "PreferredBackupWindow"
        case preferredMaintenanceWindow = "PreferredMaintenanceWindow"
        case scalingConfiguration = "ScalingConfiguration"
        case serverlessV2ScalingConfiguration = "ServerlessV2ScalingConfiguration"
        case storageType = "StorageType"
        case vpcSecurityGroupIds = "VpcSecurityGroupIds"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dBClusterIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dBClusterIdentifier)
        dBClusterIdentifier = dBClusterIdentifierDecoded
        let newDBClusterIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .newDBClusterIdentifier)
        newDBClusterIdentifier = newDBClusterIdentifierDecoded
        let applyImmediatelyDecoded = try containerValues.decode(Swift.Bool.self, forKey: .applyImmediately)
        applyImmediately = applyImmediatelyDecoded
        let backupRetentionPeriodDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .backupRetentionPeriod)
        backupRetentionPeriod = backupRetentionPeriodDecoded
        let dBClusterParameterGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dBClusterParameterGroupName)
        dBClusterParameterGroupName = dBClusterParameterGroupNameDecoded
        if containerValues.contains(.vpcSecurityGroupIds) {
            struct KeyVal0{struct VpcSecurityGroupId{}}
            let vpcSecurityGroupIdsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.VpcSecurityGroupId>.CodingKeys.self, forKey: .vpcSecurityGroupIds)
            if let vpcSecurityGroupIdsWrappedContainer = vpcSecurityGroupIdsWrappedContainer {
                let vpcSecurityGroupIdsContainer = try vpcSecurityGroupIdsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var vpcSecurityGroupIdsBuffer:[Swift.String]? = nil
                if let vpcSecurityGroupIdsContainer = vpcSecurityGroupIdsContainer {
                    vpcSecurityGroupIdsBuffer = [Swift.String]()
                    for stringContainer0 in vpcSecurityGroupIdsContainer {
                        vpcSecurityGroupIdsBuffer?.append(stringContainer0)
                    }
                }
                vpcSecurityGroupIds = vpcSecurityGroupIdsBuffer
            } else {
                vpcSecurityGroupIds = []
            }
        } else {
            vpcSecurityGroupIds = nil
        }
        let portDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .port)
        port = portDecoded
        let masterUserPasswordDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .masterUserPassword)
        masterUserPassword = masterUserPasswordDecoded
        let optionGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .optionGroupName)
        optionGroupName = optionGroupNameDecoded
        let preferredBackupWindowDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .preferredBackupWindow)
        preferredBackupWindow = preferredBackupWindowDecoded
        let preferredMaintenanceWindowDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .preferredMaintenanceWindow)
        preferredMaintenanceWindow = preferredMaintenanceWindowDecoded
        let enableIAMDatabaseAuthenticationDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enableIAMDatabaseAuthentication)
        enableIAMDatabaseAuthentication = enableIAMDatabaseAuthenticationDecoded
        let backtrackWindowDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .backtrackWindow)
        backtrackWindow = backtrackWindowDecoded
        let cloudwatchLogsExportConfigurationDecoded = try containerValues.decodeIfPresent(RdsClientTypes.CloudwatchLogsExportConfiguration.self, forKey: .cloudwatchLogsExportConfiguration)
        cloudwatchLogsExportConfiguration = cloudwatchLogsExportConfigurationDecoded
        let engineVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .engineVersion)
        engineVersion = engineVersionDecoded
        let allowMajorVersionUpgradeDecoded = try containerValues.decode(Swift.Bool.self, forKey: .allowMajorVersionUpgrade)
        allowMajorVersionUpgrade = allowMajorVersionUpgradeDecoded
        let dBInstanceParameterGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dBInstanceParameterGroupName)
        dBInstanceParameterGroupName = dBInstanceParameterGroupNameDecoded
        let domainDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domain)
        domain = domainDecoded
        let domainIAMRoleNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domainIAMRoleName)
        domainIAMRoleName = domainIAMRoleNameDecoded
        let scalingConfigurationDecoded = try containerValues.decodeIfPresent(RdsClientTypes.ScalingConfiguration.self, forKey: .scalingConfiguration)
        scalingConfiguration = scalingConfigurationDecoded
        let deletionProtectionDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .deletionProtection)
        deletionProtection = deletionProtectionDecoded
        let enableHttpEndpointDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enableHttpEndpoint)
        enableHttpEndpoint = enableHttpEndpointDecoded
        let copyTagsToSnapshotDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .copyTagsToSnapshot)
        copyTagsToSnapshot = copyTagsToSnapshotDecoded
        let enableGlobalWriteForwardingDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enableGlobalWriteForwarding)
        enableGlobalWriteForwarding = enableGlobalWriteForwardingDecoded
        let dBClusterInstanceClassDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dBClusterInstanceClass)
        dBClusterInstanceClass = dBClusterInstanceClassDecoded
        let allocatedStorageDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .allocatedStorage)
        allocatedStorage = allocatedStorageDecoded
        let storageTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .storageType)
        storageType = storageTypeDecoded
        let iopsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .iops)
        iops = iopsDecoded
        let autoMinorVersionUpgradeDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .autoMinorVersionUpgrade)
        autoMinorVersionUpgrade = autoMinorVersionUpgradeDecoded
        let monitoringIntervalDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .monitoringInterval)
        monitoringInterval = monitoringIntervalDecoded
        let monitoringRoleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .monitoringRoleArn)
        monitoringRoleArn = monitoringRoleArnDecoded
        let enablePerformanceInsightsDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enablePerformanceInsights)
        enablePerformanceInsights = enablePerformanceInsightsDecoded
        let performanceInsightsKMSKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .performanceInsightsKMSKeyId)
        performanceInsightsKMSKeyId = performanceInsightsKMSKeyIdDecoded
        let performanceInsightsRetentionPeriodDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .performanceInsightsRetentionPeriod)
        performanceInsightsRetentionPeriod = performanceInsightsRetentionPeriodDecoded
        let serverlessV2ScalingConfigurationDecoded = try containerValues.decodeIfPresent(RdsClientTypes.ServerlessV2ScalingConfiguration.self, forKey: .serverlessV2ScalingConfiguration)
        serverlessV2ScalingConfiguration = serverlessV2ScalingConfigurationDecoded
        let networkTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .networkType)
        networkType = networkTypeDecoded
    }
}
