// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct RestoreDBClusterFromSnapshotInputBody: Swift.Equatable {
    let availabilityZones: [Swift.String]?
    let dBClusterIdentifier: Swift.String?
    let snapshotIdentifier: Swift.String?
    let engine: Swift.String?
    let engineVersion: Swift.String?
    let port: Swift.Int?
    let dBSubnetGroupName: Swift.String?
    let databaseName: Swift.String?
    let optionGroupName: Swift.String?
    let vpcSecurityGroupIds: [Swift.String]?
    let tags: [RdsClientTypes.Tag]?
    let kmsKeyId: Swift.String?
    let enableIAMDatabaseAuthentication: Swift.Bool?
    let backtrackWindow: Swift.Int?
    let enableCloudwatchLogsExports: [Swift.String]?
    let engineMode: Swift.String?
    let scalingConfiguration: RdsClientTypes.ScalingConfiguration?
    let dBClusterParameterGroupName: Swift.String?
    let deletionProtection: Swift.Bool?
    let copyTagsToSnapshot: Swift.Bool?
    let domain: Swift.String?
    let domainIAMRoleName: Swift.String?
    let dBClusterInstanceClass: Swift.String?
    let storageType: Swift.String?
    let iops: Swift.Int?
    let publiclyAccessible: Swift.Bool?
    let serverlessV2ScalingConfiguration: RdsClientTypes.ServerlessV2ScalingConfiguration?
    let networkType: Swift.String?
}

extension RestoreDBClusterFromSnapshotInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case availabilityZones = "AvailabilityZones"
        case backtrackWindow = "BacktrackWindow"
        case copyTagsToSnapshot = "CopyTagsToSnapshot"
        case dBClusterIdentifier = "DBClusterIdentifier"
        case dBClusterInstanceClass = "DBClusterInstanceClass"
        case dBClusterParameterGroupName = "DBClusterParameterGroupName"
        case dBSubnetGroupName = "DBSubnetGroupName"
        case databaseName = "DatabaseName"
        case deletionProtection = "DeletionProtection"
        case domain = "Domain"
        case domainIAMRoleName = "DomainIAMRoleName"
        case enableCloudwatchLogsExports = "EnableCloudwatchLogsExports"
        case enableIAMDatabaseAuthentication = "EnableIAMDatabaseAuthentication"
        case engine = "Engine"
        case engineMode = "EngineMode"
        case engineVersion = "EngineVersion"
        case iops = "Iops"
        case kmsKeyId = "KmsKeyId"
        case networkType = "NetworkType"
        case optionGroupName = "OptionGroupName"
        case port = "Port"
        case publiclyAccessible = "PubliclyAccessible"
        case scalingConfiguration = "ScalingConfiguration"
        case serverlessV2ScalingConfiguration = "ServerlessV2ScalingConfiguration"
        case snapshotIdentifier = "SnapshotIdentifier"
        case storageType = "StorageType"
        case tags = "Tags"
        case vpcSecurityGroupIds = "VpcSecurityGroupIds"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.availabilityZones) {
            struct KeyVal0{struct AvailabilityZone{}}
            let availabilityZonesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.AvailabilityZone>.CodingKeys.self, forKey: .availabilityZones)
            if let availabilityZonesWrappedContainer = availabilityZonesWrappedContainer {
                let availabilityZonesContainer = try availabilityZonesWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var availabilityZonesBuffer:[Swift.String]? = nil
                if let availabilityZonesContainer = availabilityZonesContainer {
                    availabilityZonesBuffer = [Swift.String]()
                    for stringContainer0 in availabilityZonesContainer {
                        availabilityZonesBuffer?.append(stringContainer0)
                    }
                }
                availabilityZones = availabilityZonesBuffer
            } else {
                availabilityZones = []
            }
        } else {
            availabilityZones = nil
        }
        let dBClusterIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dBClusterIdentifier)
        dBClusterIdentifier = dBClusterIdentifierDecoded
        let snapshotIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .snapshotIdentifier)
        snapshotIdentifier = snapshotIdentifierDecoded
        let engineDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .engine)
        engine = engineDecoded
        let engineVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .engineVersion)
        engineVersion = engineVersionDecoded
        let portDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .port)
        port = portDecoded
        let dBSubnetGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dBSubnetGroupName)
        dBSubnetGroupName = dBSubnetGroupNameDecoded
        let databaseNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .databaseName)
        databaseName = databaseNameDecoded
        let optionGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .optionGroupName)
        optionGroupName = optionGroupNameDecoded
        if containerValues.contains(.vpcSecurityGroupIds) {
            struct KeyVal0{struct VpcSecurityGroupId{}}
            let vpcSecurityGroupIdsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.VpcSecurityGroupId>.CodingKeys.self, forKey: .vpcSecurityGroupIds)
            if let vpcSecurityGroupIdsWrappedContainer = vpcSecurityGroupIdsWrappedContainer {
                let vpcSecurityGroupIdsContainer = try vpcSecurityGroupIdsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var vpcSecurityGroupIdsBuffer:[Swift.String]? = nil
                if let vpcSecurityGroupIdsContainer = vpcSecurityGroupIdsContainer {
                    vpcSecurityGroupIdsBuffer = [Swift.String]()
                    for stringContainer0 in vpcSecurityGroupIdsContainer {
                        vpcSecurityGroupIdsBuffer?.append(stringContainer0)
                    }
                }
                vpcSecurityGroupIds = vpcSecurityGroupIdsBuffer
            } else {
                vpcSecurityGroupIds = []
            }
        } else {
            vpcSecurityGroupIds = nil
        }
        if containerValues.contains(.tags) {
            struct KeyVal0{struct Tag{}}
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.Tag>.CodingKeys.self, forKey: .tags)
            if let tagsWrappedContainer = tagsWrappedContainer {
                let tagsContainer = try tagsWrappedContainer.decodeIfPresent([RdsClientTypes.Tag].self, forKey: .member)
                var tagsBuffer:[RdsClientTypes.Tag]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [RdsClientTypes.Tag]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
        let kmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kmsKeyId)
        kmsKeyId = kmsKeyIdDecoded
        let enableIAMDatabaseAuthenticationDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enableIAMDatabaseAuthentication)
        enableIAMDatabaseAuthentication = enableIAMDatabaseAuthenticationDecoded
        let backtrackWindowDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .backtrackWindow)
        backtrackWindow = backtrackWindowDecoded
        if containerValues.contains(.enableCloudwatchLogsExports) {
            struct KeyVal0{struct member{}}
            let enableCloudwatchLogsExportsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .enableCloudwatchLogsExports)
            if let enableCloudwatchLogsExportsWrappedContainer = enableCloudwatchLogsExportsWrappedContainer {
                let enableCloudwatchLogsExportsContainer = try enableCloudwatchLogsExportsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var enableCloudwatchLogsExportsBuffer:[Swift.String]? = nil
                if let enableCloudwatchLogsExportsContainer = enableCloudwatchLogsExportsContainer {
                    enableCloudwatchLogsExportsBuffer = [Swift.String]()
                    for stringContainer0 in enableCloudwatchLogsExportsContainer {
                        enableCloudwatchLogsExportsBuffer?.append(stringContainer0)
                    }
                }
                enableCloudwatchLogsExports = enableCloudwatchLogsExportsBuffer
            } else {
                enableCloudwatchLogsExports = []
            }
        } else {
            enableCloudwatchLogsExports = nil
        }
        let engineModeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .engineMode)
        engineMode = engineModeDecoded
        let scalingConfigurationDecoded = try containerValues.decodeIfPresent(RdsClientTypes.ScalingConfiguration.self, forKey: .scalingConfiguration)
        scalingConfiguration = scalingConfigurationDecoded
        let dBClusterParameterGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dBClusterParameterGroupName)
        dBClusterParameterGroupName = dBClusterParameterGroupNameDecoded
        let deletionProtectionDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .deletionProtection)
        deletionProtection = deletionProtectionDecoded
        let copyTagsToSnapshotDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .copyTagsToSnapshot)
        copyTagsToSnapshot = copyTagsToSnapshotDecoded
        let domainDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domain)
        domain = domainDecoded
        let domainIAMRoleNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domainIAMRoleName)
        domainIAMRoleName = domainIAMRoleNameDecoded
        let dBClusterInstanceClassDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dBClusterInstanceClass)
        dBClusterInstanceClass = dBClusterInstanceClassDecoded
        let storageTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .storageType)
        storageType = storageTypeDecoded
        let iopsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .iops)
        iops = iopsDecoded
        let publiclyAccessibleDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .publiclyAccessible)
        publiclyAccessible = publiclyAccessibleDecoded
        let serverlessV2ScalingConfigurationDecoded = try containerValues.decodeIfPresent(RdsClientTypes.ServerlessV2ScalingConfiguration.self, forKey: .serverlessV2ScalingConfiguration)
        serverlessV2ScalingConfiguration = serverlessV2ScalingConfigurationDecoded
        let networkTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .networkType)
        networkType = networkTypeDecoded
    }
}
