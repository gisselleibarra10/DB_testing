// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct ModifyCurrentDBClusterCapacityInput: Swift.Equatable {
    /// The DB cluster capacity. When you change the capacity of a paused Aurora Serverless v1 DB cluster, it automatically resumes. Constraints:
    ///
    /// * For Aurora MySQL, valid capacity values are 1, 2, 4, 8, 16, 32, 64, 128, and 256.
    ///
    /// * For Aurora PostgreSQL, valid capacity values are 2, 4, 8, 16, 32, 64, 192, and 384.
    public var capacity: Swift.Int?
    /// The DB cluster identifier for the cluster being modified. This parameter isn't case-sensitive. Constraints:
    ///
    /// * Must match the identifier of an existing DB cluster.
    /// This member is required.
    public var dBClusterIdentifier: Swift.String?
    /// The amount of time, in seconds, that Aurora Serverless v1 tries to find a scaling point to perform seamless scaling before enforcing the timeout action. The default is 300. Specify a value between 10 and 600 seconds.
    public var secondsBeforeTimeout: Swift.Int?
    /// The action to take when the timeout is reached, either ForceApplyCapacityChange or RollbackCapacityChange. ForceApplyCapacityChange, the default, sets the capacity to the specified value as soon as possible. RollbackCapacityChange ignores the capacity change if a scaling point isn't found in the timeout period.
    public var timeoutAction: Swift.String?

    public init (
        capacity: Swift.Int? = nil,
        dBClusterIdentifier: Swift.String? = nil,
        secondsBeforeTimeout: Swift.Int? = nil,
        timeoutAction: Swift.String? = nil
    )
    {
        self.capacity = capacity
        self.dBClusterIdentifier = dBClusterIdentifier
        self.secondsBeforeTimeout = secondsBeforeTimeout
        self.timeoutAction = timeoutAction
    }
}
