// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ModifyDBProxyInputBody: Swift.Equatable {
    let dBProxyName: Swift.String?
    let newDBProxyName: Swift.String?
    let auth: [RdsClientTypes.UserAuthConfig]?
    let requireTLS: Swift.Bool?
    let idleClientTimeout: Swift.Int?
    let debugLogging: Swift.Bool?
    let roleArn: Swift.String?
    let securityGroups: [Swift.String]?
}

extension ModifyDBProxyInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case auth = "Auth"
        case dBProxyName = "DBProxyName"
        case debugLogging = "DebugLogging"
        case idleClientTimeout = "IdleClientTimeout"
        case newDBProxyName = "NewDBProxyName"
        case requireTLS = "RequireTLS"
        case roleArn = "RoleArn"
        case securityGroups = "SecurityGroups"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dBProxyNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dBProxyName)
        dBProxyName = dBProxyNameDecoded
        let newDBProxyNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .newDBProxyName)
        newDBProxyName = newDBProxyNameDecoded
        if containerValues.contains(.auth) {
            struct KeyVal0{struct member{}}
            let authWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .auth)
            if let authWrappedContainer = authWrappedContainer {
                let authContainer = try authWrappedContainer.decodeIfPresent([RdsClientTypes.UserAuthConfig].self, forKey: .member)
                var authBuffer:[RdsClientTypes.UserAuthConfig]? = nil
                if let authContainer = authContainer {
                    authBuffer = [RdsClientTypes.UserAuthConfig]()
                    for structureContainer0 in authContainer {
                        authBuffer?.append(structureContainer0)
                    }
                }
                auth = authBuffer
            } else {
                auth = []
            }
        } else {
            auth = nil
        }
        let requireTLSDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .requireTLS)
        requireTLS = requireTLSDecoded
        let idleClientTimeoutDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .idleClientTimeout)
        idleClientTimeout = idleClientTimeoutDecoded
        let debugLoggingDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .debugLogging)
        debugLogging = debugLoggingDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        if containerValues.contains(.securityGroups) {
            struct KeyVal0{struct member{}}
            let securityGroupsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .securityGroups)
            if let securityGroupsWrappedContainer = securityGroupsWrappedContainer {
                let securityGroupsContainer = try securityGroupsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var securityGroupsBuffer:[Swift.String]? = nil
                if let securityGroupsContainer = securityGroupsContainer {
                    securityGroupsBuffer = [Swift.String]()
                    for stringContainer0 in securityGroupsContainer {
                        securityGroupsBuffer?.append(stringContainer0)
                    }
                }
                securityGroups = securityGroupsBuffer
            } else {
                securityGroups = []
            }
        } else {
            securityGroups = nil
        }
    }
}
