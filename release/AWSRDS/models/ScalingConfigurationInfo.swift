// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension RdsClientTypes {
    /// Shows the scaling configuration for an Aurora DB cluster in serverless DB engine mode. For more information, see [Using Amazon Aurora Serverless v1](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html) in the Amazon Aurora User Guide.
    public struct ScalingConfigurationInfo: Swift.Equatable {
        /// A value that indicates whether automatic pause is allowed for the Aurora DB cluster in serverless DB engine mode. When the value is set to false for an Aurora Serverless v1 DB cluster, the DB cluster automatically resumes.
        public var autoPause: Swift.Bool?
        /// The maximum capacity for an Aurora DB cluster in serverless DB engine mode.
        public var maxCapacity: Swift.Int?
        /// The minimum capacity for an Aurora DB cluster in serverless DB engine mode.
        public var minCapacity: Swift.Int?
        /// The number of seconds before scaling times out. What happens when an attempted scaling action times out is determined by the TimeoutAction setting.
        public var secondsBeforeTimeout: Swift.Int?
        /// The remaining amount of time, in seconds, before the Aurora DB cluster in serverless mode is paused. A DB cluster can be paused only when it's idle (it has no connections).
        public var secondsUntilAutoPause: Swift.Int?
        /// The action that occurs when Aurora times out while attempting to change the capacity of an Aurora Serverless v1 cluster. The value is either ForceApplyCapacityChange or RollbackCapacityChange. ForceApplyCapacityChange, the default, sets the capacity to the specified value as soon as possible. RollbackCapacityChange ignores the capacity change if a scaling point isn't found in the timeout period.
        public var timeoutAction: Swift.String?

        public init (
            autoPause: Swift.Bool? = nil,
            maxCapacity: Swift.Int? = nil,
            minCapacity: Swift.Int? = nil,
            secondsBeforeTimeout: Swift.Int? = nil,
            secondsUntilAutoPause: Swift.Int? = nil,
            timeoutAction: Swift.String? = nil
        )
        {
            self.autoPause = autoPause
            self.maxCapacity = maxCapacity
            self.minCapacity = minCapacity
            self.secondsBeforeTimeout = secondsBeforeTimeout
            self.secondsUntilAutoPause = secondsUntilAutoPause
            self.timeoutAction = timeoutAction
        }
    }

}
