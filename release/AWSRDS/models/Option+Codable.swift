// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension RdsClientTypes.Option: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dBSecurityGroupMemberships = "DBSecurityGroupMemberships"
        case optionDescription = "OptionDescription"
        case optionName = "OptionName"
        case optionSettings = "OptionSettings"
        case optionVersion = "OptionVersion"
        case permanent = "Permanent"
        case persistent = "Persistent"
        case port = "Port"
        case vpcSecurityGroupMemberships = "VpcSecurityGroupMemberships"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let dBSecurityGroupMemberships = dBSecurityGroupMemberships {
            var dBSecurityGroupMembershipsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("DBSecurityGroupMemberships"))
            for (index0, dbsecuritygroupmembership0) in dBSecurityGroupMemberships.enumerated() {
                try dBSecurityGroupMembershipsContainer.encode(dbsecuritygroupmembership0, forKey: ClientRuntime.Key("DBSecurityGroup.\(index0.advanced(by: 1))"))
            }
        }
        if let optionDescription = optionDescription {
            try container.encode(optionDescription, forKey: ClientRuntime.Key("OptionDescription"))
        }
        if let optionName = optionName {
            try container.encode(optionName, forKey: ClientRuntime.Key("OptionName"))
        }
        if let optionSettings = optionSettings {
            var optionSettingsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("OptionSettings"))
            for (index0, optionsetting0) in optionSettings.enumerated() {
                try optionSettingsContainer.encode(optionsetting0, forKey: ClientRuntime.Key("OptionSetting.\(index0.advanced(by: 1))"))
            }
        }
        if let optionVersion = optionVersion {
            try container.encode(optionVersion, forKey: ClientRuntime.Key("OptionVersion"))
        }
        if permanent != false {
            try container.encode(permanent, forKey: ClientRuntime.Key("Permanent"))
        }
        if persistent != false {
            try container.encode(persistent, forKey: ClientRuntime.Key("Persistent"))
        }
        if let port = port {
            try container.encode(port, forKey: ClientRuntime.Key("Port"))
        }
        if let vpcSecurityGroupMemberships = vpcSecurityGroupMemberships {
            var vpcSecurityGroupMembershipsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("VpcSecurityGroupMemberships"))
            for (index0, vpcsecuritygroupmembership0) in vpcSecurityGroupMemberships.enumerated() {
                try vpcSecurityGroupMembershipsContainer.encode(vpcsecuritygroupmembership0, forKey: ClientRuntime.Key("VpcSecurityGroupMembership.\(index0.advanced(by: 1))"))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let optionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .optionName)
        optionName = optionNameDecoded
        let optionDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .optionDescription)
        optionDescription = optionDescriptionDecoded
        let persistentDecoded = try containerValues.decode(Swift.Bool.self, forKey: .persistent)
        persistent = persistentDecoded
        let permanentDecoded = try containerValues.decode(Swift.Bool.self, forKey: .permanent)
        permanent = permanentDecoded
        let portDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .port)
        port = portDecoded
        let optionVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .optionVersion)
        optionVersion = optionVersionDecoded
        if containerValues.contains(.optionSettings) {
            struct KeyVal0{struct OptionSetting{}}
            let optionSettingsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.OptionSetting>.CodingKeys.self, forKey: .optionSettings)
            if let optionSettingsWrappedContainer = optionSettingsWrappedContainer {
                let optionSettingsContainer = try optionSettingsWrappedContainer.decodeIfPresent([RdsClientTypes.OptionSetting].self, forKey: .member)
                var optionSettingsBuffer:[RdsClientTypes.OptionSetting]? = nil
                if let optionSettingsContainer = optionSettingsContainer {
                    optionSettingsBuffer = [RdsClientTypes.OptionSetting]()
                    for structureContainer0 in optionSettingsContainer {
                        optionSettingsBuffer?.append(structureContainer0)
                    }
                }
                optionSettings = optionSettingsBuffer
            } else {
                optionSettings = []
            }
        } else {
            optionSettings = nil
        }
        if containerValues.contains(.dBSecurityGroupMemberships) {
            struct KeyVal0{struct DBSecurityGroup{}}
            let dBSecurityGroupMembershipsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.DBSecurityGroup>.CodingKeys.self, forKey: .dBSecurityGroupMemberships)
            if let dBSecurityGroupMembershipsWrappedContainer = dBSecurityGroupMembershipsWrappedContainer {
                let dBSecurityGroupMembershipsContainer = try dBSecurityGroupMembershipsWrappedContainer.decodeIfPresent([RdsClientTypes.DBSecurityGroupMembership].self, forKey: .member)
                var dBSecurityGroupMembershipsBuffer:[RdsClientTypes.DBSecurityGroupMembership]? = nil
                if let dBSecurityGroupMembershipsContainer = dBSecurityGroupMembershipsContainer {
                    dBSecurityGroupMembershipsBuffer = [RdsClientTypes.DBSecurityGroupMembership]()
                    for structureContainer0 in dBSecurityGroupMembershipsContainer {
                        dBSecurityGroupMembershipsBuffer?.append(structureContainer0)
                    }
                }
                dBSecurityGroupMemberships = dBSecurityGroupMembershipsBuffer
            } else {
                dBSecurityGroupMemberships = []
            }
        } else {
            dBSecurityGroupMemberships = nil
        }
        if containerValues.contains(.vpcSecurityGroupMemberships) {
            struct KeyVal0{struct VpcSecurityGroupMembership{}}
            let vpcSecurityGroupMembershipsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.VpcSecurityGroupMembership>.CodingKeys.self, forKey: .vpcSecurityGroupMemberships)
            if let vpcSecurityGroupMembershipsWrappedContainer = vpcSecurityGroupMembershipsWrappedContainer {
                let vpcSecurityGroupMembershipsContainer = try vpcSecurityGroupMembershipsWrappedContainer.decodeIfPresent([RdsClientTypes.VpcSecurityGroupMembership].self, forKey: .member)
                var vpcSecurityGroupMembershipsBuffer:[RdsClientTypes.VpcSecurityGroupMembership]? = nil
                if let vpcSecurityGroupMembershipsContainer = vpcSecurityGroupMembershipsContainer {
                    vpcSecurityGroupMembershipsBuffer = [RdsClientTypes.VpcSecurityGroupMembership]()
                    for structureContainer0 in vpcSecurityGroupMembershipsContainer {
                        vpcSecurityGroupMembershipsBuffer?.append(structureContainer0)
                    }
                }
                vpcSecurityGroupMemberships = vpcSecurityGroupMembershipsBuffer
            } else {
                vpcSecurityGroupMemberships = []
            }
        } else {
            vpcSecurityGroupMemberships = nil
        }
    }
}
