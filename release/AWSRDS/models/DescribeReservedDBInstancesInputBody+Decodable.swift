// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeReservedDBInstancesInputBody: Swift.Equatable {
    let reservedDBInstanceId: Swift.String?
    let reservedDBInstancesOfferingId: Swift.String?
    let dBInstanceClass: Swift.String?
    let duration: Swift.String?
    let productDescription: Swift.String?
    let offeringType: Swift.String?
    let multiAZ: Swift.Bool?
    let leaseId: Swift.String?
    let filters: [RdsClientTypes.Filter]?
    let maxRecords: Swift.Int?
    let marker: Swift.String?
}

extension DescribeReservedDBInstancesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dBInstanceClass = "DBInstanceClass"
        case duration = "Duration"
        case filters = "Filters"
        case leaseId = "LeaseId"
        case marker = "Marker"
        case maxRecords = "MaxRecords"
        case multiAZ = "MultiAZ"
        case offeringType = "OfferingType"
        case productDescription = "ProductDescription"
        case reservedDBInstanceId = "ReservedDBInstanceId"
        case reservedDBInstancesOfferingId = "ReservedDBInstancesOfferingId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let reservedDBInstanceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .reservedDBInstanceId)
        reservedDBInstanceId = reservedDBInstanceIdDecoded
        let reservedDBInstancesOfferingIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .reservedDBInstancesOfferingId)
        reservedDBInstancesOfferingId = reservedDBInstancesOfferingIdDecoded
        let dBInstanceClassDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dBInstanceClass)
        dBInstanceClass = dBInstanceClassDecoded
        let durationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .duration)
        duration = durationDecoded
        let productDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .productDescription)
        productDescription = productDescriptionDecoded
        let offeringTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .offeringType)
        offeringType = offeringTypeDecoded
        let multiAZDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .multiAZ)
        multiAZ = multiAZDecoded
        let leaseIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .leaseId)
        leaseId = leaseIdDecoded
        if containerValues.contains(.filters) {
            struct KeyVal0{struct Filter{}}
            let filtersWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.Filter>.CodingKeys.self, forKey: .filters)
            if let filtersWrappedContainer = filtersWrappedContainer {
                let filtersContainer = try filtersWrappedContainer.decodeIfPresent([RdsClientTypes.Filter].self, forKey: .member)
                var filtersBuffer:[RdsClientTypes.Filter]? = nil
                if let filtersContainer = filtersContainer {
                    filtersBuffer = [RdsClientTypes.Filter]()
                    for structureContainer0 in filtersContainer {
                        filtersBuffer?.append(structureContainer0)
                    }
                }
                filters = filtersBuffer
            } else {
                filters = []
            }
        } else {
            filters = nil
        }
        let maxRecordsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxRecords)
        maxRecords = maxRecordsDecoded
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
    }
}
