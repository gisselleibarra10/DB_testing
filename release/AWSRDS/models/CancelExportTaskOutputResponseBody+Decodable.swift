// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CancelExportTaskOutputResponseBody: Swift.Equatable {
    let exportTaskIdentifier: Swift.String?
    let sourceArn: Swift.String?
    let exportOnly: [Swift.String]?
    let snapshotTime: ClientRuntime.Date?
    let taskStartTime: ClientRuntime.Date?
    let taskEndTime: ClientRuntime.Date?
    let s3Bucket: Swift.String?
    let s3Prefix: Swift.String?
    let iamRoleArn: Swift.String?
    let kmsKeyId: Swift.String?
    let status: Swift.String?
    let percentProgress: Swift.Int
    let totalExtractedDataInGB: Swift.Int
    let failureCause: Swift.String?
    let warningMessage: Swift.String?
}

extension CancelExportTaskOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case exportOnly = "ExportOnly"
        case exportTaskIdentifier = "ExportTaskIdentifier"
        case failureCause = "FailureCause"
        case iamRoleArn = "IamRoleArn"
        case kmsKeyId = "KmsKeyId"
        case percentProgress = "PercentProgress"
        case s3Bucket = "S3Bucket"
        case s3Prefix = "S3Prefix"
        case snapshotTime = "SnapshotTime"
        case sourceArn = "SourceArn"
        case status = "Status"
        case taskEndTime = "TaskEndTime"
        case taskStartTime = "TaskStartTime"
        case totalExtractedDataInGB = "TotalExtractedDataInGB"
        case warningMessage = "WarningMessage"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("CancelExportTaskResult"))
        let exportTaskIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .exportTaskIdentifier)
        exportTaskIdentifier = exportTaskIdentifierDecoded
        let sourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceArn)
        sourceArn = sourceArnDecoded
        if containerValues.contains(.exportOnly) {
            struct KeyVal0{struct member{}}
            let exportOnlyWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .exportOnly)
            if let exportOnlyWrappedContainer = exportOnlyWrappedContainer {
                let exportOnlyContainer = try exportOnlyWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var exportOnlyBuffer:[Swift.String]? = nil
                if let exportOnlyContainer = exportOnlyContainer {
                    exportOnlyBuffer = [Swift.String]()
                    for stringContainer0 in exportOnlyContainer {
                        exportOnlyBuffer?.append(stringContainer0)
                    }
                }
                exportOnly = exportOnlyBuffer
            } else {
                exportOnly = []
            }
        } else {
            exportOnly = nil
        }
        let snapshotTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .snapshotTime)
        var snapshotTimeBuffer:ClientRuntime.Date? = nil
        if let snapshotTimeDecoded = snapshotTimeDecoded {
            snapshotTimeBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(snapshotTimeDecoded, format: .dateTime)
        }
        snapshotTime = snapshotTimeBuffer
        let taskStartTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .taskStartTime)
        var taskStartTimeBuffer:ClientRuntime.Date? = nil
        if let taskStartTimeDecoded = taskStartTimeDecoded {
            taskStartTimeBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(taskStartTimeDecoded, format: .dateTime)
        }
        taskStartTime = taskStartTimeBuffer
        let taskEndTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .taskEndTime)
        var taskEndTimeBuffer:ClientRuntime.Date? = nil
        if let taskEndTimeDecoded = taskEndTimeDecoded {
            taskEndTimeBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(taskEndTimeDecoded, format: .dateTime)
        }
        taskEndTime = taskEndTimeBuffer
        let s3BucketDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .s3Bucket)
        s3Bucket = s3BucketDecoded
        let s3PrefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .s3Prefix)
        s3Prefix = s3PrefixDecoded
        let iamRoleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .iamRoleArn)
        iamRoleArn = iamRoleArnDecoded
        let kmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kmsKeyId)
        kmsKeyId = kmsKeyIdDecoded
        let statusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .status)
        status = statusDecoded
        let percentProgressDecoded = try containerValues.decode(Swift.Int.self, forKey: .percentProgress)
        percentProgress = percentProgressDecoded
        let totalExtractedDataInGBDecoded = try containerValues.decode(Swift.Int.self, forKey: .totalExtractedDataInGB)
        totalExtractedDataInGB = totalExtractedDataInGBDecoded
        let failureCauseDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .failureCause)
        failureCause = failureCauseDecoded
        let warningMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .warningMessage)
        warningMessage = warningMessageDecoded
    }
}
