// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct BacktrackDBClusterInputBody: Swift.Equatable {
    let dBClusterIdentifier: Swift.String?
    let backtrackTo: ClientRuntime.Date?
    let force: Swift.Bool?
    let useEarliestTimeOnPointInTimeUnavailable: Swift.Bool?
}

extension BacktrackDBClusterInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case backtrackTo = "BacktrackTo"
        case dBClusterIdentifier = "DBClusterIdentifier"
        case force = "Force"
        case useEarliestTimeOnPointInTimeUnavailable = "UseEarliestTimeOnPointInTimeUnavailable"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dBClusterIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dBClusterIdentifier)
        dBClusterIdentifier = dBClusterIdentifierDecoded
        let backtrackToDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .backtrackTo)
        var backtrackToBuffer:ClientRuntime.Date? = nil
        if let backtrackToDecoded = backtrackToDecoded {
            backtrackToBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(backtrackToDecoded, format: .dateTime)
        }
        backtrackTo = backtrackToBuffer
        let forceDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .force)
        force = forceDecoded
        let useEarliestTimeOnPointInTimeUnavailableDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .useEarliestTimeOnPointInTimeUnavailable)
        useEarliestTimeOnPointInTimeUnavailable = useEarliestTimeOnPointInTimeUnavailableDecoded
    }
}
