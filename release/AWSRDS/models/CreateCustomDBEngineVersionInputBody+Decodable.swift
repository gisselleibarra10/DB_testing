// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateCustomDBEngineVersionInputBody: Swift.Equatable {
    let engine: Swift.String?
    let engineVersion: Swift.String?
    let databaseInstallationFilesS3BucketName: Swift.String?
    let databaseInstallationFilesS3Prefix: Swift.String?
    let kMSKeyId: Swift.String?
    let description: Swift.String?
    let manifest: Swift.String?
    let tags: [RdsClientTypes.Tag]?
}

extension CreateCustomDBEngineVersionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case databaseInstallationFilesS3BucketName = "DatabaseInstallationFilesS3BucketName"
        case databaseInstallationFilesS3Prefix = "DatabaseInstallationFilesS3Prefix"
        case description = "Description"
        case engine = "Engine"
        case engineVersion = "EngineVersion"
        case kMSKeyId = "KMSKeyId"
        case manifest = "Manifest"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let engineDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .engine)
        engine = engineDecoded
        let engineVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .engineVersion)
        engineVersion = engineVersionDecoded
        let databaseInstallationFilesS3BucketNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .databaseInstallationFilesS3BucketName)
        databaseInstallationFilesS3BucketName = databaseInstallationFilesS3BucketNameDecoded
        let databaseInstallationFilesS3PrefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .databaseInstallationFilesS3Prefix)
        databaseInstallationFilesS3Prefix = databaseInstallationFilesS3PrefixDecoded
        let kMSKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kMSKeyId)
        kMSKeyId = kMSKeyIdDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let manifestDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .manifest)
        manifest = manifestDecoded
        if containerValues.contains(.tags) {
            struct KeyVal0{struct Tag{}}
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.Tag>.CodingKeys.self, forKey: .tags)
            if let tagsWrappedContainer = tagsWrappedContainer {
                let tagsContainer = try tagsWrappedContainer.decodeIfPresent([RdsClientTypes.Tag].self, forKey: .member)
                var tagsBuffer:[RdsClientTypes.Tag]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [RdsClientTypes.Tag]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
    }
}
