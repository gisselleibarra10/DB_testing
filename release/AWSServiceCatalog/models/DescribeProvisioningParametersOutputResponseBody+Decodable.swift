// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeProvisioningParametersOutputResponseBody: Swift.Equatable {
    let provisioningArtifactParameters: [ServiceCatalogClientTypes.ProvisioningArtifactParameter]?
    let constraintSummaries: [ServiceCatalogClientTypes.ConstraintSummary]?
    let usageInstructions: [ServiceCatalogClientTypes.UsageInstruction]?
    let tagOptions: [ServiceCatalogClientTypes.TagOptionSummary]?
    let provisioningArtifactPreferences: ServiceCatalogClientTypes.ProvisioningArtifactPreferences?
    let provisioningArtifactOutputs: [ServiceCatalogClientTypes.ProvisioningArtifactOutput]?
    let provisioningArtifactOutputKeys: [ServiceCatalogClientTypes.ProvisioningArtifactOutput]?
}

extension DescribeProvisioningParametersOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case constraintSummaries = "ConstraintSummaries"
        case provisioningArtifactOutputKeys = "ProvisioningArtifactOutputKeys"
        case provisioningArtifactOutputs = "ProvisioningArtifactOutputs"
        case provisioningArtifactParameters = "ProvisioningArtifactParameters"
        case provisioningArtifactPreferences = "ProvisioningArtifactPreferences"
        case tagOptions = "TagOptions"
        case usageInstructions = "UsageInstructions"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let provisioningArtifactParametersContainer = try containerValues.decodeIfPresent([ServiceCatalogClientTypes.ProvisioningArtifactParameter?].self, forKey: .provisioningArtifactParameters)
        var provisioningArtifactParametersDecoded0:[ServiceCatalogClientTypes.ProvisioningArtifactParameter]? = nil
        if let provisioningArtifactParametersContainer = provisioningArtifactParametersContainer {
            provisioningArtifactParametersDecoded0 = [ServiceCatalogClientTypes.ProvisioningArtifactParameter]()
            for structure0 in provisioningArtifactParametersContainer {
                if let structure0 = structure0 {
                    provisioningArtifactParametersDecoded0?.append(structure0)
                }
            }
        }
        provisioningArtifactParameters = provisioningArtifactParametersDecoded0
        let constraintSummariesContainer = try containerValues.decodeIfPresent([ServiceCatalogClientTypes.ConstraintSummary?].self, forKey: .constraintSummaries)
        var constraintSummariesDecoded0:[ServiceCatalogClientTypes.ConstraintSummary]? = nil
        if let constraintSummariesContainer = constraintSummariesContainer {
            constraintSummariesDecoded0 = [ServiceCatalogClientTypes.ConstraintSummary]()
            for structure0 in constraintSummariesContainer {
                if let structure0 = structure0 {
                    constraintSummariesDecoded0?.append(structure0)
                }
            }
        }
        constraintSummaries = constraintSummariesDecoded0
        let usageInstructionsContainer = try containerValues.decodeIfPresent([ServiceCatalogClientTypes.UsageInstruction?].self, forKey: .usageInstructions)
        var usageInstructionsDecoded0:[ServiceCatalogClientTypes.UsageInstruction]? = nil
        if let usageInstructionsContainer = usageInstructionsContainer {
            usageInstructionsDecoded0 = [ServiceCatalogClientTypes.UsageInstruction]()
            for structure0 in usageInstructionsContainer {
                if let structure0 = structure0 {
                    usageInstructionsDecoded0?.append(structure0)
                }
            }
        }
        usageInstructions = usageInstructionsDecoded0
        let tagOptionsContainer = try containerValues.decodeIfPresent([ServiceCatalogClientTypes.TagOptionSummary?].self, forKey: .tagOptions)
        var tagOptionsDecoded0:[ServiceCatalogClientTypes.TagOptionSummary]? = nil
        if let tagOptionsContainer = tagOptionsContainer {
            tagOptionsDecoded0 = [ServiceCatalogClientTypes.TagOptionSummary]()
            for structure0 in tagOptionsContainer {
                if let structure0 = structure0 {
                    tagOptionsDecoded0?.append(structure0)
                }
            }
        }
        tagOptions = tagOptionsDecoded0
        let provisioningArtifactPreferencesDecoded = try containerValues.decodeIfPresent(ServiceCatalogClientTypes.ProvisioningArtifactPreferences.self, forKey: .provisioningArtifactPreferences)
        provisioningArtifactPreferences = provisioningArtifactPreferencesDecoded
        let provisioningArtifactOutputsContainer = try containerValues.decodeIfPresent([ServiceCatalogClientTypes.ProvisioningArtifactOutput?].self, forKey: .provisioningArtifactOutputs)
        var provisioningArtifactOutputsDecoded0:[ServiceCatalogClientTypes.ProvisioningArtifactOutput]? = nil
        if let provisioningArtifactOutputsContainer = provisioningArtifactOutputsContainer {
            provisioningArtifactOutputsDecoded0 = [ServiceCatalogClientTypes.ProvisioningArtifactOutput]()
            for structure0 in provisioningArtifactOutputsContainer {
                if let structure0 = structure0 {
                    provisioningArtifactOutputsDecoded0?.append(structure0)
                }
            }
        }
        provisioningArtifactOutputs = provisioningArtifactOutputsDecoded0
        let provisioningArtifactOutputKeysContainer = try containerValues.decodeIfPresent([ServiceCatalogClientTypes.ProvisioningArtifactOutput?].self, forKey: .provisioningArtifactOutputKeys)
        var provisioningArtifactOutputKeysDecoded0:[ServiceCatalogClientTypes.ProvisioningArtifactOutput]? = nil
        if let provisioningArtifactOutputKeysContainer = provisioningArtifactOutputKeysContainer {
            provisioningArtifactOutputKeysDecoded0 = [ServiceCatalogClientTypes.ProvisioningArtifactOutput]()
            for structure0 in provisioningArtifactOutputKeysContainer {
                if let structure0 = structure0 {
                    provisioningArtifactOutputKeysDecoded0?.append(structure0)
                }
            }
        }
        provisioningArtifactOutputKeys = provisioningArtifactOutputKeysDecoded0
    }
}
