// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct SearchProductsOutputResponseBody: Swift.Equatable {
    let productViewSummaries: [ServiceCatalogClientTypes.ProductViewSummary]?
    let productViewAggregations: [Swift.String:[ServiceCatalogClientTypes.ProductViewAggregationValue]]?
    let nextPageToken: Swift.String?
}

extension SearchProductsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextPageToken = "NextPageToken"
        case productViewAggregations = "ProductViewAggregations"
        case productViewSummaries = "ProductViewSummaries"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let productViewSummariesContainer = try containerValues.decodeIfPresent([ServiceCatalogClientTypes.ProductViewSummary?].self, forKey: .productViewSummaries)
        var productViewSummariesDecoded0:[ServiceCatalogClientTypes.ProductViewSummary]? = nil
        if let productViewSummariesContainer = productViewSummariesContainer {
            productViewSummariesDecoded0 = [ServiceCatalogClientTypes.ProductViewSummary]()
            for structure0 in productViewSummariesContainer {
                if let structure0 = structure0 {
                    productViewSummariesDecoded0?.append(structure0)
                }
            }
        }
        productViewSummaries = productViewSummariesDecoded0
        let productViewAggregationsContainer = try containerValues.decodeIfPresent([Swift.String: [ServiceCatalogClientTypes.ProductViewAggregationValue?]?].self, forKey: .productViewAggregations)
        var productViewAggregationsDecoded0: [Swift.String:[ServiceCatalogClientTypes.ProductViewAggregationValue]]? = nil
        if let productViewAggregationsContainer = productViewAggregationsContainer {
            productViewAggregationsDecoded0 = [Swift.String:[ServiceCatalogClientTypes.ProductViewAggregationValue]]()
            for (key0, productviewaggregationvalues0) in productViewAggregationsContainer {
                var productviewaggregationvalues0Decoded0: [ServiceCatalogClientTypes.ProductViewAggregationValue]? = nil
                if let productviewaggregationvalues0 = productviewaggregationvalues0 {
                    productviewaggregationvalues0Decoded0 = [ServiceCatalogClientTypes.ProductViewAggregationValue]()
                    for structure1 in productviewaggregationvalues0 {
                        if let structure1 = structure1 {
                            productviewaggregationvalues0Decoded0?.append(structure1)
                        }
                    }
                }
                productViewAggregationsDecoded0?[key0] = productviewaggregationvalues0Decoded0
            }
        }
        productViewAggregations = productViewAggregationsDecoded0
        let nextPageTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextPageToken)
        nextPageToken = nextPageTokenDecoded
    }
}
