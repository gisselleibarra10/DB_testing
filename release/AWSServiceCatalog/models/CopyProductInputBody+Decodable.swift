// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CopyProductInputBody: Swift.Equatable {
    let acceptLanguage: Swift.String?
    let sourceProductArn: Swift.String?
    let targetProductId: Swift.String?
    let targetProductName: Swift.String?
    let sourceProvisioningArtifactIdentifiers: [[Swift.String:Swift.String]]?
    let copyOptions: [ServiceCatalogClientTypes.CopyOption]?
    let idempotencyToken: Swift.String?
}

extension CopyProductInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case acceptLanguage = "AcceptLanguage"
        case copyOptions = "CopyOptions"
        case idempotencyToken = "IdempotencyToken"
        case sourceProductArn = "SourceProductArn"
        case sourceProvisioningArtifactIdentifiers = "SourceProvisioningArtifactIdentifiers"
        case targetProductId = "TargetProductId"
        case targetProductName = "TargetProductName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let acceptLanguageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .acceptLanguage)
        acceptLanguage = acceptLanguageDecoded
        let sourceProductArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceProductArn)
        sourceProductArn = sourceProductArnDecoded
        let targetProductIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .targetProductId)
        targetProductId = targetProductIdDecoded
        let targetProductNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .targetProductName)
        targetProductName = targetProductNameDecoded
        let sourceProvisioningArtifactIdentifiersContainer = try containerValues.decodeIfPresent([[Swift.String: Swift.String?]?].self, forKey: .sourceProvisioningArtifactIdentifiers)
        var sourceProvisioningArtifactIdentifiersDecoded0:[[Swift.String:Swift.String]]? = nil
        if let sourceProvisioningArtifactIdentifiersContainer = sourceProvisioningArtifactIdentifiersContainer {
            sourceProvisioningArtifactIdentifiersDecoded0 = [[Swift.String:Swift.String]]()
            for map0 in sourceProvisioningArtifactIdentifiersContainer {
                var sourceProvisioningArtifactIdentifiersContainerDecoded0: [Swift.String: Swift.String]? = nil
                if let map0 = map0 {
                    sourceProvisioningArtifactIdentifiersContainerDecoded0 = [Swift.String: Swift.String]()
                    for (key1, provisioningartifactpropertyvalue1) in map0 {
                        if let provisioningartifactpropertyvalue1 = provisioningartifactpropertyvalue1 {
                            sourceProvisioningArtifactIdentifiersContainerDecoded0?[key1] = provisioningartifactpropertyvalue1
                        }
                    }
                }
                if let sourceProvisioningArtifactIdentifiersContainerDecoded0 = sourceProvisioningArtifactIdentifiersContainerDecoded0 {
                    sourceProvisioningArtifactIdentifiersDecoded0?.append(sourceProvisioningArtifactIdentifiersContainerDecoded0)
                }
            }
        }
        sourceProvisioningArtifactIdentifiers = sourceProvisioningArtifactIdentifiersDecoded0
        let copyOptionsContainer = try containerValues.decodeIfPresent([ServiceCatalogClientTypes.CopyOption?].self, forKey: .copyOptions)
        var copyOptionsDecoded0:[ServiceCatalogClientTypes.CopyOption]? = nil
        if let copyOptionsContainer = copyOptionsContainer {
            copyOptionsDecoded0 = [ServiceCatalogClientTypes.CopyOption]()
            for string0 in copyOptionsContainer {
                if let string0 = string0 {
                    copyOptionsDecoded0?.append(string0)
                }
            }
        }
        copyOptions = copyOptionsDecoded0
        let idempotencyTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .idempotencyToken)
        idempotencyToken = idempotencyTokenDecoded
    }
}
