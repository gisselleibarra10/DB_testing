// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ServiceCatalogClientTypes.ProvisionedProductAttribute: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "Arn"
        case createdTime = "CreatedTime"
        case id = "Id"
        case idempotencyToken = "IdempotencyToken"
        case lastProvisioningRecordId = "LastProvisioningRecordId"
        case lastRecordId = "LastRecordId"
        case lastSuccessfulProvisioningRecordId = "LastSuccessfulProvisioningRecordId"
        case name = "Name"
        case physicalId = "PhysicalId"
        case productId = "ProductId"
        case productName = "ProductName"
        case provisioningArtifactId = "ProvisioningArtifactId"
        case provisioningArtifactName = "ProvisioningArtifactName"
        case status = "Status"
        case statusMessage = "StatusMessage"
        case tags = "Tags"
        case type = "Type"
        case userArn = "UserArn"
        case userArnSession = "UserArnSession"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = self.arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let createdTime = self.createdTime {
            try encodeContainer.encode(createdTime.timeIntervalSince1970, forKey: .createdTime)
        }
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let idempotencyToken = self.idempotencyToken {
            try encodeContainer.encode(idempotencyToken, forKey: .idempotencyToken)
        }
        if let lastProvisioningRecordId = self.lastProvisioningRecordId {
            try encodeContainer.encode(lastProvisioningRecordId, forKey: .lastProvisioningRecordId)
        }
        if let lastRecordId = self.lastRecordId {
            try encodeContainer.encode(lastRecordId, forKey: .lastRecordId)
        }
        if let lastSuccessfulProvisioningRecordId = self.lastSuccessfulProvisioningRecordId {
            try encodeContainer.encode(lastSuccessfulProvisioningRecordId, forKey: .lastSuccessfulProvisioningRecordId)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let physicalId = self.physicalId {
            try encodeContainer.encode(physicalId, forKey: .physicalId)
        }
        if let productId = self.productId {
            try encodeContainer.encode(productId, forKey: .productId)
        }
        if let productName = self.productName {
            try encodeContainer.encode(productName, forKey: .productName)
        }
        if let provisioningArtifactId = self.provisioningArtifactId {
            try encodeContainer.encode(provisioningArtifactId, forKey: .provisioningArtifactId)
        }
        if let provisioningArtifactName = self.provisioningArtifactName {
            try encodeContainer.encode(provisioningArtifactName, forKey: .provisioningArtifactName)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let statusMessage = self.statusMessage {
            try encodeContainer.encode(statusMessage, forKey: .statusMessage)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tags0 in tags {
                try tagsContainer.encode(tags0)
            }
        }
        if let type = self.type {
            try encodeContainer.encode(type, forKey: .type)
        }
        if let userArn = self.userArn {
            try encodeContainer.encode(userArn, forKey: .userArn)
        }
        if let userArnSession = self.userArnSession {
            try encodeContainer.encode(userArnSession, forKey: .userArnSession)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let typeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .type)
        type = typeDecoded
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let statusDecoded = try containerValues.decodeIfPresent(ServiceCatalogClientTypes.ProvisionedProductStatus.self, forKey: .status)
        status = statusDecoded
        let statusMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .statusMessage)
        statusMessage = statusMessageDecoded
        let createdTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdTime)
        createdTime = createdTimeDecoded
        let idempotencyTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .idempotencyToken)
        idempotencyToken = idempotencyTokenDecoded
        let lastRecordIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastRecordId)
        lastRecordId = lastRecordIdDecoded
        let lastProvisioningRecordIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastProvisioningRecordId)
        lastProvisioningRecordId = lastProvisioningRecordIdDecoded
        let lastSuccessfulProvisioningRecordIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastSuccessfulProvisioningRecordId)
        lastSuccessfulProvisioningRecordId = lastSuccessfulProvisioningRecordIdDecoded
        let tagsContainer = try containerValues.decodeIfPresent([ServiceCatalogClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[ServiceCatalogClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [ServiceCatalogClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let physicalIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .physicalId)
        physicalId = physicalIdDecoded
        let productIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .productId)
        productId = productIdDecoded
        let productNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .productName)
        productName = productNameDecoded
        let provisioningArtifactIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .provisioningArtifactId)
        provisioningArtifactId = provisioningArtifactIdDecoded
        let provisioningArtifactNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .provisioningArtifactName)
        provisioningArtifactName = provisioningArtifactNameDecoded
        let userArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userArn)
        userArn = userArnDecoded
        let userArnSessionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userArnSession)
        userArnSession = userArnSessionDecoded
    }
}
