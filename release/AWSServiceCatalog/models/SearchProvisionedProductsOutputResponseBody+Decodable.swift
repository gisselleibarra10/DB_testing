// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct SearchProvisionedProductsOutputResponseBody: Swift.Equatable {
    let provisionedProducts: [ServiceCatalogClientTypes.ProvisionedProductAttribute]?
    let totalResultsCount: Swift.Int
    let nextPageToken: Swift.String?
}

extension SearchProvisionedProductsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextPageToken = "NextPageToken"
        case provisionedProducts = "ProvisionedProducts"
        case totalResultsCount = "TotalResultsCount"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let provisionedProductsContainer = try containerValues.decodeIfPresent([ServiceCatalogClientTypes.ProvisionedProductAttribute?].self, forKey: .provisionedProducts)
        var provisionedProductsDecoded0:[ServiceCatalogClientTypes.ProvisionedProductAttribute]? = nil
        if let provisionedProductsContainer = provisionedProductsContainer {
            provisionedProductsDecoded0 = [ServiceCatalogClientTypes.ProvisionedProductAttribute]()
            for structure0 in provisionedProductsContainer {
                if let structure0 = structure0 {
                    provisionedProductsDecoded0?.append(structure0)
                }
            }
        }
        provisionedProducts = provisionedProductsDecoded0
        let totalResultsCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .totalResultsCount) ?? 0
        totalResultsCount = totalResultsCountDecoded
        let nextPageTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextPageToken)
        nextPageToken = nextPageTokenDecoded
    }
}
