// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension FraudDetectorClientTypes.ModelOutputConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case csvIndexToVariableMap
        case format
        case jsonKeyToVariableMap
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let csvIndexToVariableMap = csvIndexToVariableMap {
            var csvIndexToVariableMapContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .csvIndexToVariableMap)
            for (dictKey0, csvindextovariablemap0) in csvIndexToVariableMap {
                try csvIndexToVariableMapContainer.encode(csvindextovariablemap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let format = self.format {
            try encodeContainer.encode(format.rawValue, forKey: .format)
        }
        if let jsonKeyToVariableMap = jsonKeyToVariableMap {
            var jsonKeyToVariableMapContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .jsonKeyToVariableMap)
            for (dictKey0, jsonkeytovariablemap0) in jsonKeyToVariableMap {
                try jsonKeyToVariableMapContainer.encode(jsonkeytovariablemap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let formatDecoded = try containerValues.decodeIfPresent(FraudDetectorClientTypes.ModelOutputDataFormat.self, forKey: .format)
        format = formatDecoded
        let jsonKeyToVariableMapContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .jsonKeyToVariableMap)
        var jsonKeyToVariableMapDecoded0: [Swift.String:Swift.String]? = nil
        if let jsonKeyToVariableMapContainer = jsonKeyToVariableMapContainer {
            jsonKeyToVariableMapDecoded0 = [Swift.String:Swift.String]()
            for (key0, string0) in jsonKeyToVariableMapContainer {
                if let string0 = string0 {
                    jsonKeyToVariableMapDecoded0?[key0] = string0
                }
            }
        }
        jsonKeyToVariableMap = jsonKeyToVariableMapDecoded0
        let csvIndexToVariableMapContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .csvIndexToVariableMap)
        var csvIndexToVariableMapDecoded0: [Swift.String:Swift.String]? = nil
        if let csvIndexToVariableMapContainer = csvIndexToVariableMapContainer {
            csvIndexToVariableMapDecoded0 = [Swift.String:Swift.String]()
            for (key0, string0) in csvIndexToVariableMapContainer {
                if let string0 = string0 {
                    csvIndexToVariableMapDecoded0?[key0] = string0
                }
            }
        }
        csvIndexToVariableMap = csvIndexToVariableMapDecoded0
    }
}
