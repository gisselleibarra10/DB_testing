// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension FraudDetectorClientTypes.EvaluatedRule: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case evaluated
        case expression
        case expressionWithValues
        case matched
        case outcomes
        case ruleId
        case ruleVersion
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let evaluated = self.evaluated {
            try encodeContainer.encode(evaluated, forKey: .evaluated)
        }
        if let expression = self.expression {
            try encodeContainer.encode(expression, forKey: .expression)
        }
        if let expressionWithValues = self.expressionWithValues {
            try encodeContainer.encode(expressionWithValues, forKey: .expressionWithValues)
        }
        if let matched = self.matched {
            try encodeContainer.encode(matched, forKey: .matched)
        }
        if let outcomes = outcomes {
            var outcomesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .outcomes)
            for listofstrings0 in outcomes {
                try outcomesContainer.encode(listofstrings0)
            }
        }
        if let ruleId = self.ruleId {
            try encodeContainer.encode(ruleId, forKey: .ruleId)
        }
        if let ruleVersion = self.ruleVersion {
            try encodeContainer.encode(ruleVersion, forKey: .ruleVersion)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ruleIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ruleId)
        ruleId = ruleIdDecoded
        let ruleVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ruleVersion)
        ruleVersion = ruleVersionDecoded
        let expressionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .expression)
        expression = expressionDecoded
        let expressionWithValuesDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .expressionWithValues)
        expressionWithValues = expressionWithValuesDecoded
        let outcomesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .outcomes)
        var outcomesDecoded0:[Swift.String]? = nil
        if let outcomesContainer = outcomesContainer {
            outcomesDecoded0 = [Swift.String]()
            for string0 in outcomesContainer {
                if let string0 = string0 {
                    outcomesDecoded0?.append(string0)
                }
            }
        }
        outcomes = outcomesDecoded0
        let evaluatedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .evaluated)
        evaluated = evaluatedDecoded
        let matchedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .matched)
        matched = matchedDecoded
    }
}
