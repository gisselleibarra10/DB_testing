// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateVariableInputBody: Swift.Equatable {
    let name: Swift.String?
    let dataType: FraudDetectorClientTypes.DataType?
    let dataSource: FraudDetectorClientTypes.DataSource?
    let defaultValue: Swift.String?
    let description: Swift.String?
    let variableType: Swift.String?
    let tags: [FraudDetectorClientTypes.Tag]?
}

extension CreateVariableInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dataSource
        case dataType
        case defaultValue
        case description
        case name
        case tags
        case variableType
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let dataTypeDecoded = try containerValues.decodeIfPresent(FraudDetectorClientTypes.DataType.self, forKey: .dataType)
        dataType = dataTypeDecoded
        let dataSourceDecoded = try containerValues.decodeIfPresent(FraudDetectorClientTypes.DataSource.self, forKey: .dataSource)
        dataSource = dataSourceDecoded
        let defaultValueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .defaultValue)
        defaultValue = defaultValueDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let variableTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .variableType)
        variableType = variableTypeDecoded
        let tagsContainer = try containerValues.decodeIfPresent([FraudDetectorClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[FraudDetectorClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [FraudDetectorClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}
