// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension FraudDetectorClientTypes.EvaluatedModelVersion: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case evaluations
        case modelId
        case modelType
        case modelVersion
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let evaluations = evaluations {
            var evaluationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .evaluations)
            for listofmodelversionevaluations0 in evaluations {
                try evaluationsContainer.encode(listofmodelversionevaluations0)
            }
        }
        if let modelId = self.modelId {
            try encodeContainer.encode(modelId, forKey: .modelId)
        }
        if let modelType = self.modelType {
            try encodeContainer.encode(modelType, forKey: .modelType)
        }
        if let modelVersion = self.modelVersion {
            try encodeContainer.encode(modelVersion, forKey: .modelVersion)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let modelIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelId)
        modelId = modelIdDecoded
        let modelVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelVersion)
        modelVersion = modelVersionDecoded
        let modelTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelType)
        modelType = modelTypeDecoded
        let evaluationsContainer = try containerValues.decodeIfPresent([FraudDetectorClientTypes.ModelVersionEvaluation?].self, forKey: .evaluations)
        var evaluationsDecoded0:[FraudDetectorClientTypes.ModelVersionEvaluation]? = nil
        if let evaluationsContainer = evaluationsContainer {
            evaluationsDecoded0 = [FraudDetectorClientTypes.ModelVersionEvaluation]()
            for structure0 in evaluationsContainer {
                if let structure0 = structure0 {
                    evaluationsDecoded0?.append(structure0)
                }
            }
        }
        evaluations = evaluationsDecoded0
    }
}
