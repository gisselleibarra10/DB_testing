// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension GetEventPredictionInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case detectorId
        case detectorVersionId
        case entities
        case eventId
        case eventTimestamp
        case eventTypeName
        case eventVariables
        case externalModelEndpointDataBlobs
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let detectorId = self.detectorId {
            try encodeContainer.encode(detectorId, forKey: .detectorId)
        }
        if let detectorVersionId = self.detectorVersionId {
            try encodeContainer.encode(detectorVersionId, forKey: .detectorVersionId)
        }
        if let entities = entities {
            var entitiesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .entities)
            for listofentities0 in entities {
                try entitiesContainer.encode(listofentities0)
            }
        }
        if let eventId = self.eventId {
            try encodeContainer.encode(eventId, forKey: .eventId)
        }
        if let eventTimestamp = self.eventTimestamp {
            try encodeContainer.encode(eventTimestamp, forKey: .eventTimestamp)
        }
        if let eventTypeName = self.eventTypeName {
            try encodeContainer.encode(eventTypeName, forKey: .eventTypeName)
        }
        if let eventVariables = eventVariables {
            var eventVariablesContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .eventVariables)
            for (dictKey0, eventvariablemap0) in eventVariables {
                try eventVariablesContainer.encode(eventvariablemap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let externalModelEndpointDataBlobs = externalModelEndpointDataBlobs {
            var externalModelEndpointDataBlobsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .externalModelEndpointDataBlobs)
            for (dictKey0, externalmodelendpointdatablobmap0) in externalModelEndpointDataBlobs {
                try externalModelEndpointDataBlobsContainer.encode(externalmodelendpointdatablobmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }
}
