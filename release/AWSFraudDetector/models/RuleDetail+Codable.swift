// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension FraudDetectorClientTypes.RuleDetail: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn
        case createdTime
        case description
        case detectorId
        case expression
        case language
        case lastUpdatedTime
        case outcomes
        case ruleId
        case ruleVersion
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = self.arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let createdTime = self.createdTime {
            try encodeContainer.encode(createdTime, forKey: .createdTime)
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let detectorId = self.detectorId {
            try encodeContainer.encode(detectorId, forKey: .detectorId)
        }
        if let expression = self.expression {
            try encodeContainer.encode(expression, forKey: .expression)
        }
        if let language = self.language {
            try encodeContainer.encode(language.rawValue, forKey: .language)
        }
        if let lastUpdatedTime = self.lastUpdatedTime {
            try encodeContainer.encode(lastUpdatedTime, forKey: .lastUpdatedTime)
        }
        if let outcomes = outcomes {
            var outcomesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .outcomes)
            for nonemptylistofstrings0 in outcomes {
                try outcomesContainer.encode(nonemptylistofstrings0)
            }
        }
        if let ruleId = self.ruleId {
            try encodeContainer.encode(ruleId, forKey: .ruleId)
        }
        if let ruleVersion = self.ruleVersion {
            try encodeContainer.encode(ruleVersion, forKey: .ruleVersion)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ruleIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ruleId)
        ruleId = ruleIdDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let detectorIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .detectorId)
        detectorId = detectorIdDecoded
        let ruleVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ruleVersion)
        ruleVersion = ruleVersionDecoded
        let expressionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .expression)
        expression = expressionDecoded
        let languageDecoded = try containerValues.decodeIfPresent(FraudDetectorClientTypes.Language.self, forKey: .language)
        language = languageDecoded
        let outcomesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .outcomes)
        var outcomesDecoded0:[Swift.String]? = nil
        if let outcomesContainer = outcomesContainer {
            outcomesDecoded0 = [Swift.String]()
            for string0 in outcomesContainer {
                if let string0 = string0 {
                    outcomesDecoded0?.append(string0)
                }
            }
        }
        outcomes = outcomesDecoded0
        let lastUpdatedTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastUpdatedTime)
        lastUpdatedTime = lastUpdatedTimeDecoded
        let createdTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .createdTime)
        createdTime = createdTimeDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
    }
}
