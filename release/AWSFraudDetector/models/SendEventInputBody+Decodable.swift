// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct SendEventInputBody: Swift.Equatable {
    let eventId: Swift.String?
    let eventTypeName: Swift.String?
    let eventTimestamp: Swift.String?
    let eventVariables: [Swift.String:Swift.String]?
    let assignedLabel: Swift.String?
    let labelTimestamp: Swift.String?
    let entities: [FraudDetectorClientTypes.Entity]?
}

extension SendEventInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case assignedLabel
        case entities
        case eventId
        case eventTimestamp
        case eventTypeName
        case eventVariables
        case labelTimestamp
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let eventIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .eventId)
        eventId = eventIdDecoded
        let eventTypeNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .eventTypeName)
        eventTypeName = eventTypeNameDecoded
        let eventTimestampDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .eventTimestamp)
        eventTimestamp = eventTimestampDecoded
        let eventVariablesContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .eventVariables)
        var eventVariablesDecoded0: [Swift.String:Swift.String]? = nil
        if let eventVariablesContainer = eventVariablesContainer {
            eventVariablesDecoded0 = [Swift.String:Swift.String]()
            for (key0, variablevalue0) in eventVariablesContainer {
                if let variablevalue0 = variablevalue0 {
                    eventVariablesDecoded0?[key0] = variablevalue0
                }
            }
        }
        eventVariables = eventVariablesDecoded0
        let assignedLabelDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .assignedLabel)
        assignedLabel = assignedLabelDecoded
        let labelTimestampDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .labelTimestamp)
        labelTimestamp = labelTimestampDecoded
        let entitiesContainer = try containerValues.decodeIfPresent([FraudDetectorClientTypes.Entity?].self, forKey: .entities)
        var entitiesDecoded0:[FraudDetectorClientTypes.Entity]? = nil
        if let entitiesContainer = entitiesContainer {
            entitiesDecoded0 = [FraudDetectorClientTypes.Entity]()
            for structure0 in entitiesContainer {
                if let structure0 = structure0 {
                    entitiesDecoded0?.append(structure0)
                }
            }
        }
        entities = entitiesDecoded0
    }
}
