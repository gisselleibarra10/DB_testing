// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct PutEventTypeInputBody: Swift.Equatable {
    let name: Swift.String?
    let description: Swift.String?
    let eventVariables: [Swift.String]?
    let labels: [Swift.String]?
    let entityTypes: [Swift.String]?
    let eventIngestion: FraudDetectorClientTypes.EventIngestion?
    let tags: [FraudDetectorClientTypes.Tag]?
}

extension PutEventTypeInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description
        case entityTypes
        case eventIngestion
        case eventVariables
        case labels
        case name
        case tags
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let eventVariablesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .eventVariables)
        var eventVariablesDecoded0:[Swift.String]? = nil
        if let eventVariablesContainer = eventVariablesContainer {
            eventVariablesDecoded0 = [Swift.String]()
            for string0 in eventVariablesContainer {
                if let string0 = string0 {
                    eventVariablesDecoded0?.append(string0)
                }
            }
        }
        eventVariables = eventVariablesDecoded0
        let labelsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .labels)
        var labelsDecoded0:[Swift.String]? = nil
        if let labelsContainer = labelsContainer {
            labelsDecoded0 = [Swift.String]()
            for string0 in labelsContainer {
                if let string0 = string0 {
                    labelsDecoded0?.append(string0)
                }
            }
        }
        labels = labelsDecoded0
        let entityTypesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .entityTypes)
        var entityTypesDecoded0:[Swift.String]? = nil
        if let entityTypesContainer = entityTypesContainer {
            entityTypesDecoded0 = [Swift.String]()
            for string0 in entityTypesContainer {
                if let string0 = string0 {
                    entityTypesDecoded0?.append(string0)
                }
            }
        }
        entityTypes = entityTypesDecoded0
        let eventIngestionDecoded = try containerValues.decodeIfPresent(FraudDetectorClientTypes.EventIngestion.self, forKey: .eventIngestion)
        eventIngestion = eventIngestionDecoded
        let tagsContainer = try containerValues.decodeIfPresent([FraudDetectorClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[FraudDetectorClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [FraudDetectorClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}
