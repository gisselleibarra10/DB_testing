// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetEventPredictionMetadataOutputResponseBody: Swift.Equatable {
    let eventId: Swift.String?
    let eventTypeName: Swift.String?
    let entityId: Swift.String?
    let entityType: Swift.String?
    let eventTimestamp: Swift.String?
    let detectorId: Swift.String?
    let detectorVersionId: Swift.String?
    let detectorVersionStatus: Swift.String?
    let eventVariables: [FraudDetectorClientTypes.EventVariableSummary]?
    let rules: [FraudDetectorClientTypes.EvaluatedRule]?
    let ruleExecutionMode: FraudDetectorClientTypes.RuleExecutionMode?
    let outcomes: [Swift.String]?
    let evaluatedModelVersions: [FraudDetectorClientTypes.EvaluatedModelVersion]?
    let evaluatedExternalModels: [FraudDetectorClientTypes.EvaluatedExternalModel]?
    let predictionTimestamp: Swift.String?
}

extension GetEventPredictionMetadataOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case detectorId
        case detectorVersionId
        case detectorVersionStatus
        case entityId
        case entityType
        case evaluatedExternalModels
        case evaluatedModelVersions
        case eventId
        case eventTimestamp
        case eventTypeName
        case eventVariables
        case outcomes
        case predictionTimestamp
        case ruleExecutionMode
        case rules
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let eventIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .eventId)
        eventId = eventIdDecoded
        let eventTypeNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .eventTypeName)
        eventTypeName = eventTypeNameDecoded
        let entityIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .entityId)
        entityId = entityIdDecoded
        let entityTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .entityType)
        entityType = entityTypeDecoded
        let eventTimestampDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .eventTimestamp)
        eventTimestamp = eventTimestampDecoded
        let detectorIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .detectorId)
        detectorId = detectorIdDecoded
        let detectorVersionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .detectorVersionId)
        detectorVersionId = detectorVersionIdDecoded
        let detectorVersionStatusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .detectorVersionStatus)
        detectorVersionStatus = detectorVersionStatusDecoded
        let eventVariablesContainer = try containerValues.decodeIfPresent([FraudDetectorClientTypes.EventVariableSummary?].self, forKey: .eventVariables)
        var eventVariablesDecoded0:[FraudDetectorClientTypes.EventVariableSummary]? = nil
        if let eventVariablesContainer = eventVariablesContainer {
            eventVariablesDecoded0 = [FraudDetectorClientTypes.EventVariableSummary]()
            for structure0 in eventVariablesContainer {
                if let structure0 = structure0 {
                    eventVariablesDecoded0?.append(structure0)
                }
            }
        }
        eventVariables = eventVariablesDecoded0
        let rulesContainer = try containerValues.decodeIfPresent([FraudDetectorClientTypes.EvaluatedRule?].self, forKey: .rules)
        var rulesDecoded0:[FraudDetectorClientTypes.EvaluatedRule]? = nil
        if let rulesContainer = rulesContainer {
            rulesDecoded0 = [FraudDetectorClientTypes.EvaluatedRule]()
            for structure0 in rulesContainer {
                if let structure0 = structure0 {
                    rulesDecoded0?.append(structure0)
                }
            }
        }
        rules = rulesDecoded0
        let ruleExecutionModeDecoded = try containerValues.decodeIfPresent(FraudDetectorClientTypes.RuleExecutionMode.self, forKey: .ruleExecutionMode)
        ruleExecutionMode = ruleExecutionModeDecoded
        let outcomesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .outcomes)
        var outcomesDecoded0:[Swift.String]? = nil
        if let outcomesContainer = outcomesContainer {
            outcomesDecoded0 = [Swift.String]()
            for string0 in outcomesContainer {
                if let string0 = string0 {
                    outcomesDecoded0?.append(string0)
                }
            }
        }
        outcomes = outcomesDecoded0
        let evaluatedModelVersionsContainer = try containerValues.decodeIfPresent([FraudDetectorClientTypes.EvaluatedModelVersion?].self, forKey: .evaluatedModelVersions)
        var evaluatedModelVersionsDecoded0:[FraudDetectorClientTypes.EvaluatedModelVersion]? = nil
        if let evaluatedModelVersionsContainer = evaluatedModelVersionsContainer {
            evaluatedModelVersionsDecoded0 = [FraudDetectorClientTypes.EvaluatedModelVersion]()
            for structure0 in evaluatedModelVersionsContainer {
                if let structure0 = structure0 {
                    evaluatedModelVersionsDecoded0?.append(structure0)
                }
            }
        }
        evaluatedModelVersions = evaluatedModelVersionsDecoded0
        let evaluatedExternalModelsContainer = try containerValues.decodeIfPresent([FraudDetectorClientTypes.EvaluatedExternalModel?].self, forKey: .evaluatedExternalModels)
        var evaluatedExternalModelsDecoded0:[FraudDetectorClientTypes.EvaluatedExternalModel]? = nil
        if let evaluatedExternalModelsContainer = evaluatedExternalModelsContainer {
            evaluatedExternalModelsDecoded0 = [FraudDetectorClientTypes.EvaluatedExternalModel]()
            for structure0 in evaluatedExternalModelsContainer {
                if let structure0 = structure0 {
                    evaluatedExternalModelsDecoded0?.append(structure0)
                }
            }
        }
        evaluatedExternalModels = evaluatedExternalModelsDecoded0
        let predictionTimestampDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .predictionTimestamp)
        predictionTimestamp = predictionTimestampDecoded
    }
}
