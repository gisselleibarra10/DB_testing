// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct CreateDetectorVersionInput: Swift.Equatable {
    /// The description of the detector version.
    public var description: Swift.String?
    /// The ID of the detector under which you want to create a new version.
    /// This member is required.
    public var detectorId: Swift.String?
    /// The Amazon Sagemaker model endpoints to include in the detector version.
    public var externalModelEndpoints: [Swift.String]?
    /// The model versions to include in the detector version.
    public var modelVersions: [FraudDetectorClientTypes.ModelVersion]?
    /// The rule execution mode for the rules included in the detector version. You can define and edit the rule mode at the detector version level, when it is in draft status. If you specify FIRST_MATCHED, Amazon Fraud Detector evaluates rules sequentially, first to last, stopping at the first matched rule. Amazon Fraud dectector then provides the outcomes for that single rule. If you specifiy ALL_MATCHED, Amazon Fraud Detector evaluates all rules and returns the outcomes for all matched rules. The default behavior is FIRST_MATCHED.
    public var ruleExecutionMode: FraudDetectorClientTypes.RuleExecutionMode?
    /// The rules to include in the detector version.
    /// This member is required.
    public var rules: [FraudDetectorClientTypes.Rule]?
    /// A collection of key and value pairs.
    public var tags: [FraudDetectorClientTypes.Tag]?

    public init (
        description: Swift.String? = nil,
        detectorId: Swift.String? = nil,
        externalModelEndpoints: [Swift.String]? = nil,
        modelVersions: [FraudDetectorClientTypes.ModelVersion]? = nil,
        ruleExecutionMode: FraudDetectorClientTypes.RuleExecutionMode? = nil,
        rules: [FraudDetectorClientTypes.Rule]? = nil,
        tags: [FraudDetectorClientTypes.Tag]? = nil
    )
    {
        self.description = description
        self.detectorId = detectorId
        self.externalModelEndpoints = externalModelEndpoints
        self.modelVersions = modelVersions
        self.ruleExecutionMode = ruleExecutionMode
        self.rules = rules
        self.tags = tags
    }
}
