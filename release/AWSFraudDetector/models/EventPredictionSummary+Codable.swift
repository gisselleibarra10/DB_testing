// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension FraudDetectorClientTypes.EventPredictionSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case detectorId
        case detectorVersionId
        case eventId
        case eventTimestamp
        case eventTypeName
        case predictionTimestamp
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let detectorId = self.detectorId {
            try encodeContainer.encode(detectorId, forKey: .detectorId)
        }
        if let detectorVersionId = self.detectorVersionId {
            try encodeContainer.encode(detectorVersionId, forKey: .detectorVersionId)
        }
        if let eventId = self.eventId {
            try encodeContainer.encode(eventId, forKey: .eventId)
        }
        if let eventTimestamp = self.eventTimestamp {
            try encodeContainer.encode(eventTimestamp, forKey: .eventTimestamp)
        }
        if let eventTypeName = self.eventTypeName {
            try encodeContainer.encode(eventTypeName, forKey: .eventTypeName)
        }
        if let predictionTimestamp = self.predictionTimestamp {
            try encodeContainer.encode(predictionTimestamp, forKey: .predictionTimestamp)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let eventIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .eventId)
        eventId = eventIdDecoded
        let eventTypeNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .eventTypeName)
        eventTypeName = eventTypeNameDecoded
        let eventTimestampDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .eventTimestamp)
        eventTimestamp = eventTimestampDecoded
        let predictionTimestampDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .predictionTimestamp)
        predictionTimestamp = predictionTimestampDecoded
        let detectorIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .detectorId)
        detectorId = detectorIdDecoded
        let detectorVersionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .detectorVersionId)
        detectorVersionId = detectorVersionIdDecoded
    }
}
