// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension FraudDetectorClientTypes.LabelSchema: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case labelMapper
        case unlabeledEventsTreatment
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let labelMapper = labelMapper {
            var labelMapperContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .labelMapper)
            for (dictKey0, labelmapper0) in labelMapper {
                try labelMapperContainer.encode(labelmapper0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let unlabeledEventsTreatment = self.unlabeledEventsTreatment {
            try encodeContainer.encode(unlabeledEventsTreatment.rawValue, forKey: .unlabeledEventsTreatment)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let labelMapperContainer = try containerValues.decodeIfPresent([Swift.String: [Swift.String?]?].self, forKey: .labelMapper)
        var labelMapperDecoded0: [Swift.String:[Swift.String]]? = nil
        if let labelMapperContainer = labelMapperContainer {
            labelMapperDecoded0 = [Swift.String:[Swift.String]]()
            for (key0, listofstrings0) in labelMapperContainer {
                var listofstrings0Decoded0: [Swift.String]? = nil
                if let listofstrings0 = listofstrings0 {
                    listofstrings0Decoded0 = [Swift.String]()
                    for string1 in listofstrings0 {
                        if let string1 = string1 {
                            listofstrings0Decoded0?.append(string1)
                        }
                    }
                }
                labelMapperDecoded0?[key0] = listofstrings0Decoded0
            }
        }
        labelMapper = labelMapperDecoded0
        let unlabeledEventsTreatmentDecoded = try containerValues.decodeIfPresent(FraudDetectorClientTypes.UnlabeledEventsTreatment.self, forKey: .unlabeledEventsTreatment)
        unlabeledEventsTreatment = unlabeledEventsTreatmentDecoded
    }
}
