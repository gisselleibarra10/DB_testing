// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetEventPredictionInputBody: Swift.Equatable {
    let detectorId: Swift.String?
    let detectorVersionId: Swift.String?
    let eventId: Swift.String?
    let eventTypeName: Swift.String?
    let entities: [FraudDetectorClientTypes.Entity]?
    let eventTimestamp: Swift.String?
    let eventVariables: [Swift.String:Swift.String]?
    let externalModelEndpointDataBlobs: [Swift.String:FraudDetectorClientTypes.ModelEndpointDataBlob]?
}

extension GetEventPredictionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case detectorId
        case detectorVersionId
        case entities
        case eventId
        case eventTimestamp
        case eventTypeName
        case eventVariables
        case externalModelEndpointDataBlobs
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let detectorIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .detectorId)
        detectorId = detectorIdDecoded
        let detectorVersionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .detectorVersionId)
        detectorVersionId = detectorVersionIdDecoded
        let eventIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .eventId)
        eventId = eventIdDecoded
        let eventTypeNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .eventTypeName)
        eventTypeName = eventTypeNameDecoded
        let entitiesContainer = try containerValues.decodeIfPresent([FraudDetectorClientTypes.Entity?].self, forKey: .entities)
        var entitiesDecoded0:[FraudDetectorClientTypes.Entity]? = nil
        if let entitiesContainer = entitiesContainer {
            entitiesDecoded0 = [FraudDetectorClientTypes.Entity]()
            for structure0 in entitiesContainer {
                if let structure0 = structure0 {
                    entitiesDecoded0?.append(structure0)
                }
            }
        }
        entities = entitiesDecoded0
        let eventTimestampDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .eventTimestamp)
        eventTimestamp = eventTimestampDecoded
        let eventVariablesContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .eventVariables)
        var eventVariablesDecoded0: [Swift.String:Swift.String]? = nil
        if let eventVariablesContainer = eventVariablesContainer {
            eventVariablesDecoded0 = [Swift.String:Swift.String]()
            for (key0, variablevalue0) in eventVariablesContainer {
                if let variablevalue0 = variablevalue0 {
                    eventVariablesDecoded0?[key0] = variablevalue0
                }
            }
        }
        eventVariables = eventVariablesDecoded0
        let externalModelEndpointDataBlobsContainer = try containerValues.decodeIfPresent([Swift.String: FraudDetectorClientTypes.ModelEndpointDataBlob?].self, forKey: .externalModelEndpointDataBlobs)
        var externalModelEndpointDataBlobsDecoded0: [Swift.String:FraudDetectorClientTypes.ModelEndpointDataBlob]? = nil
        if let externalModelEndpointDataBlobsContainer = externalModelEndpointDataBlobsContainer {
            externalModelEndpointDataBlobsDecoded0 = [Swift.String:FraudDetectorClientTypes.ModelEndpointDataBlob]()
            for (key0, modelendpointdatablob0) in externalModelEndpointDataBlobsContainer {
                if let modelendpointdatablob0 = modelendpointdatablob0 {
                    externalModelEndpointDataBlobsDecoded0?[key0] = modelendpointdatablob0
                }
            }
        }
        externalModelEndpointDataBlobs = externalModelEndpointDataBlobsDecoded0
    }
}
