// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateModelVersionInputBody: Swift.Equatable {
    let modelId: Swift.String?
    let modelType: FraudDetectorClientTypes.ModelTypeEnum?
    let trainingDataSource: FraudDetectorClientTypes.TrainingDataSourceEnum?
    let trainingDataSchema: FraudDetectorClientTypes.TrainingDataSchema?
    let externalEventsDetail: FraudDetectorClientTypes.ExternalEventsDetail?
    let ingestedEventsDetail: FraudDetectorClientTypes.IngestedEventsDetail?
    let tags: [FraudDetectorClientTypes.Tag]?
}

extension CreateModelVersionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case externalEventsDetail
        case ingestedEventsDetail
        case modelId
        case modelType
        case tags
        case trainingDataSchema
        case trainingDataSource
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let modelIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelId)
        modelId = modelIdDecoded
        let modelTypeDecoded = try containerValues.decodeIfPresent(FraudDetectorClientTypes.ModelTypeEnum.self, forKey: .modelType)
        modelType = modelTypeDecoded
        let trainingDataSourceDecoded = try containerValues.decodeIfPresent(FraudDetectorClientTypes.TrainingDataSourceEnum.self, forKey: .trainingDataSource)
        trainingDataSource = trainingDataSourceDecoded
        let trainingDataSchemaDecoded = try containerValues.decodeIfPresent(FraudDetectorClientTypes.TrainingDataSchema.self, forKey: .trainingDataSchema)
        trainingDataSchema = trainingDataSchemaDecoded
        let externalEventsDetailDecoded = try containerValues.decodeIfPresent(FraudDetectorClientTypes.ExternalEventsDetail.self, forKey: .externalEventsDetail)
        externalEventsDetail = externalEventsDetailDecoded
        let ingestedEventsDetailDecoded = try containerValues.decodeIfPresent(FraudDetectorClientTypes.IngestedEventsDetail.self, forKey: .ingestedEventsDetail)
        ingestedEventsDetail = ingestedEventsDetailDecoded
        let tagsContainer = try containerValues.decodeIfPresent([FraudDetectorClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[FraudDetectorClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [FraudDetectorClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}
