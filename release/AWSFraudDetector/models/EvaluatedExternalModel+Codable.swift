// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension FraudDetectorClientTypes.EvaluatedExternalModel: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case inputVariables
        case modelEndpoint
        case outputVariables
        case useEventVariables
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let inputVariables = inputVariables {
            var inputVariablesContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .inputVariables)
            for (dictKey0, mapofstrings0) in inputVariables {
                try inputVariablesContainer.encode(mapofstrings0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let modelEndpoint = self.modelEndpoint {
            try encodeContainer.encode(modelEndpoint, forKey: .modelEndpoint)
        }
        if let outputVariables = outputVariables {
            var outputVariablesContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .outputVariables)
            for (dictKey0, mapofstrings0) in outputVariables {
                try outputVariablesContainer.encode(mapofstrings0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let useEventVariables = self.useEventVariables {
            try encodeContainer.encode(useEventVariables, forKey: .useEventVariables)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let modelEndpointDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelEndpoint)
        modelEndpoint = modelEndpointDecoded
        let useEventVariablesDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .useEventVariables)
        useEventVariables = useEventVariablesDecoded
        let inputVariablesContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .inputVariables)
        var inputVariablesDecoded0: [Swift.String:Swift.String]? = nil
        if let inputVariablesContainer = inputVariablesContainer {
            inputVariablesDecoded0 = [Swift.String:Swift.String]()
            for (key0, string0) in inputVariablesContainer {
                if let string0 = string0 {
                    inputVariablesDecoded0?[key0] = string0
                }
            }
        }
        inputVariables = inputVariablesDecoded0
        let outputVariablesContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .outputVariables)
        var outputVariablesDecoded0: [Swift.String:Swift.String]? = nil
        if let outputVariablesContainer = outputVariablesContainer {
            outputVariablesDecoded0 = [Swift.String:Swift.String]()
            for (key0, string0) in outputVariablesContainer {
                if let string0 = string0 {
                    outputVariablesDecoded0?[key0] = string0
                }
            }
        }
        outputVariables = outputVariablesDecoded0
    }
}
