// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct UpdateDetectorVersionInputBody: Swift.Equatable {
    let detectorId: Swift.String?
    let detectorVersionId: Swift.String?
    let externalModelEndpoints: [Swift.String]?
    let rules: [FraudDetectorClientTypes.Rule]?
    let description: Swift.String?
    let modelVersions: [FraudDetectorClientTypes.ModelVersion]?
    let ruleExecutionMode: FraudDetectorClientTypes.RuleExecutionMode?
}

extension UpdateDetectorVersionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description
        case detectorId
        case detectorVersionId
        case externalModelEndpoints
        case modelVersions
        case ruleExecutionMode
        case rules
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let detectorIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .detectorId)
        detectorId = detectorIdDecoded
        let detectorVersionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .detectorVersionId)
        detectorVersionId = detectorVersionIdDecoded
        let externalModelEndpointsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .externalModelEndpoints)
        var externalModelEndpointsDecoded0:[Swift.String]? = nil
        if let externalModelEndpointsContainer = externalModelEndpointsContainer {
            externalModelEndpointsDecoded0 = [Swift.String]()
            for string0 in externalModelEndpointsContainer {
                if let string0 = string0 {
                    externalModelEndpointsDecoded0?.append(string0)
                }
            }
        }
        externalModelEndpoints = externalModelEndpointsDecoded0
        let rulesContainer = try containerValues.decodeIfPresent([FraudDetectorClientTypes.Rule?].self, forKey: .rules)
        var rulesDecoded0:[FraudDetectorClientTypes.Rule]? = nil
        if let rulesContainer = rulesContainer {
            rulesDecoded0 = [FraudDetectorClientTypes.Rule]()
            for structure0 in rulesContainer {
                if let structure0 = structure0 {
                    rulesDecoded0?.append(structure0)
                }
            }
        }
        rules = rulesDecoded0
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let modelVersionsContainer = try containerValues.decodeIfPresent([FraudDetectorClientTypes.ModelVersion?].self, forKey: .modelVersions)
        var modelVersionsDecoded0:[FraudDetectorClientTypes.ModelVersion]? = nil
        if let modelVersionsContainer = modelVersionsContainer {
            modelVersionsDecoded0 = [FraudDetectorClientTypes.ModelVersion]()
            for structure0 in modelVersionsContainer {
                if let structure0 = structure0 {
                    modelVersionsDecoded0?.append(structure0)
                }
            }
        }
        modelVersions = modelVersionsDecoded0
        let ruleExecutionModeDecoded = try containerValues.decodeIfPresent(FraudDetectorClientTypes.RuleExecutionMode.self, forKey: .ruleExecutionMode)
        ruleExecutionMode = ruleExecutionModeDecoded
    }
}
