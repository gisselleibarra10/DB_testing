// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension OpsWorksClientTypes.ElasticLoadBalancer: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case availabilityZones = "AvailabilityZones"
        case dnsName = "DnsName"
        case ec2InstanceIds = "Ec2InstanceIds"
        case elasticLoadBalancerName = "ElasticLoadBalancerName"
        case layerId = "LayerId"
        case region = "Region"
        case stackId = "StackId"
        case subnetIds = "SubnetIds"
        case vpcId = "VpcId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let availabilityZones = availabilityZones {
            var availabilityZonesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .availabilityZones)
            for strings0 in availabilityZones {
                try availabilityZonesContainer.encode(strings0)
            }
        }
        if let dnsName = self.dnsName {
            try encodeContainer.encode(dnsName, forKey: .dnsName)
        }
        if let ec2InstanceIds = ec2InstanceIds {
            var ec2InstanceIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .ec2InstanceIds)
            for strings0 in ec2InstanceIds {
                try ec2InstanceIdsContainer.encode(strings0)
            }
        }
        if let elasticLoadBalancerName = self.elasticLoadBalancerName {
            try encodeContainer.encode(elasticLoadBalancerName, forKey: .elasticLoadBalancerName)
        }
        if let layerId = self.layerId {
            try encodeContainer.encode(layerId, forKey: .layerId)
        }
        if let region = self.region {
            try encodeContainer.encode(region, forKey: .region)
        }
        if let stackId = self.stackId {
            try encodeContainer.encode(stackId, forKey: .stackId)
        }
        if let subnetIds = subnetIds {
            var subnetIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .subnetIds)
            for strings0 in subnetIds {
                try subnetIdsContainer.encode(strings0)
            }
        }
        if let vpcId = self.vpcId {
            try encodeContainer.encode(vpcId, forKey: .vpcId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let elasticLoadBalancerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .elasticLoadBalancerName)
        elasticLoadBalancerName = elasticLoadBalancerNameDecoded
        let regionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .region)
        region = regionDecoded
        let dnsNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dnsName)
        dnsName = dnsNameDecoded
        let stackIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stackId)
        stackId = stackIdDecoded
        let layerIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .layerId)
        layerId = layerIdDecoded
        let vpcIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vpcId)
        vpcId = vpcIdDecoded
        let availabilityZonesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .availabilityZones)
        var availabilityZonesDecoded0:[Swift.String]? = nil
        if let availabilityZonesContainer = availabilityZonesContainer {
            availabilityZonesDecoded0 = [Swift.String]()
            for string0 in availabilityZonesContainer {
                if let string0 = string0 {
                    availabilityZonesDecoded0?.append(string0)
                }
            }
        }
        availabilityZones = availabilityZonesDecoded0
        let subnetIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .subnetIds)
        var subnetIdsDecoded0:[Swift.String]? = nil
        if let subnetIdsContainer = subnetIdsContainer {
            subnetIdsDecoded0 = [Swift.String]()
            for string0 in subnetIdsContainer {
                if let string0 = string0 {
                    subnetIdsDecoded0?.append(string0)
                }
            }
        }
        subnetIds = subnetIdsDecoded0
        let ec2InstanceIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .ec2InstanceIds)
        var ec2InstanceIdsDecoded0:[Swift.String]? = nil
        if let ec2InstanceIdsContainer = ec2InstanceIdsContainer {
            ec2InstanceIdsDecoded0 = [Swift.String]()
            for string0 in ec2InstanceIdsContainer {
                if let string0 = string0 {
                    ec2InstanceIdsDecoded0?.append(string0)
                }
            }
        }
        ec2InstanceIds = ec2InstanceIdsDecoded0
    }
}
