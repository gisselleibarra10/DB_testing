// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeCommandsInputBody: Swift.Equatable {
    let deploymentId: Swift.String?
    let instanceId: Swift.String?
    let commandIds: [Swift.String]?
}

extension DescribeCommandsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case commandIds = "CommandIds"
        case deploymentId = "DeploymentId"
        case instanceId = "InstanceId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deploymentIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deploymentId)
        deploymentId = deploymentIdDecoded
        let instanceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceId)
        instanceId = instanceIdDecoded
        let commandIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .commandIds)
        var commandIdsDecoded0:[Swift.String]? = nil
        if let commandIdsContainer = commandIdsContainer {
            commandIdsDecoded0 = [Swift.String]()
            for string0 in commandIdsContainer {
                if let string0 = string0 {
                    commandIdsDecoded0?.append(string0)
                }
            }
        }
        commandIds = commandIdsDecoded0
    }
}
