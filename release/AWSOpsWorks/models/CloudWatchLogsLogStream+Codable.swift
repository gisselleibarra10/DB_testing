// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension OpsWorksClientTypes.CloudWatchLogsLogStream: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case batchCount = "BatchCount"
        case batchSize = "BatchSize"
        case bufferDuration = "BufferDuration"
        case datetimeFormat = "DatetimeFormat"
        case encoding = "Encoding"
        case file = "File"
        case fileFingerprintLines = "FileFingerprintLines"
        case initialPosition = "InitialPosition"
        case logGroupName = "LogGroupName"
        case multiLineStartPattern = "MultiLineStartPattern"
        case timeZone = "TimeZone"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let batchCount = self.batchCount {
            try encodeContainer.encode(batchCount, forKey: .batchCount)
        }
        if let batchSize = self.batchSize {
            try encodeContainer.encode(batchSize, forKey: .batchSize)
        }
        if let bufferDuration = self.bufferDuration {
            try encodeContainer.encode(bufferDuration, forKey: .bufferDuration)
        }
        if let datetimeFormat = self.datetimeFormat {
            try encodeContainer.encode(datetimeFormat, forKey: .datetimeFormat)
        }
        if let encoding = self.encoding {
            try encodeContainer.encode(encoding.rawValue, forKey: .encoding)
        }
        if let file = self.file {
            try encodeContainer.encode(file, forKey: .file)
        }
        if let fileFingerprintLines = self.fileFingerprintLines {
            try encodeContainer.encode(fileFingerprintLines, forKey: .fileFingerprintLines)
        }
        if let initialPosition = self.initialPosition {
            try encodeContainer.encode(initialPosition.rawValue, forKey: .initialPosition)
        }
        if let logGroupName = self.logGroupName {
            try encodeContainer.encode(logGroupName, forKey: .logGroupName)
        }
        if let multiLineStartPattern = self.multiLineStartPattern {
            try encodeContainer.encode(multiLineStartPattern, forKey: .multiLineStartPattern)
        }
        if let timeZone = self.timeZone {
            try encodeContainer.encode(timeZone.rawValue, forKey: .timeZone)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let logGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logGroupName)
        logGroupName = logGroupNameDecoded
        let datetimeFormatDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .datetimeFormat)
        datetimeFormat = datetimeFormatDecoded
        let timeZoneDecoded = try containerValues.decodeIfPresent(OpsWorksClientTypes.CloudWatchLogsTimeZone.self, forKey: .timeZone)
        timeZone = timeZoneDecoded
        let fileDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .file)
        file = fileDecoded
        let fileFingerprintLinesDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fileFingerprintLines)
        fileFingerprintLines = fileFingerprintLinesDecoded
        let multiLineStartPatternDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .multiLineStartPattern)
        multiLineStartPattern = multiLineStartPatternDecoded
        let initialPositionDecoded = try containerValues.decodeIfPresent(OpsWorksClientTypes.CloudWatchLogsInitialPosition.self, forKey: .initialPosition)
        initialPosition = initialPositionDecoded
        let encodingDecoded = try containerValues.decodeIfPresent(OpsWorksClientTypes.CloudWatchLogsEncoding.self, forKey: .encoding)
        encoding = encodingDecoded
        let bufferDurationDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .bufferDuration)
        bufferDuration = bufferDurationDecoded
        let batchCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .batchCount)
        batchCount = batchCountDecoded
        let batchSizeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .batchSize)
        batchSize = batchSizeDecoded
    }
}
