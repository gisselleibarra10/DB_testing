// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CloneStackInputBody: Swift.Equatable {
    let sourceStackId: Swift.String?
    let name: Swift.String?
    let region: Swift.String?
    let vpcId: Swift.String?
    let attributes: [Swift.String:Swift.String]?
    let serviceRoleArn: Swift.String?
    let defaultInstanceProfileArn: Swift.String?
    let defaultOs: Swift.String?
    let hostnameTheme: Swift.String?
    let defaultAvailabilityZone: Swift.String?
    let defaultSubnetId: Swift.String?
    let customJson: Swift.String?
    let configurationManager: OpsWorksClientTypes.StackConfigurationManager?
    let chefConfiguration: OpsWorksClientTypes.ChefConfiguration?
    let useCustomCookbooks: Swift.Bool?
    let useOpsworksSecurityGroups: Swift.Bool?
    let customCookbooksSource: OpsWorksClientTypes.Source?
    let defaultSshKeyName: Swift.String?
    let clonePermissions: Swift.Bool?
    let cloneAppIds: [Swift.String]?
    let defaultRootDeviceType: OpsWorksClientTypes.RootDeviceType?
    let agentVersion: Swift.String?
}

extension CloneStackInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case agentVersion = "AgentVersion"
        case attributes = "Attributes"
        case chefConfiguration = "ChefConfiguration"
        case cloneAppIds = "CloneAppIds"
        case clonePermissions = "ClonePermissions"
        case configurationManager = "ConfigurationManager"
        case customCookbooksSource = "CustomCookbooksSource"
        case customJson = "CustomJson"
        case defaultAvailabilityZone = "DefaultAvailabilityZone"
        case defaultInstanceProfileArn = "DefaultInstanceProfileArn"
        case defaultOs = "DefaultOs"
        case defaultRootDeviceType = "DefaultRootDeviceType"
        case defaultSshKeyName = "DefaultSshKeyName"
        case defaultSubnetId = "DefaultSubnetId"
        case hostnameTheme = "HostnameTheme"
        case name = "Name"
        case region = "Region"
        case serviceRoleArn = "ServiceRoleArn"
        case sourceStackId = "SourceStackId"
        case useCustomCookbooks = "UseCustomCookbooks"
        case useOpsworksSecurityGroups = "UseOpsworksSecurityGroups"
        case vpcId = "VpcId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sourceStackIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceStackId)
        sourceStackId = sourceStackIdDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let regionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .region)
        region = regionDecoded
        let vpcIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vpcId)
        vpcId = vpcIdDecoded
        let attributesContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .attributes)
        var attributesDecoded0: [Swift.String:Swift.String]? = nil
        if let attributesContainer = attributesContainer {
            attributesDecoded0 = [Swift.String:Swift.String]()
            for (key0, string0) in attributesContainer {
                if let string0 = string0 {
                    attributesDecoded0?[key0] = string0
                }
            }
        }
        attributes = attributesDecoded0
        let serviceRoleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serviceRoleArn)
        serviceRoleArn = serviceRoleArnDecoded
        let defaultInstanceProfileArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .defaultInstanceProfileArn)
        defaultInstanceProfileArn = defaultInstanceProfileArnDecoded
        let defaultOsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .defaultOs)
        defaultOs = defaultOsDecoded
        let hostnameThemeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .hostnameTheme)
        hostnameTheme = hostnameThemeDecoded
        let defaultAvailabilityZoneDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .defaultAvailabilityZone)
        defaultAvailabilityZone = defaultAvailabilityZoneDecoded
        let defaultSubnetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .defaultSubnetId)
        defaultSubnetId = defaultSubnetIdDecoded
        let customJsonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .customJson)
        customJson = customJsonDecoded
        let configurationManagerDecoded = try containerValues.decodeIfPresent(OpsWorksClientTypes.StackConfigurationManager.self, forKey: .configurationManager)
        configurationManager = configurationManagerDecoded
        let chefConfigurationDecoded = try containerValues.decodeIfPresent(OpsWorksClientTypes.ChefConfiguration.self, forKey: .chefConfiguration)
        chefConfiguration = chefConfigurationDecoded
        let useCustomCookbooksDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .useCustomCookbooks)
        useCustomCookbooks = useCustomCookbooksDecoded
        let useOpsworksSecurityGroupsDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .useOpsworksSecurityGroups)
        useOpsworksSecurityGroups = useOpsworksSecurityGroupsDecoded
        let customCookbooksSourceDecoded = try containerValues.decodeIfPresent(OpsWorksClientTypes.Source.self, forKey: .customCookbooksSource)
        customCookbooksSource = customCookbooksSourceDecoded
        let defaultSshKeyNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .defaultSshKeyName)
        defaultSshKeyName = defaultSshKeyNameDecoded
        let clonePermissionsDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .clonePermissions)
        clonePermissions = clonePermissionsDecoded
        let cloneAppIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .cloneAppIds)
        var cloneAppIdsDecoded0:[Swift.String]? = nil
        if let cloneAppIdsContainer = cloneAppIdsContainer {
            cloneAppIdsDecoded0 = [Swift.String]()
            for string0 in cloneAppIdsContainer {
                if let string0 = string0 {
                    cloneAppIdsDecoded0?.append(string0)
                }
            }
        }
        cloneAppIds = cloneAppIdsDecoded0
        let defaultRootDeviceTypeDecoded = try containerValues.decodeIfPresent(OpsWorksClientTypes.RootDeviceType.self, forKey: .defaultRootDeviceType)
        defaultRootDeviceType = defaultRootDeviceTypeDecoded
        let agentVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .agentVersion)
        agentVersion = agentVersionDecoded
    }
}
