// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension OpsWorksClientTypes.Layer: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "Arn"
        case attributes = "Attributes"
        case autoAssignElasticIps = "AutoAssignElasticIps"
        case autoAssignPublicIps = "AutoAssignPublicIps"
        case cloudWatchLogsConfiguration = "CloudWatchLogsConfiguration"
        case createdAt = "CreatedAt"
        case customInstanceProfileArn = "CustomInstanceProfileArn"
        case customJson = "CustomJson"
        case customRecipes = "CustomRecipes"
        case customSecurityGroupIds = "CustomSecurityGroupIds"
        case defaultRecipes = "DefaultRecipes"
        case defaultSecurityGroupNames = "DefaultSecurityGroupNames"
        case enableAutoHealing = "EnableAutoHealing"
        case installUpdatesOnBoot = "InstallUpdatesOnBoot"
        case layerId = "LayerId"
        case lifecycleEventConfiguration = "LifecycleEventConfiguration"
        case name = "Name"
        case packages = "Packages"
        case shortname = "Shortname"
        case stackId = "StackId"
        case type = "Type"
        case useEbsOptimizedInstances = "UseEbsOptimizedInstances"
        case volumeConfigurations = "VolumeConfigurations"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = self.arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let attributes = attributes {
            var attributesContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .attributes)
            for (dictKey0, layerattributes0) in attributes {
                try attributesContainer.encode(layerattributes0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let autoAssignElasticIps = self.autoAssignElasticIps {
            try encodeContainer.encode(autoAssignElasticIps, forKey: .autoAssignElasticIps)
        }
        if let autoAssignPublicIps = self.autoAssignPublicIps {
            try encodeContainer.encode(autoAssignPublicIps, forKey: .autoAssignPublicIps)
        }
        if let cloudWatchLogsConfiguration = self.cloudWatchLogsConfiguration {
            try encodeContainer.encode(cloudWatchLogsConfiguration, forKey: .cloudWatchLogsConfiguration)
        }
        if let createdAt = self.createdAt {
            try encodeContainer.encode(createdAt, forKey: .createdAt)
        }
        if let customInstanceProfileArn = self.customInstanceProfileArn {
            try encodeContainer.encode(customInstanceProfileArn, forKey: .customInstanceProfileArn)
        }
        if let customJson = self.customJson {
            try encodeContainer.encode(customJson, forKey: .customJson)
        }
        if let customRecipes = self.customRecipes {
            try encodeContainer.encode(customRecipes, forKey: .customRecipes)
        }
        if let customSecurityGroupIds = customSecurityGroupIds {
            var customSecurityGroupIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .customSecurityGroupIds)
            for strings0 in customSecurityGroupIds {
                try customSecurityGroupIdsContainer.encode(strings0)
            }
        }
        if let defaultRecipes = self.defaultRecipes {
            try encodeContainer.encode(defaultRecipes, forKey: .defaultRecipes)
        }
        if let defaultSecurityGroupNames = defaultSecurityGroupNames {
            var defaultSecurityGroupNamesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .defaultSecurityGroupNames)
            for strings0 in defaultSecurityGroupNames {
                try defaultSecurityGroupNamesContainer.encode(strings0)
            }
        }
        if let enableAutoHealing = self.enableAutoHealing {
            try encodeContainer.encode(enableAutoHealing, forKey: .enableAutoHealing)
        }
        if let installUpdatesOnBoot = self.installUpdatesOnBoot {
            try encodeContainer.encode(installUpdatesOnBoot, forKey: .installUpdatesOnBoot)
        }
        if let layerId = self.layerId {
            try encodeContainer.encode(layerId, forKey: .layerId)
        }
        if let lifecycleEventConfiguration = self.lifecycleEventConfiguration {
            try encodeContainer.encode(lifecycleEventConfiguration, forKey: .lifecycleEventConfiguration)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let packages = packages {
            var packagesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .packages)
            for strings0 in packages {
                try packagesContainer.encode(strings0)
            }
        }
        if let shortname = self.shortname {
            try encodeContainer.encode(shortname, forKey: .shortname)
        }
        if let stackId = self.stackId {
            try encodeContainer.encode(stackId, forKey: .stackId)
        }
        if let type = self.type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
        if let useEbsOptimizedInstances = self.useEbsOptimizedInstances {
            try encodeContainer.encode(useEbsOptimizedInstances, forKey: .useEbsOptimizedInstances)
        }
        if let volumeConfigurations = volumeConfigurations {
            var volumeConfigurationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .volumeConfigurations)
            for volumeconfigurations0 in volumeConfigurations {
                try volumeConfigurationsContainer.encode(volumeconfigurations0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let stackIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stackId)
        stackId = stackIdDecoded
        let layerIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .layerId)
        layerId = layerIdDecoded
        let typeDecoded = try containerValues.decodeIfPresent(OpsWorksClientTypes.LayerType.self, forKey: .type)
        type = typeDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let shortnameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .shortname)
        shortname = shortnameDecoded
        let attributesContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .attributes)
        var attributesDecoded0: [Swift.String:Swift.String]? = nil
        if let attributesContainer = attributesContainer {
            attributesDecoded0 = [Swift.String:Swift.String]()
            for (key0, string0) in attributesContainer {
                if let string0 = string0 {
                    attributesDecoded0?[key0] = string0
                }
            }
        }
        attributes = attributesDecoded0
        let cloudWatchLogsConfigurationDecoded = try containerValues.decodeIfPresent(OpsWorksClientTypes.CloudWatchLogsConfiguration.self, forKey: .cloudWatchLogsConfiguration)
        cloudWatchLogsConfiguration = cloudWatchLogsConfigurationDecoded
        let customInstanceProfileArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .customInstanceProfileArn)
        customInstanceProfileArn = customInstanceProfileArnDecoded
        let customJsonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .customJson)
        customJson = customJsonDecoded
        let customSecurityGroupIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .customSecurityGroupIds)
        var customSecurityGroupIdsDecoded0:[Swift.String]? = nil
        if let customSecurityGroupIdsContainer = customSecurityGroupIdsContainer {
            customSecurityGroupIdsDecoded0 = [Swift.String]()
            for string0 in customSecurityGroupIdsContainer {
                if let string0 = string0 {
                    customSecurityGroupIdsDecoded0?.append(string0)
                }
            }
        }
        customSecurityGroupIds = customSecurityGroupIdsDecoded0
        let defaultSecurityGroupNamesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .defaultSecurityGroupNames)
        var defaultSecurityGroupNamesDecoded0:[Swift.String]? = nil
        if let defaultSecurityGroupNamesContainer = defaultSecurityGroupNamesContainer {
            defaultSecurityGroupNamesDecoded0 = [Swift.String]()
            for string0 in defaultSecurityGroupNamesContainer {
                if let string0 = string0 {
                    defaultSecurityGroupNamesDecoded0?.append(string0)
                }
            }
        }
        defaultSecurityGroupNames = defaultSecurityGroupNamesDecoded0
        let packagesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .packages)
        var packagesDecoded0:[Swift.String]? = nil
        if let packagesContainer = packagesContainer {
            packagesDecoded0 = [Swift.String]()
            for string0 in packagesContainer {
                if let string0 = string0 {
                    packagesDecoded0?.append(string0)
                }
            }
        }
        packages = packagesDecoded0
        let volumeConfigurationsContainer = try containerValues.decodeIfPresent([OpsWorksClientTypes.VolumeConfiguration?].self, forKey: .volumeConfigurations)
        var volumeConfigurationsDecoded0:[OpsWorksClientTypes.VolumeConfiguration]? = nil
        if let volumeConfigurationsContainer = volumeConfigurationsContainer {
            volumeConfigurationsDecoded0 = [OpsWorksClientTypes.VolumeConfiguration]()
            for structure0 in volumeConfigurationsContainer {
                if let structure0 = structure0 {
                    volumeConfigurationsDecoded0?.append(structure0)
                }
            }
        }
        volumeConfigurations = volumeConfigurationsDecoded0
        let enableAutoHealingDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enableAutoHealing)
        enableAutoHealing = enableAutoHealingDecoded
        let autoAssignElasticIpsDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .autoAssignElasticIps)
        autoAssignElasticIps = autoAssignElasticIpsDecoded
        let autoAssignPublicIpsDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .autoAssignPublicIps)
        autoAssignPublicIps = autoAssignPublicIpsDecoded
        let defaultRecipesDecoded = try containerValues.decodeIfPresent(OpsWorksClientTypes.Recipes.self, forKey: .defaultRecipes)
        defaultRecipes = defaultRecipesDecoded
        let customRecipesDecoded = try containerValues.decodeIfPresent(OpsWorksClientTypes.Recipes.self, forKey: .customRecipes)
        customRecipes = customRecipesDecoded
        let createdAtDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .createdAt)
        createdAt = createdAtDecoded
        let installUpdatesOnBootDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .installUpdatesOnBoot)
        installUpdatesOnBoot = installUpdatesOnBootDecoded
        let useEbsOptimizedInstancesDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .useEbsOptimizedInstances)
        useEbsOptimizedInstances = useEbsOptimizedInstancesDecoded
        let lifecycleEventConfigurationDecoded = try containerValues.decodeIfPresent(OpsWorksClientTypes.LifecycleEventConfiguration.self, forKey: .lifecycleEventConfiguration)
        lifecycleEventConfiguration = lifecycleEventConfigurationDecoded
    }
}
