// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension OpsWorksClientTypes.Recipes: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configure = "Configure"
        case deploy = "Deploy"
        case setup = "Setup"
        case shutdown = "Shutdown"
        case undeploy = "Undeploy"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let configure = configure {
            var configureContainer = encodeContainer.nestedUnkeyedContainer(forKey: .configure)
            for strings0 in configure {
                try configureContainer.encode(strings0)
            }
        }
        if let deploy = deploy {
            var deployContainer = encodeContainer.nestedUnkeyedContainer(forKey: .deploy)
            for strings0 in deploy {
                try deployContainer.encode(strings0)
            }
        }
        if let setup = setup {
            var setupContainer = encodeContainer.nestedUnkeyedContainer(forKey: .setup)
            for strings0 in setup {
                try setupContainer.encode(strings0)
            }
        }
        if let shutdown = shutdown {
            var shutdownContainer = encodeContainer.nestedUnkeyedContainer(forKey: .shutdown)
            for strings0 in shutdown {
                try shutdownContainer.encode(strings0)
            }
        }
        if let undeploy = undeploy {
            var undeployContainer = encodeContainer.nestedUnkeyedContainer(forKey: .undeploy)
            for strings0 in undeploy {
                try undeployContainer.encode(strings0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let setupContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .setup)
        var setupDecoded0:[Swift.String]? = nil
        if let setupContainer = setupContainer {
            setupDecoded0 = [Swift.String]()
            for string0 in setupContainer {
                if let string0 = string0 {
                    setupDecoded0?.append(string0)
                }
            }
        }
        setup = setupDecoded0
        let configureContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .configure)
        var configureDecoded0:[Swift.String]? = nil
        if let configureContainer = configureContainer {
            configureDecoded0 = [Swift.String]()
            for string0 in configureContainer {
                if let string0 = string0 {
                    configureDecoded0?.append(string0)
                }
            }
        }
        configure = configureDecoded0
        let deployContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .deploy)
        var deployDecoded0:[Swift.String]? = nil
        if let deployContainer = deployContainer {
            deployDecoded0 = [Swift.String]()
            for string0 in deployContainer {
                if let string0 = string0 {
                    deployDecoded0?.append(string0)
                }
            }
        }
        deploy = deployDecoded0
        let undeployContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .undeploy)
        var undeployDecoded0:[Swift.String]? = nil
        if let undeployContainer = undeployContainer {
            undeployDecoded0 = [Swift.String]()
            for string0 in undeployContainer {
                if let string0 = string0 {
                    undeployDecoded0?.append(string0)
                }
            }
        }
        undeploy = undeployDecoded0
        let shutdownContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .shutdown)
        var shutdownDecoded0:[Swift.String]? = nil
        if let shutdownContainer = shutdownContainer {
            shutdownDecoded0 = [Swift.String]()
            for string0 in shutdownContainer {
                if let string0 = string0 {
                    shutdownDecoded0?.append(string0)
                }
            }
        }
        shutdown = shutdownDecoded0
    }
}
