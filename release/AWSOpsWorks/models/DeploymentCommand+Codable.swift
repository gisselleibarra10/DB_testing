// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension OpsWorksClientTypes.DeploymentCommand: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case args = "Args"
        case name = "Name"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let args = args {
            var argsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .args)
            for (dictKey0, deploymentcommandargs0) in args {
                try argsContainer.encode(deploymentcommandargs0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let name = self.name {
            try encodeContainer.encode(name.rawValue, forKey: .name)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(OpsWorksClientTypes.DeploymentCommandName.self, forKey: .name)
        name = nameDecoded
        let argsContainer = try containerValues.decodeIfPresent([Swift.String: [Swift.String?]?].self, forKey: .args)
        var argsDecoded0: [Swift.String:[Swift.String]]? = nil
        if let argsContainer = argsContainer {
            argsDecoded0 = [Swift.String:[Swift.String]]()
            for (key0, strings0) in argsContainer {
                var strings0Decoded0: [Swift.String]? = nil
                if let strings0 = strings0 {
                    strings0Decoded0 = [Swift.String]()
                    for string1 in strings0 {
                        if let string1 = string1 {
                            strings0Decoded0?.append(string1)
                        }
                    }
                }
                argsDecoded0?[key0] = strings0Decoded0
            }
        }
        args = argsDecoded0
    }
}
