// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension OpsWorksClientTypes {
    public enum DeploymentCommandName: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case configure
        case deploy
        case executeRecipes
        case installDependencies
        case restart
        case rollback
        case setup
        case start
        case stop
        case undeploy
        case updateCustomCookbooks
        case updateDependencies
        case sdkUnknown(Swift.String)

        public static var allCases: [DeploymentCommandName] {
            return [
                .configure,
                .deploy,
                .executeRecipes,
                .installDependencies,
                .restart,
                .rollback,
                .setup,
                .start,
                .stop,
                .undeploy,
                .updateCustomCookbooks,
                .updateDependencies,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .configure: return "configure"
            case .deploy: return "deploy"
            case .executeRecipes: return "execute_recipes"
            case .installDependencies: return "install_dependencies"
            case .restart: return "restart"
            case .rollback: return "rollback"
            case .setup: return "setup"
            case .start: return "start"
            case .stop: return "stop"
            case .undeploy: return "undeploy"
            case .updateCustomCookbooks: return "update_custom_cookbooks"
            case .updateDependencies: return "update_dependencies"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DeploymentCommandName(rawValue: rawValue) ?? DeploymentCommandName.sdkUnknown(rawValue)
        }
    }
}
