// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension OpsWorksClientTypes.RdsDbInstance: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case address = "Address"
        case dbInstanceIdentifier = "DbInstanceIdentifier"
        case dbPassword = "DbPassword"
        case dbUser = "DbUser"
        case engine = "Engine"
        case missingOnRds = "MissingOnRds"
        case rdsDbInstanceArn = "RdsDbInstanceArn"
        case region = "Region"
        case stackId = "StackId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let address = self.address {
            try encodeContainer.encode(address, forKey: .address)
        }
        if let dbInstanceIdentifier = self.dbInstanceIdentifier {
            try encodeContainer.encode(dbInstanceIdentifier, forKey: .dbInstanceIdentifier)
        }
        if let dbPassword = self.dbPassword {
            try encodeContainer.encode(dbPassword, forKey: .dbPassword)
        }
        if let dbUser = self.dbUser {
            try encodeContainer.encode(dbUser, forKey: .dbUser)
        }
        if let engine = self.engine {
            try encodeContainer.encode(engine, forKey: .engine)
        }
        if let missingOnRds = self.missingOnRds {
            try encodeContainer.encode(missingOnRds, forKey: .missingOnRds)
        }
        if let rdsDbInstanceArn = self.rdsDbInstanceArn {
            try encodeContainer.encode(rdsDbInstanceArn, forKey: .rdsDbInstanceArn)
        }
        if let region = self.region {
            try encodeContainer.encode(region, forKey: .region)
        }
        if let stackId = self.stackId {
            try encodeContainer.encode(stackId, forKey: .stackId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let rdsDbInstanceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .rdsDbInstanceArn)
        rdsDbInstanceArn = rdsDbInstanceArnDecoded
        let dbInstanceIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dbInstanceIdentifier)
        dbInstanceIdentifier = dbInstanceIdentifierDecoded
        let dbUserDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dbUser)
        dbUser = dbUserDecoded
        let dbPasswordDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dbPassword)
        dbPassword = dbPasswordDecoded
        let regionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .region)
        region = regionDecoded
        let addressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .address)
        address = addressDecoded
        let engineDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .engine)
        engine = engineDecoded
        let stackIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stackId)
        stackId = stackIdDecoded
        let missingOnRdsDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .missingOnRds)
        missingOnRds = missingOnRdsDecoded
    }
}
