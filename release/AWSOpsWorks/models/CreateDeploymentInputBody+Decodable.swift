// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateDeploymentInputBody: Swift.Equatable {
    let stackId: Swift.String?
    let appId: Swift.String?
    let instanceIds: [Swift.String]?
    let layerIds: [Swift.String]?
    let command: OpsWorksClientTypes.DeploymentCommand?
    let comment: Swift.String?
    let customJson: Swift.String?
}

extension CreateDeploymentInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case appId = "AppId"
        case command = "Command"
        case comment = "Comment"
        case customJson = "CustomJson"
        case instanceIds = "InstanceIds"
        case layerIds = "LayerIds"
        case stackId = "StackId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let stackIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stackId)
        stackId = stackIdDecoded
        let appIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .appId)
        appId = appIdDecoded
        let instanceIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .instanceIds)
        var instanceIdsDecoded0:[Swift.String]? = nil
        if let instanceIdsContainer = instanceIdsContainer {
            instanceIdsDecoded0 = [Swift.String]()
            for string0 in instanceIdsContainer {
                if let string0 = string0 {
                    instanceIdsDecoded0?.append(string0)
                }
            }
        }
        instanceIds = instanceIdsDecoded0
        let layerIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .layerIds)
        var layerIdsDecoded0:[Swift.String]? = nil
        if let layerIdsContainer = layerIdsContainer {
            layerIdsDecoded0 = [Swift.String]()
            for string0 in layerIdsContainer {
                if let string0 = string0 {
                    layerIdsDecoded0?.append(string0)
                }
            }
        }
        layerIds = layerIdsDecoded0
        let commandDecoded = try containerValues.decodeIfPresent(OpsWorksClientTypes.DeploymentCommand.self, forKey: .command)
        command = commandDecoded
        let commentDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .comment)
        comment = commentDecoded
        let customJsonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .customJson)
        customJson = customJsonDecoded
    }
}
