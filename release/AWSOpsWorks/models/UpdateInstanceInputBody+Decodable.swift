// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct UpdateInstanceInputBody: Swift.Equatable {
    let instanceId: Swift.String?
    let layerIds: [Swift.String]?
    let instanceType: Swift.String?
    let autoScalingType: OpsWorksClientTypes.AutoScalingType?
    let hostname: Swift.String?
    let os: Swift.String?
    let amiId: Swift.String?
    let sshKeyName: Swift.String?
    let architecture: OpsWorksClientTypes.Architecture?
    let installUpdatesOnBoot: Swift.Bool?
    let ebsOptimized: Swift.Bool?
    let agentVersion: Swift.String?
}

extension UpdateInstanceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case agentVersion = "AgentVersion"
        case amiId = "AmiId"
        case architecture = "Architecture"
        case autoScalingType = "AutoScalingType"
        case ebsOptimized = "EbsOptimized"
        case hostname = "Hostname"
        case installUpdatesOnBoot = "InstallUpdatesOnBoot"
        case instanceId = "InstanceId"
        case instanceType = "InstanceType"
        case layerIds = "LayerIds"
        case os = "Os"
        case sshKeyName = "SshKeyName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instanceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceId)
        instanceId = instanceIdDecoded
        let layerIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .layerIds)
        var layerIdsDecoded0:[Swift.String]? = nil
        if let layerIdsContainer = layerIdsContainer {
            layerIdsDecoded0 = [Swift.String]()
            for string0 in layerIdsContainer {
                if let string0 = string0 {
                    layerIdsDecoded0?.append(string0)
                }
            }
        }
        layerIds = layerIdsDecoded0
        let instanceTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceType)
        instanceType = instanceTypeDecoded
        let autoScalingTypeDecoded = try containerValues.decodeIfPresent(OpsWorksClientTypes.AutoScalingType.self, forKey: .autoScalingType)
        autoScalingType = autoScalingTypeDecoded
        let hostnameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .hostname)
        hostname = hostnameDecoded
        let osDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .os)
        os = osDecoded
        let amiIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .amiId)
        amiId = amiIdDecoded
        let sshKeyNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sshKeyName)
        sshKeyName = sshKeyNameDecoded
        let architectureDecoded = try containerValues.decodeIfPresent(OpsWorksClientTypes.Architecture.self, forKey: .architecture)
        architecture = architectureDecoded
        let installUpdatesOnBootDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .installUpdatesOnBoot)
        installUpdatesOnBoot = installUpdatesOnBootDecoded
        let ebsOptimizedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .ebsOptimized)
        ebsOptimized = ebsOptimizedDecoded
        let agentVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .agentVersion)
        agentVersion = agentVersionDecoded
    }
}
