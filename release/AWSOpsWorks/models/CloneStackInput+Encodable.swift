// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CloneStackInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case agentVersion = "AgentVersion"
        case attributes = "Attributes"
        case chefConfiguration = "ChefConfiguration"
        case cloneAppIds = "CloneAppIds"
        case clonePermissions = "ClonePermissions"
        case configurationManager = "ConfigurationManager"
        case customCookbooksSource = "CustomCookbooksSource"
        case customJson = "CustomJson"
        case defaultAvailabilityZone = "DefaultAvailabilityZone"
        case defaultInstanceProfileArn = "DefaultInstanceProfileArn"
        case defaultOs = "DefaultOs"
        case defaultRootDeviceType = "DefaultRootDeviceType"
        case defaultSshKeyName = "DefaultSshKeyName"
        case defaultSubnetId = "DefaultSubnetId"
        case hostnameTheme = "HostnameTheme"
        case name = "Name"
        case region = "Region"
        case serviceRoleArn = "ServiceRoleArn"
        case sourceStackId = "SourceStackId"
        case useCustomCookbooks = "UseCustomCookbooks"
        case useOpsworksSecurityGroups = "UseOpsworksSecurityGroups"
        case vpcId = "VpcId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let agentVersion = self.agentVersion {
            try encodeContainer.encode(agentVersion, forKey: .agentVersion)
        }
        if let attributes = attributes {
            var attributesContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .attributes)
            for (dictKey0, stackattributes0) in attributes {
                try attributesContainer.encode(stackattributes0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let chefConfiguration = self.chefConfiguration {
            try encodeContainer.encode(chefConfiguration, forKey: .chefConfiguration)
        }
        if let cloneAppIds = cloneAppIds {
            var cloneAppIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .cloneAppIds)
            for strings0 in cloneAppIds {
                try cloneAppIdsContainer.encode(strings0)
            }
        }
        if let clonePermissions = self.clonePermissions {
            try encodeContainer.encode(clonePermissions, forKey: .clonePermissions)
        }
        if let configurationManager = self.configurationManager {
            try encodeContainer.encode(configurationManager, forKey: .configurationManager)
        }
        if let customCookbooksSource = self.customCookbooksSource {
            try encodeContainer.encode(customCookbooksSource, forKey: .customCookbooksSource)
        }
        if let customJson = self.customJson {
            try encodeContainer.encode(customJson, forKey: .customJson)
        }
        if let defaultAvailabilityZone = self.defaultAvailabilityZone {
            try encodeContainer.encode(defaultAvailabilityZone, forKey: .defaultAvailabilityZone)
        }
        if let defaultInstanceProfileArn = self.defaultInstanceProfileArn {
            try encodeContainer.encode(defaultInstanceProfileArn, forKey: .defaultInstanceProfileArn)
        }
        if let defaultOs = self.defaultOs {
            try encodeContainer.encode(defaultOs, forKey: .defaultOs)
        }
        if let defaultRootDeviceType = self.defaultRootDeviceType {
            try encodeContainer.encode(defaultRootDeviceType.rawValue, forKey: .defaultRootDeviceType)
        }
        if let defaultSshKeyName = self.defaultSshKeyName {
            try encodeContainer.encode(defaultSshKeyName, forKey: .defaultSshKeyName)
        }
        if let defaultSubnetId = self.defaultSubnetId {
            try encodeContainer.encode(defaultSubnetId, forKey: .defaultSubnetId)
        }
        if let hostnameTheme = self.hostnameTheme {
            try encodeContainer.encode(hostnameTheme, forKey: .hostnameTheme)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let region = self.region {
            try encodeContainer.encode(region, forKey: .region)
        }
        if let serviceRoleArn = self.serviceRoleArn {
            try encodeContainer.encode(serviceRoleArn, forKey: .serviceRoleArn)
        }
        if let sourceStackId = self.sourceStackId {
            try encodeContainer.encode(sourceStackId, forKey: .sourceStackId)
        }
        if let useCustomCookbooks = self.useCustomCookbooks {
            try encodeContainer.encode(useCustomCookbooks, forKey: .useCustomCookbooks)
        }
        if let useOpsworksSecurityGroups = self.useOpsworksSecurityGroups {
            try encodeContainer.encode(useOpsworksSecurityGroups, forKey: .useOpsworksSecurityGroups)
        }
        if let vpcId = self.vpcId {
            try encodeContainer.encode(vpcId, forKey: .vpcId)
        }
    }
}
