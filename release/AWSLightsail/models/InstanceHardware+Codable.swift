// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension LightsailClientTypes.InstanceHardware: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cpuCount
        case disks
        case ramSizeInGb
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cpuCount = self.cpuCount {
            try encodeContainer.encode(cpuCount, forKey: .cpuCount)
        }
        if let disks = disks {
            var disksContainer = encodeContainer.nestedUnkeyedContainer(forKey: .disks)
            for disklist0 in disks {
                try disksContainer.encode(disklist0)
            }
        }
        if let ramSizeInGb = self.ramSizeInGb {
            try encodeContainer.encode(ramSizeInGb, forKey: .ramSizeInGb)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let cpuCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .cpuCount)
        cpuCount = cpuCountDecoded
        let disksContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Disk?].self, forKey: .disks)
        var disksDecoded0:[LightsailClientTypes.Disk]? = nil
        if let disksContainer = disksContainer {
            disksDecoded0 = [LightsailClientTypes.Disk]()
            for structure0 in disksContainer {
                if let structure0 = structure0 {
                    disksDecoded0?.append(structure0)
                }
            }
        }
        disks = disksDecoded0
        let ramSizeInGbDecoded = try containerValues.decodeIfPresent(Swift.Float.self, forKey: .ramSizeInGb)
        ramSizeInGb = ramSizeInGbDecoded
    }
}
