// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct CreateLoadBalancerInput: Swift.Equatable {
    /// The optional alternative domains and subdomains to use with your SSL/TLS certificate (e.g., www.example.com, example.com, m.example.com, blog.example.com).
    public var certificateAlternativeNames: [Swift.String]?
    /// The domain name with which your certificate is associated (e.g., example.com). If you specify certificateDomainName, then certificateName is required (and vice-versa).
    public var certificateDomainName: Swift.String?
    /// The name of the SSL/TLS certificate. If you specify certificateName, then certificateDomainName is required (and vice-versa).
    public var certificateName: Swift.String?
    /// The path you provided to perform the load balancer health check. If you didn't specify a health check path, Lightsail uses the root path of your website (e.g., "/"). You may want to specify a custom health check path other than the root of your application if your home page loads slowly or has a lot of media or scripting on it.
    public var healthCheckPath: Swift.String?
    /// The instance port where you're creating your load balancer.
    /// This member is required.
    public var instancePort: Swift.Int
    /// The IP address type for the load balancer. The possible values are ipv4 for IPv4 only, and dualstack for IPv4 and IPv6. The default value is dualstack.
    public var ipAddressType: LightsailClientTypes.IpAddressType?
    /// The name of your load balancer.
    /// This member is required.
    public var loadBalancerName: Swift.String?
    /// The tag keys and optional values to add to the resource during create. Use the TagResource action to tag a resource after it's created.
    public var tags: [LightsailClientTypes.Tag]?
    /// The name of the TLS policy to apply to the load balancer. Use the [GetLoadBalancerTlsPolicies](https://docs.aws.amazon.com/lightsail/2016-11-28/api-reference/API_GetLoadBalancerTlsPolicies.html) action to get a list of TLS policy names that you can specify. For more information about load balancer TLS policies, see [Configuring TLS security policies on your Amazon Lightsail load balancers](https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-configure-load-balancer-tls-security-policy) in the Amazon Lightsail Developer Guide.
    public var tlsPolicyName: Swift.String?

    public init (
        certificateAlternativeNames: [Swift.String]? = nil,
        certificateDomainName: Swift.String? = nil,
        certificateName: Swift.String? = nil,
        healthCheckPath: Swift.String? = nil,
        instancePort: Swift.Int = 0,
        ipAddressType: LightsailClientTypes.IpAddressType? = nil,
        loadBalancerName: Swift.String? = nil,
        tags: [LightsailClientTypes.Tag]? = nil,
        tlsPolicyName: Swift.String? = nil
    )
    {
        self.certificateAlternativeNames = certificateAlternativeNames
        self.certificateDomainName = certificateDomainName
        self.certificateName = certificateName
        self.healthCheckPath = healthCheckPath
        self.instancePort = instancePort
        self.ipAddressType = ipAddressType
        self.loadBalancerName = loadBalancerName
        self.tags = tags
        self.tlsPolicyName = tlsPolicyName
    }
}
