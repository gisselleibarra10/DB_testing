// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension LightsailClientTypes.Instance: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case addOns
        case arn
        case blueprintId
        case blueprintName
        case bundleId
        case createdAt
        case hardware
        case ipAddressType
        case ipv6Addresses
        case isStaticIp
        case location
        case metadataOptions
        case name
        case networking
        case privateIpAddress
        case publicIpAddress
        case resourceType
        case sshKeyName
        case state
        case supportCode
        case tags
        case username
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let addOns = addOns {
            var addOnsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .addOns)
            for addonlist0 in addOns {
                try addOnsContainer.encode(addonlist0)
            }
        }
        if let arn = self.arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let blueprintId = self.blueprintId {
            try encodeContainer.encode(blueprintId, forKey: .blueprintId)
        }
        if let blueprintName = self.blueprintName {
            try encodeContainer.encode(blueprintName, forKey: .blueprintName)
        }
        if let bundleId = self.bundleId {
            try encodeContainer.encode(bundleId, forKey: .bundleId)
        }
        if let createdAt = self.createdAt {
            try encodeContainer.encode(createdAt.timeIntervalSince1970, forKey: .createdAt)
        }
        if let hardware = self.hardware {
            try encodeContainer.encode(hardware, forKey: .hardware)
        }
        if let ipAddressType = self.ipAddressType {
            try encodeContainer.encode(ipAddressType.rawValue, forKey: .ipAddressType)
        }
        if let ipv6Addresses = ipv6Addresses {
            var ipv6AddressesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .ipv6Addresses)
            for ipv6addresslist0 in ipv6Addresses {
                try ipv6AddressesContainer.encode(ipv6addresslist0)
            }
        }
        if let isStaticIp = self.isStaticIp {
            try encodeContainer.encode(isStaticIp, forKey: .isStaticIp)
        }
        if let location = self.location {
            try encodeContainer.encode(location, forKey: .location)
        }
        if let metadataOptions = self.metadataOptions {
            try encodeContainer.encode(metadataOptions, forKey: .metadataOptions)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let networking = self.networking {
            try encodeContainer.encode(networking, forKey: .networking)
        }
        if let privateIpAddress = self.privateIpAddress {
            try encodeContainer.encode(privateIpAddress, forKey: .privateIpAddress)
        }
        if let publicIpAddress = self.publicIpAddress {
            try encodeContainer.encode(publicIpAddress, forKey: .publicIpAddress)
        }
        if let resourceType = self.resourceType {
            try encodeContainer.encode(resourceType.rawValue, forKey: .resourceType)
        }
        if let sshKeyName = self.sshKeyName {
            try encodeContainer.encode(sshKeyName, forKey: .sshKeyName)
        }
        if let state = self.state {
            try encodeContainer.encode(state, forKey: .state)
        }
        if let supportCode = self.supportCode {
            try encodeContainer.encode(supportCode, forKey: .supportCode)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
        if let username = self.username {
            try encodeContainer.encode(username, forKey: .username)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let supportCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .supportCode)
        supportCode = supportCodeDecoded
        let createdAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdAt)
        createdAt = createdAtDecoded
        let locationDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.ResourceLocation.self, forKey: .location)
        location = locationDecoded
        let resourceTypeDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.ResourceType.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let tagsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[LightsailClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [LightsailClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let blueprintIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .blueprintId)
        blueprintId = blueprintIdDecoded
        let blueprintNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .blueprintName)
        blueprintName = blueprintNameDecoded
        let bundleIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .bundleId)
        bundleId = bundleIdDecoded
        let addOnsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.AddOn?].self, forKey: .addOns)
        var addOnsDecoded0:[LightsailClientTypes.AddOn]? = nil
        if let addOnsContainer = addOnsContainer {
            addOnsDecoded0 = [LightsailClientTypes.AddOn]()
            for structure0 in addOnsContainer {
                if let structure0 = structure0 {
                    addOnsDecoded0?.append(structure0)
                }
            }
        }
        addOns = addOnsDecoded0
        let isStaticIpDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .isStaticIp)
        isStaticIp = isStaticIpDecoded
        let privateIpAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .privateIpAddress)
        privateIpAddress = privateIpAddressDecoded
        let publicIpAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .publicIpAddress)
        publicIpAddress = publicIpAddressDecoded
        let ipv6AddressesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .ipv6Addresses)
        var ipv6AddressesDecoded0:[Swift.String]? = nil
        if let ipv6AddressesContainer = ipv6AddressesContainer {
            ipv6AddressesDecoded0 = [Swift.String]()
            for string0 in ipv6AddressesContainer {
                if let string0 = string0 {
                    ipv6AddressesDecoded0?.append(string0)
                }
            }
        }
        ipv6Addresses = ipv6AddressesDecoded0
        let ipAddressTypeDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.IpAddressType.self, forKey: .ipAddressType)
        ipAddressType = ipAddressTypeDecoded
        let hardwareDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.InstanceHardware.self, forKey: .hardware)
        hardware = hardwareDecoded
        let networkingDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.InstanceNetworking.self, forKey: .networking)
        networking = networkingDecoded
        let stateDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.InstanceState.self, forKey: .state)
        state = stateDecoded
        let usernameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .username)
        username = usernameDecoded
        let sshKeyNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sshKeyName)
        sshKeyName = sshKeyNameDecoded
        let metadataOptionsDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.InstanceMetadataOptions.self, forKey: .metadataOptions)
        metadataOptions = metadataOptionsDecoded
    }
}
