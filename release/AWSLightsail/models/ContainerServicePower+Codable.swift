// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension LightsailClientTypes.ContainerServicePower: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cpuCount
        case isActive
        case name
        case powerId
        case price
        case ramSizeInGb
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cpuCount = self.cpuCount {
            try encodeContainer.encode(cpuCount, forKey: .cpuCount)
        }
        if let isActive = self.isActive {
            try encodeContainer.encode(isActive, forKey: .isActive)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let powerId = self.powerId {
            try encodeContainer.encode(powerId, forKey: .powerId)
        }
        if let price = self.price {
            try encodeContainer.encode(price, forKey: .price)
        }
        if let ramSizeInGb = self.ramSizeInGb {
            try encodeContainer.encode(ramSizeInGb, forKey: .ramSizeInGb)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let powerIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .powerId)
        powerId = powerIdDecoded
        let priceDecoded = try containerValues.decodeIfPresent(Swift.Float.self, forKey: .price)
        price = priceDecoded
        let cpuCountDecoded = try containerValues.decodeIfPresent(Swift.Float.self, forKey: .cpuCount)
        cpuCount = cpuCountDecoded
        let ramSizeInGbDecoded = try containerValues.decodeIfPresent(Swift.Float.self, forKey: .ramSizeInGb)
        ramSizeInGb = ramSizeInGbDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let isActiveDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .isActive)
        isActive = isActiveDecoded
    }
}
