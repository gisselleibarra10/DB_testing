// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension LightsailClientTypes {
    public enum ResourceType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case alarm
        case bucket
        case certificate
        case cloudformationstackrecord
        case contactmethod
        case containerservice
        case disk
        case disksnapshot
        case distribution
        case domain
        case exportsnapshotrecord
        case instance
        case instancesnapshot
        case keypair
        case loadbalancer
        case loadbalancertlscertificate
        case peeredvpc
        case relationaldatabase
        case relationaldatabasesnapshot
        case staticip
        case sdkUnknown(Swift.String)

        public static var allCases: [ResourceType] {
            return [
                .alarm,
                .bucket,
                .certificate,
                .cloudformationstackrecord,
                .contactmethod,
                .containerservice,
                .disk,
                .disksnapshot,
                .distribution,
                .domain,
                .exportsnapshotrecord,
                .instance,
                .instancesnapshot,
                .keypair,
                .loadbalancer,
                .loadbalancertlscertificate,
                .peeredvpc,
                .relationaldatabase,
                .relationaldatabasesnapshot,
                .staticip,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .alarm: return "Alarm"
            case .bucket: return "Bucket"
            case .certificate: return "Certificate"
            case .cloudformationstackrecord: return "CloudFormationStackRecord"
            case .contactmethod: return "ContactMethod"
            case .containerservice: return "ContainerService"
            case .disk: return "Disk"
            case .disksnapshot: return "DiskSnapshot"
            case .distribution: return "Distribution"
            case .domain: return "Domain"
            case .exportsnapshotrecord: return "ExportSnapshotRecord"
            case .instance: return "Instance"
            case .instancesnapshot: return "InstanceSnapshot"
            case .keypair: return "KeyPair"
            case .loadbalancer: return "LoadBalancer"
            case .loadbalancertlscertificate: return "LoadBalancerTlsCertificate"
            case .peeredvpc: return "PeeredVpc"
            case .relationaldatabase: return "RelationalDatabase"
            case .relationaldatabasesnapshot: return "RelationalDatabaseSnapshot"
            case .staticip: return "StaticIp"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ResourceType(rawValue: rawValue) ?? ResourceType.sdkUnknown(rawValue)
        }
    }
}
