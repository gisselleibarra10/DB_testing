// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension UpdateRelationalDatabaseInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applyImmediately
        case caCertificateIdentifier
        case disableBackupRetention
        case enableBackupRetention
        case masterUserPassword
        case preferredBackupWindow
        case preferredMaintenanceWindow
        case publiclyAccessible
        case relationalDatabaseName
        case rotateMasterUserPassword
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let applyImmediately = self.applyImmediately {
            try encodeContainer.encode(applyImmediately, forKey: .applyImmediately)
        }
        if let caCertificateIdentifier = self.caCertificateIdentifier {
            try encodeContainer.encode(caCertificateIdentifier, forKey: .caCertificateIdentifier)
        }
        if let disableBackupRetention = self.disableBackupRetention {
            try encodeContainer.encode(disableBackupRetention, forKey: .disableBackupRetention)
        }
        if let enableBackupRetention = self.enableBackupRetention {
            try encodeContainer.encode(enableBackupRetention, forKey: .enableBackupRetention)
        }
        if let masterUserPassword = self.masterUserPassword {
            try encodeContainer.encode(masterUserPassword, forKey: .masterUserPassword)
        }
        if let preferredBackupWindow = self.preferredBackupWindow {
            try encodeContainer.encode(preferredBackupWindow, forKey: .preferredBackupWindow)
        }
        if let preferredMaintenanceWindow = self.preferredMaintenanceWindow {
            try encodeContainer.encode(preferredMaintenanceWindow, forKey: .preferredMaintenanceWindow)
        }
        if let publiclyAccessible = self.publiclyAccessible {
            try encodeContainer.encode(publiclyAccessible, forKey: .publiclyAccessible)
        }
        if let relationalDatabaseName = self.relationalDatabaseName {
            try encodeContainer.encode(relationalDatabaseName, forKey: .relationalDatabaseName)
        }
        if let rotateMasterUserPassword = self.rotateMasterUserPassword {
            try encodeContainer.encode(rotateMasterUserPassword, forKey: .rotateMasterUserPassword)
        }
    }
}
