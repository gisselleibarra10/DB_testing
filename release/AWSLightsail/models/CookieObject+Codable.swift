// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension LightsailClientTypes.CookieObject: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cookiesAllowList
        case option
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cookiesAllowList = cookiesAllowList {
            var cookiesAllowListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .cookiesAllowList)
            for stringlist0 in cookiesAllowList {
                try cookiesAllowListContainer.encode(stringlist0)
            }
        }
        if let option = self.option {
            try encodeContainer.encode(option.rawValue, forKey: .option)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let optionDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.ForwardValues.self, forKey: .option)
        option = optionDecoded
        let cookiesAllowListContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .cookiesAllowList)
        var cookiesAllowListDecoded0:[Swift.String]? = nil
        if let cookiesAllowListContainer = cookiesAllowListContainer {
            cookiesAllowListDecoded0 = [Swift.String]()
            for string0 in cookiesAllowListContainer {
                if let string0 = string0 {
                    cookiesAllowListDecoded0?.append(string0)
                }
            }
        }
        cookiesAllowList = cookiesAllowListDecoded0
    }
}
