// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension LightsailClientTypes {
    /// Describes an access key for an Amazon Lightsail bucket. Access keys grant full programmatic access to the specified bucket and its objects. You can have a maximum of two access keys per bucket. Use the [CreateBucketAccessKey](https://docs.aws.amazon.com/lightsail/2016-11-28/api-reference/API_CreateBucketAccessKey.html) action to create an access key for a specific bucket. For more information about access keys, see [Creating access keys for a bucket in Amazon Lightsail](https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-creating-bucket-access-keys) in the Amazon Lightsail Developer Guide. The secretAccessKey value is returned only in response to the CreateBucketAccessKey action. You can get a secret access key only when you first create an access key; you cannot get the secret access key later. If you lose the secret access key, you must create a new access key.
    public struct AccessKey: Swift.Equatable {
        /// The ID of the access key.
        public var accessKeyId: Swift.String?
        /// The timestamp when the access key was created.
        public var createdAt: ClientRuntime.Date?
        /// An object that describes the last time the access key was used. This object does not include data in the response of a [CreateBucketAccessKey](https://docs.aws.amazon.com/lightsail/2016-11-28/api-reference/API_CreateBucketAccessKey.html) action. If the access key has not been used, the region and serviceName values are N/A, and the lastUsedDate value is null.
        public var lastUsed: LightsailClientTypes.AccessKeyLastUsed?
        /// The secret access key used to sign requests. You should store the secret access key in a safe location. We recommend that you delete the access key if the secret access key is compromised.
        public var secretAccessKey: Swift.String?
        /// The status of the access key. A status of Active means that the key is valid, while Inactive means it is not.
        public var status: LightsailClientTypes.StatusType?

        public init (
            accessKeyId: Swift.String? = nil,
            createdAt: ClientRuntime.Date? = nil,
            lastUsed: LightsailClientTypes.AccessKeyLastUsed? = nil,
            secretAccessKey: Swift.String? = nil,
            status: LightsailClientTypes.StatusType? = nil
        )
        {
            self.accessKeyId = accessKeyId
            self.createdAt = createdAt
            self.lastUsed = lastUsed
            self.secretAccessKey = secretAccessKey
            self.status = status
        }
    }

}
