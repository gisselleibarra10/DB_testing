// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct UpdateBucketInputBody: Swift.Equatable {
    let bucketName: Swift.String?
    let accessRules: LightsailClientTypes.AccessRules?
    let versioning: Swift.String?
    let readonlyAccessAccounts: [Swift.String]?
    let accessLogConfig: LightsailClientTypes.BucketAccessLogConfig?
}

extension UpdateBucketInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accessLogConfig
        case accessRules
        case bucketName
        case readonlyAccessAccounts
        case versioning
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let bucketNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .bucketName)
        bucketName = bucketNameDecoded
        let accessRulesDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.AccessRules.self, forKey: .accessRules)
        accessRules = accessRulesDecoded
        let versioningDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .versioning)
        versioning = versioningDecoded
        let readonlyAccessAccountsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .readonlyAccessAccounts)
        var readonlyAccessAccountsDecoded0:[Swift.String]? = nil
        if let readonlyAccessAccountsContainer = readonlyAccessAccountsContainer {
            readonlyAccessAccountsDecoded0 = [Swift.String]()
            for string0 in readonlyAccessAccountsContainer {
                if let string0 = string0 {
                    readonlyAccessAccountsDecoded0?.append(string0)
                }
            }
        }
        readonlyAccessAccounts = readonlyAccessAccountsDecoded0
        let accessLogConfigDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.BucketAccessLogConfig.self, forKey: .accessLogConfig)
        accessLogConfig = accessLogConfigDecoded
    }
}
