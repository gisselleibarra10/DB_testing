// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension PutAlarmInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case alarmName
        case comparisonOperator
        case contactProtocols
        case datapointsToAlarm
        case evaluationPeriods
        case metricName
        case monitoredResourceName
        case notificationEnabled
        case notificationTriggers
        case threshold
        case treatMissingData
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let alarmName = self.alarmName {
            try encodeContainer.encode(alarmName, forKey: .alarmName)
        }
        if let comparisonOperator = self.comparisonOperator {
            try encodeContainer.encode(comparisonOperator.rawValue, forKey: .comparisonOperator)
        }
        if let contactProtocols = contactProtocols {
            var contactProtocolsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .contactProtocols)
            for contactprotocolslist0 in contactProtocols {
                try contactProtocolsContainer.encode(contactprotocolslist0.rawValue)
            }
        }
        if let datapointsToAlarm = self.datapointsToAlarm {
            try encodeContainer.encode(datapointsToAlarm, forKey: .datapointsToAlarm)
        }
        if let evaluationPeriods = self.evaluationPeriods {
            try encodeContainer.encode(evaluationPeriods, forKey: .evaluationPeriods)
        }
        if let metricName = self.metricName {
            try encodeContainer.encode(metricName.rawValue, forKey: .metricName)
        }
        if let monitoredResourceName = self.monitoredResourceName {
            try encodeContainer.encode(monitoredResourceName, forKey: .monitoredResourceName)
        }
        if let notificationEnabled = self.notificationEnabled {
            try encodeContainer.encode(notificationEnabled, forKey: .notificationEnabled)
        }
        if let notificationTriggers = notificationTriggers {
            var notificationTriggersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .notificationTriggers)
            for notificationtriggerlist0 in notificationTriggers {
                try notificationTriggersContainer.encode(notificationtriggerlist0.rawValue)
            }
        }
        if let threshold = self.threshold {
            try encodeContainer.encode(threshold, forKey: .threshold)
        }
        if let treatMissingData = self.treatMissingData {
            try encodeContainer.encode(treatMissingData.rawValue, forKey: .treatMissingData)
        }
    }
}
