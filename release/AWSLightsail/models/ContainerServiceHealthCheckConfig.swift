// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension LightsailClientTypes {
    /// Describes the health check configuration of an Amazon Lightsail container service.
    public struct ContainerServiceHealthCheckConfig: Swift.Equatable {
        /// The number of consecutive health checks successes required before moving the container to the Healthy state. The default value is 2.
        public var healthyThreshold: Swift.Int?
        /// The approximate interval, in seconds, between health checks of an individual container. You can specify between 5 and 300 seconds. The default value is 5.
        public var intervalSeconds: Swift.Int?
        /// The path on the container on which to perform the health check. The default value is /.
        public var path: Swift.String?
        /// The HTTP codes to use when checking for a successful response from a container. You can specify values between 200 and 499. You can specify multiple values (for example, 200,202) or a range of values (for example, 200-299).
        public var successCodes: Swift.String?
        /// The amount of time, in seconds, during which no response means a failed health check. You can specify between 2 and 60 seconds. The default value is 2.
        public var timeoutSeconds: Swift.Int?
        /// The number of consecutive health check failures required before moving the container to the Unhealthy state. The default value is 2.
        public var unhealthyThreshold: Swift.Int?

        public init (
            healthyThreshold: Swift.Int? = nil,
            intervalSeconds: Swift.Int? = nil,
            path: Swift.String? = nil,
            successCodes: Swift.String? = nil,
            timeoutSeconds: Swift.Int? = nil,
            unhealthyThreshold: Swift.Int? = nil
        )
        {
            self.healthyThreshold = healthyThreshold
            self.intervalSeconds = intervalSeconds
            self.path = path
            self.successCodes = successCodes
            self.timeoutSeconds = timeoutSeconds
            self.unhealthyThreshold = unhealthyThreshold
        }
    }

}
