// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension LightsailClientTypes {
    /// Describes the full details of an Amazon Lightsail SSL/TLS certificate. To get a summary of a certificate, use the GetCertificates action and ommit includeCertificateDetails from your request. The response will include only the certificate Amazon Resource Name (ARN), certificate name, domain name, and tags.
    public struct Certificate: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the certificate.
        public var arn: Swift.String?
        /// The timestamp when the certificate was created.
        public var createdAt: ClientRuntime.Date?
        /// The domain name of the certificate.
        public var domainName: Swift.String?
        /// An array of objects that describe the domain validation records of the certificate.
        public var domainValidationRecords: [LightsailClientTypes.DomainValidationRecord]?
        /// The renewal eligibility of the certificate.
        public var eligibleToRenew: Swift.String?
        /// The number of Lightsail resources that the certificate is attached to.
        public var inUseResourceCount: Swift.Int
        /// The timestamp when the certificate was issued.
        public var issuedAt: ClientRuntime.Date?
        /// The certificate authority that issued the certificate.
        public var issuerCA: Swift.String?
        /// The algorithm used to generate the key pair (the public and private key) of the certificate.
        public var keyAlgorithm: Swift.String?
        /// The name of the certificate (e.g., my-certificate).
        public var name: Swift.String?
        /// The timestamp when the certificate expires.
        public var notAfter: ClientRuntime.Date?
        /// The timestamp when the certificate is first valid.
        public var notBefore: ClientRuntime.Date?
        /// An object that describes the status of the certificate renewal managed by Lightsail.
        public var renewalSummary: LightsailClientTypes.RenewalSummary?
        /// The validation failure reason, if any, of the certificate. The following failure reasons are possible:
        ///
        /// * NO_AVAILABLE_CONTACTS - This failure applies to email validation, which is not available for Lightsail certificates.
        ///
        /// * ADDITIONAL_VERIFICATION_REQUIRED - Lightsail requires additional information to process this certificate request. This can happen as a fraud-protection measure, such as when the domain ranks within the Alexa top 1000 websites. To provide the required information, use the [AWS Support Center](https://console.aws.amazon.com/support/home) to contact AWS Support. You cannot request a certificate for Amazon-owned domain names such as those ending in amazonaws.com, cloudfront.net, or elasticbeanstalk.com.
        ///
        /// * DOMAIN_NOT_ALLOWED - One or more of the domain names in the certificate request was reported as an unsafe domain by [VirusTotal](https://www.virustotal.com/gui/home/url). To correct the problem, search for your domain name on the [VirusTotal](https://www.virustotal.com/gui/home/url) website. If your domain is reported as suspicious, see [Google Help for Hacked Websites](https://developers.google.com/web/fundamentals/security/hacked) to learn what you can do. If you believe that the result is a false positive, notify the organization that is reporting the domain. VirusTotal is an aggregate of several antivirus and URL scanners and cannot remove your domain from a block list itself. After you correct the problem and the VirusTotal registry has been updated, request a new certificate. If you see this error and your domain is not included in the VirusTotal list, visit the [AWS Support Center](https://console.aws.amazon.com/support/home) and create a case.
        ///
        /// * INVALID_PUBLIC_DOMAIN - One or more of the domain names in the certificate request is not valid. Typically, this is because a domain name in the request is not a valid top-level domain. Try to request a certificate again, correcting any spelling errors or typos that were in the failed request, and ensure that all domain names in the request are for valid top-level domains. For example, you cannot request a certificate for example.invalidpublicdomain because invalidpublicdomain is not a valid top-level domain.
        ///
        /// * OTHER - Typically, this failure occurs when there is a typographical error in one or more of the domain names in the certificate request. Try to request a certificate again, correcting any spelling errors or typos that were in the failed request.
        public var requestFailureReason: Swift.String?
        /// The reason the certificate was revoked. This value is present only when the certificate status is REVOKED.
        public var revocationReason: Swift.String?
        /// The timestamp when the certificate was revoked. This value is present only when the certificate status is REVOKED.
        public var revokedAt: ClientRuntime.Date?
        /// The serial number of the certificate.
        public var serialNumber: Swift.String?
        /// The validation status of the certificate.
        public var status: LightsailClientTypes.CertificateStatus?
        /// An array of strings that specify the alternate domains (e.g., example2.com) and subdomains (e.g., blog.example.com) of the certificate.
        public var subjectAlternativeNames: [Swift.String]?
        /// The support code. Include this code in your email to support when you have questions about your Lightsail certificate. This code enables our support team to look up your Lightsail information more easily.
        public var supportCode: Swift.String?
        /// The tag keys and optional values for the resource. For more information about tags in Lightsail, see the [Amazon Lightsail Developer Guide](https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-tags).
        public var tags: [LightsailClientTypes.Tag]?

        public init (
            arn: Swift.String? = nil,
            createdAt: ClientRuntime.Date? = nil,
            domainName: Swift.String? = nil,
            domainValidationRecords: [LightsailClientTypes.DomainValidationRecord]? = nil,
            eligibleToRenew: Swift.String? = nil,
            inUseResourceCount: Swift.Int = 0,
            issuedAt: ClientRuntime.Date? = nil,
            issuerCA: Swift.String? = nil,
            keyAlgorithm: Swift.String? = nil,
            name: Swift.String? = nil,
            notAfter: ClientRuntime.Date? = nil,
            notBefore: ClientRuntime.Date? = nil,
            renewalSummary: LightsailClientTypes.RenewalSummary? = nil,
            requestFailureReason: Swift.String? = nil,
            revocationReason: Swift.String? = nil,
            revokedAt: ClientRuntime.Date? = nil,
            serialNumber: Swift.String? = nil,
            status: LightsailClientTypes.CertificateStatus? = nil,
            subjectAlternativeNames: [Swift.String]? = nil,
            supportCode: Swift.String? = nil,
            tags: [LightsailClientTypes.Tag]? = nil
        )
        {
            self.arn = arn
            self.createdAt = createdAt
            self.domainName = domainName
            self.domainValidationRecords = domainValidationRecords
            self.eligibleToRenew = eligibleToRenew
            self.inUseResourceCount = inUseResourceCount
            self.issuedAt = issuedAt
            self.issuerCA = issuerCA
            self.keyAlgorithm = keyAlgorithm
            self.name = name
            self.notAfter = notAfter
            self.notBefore = notBefore
            self.renewalSummary = renewalSummary
            self.requestFailureReason = requestFailureReason
            self.revocationReason = revocationReason
            self.revokedAt = revokedAt
            self.serialNumber = serialNumber
            self.status = status
            self.subjectAlternativeNames = subjectAlternativeNames
            self.supportCode = supportCode
            self.tags = tags
        }
    }

}
