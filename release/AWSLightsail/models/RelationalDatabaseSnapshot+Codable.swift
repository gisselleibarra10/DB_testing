// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension LightsailClientTypes.RelationalDatabaseSnapshot: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn
        case createdAt
        case engine
        case engineVersion
        case fromRelationalDatabaseArn
        case fromRelationalDatabaseBlueprintId
        case fromRelationalDatabaseBundleId
        case fromRelationalDatabaseName
        case location
        case name
        case resourceType
        case sizeInGb
        case state
        case supportCode
        case tags
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = self.arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let createdAt = self.createdAt {
            try encodeContainer.encode(createdAt.timeIntervalSince1970, forKey: .createdAt)
        }
        if let engine = self.engine {
            try encodeContainer.encode(engine, forKey: .engine)
        }
        if let engineVersion = self.engineVersion {
            try encodeContainer.encode(engineVersion, forKey: .engineVersion)
        }
        if let fromRelationalDatabaseArn = self.fromRelationalDatabaseArn {
            try encodeContainer.encode(fromRelationalDatabaseArn, forKey: .fromRelationalDatabaseArn)
        }
        if let fromRelationalDatabaseBlueprintId = self.fromRelationalDatabaseBlueprintId {
            try encodeContainer.encode(fromRelationalDatabaseBlueprintId, forKey: .fromRelationalDatabaseBlueprintId)
        }
        if let fromRelationalDatabaseBundleId = self.fromRelationalDatabaseBundleId {
            try encodeContainer.encode(fromRelationalDatabaseBundleId, forKey: .fromRelationalDatabaseBundleId)
        }
        if let fromRelationalDatabaseName = self.fromRelationalDatabaseName {
            try encodeContainer.encode(fromRelationalDatabaseName, forKey: .fromRelationalDatabaseName)
        }
        if let location = self.location {
            try encodeContainer.encode(location, forKey: .location)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let resourceType = self.resourceType {
            try encodeContainer.encode(resourceType.rawValue, forKey: .resourceType)
        }
        if let sizeInGb = self.sizeInGb {
            try encodeContainer.encode(sizeInGb, forKey: .sizeInGb)
        }
        if let state = self.state {
            try encodeContainer.encode(state, forKey: .state)
        }
        if let supportCode = self.supportCode {
            try encodeContainer.encode(supportCode, forKey: .supportCode)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let supportCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .supportCode)
        supportCode = supportCodeDecoded
        let createdAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdAt)
        createdAt = createdAtDecoded
        let locationDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.ResourceLocation.self, forKey: .location)
        location = locationDecoded
        let resourceTypeDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.ResourceType.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let tagsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[LightsailClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [LightsailClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let engineDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .engine)
        engine = engineDecoded
        let engineVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .engineVersion)
        engineVersion = engineVersionDecoded
        let sizeInGbDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .sizeInGb)
        sizeInGb = sizeInGbDecoded
        let stateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .state)
        state = stateDecoded
        let fromRelationalDatabaseNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fromRelationalDatabaseName)
        fromRelationalDatabaseName = fromRelationalDatabaseNameDecoded
        let fromRelationalDatabaseArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fromRelationalDatabaseArn)
        fromRelationalDatabaseArn = fromRelationalDatabaseArnDecoded
        let fromRelationalDatabaseBundleIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fromRelationalDatabaseBundleId)
        fromRelationalDatabaseBundleId = fromRelationalDatabaseBundleIdDecoded
        let fromRelationalDatabaseBlueprintIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fromRelationalDatabaseBlueprintId)
        fromRelationalDatabaseBlueprintId = fromRelationalDatabaseBlueprintIdDecoded
    }
}
