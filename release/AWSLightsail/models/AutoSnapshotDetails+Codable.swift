// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension LightsailClientTypes.AutoSnapshotDetails: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createdAt
        case date
        case fromAttachedDisks
        case status
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let createdAt = self.createdAt {
            try encodeContainer.encode(createdAt.timeIntervalSince1970, forKey: .createdAt)
        }
        if let date = self.date {
            try encodeContainer.encode(date, forKey: .date)
        }
        if let fromAttachedDisks = fromAttachedDisks {
            var fromAttachedDisksContainer = encodeContainer.nestedUnkeyedContainer(forKey: .fromAttachedDisks)
            for attacheddisklist0 in fromAttachedDisks {
                try fromAttachedDisksContainer.encode(attacheddisklist0)
            }
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .date)
        date = dateDecoded
        let createdAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdAt)
        createdAt = createdAtDecoded
        let statusDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.AutoSnapshotStatus.self, forKey: .status)
        status = statusDecoded
        let fromAttachedDisksContainer = try containerValues.decodeIfPresent([LightsailClientTypes.AttachedDisk?].self, forKey: .fromAttachedDisks)
        var fromAttachedDisksDecoded0:[LightsailClientTypes.AttachedDisk]? = nil
        if let fromAttachedDisksContainer = fromAttachedDisksContainer {
            fromAttachedDisksDecoded0 = [LightsailClientTypes.AttachedDisk]()
            for structure0 in fromAttachedDisksContainer {
                if let structure0 = structure0 {
                    fromAttachedDisksDecoded0?.append(structure0)
                }
            }
        }
        fromAttachedDisks = fromAttachedDisksDecoded0
    }
}
