// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension LightsailClientTypes.CacheSettings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case allowedHTTPMethods
        case cachedHTTPMethods
        case defaultTTL
        case forwardedCookies
        case forwardedHeaders
        case forwardedQueryStrings
        case maximumTTL
        case minimumTTL
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let allowedHTTPMethods = self.allowedHTTPMethods {
            try encodeContainer.encode(allowedHTTPMethods, forKey: .allowedHTTPMethods)
        }
        if let cachedHTTPMethods = self.cachedHTTPMethods {
            try encodeContainer.encode(cachedHTTPMethods, forKey: .cachedHTTPMethods)
        }
        if let defaultTTL = self.defaultTTL {
            try encodeContainer.encode(defaultTTL, forKey: .defaultTTL)
        }
        if let forwardedCookies = self.forwardedCookies {
            try encodeContainer.encode(forwardedCookies, forKey: .forwardedCookies)
        }
        if let forwardedHeaders = self.forwardedHeaders {
            try encodeContainer.encode(forwardedHeaders, forKey: .forwardedHeaders)
        }
        if let forwardedQueryStrings = self.forwardedQueryStrings {
            try encodeContainer.encode(forwardedQueryStrings, forKey: .forwardedQueryStrings)
        }
        if let maximumTTL = self.maximumTTL {
            try encodeContainer.encode(maximumTTL, forKey: .maximumTTL)
        }
        if let minimumTTL = self.minimumTTL {
            try encodeContainer.encode(minimumTTL, forKey: .minimumTTL)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let defaultTTLDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .defaultTTL)
        defaultTTL = defaultTTLDecoded
        let minimumTTLDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .minimumTTL)
        minimumTTL = minimumTTLDecoded
        let maximumTTLDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maximumTTL)
        maximumTTL = maximumTTLDecoded
        let allowedHTTPMethodsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .allowedHTTPMethods)
        allowedHTTPMethods = allowedHTTPMethodsDecoded
        let cachedHTTPMethodsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cachedHTTPMethods)
        cachedHTTPMethods = cachedHTTPMethodsDecoded
        let forwardedCookiesDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.CookieObject.self, forKey: .forwardedCookies)
        forwardedCookies = forwardedCookiesDecoded
        let forwardedHeadersDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.HeaderObject.self, forKey: .forwardedHeaders)
        forwardedHeaders = forwardedHeadersDecoded
        let forwardedQueryStringsDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.QueryStringObject.self, forKey: .forwardedQueryStrings)
        forwardedQueryStrings = forwardedQueryStringsDecoded
    }
}
