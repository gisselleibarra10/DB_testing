// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CreateDistributionInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bundleId
        case cacheBehaviorSettings
        case cacheBehaviors
        case defaultCacheBehavior
        case distributionName
        case ipAddressType
        case origin
        case tags
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let bundleId = self.bundleId {
            try encodeContainer.encode(bundleId, forKey: .bundleId)
        }
        if let cacheBehaviorSettings = self.cacheBehaviorSettings {
            try encodeContainer.encode(cacheBehaviorSettings, forKey: .cacheBehaviorSettings)
        }
        if let cacheBehaviors = cacheBehaviors {
            var cacheBehaviorsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .cacheBehaviors)
            for cachebehaviorlist0 in cacheBehaviors {
                try cacheBehaviorsContainer.encode(cachebehaviorlist0)
            }
        }
        if let defaultCacheBehavior = self.defaultCacheBehavior {
            try encodeContainer.encode(defaultCacheBehavior, forKey: .defaultCacheBehavior)
        }
        if let distributionName = self.distributionName {
            try encodeContainer.encode(distributionName, forKey: .distributionName)
        }
        if let ipAddressType = self.ipAddressType {
            try encodeContainer.encode(ipAddressType.rawValue, forKey: .ipAddressType)
        }
        if let origin = self.origin {
            try encodeContainer.encode(origin, forKey: .origin)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }
}
