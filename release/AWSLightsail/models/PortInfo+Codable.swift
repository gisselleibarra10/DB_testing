// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension LightsailClientTypes.PortInfo: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cidrListAliases
        case cidrs
        case fromPort
        case ipv6Cidrs
        case `protocol` = "protocol"
        case toPort
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cidrListAliases = cidrListAliases {
            var cidrListAliasesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .cidrListAliases)
            for stringlist0 in cidrListAliases {
                try cidrListAliasesContainer.encode(stringlist0)
            }
        }
        if let cidrs = cidrs {
            var cidrsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .cidrs)
            for stringlist0 in cidrs {
                try cidrsContainer.encode(stringlist0)
            }
        }
        if fromPort != 0 {
            try encodeContainer.encode(fromPort, forKey: .fromPort)
        }
        if let ipv6Cidrs = ipv6Cidrs {
            var ipv6CidrsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .ipv6Cidrs)
            for stringlist0 in ipv6Cidrs {
                try ipv6CidrsContainer.encode(stringlist0)
            }
        }
        if let `protocol` = self.`protocol` {
            try encodeContainer.encode(`protocol`.rawValue, forKey: .`protocol`)
        }
        if toPort != 0 {
            try encodeContainer.encode(toPort, forKey: .toPort)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fromPortDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .fromPort) ?? 0
        fromPort = fromPortDecoded
        let toPortDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .toPort) ?? 0
        toPort = toPortDecoded
        let protocolDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.NetworkProtocol.self, forKey: .protocol)
        `protocol` = protocolDecoded
        let cidrsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .cidrs)
        var cidrsDecoded0:[Swift.String]? = nil
        if let cidrsContainer = cidrsContainer {
            cidrsDecoded0 = [Swift.String]()
            for string0 in cidrsContainer {
                if let string0 = string0 {
                    cidrsDecoded0?.append(string0)
                }
            }
        }
        cidrs = cidrsDecoded0
        let ipv6CidrsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .ipv6Cidrs)
        var ipv6CidrsDecoded0:[Swift.String]? = nil
        if let ipv6CidrsContainer = ipv6CidrsContainer {
            ipv6CidrsDecoded0 = [Swift.String]()
            for string0 in ipv6CidrsContainer {
                if let string0 = string0 {
                    ipv6CidrsDecoded0?.append(string0)
                }
            }
        }
        ipv6Cidrs = ipv6CidrsDecoded0
        let cidrListAliasesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .cidrListAliases)
        var cidrListAliasesDecoded0:[Swift.String]? = nil
        if let cidrListAliasesContainer = cidrListAliasesContainer {
            cidrListAliasesDecoded0 = [Swift.String]()
            for string0 in cidrListAliasesContainer {
                if let string0 = string0 {
                    cidrListAliasesDecoded0?.append(string0)
                }
            }
        }
        cidrListAliases = cidrListAliasesDecoded0
    }
}
