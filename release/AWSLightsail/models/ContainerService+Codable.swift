// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension LightsailClientTypes.ContainerService: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn
        case containerServiceName
        case createdAt
        case currentDeployment
        case isDisabled
        case location
        case nextDeployment
        case power
        case powerId
        case principalArn
        case privateDomainName
        case privateRegistryAccess
        case publicDomainNames
        case resourceType
        case scale
        case state
        case stateDetail
        case tags
        case url
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = self.arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let containerServiceName = self.containerServiceName {
            try encodeContainer.encode(containerServiceName, forKey: .containerServiceName)
        }
        if let createdAt = self.createdAt {
            try encodeContainer.encode(createdAt.timeIntervalSince1970, forKey: .createdAt)
        }
        if let currentDeployment = self.currentDeployment {
            try encodeContainer.encode(currentDeployment, forKey: .currentDeployment)
        }
        if let isDisabled = self.isDisabled {
            try encodeContainer.encode(isDisabled, forKey: .isDisabled)
        }
        if let location = self.location {
            try encodeContainer.encode(location, forKey: .location)
        }
        if let nextDeployment = self.nextDeployment {
            try encodeContainer.encode(nextDeployment, forKey: .nextDeployment)
        }
        if let power = self.power {
            try encodeContainer.encode(power.rawValue, forKey: .power)
        }
        if let powerId = self.powerId {
            try encodeContainer.encode(powerId, forKey: .powerId)
        }
        if let principalArn = self.principalArn {
            try encodeContainer.encode(principalArn, forKey: .principalArn)
        }
        if let privateDomainName = self.privateDomainName {
            try encodeContainer.encode(privateDomainName, forKey: .privateDomainName)
        }
        if let privateRegistryAccess = self.privateRegistryAccess {
            try encodeContainer.encode(privateRegistryAccess, forKey: .privateRegistryAccess)
        }
        if let publicDomainNames = publicDomainNames {
            var publicDomainNamesContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .publicDomainNames)
            for (dictKey0, containerservicepublicdomains0) in publicDomainNames {
                try publicDomainNamesContainer.encode(containerservicepublicdomains0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let resourceType = self.resourceType {
            try encodeContainer.encode(resourceType.rawValue, forKey: .resourceType)
        }
        if let scale = self.scale {
            try encodeContainer.encode(scale, forKey: .scale)
        }
        if let state = self.state {
            try encodeContainer.encode(state.rawValue, forKey: .state)
        }
        if let stateDetail = self.stateDetail {
            try encodeContainer.encode(stateDetail, forKey: .stateDetail)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
        if let url = self.url {
            try encodeContainer.encode(url, forKey: .url)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let containerServiceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .containerServiceName)
        containerServiceName = containerServiceNameDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let createdAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdAt)
        createdAt = createdAtDecoded
        let locationDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.ResourceLocation.self, forKey: .location)
        location = locationDecoded
        let resourceTypeDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.ResourceType.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let tagsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[LightsailClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [LightsailClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let powerDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.ContainerServicePowerName.self, forKey: .power)
        power = powerDecoded
        let powerIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .powerId)
        powerId = powerIdDecoded
        let stateDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.ContainerServiceState.self, forKey: .state)
        state = stateDecoded
        let stateDetailDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.ContainerServiceStateDetail.self, forKey: .stateDetail)
        stateDetail = stateDetailDecoded
        let scaleDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .scale)
        scale = scaleDecoded
        let currentDeploymentDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.ContainerServiceDeployment.self, forKey: .currentDeployment)
        currentDeployment = currentDeploymentDecoded
        let nextDeploymentDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.ContainerServiceDeployment.self, forKey: .nextDeployment)
        nextDeployment = nextDeploymentDecoded
        let isDisabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .isDisabled)
        isDisabled = isDisabledDecoded
        let principalArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .principalArn)
        principalArn = principalArnDecoded
        let privateDomainNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .privateDomainName)
        privateDomainName = privateDomainNameDecoded
        let publicDomainNamesContainer = try containerValues.decodeIfPresent([Swift.String: [Swift.String?]?].self, forKey: .publicDomainNames)
        var publicDomainNamesDecoded0: [Swift.String:[Swift.String]]? = nil
        if let publicDomainNamesContainer = publicDomainNamesContainer {
            publicDomainNamesDecoded0 = [Swift.String:[Swift.String]]()
            for (key0, containerservicepublicdomainslist0) in publicDomainNamesContainer {
                var containerservicepublicdomainslist0Decoded0: [Swift.String]? = nil
                if let containerservicepublicdomainslist0 = containerservicepublicdomainslist0 {
                    containerservicepublicdomainslist0Decoded0 = [Swift.String]()
                    for string1 in containerservicepublicdomainslist0 {
                        if let string1 = string1 {
                            containerservicepublicdomainslist0Decoded0?.append(string1)
                        }
                    }
                }
                publicDomainNamesDecoded0?[key0] = containerservicepublicdomainslist0Decoded0
            }
        }
        publicDomainNames = publicDomainNamesDecoded0
        let urlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .url)
        url = urlDecoded
        let privateRegistryAccessDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.PrivateRegistryAccess.self, forKey: .privateRegistryAccess)
        privateRegistryAccess = privateRegistryAccessDecoded
    }
}
