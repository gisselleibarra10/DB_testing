// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension LightsailClientTypes.Operation: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createdAt
        case errorCode
        case errorDetails
        case id
        case isTerminal
        case location
        case operationDetails
        case operationType
        case resourceName
        case resourceType
        case status
        case statusChangedAt
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let createdAt = self.createdAt {
            try encodeContainer.encode(createdAt.timeIntervalSince1970, forKey: .createdAt)
        }
        if let errorCode = self.errorCode {
            try encodeContainer.encode(errorCode, forKey: .errorCode)
        }
        if let errorDetails = self.errorDetails {
            try encodeContainer.encode(errorDetails, forKey: .errorDetails)
        }
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let isTerminal = self.isTerminal {
            try encodeContainer.encode(isTerminal, forKey: .isTerminal)
        }
        if let location = self.location {
            try encodeContainer.encode(location, forKey: .location)
        }
        if let operationDetails = self.operationDetails {
            try encodeContainer.encode(operationDetails, forKey: .operationDetails)
        }
        if let operationType = self.operationType {
            try encodeContainer.encode(operationType.rawValue, forKey: .operationType)
        }
        if let resourceName = self.resourceName {
            try encodeContainer.encode(resourceName, forKey: .resourceName)
        }
        if let resourceType = self.resourceType {
            try encodeContainer.encode(resourceType.rawValue, forKey: .resourceType)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let statusChangedAt = self.statusChangedAt {
            try encodeContainer.encode(statusChangedAt.timeIntervalSince1970, forKey: .statusChangedAt)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let resourceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceName)
        resourceName = resourceNameDecoded
        let resourceTypeDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.ResourceType.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let createdAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdAt)
        createdAt = createdAtDecoded
        let locationDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.ResourceLocation.self, forKey: .location)
        location = locationDecoded
        let isTerminalDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .isTerminal)
        isTerminal = isTerminalDecoded
        let operationDetailsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .operationDetails)
        operationDetails = operationDetailsDecoded
        let operationTypeDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.OperationType.self, forKey: .operationType)
        operationType = operationTypeDecoded
        let statusDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.OperationStatus.self, forKey: .status)
        status = statusDecoded
        let statusChangedAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .statusChangedAt)
        statusChangedAt = statusChangedAtDecoded
        let errorCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .errorCode)
        errorCode = errorCodeDecoded
        let errorDetailsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .errorDetails)
        errorDetails = errorDetailsDecoded
    }
}
