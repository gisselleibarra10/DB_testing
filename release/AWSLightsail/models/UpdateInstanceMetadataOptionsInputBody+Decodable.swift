// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct UpdateInstanceMetadataOptionsInputBody: Swift.Equatable {
    let instanceName: Swift.String?
    let httpTokens: LightsailClientTypes.HttpTokens?
    let httpEndpoint: LightsailClientTypes.HttpEndpoint?
    let httpPutResponseHopLimit: Swift.Int?
    let httpProtocolIpv6: LightsailClientTypes.HttpProtocolIpv6?
}

extension UpdateInstanceMetadataOptionsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case httpEndpoint
        case httpProtocolIpv6
        case httpPutResponseHopLimit
        case httpTokens
        case instanceName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instanceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceName)
        instanceName = instanceNameDecoded
        let httpTokensDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.HttpTokens.self, forKey: .httpTokens)
        httpTokens = httpTokensDecoded
        let httpEndpointDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.HttpEndpoint.self, forKey: .httpEndpoint)
        httpEndpoint = httpEndpointDecoded
        let httpPutResponseHopLimitDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .httpPutResponseHopLimit)
        httpPutResponseHopLimit = httpPutResponseHopLimitDecoded
        let httpProtocolIpv6Decoded = try containerValues.decodeIfPresent(LightsailClientTypes.HttpProtocolIpv6.self, forKey: .httpProtocolIpv6)
        httpProtocolIpv6 = httpProtocolIpv6Decoded
    }
}
