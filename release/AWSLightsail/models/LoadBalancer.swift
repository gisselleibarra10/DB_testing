// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension LightsailClientTypes {
    /// Describes a load balancer.
    public struct LoadBalancer: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the load balancer.
        public var arn: Swift.String?
        /// A string to string map of the configuration options for your load balancer. Valid values are listed below.
        public var configurationOptions: [Swift.String:Swift.String]?
        /// The date when your load balancer was created.
        public var createdAt: ClientRuntime.Date?
        /// The DNS name of your Lightsail load balancer.
        public var dnsName: Swift.String?
        /// The path you specified to perform your health checks. If no path is specified, the load balancer tries to make a request to the default (root) page.
        public var healthCheckPath: Swift.String?
        /// A Boolean value that indicates whether HTTPS redirection is enabled for the load balancer.
        public var httpsRedirectionEnabled: Swift.Bool?
        /// An array of InstanceHealthSummary objects describing the health of the load balancer.
        public var instanceHealthSummary: [LightsailClientTypes.InstanceHealthSummary]?
        /// The port where the load balancer will direct traffic to your Lightsail instances. For HTTP traffic, it's port 80. For HTTPS traffic, it's port 443.
        public var instancePort: Swift.Int?
        /// The IP address type of the load balancer. The possible values are ipv4 for IPv4 only, and dualstack for IPv4 and IPv6.
        public var ipAddressType: LightsailClientTypes.IpAddressType?
        /// The AWS Region where your load balancer was created (e.g., us-east-2a). Lightsail automatically creates your load balancer across Availability Zones.
        public var location: LightsailClientTypes.ResourceLocation?
        /// The name of the load balancer (e.g., my-load-balancer).
        public var name: Swift.String?
        /// The protocol you have enabled for your load balancer. Valid values are below. You can't just have HTTP_HTTPS, but you can have just HTTP.
        public var `protocol`: LightsailClientTypes.LoadBalancerProtocol?
        /// An array of public port settings for your load balancer. For HTTP, use port 80. For HTTPS, use port 443.
        public var publicPorts: [Swift.Int]?
        /// The resource type (e.g., LoadBalancer.
        public var resourceType: LightsailClientTypes.ResourceType?
        /// The status of your load balancer. Valid values are below.
        public var state: LightsailClientTypes.LoadBalancerState?
        /// The support code. Include this code in your email to support when you have questions about your Lightsail load balancer. This code enables our support team to look up your Lightsail information more easily.
        public var supportCode: Swift.String?
        /// The tag keys and optional values for the resource. For more information about tags in Lightsail, see the [Amazon Lightsail Developer Guide](https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-tags).
        public var tags: [LightsailClientTypes.Tag]?
        /// An array of LoadBalancerTlsCertificateSummary objects that provide additional information about the SSL/TLS certificates. For example, if true, the certificate is attached to the load balancer.
        public var tlsCertificateSummaries: [LightsailClientTypes.LoadBalancerTlsCertificateSummary]?
        /// The name of the TLS security policy for the load balancer.
        public var tlsPolicyName: Swift.String?

        public init (
            arn: Swift.String? = nil,
            configurationOptions: [Swift.String:Swift.String]? = nil,
            createdAt: ClientRuntime.Date? = nil,
            dnsName: Swift.String? = nil,
            healthCheckPath: Swift.String? = nil,
            httpsRedirectionEnabled: Swift.Bool? = nil,
            instanceHealthSummary: [LightsailClientTypes.InstanceHealthSummary]? = nil,
            instancePort: Swift.Int? = nil,
            ipAddressType: LightsailClientTypes.IpAddressType? = nil,
            location: LightsailClientTypes.ResourceLocation? = nil,
            name: Swift.String? = nil,
            `protocol`: LightsailClientTypes.LoadBalancerProtocol? = nil,
            publicPorts: [Swift.Int]? = nil,
            resourceType: LightsailClientTypes.ResourceType? = nil,
            state: LightsailClientTypes.LoadBalancerState? = nil,
            supportCode: Swift.String? = nil,
            tags: [LightsailClientTypes.Tag]? = nil,
            tlsCertificateSummaries: [LightsailClientTypes.LoadBalancerTlsCertificateSummary]? = nil,
            tlsPolicyName: Swift.String? = nil
        )
        {
            self.arn = arn
            self.configurationOptions = configurationOptions
            self.createdAt = createdAt
            self.dnsName = dnsName
            self.healthCheckPath = healthCheckPath
            self.httpsRedirectionEnabled = httpsRedirectionEnabled
            self.instanceHealthSummary = instanceHealthSummary
            self.instancePort = instancePort
            self.ipAddressType = ipAddressType
            self.location = location
            self.name = name
            self.`protocol` = `protocol`
            self.publicPorts = publicPorts
            self.resourceType = resourceType
            self.state = state
            self.supportCode = supportCode
            self.tags = tags
            self.tlsCertificateSummaries = tlsCertificateSummaries
            self.tlsPolicyName = tlsPolicyName
        }
    }

}
