// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension LightsailClientTypes.QueryStringObject: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case option
        case queryStringsAllowList
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let option = self.option {
            try encodeContainer.encode(option, forKey: .option)
        }
        if let queryStringsAllowList = queryStringsAllowList {
            var queryStringsAllowListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .queryStringsAllowList)
            for stringlist0 in queryStringsAllowList {
                try queryStringsAllowListContainer.encode(stringlist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let optionDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .option)
        option = optionDecoded
        let queryStringsAllowListContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .queryStringsAllowList)
        var queryStringsAllowListDecoded0:[Swift.String]? = nil
        if let queryStringsAllowListContainer = queryStringsAllowListContainer {
            queryStringsAllowListDecoded0 = [Swift.String]()
            for string0 in queryStringsAllowListContainer {
                if let string0 = string0 {
                    queryStringsAllowListDecoded0?.append(string0)
                }
            }
        }
        queryStringsAllowList = queryStringsAllowListDecoded0
    }
}
