// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension LightsailClientTypes.ContainerServiceDeploymentRequest: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case containers
        case publicEndpoint
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let containers = containers {
            var containersContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .containers)
            for (dictKey0, containermap0) in containers {
                try containersContainer.encode(containermap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let publicEndpoint = self.publicEndpoint {
            try encodeContainer.encode(publicEndpoint, forKey: .publicEndpoint)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let containersContainer = try containerValues.decodeIfPresent([Swift.String: LightsailClientTypes.Container?].self, forKey: .containers)
        var containersDecoded0: [Swift.String:LightsailClientTypes.Container]? = nil
        if let containersContainer = containersContainer {
            containersDecoded0 = [Swift.String:LightsailClientTypes.Container]()
            for (key0, container0) in containersContainer {
                if let container0 = container0 {
                    containersDecoded0?[key0] = container0
                }
            }
        }
        containers = containersDecoded0
        let publicEndpointDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.EndpointRequest.self, forKey: .publicEndpoint)
        publicEndpoint = publicEndpointDecoded
    }
}
