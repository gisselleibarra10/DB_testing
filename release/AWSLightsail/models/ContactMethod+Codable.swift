// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension LightsailClientTypes.ContactMethod: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn
        case contactEndpoint
        case createdAt
        case location
        case name
        case `protocol` = "protocol"
        case resourceType
        case status
        case supportCode
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = self.arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let contactEndpoint = self.contactEndpoint {
            try encodeContainer.encode(contactEndpoint, forKey: .contactEndpoint)
        }
        if let createdAt = self.createdAt {
            try encodeContainer.encode(createdAt.timeIntervalSince1970, forKey: .createdAt)
        }
        if let location = self.location {
            try encodeContainer.encode(location, forKey: .location)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let `protocol` = self.`protocol` {
            try encodeContainer.encode(`protocol`.rawValue, forKey: .`protocol`)
        }
        if let resourceType = self.resourceType {
            try encodeContainer.encode(resourceType.rawValue, forKey: .resourceType)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let supportCode = self.supportCode {
            try encodeContainer.encode(supportCode, forKey: .supportCode)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let contactEndpointDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .contactEndpoint)
        contactEndpoint = contactEndpointDecoded
        let statusDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.ContactMethodStatus.self, forKey: .status)
        status = statusDecoded
        let protocolDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.ContactProtocol.self, forKey: .protocol)
        `protocol` = protocolDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let createdAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdAt)
        createdAt = createdAtDecoded
        let locationDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.ResourceLocation.self, forKey: .location)
        location = locationDecoded
        let resourceTypeDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.ResourceType.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let supportCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .supportCode)
        supportCode = supportCodeDecoded
    }
}
