// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CreateContainerServiceInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deployment
        case power
        case privateRegistryAccess
        case publicDomainNames
        case scale
        case serviceName
        case tags
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let deployment = self.deployment {
            try encodeContainer.encode(deployment, forKey: .deployment)
        }
        if let power = self.power {
            try encodeContainer.encode(power.rawValue, forKey: .power)
        }
        if let privateRegistryAccess = self.privateRegistryAccess {
            try encodeContainer.encode(privateRegistryAccess, forKey: .privateRegistryAccess)
        }
        if let publicDomainNames = publicDomainNames {
            var publicDomainNamesContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .publicDomainNames)
            for (dictKey0, containerservicepublicdomains0) in publicDomainNames {
                try publicDomainNamesContainer.encode(containerservicepublicdomains0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let scale = self.scale {
            try encodeContainer.encode(scale, forKey: .scale)
        }
        if let serviceName = self.serviceName {
            try encodeContainer.encode(serviceName, forKey: .serviceName)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }
}
