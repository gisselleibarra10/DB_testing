// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension LightsailClientTypes {
    /// Describes an alarm. An alarm is a way to monitor your Lightsail resource metrics. For more information, see [Alarms in Amazon Lightsail](https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-alarms).
    public struct Alarm: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the alarm.
        public var arn: Swift.String?
        /// The arithmetic operation used when comparing the specified statistic and threshold.
        public var comparisonOperator: LightsailClientTypes.ComparisonOperator?
        /// The contact protocols for the alarm, such as Email, SMS (text messaging), or both.
        public var contactProtocols: [LightsailClientTypes.ContactProtocol]?
        /// The timestamp when the alarm was created.
        public var createdAt: ClientRuntime.Date?
        /// The number of data points that must not within the specified threshold to trigger the alarm.
        public var datapointsToAlarm: Swift.Int?
        /// The number of periods over which data is compared to the specified threshold.
        public var evaluationPeriods: Swift.Int?
        /// An object that lists information about the location of the alarm.
        public var location: LightsailClientTypes.ResourceLocation?
        /// The name of the metric associated with the alarm.
        public var metricName: LightsailClientTypes.MetricName?
        /// An object that lists information about the resource monitored by the alarm.
        public var monitoredResourceInfo: LightsailClientTypes.MonitoredResourceInfo?
        /// The name of the alarm.
        public var name: Swift.String?
        /// Indicates whether the alarm is enabled.
        public var notificationEnabled: Swift.Bool?
        /// The alarm states that trigger a notification.
        public var notificationTriggers: [LightsailClientTypes.AlarmState]?
        /// The period, in seconds, over which the statistic is applied.
        public var period: Swift.Int
        /// The Lightsail resource type (e.g., Alarm).
        public var resourceType: LightsailClientTypes.ResourceType?
        /// The current state of the alarm. An alarm has the following possible states:
        ///
        /// * ALARM - The metric is outside of the defined threshold.
        ///
        /// * INSUFFICIENT_DATA - The alarm has just started, the metric is not available, or not enough data is available for the metric to determine the alarm state.
        ///
        /// * OK - The metric is within the defined threshold.
        public var state: LightsailClientTypes.AlarmState?
        /// The statistic for the metric associated with the alarm. The following statistics are available:
        ///
        /// * Minimum - The lowest value observed during the specified period. Use this value to determine low volumes of activity for your application.
        ///
        /// * Maximum - The highest value observed during the specified period. Use this value to determine high volumes of activity for your application.
        ///
        /// * Sum - All values submitted for the matching metric added together. You can use this statistic to determine the total volume of a metric.
        ///
        /// * Average - The value of Sum / SampleCount during the specified period. By comparing this statistic with the Minimum and Maximum values, you can determine the full scope of a metric and how close the average use is to the Minimum and Maximum values. This comparison helps you to know when to increase or decrease your resources.
        ///
        /// * SampleCount - The count, or number, of data points used for the statistical calculation.
        public var statistic: LightsailClientTypes.MetricStatistic?
        /// The support code. Include this code in your email to support when you have questions about your Lightsail alarm. This code enables our support team to look up your Lightsail information more easily.
        public var supportCode: Swift.String?
        /// The value against which the specified statistic is compared.
        public var threshold: Swift.Double?
        /// Specifies how the alarm handles missing data points. An alarm can treat missing data in the following ways:
        ///
        /// * breaching - Assume the missing data is not within the threshold. Missing data counts towards the number of times the metric is not within the threshold.
        ///
        /// * notBreaching - Assume the missing data is within the threshold. Missing data does not count towards the number of times the metric is not within the threshold.
        ///
        /// * ignore - Ignore the missing data. Maintains the current alarm state.
        ///
        /// * missing - Missing data is treated as missing.
        public var treatMissingData: LightsailClientTypes.TreatMissingData?
        /// The unit of the metric associated with the alarm.
        public var unit: LightsailClientTypes.MetricUnit?

        public init (
            arn: Swift.String? = nil,
            comparisonOperator: LightsailClientTypes.ComparisonOperator? = nil,
            contactProtocols: [LightsailClientTypes.ContactProtocol]? = nil,
            createdAt: ClientRuntime.Date? = nil,
            datapointsToAlarm: Swift.Int? = nil,
            evaluationPeriods: Swift.Int? = nil,
            location: LightsailClientTypes.ResourceLocation? = nil,
            metricName: LightsailClientTypes.MetricName? = nil,
            monitoredResourceInfo: LightsailClientTypes.MonitoredResourceInfo? = nil,
            name: Swift.String? = nil,
            notificationEnabled: Swift.Bool? = nil,
            notificationTriggers: [LightsailClientTypes.AlarmState]? = nil,
            period: Swift.Int = 0,
            resourceType: LightsailClientTypes.ResourceType? = nil,
            state: LightsailClientTypes.AlarmState? = nil,
            statistic: LightsailClientTypes.MetricStatistic? = nil,
            supportCode: Swift.String? = nil,
            threshold: Swift.Double? = nil,
            treatMissingData: LightsailClientTypes.TreatMissingData? = nil,
            unit: LightsailClientTypes.MetricUnit? = nil
        )
        {
            self.arn = arn
            self.comparisonOperator = comparisonOperator
            self.contactProtocols = contactProtocols
            self.createdAt = createdAt
            self.datapointsToAlarm = datapointsToAlarm
            self.evaluationPeriods = evaluationPeriods
            self.location = location
            self.metricName = metricName
            self.monitoredResourceInfo = monitoredResourceInfo
            self.name = name
            self.notificationEnabled = notificationEnabled
            self.notificationTriggers = notificationTriggers
            self.period = period
            self.resourceType = resourceType
            self.state = state
            self.statistic = statistic
            self.supportCode = supportCode
            self.threshold = threshold
            self.treatMissingData = treatMissingData
            self.unit = unit
        }
    }

}
