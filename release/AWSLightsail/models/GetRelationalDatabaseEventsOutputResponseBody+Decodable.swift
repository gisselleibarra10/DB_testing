// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetRelationalDatabaseEventsOutputResponseBody: Swift.Equatable {
    let relationalDatabaseEvents: [LightsailClientTypes.RelationalDatabaseEvent]?
    let nextPageToken: Swift.String?
}

extension GetRelationalDatabaseEventsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextPageToken
        case relationalDatabaseEvents
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let relationalDatabaseEventsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.RelationalDatabaseEvent?].self, forKey: .relationalDatabaseEvents)
        var relationalDatabaseEventsDecoded0:[LightsailClientTypes.RelationalDatabaseEvent]? = nil
        if let relationalDatabaseEventsContainer = relationalDatabaseEventsContainer {
            relationalDatabaseEventsDecoded0 = [LightsailClientTypes.RelationalDatabaseEvent]()
            for structure0 in relationalDatabaseEventsContainer {
                if let structure0 = structure0 {
                    relationalDatabaseEventsDecoded0?.append(structure0)
                }
            }
        }
        relationalDatabaseEvents = relationalDatabaseEventsDecoded0
        let nextPageTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextPageToken)
        nextPageToken = nextPageTokenDecoded
    }
}
