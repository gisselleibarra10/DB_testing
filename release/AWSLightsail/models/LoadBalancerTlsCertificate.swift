// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension LightsailClientTypes {
    /// Describes a load balancer SSL/TLS certificate. TLS is just an updated, more secure version of Secure Socket Layer (SSL).
    public struct LoadBalancerTlsCertificate: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the SSL/TLS certificate.
        public var arn: Swift.String?
        /// The time when you created your SSL/TLS certificate.
        public var createdAt: ClientRuntime.Date?
        /// The domain name for your SSL/TLS certificate.
        public var domainName: Swift.String?
        /// An array of LoadBalancerTlsCertificateDomainValidationRecord objects describing the records.
        public var domainValidationRecords: [LightsailClientTypes.LoadBalancerTlsCertificateDomainValidationRecord]?
        /// The validation failure reason, if any, of the certificate. The following failure reasons are possible:
        ///
        /// * NO_AVAILABLE_CONTACTS - This failure applies to email validation, which is not available for Lightsail certificates.
        ///
        /// * ADDITIONAL_VERIFICATION_REQUIRED - Lightsail requires additional information to process this certificate request. This can happen as a fraud-protection measure, such as when the domain ranks within the Alexa top 1000 websites. To provide the required information, use the [AWS Support Center](https://console.aws.amazon.com/support/home) to contact AWS Support. You cannot request a certificate for Amazon-owned domain names such as those ending in amazonaws.com, cloudfront.net, or elasticbeanstalk.com.
        ///
        /// * DOMAIN_NOT_ALLOWED - One or more of the domain names in the certificate request was reported as an unsafe domain by [VirusTotal](https://www.virustotal.com/gui/home/url). To correct the problem, search for your domain name on the [VirusTotal](https://www.virustotal.com/gui/home/url) website. If your domain is reported as suspicious, see [Google Help for Hacked Websites](https://developers.google.com/web/fundamentals/security/hacked) to learn what you can do. If you believe that the result is a false positive, notify the organization that is reporting the domain. VirusTotal is an aggregate of several antivirus and URL scanners and cannot remove your domain from a block list itself. After you correct the problem and the VirusTotal registry has been updated, request a new certificate. If you see this error and your domain is not included in the VirusTotal list, visit the [AWS Support Center](https://console.aws.amazon.com/support/home) and create a case.
        ///
        /// * INVALID_PUBLIC_DOMAIN - One or more of the domain names in the certificate request is not valid. Typically, this is because a domain name in the request is not a valid top-level domain. Try to request a certificate again, correcting any spelling errors or typos that were in the failed request, and ensure that all domain names in the request are for valid top-level domains. For example, you cannot request a certificate for example.invalidpublicdomain because invalidpublicdomain is not a valid top-level domain.
        ///
        /// * OTHER - Typically, this failure occurs when there is a typographical error in one or more of the domain names in the certificate request. Try to request a certificate again, correcting any spelling errors or typos that were in the failed request.
        public var failureReason: LightsailClientTypes.LoadBalancerTlsCertificateFailureReason?
        /// When true, the SSL/TLS certificate is attached to the Lightsail load balancer.
        public var isAttached: Swift.Bool?
        /// The time when the SSL/TLS certificate was issued.
        public var issuedAt: ClientRuntime.Date?
        /// The issuer of the certificate.
        public var issuer: Swift.String?
        /// The algorithm used to generate the key pair (the public and private key).
        public var keyAlgorithm: Swift.String?
        /// The load balancer name where your SSL/TLS certificate is attached.
        public var loadBalancerName: Swift.String?
        /// The AWS Region and Availability Zone where you created your certificate.
        public var location: LightsailClientTypes.ResourceLocation?
        /// The name of the SSL/TLS certificate (e.g., my-certificate).
        public var name: Swift.String?
        /// The timestamp when the SSL/TLS certificate expires.
        public var notAfter: ClientRuntime.Date?
        /// The timestamp when the SSL/TLS certificate is first valid.
        public var notBefore: ClientRuntime.Date?
        /// An object that describes the status of the certificate renewal managed by Lightsail.
        public var renewalSummary: LightsailClientTypes.LoadBalancerTlsCertificateRenewalSummary?
        /// The resource type (e.g., LoadBalancerTlsCertificate).
        ///
        /// * Instance - A Lightsail instance (a virtual private server)
        ///
        /// * StaticIp - A static IP address
        ///
        /// * KeyPair - The key pair used to connect to a Lightsail instance
        ///
        /// * InstanceSnapshot - A Lightsail instance snapshot
        ///
        /// * Domain - A DNS zone
        ///
        /// * PeeredVpc - A peered VPC
        ///
        /// * LoadBalancer - A Lightsail load balancer
        ///
        /// * LoadBalancerTlsCertificate - An SSL/TLS certificate associated with a Lightsail load balancer
        ///
        /// * Disk - A Lightsail block storage disk
        ///
        /// * DiskSnapshot - A block storage disk snapshot
        public var resourceType: LightsailClientTypes.ResourceType?
        /// The reason the certificate was revoked. This value is present only when the certificate status is REVOKED.
        public var revocationReason: LightsailClientTypes.LoadBalancerTlsCertificateRevocationReason?
        /// The timestamp when the certificate was revoked. This value is present only when the certificate status is REVOKED.
        public var revokedAt: ClientRuntime.Date?
        /// The serial number of the certificate.
        public var serial: Swift.String?
        /// The algorithm that was used to sign the certificate.
        public var signatureAlgorithm: Swift.String?
        /// The validation status of the SSL/TLS certificate. Valid values are below.
        public var status: LightsailClientTypes.LoadBalancerTlsCertificateStatus?
        /// The name of the entity that is associated with the public key contained in the certificate.
        public var subject: Swift.String?
        /// An array of strings that specify the alternate domains (e.g., example2.com) and subdomains (e.g., blog.example.com) for the certificate.
        public var subjectAlternativeNames: [Swift.String]?
        /// The support code. Include this code in your email to support when you have questions about your Lightsail load balancer or SSL/TLS certificate. This code enables our support team to look up your Lightsail information more easily.
        public var supportCode: Swift.String?
        /// The tag keys and optional values for the resource. For more information about tags in Lightsail, see the [Amazon Lightsail Developer Guide](https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-tags).
        public var tags: [LightsailClientTypes.Tag]?

        public init (
            arn: Swift.String? = nil,
            createdAt: ClientRuntime.Date? = nil,
            domainName: Swift.String? = nil,
            domainValidationRecords: [LightsailClientTypes.LoadBalancerTlsCertificateDomainValidationRecord]? = nil,
            failureReason: LightsailClientTypes.LoadBalancerTlsCertificateFailureReason? = nil,
            isAttached: Swift.Bool? = nil,
            issuedAt: ClientRuntime.Date? = nil,
            issuer: Swift.String? = nil,
            keyAlgorithm: Swift.String? = nil,
            loadBalancerName: Swift.String? = nil,
            location: LightsailClientTypes.ResourceLocation? = nil,
            name: Swift.String? = nil,
            notAfter: ClientRuntime.Date? = nil,
            notBefore: ClientRuntime.Date? = nil,
            renewalSummary: LightsailClientTypes.LoadBalancerTlsCertificateRenewalSummary? = nil,
            resourceType: LightsailClientTypes.ResourceType? = nil,
            revocationReason: LightsailClientTypes.LoadBalancerTlsCertificateRevocationReason? = nil,
            revokedAt: ClientRuntime.Date? = nil,
            serial: Swift.String? = nil,
            signatureAlgorithm: Swift.String? = nil,
            status: LightsailClientTypes.LoadBalancerTlsCertificateStatus? = nil,
            subject: Swift.String? = nil,
            subjectAlternativeNames: [Swift.String]? = nil,
            supportCode: Swift.String? = nil,
            tags: [LightsailClientTypes.Tag]? = nil
        )
        {
            self.arn = arn
            self.createdAt = createdAt
            self.domainName = domainName
            self.domainValidationRecords = domainValidationRecords
            self.failureReason = failureReason
            self.isAttached = isAttached
            self.issuedAt = issuedAt
            self.issuer = issuer
            self.keyAlgorithm = keyAlgorithm
            self.loadBalancerName = loadBalancerName
            self.location = location
            self.name = name
            self.notAfter = notAfter
            self.notBefore = notBefore
            self.renewalSummary = renewalSummary
            self.resourceType = resourceType
            self.revocationReason = revocationReason
            self.revokedAt = revokedAt
            self.serial = serial
            self.signatureAlgorithm = signatureAlgorithm
            self.status = status
            self.subject = subject
            self.subjectAlternativeNames = subjectAlternativeNames
            self.supportCode = supportCode
            self.tags = tags
        }
    }

}
