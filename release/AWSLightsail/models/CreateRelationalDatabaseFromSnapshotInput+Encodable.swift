// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CreateRelationalDatabaseFromSnapshotInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case availabilityZone
        case publiclyAccessible
        case relationalDatabaseBundleId
        case relationalDatabaseName
        case relationalDatabaseSnapshotName
        case restoreTime
        case sourceRelationalDatabaseName
        case tags
        case useLatestRestorableTime
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let availabilityZone = self.availabilityZone {
            try encodeContainer.encode(availabilityZone, forKey: .availabilityZone)
        }
        if let publiclyAccessible = self.publiclyAccessible {
            try encodeContainer.encode(publiclyAccessible, forKey: .publiclyAccessible)
        }
        if let relationalDatabaseBundleId = self.relationalDatabaseBundleId {
            try encodeContainer.encode(relationalDatabaseBundleId, forKey: .relationalDatabaseBundleId)
        }
        if let relationalDatabaseName = self.relationalDatabaseName {
            try encodeContainer.encode(relationalDatabaseName, forKey: .relationalDatabaseName)
        }
        if let relationalDatabaseSnapshotName = self.relationalDatabaseSnapshotName {
            try encodeContainer.encode(relationalDatabaseSnapshotName, forKey: .relationalDatabaseSnapshotName)
        }
        if let restoreTime = self.restoreTime {
            try encodeContainer.encode(restoreTime.timeIntervalSince1970, forKey: .restoreTime)
        }
        if let sourceRelationalDatabaseName = self.sourceRelationalDatabaseName {
            try encodeContainer.encode(sourceRelationalDatabaseName, forKey: .sourceRelationalDatabaseName)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
        if let useLatestRestorableTime = self.useLatestRestorableTime {
            try encodeContainer.encode(useLatestRestorableTime, forKey: .useLatestRestorableTime)
        }
    }
}
