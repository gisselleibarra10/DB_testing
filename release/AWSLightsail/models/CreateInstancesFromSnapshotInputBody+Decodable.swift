// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateInstancesFromSnapshotInputBody: Swift.Equatable {
    let instanceNames: [Swift.String]?
    let attachedDiskMapping: [Swift.String:[LightsailClientTypes.DiskMap]]?
    let availabilityZone: Swift.String?
    let instanceSnapshotName: Swift.String?
    let bundleId: Swift.String?
    let userData: Swift.String?
    let keyPairName: Swift.String?
    let tags: [LightsailClientTypes.Tag]?
    let addOns: [LightsailClientTypes.AddOnRequest]?
    let ipAddressType: LightsailClientTypes.IpAddressType?
    let sourceInstanceName: Swift.String?
    let restoreDate: Swift.String?
    let useLatestRestorableAutoSnapshot: Swift.Bool?
}

extension CreateInstancesFromSnapshotInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case addOns
        case attachedDiskMapping
        case availabilityZone
        case bundleId
        case instanceNames
        case instanceSnapshotName
        case ipAddressType
        case keyPairName
        case restoreDate
        case sourceInstanceName
        case tags
        case useLatestRestorableAutoSnapshot
        case userData
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instanceNamesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .instanceNames)
        var instanceNamesDecoded0:[Swift.String]? = nil
        if let instanceNamesContainer = instanceNamesContainer {
            instanceNamesDecoded0 = [Swift.String]()
            for string0 in instanceNamesContainer {
                if let string0 = string0 {
                    instanceNamesDecoded0?.append(string0)
                }
            }
        }
        instanceNames = instanceNamesDecoded0
        let attachedDiskMappingContainer = try containerValues.decodeIfPresent([Swift.String: [LightsailClientTypes.DiskMap?]?].self, forKey: .attachedDiskMapping)
        var attachedDiskMappingDecoded0: [Swift.String:[LightsailClientTypes.DiskMap]]? = nil
        if let attachedDiskMappingContainer = attachedDiskMappingContainer {
            attachedDiskMappingDecoded0 = [Swift.String:[LightsailClientTypes.DiskMap]]()
            for (key0, diskmaplist0) in attachedDiskMappingContainer {
                var diskmaplist0Decoded0: [LightsailClientTypes.DiskMap]? = nil
                if let diskmaplist0 = diskmaplist0 {
                    diskmaplist0Decoded0 = [LightsailClientTypes.DiskMap]()
                    for structure1 in diskmaplist0 {
                        if let structure1 = structure1 {
                            diskmaplist0Decoded0?.append(structure1)
                        }
                    }
                }
                attachedDiskMappingDecoded0?[key0] = diskmaplist0Decoded0
            }
        }
        attachedDiskMapping = attachedDiskMappingDecoded0
        let availabilityZoneDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .availabilityZone)
        availabilityZone = availabilityZoneDecoded
        let instanceSnapshotNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceSnapshotName)
        instanceSnapshotName = instanceSnapshotNameDecoded
        let bundleIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .bundleId)
        bundleId = bundleIdDecoded
        let userDataDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userData)
        userData = userDataDecoded
        let keyPairNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyPairName)
        keyPairName = keyPairNameDecoded
        let tagsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[LightsailClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [LightsailClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let addOnsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.AddOnRequest?].self, forKey: .addOns)
        var addOnsDecoded0:[LightsailClientTypes.AddOnRequest]? = nil
        if let addOnsContainer = addOnsContainer {
            addOnsDecoded0 = [LightsailClientTypes.AddOnRequest]()
            for structure0 in addOnsContainer {
                if let structure0 = structure0 {
                    addOnsDecoded0?.append(structure0)
                }
            }
        }
        addOns = addOnsDecoded0
        let ipAddressTypeDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.IpAddressType.self, forKey: .ipAddressType)
        ipAddressType = ipAddressTypeDecoded
        let sourceInstanceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceInstanceName)
        sourceInstanceName = sourceInstanceNameDecoded
        let restoreDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .restoreDate)
        restoreDate = restoreDateDecoded
        let useLatestRestorableAutoSnapshotDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .useLatestRestorableAutoSnapshot)
        useLatestRestorableAutoSnapshot = useLatestRestorableAutoSnapshotDecoded
    }
}
