// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension LightsailClientTypes.InstanceMetadataOptions: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case httpEndpoint
        case httpProtocolIpv6
        case httpPutResponseHopLimit
        case httpTokens
        case state
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let httpEndpoint = self.httpEndpoint {
            try encodeContainer.encode(httpEndpoint.rawValue, forKey: .httpEndpoint)
        }
        if let httpProtocolIpv6 = self.httpProtocolIpv6 {
            try encodeContainer.encode(httpProtocolIpv6.rawValue, forKey: .httpProtocolIpv6)
        }
        if let httpPutResponseHopLimit = self.httpPutResponseHopLimit {
            try encodeContainer.encode(httpPutResponseHopLimit, forKey: .httpPutResponseHopLimit)
        }
        if let httpTokens = self.httpTokens {
            try encodeContainer.encode(httpTokens.rawValue, forKey: .httpTokens)
        }
        if let state = self.state {
            try encodeContainer.encode(state.rawValue, forKey: .state)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let stateDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.InstanceMetadataState.self, forKey: .state)
        state = stateDecoded
        let httpTokensDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.HttpTokens.self, forKey: .httpTokens)
        httpTokens = httpTokensDecoded
        let httpEndpointDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.HttpEndpoint.self, forKey: .httpEndpoint)
        httpEndpoint = httpEndpointDecoded
        let httpPutResponseHopLimitDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .httpPutResponseHopLimit)
        httpPutResponseHopLimit = httpPutResponseHopLimitDecoded
        let httpProtocolIpv6Decoded = try containerValues.decodeIfPresent(LightsailClientTypes.HttpProtocolIpv6.self, forKey: .httpProtocolIpv6)
        httpProtocolIpv6 = httpProtocolIpv6Decoded
    }
}
