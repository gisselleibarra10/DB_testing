// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateRelationalDatabaseInputBody: Swift.Equatable {
    let relationalDatabaseName: Swift.String?
    let availabilityZone: Swift.String?
    let relationalDatabaseBlueprintId: Swift.String?
    let relationalDatabaseBundleId: Swift.String?
    let masterDatabaseName: Swift.String?
    let masterUsername: Swift.String?
    let masterUserPassword: Swift.String?
    let preferredBackupWindow: Swift.String?
    let preferredMaintenanceWindow: Swift.String?
    let publiclyAccessible: Swift.Bool?
    let tags: [LightsailClientTypes.Tag]?
}

extension CreateRelationalDatabaseInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case availabilityZone
        case masterDatabaseName
        case masterUserPassword
        case masterUsername
        case preferredBackupWindow
        case preferredMaintenanceWindow
        case publiclyAccessible
        case relationalDatabaseBlueprintId
        case relationalDatabaseBundleId
        case relationalDatabaseName
        case tags
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let relationalDatabaseNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .relationalDatabaseName)
        relationalDatabaseName = relationalDatabaseNameDecoded
        let availabilityZoneDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .availabilityZone)
        availabilityZone = availabilityZoneDecoded
        let relationalDatabaseBlueprintIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .relationalDatabaseBlueprintId)
        relationalDatabaseBlueprintId = relationalDatabaseBlueprintIdDecoded
        let relationalDatabaseBundleIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .relationalDatabaseBundleId)
        relationalDatabaseBundleId = relationalDatabaseBundleIdDecoded
        let masterDatabaseNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .masterDatabaseName)
        masterDatabaseName = masterDatabaseNameDecoded
        let masterUsernameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .masterUsername)
        masterUsername = masterUsernameDecoded
        let masterUserPasswordDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .masterUserPassword)
        masterUserPassword = masterUserPasswordDecoded
        let preferredBackupWindowDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .preferredBackupWindow)
        preferredBackupWindow = preferredBackupWindowDecoded
        let preferredMaintenanceWindowDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .preferredMaintenanceWindow)
        preferredMaintenanceWindow = preferredMaintenanceWindowDecoded
        let publiclyAccessibleDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .publiclyAccessible)
        publiclyAccessible = publiclyAccessibleDecoded
        let tagsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[LightsailClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [LightsailClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}
