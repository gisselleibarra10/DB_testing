// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension LightsailClientTypes {
    /// Describes a container deployment configuration of an Amazon Lightsail container service. A deployment specifies the settings, such as the ports and launch command, of containers that are deployed to your container service.
    public struct ContainerServiceDeployment: Swift.Equatable {
        /// An object that describes the configuration for the containers of the deployment.
        public var containers: [Swift.String:LightsailClientTypes.Container]?
        /// The timestamp when the deployment was created.
        public var createdAt: ClientRuntime.Date?
        /// An object that describes the endpoint of the deployment.
        public var publicEndpoint: LightsailClientTypes.ContainerServiceEndpoint?
        /// The state of the deployment. A deployment can be in one of the following states:
        ///
        /// * Activating - The deployment is being created.
        ///
        /// * Active - The deployment was successfully created, and it's currently running on the container service. The container service can have only one deployment in an active state at a time.
        ///
        /// * Inactive - The deployment was previously successfully created, but it is not currently running on the container service.
        ///
        /// * Failed - The deployment failed. Use the GetContainerLog action to view the log events for the containers in the deployment to try to determine the reason for the failure.
        public var state: LightsailClientTypes.ContainerServiceDeploymentState?
        /// The version number of the deployment.
        public var version: Swift.Int?

        public init (
            containers: [Swift.String:LightsailClientTypes.Container]? = nil,
            createdAt: ClientRuntime.Date? = nil,
            publicEndpoint: LightsailClientTypes.ContainerServiceEndpoint? = nil,
            state: LightsailClientTypes.ContainerServiceDeploymentState? = nil,
            version: Swift.Int? = nil
        )
        {
            self.containers = containers
            self.createdAt = createdAt
            self.publicEndpoint = publicEndpoint
            self.state = state
            self.version = version
        }
    }

}
