// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension LightsailClientTypes {
    /// Describes an Amazon Lightsail container service.
    public struct ContainerService: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the container service.
        public var arn: Swift.String?
        /// The name of the container service.
        public var containerServiceName: Swift.String?
        /// The timestamp when the container service was created.
        public var createdAt: ClientRuntime.Date?
        /// An object that describes the current container deployment of the container service.
        public var currentDeployment: LightsailClientTypes.ContainerServiceDeployment?
        /// A Boolean value indicating whether the container service is disabled.
        public var isDisabled: Swift.Bool?
        /// An object that describes the location of the container service, such as the Amazon Web Services Region and Availability Zone.
        public var location: LightsailClientTypes.ResourceLocation?
        /// An object that describes the next deployment of the container service. This value is null when there is no deployment in a pending state.
        public var nextDeployment: LightsailClientTypes.ContainerServiceDeployment?
        /// The power specification of the container service. The power specifies the amount of RAM, the number of vCPUs, and the base price of the container service.
        public var power: LightsailClientTypes.ContainerServicePowerName?
        /// The ID of the power of the container service.
        public var powerId: Swift.String?
        /// The principal ARN of the container service. The principal ARN can be used to create a trust relationship between your standard Amazon Web Services account and your Lightsail container service. This allows you to give your service permission to access resources in your standard Amazon Web Services account.
        public var principalArn: Swift.String?
        /// The private domain name of the container service. The private domain name is accessible only by other resources within the default virtual private cloud (VPC) of your Lightsail account.
        public var privateDomainName: Swift.String?
        /// An object that describes the configuration for the container service to access private container image repositories, such as Amazon Elastic Container Registry (Amazon ECR) private repositories. For more information, see [Configuring access to an Amazon ECR private repository for an Amazon Lightsail container service](https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-container-service-ecr-private-repo-access) in the Amazon Lightsail Developer Guide.
        public var privateRegistryAccess: LightsailClientTypes.PrivateRegistryAccess?
        /// The public domain name of the container service, such as example.com and www.example.com. You can specify up to four public domain names for a container service. The domain names that you specify are used when you create a deployment with a container configured as the public endpoint of your container service. If you don't specify public domain names, then you can use the default domain of the container service. You must create and validate an SSL/TLS certificate before you can use public domain names with your container service. Use the CreateCertificate action to create a certificate for the public domain names you want to use with your container service. See CreateContainerService or UpdateContainerService for information about how to specify public domain names for your Lightsail container service.
        public var publicDomainNames: [Swift.String:[Swift.String]]?
        /// The Lightsail resource type of the container service (i.e., ContainerService).
        public var resourceType: LightsailClientTypes.ResourceType?
        /// The scale specification of the container service. The scale specifies the allocated compute nodes of the container service.
        public var scale: Swift.Int?
        /// The current state of the container service. The following container service states are possible:
        ///
        /// * PENDING - The container service is being created.
        ///
        /// * READY - The container service is running but it does not have an active container deployment.
        ///
        /// * DEPLOYING - The container service is launching a container deployment.
        ///
        /// * RUNNING - The container service is running and it has an active container deployment.
        ///
        /// * UPDATING - The container service capacity or its custom domains are being updated.
        ///
        /// * DELETING - The container service is being deleted.
        ///
        /// * DISABLED - The container service is disabled, and its active deployment and containers, if any, are shut down.
        public var state: LightsailClientTypes.ContainerServiceState?
        /// An object that describes the current state of the container service. The state detail is populated only when a container service is in a PENDING, DEPLOYING, or UPDATING state.
        public var stateDetail: LightsailClientTypes.ContainerServiceStateDetail?
        /// The tag keys and optional values for the resource. For more information about tags in Lightsail, see the [Amazon Lightsail Developer Guide](https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-tags).
        public var tags: [LightsailClientTypes.Tag]?
        /// The publicly accessible URL of the container service. If no public endpoint is specified in the currentDeployment, this URL returns a 404 response.
        public var url: Swift.String?

        public init (
            arn: Swift.String? = nil,
            containerServiceName: Swift.String? = nil,
            createdAt: ClientRuntime.Date? = nil,
            currentDeployment: LightsailClientTypes.ContainerServiceDeployment? = nil,
            isDisabled: Swift.Bool? = nil,
            location: LightsailClientTypes.ResourceLocation? = nil,
            nextDeployment: LightsailClientTypes.ContainerServiceDeployment? = nil,
            power: LightsailClientTypes.ContainerServicePowerName? = nil,
            powerId: Swift.String? = nil,
            principalArn: Swift.String? = nil,
            privateDomainName: Swift.String? = nil,
            privateRegistryAccess: LightsailClientTypes.PrivateRegistryAccess? = nil,
            publicDomainNames: [Swift.String:[Swift.String]]? = nil,
            resourceType: LightsailClientTypes.ResourceType? = nil,
            scale: Swift.Int? = nil,
            state: LightsailClientTypes.ContainerServiceState? = nil,
            stateDetail: LightsailClientTypes.ContainerServiceStateDetail? = nil,
            tags: [LightsailClientTypes.Tag]? = nil,
            url: Swift.String? = nil
        )
        {
            self.arn = arn
            self.containerServiceName = containerServiceName
            self.createdAt = createdAt
            self.currentDeployment = currentDeployment
            self.isDisabled = isDisabled
            self.location = location
            self.nextDeployment = nextDeployment
            self.power = power
            self.powerId = powerId
            self.principalArn = principalArn
            self.privateDomainName = privateDomainName
            self.privateRegistryAccess = privateRegistryAccess
            self.publicDomainNames = publicDomainNames
            self.resourceType = resourceType
            self.scale = scale
            self.state = state
            self.stateDetail = stateDetail
            self.tags = tags
            self.url = url
        }
    }

}
