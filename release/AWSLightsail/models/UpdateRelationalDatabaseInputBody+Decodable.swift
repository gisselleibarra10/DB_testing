// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct UpdateRelationalDatabaseInputBody: Swift.Equatable {
    let relationalDatabaseName: Swift.String?
    let masterUserPassword: Swift.String?
    let rotateMasterUserPassword: Swift.Bool?
    let preferredBackupWindow: Swift.String?
    let preferredMaintenanceWindow: Swift.String?
    let enableBackupRetention: Swift.Bool?
    let disableBackupRetention: Swift.Bool?
    let publiclyAccessible: Swift.Bool?
    let applyImmediately: Swift.Bool?
    let caCertificateIdentifier: Swift.String?
}

extension UpdateRelationalDatabaseInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applyImmediately
        case caCertificateIdentifier
        case disableBackupRetention
        case enableBackupRetention
        case masterUserPassword
        case preferredBackupWindow
        case preferredMaintenanceWindow
        case publiclyAccessible
        case relationalDatabaseName
        case rotateMasterUserPassword
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let relationalDatabaseNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .relationalDatabaseName)
        relationalDatabaseName = relationalDatabaseNameDecoded
        let masterUserPasswordDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .masterUserPassword)
        masterUserPassword = masterUserPasswordDecoded
        let rotateMasterUserPasswordDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .rotateMasterUserPassword)
        rotateMasterUserPassword = rotateMasterUserPasswordDecoded
        let preferredBackupWindowDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .preferredBackupWindow)
        preferredBackupWindow = preferredBackupWindowDecoded
        let preferredMaintenanceWindowDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .preferredMaintenanceWindow)
        preferredMaintenanceWindow = preferredMaintenanceWindowDecoded
        let enableBackupRetentionDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enableBackupRetention)
        enableBackupRetention = enableBackupRetentionDecoded
        let disableBackupRetentionDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .disableBackupRetention)
        disableBackupRetention = disableBackupRetentionDecoded
        let publiclyAccessibleDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .publiclyAccessible)
        publiclyAccessible = publiclyAccessibleDecoded
        let applyImmediatelyDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .applyImmediately)
        applyImmediately = applyImmediatelyDecoded
        let caCertificateIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .caCertificateIdentifier)
        caCertificateIdentifier = caCertificateIdentifierDecoded
    }
}
