// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension LightsailClientTypes.Container: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case command
        case environment
        case image
        case ports
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let command = command {
            var commandContainer = encodeContainer.nestedUnkeyedContainer(forKey: .command)
            for stringlist0 in command {
                try commandContainer.encode(stringlist0)
            }
        }
        if let environment = environment {
            var environmentContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .environment)
            for (dictKey0, environment0) in environment {
                try environmentContainer.encode(environment0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let image = self.image {
            try encodeContainer.encode(image, forKey: .image)
        }
        if let ports = ports {
            var portsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .ports)
            for (dictKey0, portmap0) in ports {
                try portsContainer.encode(portmap0.rawValue, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let imageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .image)
        image = imageDecoded
        let commandContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .command)
        var commandDecoded0:[Swift.String]? = nil
        if let commandContainer = commandContainer {
            commandDecoded0 = [Swift.String]()
            for string0 in commandContainer {
                if let string0 = string0 {
                    commandDecoded0?.append(string0)
                }
            }
        }
        command = commandDecoded0
        let environmentContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .environment)
        var environmentDecoded0: [Swift.String:Swift.String]? = nil
        if let environmentContainer = environmentContainer {
            environmentDecoded0 = [Swift.String:Swift.String]()
            for (key0, string0) in environmentContainer {
                if let string0 = string0 {
                    environmentDecoded0?[key0] = string0
                }
            }
        }
        environment = environmentDecoded0
        let portsContainer = try containerValues.decodeIfPresent([Swift.String: LightsailClientTypes.ContainerServiceProtocol?].self, forKey: .ports)
        var portsDecoded0: [Swift.String:LightsailClientTypes.ContainerServiceProtocol]? = nil
        if let portsContainer = portsContainer {
            portsDecoded0 = [Swift.String:LightsailClientTypes.ContainerServiceProtocol]()
            for (key0, containerserviceprotocol0) in portsContainer {
                if let containerserviceprotocol0 = containerserviceprotocol0 {
                    portsDecoded0?[key0] = containerserviceprotocol0
                }
            }
        }
        ports = portsDecoded0
    }
}
