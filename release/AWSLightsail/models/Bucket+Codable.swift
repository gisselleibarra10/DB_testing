// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension LightsailClientTypes.Bucket: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case ableToUpdateBundle
        case accessLogConfig
        case accessRules
        case arn
        case bundleId
        case createdAt
        case location
        case name
        case objectVersioning
        case readonlyAccessAccounts
        case resourceType
        case resourcesReceivingAccess
        case state
        case supportCode
        case tags
        case url
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let ableToUpdateBundle = self.ableToUpdateBundle {
            try encodeContainer.encode(ableToUpdateBundle, forKey: .ableToUpdateBundle)
        }
        if let accessLogConfig = self.accessLogConfig {
            try encodeContainer.encode(accessLogConfig, forKey: .accessLogConfig)
        }
        if let accessRules = self.accessRules {
            try encodeContainer.encode(accessRules, forKey: .accessRules)
        }
        if let arn = self.arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let bundleId = self.bundleId {
            try encodeContainer.encode(bundleId, forKey: .bundleId)
        }
        if let createdAt = self.createdAt {
            try encodeContainer.encode(createdAt.timeIntervalSince1970, forKey: .createdAt)
        }
        if let location = self.location {
            try encodeContainer.encode(location, forKey: .location)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let objectVersioning = self.objectVersioning {
            try encodeContainer.encode(objectVersioning, forKey: .objectVersioning)
        }
        if let readonlyAccessAccounts = readonlyAccessAccounts {
            var readonlyAccessAccountsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .readonlyAccessAccounts)
            for partneridlist0 in readonlyAccessAccounts {
                try readonlyAccessAccountsContainer.encode(partneridlist0)
            }
        }
        if let resourceType = self.resourceType {
            try encodeContainer.encode(resourceType, forKey: .resourceType)
        }
        if let resourcesReceivingAccess = resourcesReceivingAccess {
            var resourcesReceivingAccessContainer = encodeContainer.nestedUnkeyedContainer(forKey: .resourcesReceivingAccess)
            for accessreceiverlist0 in resourcesReceivingAccess {
                try resourcesReceivingAccessContainer.encode(accessreceiverlist0)
            }
        }
        if let state = self.state {
            try encodeContainer.encode(state, forKey: .state)
        }
        if let supportCode = self.supportCode {
            try encodeContainer.encode(supportCode, forKey: .supportCode)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
        if let url = self.url {
            try encodeContainer.encode(url, forKey: .url)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let accessRulesDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.AccessRules.self, forKey: .accessRules)
        accessRules = accessRulesDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let bundleIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .bundleId)
        bundleId = bundleIdDecoded
        let createdAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdAt)
        createdAt = createdAtDecoded
        let urlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .url)
        url = urlDecoded
        let locationDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.ResourceLocation.self, forKey: .location)
        location = locationDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let supportCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .supportCode)
        supportCode = supportCodeDecoded
        let tagsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[LightsailClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [LightsailClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let objectVersioningDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .objectVersioning)
        objectVersioning = objectVersioningDecoded
        let ableToUpdateBundleDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .ableToUpdateBundle)
        ableToUpdateBundle = ableToUpdateBundleDecoded
        let readonlyAccessAccountsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .readonlyAccessAccounts)
        var readonlyAccessAccountsDecoded0:[Swift.String]? = nil
        if let readonlyAccessAccountsContainer = readonlyAccessAccountsContainer {
            readonlyAccessAccountsDecoded0 = [Swift.String]()
            for string0 in readonlyAccessAccountsContainer {
                if let string0 = string0 {
                    readonlyAccessAccountsDecoded0?.append(string0)
                }
            }
        }
        readonlyAccessAccounts = readonlyAccessAccountsDecoded0
        let resourcesReceivingAccessContainer = try containerValues.decodeIfPresent([LightsailClientTypes.ResourceReceivingAccess?].self, forKey: .resourcesReceivingAccess)
        var resourcesReceivingAccessDecoded0:[LightsailClientTypes.ResourceReceivingAccess]? = nil
        if let resourcesReceivingAccessContainer = resourcesReceivingAccessContainer {
            resourcesReceivingAccessDecoded0 = [LightsailClientTypes.ResourceReceivingAccess]()
            for structure0 in resourcesReceivingAccessContainer {
                if let structure0 = structure0 {
                    resourcesReceivingAccessDecoded0?.append(structure0)
                }
            }
        }
        resourcesReceivingAccess = resourcesReceivingAccessDecoded0
        let stateDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.BucketState.self, forKey: .state)
        state = stateDecoded
        let accessLogConfigDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.BucketAccessLogConfig.self, forKey: .accessLogConfig)
        accessLogConfig = accessLogConfigDecoded
    }
}
