// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension LightsailClientTypes.Origin: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name
        case protocolPolicy
        case regionName
        case resourceType
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let protocolPolicy = self.protocolPolicy {
            try encodeContainer.encode(protocolPolicy.rawValue, forKey: .protocolPolicy)
        }
        if let regionName = self.regionName {
            try encodeContainer.encode(regionName.rawValue, forKey: .regionName)
        }
        if let resourceType = self.resourceType {
            try encodeContainer.encode(resourceType.rawValue, forKey: .resourceType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let resourceTypeDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.ResourceType.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let regionNameDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.RegionName.self, forKey: .regionName)
        regionName = regionNameDecoded
        let protocolPolicyDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.OriginProtocolPolicyEnum.self, forKey: .protocolPolicy)
        protocolPolicy = protocolPolicyDecoded
    }
}
