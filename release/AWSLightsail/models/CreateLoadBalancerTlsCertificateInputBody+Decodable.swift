// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateLoadBalancerTlsCertificateInputBody: Swift.Equatable {
    let loadBalancerName: Swift.String?
    let certificateName: Swift.String?
    let certificateDomainName: Swift.String?
    let certificateAlternativeNames: [Swift.String]?
    let tags: [LightsailClientTypes.Tag]?
}

extension CreateLoadBalancerTlsCertificateInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case certificateAlternativeNames
        case certificateDomainName
        case certificateName
        case loadBalancerName
        case tags
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let loadBalancerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .loadBalancerName)
        loadBalancerName = loadBalancerNameDecoded
        let certificateNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .certificateName)
        certificateName = certificateNameDecoded
        let certificateDomainNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .certificateDomainName)
        certificateDomainName = certificateDomainNameDecoded
        let certificateAlternativeNamesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .certificateAlternativeNames)
        var certificateAlternativeNamesDecoded0:[Swift.String]? = nil
        if let certificateAlternativeNamesContainer = certificateAlternativeNamesContainer {
            certificateAlternativeNamesDecoded0 = [Swift.String]()
            for string0 in certificateAlternativeNamesContainer {
                if let string0 = string0 {
                    certificateAlternativeNamesDecoded0?.append(string0)
                }
            }
        }
        certificateAlternativeNames = certificateAlternativeNamesDecoded0
        let tagsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[LightsailClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [LightsailClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}
