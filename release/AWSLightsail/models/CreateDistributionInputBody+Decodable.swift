// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateDistributionInputBody: Swift.Equatable {
    let distributionName: Swift.String?
    let origin: LightsailClientTypes.InputOrigin?
    let defaultCacheBehavior: LightsailClientTypes.CacheBehavior?
    let cacheBehaviorSettings: LightsailClientTypes.CacheSettings?
    let cacheBehaviors: [LightsailClientTypes.CacheBehaviorPerPath]?
    let bundleId: Swift.String?
    let ipAddressType: LightsailClientTypes.IpAddressType?
    let tags: [LightsailClientTypes.Tag]?
}

extension CreateDistributionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bundleId
        case cacheBehaviorSettings
        case cacheBehaviors
        case defaultCacheBehavior
        case distributionName
        case ipAddressType
        case origin
        case tags
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let distributionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .distributionName)
        distributionName = distributionNameDecoded
        let originDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.InputOrigin.self, forKey: .origin)
        origin = originDecoded
        let defaultCacheBehaviorDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.CacheBehavior.self, forKey: .defaultCacheBehavior)
        defaultCacheBehavior = defaultCacheBehaviorDecoded
        let cacheBehaviorSettingsDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.CacheSettings.self, forKey: .cacheBehaviorSettings)
        cacheBehaviorSettings = cacheBehaviorSettingsDecoded
        let cacheBehaviorsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.CacheBehaviorPerPath?].self, forKey: .cacheBehaviors)
        var cacheBehaviorsDecoded0:[LightsailClientTypes.CacheBehaviorPerPath]? = nil
        if let cacheBehaviorsContainer = cacheBehaviorsContainer {
            cacheBehaviorsDecoded0 = [LightsailClientTypes.CacheBehaviorPerPath]()
            for structure0 in cacheBehaviorsContainer {
                if let structure0 = structure0 {
                    cacheBehaviorsDecoded0?.append(structure0)
                }
            }
        }
        cacheBehaviors = cacheBehaviorsDecoded0
        let bundleIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .bundleId)
        bundleId = bundleIdDecoded
        let ipAddressTypeDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.IpAddressType.self, forKey: .ipAddressType)
        ipAddressType = ipAddressTypeDecoded
        let tagsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[LightsailClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [LightsailClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}
