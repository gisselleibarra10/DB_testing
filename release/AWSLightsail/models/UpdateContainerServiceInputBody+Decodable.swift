// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct UpdateContainerServiceInputBody: Swift.Equatable {
    let power: LightsailClientTypes.ContainerServicePowerName?
    let scale: Swift.Int?
    let isDisabled: Swift.Bool?
    let publicDomainNames: [Swift.String:[Swift.String]]?
    let privateRegistryAccess: LightsailClientTypes.PrivateRegistryAccessRequest?
}

extension UpdateContainerServiceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case isDisabled
        case power
        case privateRegistryAccess
        case publicDomainNames
        case scale
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let powerDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.ContainerServicePowerName.self, forKey: .power)
        power = powerDecoded
        let scaleDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .scale)
        scale = scaleDecoded
        let isDisabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .isDisabled)
        isDisabled = isDisabledDecoded
        let publicDomainNamesContainer = try containerValues.decodeIfPresent([Swift.String: [Swift.String?]?].self, forKey: .publicDomainNames)
        var publicDomainNamesDecoded0: [Swift.String:[Swift.String]]? = nil
        if let publicDomainNamesContainer = publicDomainNamesContainer {
            publicDomainNamesDecoded0 = [Swift.String:[Swift.String]]()
            for (key0, containerservicepublicdomainslist0) in publicDomainNamesContainer {
                var containerservicepublicdomainslist0Decoded0: [Swift.String]? = nil
                if let containerservicepublicdomainslist0 = containerservicepublicdomainslist0 {
                    containerservicepublicdomainslist0Decoded0 = [Swift.String]()
                    for string1 in containerservicepublicdomainslist0 {
                        if let string1 = string1 {
                            containerservicepublicdomainslist0Decoded0?.append(string1)
                        }
                    }
                }
                publicDomainNamesDecoded0?[key0] = containerservicepublicdomainslist0Decoded0
            }
        }
        publicDomainNames = publicDomainNamesDecoded0
        let privateRegistryAccessDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.PrivateRegistryAccessRequest.self, forKey: .privateRegistryAccess)
        privateRegistryAccess = privateRegistryAccessDecoded
    }
}
