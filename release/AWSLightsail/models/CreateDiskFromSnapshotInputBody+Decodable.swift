// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateDiskFromSnapshotInputBody: Swift.Equatable {
    let diskName: Swift.String?
    let diskSnapshotName: Swift.String?
    let availabilityZone: Swift.String?
    let sizeInGb: Swift.Int?
    let tags: [LightsailClientTypes.Tag]?
    let addOns: [LightsailClientTypes.AddOnRequest]?
    let sourceDiskName: Swift.String?
    let restoreDate: Swift.String?
    let useLatestRestorableAutoSnapshot: Swift.Bool?
}

extension CreateDiskFromSnapshotInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case addOns
        case availabilityZone
        case diskName
        case diskSnapshotName
        case restoreDate
        case sizeInGb
        case sourceDiskName
        case tags
        case useLatestRestorableAutoSnapshot
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let diskNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .diskName)
        diskName = diskNameDecoded
        let diskSnapshotNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .diskSnapshotName)
        diskSnapshotName = diskSnapshotNameDecoded
        let availabilityZoneDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .availabilityZone)
        availabilityZone = availabilityZoneDecoded
        let sizeInGbDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .sizeInGb)
        sizeInGb = sizeInGbDecoded
        let tagsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[LightsailClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [LightsailClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let addOnsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.AddOnRequest?].self, forKey: .addOns)
        var addOnsDecoded0:[LightsailClientTypes.AddOnRequest]? = nil
        if let addOnsContainer = addOnsContainer {
            addOnsDecoded0 = [LightsailClientTypes.AddOnRequest]()
            for structure0 in addOnsContainer {
                if let structure0 = structure0 {
                    addOnsDecoded0?.append(structure0)
                }
            }
        }
        addOns = addOnsDecoded0
        let sourceDiskNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceDiskName)
        sourceDiskName = sourceDiskNameDecoded
        let restoreDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .restoreDate)
        restoreDate = restoreDateDecoded
        let useLatestRestorableAutoSnapshotDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .useLatestRestorableAutoSnapshot)
        useLatestRestorableAutoSnapshot = useLatestRestorableAutoSnapshotDecoded
    }
}
