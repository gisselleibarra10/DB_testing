// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension LightsailClientTypes {
    public enum OperationType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case allocatestaticip
        case attachcertificatetodistribution
        case attachdisk
        case attachinstancestoloadbalancer
        case attachloadbalancertlscertificate
        case attachstaticip
        case closeinstancepublicports
        case createbucket
        case createbucketaccesskey
        case createcertificate
        case createcontactmethod
        case createcontainerservice
        case createcontainerservicedeployment
        case createcontainerserviceregistrylogin
        case createdisk
        case creatediskfromsnapshot
        case createdisksnapshot
        case createdistribution
        case createdomain
        case createinstance
        case createinstancesnapshot
        case createinstancesfromsnapshot
        case createloadbalancer
        case createloadbalancertlscertificate
        case createrelationaldatabase
        case createrelationaldatabasefromsnapshot
        case createrelationaldatabasesnapshot
        case deletealarm
        case deletebucket
        case deletebucketaccesskey
        case deletecertificate
        case deletecontactmethod
        case deletecontainerimage
        case deletecontainerservice
        case deletedisk
        case deletedisksnapshot
        case deletedistribution
        case deletedomain
        case deletedomainentry
        case deleteinstance
        case deleteinstancesnapshot
        case deleteknownhostkeys
        case deleteloadbalancer
        case deleteloadbalancertlscertificate
        case deleterelationaldatabase
        case deleterelationaldatabasesnapshot
        case detachcertificatefromdistribution
        case detachdisk
        case detachinstancesfromloadbalancer
        case detachstaticip
        case disableaddon
        case enableaddon
        case getalarms
        case getcontactmethods
        case openinstancepublicports
        case putalarm
        case putinstancepublicports
        case rebootinstance
        case rebootrelationaldatabase
        case registercontainerimage
        case releasestaticip
        case resetdistributioncache
        case sendcontactmethodverification
        case setipaddresstype
        case setresourceaccessforbucket
        case startinstance
        case startrelationaldatabase
        case stopinstance
        case stoprelationaldatabase
        case testalarm
        case updatebucket
        case updatebucketbundle
        case updatecontainerservice
        case updatedistribution
        case updatedistributionbundle
        case updatedomainentry
        case updateinstancemetadataoptions
        case updateloadbalancerattribute
        case updaterelationaldatabase
        case updaterelationaldatabaseparameters
        case sdkUnknown(Swift.String)

        public static var allCases: [OperationType] {
            return [
                .allocatestaticip,
                .attachcertificatetodistribution,
                .attachdisk,
                .attachinstancestoloadbalancer,
                .attachloadbalancertlscertificate,
                .attachstaticip,
                .closeinstancepublicports,
                .createbucket,
                .createbucketaccesskey,
                .createcertificate,
                .createcontactmethod,
                .createcontainerservice,
                .createcontainerservicedeployment,
                .createcontainerserviceregistrylogin,
                .createdisk,
                .creatediskfromsnapshot,
                .createdisksnapshot,
                .createdistribution,
                .createdomain,
                .createinstance,
                .createinstancesnapshot,
                .createinstancesfromsnapshot,
                .createloadbalancer,
                .createloadbalancertlscertificate,
                .createrelationaldatabase,
                .createrelationaldatabasefromsnapshot,
                .createrelationaldatabasesnapshot,
                .deletealarm,
                .deletebucket,
                .deletebucketaccesskey,
                .deletecertificate,
                .deletecontactmethod,
                .deletecontainerimage,
                .deletecontainerservice,
                .deletedisk,
                .deletedisksnapshot,
                .deletedistribution,
                .deletedomain,
                .deletedomainentry,
                .deleteinstance,
                .deleteinstancesnapshot,
                .deleteknownhostkeys,
                .deleteloadbalancer,
                .deleteloadbalancertlscertificate,
                .deleterelationaldatabase,
                .deleterelationaldatabasesnapshot,
                .detachcertificatefromdistribution,
                .detachdisk,
                .detachinstancesfromloadbalancer,
                .detachstaticip,
                .disableaddon,
                .enableaddon,
                .getalarms,
                .getcontactmethods,
                .openinstancepublicports,
                .putalarm,
                .putinstancepublicports,
                .rebootinstance,
                .rebootrelationaldatabase,
                .registercontainerimage,
                .releasestaticip,
                .resetdistributioncache,
                .sendcontactmethodverification,
                .setipaddresstype,
                .setresourceaccessforbucket,
                .startinstance,
                .startrelationaldatabase,
                .stopinstance,
                .stoprelationaldatabase,
                .testalarm,
                .updatebucket,
                .updatebucketbundle,
                .updatecontainerservice,
                .updatedistribution,
                .updatedistributionbundle,
                .updatedomainentry,
                .updateinstancemetadataoptions,
                .updateloadbalancerattribute,
                .updaterelationaldatabase,
                .updaterelationaldatabaseparameters,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .allocatestaticip: return "AllocateStaticIp"
            case .attachcertificatetodistribution: return "AttachCertificateToDistribution"
            case .attachdisk: return "AttachDisk"
            case .attachinstancestoloadbalancer: return "AttachInstancesToLoadBalancer"
            case .attachloadbalancertlscertificate: return "AttachLoadBalancerTlsCertificate"
            case .attachstaticip: return "AttachStaticIp"
            case .closeinstancepublicports: return "CloseInstancePublicPorts"
            case .createbucket: return "CreateBucket"
            case .createbucketaccesskey: return "CreateBucketAccessKey"
            case .createcertificate: return "CreateCertificate"
            case .createcontactmethod: return "CreateContactMethod"
            case .createcontainerservice: return "CreateContainerService"
            case .createcontainerservicedeployment: return "CreateContainerServiceDeployment"
            case .createcontainerserviceregistrylogin: return "CreateContainerServiceRegistryLogin"
            case .createdisk: return "CreateDisk"
            case .creatediskfromsnapshot: return "CreateDiskFromSnapshot"
            case .createdisksnapshot: return "CreateDiskSnapshot"
            case .createdistribution: return "CreateDistribution"
            case .createdomain: return "CreateDomain"
            case .createinstance: return "CreateInstance"
            case .createinstancesnapshot: return "CreateInstanceSnapshot"
            case .createinstancesfromsnapshot: return "CreateInstancesFromSnapshot"
            case .createloadbalancer: return "CreateLoadBalancer"
            case .createloadbalancertlscertificate: return "CreateLoadBalancerTlsCertificate"
            case .createrelationaldatabase: return "CreateRelationalDatabase"
            case .createrelationaldatabasefromsnapshot: return "CreateRelationalDatabaseFromSnapshot"
            case .createrelationaldatabasesnapshot: return "CreateRelationalDatabaseSnapshot"
            case .deletealarm: return "DeleteAlarm"
            case .deletebucket: return "DeleteBucket"
            case .deletebucketaccesskey: return "DeleteBucketAccessKey"
            case .deletecertificate: return "DeleteCertificate"
            case .deletecontactmethod: return "DeleteContactMethod"
            case .deletecontainerimage: return "DeleteContainerImage"
            case .deletecontainerservice: return "DeleteContainerService"
            case .deletedisk: return "DeleteDisk"
            case .deletedisksnapshot: return "DeleteDiskSnapshot"
            case .deletedistribution: return "DeleteDistribution"
            case .deletedomain: return "DeleteDomain"
            case .deletedomainentry: return "DeleteDomainEntry"
            case .deleteinstance: return "DeleteInstance"
            case .deleteinstancesnapshot: return "DeleteInstanceSnapshot"
            case .deleteknownhostkeys: return "DeleteKnownHostKeys"
            case .deleteloadbalancer: return "DeleteLoadBalancer"
            case .deleteloadbalancertlscertificate: return "DeleteLoadBalancerTlsCertificate"
            case .deleterelationaldatabase: return "DeleteRelationalDatabase"
            case .deleterelationaldatabasesnapshot: return "DeleteRelationalDatabaseSnapshot"
            case .detachcertificatefromdistribution: return "DetachCertificateFromDistribution"
            case .detachdisk: return "DetachDisk"
            case .detachinstancesfromloadbalancer: return "DetachInstancesFromLoadBalancer"
            case .detachstaticip: return "DetachStaticIp"
            case .disableaddon: return "DisableAddOn"
            case .enableaddon: return "EnableAddOn"
            case .getalarms: return "GetAlarms"
            case .getcontactmethods: return "GetContactMethods"
            case .openinstancepublicports: return "OpenInstancePublicPorts"
            case .putalarm: return "PutAlarm"
            case .putinstancepublicports: return "PutInstancePublicPorts"
            case .rebootinstance: return "RebootInstance"
            case .rebootrelationaldatabase: return "RebootRelationalDatabase"
            case .registercontainerimage: return "RegisterContainerImage"
            case .releasestaticip: return "ReleaseStaticIp"
            case .resetdistributioncache: return "ResetDistributionCache"
            case .sendcontactmethodverification: return "SendContactMethodVerification"
            case .setipaddresstype: return "SetIpAddressType"
            case .setresourceaccessforbucket: return "SetResourceAccessForBucket"
            case .startinstance: return "StartInstance"
            case .startrelationaldatabase: return "StartRelationalDatabase"
            case .stopinstance: return "StopInstance"
            case .stoprelationaldatabase: return "StopRelationalDatabase"
            case .testalarm: return "TestAlarm"
            case .updatebucket: return "UpdateBucket"
            case .updatebucketbundle: return "UpdateBucketBundle"
            case .updatecontainerservice: return "UpdateContainerService"
            case .updatedistribution: return "UpdateDistribution"
            case .updatedistributionbundle: return "UpdateDistributionBundle"
            case .updatedomainentry: return "UpdateDomainEntry"
            case .updateinstancemetadataoptions: return "UpdateInstanceMetadataOptions"
            case .updateloadbalancerattribute: return "UpdateLoadBalancerAttribute"
            case .updaterelationaldatabase: return "UpdateRelationalDatabase"
            case .updaterelationaldatabaseparameters: return "UpdateRelationalDatabaseParameters"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = OperationType(rawValue: rawValue) ?? OperationType.sdkUnknown(rawValue)
        }
    }
}
