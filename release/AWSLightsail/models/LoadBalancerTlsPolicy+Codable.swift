// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension LightsailClientTypes.LoadBalancerTlsPolicy: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case ciphers
        case description
        case isDefault
        case name
        case protocols
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let ciphers = ciphers {
            var ciphersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .ciphers)
            for stringlist0 in ciphers {
                try ciphersContainer.encode(stringlist0)
            }
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let isDefault = self.isDefault {
            try encodeContainer.encode(isDefault, forKey: .isDefault)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let protocols = protocols {
            var protocolsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .protocols)
            for stringlist0 in protocols {
                try protocolsContainer.encode(stringlist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let isDefaultDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .isDefault)
        isDefault = isDefaultDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let protocolsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .protocols)
        var protocolsDecoded0:[Swift.String]? = nil
        if let protocolsContainer = protocolsContainer {
            protocolsDecoded0 = [Swift.String]()
            for string0 in protocolsContainer {
                if let string0 = string0 {
                    protocolsDecoded0?.append(string0)
                }
            }
        }
        protocols = protocolsDecoded0
        let ciphersContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .ciphers)
        var ciphersDecoded0:[Swift.String]? = nil
        if let ciphersContainer = ciphersContainer {
            ciphersDecoded0 = [Swift.String]()
            for string0 in ciphersContainer {
                if let string0 = string0 {
                    ciphersDecoded0?.append(string0)
                }
            }
        }
        ciphers = ciphersDecoded0
    }
}
