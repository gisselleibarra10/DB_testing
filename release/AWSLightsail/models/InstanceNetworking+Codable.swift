// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension LightsailClientTypes.InstanceNetworking: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case monthlyTransfer
        case ports
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let monthlyTransfer = self.monthlyTransfer {
            try encodeContainer.encode(monthlyTransfer, forKey: .monthlyTransfer)
        }
        if let ports = ports {
            var portsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .ports)
            for instanceportinfolist0 in ports {
                try portsContainer.encode(instanceportinfolist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let monthlyTransferDecoded = try containerValues.decodeIfPresent(LightsailClientTypes.MonthlyTransfer.self, forKey: .monthlyTransfer)
        monthlyTransfer = monthlyTransferDecoded
        let portsContainer = try containerValues.decodeIfPresent([LightsailClientTypes.InstancePortInfo?].self, forKey: .ports)
        var portsDecoded0:[LightsailClientTypes.InstancePortInfo]? = nil
        if let portsContainer = portsContainer {
            portsDecoded0 = [LightsailClientTypes.InstancePortInfo]()
            for structure0 in portsContainer {
                if let structure0 = structure0 {
                    portsDecoded0?.append(structure0)
                }
            }
        }
        ports = portsDecoded0
    }
}
