// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetCertificatesInputBody: Swift.Equatable {
    let certificateStatuses: [LightsailClientTypes.CertificateStatus]?
    let includeCertificateDetails: Swift.Bool
    let certificateName: Swift.String?
}

extension GetCertificatesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case certificateName
        case certificateStatuses
        case includeCertificateDetails
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let certificateStatusesContainer = try containerValues.decodeIfPresent([LightsailClientTypes.CertificateStatus?].self, forKey: .certificateStatuses)
        var certificateStatusesDecoded0:[LightsailClientTypes.CertificateStatus]? = nil
        if let certificateStatusesContainer = certificateStatusesContainer {
            certificateStatusesDecoded0 = [LightsailClientTypes.CertificateStatus]()
            for enum0 in certificateStatusesContainer {
                if let enum0 = enum0 {
                    certificateStatusesDecoded0?.append(enum0)
                }
            }
        }
        certificateStatuses = certificateStatusesDecoded0
        let includeCertificateDetailsDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .includeCertificateDetails) ?? false
        includeCertificateDetails = includeCertificateDetailsDecoded
        let certificateNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .certificateName)
        certificateName = certificateNameDecoded
    }
}
