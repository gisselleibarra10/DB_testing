// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetCloudFormationTemplateOutputResponseBody: Swift.Equatable {
    let applicationId: Swift.String?
    let creationTime: Swift.String?
    let expirationTime: Swift.String?
    let semanticVersion: Swift.String?
    let status: ServerlessApplicationRepositoryClientTypes.Status?
    let templateId: Swift.String?
    let templateUrl: Swift.String?
}

extension GetCloudFormationTemplateOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applicationId = "applicationId"
        case creationTime = "creationTime"
        case expirationTime = "expirationTime"
        case semanticVersion = "semanticVersion"
        case status = "status"
        case templateId = "templateId"
        case templateUrl = "templateUrl"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let applicationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .applicationId)
        applicationId = applicationIdDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let expirationTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .expirationTime)
        expirationTime = expirationTimeDecoded
        let semanticVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .semanticVersion)
        semanticVersion = semanticVersionDecoded
        let statusDecoded = try containerValues.decodeIfPresent(ServerlessApplicationRepositoryClientTypes.Status.self, forKey: .status)
        status = statusDecoded
        let templateIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateId)
        templateId = templateIdDecoded
        let templateUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateUrl)
        templateUrl = templateUrlDecoded
    }
}
