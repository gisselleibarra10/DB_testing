// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateCloudFormationChangeSetInputBody: Swift.Equatable {
    let capabilities: [Swift.String]?
    let changeSetName: Swift.String?
    let clientToken: Swift.String?
    let description: Swift.String?
    let notificationArns: [Swift.String]?
    let parameterOverrides: [ServerlessApplicationRepositoryClientTypes.ParameterValue]?
    let resourceTypes: [Swift.String]?
    let rollbackConfiguration: ServerlessApplicationRepositoryClientTypes.RollbackConfiguration?
    let semanticVersion: Swift.String?
    let stackName: Swift.String?
    let tags: [ServerlessApplicationRepositoryClientTypes.Tag]?
    let templateId: Swift.String?
}

extension CreateCloudFormationChangeSetInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case capabilities = "capabilities"
        case changeSetName = "changeSetName"
        case clientToken = "clientToken"
        case description = "description"
        case notificationArns = "notificationArns"
        case parameterOverrides = "parameterOverrides"
        case resourceTypes = "resourceTypes"
        case rollbackConfiguration = "rollbackConfiguration"
        case semanticVersion = "semanticVersion"
        case stackName = "stackName"
        case tags = "tags"
        case templateId = "templateId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let capabilitiesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .capabilities)
        var capabilitiesDecoded0:[Swift.String]? = nil
        if let capabilitiesContainer = capabilitiesContainer {
            capabilitiesDecoded0 = [Swift.String]()
            for string0 in capabilitiesContainer {
                if let string0 = string0 {
                    capabilitiesDecoded0?.append(string0)
                }
            }
        }
        capabilities = capabilitiesDecoded0
        let changeSetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .changeSetName)
        changeSetName = changeSetNameDecoded
        let clientTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientToken)
        clientToken = clientTokenDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let notificationArnsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .notificationArns)
        var notificationArnsDecoded0:[Swift.String]? = nil
        if let notificationArnsContainer = notificationArnsContainer {
            notificationArnsDecoded0 = [Swift.String]()
            for string0 in notificationArnsContainer {
                if let string0 = string0 {
                    notificationArnsDecoded0?.append(string0)
                }
            }
        }
        notificationArns = notificationArnsDecoded0
        let parameterOverridesContainer = try containerValues.decodeIfPresent([ServerlessApplicationRepositoryClientTypes.ParameterValue?].self, forKey: .parameterOverrides)
        var parameterOverridesDecoded0:[ServerlessApplicationRepositoryClientTypes.ParameterValue]? = nil
        if let parameterOverridesContainer = parameterOverridesContainer {
            parameterOverridesDecoded0 = [ServerlessApplicationRepositoryClientTypes.ParameterValue]()
            for structure0 in parameterOverridesContainer {
                if let structure0 = structure0 {
                    parameterOverridesDecoded0?.append(structure0)
                }
            }
        }
        parameterOverrides = parameterOverridesDecoded0
        let resourceTypesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .resourceTypes)
        var resourceTypesDecoded0:[Swift.String]? = nil
        if let resourceTypesContainer = resourceTypesContainer {
            resourceTypesDecoded0 = [Swift.String]()
            for string0 in resourceTypesContainer {
                if let string0 = string0 {
                    resourceTypesDecoded0?.append(string0)
                }
            }
        }
        resourceTypes = resourceTypesDecoded0
        let rollbackConfigurationDecoded = try containerValues.decodeIfPresent(ServerlessApplicationRepositoryClientTypes.RollbackConfiguration.self, forKey: .rollbackConfiguration)
        rollbackConfiguration = rollbackConfigurationDecoded
        let semanticVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .semanticVersion)
        semanticVersion = semanticVersionDecoded
        let stackNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stackName)
        stackName = stackNameDecoded
        let tagsContainer = try containerValues.decodeIfPresent([ServerlessApplicationRepositoryClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[ServerlessApplicationRepositoryClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [ServerlessApplicationRepositoryClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let templateIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateId)
        templateId = templateIdDecoded
    }
}
