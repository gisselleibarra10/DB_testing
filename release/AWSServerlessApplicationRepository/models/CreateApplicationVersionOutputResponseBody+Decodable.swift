// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateApplicationVersionOutputResponseBody: Swift.Equatable {
    let applicationId: Swift.String?
    let creationTime: Swift.String?
    let parameterDefinitions: [ServerlessApplicationRepositoryClientTypes.ParameterDefinition]?
    let requiredCapabilities: [ServerlessApplicationRepositoryClientTypes.Capability]?
    let resourcesSupported: Swift.Bool?
    let semanticVersion: Swift.String?
    let sourceCodeArchiveUrl: Swift.String?
    let sourceCodeUrl: Swift.String?
    let templateUrl: Swift.String?
}

extension CreateApplicationVersionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applicationId = "applicationId"
        case creationTime = "creationTime"
        case parameterDefinitions = "parameterDefinitions"
        case requiredCapabilities = "requiredCapabilities"
        case resourcesSupported = "resourcesSupported"
        case semanticVersion = "semanticVersion"
        case sourceCodeArchiveUrl = "sourceCodeArchiveUrl"
        case sourceCodeUrl = "sourceCodeUrl"
        case templateUrl = "templateUrl"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let applicationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .applicationId)
        applicationId = applicationIdDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let parameterDefinitionsContainer = try containerValues.decodeIfPresent([ServerlessApplicationRepositoryClientTypes.ParameterDefinition?].self, forKey: .parameterDefinitions)
        var parameterDefinitionsDecoded0:[ServerlessApplicationRepositoryClientTypes.ParameterDefinition]? = nil
        if let parameterDefinitionsContainer = parameterDefinitionsContainer {
            parameterDefinitionsDecoded0 = [ServerlessApplicationRepositoryClientTypes.ParameterDefinition]()
            for structure0 in parameterDefinitionsContainer {
                if let structure0 = structure0 {
                    parameterDefinitionsDecoded0?.append(structure0)
                }
            }
        }
        parameterDefinitions = parameterDefinitionsDecoded0
        let requiredCapabilitiesContainer = try containerValues.decodeIfPresent([ServerlessApplicationRepositoryClientTypes.Capability?].self, forKey: .requiredCapabilities)
        var requiredCapabilitiesDecoded0:[ServerlessApplicationRepositoryClientTypes.Capability]? = nil
        if let requiredCapabilitiesContainer = requiredCapabilitiesContainer {
            requiredCapabilitiesDecoded0 = [ServerlessApplicationRepositoryClientTypes.Capability]()
            for string0 in requiredCapabilitiesContainer {
                if let string0 = string0 {
                    requiredCapabilitiesDecoded0?.append(string0)
                }
            }
        }
        requiredCapabilities = requiredCapabilitiesDecoded0
        let resourcesSupportedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .resourcesSupported)
        resourcesSupported = resourcesSupportedDecoded
        let semanticVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .semanticVersion)
        semanticVersion = semanticVersionDecoded
        let sourceCodeArchiveUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceCodeArchiveUrl)
        sourceCodeArchiveUrl = sourceCodeArchiveUrlDecoded
        let sourceCodeUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceCodeUrl)
        sourceCodeUrl = sourceCodeUrlDecoded
        let templateUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateUrl)
        templateUrl = templateUrlDecoded
    }
}
