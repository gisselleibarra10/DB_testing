// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ServerlessApplicationRepositoryClientTypes.ApplicationPolicyStatement: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case actions = "actions"
        case principalOrgIDs = "principalOrgIDs"
        case principals = "principals"
        case statementId = "statementId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let actions = actions {
            var actionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .actions)
            for __listof__string0 in actions {
                try actionsContainer.encode(__listof__string0)
            }
        }
        if let principalOrgIDs = principalOrgIDs {
            var principalOrgIDsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .principalOrgIDs)
            for __listof__string0 in principalOrgIDs {
                try principalOrgIDsContainer.encode(__listof__string0)
            }
        }
        if let principals = principals {
            var principalsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .principals)
            for __listof__string0 in principals {
                try principalsContainer.encode(__listof__string0)
            }
        }
        if let statementId = self.statementId {
            try encodeContainer.encode(statementId, forKey: .statementId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let actionsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .actions)
        var actionsDecoded0:[Swift.String]? = nil
        if let actionsContainer = actionsContainer {
            actionsDecoded0 = [Swift.String]()
            for string0 in actionsContainer {
                if let string0 = string0 {
                    actionsDecoded0?.append(string0)
                }
            }
        }
        actions = actionsDecoded0
        let principalOrgIDsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .principalOrgIDs)
        var principalOrgIDsDecoded0:[Swift.String]? = nil
        if let principalOrgIDsContainer = principalOrgIDsContainer {
            principalOrgIDsDecoded0 = [Swift.String]()
            for string0 in principalOrgIDsContainer {
                if let string0 = string0 {
                    principalOrgIDsDecoded0?.append(string0)
                }
            }
        }
        principalOrgIDs = principalOrgIDsDecoded0
        let principalsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .principals)
        var principalsDecoded0:[Swift.String]? = nil
        if let principalsContainer = principalsContainer {
            principalsDecoded0 = [Swift.String]()
            for string0 in principalsContainer {
                if let string0 = string0 {
                    principalsDecoded0?.append(string0)
                }
            }
        }
        principals = principalsDecoded0
        let statementIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .statementId)
        statementId = statementIdDecoded
    }
}
