// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateApplicationInputBody: Swift.Equatable {
    let author: Swift.String?
    let description: Swift.String?
    let homePageUrl: Swift.String?
    let labels: [Swift.String]?
    let licenseBody: Swift.String?
    let licenseUrl: Swift.String?
    let name: Swift.String?
    let readmeBody: Swift.String?
    let readmeUrl: Swift.String?
    let semanticVersion: Swift.String?
    let sourceCodeArchiveUrl: Swift.String?
    let sourceCodeUrl: Swift.String?
    let spdxLicenseId: Swift.String?
    let templateBody: Swift.String?
    let templateUrl: Swift.String?
}

extension CreateApplicationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case author = "author"
        case description = "description"
        case homePageUrl = "homePageUrl"
        case labels = "labels"
        case licenseBody = "licenseBody"
        case licenseUrl = "licenseUrl"
        case name = "name"
        case readmeBody = "readmeBody"
        case readmeUrl = "readmeUrl"
        case semanticVersion = "semanticVersion"
        case sourceCodeArchiveUrl = "sourceCodeArchiveUrl"
        case sourceCodeUrl = "sourceCodeUrl"
        case spdxLicenseId = "spdxLicenseId"
        case templateBody = "templateBody"
        case templateUrl = "templateUrl"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let authorDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .author)
        author = authorDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let homePageUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .homePageUrl)
        homePageUrl = homePageUrlDecoded
        let labelsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .labels)
        var labelsDecoded0:[Swift.String]? = nil
        if let labelsContainer = labelsContainer {
            labelsDecoded0 = [Swift.String]()
            for string0 in labelsContainer {
                if let string0 = string0 {
                    labelsDecoded0?.append(string0)
                }
            }
        }
        labels = labelsDecoded0
        let licenseBodyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .licenseBody)
        licenseBody = licenseBodyDecoded
        let licenseUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .licenseUrl)
        licenseUrl = licenseUrlDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let readmeBodyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .readmeBody)
        readmeBody = readmeBodyDecoded
        let readmeUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .readmeUrl)
        readmeUrl = readmeUrlDecoded
        let semanticVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .semanticVersion)
        semanticVersion = semanticVersionDecoded
        let sourceCodeArchiveUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceCodeArchiveUrl)
        sourceCodeArchiveUrl = sourceCodeArchiveUrlDecoded
        let sourceCodeUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceCodeUrl)
        sourceCodeUrl = sourceCodeUrlDecoded
        let spdxLicenseIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .spdxLicenseId)
        spdxLicenseId = spdxLicenseIdDecoded
        let templateBodyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateBody)
        templateBody = templateBodyDecoded
        let templateUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateUrl)
        templateUrl = templateUrlDecoded
    }
}
