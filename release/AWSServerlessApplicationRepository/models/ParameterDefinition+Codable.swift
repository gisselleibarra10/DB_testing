// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ServerlessApplicationRepositoryClientTypes.ParameterDefinition: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case allowedPattern = "allowedPattern"
        case allowedValues = "allowedValues"
        case constraintDescription = "constraintDescription"
        case defaultValue = "defaultValue"
        case description = "description"
        case maxLength = "maxLength"
        case maxValue = "maxValue"
        case minLength = "minLength"
        case minValue = "minValue"
        case name = "name"
        case noEcho = "noEcho"
        case referencedByResources = "referencedByResources"
        case type = "type"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let allowedPattern = self.allowedPattern {
            try encodeContainer.encode(allowedPattern, forKey: .allowedPattern)
        }
        if let allowedValues = allowedValues {
            var allowedValuesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .allowedValues)
            for __listof__string0 in allowedValues {
                try allowedValuesContainer.encode(__listof__string0)
            }
        }
        if let constraintDescription = self.constraintDescription {
            try encodeContainer.encode(constraintDescription, forKey: .constraintDescription)
        }
        if let defaultValue = self.defaultValue {
            try encodeContainer.encode(defaultValue, forKey: .defaultValue)
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let maxLength = self.maxLength {
            try encodeContainer.encode(maxLength, forKey: .maxLength)
        }
        if let maxValue = self.maxValue {
            try encodeContainer.encode(maxValue, forKey: .maxValue)
        }
        if let minLength = self.minLength {
            try encodeContainer.encode(minLength, forKey: .minLength)
        }
        if let minValue = self.minValue {
            try encodeContainer.encode(minValue, forKey: .minValue)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let noEcho = self.noEcho {
            try encodeContainer.encode(noEcho, forKey: .noEcho)
        }
        if let referencedByResources = referencedByResources {
            var referencedByResourcesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .referencedByResources)
            for __listof__string0 in referencedByResources {
                try referencedByResourcesContainer.encode(__listof__string0)
            }
        }
        if let type = self.type {
            try encodeContainer.encode(type, forKey: .type)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let allowedPatternDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .allowedPattern)
        allowedPattern = allowedPatternDecoded
        let allowedValuesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .allowedValues)
        var allowedValuesDecoded0:[Swift.String]? = nil
        if let allowedValuesContainer = allowedValuesContainer {
            allowedValuesDecoded0 = [Swift.String]()
            for string0 in allowedValuesContainer {
                if let string0 = string0 {
                    allowedValuesDecoded0?.append(string0)
                }
            }
        }
        allowedValues = allowedValuesDecoded0
        let constraintDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .constraintDescription)
        constraintDescription = constraintDescriptionDecoded
        let defaultValueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .defaultValue)
        defaultValue = defaultValueDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let maxLengthDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxLength)
        maxLength = maxLengthDecoded
        let maxValueDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxValue)
        maxValue = maxValueDecoded
        let minLengthDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .minLength)
        minLength = minLengthDecoded
        let minValueDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .minValue)
        minValue = minValueDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let noEchoDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .noEcho)
        noEcho = noEchoDecoded
        let referencedByResourcesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .referencedByResources)
        var referencedByResourcesDecoded0:[Swift.String]? = nil
        if let referencedByResourcesContainer = referencedByResourcesContainer {
            referencedByResourcesDecoded0 = [Swift.String]()
            for string0 in referencedByResourcesContainer {
                if let string0 = string0 {
                    referencedByResourcesDecoded0?.append(string0)
                }
            }
        }
        referencedByResources = referencedByResourcesDecoded0
        let typeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .type)
        type = typeDecoded
    }
}
