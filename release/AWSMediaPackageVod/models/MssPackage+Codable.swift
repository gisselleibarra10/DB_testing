// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension MediaPackageVodClientTypes.MssPackage: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case encryption = "encryption"
        case mssManifests = "mssManifests"
        case segmentDurationSeconds = "segmentDurationSeconds"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let encryption = self.encryption {
            try encodeContainer.encode(encryption, forKey: .encryption)
        }
        if let mssManifests = mssManifests {
            var mssManifestsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .mssManifests)
            for __listofmssmanifest0 in mssManifests {
                try mssManifestsContainer.encode(__listofmssmanifest0)
            }
        }
        if let segmentDurationSeconds = self.segmentDurationSeconds {
            try encodeContainer.encode(segmentDurationSeconds, forKey: .segmentDurationSeconds)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let encryptionDecoded = try containerValues.decodeIfPresent(MediaPackageVodClientTypes.MssEncryption.self, forKey: .encryption)
        encryption = encryptionDecoded
        let mssManifestsContainer = try containerValues.decodeIfPresent([MediaPackageVodClientTypes.MssManifest?].self, forKey: .mssManifests)
        var mssManifestsDecoded0:[MediaPackageVodClientTypes.MssManifest]? = nil
        if let mssManifestsContainer = mssManifestsContainer {
            mssManifestsDecoded0 = [MediaPackageVodClientTypes.MssManifest]()
            for structure0 in mssManifestsContainer {
                if let structure0 = structure0 {
                    mssManifestsDecoded0?.append(structure0)
                }
            }
        }
        mssManifests = mssManifestsDecoded0
        let segmentDurationSecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .segmentDurationSeconds)
        segmentDurationSeconds = segmentDurationSecondsDecoded
    }
}
