// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension MediaPackageVodClientTypes.DashManifest: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case manifestLayout = "manifestLayout"
        case manifestName = "manifestName"
        case minBufferTimeSeconds = "minBufferTimeSeconds"
        case profile = "profile"
        case scteMarkersSource = "scteMarkersSource"
        case streamSelection = "streamSelection"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let manifestLayout = self.manifestLayout {
            try encodeContainer.encode(manifestLayout.rawValue, forKey: .manifestLayout)
        }
        if let manifestName = self.manifestName {
            try encodeContainer.encode(manifestName, forKey: .manifestName)
        }
        if let minBufferTimeSeconds = self.minBufferTimeSeconds {
            try encodeContainer.encode(minBufferTimeSeconds, forKey: .minBufferTimeSeconds)
        }
        if let profile = self.profile {
            try encodeContainer.encode(profile.rawValue, forKey: .profile)
        }
        if let scteMarkersSource = self.scteMarkersSource {
            try encodeContainer.encode(scteMarkersSource.rawValue, forKey: .scteMarkersSource)
        }
        if let streamSelection = self.streamSelection {
            try encodeContainer.encode(streamSelection, forKey: .streamSelection)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let manifestLayoutDecoded = try containerValues.decodeIfPresent(MediaPackageVodClientTypes.ManifestLayout.self, forKey: .manifestLayout)
        manifestLayout = manifestLayoutDecoded
        let manifestNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .manifestName)
        manifestName = manifestNameDecoded
        let minBufferTimeSecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .minBufferTimeSeconds)
        minBufferTimeSeconds = minBufferTimeSecondsDecoded
        let profileDecoded = try containerValues.decodeIfPresent(MediaPackageVodClientTypes.Profile.self, forKey: .profile)
        profile = profileDecoded
        let scteMarkersSourceDecoded = try containerValues.decodeIfPresent(MediaPackageVodClientTypes.ScteMarkersSource.self, forKey: .scteMarkersSource)
        scteMarkersSource = scteMarkersSourceDecoded
        let streamSelectionDecoded = try containerValues.decodeIfPresent(MediaPackageVodClientTypes.StreamSelection.self, forKey: .streamSelection)
        streamSelection = streamSelectionDecoded
    }
}
