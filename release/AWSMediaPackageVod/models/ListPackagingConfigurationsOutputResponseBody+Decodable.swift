// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListPackagingConfigurationsOutputResponseBody: Swift.Equatable {
    let nextToken: Swift.String?
    let packagingConfigurations: [MediaPackageVodClientTypes.PackagingConfiguration]?
}

extension ListPackagingConfigurationsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "nextToken"
        case packagingConfigurations = "packagingConfigurations"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let packagingConfigurationsContainer = try containerValues.decodeIfPresent([MediaPackageVodClientTypes.PackagingConfiguration?].self, forKey: .packagingConfigurations)
        var packagingConfigurationsDecoded0:[MediaPackageVodClientTypes.PackagingConfiguration]? = nil
        if let packagingConfigurationsContainer = packagingConfigurationsContainer {
            packagingConfigurationsDecoded0 = [MediaPackageVodClientTypes.PackagingConfiguration]()
            for structure0 in packagingConfigurationsContainer {
                if let structure0 = structure0 {
                    packagingConfigurationsDecoded0?.append(structure0)
                }
            }
        }
        packagingConfigurations = packagingConfigurationsDecoded0
    }
}
