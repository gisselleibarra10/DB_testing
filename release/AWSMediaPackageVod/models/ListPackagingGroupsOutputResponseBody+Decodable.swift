// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListPackagingGroupsOutputResponseBody: Swift.Equatable {
    let nextToken: Swift.String?
    let packagingGroups: [MediaPackageVodClientTypes.PackagingGroup]?
}

extension ListPackagingGroupsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "nextToken"
        case packagingGroups = "packagingGroups"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let packagingGroupsContainer = try containerValues.decodeIfPresent([MediaPackageVodClientTypes.PackagingGroup?].self, forKey: .packagingGroups)
        var packagingGroupsDecoded0:[MediaPackageVodClientTypes.PackagingGroup]? = nil
        if let packagingGroupsContainer = packagingGroupsContainer {
            packagingGroupsDecoded0 = [MediaPackageVodClientTypes.PackagingGroup]()
            for structure0 in packagingGroupsContainer {
                if let structure0 = structure0 {
                    packagingGroupsDecoded0?.append(structure0)
                }
            }
        }
        packagingGroups = packagingGroupsDecoded0
    }
}
