// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension GuardDutyClientTypes.Scan: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountId = "accountId"
        case adminDetectorId = "adminDetectorId"
        case attachedVolumes = "attachedVolumes"
        case detectorId = "detectorId"
        case failureReason = "failureReason"
        case fileCount = "fileCount"
        case resourceDetails = "resourceDetails"
        case scanEndTime = "scanEndTime"
        case scanId = "scanId"
        case scanResultDetails = "scanResultDetails"
        case scanStartTime = "scanStartTime"
        case scanStatus = "scanStatus"
        case totalBytes = "totalBytes"
        case triggerDetails = "triggerDetails"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accountId = self.accountId {
            try encodeContainer.encode(accountId, forKey: .accountId)
        }
        if let adminDetectorId = self.adminDetectorId {
            try encodeContainer.encode(adminDetectorId, forKey: .adminDetectorId)
        }
        if let attachedVolumes = attachedVolumes {
            var attachedVolumesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .attachedVolumes)
            for volumedetails0 in attachedVolumes {
                try attachedVolumesContainer.encode(volumedetails0)
            }
        }
        if let detectorId = self.detectorId {
            try encodeContainer.encode(detectorId, forKey: .detectorId)
        }
        if let failureReason = self.failureReason {
            try encodeContainer.encode(failureReason, forKey: .failureReason)
        }
        if fileCount != 0 {
            try encodeContainer.encode(fileCount, forKey: .fileCount)
        }
        if let resourceDetails = self.resourceDetails {
            try encodeContainer.encode(resourceDetails, forKey: .resourceDetails)
        }
        if let scanEndTime = self.scanEndTime {
            try encodeContainer.encode(scanEndTime.timeIntervalSince1970, forKey: .scanEndTime)
        }
        if let scanId = self.scanId {
            try encodeContainer.encode(scanId, forKey: .scanId)
        }
        if let scanResultDetails = self.scanResultDetails {
            try encodeContainer.encode(scanResultDetails, forKey: .scanResultDetails)
        }
        if let scanStartTime = self.scanStartTime {
            try encodeContainer.encode(scanStartTime.timeIntervalSince1970, forKey: .scanStartTime)
        }
        if let scanStatus = self.scanStatus {
            try encodeContainer.encode(scanStatus.rawValue, forKey: .scanStatus)
        }
        if totalBytes != 0 {
            try encodeContainer.encode(totalBytes, forKey: .totalBytes)
        }
        if let triggerDetails = self.triggerDetails {
            try encodeContainer.encode(triggerDetails, forKey: .triggerDetails)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let detectorIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .detectorId)
        detectorId = detectorIdDecoded
        let adminDetectorIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .adminDetectorId)
        adminDetectorId = adminDetectorIdDecoded
        let scanIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .scanId)
        scanId = scanIdDecoded
        let scanStatusDecoded = try containerValues.decodeIfPresent(GuardDutyClientTypes.ScanStatus.self, forKey: .scanStatus)
        scanStatus = scanStatusDecoded
        let failureReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .failureReason)
        failureReason = failureReasonDecoded
        let scanStartTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .scanStartTime)
        scanStartTime = scanStartTimeDecoded
        let scanEndTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .scanEndTime)
        scanEndTime = scanEndTimeDecoded
        let triggerDetailsDecoded = try containerValues.decodeIfPresent(GuardDutyClientTypes.TriggerDetails.self, forKey: .triggerDetails)
        triggerDetails = triggerDetailsDecoded
        let resourceDetailsDecoded = try containerValues.decodeIfPresent(GuardDutyClientTypes.ResourceDetails.self, forKey: .resourceDetails)
        resourceDetails = resourceDetailsDecoded
        let scanResultDetailsDecoded = try containerValues.decodeIfPresent(GuardDutyClientTypes.ScanResultDetails.self, forKey: .scanResultDetails)
        scanResultDetails = scanResultDetailsDecoded
        let accountIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .accountId)
        accountId = accountIdDecoded
        let totalBytesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .totalBytes) ?? 0
        totalBytes = totalBytesDecoded
        let fileCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .fileCount) ?? 0
        fileCount = fileCountDecoded
        let attachedVolumesContainer = try containerValues.decodeIfPresent([GuardDutyClientTypes.VolumeDetail?].self, forKey: .attachedVolumes)
        var attachedVolumesDecoded0:[GuardDutyClientTypes.VolumeDetail]? = nil
        if let attachedVolumesContainer = attachedVolumesContainer {
            attachedVolumesDecoded0 = [GuardDutyClientTypes.VolumeDetail]()
            for structure0 in attachedVolumesContainer {
                if let structure0 = structure0 {
                    attachedVolumesDecoded0?.append(structure0)
                }
            }
        }
        attachedVolumes = attachedVolumesDecoded0
    }
}
