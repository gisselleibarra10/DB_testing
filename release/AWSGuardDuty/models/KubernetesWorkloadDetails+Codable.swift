// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension GuardDutyClientTypes.KubernetesWorkloadDetails: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case containers = "containers"
        case hostNetwork = "hostNetwork"
        case name = "name"
        case namespace = "namespace"
        case type = "type"
        case uid = "uid"
        case volumes = "volumes"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let containers = containers {
            var containersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .containers)
            for containers0 in containers {
                try containersContainer.encode(containers0)
            }
        }
        if hostNetwork != false {
            try encodeContainer.encode(hostNetwork, forKey: .hostNetwork)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let namespace = self.namespace {
            try encodeContainer.encode(namespace, forKey: .namespace)
        }
        if let type = self.type {
            try encodeContainer.encode(type, forKey: .type)
        }
        if let uid = self.uid {
            try encodeContainer.encode(uid, forKey: .uid)
        }
        if let volumes = volumes {
            var volumesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .volumes)
            for volumes0 in volumes {
                try volumesContainer.encode(volumes0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let typeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .type)
        type = typeDecoded
        let uidDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .uid)
        uid = uidDecoded
        let namespaceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .namespace)
        namespace = namespaceDecoded
        let hostNetworkDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .hostNetwork) ?? false
        hostNetwork = hostNetworkDecoded
        let containersContainer = try containerValues.decodeIfPresent([GuardDutyClientTypes.Container?].self, forKey: .containers)
        var containersDecoded0:[GuardDutyClientTypes.Container]? = nil
        if let containersContainer = containersContainer {
            containersDecoded0 = [GuardDutyClientTypes.Container]()
            for structure0 in containersContainer {
                if let structure0 = structure0 {
                    containersDecoded0?.append(structure0)
                }
            }
        }
        containers = containersDecoded0
        let volumesContainer = try containerValues.decodeIfPresent([GuardDutyClientTypes.Volume?].self, forKey: .volumes)
        var volumesDecoded0:[GuardDutyClientTypes.Volume]? = nil
        if let volumesContainer = volumesContainer {
            volumesDecoded0 = [GuardDutyClientTypes.Volume]()
            for structure0 in volumesContainer {
                if let structure0 = structure0 {
                    volumesDecoded0?.append(structure0)
                }
            }
        }
        volumes = volumesDecoded0
    }
}
