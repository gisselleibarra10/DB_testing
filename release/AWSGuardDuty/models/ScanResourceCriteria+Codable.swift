// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension GuardDutyClientTypes.ScanResourceCriteria: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case exclude = "exclude"
        case include = "include"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let exclude = exclude {
            var excludeContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .exclude)
            for (dictKey0, scancriterion0) in exclude {
                try excludeContainer.encode(scancriterion0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let include = include {
            var includeContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .include)
            for (dictKey0, scancriterion0) in include {
                try includeContainer.encode(scancriterion0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let includeContainer = try containerValues.decodeIfPresent([Swift.String: GuardDutyClientTypes.ScanCondition?].self, forKey: .include)
        var includeDecoded0: [Swift.String:GuardDutyClientTypes.ScanCondition]? = nil
        if let includeContainer = includeContainer {
            includeDecoded0 = [Swift.String:GuardDutyClientTypes.ScanCondition]()
            for (key0, scancondition0) in includeContainer {
                if let scancondition0 = scancondition0 {
                    includeDecoded0?[key0] = scancondition0
                }
            }
        }
        include = includeDecoded0
        let excludeContainer = try containerValues.decodeIfPresent([Swift.String: GuardDutyClientTypes.ScanCondition?].self, forKey: .exclude)
        var excludeDecoded0: [Swift.String:GuardDutyClientTypes.ScanCondition]? = nil
        if let excludeContainer = excludeContainer {
            excludeDecoded0 = [Swift.String:GuardDutyClientTypes.ScanCondition]()
            for (key0, scancondition0) in excludeContainer {
                if let scancondition0 = scancondition0 {
                    excludeDecoded0?[key0] = scancondition0
                }
            }
        }
        exclude = excludeDecoded0
    }
}
