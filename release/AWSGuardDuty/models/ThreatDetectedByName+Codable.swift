// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension GuardDutyClientTypes.ThreatDetectedByName: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case itemCount = "itemCount"
        case shortened = "shortened"
        case threatNames = "threatNames"
        case uniqueThreatNameCount = "uniqueThreatNameCount"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if itemCount != 0 {
            try encodeContainer.encode(itemCount, forKey: .itemCount)
        }
        if shortened != false {
            try encodeContainer.encode(shortened, forKey: .shortened)
        }
        if let threatNames = threatNames {
            var threatNamesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .threatNames)
            for scanthreatnames0 in threatNames {
                try threatNamesContainer.encode(scanthreatnames0)
            }
        }
        if uniqueThreatNameCount != 0 {
            try encodeContainer.encode(uniqueThreatNameCount, forKey: .uniqueThreatNameCount)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let itemCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .itemCount) ?? 0
        itemCount = itemCountDecoded
        let uniqueThreatNameCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .uniqueThreatNameCount) ?? 0
        uniqueThreatNameCount = uniqueThreatNameCountDecoded
        let shortenedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .shortened) ?? false
        shortened = shortenedDecoded
        let threatNamesContainer = try containerValues.decodeIfPresent([GuardDutyClientTypes.ScanThreatName?].self, forKey: .threatNames)
        var threatNamesDecoded0:[GuardDutyClientTypes.ScanThreatName]? = nil
        if let threatNamesContainer = threatNamesContainer {
            threatNamesDecoded0 = [GuardDutyClientTypes.ScanThreatName]()
            for structure0 in threatNamesContainer {
                if let structure0 = structure0 {
                    threatNamesDecoded0?.append(structure0)
                }
            }
        }
        threatNames = threatNamesDecoded0
    }
}
