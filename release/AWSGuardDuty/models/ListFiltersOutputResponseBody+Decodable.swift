// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListFiltersOutputResponseBody: Swift.Equatable {
    let filterNames: [Swift.String]?
    let nextToken: Swift.String?
}

extension ListFiltersOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filterNames = "filterNames"
        case nextToken = "nextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let filterNamesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .filterNames)
        var filterNamesDecoded0:[Swift.String]? = nil
        if let filterNamesContainer = filterNamesContainer {
            filterNamesDecoded0 = [Swift.String]()
            for string0 in filterNamesContainer {
                if let string0 = string0 {
                    filterNamesDecoded0?.append(string0)
                }
            }
        }
        filterNames = filterNamesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
