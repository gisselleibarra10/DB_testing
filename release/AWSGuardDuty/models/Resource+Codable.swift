// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension GuardDutyClientTypes.Resource: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accessKeyDetails = "accessKeyDetails"
        case containerDetails = "containerDetails"
        case ebsVolumeDetails = "ebsVolumeDetails"
        case ecsClusterDetails = "ecsClusterDetails"
        case eksClusterDetails = "eksClusterDetails"
        case instanceDetails = "instanceDetails"
        case kubernetesDetails = "kubernetesDetails"
        case resourceType = "resourceType"
        case s3BucketDetails = "s3BucketDetails"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accessKeyDetails = self.accessKeyDetails {
            try encodeContainer.encode(accessKeyDetails, forKey: .accessKeyDetails)
        }
        if let containerDetails = self.containerDetails {
            try encodeContainer.encode(containerDetails, forKey: .containerDetails)
        }
        if let ebsVolumeDetails = self.ebsVolumeDetails {
            try encodeContainer.encode(ebsVolumeDetails, forKey: .ebsVolumeDetails)
        }
        if let ecsClusterDetails = self.ecsClusterDetails {
            try encodeContainer.encode(ecsClusterDetails, forKey: .ecsClusterDetails)
        }
        if let eksClusterDetails = self.eksClusterDetails {
            try encodeContainer.encode(eksClusterDetails, forKey: .eksClusterDetails)
        }
        if let instanceDetails = self.instanceDetails {
            try encodeContainer.encode(instanceDetails, forKey: .instanceDetails)
        }
        if let kubernetesDetails = self.kubernetesDetails {
            try encodeContainer.encode(kubernetesDetails, forKey: .kubernetesDetails)
        }
        if let resourceType = self.resourceType {
            try encodeContainer.encode(resourceType, forKey: .resourceType)
        }
        if let s3BucketDetails = s3BucketDetails {
            var s3BucketDetailsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .s3BucketDetails)
            for s3bucketdetails0 in s3BucketDetails {
                try s3BucketDetailsContainer.encode(s3bucketdetails0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let accessKeyDetailsDecoded = try containerValues.decodeIfPresent(GuardDutyClientTypes.AccessKeyDetails.self, forKey: .accessKeyDetails)
        accessKeyDetails = accessKeyDetailsDecoded
        let s3BucketDetailsContainer = try containerValues.decodeIfPresent([GuardDutyClientTypes.S3BucketDetail?].self, forKey: .s3BucketDetails)
        var s3BucketDetailsDecoded0:[GuardDutyClientTypes.S3BucketDetail]? = nil
        if let s3BucketDetailsContainer = s3BucketDetailsContainer {
            s3BucketDetailsDecoded0 = [GuardDutyClientTypes.S3BucketDetail]()
            for structure0 in s3BucketDetailsContainer {
                if let structure0 = structure0 {
                    s3BucketDetailsDecoded0?.append(structure0)
                }
            }
        }
        s3BucketDetails = s3BucketDetailsDecoded0
        let instanceDetailsDecoded = try containerValues.decodeIfPresent(GuardDutyClientTypes.InstanceDetails.self, forKey: .instanceDetails)
        instanceDetails = instanceDetailsDecoded
        let eksClusterDetailsDecoded = try containerValues.decodeIfPresent(GuardDutyClientTypes.EksClusterDetails.self, forKey: .eksClusterDetails)
        eksClusterDetails = eksClusterDetailsDecoded
        let kubernetesDetailsDecoded = try containerValues.decodeIfPresent(GuardDutyClientTypes.KubernetesDetails.self, forKey: .kubernetesDetails)
        kubernetesDetails = kubernetesDetailsDecoded
        let resourceTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let ebsVolumeDetailsDecoded = try containerValues.decodeIfPresent(GuardDutyClientTypes.EbsVolumeDetails.self, forKey: .ebsVolumeDetails)
        ebsVolumeDetails = ebsVolumeDetailsDecoded
        let ecsClusterDetailsDecoded = try containerValues.decodeIfPresent(GuardDutyClientTypes.EcsClusterDetails.self, forKey: .ecsClusterDetails)
        ecsClusterDetails = ecsClusterDetailsDecoded
        let containerDetailsDecoded = try containerValues.decodeIfPresent(GuardDutyClientTypes.Container.self, forKey: .containerDetails)
        containerDetails = containerDetailsDecoded
    }
}
