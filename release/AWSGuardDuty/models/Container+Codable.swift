// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension GuardDutyClientTypes.Container: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case containerRuntime = "containerRuntime"
        case id = "id"
        case image = "image"
        case imagePrefix = "imagePrefix"
        case name = "name"
        case securityContext = "securityContext"
        case volumeMounts = "volumeMounts"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let containerRuntime = self.containerRuntime {
            try encodeContainer.encode(containerRuntime, forKey: .containerRuntime)
        }
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let image = self.image {
            try encodeContainer.encode(image, forKey: .image)
        }
        if let imagePrefix = self.imagePrefix {
            try encodeContainer.encode(imagePrefix, forKey: .imagePrefix)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let securityContext = self.securityContext {
            try encodeContainer.encode(securityContext, forKey: .securityContext)
        }
        if let volumeMounts = volumeMounts {
            var volumeMountsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .volumeMounts)
            for volumemounts0 in volumeMounts {
                try volumeMountsContainer.encode(volumemounts0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let containerRuntimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .containerRuntime)
        containerRuntime = containerRuntimeDecoded
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let imageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .image)
        image = imageDecoded
        let imagePrefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .imagePrefix)
        imagePrefix = imagePrefixDecoded
        let volumeMountsContainer = try containerValues.decodeIfPresent([GuardDutyClientTypes.VolumeMount?].self, forKey: .volumeMounts)
        var volumeMountsDecoded0:[GuardDutyClientTypes.VolumeMount]? = nil
        if let volumeMountsContainer = volumeMountsContainer {
            volumeMountsDecoded0 = [GuardDutyClientTypes.VolumeMount]()
            for structure0 in volumeMountsContainer {
                if let structure0 = structure0 {
                    volumeMountsDecoded0?.append(structure0)
                }
            }
        }
        volumeMounts = volumeMountsDecoded0
        let securityContextDecoded = try containerValues.decodeIfPresent(GuardDutyClientTypes.SecurityContext.self, forKey: .securityContext)
        securityContext = securityContextDecoded
    }
}
