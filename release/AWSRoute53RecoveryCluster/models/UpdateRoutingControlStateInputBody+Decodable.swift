// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct UpdateRoutingControlStateInputBody: Swift.Equatable {
    let routingControlArn: Swift.String?
    let routingControlState: Route53RecoveryClusterClientTypes.RoutingControlState?
    let safetyRulesToOverride: [Swift.String]?
}

extension UpdateRoutingControlStateInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case routingControlArn = "RoutingControlArn"
        case routingControlState = "RoutingControlState"
        case safetyRulesToOverride = "SafetyRulesToOverride"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let routingControlArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .routingControlArn)
        routingControlArn = routingControlArnDecoded
        let routingControlStateDecoded = try containerValues.decodeIfPresent(Route53RecoveryClusterClientTypes.RoutingControlState.self, forKey: .routingControlState)
        routingControlState = routingControlStateDecoded
        let safetyRulesToOverrideContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .safetyRulesToOverride)
        var safetyRulesToOverrideDecoded0:[Swift.String]? = nil
        if let safetyRulesToOverrideContainer = safetyRulesToOverrideContainer {
            safetyRulesToOverrideDecoded0 = [Swift.String]()
            for string0 in safetyRulesToOverrideContainer {
                if let string0 = string0 {
                    safetyRulesToOverrideDecoded0?.append(string0)
                }
            }
        }
        safetyRulesToOverride = safetyRulesToOverrideDecoded0
    }
}
