// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension LexModelsV2ClientTypes {
    /// Provides a prompt for making sure that the user is ready for the intent to be fulfilled.
    public struct IntentConfirmationSetting: Swift.Equatable {
        /// Specifies whether the intent's confirmation is sent to the user. When this field is false, confirmation and declination responses aren't sent. If the active field isn't specified, the default is true.
        public var active: Swift.Bool?
        /// The DialogCodeHookInvocationSetting object associated with intent's confirmation step. The dialog code hook is triggered based on these invocation settings when the confirmation next step or declination next step or failure next step is InvokeDialogCodeHook.
        public var codeHook: LexModelsV2ClientTypes.DialogCodeHookInvocationSetting?
        /// A list of conditional branches to evaluate after the intent is closed.
        public var confirmationConditional: LexModelsV2ClientTypes.ConditionalSpecification?
        /// Specifies the next step that the bot executes when the customer confirms the intent.
        public var confirmationNextStep: LexModelsV2ClientTypes.DialogState?
        /// Specifies a list of message groups that Amazon Lex uses to respond the user input.
        public var confirmationResponse: LexModelsV2ClientTypes.ResponseSpecification?
        /// A list of conditional branches to evaluate after the intent is declined.
        public var declinationConditional: LexModelsV2ClientTypes.ConditionalSpecification?
        /// Specifies the next step that the bot executes when the customer declines the intent.
        public var declinationNextStep: LexModelsV2ClientTypes.DialogState?
        /// When the user answers "no" to the question defined in promptSpecification, Amazon Lex responds with this response to acknowledge that the intent was canceled.
        public var declinationResponse: LexModelsV2ClientTypes.ResponseSpecification?
        /// The DialogCodeHookInvocationSetting used when the code hook is invoked during confirmation prompt retries.
        public var elicitationCodeHook: LexModelsV2ClientTypes.ElicitationCodeHookInvocationSetting?
        /// Provides a list of conditional branches. Branches are evaluated in the order that they are entered in the list. The first branch with a condition that evaluates to true is executed. The last branch in the list is the default branch. The default branch should not have any condition expression. The default branch is executed if no other branch has a matching condition.
        public var failureConditional: LexModelsV2ClientTypes.ConditionalSpecification?
        /// The next step to take in the conversation if the confirmation step fails.
        public var failureNextStep: LexModelsV2ClientTypes.DialogState?
        /// Specifies a list of message groups that Amazon Lex uses to respond the user input.
        public var failureResponse: LexModelsV2ClientTypes.ResponseSpecification?
        /// Prompts the user to confirm the intent. This question should have a yes or no answer. Amazon Lex uses this prompt to ensure that the user acknowledges that the intent is ready for fulfillment. For example, with the OrderPizza intent, you might want to confirm that the order is correct before placing it. For other intents, such as intents that simply respond to user questions, you might not need to ask the user for confirmation before providing the information.
        /// This member is required.
        public var promptSpecification: LexModelsV2ClientTypes.PromptSpecification?

        public init (
            active: Swift.Bool? = nil,
            codeHook: LexModelsV2ClientTypes.DialogCodeHookInvocationSetting? = nil,
            confirmationConditional: LexModelsV2ClientTypes.ConditionalSpecification? = nil,
            confirmationNextStep: LexModelsV2ClientTypes.DialogState? = nil,
            confirmationResponse: LexModelsV2ClientTypes.ResponseSpecification? = nil,
            declinationConditional: LexModelsV2ClientTypes.ConditionalSpecification? = nil,
            declinationNextStep: LexModelsV2ClientTypes.DialogState? = nil,
            declinationResponse: LexModelsV2ClientTypes.ResponseSpecification? = nil,
            elicitationCodeHook: LexModelsV2ClientTypes.ElicitationCodeHookInvocationSetting? = nil,
            failureConditional: LexModelsV2ClientTypes.ConditionalSpecification? = nil,
            failureNextStep: LexModelsV2ClientTypes.DialogState? = nil,
            failureResponse: LexModelsV2ClientTypes.ResponseSpecification? = nil,
            promptSpecification: LexModelsV2ClientTypes.PromptSpecification? = nil
        )
        {
            self.active = active
            self.codeHook = codeHook
            self.confirmationConditional = confirmationConditional
            self.confirmationNextStep = confirmationNextStep
            self.confirmationResponse = confirmationResponse
            self.declinationConditional = declinationConditional
            self.declinationNextStep = declinationNextStep
            self.declinationResponse = declinationResponse
            self.elicitationCodeHook = elicitationCodeHook
            self.failureConditional = failureConditional
            self.failureNextStep = failureNextStep
            self.failureResponse = failureResponse
            self.promptSpecification = promptSpecification
        }
    }

}
