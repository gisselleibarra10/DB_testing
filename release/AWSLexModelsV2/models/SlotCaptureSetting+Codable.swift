// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension LexModelsV2ClientTypes.SlotCaptureSetting: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case captureConditional
        case captureNextStep
        case captureResponse
        case codeHook
        case elicitationCodeHook
        case failureConditional
        case failureNextStep
        case failureResponse
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let captureConditional = self.captureConditional {
            try encodeContainer.encode(captureConditional, forKey: .captureConditional)
        }
        if let captureNextStep = self.captureNextStep {
            try encodeContainer.encode(captureNextStep, forKey: .captureNextStep)
        }
        if let captureResponse = self.captureResponse {
            try encodeContainer.encode(captureResponse, forKey: .captureResponse)
        }
        if let codeHook = self.codeHook {
            try encodeContainer.encode(codeHook, forKey: .codeHook)
        }
        if let elicitationCodeHook = self.elicitationCodeHook {
            try encodeContainer.encode(elicitationCodeHook, forKey: .elicitationCodeHook)
        }
        if let failureConditional = self.failureConditional {
            try encodeContainer.encode(failureConditional, forKey: .failureConditional)
        }
        if let failureNextStep = self.failureNextStep {
            try encodeContainer.encode(failureNextStep, forKey: .failureNextStep)
        }
        if let failureResponse = self.failureResponse {
            try encodeContainer.encode(failureResponse, forKey: .failureResponse)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let captureResponseDecoded = try containerValues.decodeIfPresent(LexModelsV2ClientTypes.ResponseSpecification.self, forKey: .captureResponse)
        captureResponse = captureResponseDecoded
        let captureNextStepDecoded = try containerValues.decodeIfPresent(LexModelsV2ClientTypes.DialogState.self, forKey: .captureNextStep)
        captureNextStep = captureNextStepDecoded
        let captureConditionalDecoded = try containerValues.decodeIfPresent(LexModelsV2ClientTypes.ConditionalSpecification.self, forKey: .captureConditional)
        captureConditional = captureConditionalDecoded
        let failureResponseDecoded = try containerValues.decodeIfPresent(LexModelsV2ClientTypes.ResponseSpecification.self, forKey: .failureResponse)
        failureResponse = failureResponseDecoded
        let failureNextStepDecoded = try containerValues.decodeIfPresent(LexModelsV2ClientTypes.DialogState.self, forKey: .failureNextStep)
        failureNextStep = failureNextStepDecoded
        let failureConditionalDecoded = try containerValues.decodeIfPresent(LexModelsV2ClientTypes.ConditionalSpecification.self, forKey: .failureConditional)
        failureConditional = failureConditionalDecoded
        let codeHookDecoded = try containerValues.decodeIfPresent(LexModelsV2ClientTypes.DialogCodeHookInvocationSetting.self, forKey: .codeHook)
        codeHook = codeHookDecoded
        let elicitationCodeHookDecoded = try containerValues.decodeIfPresent(LexModelsV2ClientTypes.ElicitationCodeHookInvocationSetting.self, forKey: .elicitationCodeHook)
        elicitationCodeHook = elicitationCodeHookDecoded
    }
}
