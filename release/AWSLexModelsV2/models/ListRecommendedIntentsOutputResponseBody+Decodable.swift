// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListRecommendedIntentsOutputResponseBody: Swift.Equatable {
    let botId: Swift.String?
    let botVersion: Swift.String?
    let localeId: Swift.String?
    let botRecommendationId: Swift.String?
    let summaryList: [LexModelsV2ClientTypes.RecommendedIntentSummary]?
    let nextToken: Swift.String?
}

extension ListRecommendedIntentsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case botId
        case botRecommendationId
        case botVersion
        case localeId
        case nextToken
        case summaryList
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let botIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .botId)
        botId = botIdDecoded
        let botVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .botVersion)
        botVersion = botVersionDecoded
        let localeIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .localeId)
        localeId = localeIdDecoded
        let botRecommendationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .botRecommendationId)
        botRecommendationId = botRecommendationIdDecoded
        let summaryListContainer = try containerValues.decodeIfPresent([LexModelsV2ClientTypes.RecommendedIntentSummary?].self, forKey: .summaryList)
        var summaryListDecoded0:[LexModelsV2ClientTypes.RecommendedIntentSummary]? = nil
        if let summaryListContainer = summaryListContainer {
            summaryListDecoded0 = [LexModelsV2ClientTypes.RecommendedIntentSummary]()
            for structure0 in summaryListContainer {
                if let structure0 = structure0 {
                    summaryListDecoded0?.append(structure0)
                }
            }
        }
        summaryList = summaryListDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
