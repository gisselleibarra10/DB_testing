// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListExportsOutputResponseBody: Swift.Equatable {
    let botId: Swift.String?
    let botVersion: Swift.String?
    let exportSummaries: [LexModelsV2ClientTypes.ExportSummary]?
    let nextToken: Swift.String?
    let localeId: Swift.String?
}

extension ListExportsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case botId
        case botVersion
        case exportSummaries
        case localeId
        case nextToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let botIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .botId)
        botId = botIdDecoded
        let botVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .botVersion)
        botVersion = botVersionDecoded
        let exportSummariesContainer = try containerValues.decodeIfPresent([LexModelsV2ClientTypes.ExportSummary?].self, forKey: .exportSummaries)
        var exportSummariesDecoded0:[LexModelsV2ClientTypes.ExportSummary]? = nil
        if let exportSummariesContainer = exportSummariesContainer {
            exportSummariesDecoded0 = [LexModelsV2ClientTypes.ExportSummary]()
            for structure0 in exportSummariesContainer {
                if let structure0 = structure0 {
                    exportSummariesDecoded0?.append(structure0)
                }
            }
        }
        exportSummaries = exportSummariesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let localeIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .localeId)
        localeId = localeIdDecoded
    }
}
