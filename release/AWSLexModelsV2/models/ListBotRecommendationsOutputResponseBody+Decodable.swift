// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListBotRecommendationsOutputResponseBody: Swift.Equatable {
    let botId: Swift.String?
    let botVersion: Swift.String?
    let localeId: Swift.String?
    let botRecommendationSummaries: [LexModelsV2ClientTypes.BotRecommendationSummary]?
    let nextToken: Swift.String?
}

extension ListBotRecommendationsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case botId
        case botRecommendationSummaries
        case botVersion
        case localeId
        case nextToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let botIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .botId)
        botId = botIdDecoded
        let botVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .botVersion)
        botVersion = botVersionDecoded
        let localeIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .localeId)
        localeId = localeIdDecoded
        let botRecommendationSummariesContainer = try containerValues.decodeIfPresent([LexModelsV2ClientTypes.BotRecommendationSummary?].self, forKey: .botRecommendationSummaries)
        var botRecommendationSummariesDecoded0:[LexModelsV2ClientTypes.BotRecommendationSummary]? = nil
        if let botRecommendationSummariesContainer = botRecommendationSummariesContainer {
            botRecommendationSummariesDecoded0 = [LexModelsV2ClientTypes.BotRecommendationSummary]()
            for structure0 in botRecommendationSummariesContainer {
                if let structure0 = structure0 {
                    botRecommendationSummariesDecoded0?.append(structure0)
                }
            }
        }
        botRecommendationSummaries = botRecommendationSummariesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
