// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct StartBotRecommendationOutputResponseBody: Swift.Equatable {
    let botId: Swift.String?
    let botVersion: Swift.String?
    let localeId: Swift.String?
    let botRecommendationStatus: LexModelsV2ClientTypes.BotRecommendationStatus?
    let botRecommendationId: Swift.String?
    let creationDateTime: ClientRuntime.Date?
    let transcriptSourceSetting: LexModelsV2ClientTypes.TranscriptSourceSetting?
    let encryptionSetting: LexModelsV2ClientTypes.EncryptionSetting?
}

extension StartBotRecommendationOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case botId
        case botRecommendationId
        case botRecommendationStatus
        case botVersion
        case creationDateTime
        case encryptionSetting
        case localeId
        case transcriptSourceSetting
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let botIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .botId)
        botId = botIdDecoded
        let botVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .botVersion)
        botVersion = botVersionDecoded
        let localeIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .localeId)
        localeId = localeIdDecoded
        let botRecommendationStatusDecoded = try containerValues.decodeIfPresent(LexModelsV2ClientTypes.BotRecommendationStatus.self, forKey: .botRecommendationStatus)
        botRecommendationStatus = botRecommendationStatusDecoded
        let botRecommendationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .botRecommendationId)
        botRecommendationId = botRecommendationIdDecoded
        let creationDateTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationDateTime)
        creationDateTime = creationDateTimeDecoded
        let transcriptSourceSettingDecoded = try containerValues.decodeIfPresent(LexModelsV2ClientTypes.TranscriptSourceSetting.self, forKey: .transcriptSourceSetting)
        transcriptSourceSetting = transcriptSourceSettingDecoded
        let encryptionSettingDecoded = try containerValues.decodeIfPresent(LexModelsV2ClientTypes.EncryptionSetting.self, forKey: .encryptionSetting)
        encryptionSetting = encryptionSettingDecoded
    }
}
