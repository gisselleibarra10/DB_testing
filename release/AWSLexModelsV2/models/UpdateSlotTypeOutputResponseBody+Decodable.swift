// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct UpdateSlotTypeOutputResponseBody: Swift.Equatable {
    let slotTypeId: Swift.String?
    let slotTypeName: Swift.String?
    let description: Swift.String?
    let slotTypeValues: [LexModelsV2ClientTypes.SlotTypeValue]?
    let valueSelectionSetting: LexModelsV2ClientTypes.SlotValueSelectionSetting?
    let parentSlotTypeSignature: Swift.String?
    let botId: Swift.String?
    let botVersion: Swift.String?
    let localeId: Swift.String?
    let creationDateTime: ClientRuntime.Date?
    let lastUpdatedDateTime: ClientRuntime.Date?
    let externalSourceSetting: LexModelsV2ClientTypes.ExternalSourceSetting?
    let compositeSlotTypeSetting: LexModelsV2ClientTypes.CompositeSlotTypeSetting?
}

extension UpdateSlotTypeOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case botId
        case botVersion
        case compositeSlotTypeSetting
        case creationDateTime
        case description
        case externalSourceSetting
        case lastUpdatedDateTime
        case localeId
        case parentSlotTypeSignature
        case slotTypeId
        case slotTypeName
        case slotTypeValues
        case valueSelectionSetting
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let slotTypeIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .slotTypeId)
        slotTypeId = slotTypeIdDecoded
        let slotTypeNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .slotTypeName)
        slotTypeName = slotTypeNameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let slotTypeValuesContainer = try containerValues.decodeIfPresent([LexModelsV2ClientTypes.SlotTypeValue?].self, forKey: .slotTypeValues)
        var slotTypeValuesDecoded0:[LexModelsV2ClientTypes.SlotTypeValue]? = nil
        if let slotTypeValuesContainer = slotTypeValuesContainer {
            slotTypeValuesDecoded0 = [LexModelsV2ClientTypes.SlotTypeValue]()
            for structure0 in slotTypeValuesContainer {
                if let structure0 = structure0 {
                    slotTypeValuesDecoded0?.append(structure0)
                }
            }
        }
        slotTypeValues = slotTypeValuesDecoded0
        let valueSelectionSettingDecoded = try containerValues.decodeIfPresent(LexModelsV2ClientTypes.SlotValueSelectionSetting.self, forKey: .valueSelectionSetting)
        valueSelectionSetting = valueSelectionSettingDecoded
        let parentSlotTypeSignatureDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .parentSlotTypeSignature)
        parentSlotTypeSignature = parentSlotTypeSignatureDecoded
        let botIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .botId)
        botId = botIdDecoded
        let botVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .botVersion)
        botVersion = botVersionDecoded
        let localeIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .localeId)
        localeId = localeIdDecoded
        let creationDateTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationDateTime)
        creationDateTime = creationDateTimeDecoded
        let lastUpdatedDateTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastUpdatedDateTime)
        lastUpdatedDateTime = lastUpdatedDateTimeDecoded
        let externalSourceSettingDecoded = try containerValues.decodeIfPresent(LexModelsV2ClientTypes.ExternalSourceSetting.self, forKey: .externalSourceSetting)
        externalSourceSetting = externalSourceSettingDecoded
        let compositeSlotTypeSettingDecoded = try containerValues.decodeIfPresent(LexModelsV2ClientTypes.CompositeSlotTypeSetting.self, forKey: .compositeSlotTypeSetting)
        compositeSlotTypeSetting = compositeSlotTypeSettingDecoded
    }
}
