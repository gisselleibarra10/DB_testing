// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateSlotTypeInputBody: Swift.Equatable {
    let slotTypeName: Swift.String?
    let description: Swift.String?
    let slotTypeValues: [LexModelsV2ClientTypes.SlotTypeValue]?
    let valueSelectionSetting: LexModelsV2ClientTypes.SlotValueSelectionSetting?
    let parentSlotTypeSignature: Swift.String?
    let externalSourceSetting: LexModelsV2ClientTypes.ExternalSourceSetting?
    let compositeSlotTypeSetting: LexModelsV2ClientTypes.CompositeSlotTypeSetting?
}

extension CreateSlotTypeInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case compositeSlotTypeSetting
        case description
        case externalSourceSetting
        case parentSlotTypeSignature
        case slotTypeName
        case slotTypeValues
        case valueSelectionSetting
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let slotTypeNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .slotTypeName)
        slotTypeName = slotTypeNameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let slotTypeValuesContainer = try containerValues.decodeIfPresent([LexModelsV2ClientTypes.SlotTypeValue?].self, forKey: .slotTypeValues)
        var slotTypeValuesDecoded0:[LexModelsV2ClientTypes.SlotTypeValue]? = nil
        if let slotTypeValuesContainer = slotTypeValuesContainer {
            slotTypeValuesDecoded0 = [LexModelsV2ClientTypes.SlotTypeValue]()
            for structure0 in slotTypeValuesContainer {
                if let structure0 = structure0 {
                    slotTypeValuesDecoded0?.append(structure0)
                }
            }
        }
        slotTypeValues = slotTypeValuesDecoded0
        let valueSelectionSettingDecoded = try containerValues.decodeIfPresent(LexModelsV2ClientTypes.SlotValueSelectionSetting.self, forKey: .valueSelectionSetting)
        valueSelectionSetting = valueSelectionSettingDecoded
        let parentSlotTypeSignatureDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .parentSlotTypeSignature)
        parentSlotTypeSignature = parentSlotTypeSignatureDecoded
        let externalSourceSettingDecoded = try containerValues.decodeIfPresent(LexModelsV2ClientTypes.ExternalSourceSetting.self, forKey: .externalSourceSetting)
        externalSourceSetting = externalSourceSettingDecoded
        let compositeSlotTypeSettingDecoded = try containerValues.decodeIfPresent(LexModelsV2ClientTypes.CompositeSlotTypeSetting.self, forKey: .compositeSlotTypeSetting)
        compositeSlotTypeSetting = compositeSlotTypeSettingDecoded
    }
}
