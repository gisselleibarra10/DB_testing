// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct SearchAssociatedTranscriptsInputBody: Swift.Equatable {
    let searchOrder: LexModelsV2ClientTypes.SearchOrder?
    let filters: [LexModelsV2ClientTypes.AssociatedTranscriptFilter]?
    let maxResults: Swift.Int?
    let nextIndex: Swift.Int?
}

extension SearchAssociatedTranscriptsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filters
        case maxResults
        case nextIndex
        case searchOrder
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let searchOrderDecoded = try containerValues.decodeIfPresent(LexModelsV2ClientTypes.SearchOrder.self, forKey: .searchOrder)
        searchOrder = searchOrderDecoded
        let filtersContainer = try containerValues.decodeIfPresent([LexModelsV2ClientTypes.AssociatedTranscriptFilter?].self, forKey: .filters)
        var filtersDecoded0:[LexModelsV2ClientTypes.AssociatedTranscriptFilter]? = nil
        if let filtersContainer = filtersContainer {
            filtersDecoded0 = [LexModelsV2ClientTypes.AssociatedTranscriptFilter]()
            for structure0 in filtersContainer {
                if let structure0 = structure0 {
                    filtersDecoded0?.append(structure0)
                }
            }
        }
        filters = filtersDecoded0
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let nextIndexDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .nextIndex)
        nextIndex = nextIndexDecoded
    }
}
