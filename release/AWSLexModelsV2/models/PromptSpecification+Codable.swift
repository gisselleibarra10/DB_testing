// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension LexModelsV2ClientTypes.PromptSpecification: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case allowInterrupt
        case maxRetries
        case messageGroups
        case messageSelectionStrategy
        case promptAttemptsSpecification
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let allowInterrupt = self.allowInterrupt {
            try encodeContainer.encode(allowInterrupt, forKey: .allowInterrupt)
        }
        if let maxRetries = self.maxRetries {
            try encodeContainer.encode(maxRetries, forKey: .maxRetries)
        }
        if let messageGroups = messageGroups {
            var messageGroupsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .messageGroups)
            for messagegroupslist0 in messageGroups {
                try messageGroupsContainer.encode(messagegroupslist0)
            }
        }
        if let messageSelectionStrategy = self.messageSelectionStrategy {
            try encodeContainer.encode(messageSelectionStrategy.rawValue, forKey: .messageSelectionStrategy)
        }
        if let promptAttemptsSpecification = promptAttemptsSpecification {
            var promptAttemptsSpecificationContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .promptAttemptsSpecification)
            for (dictKey0, promptattemptsspecificationmap0) in promptAttemptsSpecification {
                try promptAttemptsSpecificationContainer.encode(promptattemptsspecificationmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageGroupsContainer = try containerValues.decodeIfPresent([LexModelsV2ClientTypes.MessageGroup?].self, forKey: .messageGroups)
        var messageGroupsDecoded0:[LexModelsV2ClientTypes.MessageGroup]? = nil
        if let messageGroupsContainer = messageGroupsContainer {
            messageGroupsDecoded0 = [LexModelsV2ClientTypes.MessageGroup]()
            for structure0 in messageGroupsContainer {
                if let structure0 = structure0 {
                    messageGroupsDecoded0?.append(structure0)
                }
            }
        }
        messageGroups = messageGroupsDecoded0
        let maxRetriesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxRetries)
        maxRetries = maxRetriesDecoded
        let allowInterruptDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .allowInterrupt)
        allowInterrupt = allowInterruptDecoded
        let messageSelectionStrategyDecoded = try containerValues.decodeIfPresent(LexModelsV2ClientTypes.MessageSelectionStrategy.self, forKey: .messageSelectionStrategy)
        messageSelectionStrategy = messageSelectionStrategyDecoded
        let promptAttemptsSpecificationContainer = try containerValues.decodeIfPresent([Swift.String: LexModelsV2ClientTypes.PromptAttemptSpecification?].self, forKey: .promptAttemptsSpecification)
        var promptAttemptsSpecificationDecoded0: [Swift.String:LexModelsV2ClientTypes.PromptAttemptSpecification]? = nil
        if let promptAttemptsSpecificationContainer = promptAttemptsSpecificationContainer {
            promptAttemptsSpecificationDecoded0 = [Swift.String:LexModelsV2ClientTypes.PromptAttemptSpecification]()
            for (key0, promptattemptspecification0) in promptAttemptsSpecificationContainer {
                if let promptattemptspecification0 = promptattemptspecification0 {
                    promptAttemptsSpecificationDecoded0?[key0] = promptattemptspecification0
                }
            }
        }
        promptAttemptsSpecification = promptAttemptsSpecificationDecoded0
    }
}
