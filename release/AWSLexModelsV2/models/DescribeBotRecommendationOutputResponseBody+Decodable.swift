// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeBotRecommendationOutputResponseBody: Swift.Equatable {
    let botId: Swift.String?
    let botVersion: Swift.String?
    let localeId: Swift.String?
    let botRecommendationStatus: LexModelsV2ClientTypes.BotRecommendationStatus?
    let botRecommendationId: Swift.String?
    let failureReasons: [Swift.String]?
    let creationDateTime: ClientRuntime.Date?
    let lastUpdatedDateTime: ClientRuntime.Date?
    let transcriptSourceSetting: LexModelsV2ClientTypes.TranscriptSourceSetting?
    let encryptionSetting: LexModelsV2ClientTypes.EncryptionSetting?
    let botRecommendationResults: LexModelsV2ClientTypes.BotRecommendationResults?
}

extension DescribeBotRecommendationOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case botId
        case botRecommendationId
        case botRecommendationResults
        case botRecommendationStatus
        case botVersion
        case creationDateTime
        case encryptionSetting
        case failureReasons
        case lastUpdatedDateTime
        case localeId
        case transcriptSourceSetting
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let botIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .botId)
        botId = botIdDecoded
        let botVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .botVersion)
        botVersion = botVersionDecoded
        let localeIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .localeId)
        localeId = localeIdDecoded
        let botRecommendationStatusDecoded = try containerValues.decodeIfPresent(LexModelsV2ClientTypes.BotRecommendationStatus.self, forKey: .botRecommendationStatus)
        botRecommendationStatus = botRecommendationStatusDecoded
        let botRecommendationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .botRecommendationId)
        botRecommendationId = botRecommendationIdDecoded
        let failureReasonsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .failureReasons)
        var failureReasonsDecoded0:[Swift.String]? = nil
        if let failureReasonsContainer = failureReasonsContainer {
            failureReasonsDecoded0 = [Swift.String]()
            for string0 in failureReasonsContainer {
                if let string0 = string0 {
                    failureReasonsDecoded0?.append(string0)
                }
            }
        }
        failureReasons = failureReasonsDecoded0
        let creationDateTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationDateTime)
        creationDateTime = creationDateTimeDecoded
        let lastUpdatedDateTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastUpdatedDateTime)
        lastUpdatedDateTime = lastUpdatedDateTimeDecoded
        let transcriptSourceSettingDecoded = try containerValues.decodeIfPresent(LexModelsV2ClientTypes.TranscriptSourceSetting.self, forKey: .transcriptSourceSetting)
        transcriptSourceSetting = transcriptSourceSettingDecoded
        let encryptionSettingDecoded = try containerValues.decodeIfPresent(LexModelsV2ClientTypes.EncryptionSetting.self, forKey: .encryptionSetting)
        encryptionSetting = encryptionSettingDecoded
        let botRecommendationResultsDecoded = try containerValues.decodeIfPresent(LexModelsV2ClientTypes.BotRecommendationResults.self, forKey: .botRecommendationResults)
        botRecommendationResults = botRecommendationResultsDecoded
    }
}
