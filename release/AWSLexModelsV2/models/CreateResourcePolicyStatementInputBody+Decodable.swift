// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateResourcePolicyStatementInputBody: Swift.Equatable {
    let statementId: Swift.String?
    let effect: LexModelsV2ClientTypes.Effect?
    let principal: [LexModelsV2ClientTypes.Principal]?
    let action: [Swift.String]?
    let condition: [Swift.String:[Swift.String:Swift.String]]?
}

extension CreateResourcePolicyStatementInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case action
        case condition
        case effect
        case principal
        case statementId
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statementIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .statementId)
        statementId = statementIdDecoded
        let effectDecoded = try containerValues.decodeIfPresent(LexModelsV2ClientTypes.Effect.self, forKey: .effect)
        effect = effectDecoded
        let principalContainer = try containerValues.decodeIfPresent([LexModelsV2ClientTypes.Principal?].self, forKey: .principal)
        var principalDecoded0:[LexModelsV2ClientTypes.Principal]? = nil
        if let principalContainer = principalContainer {
            principalDecoded0 = [LexModelsV2ClientTypes.Principal]()
            for structure0 in principalContainer {
                if let structure0 = structure0 {
                    principalDecoded0?.append(structure0)
                }
            }
        }
        principal = principalDecoded0
        let actionContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .action)
        var actionDecoded0:[Swift.String]? = nil
        if let actionContainer = actionContainer {
            actionDecoded0 = [Swift.String]()
            for string0 in actionContainer {
                if let string0 = string0 {
                    actionDecoded0?.append(string0)
                }
            }
        }
        action = actionDecoded0
        let conditionContainer = try containerValues.decodeIfPresent([Swift.String: [Swift.String: Swift.String?]?].self, forKey: .condition)
        var conditionDecoded0: [Swift.String:[Swift.String:Swift.String]]? = nil
        if let conditionContainer = conditionContainer {
            conditionDecoded0 = [Swift.String:[Swift.String:Swift.String]]()
            for (key0, conditionkeyvaluemap0) in conditionContainer {
                var conditionkeyvaluemap0Decoded0: [Swift.String: Swift.String]? = nil
                if let conditionkeyvaluemap0 = conditionkeyvaluemap0 {
                    conditionkeyvaluemap0Decoded0 = [Swift.String: Swift.String]()
                    for (key1, conditionvalue1) in conditionkeyvaluemap0 {
                        if let conditionvalue1 = conditionvalue1 {
                            conditionkeyvaluemap0Decoded0?[key1] = conditionvalue1
                        }
                    }
                }
                conditionDecoded0?[key0] = conditionkeyvaluemap0Decoded0
            }
        }
        condition = conditionDecoded0
    }
}
