// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension LexModelsV2ClientTypes.IntentConfirmationSetting: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case active
        case codeHook
        case confirmationConditional
        case confirmationNextStep
        case confirmationResponse
        case declinationConditional
        case declinationNextStep
        case declinationResponse
        case elicitationCodeHook
        case failureConditional
        case failureNextStep
        case failureResponse
        case promptSpecification
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let active = self.active {
            try encodeContainer.encode(active, forKey: .active)
        }
        if let codeHook = self.codeHook {
            try encodeContainer.encode(codeHook, forKey: .codeHook)
        }
        if let confirmationConditional = self.confirmationConditional {
            try encodeContainer.encode(confirmationConditional, forKey: .confirmationConditional)
        }
        if let confirmationNextStep = self.confirmationNextStep {
            try encodeContainer.encode(confirmationNextStep, forKey: .confirmationNextStep)
        }
        if let confirmationResponse = self.confirmationResponse {
            try encodeContainer.encode(confirmationResponse, forKey: .confirmationResponse)
        }
        if let declinationConditional = self.declinationConditional {
            try encodeContainer.encode(declinationConditional, forKey: .declinationConditional)
        }
        if let declinationNextStep = self.declinationNextStep {
            try encodeContainer.encode(declinationNextStep, forKey: .declinationNextStep)
        }
        if let declinationResponse = self.declinationResponse {
            try encodeContainer.encode(declinationResponse, forKey: .declinationResponse)
        }
        if let elicitationCodeHook = self.elicitationCodeHook {
            try encodeContainer.encode(elicitationCodeHook, forKey: .elicitationCodeHook)
        }
        if let failureConditional = self.failureConditional {
            try encodeContainer.encode(failureConditional, forKey: .failureConditional)
        }
        if let failureNextStep = self.failureNextStep {
            try encodeContainer.encode(failureNextStep, forKey: .failureNextStep)
        }
        if let failureResponse = self.failureResponse {
            try encodeContainer.encode(failureResponse, forKey: .failureResponse)
        }
        if let promptSpecification = self.promptSpecification {
            try encodeContainer.encode(promptSpecification, forKey: .promptSpecification)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let promptSpecificationDecoded = try containerValues.decodeIfPresent(LexModelsV2ClientTypes.PromptSpecification.self, forKey: .promptSpecification)
        promptSpecification = promptSpecificationDecoded
        let declinationResponseDecoded = try containerValues.decodeIfPresent(LexModelsV2ClientTypes.ResponseSpecification.self, forKey: .declinationResponse)
        declinationResponse = declinationResponseDecoded
        let activeDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .active)
        active = activeDecoded
        let confirmationResponseDecoded = try containerValues.decodeIfPresent(LexModelsV2ClientTypes.ResponseSpecification.self, forKey: .confirmationResponse)
        confirmationResponse = confirmationResponseDecoded
        let confirmationNextStepDecoded = try containerValues.decodeIfPresent(LexModelsV2ClientTypes.DialogState.self, forKey: .confirmationNextStep)
        confirmationNextStep = confirmationNextStepDecoded
        let confirmationConditionalDecoded = try containerValues.decodeIfPresent(LexModelsV2ClientTypes.ConditionalSpecification.self, forKey: .confirmationConditional)
        confirmationConditional = confirmationConditionalDecoded
        let declinationNextStepDecoded = try containerValues.decodeIfPresent(LexModelsV2ClientTypes.DialogState.self, forKey: .declinationNextStep)
        declinationNextStep = declinationNextStepDecoded
        let declinationConditionalDecoded = try containerValues.decodeIfPresent(LexModelsV2ClientTypes.ConditionalSpecification.self, forKey: .declinationConditional)
        declinationConditional = declinationConditionalDecoded
        let failureResponseDecoded = try containerValues.decodeIfPresent(LexModelsV2ClientTypes.ResponseSpecification.self, forKey: .failureResponse)
        failureResponse = failureResponseDecoded
        let failureNextStepDecoded = try containerValues.decodeIfPresent(LexModelsV2ClientTypes.DialogState.self, forKey: .failureNextStep)
        failureNextStep = failureNextStepDecoded
        let failureConditionalDecoded = try containerValues.decodeIfPresent(LexModelsV2ClientTypes.ConditionalSpecification.self, forKey: .failureConditional)
        failureConditional = failureConditionalDecoded
        let codeHookDecoded = try containerValues.decodeIfPresent(LexModelsV2ClientTypes.DialogCodeHookInvocationSetting.self, forKey: .codeHook)
        codeHook = codeHookDecoded
        let elicitationCodeHookDecoded = try containerValues.decodeIfPresent(LexModelsV2ClientTypes.ElicitationCodeHookInvocationSetting.self, forKey: .elicitationCodeHook)
        elicitationCodeHook = elicitationCodeHookDecoded
    }
}
