// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct UpdateBotLocaleOutputResponseBody: Swift.Equatable {
    let botId: Swift.String?
    let botVersion: Swift.String?
    let localeId: Swift.String?
    let localeName: Swift.String?
    let description: Swift.String?
    let nluIntentConfidenceThreshold: Swift.Double?
    let voiceSettings: LexModelsV2ClientTypes.VoiceSettings?
    let botLocaleStatus: LexModelsV2ClientTypes.BotLocaleStatus?
    let failureReasons: [Swift.String]?
    let creationDateTime: ClientRuntime.Date?
    let lastUpdatedDateTime: ClientRuntime.Date?
    let recommendedActions: [Swift.String]?
}

extension UpdateBotLocaleOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case botId
        case botLocaleStatus
        case botVersion
        case creationDateTime
        case description
        case failureReasons
        case lastUpdatedDateTime
        case localeId
        case localeName
        case nluIntentConfidenceThreshold
        case recommendedActions
        case voiceSettings
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let botIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .botId)
        botId = botIdDecoded
        let botVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .botVersion)
        botVersion = botVersionDecoded
        let localeIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .localeId)
        localeId = localeIdDecoded
        let localeNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .localeName)
        localeName = localeNameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let nluIntentConfidenceThresholdDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .nluIntentConfidenceThreshold)
        nluIntentConfidenceThreshold = nluIntentConfidenceThresholdDecoded
        let voiceSettingsDecoded = try containerValues.decodeIfPresent(LexModelsV2ClientTypes.VoiceSettings.self, forKey: .voiceSettings)
        voiceSettings = voiceSettingsDecoded
        let botLocaleStatusDecoded = try containerValues.decodeIfPresent(LexModelsV2ClientTypes.BotLocaleStatus.self, forKey: .botLocaleStatus)
        botLocaleStatus = botLocaleStatusDecoded
        let failureReasonsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .failureReasons)
        var failureReasonsDecoded0:[Swift.String]? = nil
        if let failureReasonsContainer = failureReasonsContainer {
            failureReasonsDecoded0 = [Swift.String]()
            for string0 in failureReasonsContainer {
                if let string0 = string0 {
                    failureReasonsDecoded0?.append(string0)
                }
            }
        }
        failureReasons = failureReasonsDecoded0
        let creationDateTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationDateTime)
        creationDateTime = creationDateTimeDecoded
        let lastUpdatedDateTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastUpdatedDateTime)
        lastUpdatedDateTime = lastUpdatedDateTimeDecoded
        let recommendedActionsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .recommendedActions)
        var recommendedActionsDecoded0:[Swift.String]? = nil
        if let recommendedActionsContainer = recommendedActionsContainer {
            recommendedActionsDecoded0 = [Swift.String]()
            for string0 in recommendedActionsContainer {
                if let string0 = string0 {
                    recommendedActionsDecoded0?.append(string0)
                }
            }
        }
        recommendedActions = recommendedActionsDecoded0
    }
}
