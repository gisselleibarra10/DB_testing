// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension LexModelsV2ClientTypes.SlotValueOverride: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case shape
        case value
        case values
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let shape = self.shape {
            try encodeContainer.encode(shape.rawValue, forKey: .shape)
        }
        if let value = self.value {
            try encodeContainer.encode(value, forKey: .value)
        }
        if let values = values {
            var valuesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .values)
            for slotvalues0 in values {
                try valuesContainer.encode(slotvalues0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let shapeDecoded = try containerValues.decodeIfPresent(LexModelsV2ClientTypes.SlotShape.self, forKey: .shape)
        shape = shapeDecoded
        let valueDecoded = try containerValues.decodeIfPresent(LexModelsV2ClientTypes.SlotValue.self, forKey: .value)
        value = valueDecoded
        let valuesContainer = try containerValues.decodeIfPresent([LexModelsV2ClientTypes.SlotValueOverride?].self, forKey: .values)
        var valuesDecoded0:[LexModelsV2ClientTypes.SlotValueOverride]? = nil
        if let valuesContainer = valuesContainer {
            valuesDecoded0 = [LexModelsV2ClientTypes.SlotValueOverride]()
            for structure0 in valuesContainer {
                if let structure0 = structure0 {
                    valuesDecoded0?.append(structure0)
                }
            }
        }
        values = valuesDecoded0
    }
}
