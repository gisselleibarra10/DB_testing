// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension LexModelsV2ClientTypes.SubSlotSetting: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case expression
        case slotSpecifications
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let expression = self.expression {
            try encodeContainer.encode(expression, forKey: .expression)
        }
        if let slotSpecifications = slotSpecifications {
            var slotSpecificationsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .slotSpecifications)
            for (dictKey0, subslotspecificationmap0) in slotSpecifications {
                try slotSpecificationsContainer.encode(subslotspecificationmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let expressionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .expression)
        expression = expressionDecoded
        let slotSpecificationsContainer = try containerValues.decodeIfPresent([Swift.String: LexModelsV2ClientTypes.Specifications?].self, forKey: .slotSpecifications)
        var slotSpecificationsDecoded0: [Swift.String:LexModelsV2ClientTypes.Specifications]? = nil
        if let slotSpecificationsContainer = slotSpecificationsContainer {
            slotSpecificationsDecoded0 = [Swift.String:LexModelsV2ClientTypes.Specifications]()
            for (key0, specifications0) in slotSpecificationsContainer {
                if let specifications0 = specifications0 {
                    slotSpecificationsDecoded0?[key0] = specifications0
                }
            }
        }
        slotSpecifications = slotSpecificationsDecoded0
    }
}
