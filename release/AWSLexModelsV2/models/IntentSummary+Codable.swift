// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension LexModelsV2ClientTypes.IntentSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description
        case inputContexts
        case intentId
        case intentName
        case lastUpdatedDateTime
        case outputContexts
        case parentIntentSignature
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let inputContexts = inputContexts {
            var inputContextsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .inputContexts)
            for inputcontextslist0 in inputContexts {
                try inputContextsContainer.encode(inputcontextslist0)
            }
        }
        if let intentId = self.intentId {
            try encodeContainer.encode(intentId, forKey: .intentId)
        }
        if let intentName = self.intentName {
            try encodeContainer.encode(intentName, forKey: .intentName)
        }
        if let lastUpdatedDateTime = self.lastUpdatedDateTime {
            try encodeContainer.encode(lastUpdatedDateTime.timeIntervalSince1970, forKey: .lastUpdatedDateTime)
        }
        if let outputContexts = outputContexts {
            var outputContextsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .outputContexts)
            for outputcontextslist0 in outputContexts {
                try outputContextsContainer.encode(outputcontextslist0)
            }
        }
        if let parentIntentSignature = self.parentIntentSignature {
            try encodeContainer.encode(parentIntentSignature, forKey: .parentIntentSignature)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let intentIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .intentId)
        intentId = intentIdDecoded
        let intentNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .intentName)
        intentName = intentNameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let parentIntentSignatureDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .parentIntentSignature)
        parentIntentSignature = parentIntentSignatureDecoded
        let inputContextsContainer = try containerValues.decodeIfPresent([LexModelsV2ClientTypes.InputContext?].self, forKey: .inputContexts)
        var inputContextsDecoded0:[LexModelsV2ClientTypes.InputContext]? = nil
        if let inputContextsContainer = inputContextsContainer {
            inputContextsDecoded0 = [LexModelsV2ClientTypes.InputContext]()
            for structure0 in inputContextsContainer {
                if let structure0 = structure0 {
                    inputContextsDecoded0?.append(structure0)
                }
            }
        }
        inputContexts = inputContextsDecoded0
        let outputContextsContainer = try containerValues.decodeIfPresent([LexModelsV2ClientTypes.OutputContext?].self, forKey: .outputContexts)
        var outputContextsDecoded0:[LexModelsV2ClientTypes.OutputContext]? = nil
        if let outputContextsContainer = outputContextsContainer {
            outputContextsDecoded0 = [LexModelsV2ClientTypes.OutputContext]()
            for structure0 in outputContextsContainer {
                if let structure0 = structure0 {
                    outputContextsDecoded0?.append(structure0)
                }
            }
        }
        outputContexts = outputContextsDecoded0
        let lastUpdatedDateTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastUpdatedDateTime)
        lastUpdatedDateTime = lastUpdatedDateTimeDecoded
    }
}
