// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension LexModelsV2ClientTypes.InitialResponseSetting: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case codeHook
        case conditional
        case initialResponse
        case nextStep
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let codeHook = self.codeHook {
            try encodeContainer.encode(codeHook, forKey: .codeHook)
        }
        if let conditional = self.conditional {
            try encodeContainer.encode(conditional, forKey: .conditional)
        }
        if let initialResponse = self.initialResponse {
            try encodeContainer.encode(initialResponse, forKey: .initialResponse)
        }
        if let nextStep = self.nextStep {
            try encodeContainer.encode(nextStep, forKey: .nextStep)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let initialResponseDecoded = try containerValues.decodeIfPresent(LexModelsV2ClientTypes.ResponseSpecification.self, forKey: .initialResponse)
        initialResponse = initialResponseDecoded
        let nextStepDecoded = try containerValues.decodeIfPresent(LexModelsV2ClientTypes.DialogState.self, forKey: .nextStep)
        nextStep = nextStepDecoded
        let conditionalDecoded = try containerValues.decodeIfPresent(LexModelsV2ClientTypes.ConditionalSpecification.self, forKey: .conditional)
        conditional = conditionalDecoded
        let codeHookDecoded = try containerValues.decodeIfPresent(LexModelsV2ClientTypes.DialogCodeHookInvocationSetting.self, forKey: .codeHook)
        codeHook = codeHookDecoded
    }
}
