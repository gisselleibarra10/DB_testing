// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateIntentOutputResponseBody: Swift.Equatable {
    let intentId: Swift.String?
    let intentName: Swift.String?
    let description: Swift.String?
    let parentIntentSignature: Swift.String?
    let sampleUtterances: [LexModelsV2ClientTypes.SampleUtterance]?
    let dialogCodeHook: LexModelsV2ClientTypes.DialogCodeHookSettings?
    let fulfillmentCodeHook: LexModelsV2ClientTypes.FulfillmentCodeHookSettings?
    let intentConfirmationSetting: LexModelsV2ClientTypes.IntentConfirmationSetting?
    let intentClosingSetting: LexModelsV2ClientTypes.IntentClosingSetting?
    let inputContexts: [LexModelsV2ClientTypes.InputContext]?
    let outputContexts: [LexModelsV2ClientTypes.OutputContext]?
    let kendraConfiguration: LexModelsV2ClientTypes.KendraConfiguration?
    let botId: Swift.String?
    let botVersion: Swift.String?
    let localeId: Swift.String?
    let creationDateTime: ClientRuntime.Date?
    let initialResponseSetting: LexModelsV2ClientTypes.InitialResponseSetting?
}

extension CreateIntentOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case botId
        case botVersion
        case creationDateTime
        case description
        case dialogCodeHook
        case fulfillmentCodeHook
        case initialResponseSetting
        case inputContexts
        case intentClosingSetting
        case intentConfirmationSetting
        case intentId
        case intentName
        case kendraConfiguration
        case localeId
        case outputContexts
        case parentIntentSignature
        case sampleUtterances
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let intentIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .intentId)
        intentId = intentIdDecoded
        let intentNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .intentName)
        intentName = intentNameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let parentIntentSignatureDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .parentIntentSignature)
        parentIntentSignature = parentIntentSignatureDecoded
        let sampleUtterancesContainer = try containerValues.decodeIfPresent([LexModelsV2ClientTypes.SampleUtterance?].self, forKey: .sampleUtterances)
        var sampleUtterancesDecoded0:[LexModelsV2ClientTypes.SampleUtterance]? = nil
        if let sampleUtterancesContainer = sampleUtterancesContainer {
            sampleUtterancesDecoded0 = [LexModelsV2ClientTypes.SampleUtterance]()
            for structure0 in sampleUtterancesContainer {
                if let structure0 = structure0 {
                    sampleUtterancesDecoded0?.append(structure0)
                }
            }
        }
        sampleUtterances = sampleUtterancesDecoded0
        let dialogCodeHookDecoded = try containerValues.decodeIfPresent(LexModelsV2ClientTypes.DialogCodeHookSettings.self, forKey: .dialogCodeHook)
        dialogCodeHook = dialogCodeHookDecoded
        let fulfillmentCodeHookDecoded = try containerValues.decodeIfPresent(LexModelsV2ClientTypes.FulfillmentCodeHookSettings.self, forKey: .fulfillmentCodeHook)
        fulfillmentCodeHook = fulfillmentCodeHookDecoded
        let intentConfirmationSettingDecoded = try containerValues.decodeIfPresent(LexModelsV2ClientTypes.IntentConfirmationSetting.self, forKey: .intentConfirmationSetting)
        intentConfirmationSetting = intentConfirmationSettingDecoded
        let intentClosingSettingDecoded = try containerValues.decodeIfPresent(LexModelsV2ClientTypes.IntentClosingSetting.self, forKey: .intentClosingSetting)
        intentClosingSetting = intentClosingSettingDecoded
        let inputContextsContainer = try containerValues.decodeIfPresent([LexModelsV2ClientTypes.InputContext?].self, forKey: .inputContexts)
        var inputContextsDecoded0:[LexModelsV2ClientTypes.InputContext]? = nil
        if let inputContextsContainer = inputContextsContainer {
            inputContextsDecoded0 = [LexModelsV2ClientTypes.InputContext]()
            for structure0 in inputContextsContainer {
                if let structure0 = structure0 {
                    inputContextsDecoded0?.append(structure0)
                }
            }
        }
        inputContexts = inputContextsDecoded0
        let outputContextsContainer = try containerValues.decodeIfPresent([LexModelsV2ClientTypes.OutputContext?].self, forKey: .outputContexts)
        var outputContextsDecoded0:[LexModelsV2ClientTypes.OutputContext]? = nil
        if let outputContextsContainer = outputContextsContainer {
            outputContextsDecoded0 = [LexModelsV2ClientTypes.OutputContext]()
            for structure0 in outputContextsContainer {
                if let structure0 = structure0 {
                    outputContextsDecoded0?.append(structure0)
                }
            }
        }
        outputContexts = outputContextsDecoded0
        let kendraConfigurationDecoded = try containerValues.decodeIfPresent(LexModelsV2ClientTypes.KendraConfiguration.self, forKey: .kendraConfiguration)
        kendraConfiguration = kendraConfigurationDecoded
        let botIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .botId)
        botId = botIdDecoded
        let botVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .botVersion)
        botVersion = botVersionDecoded
        let localeIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .localeId)
        localeId = localeIdDecoded
        let creationDateTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationDateTime)
        creationDateTime = creationDateTimeDecoded
        let initialResponseSettingDecoded = try containerValues.decodeIfPresent(LexModelsV2ClientTypes.InitialResponseSetting.self, forKey: .initialResponseSetting)
        initialResponseSetting = initialResponseSettingDecoded
    }
}
