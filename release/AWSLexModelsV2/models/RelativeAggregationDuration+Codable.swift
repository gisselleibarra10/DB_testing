// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension LexModelsV2ClientTypes.RelativeAggregationDuration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case timeDimension
        case timeValue
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let timeDimension = self.timeDimension {
            try encodeContainer.encode(timeDimension.rawValue, forKey: .timeDimension)
        }
        if timeValue != 0 {
            try encodeContainer.encode(timeValue, forKey: .timeValue)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let timeDimensionDecoded = try containerValues.decodeIfPresent(LexModelsV2ClientTypes.TimeDimension.self, forKey: .timeDimension)
        timeDimension = timeDimensionDecoded
        let timeValueDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .timeValue) ?? 0
        timeValue = timeValueDecoded
    }
}
