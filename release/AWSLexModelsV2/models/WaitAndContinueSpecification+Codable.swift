// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension LexModelsV2ClientTypes.WaitAndContinueSpecification: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case active
        case continueResponse
        case stillWaitingResponse
        case waitingResponse
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let active = self.active {
            try encodeContainer.encode(active, forKey: .active)
        }
        if let continueResponse = self.continueResponse {
            try encodeContainer.encode(continueResponse, forKey: .continueResponse)
        }
        if let stillWaitingResponse = self.stillWaitingResponse {
            try encodeContainer.encode(stillWaitingResponse, forKey: .stillWaitingResponse)
        }
        if let waitingResponse = self.waitingResponse {
            try encodeContainer.encode(waitingResponse, forKey: .waitingResponse)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let waitingResponseDecoded = try containerValues.decodeIfPresent(LexModelsV2ClientTypes.ResponseSpecification.self, forKey: .waitingResponse)
        waitingResponse = waitingResponseDecoded
        let continueResponseDecoded = try containerValues.decodeIfPresent(LexModelsV2ClientTypes.ResponseSpecification.self, forKey: .continueResponse)
        continueResponse = continueResponseDecoded
        let stillWaitingResponseDecoded = try containerValues.decodeIfPresent(LexModelsV2ClientTypes.StillWaitingResponseSpecification.self, forKey: .stillWaitingResponse)
        stillWaitingResponse = stillWaitingResponseDecoded
        let activeDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .active)
        active = activeDecoded
    }
}
