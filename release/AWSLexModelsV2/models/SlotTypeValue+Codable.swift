// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension LexModelsV2ClientTypes.SlotTypeValue: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case sampleValue
        case synonyms
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let sampleValue = self.sampleValue {
            try encodeContainer.encode(sampleValue, forKey: .sampleValue)
        }
        if let synonyms = synonyms {
            var synonymsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .synonyms)
            for synonymlist0 in synonyms {
                try synonymsContainer.encode(synonymlist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sampleValueDecoded = try containerValues.decodeIfPresent(LexModelsV2ClientTypes.SampleValue.self, forKey: .sampleValue)
        sampleValue = sampleValueDecoded
        let synonymsContainer = try containerValues.decodeIfPresent([LexModelsV2ClientTypes.SampleValue?].self, forKey: .synonyms)
        var synonymsDecoded0:[LexModelsV2ClientTypes.SampleValue]? = nil
        if let synonymsContainer = synonymsContainer {
            synonymsDecoded0 = [LexModelsV2ClientTypes.SampleValue]()
            for structure0 in synonymsContainer {
                if let structure0 = structure0 {
                    synonymsDecoded0?.append(structure0)
                }
            }
        }
        synonyms = synonymsDecoded0
    }
}
