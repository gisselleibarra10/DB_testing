// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeImportOutputResponseBody: Swift.Equatable {
    let importId: Swift.String?
    let resourceSpecification: LexModelsV2ClientTypes.ImportResourceSpecification?
    let importedResourceId: Swift.String?
    let importedResourceName: Swift.String?
    let mergeStrategy: LexModelsV2ClientTypes.MergeStrategy?
    let importStatus: LexModelsV2ClientTypes.ImportStatus?
    let failureReasons: [Swift.String]?
    let creationDateTime: ClientRuntime.Date?
    let lastUpdatedDateTime: ClientRuntime.Date?
}

extension DescribeImportOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationDateTime
        case failureReasons
        case importId
        case importStatus
        case importedResourceId
        case importedResourceName
        case lastUpdatedDateTime
        case mergeStrategy
        case resourceSpecification
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let importIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .importId)
        importId = importIdDecoded
        let resourceSpecificationDecoded = try containerValues.decodeIfPresent(LexModelsV2ClientTypes.ImportResourceSpecification.self, forKey: .resourceSpecification)
        resourceSpecification = resourceSpecificationDecoded
        let importedResourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .importedResourceId)
        importedResourceId = importedResourceIdDecoded
        let importedResourceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .importedResourceName)
        importedResourceName = importedResourceNameDecoded
        let mergeStrategyDecoded = try containerValues.decodeIfPresent(LexModelsV2ClientTypes.MergeStrategy.self, forKey: .mergeStrategy)
        mergeStrategy = mergeStrategyDecoded
        let importStatusDecoded = try containerValues.decodeIfPresent(LexModelsV2ClientTypes.ImportStatus.self, forKey: .importStatus)
        importStatus = importStatusDecoded
        let failureReasonsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .failureReasons)
        var failureReasonsDecoded0:[Swift.String]? = nil
        if let failureReasonsContainer = failureReasonsContainer {
            failureReasonsDecoded0 = [Swift.String]()
            for string0 in failureReasonsContainer {
                if let string0 = string0 {
                    failureReasonsDecoded0?.append(string0)
                }
            }
        }
        failureReasons = failureReasonsDecoded0
        let creationDateTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationDateTime)
        creationDateTime = creationDateTimeDecoded
        let lastUpdatedDateTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastUpdatedDateTime)
        lastUpdatedDateTime = lastUpdatedDateTimeDecoded
    }
}
