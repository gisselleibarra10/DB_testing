// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension LexModelsV2ClientTypes.ResponseSpecification: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case allowInterrupt
        case messageGroups
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let allowInterrupt = self.allowInterrupt {
            try encodeContainer.encode(allowInterrupt, forKey: .allowInterrupt)
        }
        if let messageGroups = messageGroups {
            var messageGroupsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .messageGroups)
            for messagegroupslist0 in messageGroups {
                try messageGroupsContainer.encode(messagegroupslist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageGroupsContainer = try containerValues.decodeIfPresent([LexModelsV2ClientTypes.MessageGroup?].self, forKey: .messageGroups)
        var messageGroupsDecoded0:[LexModelsV2ClientTypes.MessageGroup]? = nil
        if let messageGroupsContainer = messageGroupsContainer {
            messageGroupsDecoded0 = [LexModelsV2ClientTypes.MessageGroup]()
            for structure0 in messageGroupsContainer {
                if let structure0 = structure0 {
                    messageGroupsDecoded0?.append(structure0)
                }
            }
        }
        messageGroups = messageGroupsDecoded0
        let allowInterruptDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .allowInterrupt)
        allowInterrupt = allowInterruptDecoded
    }
}
