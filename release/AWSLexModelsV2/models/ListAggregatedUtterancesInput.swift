// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct ListAggregatedUtterancesInput: Swift.Equatable {
    /// The time window for aggregating the utterance information. You can specify a time between one hour and two weeks.
    /// This member is required.
    public var aggregationDuration: LexModelsV2ClientTypes.UtteranceAggregationDuration?
    /// The identifier of the bot alias associated with this request. If you specify the bot alias, you can't specify the bot version.
    public var botAliasId: Swift.String?
    /// The unique identifier of the bot associated with this request.
    /// This member is required.
    public var botId: Swift.String?
    /// The identifier of the bot version associated with this request. If you specify the bot version, you can't specify the bot alias.
    public var botVersion: Swift.String?
    /// Provides the specification of a filter used to limit the utterances in the response to only those that match the filter specification. You can only specify one filter and one string to filter on.
    public var filters: [LexModelsV2ClientTypes.AggregatedUtterancesFilter]?
    /// The identifier of the language and locale where the utterances were collected. For more information, see [Supported languages](https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html).
    /// This member is required.
    public var localeId: Swift.String?
    /// The maximum number of utterances to return in each page of results. If there are fewer results than the maximum page size, only the actual number of results are returned. If you don't specify the maxResults parameter, 1,000 results are returned.
    public var maxResults: Swift.Int?
    /// If the response from the ListAggregatedUtterances operation contains more results that specified in the maxResults parameter, a token is returned in the response. Use that token in the nextToken parameter to return the next page of results.
    public var nextToken: Swift.String?
    /// Specifies sorting parameters for the list of utterances. You can sort by the hit count, the missed count, or the number of distinct sessions the utterance appeared in.
    public var sortBy: LexModelsV2ClientTypes.AggregatedUtterancesSortBy?

    public init (
        aggregationDuration: LexModelsV2ClientTypes.UtteranceAggregationDuration? = nil,
        botAliasId: Swift.String? = nil,
        botId: Swift.String? = nil,
        botVersion: Swift.String? = nil,
        filters: [LexModelsV2ClientTypes.AggregatedUtterancesFilter]? = nil,
        localeId: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        sortBy: LexModelsV2ClientTypes.AggregatedUtterancesSortBy? = nil
    )
    {
        self.aggregationDuration = aggregationDuration
        self.botAliasId = botAliasId
        self.botId = botId
        self.botVersion = botVersion
        self.filters = filters
        self.localeId = localeId
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.sortBy = sortBy
    }
}
