// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension LexModelsV2ClientTypes.DTMFSpecification: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deletionCharacter
        case endCharacter
        case endTimeoutMs
        case maxLength
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let deletionCharacter = self.deletionCharacter {
            try encodeContainer.encode(deletionCharacter, forKey: .deletionCharacter)
        }
        if let endCharacter = self.endCharacter {
            try encodeContainer.encode(endCharacter, forKey: .endCharacter)
        }
        if let endTimeoutMs = self.endTimeoutMs {
            try encodeContainer.encode(endTimeoutMs, forKey: .endTimeoutMs)
        }
        if let maxLength = self.maxLength {
            try encodeContainer.encode(maxLength, forKey: .maxLength)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let maxLengthDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxLength)
        maxLength = maxLengthDecoded
        let endTimeoutMsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .endTimeoutMs)
        endTimeoutMs = endTimeoutMsDecoded
        let deletionCharacterDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deletionCharacter)
        deletionCharacter = deletionCharacterDecoded
        let endCharacterDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .endCharacter)
        endCharacter = endCharacterDecoded
    }
}
