// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension LexModelsV2ClientTypes.MessageGroup: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
        case variations
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let message = self.message {
            try encodeContainer.encode(message, forKey: .message)
        }
        if let variations = variations {
            var variationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .variations)
            for messagevariationslist0 in variations {
                try variationsContainer.encode(messagevariationslist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(LexModelsV2ClientTypes.Message.self, forKey: .message)
        message = messageDecoded
        let variationsContainer = try containerValues.decodeIfPresent([LexModelsV2ClientTypes.Message?].self, forKey: .variations)
        var variationsDecoded0:[LexModelsV2ClientTypes.Message]? = nil
        if let variationsContainer = variationsContainer {
            variationsDecoded0 = [LexModelsV2ClientTypes.Message]()
            for structure0 in variationsContainer {
                if let structure0 = structure0 {
                    variationsDecoded0?.append(structure0)
                }
            }
        }
        variations = variationsDecoded0
    }
}
