// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension LexModelsV2ClientTypes.SlotValueSelectionSetting: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case advancedRecognitionSetting
        case regexFilter
        case resolutionStrategy
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let advancedRecognitionSetting = self.advancedRecognitionSetting {
            try encodeContainer.encode(advancedRecognitionSetting, forKey: .advancedRecognitionSetting)
        }
        if let regexFilter = self.regexFilter {
            try encodeContainer.encode(regexFilter, forKey: .regexFilter)
        }
        if let resolutionStrategy = self.resolutionStrategy {
            try encodeContainer.encode(resolutionStrategy.rawValue, forKey: .resolutionStrategy)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resolutionStrategyDecoded = try containerValues.decodeIfPresent(LexModelsV2ClientTypes.SlotValueResolutionStrategy.self, forKey: .resolutionStrategy)
        resolutionStrategy = resolutionStrategyDecoded
        let regexFilterDecoded = try containerValues.decodeIfPresent(LexModelsV2ClientTypes.SlotValueRegexFilter.self, forKey: .regexFilter)
        regexFilter = regexFilterDecoded
        let advancedRecognitionSettingDecoded = try containerValues.decodeIfPresent(LexModelsV2ClientTypes.AdvancedRecognitionSetting.self, forKey: .advancedRecognitionSetting)
        advancedRecognitionSetting = advancedRecognitionSettingDecoded
    }
}
