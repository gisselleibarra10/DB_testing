// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension LexModelsV2ClientTypes.FulfillmentUpdatesSpecification: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case active
        case startResponse
        case timeoutInSeconds
        case updateResponse
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let active = self.active {
            try encodeContainer.encode(active, forKey: .active)
        }
        if let startResponse = self.startResponse {
            try encodeContainer.encode(startResponse, forKey: .startResponse)
        }
        if let timeoutInSeconds = self.timeoutInSeconds {
            try encodeContainer.encode(timeoutInSeconds, forKey: .timeoutInSeconds)
        }
        if let updateResponse = self.updateResponse {
            try encodeContainer.encode(updateResponse, forKey: .updateResponse)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let activeDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .active)
        active = activeDecoded
        let startResponseDecoded = try containerValues.decodeIfPresent(LexModelsV2ClientTypes.FulfillmentStartResponseSpecification.self, forKey: .startResponse)
        startResponse = startResponseDecoded
        let updateResponseDecoded = try containerValues.decodeIfPresent(LexModelsV2ClientTypes.FulfillmentUpdateResponseSpecification.self, forKey: .updateResponse)
        updateResponse = updateResponseDecoded
        let timeoutInSecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .timeoutInSeconds)
        timeoutInSeconds = timeoutInSecondsDecoded
    }
}
