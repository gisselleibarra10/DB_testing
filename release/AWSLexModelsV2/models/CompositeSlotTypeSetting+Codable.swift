// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension LexModelsV2ClientTypes.CompositeSlotTypeSetting: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case subSlots
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let subSlots = subSlots {
            var subSlotsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .subSlots)
            for subslottypelist0 in subSlots {
                try subSlotsContainer.encode(subslottypelist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let subSlotsContainer = try containerValues.decodeIfPresent([LexModelsV2ClientTypes.SubSlotTypeComposition?].self, forKey: .subSlots)
        var subSlotsDecoded0:[LexModelsV2ClientTypes.SubSlotTypeComposition]? = nil
        if let subSlotsContainer = subSlotsContainer {
            subSlotsDecoded0 = [LexModelsV2ClientTypes.SubSlotTypeComposition]()
            for structure0 in subSlotsContainer {
                if let structure0 = structure0 {
                    subSlotsDecoded0?.append(structure0)
                }
            }
        }
        subSlots = subSlotsDecoded0
    }
}
