// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListAggregatedUtterancesOutputResponseBody: Swift.Equatable {
    let botId: Swift.String?
    let botAliasId: Swift.String?
    let botVersion: Swift.String?
    let localeId: Swift.String?
    let aggregationDuration: LexModelsV2ClientTypes.UtteranceAggregationDuration?
    let aggregationWindowStartTime: ClientRuntime.Date?
    let aggregationWindowEndTime: ClientRuntime.Date?
    let aggregationLastRefreshedDateTime: ClientRuntime.Date?
    let aggregatedUtterancesSummaries: [LexModelsV2ClientTypes.AggregatedUtterancesSummary]?
    let nextToken: Swift.String?
}

extension ListAggregatedUtterancesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case aggregatedUtterancesSummaries
        case aggregationDuration
        case aggregationLastRefreshedDateTime
        case aggregationWindowEndTime
        case aggregationWindowStartTime
        case botAliasId
        case botId
        case botVersion
        case localeId
        case nextToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let botIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .botId)
        botId = botIdDecoded
        let botAliasIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .botAliasId)
        botAliasId = botAliasIdDecoded
        let botVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .botVersion)
        botVersion = botVersionDecoded
        let localeIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .localeId)
        localeId = localeIdDecoded
        let aggregationDurationDecoded = try containerValues.decodeIfPresent(LexModelsV2ClientTypes.UtteranceAggregationDuration.self, forKey: .aggregationDuration)
        aggregationDuration = aggregationDurationDecoded
        let aggregationWindowStartTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .aggregationWindowStartTime)
        aggregationWindowStartTime = aggregationWindowStartTimeDecoded
        let aggregationWindowEndTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .aggregationWindowEndTime)
        aggregationWindowEndTime = aggregationWindowEndTimeDecoded
        let aggregationLastRefreshedDateTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .aggregationLastRefreshedDateTime)
        aggregationLastRefreshedDateTime = aggregationLastRefreshedDateTimeDecoded
        let aggregatedUtterancesSummariesContainer = try containerValues.decodeIfPresent([LexModelsV2ClientTypes.AggregatedUtterancesSummary?].self, forKey: .aggregatedUtterancesSummaries)
        var aggregatedUtterancesSummariesDecoded0:[LexModelsV2ClientTypes.AggregatedUtterancesSummary]? = nil
        if let aggregatedUtterancesSummariesContainer = aggregatedUtterancesSummariesContainer {
            aggregatedUtterancesSummariesDecoded0 = [LexModelsV2ClientTypes.AggregatedUtterancesSummary]()
            for structure0 in aggregatedUtterancesSummariesContainer {
                if let structure0 = structure0 {
                    aggregatedUtterancesSummariesDecoded0?.append(structure0)
                }
            }
        }
        aggregatedUtterancesSummaries = aggregatedUtterancesSummariesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
