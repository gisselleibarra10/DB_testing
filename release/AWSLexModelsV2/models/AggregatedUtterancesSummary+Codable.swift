// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension LexModelsV2ClientTypes.AggregatedUtterancesSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case containsDataFromDeletedResources
        case hitCount
        case missedCount
        case utterance
        case utteranceFirstRecordedInAggregationDuration
        case utteranceLastRecordedInAggregationDuration
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let containsDataFromDeletedResources = self.containsDataFromDeletedResources {
            try encodeContainer.encode(containsDataFromDeletedResources, forKey: .containsDataFromDeletedResources)
        }
        if let hitCount = self.hitCount {
            try encodeContainer.encode(hitCount, forKey: .hitCount)
        }
        if let missedCount = self.missedCount {
            try encodeContainer.encode(missedCount, forKey: .missedCount)
        }
        if let utterance = self.utterance {
            try encodeContainer.encode(utterance, forKey: .utterance)
        }
        if let utteranceFirstRecordedInAggregationDuration = self.utteranceFirstRecordedInAggregationDuration {
            try encodeContainer.encode(utteranceFirstRecordedInAggregationDuration.timeIntervalSince1970, forKey: .utteranceFirstRecordedInAggregationDuration)
        }
        if let utteranceLastRecordedInAggregationDuration = self.utteranceLastRecordedInAggregationDuration {
            try encodeContainer.encode(utteranceLastRecordedInAggregationDuration.timeIntervalSince1970, forKey: .utteranceLastRecordedInAggregationDuration)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let utteranceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .utterance)
        utterance = utteranceDecoded
        let hitCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .hitCount)
        hitCount = hitCountDecoded
        let missedCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .missedCount)
        missedCount = missedCountDecoded
        let utteranceFirstRecordedInAggregationDurationDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .utteranceFirstRecordedInAggregationDuration)
        utteranceFirstRecordedInAggregationDuration = utteranceFirstRecordedInAggregationDurationDecoded
        let utteranceLastRecordedInAggregationDurationDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .utteranceLastRecordedInAggregationDuration)
        utteranceLastRecordedInAggregationDuration = utteranceLastRecordedInAggregationDurationDecoded
        let containsDataFromDeletedResourcesDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .containsDataFromDeletedResources)
        containsDataFromDeletedResources = containsDataFromDeletedResourcesDecoded
    }
}
