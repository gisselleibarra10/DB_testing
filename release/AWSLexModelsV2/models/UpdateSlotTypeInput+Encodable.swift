// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension UpdateSlotTypeInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case compositeSlotTypeSetting
        case description
        case externalSourceSetting
        case parentSlotTypeSignature
        case slotTypeName
        case slotTypeValues
        case valueSelectionSetting
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let compositeSlotTypeSetting = self.compositeSlotTypeSetting {
            try encodeContainer.encode(compositeSlotTypeSetting, forKey: .compositeSlotTypeSetting)
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let externalSourceSetting = self.externalSourceSetting {
            try encodeContainer.encode(externalSourceSetting, forKey: .externalSourceSetting)
        }
        if let parentSlotTypeSignature = self.parentSlotTypeSignature {
            try encodeContainer.encode(parentSlotTypeSignature, forKey: .parentSlotTypeSignature)
        }
        if let slotTypeName = self.slotTypeName {
            try encodeContainer.encode(slotTypeName, forKey: .slotTypeName)
        }
        if let slotTypeValues = slotTypeValues {
            var slotTypeValuesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .slotTypeValues)
            for slottypevalues0 in slotTypeValues {
                try slotTypeValuesContainer.encode(slottypevalues0)
            }
        }
        if let valueSelectionSetting = self.valueSelectionSetting {
            try encodeContainer.encode(valueSelectionSetting, forKey: .valueSelectionSetting)
        }
    }
}
