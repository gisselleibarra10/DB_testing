// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeExportOutputResponseBody: Swift.Equatable {
    let exportId: Swift.String?
    let resourceSpecification: LexModelsV2ClientTypes.ExportResourceSpecification?
    let fileFormat: LexModelsV2ClientTypes.ImportExportFileFormat?
    let exportStatus: LexModelsV2ClientTypes.ExportStatus?
    let failureReasons: [Swift.String]?
    let downloadUrl: Swift.String?
    let creationDateTime: ClientRuntime.Date?
    let lastUpdatedDateTime: ClientRuntime.Date?
}

extension DescribeExportOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationDateTime
        case downloadUrl
        case exportId
        case exportStatus
        case failureReasons
        case fileFormat
        case lastUpdatedDateTime
        case resourceSpecification
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let exportIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .exportId)
        exportId = exportIdDecoded
        let resourceSpecificationDecoded = try containerValues.decodeIfPresent(LexModelsV2ClientTypes.ExportResourceSpecification.self, forKey: .resourceSpecification)
        resourceSpecification = resourceSpecificationDecoded
        let fileFormatDecoded = try containerValues.decodeIfPresent(LexModelsV2ClientTypes.ImportExportFileFormat.self, forKey: .fileFormat)
        fileFormat = fileFormatDecoded
        let exportStatusDecoded = try containerValues.decodeIfPresent(LexModelsV2ClientTypes.ExportStatus.self, forKey: .exportStatus)
        exportStatus = exportStatusDecoded
        let failureReasonsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .failureReasons)
        var failureReasonsDecoded0:[Swift.String]? = nil
        if let failureReasonsContainer = failureReasonsContainer {
            failureReasonsDecoded0 = [Swift.String]()
            for string0 in failureReasonsContainer {
                if let string0 = string0 {
                    failureReasonsDecoded0?.append(string0)
                }
            }
        }
        failureReasons = failureReasonsDecoded0
        let downloadUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .downloadUrl)
        downloadUrl = downloadUrlDecoded
        let creationDateTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationDateTime)
        creationDateTime = creationDateTimeDecoded
        let lastUpdatedDateTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastUpdatedDateTime)
        lastUpdatedDateTime = lastUpdatedDateTimeDecoded
    }
}
