// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension EcsClientTypes {
    /// The details for a capacity provider.
    public struct CapacityProvider: Swift.Equatable {
        /// The Auto Scaling group settings for the capacity provider.
        public var autoScalingGroupProvider: EcsClientTypes.AutoScalingGroupProvider?
        /// The Amazon Resource Name (ARN) that identifies the capacity provider.
        public var capacityProviderArn: Swift.String?
        /// The name of the capacity provider.
        public var name: Swift.String?
        /// The current status of the capacity provider. Only capacity providers in an ACTIVE state can be used in a cluster. When a capacity provider is successfully deleted, it has an INACTIVE status.
        public var status: EcsClientTypes.CapacityProviderStatus?
        /// The metadata that you apply to the capacity provider to help you categorize and organize it. Each tag consists of a key and an optional value. You define both. The following basic restrictions apply to tags:
        ///
        /// * Maximum number of tags per resource - 50
        ///
        /// * For each resource, each tag key must be unique, and each tag key can have only one value.
        ///
        /// * Maximum key length - 128 Unicode characters in UTF-8
        ///
        /// * Maximum value length - 256 Unicode characters in UTF-8
        ///
        /// * If your tagging schema is used across multiple services and resources, remember that other services may have restrictions on allowed characters. Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following characters: + - = . _ : / @.
        ///
        /// * Tag keys and values are case-sensitive.
        ///
        /// * Do not use aws:, AWS:, or any upper or lowercase combination of such as a prefix for either keys or values as it is reserved for Amazon Web Services use. You cannot edit or delete tag keys or values with this prefix. Tags with this prefix do not count against your tags per resource limit.
        public var tags: [EcsClientTypes.Tag]?
        /// The update status of the capacity provider. The following are the possible states that is returned. DELETE_IN_PROGRESS The capacity provider is in the process of being deleted. DELETE_COMPLETE The capacity provider was successfully deleted and has an INACTIVE status. DELETE_FAILED The capacity provider can't be deleted. The update status reason provides further details about why the delete failed.
        public var updateStatus: EcsClientTypes.CapacityProviderUpdateStatus?
        /// The update status reason. This provides further details about the update status for the capacity provider.
        public var updateStatusReason: Swift.String?

        public init (
            autoScalingGroupProvider: EcsClientTypes.AutoScalingGroupProvider? = nil,
            capacityProviderArn: Swift.String? = nil,
            name: Swift.String? = nil,
            status: EcsClientTypes.CapacityProviderStatus? = nil,
            tags: [EcsClientTypes.Tag]? = nil,
            updateStatus: EcsClientTypes.CapacityProviderUpdateStatus? = nil,
            updateStatusReason: Swift.String? = nil
        )
        {
            self.autoScalingGroupProvider = autoScalingGroupProvider
            self.capacityProviderArn = capacityProviderArn
            self.name = name
            self.status = status
            self.tags = tags
            self.updateStatus = updateStatus
            self.updateStatusReason = updateStatusReason
        }
    }

}
