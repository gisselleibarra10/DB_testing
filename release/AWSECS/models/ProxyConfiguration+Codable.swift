// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension EcsClientTypes.ProxyConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case containerName
        case properties
        case type
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let containerName = self.containerName {
            try encodeContainer.encode(containerName, forKey: .containerName)
        }
        if let properties = properties {
            var propertiesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .properties)
            for proxyconfigurationproperties0 in properties {
                try propertiesContainer.encode(proxyconfigurationproperties0)
            }
        }
        if let type = self.type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let typeDecoded = try containerValues.decodeIfPresent(EcsClientTypes.ProxyConfigurationType.self, forKey: .type)
        type = typeDecoded
        let containerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .containerName)
        containerName = containerNameDecoded
        let propertiesContainer = try containerValues.decodeIfPresent([EcsClientTypes.KeyValuePair?].self, forKey: .properties)
        var propertiesDecoded0:[EcsClientTypes.KeyValuePair]? = nil
        if let propertiesContainer = propertiesContainer {
            propertiesDecoded0 = [EcsClientTypes.KeyValuePair]()
            for structure0 in propertiesContainer {
                if let structure0 = structure0 {
                    propertiesDecoded0?.append(structure0)
                }
            }
        }
        properties = propertiesDecoded0
    }
}
