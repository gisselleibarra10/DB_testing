// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct RegisterContainerInstanceInputBody: Swift.Equatable {
    let cluster: Swift.String?
    let instanceIdentityDocument: Swift.String?
    let instanceIdentityDocumentSignature: Swift.String?
    let totalResources: [EcsClientTypes.Resource]?
    let versionInfo: EcsClientTypes.VersionInfo?
    let containerInstanceArn: Swift.String?
    let attributes: [EcsClientTypes.Attribute]?
    let platformDevices: [EcsClientTypes.PlatformDevice]?
    let tags: [EcsClientTypes.Tag]?
}

extension RegisterContainerInstanceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attributes
        case cluster
        case containerInstanceArn
        case instanceIdentityDocument
        case instanceIdentityDocumentSignature
        case platformDevices
        case tags
        case totalResources
        case versionInfo
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clusterDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cluster)
        cluster = clusterDecoded
        let instanceIdentityDocumentDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceIdentityDocument)
        instanceIdentityDocument = instanceIdentityDocumentDecoded
        let instanceIdentityDocumentSignatureDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceIdentityDocumentSignature)
        instanceIdentityDocumentSignature = instanceIdentityDocumentSignatureDecoded
        let totalResourcesContainer = try containerValues.decodeIfPresent([EcsClientTypes.Resource?].self, forKey: .totalResources)
        var totalResourcesDecoded0:[EcsClientTypes.Resource]? = nil
        if let totalResourcesContainer = totalResourcesContainer {
            totalResourcesDecoded0 = [EcsClientTypes.Resource]()
            for structure0 in totalResourcesContainer {
                if let structure0 = structure0 {
                    totalResourcesDecoded0?.append(structure0)
                }
            }
        }
        totalResources = totalResourcesDecoded0
        let versionInfoDecoded = try containerValues.decodeIfPresent(EcsClientTypes.VersionInfo.self, forKey: .versionInfo)
        versionInfo = versionInfoDecoded
        let containerInstanceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .containerInstanceArn)
        containerInstanceArn = containerInstanceArnDecoded
        let attributesContainer = try containerValues.decodeIfPresent([EcsClientTypes.Attribute?].self, forKey: .attributes)
        var attributesDecoded0:[EcsClientTypes.Attribute]? = nil
        if let attributesContainer = attributesContainer {
            attributesDecoded0 = [EcsClientTypes.Attribute]()
            for structure0 in attributesContainer {
                if let structure0 = structure0 {
                    attributesDecoded0?.append(structure0)
                }
            }
        }
        attributes = attributesDecoded0
        let platformDevicesContainer = try containerValues.decodeIfPresent([EcsClientTypes.PlatformDevice?].self, forKey: .platformDevices)
        var platformDevicesDecoded0:[EcsClientTypes.PlatformDevice]? = nil
        if let platformDevicesContainer = platformDevicesContainer {
            platformDevicesDecoded0 = [EcsClientTypes.PlatformDevice]()
            for structure0 in platformDevicesContainer {
                if let structure0 = structure0 {
                    platformDevicesDecoded0?.append(structure0)
                }
            }
        }
        platformDevices = platformDevicesDecoded0
        let tagsContainer = try containerValues.decodeIfPresent([EcsClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[EcsClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [EcsClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}
