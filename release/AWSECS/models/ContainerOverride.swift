// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension EcsClientTypes {
    /// The overrides that are sent to a container. An empty container override can be passed in. An example of an empty container override is {"containerOverrides": [ ] }. If a non-empty container override is specified, the name parameter must be included.
    public struct ContainerOverride: Swift.Equatable {
        /// The command to send to the container that overrides the default command from the Docker image or the task definition. You must also specify a container name.
        public var command: [Swift.String]?
        /// The number of cpu units reserved for the container, instead of the default value from the task definition. You must also specify a container name.
        public var cpu: Swift.Int?
        /// The environment variables to send to the container. You can add new environment variables, which are added to the container at launch, or you can override the existing environment variables from the Docker image or the task definition. You must also specify a container name.
        public var environment: [EcsClientTypes.KeyValuePair]?
        /// A list of files containing the environment variables to pass to a container, instead of the value from the container definition.
        public var environmentFiles: [EcsClientTypes.EnvironmentFile]?
        /// The hard limit (in MiB) of memory to present to the container, instead of the default value from the task definition. If your container attempts to exceed the memory specified here, the container is killed. You must also specify a container name.
        public var memory: Swift.Int?
        /// The soft limit (in MiB) of memory to reserve for the container, instead of the default value from the task definition. You must also specify a container name.
        public var memoryReservation: Swift.Int?
        /// The name of the container that receives the override. This parameter is required if any override is specified.
        public var name: Swift.String?
        /// The type and amount of a resource to assign to a container, instead of the default value from the task definition. The only supported resource is a GPU.
        public var resourceRequirements: [EcsClientTypes.ResourceRequirement]?

        public init (
            command: [Swift.String]? = nil,
            cpu: Swift.Int? = nil,
            environment: [EcsClientTypes.KeyValuePair]? = nil,
            environmentFiles: [EcsClientTypes.EnvironmentFile]? = nil,
            memory: Swift.Int? = nil,
            memoryReservation: Swift.Int? = nil,
            name: Swift.String? = nil,
            resourceRequirements: [EcsClientTypes.ResourceRequirement]? = nil
        )
        {
            self.command = command
            self.cpu = cpu
            self.environment = environment
            self.environmentFiles = environmentFiles
            self.memory = memory
            self.memoryReservation = memoryReservation
            self.name = name
            self.resourceRequirements = resourceRequirements
        }
    }

}
