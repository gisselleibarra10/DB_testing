// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ExecuteCommandInputBody: Swift.Equatable {
    let cluster: Swift.String?
    let container: Swift.String?
    let command: Swift.String?
    let interactive: Swift.Bool
    let task: Swift.String?
}

extension ExecuteCommandInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cluster
        case command
        case container
        case interactive
        case task
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clusterDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cluster)
        cluster = clusterDecoded
        let containerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .container)
        container = containerDecoded
        let commandDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .command)
        command = commandDecoded
        let interactiveDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .interactive) ?? false
        interactive = interactiveDecoded
        let taskDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .task)
        task = taskDecoded
    }
}
