// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension EcsClientTypes.Cluster: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case activeServicesCount
        case attachments
        case attachmentsStatus
        case capacityProviders
        case clusterArn
        case clusterName
        case configuration
        case defaultCapacityProviderStrategy
        case pendingTasksCount
        case registeredContainerInstancesCount
        case runningTasksCount
        case settings
        case statistics
        case status
        case tags
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if activeServicesCount != 0 {
            try encodeContainer.encode(activeServicesCount, forKey: .activeServicesCount)
        }
        if let attachments = attachments {
            var attachmentsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .attachments)
            for attachments0 in attachments {
                try attachmentsContainer.encode(attachments0)
            }
        }
        if let attachmentsStatus = self.attachmentsStatus {
            try encodeContainer.encode(attachmentsStatus, forKey: .attachmentsStatus)
        }
        if let capacityProviders = capacityProviders {
            var capacityProvidersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .capacityProviders)
            for stringlist0 in capacityProviders {
                try capacityProvidersContainer.encode(stringlist0)
            }
        }
        if let clusterArn = self.clusterArn {
            try encodeContainer.encode(clusterArn, forKey: .clusterArn)
        }
        if let clusterName = self.clusterName {
            try encodeContainer.encode(clusterName, forKey: .clusterName)
        }
        if let configuration = self.configuration {
            try encodeContainer.encode(configuration, forKey: .configuration)
        }
        if let defaultCapacityProviderStrategy = defaultCapacityProviderStrategy {
            var defaultCapacityProviderStrategyContainer = encodeContainer.nestedUnkeyedContainer(forKey: .defaultCapacityProviderStrategy)
            for capacityproviderstrategy0 in defaultCapacityProviderStrategy {
                try defaultCapacityProviderStrategyContainer.encode(capacityproviderstrategy0)
            }
        }
        if pendingTasksCount != 0 {
            try encodeContainer.encode(pendingTasksCount, forKey: .pendingTasksCount)
        }
        if registeredContainerInstancesCount != 0 {
            try encodeContainer.encode(registeredContainerInstancesCount, forKey: .registeredContainerInstancesCount)
        }
        if runningTasksCount != 0 {
            try encodeContainer.encode(runningTasksCount, forKey: .runningTasksCount)
        }
        if let settings = settings {
            var settingsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .settings)
            for clustersettings0 in settings {
                try settingsContainer.encode(clustersettings0)
            }
        }
        if let statistics = statistics {
            var statisticsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .statistics)
            for statistics0 in statistics {
                try statisticsContainer.encode(statistics0)
            }
        }
        if let status = self.status {
            try encodeContainer.encode(status, forKey: .status)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tags0 in tags {
                try tagsContainer.encode(tags0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clusterArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterArn)
        clusterArn = clusterArnDecoded
        let clusterNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterName)
        clusterName = clusterNameDecoded
        let configurationDecoded = try containerValues.decodeIfPresent(EcsClientTypes.ClusterConfiguration.self, forKey: .configuration)
        configuration = configurationDecoded
        let statusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .status)
        status = statusDecoded
        let registeredContainerInstancesCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .registeredContainerInstancesCount) ?? 0
        registeredContainerInstancesCount = registeredContainerInstancesCountDecoded
        let runningTasksCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .runningTasksCount) ?? 0
        runningTasksCount = runningTasksCountDecoded
        let pendingTasksCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .pendingTasksCount) ?? 0
        pendingTasksCount = pendingTasksCountDecoded
        let activeServicesCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .activeServicesCount) ?? 0
        activeServicesCount = activeServicesCountDecoded
        let statisticsContainer = try containerValues.decodeIfPresent([EcsClientTypes.KeyValuePair?].self, forKey: .statistics)
        var statisticsDecoded0:[EcsClientTypes.KeyValuePair]? = nil
        if let statisticsContainer = statisticsContainer {
            statisticsDecoded0 = [EcsClientTypes.KeyValuePair]()
            for structure0 in statisticsContainer {
                if let structure0 = structure0 {
                    statisticsDecoded0?.append(structure0)
                }
            }
        }
        statistics = statisticsDecoded0
        let tagsContainer = try containerValues.decodeIfPresent([EcsClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[EcsClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [EcsClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let settingsContainer = try containerValues.decodeIfPresent([EcsClientTypes.ClusterSetting?].self, forKey: .settings)
        var settingsDecoded0:[EcsClientTypes.ClusterSetting]? = nil
        if let settingsContainer = settingsContainer {
            settingsDecoded0 = [EcsClientTypes.ClusterSetting]()
            for structure0 in settingsContainer {
                if let structure0 = structure0 {
                    settingsDecoded0?.append(structure0)
                }
            }
        }
        settings = settingsDecoded0
        let capacityProvidersContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .capacityProviders)
        var capacityProvidersDecoded0:[Swift.String]? = nil
        if let capacityProvidersContainer = capacityProvidersContainer {
            capacityProvidersDecoded0 = [Swift.String]()
            for string0 in capacityProvidersContainer {
                if let string0 = string0 {
                    capacityProvidersDecoded0?.append(string0)
                }
            }
        }
        capacityProviders = capacityProvidersDecoded0
        let defaultCapacityProviderStrategyContainer = try containerValues.decodeIfPresent([EcsClientTypes.CapacityProviderStrategyItem?].self, forKey: .defaultCapacityProviderStrategy)
        var defaultCapacityProviderStrategyDecoded0:[EcsClientTypes.CapacityProviderStrategyItem]? = nil
        if let defaultCapacityProviderStrategyContainer = defaultCapacityProviderStrategyContainer {
            defaultCapacityProviderStrategyDecoded0 = [EcsClientTypes.CapacityProviderStrategyItem]()
            for structure0 in defaultCapacityProviderStrategyContainer {
                if let structure0 = structure0 {
                    defaultCapacityProviderStrategyDecoded0?.append(structure0)
                }
            }
        }
        defaultCapacityProviderStrategy = defaultCapacityProviderStrategyDecoded0
        let attachmentsContainer = try containerValues.decodeIfPresent([EcsClientTypes.Attachment?].self, forKey: .attachments)
        var attachmentsDecoded0:[EcsClientTypes.Attachment]? = nil
        if let attachmentsContainer = attachmentsContainer {
            attachmentsDecoded0 = [EcsClientTypes.Attachment]()
            for structure0 in attachmentsContainer {
                if let structure0 = structure0 {
                    attachmentsDecoded0?.append(structure0)
                }
            }
        }
        attachments = attachmentsDecoded0
        let attachmentsStatusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .attachmentsStatus)
        attachmentsStatus = attachmentsStatusDecoded
    }
}
