// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct SubmitTaskStateChangeInputBody: Swift.Equatable {
    let cluster: Swift.String?
    let task: Swift.String?
    let status: Swift.String?
    let reason: Swift.String?
    let containers: [EcsClientTypes.ContainerStateChange]?
    let attachments: [EcsClientTypes.AttachmentStateChange]?
    let managedAgents: [EcsClientTypes.ManagedAgentStateChange]?
    let pullStartedAt: ClientRuntime.Date?
    let pullStoppedAt: ClientRuntime.Date?
    let executionStoppedAt: ClientRuntime.Date?
}

extension SubmitTaskStateChangeInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attachments
        case cluster
        case containers
        case executionStoppedAt
        case managedAgents
        case pullStartedAt
        case pullStoppedAt
        case reason
        case status
        case task
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clusterDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cluster)
        cluster = clusterDecoded
        let taskDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .task)
        task = taskDecoded
        let statusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .status)
        status = statusDecoded
        let reasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .reason)
        reason = reasonDecoded
        let containersContainer = try containerValues.decodeIfPresent([EcsClientTypes.ContainerStateChange?].self, forKey: .containers)
        var containersDecoded0:[EcsClientTypes.ContainerStateChange]? = nil
        if let containersContainer = containersContainer {
            containersDecoded0 = [EcsClientTypes.ContainerStateChange]()
            for structure0 in containersContainer {
                if let structure0 = structure0 {
                    containersDecoded0?.append(structure0)
                }
            }
        }
        containers = containersDecoded0
        let attachmentsContainer = try containerValues.decodeIfPresent([EcsClientTypes.AttachmentStateChange?].self, forKey: .attachments)
        var attachmentsDecoded0:[EcsClientTypes.AttachmentStateChange]? = nil
        if let attachmentsContainer = attachmentsContainer {
            attachmentsDecoded0 = [EcsClientTypes.AttachmentStateChange]()
            for structure0 in attachmentsContainer {
                if let structure0 = structure0 {
                    attachmentsDecoded0?.append(structure0)
                }
            }
        }
        attachments = attachmentsDecoded0
        let managedAgentsContainer = try containerValues.decodeIfPresent([EcsClientTypes.ManagedAgentStateChange?].self, forKey: .managedAgents)
        var managedAgentsDecoded0:[EcsClientTypes.ManagedAgentStateChange]? = nil
        if let managedAgentsContainer = managedAgentsContainer {
            managedAgentsDecoded0 = [EcsClientTypes.ManagedAgentStateChange]()
            for structure0 in managedAgentsContainer {
                if let structure0 = structure0 {
                    managedAgentsDecoded0?.append(structure0)
                }
            }
        }
        managedAgents = managedAgentsDecoded0
        let pullStartedAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .pullStartedAt)
        pullStartedAt = pullStartedAtDecoded
        let pullStoppedAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .pullStoppedAt)
        pullStoppedAt = pullStoppedAtDecoded
        let executionStoppedAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .executionStoppedAt)
        executionStoppedAt = executionStoppedAtDecoded
    }
}
