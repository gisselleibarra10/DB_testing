// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CreateTaskSetInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case capacityProviderStrategy
        case clientToken
        case cluster
        case externalId
        case launchType
        case loadBalancers
        case networkConfiguration
        case platformVersion
        case scale
        case service
        case serviceRegistries
        case tags
        case taskDefinition
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let capacityProviderStrategy = capacityProviderStrategy {
            var capacityProviderStrategyContainer = encodeContainer.nestedUnkeyedContainer(forKey: .capacityProviderStrategy)
            for capacityproviderstrategy0 in capacityProviderStrategy {
                try capacityProviderStrategyContainer.encode(capacityproviderstrategy0)
            }
        }
        if let clientToken = self.clientToken {
            try encodeContainer.encode(clientToken, forKey: .clientToken)
        }
        if let cluster = self.cluster {
            try encodeContainer.encode(cluster, forKey: .cluster)
        }
        if let externalId = self.externalId {
            try encodeContainer.encode(externalId, forKey: .externalId)
        }
        if let launchType = self.launchType {
            try encodeContainer.encode(launchType.rawValue, forKey: .launchType)
        }
        if let loadBalancers = loadBalancers {
            var loadBalancersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .loadBalancers)
            for loadbalancers0 in loadBalancers {
                try loadBalancersContainer.encode(loadbalancers0)
            }
        }
        if let networkConfiguration = self.networkConfiguration {
            try encodeContainer.encode(networkConfiguration, forKey: .networkConfiguration)
        }
        if let platformVersion = self.platformVersion {
            try encodeContainer.encode(platformVersion, forKey: .platformVersion)
        }
        if let scale = self.scale {
            try encodeContainer.encode(scale, forKey: .scale)
        }
        if let service = self.service {
            try encodeContainer.encode(service, forKey: .service)
        }
        if let serviceRegistries = serviceRegistries {
            var serviceRegistriesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .serviceRegistries)
            for serviceregistries0 in serviceRegistries {
                try serviceRegistriesContainer.encode(serviceregistries0)
            }
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tags0 in tags {
                try tagsContainer.encode(tags0)
            }
        }
        if let taskDefinition = self.taskDefinition {
            try encodeContainer.encode(taskDefinition, forKey: .taskDefinition)
        }
    }
}
