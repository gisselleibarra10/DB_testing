// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension EcsClientTypes.ContainerDefinition: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case command
        case cpu
        case dependsOn
        case disableNetworking
        case dnsSearchDomains
        case dnsServers
        case dockerLabels
        case dockerSecurityOptions
        case entryPoint
        case environment
        case environmentFiles
        case essential
        case extraHosts
        case firelensConfiguration
        case healthCheck
        case hostname
        case image
        case interactive
        case links
        case linuxParameters
        case logConfiguration
        case memory
        case memoryReservation
        case mountPoints
        case name
        case portMappings
        case privileged
        case pseudoTerminal
        case readonlyRootFilesystem
        case repositoryCredentials
        case resourceRequirements
        case secrets
        case startTimeout
        case stopTimeout
        case systemControls
        case ulimits
        case user
        case volumesFrom
        case workingDirectory
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let command = command {
            var commandContainer = encodeContainer.nestedUnkeyedContainer(forKey: .command)
            for stringlist0 in command {
                try commandContainer.encode(stringlist0)
            }
        }
        if cpu != 0 {
            try encodeContainer.encode(cpu, forKey: .cpu)
        }
        if let dependsOn = dependsOn {
            var dependsOnContainer = encodeContainer.nestedUnkeyedContainer(forKey: .dependsOn)
            for containerdependencies0 in dependsOn {
                try dependsOnContainer.encode(containerdependencies0)
            }
        }
        if let disableNetworking = self.disableNetworking {
            try encodeContainer.encode(disableNetworking, forKey: .disableNetworking)
        }
        if let dnsSearchDomains = dnsSearchDomains {
            var dnsSearchDomainsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .dnsSearchDomains)
            for stringlist0 in dnsSearchDomains {
                try dnsSearchDomainsContainer.encode(stringlist0)
            }
        }
        if let dnsServers = dnsServers {
            var dnsServersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .dnsServers)
            for stringlist0 in dnsServers {
                try dnsServersContainer.encode(stringlist0)
            }
        }
        if let dockerLabels = dockerLabels {
            var dockerLabelsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .dockerLabels)
            for (dictKey0, dockerlabelsmap0) in dockerLabels {
                try dockerLabelsContainer.encode(dockerlabelsmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let dockerSecurityOptions = dockerSecurityOptions {
            var dockerSecurityOptionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .dockerSecurityOptions)
            for stringlist0 in dockerSecurityOptions {
                try dockerSecurityOptionsContainer.encode(stringlist0)
            }
        }
        if let entryPoint = entryPoint {
            var entryPointContainer = encodeContainer.nestedUnkeyedContainer(forKey: .entryPoint)
            for stringlist0 in entryPoint {
                try entryPointContainer.encode(stringlist0)
            }
        }
        if let environment = environment {
            var environmentContainer = encodeContainer.nestedUnkeyedContainer(forKey: .environment)
            for environmentvariables0 in environment {
                try environmentContainer.encode(environmentvariables0)
            }
        }
        if let environmentFiles = environmentFiles {
            var environmentFilesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .environmentFiles)
            for environmentfiles0 in environmentFiles {
                try environmentFilesContainer.encode(environmentfiles0)
            }
        }
        if let essential = self.essential {
            try encodeContainer.encode(essential, forKey: .essential)
        }
        if let extraHosts = extraHosts {
            var extraHostsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .extraHosts)
            for hostentrylist0 in extraHosts {
                try extraHostsContainer.encode(hostentrylist0)
            }
        }
        if let firelensConfiguration = self.firelensConfiguration {
            try encodeContainer.encode(firelensConfiguration, forKey: .firelensConfiguration)
        }
        if let healthCheck = self.healthCheck {
            try encodeContainer.encode(healthCheck, forKey: .healthCheck)
        }
        if let hostname = self.hostname {
            try encodeContainer.encode(hostname, forKey: .hostname)
        }
        if let image = self.image {
            try encodeContainer.encode(image, forKey: .image)
        }
        if let interactive = self.interactive {
            try encodeContainer.encode(interactive, forKey: .interactive)
        }
        if let links = links {
            var linksContainer = encodeContainer.nestedUnkeyedContainer(forKey: .links)
            for stringlist0 in links {
                try linksContainer.encode(stringlist0)
            }
        }
        if let linuxParameters = self.linuxParameters {
            try encodeContainer.encode(linuxParameters, forKey: .linuxParameters)
        }
        if let logConfiguration = self.logConfiguration {
            try encodeContainer.encode(logConfiguration, forKey: .logConfiguration)
        }
        if let memory = self.memory {
            try encodeContainer.encode(memory, forKey: .memory)
        }
        if let memoryReservation = self.memoryReservation {
            try encodeContainer.encode(memoryReservation, forKey: .memoryReservation)
        }
        if let mountPoints = mountPoints {
            var mountPointsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .mountPoints)
            for mountpointlist0 in mountPoints {
                try mountPointsContainer.encode(mountpointlist0)
            }
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let portMappings = portMappings {
            var portMappingsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .portMappings)
            for portmappinglist0 in portMappings {
                try portMappingsContainer.encode(portmappinglist0)
            }
        }
        if let privileged = self.privileged {
            try encodeContainer.encode(privileged, forKey: .privileged)
        }
        if let pseudoTerminal = self.pseudoTerminal {
            try encodeContainer.encode(pseudoTerminal, forKey: .pseudoTerminal)
        }
        if let readonlyRootFilesystem = self.readonlyRootFilesystem {
            try encodeContainer.encode(readonlyRootFilesystem, forKey: .readonlyRootFilesystem)
        }
        if let repositoryCredentials = self.repositoryCredentials {
            try encodeContainer.encode(repositoryCredentials, forKey: .repositoryCredentials)
        }
        if let resourceRequirements = resourceRequirements {
            var resourceRequirementsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .resourceRequirements)
            for resourcerequirements0 in resourceRequirements {
                try resourceRequirementsContainer.encode(resourcerequirements0)
            }
        }
        if let secrets = secrets {
            var secretsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .secrets)
            for secretlist0 in secrets {
                try secretsContainer.encode(secretlist0)
            }
        }
        if let startTimeout = self.startTimeout {
            try encodeContainer.encode(startTimeout, forKey: .startTimeout)
        }
        if let stopTimeout = self.stopTimeout {
            try encodeContainer.encode(stopTimeout, forKey: .stopTimeout)
        }
        if let systemControls = systemControls {
            var systemControlsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .systemControls)
            for systemcontrols0 in systemControls {
                try systemControlsContainer.encode(systemcontrols0)
            }
        }
        if let ulimits = ulimits {
            var ulimitsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .ulimits)
            for ulimitlist0 in ulimits {
                try ulimitsContainer.encode(ulimitlist0)
            }
        }
        if let user = self.user {
            try encodeContainer.encode(user, forKey: .user)
        }
        if let volumesFrom = volumesFrom {
            var volumesFromContainer = encodeContainer.nestedUnkeyedContainer(forKey: .volumesFrom)
            for volumefromlist0 in volumesFrom {
                try volumesFromContainer.encode(volumefromlist0)
            }
        }
        if let workingDirectory = self.workingDirectory {
            try encodeContainer.encode(workingDirectory, forKey: .workingDirectory)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let imageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .image)
        image = imageDecoded
        let repositoryCredentialsDecoded = try containerValues.decodeIfPresent(EcsClientTypes.RepositoryCredentials.self, forKey: .repositoryCredentials)
        repositoryCredentials = repositoryCredentialsDecoded
        let cpuDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .cpu) ?? 0
        cpu = cpuDecoded
        let memoryDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .memory)
        memory = memoryDecoded
        let memoryReservationDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .memoryReservation)
        memoryReservation = memoryReservationDecoded
        let linksContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .links)
        var linksDecoded0:[Swift.String]? = nil
        if let linksContainer = linksContainer {
            linksDecoded0 = [Swift.String]()
            for string0 in linksContainer {
                if let string0 = string0 {
                    linksDecoded0?.append(string0)
                }
            }
        }
        links = linksDecoded0
        let portMappingsContainer = try containerValues.decodeIfPresent([EcsClientTypes.PortMapping?].self, forKey: .portMappings)
        var portMappingsDecoded0:[EcsClientTypes.PortMapping]? = nil
        if let portMappingsContainer = portMappingsContainer {
            portMappingsDecoded0 = [EcsClientTypes.PortMapping]()
            for structure0 in portMappingsContainer {
                if let structure0 = structure0 {
                    portMappingsDecoded0?.append(structure0)
                }
            }
        }
        portMappings = portMappingsDecoded0
        let essentialDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .essential)
        essential = essentialDecoded
        let entryPointContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .entryPoint)
        var entryPointDecoded0:[Swift.String]? = nil
        if let entryPointContainer = entryPointContainer {
            entryPointDecoded0 = [Swift.String]()
            for string0 in entryPointContainer {
                if let string0 = string0 {
                    entryPointDecoded0?.append(string0)
                }
            }
        }
        entryPoint = entryPointDecoded0
        let commandContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .command)
        var commandDecoded0:[Swift.String]? = nil
        if let commandContainer = commandContainer {
            commandDecoded0 = [Swift.String]()
            for string0 in commandContainer {
                if let string0 = string0 {
                    commandDecoded0?.append(string0)
                }
            }
        }
        command = commandDecoded0
        let environmentContainer = try containerValues.decodeIfPresent([EcsClientTypes.KeyValuePair?].self, forKey: .environment)
        var environmentDecoded0:[EcsClientTypes.KeyValuePair]? = nil
        if let environmentContainer = environmentContainer {
            environmentDecoded0 = [EcsClientTypes.KeyValuePair]()
            for structure0 in environmentContainer {
                if let structure0 = structure0 {
                    environmentDecoded0?.append(structure0)
                }
            }
        }
        environment = environmentDecoded0
        let environmentFilesContainer = try containerValues.decodeIfPresent([EcsClientTypes.EnvironmentFile?].self, forKey: .environmentFiles)
        var environmentFilesDecoded0:[EcsClientTypes.EnvironmentFile]? = nil
        if let environmentFilesContainer = environmentFilesContainer {
            environmentFilesDecoded0 = [EcsClientTypes.EnvironmentFile]()
            for structure0 in environmentFilesContainer {
                if let structure0 = structure0 {
                    environmentFilesDecoded0?.append(structure0)
                }
            }
        }
        environmentFiles = environmentFilesDecoded0
        let mountPointsContainer = try containerValues.decodeIfPresent([EcsClientTypes.MountPoint?].self, forKey: .mountPoints)
        var mountPointsDecoded0:[EcsClientTypes.MountPoint]? = nil
        if let mountPointsContainer = mountPointsContainer {
            mountPointsDecoded0 = [EcsClientTypes.MountPoint]()
            for structure0 in mountPointsContainer {
                if let structure0 = structure0 {
                    mountPointsDecoded0?.append(structure0)
                }
            }
        }
        mountPoints = mountPointsDecoded0
        let volumesFromContainer = try containerValues.decodeIfPresent([EcsClientTypes.VolumeFrom?].self, forKey: .volumesFrom)
        var volumesFromDecoded0:[EcsClientTypes.VolumeFrom]? = nil
        if let volumesFromContainer = volumesFromContainer {
            volumesFromDecoded0 = [EcsClientTypes.VolumeFrom]()
            for structure0 in volumesFromContainer {
                if let structure0 = structure0 {
                    volumesFromDecoded0?.append(structure0)
                }
            }
        }
        volumesFrom = volumesFromDecoded0
        let linuxParametersDecoded = try containerValues.decodeIfPresent(EcsClientTypes.LinuxParameters.self, forKey: .linuxParameters)
        linuxParameters = linuxParametersDecoded
        let secretsContainer = try containerValues.decodeIfPresent([EcsClientTypes.Secret?].self, forKey: .secrets)
        var secretsDecoded0:[EcsClientTypes.Secret]? = nil
        if let secretsContainer = secretsContainer {
            secretsDecoded0 = [EcsClientTypes.Secret]()
            for structure0 in secretsContainer {
                if let structure0 = structure0 {
                    secretsDecoded0?.append(structure0)
                }
            }
        }
        secrets = secretsDecoded0
        let dependsOnContainer = try containerValues.decodeIfPresent([EcsClientTypes.ContainerDependency?].self, forKey: .dependsOn)
        var dependsOnDecoded0:[EcsClientTypes.ContainerDependency]? = nil
        if let dependsOnContainer = dependsOnContainer {
            dependsOnDecoded0 = [EcsClientTypes.ContainerDependency]()
            for structure0 in dependsOnContainer {
                if let structure0 = structure0 {
                    dependsOnDecoded0?.append(structure0)
                }
            }
        }
        dependsOn = dependsOnDecoded0
        let startTimeoutDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .startTimeout)
        startTimeout = startTimeoutDecoded
        let stopTimeoutDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .stopTimeout)
        stopTimeout = stopTimeoutDecoded
        let hostnameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .hostname)
        hostname = hostnameDecoded
        let userDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .user)
        user = userDecoded
        let workingDirectoryDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .workingDirectory)
        workingDirectory = workingDirectoryDecoded
        let disableNetworkingDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .disableNetworking)
        disableNetworking = disableNetworkingDecoded
        let privilegedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .privileged)
        privileged = privilegedDecoded
        let readonlyRootFilesystemDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .readonlyRootFilesystem)
        readonlyRootFilesystem = readonlyRootFilesystemDecoded
        let dnsServersContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .dnsServers)
        var dnsServersDecoded0:[Swift.String]? = nil
        if let dnsServersContainer = dnsServersContainer {
            dnsServersDecoded0 = [Swift.String]()
            for string0 in dnsServersContainer {
                if let string0 = string0 {
                    dnsServersDecoded0?.append(string0)
                }
            }
        }
        dnsServers = dnsServersDecoded0
        let dnsSearchDomainsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .dnsSearchDomains)
        var dnsSearchDomainsDecoded0:[Swift.String]? = nil
        if let dnsSearchDomainsContainer = dnsSearchDomainsContainer {
            dnsSearchDomainsDecoded0 = [Swift.String]()
            for string0 in dnsSearchDomainsContainer {
                if let string0 = string0 {
                    dnsSearchDomainsDecoded0?.append(string0)
                }
            }
        }
        dnsSearchDomains = dnsSearchDomainsDecoded0
        let extraHostsContainer = try containerValues.decodeIfPresent([EcsClientTypes.HostEntry?].self, forKey: .extraHosts)
        var extraHostsDecoded0:[EcsClientTypes.HostEntry]? = nil
        if let extraHostsContainer = extraHostsContainer {
            extraHostsDecoded0 = [EcsClientTypes.HostEntry]()
            for structure0 in extraHostsContainer {
                if let structure0 = structure0 {
                    extraHostsDecoded0?.append(structure0)
                }
            }
        }
        extraHosts = extraHostsDecoded0
        let dockerSecurityOptionsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .dockerSecurityOptions)
        var dockerSecurityOptionsDecoded0:[Swift.String]? = nil
        if let dockerSecurityOptionsContainer = dockerSecurityOptionsContainer {
            dockerSecurityOptionsDecoded0 = [Swift.String]()
            for string0 in dockerSecurityOptionsContainer {
                if let string0 = string0 {
                    dockerSecurityOptionsDecoded0?.append(string0)
                }
            }
        }
        dockerSecurityOptions = dockerSecurityOptionsDecoded0
        let interactiveDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .interactive)
        interactive = interactiveDecoded
        let pseudoTerminalDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .pseudoTerminal)
        pseudoTerminal = pseudoTerminalDecoded
        let dockerLabelsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .dockerLabels)
        var dockerLabelsDecoded0: [Swift.String:Swift.String]? = nil
        if let dockerLabelsContainer = dockerLabelsContainer {
            dockerLabelsDecoded0 = [Swift.String:Swift.String]()
            for (key0, string0) in dockerLabelsContainer {
                if let string0 = string0 {
                    dockerLabelsDecoded0?[key0] = string0
                }
            }
        }
        dockerLabels = dockerLabelsDecoded0
        let ulimitsContainer = try containerValues.decodeIfPresent([EcsClientTypes.Ulimit?].self, forKey: .ulimits)
        var ulimitsDecoded0:[EcsClientTypes.Ulimit]? = nil
        if let ulimitsContainer = ulimitsContainer {
            ulimitsDecoded0 = [EcsClientTypes.Ulimit]()
            for structure0 in ulimitsContainer {
                if let structure0 = structure0 {
                    ulimitsDecoded0?.append(structure0)
                }
            }
        }
        ulimits = ulimitsDecoded0
        let logConfigurationDecoded = try containerValues.decodeIfPresent(EcsClientTypes.LogConfiguration.self, forKey: .logConfiguration)
        logConfiguration = logConfigurationDecoded
        let healthCheckDecoded = try containerValues.decodeIfPresent(EcsClientTypes.HealthCheck.self, forKey: .healthCheck)
        healthCheck = healthCheckDecoded
        let systemControlsContainer = try containerValues.decodeIfPresent([EcsClientTypes.SystemControl?].self, forKey: .systemControls)
        var systemControlsDecoded0:[EcsClientTypes.SystemControl]? = nil
        if let systemControlsContainer = systemControlsContainer {
            systemControlsDecoded0 = [EcsClientTypes.SystemControl]()
            for structure0 in systemControlsContainer {
                if let structure0 = structure0 {
                    systemControlsDecoded0?.append(structure0)
                }
            }
        }
        systemControls = systemControlsDecoded0
        let resourceRequirementsContainer = try containerValues.decodeIfPresent([EcsClientTypes.ResourceRequirement?].self, forKey: .resourceRequirements)
        var resourceRequirementsDecoded0:[EcsClientTypes.ResourceRequirement]? = nil
        if let resourceRequirementsContainer = resourceRequirementsContainer {
            resourceRequirementsDecoded0 = [EcsClientTypes.ResourceRequirement]()
            for structure0 in resourceRequirementsContainer {
                if let structure0 = structure0 {
                    resourceRequirementsDecoded0?.append(structure0)
                }
            }
        }
        resourceRequirements = resourceRequirementsDecoded0
        let firelensConfigurationDecoded = try containerValues.decodeIfPresent(EcsClientTypes.FirelensConfiguration.self, forKey: .firelensConfiguration)
        firelensConfiguration = firelensConfigurationDecoded
    }
}
