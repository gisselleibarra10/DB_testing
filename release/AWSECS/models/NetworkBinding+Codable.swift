// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension EcsClientTypes.NetworkBinding: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bindIP
        case containerPort
        case hostPort
        case `protocol` = "protocol"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let bindIP = self.bindIP {
            try encodeContainer.encode(bindIP, forKey: .bindIP)
        }
        if let containerPort = self.containerPort {
            try encodeContainer.encode(containerPort, forKey: .containerPort)
        }
        if let hostPort = self.hostPort {
            try encodeContainer.encode(hostPort, forKey: .hostPort)
        }
        if let `protocol` = self.`protocol` {
            try encodeContainer.encode(`protocol`.rawValue, forKey: .`protocol`)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let bindIPDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .bindIP)
        bindIP = bindIPDecoded
        let containerPortDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .containerPort)
        containerPort = containerPortDecoded
        let hostPortDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .hostPort)
        hostPort = hostPortDecoded
        let protocolDecoded = try containerValues.decodeIfPresent(EcsClientTypes.TransportProtocol.self, forKey: .protocol)
        `protocol` = protocolDecoded
    }
}
