// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension EcsClientTypes.ManagedScaling: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case instanceWarmupPeriod
        case maximumScalingStepSize
        case minimumScalingStepSize
        case status
        case targetCapacity
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let instanceWarmupPeriod = self.instanceWarmupPeriod {
            try encodeContainer.encode(instanceWarmupPeriod, forKey: .instanceWarmupPeriod)
        }
        if let maximumScalingStepSize = self.maximumScalingStepSize {
            try encodeContainer.encode(maximumScalingStepSize, forKey: .maximumScalingStepSize)
        }
        if let minimumScalingStepSize = self.minimumScalingStepSize {
            try encodeContainer.encode(minimumScalingStepSize, forKey: .minimumScalingStepSize)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let targetCapacity = self.targetCapacity {
            try encodeContainer.encode(targetCapacity, forKey: .targetCapacity)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statusDecoded = try containerValues.decodeIfPresent(EcsClientTypes.ManagedScalingStatus.self, forKey: .status)
        status = statusDecoded
        let targetCapacityDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .targetCapacity)
        targetCapacity = targetCapacityDecoded
        let minimumScalingStepSizeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .minimumScalingStepSize)
        minimumScalingStepSize = minimumScalingStepSizeDecoded
        let maximumScalingStepSizeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maximumScalingStepSize)
        maximumScalingStepSize = maximumScalingStepSizeDecoded
        let instanceWarmupPeriodDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .instanceWarmupPeriod)
        instanceWarmupPeriod = instanceWarmupPeriodDecoded
    }
}
