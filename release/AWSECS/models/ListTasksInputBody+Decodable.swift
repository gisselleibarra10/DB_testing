// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListTasksInputBody: Swift.Equatable {
    let cluster: Swift.String?
    let containerInstance: Swift.String?
    let family: Swift.String?
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
    let startedBy: Swift.String?
    let serviceName: Swift.String?
    let desiredStatus: EcsClientTypes.DesiredStatus?
    let launchType: EcsClientTypes.LaunchType?
}

extension ListTasksInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cluster
        case containerInstance
        case desiredStatus
        case family
        case launchType
        case maxResults
        case nextToken
        case serviceName
        case startedBy
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clusterDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cluster)
        cluster = clusterDecoded
        let containerInstanceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .containerInstance)
        containerInstance = containerInstanceDecoded
        let familyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .family)
        family = familyDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let startedByDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .startedBy)
        startedBy = startedByDecoded
        let serviceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serviceName)
        serviceName = serviceNameDecoded
        let desiredStatusDecoded = try containerValues.decodeIfPresent(EcsClientTypes.DesiredStatus.self, forKey: .desiredStatus)
        desiredStatus = desiredStatusDecoded
        let launchTypeDecoded = try containerValues.decodeIfPresent(EcsClientTypes.LaunchType.self, forKey: .launchType)
        launchType = launchTypeDecoded
    }
}
