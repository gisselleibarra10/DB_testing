// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension EcsClientTypes {
    /// The details of an Amazon ECS service deployment. This is used only when a service uses the ECS deployment controller type.
    public struct Deployment: Swift.Equatable {
        /// The capacity provider strategy that the deployment is using.
        public var capacityProviderStrategy: [EcsClientTypes.CapacityProviderStrategyItem]?
        /// The Unix timestamp for the time when the service deployment was created.
        public var createdAt: ClientRuntime.Date?
        /// The most recent desired count of tasks that was specified for the service to deploy or maintain.
        public var desiredCount: Swift.Int
        /// The number of consecutively failed tasks in the deployment. A task is considered a failure if the service scheduler can't launch the task, the task doesn't transition to a RUNNING state, or if it fails any of its defined health checks and is stopped. Once a service deployment has one or more successfully running tasks, the failed task count resets to zero and stops being evaluated.
        public var failedTasks: Swift.Int
        /// The ID of the deployment.
        public var id: Swift.String?
        /// The launch type the tasks in the service are using. For more information, see [Amazon ECS Launch Types](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html) in the Amazon Elastic Container Service Developer Guide.
        public var launchType: EcsClientTypes.LaunchType?
        /// The VPC subnet and security group configuration for tasks that receive their own elastic network interface by using the awsvpc networking mode.
        public var networkConfiguration: EcsClientTypes.NetworkConfiguration?
        /// The number of tasks in the deployment that are in the PENDING status.
        public var pendingCount: Swift.Int
        /// The operating system that your tasks in the service, or tasks are running on. A platform family is specified only for tasks using the Fargate launch type. All tasks that run as part of this service must use the same platformFamily value as the service, for example,  LINUX..
        public var platformFamily: Swift.String?
        /// The platform version that your tasks in the service run on. A platform version is only specified for tasks using the Fargate launch type. If one isn't specified, the LATEST platform version is used. For more information, see [Fargate Platform Versions](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html) in the Amazon Elastic Container Service Developer Guide.
        public var platformVersion: Swift.String?
        /// The rolloutState of a service is only returned for services that use the rolling update (ECS) deployment type that aren't behind a Classic Load Balancer. The rollout state of the deployment. When a service deployment is started, it begins in an IN_PROGRESS state. When the service reaches a steady state, the deployment transitions to a COMPLETED state. If the service fails to reach a steady state and circuit breaker is enabled, the deployment transitions to a FAILED state. A deployment in FAILED state doesn't launch any new tasks. For more information, see [DeploymentCircuitBreaker].
        public var rolloutState: EcsClientTypes.DeploymentRolloutState?
        /// A description of the rollout state of a deployment.
        public var rolloutStateReason: Swift.String?
        /// The number of tasks in the deployment that are in the RUNNING status.
        public var runningCount: Swift.Int
        /// The status of the deployment. The following describes each state. PRIMARY The most recent deployment of a service. ACTIVE A service deployment that still has running tasks, but are in the process of being replaced with a new PRIMARY deployment. INACTIVE A deployment that has been completely replaced.
        public var status: Swift.String?
        /// The most recent task definition that was specified for the tasks in the service to use.
        public var taskDefinition: Swift.String?
        /// The Unix timestamp for the time when the service deployment was last updated.
        public var updatedAt: ClientRuntime.Date?

        public init (
            capacityProviderStrategy: [EcsClientTypes.CapacityProviderStrategyItem]? = nil,
            createdAt: ClientRuntime.Date? = nil,
            desiredCount: Swift.Int = 0,
            failedTasks: Swift.Int = 0,
            id: Swift.String? = nil,
            launchType: EcsClientTypes.LaunchType? = nil,
            networkConfiguration: EcsClientTypes.NetworkConfiguration? = nil,
            pendingCount: Swift.Int = 0,
            platformFamily: Swift.String? = nil,
            platformVersion: Swift.String? = nil,
            rolloutState: EcsClientTypes.DeploymentRolloutState? = nil,
            rolloutStateReason: Swift.String? = nil,
            runningCount: Swift.Int = 0,
            status: Swift.String? = nil,
            taskDefinition: Swift.String? = nil,
            updatedAt: ClientRuntime.Date? = nil
        )
        {
            self.capacityProviderStrategy = capacityProviderStrategy
            self.createdAt = createdAt
            self.desiredCount = desiredCount
            self.failedTasks = failedTasks
            self.id = id
            self.launchType = launchType
            self.networkConfiguration = networkConfiguration
            self.pendingCount = pendingCount
            self.platformFamily = platformFamily
            self.platformVersion = platformVersion
            self.rolloutState = rolloutState
            self.rolloutStateReason = rolloutStateReason
            self.runningCount = runningCount
            self.status = status
            self.taskDefinition = taskDefinition
            self.updatedAt = updatedAt
        }
    }

}
