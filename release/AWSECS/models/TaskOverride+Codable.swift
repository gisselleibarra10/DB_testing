// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension EcsClientTypes.TaskOverride: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case containerOverrides
        case cpu
        case ephemeralStorage
        case executionRoleArn
        case inferenceAcceleratorOverrides
        case memory
        case taskRoleArn
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let containerOverrides = containerOverrides {
            var containerOverridesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .containerOverrides)
            for containeroverrides0 in containerOverrides {
                try containerOverridesContainer.encode(containeroverrides0)
            }
        }
        if let cpu = self.cpu {
            try encodeContainer.encode(cpu, forKey: .cpu)
        }
        if let ephemeralStorage = self.ephemeralStorage {
            try encodeContainer.encode(ephemeralStorage, forKey: .ephemeralStorage)
        }
        if let executionRoleArn = self.executionRoleArn {
            try encodeContainer.encode(executionRoleArn, forKey: .executionRoleArn)
        }
        if let inferenceAcceleratorOverrides = inferenceAcceleratorOverrides {
            var inferenceAcceleratorOverridesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .inferenceAcceleratorOverrides)
            for inferenceacceleratoroverrides0 in inferenceAcceleratorOverrides {
                try inferenceAcceleratorOverridesContainer.encode(inferenceacceleratoroverrides0)
            }
        }
        if let memory = self.memory {
            try encodeContainer.encode(memory, forKey: .memory)
        }
        if let taskRoleArn = self.taskRoleArn {
            try encodeContainer.encode(taskRoleArn, forKey: .taskRoleArn)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let containerOverridesContainer = try containerValues.decodeIfPresent([EcsClientTypes.ContainerOverride?].self, forKey: .containerOverrides)
        var containerOverridesDecoded0:[EcsClientTypes.ContainerOverride]? = nil
        if let containerOverridesContainer = containerOverridesContainer {
            containerOverridesDecoded0 = [EcsClientTypes.ContainerOverride]()
            for structure0 in containerOverridesContainer {
                if let structure0 = structure0 {
                    containerOverridesDecoded0?.append(structure0)
                }
            }
        }
        containerOverrides = containerOverridesDecoded0
        let cpuDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cpu)
        cpu = cpuDecoded
        let inferenceAcceleratorOverridesContainer = try containerValues.decodeIfPresent([EcsClientTypes.InferenceAcceleratorOverride?].self, forKey: .inferenceAcceleratorOverrides)
        var inferenceAcceleratorOverridesDecoded0:[EcsClientTypes.InferenceAcceleratorOverride]? = nil
        if let inferenceAcceleratorOverridesContainer = inferenceAcceleratorOverridesContainer {
            inferenceAcceleratorOverridesDecoded0 = [EcsClientTypes.InferenceAcceleratorOverride]()
            for structure0 in inferenceAcceleratorOverridesContainer {
                if let structure0 = structure0 {
                    inferenceAcceleratorOverridesDecoded0?.append(structure0)
                }
            }
        }
        inferenceAcceleratorOverrides = inferenceAcceleratorOverridesDecoded0
        let executionRoleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .executionRoleArn)
        executionRoleArn = executionRoleArnDecoded
        let memoryDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .memory)
        memory = memoryDecoded
        let taskRoleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .taskRoleArn)
        taskRoleArn = taskRoleArnDecoded
        let ephemeralStorageDecoded = try containerValues.decodeIfPresent(EcsClientTypes.EphemeralStorage.self, forKey: .ephemeralStorage)
        ephemeralStorage = ephemeralStorageDecoded
    }
}
