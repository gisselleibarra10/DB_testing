// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension EcsClientTypes.Resource: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case doubleValue
        case integerValue
        case longValue
        case name
        case stringSetValue
        case type
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if doubleValue != 0.0 {
            try encodeContainer.encode(doubleValue, forKey: .doubleValue)
        }
        if integerValue != 0 {
            try encodeContainer.encode(integerValue, forKey: .integerValue)
        }
        if longValue != 0 {
            try encodeContainer.encode(longValue, forKey: .longValue)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let stringSetValue = stringSetValue {
            var stringSetValueContainer = encodeContainer.nestedUnkeyedContainer(forKey: .stringSetValue)
            for stringlist0 in stringSetValue {
                try stringSetValueContainer.encode(stringlist0)
            }
        }
        if let type = self.type {
            try encodeContainer.encode(type, forKey: .type)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let typeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .type)
        type = typeDecoded
        let doubleValueDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .doubleValue) ?? 0.0
        doubleValue = doubleValueDecoded
        let longValueDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .longValue) ?? 0
        longValue = longValueDecoded
        let integerValueDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .integerValue) ?? 0
        integerValue = integerValueDecoded
        let stringSetValueContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .stringSetValue)
        var stringSetValueDecoded0:[Swift.String]? = nil
        if let stringSetValueContainer = stringSetValueContainer {
            stringSetValueDecoded0 = [Swift.String]()
            for string0 in stringSetValueContainer {
                if let string0 = string0 {
                    stringSetValueDecoded0?.append(string0)
                }
            }
        }
        stringSetValue = stringSetValueDecoded0
    }
}
