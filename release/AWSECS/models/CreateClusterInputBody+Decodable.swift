// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateClusterInputBody: Swift.Equatable {
    let clusterName: Swift.String?
    let tags: [EcsClientTypes.Tag]?
    let settings: [EcsClientTypes.ClusterSetting]?
    let configuration: EcsClientTypes.ClusterConfiguration?
    let capacityProviders: [Swift.String]?
    let defaultCapacityProviderStrategy: [EcsClientTypes.CapacityProviderStrategyItem]?
}

extension CreateClusterInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case capacityProviders
        case clusterName
        case configuration
        case defaultCapacityProviderStrategy
        case settings
        case tags
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clusterNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterName)
        clusterName = clusterNameDecoded
        let tagsContainer = try containerValues.decodeIfPresent([EcsClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[EcsClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [EcsClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let settingsContainer = try containerValues.decodeIfPresent([EcsClientTypes.ClusterSetting?].self, forKey: .settings)
        var settingsDecoded0:[EcsClientTypes.ClusterSetting]? = nil
        if let settingsContainer = settingsContainer {
            settingsDecoded0 = [EcsClientTypes.ClusterSetting]()
            for structure0 in settingsContainer {
                if let structure0 = structure0 {
                    settingsDecoded0?.append(structure0)
                }
            }
        }
        settings = settingsDecoded0
        let configurationDecoded = try containerValues.decodeIfPresent(EcsClientTypes.ClusterConfiguration.self, forKey: .configuration)
        configuration = configurationDecoded
        let capacityProvidersContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .capacityProviders)
        var capacityProvidersDecoded0:[Swift.String]? = nil
        if let capacityProvidersContainer = capacityProvidersContainer {
            capacityProvidersDecoded0 = [Swift.String]()
            for string0 in capacityProvidersContainer {
                if let string0 = string0 {
                    capacityProvidersDecoded0?.append(string0)
                }
            }
        }
        capacityProviders = capacityProvidersDecoded0
        let defaultCapacityProviderStrategyContainer = try containerValues.decodeIfPresent([EcsClientTypes.CapacityProviderStrategyItem?].self, forKey: .defaultCapacityProviderStrategy)
        var defaultCapacityProviderStrategyDecoded0:[EcsClientTypes.CapacityProviderStrategyItem]? = nil
        if let defaultCapacityProviderStrategyContainer = defaultCapacityProviderStrategyContainer {
            defaultCapacityProviderStrategyDecoded0 = [EcsClientTypes.CapacityProviderStrategyItem]()
            for structure0 in defaultCapacityProviderStrategyContainer {
                if let structure0 = structure0 {
                    defaultCapacityProviderStrategyDecoded0?.append(structure0)
                }
            }
        }
        defaultCapacityProviderStrategy = defaultCapacityProviderStrategyDecoded0
    }
}
