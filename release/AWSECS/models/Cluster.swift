// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension EcsClientTypes {
    /// A regional grouping of one or more container instances where you can run task requests. Each account receives a default cluster the first time you use the Amazon ECS service, but you may also create other clusters. Clusters may contain more than one instance type simultaneously.
    public struct Cluster: Swift.Equatable {
        /// The number of services that are running on the cluster in an ACTIVE state. You can view these services with [ListServices].
        public var activeServicesCount: Swift.Int
        /// The resources attached to a cluster. When using a capacity provider with a cluster, the capacity provider and associated resources are returned as cluster attachments.
        public var attachments: [EcsClientTypes.Attachment]?
        /// The status of the capacity providers associated with the cluster. The following are the states that are returned. UPDATE_IN_PROGRESS The available capacity providers for the cluster are updating. UPDATE_COMPLETE The capacity providers have successfully updated. UPDATE_FAILED The capacity provider updates failed.
        public var attachmentsStatus: Swift.String?
        /// The capacity providers associated with the cluster.
        public var capacityProviders: [Swift.String]?
        /// The Amazon Resource Name (ARN) that identifies the cluster. For more information about the ARN format, see [Amazon Resource Name (ARN)](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-account-settings.html#ecs-resource-ids) in the Amazon ECS Developer Guide.
        public var clusterArn: Swift.String?
        /// A user-generated string that you use to identify your cluster.
        public var clusterName: Swift.String?
        /// The execute command configuration for the cluster.
        public var configuration: EcsClientTypes.ClusterConfiguration?
        /// The default capacity provider strategy for the cluster. When services or tasks are run in the cluster with no launch type or capacity provider strategy specified, the default capacity provider strategy is used.
        public var defaultCapacityProviderStrategy: [EcsClientTypes.CapacityProviderStrategyItem]?
        /// The number of tasks in the cluster that are in the PENDING state.
        public var pendingTasksCount: Swift.Int
        /// The number of container instances registered into the cluster. This includes container instances in both ACTIVE and DRAINING status.
        public var registeredContainerInstancesCount: Swift.Int
        /// The number of tasks in the cluster that are in the RUNNING state.
        public var runningTasksCount: Swift.Int
        /// The settings for the cluster. This parameter indicates whether CloudWatch Container Insights is enabled or disabled for a cluster.
        public var settings: [EcsClientTypes.ClusterSetting]?
        /// Additional information about your clusters that are separated by launch type. They include the following:
        ///
        /// * runningEC2TasksCount
        ///
        /// * RunningFargateTasksCount
        ///
        /// * pendingEC2TasksCount
        ///
        /// * pendingFargateTasksCount
        ///
        /// * activeEC2ServiceCount
        ///
        /// * activeFargateServiceCount
        ///
        /// * drainingEC2ServiceCount
        ///
        /// * drainingFargateServiceCount
        public var statistics: [EcsClientTypes.KeyValuePair]?
        /// The status of the cluster. The following are the possible states that are returned. ACTIVE The cluster is ready to accept tasks and if applicable you can register container instances with the cluster. PROVISIONING The cluster has capacity providers that are associated with it and the resources needed for the capacity provider are being created. DEPROVISIONING The cluster has capacity providers that are associated with it and the resources needed for the capacity provider are being deleted. FAILED The cluster has capacity providers that are associated with it and the resources needed for the capacity provider have failed to create. INACTIVE The cluster has been deleted. Clusters with an INACTIVE status may remain discoverable in your account for a period of time. However, this behavior is subject to change in the future. We don't recommend that you rely on INACTIVE clusters persisting.
        public var status: Swift.String?
        /// The metadata that you apply to the cluster to help you categorize and organize them. Each tag consists of a key and an optional value. You define both. The following basic restrictions apply to tags:
        ///
        /// * Maximum number of tags per resource - 50
        ///
        /// * For each resource, each tag key must be unique, and each tag key can have only one value.
        ///
        /// * Maximum key length - 128 Unicode characters in UTF-8
        ///
        /// * Maximum value length - 256 Unicode characters in UTF-8
        ///
        /// * If your tagging schema is used across multiple services and resources, remember that other services may have restrictions on allowed characters. Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following characters: + - = . _ : / @.
        ///
        /// * Tag keys and values are case-sensitive.
        ///
        /// * Do not use aws:, AWS:, or any upper or lowercase combination of such as a prefix for either keys or values as it is reserved for Amazon Web Services use. You cannot edit or delete tag keys or values with this prefix. Tags with this prefix do not count against your tags per resource limit.
        public var tags: [EcsClientTypes.Tag]?

        public init (
            activeServicesCount: Swift.Int = 0,
            attachments: [EcsClientTypes.Attachment]? = nil,
            attachmentsStatus: Swift.String? = nil,
            capacityProviders: [Swift.String]? = nil,
            clusterArn: Swift.String? = nil,
            clusterName: Swift.String? = nil,
            configuration: EcsClientTypes.ClusterConfiguration? = nil,
            defaultCapacityProviderStrategy: [EcsClientTypes.CapacityProviderStrategyItem]? = nil,
            pendingTasksCount: Swift.Int = 0,
            registeredContainerInstancesCount: Swift.Int = 0,
            runningTasksCount: Swift.Int = 0,
            settings: [EcsClientTypes.ClusterSetting]? = nil,
            statistics: [EcsClientTypes.KeyValuePair]? = nil,
            status: Swift.String? = nil,
            tags: [EcsClientTypes.Tag]? = nil
        )
        {
            self.activeServicesCount = activeServicesCount
            self.attachments = attachments
            self.attachmentsStatus = attachmentsStatus
            self.capacityProviders = capacityProviders
            self.clusterArn = clusterArn
            self.clusterName = clusterName
            self.configuration = configuration
            self.defaultCapacityProviderStrategy = defaultCapacityProviderStrategy
            self.pendingTasksCount = pendingTasksCount
            self.registeredContainerInstancesCount = registeredContainerInstancesCount
            self.runningTasksCount = runningTasksCount
            self.settings = settings
            self.statistics = statistics
            self.status = status
            self.tags = tags
        }
    }

}
