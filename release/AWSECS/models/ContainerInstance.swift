// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension EcsClientTypes {
    /// An Amazon EC2 or External instance that's running the Amazon ECS agent and has been registered with a cluster.
    public struct ContainerInstance: Swift.Equatable {
        /// This parameter returns true if the agent is connected to Amazon ECS. An instance with an agent that may be unhealthy or stopped return false. Only instances connected to an agent can accept task placement requests.
        public var agentConnected: Swift.Bool
        /// The status of the most recent agent update. If an update wasn't ever requested, this value is NULL.
        public var agentUpdateStatus: EcsClientTypes.AgentUpdateStatus?
        /// The resources attached to a container instance, such as an elastic network interface.
        public var attachments: [EcsClientTypes.Attachment]?
        /// The attributes set for the container instance, either by the Amazon ECS container agent at instance registration or manually with the [PutAttributes] operation.
        public var attributes: [EcsClientTypes.Attribute]?
        /// The capacity provider that's associated with the container instance.
        public var capacityProviderName: Swift.String?
        /// The Amazon Resource Name (ARN) of the container instance. For more information about the ARN format, see [Amazon Resource Name (ARN)](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-account-settings.html#ecs-resource-ids) in the Amazon ECS Developer Guide.
        public var containerInstanceArn: Swift.String?
        /// The ID of the container instance. For Amazon EC2 instances, this value is the Amazon EC2 instance ID. For external instances, this value is the Amazon Web Services Systems Manager managed instance ID.
        public var ec2InstanceId: Swift.String?
        /// An object representing the health status of the container instance.
        public var healthStatus: EcsClientTypes.ContainerInstanceHealthStatus?
        /// The number of tasks on the container instance that are in the PENDING status.
        public var pendingTasksCount: Swift.Int
        /// The Unix timestamp for the time when the container instance was registered.
        public var registeredAt: ClientRuntime.Date?
        /// For CPU and memory resource types, this parameter describes the amount of each resource that was available on the container instance when the container agent registered it with Amazon ECS. This value represents the total amount of CPU and memory that can be allocated on this container instance to tasks. For port resource types, this parameter describes the ports that were reserved by the Amazon ECS container agent when it registered the container instance with Amazon ECS.
        public var registeredResources: [EcsClientTypes.Resource]?
        /// For CPU and memory resource types, this parameter describes the remaining CPU and memory that wasn't already allocated to tasks and is therefore available for new tasks. For port resource types, this parameter describes the ports that were reserved by the Amazon ECS container agent (at instance registration time) and any task containers that have reserved port mappings on the host (with the host or bridge network mode). Any port that's not specified here is available for new tasks.
        public var remainingResources: [EcsClientTypes.Resource]?
        /// The number of tasks on the container instance that are in the RUNNING status.
        public var runningTasksCount: Swift.Int
        /// The status of the container instance. The valid values are REGISTERING, REGISTRATION_FAILED, ACTIVE, INACTIVE, DEREGISTERING, or DRAINING. If your account has opted in to the awsvpcTrunking account setting, then any newly registered container instance will transition to a REGISTERING status while the trunk elastic network interface is provisioned for the instance. If the registration fails, the instance will transition to a REGISTRATION_FAILED status. You can describe the container instance and see the reason for failure in the statusReason parameter. Once the container instance is terminated, the instance transitions to a DEREGISTERING status while the trunk elastic network interface is deprovisioned. The instance then transitions to an INACTIVE status. The ACTIVE status indicates that the container instance can accept tasks. The DRAINING indicates that new tasks aren't placed on the container instance and any service tasks running on the container instance are removed if possible. For more information, see [Container instance draining](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/container-instance-draining.html) in the Amazon Elastic Container Service Developer Guide.
        public var status: Swift.String?
        /// The reason that the container instance reached its current status.
        public var statusReason: Swift.String?
        /// The metadata that you apply to the container instance to help you categorize and organize them. Each tag consists of a key and an optional value. You define both. The following basic restrictions apply to tags:
        ///
        /// * Maximum number of tags per resource - 50
        ///
        /// * For each resource, each tag key must be unique, and each tag key can have only one value.
        ///
        /// * Maximum key length - 128 Unicode characters in UTF-8
        ///
        /// * Maximum value length - 256 Unicode characters in UTF-8
        ///
        /// * If your tagging schema is used across multiple services and resources, remember that other services may have restrictions on allowed characters. Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following characters: + - = . _ : / @.
        ///
        /// * Tag keys and values are case-sensitive.
        ///
        /// * Do not use aws:, AWS:, or any upper or lowercase combination of such as a prefix for either keys or values as it is reserved for Amazon Web Services use. You cannot edit or delete tag keys or values with this prefix. Tags with this prefix do not count against your tags per resource limit.
        public var tags: [EcsClientTypes.Tag]?
        /// The version counter for the container instance. Every time a container instance experiences a change that triggers a CloudWatch event, the version counter is incremented. If you're replicating your Amazon ECS container instance state with CloudWatch Events, you can compare the version of a container instance reported by the Amazon ECS APIs with the version reported in CloudWatch Events for the container instance (inside the detail object) to verify that the version in your event stream is current.
        public var version: Swift.Int
        /// The version information for the Amazon ECS container agent and Docker daemon running on the container instance.
        public var versionInfo: EcsClientTypes.VersionInfo?

        public init (
            agentConnected: Swift.Bool = false,
            agentUpdateStatus: EcsClientTypes.AgentUpdateStatus? = nil,
            attachments: [EcsClientTypes.Attachment]? = nil,
            attributes: [EcsClientTypes.Attribute]? = nil,
            capacityProviderName: Swift.String? = nil,
            containerInstanceArn: Swift.String? = nil,
            ec2InstanceId: Swift.String? = nil,
            healthStatus: EcsClientTypes.ContainerInstanceHealthStatus? = nil,
            pendingTasksCount: Swift.Int = 0,
            registeredAt: ClientRuntime.Date? = nil,
            registeredResources: [EcsClientTypes.Resource]? = nil,
            remainingResources: [EcsClientTypes.Resource]? = nil,
            runningTasksCount: Swift.Int = 0,
            status: Swift.String? = nil,
            statusReason: Swift.String? = nil,
            tags: [EcsClientTypes.Tag]? = nil,
            version: Swift.Int = 0,
            versionInfo: EcsClientTypes.VersionInfo? = nil
        )
        {
            self.agentConnected = agentConnected
            self.agentUpdateStatus = agentUpdateStatus
            self.attachments = attachments
            self.attributes = attributes
            self.capacityProviderName = capacityProviderName
            self.containerInstanceArn = containerInstanceArn
            self.ec2InstanceId = ec2InstanceId
            self.healthStatus = healthStatus
            self.pendingTasksCount = pendingTasksCount
            self.registeredAt = registeredAt
            self.registeredResources = registeredResources
            self.remainingResources = remainingResources
            self.runningTasksCount = runningTasksCount
            self.status = status
            self.statusReason = statusReason
            self.tags = tags
            self.version = version
            self.versionInfo = versionInfo
        }
    }

}
