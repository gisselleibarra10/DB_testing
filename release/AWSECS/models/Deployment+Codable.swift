// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension EcsClientTypes.Deployment: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case capacityProviderStrategy
        case createdAt
        case desiredCount
        case failedTasks
        case id
        case launchType
        case networkConfiguration
        case pendingCount
        case platformFamily
        case platformVersion
        case rolloutState
        case rolloutStateReason
        case runningCount
        case status
        case taskDefinition
        case updatedAt
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let capacityProviderStrategy = capacityProviderStrategy {
            var capacityProviderStrategyContainer = encodeContainer.nestedUnkeyedContainer(forKey: .capacityProviderStrategy)
            for capacityproviderstrategy0 in capacityProviderStrategy {
                try capacityProviderStrategyContainer.encode(capacityproviderstrategy0)
            }
        }
        if let createdAt = self.createdAt {
            try encodeContainer.encode(createdAt.timeIntervalSince1970, forKey: .createdAt)
        }
        if desiredCount != 0 {
            try encodeContainer.encode(desiredCount, forKey: .desiredCount)
        }
        if failedTasks != 0 {
            try encodeContainer.encode(failedTasks, forKey: .failedTasks)
        }
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let launchType = self.launchType {
            try encodeContainer.encode(launchType.rawValue, forKey: .launchType)
        }
        if let networkConfiguration = self.networkConfiguration {
            try encodeContainer.encode(networkConfiguration, forKey: .networkConfiguration)
        }
        if pendingCount != 0 {
            try encodeContainer.encode(pendingCount, forKey: .pendingCount)
        }
        if let platformFamily = self.platformFamily {
            try encodeContainer.encode(platformFamily, forKey: .platformFamily)
        }
        if let platformVersion = self.platformVersion {
            try encodeContainer.encode(platformVersion, forKey: .platformVersion)
        }
        if let rolloutState = self.rolloutState {
            try encodeContainer.encode(rolloutState.rawValue, forKey: .rolloutState)
        }
        if let rolloutStateReason = self.rolloutStateReason {
            try encodeContainer.encode(rolloutStateReason, forKey: .rolloutStateReason)
        }
        if runningCount != 0 {
            try encodeContainer.encode(runningCount, forKey: .runningCount)
        }
        if let status = self.status {
            try encodeContainer.encode(status, forKey: .status)
        }
        if let taskDefinition = self.taskDefinition {
            try encodeContainer.encode(taskDefinition, forKey: .taskDefinition)
        }
        if let updatedAt = self.updatedAt {
            try encodeContainer.encode(updatedAt.timeIntervalSince1970, forKey: .updatedAt)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let statusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .status)
        status = statusDecoded
        let taskDefinitionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .taskDefinition)
        taskDefinition = taskDefinitionDecoded
        let desiredCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .desiredCount) ?? 0
        desiredCount = desiredCountDecoded
        let pendingCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .pendingCount) ?? 0
        pendingCount = pendingCountDecoded
        let runningCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .runningCount) ?? 0
        runningCount = runningCountDecoded
        let failedTasksDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .failedTasks) ?? 0
        failedTasks = failedTasksDecoded
        let createdAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdAt)
        createdAt = createdAtDecoded
        let updatedAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .updatedAt)
        updatedAt = updatedAtDecoded
        let capacityProviderStrategyContainer = try containerValues.decodeIfPresent([EcsClientTypes.CapacityProviderStrategyItem?].self, forKey: .capacityProviderStrategy)
        var capacityProviderStrategyDecoded0:[EcsClientTypes.CapacityProviderStrategyItem]? = nil
        if let capacityProviderStrategyContainer = capacityProviderStrategyContainer {
            capacityProviderStrategyDecoded0 = [EcsClientTypes.CapacityProviderStrategyItem]()
            for structure0 in capacityProviderStrategyContainer {
                if let structure0 = structure0 {
                    capacityProviderStrategyDecoded0?.append(structure0)
                }
            }
        }
        capacityProviderStrategy = capacityProviderStrategyDecoded0
        let launchTypeDecoded = try containerValues.decodeIfPresent(EcsClientTypes.LaunchType.self, forKey: .launchType)
        launchType = launchTypeDecoded
        let platformVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .platformVersion)
        platformVersion = platformVersionDecoded
        let platformFamilyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .platformFamily)
        platformFamily = platformFamilyDecoded
        let networkConfigurationDecoded = try containerValues.decodeIfPresent(EcsClientTypes.NetworkConfiguration.self, forKey: .networkConfiguration)
        networkConfiguration = networkConfigurationDecoded
        let rolloutStateDecoded = try containerValues.decodeIfPresent(EcsClientTypes.DeploymentRolloutState.self, forKey: .rolloutState)
        rolloutState = rolloutStateDecoded
        let rolloutStateReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .rolloutStateReason)
        rolloutStateReason = rolloutStateReasonDecoded
    }
}
