// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension EcsClientTypes {
    /// A Docker container that's part of a task.
    public struct Container: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the container.
        public var containerArn: Swift.String?
        /// The number of CPU units set for the container. The value is 0 if no value was specified in the container definition when the task definition was registered.
        public var cpu: Swift.String?
        /// The exit code returned from the container.
        public var exitCode: Swift.Int?
        /// The IDs of each GPU assigned to the container.
        public var gpuIds: [Swift.String]?
        /// The health status of the container. If health checks aren't configured for this container in its task definition, then it reports the health status as UNKNOWN.
        public var healthStatus: EcsClientTypes.HealthStatus?
        /// The image used for the container.
        public var image: Swift.String?
        /// The container image manifest digest. The imageDigest is only returned if the container is using an image hosted in Amazon ECR, otherwise it is omitted.
        public var imageDigest: Swift.String?
        /// The last known status of the container.
        public var lastStatus: Swift.String?
        /// The details of any Amazon ECS managed agents associated with the container.
        public var managedAgents: [EcsClientTypes.ManagedAgent]?
        /// The hard limit (in MiB) of memory set for the container.
        public var memory: Swift.String?
        /// The soft limit (in MiB) of memory set for the container.
        public var memoryReservation: Swift.String?
        /// The name of the container.
        public var name: Swift.String?
        /// The network bindings associated with the container.
        public var networkBindings: [EcsClientTypes.NetworkBinding]?
        /// The network interfaces associated with the container.
        public var networkInterfaces: [EcsClientTypes.NetworkInterface]?
        /// A short (255 max characters) human-readable string to provide additional details about a running or stopped container.
        public var reason: Swift.String?
        /// The ID of the Docker container.
        public var runtimeId: Swift.String?
        /// The ARN of the task.
        public var taskArn: Swift.String?

        public init (
            containerArn: Swift.String? = nil,
            cpu: Swift.String? = nil,
            exitCode: Swift.Int? = nil,
            gpuIds: [Swift.String]? = nil,
            healthStatus: EcsClientTypes.HealthStatus? = nil,
            image: Swift.String? = nil,
            imageDigest: Swift.String? = nil,
            lastStatus: Swift.String? = nil,
            managedAgents: [EcsClientTypes.ManagedAgent]? = nil,
            memory: Swift.String? = nil,
            memoryReservation: Swift.String? = nil,
            name: Swift.String? = nil,
            networkBindings: [EcsClientTypes.NetworkBinding]? = nil,
            networkInterfaces: [EcsClientTypes.NetworkInterface]? = nil,
            reason: Swift.String? = nil,
            runtimeId: Swift.String? = nil,
            taskArn: Swift.String? = nil
        )
        {
            self.containerArn = containerArn
            self.cpu = cpu
            self.exitCode = exitCode
            self.gpuIds = gpuIds
            self.healthStatus = healthStatus
            self.image = image
            self.imageDigest = imageDigest
            self.lastStatus = lastStatus
            self.managedAgents = managedAgents
            self.memory = memory
            self.memoryReservation = memoryReservation
            self.name = name
            self.networkBindings = networkBindings
            self.networkInterfaces = networkInterfaces
            self.reason = reason
            self.runtimeId = runtimeId
            self.taskArn = taskArn
        }
    }

}
