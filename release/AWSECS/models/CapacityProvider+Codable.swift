// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension EcsClientTypes.CapacityProvider: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case autoScalingGroupProvider
        case capacityProviderArn
        case name
        case status
        case tags
        case updateStatus
        case updateStatusReason
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let autoScalingGroupProvider = self.autoScalingGroupProvider {
            try encodeContainer.encode(autoScalingGroupProvider, forKey: .autoScalingGroupProvider)
        }
        if let capacityProviderArn = self.capacityProviderArn {
            try encodeContainer.encode(capacityProviderArn, forKey: .capacityProviderArn)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tags0 in tags {
                try tagsContainer.encode(tags0)
            }
        }
        if let updateStatus = self.updateStatus {
            try encodeContainer.encode(updateStatus.rawValue, forKey: .updateStatus)
        }
        if let updateStatusReason = self.updateStatusReason {
            try encodeContainer.encode(updateStatusReason, forKey: .updateStatusReason)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let capacityProviderArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .capacityProviderArn)
        capacityProviderArn = capacityProviderArnDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let statusDecoded = try containerValues.decodeIfPresent(EcsClientTypes.CapacityProviderStatus.self, forKey: .status)
        status = statusDecoded
        let autoScalingGroupProviderDecoded = try containerValues.decodeIfPresent(EcsClientTypes.AutoScalingGroupProvider.self, forKey: .autoScalingGroupProvider)
        autoScalingGroupProvider = autoScalingGroupProviderDecoded
        let updateStatusDecoded = try containerValues.decodeIfPresent(EcsClientTypes.CapacityProviderUpdateStatus.self, forKey: .updateStatus)
        updateStatus = updateStatusDecoded
        let updateStatusReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .updateStatusReason)
        updateStatusReason = updateStatusReasonDecoded
        let tagsContainer = try containerValues.decodeIfPresent([EcsClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[EcsClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [EcsClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}
