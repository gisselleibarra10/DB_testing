// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension EcsClientTypes {
    /// Information about a set of Amazon ECS tasks in either an CodeDeploy or an EXTERNAL deployment. An Amazon ECS task set includes details such as the desired number of tasks, how many tasks are running, and whether the task set serves production traffic.
    public struct TaskSet: Swift.Equatable {
        /// The capacity provider strategy that are associated with the task set.
        public var capacityProviderStrategy: [EcsClientTypes.CapacityProviderStrategyItem]?
        /// The Amazon Resource Name (ARN) of the cluster that the service that hosts the task set exists in.
        public var clusterArn: Swift.String?
        /// The computed desired count for the task set. This is calculated by multiplying the service's desiredCount by the task set's scale percentage. The result is always rounded up. For example, if the computed desired count is 1.2, it rounds up to 2 tasks.
        public var computedDesiredCount: Swift.Int
        /// The Unix timestamp for the time when the task set was created.
        public var createdAt: ClientRuntime.Date?
        /// The external ID associated with the task set. If an CodeDeploy deployment created a task set, the externalId parameter contains the CodeDeploy deployment ID. If a task set is created for an external deployment and is associated with a service discovery registry, the externalId parameter contains the ECS_TASK_SET_EXTERNAL_ID Cloud Map attribute.
        public var externalId: Swift.String?
        /// The ID of the task set.
        public var id: Swift.String?
        /// The launch type the tasks in the task set are using. For more information, see [Amazon ECS launch types](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html) in the Amazon Elastic Container Service Developer Guide.
        public var launchType: EcsClientTypes.LaunchType?
        /// Details on a load balancer that are used with a task set.
        public var loadBalancers: [EcsClientTypes.LoadBalancer]?
        /// The network configuration for the task set.
        public var networkConfiguration: EcsClientTypes.NetworkConfiguration?
        /// The number of tasks in the task set that are in the PENDING status during a deployment. A task in the PENDING state is preparing to enter the RUNNING state. A task set enters the PENDING status when it launches for the first time or when it's restarted after being in the STOPPED state.
        public var pendingCount: Swift.Int
        /// The operating system that your tasks in the set are running on. A platform family is specified only for tasks that use the Fargate launch type. All tasks in the set must have the same value.
        public var platformFamily: Swift.String?
        /// The Fargate platform version where the tasks in the task set are running. A platform version is only specified for tasks run on Fargate. For more information, see [Fargate platform versions](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html) in the Amazon Elastic Container Service Developer Guide.
        public var platformVersion: Swift.String?
        /// The number of tasks in the task set that are in the RUNNING status during a deployment. A task in the RUNNING state is running and ready for use.
        public var runningCount: Swift.Int
        /// A floating-point percentage of your desired number of tasks to place and keep running in the task set.
        public var scale: EcsClientTypes.Scale?
        /// The Amazon Resource Name (ARN) of the service the task set exists in.
        public var serviceArn: Swift.String?
        /// The details for the service discovery registries to assign to this task set. For more information, see [Service discovery](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html).
        public var serviceRegistries: [EcsClientTypes.ServiceRegistry]?
        /// The stability status. This indicates whether the task set has reached a steady state. If the following conditions are met, the task set sre in STEADY_STATE:
        ///
        /// * The task runningCount is equal to the computedDesiredCount.
        ///
        /// * The pendingCount is 0.
        ///
        /// * There are no tasks that are running on container instances in the DRAINING status.
        ///
        /// * All tasks are reporting a healthy status from the load balancers, service discovery, and container health checks.
        ///
        ///
        /// If any of those conditions aren't met, the stability status returns STABILIZING.
        public var stabilityStatus: EcsClientTypes.StabilityStatus?
        /// The Unix timestamp for the time when the task set stability status was retrieved.
        public var stabilityStatusAt: ClientRuntime.Date?
        /// The tag specified when a task set is started. If an CodeDeploy deployment created the task set, the startedBy parameter is CODE_DEPLOY. If an external deployment created the task set, the startedBy field isn't used.
        public var startedBy: Swift.String?
        /// The status of the task set. The following describes each state. PRIMARY The task set is serving production traffic. ACTIVE The task set isn't serving production traffic. DRAINING The tasks in the task set are being stopped, and their corresponding targets are being deregistered from their target group.
        public var status: Swift.String?
        /// The metadata that you apply to the task set to help you categorize and organize them. Each tag consists of a key and an optional value. You define both. The following basic restrictions apply to tags:
        ///
        /// * Maximum number of tags per resource - 50
        ///
        /// * For each resource, each tag key must be unique, and each tag key can have only one value.
        ///
        /// * Maximum key length - 128 Unicode characters in UTF-8
        ///
        /// * Maximum value length - 256 Unicode characters in UTF-8
        ///
        /// * If your tagging schema is used across multiple services and resources, remember that other services may have restrictions on allowed characters. Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following characters: + - = . _ : / @.
        ///
        /// * Tag keys and values are case-sensitive.
        ///
        /// * Do not use aws:, AWS:, or any upper or lowercase combination of such as a prefix for either keys or values as it is reserved for Amazon Web Services use. You cannot edit or delete tag keys or values with this prefix. Tags with this prefix do not count against your tags per resource limit.
        public var tags: [EcsClientTypes.Tag]?
        /// The task definition that the task set is using.
        public var taskDefinition: Swift.String?
        /// The Amazon Resource Name (ARN) of the task set.
        public var taskSetArn: Swift.String?
        /// The Unix timestamp for the time when the task set was last updated.
        public var updatedAt: ClientRuntime.Date?

        public init (
            capacityProviderStrategy: [EcsClientTypes.CapacityProviderStrategyItem]? = nil,
            clusterArn: Swift.String? = nil,
            computedDesiredCount: Swift.Int = 0,
            createdAt: ClientRuntime.Date? = nil,
            externalId: Swift.String? = nil,
            id: Swift.String? = nil,
            launchType: EcsClientTypes.LaunchType? = nil,
            loadBalancers: [EcsClientTypes.LoadBalancer]? = nil,
            networkConfiguration: EcsClientTypes.NetworkConfiguration? = nil,
            pendingCount: Swift.Int = 0,
            platformFamily: Swift.String? = nil,
            platformVersion: Swift.String? = nil,
            runningCount: Swift.Int = 0,
            scale: EcsClientTypes.Scale? = nil,
            serviceArn: Swift.String? = nil,
            serviceRegistries: [EcsClientTypes.ServiceRegistry]? = nil,
            stabilityStatus: EcsClientTypes.StabilityStatus? = nil,
            stabilityStatusAt: ClientRuntime.Date? = nil,
            startedBy: Swift.String? = nil,
            status: Swift.String? = nil,
            tags: [EcsClientTypes.Tag]? = nil,
            taskDefinition: Swift.String? = nil,
            taskSetArn: Swift.String? = nil,
            updatedAt: ClientRuntime.Date? = nil
        )
        {
            self.capacityProviderStrategy = capacityProviderStrategy
            self.clusterArn = clusterArn
            self.computedDesiredCount = computedDesiredCount
            self.createdAt = createdAt
            self.externalId = externalId
            self.id = id
            self.launchType = launchType
            self.loadBalancers = loadBalancers
            self.networkConfiguration = networkConfiguration
            self.pendingCount = pendingCount
            self.platformFamily = platformFamily
            self.platformVersion = platformVersion
            self.runningCount = runningCount
            self.scale = scale
            self.serviceArn = serviceArn
            self.serviceRegistries = serviceRegistries
            self.stabilityStatus = stabilityStatus
            self.stabilityStatusAt = stabilityStatusAt
            self.startedBy = startedBy
            self.status = status
            self.tags = tags
            self.taskDefinition = taskDefinition
            self.taskSetArn = taskSetArn
            self.updatedAt = updatedAt
        }
    }

}
