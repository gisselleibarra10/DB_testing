// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateTaskSetInputBody: Swift.Equatable {
    let service: Swift.String?
    let cluster: Swift.String?
    let externalId: Swift.String?
    let taskDefinition: Swift.String?
    let networkConfiguration: EcsClientTypes.NetworkConfiguration?
    let loadBalancers: [EcsClientTypes.LoadBalancer]?
    let serviceRegistries: [EcsClientTypes.ServiceRegistry]?
    let launchType: EcsClientTypes.LaunchType?
    let capacityProviderStrategy: [EcsClientTypes.CapacityProviderStrategyItem]?
    let platformVersion: Swift.String?
    let scale: EcsClientTypes.Scale?
    let clientToken: Swift.String?
    let tags: [EcsClientTypes.Tag]?
}

extension CreateTaskSetInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case capacityProviderStrategy
        case clientToken
        case cluster
        case externalId
        case launchType
        case loadBalancers
        case networkConfiguration
        case platformVersion
        case scale
        case service
        case serviceRegistries
        case tags
        case taskDefinition
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let serviceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .service)
        service = serviceDecoded
        let clusterDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cluster)
        cluster = clusterDecoded
        let externalIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .externalId)
        externalId = externalIdDecoded
        let taskDefinitionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .taskDefinition)
        taskDefinition = taskDefinitionDecoded
        let networkConfigurationDecoded = try containerValues.decodeIfPresent(EcsClientTypes.NetworkConfiguration.self, forKey: .networkConfiguration)
        networkConfiguration = networkConfigurationDecoded
        let loadBalancersContainer = try containerValues.decodeIfPresent([EcsClientTypes.LoadBalancer?].self, forKey: .loadBalancers)
        var loadBalancersDecoded0:[EcsClientTypes.LoadBalancer]? = nil
        if let loadBalancersContainer = loadBalancersContainer {
            loadBalancersDecoded0 = [EcsClientTypes.LoadBalancer]()
            for structure0 in loadBalancersContainer {
                if let structure0 = structure0 {
                    loadBalancersDecoded0?.append(structure0)
                }
            }
        }
        loadBalancers = loadBalancersDecoded0
        let serviceRegistriesContainer = try containerValues.decodeIfPresent([EcsClientTypes.ServiceRegistry?].self, forKey: .serviceRegistries)
        var serviceRegistriesDecoded0:[EcsClientTypes.ServiceRegistry]? = nil
        if let serviceRegistriesContainer = serviceRegistriesContainer {
            serviceRegistriesDecoded0 = [EcsClientTypes.ServiceRegistry]()
            for structure0 in serviceRegistriesContainer {
                if let structure0 = structure0 {
                    serviceRegistriesDecoded0?.append(structure0)
                }
            }
        }
        serviceRegistries = serviceRegistriesDecoded0
        let launchTypeDecoded = try containerValues.decodeIfPresent(EcsClientTypes.LaunchType.self, forKey: .launchType)
        launchType = launchTypeDecoded
        let capacityProviderStrategyContainer = try containerValues.decodeIfPresent([EcsClientTypes.CapacityProviderStrategyItem?].self, forKey: .capacityProviderStrategy)
        var capacityProviderStrategyDecoded0:[EcsClientTypes.CapacityProviderStrategyItem]? = nil
        if let capacityProviderStrategyContainer = capacityProviderStrategyContainer {
            capacityProviderStrategyDecoded0 = [EcsClientTypes.CapacityProviderStrategyItem]()
            for structure0 in capacityProviderStrategyContainer {
                if let structure0 = structure0 {
                    capacityProviderStrategyDecoded0?.append(structure0)
                }
            }
        }
        capacityProviderStrategy = capacityProviderStrategyDecoded0
        let platformVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .platformVersion)
        platformVersion = platformVersionDecoded
        let scaleDecoded = try containerValues.decodeIfPresent(EcsClientTypes.Scale.self, forKey: .scale)
        scale = scaleDecoded
        let clientTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientToken)
        clientToken = clientTokenDecoded
        let tagsContainer = try containerValues.decodeIfPresent([EcsClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[EcsClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [EcsClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}
