// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension UpdateServiceInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case capacityProviderStrategy
        case cluster
        case deploymentConfiguration
        case desiredCount
        case enableECSManagedTags
        case enableExecuteCommand
        case forceNewDeployment
        case healthCheckGracePeriodSeconds
        case loadBalancers
        case networkConfiguration
        case placementConstraints
        case placementStrategy
        case platformVersion
        case propagateTags
        case service
        case serviceRegistries
        case taskDefinition
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let capacityProviderStrategy = capacityProviderStrategy {
            var capacityProviderStrategyContainer = encodeContainer.nestedUnkeyedContainer(forKey: .capacityProviderStrategy)
            for capacityproviderstrategy0 in capacityProviderStrategy {
                try capacityProviderStrategyContainer.encode(capacityproviderstrategy0)
            }
        }
        if let cluster = self.cluster {
            try encodeContainer.encode(cluster, forKey: .cluster)
        }
        if let deploymentConfiguration = self.deploymentConfiguration {
            try encodeContainer.encode(deploymentConfiguration, forKey: .deploymentConfiguration)
        }
        if let desiredCount = self.desiredCount {
            try encodeContainer.encode(desiredCount, forKey: .desiredCount)
        }
        if let enableECSManagedTags = self.enableECSManagedTags {
            try encodeContainer.encode(enableECSManagedTags, forKey: .enableECSManagedTags)
        }
        if let enableExecuteCommand = self.enableExecuteCommand {
            try encodeContainer.encode(enableExecuteCommand, forKey: .enableExecuteCommand)
        }
        if forceNewDeployment != false {
            try encodeContainer.encode(forceNewDeployment, forKey: .forceNewDeployment)
        }
        if let healthCheckGracePeriodSeconds = self.healthCheckGracePeriodSeconds {
            try encodeContainer.encode(healthCheckGracePeriodSeconds, forKey: .healthCheckGracePeriodSeconds)
        }
        if let loadBalancers = loadBalancers {
            var loadBalancersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .loadBalancers)
            for loadbalancers0 in loadBalancers {
                try loadBalancersContainer.encode(loadbalancers0)
            }
        }
        if let networkConfiguration = self.networkConfiguration {
            try encodeContainer.encode(networkConfiguration, forKey: .networkConfiguration)
        }
        if let placementConstraints = placementConstraints {
            var placementConstraintsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .placementConstraints)
            for placementconstraints0 in placementConstraints {
                try placementConstraintsContainer.encode(placementconstraints0)
            }
        }
        if let placementStrategy = placementStrategy {
            var placementStrategyContainer = encodeContainer.nestedUnkeyedContainer(forKey: .placementStrategy)
            for placementstrategies0 in placementStrategy {
                try placementStrategyContainer.encode(placementstrategies0)
            }
        }
        if let platformVersion = self.platformVersion {
            try encodeContainer.encode(platformVersion, forKey: .platformVersion)
        }
        if let propagateTags = self.propagateTags {
            try encodeContainer.encode(propagateTags.rawValue, forKey: .propagateTags)
        }
        if let service = self.service {
            try encodeContainer.encode(service, forKey: .service)
        }
        if let serviceRegistries = serviceRegistries {
            var serviceRegistriesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .serviceRegistries)
            for serviceregistries0 in serviceRegistries {
                try serviceRegistriesContainer.encode(serviceregistries0)
            }
        }
        if let taskDefinition = self.taskDefinition {
            try encodeContainer.encode(taskDefinition, forKey: .taskDefinition)
        }
    }
}
