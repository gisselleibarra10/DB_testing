// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct UpdateServiceInputBody: Swift.Equatable {
    let cluster: Swift.String?
    let service: Swift.String?
    let desiredCount: Swift.Int?
    let taskDefinition: Swift.String?
    let capacityProviderStrategy: [EcsClientTypes.CapacityProviderStrategyItem]?
    let deploymentConfiguration: EcsClientTypes.DeploymentConfiguration?
    let networkConfiguration: EcsClientTypes.NetworkConfiguration?
    let placementConstraints: [EcsClientTypes.PlacementConstraint]?
    let placementStrategy: [EcsClientTypes.PlacementStrategy]?
    let platformVersion: Swift.String?
    let forceNewDeployment: Swift.Bool
    let healthCheckGracePeriodSeconds: Swift.Int?
    let enableExecuteCommand: Swift.Bool?
    let enableECSManagedTags: Swift.Bool?
    let loadBalancers: [EcsClientTypes.LoadBalancer]?
    let propagateTags: EcsClientTypes.PropagateTags?
    let serviceRegistries: [EcsClientTypes.ServiceRegistry]?
}

extension UpdateServiceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case capacityProviderStrategy
        case cluster
        case deploymentConfiguration
        case desiredCount
        case enableECSManagedTags
        case enableExecuteCommand
        case forceNewDeployment
        case healthCheckGracePeriodSeconds
        case loadBalancers
        case networkConfiguration
        case placementConstraints
        case placementStrategy
        case platformVersion
        case propagateTags
        case service
        case serviceRegistries
        case taskDefinition
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clusterDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cluster)
        cluster = clusterDecoded
        let serviceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .service)
        service = serviceDecoded
        let desiredCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .desiredCount)
        desiredCount = desiredCountDecoded
        let taskDefinitionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .taskDefinition)
        taskDefinition = taskDefinitionDecoded
        let capacityProviderStrategyContainer = try containerValues.decodeIfPresent([EcsClientTypes.CapacityProviderStrategyItem?].self, forKey: .capacityProviderStrategy)
        var capacityProviderStrategyDecoded0:[EcsClientTypes.CapacityProviderStrategyItem]? = nil
        if let capacityProviderStrategyContainer = capacityProviderStrategyContainer {
            capacityProviderStrategyDecoded0 = [EcsClientTypes.CapacityProviderStrategyItem]()
            for structure0 in capacityProviderStrategyContainer {
                if let structure0 = structure0 {
                    capacityProviderStrategyDecoded0?.append(structure0)
                }
            }
        }
        capacityProviderStrategy = capacityProviderStrategyDecoded0
        let deploymentConfigurationDecoded = try containerValues.decodeIfPresent(EcsClientTypes.DeploymentConfiguration.self, forKey: .deploymentConfiguration)
        deploymentConfiguration = deploymentConfigurationDecoded
        let networkConfigurationDecoded = try containerValues.decodeIfPresent(EcsClientTypes.NetworkConfiguration.self, forKey: .networkConfiguration)
        networkConfiguration = networkConfigurationDecoded
        let placementConstraintsContainer = try containerValues.decodeIfPresent([EcsClientTypes.PlacementConstraint?].self, forKey: .placementConstraints)
        var placementConstraintsDecoded0:[EcsClientTypes.PlacementConstraint]? = nil
        if let placementConstraintsContainer = placementConstraintsContainer {
            placementConstraintsDecoded0 = [EcsClientTypes.PlacementConstraint]()
            for structure0 in placementConstraintsContainer {
                if let structure0 = structure0 {
                    placementConstraintsDecoded0?.append(structure0)
                }
            }
        }
        placementConstraints = placementConstraintsDecoded0
        let placementStrategyContainer = try containerValues.decodeIfPresent([EcsClientTypes.PlacementStrategy?].self, forKey: .placementStrategy)
        var placementStrategyDecoded0:[EcsClientTypes.PlacementStrategy]? = nil
        if let placementStrategyContainer = placementStrategyContainer {
            placementStrategyDecoded0 = [EcsClientTypes.PlacementStrategy]()
            for structure0 in placementStrategyContainer {
                if let structure0 = structure0 {
                    placementStrategyDecoded0?.append(structure0)
                }
            }
        }
        placementStrategy = placementStrategyDecoded0
        let platformVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .platformVersion)
        platformVersion = platformVersionDecoded
        let forceNewDeploymentDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .forceNewDeployment) ?? false
        forceNewDeployment = forceNewDeploymentDecoded
        let healthCheckGracePeriodSecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .healthCheckGracePeriodSeconds)
        healthCheckGracePeriodSeconds = healthCheckGracePeriodSecondsDecoded
        let enableExecuteCommandDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enableExecuteCommand)
        enableExecuteCommand = enableExecuteCommandDecoded
        let enableECSManagedTagsDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enableECSManagedTags)
        enableECSManagedTags = enableECSManagedTagsDecoded
        let loadBalancersContainer = try containerValues.decodeIfPresent([EcsClientTypes.LoadBalancer?].self, forKey: .loadBalancers)
        var loadBalancersDecoded0:[EcsClientTypes.LoadBalancer]? = nil
        if let loadBalancersContainer = loadBalancersContainer {
            loadBalancersDecoded0 = [EcsClientTypes.LoadBalancer]()
            for structure0 in loadBalancersContainer {
                if let structure0 = structure0 {
                    loadBalancersDecoded0?.append(structure0)
                }
            }
        }
        loadBalancers = loadBalancersDecoded0
        let propagateTagsDecoded = try containerValues.decodeIfPresent(EcsClientTypes.PropagateTags.self, forKey: .propagateTags)
        propagateTags = propagateTagsDecoded
        let serviceRegistriesContainer = try containerValues.decodeIfPresent([EcsClientTypes.ServiceRegistry?].self, forKey: .serviceRegistries)
        var serviceRegistriesDecoded0:[EcsClientTypes.ServiceRegistry]? = nil
        if let serviceRegistriesContainer = serviceRegistriesContainer {
            serviceRegistriesDecoded0 = [EcsClientTypes.ServiceRegistry]()
            for structure0 in serviceRegistriesContainer {
                if let structure0 = structure0 {
                    serviceRegistriesDecoded0?.append(structure0)
                }
            }
        }
        serviceRegistries = serviceRegistriesDecoded0
    }
}
