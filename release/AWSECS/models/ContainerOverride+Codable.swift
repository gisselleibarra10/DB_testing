// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension EcsClientTypes.ContainerOverride: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case command
        case cpu
        case environment
        case environmentFiles
        case memory
        case memoryReservation
        case name
        case resourceRequirements
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let command = command {
            var commandContainer = encodeContainer.nestedUnkeyedContainer(forKey: .command)
            for stringlist0 in command {
                try commandContainer.encode(stringlist0)
            }
        }
        if let cpu = self.cpu {
            try encodeContainer.encode(cpu, forKey: .cpu)
        }
        if let environment = environment {
            var environmentContainer = encodeContainer.nestedUnkeyedContainer(forKey: .environment)
            for environmentvariables0 in environment {
                try environmentContainer.encode(environmentvariables0)
            }
        }
        if let environmentFiles = environmentFiles {
            var environmentFilesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .environmentFiles)
            for environmentfiles0 in environmentFiles {
                try environmentFilesContainer.encode(environmentfiles0)
            }
        }
        if let memory = self.memory {
            try encodeContainer.encode(memory, forKey: .memory)
        }
        if let memoryReservation = self.memoryReservation {
            try encodeContainer.encode(memoryReservation, forKey: .memoryReservation)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let resourceRequirements = resourceRequirements {
            var resourceRequirementsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .resourceRequirements)
            for resourcerequirements0 in resourceRequirements {
                try resourceRequirementsContainer.encode(resourcerequirements0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let commandContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .command)
        var commandDecoded0:[Swift.String]? = nil
        if let commandContainer = commandContainer {
            commandDecoded0 = [Swift.String]()
            for string0 in commandContainer {
                if let string0 = string0 {
                    commandDecoded0?.append(string0)
                }
            }
        }
        command = commandDecoded0
        let environmentContainer = try containerValues.decodeIfPresent([EcsClientTypes.KeyValuePair?].self, forKey: .environment)
        var environmentDecoded0:[EcsClientTypes.KeyValuePair]? = nil
        if let environmentContainer = environmentContainer {
            environmentDecoded0 = [EcsClientTypes.KeyValuePair]()
            for structure0 in environmentContainer {
                if let structure0 = structure0 {
                    environmentDecoded0?.append(structure0)
                }
            }
        }
        environment = environmentDecoded0
        let environmentFilesContainer = try containerValues.decodeIfPresent([EcsClientTypes.EnvironmentFile?].self, forKey: .environmentFiles)
        var environmentFilesDecoded0:[EcsClientTypes.EnvironmentFile]? = nil
        if let environmentFilesContainer = environmentFilesContainer {
            environmentFilesDecoded0 = [EcsClientTypes.EnvironmentFile]()
            for structure0 in environmentFilesContainer {
                if let structure0 = structure0 {
                    environmentFilesDecoded0?.append(structure0)
                }
            }
        }
        environmentFiles = environmentFilesDecoded0
        let cpuDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .cpu)
        cpu = cpuDecoded
        let memoryDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .memory)
        memory = memoryDecoded
        let memoryReservationDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .memoryReservation)
        memoryReservation = memoryReservationDecoded
        let resourceRequirementsContainer = try containerValues.decodeIfPresent([EcsClientTypes.ResourceRequirement?].self, forKey: .resourceRequirements)
        var resourceRequirementsDecoded0:[EcsClientTypes.ResourceRequirement]? = nil
        if let resourceRequirementsContainer = resourceRequirementsContainer {
            resourceRequirementsDecoded0 = [EcsClientTypes.ResourceRequirement]()
            for structure0 in resourceRequirementsContainer {
                if let structure0 = structure0 {
                    resourceRequirementsDecoded0?.append(structure0)
                }
            }
        }
        resourceRequirements = resourceRequirementsDecoded0
    }
}
