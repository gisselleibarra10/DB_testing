// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct StartTaskInputBody: Swift.Equatable {
    let cluster: Swift.String?
    let containerInstances: [Swift.String]?
    let enableECSManagedTags: Swift.Bool
    let enableExecuteCommand: Swift.Bool
    let group: Swift.String?
    let networkConfiguration: EcsClientTypes.NetworkConfiguration?
    let overrides: EcsClientTypes.TaskOverride?
    let propagateTags: EcsClientTypes.PropagateTags?
    let referenceId: Swift.String?
    let startedBy: Swift.String?
    let tags: [EcsClientTypes.Tag]?
    let taskDefinition: Swift.String?
}

extension StartTaskInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cluster
        case containerInstances
        case enableECSManagedTags
        case enableExecuteCommand
        case group
        case networkConfiguration
        case overrides
        case propagateTags
        case referenceId
        case startedBy
        case tags
        case taskDefinition
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clusterDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cluster)
        cluster = clusterDecoded
        let containerInstancesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .containerInstances)
        var containerInstancesDecoded0:[Swift.String]? = nil
        if let containerInstancesContainer = containerInstancesContainer {
            containerInstancesDecoded0 = [Swift.String]()
            for string0 in containerInstancesContainer {
                if let string0 = string0 {
                    containerInstancesDecoded0?.append(string0)
                }
            }
        }
        containerInstances = containerInstancesDecoded0
        let enableECSManagedTagsDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enableECSManagedTags) ?? false
        enableECSManagedTags = enableECSManagedTagsDecoded
        let enableExecuteCommandDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enableExecuteCommand) ?? false
        enableExecuteCommand = enableExecuteCommandDecoded
        let groupDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .group)
        group = groupDecoded
        let networkConfigurationDecoded = try containerValues.decodeIfPresent(EcsClientTypes.NetworkConfiguration.self, forKey: .networkConfiguration)
        networkConfiguration = networkConfigurationDecoded
        let overridesDecoded = try containerValues.decodeIfPresent(EcsClientTypes.TaskOverride.self, forKey: .overrides)
        overrides = overridesDecoded
        let propagateTagsDecoded = try containerValues.decodeIfPresent(EcsClientTypes.PropagateTags.self, forKey: .propagateTags)
        propagateTags = propagateTagsDecoded
        let referenceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .referenceId)
        referenceId = referenceIdDecoded
        let startedByDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .startedBy)
        startedBy = startedByDecoded
        let tagsContainer = try containerValues.decodeIfPresent([EcsClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[EcsClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [EcsClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let taskDefinitionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .taskDefinition)
        taskDefinition = taskDefinitionDecoded
    }
}
