// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension EcsClientTypes.Service: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case capacityProviderStrategy
        case clusterArn
        case createdAt
        case createdBy
        case deploymentConfiguration
        case deploymentController
        case deployments
        case desiredCount
        case enableECSManagedTags
        case enableExecuteCommand
        case events
        case healthCheckGracePeriodSeconds
        case launchType
        case loadBalancers
        case networkConfiguration
        case pendingCount
        case placementConstraints
        case placementStrategy
        case platformFamily
        case platformVersion
        case propagateTags
        case roleArn
        case runningCount
        case schedulingStrategy
        case serviceArn
        case serviceName
        case serviceRegistries
        case status
        case tags
        case taskDefinition
        case taskSets
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let capacityProviderStrategy = capacityProviderStrategy {
            var capacityProviderStrategyContainer = encodeContainer.nestedUnkeyedContainer(forKey: .capacityProviderStrategy)
            for capacityproviderstrategy0 in capacityProviderStrategy {
                try capacityProviderStrategyContainer.encode(capacityproviderstrategy0)
            }
        }
        if let clusterArn = self.clusterArn {
            try encodeContainer.encode(clusterArn, forKey: .clusterArn)
        }
        if let createdAt = self.createdAt {
            try encodeContainer.encode(createdAt.timeIntervalSince1970, forKey: .createdAt)
        }
        if let createdBy = self.createdBy {
            try encodeContainer.encode(createdBy, forKey: .createdBy)
        }
        if let deploymentConfiguration = self.deploymentConfiguration {
            try encodeContainer.encode(deploymentConfiguration, forKey: .deploymentConfiguration)
        }
        if let deploymentController = self.deploymentController {
            try encodeContainer.encode(deploymentController, forKey: .deploymentController)
        }
        if let deployments = deployments {
            var deploymentsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .deployments)
            for deployments0 in deployments {
                try deploymentsContainer.encode(deployments0)
            }
        }
        if desiredCount != 0 {
            try encodeContainer.encode(desiredCount, forKey: .desiredCount)
        }
        if enableECSManagedTags != false {
            try encodeContainer.encode(enableECSManagedTags, forKey: .enableECSManagedTags)
        }
        if enableExecuteCommand != false {
            try encodeContainer.encode(enableExecuteCommand, forKey: .enableExecuteCommand)
        }
        if let events = events {
            var eventsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .events)
            for serviceevents0 in events {
                try eventsContainer.encode(serviceevents0)
            }
        }
        if let healthCheckGracePeriodSeconds = self.healthCheckGracePeriodSeconds {
            try encodeContainer.encode(healthCheckGracePeriodSeconds, forKey: .healthCheckGracePeriodSeconds)
        }
        if let launchType = self.launchType {
            try encodeContainer.encode(launchType.rawValue, forKey: .launchType)
        }
        if let loadBalancers = loadBalancers {
            var loadBalancersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .loadBalancers)
            for loadbalancers0 in loadBalancers {
                try loadBalancersContainer.encode(loadbalancers0)
            }
        }
        if let networkConfiguration = self.networkConfiguration {
            try encodeContainer.encode(networkConfiguration, forKey: .networkConfiguration)
        }
        if pendingCount != 0 {
            try encodeContainer.encode(pendingCount, forKey: .pendingCount)
        }
        if let placementConstraints = placementConstraints {
            var placementConstraintsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .placementConstraints)
            for placementconstraints0 in placementConstraints {
                try placementConstraintsContainer.encode(placementconstraints0)
            }
        }
        if let placementStrategy = placementStrategy {
            var placementStrategyContainer = encodeContainer.nestedUnkeyedContainer(forKey: .placementStrategy)
            for placementstrategies0 in placementStrategy {
                try placementStrategyContainer.encode(placementstrategies0)
            }
        }
        if let platformFamily = self.platformFamily {
            try encodeContainer.encode(platformFamily, forKey: .platformFamily)
        }
        if let platformVersion = self.platformVersion {
            try encodeContainer.encode(platformVersion, forKey: .platformVersion)
        }
        if let propagateTags = self.propagateTags {
            try encodeContainer.encode(propagateTags.rawValue, forKey: .propagateTags)
        }
        if let roleArn = self.roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if runningCount != 0 {
            try encodeContainer.encode(runningCount, forKey: .runningCount)
        }
        if let schedulingStrategy = self.schedulingStrategy {
            try encodeContainer.encode(schedulingStrategy.rawValue, forKey: .schedulingStrategy)
        }
        if let serviceArn = self.serviceArn {
            try encodeContainer.encode(serviceArn, forKey: .serviceArn)
        }
        if let serviceName = self.serviceName {
            try encodeContainer.encode(serviceName, forKey: .serviceName)
        }
        if let serviceRegistries = serviceRegistries {
            var serviceRegistriesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .serviceRegistries)
            for serviceregistries0 in serviceRegistries {
                try serviceRegistriesContainer.encode(serviceregistries0)
            }
        }
        if let status = self.status {
            try encodeContainer.encode(status, forKey: .status)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tags0 in tags {
                try tagsContainer.encode(tags0)
            }
        }
        if let taskDefinition = self.taskDefinition {
            try encodeContainer.encode(taskDefinition, forKey: .taskDefinition)
        }
        if let taskSets = taskSets {
            var taskSetsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .taskSets)
            for tasksets0 in taskSets {
                try taskSetsContainer.encode(tasksets0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let serviceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serviceArn)
        serviceArn = serviceArnDecoded
        let serviceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serviceName)
        serviceName = serviceNameDecoded
        let clusterArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterArn)
        clusterArn = clusterArnDecoded
        let loadBalancersContainer = try containerValues.decodeIfPresent([EcsClientTypes.LoadBalancer?].self, forKey: .loadBalancers)
        var loadBalancersDecoded0:[EcsClientTypes.LoadBalancer]? = nil
        if let loadBalancersContainer = loadBalancersContainer {
            loadBalancersDecoded0 = [EcsClientTypes.LoadBalancer]()
            for structure0 in loadBalancersContainer {
                if let structure0 = structure0 {
                    loadBalancersDecoded0?.append(structure0)
                }
            }
        }
        loadBalancers = loadBalancersDecoded0
        let serviceRegistriesContainer = try containerValues.decodeIfPresent([EcsClientTypes.ServiceRegistry?].self, forKey: .serviceRegistries)
        var serviceRegistriesDecoded0:[EcsClientTypes.ServiceRegistry]? = nil
        if let serviceRegistriesContainer = serviceRegistriesContainer {
            serviceRegistriesDecoded0 = [EcsClientTypes.ServiceRegistry]()
            for structure0 in serviceRegistriesContainer {
                if let structure0 = structure0 {
                    serviceRegistriesDecoded0?.append(structure0)
                }
            }
        }
        serviceRegistries = serviceRegistriesDecoded0
        let statusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .status)
        status = statusDecoded
        let desiredCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .desiredCount) ?? 0
        desiredCount = desiredCountDecoded
        let runningCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .runningCount) ?? 0
        runningCount = runningCountDecoded
        let pendingCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .pendingCount) ?? 0
        pendingCount = pendingCountDecoded
        let launchTypeDecoded = try containerValues.decodeIfPresent(EcsClientTypes.LaunchType.self, forKey: .launchType)
        launchType = launchTypeDecoded
        let capacityProviderStrategyContainer = try containerValues.decodeIfPresent([EcsClientTypes.CapacityProviderStrategyItem?].self, forKey: .capacityProviderStrategy)
        var capacityProviderStrategyDecoded0:[EcsClientTypes.CapacityProviderStrategyItem]? = nil
        if let capacityProviderStrategyContainer = capacityProviderStrategyContainer {
            capacityProviderStrategyDecoded0 = [EcsClientTypes.CapacityProviderStrategyItem]()
            for structure0 in capacityProviderStrategyContainer {
                if let structure0 = structure0 {
                    capacityProviderStrategyDecoded0?.append(structure0)
                }
            }
        }
        capacityProviderStrategy = capacityProviderStrategyDecoded0
        let platformVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .platformVersion)
        platformVersion = platformVersionDecoded
        let platformFamilyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .platformFamily)
        platformFamily = platformFamilyDecoded
        let taskDefinitionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .taskDefinition)
        taskDefinition = taskDefinitionDecoded
        let deploymentConfigurationDecoded = try containerValues.decodeIfPresent(EcsClientTypes.DeploymentConfiguration.self, forKey: .deploymentConfiguration)
        deploymentConfiguration = deploymentConfigurationDecoded
        let taskSetsContainer = try containerValues.decodeIfPresent([EcsClientTypes.TaskSet?].self, forKey: .taskSets)
        var taskSetsDecoded0:[EcsClientTypes.TaskSet]? = nil
        if let taskSetsContainer = taskSetsContainer {
            taskSetsDecoded0 = [EcsClientTypes.TaskSet]()
            for structure0 in taskSetsContainer {
                if let structure0 = structure0 {
                    taskSetsDecoded0?.append(structure0)
                }
            }
        }
        taskSets = taskSetsDecoded0
        let deploymentsContainer = try containerValues.decodeIfPresent([EcsClientTypes.Deployment?].self, forKey: .deployments)
        var deploymentsDecoded0:[EcsClientTypes.Deployment]? = nil
        if let deploymentsContainer = deploymentsContainer {
            deploymentsDecoded0 = [EcsClientTypes.Deployment]()
            for structure0 in deploymentsContainer {
                if let structure0 = structure0 {
                    deploymentsDecoded0?.append(structure0)
                }
            }
        }
        deployments = deploymentsDecoded0
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let eventsContainer = try containerValues.decodeIfPresent([EcsClientTypes.ServiceEvent?].self, forKey: .events)
        var eventsDecoded0:[EcsClientTypes.ServiceEvent]? = nil
        if let eventsContainer = eventsContainer {
            eventsDecoded0 = [EcsClientTypes.ServiceEvent]()
            for structure0 in eventsContainer {
                if let structure0 = structure0 {
                    eventsDecoded0?.append(structure0)
                }
            }
        }
        events = eventsDecoded0
        let createdAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdAt)
        createdAt = createdAtDecoded
        let placementConstraintsContainer = try containerValues.decodeIfPresent([EcsClientTypes.PlacementConstraint?].self, forKey: .placementConstraints)
        var placementConstraintsDecoded0:[EcsClientTypes.PlacementConstraint]? = nil
        if let placementConstraintsContainer = placementConstraintsContainer {
            placementConstraintsDecoded0 = [EcsClientTypes.PlacementConstraint]()
            for structure0 in placementConstraintsContainer {
                if let structure0 = structure0 {
                    placementConstraintsDecoded0?.append(structure0)
                }
            }
        }
        placementConstraints = placementConstraintsDecoded0
        let placementStrategyContainer = try containerValues.decodeIfPresent([EcsClientTypes.PlacementStrategy?].self, forKey: .placementStrategy)
        var placementStrategyDecoded0:[EcsClientTypes.PlacementStrategy]? = nil
        if let placementStrategyContainer = placementStrategyContainer {
            placementStrategyDecoded0 = [EcsClientTypes.PlacementStrategy]()
            for structure0 in placementStrategyContainer {
                if let structure0 = structure0 {
                    placementStrategyDecoded0?.append(structure0)
                }
            }
        }
        placementStrategy = placementStrategyDecoded0
        let networkConfigurationDecoded = try containerValues.decodeIfPresent(EcsClientTypes.NetworkConfiguration.self, forKey: .networkConfiguration)
        networkConfiguration = networkConfigurationDecoded
        let healthCheckGracePeriodSecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .healthCheckGracePeriodSeconds)
        healthCheckGracePeriodSeconds = healthCheckGracePeriodSecondsDecoded
        let schedulingStrategyDecoded = try containerValues.decodeIfPresent(EcsClientTypes.SchedulingStrategy.self, forKey: .schedulingStrategy)
        schedulingStrategy = schedulingStrategyDecoded
        let deploymentControllerDecoded = try containerValues.decodeIfPresent(EcsClientTypes.DeploymentController.self, forKey: .deploymentController)
        deploymentController = deploymentControllerDecoded
        let tagsContainer = try containerValues.decodeIfPresent([EcsClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[EcsClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [EcsClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let createdByDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .createdBy)
        createdBy = createdByDecoded
        let enableECSManagedTagsDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enableECSManagedTags) ?? false
        enableECSManagedTags = enableECSManagedTagsDecoded
        let propagateTagsDecoded = try containerValues.decodeIfPresent(EcsClientTypes.PropagateTags.self, forKey: .propagateTags)
        propagateTags = propagateTagsDecoded
        let enableExecuteCommandDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enableExecuteCommand) ?? false
        enableExecuteCommand = enableExecuteCommandDecoded
    }
}
