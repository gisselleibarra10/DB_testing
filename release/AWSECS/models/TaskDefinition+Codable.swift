// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension EcsClientTypes.TaskDefinition: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case compatibilities
        case containerDefinitions
        case cpu
        case deregisteredAt
        case ephemeralStorage
        case executionRoleArn
        case family
        case inferenceAccelerators
        case ipcMode
        case memory
        case networkMode
        case pidMode
        case placementConstraints
        case proxyConfiguration
        case registeredAt
        case registeredBy
        case requiresAttributes
        case requiresCompatibilities
        case revision
        case runtimePlatform
        case status
        case taskDefinitionArn
        case taskRoleArn
        case volumes
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let compatibilities = compatibilities {
            var compatibilitiesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .compatibilities)
            for compatibilitylist0 in compatibilities {
                try compatibilitiesContainer.encode(compatibilitylist0.rawValue)
            }
        }
        if let containerDefinitions = containerDefinitions {
            var containerDefinitionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .containerDefinitions)
            for containerdefinitions0 in containerDefinitions {
                try containerDefinitionsContainer.encode(containerdefinitions0)
            }
        }
        if let cpu = self.cpu {
            try encodeContainer.encode(cpu, forKey: .cpu)
        }
        if let deregisteredAt = self.deregisteredAt {
            try encodeContainer.encode(deregisteredAt.timeIntervalSince1970, forKey: .deregisteredAt)
        }
        if let ephemeralStorage = self.ephemeralStorage {
            try encodeContainer.encode(ephemeralStorage, forKey: .ephemeralStorage)
        }
        if let executionRoleArn = self.executionRoleArn {
            try encodeContainer.encode(executionRoleArn, forKey: .executionRoleArn)
        }
        if let family = self.family {
            try encodeContainer.encode(family, forKey: .family)
        }
        if let inferenceAccelerators = inferenceAccelerators {
            var inferenceAcceleratorsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .inferenceAccelerators)
            for inferenceaccelerators0 in inferenceAccelerators {
                try inferenceAcceleratorsContainer.encode(inferenceaccelerators0)
            }
        }
        if let ipcMode = self.ipcMode {
            try encodeContainer.encode(ipcMode.rawValue, forKey: .ipcMode)
        }
        if let memory = self.memory {
            try encodeContainer.encode(memory, forKey: .memory)
        }
        if let networkMode = self.networkMode {
            try encodeContainer.encode(networkMode.rawValue, forKey: .networkMode)
        }
        if let pidMode = self.pidMode {
            try encodeContainer.encode(pidMode.rawValue, forKey: .pidMode)
        }
        if let placementConstraints = placementConstraints {
            var placementConstraintsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .placementConstraints)
            for taskdefinitionplacementconstraints0 in placementConstraints {
                try placementConstraintsContainer.encode(taskdefinitionplacementconstraints0)
            }
        }
        if let proxyConfiguration = self.proxyConfiguration {
            try encodeContainer.encode(proxyConfiguration, forKey: .proxyConfiguration)
        }
        if let registeredAt = self.registeredAt {
            try encodeContainer.encode(registeredAt.timeIntervalSince1970, forKey: .registeredAt)
        }
        if let registeredBy = self.registeredBy {
            try encodeContainer.encode(registeredBy, forKey: .registeredBy)
        }
        if let requiresAttributes = requiresAttributes {
            var requiresAttributesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .requiresAttributes)
            for requiresattributes0 in requiresAttributes {
                try requiresAttributesContainer.encode(requiresattributes0)
            }
        }
        if let requiresCompatibilities = requiresCompatibilities {
            var requiresCompatibilitiesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .requiresCompatibilities)
            for compatibilitylist0 in requiresCompatibilities {
                try requiresCompatibilitiesContainer.encode(compatibilitylist0.rawValue)
            }
        }
        if revision != 0 {
            try encodeContainer.encode(revision, forKey: .revision)
        }
        if let runtimePlatform = self.runtimePlatform {
            try encodeContainer.encode(runtimePlatform, forKey: .runtimePlatform)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let taskDefinitionArn = self.taskDefinitionArn {
            try encodeContainer.encode(taskDefinitionArn, forKey: .taskDefinitionArn)
        }
        if let taskRoleArn = self.taskRoleArn {
            try encodeContainer.encode(taskRoleArn, forKey: .taskRoleArn)
        }
        if let volumes = volumes {
            var volumesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .volumes)
            for volumelist0 in volumes {
                try volumesContainer.encode(volumelist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let taskDefinitionArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .taskDefinitionArn)
        taskDefinitionArn = taskDefinitionArnDecoded
        let containerDefinitionsContainer = try containerValues.decodeIfPresent([EcsClientTypes.ContainerDefinition?].self, forKey: .containerDefinitions)
        var containerDefinitionsDecoded0:[EcsClientTypes.ContainerDefinition]? = nil
        if let containerDefinitionsContainer = containerDefinitionsContainer {
            containerDefinitionsDecoded0 = [EcsClientTypes.ContainerDefinition]()
            for structure0 in containerDefinitionsContainer {
                if let structure0 = structure0 {
                    containerDefinitionsDecoded0?.append(structure0)
                }
            }
        }
        containerDefinitions = containerDefinitionsDecoded0
        let familyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .family)
        family = familyDecoded
        let taskRoleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .taskRoleArn)
        taskRoleArn = taskRoleArnDecoded
        let executionRoleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .executionRoleArn)
        executionRoleArn = executionRoleArnDecoded
        let networkModeDecoded = try containerValues.decodeIfPresent(EcsClientTypes.NetworkMode.self, forKey: .networkMode)
        networkMode = networkModeDecoded
        let revisionDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .revision) ?? 0
        revision = revisionDecoded
        let volumesContainer = try containerValues.decodeIfPresent([EcsClientTypes.Volume?].self, forKey: .volumes)
        var volumesDecoded0:[EcsClientTypes.Volume]? = nil
        if let volumesContainer = volumesContainer {
            volumesDecoded0 = [EcsClientTypes.Volume]()
            for structure0 in volumesContainer {
                if let structure0 = structure0 {
                    volumesDecoded0?.append(structure0)
                }
            }
        }
        volumes = volumesDecoded0
        let statusDecoded = try containerValues.decodeIfPresent(EcsClientTypes.TaskDefinitionStatus.self, forKey: .status)
        status = statusDecoded
        let requiresAttributesContainer = try containerValues.decodeIfPresent([EcsClientTypes.Attribute?].self, forKey: .requiresAttributes)
        var requiresAttributesDecoded0:[EcsClientTypes.Attribute]? = nil
        if let requiresAttributesContainer = requiresAttributesContainer {
            requiresAttributesDecoded0 = [EcsClientTypes.Attribute]()
            for structure0 in requiresAttributesContainer {
                if let structure0 = structure0 {
                    requiresAttributesDecoded0?.append(structure0)
                }
            }
        }
        requiresAttributes = requiresAttributesDecoded0
        let placementConstraintsContainer = try containerValues.decodeIfPresent([EcsClientTypes.TaskDefinitionPlacementConstraint?].self, forKey: .placementConstraints)
        var placementConstraintsDecoded0:[EcsClientTypes.TaskDefinitionPlacementConstraint]? = nil
        if let placementConstraintsContainer = placementConstraintsContainer {
            placementConstraintsDecoded0 = [EcsClientTypes.TaskDefinitionPlacementConstraint]()
            for structure0 in placementConstraintsContainer {
                if let structure0 = structure0 {
                    placementConstraintsDecoded0?.append(structure0)
                }
            }
        }
        placementConstraints = placementConstraintsDecoded0
        let compatibilitiesContainer = try containerValues.decodeIfPresent([EcsClientTypes.Compatibility?].self, forKey: .compatibilities)
        var compatibilitiesDecoded0:[EcsClientTypes.Compatibility]? = nil
        if let compatibilitiesContainer = compatibilitiesContainer {
            compatibilitiesDecoded0 = [EcsClientTypes.Compatibility]()
            for enum0 in compatibilitiesContainer {
                if let enum0 = enum0 {
                    compatibilitiesDecoded0?.append(enum0)
                }
            }
        }
        compatibilities = compatibilitiesDecoded0
        let runtimePlatformDecoded = try containerValues.decodeIfPresent(EcsClientTypes.RuntimePlatform.self, forKey: .runtimePlatform)
        runtimePlatform = runtimePlatformDecoded
        let requiresCompatibilitiesContainer = try containerValues.decodeIfPresent([EcsClientTypes.Compatibility?].self, forKey: .requiresCompatibilities)
        var requiresCompatibilitiesDecoded0:[EcsClientTypes.Compatibility]? = nil
        if let requiresCompatibilitiesContainer = requiresCompatibilitiesContainer {
            requiresCompatibilitiesDecoded0 = [EcsClientTypes.Compatibility]()
            for enum0 in requiresCompatibilitiesContainer {
                if let enum0 = enum0 {
                    requiresCompatibilitiesDecoded0?.append(enum0)
                }
            }
        }
        requiresCompatibilities = requiresCompatibilitiesDecoded0
        let cpuDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cpu)
        cpu = cpuDecoded
        let memoryDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .memory)
        memory = memoryDecoded
        let inferenceAcceleratorsContainer = try containerValues.decodeIfPresent([EcsClientTypes.InferenceAccelerator?].self, forKey: .inferenceAccelerators)
        var inferenceAcceleratorsDecoded0:[EcsClientTypes.InferenceAccelerator]? = nil
        if let inferenceAcceleratorsContainer = inferenceAcceleratorsContainer {
            inferenceAcceleratorsDecoded0 = [EcsClientTypes.InferenceAccelerator]()
            for structure0 in inferenceAcceleratorsContainer {
                if let structure0 = structure0 {
                    inferenceAcceleratorsDecoded0?.append(structure0)
                }
            }
        }
        inferenceAccelerators = inferenceAcceleratorsDecoded0
        let pidModeDecoded = try containerValues.decodeIfPresent(EcsClientTypes.PidMode.self, forKey: .pidMode)
        pidMode = pidModeDecoded
        let ipcModeDecoded = try containerValues.decodeIfPresent(EcsClientTypes.IpcMode.self, forKey: .ipcMode)
        ipcMode = ipcModeDecoded
        let proxyConfigurationDecoded = try containerValues.decodeIfPresent(EcsClientTypes.ProxyConfiguration.self, forKey: .proxyConfiguration)
        proxyConfiguration = proxyConfigurationDecoded
        let registeredAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .registeredAt)
        registeredAt = registeredAtDecoded
        let deregisteredAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .deregisteredAt)
        deregisteredAt = deregisteredAtDecoded
        let registeredByDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .registeredBy)
        registeredBy = registeredByDecoded
        let ephemeralStorageDecoded = try containerValues.decodeIfPresent(EcsClientTypes.EphemeralStorage.self, forKey: .ephemeralStorage)
        ephemeralStorage = ephemeralStorageDecoded
    }
}
