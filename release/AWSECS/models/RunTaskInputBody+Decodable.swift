// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct RunTaskInputBody: Swift.Equatable {
    let capacityProviderStrategy: [EcsClientTypes.CapacityProviderStrategyItem]?
    let cluster: Swift.String?
    let count: Swift.Int?
    let enableECSManagedTags: Swift.Bool
    let enableExecuteCommand: Swift.Bool
    let group: Swift.String?
    let launchType: EcsClientTypes.LaunchType?
    let networkConfiguration: EcsClientTypes.NetworkConfiguration?
    let overrides: EcsClientTypes.TaskOverride?
    let placementConstraints: [EcsClientTypes.PlacementConstraint]?
    let placementStrategy: [EcsClientTypes.PlacementStrategy]?
    let platformVersion: Swift.String?
    let propagateTags: EcsClientTypes.PropagateTags?
    let referenceId: Swift.String?
    let startedBy: Swift.String?
    let tags: [EcsClientTypes.Tag]?
    let taskDefinition: Swift.String?
}

extension RunTaskInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case capacityProviderStrategy
        case cluster
        case count
        case enableECSManagedTags
        case enableExecuteCommand
        case group
        case launchType
        case networkConfiguration
        case overrides
        case placementConstraints
        case placementStrategy
        case platformVersion
        case propagateTags
        case referenceId
        case startedBy
        case tags
        case taskDefinition
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let capacityProviderStrategyContainer = try containerValues.decodeIfPresent([EcsClientTypes.CapacityProviderStrategyItem?].self, forKey: .capacityProviderStrategy)
        var capacityProviderStrategyDecoded0:[EcsClientTypes.CapacityProviderStrategyItem]? = nil
        if let capacityProviderStrategyContainer = capacityProviderStrategyContainer {
            capacityProviderStrategyDecoded0 = [EcsClientTypes.CapacityProviderStrategyItem]()
            for structure0 in capacityProviderStrategyContainer {
                if let structure0 = structure0 {
                    capacityProviderStrategyDecoded0?.append(structure0)
                }
            }
        }
        capacityProviderStrategy = capacityProviderStrategyDecoded0
        let clusterDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cluster)
        cluster = clusterDecoded
        let countDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .count)
        count = countDecoded
        let enableECSManagedTagsDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enableECSManagedTags) ?? false
        enableECSManagedTags = enableECSManagedTagsDecoded
        let enableExecuteCommandDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enableExecuteCommand) ?? false
        enableExecuteCommand = enableExecuteCommandDecoded
        let groupDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .group)
        group = groupDecoded
        let launchTypeDecoded = try containerValues.decodeIfPresent(EcsClientTypes.LaunchType.self, forKey: .launchType)
        launchType = launchTypeDecoded
        let networkConfigurationDecoded = try containerValues.decodeIfPresent(EcsClientTypes.NetworkConfiguration.self, forKey: .networkConfiguration)
        networkConfiguration = networkConfigurationDecoded
        let overridesDecoded = try containerValues.decodeIfPresent(EcsClientTypes.TaskOverride.self, forKey: .overrides)
        overrides = overridesDecoded
        let placementConstraintsContainer = try containerValues.decodeIfPresent([EcsClientTypes.PlacementConstraint?].self, forKey: .placementConstraints)
        var placementConstraintsDecoded0:[EcsClientTypes.PlacementConstraint]? = nil
        if let placementConstraintsContainer = placementConstraintsContainer {
            placementConstraintsDecoded0 = [EcsClientTypes.PlacementConstraint]()
            for structure0 in placementConstraintsContainer {
                if let structure0 = structure0 {
                    placementConstraintsDecoded0?.append(structure0)
                }
            }
        }
        placementConstraints = placementConstraintsDecoded0
        let placementStrategyContainer = try containerValues.decodeIfPresent([EcsClientTypes.PlacementStrategy?].self, forKey: .placementStrategy)
        var placementStrategyDecoded0:[EcsClientTypes.PlacementStrategy]? = nil
        if let placementStrategyContainer = placementStrategyContainer {
            placementStrategyDecoded0 = [EcsClientTypes.PlacementStrategy]()
            for structure0 in placementStrategyContainer {
                if let structure0 = structure0 {
                    placementStrategyDecoded0?.append(structure0)
                }
            }
        }
        placementStrategy = placementStrategyDecoded0
        let platformVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .platformVersion)
        platformVersion = platformVersionDecoded
        let propagateTagsDecoded = try containerValues.decodeIfPresent(EcsClientTypes.PropagateTags.self, forKey: .propagateTags)
        propagateTags = propagateTagsDecoded
        let referenceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .referenceId)
        referenceId = referenceIdDecoded
        let startedByDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .startedBy)
        startedBy = startedByDecoded
        let tagsContainer = try containerValues.decodeIfPresent([EcsClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[EcsClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [EcsClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let taskDefinitionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .taskDefinition)
        taskDefinition = taskDefinitionDecoded
    }
}
