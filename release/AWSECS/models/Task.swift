// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension EcsClientTypes {
    /// Details on a task in a cluster.
    public struct Task: Swift.Equatable {
        /// The Elastic Network Adapter that's associated with the task if the task uses the awsvpc network mode.
        public var attachments: [EcsClientTypes.Attachment]?
        /// The attributes of the task
        public var attributes: [EcsClientTypes.Attribute]?
        /// The Availability Zone for the task.
        public var availabilityZone: Swift.String?
        /// The capacity provider that's associated with the task.
        public var capacityProviderName: Swift.String?
        /// The ARN of the cluster that hosts the task.
        public var clusterArn: Swift.String?
        /// The connectivity status of a task.
        public var connectivity: EcsClientTypes.Connectivity?
        /// The Unix timestamp for the time when the task last went into CONNECTED status.
        public var connectivityAt: ClientRuntime.Date?
        /// The ARN of the container instances that host the task.
        public var containerInstanceArn: Swift.String?
        /// The containers that's associated with the task.
        public var containers: [EcsClientTypes.Container]?
        /// The number of CPU units used by the task as expressed in a task definition. It can be expressed as an integer using CPU units (for example, 1024). It can also be expressed as a string using vCPUs (for example, 1 vCPU or 1 vcpu). String values are converted to an integer that indicates the CPU units when the task definition is registered. If you use the EC2 launch type, this field is optional. Supported values are between 128 CPU units (0.125 vCPUs) and 10240 CPU units (10 vCPUs). If you use the Fargate launch type, this field is required. You must use one of the following values. These values determine the range of supported values for the memory parameter: The CPU units cannot be less than 1 vCPU when you use Windows containers on Fargate.
        ///
        /// * 256 (.25 vCPU) - Available memory values: 512 (0.5 GB), 1024 (1 GB), 2048 (2 GB)
        ///
        /// * 512 (.5 vCPU) - Available memory values: 1024 (1 GB), 2048 (2 GB), 3072 (3 GB), 4096 (4 GB)
        ///
        /// * 1024 (1 vCPU) - Available memory values: 2048 (2 GB), 3072 (3 GB), 4096 (4 GB), 5120 (5 GB), 6144 (6 GB), 7168 (7 GB), 8192 (8 GB)
        ///
        /// * 2048 (2 vCPU) - Available memory values: 4096 (4 GB) and 16384 (16 GB) in increments of 1024 (1 GB)
        ///
        /// * 4096 (4 vCPU) - Available memory values: 8192 (8 GB) and 30720 (30 GB) in increments of 1024 (1 GB)
        ///
        /// * 8192 (8 vCPU) - Available memory values: 16 GB and 60 GB in 4 GB increments This option requires Linux platform 1.4.0 or later.
        ///
        /// * 16384 (16vCPU) - Available memory values: 32GB and 120 GB in 8 GB increments This option requires Linux platform 1.4.0 or later.
        public var cpu: Swift.String?
        /// The Unix timestamp for the time when the task was created. More specifically, it's for the time when the task entered the PENDING state.
        public var createdAt: ClientRuntime.Date?
        /// The desired status of the task. For more information, see [Task Lifecycle](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-lifecycle.html).
        public var desiredStatus: Swift.String?
        /// Determines whether execute command functionality is enabled for this task. If true, execute command functionality is enabled on all the containers in the task.
        public var enableExecuteCommand: Swift.Bool
        /// The ephemeral storage settings for the task.
        public var ephemeralStorage: EcsClientTypes.EphemeralStorage?
        /// The Unix timestamp for the time when the task execution stopped.
        public var executionStoppedAt: ClientRuntime.Date?
        /// The name of the task group that's associated with the task.
        public var group: Swift.String?
        /// The health status for the task. It's determined by the health of the essential containers in the task. If all essential containers in the task are reporting as HEALTHY, the task status also reports as HEALTHY. If any essential containers in the task are reporting as UNHEALTHY or UNKNOWN, the task status also reports as UNHEALTHY or UNKNOWN. The Amazon ECS container agent doesn't monitor or report on Docker health checks that are embedded in a container image and not specified in the container definition. For example, this includes those specified in a parent image or from the image's Dockerfile. Health check parameters that are specified in a container definition override any Docker health checks that are found in the container image.
        public var healthStatus: EcsClientTypes.HealthStatus?
        /// The Elastic Inference accelerator that's associated with the task.
        public var inferenceAccelerators: [EcsClientTypes.InferenceAccelerator]?
        /// The last known status for the task. For more information, see [Task Lifecycle](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-lifecycle.html).
        public var lastStatus: Swift.String?
        /// The infrastructure where your task runs on. For more information, see [Amazon ECS launch types](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html) in the Amazon Elastic Container Service Developer Guide.
        public var launchType: EcsClientTypes.LaunchType?
        /// The amount of memory (in MiB) that the task uses as expressed in a task definition. It can be expressed as an integer using MiB (for example, 1024). If it's expressed as a string using GB (for example, 1GB or 1 GB), it's converted to an integer indicating the MiB when the task definition is registered. If you use the EC2 launch type, this field is optional. If you use the Fargate launch type, this field is required. You must use one of the following values. The value that you choose determines the range of supported values for the cpu parameter.
        ///
        /// * 512 (0.5 GB), 1024 (1 GB), 2048 (2 GB) - Available cpu values: 256 (.25 vCPU)
        ///
        /// * 1024 (1 GB), 2048 (2 GB), 3072 (3 GB), 4096 (4 GB) - Available cpu values: 512 (.5 vCPU)
        ///
        /// * 2048 (2 GB), 3072 (3 GB), 4096 (4 GB), 5120 (5 GB), 6144 (6 GB), 7168 (7 GB), 8192 (8 GB) - Available cpu values: 1024 (1 vCPU)
        ///
        /// * Between 4096 (4 GB) and 16384 (16 GB) in increments of 1024 (1 GB) - Available cpu values: 2048 (2 vCPU)
        ///
        /// * Between 8192 (8 GB) and 30720 (30 GB) in increments of 1024 (1 GB) - Available cpu values: 4096 (4 vCPU)
        ///
        /// * Between 16 GB and 60 GB in 4 GB increments - Available cpu values: 8192 (8 vCPU) This option requires Linux platform 1.4.0 or later.
        ///
        /// * Between 32GB and 120 GB in 8 GB increments - Available cpu values: 16384 (16 vCPU) This option requires Linux platform 1.4.0 or later.
        public var memory: Swift.String?
        /// One or more container overrides.
        public var overrides: EcsClientTypes.TaskOverride?
        /// The operating system that your tasks are running on. A platform family is specified only for tasks that use the Fargate launch type. All tasks that run as part of this service must use the same platformFamily value as the service (for example, LINUX.).
        public var platformFamily: Swift.String?
        /// The platform version where your task runs on. A platform version is only specified for tasks that use the Fargate launch type. If you didn't specify one, the LATEST platform version is used. For more information, see [Fargate Platform Versions](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html) in the Amazon Elastic Container Service Developer Guide.
        public var platformVersion: Swift.String?
        /// The Unix timestamp for the time when the container image pull began.
        public var pullStartedAt: ClientRuntime.Date?
        /// The Unix timestamp for the time when the container image pull completed.
        public var pullStoppedAt: ClientRuntime.Date?
        /// The Unix timestamp for the time when the task started. More specifically, it's for the time when the task transitioned from the PENDING state to the RUNNING state.
        public var startedAt: ClientRuntime.Date?
        /// The tag specified when a task is started. If an Amazon ECS service started the task, the startedBy parameter contains the deployment ID of that service.
        public var startedBy: Swift.String?
        /// The stop code indicating why a task was stopped. The stoppedReason might contain additional details. The following are valid values:
        ///
        /// * TaskFailedToStart
        ///
        /// * EssentialContainerExited
        ///
        /// * UserInitiated
        ///
        /// * TerminationNotice
        ///
        /// * ServiceSchedulerInitiated
        ///
        /// * SpotInterruption
        public var stopCode: EcsClientTypes.TaskStopCode?
        /// The Unix timestamp for the time when the task was stopped. More specifically, it's for the time when the task transitioned from the RUNNING state to the STOPPED state.
        public var stoppedAt: ClientRuntime.Date?
        /// The reason that the task was stopped.
        public var stoppedReason: Swift.String?
        /// The Unix timestamp for the time when the task stops. More specifically, it's for the time when the task transitions from the RUNNING state to STOPPED.
        public var stoppingAt: ClientRuntime.Date?
        /// The metadata that you apply to the task to help you categorize and organize the task. Each tag consists of a key and an optional value. You define both the key and value. The following basic restrictions apply to tags:
        ///
        /// * Maximum number of tags per resource - 50
        ///
        /// * For each resource, each tag key must be unique, and each tag key can have only one value.
        ///
        /// * Maximum key length - 128 Unicode characters in UTF-8
        ///
        /// * Maximum value length - 256 Unicode characters in UTF-8
        ///
        /// * If your tagging schema is used across multiple services and resources, remember that other services may have restrictions on allowed characters. Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following characters: + - = . _ : / @.
        ///
        /// * Tag keys and values are case-sensitive.
        ///
        /// * Do not use aws:, AWS:, or any upper or lowercase combination of such as a prefix for either keys or values as it is reserved for Amazon Web Services use. You cannot edit or delete tag keys or values with this prefix. Tags with this prefix do not count against your tags per resource limit.
        public var tags: [EcsClientTypes.Tag]?
        /// The Amazon Resource Name (ARN) of the task.
        public var taskArn: Swift.String?
        /// The ARN of the task definition that creates the task.
        public var taskDefinitionArn: Swift.String?
        /// The version counter for the task. Every time a task experiences a change that starts a CloudWatch event, the version counter is incremented. If you replicate your Amazon ECS task state with CloudWatch Events, you can compare the version of a task reported by the Amazon ECS API actions with the version reported in CloudWatch Events for the task (inside the detail object) to verify that the version in your event stream is current.
        public var version: Swift.Int

        public init (
            attachments: [EcsClientTypes.Attachment]? = nil,
            attributes: [EcsClientTypes.Attribute]? = nil,
            availabilityZone: Swift.String? = nil,
            capacityProviderName: Swift.String? = nil,
            clusterArn: Swift.String? = nil,
            connectivity: EcsClientTypes.Connectivity? = nil,
            connectivityAt: ClientRuntime.Date? = nil,
            containerInstanceArn: Swift.String? = nil,
            containers: [EcsClientTypes.Container]? = nil,
            cpu: Swift.String? = nil,
            createdAt: ClientRuntime.Date? = nil,
            desiredStatus: Swift.String? = nil,
            enableExecuteCommand: Swift.Bool = false,
            ephemeralStorage: EcsClientTypes.EphemeralStorage? = nil,
            executionStoppedAt: ClientRuntime.Date? = nil,
            group: Swift.String? = nil,
            healthStatus: EcsClientTypes.HealthStatus? = nil,
            inferenceAccelerators: [EcsClientTypes.InferenceAccelerator]? = nil,
            lastStatus: Swift.String? = nil,
            launchType: EcsClientTypes.LaunchType? = nil,
            memory: Swift.String? = nil,
            overrides: EcsClientTypes.TaskOverride? = nil,
            platformFamily: Swift.String? = nil,
            platformVersion: Swift.String? = nil,
            pullStartedAt: ClientRuntime.Date? = nil,
            pullStoppedAt: ClientRuntime.Date? = nil,
            startedAt: ClientRuntime.Date? = nil,
            startedBy: Swift.String? = nil,
            stopCode: EcsClientTypes.TaskStopCode? = nil,
            stoppedAt: ClientRuntime.Date? = nil,
            stoppedReason: Swift.String? = nil,
            stoppingAt: ClientRuntime.Date? = nil,
            tags: [EcsClientTypes.Tag]? = nil,
            taskArn: Swift.String? = nil,
            taskDefinitionArn: Swift.String? = nil,
            version: Swift.Int = 0
        )
        {
            self.attachments = attachments
            self.attributes = attributes
            self.availabilityZone = availabilityZone
            self.capacityProviderName = capacityProviderName
            self.clusterArn = clusterArn
            self.connectivity = connectivity
            self.connectivityAt = connectivityAt
            self.containerInstanceArn = containerInstanceArn
            self.containers = containers
            self.cpu = cpu
            self.createdAt = createdAt
            self.desiredStatus = desiredStatus
            self.enableExecuteCommand = enableExecuteCommand
            self.ephemeralStorage = ephemeralStorage
            self.executionStoppedAt = executionStoppedAt
            self.group = group
            self.healthStatus = healthStatus
            self.inferenceAccelerators = inferenceAccelerators
            self.lastStatus = lastStatus
            self.launchType = launchType
            self.memory = memory
            self.overrides = overrides
            self.platformFamily = platformFamily
            self.platformVersion = platformVersion
            self.pullStartedAt = pullStartedAt
            self.pullStoppedAt = pullStoppedAt
            self.startedAt = startedAt
            self.startedBy = startedBy
            self.stopCode = stopCode
            self.stoppedAt = stoppedAt
            self.stoppedReason = stoppedReason
            self.stoppingAt = stoppingAt
            self.tags = tags
            self.taskArn = taskArn
            self.taskDefinitionArn = taskDefinitionArn
            self.version = version
        }
    }

}
