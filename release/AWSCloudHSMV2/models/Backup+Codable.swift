// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CloudHsmV2ClientTypes.Backup: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case backupId = "BackupId"
        case backupState = "BackupState"
        case clusterId = "ClusterId"
        case copyTimestamp = "CopyTimestamp"
        case createTimestamp = "CreateTimestamp"
        case deleteTimestamp = "DeleteTimestamp"
        case neverExpires = "NeverExpires"
        case sourceBackup = "SourceBackup"
        case sourceCluster = "SourceCluster"
        case sourceRegion = "SourceRegion"
        case tagList = "TagList"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let backupId = self.backupId {
            try encodeContainer.encode(backupId, forKey: .backupId)
        }
        if let backupState = self.backupState {
            try encodeContainer.encode(backupState.rawValue, forKey: .backupState)
        }
        if let clusterId = self.clusterId {
            try encodeContainer.encode(clusterId, forKey: .clusterId)
        }
        if let copyTimestamp = self.copyTimestamp {
            try encodeContainer.encode(copyTimestamp.timeIntervalSince1970, forKey: .copyTimestamp)
        }
        if let createTimestamp = self.createTimestamp {
            try encodeContainer.encode(createTimestamp.timeIntervalSince1970, forKey: .createTimestamp)
        }
        if let deleteTimestamp = self.deleteTimestamp {
            try encodeContainer.encode(deleteTimestamp.timeIntervalSince1970, forKey: .deleteTimestamp)
        }
        if let neverExpires = self.neverExpires {
            try encodeContainer.encode(neverExpires, forKey: .neverExpires)
        }
        if let sourceBackup = self.sourceBackup {
            try encodeContainer.encode(sourceBackup, forKey: .sourceBackup)
        }
        if let sourceCluster = self.sourceCluster {
            try encodeContainer.encode(sourceCluster, forKey: .sourceCluster)
        }
        if let sourceRegion = self.sourceRegion {
            try encodeContainer.encode(sourceRegion, forKey: .sourceRegion)
        }
        if let tagList = tagList {
            var tagListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tagList)
            for taglist0 in tagList {
                try tagListContainer.encode(taglist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let backupIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .backupId)
        backupId = backupIdDecoded
        let backupStateDecoded = try containerValues.decodeIfPresent(CloudHsmV2ClientTypes.BackupState.self, forKey: .backupState)
        backupState = backupStateDecoded
        let clusterIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterId)
        clusterId = clusterIdDecoded
        let createTimestampDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createTimestamp)
        createTimestamp = createTimestampDecoded
        let copyTimestampDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .copyTimestamp)
        copyTimestamp = copyTimestampDecoded
        let neverExpiresDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .neverExpires)
        neverExpires = neverExpiresDecoded
        let sourceRegionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceRegion)
        sourceRegion = sourceRegionDecoded
        let sourceBackupDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceBackup)
        sourceBackup = sourceBackupDecoded
        let sourceClusterDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceCluster)
        sourceCluster = sourceClusterDecoded
        let deleteTimestampDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .deleteTimestamp)
        deleteTimestamp = deleteTimestampDecoded
        let tagListContainer = try containerValues.decodeIfPresent([CloudHsmV2ClientTypes.Tag?].self, forKey: .tagList)
        var tagListDecoded0:[CloudHsmV2ClientTypes.Tag]? = nil
        if let tagListContainer = tagListContainer {
            tagListDecoded0 = [CloudHsmV2ClientTypes.Tag]()
            for structure0 in tagListContainer {
                if let structure0 = structure0 {
                    tagListDecoded0?.append(structure0)
                }
            }
        }
        tagList = tagListDecoded0
    }
}
