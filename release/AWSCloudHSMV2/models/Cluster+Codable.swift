// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CloudHsmV2ClientTypes.Cluster: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case backupPolicy = "BackupPolicy"
        case backupRetentionPolicy = "BackupRetentionPolicy"
        case certificates = "Certificates"
        case clusterId = "ClusterId"
        case createTimestamp = "CreateTimestamp"
        case hsmType = "HsmType"
        case hsms = "Hsms"
        case preCoPassword = "PreCoPassword"
        case securityGroup = "SecurityGroup"
        case sourceBackupId = "SourceBackupId"
        case state = "State"
        case stateMessage = "StateMessage"
        case subnetMapping = "SubnetMapping"
        case tagList = "TagList"
        case vpcId = "VpcId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let backupPolicy = self.backupPolicy {
            try encodeContainer.encode(backupPolicy.rawValue, forKey: .backupPolicy)
        }
        if let backupRetentionPolicy = self.backupRetentionPolicy {
            try encodeContainer.encode(backupRetentionPolicy, forKey: .backupRetentionPolicy)
        }
        if let certificates = self.certificates {
            try encodeContainer.encode(certificates, forKey: .certificates)
        }
        if let clusterId = self.clusterId {
            try encodeContainer.encode(clusterId, forKey: .clusterId)
        }
        if let createTimestamp = self.createTimestamp {
            try encodeContainer.encode(createTimestamp.timeIntervalSince1970, forKey: .createTimestamp)
        }
        if let hsmType = self.hsmType {
            try encodeContainer.encode(hsmType, forKey: .hsmType)
        }
        if let hsms = hsms {
            var hsmsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .hsms)
            for hsms0 in hsms {
                try hsmsContainer.encode(hsms0)
            }
        }
        if let preCoPassword = self.preCoPassword {
            try encodeContainer.encode(preCoPassword, forKey: .preCoPassword)
        }
        if let securityGroup = self.securityGroup {
            try encodeContainer.encode(securityGroup, forKey: .securityGroup)
        }
        if let sourceBackupId = self.sourceBackupId {
            try encodeContainer.encode(sourceBackupId, forKey: .sourceBackupId)
        }
        if let state = self.state {
            try encodeContainer.encode(state.rawValue, forKey: .state)
        }
        if let stateMessage = self.stateMessage {
            try encodeContainer.encode(stateMessage, forKey: .stateMessage)
        }
        if let subnetMapping = subnetMapping {
            var subnetMappingContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .subnetMapping)
            for (dictKey0, externalsubnetmapping0) in subnetMapping {
                try subnetMappingContainer.encode(externalsubnetmapping0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let tagList = tagList {
            var tagListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tagList)
            for taglist0 in tagList {
                try tagListContainer.encode(taglist0)
            }
        }
        if let vpcId = self.vpcId {
            try encodeContainer.encode(vpcId, forKey: .vpcId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let backupPolicyDecoded = try containerValues.decodeIfPresent(CloudHsmV2ClientTypes.BackupPolicy.self, forKey: .backupPolicy)
        backupPolicy = backupPolicyDecoded
        let backupRetentionPolicyDecoded = try containerValues.decodeIfPresent(CloudHsmV2ClientTypes.BackupRetentionPolicy.self, forKey: .backupRetentionPolicy)
        backupRetentionPolicy = backupRetentionPolicyDecoded
        let clusterIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterId)
        clusterId = clusterIdDecoded
        let createTimestampDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createTimestamp)
        createTimestamp = createTimestampDecoded
        let hsmsContainer = try containerValues.decodeIfPresent([CloudHsmV2ClientTypes.Hsm?].self, forKey: .hsms)
        var hsmsDecoded0:[CloudHsmV2ClientTypes.Hsm]? = nil
        if let hsmsContainer = hsmsContainer {
            hsmsDecoded0 = [CloudHsmV2ClientTypes.Hsm]()
            for structure0 in hsmsContainer {
                if let structure0 = structure0 {
                    hsmsDecoded0?.append(structure0)
                }
            }
        }
        hsms = hsmsDecoded0
        let hsmTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .hsmType)
        hsmType = hsmTypeDecoded
        let preCoPasswordDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .preCoPassword)
        preCoPassword = preCoPasswordDecoded
        let securityGroupDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .securityGroup)
        securityGroup = securityGroupDecoded
        let sourceBackupIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceBackupId)
        sourceBackupId = sourceBackupIdDecoded
        let stateDecoded = try containerValues.decodeIfPresent(CloudHsmV2ClientTypes.ClusterState.self, forKey: .state)
        state = stateDecoded
        let stateMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stateMessage)
        stateMessage = stateMessageDecoded
        let subnetMappingContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .subnetMapping)
        var subnetMappingDecoded0: [Swift.String:Swift.String]? = nil
        if let subnetMappingContainer = subnetMappingContainer {
            subnetMappingDecoded0 = [Swift.String:Swift.String]()
            for (key0, subnetid0) in subnetMappingContainer {
                if let subnetid0 = subnetid0 {
                    subnetMappingDecoded0?[key0] = subnetid0
                }
            }
        }
        subnetMapping = subnetMappingDecoded0
        let vpcIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vpcId)
        vpcId = vpcIdDecoded
        let certificatesDecoded = try containerValues.decodeIfPresent(CloudHsmV2ClientTypes.Certificates.self, forKey: .certificates)
        certificates = certificatesDecoded
        let tagListContainer = try containerValues.decodeIfPresent([CloudHsmV2ClientTypes.Tag?].self, forKey: .tagList)
        var tagListDecoded0:[CloudHsmV2ClientTypes.Tag]? = nil
        if let tagListContainer = tagListContainer {
            tagListDecoded0 = [CloudHsmV2ClientTypes.Tag]()
            for structure0 in tagListContainer {
                if let structure0 = structure0 {
                    tagListDecoded0?.append(structure0)
                }
            }
        }
        tagList = tagListDecoded0
    }
}
