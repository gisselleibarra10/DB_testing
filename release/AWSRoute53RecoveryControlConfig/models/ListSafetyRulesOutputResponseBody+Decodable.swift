// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListSafetyRulesOutputResponseBody: Swift.Equatable {
    let nextToken: Swift.String?
    let safetyRules: [Route53RecoveryControlConfigClientTypes.Rule]?
}

extension ListSafetyRulesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case safetyRules = "SafetyRules"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let safetyRulesContainer = try containerValues.decodeIfPresent([Route53RecoveryControlConfigClientTypes.Rule?].self, forKey: .safetyRules)
        var safetyRulesDecoded0:[Route53RecoveryControlConfigClientTypes.Rule]? = nil
        if let safetyRulesContainer = safetyRulesContainer {
            safetyRulesDecoded0 = [Route53RecoveryControlConfigClientTypes.Rule]()
            for structure0 in safetyRulesContainer {
                if let structure0 = structure0 {
                    safetyRulesDecoded0?.append(structure0)
                }
            }
        }
        safetyRules = safetyRulesDecoded0
    }
}
