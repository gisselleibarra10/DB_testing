// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Route53RecoveryControlConfigClientTypes.AssertionRule: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case assertedControls = "AssertedControls"
        case controlPanelArn = "ControlPanelArn"
        case name = "Name"
        case ruleConfig = "RuleConfig"
        case safetyRuleArn = "SafetyRuleArn"
        case status = "Status"
        case waitPeriodMs = "WaitPeriodMs"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let assertedControls = assertedControls {
            var assertedControlsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .assertedControls)
            for __listof__stringmin1max256patternazaz090 in assertedControls {
                try assertedControlsContainer.encode(__listof__stringmin1max256patternazaz090)
            }
        }
        if let controlPanelArn = self.controlPanelArn {
            try encodeContainer.encode(controlPanelArn, forKey: .controlPanelArn)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let ruleConfig = self.ruleConfig {
            try encodeContainer.encode(ruleConfig, forKey: .ruleConfig)
        }
        if let safetyRuleArn = self.safetyRuleArn {
            try encodeContainer.encode(safetyRuleArn, forKey: .safetyRuleArn)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if waitPeriodMs != 0 {
            try encodeContainer.encode(waitPeriodMs, forKey: .waitPeriodMs)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let assertedControlsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .assertedControls)
        var assertedControlsDecoded0:[Swift.String]? = nil
        if let assertedControlsContainer = assertedControlsContainer {
            assertedControlsDecoded0 = [Swift.String]()
            for string0 in assertedControlsContainer {
                if let string0 = string0 {
                    assertedControlsDecoded0?.append(string0)
                }
            }
        }
        assertedControls = assertedControlsDecoded0
        let controlPanelArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .controlPanelArn)
        controlPanelArn = controlPanelArnDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let ruleConfigDecoded = try containerValues.decodeIfPresent(Route53RecoveryControlConfigClientTypes.RuleConfig.self, forKey: .ruleConfig)
        ruleConfig = ruleConfigDecoded
        let safetyRuleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .safetyRuleArn)
        safetyRuleArn = safetyRuleArnDecoded
        let statusDecoded = try containerValues.decodeIfPresent(Route53RecoveryControlConfigClientTypes.Status.self, forKey: .status)
        status = statusDecoded
        let waitPeriodMsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .waitPeriodMs) ?? 0
        waitPeriodMs = waitPeriodMsDecoded
    }
}
