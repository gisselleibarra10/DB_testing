// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct UpdateAccessControlConfigurationInputBody: Swift.Equatable {
    let indexId: Swift.String?
    let id: Swift.String?
    let name: Swift.String?
    let description: Swift.String?
    let accessControlList: [KendraClientTypes.Principal]?
    let hierarchicalAccessControlList: [KendraClientTypes.HierarchicalPrincipal]?
}

extension UpdateAccessControlConfigurationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accessControlList = "AccessControlList"
        case description = "Description"
        case hierarchicalAccessControlList = "HierarchicalAccessControlList"
        case id = "Id"
        case indexId = "IndexId"
        case name = "Name"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let indexIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .indexId)
        indexId = indexIdDecoded
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let accessControlListContainer = try containerValues.decodeIfPresent([KendraClientTypes.Principal?].self, forKey: .accessControlList)
        var accessControlListDecoded0:[KendraClientTypes.Principal]? = nil
        if let accessControlListContainer = accessControlListContainer {
            accessControlListDecoded0 = [KendraClientTypes.Principal]()
            for structure0 in accessControlListContainer {
                if let structure0 = structure0 {
                    accessControlListDecoded0?.append(structure0)
                }
            }
        }
        accessControlList = accessControlListDecoded0
        let hierarchicalAccessControlListContainer = try containerValues.decodeIfPresent([KendraClientTypes.HierarchicalPrincipal?].self, forKey: .hierarchicalAccessControlList)
        var hierarchicalAccessControlListDecoded0:[KendraClientTypes.HierarchicalPrincipal]? = nil
        if let hierarchicalAccessControlListContainer = hierarchicalAccessControlListContainer {
            hierarchicalAccessControlListDecoded0 = [KendraClientTypes.HierarchicalPrincipal]()
            for structure0 in hierarchicalAccessControlListContainer {
                if let structure0 = structure0 {
                    hierarchicalAccessControlListDecoded0?.append(structure0)
                }
            }
        }
        hierarchicalAccessControlList = hierarchicalAccessControlListDecoded0
    }
}
