// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension KendraClientTypes.DataSourceSyncJob: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dataSourceErrorCode = "DataSourceErrorCode"
        case endTime = "EndTime"
        case errorCode = "ErrorCode"
        case errorMessage = "ErrorMessage"
        case executionId = "ExecutionId"
        case metrics = "Metrics"
        case startTime = "StartTime"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dataSourceErrorCode = self.dataSourceErrorCode {
            try encodeContainer.encode(dataSourceErrorCode, forKey: .dataSourceErrorCode)
        }
        if let endTime = self.endTime {
            try encodeContainer.encode(endTime.timeIntervalSince1970, forKey: .endTime)
        }
        if let errorCode = self.errorCode {
            try encodeContainer.encode(errorCode.rawValue, forKey: .errorCode)
        }
        if let errorMessage = self.errorMessage {
            try encodeContainer.encode(errorMessage, forKey: .errorMessage)
        }
        if let executionId = self.executionId {
            try encodeContainer.encode(executionId, forKey: .executionId)
        }
        if let metrics = self.metrics {
            try encodeContainer.encode(metrics, forKey: .metrics)
        }
        if let startTime = self.startTime {
            try encodeContainer.encode(startTime.timeIntervalSince1970, forKey: .startTime)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let executionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .executionId)
        executionId = executionIdDecoded
        let startTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .startTime)
        startTime = startTimeDecoded
        let endTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .endTime)
        endTime = endTimeDecoded
        let statusDecoded = try containerValues.decodeIfPresent(KendraClientTypes.DataSourceSyncJobStatus.self, forKey: .status)
        status = statusDecoded
        let errorMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .errorMessage)
        errorMessage = errorMessageDecoded
        let errorCodeDecoded = try containerValues.decodeIfPresent(KendraClientTypes.ErrorCode.self, forKey: .errorCode)
        errorCode = errorCodeDecoded
        let dataSourceErrorCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataSourceErrorCode)
        dataSourceErrorCode = dataSourceErrorCodeDecoded
        let metricsDecoded = try containerValues.decodeIfPresent(KendraClientTypes.DataSourceSyncJobMetrics.self, forKey: .metrics)
        metrics = metricsDecoded
    }
}
