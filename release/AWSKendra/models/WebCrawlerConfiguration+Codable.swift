// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension KendraClientTypes.WebCrawlerConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case authenticationConfiguration = "AuthenticationConfiguration"
        case crawlDepth = "CrawlDepth"
        case maxContentSizePerPageInMegaBytes = "MaxContentSizePerPageInMegaBytes"
        case maxLinksPerPage = "MaxLinksPerPage"
        case maxUrlsPerMinuteCrawlRate = "MaxUrlsPerMinuteCrawlRate"
        case proxyConfiguration = "ProxyConfiguration"
        case urlExclusionPatterns = "UrlExclusionPatterns"
        case urlInclusionPatterns = "UrlInclusionPatterns"
        case urls = "Urls"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let authenticationConfiguration = self.authenticationConfiguration {
            try encodeContainer.encode(authenticationConfiguration, forKey: .authenticationConfiguration)
        }
        if let crawlDepth = self.crawlDepth {
            try encodeContainer.encode(crawlDepth, forKey: .crawlDepth)
        }
        if let maxContentSizePerPageInMegaBytes = self.maxContentSizePerPageInMegaBytes {
            try encodeContainer.encode(maxContentSizePerPageInMegaBytes, forKey: .maxContentSizePerPageInMegaBytes)
        }
        if let maxLinksPerPage = self.maxLinksPerPage {
            try encodeContainer.encode(maxLinksPerPage, forKey: .maxLinksPerPage)
        }
        if let maxUrlsPerMinuteCrawlRate = self.maxUrlsPerMinuteCrawlRate {
            try encodeContainer.encode(maxUrlsPerMinuteCrawlRate, forKey: .maxUrlsPerMinuteCrawlRate)
        }
        if let proxyConfiguration = self.proxyConfiguration {
            try encodeContainer.encode(proxyConfiguration, forKey: .proxyConfiguration)
        }
        if let urlExclusionPatterns = urlExclusionPatterns {
            var urlExclusionPatternsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .urlExclusionPatterns)
            for datasourceinclusionsexclusionsstrings0 in urlExclusionPatterns {
                try urlExclusionPatternsContainer.encode(datasourceinclusionsexclusionsstrings0)
            }
        }
        if let urlInclusionPatterns = urlInclusionPatterns {
            var urlInclusionPatternsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .urlInclusionPatterns)
            for datasourceinclusionsexclusionsstrings0 in urlInclusionPatterns {
                try urlInclusionPatternsContainer.encode(datasourceinclusionsexclusionsstrings0)
            }
        }
        if let urls = self.urls {
            try encodeContainer.encode(urls, forKey: .urls)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let urlsDecoded = try containerValues.decodeIfPresent(KendraClientTypes.Urls.self, forKey: .urls)
        urls = urlsDecoded
        let crawlDepthDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .crawlDepth)
        crawlDepth = crawlDepthDecoded
        let maxLinksPerPageDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxLinksPerPage)
        maxLinksPerPage = maxLinksPerPageDecoded
        let maxContentSizePerPageInMegaBytesDecoded = try containerValues.decodeIfPresent(Swift.Float.self, forKey: .maxContentSizePerPageInMegaBytes)
        maxContentSizePerPageInMegaBytes = maxContentSizePerPageInMegaBytesDecoded
        let maxUrlsPerMinuteCrawlRateDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxUrlsPerMinuteCrawlRate)
        maxUrlsPerMinuteCrawlRate = maxUrlsPerMinuteCrawlRateDecoded
        let urlInclusionPatternsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .urlInclusionPatterns)
        var urlInclusionPatternsDecoded0:[Swift.String]? = nil
        if let urlInclusionPatternsContainer = urlInclusionPatternsContainer {
            urlInclusionPatternsDecoded0 = [Swift.String]()
            for string0 in urlInclusionPatternsContainer {
                if let string0 = string0 {
                    urlInclusionPatternsDecoded0?.append(string0)
                }
            }
        }
        urlInclusionPatterns = urlInclusionPatternsDecoded0
        let urlExclusionPatternsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .urlExclusionPatterns)
        var urlExclusionPatternsDecoded0:[Swift.String]? = nil
        if let urlExclusionPatternsContainer = urlExclusionPatternsContainer {
            urlExclusionPatternsDecoded0 = [Swift.String]()
            for string0 in urlExclusionPatternsContainer {
                if let string0 = string0 {
                    urlExclusionPatternsDecoded0?.append(string0)
                }
            }
        }
        urlExclusionPatterns = urlExclusionPatternsDecoded0
        let proxyConfigurationDecoded = try containerValues.decodeIfPresent(KendraClientTypes.ProxyConfiguration.self, forKey: .proxyConfiguration)
        proxyConfiguration = proxyConfigurationDecoded
        let authenticationConfigurationDecoded = try containerValues.decodeIfPresent(KendraClientTypes.AuthenticationConfiguration.self, forKey: .authenticationConfiguration)
        authenticationConfiguration = authenticationConfigurationDecoded
    }
}
