// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension KendraClientTypes {
    public enum DatabaseEngineType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case rdsAuroraMysql
        case rdsAuroraPostgresql
        case rdsMysql
        case rdsPostgresql
        case sdkUnknown(Swift.String)

        public static var allCases: [DatabaseEngineType] {
            return [
                .rdsAuroraMysql,
                .rdsAuroraPostgresql,
                .rdsMysql,
                .rdsPostgresql,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .rdsAuroraMysql: return "RDS_AURORA_MYSQL"
            case .rdsAuroraPostgresql: return "RDS_AURORA_POSTGRESQL"
            case .rdsMysql: return "RDS_MYSQL"
            case .rdsPostgresql: return "RDS_POSTGRESQL"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DatabaseEngineType(rawValue: rawValue) ?? DatabaseEngineType.sdkUnknown(rawValue)
        }
    }
}
