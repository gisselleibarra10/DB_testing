// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension KendraClientTypes.SharePointConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case authenticationType = "AuthenticationType"
        case crawlAttachments = "CrawlAttachments"
        case disableLocalGroups = "DisableLocalGroups"
        case documentTitleFieldName = "DocumentTitleFieldName"
        case exclusionPatterns = "ExclusionPatterns"
        case fieldMappings = "FieldMappings"
        case inclusionPatterns = "InclusionPatterns"
        case proxyConfiguration = "ProxyConfiguration"
        case secretArn = "SecretArn"
        case sharePointVersion = "SharePointVersion"
        case sslCertificateS3Path = "SslCertificateS3Path"
        case urls = "Urls"
        case useChangeLog = "UseChangeLog"
        case vpcConfiguration = "VpcConfiguration"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let authenticationType = self.authenticationType {
            try encodeContainer.encode(authenticationType.rawValue, forKey: .authenticationType)
        }
        if crawlAttachments != false {
            try encodeContainer.encode(crawlAttachments, forKey: .crawlAttachments)
        }
        if disableLocalGroups != false {
            try encodeContainer.encode(disableLocalGroups, forKey: .disableLocalGroups)
        }
        if let documentTitleFieldName = self.documentTitleFieldName {
            try encodeContainer.encode(documentTitleFieldName, forKey: .documentTitleFieldName)
        }
        if let exclusionPatterns = exclusionPatterns {
            var exclusionPatternsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .exclusionPatterns)
            for datasourceinclusionsexclusionsstrings0 in exclusionPatterns {
                try exclusionPatternsContainer.encode(datasourceinclusionsexclusionsstrings0)
            }
        }
        if let fieldMappings = fieldMappings {
            var fieldMappingsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .fieldMappings)
            for datasourcetoindexfieldmappinglist0 in fieldMappings {
                try fieldMappingsContainer.encode(datasourcetoindexfieldmappinglist0)
            }
        }
        if let inclusionPatterns = inclusionPatterns {
            var inclusionPatternsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .inclusionPatterns)
            for datasourceinclusionsexclusionsstrings0 in inclusionPatterns {
                try inclusionPatternsContainer.encode(datasourceinclusionsexclusionsstrings0)
            }
        }
        if let proxyConfiguration = self.proxyConfiguration {
            try encodeContainer.encode(proxyConfiguration, forKey: .proxyConfiguration)
        }
        if let secretArn = self.secretArn {
            try encodeContainer.encode(secretArn, forKey: .secretArn)
        }
        if let sharePointVersion = self.sharePointVersion {
            try encodeContainer.encode(sharePointVersion.rawValue, forKey: .sharePointVersion)
        }
        if let sslCertificateS3Path = self.sslCertificateS3Path {
            try encodeContainer.encode(sslCertificateS3Path, forKey: .sslCertificateS3Path)
        }
        if let urls = urls {
            var urlsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .urls)
            for sharepointurllist0 in urls {
                try urlsContainer.encode(sharepointurllist0)
            }
        }
        if useChangeLog != false {
            try encodeContainer.encode(useChangeLog, forKey: .useChangeLog)
        }
        if let vpcConfiguration = self.vpcConfiguration {
            try encodeContainer.encode(vpcConfiguration, forKey: .vpcConfiguration)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sharePointVersionDecoded = try containerValues.decodeIfPresent(KendraClientTypes.SharePointVersion.self, forKey: .sharePointVersion)
        sharePointVersion = sharePointVersionDecoded
        let urlsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .urls)
        var urlsDecoded0:[Swift.String]? = nil
        if let urlsContainer = urlsContainer {
            urlsDecoded0 = [Swift.String]()
            for string0 in urlsContainer {
                if let string0 = string0 {
                    urlsDecoded0?.append(string0)
                }
            }
        }
        urls = urlsDecoded0
        let secretArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .secretArn)
        secretArn = secretArnDecoded
        let crawlAttachmentsDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .crawlAttachments) ?? false
        crawlAttachments = crawlAttachmentsDecoded
        let useChangeLogDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .useChangeLog) ?? false
        useChangeLog = useChangeLogDecoded
        let inclusionPatternsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .inclusionPatterns)
        var inclusionPatternsDecoded0:[Swift.String]? = nil
        if let inclusionPatternsContainer = inclusionPatternsContainer {
            inclusionPatternsDecoded0 = [Swift.String]()
            for string0 in inclusionPatternsContainer {
                if let string0 = string0 {
                    inclusionPatternsDecoded0?.append(string0)
                }
            }
        }
        inclusionPatterns = inclusionPatternsDecoded0
        let exclusionPatternsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .exclusionPatterns)
        var exclusionPatternsDecoded0:[Swift.String]? = nil
        if let exclusionPatternsContainer = exclusionPatternsContainer {
            exclusionPatternsDecoded0 = [Swift.String]()
            for string0 in exclusionPatternsContainer {
                if let string0 = string0 {
                    exclusionPatternsDecoded0?.append(string0)
                }
            }
        }
        exclusionPatterns = exclusionPatternsDecoded0
        let vpcConfigurationDecoded = try containerValues.decodeIfPresent(KendraClientTypes.DataSourceVpcConfiguration.self, forKey: .vpcConfiguration)
        vpcConfiguration = vpcConfigurationDecoded
        let fieldMappingsContainer = try containerValues.decodeIfPresent([KendraClientTypes.DataSourceToIndexFieldMapping?].self, forKey: .fieldMappings)
        var fieldMappingsDecoded0:[KendraClientTypes.DataSourceToIndexFieldMapping]? = nil
        if let fieldMappingsContainer = fieldMappingsContainer {
            fieldMappingsDecoded0 = [KendraClientTypes.DataSourceToIndexFieldMapping]()
            for structure0 in fieldMappingsContainer {
                if let structure0 = structure0 {
                    fieldMappingsDecoded0?.append(structure0)
                }
            }
        }
        fieldMappings = fieldMappingsDecoded0
        let documentTitleFieldNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .documentTitleFieldName)
        documentTitleFieldName = documentTitleFieldNameDecoded
        let disableLocalGroupsDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .disableLocalGroups) ?? false
        disableLocalGroups = disableLocalGroupsDecoded
        let sslCertificateS3PathDecoded = try containerValues.decodeIfPresent(KendraClientTypes.S3Path.self, forKey: .sslCertificateS3Path)
        sslCertificateS3Path = sslCertificateS3PathDecoded
        let authenticationTypeDecoded = try containerValues.decodeIfPresent(KendraClientTypes.SharePointOnlineAuthenticationType.self, forKey: .authenticationType)
        authenticationType = authenticationTypeDecoded
        let proxyConfigurationDecoded = try containerValues.decodeIfPresent(KendraClientTypes.ProxyConfiguration.self, forKey: .proxyConfiguration)
        proxyConfiguration = proxyConfigurationDecoded
    }
}
