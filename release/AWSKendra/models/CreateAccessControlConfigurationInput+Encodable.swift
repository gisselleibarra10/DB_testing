// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CreateAccessControlConfigurationInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accessControlList = "AccessControlList"
        case clientToken = "ClientToken"
        case description = "Description"
        case hierarchicalAccessControlList = "HierarchicalAccessControlList"
        case indexId = "IndexId"
        case name = "Name"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accessControlList = accessControlList {
            var accessControlListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .accessControlList)
            for principallist0 in accessControlList {
                try accessControlListContainer.encode(principallist0)
            }
        }
        if let clientToken = self.clientToken {
            try encodeContainer.encode(clientToken, forKey: .clientToken)
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let hierarchicalAccessControlList = hierarchicalAccessControlList {
            var hierarchicalAccessControlListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .hierarchicalAccessControlList)
            for hierarchicalprincipallist0 in hierarchicalAccessControlList {
                try hierarchicalAccessControlListContainer.encode(hierarchicalprincipallist0)
            }
        }
        if let indexId = self.indexId {
            try encodeContainer.encode(indexId, forKey: .indexId)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }
}
