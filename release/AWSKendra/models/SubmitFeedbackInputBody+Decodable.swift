// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct SubmitFeedbackInputBody: Swift.Equatable {
    let indexId: Swift.String?
    let queryId: Swift.String?
    let clickFeedbackItems: [KendraClientTypes.ClickFeedback]?
    let relevanceFeedbackItems: [KendraClientTypes.RelevanceFeedback]?
}

extension SubmitFeedbackInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clickFeedbackItems = "ClickFeedbackItems"
        case indexId = "IndexId"
        case queryId = "QueryId"
        case relevanceFeedbackItems = "RelevanceFeedbackItems"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let indexIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .indexId)
        indexId = indexIdDecoded
        let queryIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .queryId)
        queryId = queryIdDecoded
        let clickFeedbackItemsContainer = try containerValues.decodeIfPresent([KendraClientTypes.ClickFeedback?].self, forKey: .clickFeedbackItems)
        var clickFeedbackItemsDecoded0:[KendraClientTypes.ClickFeedback]? = nil
        if let clickFeedbackItemsContainer = clickFeedbackItemsContainer {
            clickFeedbackItemsDecoded0 = [KendraClientTypes.ClickFeedback]()
            for structure0 in clickFeedbackItemsContainer {
                if let structure0 = structure0 {
                    clickFeedbackItemsDecoded0?.append(structure0)
                }
            }
        }
        clickFeedbackItems = clickFeedbackItemsDecoded0
        let relevanceFeedbackItemsContainer = try containerValues.decodeIfPresent([KendraClientTypes.RelevanceFeedback?].self, forKey: .relevanceFeedbackItems)
        var relevanceFeedbackItemsDecoded0:[KendraClientTypes.RelevanceFeedback]? = nil
        if let relevanceFeedbackItemsContainer = relevanceFeedbackItemsContainer {
            relevanceFeedbackItemsDecoded0 = [KendraClientTypes.RelevanceFeedback]()
            for structure0 in relevanceFeedbackItemsContainer {
                if let structure0 = structure0 {
                    relevanceFeedbackItemsDecoded0?.append(structure0)
                }
            }
        }
        relevanceFeedbackItems = relevanceFeedbackItemsDecoded0
    }
}
