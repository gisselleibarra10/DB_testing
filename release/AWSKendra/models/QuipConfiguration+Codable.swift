// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension KendraClientTypes.QuipConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attachmentFieldMappings = "AttachmentFieldMappings"
        case crawlAttachments = "CrawlAttachments"
        case crawlChatRooms = "CrawlChatRooms"
        case crawlFileComments = "CrawlFileComments"
        case domain = "Domain"
        case exclusionPatterns = "ExclusionPatterns"
        case folderIds = "FolderIds"
        case inclusionPatterns = "InclusionPatterns"
        case messageFieldMappings = "MessageFieldMappings"
        case secretArn = "SecretArn"
        case threadFieldMappings = "ThreadFieldMappings"
        case vpcConfiguration = "VpcConfiguration"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let attachmentFieldMappings = attachmentFieldMappings {
            var attachmentFieldMappingsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .attachmentFieldMappings)
            for datasourcetoindexfieldmappinglist0 in attachmentFieldMappings {
                try attachmentFieldMappingsContainer.encode(datasourcetoindexfieldmappinglist0)
            }
        }
        if crawlAttachments != false {
            try encodeContainer.encode(crawlAttachments, forKey: .crawlAttachments)
        }
        if crawlChatRooms != false {
            try encodeContainer.encode(crawlChatRooms, forKey: .crawlChatRooms)
        }
        if crawlFileComments != false {
            try encodeContainer.encode(crawlFileComments, forKey: .crawlFileComments)
        }
        if let domain = self.domain {
            try encodeContainer.encode(domain, forKey: .domain)
        }
        if let exclusionPatterns = exclusionPatterns {
            var exclusionPatternsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .exclusionPatterns)
            for datasourceinclusionsexclusionsstrings0 in exclusionPatterns {
                try exclusionPatternsContainer.encode(datasourceinclusionsexclusionsstrings0)
            }
        }
        if let folderIds = folderIds {
            var folderIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .folderIds)
            for folderidlist0 in folderIds {
                try folderIdsContainer.encode(folderidlist0)
            }
        }
        if let inclusionPatterns = inclusionPatterns {
            var inclusionPatternsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .inclusionPatterns)
            for datasourceinclusionsexclusionsstrings0 in inclusionPatterns {
                try inclusionPatternsContainer.encode(datasourceinclusionsexclusionsstrings0)
            }
        }
        if let messageFieldMappings = messageFieldMappings {
            var messageFieldMappingsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .messageFieldMappings)
            for datasourcetoindexfieldmappinglist0 in messageFieldMappings {
                try messageFieldMappingsContainer.encode(datasourcetoindexfieldmappinglist0)
            }
        }
        if let secretArn = self.secretArn {
            try encodeContainer.encode(secretArn, forKey: .secretArn)
        }
        if let threadFieldMappings = threadFieldMappings {
            var threadFieldMappingsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .threadFieldMappings)
            for datasourcetoindexfieldmappinglist0 in threadFieldMappings {
                try threadFieldMappingsContainer.encode(datasourcetoindexfieldmappinglist0)
            }
        }
        if let vpcConfiguration = self.vpcConfiguration {
            try encodeContainer.encode(vpcConfiguration, forKey: .vpcConfiguration)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domain)
        domain = domainDecoded
        let secretArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .secretArn)
        secretArn = secretArnDecoded
        let crawlFileCommentsDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .crawlFileComments) ?? false
        crawlFileComments = crawlFileCommentsDecoded
        let crawlChatRoomsDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .crawlChatRooms) ?? false
        crawlChatRooms = crawlChatRoomsDecoded
        let crawlAttachmentsDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .crawlAttachments) ?? false
        crawlAttachments = crawlAttachmentsDecoded
        let folderIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .folderIds)
        var folderIdsDecoded0:[Swift.String]? = nil
        if let folderIdsContainer = folderIdsContainer {
            folderIdsDecoded0 = [Swift.String]()
            for string0 in folderIdsContainer {
                if let string0 = string0 {
                    folderIdsDecoded0?.append(string0)
                }
            }
        }
        folderIds = folderIdsDecoded0
        let threadFieldMappingsContainer = try containerValues.decodeIfPresent([KendraClientTypes.DataSourceToIndexFieldMapping?].self, forKey: .threadFieldMappings)
        var threadFieldMappingsDecoded0:[KendraClientTypes.DataSourceToIndexFieldMapping]? = nil
        if let threadFieldMappingsContainer = threadFieldMappingsContainer {
            threadFieldMappingsDecoded0 = [KendraClientTypes.DataSourceToIndexFieldMapping]()
            for structure0 in threadFieldMappingsContainer {
                if let structure0 = structure0 {
                    threadFieldMappingsDecoded0?.append(structure0)
                }
            }
        }
        threadFieldMappings = threadFieldMappingsDecoded0
        let messageFieldMappingsContainer = try containerValues.decodeIfPresent([KendraClientTypes.DataSourceToIndexFieldMapping?].self, forKey: .messageFieldMappings)
        var messageFieldMappingsDecoded0:[KendraClientTypes.DataSourceToIndexFieldMapping]? = nil
        if let messageFieldMappingsContainer = messageFieldMappingsContainer {
            messageFieldMappingsDecoded0 = [KendraClientTypes.DataSourceToIndexFieldMapping]()
            for structure0 in messageFieldMappingsContainer {
                if let structure0 = structure0 {
                    messageFieldMappingsDecoded0?.append(structure0)
                }
            }
        }
        messageFieldMappings = messageFieldMappingsDecoded0
        let attachmentFieldMappingsContainer = try containerValues.decodeIfPresent([KendraClientTypes.DataSourceToIndexFieldMapping?].self, forKey: .attachmentFieldMappings)
        var attachmentFieldMappingsDecoded0:[KendraClientTypes.DataSourceToIndexFieldMapping]? = nil
        if let attachmentFieldMappingsContainer = attachmentFieldMappingsContainer {
            attachmentFieldMappingsDecoded0 = [KendraClientTypes.DataSourceToIndexFieldMapping]()
            for structure0 in attachmentFieldMappingsContainer {
                if let structure0 = structure0 {
                    attachmentFieldMappingsDecoded0?.append(structure0)
                }
            }
        }
        attachmentFieldMappings = attachmentFieldMappingsDecoded0
        let inclusionPatternsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .inclusionPatterns)
        var inclusionPatternsDecoded0:[Swift.String]? = nil
        if let inclusionPatternsContainer = inclusionPatternsContainer {
            inclusionPatternsDecoded0 = [Swift.String]()
            for string0 in inclusionPatternsContainer {
                if let string0 = string0 {
                    inclusionPatternsDecoded0?.append(string0)
                }
            }
        }
        inclusionPatterns = inclusionPatternsDecoded0
        let exclusionPatternsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .exclusionPatterns)
        var exclusionPatternsDecoded0:[Swift.String]? = nil
        if let exclusionPatternsContainer = exclusionPatternsContainer {
            exclusionPatternsDecoded0 = [Swift.String]()
            for string0 in exclusionPatternsContainer {
                if let string0 = string0 {
                    exclusionPatternsDecoded0?.append(string0)
                }
            }
        }
        exclusionPatterns = exclusionPatternsDecoded0
        let vpcConfigurationDecoded = try containerValues.decodeIfPresent(KendraClientTypes.DataSourceVpcConfiguration.self, forKey: .vpcConfiguration)
        vpcConfiguration = vpcConfigurationDecoded
    }
}
