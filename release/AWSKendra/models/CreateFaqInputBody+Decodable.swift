// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateFaqInputBody: Swift.Equatable {
    let indexId: Swift.String?
    let name: Swift.String?
    let description: Swift.String?
    let s3Path: KendraClientTypes.S3Path?
    let roleArn: Swift.String?
    let tags: [KendraClientTypes.Tag]?
    let fileFormat: KendraClientTypes.FaqFileFormat?
    let clientToken: Swift.String?
    let languageCode: Swift.String?
}

extension CreateFaqInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientToken = "ClientToken"
        case description = "Description"
        case fileFormat = "FileFormat"
        case indexId = "IndexId"
        case languageCode = "LanguageCode"
        case name = "Name"
        case roleArn = "RoleArn"
        case s3Path = "S3Path"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let indexIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .indexId)
        indexId = indexIdDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let s3PathDecoded = try containerValues.decodeIfPresent(KendraClientTypes.S3Path.self, forKey: .s3Path)
        s3Path = s3PathDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let tagsContainer = try containerValues.decodeIfPresent([KendraClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[KendraClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [KendraClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let fileFormatDecoded = try containerValues.decodeIfPresent(KendraClientTypes.FaqFileFormat.self, forKey: .fileFormat)
        fileFormat = fileFormatDecoded
        let clientTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientToken)
        clientToken = clientTokenDecoded
        let languageCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .languageCode)
        languageCode = languageCodeDecoded
    }
}
