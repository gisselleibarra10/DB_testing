// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct QueryInputBody: Swift.Equatable {
    let indexId: Swift.String?
    let queryText: Swift.String?
    let attributeFilter: KendraClientTypes.AttributeFilter?
    let facets: [KendraClientTypes.Facet]?
    let requestedDocumentAttributes: [Swift.String]?
    let queryResultTypeFilter: KendraClientTypes.QueryResultType?
    let documentRelevanceOverrideConfigurations: [KendraClientTypes.DocumentRelevanceConfiguration]?
    let pageNumber: Swift.Int?
    let pageSize: Swift.Int?
    let sortingConfiguration: KendraClientTypes.SortingConfiguration?
    let userContext: KendraClientTypes.UserContext?
    let visitorId: Swift.String?
    let spellCorrectionConfiguration: KendraClientTypes.SpellCorrectionConfiguration?
}

extension QueryInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attributeFilter = "AttributeFilter"
        case documentRelevanceOverrideConfigurations = "DocumentRelevanceOverrideConfigurations"
        case facets = "Facets"
        case indexId = "IndexId"
        case pageNumber = "PageNumber"
        case pageSize = "PageSize"
        case queryResultTypeFilter = "QueryResultTypeFilter"
        case queryText = "QueryText"
        case requestedDocumentAttributes = "RequestedDocumentAttributes"
        case sortingConfiguration = "SortingConfiguration"
        case spellCorrectionConfiguration = "SpellCorrectionConfiguration"
        case userContext = "UserContext"
        case visitorId = "VisitorId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let indexIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .indexId)
        indexId = indexIdDecoded
        let queryTextDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .queryText)
        queryText = queryTextDecoded
        let attributeFilterDecoded = try containerValues.decodeIfPresent(KendraClientTypes.AttributeFilter.self, forKey: .attributeFilter)
        attributeFilter = attributeFilterDecoded
        let facetsContainer = try containerValues.decodeIfPresent([KendraClientTypes.Facet?].self, forKey: .facets)
        var facetsDecoded0:[KendraClientTypes.Facet]? = nil
        if let facetsContainer = facetsContainer {
            facetsDecoded0 = [KendraClientTypes.Facet]()
            for structure0 in facetsContainer {
                if let structure0 = structure0 {
                    facetsDecoded0?.append(structure0)
                }
            }
        }
        facets = facetsDecoded0
        let requestedDocumentAttributesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .requestedDocumentAttributes)
        var requestedDocumentAttributesDecoded0:[Swift.String]? = nil
        if let requestedDocumentAttributesContainer = requestedDocumentAttributesContainer {
            requestedDocumentAttributesDecoded0 = [Swift.String]()
            for string0 in requestedDocumentAttributesContainer {
                if let string0 = string0 {
                    requestedDocumentAttributesDecoded0?.append(string0)
                }
            }
        }
        requestedDocumentAttributes = requestedDocumentAttributesDecoded0
        let queryResultTypeFilterDecoded = try containerValues.decodeIfPresent(KendraClientTypes.QueryResultType.self, forKey: .queryResultTypeFilter)
        queryResultTypeFilter = queryResultTypeFilterDecoded
        let documentRelevanceOverrideConfigurationsContainer = try containerValues.decodeIfPresent([KendraClientTypes.DocumentRelevanceConfiguration?].self, forKey: .documentRelevanceOverrideConfigurations)
        var documentRelevanceOverrideConfigurationsDecoded0:[KendraClientTypes.DocumentRelevanceConfiguration]? = nil
        if let documentRelevanceOverrideConfigurationsContainer = documentRelevanceOverrideConfigurationsContainer {
            documentRelevanceOverrideConfigurationsDecoded0 = [KendraClientTypes.DocumentRelevanceConfiguration]()
            for structure0 in documentRelevanceOverrideConfigurationsContainer {
                if let structure0 = structure0 {
                    documentRelevanceOverrideConfigurationsDecoded0?.append(structure0)
                }
            }
        }
        documentRelevanceOverrideConfigurations = documentRelevanceOverrideConfigurationsDecoded0
        let pageNumberDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .pageNumber)
        pageNumber = pageNumberDecoded
        let pageSizeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .pageSize)
        pageSize = pageSizeDecoded
        let sortingConfigurationDecoded = try containerValues.decodeIfPresent(KendraClientTypes.SortingConfiguration.self, forKey: .sortingConfiguration)
        sortingConfiguration = sortingConfigurationDecoded
        let userContextDecoded = try containerValues.decodeIfPresent(KendraClientTypes.UserContext.self, forKey: .userContext)
        userContext = userContextDecoded
        let visitorIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .visitorId)
        visitorId = visitorIdDecoded
        let spellCorrectionConfigurationDecoded = try containerValues.decodeIfPresent(KendraClientTypes.SpellCorrectionConfiguration.self, forKey: .spellCorrectionConfiguration)
        spellCorrectionConfiguration = spellCorrectionConfigurationDecoded
    }
}
