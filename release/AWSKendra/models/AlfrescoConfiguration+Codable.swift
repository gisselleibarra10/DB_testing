// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension KendraClientTypes.AlfrescoConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case blogFieldMappings = "BlogFieldMappings"
        case crawlComments = "CrawlComments"
        case crawlSystemFolders = "CrawlSystemFolders"
        case documentLibraryFieldMappings = "DocumentLibraryFieldMappings"
        case entityFilter = "EntityFilter"
        case exclusionPatterns = "ExclusionPatterns"
        case inclusionPatterns = "InclusionPatterns"
        case secretArn = "SecretArn"
        case siteId = "SiteId"
        case siteUrl = "SiteUrl"
        case sslCertificateS3Path = "SslCertificateS3Path"
        case vpcConfiguration = "VpcConfiguration"
        case wikiFieldMappings = "WikiFieldMappings"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let blogFieldMappings = blogFieldMappings {
            var blogFieldMappingsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .blogFieldMappings)
            for datasourcetoindexfieldmappinglist0 in blogFieldMappings {
                try blogFieldMappingsContainer.encode(datasourcetoindexfieldmappinglist0)
            }
        }
        if crawlComments != false {
            try encodeContainer.encode(crawlComments, forKey: .crawlComments)
        }
        if crawlSystemFolders != false {
            try encodeContainer.encode(crawlSystemFolders, forKey: .crawlSystemFolders)
        }
        if let documentLibraryFieldMappings = documentLibraryFieldMappings {
            var documentLibraryFieldMappingsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .documentLibraryFieldMappings)
            for datasourcetoindexfieldmappinglist0 in documentLibraryFieldMappings {
                try documentLibraryFieldMappingsContainer.encode(datasourcetoindexfieldmappinglist0)
            }
        }
        if let entityFilter = entityFilter {
            var entityFilterContainer = encodeContainer.nestedUnkeyedContainer(forKey: .entityFilter)
            for entityfilter0 in entityFilter {
                try entityFilterContainer.encode(entityfilter0.rawValue)
            }
        }
        if let exclusionPatterns = exclusionPatterns {
            var exclusionPatternsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .exclusionPatterns)
            for datasourceinclusionsexclusionsstrings0 in exclusionPatterns {
                try exclusionPatternsContainer.encode(datasourceinclusionsexclusionsstrings0)
            }
        }
        if let inclusionPatterns = inclusionPatterns {
            var inclusionPatternsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .inclusionPatterns)
            for datasourceinclusionsexclusionsstrings0 in inclusionPatterns {
                try inclusionPatternsContainer.encode(datasourceinclusionsexclusionsstrings0)
            }
        }
        if let secretArn = self.secretArn {
            try encodeContainer.encode(secretArn, forKey: .secretArn)
        }
        if let siteId = self.siteId {
            try encodeContainer.encode(siteId, forKey: .siteId)
        }
        if let siteUrl = self.siteUrl {
            try encodeContainer.encode(siteUrl, forKey: .siteUrl)
        }
        if let sslCertificateS3Path = self.sslCertificateS3Path {
            try encodeContainer.encode(sslCertificateS3Path, forKey: .sslCertificateS3Path)
        }
        if let vpcConfiguration = self.vpcConfiguration {
            try encodeContainer.encode(vpcConfiguration, forKey: .vpcConfiguration)
        }
        if let wikiFieldMappings = wikiFieldMappings {
            var wikiFieldMappingsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .wikiFieldMappings)
            for datasourcetoindexfieldmappinglist0 in wikiFieldMappings {
                try wikiFieldMappingsContainer.encode(datasourcetoindexfieldmappinglist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let siteUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .siteUrl)
        siteUrl = siteUrlDecoded
        let siteIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .siteId)
        siteId = siteIdDecoded
        let secretArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .secretArn)
        secretArn = secretArnDecoded
        let sslCertificateS3PathDecoded = try containerValues.decodeIfPresent(KendraClientTypes.S3Path.self, forKey: .sslCertificateS3Path)
        sslCertificateS3Path = sslCertificateS3PathDecoded
        let crawlSystemFoldersDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .crawlSystemFolders) ?? false
        crawlSystemFolders = crawlSystemFoldersDecoded
        let crawlCommentsDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .crawlComments) ?? false
        crawlComments = crawlCommentsDecoded
        let entityFilterContainer = try containerValues.decodeIfPresent([KendraClientTypes.AlfrescoEntity?].self, forKey: .entityFilter)
        var entityFilterDecoded0:[KendraClientTypes.AlfrescoEntity]? = nil
        if let entityFilterContainer = entityFilterContainer {
            entityFilterDecoded0 = [KendraClientTypes.AlfrescoEntity]()
            for enum0 in entityFilterContainer {
                if let enum0 = enum0 {
                    entityFilterDecoded0?.append(enum0)
                }
            }
        }
        entityFilter = entityFilterDecoded0
        let documentLibraryFieldMappingsContainer = try containerValues.decodeIfPresent([KendraClientTypes.DataSourceToIndexFieldMapping?].self, forKey: .documentLibraryFieldMappings)
        var documentLibraryFieldMappingsDecoded0:[KendraClientTypes.DataSourceToIndexFieldMapping]? = nil
        if let documentLibraryFieldMappingsContainer = documentLibraryFieldMappingsContainer {
            documentLibraryFieldMappingsDecoded0 = [KendraClientTypes.DataSourceToIndexFieldMapping]()
            for structure0 in documentLibraryFieldMappingsContainer {
                if let structure0 = structure0 {
                    documentLibraryFieldMappingsDecoded0?.append(structure0)
                }
            }
        }
        documentLibraryFieldMappings = documentLibraryFieldMappingsDecoded0
        let blogFieldMappingsContainer = try containerValues.decodeIfPresent([KendraClientTypes.DataSourceToIndexFieldMapping?].self, forKey: .blogFieldMappings)
        var blogFieldMappingsDecoded0:[KendraClientTypes.DataSourceToIndexFieldMapping]? = nil
        if let blogFieldMappingsContainer = blogFieldMappingsContainer {
            blogFieldMappingsDecoded0 = [KendraClientTypes.DataSourceToIndexFieldMapping]()
            for structure0 in blogFieldMappingsContainer {
                if let structure0 = structure0 {
                    blogFieldMappingsDecoded0?.append(structure0)
                }
            }
        }
        blogFieldMappings = blogFieldMappingsDecoded0
        let wikiFieldMappingsContainer = try containerValues.decodeIfPresent([KendraClientTypes.DataSourceToIndexFieldMapping?].self, forKey: .wikiFieldMappings)
        var wikiFieldMappingsDecoded0:[KendraClientTypes.DataSourceToIndexFieldMapping]? = nil
        if let wikiFieldMappingsContainer = wikiFieldMappingsContainer {
            wikiFieldMappingsDecoded0 = [KendraClientTypes.DataSourceToIndexFieldMapping]()
            for structure0 in wikiFieldMappingsContainer {
                if let structure0 = structure0 {
                    wikiFieldMappingsDecoded0?.append(structure0)
                }
            }
        }
        wikiFieldMappings = wikiFieldMappingsDecoded0
        let inclusionPatternsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .inclusionPatterns)
        var inclusionPatternsDecoded0:[Swift.String]? = nil
        if let inclusionPatternsContainer = inclusionPatternsContainer {
            inclusionPatternsDecoded0 = [Swift.String]()
            for string0 in inclusionPatternsContainer {
                if let string0 = string0 {
                    inclusionPatternsDecoded0?.append(string0)
                }
            }
        }
        inclusionPatterns = inclusionPatternsDecoded0
        let exclusionPatternsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .exclusionPatterns)
        var exclusionPatternsDecoded0:[Swift.String]? = nil
        if let exclusionPatternsContainer = exclusionPatternsContainer {
            exclusionPatternsDecoded0 = [Swift.String]()
            for string0 in exclusionPatternsContainer {
                if let string0 = string0 {
                    exclusionPatternsDecoded0?.append(string0)
                }
            }
        }
        exclusionPatterns = exclusionPatternsDecoded0
        let vpcConfigurationDecoded = try containerValues.decodeIfPresent(KendraClientTypes.DataSourceVpcConfiguration.self, forKey: .vpcConfiguration)
        vpcConfiguration = vpcConfigurationDecoded
    }
}
