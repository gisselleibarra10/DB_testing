// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension KendraClientTypes.Relevance: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case duration = "Duration"
        case freshness = "Freshness"
        case importance = "Importance"
        case rankOrder = "RankOrder"
        case valueImportanceMap = "ValueImportanceMap"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let duration = self.duration {
            try encodeContainer.encode(duration, forKey: .duration)
        }
        if let freshness = self.freshness {
            try encodeContainer.encode(freshness, forKey: .freshness)
        }
        if let importance = self.importance {
            try encodeContainer.encode(importance, forKey: .importance)
        }
        if let rankOrder = self.rankOrder {
            try encodeContainer.encode(rankOrder.rawValue, forKey: .rankOrder)
        }
        if let valueImportanceMap = valueImportanceMap {
            var valueImportanceMapContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .valueImportanceMap)
            for (dictKey0, valueimportancemap0) in valueImportanceMap {
                try valueImportanceMapContainer.encode(valueimportancemap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let freshnessDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .freshness)
        freshness = freshnessDecoded
        let importanceDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .importance)
        importance = importanceDecoded
        let durationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .duration)
        duration = durationDecoded
        let rankOrderDecoded = try containerValues.decodeIfPresent(KendraClientTypes.Order.self, forKey: .rankOrder)
        rankOrder = rankOrderDecoded
        let valueImportanceMapContainer = try containerValues.decodeIfPresent([Swift.String: Swift.Int?].self, forKey: .valueImportanceMap)
        var valueImportanceMapDecoded0: [Swift.String:Swift.Int]? = nil
        if let valueImportanceMapContainer = valueImportanceMapContainer {
            valueImportanceMapDecoded0 = [Swift.String:Swift.Int]()
            for (key0, importance0) in valueImportanceMapContainer {
                if let importance0 = importance0 {
                    valueImportanceMapDecoded0?[key0] = importance0
                }
            }
        }
        valueImportanceMap = valueImportanceMapDecoded0
    }
}
