// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension KendraClientTypes.Document: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accessControlConfigurationId = "AccessControlConfigurationId"
        case accessControlList = "AccessControlList"
        case attributes = "Attributes"
        case blob = "Blob"
        case contentType = "ContentType"
        case hierarchicalAccessControlList = "HierarchicalAccessControlList"
        case id = "Id"
        case s3Path = "S3Path"
        case title = "Title"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accessControlConfigurationId = self.accessControlConfigurationId {
            try encodeContainer.encode(accessControlConfigurationId, forKey: .accessControlConfigurationId)
        }
        if let accessControlList = accessControlList {
            var accessControlListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .accessControlList)
            for principallist0 in accessControlList {
                try accessControlListContainer.encode(principallist0)
            }
        }
        if let attributes = attributes {
            var attributesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .attributes)
            for documentattributelist0 in attributes {
                try attributesContainer.encode(documentattributelist0)
            }
        }
        if let blob = self.blob {
            try encodeContainer.encode(blob.base64EncodedString(), forKey: .blob)
        }
        if let contentType = self.contentType {
            try encodeContainer.encode(contentType.rawValue, forKey: .contentType)
        }
        if let hierarchicalAccessControlList = hierarchicalAccessControlList {
            var hierarchicalAccessControlListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .hierarchicalAccessControlList)
            for hierarchicalprincipallist0 in hierarchicalAccessControlList {
                try hierarchicalAccessControlListContainer.encode(hierarchicalprincipallist0)
            }
        }
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let s3Path = self.s3Path {
            try encodeContainer.encode(s3Path, forKey: .s3Path)
        }
        if let title = self.title {
            try encodeContainer.encode(title, forKey: .title)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let titleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .title)
        title = titleDecoded
        let blobDecoded = try containerValues.decodeIfPresent(ClientRuntime.Data.self, forKey: .blob)
        blob = blobDecoded
        let s3PathDecoded = try containerValues.decodeIfPresent(KendraClientTypes.S3Path.self, forKey: .s3Path)
        s3Path = s3PathDecoded
        let attributesContainer = try containerValues.decodeIfPresent([KendraClientTypes.DocumentAttribute?].self, forKey: .attributes)
        var attributesDecoded0:[KendraClientTypes.DocumentAttribute]? = nil
        if let attributesContainer = attributesContainer {
            attributesDecoded0 = [KendraClientTypes.DocumentAttribute]()
            for structure0 in attributesContainer {
                if let structure0 = structure0 {
                    attributesDecoded0?.append(structure0)
                }
            }
        }
        attributes = attributesDecoded0
        let accessControlListContainer = try containerValues.decodeIfPresent([KendraClientTypes.Principal?].self, forKey: .accessControlList)
        var accessControlListDecoded0:[KendraClientTypes.Principal]? = nil
        if let accessControlListContainer = accessControlListContainer {
            accessControlListDecoded0 = [KendraClientTypes.Principal]()
            for structure0 in accessControlListContainer {
                if let structure0 = structure0 {
                    accessControlListDecoded0?.append(structure0)
                }
            }
        }
        accessControlList = accessControlListDecoded0
        let hierarchicalAccessControlListContainer = try containerValues.decodeIfPresent([KendraClientTypes.HierarchicalPrincipal?].self, forKey: .hierarchicalAccessControlList)
        var hierarchicalAccessControlListDecoded0:[KendraClientTypes.HierarchicalPrincipal]? = nil
        if let hierarchicalAccessControlListContainer = hierarchicalAccessControlListContainer {
            hierarchicalAccessControlListDecoded0 = [KendraClientTypes.HierarchicalPrincipal]()
            for structure0 in hierarchicalAccessControlListContainer {
                if let structure0 = structure0 {
                    hierarchicalAccessControlListDecoded0?.append(structure0)
                }
            }
        }
        hierarchicalAccessControlList = hierarchicalAccessControlListDecoded0
        let contentTypeDecoded = try containerValues.decodeIfPresent(KendraClientTypes.ContentType.self, forKey: .contentType)
        contentType = contentTypeDecoded
        let accessControlConfigurationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .accessControlConfigurationId)
        accessControlConfigurationId = accessControlConfigurationIdDecoded
    }
}
