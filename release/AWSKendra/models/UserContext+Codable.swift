// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension KendraClientTypes.UserContext: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dataSourceGroups = "DataSourceGroups"
        case groups = "Groups"
        case token = "Token"
        case userId = "UserId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dataSourceGroups = dataSourceGroups {
            var dataSourceGroupsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .dataSourceGroups)
            for datasourcegroups0 in dataSourceGroups {
                try dataSourceGroupsContainer.encode(datasourcegroups0)
            }
        }
        if let groups = groups {
            var groupsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .groups)
            for groups0 in groups {
                try groupsContainer.encode(groups0)
            }
        }
        if let token = self.token {
            try encodeContainer.encode(token, forKey: .token)
        }
        if let userId = self.userId {
            try encodeContainer.encode(userId, forKey: .userId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .token)
        token = tokenDecoded
        let userIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userId)
        userId = userIdDecoded
        let groupsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .groups)
        var groupsDecoded0:[Swift.String]? = nil
        if let groupsContainer = groupsContainer {
            groupsDecoded0 = [Swift.String]()
            for string0 in groupsContainer {
                if let string0 = string0 {
                    groupsDecoded0?.append(string0)
                }
            }
        }
        groups = groupsDecoded0
        let dataSourceGroupsContainer = try containerValues.decodeIfPresent([KendraClientTypes.DataSourceGroup?].self, forKey: .dataSourceGroups)
        var dataSourceGroupsDecoded0:[KendraClientTypes.DataSourceGroup]? = nil
        if let dataSourceGroupsContainer = dataSourceGroupsContainer {
            dataSourceGroupsDecoded0 = [KendraClientTypes.DataSourceGroup]()
            for structure0 in dataSourceGroupsContainer {
                if let structure0 = structure0 {
                    dataSourceGroupsDecoded0?.append(structure0)
                }
            }
        }
        dataSourceGroups = dataSourceGroupsDecoded0
    }
}
