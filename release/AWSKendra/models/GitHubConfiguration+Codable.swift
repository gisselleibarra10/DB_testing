// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension KendraClientTypes.GitHubConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case exclusionFileNamePatterns = "ExclusionFileNamePatterns"
        case exclusionFileTypePatterns = "ExclusionFileTypePatterns"
        case exclusionFolderNamePatterns = "ExclusionFolderNamePatterns"
        case gitHubCommitConfigurationFieldMappings = "GitHubCommitConfigurationFieldMappings"
        case gitHubDocumentCrawlProperties = "GitHubDocumentCrawlProperties"
        case gitHubIssueAttachmentConfigurationFieldMappings = "GitHubIssueAttachmentConfigurationFieldMappings"
        case gitHubIssueCommentConfigurationFieldMappings = "GitHubIssueCommentConfigurationFieldMappings"
        case gitHubIssueDocumentConfigurationFieldMappings = "GitHubIssueDocumentConfigurationFieldMappings"
        case gitHubPullRequestCommentConfigurationFieldMappings = "GitHubPullRequestCommentConfigurationFieldMappings"
        case gitHubPullRequestDocumentAttachmentConfigurationFieldMappings = "GitHubPullRequestDocumentAttachmentConfigurationFieldMappings"
        case gitHubPullRequestDocumentConfigurationFieldMappings = "GitHubPullRequestDocumentConfigurationFieldMappings"
        case gitHubRepositoryConfigurationFieldMappings = "GitHubRepositoryConfigurationFieldMappings"
        case inclusionFileNamePatterns = "InclusionFileNamePatterns"
        case inclusionFileTypePatterns = "InclusionFileTypePatterns"
        case inclusionFolderNamePatterns = "InclusionFolderNamePatterns"
        case onPremiseConfiguration = "OnPremiseConfiguration"
        case repositoryFilter = "RepositoryFilter"
        case saaSConfiguration = "SaaSConfiguration"
        case secretArn = "SecretArn"
        case type = "Type"
        case useChangeLog = "UseChangeLog"
        case vpcConfiguration = "VpcConfiguration"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let exclusionFileNamePatterns = exclusionFileNamePatterns {
            var exclusionFileNamePatternsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .exclusionFileNamePatterns)
            for stringlist0 in exclusionFileNamePatterns {
                try exclusionFileNamePatternsContainer.encode(stringlist0)
            }
        }
        if let exclusionFileTypePatterns = exclusionFileTypePatterns {
            var exclusionFileTypePatternsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .exclusionFileTypePatterns)
            for stringlist0 in exclusionFileTypePatterns {
                try exclusionFileTypePatternsContainer.encode(stringlist0)
            }
        }
        if let exclusionFolderNamePatterns = exclusionFolderNamePatterns {
            var exclusionFolderNamePatternsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .exclusionFolderNamePatterns)
            for stringlist0 in exclusionFolderNamePatterns {
                try exclusionFolderNamePatternsContainer.encode(stringlist0)
            }
        }
        if let gitHubCommitConfigurationFieldMappings = gitHubCommitConfigurationFieldMappings {
            var gitHubCommitConfigurationFieldMappingsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .gitHubCommitConfigurationFieldMappings)
            for datasourcetoindexfieldmappinglist0 in gitHubCommitConfigurationFieldMappings {
                try gitHubCommitConfigurationFieldMappingsContainer.encode(datasourcetoindexfieldmappinglist0)
            }
        }
        if let gitHubDocumentCrawlProperties = self.gitHubDocumentCrawlProperties {
            try encodeContainer.encode(gitHubDocumentCrawlProperties, forKey: .gitHubDocumentCrawlProperties)
        }
        if let gitHubIssueAttachmentConfigurationFieldMappings = gitHubIssueAttachmentConfigurationFieldMappings {
            var gitHubIssueAttachmentConfigurationFieldMappingsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .gitHubIssueAttachmentConfigurationFieldMappings)
            for datasourcetoindexfieldmappinglist0 in gitHubIssueAttachmentConfigurationFieldMappings {
                try gitHubIssueAttachmentConfigurationFieldMappingsContainer.encode(datasourcetoindexfieldmappinglist0)
            }
        }
        if let gitHubIssueCommentConfigurationFieldMappings = gitHubIssueCommentConfigurationFieldMappings {
            var gitHubIssueCommentConfigurationFieldMappingsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .gitHubIssueCommentConfigurationFieldMappings)
            for datasourcetoindexfieldmappinglist0 in gitHubIssueCommentConfigurationFieldMappings {
                try gitHubIssueCommentConfigurationFieldMappingsContainer.encode(datasourcetoindexfieldmappinglist0)
            }
        }
        if let gitHubIssueDocumentConfigurationFieldMappings = gitHubIssueDocumentConfigurationFieldMappings {
            var gitHubIssueDocumentConfigurationFieldMappingsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .gitHubIssueDocumentConfigurationFieldMappings)
            for datasourcetoindexfieldmappinglist0 in gitHubIssueDocumentConfigurationFieldMappings {
                try gitHubIssueDocumentConfigurationFieldMappingsContainer.encode(datasourcetoindexfieldmappinglist0)
            }
        }
        if let gitHubPullRequestCommentConfigurationFieldMappings = gitHubPullRequestCommentConfigurationFieldMappings {
            var gitHubPullRequestCommentConfigurationFieldMappingsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .gitHubPullRequestCommentConfigurationFieldMappings)
            for datasourcetoindexfieldmappinglist0 in gitHubPullRequestCommentConfigurationFieldMappings {
                try gitHubPullRequestCommentConfigurationFieldMappingsContainer.encode(datasourcetoindexfieldmappinglist0)
            }
        }
        if let gitHubPullRequestDocumentAttachmentConfigurationFieldMappings = gitHubPullRequestDocumentAttachmentConfigurationFieldMappings {
            var gitHubPullRequestDocumentAttachmentConfigurationFieldMappingsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .gitHubPullRequestDocumentAttachmentConfigurationFieldMappings)
            for datasourcetoindexfieldmappinglist0 in gitHubPullRequestDocumentAttachmentConfigurationFieldMappings {
                try gitHubPullRequestDocumentAttachmentConfigurationFieldMappingsContainer.encode(datasourcetoindexfieldmappinglist0)
            }
        }
        if let gitHubPullRequestDocumentConfigurationFieldMappings = gitHubPullRequestDocumentConfigurationFieldMappings {
            var gitHubPullRequestDocumentConfigurationFieldMappingsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .gitHubPullRequestDocumentConfigurationFieldMappings)
            for datasourcetoindexfieldmappinglist0 in gitHubPullRequestDocumentConfigurationFieldMappings {
                try gitHubPullRequestDocumentConfigurationFieldMappingsContainer.encode(datasourcetoindexfieldmappinglist0)
            }
        }
        if let gitHubRepositoryConfigurationFieldMappings = gitHubRepositoryConfigurationFieldMappings {
            var gitHubRepositoryConfigurationFieldMappingsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .gitHubRepositoryConfigurationFieldMappings)
            for datasourcetoindexfieldmappinglist0 in gitHubRepositoryConfigurationFieldMappings {
                try gitHubRepositoryConfigurationFieldMappingsContainer.encode(datasourcetoindexfieldmappinglist0)
            }
        }
        if let inclusionFileNamePatterns = inclusionFileNamePatterns {
            var inclusionFileNamePatternsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .inclusionFileNamePatterns)
            for stringlist0 in inclusionFileNamePatterns {
                try inclusionFileNamePatternsContainer.encode(stringlist0)
            }
        }
        if let inclusionFileTypePatterns = inclusionFileTypePatterns {
            var inclusionFileTypePatternsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .inclusionFileTypePatterns)
            for stringlist0 in inclusionFileTypePatterns {
                try inclusionFileTypePatternsContainer.encode(stringlist0)
            }
        }
        if let inclusionFolderNamePatterns = inclusionFolderNamePatterns {
            var inclusionFolderNamePatternsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .inclusionFolderNamePatterns)
            for stringlist0 in inclusionFolderNamePatterns {
                try inclusionFolderNamePatternsContainer.encode(stringlist0)
            }
        }
        if let onPremiseConfiguration = self.onPremiseConfiguration {
            try encodeContainer.encode(onPremiseConfiguration, forKey: .onPremiseConfiguration)
        }
        if let repositoryFilter = repositoryFilter {
            var repositoryFilterContainer = encodeContainer.nestedUnkeyedContainer(forKey: .repositoryFilter)
            for repositorynames0 in repositoryFilter {
                try repositoryFilterContainer.encode(repositorynames0)
            }
        }
        if let saaSConfiguration = self.saaSConfiguration {
            try encodeContainer.encode(saaSConfiguration, forKey: .saaSConfiguration)
        }
        if let secretArn = self.secretArn {
            try encodeContainer.encode(secretArn, forKey: .secretArn)
        }
        if let type = self.type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
        if useChangeLog != false {
            try encodeContainer.encode(useChangeLog, forKey: .useChangeLog)
        }
        if let vpcConfiguration = self.vpcConfiguration {
            try encodeContainer.encode(vpcConfiguration, forKey: .vpcConfiguration)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let saaSConfigurationDecoded = try containerValues.decodeIfPresent(KendraClientTypes.SaaSConfiguration.self, forKey: .saaSConfiguration)
        saaSConfiguration = saaSConfigurationDecoded
        let onPremiseConfigurationDecoded = try containerValues.decodeIfPresent(KendraClientTypes.OnPremiseConfiguration.self, forKey: .onPremiseConfiguration)
        onPremiseConfiguration = onPremiseConfigurationDecoded
        let typeDecoded = try containerValues.decodeIfPresent(KendraClientTypes.ModelType.self, forKey: .type)
        type = typeDecoded
        let secretArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .secretArn)
        secretArn = secretArnDecoded
        let useChangeLogDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .useChangeLog) ?? false
        useChangeLog = useChangeLogDecoded
        let gitHubDocumentCrawlPropertiesDecoded = try containerValues.decodeIfPresent(KendraClientTypes.GitHubDocumentCrawlProperties.self, forKey: .gitHubDocumentCrawlProperties)
        gitHubDocumentCrawlProperties = gitHubDocumentCrawlPropertiesDecoded
        let repositoryFilterContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .repositoryFilter)
        var repositoryFilterDecoded0:[Swift.String]? = nil
        if let repositoryFilterContainer = repositoryFilterContainer {
            repositoryFilterDecoded0 = [Swift.String]()
            for string0 in repositoryFilterContainer {
                if let string0 = string0 {
                    repositoryFilterDecoded0?.append(string0)
                }
            }
        }
        repositoryFilter = repositoryFilterDecoded0
        let inclusionFolderNamePatternsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .inclusionFolderNamePatterns)
        var inclusionFolderNamePatternsDecoded0:[Swift.String]? = nil
        if let inclusionFolderNamePatternsContainer = inclusionFolderNamePatternsContainer {
            inclusionFolderNamePatternsDecoded0 = [Swift.String]()
            for string0 in inclusionFolderNamePatternsContainer {
                if let string0 = string0 {
                    inclusionFolderNamePatternsDecoded0?.append(string0)
                }
            }
        }
        inclusionFolderNamePatterns = inclusionFolderNamePatternsDecoded0
        let inclusionFileTypePatternsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .inclusionFileTypePatterns)
        var inclusionFileTypePatternsDecoded0:[Swift.String]? = nil
        if let inclusionFileTypePatternsContainer = inclusionFileTypePatternsContainer {
            inclusionFileTypePatternsDecoded0 = [Swift.String]()
            for string0 in inclusionFileTypePatternsContainer {
                if let string0 = string0 {
                    inclusionFileTypePatternsDecoded0?.append(string0)
                }
            }
        }
        inclusionFileTypePatterns = inclusionFileTypePatternsDecoded0
        let inclusionFileNamePatternsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .inclusionFileNamePatterns)
        var inclusionFileNamePatternsDecoded0:[Swift.String]? = nil
        if let inclusionFileNamePatternsContainer = inclusionFileNamePatternsContainer {
            inclusionFileNamePatternsDecoded0 = [Swift.String]()
            for string0 in inclusionFileNamePatternsContainer {
                if let string0 = string0 {
                    inclusionFileNamePatternsDecoded0?.append(string0)
                }
            }
        }
        inclusionFileNamePatterns = inclusionFileNamePatternsDecoded0
        let exclusionFolderNamePatternsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .exclusionFolderNamePatterns)
        var exclusionFolderNamePatternsDecoded0:[Swift.String]? = nil
        if let exclusionFolderNamePatternsContainer = exclusionFolderNamePatternsContainer {
            exclusionFolderNamePatternsDecoded0 = [Swift.String]()
            for string0 in exclusionFolderNamePatternsContainer {
                if let string0 = string0 {
                    exclusionFolderNamePatternsDecoded0?.append(string0)
                }
            }
        }
        exclusionFolderNamePatterns = exclusionFolderNamePatternsDecoded0
        let exclusionFileTypePatternsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .exclusionFileTypePatterns)
        var exclusionFileTypePatternsDecoded0:[Swift.String]? = nil
        if let exclusionFileTypePatternsContainer = exclusionFileTypePatternsContainer {
            exclusionFileTypePatternsDecoded0 = [Swift.String]()
            for string0 in exclusionFileTypePatternsContainer {
                if let string0 = string0 {
                    exclusionFileTypePatternsDecoded0?.append(string0)
                }
            }
        }
        exclusionFileTypePatterns = exclusionFileTypePatternsDecoded0
        let exclusionFileNamePatternsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .exclusionFileNamePatterns)
        var exclusionFileNamePatternsDecoded0:[Swift.String]? = nil
        if let exclusionFileNamePatternsContainer = exclusionFileNamePatternsContainer {
            exclusionFileNamePatternsDecoded0 = [Swift.String]()
            for string0 in exclusionFileNamePatternsContainer {
                if let string0 = string0 {
                    exclusionFileNamePatternsDecoded0?.append(string0)
                }
            }
        }
        exclusionFileNamePatterns = exclusionFileNamePatternsDecoded0
        let vpcConfigurationDecoded = try containerValues.decodeIfPresent(KendraClientTypes.DataSourceVpcConfiguration.self, forKey: .vpcConfiguration)
        vpcConfiguration = vpcConfigurationDecoded
        let gitHubRepositoryConfigurationFieldMappingsContainer = try containerValues.decodeIfPresent([KendraClientTypes.DataSourceToIndexFieldMapping?].self, forKey: .gitHubRepositoryConfigurationFieldMappings)
        var gitHubRepositoryConfigurationFieldMappingsDecoded0:[KendraClientTypes.DataSourceToIndexFieldMapping]? = nil
        if let gitHubRepositoryConfigurationFieldMappingsContainer = gitHubRepositoryConfigurationFieldMappingsContainer {
            gitHubRepositoryConfigurationFieldMappingsDecoded0 = [KendraClientTypes.DataSourceToIndexFieldMapping]()
            for structure0 in gitHubRepositoryConfigurationFieldMappingsContainer {
                if let structure0 = structure0 {
                    gitHubRepositoryConfigurationFieldMappingsDecoded0?.append(structure0)
                }
            }
        }
        gitHubRepositoryConfigurationFieldMappings = gitHubRepositoryConfigurationFieldMappingsDecoded0
        let gitHubCommitConfigurationFieldMappingsContainer = try containerValues.decodeIfPresent([KendraClientTypes.DataSourceToIndexFieldMapping?].self, forKey: .gitHubCommitConfigurationFieldMappings)
        var gitHubCommitConfigurationFieldMappingsDecoded0:[KendraClientTypes.DataSourceToIndexFieldMapping]? = nil
        if let gitHubCommitConfigurationFieldMappingsContainer = gitHubCommitConfigurationFieldMappingsContainer {
            gitHubCommitConfigurationFieldMappingsDecoded0 = [KendraClientTypes.DataSourceToIndexFieldMapping]()
            for structure0 in gitHubCommitConfigurationFieldMappingsContainer {
                if let structure0 = structure0 {
                    gitHubCommitConfigurationFieldMappingsDecoded0?.append(structure0)
                }
            }
        }
        gitHubCommitConfigurationFieldMappings = gitHubCommitConfigurationFieldMappingsDecoded0
        let gitHubIssueDocumentConfigurationFieldMappingsContainer = try containerValues.decodeIfPresent([KendraClientTypes.DataSourceToIndexFieldMapping?].self, forKey: .gitHubIssueDocumentConfigurationFieldMappings)
        var gitHubIssueDocumentConfigurationFieldMappingsDecoded0:[KendraClientTypes.DataSourceToIndexFieldMapping]? = nil
        if let gitHubIssueDocumentConfigurationFieldMappingsContainer = gitHubIssueDocumentConfigurationFieldMappingsContainer {
            gitHubIssueDocumentConfigurationFieldMappingsDecoded0 = [KendraClientTypes.DataSourceToIndexFieldMapping]()
            for structure0 in gitHubIssueDocumentConfigurationFieldMappingsContainer {
                if let structure0 = structure0 {
                    gitHubIssueDocumentConfigurationFieldMappingsDecoded0?.append(structure0)
                }
            }
        }
        gitHubIssueDocumentConfigurationFieldMappings = gitHubIssueDocumentConfigurationFieldMappingsDecoded0
        let gitHubIssueCommentConfigurationFieldMappingsContainer = try containerValues.decodeIfPresent([KendraClientTypes.DataSourceToIndexFieldMapping?].self, forKey: .gitHubIssueCommentConfigurationFieldMappings)
        var gitHubIssueCommentConfigurationFieldMappingsDecoded0:[KendraClientTypes.DataSourceToIndexFieldMapping]? = nil
        if let gitHubIssueCommentConfigurationFieldMappingsContainer = gitHubIssueCommentConfigurationFieldMappingsContainer {
            gitHubIssueCommentConfigurationFieldMappingsDecoded0 = [KendraClientTypes.DataSourceToIndexFieldMapping]()
            for structure0 in gitHubIssueCommentConfigurationFieldMappingsContainer {
                if let structure0 = structure0 {
                    gitHubIssueCommentConfigurationFieldMappingsDecoded0?.append(structure0)
                }
            }
        }
        gitHubIssueCommentConfigurationFieldMappings = gitHubIssueCommentConfigurationFieldMappingsDecoded0
        let gitHubIssueAttachmentConfigurationFieldMappingsContainer = try containerValues.decodeIfPresent([KendraClientTypes.DataSourceToIndexFieldMapping?].self, forKey: .gitHubIssueAttachmentConfigurationFieldMappings)
        var gitHubIssueAttachmentConfigurationFieldMappingsDecoded0:[KendraClientTypes.DataSourceToIndexFieldMapping]? = nil
        if let gitHubIssueAttachmentConfigurationFieldMappingsContainer = gitHubIssueAttachmentConfigurationFieldMappingsContainer {
            gitHubIssueAttachmentConfigurationFieldMappingsDecoded0 = [KendraClientTypes.DataSourceToIndexFieldMapping]()
            for structure0 in gitHubIssueAttachmentConfigurationFieldMappingsContainer {
                if let structure0 = structure0 {
                    gitHubIssueAttachmentConfigurationFieldMappingsDecoded0?.append(structure0)
                }
            }
        }
        gitHubIssueAttachmentConfigurationFieldMappings = gitHubIssueAttachmentConfigurationFieldMappingsDecoded0
        let gitHubPullRequestCommentConfigurationFieldMappingsContainer = try containerValues.decodeIfPresent([KendraClientTypes.DataSourceToIndexFieldMapping?].self, forKey: .gitHubPullRequestCommentConfigurationFieldMappings)
        var gitHubPullRequestCommentConfigurationFieldMappingsDecoded0:[KendraClientTypes.DataSourceToIndexFieldMapping]? = nil
        if let gitHubPullRequestCommentConfigurationFieldMappingsContainer = gitHubPullRequestCommentConfigurationFieldMappingsContainer {
            gitHubPullRequestCommentConfigurationFieldMappingsDecoded0 = [KendraClientTypes.DataSourceToIndexFieldMapping]()
            for structure0 in gitHubPullRequestCommentConfigurationFieldMappingsContainer {
                if let structure0 = structure0 {
                    gitHubPullRequestCommentConfigurationFieldMappingsDecoded0?.append(structure0)
                }
            }
        }
        gitHubPullRequestCommentConfigurationFieldMappings = gitHubPullRequestCommentConfigurationFieldMappingsDecoded0
        let gitHubPullRequestDocumentConfigurationFieldMappingsContainer = try containerValues.decodeIfPresent([KendraClientTypes.DataSourceToIndexFieldMapping?].self, forKey: .gitHubPullRequestDocumentConfigurationFieldMappings)
        var gitHubPullRequestDocumentConfigurationFieldMappingsDecoded0:[KendraClientTypes.DataSourceToIndexFieldMapping]? = nil
        if let gitHubPullRequestDocumentConfigurationFieldMappingsContainer = gitHubPullRequestDocumentConfigurationFieldMappingsContainer {
            gitHubPullRequestDocumentConfigurationFieldMappingsDecoded0 = [KendraClientTypes.DataSourceToIndexFieldMapping]()
            for structure0 in gitHubPullRequestDocumentConfigurationFieldMappingsContainer {
                if let structure0 = structure0 {
                    gitHubPullRequestDocumentConfigurationFieldMappingsDecoded0?.append(structure0)
                }
            }
        }
        gitHubPullRequestDocumentConfigurationFieldMappings = gitHubPullRequestDocumentConfigurationFieldMappingsDecoded0
        let gitHubPullRequestDocumentAttachmentConfigurationFieldMappingsContainer = try containerValues.decodeIfPresent([KendraClientTypes.DataSourceToIndexFieldMapping?].self, forKey: .gitHubPullRequestDocumentAttachmentConfigurationFieldMappings)
        var gitHubPullRequestDocumentAttachmentConfigurationFieldMappingsDecoded0:[KendraClientTypes.DataSourceToIndexFieldMapping]? = nil
        if let gitHubPullRequestDocumentAttachmentConfigurationFieldMappingsContainer = gitHubPullRequestDocumentAttachmentConfigurationFieldMappingsContainer {
            gitHubPullRequestDocumentAttachmentConfigurationFieldMappingsDecoded0 = [KendraClientTypes.DataSourceToIndexFieldMapping]()
            for structure0 in gitHubPullRequestDocumentAttachmentConfigurationFieldMappingsContainer {
                if let structure0 = structure0 {
                    gitHubPullRequestDocumentAttachmentConfigurationFieldMappingsDecoded0?.append(structure0)
                }
            }
        }
        gitHubPullRequestDocumentAttachmentConfigurationFieldMappings = gitHubPullRequestDocumentAttachmentConfigurationFieldMappingsDecoded0
    }
}
