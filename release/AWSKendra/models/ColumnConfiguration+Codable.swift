// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension KendraClientTypes.ColumnConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case changeDetectingColumns = "ChangeDetectingColumns"
        case documentDataColumnName = "DocumentDataColumnName"
        case documentIdColumnName = "DocumentIdColumnName"
        case documentTitleColumnName = "DocumentTitleColumnName"
        case fieldMappings = "FieldMappings"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let changeDetectingColumns = changeDetectingColumns {
            var changeDetectingColumnsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .changeDetectingColumns)
            for changedetectingcolumns0 in changeDetectingColumns {
                try changeDetectingColumnsContainer.encode(changedetectingcolumns0)
            }
        }
        if let documentDataColumnName = self.documentDataColumnName {
            try encodeContainer.encode(documentDataColumnName, forKey: .documentDataColumnName)
        }
        if let documentIdColumnName = self.documentIdColumnName {
            try encodeContainer.encode(documentIdColumnName, forKey: .documentIdColumnName)
        }
        if let documentTitleColumnName = self.documentTitleColumnName {
            try encodeContainer.encode(documentTitleColumnName, forKey: .documentTitleColumnName)
        }
        if let fieldMappings = fieldMappings {
            var fieldMappingsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .fieldMappings)
            for datasourcetoindexfieldmappinglist0 in fieldMappings {
                try fieldMappingsContainer.encode(datasourcetoindexfieldmappinglist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let documentIdColumnNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .documentIdColumnName)
        documentIdColumnName = documentIdColumnNameDecoded
        let documentDataColumnNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .documentDataColumnName)
        documentDataColumnName = documentDataColumnNameDecoded
        let documentTitleColumnNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .documentTitleColumnName)
        documentTitleColumnName = documentTitleColumnNameDecoded
        let fieldMappingsContainer = try containerValues.decodeIfPresent([KendraClientTypes.DataSourceToIndexFieldMapping?].self, forKey: .fieldMappings)
        var fieldMappingsDecoded0:[KendraClientTypes.DataSourceToIndexFieldMapping]? = nil
        if let fieldMappingsContainer = fieldMappingsContainer {
            fieldMappingsDecoded0 = [KendraClientTypes.DataSourceToIndexFieldMapping]()
            for structure0 in fieldMappingsContainer {
                if let structure0 = structure0 {
                    fieldMappingsDecoded0?.append(structure0)
                }
            }
        }
        fieldMappings = fieldMappingsDecoded0
        let changeDetectingColumnsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .changeDetectingColumns)
        var changeDetectingColumnsDecoded0:[Swift.String]? = nil
        if let changeDetectingColumnsContainer = changeDetectingColumnsContainer {
            changeDetectingColumnsDecoded0 = [Swift.String]()
            for string0 in changeDetectingColumnsContainer {
                if let string0 = string0 {
                    changeDetectingColumnsDecoded0?.append(string0)
                }
            }
        }
        changeDetectingColumns = changeDetectingColumnsDecoded0
    }
}
