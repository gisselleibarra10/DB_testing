// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension KendraClientTypes.QueryResultItem: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case additionalAttributes = "AdditionalAttributes"
        case documentAttributes = "DocumentAttributes"
        case documentExcerpt = "DocumentExcerpt"
        case documentId = "DocumentId"
        case documentTitle = "DocumentTitle"
        case documentURI = "DocumentURI"
        case feedbackToken = "FeedbackToken"
        case id = "Id"
        case scoreAttributes = "ScoreAttributes"
        case type = "Type"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let additionalAttributes = additionalAttributes {
            var additionalAttributesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .additionalAttributes)
            for additionalresultattributelist0 in additionalAttributes {
                try additionalAttributesContainer.encode(additionalresultattributelist0)
            }
        }
        if let documentAttributes = documentAttributes {
            var documentAttributesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .documentAttributes)
            for documentattributelist0 in documentAttributes {
                try documentAttributesContainer.encode(documentattributelist0)
            }
        }
        if let documentExcerpt = self.documentExcerpt {
            try encodeContainer.encode(documentExcerpt, forKey: .documentExcerpt)
        }
        if let documentId = self.documentId {
            try encodeContainer.encode(documentId, forKey: .documentId)
        }
        if let documentTitle = self.documentTitle {
            try encodeContainer.encode(documentTitle, forKey: .documentTitle)
        }
        if let documentURI = self.documentURI {
            try encodeContainer.encode(documentURI, forKey: .documentURI)
        }
        if let feedbackToken = self.feedbackToken {
            try encodeContainer.encode(feedbackToken, forKey: .feedbackToken)
        }
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let scoreAttributes = self.scoreAttributes {
            try encodeContainer.encode(scoreAttributes, forKey: .scoreAttributes)
        }
        if let type = self.type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let typeDecoded = try containerValues.decodeIfPresent(KendraClientTypes.QueryResultType.self, forKey: .type)
        type = typeDecoded
        let additionalAttributesContainer = try containerValues.decodeIfPresent([KendraClientTypes.AdditionalResultAttribute?].self, forKey: .additionalAttributes)
        var additionalAttributesDecoded0:[KendraClientTypes.AdditionalResultAttribute]? = nil
        if let additionalAttributesContainer = additionalAttributesContainer {
            additionalAttributesDecoded0 = [KendraClientTypes.AdditionalResultAttribute]()
            for structure0 in additionalAttributesContainer {
                if let structure0 = structure0 {
                    additionalAttributesDecoded0?.append(structure0)
                }
            }
        }
        additionalAttributes = additionalAttributesDecoded0
        let documentIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .documentId)
        documentId = documentIdDecoded
        let documentTitleDecoded = try containerValues.decodeIfPresent(KendraClientTypes.TextWithHighlights.self, forKey: .documentTitle)
        documentTitle = documentTitleDecoded
        let documentExcerptDecoded = try containerValues.decodeIfPresent(KendraClientTypes.TextWithHighlights.self, forKey: .documentExcerpt)
        documentExcerpt = documentExcerptDecoded
        let documentURIDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .documentURI)
        documentURI = documentURIDecoded
        let documentAttributesContainer = try containerValues.decodeIfPresent([KendraClientTypes.DocumentAttribute?].self, forKey: .documentAttributes)
        var documentAttributesDecoded0:[KendraClientTypes.DocumentAttribute]? = nil
        if let documentAttributesContainer = documentAttributesContainer {
            documentAttributesDecoded0 = [KendraClientTypes.DocumentAttribute]()
            for structure0 in documentAttributesContainer {
                if let structure0 = structure0 {
                    documentAttributesDecoded0?.append(structure0)
                }
            }
        }
        documentAttributes = documentAttributesDecoded0
        let scoreAttributesDecoded = try containerValues.decodeIfPresent(KendraClientTypes.ScoreAttributes.self, forKey: .scoreAttributes)
        scoreAttributes = scoreAttributesDecoded
        let feedbackTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .feedbackToken)
        feedbackToken = feedbackTokenDecoded
    }
}
