// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeIndexOutputResponseBody: Swift.Equatable {
    let name: Swift.String?
    let id: Swift.String?
    let edition: KendraClientTypes.IndexEdition?
    let roleArn: Swift.String?
    let serverSideEncryptionConfiguration: KendraClientTypes.ServerSideEncryptionConfiguration?
    let status: KendraClientTypes.IndexStatus?
    let description: Swift.String?
    let createdAt: ClientRuntime.Date?
    let updatedAt: ClientRuntime.Date?
    let documentMetadataConfigurations: [KendraClientTypes.DocumentMetadataConfiguration]?
    let indexStatistics: KendraClientTypes.IndexStatistics?
    let errorMessage: Swift.String?
    let capacityUnits: KendraClientTypes.CapacityUnitsConfiguration?
    let userTokenConfigurations: [KendraClientTypes.UserTokenConfiguration]?
    let userContextPolicy: KendraClientTypes.UserContextPolicy?
    let userGroupResolutionConfiguration: KendraClientTypes.UserGroupResolutionConfiguration?
}

extension DescribeIndexOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case capacityUnits = "CapacityUnits"
        case createdAt = "CreatedAt"
        case description = "Description"
        case documentMetadataConfigurations = "DocumentMetadataConfigurations"
        case edition = "Edition"
        case errorMessage = "ErrorMessage"
        case id = "Id"
        case indexStatistics = "IndexStatistics"
        case name = "Name"
        case roleArn = "RoleArn"
        case serverSideEncryptionConfiguration = "ServerSideEncryptionConfiguration"
        case status = "Status"
        case updatedAt = "UpdatedAt"
        case userContextPolicy = "UserContextPolicy"
        case userGroupResolutionConfiguration = "UserGroupResolutionConfiguration"
        case userTokenConfigurations = "UserTokenConfigurations"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let editionDecoded = try containerValues.decodeIfPresent(KendraClientTypes.IndexEdition.self, forKey: .edition)
        edition = editionDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let serverSideEncryptionConfigurationDecoded = try containerValues.decodeIfPresent(KendraClientTypes.ServerSideEncryptionConfiguration.self, forKey: .serverSideEncryptionConfiguration)
        serverSideEncryptionConfiguration = serverSideEncryptionConfigurationDecoded
        let statusDecoded = try containerValues.decodeIfPresent(KendraClientTypes.IndexStatus.self, forKey: .status)
        status = statusDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let createdAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdAt)
        createdAt = createdAtDecoded
        let updatedAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .updatedAt)
        updatedAt = updatedAtDecoded
        let documentMetadataConfigurationsContainer = try containerValues.decodeIfPresent([KendraClientTypes.DocumentMetadataConfiguration?].self, forKey: .documentMetadataConfigurations)
        var documentMetadataConfigurationsDecoded0:[KendraClientTypes.DocumentMetadataConfiguration]? = nil
        if let documentMetadataConfigurationsContainer = documentMetadataConfigurationsContainer {
            documentMetadataConfigurationsDecoded0 = [KendraClientTypes.DocumentMetadataConfiguration]()
            for structure0 in documentMetadataConfigurationsContainer {
                if let structure0 = structure0 {
                    documentMetadataConfigurationsDecoded0?.append(structure0)
                }
            }
        }
        documentMetadataConfigurations = documentMetadataConfigurationsDecoded0
        let indexStatisticsDecoded = try containerValues.decodeIfPresent(KendraClientTypes.IndexStatistics.self, forKey: .indexStatistics)
        indexStatistics = indexStatisticsDecoded
        let errorMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .errorMessage)
        errorMessage = errorMessageDecoded
        let capacityUnitsDecoded = try containerValues.decodeIfPresent(KendraClientTypes.CapacityUnitsConfiguration.self, forKey: .capacityUnits)
        capacityUnits = capacityUnitsDecoded
        let userTokenConfigurationsContainer = try containerValues.decodeIfPresent([KendraClientTypes.UserTokenConfiguration?].self, forKey: .userTokenConfigurations)
        var userTokenConfigurationsDecoded0:[KendraClientTypes.UserTokenConfiguration]? = nil
        if let userTokenConfigurationsContainer = userTokenConfigurationsContainer {
            userTokenConfigurationsDecoded0 = [KendraClientTypes.UserTokenConfiguration]()
            for structure0 in userTokenConfigurationsContainer {
                if let structure0 = structure0 {
                    userTokenConfigurationsDecoded0?.append(structure0)
                }
            }
        }
        userTokenConfigurations = userTokenConfigurationsDecoded0
        let userContextPolicyDecoded = try containerValues.decodeIfPresent(KendraClientTypes.UserContextPolicy.self, forKey: .userContextPolicy)
        userContextPolicy = userContextPolicyDecoded
        let userGroupResolutionConfigurationDecoded = try containerValues.decodeIfPresent(KendraClientTypes.UserGroupResolutionConfiguration.self, forKey: .userGroupResolutionConfiguration)
        userGroupResolutionConfiguration = userGroupResolutionConfigurationDecoded
    }
}
