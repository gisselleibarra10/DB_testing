// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension KendraClientTypes.SlackConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case crawlBotMessage = "CrawlBotMessage"
        case excludeArchived = "ExcludeArchived"
        case exclusionPatterns = "ExclusionPatterns"
        case fieldMappings = "FieldMappings"
        case inclusionPatterns = "InclusionPatterns"
        case lookBackPeriod = "LookBackPeriod"
        case privateChannelFilter = "PrivateChannelFilter"
        case publicChannelFilter = "PublicChannelFilter"
        case secretArn = "SecretArn"
        case sinceCrawlDate = "SinceCrawlDate"
        case slackEntityList = "SlackEntityList"
        case teamId = "TeamId"
        case useChangeLog = "UseChangeLog"
        case vpcConfiguration = "VpcConfiguration"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if crawlBotMessage != false {
            try encodeContainer.encode(crawlBotMessage, forKey: .crawlBotMessage)
        }
        if excludeArchived != false {
            try encodeContainer.encode(excludeArchived, forKey: .excludeArchived)
        }
        if let exclusionPatterns = exclusionPatterns {
            var exclusionPatternsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .exclusionPatterns)
            for datasourceinclusionsexclusionsstrings0 in exclusionPatterns {
                try exclusionPatternsContainer.encode(datasourceinclusionsexclusionsstrings0)
            }
        }
        if let fieldMappings = fieldMappings {
            var fieldMappingsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .fieldMappings)
            for datasourcetoindexfieldmappinglist0 in fieldMappings {
                try fieldMappingsContainer.encode(datasourcetoindexfieldmappinglist0)
            }
        }
        if let inclusionPatterns = inclusionPatterns {
            var inclusionPatternsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .inclusionPatterns)
            for datasourceinclusionsexclusionsstrings0 in inclusionPatterns {
                try inclusionPatternsContainer.encode(datasourceinclusionsexclusionsstrings0)
            }
        }
        if let lookBackPeriod = self.lookBackPeriod {
            try encodeContainer.encode(lookBackPeriod, forKey: .lookBackPeriod)
        }
        if let privateChannelFilter = privateChannelFilter {
            var privateChannelFilterContainer = encodeContainer.nestedUnkeyedContainer(forKey: .privateChannelFilter)
            for privatechannelfilter0 in privateChannelFilter {
                try privateChannelFilterContainer.encode(privatechannelfilter0)
            }
        }
        if let publicChannelFilter = publicChannelFilter {
            var publicChannelFilterContainer = encodeContainer.nestedUnkeyedContainer(forKey: .publicChannelFilter)
            for publicchannelfilter0 in publicChannelFilter {
                try publicChannelFilterContainer.encode(publicchannelfilter0)
            }
        }
        if let secretArn = self.secretArn {
            try encodeContainer.encode(secretArn, forKey: .secretArn)
        }
        if let sinceCrawlDate = self.sinceCrawlDate {
            try encodeContainer.encode(sinceCrawlDate, forKey: .sinceCrawlDate)
        }
        if let slackEntityList = slackEntityList {
            var slackEntityListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .slackEntityList)
            for slackentitylist0 in slackEntityList {
                try slackEntityListContainer.encode(slackentitylist0.rawValue)
            }
        }
        if let teamId = self.teamId {
            try encodeContainer.encode(teamId, forKey: .teamId)
        }
        if useChangeLog != false {
            try encodeContainer.encode(useChangeLog, forKey: .useChangeLog)
        }
        if let vpcConfiguration = self.vpcConfiguration {
            try encodeContainer.encode(vpcConfiguration, forKey: .vpcConfiguration)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let teamIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .teamId)
        teamId = teamIdDecoded
        let secretArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .secretArn)
        secretArn = secretArnDecoded
        let vpcConfigurationDecoded = try containerValues.decodeIfPresent(KendraClientTypes.DataSourceVpcConfiguration.self, forKey: .vpcConfiguration)
        vpcConfiguration = vpcConfigurationDecoded
        let slackEntityListContainer = try containerValues.decodeIfPresent([KendraClientTypes.SlackEntity?].self, forKey: .slackEntityList)
        var slackEntityListDecoded0:[KendraClientTypes.SlackEntity]? = nil
        if let slackEntityListContainer = slackEntityListContainer {
            slackEntityListDecoded0 = [KendraClientTypes.SlackEntity]()
            for enum0 in slackEntityListContainer {
                if let enum0 = enum0 {
                    slackEntityListDecoded0?.append(enum0)
                }
            }
        }
        slackEntityList = slackEntityListDecoded0
        let useChangeLogDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .useChangeLog) ?? false
        useChangeLog = useChangeLogDecoded
        let crawlBotMessageDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .crawlBotMessage) ?? false
        crawlBotMessage = crawlBotMessageDecoded
        let excludeArchivedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .excludeArchived) ?? false
        excludeArchived = excludeArchivedDecoded
        let sinceCrawlDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sinceCrawlDate)
        sinceCrawlDate = sinceCrawlDateDecoded
        let lookBackPeriodDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .lookBackPeriod)
        lookBackPeriod = lookBackPeriodDecoded
        let privateChannelFilterContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .privateChannelFilter)
        var privateChannelFilterDecoded0:[Swift.String]? = nil
        if let privateChannelFilterContainer = privateChannelFilterContainer {
            privateChannelFilterDecoded0 = [Swift.String]()
            for string0 in privateChannelFilterContainer {
                if let string0 = string0 {
                    privateChannelFilterDecoded0?.append(string0)
                }
            }
        }
        privateChannelFilter = privateChannelFilterDecoded0
        let publicChannelFilterContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .publicChannelFilter)
        var publicChannelFilterDecoded0:[Swift.String]? = nil
        if let publicChannelFilterContainer = publicChannelFilterContainer {
            publicChannelFilterDecoded0 = [Swift.String]()
            for string0 in publicChannelFilterContainer {
                if let string0 = string0 {
                    publicChannelFilterDecoded0?.append(string0)
                }
            }
        }
        publicChannelFilter = publicChannelFilterDecoded0
        let inclusionPatternsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .inclusionPatterns)
        var inclusionPatternsDecoded0:[Swift.String]? = nil
        if let inclusionPatternsContainer = inclusionPatternsContainer {
            inclusionPatternsDecoded0 = [Swift.String]()
            for string0 in inclusionPatternsContainer {
                if let string0 = string0 {
                    inclusionPatternsDecoded0?.append(string0)
                }
            }
        }
        inclusionPatterns = inclusionPatternsDecoded0
        let exclusionPatternsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .exclusionPatterns)
        var exclusionPatternsDecoded0:[Swift.String]? = nil
        if let exclusionPatternsContainer = exclusionPatternsContainer {
            exclusionPatternsDecoded0 = [Swift.String]()
            for string0 in exclusionPatternsContainer {
                if let string0 = string0 {
                    exclusionPatternsDecoded0?.append(string0)
                }
            }
        }
        exclusionPatterns = exclusionPatternsDecoded0
        let fieldMappingsContainer = try containerValues.decodeIfPresent([KendraClientTypes.DataSourceToIndexFieldMapping?].self, forKey: .fieldMappings)
        var fieldMappingsDecoded0:[KendraClientTypes.DataSourceToIndexFieldMapping]? = nil
        if let fieldMappingsContainer = fieldMappingsContainer {
            fieldMappingsDecoded0 = [KendraClientTypes.DataSourceToIndexFieldMapping]()
            for structure0 in fieldMappingsContainer {
                if let structure0 = structure0 {
                    fieldMappingsDecoded0?.append(structure0)
                }
            }
        }
        fieldMappings = fieldMappingsDecoded0
    }
}
