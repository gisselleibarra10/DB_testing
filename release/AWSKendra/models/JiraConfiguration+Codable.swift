// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension KendraClientTypes.JiraConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attachmentFieldMappings = "AttachmentFieldMappings"
        case commentFieldMappings = "CommentFieldMappings"
        case exclusionPatterns = "ExclusionPatterns"
        case inclusionPatterns = "InclusionPatterns"
        case issueFieldMappings = "IssueFieldMappings"
        case issueSubEntityFilter = "IssueSubEntityFilter"
        case issueType = "IssueType"
        case jiraAccountUrl = "JiraAccountUrl"
        case project = "Project"
        case projectFieldMappings = "ProjectFieldMappings"
        case secretArn = "SecretArn"
        case status = "Status"
        case useChangeLog = "UseChangeLog"
        case vpcConfiguration = "VpcConfiguration"
        case workLogFieldMappings = "WorkLogFieldMappings"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let attachmentFieldMappings = attachmentFieldMappings {
            var attachmentFieldMappingsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .attachmentFieldMappings)
            for datasourcetoindexfieldmappinglist0 in attachmentFieldMappings {
                try attachmentFieldMappingsContainer.encode(datasourcetoindexfieldmappinglist0)
            }
        }
        if let commentFieldMappings = commentFieldMappings {
            var commentFieldMappingsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .commentFieldMappings)
            for datasourcetoindexfieldmappinglist0 in commentFieldMappings {
                try commentFieldMappingsContainer.encode(datasourcetoindexfieldmappinglist0)
            }
        }
        if let exclusionPatterns = exclusionPatterns {
            var exclusionPatternsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .exclusionPatterns)
            for datasourceinclusionsexclusionsstrings0 in exclusionPatterns {
                try exclusionPatternsContainer.encode(datasourceinclusionsexclusionsstrings0)
            }
        }
        if let inclusionPatterns = inclusionPatterns {
            var inclusionPatternsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .inclusionPatterns)
            for datasourceinclusionsexclusionsstrings0 in inclusionPatterns {
                try inclusionPatternsContainer.encode(datasourceinclusionsexclusionsstrings0)
            }
        }
        if let issueFieldMappings = issueFieldMappings {
            var issueFieldMappingsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .issueFieldMappings)
            for datasourcetoindexfieldmappinglist0 in issueFieldMappings {
                try issueFieldMappingsContainer.encode(datasourcetoindexfieldmappinglist0)
            }
        }
        if let issueSubEntityFilter = issueSubEntityFilter {
            var issueSubEntityFilterContainer = encodeContainer.nestedUnkeyedContainer(forKey: .issueSubEntityFilter)
            for issuesubentityfilter0 in issueSubEntityFilter {
                try issueSubEntityFilterContainer.encode(issuesubentityfilter0.rawValue)
            }
        }
        if let issueType = issueType {
            var issueTypeContainer = encodeContainer.nestedUnkeyedContainer(forKey: .issueType)
            for issuetype0 in issueType {
                try issueTypeContainer.encode(issuetype0)
            }
        }
        if let jiraAccountUrl = self.jiraAccountUrl {
            try encodeContainer.encode(jiraAccountUrl, forKey: .jiraAccountUrl)
        }
        if let project = project {
            var projectContainer = encodeContainer.nestedUnkeyedContainer(forKey: .project)
            for project0 in project {
                try projectContainer.encode(project0)
            }
        }
        if let projectFieldMappings = projectFieldMappings {
            var projectFieldMappingsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .projectFieldMappings)
            for datasourcetoindexfieldmappinglist0 in projectFieldMappings {
                try projectFieldMappingsContainer.encode(datasourcetoindexfieldmappinglist0)
            }
        }
        if let secretArn = self.secretArn {
            try encodeContainer.encode(secretArn, forKey: .secretArn)
        }
        if let status = status {
            var statusContainer = encodeContainer.nestedUnkeyedContainer(forKey: .status)
            for jirastatus0 in status {
                try statusContainer.encode(jirastatus0)
            }
        }
        if useChangeLog != false {
            try encodeContainer.encode(useChangeLog, forKey: .useChangeLog)
        }
        if let vpcConfiguration = self.vpcConfiguration {
            try encodeContainer.encode(vpcConfiguration, forKey: .vpcConfiguration)
        }
        if let workLogFieldMappings = workLogFieldMappings {
            var workLogFieldMappingsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .workLogFieldMappings)
            for datasourcetoindexfieldmappinglist0 in workLogFieldMappings {
                try workLogFieldMappingsContainer.encode(datasourcetoindexfieldmappinglist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jiraAccountUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jiraAccountUrl)
        jiraAccountUrl = jiraAccountUrlDecoded
        let secretArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .secretArn)
        secretArn = secretArnDecoded
        let useChangeLogDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .useChangeLog) ?? false
        useChangeLog = useChangeLogDecoded
        let projectContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .project)
        var projectDecoded0:[Swift.String]? = nil
        if let projectContainer = projectContainer {
            projectDecoded0 = [Swift.String]()
            for string0 in projectContainer {
                if let string0 = string0 {
                    projectDecoded0?.append(string0)
                }
            }
        }
        project = projectDecoded0
        let issueTypeContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .issueType)
        var issueTypeDecoded0:[Swift.String]? = nil
        if let issueTypeContainer = issueTypeContainer {
            issueTypeDecoded0 = [Swift.String]()
            for string0 in issueTypeContainer {
                if let string0 = string0 {
                    issueTypeDecoded0?.append(string0)
                }
            }
        }
        issueType = issueTypeDecoded0
        let statusContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .status)
        var statusDecoded0:[Swift.String]? = nil
        if let statusContainer = statusContainer {
            statusDecoded0 = [Swift.String]()
            for string0 in statusContainer {
                if let string0 = string0 {
                    statusDecoded0?.append(string0)
                }
            }
        }
        status = statusDecoded0
        let issueSubEntityFilterContainer = try containerValues.decodeIfPresent([KendraClientTypes.IssueSubEntity?].self, forKey: .issueSubEntityFilter)
        var issueSubEntityFilterDecoded0:[KendraClientTypes.IssueSubEntity]? = nil
        if let issueSubEntityFilterContainer = issueSubEntityFilterContainer {
            issueSubEntityFilterDecoded0 = [KendraClientTypes.IssueSubEntity]()
            for enum0 in issueSubEntityFilterContainer {
                if let enum0 = enum0 {
                    issueSubEntityFilterDecoded0?.append(enum0)
                }
            }
        }
        issueSubEntityFilter = issueSubEntityFilterDecoded0
        let attachmentFieldMappingsContainer = try containerValues.decodeIfPresent([KendraClientTypes.DataSourceToIndexFieldMapping?].self, forKey: .attachmentFieldMappings)
        var attachmentFieldMappingsDecoded0:[KendraClientTypes.DataSourceToIndexFieldMapping]? = nil
        if let attachmentFieldMappingsContainer = attachmentFieldMappingsContainer {
            attachmentFieldMappingsDecoded0 = [KendraClientTypes.DataSourceToIndexFieldMapping]()
            for structure0 in attachmentFieldMappingsContainer {
                if let structure0 = structure0 {
                    attachmentFieldMappingsDecoded0?.append(structure0)
                }
            }
        }
        attachmentFieldMappings = attachmentFieldMappingsDecoded0
        let commentFieldMappingsContainer = try containerValues.decodeIfPresent([KendraClientTypes.DataSourceToIndexFieldMapping?].self, forKey: .commentFieldMappings)
        var commentFieldMappingsDecoded0:[KendraClientTypes.DataSourceToIndexFieldMapping]? = nil
        if let commentFieldMappingsContainer = commentFieldMappingsContainer {
            commentFieldMappingsDecoded0 = [KendraClientTypes.DataSourceToIndexFieldMapping]()
            for structure0 in commentFieldMappingsContainer {
                if let structure0 = structure0 {
                    commentFieldMappingsDecoded0?.append(structure0)
                }
            }
        }
        commentFieldMappings = commentFieldMappingsDecoded0
        let issueFieldMappingsContainer = try containerValues.decodeIfPresent([KendraClientTypes.DataSourceToIndexFieldMapping?].self, forKey: .issueFieldMappings)
        var issueFieldMappingsDecoded0:[KendraClientTypes.DataSourceToIndexFieldMapping]? = nil
        if let issueFieldMappingsContainer = issueFieldMappingsContainer {
            issueFieldMappingsDecoded0 = [KendraClientTypes.DataSourceToIndexFieldMapping]()
            for structure0 in issueFieldMappingsContainer {
                if let structure0 = structure0 {
                    issueFieldMappingsDecoded0?.append(structure0)
                }
            }
        }
        issueFieldMappings = issueFieldMappingsDecoded0
        let projectFieldMappingsContainer = try containerValues.decodeIfPresent([KendraClientTypes.DataSourceToIndexFieldMapping?].self, forKey: .projectFieldMappings)
        var projectFieldMappingsDecoded0:[KendraClientTypes.DataSourceToIndexFieldMapping]? = nil
        if let projectFieldMappingsContainer = projectFieldMappingsContainer {
            projectFieldMappingsDecoded0 = [KendraClientTypes.DataSourceToIndexFieldMapping]()
            for structure0 in projectFieldMappingsContainer {
                if let structure0 = structure0 {
                    projectFieldMappingsDecoded0?.append(structure0)
                }
            }
        }
        projectFieldMappings = projectFieldMappingsDecoded0
        let workLogFieldMappingsContainer = try containerValues.decodeIfPresent([KendraClientTypes.DataSourceToIndexFieldMapping?].self, forKey: .workLogFieldMappings)
        var workLogFieldMappingsDecoded0:[KendraClientTypes.DataSourceToIndexFieldMapping]? = nil
        if let workLogFieldMappingsContainer = workLogFieldMappingsContainer {
            workLogFieldMappingsDecoded0 = [KendraClientTypes.DataSourceToIndexFieldMapping]()
            for structure0 in workLogFieldMappingsContainer {
                if let structure0 = structure0 {
                    workLogFieldMappingsDecoded0?.append(structure0)
                }
            }
        }
        workLogFieldMappings = workLogFieldMappingsDecoded0
        let inclusionPatternsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .inclusionPatterns)
        var inclusionPatternsDecoded0:[Swift.String]? = nil
        if let inclusionPatternsContainer = inclusionPatternsContainer {
            inclusionPatternsDecoded0 = [Swift.String]()
            for string0 in inclusionPatternsContainer {
                if let string0 = string0 {
                    inclusionPatternsDecoded0?.append(string0)
                }
            }
        }
        inclusionPatterns = inclusionPatternsDecoded0
        let exclusionPatternsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .exclusionPatterns)
        var exclusionPatternsDecoded0:[Swift.String]? = nil
        if let exclusionPatternsContainer = exclusionPatternsContainer {
            exclusionPatternsDecoded0 = [Swift.String]()
            for string0 in exclusionPatternsContainer {
                if let string0 = string0 {
                    exclusionPatternsDecoded0?.append(string0)
                }
            }
        }
        exclusionPatterns = exclusionPatternsDecoded0
        let vpcConfigurationDecoded = try containerValues.decodeIfPresent(KendraClientTypes.DataSourceVpcConfiguration.self, forKey: .vpcConfiguration)
        vpcConfiguration = vpcConfigurationDecoded
    }
}
