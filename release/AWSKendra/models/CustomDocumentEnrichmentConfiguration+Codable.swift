// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension KendraClientTypes.CustomDocumentEnrichmentConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case inlineConfigurations = "InlineConfigurations"
        case postExtractionHookConfiguration = "PostExtractionHookConfiguration"
        case preExtractionHookConfiguration = "PreExtractionHookConfiguration"
        case roleArn = "RoleArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let inlineConfigurations = inlineConfigurations {
            var inlineConfigurationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .inlineConfigurations)
            for inlinecustomdocumentenrichmentconfigurationlist0 in inlineConfigurations {
                try inlineConfigurationsContainer.encode(inlinecustomdocumentenrichmentconfigurationlist0)
            }
        }
        if let postExtractionHookConfiguration = self.postExtractionHookConfiguration {
            try encodeContainer.encode(postExtractionHookConfiguration, forKey: .postExtractionHookConfiguration)
        }
        if let preExtractionHookConfiguration = self.preExtractionHookConfiguration {
            try encodeContainer.encode(preExtractionHookConfiguration, forKey: .preExtractionHookConfiguration)
        }
        if let roleArn = self.roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let inlineConfigurationsContainer = try containerValues.decodeIfPresent([KendraClientTypes.InlineCustomDocumentEnrichmentConfiguration?].self, forKey: .inlineConfigurations)
        var inlineConfigurationsDecoded0:[KendraClientTypes.InlineCustomDocumentEnrichmentConfiguration]? = nil
        if let inlineConfigurationsContainer = inlineConfigurationsContainer {
            inlineConfigurationsDecoded0 = [KendraClientTypes.InlineCustomDocumentEnrichmentConfiguration]()
            for structure0 in inlineConfigurationsContainer {
                if let structure0 = structure0 {
                    inlineConfigurationsDecoded0?.append(structure0)
                }
            }
        }
        inlineConfigurations = inlineConfigurationsDecoded0
        let preExtractionHookConfigurationDecoded = try containerValues.decodeIfPresent(KendraClientTypes.HookConfiguration.self, forKey: .preExtractionHookConfiguration)
        preExtractionHookConfiguration = preExtractionHookConfigurationDecoded
        let postExtractionHookConfigurationDecoded = try containerValues.decodeIfPresent(KendraClientTypes.HookConfiguration.self, forKey: .postExtractionHookConfiguration)
        postExtractionHookConfiguration = postExtractionHookConfigurationDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
    }
}
