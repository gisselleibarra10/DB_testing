// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension KendraClientTypes.DataSourceConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case alfrescoConfiguration = "AlfrescoConfiguration"
        case boxConfiguration = "BoxConfiguration"
        case confluenceConfiguration = "ConfluenceConfiguration"
        case databaseConfiguration = "DatabaseConfiguration"
        case fsxConfiguration = "FsxConfiguration"
        case gitHubConfiguration = "GitHubConfiguration"
        case googleDriveConfiguration = "GoogleDriveConfiguration"
        case jiraConfiguration = "JiraConfiguration"
        case oneDriveConfiguration = "OneDriveConfiguration"
        case quipConfiguration = "QuipConfiguration"
        case s3Configuration = "S3Configuration"
        case salesforceConfiguration = "SalesforceConfiguration"
        case serviceNowConfiguration = "ServiceNowConfiguration"
        case sharePointConfiguration = "SharePointConfiguration"
        case slackConfiguration = "SlackConfiguration"
        case templateConfiguration = "TemplateConfiguration"
        case webCrawlerConfiguration = "WebCrawlerConfiguration"
        case workDocsConfiguration = "WorkDocsConfiguration"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let alfrescoConfiguration = self.alfrescoConfiguration {
            try encodeContainer.encode(alfrescoConfiguration, forKey: .alfrescoConfiguration)
        }
        if let boxConfiguration = self.boxConfiguration {
            try encodeContainer.encode(boxConfiguration, forKey: .boxConfiguration)
        }
        if let confluenceConfiguration = self.confluenceConfiguration {
            try encodeContainer.encode(confluenceConfiguration, forKey: .confluenceConfiguration)
        }
        if let databaseConfiguration = self.databaseConfiguration {
            try encodeContainer.encode(databaseConfiguration, forKey: .databaseConfiguration)
        }
        if let fsxConfiguration = self.fsxConfiguration {
            try encodeContainer.encode(fsxConfiguration, forKey: .fsxConfiguration)
        }
        if let gitHubConfiguration = self.gitHubConfiguration {
            try encodeContainer.encode(gitHubConfiguration, forKey: .gitHubConfiguration)
        }
        if let googleDriveConfiguration = self.googleDriveConfiguration {
            try encodeContainer.encode(googleDriveConfiguration, forKey: .googleDriveConfiguration)
        }
        if let jiraConfiguration = self.jiraConfiguration {
            try encodeContainer.encode(jiraConfiguration, forKey: .jiraConfiguration)
        }
        if let oneDriveConfiguration = self.oneDriveConfiguration {
            try encodeContainer.encode(oneDriveConfiguration, forKey: .oneDriveConfiguration)
        }
        if let quipConfiguration = self.quipConfiguration {
            try encodeContainer.encode(quipConfiguration, forKey: .quipConfiguration)
        }
        if let s3Configuration = self.s3Configuration {
            try encodeContainer.encode(s3Configuration, forKey: .s3Configuration)
        }
        if let salesforceConfiguration = self.salesforceConfiguration {
            try encodeContainer.encode(salesforceConfiguration, forKey: .salesforceConfiguration)
        }
        if let serviceNowConfiguration = self.serviceNowConfiguration {
            try encodeContainer.encode(serviceNowConfiguration, forKey: .serviceNowConfiguration)
        }
        if let sharePointConfiguration = self.sharePointConfiguration {
            try encodeContainer.encode(sharePointConfiguration, forKey: .sharePointConfiguration)
        }
        if let slackConfiguration = self.slackConfiguration {
            try encodeContainer.encode(slackConfiguration, forKey: .slackConfiguration)
        }
        if let templateConfiguration = self.templateConfiguration {
            try encodeContainer.encode(templateConfiguration, forKey: .templateConfiguration)
        }
        if let webCrawlerConfiguration = self.webCrawlerConfiguration {
            try encodeContainer.encode(webCrawlerConfiguration, forKey: .webCrawlerConfiguration)
        }
        if let workDocsConfiguration = self.workDocsConfiguration {
            try encodeContainer.encode(workDocsConfiguration, forKey: .workDocsConfiguration)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let s3ConfigurationDecoded = try containerValues.decodeIfPresent(KendraClientTypes.S3DataSourceConfiguration.self, forKey: .s3Configuration)
        s3Configuration = s3ConfigurationDecoded
        let sharePointConfigurationDecoded = try containerValues.decodeIfPresent(KendraClientTypes.SharePointConfiguration.self, forKey: .sharePointConfiguration)
        sharePointConfiguration = sharePointConfigurationDecoded
        let databaseConfigurationDecoded = try containerValues.decodeIfPresent(KendraClientTypes.DatabaseConfiguration.self, forKey: .databaseConfiguration)
        databaseConfiguration = databaseConfigurationDecoded
        let salesforceConfigurationDecoded = try containerValues.decodeIfPresent(KendraClientTypes.SalesforceConfiguration.self, forKey: .salesforceConfiguration)
        salesforceConfiguration = salesforceConfigurationDecoded
        let oneDriveConfigurationDecoded = try containerValues.decodeIfPresent(KendraClientTypes.OneDriveConfiguration.self, forKey: .oneDriveConfiguration)
        oneDriveConfiguration = oneDriveConfigurationDecoded
        let serviceNowConfigurationDecoded = try containerValues.decodeIfPresent(KendraClientTypes.ServiceNowConfiguration.self, forKey: .serviceNowConfiguration)
        serviceNowConfiguration = serviceNowConfigurationDecoded
        let confluenceConfigurationDecoded = try containerValues.decodeIfPresent(KendraClientTypes.ConfluenceConfiguration.self, forKey: .confluenceConfiguration)
        confluenceConfiguration = confluenceConfigurationDecoded
        let googleDriveConfigurationDecoded = try containerValues.decodeIfPresent(KendraClientTypes.GoogleDriveConfiguration.self, forKey: .googleDriveConfiguration)
        googleDriveConfiguration = googleDriveConfigurationDecoded
        let webCrawlerConfigurationDecoded = try containerValues.decodeIfPresent(KendraClientTypes.WebCrawlerConfiguration.self, forKey: .webCrawlerConfiguration)
        webCrawlerConfiguration = webCrawlerConfigurationDecoded
        let workDocsConfigurationDecoded = try containerValues.decodeIfPresent(KendraClientTypes.WorkDocsConfiguration.self, forKey: .workDocsConfiguration)
        workDocsConfiguration = workDocsConfigurationDecoded
        let fsxConfigurationDecoded = try containerValues.decodeIfPresent(KendraClientTypes.FsxConfiguration.self, forKey: .fsxConfiguration)
        fsxConfiguration = fsxConfigurationDecoded
        let slackConfigurationDecoded = try containerValues.decodeIfPresent(KendraClientTypes.SlackConfiguration.self, forKey: .slackConfiguration)
        slackConfiguration = slackConfigurationDecoded
        let boxConfigurationDecoded = try containerValues.decodeIfPresent(KendraClientTypes.BoxConfiguration.self, forKey: .boxConfiguration)
        boxConfiguration = boxConfigurationDecoded
        let quipConfigurationDecoded = try containerValues.decodeIfPresent(KendraClientTypes.QuipConfiguration.self, forKey: .quipConfiguration)
        quipConfiguration = quipConfigurationDecoded
        let jiraConfigurationDecoded = try containerValues.decodeIfPresent(KendraClientTypes.JiraConfiguration.self, forKey: .jiraConfiguration)
        jiraConfiguration = jiraConfigurationDecoded
        let gitHubConfigurationDecoded = try containerValues.decodeIfPresent(KendraClientTypes.GitHubConfiguration.self, forKey: .gitHubConfiguration)
        gitHubConfiguration = gitHubConfigurationDecoded
        let alfrescoConfigurationDecoded = try containerValues.decodeIfPresent(KendraClientTypes.AlfrescoConfiguration.self, forKey: .alfrescoConfiguration)
        alfrescoConfiguration = alfrescoConfigurationDecoded
        let templateConfigurationDecoded = try containerValues.decodeIfPresent(KendraClientTypes.TemplateConfiguration.self, forKey: .templateConfiguration)
        templateConfiguration = templateConfigurationDecoded
    }
}
