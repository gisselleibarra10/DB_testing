// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListThesauriOutputResponseBody: Swift.Equatable {
    let nextToken: Swift.String?
    let thesaurusSummaryItems: [KendraClientTypes.ThesaurusSummary]?
}

extension ListThesauriOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case thesaurusSummaryItems = "ThesaurusSummaryItems"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let thesaurusSummaryItemsContainer = try containerValues.decodeIfPresent([KendraClientTypes.ThesaurusSummary?].self, forKey: .thesaurusSummaryItems)
        var thesaurusSummaryItemsDecoded0:[KendraClientTypes.ThesaurusSummary]? = nil
        if let thesaurusSummaryItemsContainer = thesaurusSummaryItemsContainer {
            thesaurusSummaryItemsDecoded0 = [KendraClientTypes.ThesaurusSummary]()
            for structure0 in thesaurusSummaryItemsContainer {
                if let structure0 = structure0 {
                    thesaurusSummaryItemsDecoded0?.append(structure0)
                }
            }
        }
        thesaurusSummaryItems = thesaurusSummaryItemsDecoded0
    }
}
