// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension KendraClientTypes.BoxConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case commentFieldMappings = "CommentFieldMappings"
        case crawlComments = "CrawlComments"
        case crawlTasks = "CrawlTasks"
        case crawlWebLinks = "CrawlWebLinks"
        case enterpriseId = "EnterpriseId"
        case exclusionPatterns = "ExclusionPatterns"
        case fileFieldMappings = "FileFieldMappings"
        case inclusionPatterns = "InclusionPatterns"
        case secretArn = "SecretArn"
        case taskFieldMappings = "TaskFieldMappings"
        case useChangeLog = "UseChangeLog"
        case vpcConfiguration = "VpcConfiguration"
        case webLinkFieldMappings = "WebLinkFieldMappings"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let commentFieldMappings = commentFieldMappings {
            var commentFieldMappingsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .commentFieldMappings)
            for datasourcetoindexfieldmappinglist0 in commentFieldMappings {
                try commentFieldMappingsContainer.encode(datasourcetoindexfieldmappinglist0)
            }
        }
        if crawlComments != false {
            try encodeContainer.encode(crawlComments, forKey: .crawlComments)
        }
        if crawlTasks != false {
            try encodeContainer.encode(crawlTasks, forKey: .crawlTasks)
        }
        if crawlWebLinks != false {
            try encodeContainer.encode(crawlWebLinks, forKey: .crawlWebLinks)
        }
        if let enterpriseId = self.enterpriseId {
            try encodeContainer.encode(enterpriseId, forKey: .enterpriseId)
        }
        if let exclusionPatterns = exclusionPatterns {
            var exclusionPatternsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .exclusionPatterns)
            for datasourceinclusionsexclusionsstrings0 in exclusionPatterns {
                try exclusionPatternsContainer.encode(datasourceinclusionsexclusionsstrings0)
            }
        }
        if let fileFieldMappings = fileFieldMappings {
            var fileFieldMappingsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .fileFieldMappings)
            for datasourcetoindexfieldmappinglist0 in fileFieldMappings {
                try fileFieldMappingsContainer.encode(datasourcetoindexfieldmappinglist0)
            }
        }
        if let inclusionPatterns = inclusionPatterns {
            var inclusionPatternsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .inclusionPatterns)
            for datasourceinclusionsexclusionsstrings0 in inclusionPatterns {
                try inclusionPatternsContainer.encode(datasourceinclusionsexclusionsstrings0)
            }
        }
        if let secretArn = self.secretArn {
            try encodeContainer.encode(secretArn, forKey: .secretArn)
        }
        if let taskFieldMappings = taskFieldMappings {
            var taskFieldMappingsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .taskFieldMappings)
            for datasourcetoindexfieldmappinglist0 in taskFieldMappings {
                try taskFieldMappingsContainer.encode(datasourcetoindexfieldmappinglist0)
            }
        }
        if useChangeLog != false {
            try encodeContainer.encode(useChangeLog, forKey: .useChangeLog)
        }
        if let vpcConfiguration = self.vpcConfiguration {
            try encodeContainer.encode(vpcConfiguration, forKey: .vpcConfiguration)
        }
        if let webLinkFieldMappings = webLinkFieldMappings {
            var webLinkFieldMappingsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .webLinkFieldMappings)
            for datasourcetoindexfieldmappinglist0 in webLinkFieldMappings {
                try webLinkFieldMappingsContainer.encode(datasourcetoindexfieldmappinglist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let enterpriseIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .enterpriseId)
        enterpriseId = enterpriseIdDecoded
        let secretArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .secretArn)
        secretArn = secretArnDecoded
        let useChangeLogDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .useChangeLog) ?? false
        useChangeLog = useChangeLogDecoded
        let crawlCommentsDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .crawlComments) ?? false
        crawlComments = crawlCommentsDecoded
        let crawlTasksDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .crawlTasks) ?? false
        crawlTasks = crawlTasksDecoded
        let crawlWebLinksDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .crawlWebLinks) ?? false
        crawlWebLinks = crawlWebLinksDecoded
        let fileFieldMappingsContainer = try containerValues.decodeIfPresent([KendraClientTypes.DataSourceToIndexFieldMapping?].self, forKey: .fileFieldMappings)
        var fileFieldMappingsDecoded0:[KendraClientTypes.DataSourceToIndexFieldMapping]? = nil
        if let fileFieldMappingsContainer = fileFieldMappingsContainer {
            fileFieldMappingsDecoded0 = [KendraClientTypes.DataSourceToIndexFieldMapping]()
            for structure0 in fileFieldMappingsContainer {
                if let structure0 = structure0 {
                    fileFieldMappingsDecoded0?.append(structure0)
                }
            }
        }
        fileFieldMappings = fileFieldMappingsDecoded0
        let taskFieldMappingsContainer = try containerValues.decodeIfPresent([KendraClientTypes.DataSourceToIndexFieldMapping?].self, forKey: .taskFieldMappings)
        var taskFieldMappingsDecoded0:[KendraClientTypes.DataSourceToIndexFieldMapping]? = nil
        if let taskFieldMappingsContainer = taskFieldMappingsContainer {
            taskFieldMappingsDecoded0 = [KendraClientTypes.DataSourceToIndexFieldMapping]()
            for structure0 in taskFieldMappingsContainer {
                if let structure0 = structure0 {
                    taskFieldMappingsDecoded0?.append(structure0)
                }
            }
        }
        taskFieldMappings = taskFieldMappingsDecoded0
        let commentFieldMappingsContainer = try containerValues.decodeIfPresent([KendraClientTypes.DataSourceToIndexFieldMapping?].self, forKey: .commentFieldMappings)
        var commentFieldMappingsDecoded0:[KendraClientTypes.DataSourceToIndexFieldMapping]? = nil
        if let commentFieldMappingsContainer = commentFieldMappingsContainer {
            commentFieldMappingsDecoded0 = [KendraClientTypes.DataSourceToIndexFieldMapping]()
            for structure0 in commentFieldMappingsContainer {
                if let structure0 = structure0 {
                    commentFieldMappingsDecoded0?.append(structure0)
                }
            }
        }
        commentFieldMappings = commentFieldMappingsDecoded0
        let webLinkFieldMappingsContainer = try containerValues.decodeIfPresent([KendraClientTypes.DataSourceToIndexFieldMapping?].self, forKey: .webLinkFieldMappings)
        var webLinkFieldMappingsDecoded0:[KendraClientTypes.DataSourceToIndexFieldMapping]? = nil
        if let webLinkFieldMappingsContainer = webLinkFieldMappingsContainer {
            webLinkFieldMappingsDecoded0 = [KendraClientTypes.DataSourceToIndexFieldMapping]()
            for structure0 in webLinkFieldMappingsContainer {
                if let structure0 = structure0 {
                    webLinkFieldMappingsDecoded0?.append(structure0)
                }
            }
        }
        webLinkFieldMappings = webLinkFieldMappingsDecoded0
        let inclusionPatternsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .inclusionPatterns)
        var inclusionPatternsDecoded0:[Swift.String]? = nil
        if let inclusionPatternsContainer = inclusionPatternsContainer {
            inclusionPatternsDecoded0 = [Swift.String]()
            for string0 in inclusionPatternsContainer {
                if let string0 = string0 {
                    inclusionPatternsDecoded0?.append(string0)
                }
            }
        }
        inclusionPatterns = inclusionPatternsDecoded0
        let exclusionPatternsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .exclusionPatterns)
        var exclusionPatternsDecoded0:[Swift.String]? = nil
        if let exclusionPatternsContainer = exclusionPatternsContainer {
            exclusionPatternsDecoded0 = [Swift.String]()
            for string0 in exclusionPatternsContainer {
                if let string0 = string0 {
                    exclusionPatternsDecoded0?.append(string0)
                }
            }
        }
        exclusionPatterns = exclusionPatternsDecoded0
        let vpcConfigurationDecoded = try containerValues.decodeIfPresent(KendraClientTypes.DataSourceVpcConfiguration.self, forKey: .vpcConfiguration)
        vpcConfiguration = vpcConfigurationDecoded
    }
}
