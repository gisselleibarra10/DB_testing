// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct UpdateReplicationJobInputBody: Swift.Equatable {
    let replicationJobId: Swift.String?
    let frequency: Swift.Int?
    let nextReplicationRunStartTime: ClientRuntime.Date?
    let licenseType: SmsClientTypes.LicenseType?
    let roleName: Swift.String?
    let description: Swift.String?
    let numberOfRecentAmisToKeep: Swift.Int?
    let encrypted: Swift.Bool?
    let kmsKeyId: Swift.String?
}

extension UpdateReplicationJobInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description
        case encrypted
        case frequency
        case kmsKeyId
        case licenseType
        case nextReplicationRunStartTime
        case numberOfRecentAmisToKeep
        case replicationJobId
        case roleName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let replicationJobIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .replicationJobId)
        replicationJobId = replicationJobIdDecoded
        let frequencyDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .frequency)
        frequency = frequencyDecoded
        let nextReplicationRunStartTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .nextReplicationRunStartTime)
        nextReplicationRunStartTime = nextReplicationRunStartTimeDecoded
        let licenseTypeDecoded = try containerValues.decodeIfPresent(SmsClientTypes.LicenseType.self, forKey: .licenseType)
        licenseType = licenseTypeDecoded
        let roleNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleName)
        roleName = roleNameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let numberOfRecentAmisToKeepDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .numberOfRecentAmisToKeep)
        numberOfRecentAmisToKeep = numberOfRecentAmisToKeepDecoded
        let encryptedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .encrypted)
        encrypted = encryptedDecoded
        let kmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kmsKeyId)
        kmsKeyId = kmsKeyIdDecoded
    }
}
