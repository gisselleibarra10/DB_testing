// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateAppInputBody: Swift.Equatable {
    let name: Swift.String?
    let description: Swift.String?
    let roleName: Swift.String?
    let clientToken: Swift.String?
    let serverGroups: [SmsClientTypes.ServerGroup]?
    let tags: [SmsClientTypes.Tag]?
}

extension CreateAppInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientToken
        case description
        case name
        case roleName
        case serverGroups
        case tags
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let roleNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleName)
        roleName = roleNameDecoded
        let clientTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientToken)
        clientToken = clientTokenDecoded
        let serverGroupsContainer = try containerValues.decodeIfPresent([SmsClientTypes.ServerGroup?].self, forKey: .serverGroups)
        var serverGroupsDecoded0:[SmsClientTypes.ServerGroup]? = nil
        if let serverGroupsContainer = serverGroupsContainer {
            serverGroupsDecoded0 = [SmsClientTypes.ServerGroup]()
            for structure0 in serverGroupsContainer {
                if let structure0 = structure0 {
                    serverGroupsDecoded0?.append(structure0)
                }
            }
        }
        serverGroups = serverGroupsDecoded0
        let tagsContainer = try containerValues.decodeIfPresent([SmsClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[SmsClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [SmsClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}
