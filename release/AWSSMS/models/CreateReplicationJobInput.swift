// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct CreateReplicationJobInput: Swift.Equatable {
    /// The description of the replication job.
    public var description: Swift.String?
    /// Indicates whether the replication job produces encrypted AMIs.
    public var encrypted: Swift.Bool?
    /// The time between consecutive replication runs, in hours.
    public var frequency: Swift.Int?
    /// The ID of the KMS key for replication jobs that produce encrypted AMIs. This value can be any of the following:
    ///
    /// * KMS key ID
    ///
    /// * KMS key alias
    ///
    /// * ARN referring to the KMS key ID
    ///
    /// * ARN referring to the KMS key alias
    ///
    ///
    /// If encrypted is true but a KMS key ID is not specified, the customer's default KMS key for Amazon EBS is used.
    public var kmsKeyId: Swift.String?
    /// The license type to be used for the AMI created by a successful replication run.
    public var licenseType: SmsClientTypes.LicenseType?
    /// The maximum number of SMS-created AMIs to retain. The oldest is deleted after the maximum number is reached and a new AMI is created.
    public var numberOfRecentAmisToKeep: Swift.Int?
    /// The name of the IAM role to be used by the Server Migration Service.
    public var roleName: Swift.String?
    /// Indicates whether to run the replication job one time.
    public var runOnce: Swift.Bool?
    /// The seed replication time.
    /// This member is required.
    public var seedReplicationTime: ClientRuntime.Date?
    /// The ID of the server.
    /// This member is required.
    public var serverId: Swift.String?

    public init (
        description: Swift.String? = nil,
        encrypted: Swift.Bool? = nil,
        frequency: Swift.Int? = nil,
        kmsKeyId: Swift.String? = nil,
        licenseType: SmsClientTypes.LicenseType? = nil,
        numberOfRecentAmisToKeep: Swift.Int? = nil,
        roleName: Swift.String? = nil,
        runOnce: Swift.Bool? = nil,
        seedReplicationTime: ClientRuntime.Date? = nil,
        serverId: Swift.String? = nil
    )
    {
        self.description = description
        self.encrypted = encrypted
        self.frequency = frequency
        self.kmsKeyId = kmsKeyId
        self.licenseType = licenseType
        self.numberOfRecentAmisToKeep = numberOfRecentAmisToKeep
        self.roleName = roleName
        self.runOnce = runOnce
        self.seedReplicationTime = seedReplicationTime
        self.serverId = serverId
    }
}
