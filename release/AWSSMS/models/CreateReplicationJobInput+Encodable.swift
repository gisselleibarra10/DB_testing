// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CreateReplicationJobInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description
        case encrypted
        case frequency
        case kmsKeyId
        case licenseType
        case numberOfRecentAmisToKeep
        case roleName
        case runOnce
        case seedReplicationTime
        case serverId
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let encrypted = self.encrypted {
            try encodeContainer.encode(encrypted, forKey: .encrypted)
        }
        if let frequency = self.frequency {
            try encodeContainer.encode(frequency, forKey: .frequency)
        }
        if let kmsKeyId = self.kmsKeyId {
            try encodeContainer.encode(kmsKeyId, forKey: .kmsKeyId)
        }
        if let licenseType = self.licenseType {
            try encodeContainer.encode(licenseType.rawValue, forKey: .licenseType)
        }
        if let numberOfRecentAmisToKeep = self.numberOfRecentAmisToKeep {
            try encodeContainer.encode(numberOfRecentAmisToKeep, forKey: .numberOfRecentAmisToKeep)
        }
        if let roleName = self.roleName {
            try encodeContainer.encode(roleName, forKey: .roleName)
        }
        if let runOnce = self.runOnce {
            try encodeContainer.encode(runOnce, forKey: .runOnce)
        }
        if let seedReplicationTime = self.seedReplicationTime {
            try encodeContainer.encode(seedReplicationTime.timeIntervalSince1970, forKey: .seedReplicationTime)
        }
        if let serverId = self.serverId {
            try encodeContainer.encode(serverId, forKey: .serverId)
        }
    }
}
