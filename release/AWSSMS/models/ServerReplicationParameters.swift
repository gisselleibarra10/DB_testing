// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SmsClientTypes {
    /// The replication parameters for replicating a server.
    public struct ServerReplicationParameters: Swift.Equatable {
        /// Indicates whether the replication job produces encrypted AMIs.
        public var encrypted: Swift.Bool?
        /// The frequency of creating replication jobs for the server.
        public var frequency: Swift.Int?
        /// The ID of the KMS key for replication jobs that produce encrypted AMIs. This value can be any of the following:
        ///
        /// * KMS key ID
        ///
        /// * KMS key alias
        ///
        /// * ARN referring to the KMS key ID
        ///
        /// * ARN referring to the KMS key alias
        ///
        ///
        /// If encrypted is enabled but a KMS key ID is not specified, the customer's default KMS key for Amazon EBS is used.
        public var kmsKeyId: Swift.String?
        /// The license type for creating a replication job for the server.
        public var licenseType: SmsClientTypes.LicenseType?
        /// The number of recent AMIs to keep when creating a replication job for this server.
        public var numberOfRecentAmisToKeep: Swift.Int?
        /// Indicates whether to run the replication job one time.
        public var runOnce: Swift.Bool?
        /// The seed time for creating a replication job for the server.
        public var seedTime: ClientRuntime.Date?

        public init (
            encrypted: Swift.Bool? = nil,
            frequency: Swift.Int? = nil,
            kmsKeyId: Swift.String? = nil,
            licenseType: SmsClientTypes.LicenseType? = nil,
            numberOfRecentAmisToKeep: Swift.Int? = nil,
            runOnce: Swift.Bool? = nil,
            seedTime: ClientRuntime.Date? = nil
        )
        {
            self.encrypted = encrypted
            self.frequency = frequency
            self.kmsKeyId = kmsKeyId
            self.licenseType = licenseType
            self.numberOfRecentAmisToKeep = numberOfRecentAmisToKeep
            self.runOnce = runOnce
            self.seedTime = seedTime
        }
    }

}
