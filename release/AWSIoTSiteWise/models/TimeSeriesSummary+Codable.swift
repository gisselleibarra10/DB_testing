// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension IoTSiteWiseClientTypes.TimeSeriesSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case alias
        case assetId
        case dataType
        case dataTypeSpec
        case propertyId
        case timeSeriesCreationDate
        case timeSeriesId
        case timeSeriesLastUpdateDate
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let alias = self.alias {
            try encodeContainer.encode(alias, forKey: .alias)
        }
        if let assetId = self.assetId {
            try encodeContainer.encode(assetId, forKey: .assetId)
        }
        if let dataType = self.dataType {
            try encodeContainer.encode(dataType.rawValue, forKey: .dataType)
        }
        if let dataTypeSpec = self.dataTypeSpec {
            try encodeContainer.encode(dataTypeSpec, forKey: .dataTypeSpec)
        }
        if let propertyId = self.propertyId {
            try encodeContainer.encode(propertyId, forKey: .propertyId)
        }
        if let timeSeriesCreationDate = self.timeSeriesCreationDate {
            try encodeContainer.encode(timeSeriesCreationDate.timeIntervalSince1970, forKey: .timeSeriesCreationDate)
        }
        if let timeSeriesId = self.timeSeriesId {
            try encodeContainer.encode(timeSeriesId, forKey: .timeSeriesId)
        }
        if let timeSeriesLastUpdateDate = self.timeSeriesLastUpdateDate {
            try encodeContainer.encode(timeSeriesLastUpdateDate.timeIntervalSince1970, forKey: .timeSeriesLastUpdateDate)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let assetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .assetId)
        assetId = assetIdDecoded
        let propertyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .propertyId)
        propertyId = propertyIdDecoded
        let aliasDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .alias)
        alias = aliasDecoded
        let timeSeriesIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .timeSeriesId)
        timeSeriesId = timeSeriesIdDecoded
        let dataTypeDecoded = try containerValues.decodeIfPresent(IoTSiteWiseClientTypes.PropertyDataType.self, forKey: .dataType)
        dataType = dataTypeDecoded
        let dataTypeSpecDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataTypeSpec)
        dataTypeSpec = dataTypeSpecDecoded
        let timeSeriesCreationDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .timeSeriesCreationDate)
        timeSeriesCreationDate = timeSeriesCreationDateDecoded
        let timeSeriesLastUpdateDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .timeSeriesLastUpdateDate)
        timeSeriesLastUpdateDate = timeSeriesLastUpdateDateDecoded
    }
}
