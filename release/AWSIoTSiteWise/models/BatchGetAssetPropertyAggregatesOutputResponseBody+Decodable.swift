// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct BatchGetAssetPropertyAggregatesOutputResponseBody: Swift.Equatable {
    let errorEntries: [IoTSiteWiseClientTypes.BatchGetAssetPropertyAggregatesErrorEntry]?
    let successEntries: [IoTSiteWiseClientTypes.BatchGetAssetPropertyAggregatesSuccessEntry]?
    let skippedEntries: [IoTSiteWiseClientTypes.BatchGetAssetPropertyAggregatesSkippedEntry]?
    let nextToken: Swift.String?
}

extension BatchGetAssetPropertyAggregatesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case errorEntries
        case nextToken
        case skippedEntries
        case successEntries
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let errorEntriesContainer = try containerValues.decodeIfPresent([IoTSiteWiseClientTypes.BatchGetAssetPropertyAggregatesErrorEntry?].self, forKey: .errorEntries)
        var errorEntriesDecoded0:[IoTSiteWiseClientTypes.BatchGetAssetPropertyAggregatesErrorEntry]? = nil
        if let errorEntriesContainer = errorEntriesContainer {
            errorEntriesDecoded0 = [IoTSiteWiseClientTypes.BatchGetAssetPropertyAggregatesErrorEntry]()
            for structure0 in errorEntriesContainer {
                if let structure0 = structure0 {
                    errorEntriesDecoded0?.append(structure0)
                }
            }
        }
        errorEntries = errorEntriesDecoded0
        let successEntriesContainer = try containerValues.decodeIfPresent([IoTSiteWiseClientTypes.BatchGetAssetPropertyAggregatesSuccessEntry?].self, forKey: .successEntries)
        var successEntriesDecoded0:[IoTSiteWiseClientTypes.BatchGetAssetPropertyAggregatesSuccessEntry]? = nil
        if let successEntriesContainer = successEntriesContainer {
            successEntriesDecoded0 = [IoTSiteWiseClientTypes.BatchGetAssetPropertyAggregatesSuccessEntry]()
            for structure0 in successEntriesContainer {
                if let structure0 = structure0 {
                    successEntriesDecoded0?.append(structure0)
                }
            }
        }
        successEntries = successEntriesDecoded0
        let skippedEntriesContainer = try containerValues.decodeIfPresent([IoTSiteWiseClientTypes.BatchGetAssetPropertyAggregatesSkippedEntry?].self, forKey: .skippedEntries)
        var skippedEntriesDecoded0:[IoTSiteWiseClientTypes.BatchGetAssetPropertyAggregatesSkippedEntry]? = nil
        if let skippedEntriesContainer = skippedEntriesContainer {
            skippedEntriesDecoded0 = [IoTSiteWiseClientTypes.BatchGetAssetPropertyAggregatesSkippedEntry]()
            for structure0 in skippedEntriesContainer {
                if let structure0 = structure0 {
                    skippedEntriesDecoded0?.append(structure0)
                }
            }
        }
        skippedEntries = skippedEntriesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
