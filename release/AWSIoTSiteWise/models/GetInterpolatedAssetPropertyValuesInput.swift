// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct GetInterpolatedAssetPropertyValuesInput: Swift.Equatable {
    /// The ID of the asset.
    public var assetId: Swift.String?
    /// The inclusive end of the range from which to interpolate data, expressed in seconds in Unix epoch time.
    /// This member is required.
    public var endTimeInSeconds: Swift.Int?
    /// The nanosecond offset converted from endTimeInSeconds.
    public var endTimeOffsetInNanos: Swift.Int?
    /// The time interval in seconds over which to interpolate data. Each interval starts when the previous one ends.
    /// This member is required.
    public var intervalInSeconds: Swift.Int?
    /// The query interval for the window, in seconds. IoT SiteWise computes each interpolated value by using data points from the timestamp of each interval, minus the window to the timestamp of each interval plus the window. If not specified, the window ranges between the start time minus the interval and the end time plus the interval.
    ///
    /// * If you specify a value for the intervalWindowInSeconds parameter, the value for the type parameter must be LINEAR_INTERPOLATION.
    ///
    /// * If a data point isn't found during the specified query window, IoT SiteWise won't return an interpolated value for the interval. This indicates that there's a gap in the ingested data points.
    ///
    ///
    /// For example, you can get the interpolated temperature values for a wind turbine every 24 hours over a duration of 7 days. If the interpolation starts on July 1, 2021, at 9 AM with a window of 2 hours, IoT SiteWise uses the data points from 7 AM (9 AM minus 2 hours) to 11 AM (9 AM plus 2 hours) on July 2, 2021 to compute the first interpolated value. Next, IoT SiteWise uses the data points from 7 AM (9 AM minus 2 hours) to 11 AM (9 AM plus 2 hours) on July 3, 2021 to compute the second interpolated value, and so on.
    public var intervalWindowInSeconds: Swift.Int?
    /// The maximum number of results to return for each paginated request. If not specified, the default value is 10.
    public var maxResults: Swift.Int?
    /// The token to be used for the next set of paginated results.
    public var nextToken: Swift.String?
    /// The alias that identifies the property, such as an OPC-UA server data stream path (for example, /company/windfarm/3/turbine/7/temperature). For more information, see [Mapping industrial data streams to asset properties](https://docs.aws.amazon.com/iot-sitewise/latest/userguide/connect-data-streams.html) in the IoT SiteWise User Guide.
    public var propertyAlias: Swift.String?
    /// The ID of the asset property.
    public var propertyId: Swift.String?
    /// The quality of the asset property value. You can use this parameter as a filter to choose only the asset property values that have a specific quality.
    /// This member is required.
    public var quality: IoTSiteWiseClientTypes.Quality?
    /// The exclusive start of the range from which to interpolate data, expressed in seconds in Unix epoch time.
    /// This member is required.
    public var startTimeInSeconds: Swift.Int?
    /// The nanosecond offset converted from startTimeInSeconds.
    public var startTimeOffsetInNanos: Swift.Int?
    /// The interpolation type. Valid values: LINEAR_INTERPOLATION | LOCF_INTERPOLATION
    ///
    /// * LINEAR_INTERPOLATION – Estimates missing data using [linear interpolation](https://en.wikipedia.org/wiki/Linear_interpolation). For example, you can use this operation to return the interpolated temperature values for a wind turbine every 24 hours over a duration of 7 days. If the interpolation starts July 1, 2021, at 9 AM, IoT SiteWise returns the first interpolated value on July 2, 2021, at 9 AM, the second interpolated value on July 3, 2021, at 9 AM, and so on.
    ///
    /// * LOCF_INTERPOLATION – Estimates missing data using last observation carried forward interpolation If no data point is found for an interval, IoT SiteWise returns the last observed data point for the previous interval and carries forward this interpolated value until a new data point is found. For example, you can get the state of an on-off valve every 24 hours over a duration of 7 days. If the interpolation starts July 1, 2021, at 9 AM, IoT SiteWise returns the last observed data point between July 1, 2021, at 9 AM and July 2, 2021, at 9 AM as the first interpolated value. If a data point isn't found after 9 AM on July 2, 2021, IoT SiteWise uses the same interpolated value for the rest of the days.
    /// This member is required.
    public var type: Swift.String?

    public init (
        assetId: Swift.String? = nil,
        endTimeInSeconds: Swift.Int? = nil,
        endTimeOffsetInNanos: Swift.Int? = nil,
        intervalInSeconds: Swift.Int? = nil,
        intervalWindowInSeconds: Swift.Int? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        propertyAlias: Swift.String? = nil,
        propertyId: Swift.String? = nil,
        quality: IoTSiteWiseClientTypes.Quality? = nil,
        startTimeInSeconds: Swift.Int? = nil,
        startTimeOffsetInNanos: Swift.Int? = nil,
        type: Swift.String? = nil
    )
    {
        self.assetId = assetId
        self.endTimeInSeconds = endTimeInSeconds
        self.endTimeOffsetInNanos = endTimeOffsetInNanos
        self.intervalInSeconds = intervalInSeconds
        self.intervalWindowInSeconds = intervalWindowInSeconds
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.propertyAlias = propertyAlias
        self.propertyId = propertyId
        self.quality = quality
        self.startTimeInSeconds = startTimeInSeconds
        self.startTimeOffsetInNanos = startTimeOffsetInNanos
        self.type = type
    }
}
