// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreatePortalInputBody: Swift.Equatable {
    let portalName: Swift.String?
    let portalDescription: Swift.String?
    let portalContactEmail: Swift.String?
    let clientToken: Swift.String?
    let portalLogoImageFile: IoTSiteWiseClientTypes.ImageFile?
    let roleArn: Swift.String?
    let tags: [Swift.String:Swift.String]?
    let portalAuthMode: IoTSiteWiseClientTypes.AuthMode?
    let notificationSenderEmail: Swift.String?
    let alarms: IoTSiteWiseClientTypes.Alarms?
}

extension CreatePortalInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case alarms
        case clientToken
        case notificationSenderEmail
        case portalAuthMode
        case portalContactEmail
        case portalDescription
        case portalLogoImageFile
        case portalName
        case roleArn
        case tags
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let portalNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .portalName)
        portalName = portalNameDecoded
        let portalDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .portalDescription)
        portalDescription = portalDescriptionDecoded
        let portalContactEmailDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .portalContactEmail)
        portalContactEmail = portalContactEmailDecoded
        let clientTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientToken)
        clientToken = clientTokenDecoded
        let portalLogoImageFileDecoded = try containerValues.decodeIfPresent(IoTSiteWiseClientTypes.ImageFile.self, forKey: .portalLogoImageFile)
        portalLogoImageFile = portalLogoImageFileDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
        let portalAuthModeDecoded = try containerValues.decodeIfPresent(IoTSiteWiseClientTypes.AuthMode.self, forKey: .portalAuthMode)
        portalAuthMode = portalAuthModeDecoded
        let notificationSenderEmailDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .notificationSenderEmail)
        notificationSenderEmail = notificationSenderEmailDecoded
        let alarmsDecoded = try containerValues.decodeIfPresent(IoTSiteWiseClientTypes.Alarms.self, forKey: .alarms)
        alarms = alarmsDecoded
    }
}
