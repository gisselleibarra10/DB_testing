// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension IoTSiteWiseClientTypes.Transform: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case expression
        case processingConfig
        case variables
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let expression = self.expression {
            try encodeContainer.encode(expression, forKey: .expression)
        }
        if let processingConfig = self.processingConfig {
            try encodeContainer.encode(processingConfig, forKey: .processingConfig)
        }
        if let variables = variables {
            var variablesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .variables)
            for expressionvariables0 in variables {
                try variablesContainer.encode(expressionvariables0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let expressionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .expression)
        expression = expressionDecoded
        let variablesContainer = try containerValues.decodeIfPresent([IoTSiteWiseClientTypes.ExpressionVariable?].self, forKey: .variables)
        var variablesDecoded0:[IoTSiteWiseClientTypes.ExpressionVariable]? = nil
        if let variablesContainer = variablesContainer {
            variablesDecoded0 = [IoTSiteWiseClientTypes.ExpressionVariable]()
            for structure0 in variablesContainer {
                if let structure0 = structure0 {
                    variablesDecoded0?.append(structure0)
                }
            }
        }
        variables = variablesDecoded0
        let processingConfigDecoded = try containerValues.decodeIfPresent(IoTSiteWiseClientTypes.TransformProcessingConfig.self, forKey: .processingConfig)
        processingConfig = processingConfigDecoded
    }
}
