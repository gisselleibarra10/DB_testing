// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension IoTSiteWiseClientTypes.BatchGetAssetPropertyAggregatesEntry: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case aggregateTypes
        case assetId
        case endDate
        case entryId
        case propertyAlias
        case propertyId
        case qualities
        case resolution
        case startDate
        case timeOrdering
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let aggregateTypes = aggregateTypes {
            var aggregateTypesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .aggregateTypes)
            for aggregatetypes0 in aggregateTypes {
                try aggregateTypesContainer.encode(aggregatetypes0.rawValue)
            }
        }
        if let assetId = self.assetId {
            try encodeContainer.encode(assetId, forKey: .assetId)
        }
        if let endDate = self.endDate {
            try encodeContainer.encode(endDate.timeIntervalSince1970, forKey: .endDate)
        }
        if let entryId = self.entryId {
            try encodeContainer.encode(entryId, forKey: .entryId)
        }
        if let propertyAlias = self.propertyAlias {
            try encodeContainer.encode(propertyAlias, forKey: .propertyAlias)
        }
        if let propertyId = self.propertyId {
            try encodeContainer.encode(propertyId, forKey: .propertyId)
        }
        if let qualities = qualities {
            var qualitiesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .qualities)
            for qualities0 in qualities {
                try qualitiesContainer.encode(qualities0.rawValue)
            }
        }
        if let resolution = self.resolution {
            try encodeContainer.encode(resolution, forKey: .resolution)
        }
        if let startDate = self.startDate {
            try encodeContainer.encode(startDate.timeIntervalSince1970, forKey: .startDate)
        }
        if let timeOrdering = self.timeOrdering {
            try encodeContainer.encode(timeOrdering.rawValue, forKey: .timeOrdering)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let entryIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .entryId)
        entryId = entryIdDecoded
        let assetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .assetId)
        assetId = assetIdDecoded
        let propertyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .propertyId)
        propertyId = propertyIdDecoded
        let propertyAliasDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .propertyAlias)
        propertyAlias = propertyAliasDecoded
        let aggregateTypesContainer = try containerValues.decodeIfPresent([IoTSiteWiseClientTypes.AggregateType?].self, forKey: .aggregateTypes)
        var aggregateTypesDecoded0:[IoTSiteWiseClientTypes.AggregateType]? = nil
        if let aggregateTypesContainer = aggregateTypesContainer {
            aggregateTypesDecoded0 = [IoTSiteWiseClientTypes.AggregateType]()
            for string0 in aggregateTypesContainer {
                if let string0 = string0 {
                    aggregateTypesDecoded0?.append(string0)
                }
            }
        }
        aggregateTypes = aggregateTypesDecoded0
        let resolutionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resolution)
        resolution = resolutionDecoded
        let startDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .startDate)
        startDate = startDateDecoded
        let endDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .endDate)
        endDate = endDateDecoded
        let qualitiesContainer = try containerValues.decodeIfPresent([IoTSiteWiseClientTypes.Quality?].self, forKey: .qualities)
        var qualitiesDecoded0:[IoTSiteWiseClientTypes.Quality]? = nil
        if let qualitiesContainer = qualitiesContainer {
            qualitiesDecoded0 = [IoTSiteWiseClientTypes.Quality]()
            for string0 in qualitiesContainer {
                if let string0 = string0 {
                    qualitiesDecoded0?.append(string0)
                }
            }
        }
        qualities = qualitiesDecoded0
        let timeOrderingDecoded = try containerValues.decodeIfPresent(IoTSiteWiseClientTypes.TimeOrdering.self, forKey: .timeOrdering)
        timeOrdering = timeOrderingDecoded
    }
}
