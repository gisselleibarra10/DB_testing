// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// Represents the input to [CreateEventSubscription].
public struct CreateEventSubscriptionInput: Swift.Equatable {
    /// A Boolean value; set to true to activate the subscription, set to false to create the subscription but not active it.
    public var enabled: Swift.Bool?
    /// A list of event categories for a SourceType that you want to subscribe to.
    public var eventCategories: [Swift.String]?
    /// The Amazon Resource Name (ARN) of the SNS topic created for event notification. Amazon SNS creates the ARN when you create a topic and subscribe to it.
    /// This member is required.
    public var snsTopicArn: Swift.String?
    /// The list of identifiers of the event sources for which events are returned. If not specified, then all sources are included in the response. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it can't end with a hyphen or contain two consecutive hyphens. Constraints:
    ///
    /// * If SourceIds are provided, SourceType must also be provided.
    ///
    /// * If the source type is an instance, a DBInstanceIdentifier must be provided.
    ///
    /// * If the source type is a security group, a DBSecurityGroupName must be provided.
    ///
    /// * If the source type is a parameter group, a DBParameterGroupName must be provided.
    ///
    /// * If the source type is a snapshot, a DBSnapshotIdentifier must be provided.
    public var sourceIds: [Swift.String]?
    /// The type of source that is generating the events. For example, if you want to be notified of events generated by an instance, you would set this parameter to db-instance. If this value is not specified, all events are returned. Valid values: db-instance, db-cluster, db-parameter-group, db-security-group, db-cluster-snapshot
    public var sourceType: Swift.String?
    /// The name of the subscription. Constraints: The name must be fewer than 255 characters.
    /// This member is required.
    public var subscriptionName: Swift.String?
    /// The tags to be assigned to the event subscription.
    public var tags: [DocDbClientTypes.Tag]?

    public init (
        enabled: Swift.Bool? = nil,
        eventCategories: [Swift.String]? = nil,
        snsTopicArn: Swift.String? = nil,
        sourceIds: [Swift.String]? = nil,
        sourceType: Swift.String? = nil,
        subscriptionName: Swift.String? = nil,
        tags: [DocDbClientTypes.Tag]? = nil
    )
    {
        self.enabled = enabled
        self.eventCategories = eventCategories
        self.snsTopicArn = snsTopicArn
        self.sourceIds = sourceIds
        self.sourceType = sourceType
        self.subscriptionName = subscriptionName
        self.tags = tags
    }
}
