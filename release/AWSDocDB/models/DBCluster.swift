// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension DocDbClientTypes {
    /// Detailed information about a cluster.
    public struct DBCluster: Swift.Equatable {
        /// Provides a list of the Identity and Access Management (IAM) roles that are associated with the cluster. (IAM) roles that are associated with a cluster grant permission for the cluster to access other Amazon Web Services services on your behalf.
        public var associatedRoles: [DocDbClientTypes.DBClusterRole]?
        /// Provides the list of Amazon EC2 Availability Zones that instances in the cluster can be created in.
        public var availabilityZones: [Swift.String]?
        /// Specifies the number of days for which automatic snapshots are retained.
        public var backupRetentionPeriod: Swift.Int?
        /// Identifies the clone group to which the DB cluster is associated.
        public var cloneGroupId: Swift.String?
        /// Specifies the time when the cluster was created, in Universal Coordinated Time (UTC).
        public var clusterCreateTime: ClientRuntime.Date?
        /// The Amazon Resource Name (ARN) for the cluster.
        public var dBClusterArn: Swift.String?
        /// Contains a user-supplied cluster identifier. This identifier is the unique key that identifies a cluster.
        public var dBClusterIdentifier: Swift.String?
        /// Provides the list of instances that make up the cluster.
        public var dBClusterMembers: [DocDbClientTypes.DBClusterMember]?
        /// Specifies the name of the cluster parameter group for the cluster.
        public var dBClusterParameterGroup: Swift.String?
        /// Specifies information on the subnet group that is associated with the cluster, including the name, description, and subnets in the subnet group.
        public var dBSubnetGroup: Swift.String?
        /// The Amazon Web Services Region-unique, immutable identifier for the cluster. This identifier is found in CloudTrail log entries whenever the KMS key for the cluster is accessed.
        public var dbClusterResourceId: Swift.String?
        /// Specifies whether this cluster can be deleted. If DeletionProtection is enabled, the cluster cannot be deleted unless it is modified and DeletionProtection is disabled. DeletionProtection protects clusters from being accidentally deleted.
        public var deletionProtection: Swift.Bool
        /// The earliest time to which a database can be restored with point-in-time restore.
        public var earliestRestorableTime: ClientRuntime.Date?
        /// A list of log types that this cluster is configured to export to Amazon CloudWatch Logs.
        public var enabledCloudwatchLogsExports: [Swift.String]?
        /// Specifies the connection endpoint for the primary instance of the cluster.
        public var endpoint: Swift.String?
        /// Provides the name of the database engine to be used for this cluster.
        public var engine: Swift.String?
        /// Indicates the database engine version.
        public var engineVersion: Swift.String?
        /// Specifies the ID that Amazon Route 53 assigns when you create a hosted zone.
        public var hostedZoneId: Swift.String?
        /// If StorageEncrypted is true, the KMS key identifier for the encrypted cluster.
        public var kmsKeyId: Swift.String?
        /// Specifies the latest time to which a database can be restored with point-in-time restore.
        public var latestRestorableTime: ClientRuntime.Date?
        /// Contains the master user name for the cluster.
        public var masterUsername: Swift.String?
        /// Specifies whether the cluster has instances in multiple Availability Zones.
        public var multiAZ: Swift.Bool
        /// Specifies the progress of the operation as a percentage.
        public var percentProgress: Swift.String?
        /// Specifies the port that the database engine is listening on.
        public var port: Swift.Int?
        /// Specifies the daily time range during which automated backups are created if automated backups are enabled, as determined by the BackupRetentionPeriod.
        public var preferredBackupWindow: Swift.String?
        /// Specifies the weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).
        public var preferredMaintenanceWindow: Swift.String?
        /// Contains one or more identifiers of the secondary clusters that are associated with this cluster.
        public var readReplicaIdentifiers: [Swift.String]?
        /// The reader endpoint for the cluster. The reader endpoint for a cluster load balances connections across the Amazon DocumentDB replicas that are available in a cluster. As clients request new connections to the reader endpoint, Amazon DocumentDB distributes the connection requests among the Amazon DocumentDB replicas in the cluster. This functionality can help balance your read workload across multiple Amazon DocumentDB replicas in your cluster. If a failover occurs, and the Amazon DocumentDB replica that you are connected to is promoted to be the primary instance, your connection is dropped. To continue sending your read workload to other Amazon DocumentDB replicas in the cluster, you can then reconnect to the reader endpoint.
        public var readerEndpoint: Swift.String?
        /// Contains the identifier of the source cluster if this cluster is a secondary cluster.
        public var replicationSourceIdentifier: Swift.String?
        /// Specifies the current state of this cluster.
        public var status: Swift.String?
        /// Specifies whether the cluster is encrypted.
        public var storageEncrypted: Swift.Bool
        /// Provides a list of virtual private cloud (VPC) security groups that the cluster belongs to.
        public var vpcSecurityGroups: [DocDbClientTypes.VpcSecurityGroupMembership]?

        public init (
            associatedRoles: [DocDbClientTypes.DBClusterRole]? = nil,
            availabilityZones: [Swift.String]? = nil,
            backupRetentionPeriod: Swift.Int? = nil,
            cloneGroupId: Swift.String? = nil,
            clusterCreateTime: ClientRuntime.Date? = nil,
            dBClusterArn: Swift.String? = nil,
            dBClusterIdentifier: Swift.String? = nil,
            dBClusterMembers: [DocDbClientTypes.DBClusterMember]? = nil,
            dBClusterParameterGroup: Swift.String? = nil,
            dBSubnetGroup: Swift.String? = nil,
            dbClusterResourceId: Swift.String? = nil,
            deletionProtection: Swift.Bool = false,
            earliestRestorableTime: ClientRuntime.Date? = nil,
            enabledCloudwatchLogsExports: [Swift.String]? = nil,
            endpoint: Swift.String? = nil,
            engine: Swift.String? = nil,
            engineVersion: Swift.String? = nil,
            hostedZoneId: Swift.String? = nil,
            kmsKeyId: Swift.String? = nil,
            latestRestorableTime: ClientRuntime.Date? = nil,
            masterUsername: Swift.String? = nil,
            multiAZ: Swift.Bool = false,
            percentProgress: Swift.String? = nil,
            port: Swift.Int? = nil,
            preferredBackupWindow: Swift.String? = nil,
            preferredMaintenanceWindow: Swift.String? = nil,
            readReplicaIdentifiers: [Swift.String]? = nil,
            readerEndpoint: Swift.String? = nil,
            replicationSourceIdentifier: Swift.String? = nil,
            status: Swift.String? = nil,
            storageEncrypted: Swift.Bool = false,
            vpcSecurityGroups: [DocDbClientTypes.VpcSecurityGroupMembership]? = nil
        )
        {
            self.associatedRoles = associatedRoles
            self.availabilityZones = availabilityZones
            self.backupRetentionPeriod = backupRetentionPeriod
            self.cloneGroupId = cloneGroupId
            self.clusterCreateTime = clusterCreateTime
            self.dBClusterArn = dBClusterArn
            self.dBClusterIdentifier = dBClusterIdentifier
            self.dBClusterMembers = dBClusterMembers
            self.dBClusterParameterGroup = dBClusterParameterGroup
            self.dBSubnetGroup = dBSubnetGroup
            self.dbClusterResourceId = dbClusterResourceId
            self.deletionProtection = deletionProtection
            self.earliestRestorableTime = earliestRestorableTime
            self.enabledCloudwatchLogsExports = enabledCloudwatchLogsExports
            self.endpoint = endpoint
            self.engine = engine
            self.engineVersion = engineVersion
            self.hostedZoneId = hostedZoneId
            self.kmsKeyId = kmsKeyId
            self.latestRestorableTime = latestRestorableTime
            self.masterUsername = masterUsername
            self.multiAZ = multiAZ
            self.percentProgress = percentProgress
            self.port = port
            self.preferredBackupWindow = preferredBackupWindow
            self.preferredMaintenanceWindow = preferredMaintenanceWindow
            self.readReplicaIdentifiers = readReplicaIdentifiers
            self.readerEndpoint = readerEndpoint
            self.replicationSourceIdentifier = replicationSourceIdentifier
            self.status = status
            self.storageEncrypted = storageEncrypted
            self.vpcSecurityGroups = vpcSecurityGroups
        }
    }

}
