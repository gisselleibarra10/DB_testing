// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// Represents the input to [CreateDBCluster].
public struct CreateDBClusterInput: Swift.Equatable {
    /// A list of Amazon EC2 Availability Zones that instances in the cluster can be created in.
    public var availabilityZones: [Swift.String]?
    /// The number of days for which automated backups are retained. You must specify a minimum value of 1. Default: 1 Constraints:
    ///
    /// * Must be a value from 1 to 35.
    public var backupRetentionPeriod: Swift.Int?
    /// The cluster identifier. This parameter is stored as a lowercase string. Constraints:
    ///
    /// * Must contain from 1 to 63 letters, numbers, or hyphens.
    ///
    /// * The first character must be a letter.
    ///
    /// * Cannot end with a hyphen or contain two consecutive hyphens.
    ///
    ///
    /// Example: my-cluster
    /// This member is required.
    public var dBClusterIdentifier: Swift.String?
    /// The name of the cluster parameter group to associate with this cluster.
    public var dBClusterParameterGroupName: Swift.String?
    /// A subnet group to associate with this cluster. Constraints: Must match the name of an existing DBSubnetGroup. Must not be default. Example: mySubnetgroup
    public var dBSubnetGroupName: Swift.String?
    /// Specifies whether this cluster can be deleted. If DeletionProtection is enabled, the cluster cannot be deleted unless it is modified and DeletionProtection is disabled. DeletionProtection protects clusters from being accidentally deleted.
    public var deletionProtection: Swift.Bool?
    /// A list of log types that need to be enabled for exporting to Amazon CloudWatch Logs. You can enable audit logs or profiler logs. For more information, see [ Auditing Amazon DocumentDB Events](https://docs.aws.amazon.com/documentdb/latest/developerguide/event-auditing.html) and [ Profiling Amazon DocumentDB Operations](https://docs.aws.amazon.com/documentdb/latest/developerguide/profiling.html).
    public var enableCloudwatchLogsExports: [Swift.String]?
    /// The name of the database engine to be used for this cluster. Valid values: docdb
    /// This member is required.
    public var engine: Swift.String?
    /// The version number of the database engine to use. The --engine-version will default to the latest major engine version. For production workloads, we recommend explicitly declaring this parameter with the intended major engine version.
    public var engineVersion: Swift.String?
    /// The cluster identifier of the new global cluster.
    public var globalClusterIdentifier: Swift.String?
    /// The KMS key identifier for an encrypted cluster. The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a cluster using the same Amazon Web Services account that owns the KMS encryption key that is used to encrypt the new cluster, you can use the KMS key alias instead of the ARN for the KMS encryption key. If an encryption key is not specified in KmsKeyId:
    ///
    /// * If the StorageEncrypted parameter is true, Amazon DocumentDB uses your default encryption key.
    ///
    ///
    /// KMS creates the default encryption key for your Amazon Web Services account. Your Amazon Web Services account has a different default encryption key for each Amazon Web Services Regions.
    public var kmsKeyId: Swift.String?
    /// The password for the master database user. This password can contain any printable ASCII character except forward slash (/), double quote ("), or the "at" symbol (@). Constraints: Must contain from 8 to 100 characters.
    public var masterUserPassword: Swift.String?
    /// The name of the master user for the cluster. Constraints:
    ///
    /// * Must be from 1 to 63 letters or numbers.
    ///
    /// * The first character must be a letter.
    ///
    /// * Cannot be a reserved word for the chosen database engine.
    public var masterUsername: Swift.String?
    /// The port number on which the instances in the cluster accept connections.
    public var port: Swift.Int?
    /// Not currently supported.
    public var preSignedUrl: Swift.String?
    /// The daily time range during which automated backups are created if automated backups are enabled using the BackupRetentionPeriod parameter. The default is a 30-minute window selected at random from an 8-hour block of time for each Amazon Web Services Region. Constraints:
    ///
    /// * Must be in the format hh24:mi-hh24:mi.
    ///
    /// * Must be in Universal Coordinated Time (UTC).
    ///
    /// * Must not conflict with the preferred maintenance window.
    ///
    /// * Must be at least 30 minutes.
    public var preferredBackupWindow: Swift.String?
    /// The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC). Format: ddd:hh24:mi-ddd:hh24:mi The default is a 30-minute window selected at random from an 8-hour block of time for each Amazon Web Services Region, occurring on a random day of the week. Valid days: Mon, Tue, Wed, Thu, Fri, Sat, Sun Constraints: Minimum 30-minute window.
    public var preferredMaintenanceWindow: Swift.String?
    /// Specifies whether the cluster is encrypted.
    public var storageEncrypted: Swift.Bool?
    /// The tags to be assigned to the cluster.
    public var tags: [DocDbClientTypes.Tag]?
    /// A list of EC2 VPC security groups to associate with this cluster.
    public var vpcSecurityGroupIds: [Swift.String]?

    public init (
        availabilityZones: [Swift.String]? = nil,
        backupRetentionPeriod: Swift.Int? = nil,
        dBClusterIdentifier: Swift.String? = nil,
        dBClusterParameterGroupName: Swift.String? = nil,
        dBSubnetGroupName: Swift.String? = nil,
        deletionProtection: Swift.Bool? = nil,
        enableCloudwatchLogsExports: [Swift.String]? = nil,
        engine: Swift.String? = nil,
        engineVersion: Swift.String? = nil,
        globalClusterIdentifier: Swift.String? = nil,
        kmsKeyId: Swift.String? = nil,
        masterUserPassword: Swift.String? = nil,
        masterUsername: Swift.String? = nil,
        port: Swift.Int? = nil,
        preSignedUrl: Swift.String? = nil,
        preferredBackupWindow: Swift.String? = nil,
        preferredMaintenanceWindow: Swift.String? = nil,
        storageEncrypted: Swift.Bool? = nil,
        tags: [DocDbClientTypes.Tag]? = nil,
        vpcSecurityGroupIds: [Swift.String]? = nil
    )
    {
        self.availabilityZones = availabilityZones
        self.backupRetentionPeriod = backupRetentionPeriod
        self.dBClusterIdentifier = dBClusterIdentifier
        self.dBClusterParameterGroupName = dBClusterParameterGroupName
        self.dBSubnetGroupName = dBSubnetGroupName
        self.deletionProtection = deletionProtection
        self.enableCloudwatchLogsExports = enableCloudwatchLogsExports
        self.engine = engine
        self.engineVersion = engineVersion
        self.globalClusterIdentifier = globalClusterIdentifier
        self.kmsKeyId = kmsKeyId
        self.masterUserPassword = masterUserPassword
        self.masterUsername = masterUsername
        self.port = port
        self.preSignedUrl = preSignedUrl
        self.preferredBackupWindow = preferredBackupWindow
        self.preferredMaintenanceWindow = preferredMaintenanceWindow
        self.storageEncrypted = storageEncrypted
        self.tags = tags
        self.vpcSecurityGroupIds = vpcSecurityGroupIds
    }
}
