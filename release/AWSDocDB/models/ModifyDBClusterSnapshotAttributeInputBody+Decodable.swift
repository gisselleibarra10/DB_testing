// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ModifyDBClusterSnapshotAttributeInputBody: Swift.Equatable {
    let dBClusterSnapshotIdentifier: Swift.String?
    let attributeName: Swift.String?
    let valuesToAdd: [Swift.String]?
    let valuesToRemove: [Swift.String]?
}

extension ModifyDBClusterSnapshotAttributeInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attributeName = "AttributeName"
        case dBClusterSnapshotIdentifier = "DBClusterSnapshotIdentifier"
        case valuesToAdd = "ValuesToAdd"
        case valuesToRemove = "ValuesToRemove"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dBClusterSnapshotIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dBClusterSnapshotIdentifier)
        dBClusterSnapshotIdentifier = dBClusterSnapshotIdentifierDecoded
        let attributeNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .attributeName)
        attributeName = attributeNameDecoded
        if containerValues.contains(.valuesToAdd) {
            struct KeyVal0{struct AttributeValue{}}
            let valuesToAddWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.AttributeValue>.CodingKeys.self, forKey: .valuesToAdd)
            if let valuesToAddWrappedContainer = valuesToAddWrappedContainer {
                let valuesToAddContainer = try valuesToAddWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var valuesToAddBuffer:[Swift.String]? = nil
                if let valuesToAddContainer = valuesToAddContainer {
                    valuesToAddBuffer = [Swift.String]()
                    for stringContainer0 in valuesToAddContainer {
                        valuesToAddBuffer?.append(stringContainer0)
                    }
                }
                valuesToAdd = valuesToAddBuffer
            } else {
                valuesToAdd = []
            }
        } else {
            valuesToAdd = nil
        }
        if containerValues.contains(.valuesToRemove) {
            struct KeyVal0{struct AttributeValue{}}
            let valuesToRemoveWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.AttributeValue>.CodingKeys.self, forKey: .valuesToRemove)
            if let valuesToRemoveWrappedContainer = valuesToRemoveWrappedContainer {
                let valuesToRemoveContainer = try valuesToRemoveWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var valuesToRemoveBuffer:[Swift.String]? = nil
                if let valuesToRemoveContainer = valuesToRemoveContainer {
                    valuesToRemoveBuffer = [Swift.String]()
                    for stringContainer0 in valuesToRemoveContainer {
                        valuesToRemoveBuffer?.append(stringContainer0)
                    }
                }
                valuesToRemove = valuesToRemoveBuffer
            } else {
                valuesToRemove = []
            }
        } else {
            valuesToRemove = nil
        }
    }
}
