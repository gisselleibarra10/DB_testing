// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CodeBuildClientTypes.ProjectEnvironment: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case certificate
        case computeType
        case environmentVariables
        case image
        case imagePullCredentialsType
        case privilegedMode
        case registryCredential
        case type
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let certificate = self.certificate {
            try encodeContainer.encode(certificate, forKey: .certificate)
        }
        if let computeType = self.computeType {
            try encodeContainer.encode(computeType.rawValue, forKey: .computeType)
        }
        if let environmentVariables = environmentVariables {
            var environmentVariablesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .environmentVariables)
            for environmentvariables0 in environmentVariables {
                try environmentVariablesContainer.encode(environmentvariables0)
            }
        }
        if let image = self.image {
            try encodeContainer.encode(image, forKey: .image)
        }
        if let imagePullCredentialsType = self.imagePullCredentialsType {
            try encodeContainer.encode(imagePullCredentialsType.rawValue, forKey: .imagePullCredentialsType)
        }
        if let privilegedMode = self.privilegedMode {
            try encodeContainer.encode(privilegedMode, forKey: .privilegedMode)
        }
        if let registryCredential = self.registryCredential {
            try encodeContainer.encode(registryCredential, forKey: .registryCredential)
        }
        if let type = self.type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let typeDecoded = try containerValues.decodeIfPresent(CodeBuildClientTypes.EnvironmentType.self, forKey: .type)
        type = typeDecoded
        let imageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .image)
        image = imageDecoded
        let computeTypeDecoded = try containerValues.decodeIfPresent(CodeBuildClientTypes.ComputeType.self, forKey: .computeType)
        computeType = computeTypeDecoded
        let environmentVariablesContainer = try containerValues.decodeIfPresent([CodeBuildClientTypes.EnvironmentVariable?].self, forKey: .environmentVariables)
        var environmentVariablesDecoded0:[CodeBuildClientTypes.EnvironmentVariable]? = nil
        if let environmentVariablesContainer = environmentVariablesContainer {
            environmentVariablesDecoded0 = [CodeBuildClientTypes.EnvironmentVariable]()
            for structure0 in environmentVariablesContainer {
                if let structure0 = structure0 {
                    environmentVariablesDecoded0?.append(structure0)
                }
            }
        }
        environmentVariables = environmentVariablesDecoded0
        let privilegedModeDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .privilegedMode)
        privilegedMode = privilegedModeDecoded
        let certificateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .certificate)
        certificate = certificateDecoded
        let registryCredentialDecoded = try containerValues.decodeIfPresent(CodeBuildClientTypes.RegistryCredential.self, forKey: .registryCredential)
        registryCredential = registryCredentialDecoded
        let imagePullCredentialsTypeDecoded = try containerValues.decodeIfPresent(CodeBuildClientTypes.ImagePullCredentialsType.self, forKey: .imagePullCredentialsType)
        imagePullCredentialsType = imagePullCredentialsTypeDecoded
    }
}
