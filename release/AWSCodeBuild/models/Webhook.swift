// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CodeBuildClientTypes {
    /// Information about a webhook that connects repository events to a build project in CodeBuild.
    public struct Webhook: Swift.Equatable {
        /// A regular expression used to determine which repository branches are built when a webhook is triggered. If the name of a branch matches the regular expression, then it is built. If branchFilter is empty, then all branches are built. It is recommended that you use filterGroups instead of branchFilter.
        public var branchFilter: Swift.String?
        /// Specifies the type of build this webhook will trigger.
        public var buildType: CodeBuildClientTypes.WebhookBuildType?
        /// An array of arrays of WebhookFilter objects used to determine which webhooks are triggered. At least one WebhookFilter in the array must specify EVENT as its type. For a build to be triggered, at least one filter group in the filterGroups array must pass. For a filter group to pass, each of its filters must pass.
        public var filterGroups: [[CodeBuildClientTypes.WebhookFilter]]?
        /// A timestamp that indicates the last time a repository's secret token was modified.
        public var lastModifiedSecret: ClientRuntime.Date?
        /// The CodeBuild endpoint where webhook events are sent.
        public var payloadUrl: Swift.String?
        /// The secret token of the associated repository. A Bitbucket webhook does not support secret.
        public var secret: Swift.String?
        /// The URL to the webhook.
        public var url: Swift.String?

        public init (
            branchFilter: Swift.String? = nil,
            buildType: CodeBuildClientTypes.WebhookBuildType? = nil,
            filterGroups: [[CodeBuildClientTypes.WebhookFilter]]? = nil,
            lastModifiedSecret: ClientRuntime.Date? = nil,
            payloadUrl: Swift.String? = nil,
            secret: Swift.String? = nil,
            url: Swift.String? = nil
        )
        {
            self.branchFilter = branchFilter
            self.buildType = buildType
            self.filterGroups = filterGroups
            self.lastModifiedSecret = lastModifiedSecret
            self.payloadUrl = payloadUrl
            self.secret = secret
            self.url = url
        }
    }

}
