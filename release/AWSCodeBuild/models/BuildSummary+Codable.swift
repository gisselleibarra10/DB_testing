// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CodeBuildClientTypes.BuildSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn
        case buildStatus
        case primaryArtifact
        case requestedOn
        case secondaryArtifacts
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = self.arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let buildStatus = self.buildStatus {
            try encodeContainer.encode(buildStatus.rawValue, forKey: .buildStatus)
        }
        if let primaryArtifact = self.primaryArtifact {
            try encodeContainer.encode(primaryArtifact, forKey: .primaryArtifact)
        }
        if let requestedOn = self.requestedOn {
            try encodeContainer.encode(requestedOn.timeIntervalSince1970, forKey: .requestedOn)
        }
        if let secondaryArtifacts = secondaryArtifacts {
            var secondaryArtifactsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .secondaryArtifacts)
            for resolvedsecondaryartifacts0 in secondaryArtifacts {
                try secondaryArtifactsContainer.encode(resolvedsecondaryartifacts0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let requestedOnDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .requestedOn)
        requestedOn = requestedOnDecoded
        let buildStatusDecoded = try containerValues.decodeIfPresent(CodeBuildClientTypes.StatusType.self, forKey: .buildStatus)
        buildStatus = buildStatusDecoded
        let primaryArtifactDecoded = try containerValues.decodeIfPresent(CodeBuildClientTypes.ResolvedArtifact.self, forKey: .primaryArtifact)
        primaryArtifact = primaryArtifactDecoded
        let secondaryArtifactsContainer = try containerValues.decodeIfPresent([CodeBuildClientTypes.ResolvedArtifact?].self, forKey: .secondaryArtifacts)
        var secondaryArtifactsDecoded0:[CodeBuildClientTypes.ResolvedArtifact]? = nil
        if let secondaryArtifactsContainer = secondaryArtifactsContainer {
            secondaryArtifactsDecoded0 = [CodeBuildClientTypes.ResolvedArtifact]()
            for structure0 in secondaryArtifactsContainer {
                if let structure0 = structure0 {
                    secondaryArtifactsDecoded0?.append(structure0)
                }
            }
        }
        secondaryArtifacts = secondaryArtifactsDecoded0
    }
}
