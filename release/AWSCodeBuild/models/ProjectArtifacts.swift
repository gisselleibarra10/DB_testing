// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension CodeBuildClientTypes {
    /// Information about the build output artifacts for the build project.
    public struct ProjectArtifacts: Swift.Equatable {
        /// An identifier for this artifact definition.
        public var artifactIdentifier: Swift.String?
        /// Specifies the bucket owner's access for objects that another account uploads to their Amazon S3 bucket. By default, only the account that uploads the objects to the bucket has access to these objects. This property allows you to give the bucket owner access to these objects. To use this property, your CodeBuild service role must have the s3:PutBucketAcl permission. This permission allows CodeBuild to modify the access control list for the bucket. This property can be one of the following values: NONE The bucket owner does not have access to the objects. This is the default. READ_ONLY The bucket owner has read-only access to the objects. The uploading account retains ownership of the objects. FULL The bucket owner has full access to the objects. Object ownership is determined by the following criteria:
        ///
        /// * If the bucket is configured with the Bucket owner preferred setting, the bucket owner owns the objects. The uploading account will have object access as specified by the bucket's policy.
        ///
        /// * Otherwise, the uploading account retains ownership of the objects.
        ///
        ///
        /// For more information about Amazon S3 object ownership, see [Controlling ownership of uploaded objects using S3 Object Ownership](https://docs.aws.amazon.com/AmazonS3/latest/userguide/about-object-ownership.html) in the Amazon Simple Storage Service User Guide.
        public var bucketOwnerAccess: CodeBuildClientTypes.BucketOwnerAccess?
        /// Set to true if you do not want your output artifacts encrypted. This option is valid only if your artifacts type is Amazon S3. If this is set with another artifacts type, an invalidInputException is thrown.
        public var encryptionDisabled: Swift.Bool?
        /// Information about the build output artifact location:
        ///
        /// * If type is set to CODEPIPELINE, CodePipeline ignores this value if specified. This is because CodePipeline manages its build output locations instead of CodeBuild.
        ///
        /// * If type is set to NO_ARTIFACTS, this value is ignored if specified, because no build output is produced.
        ///
        /// * If type is set to S3, this is the name of the output bucket.
        public var location: Swift.String?
        /// Along with path and namespaceType, the pattern that CodeBuild uses to name and store the output artifact:
        ///
        /// * If type is set to CODEPIPELINE, CodePipeline ignores this value if specified. This is because CodePipeline manages its build output names instead of CodeBuild.
        ///
        /// * If type is set to NO_ARTIFACTS, this value is ignored if specified, because no build output is produced.
        ///
        /// * If type is set to S3, this is the name of the output artifact object. If you set the name to be a forward slash ("/"), the artifact is stored in the root of the output bucket.
        ///
        ///
        /// For example:
        ///
        /// * If path is set to MyArtifacts, namespaceType is set to BUILD_ID, and name is set to MyArtifact.zip, then the output artifact is stored in MyArtifacts//MyArtifact.zip.
        ///
        /// * If path is empty, namespaceType is set to NONE, and name is set to "/", the output artifact is stored in the root of the output bucket.
        ///
        /// * If path is set to MyArtifacts, namespaceType is set to BUILD_ID, and name is set to "/", the output artifact is stored in MyArtifacts/.
        public var name: Swift.String?
        /// Along with path and name, the pattern that CodeBuild uses to determine the name and location to store the output artifact:
        ///
        /// * If type is set to CODEPIPELINE, CodePipeline ignores this value if specified. This is because CodePipeline manages its build output names instead of CodeBuild.
        ///
        /// * If type is set to NO_ARTIFACTS, this value is ignored if specified, because no build output is produced.
        ///
        /// * If type is set to S3, valid values include:
        ///
        /// * BUILD_ID: Include the build ID in the location of the build output artifact.
        ///
        /// * NONE: Do not include the build ID. This is the default if namespaceType is not specified.
        ///
        ///
        ///
        ///
        ///
        /// For example, if path is set to MyArtifacts, namespaceType is set to BUILD_ID, and name is set to MyArtifact.zip, the output artifact is stored in MyArtifacts//MyArtifact.zip.
        public var namespaceType: CodeBuildClientTypes.ArtifactNamespace?
        /// If this flag is set, a name specified in the buildspec file overrides the artifact name. The name specified in a buildspec file is calculated at build time and uses the Shell Command Language. For example, you can append a date and time to your artifact name so that it is always unique.
        public var overrideArtifactName: Swift.Bool?
        /// The type of build output artifact to create:
        ///
        /// * If type is set to CODEPIPELINE, CodePipeline ignores this value if specified. This is because CodePipeline manages its build output artifacts instead of CodeBuild.
        ///
        /// * If type is set to NO_ARTIFACTS, this value is ignored if specified, because no build output is produced.
        ///
        /// * If type is set to S3, valid values include:
        ///
        /// * NONE: CodeBuild creates in the output bucket a folder that contains the build output. This is the default if packaging is not specified.
        ///
        /// * ZIP: CodeBuild creates in the output bucket a ZIP file that contains the build output.
        public var packaging: CodeBuildClientTypes.ArtifactPackaging?
        /// Along with namespaceType and name, the pattern that CodeBuild uses to name and store the output artifact:
        ///
        /// * If type is set to CODEPIPELINE, CodePipeline ignores this value if specified. This is because CodePipeline manages its build output names instead of CodeBuild.
        ///
        /// * If type is set to NO_ARTIFACTS, this value is ignored if specified, because no build output is produced.
        ///
        /// * If type is set to S3, this is the path to the output artifact. If path is not specified, path is not used.
        ///
        ///
        /// For example, if path is set to MyArtifacts, namespaceType is set to NONE, and name is set to MyArtifact.zip, the output artifact is stored in the output bucket at MyArtifacts/MyArtifact.zip.
        public var path: Swift.String?
        /// The type of build output artifact. Valid values include:
        ///
        /// * CODEPIPELINE: The build project has build output generated through CodePipeline. The CODEPIPELINE type is not supported for secondaryArtifacts.
        ///
        /// * NO_ARTIFACTS: The build project does not produce any build output.
        ///
        /// * S3: The build project stores build output in Amazon S3.
        /// This member is required.
        public var type: CodeBuildClientTypes.ArtifactsType?

        public init (
            artifactIdentifier: Swift.String? = nil,
            bucketOwnerAccess: CodeBuildClientTypes.BucketOwnerAccess? = nil,
            encryptionDisabled: Swift.Bool? = nil,
            location: Swift.String? = nil,
            name: Swift.String? = nil,
            namespaceType: CodeBuildClientTypes.ArtifactNamespace? = nil,
            overrideArtifactName: Swift.Bool? = nil,
            packaging: CodeBuildClientTypes.ArtifactPackaging? = nil,
            path: Swift.String? = nil,
            type: CodeBuildClientTypes.ArtifactsType? = nil
        )
        {
            self.artifactIdentifier = artifactIdentifier
            self.bucketOwnerAccess = bucketOwnerAccess
            self.encryptionDisabled = encryptionDisabled
            self.location = location
            self.name = name
            self.namespaceType = namespaceType
            self.overrideArtifactName = overrideArtifactName
            self.packaging = packaging
            self.path = path
            self.type = type
        }
    }

}
