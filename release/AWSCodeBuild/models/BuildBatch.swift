// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CodeBuildClientTypes {
    /// Contains information about a batch build.
    public struct BuildBatch: Swift.Equatable {
        /// The ARN of the batch build.
        public var arn: Swift.String?
        /// A BuildArtifacts object the defines the build artifacts for this batch build.
        public var artifacts: CodeBuildClientTypes.BuildArtifacts?
        /// Contains configuration information about a batch build project.
        public var buildBatchConfig: CodeBuildClientTypes.ProjectBuildBatchConfig?
        /// The number of the batch build. For each project, the buildBatchNumber of its first batch build is 1. The buildBatchNumber of each subsequent batch build is incremented by 1. If a batch build is deleted, the buildBatchNumber of other batch builds does not change.
        public var buildBatchNumber: Swift.Int?
        /// The status of the batch build.
        public var buildBatchStatus: CodeBuildClientTypes.StatusType?
        /// An array of BuildGroup objects that define the build groups for the batch build.
        public var buildGroups: [CodeBuildClientTypes.BuildGroup]?
        /// Specifies the maximum amount of time, in minutes, that the build in a batch must be completed in.
        public var buildTimeoutInMinutes: Swift.Int?
        /// Information about the cache for the build project.
        public var cache: CodeBuildClientTypes.ProjectCache?
        /// Indicates if the batch build is complete.
        public var complete: Swift.Bool
        /// The current phase of the batch build.
        public var currentPhase: Swift.String?
        /// Specifies if session debugging is enabled for this batch build. For more information, see [Viewing a running build in Session Manager](https://docs.aws.amazon.com/codebuild/latest/userguide/session-manager.html). Batch session debugging is not supported for matrix batch builds.
        public var debugSessionEnabled: Swift.Bool?
        /// The Key Management Service customer master key (CMK) to be used for encrypting the batch build output artifacts. You can use a cross-account KMS key to encrypt the build output artifacts if your service role has permission to that key. You can specify either the Amazon Resource Name (ARN) of the CMK or, if available, the CMK's alias (using the format alias/).
        public var encryptionKey: Swift.String?
        /// The date and time that the batch build ended.
        public var endTime: ClientRuntime.Date?
        /// Information about the build environment of the build project.
        public var environment: CodeBuildClientTypes.ProjectEnvironment?
        /// An array of ProjectFileSystemLocation objects for the batch build project. A ProjectFileSystemLocation object specifies the identifier, location, mountOptions, mountPoint, and type of a file system created using Amazon Elastic File System.
        public var fileSystemLocations: [CodeBuildClientTypes.ProjectFileSystemLocation]?
        /// The identifier of the batch build.
        public var id: Swift.String?
        /// The entity that started the batch build. Valid values include:
        ///
        /// * If CodePipeline started the build, the pipeline's name (for example, codepipeline/my-demo-pipeline).
        ///
        /// * If an IAM user started the build, the user's name.
        ///
        /// * If the Jenkins plugin for CodeBuild started the build, the string CodeBuild-Jenkins-Plugin.
        public var initiator: Swift.String?
        /// Information about logs for a build project. These can be logs in CloudWatch Logs, built in a specified S3 bucket, or both.
        public var logConfig: CodeBuildClientTypes.LogsConfig?
        /// An array of BuildBatchPhase objects the specify the phases of the batch build.
        public var phases: [CodeBuildClientTypes.BuildBatchPhase]?
        /// The name of the batch build project.
        public var projectName: Swift.String?
        /// Specifies the amount of time, in minutes, that the batch build is allowed to be queued before it times out.
        public var queuedTimeoutInMinutes: Swift.Int?
        /// The identifier of the resolved version of this batch build's source code.
        ///
        /// * For CodeCommit, GitHub, GitHub Enterprise, and BitBucket, the commit ID.
        ///
        /// * For CodePipeline, the source revision provided by CodePipeline.
        ///
        /// * For Amazon S3, this does not apply.
        public var resolvedSourceVersion: Swift.String?
        /// An array of BuildArtifacts objects the define the build artifacts for this batch build.
        public var secondaryArtifacts: [CodeBuildClientTypes.BuildArtifacts]?
        /// An array of ProjectSourceVersion objects. Each ProjectSourceVersion must be one of:
        ///
        /// * For CodeCommit: the commit ID, branch, or Git tag to use.
        ///
        /// * For GitHub: the commit ID, pull request ID, branch name, or tag name that corresponds to the version of the source code you want to build. If a pull request ID is specified, it must use the format pr/pull-request-ID (for example, pr/25). If a branch name is specified, the branch's HEAD commit ID is used. If not specified, the default branch's HEAD commit ID is used.
        ///
        /// * For Bitbucket: the commit ID, branch name, or tag name that corresponds to the version of the source code you want to build. If a branch name is specified, the branch's HEAD commit ID is used. If not specified, the default branch's HEAD commit ID is used.
        ///
        /// * For Amazon S3: the version ID of the object that represents the build input ZIP file to use.
        public var secondarySourceVersions: [CodeBuildClientTypes.ProjectSourceVersion]?
        /// An array of ProjectSource objects that define the sources for the batch build.
        public var secondarySources: [CodeBuildClientTypes.ProjectSource]?
        /// The name of a service role used for builds in the batch.
        public var serviceRole: Swift.String?
        /// Information about the build input source code for the build project.
        public var source: CodeBuildClientTypes.ProjectSource?
        /// The identifier of the version of the source code to be built.
        public var sourceVersion: Swift.String?
        /// The date and time that the batch build started.
        public var startTime: ClientRuntime.Date?
        /// Information about the VPC configuration that CodeBuild accesses.
        public var vpcConfig: CodeBuildClientTypes.VpcConfig?

        public init (
            arn: Swift.String? = nil,
            artifacts: CodeBuildClientTypes.BuildArtifacts? = nil,
            buildBatchConfig: CodeBuildClientTypes.ProjectBuildBatchConfig? = nil,
            buildBatchNumber: Swift.Int? = nil,
            buildBatchStatus: CodeBuildClientTypes.StatusType? = nil,
            buildGroups: [CodeBuildClientTypes.BuildGroup]? = nil,
            buildTimeoutInMinutes: Swift.Int? = nil,
            cache: CodeBuildClientTypes.ProjectCache? = nil,
            complete: Swift.Bool = false,
            currentPhase: Swift.String? = nil,
            debugSessionEnabled: Swift.Bool? = nil,
            encryptionKey: Swift.String? = nil,
            endTime: ClientRuntime.Date? = nil,
            environment: CodeBuildClientTypes.ProjectEnvironment? = nil,
            fileSystemLocations: [CodeBuildClientTypes.ProjectFileSystemLocation]? = nil,
            id: Swift.String? = nil,
            initiator: Swift.String? = nil,
            logConfig: CodeBuildClientTypes.LogsConfig? = nil,
            phases: [CodeBuildClientTypes.BuildBatchPhase]? = nil,
            projectName: Swift.String? = nil,
            queuedTimeoutInMinutes: Swift.Int? = nil,
            resolvedSourceVersion: Swift.String? = nil,
            secondaryArtifacts: [CodeBuildClientTypes.BuildArtifacts]? = nil,
            secondarySourceVersions: [CodeBuildClientTypes.ProjectSourceVersion]? = nil,
            secondarySources: [CodeBuildClientTypes.ProjectSource]? = nil,
            serviceRole: Swift.String? = nil,
            source: CodeBuildClientTypes.ProjectSource? = nil,
            sourceVersion: Swift.String? = nil,
            startTime: ClientRuntime.Date? = nil,
            vpcConfig: CodeBuildClientTypes.VpcConfig? = nil
        )
        {
            self.arn = arn
            self.artifacts = artifacts
            self.buildBatchConfig = buildBatchConfig
            self.buildBatchNumber = buildBatchNumber
            self.buildBatchStatus = buildBatchStatus
            self.buildGroups = buildGroups
            self.buildTimeoutInMinutes = buildTimeoutInMinutes
            self.cache = cache
            self.complete = complete
            self.currentPhase = currentPhase
            self.debugSessionEnabled = debugSessionEnabled
            self.encryptionKey = encryptionKey
            self.endTime = endTime
            self.environment = environment
            self.fileSystemLocations = fileSystemLocations
            self.id = id
            self.initiator = initiator
            self.logConfig = logConfig
            self.phases = phases
            self.projectName = projectName
            self.queuedTimeoutInMinutes = queuedTimeoutInMinutes
            self.resolvedSourceVersion = resolvedSourceVersion
            self.secondaryArtifacts = secondaryArtifacts
            self.secondarySourceVersions = secondarySourceVersions
            self.secondarySources = secondarySources
            self.serviceRole = serviceRole
            self.source = source
            self.sourceVersion = sourceVersion
            self.startTime = startTime
            self.vpcConfig = vpcConfig
        }
    }

}
