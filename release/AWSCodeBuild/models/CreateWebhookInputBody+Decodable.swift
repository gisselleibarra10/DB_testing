// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateWebhookInputBody: Swift.Equatable {
    let projectName: Swift.String?
    let branchFilter: Swift.String?
    let filterGroups: [[CodeBuildClientTypes.WebhookFilter]]?
    let buildType: CodeBuildClientTypes.WebhookBuildType?
}

extension CreateWebhookInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case branchFilter
        case buildType
        case filterGroups
        case projectName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let projectNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .projectName)
        projectName = projectNameDecoded
        let branchFilterDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .branchFilter)
        branchFilter = branchFilterDecoded
        let filterGroupsContainer = try containerValues.decodeIfPresent([[CodeBuildClientTypes.WebhookFilter?]?].self, forKey: .filterGroups)
        var filterGroupsDecoded0:[[CodeBuildClientTypes.WebhookFilter]]? = nil
        if let filterGroupsContainer = filterGroupsContainer {
            filterGroupsDecoded0 = [[CodeBuildClientTypes.WebhookFilter]]()
            for list0 in filterGroupsContainer {
                var list0Decoded0: [CodeBuildClientTypes.WebhookFilter]? = nil
                if let list0 = list0 {
                    list0Decoded0 = [CodeBuildClientTypes.WebhookFilter]()
                    for structure1 in list0 {
                        if let structure1 = structure1 {
                            list0Decoded0?.append(structure1)
                        }
                    }
                }
                if let list0Decoded0 = list0Decoded0 {
                    filterGroupsDecoded0?.append(list0Decoded0)
                }
            }
        }
        filterGroups = filterGroupsDecoded0
        let buildTypeDecoded = try containerValues.decodeIfPresent(CodeBuildClientTypes.WebhookBuildType.self, forKey: .buildType)
        buildType = buildTypeDecoded
    }
}
