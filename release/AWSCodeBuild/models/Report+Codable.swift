// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CodeBuildClientTypes.Report: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn
        case codeCoverageSummary
        case created
        case executionId
        case expired
        case exportConfig
        case name
        case reportGroupArn
        case status
        case testSummary
        case truncated
        case type
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = self.arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let codeCoverageSummary = self.codeCoverageSummary {
            try encodeContainer.encode(codeCoverageSummary, forKey: .codeCoverageSummary)
        }
        if let created = self.created {
            try encodeContainer.encode(created.timeIntervalSince1970, forKey: .created)
        }
        if let executionId = self.executionId {
            try encodeContainer.encode(executionId, forKey: .executionId)
        }
        if let expired = self.expired {
            try encodeContainer.encode(expired.timeIntervalSince1970, forKey: .expired)
        }
        if let exportConfig = self.exportConfig {
            try encodeContainer.encode(exportConfig, forKey: .exportConfig)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let reportGroupArn = self.reportGroupArn {
            try encodeContainer.encode(reportGroupArn, forKey: .reportGroupArn)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let testSummary = self.testSummary {
            try encodeContainer.encode(testSummary, forKey: .testSummary)
        }
        if let truncated = self.truncated {
            try encodeContainer.encode(truncated, forKey: .truncated)
        }
        if let type = self.type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let typeDecoded = try containerValues.decodeIfPresent(CodeBuildClientTypes.ReportType.self, forKey: .type)
        type = typeDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let reportGroupArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .reportGroupArn)
        reportGroupArn = reportGroupArnDecoded
        let executionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .executionId)
        executionId = executionIdDecoded
        let statusDecoded = try containerValues.decodeIfPresent(CodeBuildClientTypes.ReportStatusType.self, forKey: .status)
        status = statusDecoded
        let createdDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .created)
        created = createdDecoded
        let expiredDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .expired)
        expired = expiredDecoded
        let exportConfigDecoded = try containerValues.decodeIfPresent(CodeBuildClientTypes.ReportExportConfig.self, forKey: .exportConfig)
        exportConfig = exportConfigDecoded
        let truncatedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .truncated)
        truncated = truncatedDecoded
        let testSummaryDecoded = try containerValues.decodeIfPresent(CodeBuildClientTypes.TestReportSummary.self, forKey: .testSummary)
        testSummary = testSummaryDecoded
        let codeCoverageSummaryDecoded = try containerValues.decodeIfPresent(CodeBuildClientTypes.CodeCoverageReportSummary.self, forKey: .codeCoverageSummary)
        codeCoverageSummary = codeCoverageSummaryDecoded
    }
}
