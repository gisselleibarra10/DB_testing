// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CodeBuildClientTypes.BatchRestrictions: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case computeTypesAllowed
        case maximumBuildsAllowed
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let computeTypesAllowed = computeTypesAllowed {
            var computeTypesAllowedContainer = encodeContainer.nestedUnkeyedContainer(forKey: .computeTypesAllowed)
            for computetypesallowed0 in computeTypesAllowed {
                try computeTypesAllowedContainer.encode(computetypesallowed0)
            }
        }
        if let maximumBuildsAllowed = self.maximumBuildsAllowed {
            try encodeContainer.encode(maximumBuildsAllowed, forKey: .maximumBuildsAllowed)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let maximumBuildsAllowedDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maximumBuildsAllowed)
        maximumBuildsAllowed = maximumBuildsAllowedDecoded
        let computeTypesAllowedContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .computeTypesAllowed)
        var computeTypesAllowedDecoded0:[Swift.String]? = nil
        if let computeTypesAllowedContainer = computeTypesAllowedContainer {
            computeTypesAllowedDecoded0 = [Swift.String]()
            for string0 in computeTypesAllowedContainer {
                if let string0 = string0 {
                    computeTypesAllowedDecoded0?.append(string0)
                }
            }
        }
        computeTypesAllowed = computeTypesAllowedDecoded0
    }
}
