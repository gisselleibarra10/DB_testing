// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CodeBuildClientTypes.EnvironmentPlatform: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case languages
        case platform
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let languages = languages {
            var languagesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .languages)
            for environmentlanguages0 in languages {
                try languagesContainer.encode(environmentlanguages0)
            }
        }
        if let platform = self.platform {
            try encodeContainer.encode(platform.rawValue, forKey: .platform)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let platformDecoded = try containerValues.decodeIfPresent(CodeBuildClientTypes.PlatformType.self, forKey: .platform)
        platform = platformDecoded
        let languagesContainer = try containerValues.decodeIfPresent([CodeBuildClientTypes.EnvironmentLanguage?].self, forKey: .languages)
        var languagesDecoded0:[CodeBuildClientTypes.EnvironmentLanguage]? = nil
        if let languagesContainer = languagesContainer {
            languagesDecoded0 = [CodeBuildClientTypes.EnvironmentLanguage]()
            for structure0 in languagesContainer {
                if let structure0 = structure0 {
                    languagesDecoded0?.append(structure0)
                }
            }
        }
        languages = languagesDecoded0
    }
}
