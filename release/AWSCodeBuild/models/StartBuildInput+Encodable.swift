// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension StartBuildInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case artifactsOverride
        case buildStatusConfigOverride
        case buildspecOverride
        case cacheOverride
        case certificateOverride
        case computeTypeOverride
        case debugSessionEnabled
        case encryptionKeyOverride
        case environmentTypeOverride
        case environmentVariablesOverride
        case gitCloneDepthOverride
        case gitSubmodulesConfigOverride
        case idempotencyToken
        case imageOverride
        case imagePullCredentialsTypeOverride
        case insecureSslOverride
        case logsConfigOverride
        case privilegedModeOverride
        case projectName
        case queuedTimeoutInMinutesOverride
        case registryCredentialOverride
        case reportBuildStatusOverride
        case secondaryArtifactsOverride
        case secondarySourcesOverride
        case secondarySourcesVersionOverride
        case serviceRoleOverride
        case sourceAuthOverride
        case sourceLocationOverride
        case sourceTypeOverride
        case sourceVersion
        case timeoutInMinutesOverride
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let artifactsOverride = self.artifactsOverride {
            try encodeContainer.encode(artifactsOverride, forKey: .artifactsOverride)
        }
        if let buildStatusConfigOverride = self.buildStatusConfigOverride {
            try encodeContainer.encode(buildStatusConfigOverride, forKey: .buildStatusConfigOverride)
        }
        if let buildspecOverride = self.buildspecOverride {
            try encodeContainer.encode(buildspecOverride, forKey: .buildspecOverride)
        }
        if let cacheOverride = self.cacheOverride {
            try encodeContainer.encode(cacheOverride, forKey: .cacheOverride)
        }
        if let certificateOverride = self.certificateOverride {
            try encodeContainer.encode(certificateOverride, forKey: .certificateOverride)
        }
        if let computeTypeOverride = self.computeTypeOverride {
            try encodeContainer.encode(computeTypeOverride.rawValue, forKey: .computeTypeOverride)
        }
        if let debugSessionEnabled = self.debugSessionEnabled {
            try encodeContainer.encode(debugSessionEnabled, forKey: .debugSessionEnabled)
        }
        if let encryptionKeyOverride = self.encryptionKeyOverride {
            try encodeContainer.encode(encryptionKeyOverride, forKey: .encryptionKeyOverride)
        }
        if let environmentTypeOverride = self.environmentTypeOverride {
            try encodeContainer.encode(environmentTypeOverride.rawValue, forKey: .environmentTypeOverride)
        }
        if let environmentVariablesOverride = environmentVariablesOverride {
            var environmentVariablesOverrideContainer = encodeContainer.nestedUnkeyedContainer(forKey: .environmentVariablesOverride)
            for environmentvariables0 in environmentVariablesOverride {
                try environmentVariablesOverrideContainer.encode(environmentvariables0)
            }
        }
        if let gitCloneDepthOverride = self.gitCloneDepthOverride {
            try encodeContainer.encode(gitCloneDepthOverride, forKey: .gitCloneDepthOverride)
        }
        if let gitSubmodulesConfigOverride = self.gitSubmodulesConfigOverride {
            try encodeContainer.encode(gitSubmodulesConfigOverride, forKey: .gitSubmodulesConfigOverride)
        }
        if let idempotencyToken = self.idempotencyToken {
            try encodeContainer.encode(idempotencyToken, forKey: .idempotencyToken)
        }
        if let imageOverride = self.imageOverride {
            try encodeContainer.encode(imageOverride, forKey: .imageOverride)
        }
        if let imagePullCredentialsTypeOverride = self.imagePullCredentialsTypeOverride {
            try encodeContainer.encode(imagePullCredentialsTypeOverride.rawValue, forKey: .imagePullCredentialsTypeOverride)
        }
        if let insecureSslOverride = self.insecureSslOverride {
            try encodeContainer.encode(insecureSslOverride, forKey: .insecureSslOverride)
        }
        if let logsConfigOverride = self.logsConfigOverride {
            try encodeContainer.encode(logsConfigOverride, forKey: .logsConfigOverride)
        }
        if let privilegedModeOverride = self.privilegedModeOverride {
            try encodeContainer.encode(privilegedModeOverride, forKey: .privilegedModeOverride)
        }
        if let projectName = self.projectName {
            try encodeContainer.encode(projectName, forKey: .projectName)
        }
        if let queuedTimeoutInMinutesOverride = self.queuedTimeoutInMinutesOverride {
            try encodeContainer.encode(queuedTimeoutInMinutesOverride, forKey: .queuedTimeoutInMinutesOverride)
        }
        if let registryCredentialOverride = self.registryCredentialOverride {
            try encodeContainer.encode(registryCredentialOverride, forKey: .registryCredentialOverride)
        }
        if let reportBuildStatusOverride = self.reportBuildStatusOverride {
            try encodeContainer.encode(reportBuildStatusOverride, forKey: .reportBuildStatusOverride)
        }
        if let secondaryArtifactsOverride = secondaryArtifactsOverride {
            var secondaryArtifactsOverrideContainer = encodeContainer.nestedUnkeyedContainer(forKey: .secondaryArtifactsOverride)
            for projectartifactslist0 in secondaryArtifactsOverride {
                try secondaryArtifactsOverrideContainer.encode(projectartifactslist0)
            }
        }
        if let secondarySourcesOverride = secondarySourcesOverride {
            var secondarySourcesOverrideContainer = encodeContainer.nestedUnkeyedContainer(forKey: .secondarySourcesOverride)
            for projectsources0 in secondarySourcesOverride {
                try secondarySourcesOverrideContainer.encode(projectsources0)
            }
        }
        if let secondarySourcesVersionOverride = secondarySourcesVersionOverride {
            var secondarySourcesVersionOverrideContainer = encodeContainer.nestedUnkeyedContainer(forKey: .secondarySourcesVersionOverride)
            for projectsecondarysourceversions0 in secondarySourcesVersionOverride {
                try secondarySourcesVersionOverrideContainer.encode(projectsecondarysourceversions0)
            }
        }
        if let serviceRoleOverride = self.serviceRoleOverride {
            try encodeContainer.encode(serviceRoleOverride, forKey: .serviceRoleOverride)
        }
        if let sourceAuthOverride = self.sourceAuthOverride {
            try encodeContainer.encode(sourceAuthOverride, forKey: .sourceAuthOverride)
        }
        if let sourceLocationOverride = self.sourceLocationOverride {
            try encodeContainer.encode(sourceLocationOverride, forKey: .sourceLocationOverride)
        }
        if let sourceTypeOverride = self.sourceTypeOverride {
            try encodeContainer.encode(sourceTypeOverride.rawValue, forKey: .sourceTypeOverride)
        }
        if let sourceVersion = self.sourceVersion {
            try encodeContainer.encode(sourceVersion, forKey: .sourceVersion)
        }
        if let timeoutInMinutesOverride = self.timeoutInMinutesOverride {
            try encodeContainer.encode(timeoutInMinutesOverride, forKey: .timeoutInMinutesOverride)
        }
    }
}
