// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CodeBuildClientTypes.ProjectCache: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case location
        case modes
        case type
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let location = self.location {
            try encodeContainer.encode(location, forKey: .location)
        }
        if let modes = modes {
            var modesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .modes)
            for projectcachemodes0 in modes {
                try modesContainer.encode(projectcachemodes0.rawValue)
            }
        }
        if let type = self.type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let typeDecoded = try containerValues.decodeIfPresent(CodeBuildClientTypes.CacheType.self, forKey: .type)
        type = typeDecoded
        let locationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .location)
        location = locationDecoded
        let modesContainer = try containerValues.decodeIfPresent([CodeBuildClientTypes.CacheMode?].self, forKey: .modes)
        var modesDecoded0:[CodeBuildClientTypes.CacheMode]? = nil
        if let modesContainer = modesContainer {
            modesDecoded0 = [CodeBuildClientTypes.CacheMode]()
            for string0 in modesContainer {
                if let string0 = string0 {
                    modesDecoded0?.append(string0)
                }
            }
        }
        modes = modesDecoded0
    }
}
