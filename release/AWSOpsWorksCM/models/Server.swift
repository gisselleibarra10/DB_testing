// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension OpsWorksCmClientTypes {
    /// Describes a configuration management server.
    public struct Server: Swift.Equatable {
        /// Associate a public IP address with a server that you are launching.
        public var associatePublicIpAddress: Swift.Bool?
        /// The number of automated backups to keep.
        public var backupRetentionCount: Swift.Int?
        /// The ARN of the CloudFormation stack that was used to create the server.
        public var cloudFormationStackArn: Swift.String?
        /// Time stamp of server creation. Example 2016-07-29T13:38:47.520Z
        public var createdAt: ClientRuntime.Date?
        /// An optional public endpoint of a server, such as https://aws.my-company.com. You cannot access the server by using the Endpoint value if the server has a CustomDomain specified.
        public var customDomain: Swift.String?
        /// Disables automated backups. The number of stored backups is dependent on the value of PreferredBackupCount.
        public var disableAutomatedBackup: Swift.Bool?
        /// A DNS name that can be used to access the engine. Example: myserver-asdfghjkl.us-east-1.opsworks.io. You cannot access the server by using the Endpoint value if the server has a CustomDomain specified.
        public var endpoint: Swift.String?
        /// The engine type of the server. Valid values in this release include ChefAutomate and Puppet.
        public var engine: Swift.String?
        /// The response of a createServer() request returns the master credential to access the server in EngineAttributes. These credentials are not stored by AWS OpsWorks CM; they are returned only as part of the result of createServer(). Attributes returned in a createServer response for Chef
        ///
        /// * CHEF_AUTOMATE_PIVOTAL_KEY: A base64-encoded RSA private key that is generated by AWS OpsWorks for Chef Automate. This private key is required to access the Chef API.
        ///
        /// * CHEF_STARTER_KIT: A base64-encoded ZIP file. The ZIP file contains a Chef starter kit, which includes a README, a configuration file, and the required RSA private key. Save this file, unzip it, and then change to the directory where you've unzipped the file contents. From this directory, you can run Knife commands.
        ///
        ///
        /// Attributes returned in a createServer response for Puppet
        ///
        /// * PUPPET_STARTER_KIT: A base64-encoded ZIP file. The ZIP file contains a Puppet starter kit, including a README and a required private key. Save this file, unzip it, and then change to the directory where you've unzipped the file contents.
        ///
        /// * PUPPET_ADMIN_PASSWORD: An administrator password that you can use to sign in to the Puppet Enterprise console after the server is online.
        public var engineAttributes: [OpsWorksCmClientTypes.EngineAttribute]?
        /// The engine model of the server. Valid values in this release include Monolithic for Puppet and Single for Chef.
        public var engineModel: Swift.String?
        /// The engine version of the server. For a Chef server, the valid value for EngineVersion is currently 2. For a Puppet server, specify either 2019 or 2017.
        public var engineVersion: Swift.String?
        /// The instance profile ARN of the server.
        public var instanceProfileArn: Swift.String?
        /// The instance type for the server, as specified in the CloudFormation stack. This might not be the same instance type that is shown in the EC2 console.
        public var instanceType: Swift.String?
        /// The key pair associated with the server.
        public var keyPair: Swift.String?
        /// The status of the most recent server maintenance run. Shows SUCCESS or FAILED.
        public var maintenanceStatus: OpsWorksCmClientTypes.MaintenanceStatus?
        /// The preferred backup period specified for the server.
        public var preferredBackupWindow: Swift.String?
        /// The preferred maintenance period specified for the server.
        public var preferredMaintenanceWindow: Swift.String?
        /// The security group IDs for the server, as specified in the CloudFormation stack. These might not be the same security groups that are shown in the EC2 console.
        public var securityGroupIds: [Swift.String]?
        /// The ARN of the server.
        public var serverArn: Swift.String?
        /// The name of the server.
        public var serverName: Swift.String?
        /// The service role ARN used to create the server.
        public var serviceRoleArn: Swift.String?
        /// The server's status. This field displays the states of actions in progress, such as creating, running, or backing up the server, as well as the server's health state.
        public var status: OpsWorksCmClientTypes.ServerStatus?
        /// Depending on the server status, this field has either a human-readable message (such as a create or backup error), or an escaped block of JSON (used for health check results).
        public var statusReason: Swift.String?
        /// The subnet IDs specified in a CreateServer request.
        public var subnetIds: [Swift.String]?

        public init (
            associatePublicIpAddress: Swift.Bool? = nil,
            backupRetentionCount: Swift.Int? = nil,
            cloudFormationStackArn: Swift.String? = nil,
            createdAt: ClientRuntime.Date? = nil,
            customDomain: Swift.String? = nil,
            disableAutomatedBackup: Swift.Bool? = nil,
            endpoint: Swift.String? = nil,
            engine: Swift.String? = nil,
            engineAttributes: [OpsWorksCmClientTypes.EngineAttribute]? = nil,
            engineModel: Swift.String? = nil,
            engineVersion: Swift.String? = nil,
            instanceProfileArn: Swift.String? = nil,
            instanceType: Swift.String? = nil,
            keyPair: Swift.String? = nil,
            maintenanceStatus: OpsWorksCmClientTypes.MaintenanceStatus? = nil,
            preferredBackupWindow: Swift.String? = nil,
            preferredMaintenanceWindow: Swift.String? = nil,
            securityGroupIds: [Swift.String]? = nil,
            serverArn: Swift.String? = nil,
            serverName: Swift.String? = nil,
            serviceRoleArn: Swift.String? = nil,
            status: OpsWorksCmClientTypes.ServerStatus? = nil,
            statusReason: Swift.String? = nil,
            subnetIds: [Swift.String]? = nil
        )
        {
            self.associatePublicIpAddress = associatePublicIpAddress
            self.backupRetentionCount = backupRetentionCount
            self.cloudFormationStackArn = cloudFormationStackArn
            self.createdAt = createdAt
            self.customDomain = customDomain
            self.disableAutomatedBackup = disableAutomatedBackup
            self.endpoint = endpoint
            self.engine = engine
            self.engineAttributes = engineAttributes
            self.engineModel = engineModel
            self.engineVersion = engineVersion
            self.instanceProfileArn = instanceProfileArn
            self.instanceType = instanceType
            self.keyPair = keyPair
            self.maintenanceStatus = maintenanceStatus
            self.preferredBackupWindow = preferredBackupWindow
            self.preferredMaintenanceWindow = preferredMaintenanceWindow
            self.securityGroupIds = securityGroupIds
            self.serverArn = serverArn
            self.serverName = serverName
            self.serviceRoleArn = serviceRoleArn
            self.status = status
            self.statusReason = statusReason
            self.subnetIds = subnetIds
        }
    }

}
