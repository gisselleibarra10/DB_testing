// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct QueryWhatIfForecastInputBody: Swift.Equatable {
    let whatIfForecastArn: Swift.String?
    let startDate: Swift.String?
    let endDate: Swift.String?
    let filters: [Swift.String:Swift.String]?
    let nextToken: Swift.String?
}

extension QueryWhatIfForecastInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case endDate = "EndDate"
        case filters = "Filters"
        case nextToken = "NextToken"
        case startDate = "StartDate"
        case whatIfForecastArn = "WhatIfForecastArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let whatIfForecastArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .whatIfForecastArn)
        whatIfForecastArn = whatIfForecastArnDecoded
        let startDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .startDate)
        startDate = startDateDecoded
        let endDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .endDate)
        endDate = endDateDecoded
        let filtersContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .filters)
        var filtersDecoded0: [Swift.String:Swift.String]? = nil
        if let filtersContainer = filtersContainer {
            filtersDecoded0 = [Swift.String:Swift.String]()
            for (key0, attributevalue0) in filtersContainer {
                if let attributevalue0 = attributevalue0 {
                    filtersDecoded0?[key0] = attributevalue0
                }
            }
        }
        filters = filtersDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
