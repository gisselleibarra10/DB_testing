// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ForecastqueryClientTypes.Forecast: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case predictions = "Predictions"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let predictions = predictions {
            var predictionsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .predictions)
            for (dictKey0, predictions0) in predictions {
                try predictionsContainer.encode(predictions0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let predictionsContainer = try containerValues.decodeIfPresent([Swift.String: [ForecastqueryClientTypes.DataPoint?]?].self, forKey: .predictions)
        var predictionsDecoded0: [Swift.String:[ForecastqueryClientTypes.DataPoint]]? = nil
        if let predictionsContainer = predictionsContainer {
            predictionsDecoded0 = [Swift.String:[ForecastqueryClientTypes.DataPoint]]()
            for (key0, timeseries0) in predictionsContainer {
                var timeseries0Decoded0: [ForecastqueryClientTypes.DataPoint]? = nil
                if let timeseries0 = timeseries0 {
                    timeseries0Decoded0 = [ForecastqueryClientTypes.DataPoint]()
                    for structure1 in timeseries0 {
                        if let structure1 = structure1 {
                            timeseries0Decoded0?.append(structure1)
                        }
                    }
                }
                predictionsDecoded0?[key0] = timeseries0Decoded0
            }
        }
        predictions = predictionsDecoded0
    }
}
