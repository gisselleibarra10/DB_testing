// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension IoTFleetWiseClientTypes.CanSignal: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case factor
        case isBigEndian
        case isSigned
        case length
        case messageId
        case name
        case offset
        case startBit
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let factor = self.factor {
            try encodeContainer.encode(factor, forKey: .factor)
        }
        if isBigEndian != false {
            try encodeContainer.encode(isBigEndian, forKey: .isBigEndian)
        }
        if isSigned != false {
            try encodeContainer.encode(isSigned, forKey: .isSigned)
        }
        if length != 0 {
            try encodeContainer.encode(length, forKey: .length)
        }
        if messageId != 0 {
            try encodeContainer.encode(messageId, forKey: .messageId)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let offset = self.offset {
            try encodeContainer.encode(offset, forKey: .offset)
        }
        if startBit != 0 {
            try encodeContainer.encode(startBit, forKey: .startBit)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageIdDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .messageId) ?? 0
        messageId = messageIdDecoded
        let isBigEndianDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .isBigEndian) ?? false
        isBigEndian = isBigEndianDecoded
        let isSignedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .isSigned) ?? false
        isSigned = isSignedDecoded
        let startBitDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .startBit) ?? 0
        startBit = startBitDecoded
        let offsetDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .offset)
        offset = offsetDecoded
        let factorDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .factor)
        factor = factorDecoded
        let lengthDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .length) ?? 0
        length = lengthDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
    }
}
