// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetCampaignOutputResponseBody: Swift.Equatable {
    let name: Swift.String?
    let arn: Swift.String?
    let description: Swift.String?
    let signalCatalogArn: Swift.String?
    let targetArn: Swift.String?
    let status: IoTFleetWiseClientTypes.CampaignStatus?
    let startTime: ClientRuntime.Date?
    let expiryTime: ClientRuntime.Date?
    let postTriggerCollectionDuration: Swift.Int?
    let diagnosticsMode: IoTFleetWiseClientTypes.DiagnosticsMode?
    let spoolingMode: IoTFleetWiseClientTypes.SpoolingMode?
    let compression: IoTFleetWiseClientTypes.Compression?
    let priority: Swift.Int?
    let signalsToCollect: [IoTFleetWiseClientTypes.SignalInformation]?
    let collectionScheme: IoTFleetWiseClientTypes.CollectionScheme?
    let dataExtraDimensions: [Swift.String]?
    let creationTime: ClientRuntime.Date?
    let lastModificationTime: ClientRuntime.Date?
}

extension GetCampaignOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn
        case collectionScheme
        case compression
        case creationTime
        case dataExtraDimensions
        case description
        case diagnosticsMode
        case expiryTime
        case lastModificationTime
        case name
        case postTriggerCollectionDuration
        case priority
        case signalCatalogArn
        case signalsToCollect
        case spoolingMode
        case startTime
        case status
        case targetArn
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let signalCatalogArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .signalCatalogArn)
        signalCatalogArn = signalCatalogArnDecoded
        let targetArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .targetArn)
        targetArn = targetArnDecoded
        let statusDecoded = try containerValues.decodeIfPresent(IoTFleetWiseClientTypes.CampaignStatus.self, forKey: .status)
        status = statusDecoded
        let startTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .startTime)
        startTime = startTimeDecoded
        let expiryTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .expiryTime)
        expiryTime = expiryTimeDecoded
        let postTriggerCollectionDurationDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .postTriggerCollectionDuration)
        postTriggerCollectionDuration = postTriggerCollectionDurationDecoded
        let diagnosticsModeDecoded = try containerValues.decodeIfPresent(IoTFleetWiseClientTypes.DiagnosticsMode.self, forKey: .diagnosticsMode)
        diagnosticsMode = diagnosticsModeDecoded
        let spoolingModeDecoded = try containerValues.decodeIfPresent(IoTFleetWiseClientTypes.SpoolingMode.self, forKey: .spoolingMode)
        spoolingMode = spoolingModeDecoded
        let compressionDecoded = try containerValues.decodeIfPresent(IoTFleetWiseClientTypes.Compression.self, forKey: .compression)
        compression = compressionDecoded
        let priorityDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .priority)
        priority = priorityDecoded
        let signalsToCollectContainer = try containerValues.decodeIfPresent([IoTFleetWiseClientTypes.SignalInformation?].self, forKey: .signalsToCollect)
        var signalsToCollectDecoded0:[IoTFleetWiseClientTypes.SignalInformation]? = nil
        if let signalsToCollectContainer = signalsToCollectContainer {
            signalsToCollectDecoded0 = [IoTFleetWiseClientTypes.SignalInformation]()
            for structure0 in signalsToCollectContainer {
                if let structure0 = structure0 {
                    signalsToCollectDecoded0?.append(structure0)
                }
            }
        }
        signalsToCollect = signalsToCollectDecoded0
        let collectionSchemeDecoded = try containerValues.decodeIfPresent(IoTFleetWiseClientTypes.CollectionScheme.self, forKey: .collectionScheme)
        collectionScheme = collectionSchemeDecoded
        let dataExtraDimensionsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .dataExtraDimensions)
        var dataExtraDimensionsDecoded0:[Swift.String]? = nil
        if let dataExtraDimensionsContainer = dataExtraDimensionsContainer {
            dataExtraDimensionsDecoded0 = [Swift.String]()
            for string0 in dataExtraDimensionsContainer {
                if let string0 = string0 {
                    dataExtraDimensionsDecoded0?.append(string0)
                }
            }
        }
        dataExtraDimensions = dataExtraDimensionsDecoded0
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let lastModificationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModificationTime)
        lastModificationTime = lastModificationTimeDecoded
    }
}
