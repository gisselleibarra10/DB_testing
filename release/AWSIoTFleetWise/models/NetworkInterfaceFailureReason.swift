// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension IoTFleetWiseClientTypes {
    public enum NetworkInterfaceFailureReason: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case canNetworkInterfaceInfoIsNull
        case conflictingNetworkInterface
        case duplicateInterface
        case networkInterfaceToAddAlreadyExists
        case networkInterfaceToRemoveAssociatedWithSignals
        case obdNetworkInterfaceInfoIsNull
        case sdkUnknown(Swift.String)

        public static var allCases: [NetworkInterfaceFailureReason] {
            return [
                .canNetworkInterfaceInfoIsNull,
                .conflictingNetworkInterface,
                .duplicateInterface,
                .networkInterfaceToAddAlreadyExists,
                .networkInterfaceToRemoveAssociatedWithSignals,
                .obdNetworkInterfaceInfoIsNull,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .canNetworkInterfaceInfoIsNull: return "CAN_NETWORK_INTERFACE_INFO_IS_NULL"
            case .conflictingNetworkInterface: return "CONFLICTING_NETWORK_INTERFACE"
            case .duplicateInterface: return "DUPLICATE_NETWORK_INTERFACE"
            case .networkInterfaceToAddAlreadyExists: return "NETWORK_INTERFACE_TO_ADD_ALREADY_EXISTS"
            case .networkInterfaceToRemoveAssociatedWithSignals: return "NETWORK_INTERFACE_TO_REMOVE_ASSOCIATED_WITH_SIGNALS"
            case .obdNetworkInterfaceInfoIsNull: return "OBD_NETWORK_INTERFACE_INFO_IS_NULL"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = NetworkInterfaceFailureReason(rawValue: rawValue) ?? NetworkInterfaceFailureReason.sdkUnknown(rawValue)
        }
    }
}
