// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension IoTFleetWiseClientTypes.CanDbcDefinition: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case canDbcFiles
        case networkInterface
        case signalsMap
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let canDbcFiles = canDbcFiles {
            var canDbcFilesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .canDbcFiles)
            for networkfileslist0 in canDbcFiles {
                try canDbcFilesContainer.encode(networkfileslist0.base64EncodedString())
            }
        }
        if let networkInterface = self.networkInterface {
            try encodeContainer.encode(networkInterface, forKey: .networkInterface)
        }
        if let signalsMap = signalsMap {
            var signalsMapContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .signalsMap)
            for (dictKey0, modelsignalsmap0) in signalsMap {
                try signalsMapContainer.encode(modelsignalsmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let networkInterfaceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .networkInterface)
        networkInterface = networkInterfaceDecoded
        let canDbcFilesContainer = try containerValues.decodeIfPresent([ClientRuntime.Data?].self, forKey: .canDbcFiles)
        var canDbcFilesDecoded0:[ClientRuntime.Data]? = nil
        if let canDbcFilesContainer = canDbcFilesContainer {
            canDbcFilesDecoded0 = [ClientRuntime.Data]()
            for blob0 in canDbcFilesContainer {
                if let blob0 = blob0 {
                    canDbcFilesDecoded0?.append(blob0)
                }
            }
        }
        canDbcFiles = canDbcFilesDecoded0
        let signalsMapContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .signalsMap)
        var signalsMapDecoded0: [Swift.String:Swift.String]? = nil
        if let signalsMapContainer = signalsMapContainer {
            signalsMapDecoded0 = [Swift.String:Swift.String]()
            for (key0, string0) in signalsMapContainer {
                if let string0 = string0 {
                    signalsMapDecoded0?[key0] = string0
                }
            }
        }
        signalsMap = signalsMapDecoded0
    }
}
