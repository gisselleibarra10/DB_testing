// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension IoTFleetWiseClientTypes.ObdInterface: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dtcRequestIntervalSeconds
        case hasTransmissionEcu
        case name
        case obdStandard
        case pidRequestIntervalSeconds
        case requestMessageId
        case useExtendedIds
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if dtcRequestIntervalSeconds != 0 {
            try encodeContainer.encode(dtcRequestIntervalSeconds, forKey: .dtcRequestIntervalSeconds)
        }
        if hasTransmissionEcu != false {
            try encodeContainer.encode(hasTransmissionEcu, forKey: .hasTransmissionEcu)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let obdStandard = self.obdStandard {
            try encodeContainer.encode(obdStandard, forKey: .obdStandard)
        }
        if pidRequestIntervalSeconds != 0 {
            try encodeContainer.encode(pidRequestIntervalSeconds, forKey: .pidRequestIntervalSeconds)
        }
        if requestMessageId != 0 {
            try encodeContainer.encode(requestMessageId, forKey: .requestMessageId)
        }
        if useExtendedIds != false {
            try encodeContainer.encode(useExtendedIds, forKey: .useExtendedIds)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let requestMessageIdDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .requestMessageId) ?? 0
        requestMessageId = requestMessageIdDecoded
        let obdStandardDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .obdStandard)
        obdStandard = obdStandardDecoded
        let pidRequestIntervalSecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .pidRequestIntervalSeconds) ?? 0
        pidRequestIntervalSeconds = pidRequestIntervalSecondsDecoded
        let dtcRequestIntervalSecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .dtcRequestIntervalSeconds) ?? 0
        dtcRequestIntervalSeconds = dtcRequestIntervalSecondsDecoded
        let useExtendedIdsDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .useExtendedIds) ?? false
        useExtendedIds = useExtendedIdsDecoded
        let hasTransmissionEcuDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .hasTransmissionEcu) ?? false
        hasTransmissionEcu = hasTransmissionEcuDecoded
    }
}
