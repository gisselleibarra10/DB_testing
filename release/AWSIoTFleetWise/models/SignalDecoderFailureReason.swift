// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension IoTFleetWiseClientTypes {
    public enum SignalDecoderFailureReason: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case canSignalInfoIsNull
        case conflictingSignal
        case duplicateSignal
        case networkInterfaceTypeIncompatibleWithSignalDecoderType
        case noDecoderInfoForSignalInModel
        case obdSignalInfoIsNull
        case signalNotAssociatedWithNetworkInterface
        case signalNotInModel
        case signalToAddAlreadyExists
        case sdkUnknown(Swift.String)

        public static var allCases: [SignalDecoderFailureReason] {
            return [
                .canSignalInfoIsNull,
                .conflictingSignal,
                .duplicateSignal,
                .networkInterfaceTypeIncompatibleWithSignalDecoderType,
                .noDecoderInfoForSignalInModel,
                .obdSignalInfoIsNull,
                .signalNotAssociatedWithNetworkInterface,
                .signalNotInModel,
                .signalToAddAlreadyExists,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .canSignalInfoIsNull: return "CAN_SIGNAL_INFO_IS_NULL"
            case .conflictingSignal: return "CONFLICTING_SIGNAL"
            case .duplicateSignal: return "DUPLICATE_SIGNAL"
            case .networkInterfaceTypeIncompatibleWithSignalDecoderType: return "NETWORK_INTERFACE_TYPE_INCOMPATIBLE_WITH_SIGNAL_DECODER_TYPE"
            case .noDecoderInfoForSignalInModel: return "NO_DECODER_INFO_FOR_SIGNAL_IN_MODEL"
            case .obdSignalInfoIsNull: return "OBD_SIGNAL_INFO_IS_NULL"
            case .signalNotAssociatedWithNetworkInterface: return "SIGNAL_NOT_ASSOCIATED_WITH_NETWORK_INTERFACE"
            case .signalNotInModel: return "SIGNAL_NOT_IN_MODEL"
            case .signalToAddAlreadyExists: return "SIGNAL_TO_ADD_ALREADY_EXISTS"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = SignalDecoderFailureReason(rawValue: rawValue) ?? SignalDecoderFailureReason.sdkUnknown(rawValue)
        }
    }
}
