// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension IoTFleetWiseClientTypes.ConditionBasedCollectionScheme: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case conditionLanguageVersion
        case expression
        case minimumTriggerIntervalMs
        case triggerMode
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let conditionLanguageVersion = self.conditionLanguageVersion {
            try encodeContainer.encode(conditionLanguageVersion, forKey: .conditionLanguageVersion)
        }
        if let expression = self.expression {
            try encodeContainer.encode(expression, forKey: .expression)
        }
        if let minimumTriggerIntervalMs = self.minimumTriggerIntervalMs {
            try encodeContainer.encode(minimumTriggerIntervalMs, forKey: .minimumTriggerIntervalMs)
        }
        if let triggerMode = self.triggerMode {
            try encodeContainer.encode(triggerMode.rawValue, forKey: .triggerMode)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let expressionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .expression)
        expression = expressionDecoded
        let minimumTriggerIntervalMsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .minimumTriggerIntervalMs)
        minimumTriggerIntervalMs = minimumTriggerIntervalMsDecoded
        let triggerModeDecoded = try containerValues.decodeIfPresent(IoTFleetWiseClientTypes.TriggerMode.self, forKey: .triggerMode)
        triggerMode = triggerModeDecoded
        let conditionLanguageVersionDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .conditionLanguageVersion)
        conditionLanguageVersion = conditionLanguageVersionDecoded
    }
}
