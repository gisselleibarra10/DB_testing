// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateDecoderManifestInputBody: Swift.Equatable {
    let description: Swift.String?
    let modelManifestArn: Swift.String?
    let signalDecoders: [IoTFleetWiseClientTypes.SignalDecoder]?
    let networkInterfaces: [IoTFleetWiseClientTypes.NetworkInterface]?
    let tags: [IoTFleetWiseClientTypes.Tag]?
}

extension CreateDecoderManifestInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description
        case modelManifestArn
        case networkInterfaces
        case signalDecoders
        case tags
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let modelManifestArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelManifestArn)
        modelManifestArn = modelManifestArnDecoded
        let signalDecodersContainer = try containerValues.decodeIfPresent([IoTFleetWiseClientTypes.SignalDecoder?].self, forKey: .signalDecoders)
        var signalDecodersDecoded0:[IoTFleetWiseClientTypes.SignalDecoder]? = nil
        if let signalDecodersContainer = signalDecodersContainer {
            signalDecodersDecoded0 = [IoTFleetWiseClientTypes.SignalDecoder]()
            for structure0 in signalDecodersContainer {
                if let structure0 = structure0 {
                    signalDecodersDecoded0?.append(structure0)
                }
            }
        }
        signalDecoders = signalDecodersDecoded0
        let networkInterfacesContainer = try containerValues.decodeIfPresent([IoTFleetWiseClientTypes.NetworkInterface?].self, forKey: .networkInterfaces)
        var networkInterfacesDecoded0:[IoTFleetWiseClientTypes.NetworkInterface]? = nil
        if let networkInterfacesContainer = networkInterfacesContainer {
            networkInterfacesDecoded0 = [IoTFleetWiseClientTypes.NetworkInterface]()
            for structure0 in networkInterfacesContainer {
                if let structure0 = structure0 {
                    networkInterfacesDecoded0?.append(structure0)
                }
            }
        }
        networkInterfaces = networkInterfacesDecoded0
        let tagsContainer = try containerValues.decodeIfPresent([IoTFleetWiseClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[IoTFleetWiseClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [IoTFleetWiseClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}
