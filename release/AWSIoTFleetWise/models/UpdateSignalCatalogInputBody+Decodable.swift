// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct UpdateSignalCatalogInputBody: Swift.Equatable {
    let description: Swift.String?
    let nodesToAdd: [IoTFleetWiseClientTypes.Node]?
    let nodesToUpdate: [IoTFleetWiseClientTypes.Node]?
    let nodesToRemove: [Swift.String]?
}

extension UpdateSignalCatalogInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description
        case nodesToAdd
        case nodesToRemove
        case nodesToUpdate
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let nodesToAddContainer = try containerValues.decodeIfPresent([IoTFleetWiseClientTypes.Node?].self, forKey: .nodesToAdd)
        var nodesToAddDecoded0:[IoTFleetWiseClientTypes.Node]? = nil
        if let nodesToAddContainer = nodesToAddContainer {
            nodesToAddDecoded0 = [IoTFleetWiseClientTypes.Node]()
            for union0 in nodesToAddContainer {
                if let union0 = union0 {
                    nodesToAddDecoded0?.append(union0)
                }
            }
        }
        nodesToAdd = nodesToAddDecoded0
        let nodesToUpdateContainer = try containerValues.decodeIfPresent([IoTFleetWiseClientTypes.Node?].self, forKey: .nodesToUpdate)
        var nodesToUpdateDecoded0:[IoTFleetWiseClientTypes.Node]? = nil
        if let nodesToUpdateContainer = nodesToUpdateContainer {
            nodesToUpdateDecoded0 = [IoTFleetWiseClientTypes.Node]()
            for union0 in nodesToUpdateContainer {
                if let union0 = union0 {
                    nodesToUpdateDecoded0?.append(union0)
                }
            }
        }
        nodesToUpdate = nodesToUpdateDecoded0
        let nodesToRemoveContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .nodesToRemove)
        var nodesToRemoveDecoded0:[Swift.String]? = nil
        if let nodesToRemoveContainer = nodesToRemoveContainer {
            nodesToRemoveDecoded0 = [Swift.String]()
            for string0 in nodesToRemoveContainer {
                if let string0 = string0 {
                    nodesToRemoveDecoded0?.append(string0)
                }
            }
        }
        nodesToRemove = nodesToRemoveDecoded0
    }
}
