// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension IoTFleetWiseClientTypes.ObdSignal: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bitMaskLength
        case bitRightShift
        case byteLength
        case offset
        case pid
        case pidResponseLength
        case scaling
        case serviceMode
        case startByte
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let bitMaskLength = self.bitMaskLength {
            try encodeContainer.encode(bitMaskLength, forKey: .bitMaskLength)
        }
        if bitRightShift != 0 {
            try encodeContainer.encode(bitRightShift, forKey: .bitRightShift)
        }
        if let byteLength = self.byteLength {
            try encodeContainer.encode(byteLength, forKey: .byteLength)
        }
        if let offset = self.offset {
            try encodeContainer.encode(offset, forKey: .offset)
        }
        if pid != 0 {
            try encodeContainer.encode(pid, forKey: .pid)
        }
        if pidResponseLength != 0 {
            try encodeContainer.encode(pidResponseLength, forKey: .pidResponseLength)
        }
        if let scaling = self.scaling {
            try encodeContainer.encode(scaling, forKey: .scaling)
        }
        if serviceMode != 0 {
            try encodeContainer.encode(serviceMode, forKey: .serviceMode)
        }
        if startByte != 0 {
            try encodeContainer.encode(startByte, forKey: .startByte)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pidResponseLengthDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .pidResponseLength) ?? 0
        pidResponseLength = pidResponseLengthDecoded
        let serviceModeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .serviceMode) ?? 0
        serviceMode = serviceModeDecoded
        let pidDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .pid) ?? 0
        pid = pidDecoded
        let scalingDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .scaling)
        scaling = scalingDecoded
        let offsetDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .offset)
        offset = offsetDecoded
        let startByteDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .startByte) ?? 0
        startByte = startByteDecoded
        let byteLengthDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .byteLength)
        byteLength = byteLengthDecoded
        let bitRightShiftDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .bitRightShift) ?? 0
        bitRightShift = bitRightShiftDecoded
        let bitMaskLengthDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .bitMaskLength)
        bitMaskLength = bitMaskLengthDecoded
    }
}
