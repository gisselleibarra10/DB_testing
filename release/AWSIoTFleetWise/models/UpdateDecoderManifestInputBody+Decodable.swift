// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct UpdateDecoderManifestInputBody: Swift.Equatable {
    let description: Swift.String?
    let signalDecodersToAdd: [IoTFleetWiseClientTypes.SignalDecoder]?
    let signalDecodersToUpdate: [IoTFleetWiseClientTypes.SignalDecoder]?
    let signalDecodersToRemove: [Swift.String]?
    let networkInterfacesToAdd: [IoTFleetWiseClientTypes.NetworkInterface]?
    let networkInterfacesToUpdate: [IoTFleetWiseClientTypes.NetworkInterface]?
    let networkInterfacesToRemove: [Swift.String]?
    let status: IoTFleetWiseClientTypes.ManifestStatus?
}

extension UpdateDecoderManifestInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description
        case networkInterfacesToAdd
        case networkInterfacesToRemove
        case networkInterfacesToUpdate
        case signalDecodersToAdd
        case signalDecodersToRemove
        case signalDecodersToUpdate
        case status
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let signalDecodersToAddContainer = try containerValues.decodeIfPresent([IoTFleetWiseClientTypes.SignalDecoder?].self, forKey: .signalDecodersToAdd)
        var signalDecodersToAddDecoded0:[IoTFleetWiseClientTypes.SignalDecoder]? = nil
        if let signalDecodersToAddContainer = signalDecodersToAddContainer {
            signalDecodersToAddDecoded0 = [IoTFleetWiseClientTypes.SignalDecoder]()
            for structure0 in signalDecodersToAddContainer {
                if let structure0 = structure0 {
                    signalDecodersToAddDecoded0?.append(structure0)
                }
            }
        }
        signalDecodersToAdd = signalDecodersToAddDecoded0
        let signalDecodersToUpdateContainer = try containerValues.decodeIfPresent([IoTFleetWiseClientTypes.SignalDecoder?].self, forKey: .signalDecodersToUpdate)
        var signalDecodersToUpdateDecoded0:[IoTFleetWiseClientTypes.SignalDecoder]? = nil
        if let signalDecodersToUpdateContainer = signalDecodersToUpdateContainer {
            signalDecodersToUpdateDecoded0 = [IoTFleetWiseClientTypes.SignalDecoder]()
            for structure0 in signalDecodersToUpdateContainer {
                if let structure0 = structure0 {
                    signalDecodersToUpdateDecoded0?.append(structure0)
                }
            }
        }
        signalDecodersToUpdate = signalDecodersToUpdateDecoded0
        let signalDecodersToRemoveContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .signalDecodersToRemove)
        var signalDecodersToRemoveDecoded0:[Swift.String]? = nil
        if let signalDecodersToRemoveContainer = signalDecodersToRemoveContainer {
            signalDecodersToRemoveDecoded0 = [Swift.String]()
            for string0 in signalDecodersToRemoveContainer {
                if let string0 = string0 {
                    signalDecodersToRemoveDecoded0?.append(string0)
                }
            }
        }
        signalDecodersToRemove = signalDecodersToRemoveDecoded0
        let networkInterfacesToAddContainer = try containerValues.decodeIfPresent([IoTFleetWiseClientTypes.NetworkInterface?].self, forKey: .networkInterfacesToAdd)
        var networkInterfacesToAddDecoded0:[IoTFleetWiseClientTypes.NetworkInterface]? = nil
        if let networkInterfacesToAddContainer = networkInterfacesToAddContainer {
            networkInterfacesToAddDecoded0 = [IoTFleetWiseClientTypes.NetworkInterface]()
            for structure0 in networkInterfacesToAddContainer {
                if let structure0 = structure0 {
                    networkInterfacesToAddDecoded0?.append(structure0)
                }
            }
        }
        networkInterfacesToAdd = networkInterfacesToAddDecoded0
        let networkInterfacesToUpdateContainer = try containerValues.decodeIfPresent([IoTFleetWiseClientTypes.NetworkInterface?].self, forKey: .networkInterfacesToUpdate)
        var networkInterfacesToUpdateDecoded0:[IoTFleetWiseClientTypes.NetworkInterface]? = nil
        if let networkInterfacesToUpdateContainer = networkInterfacesToUpdateContainer {
            networkInterfacesToUpdateDecoded0 = [IoTFleetWiseClientTypes.NetworkInterface]()
            for structure0 in networkInterfacesToUpdateContainer {
                if let structure0 = structure0 {
                    networkInterfacesToUpdateDecoded0?.append(structure0)
                }
            }
        }
        networkInterfacesToUpdate = networkInterfacesToUpdateDecoded0
        let networkInterfacesToRemoveContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .networkInterfacesToRemove)
        var networkInterfacesToRemoveDecoded0:[Swift.String]? = nil
        if let networkInterfacesToRemoveContainer = networkInterfacesToRemoveContainer {
            networkInterfacesToRemoveDecoded0 = [Swift.String]()
            for string0 in networkInterfacesToRemoveContainer {
                if let string0 = string0 {
                    networkInterfacesToRemoveDecoded0?.append(string0)
                }
            }
        }
        networkInterfacesToRemove = networkInterfacesToRemoveDecoded0
        let statusDecoded = try containerValues.decodeIfPresent(IoTFleetWiseClientTypes.ManifestStatus.self, forKey: .status)
        status = statusDecoded
    }
}
