// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension IoTFleetWiseClientTypes.Node: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case actuator
        case attribute
        case branch
        case sdkUnknown
        case sensor
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        switch self {
            case let .actuator(actuator):
                try container.encode(actuator, forKey: .actuator)
            case let .attribute(attribute):
                try container.encode(attribute, forKey: .attribute)
            case let .branch(branch):
                try container.encode(branch, forKey: .branch)
            case let .sensor(sensor):
                try container.encode(sensor, forKey: .sensor)
            case let .sdkUnknown(sdkUnknown):
                try container.encode(sdkUnknown, forKey: .sdkUnknown)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let values = try decoder.container(keyedBy: CodingKeys.self)
        let branchDecoded = try values.decodeIfPresent(IoTFleetWiseClientTypes.Branch.self, forKey: .branch)
        if let branch = branchDecoded {
            self = .branch(branch)
            return
        }
        let sensorDecoded = try values.decodeIfPresent(IoTFleetWiseClientTypes.Sensor.self, forKey: .sensor)
        if let sensor = sensorDecoded {
            self = .sensor(sensor)
            return
        }
        let actuatorDecoded = try values.decodeIfPresent(IoTFleetWiseClientTypes.Actuator.self, forKey: .actuator)
        if let actuator = actuatorDecoded {
            self = .actuator(actuator)
            return
        }
        let attributeDecoded = try values.decodeIfPresent(IoTFleetWiseClientTypes.Attribute.self, forKey: .attribute)
        if let attribute = attributeDecoded {
            self = .attribute(attribute)
            return
        }
        self = .sdkUnknown("")
    }
}
