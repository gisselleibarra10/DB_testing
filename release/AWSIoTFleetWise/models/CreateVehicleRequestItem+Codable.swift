// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension IoTFleetWiseClientTypes.CreateVehicleRequestItem: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case associationBehavior
        case attributes
        case decoderManifestArn
        case modelManifestArn
        case tags
        case vehicleName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let associationBehavior = self.associationBehavior {
            try encodeContainer.encode(associationBehavior.rawValue, forKey: .associationBehavior)
        }
        if let attributes = attributes {
            var attributesContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .attributes)
            for (dictKey0, attributesmap0) in attributes {
                try attributesContainer.encode(attributesmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let decoderManifestArn = self.decoderManifestArn {
            try encodeContainer.encode(decoderManifestArn, forKey: .decoderManifestArn)
        }
        if let modelManifestArn = self.modelManifestArn {
            try encodeContainer.encode(modelManifestArn, forKey: .modelManifestArn)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
        if let vehicleName = self.vehicleName {
            try encodeContainer.encode(vehicleName, forKey: .vehicleName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let vehicleNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vehicleName)
        vehicleName = vehicleNameDecoded
        let modelManifestArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelManifestArn)
        modelManifestArn = modelManifestArnDecoded
        let decoderManifestArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .decoderManifestArn)
        decoderManifestArn = decoderManifestArnDecoded
        let attributesContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .attributes)
        var attributesDecoded0: [Swift.String:Swift.String]? = nil
        if let attributesContainer = attributesContainer {
            attributesDecoded0 = [Swift.String:Swift.String]()
            for (key0, attributevalue0) in attributesContainer {
                if let attributevalue0 = attributevalue0 {
                    attributesDecoded0?[key0] = attributevalue0
                }
            }
        }
        attributes = attributesDecoded0
        let associationBehaviorDecoded = try containerValues.decodeIfPresent(IoTFleetWiseClientTypes.VehicleAssociationBehavior.self, forKey: .associationBehavior)
        associationBehavior = associationBehaviorDecoded
        let tagsContainer = try containerValues.decodeIfPresent([IoTFleetWiseClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[IoTFleetWiseClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [IoTFleetWiseClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}
