// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension UpdateDecoderManifestInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description
        case networkInterfacesToAdd
        case networkInterfacesToRemove
        case networkInterfacesToUpdate
        case signalDecodersToAdd
        case signalDecodersToRemove
        case signalDecodersToUpdate
        case status
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let networkInterfacesToAdd = networkInterfacesToAdd {
            var networkInterfacesToAddContainer = encodeContainer.nestedUnkeyedContainer(forKey: .networkInterfacesToAdd)
            for networkinterfaces0 in networkInterfacesToAdd {
                try networkInterfacesToAddContainer.encode(networkinterfaces0)
            }
        }
        if let networkInterfacesToRemove = networkInterfacesToRemove {
            var networkInterfacesToRemoveContainer = encodeContainer.nestedUnkeyedContainer(forKey: .networkInterfacesToRemove)
            for interfaceids0 in networkInterfacesToRemove {
                try networkInterfacesToRemoveContainer.encode(interfaceids0)
            }
        }
        if let networkInterfacesToUpdate = networkInterfacesToUpdate {
            var networkInterfacesToUpdateContainer = encodeContainer.nestedUnkeyedContainer(forKey: .networkInterfacesToUpdate)
            for networkinterfaces0 in networkInterfacesToUpdate {
                try networkInterfacesToUpdateContainer.encode(networkinterfaces0)
            }
        }
        if let signalDecodersToAdd = signalDecodersToAdd {
            var signalDecodersToAddContainer = encodeContainer.nestedUnkeyedContainer(forKey: .signalDecodersToAdd)
            for signaldecoders0 in signalDecodersToAdd {
                try signalDecodersToAddContainer.encode(signaldecoders0)
            }
        }
        if let signalDecodersToRemove = signalDecodersToRemove {
            var signalDecodersToRemoveContainer = encodeContainer.nestedUnkeyedContainer(forKey: .signalDecodersToRemove)
            for fqns0 in signalDecodersToRemove {
                try signalDecodersToRemoveContainer.encode(fqns0)
            }
        }
        if let signalDecodersToUpdate = signalDecodersToUpdate {
            var signalDecodersToUpdateContainer = encodeContainer.nestedUnkeyedContainer(forKey: .signalDecodersToUpdate)
            for signaldecoders0 in signalDecodersToUpdate {
                try signalDecodersToUpdateContainer.encode(signaldecoders0)
            }
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }
}
