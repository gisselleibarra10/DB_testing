// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DecoderManifestValidationExceptionBody: Swift.Equatable {
    let invalidSignals: [IoTFleetWiseClientTypes.InvalidSignalDecoder]?
    let invalidNetworkInterfaces: [IoTFleetWiseClientTypes.InvalidNetworkInterface]?
}

extension DecoderManifestValidationExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case invalidNetworkInterfaces
        case invalidSignals
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let invalidSignalsContainer = try containerValues.decodeIfPresent([IoTFleetWiseClientTypes.InvalidSignalDecoder?].self, forKey: .invalidSignals)
        var invalidSignalsDecoded0:[IoTFleetWiseClientTypes.InvalidSignalDecoder]? = nil
        if let invalidSignalsContainer = invalidSignalsContainer {
            invalidSignalsDecoded0 = [IoTFleetWiseClientTypes.InvalidSignalDecoder]()
            for structure0 in invalidSignalsContainer {
                if let structure0 = structure0 {
                    invalidSignalsDecoded0?.append(structure0)
                }
            }
        }
        invalidSignals = invalidSignalsDecoded0
        let invalidNetworkInterfacesContainer = try containerValues.decodeIfPresent([IoTFleetWiseClientTypes.InvalidNetworkInterface?].self, forKey: .invalidNetworkInterfaces)
        var invalidNetworkInterfacesDecoded0:[IoTFleetWiseClientTypes.InvalidNetworkInterface]? = nil
        if let invalidNetworkInterfacesContainer = invalidNetworkInterfacesContainer {
            invalidNetworkInterfacesDecoded0 = [IoTFleetWiseClientTypes.InvalidNetworkInterface]()
            for structure0 in invalidNetworkInterfacesContainer {
                if let structure0 = structure0 {
                    invalidNetworkInterfacesDecoded0?.append(structure0)
                }
            }
        }
        invalidNetworkInterfaces = invalidNetworkInterfacesDecoded0
    }
}
