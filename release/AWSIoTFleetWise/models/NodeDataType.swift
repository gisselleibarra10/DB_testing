// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension IoTFleetWiseClientTypes {
    public enum NodeDataType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case boolean
        case booleanArray
        case double
        case doubleArray
        case float
        case floatArray
        case int16
        case int16Array
        case int32
        case int32Array
        case int64
        case int64Array
        case int8
        case int8Array
        case string
        case stringArray
        case uint16
        case uint16Array
        case uint32
        case uint32Array
        case uint64
        case uint64Array
        case uint8
        case uint8Array
        case unixTimestamp
        case unixTimestampArray
        case unknown
        case sdkUnknown(Swift.String)

        public static var allCases: [NodeDataType] {
            return [
                .boolean,
                .booleanArray,
                .double,
                .doubleArray,
                .float,
                .floatArray,
                .int16,
                .int16Array,
                .int32,
                .int32Array,
                .int64,
                .int64Array,
                .int8,
                .int8Array,
                .string,
                .stringArray,
                .uint16,
                .uint16Array,
                .uint32,
                .uint32Array,
                .uint64,
                .uint64Array,
                .uint8,
                .uint8Array,
                .unixTimestamp,
                .unixTimestampArray,
                .unknown,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .boolean: return "BOOLEAN"
            case .booleanArray: return "BOOLEAN_ARRAY"
            case .double: return "DOUBLE"
            case .doubleArray: return "DOUBLE_ARRAY"
            case .float: return "FLOAT"
            case .floatArray: return "FLOAT_ARRAY"
            case .int16: return "INT16"
            case .int16Array: return "INT16_ARRAY"
            case .int32: return "INT32"
            case .int32Array: return "INT32_ARRAY"
            case .int64: return "INT64"
            case .int64Array: return "INT64_ARRAY"
            case .int8: return "INT8"
            case .int8Array: return "INT8_ARRAY"
            case .string: return "STRING"
            case .stringArray: return "STRING_ARRAY"
            case .uint16: return "UINT16"
            case .uint16Array: return "UINT16_ARRAY"
            case .uint32: return "UINT32"
            case .uint32Array: return "UINT32_ARRAY"
            case .uint64: return "UINT64"
            case .uint64Array: return "UINT64_ARRAY"
            case .uint8: return "UINT8"
            case .uint8Array: return "UINT8_ARRAY"
            case .unixTimestamp: return "UNIX_TIMESTAMP"
            case .unixTimestampArray: return "UNIX_TIMESTAMP_ARRAY"
            case .unknown: return "UNKNOWN"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = NodeDataType(rawValue: rawValue) ?? NodeDataType.sdkUnknown(rawValue)
        }
    }
}
