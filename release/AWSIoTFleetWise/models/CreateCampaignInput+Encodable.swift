// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CreateCampaignInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case collectionScheme
        case compression
        case dataExtraDimensions
        case description
        case diagnosticsMode
        case expiryTime
        case postTriggerCollectionDuration
        case priority
        case signalCatalogArn
        case signalsToCollect
        case spoolingMode
        case startTime
        case tags
        case targetArn
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let collectionScheme = self.collectionScheme {
            try encodeContainer.encode(collectionScheme, forKey: .collectionScheme)
        }
        if let compression = self.compression {
            try encodeContainer.encode(compression.rawValue, forKey: .compression)
        }
        if let dataExtraDimensions = dataExtraDimensions {
            var dataExtraDimensionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .dataExtraDimensions)
            for dataextradimensionnodepathlist0 in dataExtraDimensions {
                try dataExtraDimensionsContainer.encode(dataextradimensionnodepathlist0)
            }
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let diagnosticsMode = self.diagnosticsMode {
            try encodeContainer.encode(diagnosticsMode.rawValue, forKey: .diagnosticsMode)
        }
        if let expiryTime = self.expiryTime {
            try encodeContainer.encode(expiryTime.timeIntervalSince1970, forKey: .expiryTime)
        }
        if let postTriggerCollectionDuration = self.postTriggerCollectionDuration {
            try encodeContainer.encode(postTriggerCollectionDuration, forKey: .postTriggerCollectionDuration)
        }
        if let priority = self.priority {
            try encodeContainer.encode(priority, forKey: .priority)
        }
        if let signalCatalogArn = self.signalCatalogArn {
            try encodeContainer.encode(signalCatalogArn, forKey: .signalCatalogArn)
        }
        if let signalsToCollect = signalsToCollect {
            var signalsToCollectContainer = encodeContainer.nestedUnkeyedContainer(forKey: .signalsToCollect)
            for signalinformationlist0 in signalsToCollect {
                try signalsToCollectContainer.encode(signalinformationlist0)
            }
        }
        if let spoolingMode = self.spoolingMode {
            try encodeContainer.encode(spoolingMode.rawValue, forKey: .spoolingMode)
        }
        if let startTime = self.startTime {
            try encodeContainer.encode(startTime.timeIntervalSince1970, forKey: .startTime)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
        if let targetArn = self.targetArn {
            try encodeContainer.encode(targetArn, forKey: .targetArn)
        }
    }
}
