// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension ElasticLoadBalancingClientTypes {
    /// The attributes for a load balancer.
    public struct LoadBalancerAttributes: Swift.Equatable {
        /// If enabled, the load balancer captures detailed information of all requests and delivers the information to the Amazon S3 bucket that you specify. For more information, see [Enable Access Logs](https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/enable-access-logs.html) in the Classic Load Balancers Guide.
        public var accessLog: ElasticLoadBalancingClientTypes.AccessLog?
        /// Any additional attributes.
        public var additionalAttributes: [ElasticLoadBalancingClientTypes.AdditionalAttribute]?
        /// If enabled, the load balancer allows existing requests to complete before the load balancer shifts traffic away from a deregistered or unhealthy instance. For more information, see [Configure Connection Draining](https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/config-conn-drain.html) in the Classic Load Balancers Guide.
        public var connectionDraining: ElasticLoadBalancingClientTypes.ConnectionDraining?
        /// If enabled, the load balancer allows the connections to remain idle (no data is sent over the connection) for the specified duration. By default, Elastic Load Balancing maintains a 60-second idle connection timeout for both front-end and back-end connections of your load balancer. For more information, see [Configure Idle Connection Timeout](https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/config-idle-timeout.html) in the Classic Load Balancers Guide.
        public var connectionSettings: ElasticLoadBalancingClientTypes.ConnectionSettings?
        /// If enabled, the load balancer routes the request traffic evenly across all instances regardless of the Availability Zones. For more information, see [Configure Cross-Zone Load Balancing](https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/enable-disable-crosszone-lb.html) in the Classic Load Balancers Guide.
        public var crossZoneLoadBalancing: ElasticLoadBalancingClientTypes.CrossZoneLoadBalancing?

        public init (
            accessLog: ElasticLoadBalancingClientTypes.AccessLog? = nil,
            additionalAttributes: [ElasticLoadBalancingClientTypes.AdditionalAttribute]? = nil,
            connectionDraining: ElasticLoadBalancingClientTypes.ConnectionDraining? = nil,
            connectionSettings: ElasticLoadBalancingClientTypes.ConnectionSettings? = nil,
            crossZoneLoadBalancing: ElasticLoadBalancingClientTypes.CrossZoneLoadBalancing? = nil
        )
        {
            self.accessLog = accessLog
            self.additionalAttributes = additionalAttributes
            self.connectionDraining = connectionDraining
            self.connectionSettings = connectionSettings
            self.crossZoneLoadBalancing = crossZoneLoadBalancing
        }
    }

}
