// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ElasticLoadBalancingClientTypes.LoadBalancerAttributes: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accessLog = "AccessLog"
        case additionalAttributes = "AdditionalAttributes"
        case connectionDraining = "ConnectionDraining"
        case connectionSettings = "ConnectionSettings"
        case crossZoneLoadBalancing = "CrossZoneLoadBalancing"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let accessLog = accessLog {
            try container.encode(accessLog, forKey: ClientRuntime.Key("AccessLog"))
        }
        if let additionalAttributes = additionalAttributes {
            var additionalAttributesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AdditionalAttributes"))
            for (index0, additionalattribute0) in additionalAttributes.enumerated() {
                try additionalAttributesContainer.encode(additionalattribute0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let connectionDraining = connectionDraining {
            try container.encode(connectionDraining, forKey: ClientRuntime.Key("ConnectionDraining"))
        }
        if let connectionSettings = connectionSettings {
            try container.encode(connectionSettings, forKey: ClientRuntime.Key("ConnectionSettings"))
        }
        if let crossZoneLoadBalancing = crossZoneLoadBalancing {
            try container.encode(crossZoneLoadBalancing, forKey: ClientRuntime.Key("CrossZoneLoadBalancing"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let crossZoneLoadBalancingDecoded = try containerValues.decodeIfPresent(ElasticLoadBalancingClientTypes.CrossZoneLoadBalancing.self, forKey: .crossZoneLoadBalancing)
        crossZoneLoadBalancing = crossZoneLoadBalancingDecoded
        let accessLogDecoded = try containerValues.decodeIfPresent(ElasticLoadBalancingClientTypes.AccessLog.self, forKey: .accessLog)
        accessLog = accessLogDecoded
        let connectionDrainingDecoded = try containerValues.decodeIfPresent(ElasticLoadBalancingClientTypes.ConnectionDraining.self, forKey: .connectionDraining)
        connectionDraining = connectionDrainingDecoded
        let connectionSettingsDecoded = try containerValues.decodeIfPresent(ElasticLoadBalancingClientTypes.ConnectionSettings.self, forKey: .connectionSettings)
        connectionSettings = connectionSettingsDecoded
        if containerValues.contains(.additionalAttributes) {
            struct KeyVal0{struct member{}}
            let additionalAttributesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .additionalAttributes)
            if let additionalAttributesWrappedContainer = additionalAttributesWrappedContainer {
                let additionalAttributesContainer = try additionalAttributesWrappedContainer.decodeIfPresent([ElasticLoadBalancingClientTypes.AdditionalAttribute].self, forKey: .member)
                var additionalAttributesBuffer:[ElasticLoadBalancingClientTypes.AdditionalAttribute]? = nil
                if let additionalAttributesContainer = additionalAttributesContainer {
                    additionalAttributesBuffer = [ElasticLoadBalancingClientTypes.AdditionalAttribute]()
                    for structureContainer0 in additionalAttributesContainer {
                        additionalAttributesBuffer?.append(structureContainer0)
                    }
                }
                additionalAttributes = additionalAttributesBuffer
            } else {
                additionalAttributes = []
            }
        } else {
            additionalAttributes = nil
        }
    }
}
