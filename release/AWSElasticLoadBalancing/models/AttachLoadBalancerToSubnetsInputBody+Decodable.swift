// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct AttachLoadBalancerToSubnetsInputBody: Swift.Equatable {
    let loadBalancerName: Swift.String?
    let subnets: [Swift.String]?
}

extension AttachLoadBalancerToSubnetsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case loadBalancerName = "LoadBalancerName"
        case subnets = "Subnets"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let loadBalancerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .loadBalancerName)
        loadBalancerName = loadBalancerNameDecoded
        if containerValues.contains(.subnets) {
            struct KeyVal0{struct member{}}
            let subnetsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .subnets)
            if let subnetsWrappedContainer = subnetsWrappedContainer {
                let subnetsContainer = try subnetsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var subnetsBuffer:[Swift.String]? = nil
                if let subnetsContainer = subnetsContainer {
                    subnetsBuffer = [Swift.String]()
                    for stringContainer0 in subnetsContainer {
                        subnetsBuffer?.append(stringContainer0)
                    }
                }
                subnets = subnetsBuffer
            } else {
                subnets = []
            }
        } else {
            subnets = nil
        }
    }
}
