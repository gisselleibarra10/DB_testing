// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct AddTagsInputBody: Swift.Equatable {
    let loadBalancerNames: [Swift.String]?
    let tags: [ElasticLoadBalancingClientTypes.Tag]?
}

extension AddTagsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case loadBalancerNames = "LoadBalancerNames"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.loadBalancerNames) {
            struct KeyVal0{struct member{}}
            let loadBalancerNamesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .loadBalancerNames)
            if let loadBalancerNamesWrappedContainer = loadBalancerNamesWrappedContainer {
                let loadBalancerNamesContainer = try loadBalancerNamesWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var loadBalancerNamesBuffer:[Swift.String]? = nil
                if let loadBalancerNamesContainer = loadBalancerNamesContainer {
                    loadBalancerNamesBuffer = [Swift.String]()
                    for stringContainer0 in loadBalancerNamesContainer {
                        loadBalancerNamesBuffer?.append(stringContainer0)
                    }
                }
                loadBalancerNames = loadBalancerNamesBuffer
            } else {
                loadBalancerNames = []
            }
        } else {
            loadBalancerNames = nil
        }
        if containerValues.contains(.tags) {
            struct KeyVal0{struct member{}}
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .tags)
            if let tagsWrappedContainer = tagsWrappedContainer {
                let tagsContainer = try tagsWrappedContainer.decodeIfPresent([ElasticLoadBalancingClientTypes.Tag].self, forKey: .member)
                var tagsBuffer:[ElasticLoadBalancingClientTypes.Tag]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [ElasticLoadBalancingClientTypes.Tag]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
    }
}
