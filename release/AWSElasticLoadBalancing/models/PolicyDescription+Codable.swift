// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ElasticLoadBalancingClientTypes.PolicyDescription: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case policyAttributeDescriptions = "PolicyAttributeDescriptions"
        case policyName = "PolicyName"
        case policyTypeName = "PolicyTypeName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let policyAttributeDescriptions = policyAttributeDescriptions {
            var policyAttributeDescriptionsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("PolicyAttributeDescriptions"))
            for (index0, policyattributedescription0) in policyAttributeDescriptions.enumerated() {
                try policyAttributeDescriptionsContainer.encode(policyattributedescription0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let policyName = policyName {
            try container.encode(policyName, forKey: ClientRuntime.Key("PolicyName"))
        }
        if let policyTypeName = policyTypeName {
            try container.encode(policyTypeName, forKey: ClientRuntime.Key("PolicyTypeName"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let policyNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policyName)
        policyName = policyNameDecoded
        let policyTypeNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policyTypeName)
        policyTypeName = policyTypeNameDecoded
        if containerValues.contains(.policyAttributeDescriptions) {
            struct KeyVal0{struct member{}}
            let policyAttributeDescriptionsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .policyAttributeDescriptions)
            if let policyAttributeDescriptionsWrappedContainer = policyAttributeDescriptionsWrappedContainer {
                let policyAttributeDescriptionsContainer = try policyAttributeDescriptionsWrappedContainer.decodeIfPresent([ElasticLoadBalancingClientTypes.PolicyAttributeDescription].self, forKey: .member)
                var policyAttributeDescriptionsBuffer:[ElasticLoadBalancingClientTypes.PolicyAttributeDescription]? = nil
                if let policyAttributeDescriptionsContainer = policyAttributeDescriptionsContainer {
                    policyAttributeDescriptionsBuffer = [ElasticLoadBalancingClientTypes.PolicyAttributeDescription]()
                    for structureContainer0 in policyAttributeDescriptionsContainer {
                        policyAttributeDescriptionsBuffer?.append(structureContainer0)
                    }
                }
                policyAttributeDescriptions = policyAttributeDescriptionsBuffer
            } else {
                policyAttributeDescriptions = []
            }
        } else {
            policyAttributeDescriptions = nil
        }
    }
}
