// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DeleteLoadBalancerListenersInputBody: Swift.Equatable {
    let loadBalancerName: Swift.String?
    let loadBalancerPorts: [Swift.Int]?
}

extension DeleteLoadBalancerListenersInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case loadBalancerName = "LoadBalancerName"
        case loadBalancerPorts = "LoadBalancerPorts"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let loadBalancerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .loadBalancerName)
        loadBalancerName = loadBalancerNameDecoded
        if containerValues.contains(.loadBalancerPorts) {
            struct KeyVal0{struct member{}}
            let loadBalancerPortsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .loadBalancerPorts)
            if let loadBalancerPortsWrappedContainer = loadBalancerPortsWrappedContainer {
                let loadBalancerPortsContainer = try loadBalancerPortsWrappedContainer.decodeIfPresent([Swift.Int].self, forKey: .member)
                var loadBalancerPortsBuffer:[Swift.Int]? = nil
                if let loadBalancerPortsContainer = loadBalancerPortsContainer {
                    loadBalancerPortsBuffer = [Swift.Int]()
                    for integerContainer0 in loadBalancerPortsContainer {
                        loadBalancerPortsBuffer?.append(integerContainer0)
                    }
                }
                loadBalancerPorts = loadBalancerPortsBuffer
            } else {
                loadBalancerPorts = []
            }
        } else {
            loadBalancerPorts = nil
        }
    }
}
