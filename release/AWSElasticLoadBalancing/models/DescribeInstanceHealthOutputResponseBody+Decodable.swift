// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeInstanceHealthOutputResponseBody: Swift.Equatable {
    let instanceStates: [ElasticLoadBalancingClientTypes.InstanceState]?
}

extension DescribeInstanceHealthOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case instanceStates = "InstanceStates"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeInstanceHealthResult"))
        if containerValues.contains(.instanceStates) {
            struct KeyVal0{struct member{}}
            let instanceStatesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .instanceStates)
            if let instanceStatesWrappedContainer = instanceStatesWrappedContainer {
                let instanceStatesContainer = try instanceStatesWrappedContainer.decodeIfPresent([ElasticLoadBalancingClientTypes.InstanceState].self, forKey: .member)
                var instanceStatesBuffer:[ElasticLoadBalancingClientTypes.InstanceState]? = nil
                if let instanceStatesContainer = instanceStatesContainer {
                    instanceStatesBuffer = [ElasticLoadBalancingClientTypes.InstanceState]()
                    for structureContainer0 in instanceStatesContainer {
                        instanceStatesBuffer?.append(structureContainer0)
                    }
                }
                instanceStates = instanceStatesBuffer
            } else {
                instanceStates = []
            }
        } else {
            instanceStates = nil
        }
    }
}
