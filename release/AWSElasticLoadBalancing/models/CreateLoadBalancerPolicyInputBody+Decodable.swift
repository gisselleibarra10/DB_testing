// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateLoadBalancerPolicyInputBody: Swift.Equatable {
    let loadBalancerName: Swift.String?
    let policyName: Swift.String?
    let policyTypeName: Swift.String?
    let policyAttributes: [ElasticLoadBalancingClientTypes.PolicyAttribute]?
}

extension CreateLoadBalancerPolicyInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case loadBalancerName = "LoadBalancerName"
        case policyAttributes = "PolicyAttributes"
        case policyName = "PolicyName"
        case policyTypeName = "PolicyTypeName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let loadBalancerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .loadBalancerName)
        loadBalancerName = loadBalancerNameDecoded
        let policyNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policyName)
        policyName = policyNameDecoded
        let policyTypeNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policyTypeName)
        policyTypeName = policyTypeNameDecoded
        if containerValues.contains(.policyAttributes) {
            struct KeyVal0{struct member{}}
            let policyAttributesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .policyAttributes)
            if let policyAttributesWrappedContainer = policyAttributesWrappedContainer {
                let policyAttributesContainer = try policyAttributesWrappedContainer.decodeIfPresent([ElasticLoadBalancingClientTypes.PolicyAttribute].self, forKey: .member)
                var policyAttributesBuffer:[ElasticLoadBalancingClientTypes.PolicyAttribute]? = nil
                if let policyAttributesContainer = policyAttributesContainer {
                    policyAttributesBuffer = [ElasticLoadBalancingClientTypes.PolicyAttribute]()
                    for structureContainer0 in policyAttributesContainer {
                        policyAttributesBuffer?.append(structureContainer0)
                    }
                }
                policyAttributes = policyAttributesBuffer
            } else {
                policyAttributes = []
            }
        } else {
            policyAttributes = nil
        }
    }
}
