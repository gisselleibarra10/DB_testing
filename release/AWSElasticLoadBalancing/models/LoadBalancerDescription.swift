// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ElasticLoadBalancingClientTypes {
    /// Information about a load balancer.
    public struct LoadBalancerDescription: Swift.Equatable {
        /// The Availability Zones for the load balancer.
        public var availabilityZones: [Swift.String]?
        /// Information about your EC2 instances.
        public var backendServerDescriptions: [ElasticLoadBalancingClientTypes.BackendServerDescription]?
        /// The DNS name of the load balancer. For more information, see [Configure a Custom Domain Name](https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/using-domain-names-with-elb.html) in the Classic Load Balancers Guide.
        public var canonicalHostedZoneName: Swift.String?
        /// The ID of the Amazon Route 53 hosted zone for the load balancer.
        public var canonicalHostedZoneNameID: Swift.String?
        /// The date and time the load balancer was created.
        public var createdTime: ClientRuntime.Date?
        /// The DNS name of the load balancer.
        public var dNSName: Swift.String?
        /// Information about the health checks conducted on the load balancer.
        public var healthCheck: ElasticLoadBalancingClientTypes.HealthCheck?
        /// The IDs of the instances for the load balancer.
        public var instances: [ElasticLoadBalancingClientTypes.Instance]?
        /// The listeners for the load balancer.
        public var listenerDescriptions: [ElasticLoadBalancingClientTypes.ListenerDescription]?
        /// The name of the load balancer.
        public var loadBalancerName: Swift.String?
        /// The policies defined for the load balancer.
        public var policies: ElasticLoadBalancingClientTypes.Policies?
        /// The type of load balancer. Valid only for load balancers in a VPC. If Scheme is internet-facing, the load balancer has a public DNS name that resolves to a public IP address. If Scheme is internal, the load balancer has a public DNS name that resolves to a private IP address.
        public var scheme: Swift.String?
        /// The security groups for the load balancer. Valid only for load balancers in a VPC.
        public var securityGroups: [Swift.String]?
        /// The security group for the load balancer, which you can use as part of your inbound rules for your registered instances. To only allow traffic from load balancers, add a security group rule that specifies this source security group as the inbound source.
        public var sourceSecurityGroup: ElasticLoadBalancingClientTypes.SourceSecurityGroup?
        /// The IDs of the subnets for the load balancer.
        public var subnets: [Swift.String]?
        /// The ID of the VPC for the load balancer.
        public var vPCId: Swift.String?

        public init (
            availabilityZones: [Swift.String]? = nil,
            backendServerDescriptions: [ElasticLoadBalancingClientTypes.BackendServerDescription]? = nil,
            canonicalHostedZoneName: Swift.String? = nil,
            canonicalHostedZoneNameID: Swift.String? = nil,
            createdTime: ClientRuntime.Date? = nil,
            dNSName: Swift.String? = nil,
            healthCheck: ElasticLoadBalancingClientTypes.HealthCheck? = nil,
            instances: [ElasticLoadBalancingClientTypes.Instance]? = nil,
            listenerDescriptions: [ElasticLoadBalancingClientTypes.ListenerDescription]? = nil,
            loadBalancerName: Swift.String? = nil,
            policies: ElasticLoadBalancingClientTypes.Policies? = nil,
            scheme: Swift.String? = nil,
            securityGroups: [Swift.String]? = nil,
            sourceSecurityGroup: ElasticLoadBalancingClientTypes.SourceSecurityGroup? = nil,
            subnets: [Swift.String]? = nil,
            vPCId: Swift.String? = nil
        )
        {
            self.availabilityZones = availabilityZones
            self.backendServerDescriptions = backendServerDescriptions
            self.canonicalHostedZoneName = canonicalHostedZoneName
            self.canonicalHostedZoneNameID = canonicalHostedZoneNameID
            self.createdTime = createdTime
            self.dNSName = dNSName
            self.healthCheck = healthCheck
            self.instances = instances
            self.listenerDescriptions = listenerDescriptions
            self.loadBalancerName = loadBalancerName
            self.policies = policies
            self.scheme = scheme
            self.securityGroups = securityGroups
            self.sourceSecurityGroup = sourceSecurityGroup
            self.subnets = subnets
            self.vPCId = vPCId
        }
    }

}
