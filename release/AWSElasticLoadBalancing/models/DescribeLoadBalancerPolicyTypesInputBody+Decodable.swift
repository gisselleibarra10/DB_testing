// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeLoadBalancerPolicyTypesInputBody: Swift.Equatable {
    let policyTypeNames: [Swift.String]?
}

extension DescribeLoadBalancerPolicyTypesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case policyTypeNames = "PolicyTypeNames"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.policyTypeNames) {
            struct KeyVal0{struct member{}}
            let policyTypeNamesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .policyTypeNames)
            if let policyTypeNamesWrappedContainer = policyTypeNamesWrappedContainer {
                let policyTypeNamesContainer = try policyTypeNamesWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var policyTypeNamesBuffer:[Swift.String]? = nil
                if let policyTypeNamesContainer = policyTypeNamesContainer {
                    policyTypeNamesBuffer = [Swift.String]()
                    for stringContainer0 in policyTypeNamesContainer {
                        policyTypeNamesBuffer?.append(stringContainer0)
                    }
                }
                policyTypeNames = policyTypeNamesBuffer
            } else {
                policyTypeNames = []
            }
        } else {
            policyTypeNames = nil
        }
    }
}
