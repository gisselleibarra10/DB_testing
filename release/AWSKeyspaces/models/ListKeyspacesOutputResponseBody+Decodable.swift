// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListKeyspacesOutputResponseBody: Swift.Equatable {
    let nextToken: Swift.String?
    let keyspaces: [KeyspacesClientTypes.KeyspaceSummary]?
}

extension ListKeyspacesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case keyspaces
        case nextToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let keyspacesContainer = try containerValues.decodeIfPresent([KeyspacesClientTypes.KeyspaceSummary?].self, forKey: .keyspaces)
        var keyspacesDecoded0:[KeyspacesClientTypes.KeyspaceSummary]? = nil
        if let keyspacesContainer = keyspacesContainer {
            keyspacesDecoded0 = [KeyspacesClientTypes.KeyspaceSummary]()
            for structure0 in keyspacesContainer {
                if let structure0 = structure0 {
                    keyspacesDecoded0?.append(structure0)
                }
            }
        }
        keyspaces = keyspacesDecoded0
    }
}
