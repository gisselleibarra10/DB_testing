// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension KeyspacesClientTypes.SchemaDefinition: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case allColumns
        case clusteringKeys
        case partitionKeys
        case staticColumns
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let allColumns = allColumns {
            var allColumnsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .allColumns)
            for columndefinitionlist0 in allColumns {
                try allColumnsContainer.encode(columndefinitionlist0)
            }
        }
        if let clusteringKeys = clusteringKeys {
            var clusteringKeysContainer = encodeContainer.nestedUnkeyedContainer(forKey: .clusteringKeys)
            for clusteringkeylist0 in clusteringKeys {
                try clusteringKeysContainer.encode(clusteringkeylist0)
            }
        }
        if let partitionKeys = partitionKeys {
            var partitionKeysContainer = encodeContainer.nestedUnkeyedContainer(forKey: .partitionKeys)
            for partitionkeylist0 in partitionKeys {
                try partitionKeysContainer.encode(partitionkeylist0)
            }
        }
        if let staticColumns = staticColumns {
            var staticColumnsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .staticColumns)
            for staticcolumnlist0 in staticColumns {
                try staticColumnsContainer.encode(staticcolumnlist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let allColumnsContainer = try containerValues.decodeIfPresent([KeyspacesClientTypes.ColumnDefinition?].self, forKey: .allColumns)
        var allColumnsDecoded0:[KeyspacesClientTypes.ColumnDefinition]? = nil
        if let allColumnsContainer = allColumnsContainer {
            allColumnsDecoded0 = [KeyspacesClientTypes.ColumnDefinition]()
            for structure0 in allColumnsContainer {
                if let structure0 = structure0 {
                    allColumnsDecoded0?.append(structure0)
                }
            }
        }
        allColumns = allColumnsDecoded0
        let partitionKeysContainer = try containerValues.decodeIfPresent([KeyspacesClientTypes.PartitionKey?].self, forKey: .partitionKeys)
        var partitionKeysDecoded0:[KeyspacesClientTypes.PartitionKey]? = nil
        if let partitionKeysContainer = partitionKeysContainer {
            partitionKeysDecoded0 = [KeyspacesClientTypes.PartitionKey]()
            for structure0 in partitionKeysContainer {
                if let structure0 = structure0 {
                    partitionKeysDecoded0?.append(structure0)
                }
            }
        }
        partitionKeys = partitionKeysDecoded0
        let clusteringKeysContainer = try containerValues.decodeIfPresent([KeyspacesClientTypes.ClusteringKey?].self, forKey: .clusteringKeys)
        var clusteringKeysDecoded0:[KeyspacesClientTypes.ClusteringKey]? = nil
        if let clusteringKeysContainer = clusteringKeysContainer {
            clusteringKeysDecoded0 = [KeyspacesClientTypes.ClusteringKey]()
            for structure0 in clusteringKeysContainer {
                if let structure0 = structure0 {
                    clusteringKeysDecoded0?.append(structure0)
                }
            }
        }
        clusteringKeys = clusteringKeysDecoded0
        let staticColumnsContainer = try containerValues.decodeIfPresent([KeyspacesClientTypes.StaticColumn?].self, forKey: .staticColumns)
        var staticColumnsDecoded0:[KeyspacesClientTypes.StaticColumn]? = nil
        if let staticColumnsContainer = staticColumnsContainer {
            staticColumnsDecoded0 = [KeyspacesClientTypes.StaticColumn]()
            for structure0 in staticColumnsContainer {
                if let structure0 = structure0 {
                    staticColumnsDecoded0?.append(structure0)
                }
            }
        }
        staticColumns = staticColumnsDecoded0
    }
}
