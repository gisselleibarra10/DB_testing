// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateTableInputBody: Swift.Equatable {
    let keyspaceName: Swift.String?
    let tableName: Swift.String?
    let schemaDefinition: KeyspacesClientTypes.SchemaDefinition?
    let comment: KeyspacesClientTypes.Comment?
    let capacitySpecification: KeyspacesClientTypes.CapacitySpecification?
    let encryptionSpecification: KeyspacesClientTypes.EncryptionSpecification?
    let pointInTimeRecovery: KeyspacesClientTypes.PointInTimeRecovery?
    let ttl: KeyspacesClientTypes.TimeToLive?
    let defaultTimeToLive: Swift.Int?
    let tags: [KeyspacesClientTypes.Tag]?
}

extension CreateTableInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case capacitySpecification
        case comment
        case defaultTimeToLive
        case encryptionSpecification
        case keyspaceName
        case pointInTimeRecovery
        case schemaDefinition
        case tableName
        case tags
        case ttl
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyspaceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyspaceName)
        keyspaceName = keyspaceNameDecoded
        let tableNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tableName)
        tableName = tableNameDecoded
        let schemaDefinitionDecoded = try containerValues.decodeIfPresent(KeyspacesClientTypes.SchemaDefinition.self, forKey: .schemaDefinition)
        schemaDefinition = schemaDefinitionDecoded
        let commentDecoded = try containerValues.decodeIfPresent(KeyspacesClientTypes.Comment.self, forKey: .comment)
        comment = commentDecoded
        let capacitySpecificationDecoded = try containerValues.decodeIfPresent(KeyspacesClientTypes.CapacitySpecification.self, forKey: .capacitySpecification)
        capacitySpecification = capacitySpecificationDecoded
        let encryptionSpecificationDecoded = try containerValues.decodeIfPresent(KeyspacesClientTypes.EncryptionSpecification.self, forKey: .encryptionSpecification)
        encryptionSpecification = encryptionSpecificationDecoded
        let pointInTimeRecoveryDecoded = try containerValues.decodeIfPresent(KeyspacesClientTypes.PointInTimeRecovery.self, forKey: .pointInTimeRecovery)
        pointInTimeRecovery = pointInTimeRecoveryDecoded
        let ttlDecoded = try containerValues.decodeIfPresent(KeyspacesClientTypes.TimeToLive.self, forKey: .ttl)
        ttl = ttlDecoded
        let defaultTimeToLiveDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .defaultTimeToLive)
        defaultTimeToLive = defaultTimeToLiveDecoded
        let tagsContainer = try containerValues.decodeIfPresent([KeyspacesClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[KeyspacesClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [KeyspacesClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}
