// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension RestoreTableInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case capacitySpecificationOverride
        case encryptionSpecificationOverride
        case pointInTimeRecoveryOverride
        case restoreTimestamp
        case sourceKeyspaceName
        case sourceTableName
        case tagsOverride
        case targetKeyspaceName
        case targetTableName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let capacitySpecificationOverride = self.capacitySpecificationOverride {
            try encodeContainer.encode(capacitySpecificationOverride, forKey: .capacitySpecificationOverride)
        }
        if let encryptionSpecificationOverride = self.encryptionSpecificationOverride {
            try encodeContainer.encode(encryptionSpecificationOverride, forKey: .encryptionSpecificationOverride)
        }
        if let pointInTimeRecoveryOverride = self.pointInTimeRecoveryOverride {
            try encodeContainer.encode(pointInTimeRecoveryOverride, forKey: .pointInTimeRecoveryOverride)
        }
        if let restoreTimestamp = self.restoreTimestamp {
            try encodeContainer.encode(restoreTimestamp.timeIntervalSince1970, forKey: .restoreTimestamp)
        }
        if let sourceKeyspaceName = self.sourceKeyspaceName {
            try encodeContainer.encode(sourceKeyspaceName, forKey: .sourceKeyspaceName)
        }
        if let sourceTableName = self.sourceTableName {
            try encodeContainer.encode(sourceTableName, forKey: .sourceTableName)
        }
        if let tagsOverride = tagsOverride {
            var tagsOverrideContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tagsOverride)
            for taglist0 in tagsOverride {
                try tagsOverrideContainer.encode(taglist0)
            }
        }
        if let targetKeyspaceName = self.targetKeyspaceName {
            try encodeContainer.encode(targetKeyspaceName, forKey: .targetKeyspaceName)
        }
        if let targetTableName = self.targetTableName {
            try encodeContainer.encode(targetTableName, forKey: .targetTableName)
        }
    }
}
