// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct UpdateTableInputBody: Swift.Equatable {
    let keyspaceName: Swift.String?
    let tableName: Swift.String?
    let addColumns: [KeyspacesClientTypes.ColumnDefinition]?
    let capacitySpecification: KeyspacesClientTypes.CapacitySpecification?
    let encryptionSpecification: KeyspacesClientTypes.EncryptionSpecification?
    let pointInTimeRecovery: KeyspacesClientTypes.PointInTimeRecovery?
    let ttl: KeyspacesClientTypes.TimeToLive?
    let defaultTimeToLive: Swift.Int?
}

extension UpdateTableInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case addColumns
        case capacitySpecification
        case defaultTimeToLive
        case encryptionSpecification
        case keyspaceName
        case pointInTimeRecovery
        case tableName
        case ttl
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyspaceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyspaceName)
        keyspaceName = keyspaceNameDecoded
        let tableNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tableName)
        tableName = tableNameDecoded
        let addColumnsContainer = try containerValues.decodeIfPresent([KeyspacesClientTypes.ColumnDefinition?].self, forKey: .addColumns)
        var addColumnsDecoded0:[KeyspacesClientTypes.ColumnDefinition]? = nil
        if let addColumnsContainer = addColumnsContainer {
            addColumnsDecoded0 = [KeyspacesClientTypes.ColumnDefinition]()
            for structure0 in addColumnsContainer {
                if let structure0 = structure0 {
                    addColumnsDecoded0?.append(structure0)
                }
            }
        }
        addColumns = addColumnsDecoded0
        let capacitySpecificationDecoded = try containerValues.decodeIfPresent(KeyspacesClientTypes.CapacitySpecification.self, forKey: .capacitySpecification)
        capacitySpecification = capacitySpecificationDecoded
        let encryptionSpecificationDecoded = try containerValues.decodeIfPresent(KeyspacesClientTypes.EncryptionSpecification.self, forKey: .encryptionSpecification)
        encryptionSpecification = encryptionSpecificationDecoded
        let pointInTimeRecoveryDecoded = try containerValues.decodeIfPresent(KeyspacesClientTypes.PointInTimeRecovery.self, forKey: .pointInTimeRecovery)
        pointInTimeRecovery = pointInTimeRecoveryDecoded
        let ttlDecoded = try containerValues.decodeIfPresent(KeyspacesClientTypes.TimeToLive.self, forKey: .ttl)
        ttl = ttlDecoded
        let defaultTimeToLiveDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .defaultTimeToLive)
        defaultTimeToLive = defaultTimeToLiveDecoded
    }
}
