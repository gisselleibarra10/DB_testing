// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct RestoreTableInputBody: Swift.Equatable {
    let sourceKeyspaceName: Swift.String?
    let sourceTableName: Swift.String?
    let targetKeyspaceName: Swift.String?
    let targetTableName: Swift.String?
    let restoreTimestamp: ClientRuntime.Date?
    let capacitySpecificationOverride: KeyspacesClientTypes.CapacitySpecification?
    let encryptionSpecificationOverride: KeyspacesClientTypes.EncryptionSpecification?
    let pointInTimeRecoveryOverride: KeyspacesClientTypes.PointInTimeRecovery?
    let tagsOverride: [KeyspacesClientTypes.Tag]?
}

extension RestoreTableInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case capacitySpecificationOverride
        case encryptionSpecificationOverride
        case pointInTimeRecoveryOverride
        case restoreTimestamp
        case sourceKeyspaceName
        case sourceTableName
        case tagsOverride
        case targetKeyspaceName
        case targetTableName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sourceKeyspaceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceKeyspaceName)
        sourceKeyspaceName = sourceKeyspaceNameDecoded
        let sourceTableNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceTableName)
        sourceTableName = sourceTableNameDecoded
        let targetKeyspaceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .targetKeyspaceName)
        targetKeyspaceName = targetKeyspaceNameDecoded
        let targetTableNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .targetTableName)
        targetTableName = targetTableNameDecoded
        let restoreTimestampDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .restoreTimestamp)
        restoreTimestamp = restoreTimestampDecoded
        let capacitySpecificationOverrideDecoded = try containerValues.decodeIfPresent(KeyspacesClientTypes.CapacitySpecification.self, forKey: .capacitySpecificationOverride)
        capacitySpecificationOverride = capacitySpecificationOverrideDecoded
        let encryptionSpecificationOverrideDecoded = try containerValues.decodeIfPresent(KeyspacesClientTypes.EncryptionSpecification.self, forKey: .encryptionSpecificationOverride)
        encryptionSpecificationOverride = encryptionSpecificationOverrideDecoded
        let pointInTimeRecoveryOverrideDecoded = try containerValues.decodeIfPresent(KeyspacesClientTypes.PointInTimeRecovery.self, forKey: .pointInTimeRecoveryOverride)
        pointInTimeRecoveryOverride = pointInTimeRecoveryOverrideDecoded
        let tagsOverrideContainer = try containerValues.decodeIfPresent([KeyspacesClientTypes.Tag?].self, forKey: .tagsOverride)
        var tagsOverrideDecoded0:[KeyspacesClientTypes.Tag]? = nil
        if let tagsOverrideContainer = tagsOverrideContainer {
            tagsOverrideDecoded0 = [KeyspacesClientTypes.Tag]()
            for structure0 in tagsOverrideContainer {
                if let structure0 = structure0 {
                    tagsOverrideDecoded0?.append(structure0)
                }
            }
        }
        tagsOverride = tagsOverrideDecoded0
    }
}
