// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension KeyspacesClientTypes.CapacitySpecification: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case readCapacityUnits
        case throughputMode
        case writeCapacityUnits
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let readCapacityUnits = self.readCapacityUnits {
            try encodeContainer.encode(readCapacityUnits, forKey: .readCapacityUnits)
        }
        if let throughputMode = self.throughputMode {
            try encodeContainer.encode(throughputMode.rawValue, forKey: .throughputMode)
        }
        if let writeCapacityUnits = self.writeCapacityUnits {
            try encodeContainer.encode(writeCapacityUnits, forKey: .writeCapacityUnits)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let throughputModeDecoded = try containerValues.decodeIfPresent(KeyspacesClientTypes.ThroughputMode.self, forKey: .throughputMode)
        throughputMode = throughputModeDecoded
        let readCapacityUnitsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .readCapacityUnits)
        readCapacityUnits = readCapacityUnitsDecoded
        let writeCapacityUnitsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .writeCapacityUnits)
        writeCapacityUnits = writeCapacityUnitsDecoded
    }
}
