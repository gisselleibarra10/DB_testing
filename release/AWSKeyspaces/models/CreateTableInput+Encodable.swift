// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CreateTableInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case capacitySpecification
        case comment
        case defaultTimeToLive
        case encryptionSpecification
        case keyspaceName
        case pointInTimeRecovery
        case schemaDefinition
        case tableName
        case tags
        case ttl
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let capacitySpecification = self.capacitySpecification {
            try encodeContainer.encode(capacitySpecification, forKey: .capacitySpecification)
        }
        if let comment = self.comment {
            try encodeContainer.encode(comment, forKey: .comment)
        }
        if let defaultTimeToLive = self.defaultTimeToLive {
            try encodeContainer.encode(defaultTimeToLive, forKey: .defaultTimeToLive)
        }
        if let encryptionSpecification = self.encryptionSpecification {
            try encodeContainer.encode(encryptionSpecification, forKey: .encryptionSpecification)
        }
        if let keyspaceName = self.keyspaceName {
            try encodeContainer.encode(keyspaceName, forKey: .keyspaceName)
        }
        if let pointInTimeRecovery = self.pointInTimeRecovery {
            try encodeContainer.encode(pointInTimeRecovery, forKey: .pointInTimeRecovery)
        }
        if let schemaDefinition = self.schemaDefinition {
            try encodeContainer.encode(schemaDefinition, forKey: .schemaDefinition)
        }
        if let tableName = self.tableName {
            try encodeContainer.encode(tableName, forKey: .tableName)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
        if let ttl = self.ttl {
            try encodeContainer.encode(ttl, forKey: .ttl)
        }
    }
}
