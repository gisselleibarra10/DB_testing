// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension KeyspacesClientTypes.PointInTimeRecoverySummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case earliestRestorableTimestamp
        case status
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let earliestRestorableTimestamp = self.earliestRestorableTimestamp {
            try encodeContainer.encode(earliestRestorableTimestamp.timeIntervalSince1970, forKey: .earliestRestorableTimestamp)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statusDecoded = try containerValues.decodeIfPresent(KeyspacesClientTypes.PointInTimeRecoveryStatus.self, forKey: .status)
        status = statusDecoded
        let earliestRestorableTimestampDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .earliestRestorableTimestamp)
        earliestRestorableTimestamp = earliestRestorableTimestampDecoded
    }
}
