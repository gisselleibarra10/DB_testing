// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct SynthesizeSpeechInputGETQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "SynthesizeSpeechInputGETQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<SynthesizeSpeechInput>,
                  next: H) async throws -> ClientRuntime.OperationOutput<SynthesizeSpeechOutputResponse>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context
    {
        if let engine = input.operationInput.engine {
            let queryItem = ClientRuntime.URLQueryItem(name: "Engine".urlPercentEncoding(), value: Swift.String(engine.rawValue).urlPercentEncoding())
            input.builder.withQueryItem(queryItem)
        }
        if let languageCode = input.operationInput.languageCode {
            let queryItem = ClientRuntime.URLQueryItem(name: "LanguageCode".urlPercentEncoding(), value: Swift.String(languageCode.rawValue).urlPercentEncoding())
            input.builder.withQueryItem(queryItem)
        }
        if let lexiconNames = input.operationInput.lexiconNames {
            lexiconNames.forEach { item in
                let queryItem = ClientRuntime.URLQueryItem(name: "LexiconNames".urlPercentEncoding(), value: Swift.String(item).urlPercentEncoding())
                input.builder.withQueryItem(queryItem)
            }
        }
        if let outputFormat = input.operationInput.outputFormat {
            let queryItem = ClientRuntime.URLQueryItem(name: "OutputFormat".urlPercentEncoding(), value: Swift.String(outputFormat.rawValue).urlPercentEncoding())
            input.builder.withQueryItem(queryItem)
        }
        if let sampleRate = input.operationInput.sampleRate {
            let queryItem = ClientRuntime.URLQueryItem(name: "SampleRate".urlPercentEncoding(), value: Swift.String(sampleRate).urlPercentEncoding())
            input.builder.withQueryItem(queryItem)
        }
        if let speechMarkTypes = input.operationInput.speechMarkTypes {
            speechMarkTypes.forEach { item in
                let queryItem = ClientRuntime.URLQueryItem(name: "SpeechMarkTypes".urlPercentEncoding(), value: Swift.String(item.rawValue).urlPercentEncoding())
                input.builder.withQueryItem(queryItem)
            }
        }
        if let text = input.operationInput.text {
            let queryItem = ClientRuntime.URLQueryItem(name: "Text".urlPercentEncoding(), value: Swift.String(text).urlPercentEncoding())
            input.builder.withQueryItem(queryItem)
        }
        if let textType = input.operationInput.textType {
            let queryItem = ClientRuntime.URLQueryItem(name: "TextType".urlPercentEncoding(), value: Swift.String(textType.rawValue).urlPercentEncoding())
            input.builder.withQueryItem(queryItem)
        }
        if let voiceId = input.operationInput.voiceId {
            let queryItem = ClientRuntime.URLQueryItem(name: "VoiceId".urlPercentEncoding(), value: Swift.String(voiceId.rawValue).urlPercentEncoding())
            input.builder.withQueryItem(queryItem)
        }
        return try await next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<SynthesizeSpeechInput>
    public typealias MOutput = ClientRuntime.OperationOutput<SynthesizeSpeechOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
}
