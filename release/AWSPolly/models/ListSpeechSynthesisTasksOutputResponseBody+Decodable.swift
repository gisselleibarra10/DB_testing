// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListSpeechSynthesisTasksOutputResponseBody: Swift.Equatable {
    let nextToken: Swift.String?
    let synthesisTasks: [PollyClientTypes.SynthesisTask]?
}

extension ListSpeechSynthesisTasksOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case synthesisTasks = "SynthesisTasks"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let synthesisTasksContainer = try containerValues.decodeIfPresent([PollyClientTypes.SynthesisTask?].self, forKey: .synthesisTasks)
        var synthesisTasksDecoded0:[PollyClientTypes.SynthesisTask]? = nil
        if let synthesisTasksContainer = synthesisTasksContainer {
            synthesisTasksDecoded0 = [PollyClientTypes.SynthesisTask]()
            for structure0 in synthesisTasksContainer {
                if let structure0 = structure0 {
                    synthesisTasksDecoded0?.append(structure0)
                }
            }
        }
        synthesisTasks = synthesisTasksDecoded0
    }
}
