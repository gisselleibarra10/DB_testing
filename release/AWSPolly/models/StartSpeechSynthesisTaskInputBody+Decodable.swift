// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct StartSpeechSynthesisTaskInputBody: Swift.Equatable {
    let engine: PollyClientTypes.Engine?
    let languageCode: PollyClientTypes.LanguageCode?
    let lexiconNames: [Swift.String]?
    let outputFormat: PollyClientTypes.OutputFormat?
    let outputS3BucketName: Swift.String?
    let outputS3KeyPrefix: Swift.String?
    let sampleRate: Swift.String?
    let snsTopicArn: Swift.String?
    let speechMarkTypes: [PollyClientTypes.SpeechMarkType]?
    let text: Swift.String?
    let textType: PollyClientTypes.TextType?
    let voiceId: PollyClientTypes.VoiceId?
}

extension StartSpeechSynthesisTaskInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case engine = "Engine"
        case languageCode = "LanguageCode"
        case lexiconNames = "LexiconNames"
        case outputFormat = "OutputFormat"
        case outputS3BucketName = "OutputS3BucketName"
        case outputS3KeyPrefix = "OutputS3KeyPrefix"
        case sampleRate = "SampleRate"
        case snsTopicArn = "SnsTopicArn"
        case speechMarkTypes = "SpeechMarkTypes"
        case text = "Text"
        case textType = "TextType"
        case voiceId = "VoiceId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let engineDecoded = try containerValues.decodeIfPresent(PollyClientTypes.Engine.self, forKey: .engine)
        engine = engineDecoded
        let languageCodeDecoded = try containerValues.decodeIfPresent(PollyClientTypes.LanguageCode.self, forKey: .languageCode)
        languageCode = languageCodeDecoded
        let lexiconNamesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .lexiconNames)
        var lexiconNamesDecoded0:[Swift.String]? = nil
        if let lexiconNamesContainer = lexiconNamesContainer {
            lexiconNamesDecoded0 = [Swift.String]()
            for string0 in lexiconNamesContainer {
                if let string0 = string0 {
                    lexiconNamesDecoded0?.append(string0)
                }
            }
        }
        lexiconNames = lexiconNamesDecoded0
        let outputFormatDecoded = try containerValues.decodeIfPresent(PollyClientTypes.OutputFormat.self, forKey: .outputFormat)
        outputFormat = outputFormatDecoded
        let outputS3BucketNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .outputS3BucketName)
        outputS3BucketName = outputS3BucketNameDecoded
        let outputS3KeyPrefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .outputS3KeyPrefix)
        outputS3KeyPrefix = outputS3KeyPrefixDecoded
        let sampleRateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sampleRate)
        sampleRate = sampleRateDecoded
        let snsTopicArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .snsTopicArn)
        snsTopicArn = snsTopicArnDecoded
        let speechMarkTypesContainer = try containerValues.decodeIfPresent([PollyClientTypes.SpeechMarkType?].self, forKey: .speechMarkTypes)
        var speechMarkTypesDecoded0:[PollyClientTypes.SpeechMarkType]? = nil
        if let speechMarkTypesContainer = speechMarkTypesContainer {
            speechMarkTypesDecoded0 = [PollyClientTypes.SpeechMarkType]()
            for enum0 in speechMarkTypesContainer {
                if let enum0 = enum0 {
                    speechMarkTypesDecoded0?.append(enum0)
                }
            }
        }
        speechMarkTypes = speechMarkTypesDecoded0
        let textDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .text)
        text = textDecoded
        let textTypeDecoded = try containerValues.decodeIfPresent(PollyClientTypes.TextType.self, forKey: .textType)
        textType = textTypeDecoded
        let voiceIdDecoded = try containerValues.decodeIfPresent(PollyClientTypes.VoiceId.self, forKey: .voiceId)
        voiceId = voiceIdDecoded
    }
}
