// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension PollyClientTypes.Voice: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case additionalLanguageCodes = "AdditionalLanguageCodes"
        case gender = "Gender"
        case id = "Id"
        case languageCode = "LanguageCode"
        case languageName = "LanguageName"
        case name = "Name"
        case supportedEngines = "SupportedEngines"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let additionalLanguageCodes = additionalLanguageCodes {
            var additionalLanguageCodesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .additionalLanguageCodes)
            for languagecodelist0 in additionalLanguageCodes {
                try additionalLanguageCodesContainer.encode(languagecodelist0.rawValue)
            }
        }
        if let gender = self.gender {
            try encodeContainer.encode(gender.rawValue, forKey: .gender)
        }
        if let id = self.id {
            try encodeContainer.encode(id.rawValue, forKey: .id)
        }
        if let languageCode = self.languageCode {
            try encodeContainer.encode(languageCode.rawValue, forKey: .languageCode)
        }
        if let languageName = self.languageName {
            try encodeContainer.encode(languageName, forKey: .languageName)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let supportedEngines = supportedEngines {
            var supportedEnginesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .supportedEngines)
            for enginelist0 in supportedEngines {
                try supportedEnginesContainer.encode(enginelist0.rawValue)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let genderDecoded = try containerValues.decodeIfPresent(PollyClientTypes.Gender.self, forKey: .gender)
        gender = genderDecoded
        let idDecoded = try containerValues.decodeIfPresent(PollyClientTypes.VoiceId.self, forKey: .id)
        id = idDecoded
        let languageCodeDecoded = try containerValues.decodeIfPresent(PollyClientTypes.LanguageCode.self, forKey: .languageCode)
        languageCode = languageCodeDecoded
        let languageNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .languageName)
        languageName = languageNameDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let additionalLanguageCodesContainer = try containerValues.decodeIfPresent([PollyClientTypes.LanguageCode?].self, forKey: .additionalLanguageCodes)
        var additionalLanguageCodesDecoded0:[PollyClientTypes.LanguageCode]? = nil
        if let additionalLanguageCodesContainer = additionalLanguageCodesContainer {
            additionalLanguageCodesDecoded0 = [PollyClientTypes.LanguageCode]()
            for enum0 in additionalLanguageCodesContainer {
                if let enum0 = enum0 {
                    additionalLanguageCodesDecoded0?.append(enum0)
                }
            }
        }
        additionalLanguageCodes = additionalLanguageCodesDecoded0
        let supportedEnginesContainer = try containerValues.decodeIfPresent([PollyClientTypes.Engine?].self, forKey: .supportedEngines)
        var supportedEnginesDecoded0:[PollyClientTypes.Engine]? = nil
        if let supportedEnginesContainer = supportedEnginesContainer {
            supportedEnginesDecoded0 = [PollyClientTypes.Engine]()
            for enum0 in supportedEnginesContainer {
                if let enum0 = enum0 {
                    supportedEnginesDecoded0?.append(enum0)
                }
            }
        }
        supportedEngines = supportedEnginesDecoded0
    }
}
