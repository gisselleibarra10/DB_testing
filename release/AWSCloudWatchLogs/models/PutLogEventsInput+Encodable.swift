// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension PutLogEventsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case logEvents
        case logGroupName
        case logStreamName
        case sequenceToken
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let logEvents = logEvents {
            var logEventsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .logEvents)
            for inputlogevents0 in logEvents {
                try logEventsContainer.encode(inputlogevents0)
            }
        }
        if let logGroupName = self.logGroupName {
            try encodeContainer.encode(logGroupName, forKey: .logGroupName)
        }
        if let logStreamName = self.logStreamName {
            try encodeContainer.encode(logStreamName, forKey: .logStreamName)
        }
        if let sequenceToken = self.sequenceToken {
            try encodeContainer.encode(sequenceToken, forKey: .sequenceToken)
        }
    }
}
