// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct TestMetricFilterInputBody: Swift.Equatable {
    let filterPattern: Swift.String?
    let logEventMessages: [Swift.String]?
}

extension TestMetricFilterInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filterPattern
        case logEventMessages
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let filterPatternDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .filterPattern)
        filterPattern = filterPatternDecoded
        let logEventMessagesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .logEventMessages)
        var logEventMessagesDecoded0:[Swift.String]? = nil
        if let logEventMessagesContainer = logEventMessagesContainer {
            logEventMessagesDecoded0 = [Swift.String]()
            for string0 in logEventMessagesContainer {
                if let string0 = string0 {
                    logEventMessagesDecoded0?.append(string0)
                }
            }
        }
        logEventMessages = logEventMessagesDecoded0
    }
}
