// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateExportTaskInputBody: Swift.Equatable {
    let taskName: Swift.String?
    let logGroupName: Swift.String?
    let logStreamNamePrefix: Swift.String?
    let from: Swift.Int?
    let to: Swift.Int?
    let destination: Swift.String?
    let destinationPrefix: Swift.String?
}

extension CreateExportTaskInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case destination
        case destinationPrefix
        case from
        case logGroupName
        case logStreamNamePrefix
        case taskName
        case to
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let taskNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .taskName)
        taskName = taskNameDecoded
        let logGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logGroupName)
        logGroupName = logGroupNameDecoded
        let logStreamNamePrefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logStreamNamePrefix)
        logStreamNamePrefix = logStreamNamePrefixDecoded
        let fromDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .from)
        from = fromDecoded
        let toDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .to)
        to = toDecoded
        let destinationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .destination)
        destination = destinationDecoded
        let destinationPrefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .destinationPrefix)
        destinationPrefix = destinationPrefixDecoded
    }
}
