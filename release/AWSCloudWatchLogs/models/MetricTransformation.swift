// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension CloudWatchLogsClientTypes {
    /// Indicates how to transform ingested log events to metric data in a CloudWatch metric.
    public struct MetricTransformation: Swift.Equatable {
        /// (Optional) The value to emit when a filter pattern does not match a log event. This value can be null.
        public var defaultValue: Swift.Double?
        /// The fields to use as dimensions for the metric. One metric filter can include as many as three dimensions. Metrics extracted from log events are charged as custom metrics. To prevent unexpected high charges, do not specify high-cardinality fields such as IPAddress or requestID as dimensions. Each different value found for a dimension is treated as a separate metric and accrues charges as a separate custom metric. To help prevent accidental high charges, Amazon disables a metric filter if it generates 1000 different name/value pairs for the dimensions that you have specified within a certain amount of time. You can also set up a billing alarm to alert you if your charges are higher than expected. For more information, see [ Creating a Billing Alarm to Monitor Your Estimated Amazon Web Services Charges](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/monitor_estimated_charges_with_cloudwatch.html).
        public var dimensions: [Swift.String:Swift.String]?
        /// The name of the CloudWatch metric.
        /// This member is required.
        public var metricName: Swift.String?
        /// A custom namespace to contain your metric in CloudWatch. Use namespaces to group together metrics that are similar. For more information, see [Namespaces](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/cloudwatch_concepts.html#Namespace).
        /// This member is required.
        public var metricNamespace: Swift.String?
        /// The value to publish to the CloudWatch metric when a filter pattern matches a log event.
        /// This member is required.
        public var metricValue: Swift.String?
        /// The unit to assign to the metric. If you omit this, the unit is set as None.
        public var unit: CloudWatchLogsClientTypes.StandardUnit?

        public init (
            defaultValue: Swift.Double? = nil,
            dimensions: [Swift.String:Swift.String]? = nil,
            metricName: Swift.String? = nil,
            metricNamespace: Swift.String? = nil,
            metricValue: Swift.String? = nil,
            unit: CloudWatchLogsClientTypes.StandardUnit? = nil
        )
        {
            self.defaultValue = defaultValue
            self.dimensions = dimensions
            self.metricName = metricName
            self.metricNamespace = metricNamespace
            self.metricValue = metricValue
            self.unit = unit
        }
    }

}
