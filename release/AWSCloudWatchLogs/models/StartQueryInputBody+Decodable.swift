// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct StartQueryInputBody: Swift.Equatable {
    let logGroupName: Swift.String?
    let logGroupNames: [Swift.String]?
    let startTime: Swift.Int?
    let endTime: Swift.Int?
    let queryString: Swift.String?
    let limit: Swift.Int?
}

extension StartQueryInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case endTime
        case limit
        case logGroupName
        case logGroupNames
        case queryString
        case startTime
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let logGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logGroupName)
        logGroupName = logGroupNameDecoded
        let logGroupNamesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .logGroupNames)
        var logGroupNamesDecoded0:[Swift.String]? = nil
        if let logGroupNamesContainer = logGroupNamesContainer {
            logGroupNamesDecoded0 = [Swift.String]()
            for string0 in logGroupNamesContainer {
                if let string0 = string0 {
                    logGroupNamesDecoded0?.append(string0)
                }
            }
        }
        logGroupNames = logGroupNamesDecoded0
        let startTimeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .startTime)
        startTime = startTimeDecoded
        let endTimeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .endTime)
        endTime = endTimeDecoded
        let queryStringDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .queryString)
        queryString = queryStringDecoded
        let limitDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .limit)
        limit = limitDecoded
    }
}
