// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CloudWatchLogsClientTypes.FilteredLogEvent: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case eventId
        case ingestionTime
        case logStreamName
        case message
        case timestamp
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let eventId = self.eventId {
            try encodeContainer.encode(eventId, forKey: .eventId)
        }
        if let ingestionTime = self.ingestionTime {
            try encodeContainer.encode(ingestionTime, forKey: .ingestionTime)
        }
        if let logStreamName = self.logStreamName {
            try encodeContainer.encode(logStreamName, forKey: .logStreamName)
        }
        if let message = self.message {
            try encodeContainer.encode(message, forKey: .message)
        }
        if let timestamp = self.timestamp {
            try encodeContainer.encode(timestamp, forKey: .timestamp)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let logStreamNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logStreamName)
        logStreamName = logStreamNameDecoded
        let timestampDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .timestamp)
        timestamp = timestampDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let ingestionTimeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .ingestionTime)
        ingestionTime = ingestionTimeDecoded
        let eventIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .eventId)
        eventId = eventIdDecoded
    }
}
