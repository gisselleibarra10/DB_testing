// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct FilterLogEventsInputBody: Swift.Equatable {
    let logGroupName: Swift.String?
    let logStreamNames: [Swift.String]?
    let logStreamNamePrefix: Swift.String?
    let startTime: Swift.Int?
    let endTime: Swift.Int?
    let filterPattern: Swift.String?
    let nextToken: Swift.String?
    let limit: Swift.Int?
    let interleaved: Swift.Bool?
}

extension FilterLogEventsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case endTime
        case filterPattern
        case interleaved
        case limit
        case logGroupName
        case logStreamNamePrefix
        case logStreamNames
        case nextToken
        case startTime
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let logGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logGroupName)
        logGroupName = logGroupNameDecoded
        let logStreamNamesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .logStreamNames)
        var logStreamNamesDecoded0:[Swift.String]? = nil
        if let logStreamNamesContainer = logStreamNamesContainer {
            logStreamNamesDecoded0 = [Swift.String]()
            for string0 in logStreamNamesContainer {
                if let string0 = string0 {
                    logStreamNamesDecoded0?.append(string0)
                }
            }
        }
        logStreamNames = logStreamNamesDecoded0
        let logStreamNamePrefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logStreamNamePrefix)
        logStreamNamePrefix = logStreamNamePrefixDecoded
        let startTimeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .startTime)
        startTime = startTimeDecoded
        let endTimeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .endTime)
        endTime = endTimeDecoded
        let filterPatternDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .filterPattern)
        filterPattern = filterPatternDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let limitDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .limit)
        limit = limitDecoded
        let interleavedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .interleaved)
        interleaved = interleavedDecoded
    }
}
