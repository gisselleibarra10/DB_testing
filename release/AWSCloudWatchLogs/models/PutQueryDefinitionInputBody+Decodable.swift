// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct PutQueryDefinitionInputBody: Swift.Equatable {
    let name: Swift.String?
    let queryDefinitionId: Swift.String?
    let logGroupNames: [Swift.String]?
    let queryString: Swift.String?
}

extension PutQueryDefinitionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case logGroupNames
        case name
        case queryDefinitionId
        case queryString
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let queryDefinitionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .queryDefinitionId)
        queryDefinitionId = queryDefinitionIdDecoded
        let logGroupNamesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .logGroupNames)
        var logGroupNamesDecoded0:[Swift.String]? = nil
        if let logGroupNamesContainer = logGroupNamesContainer {
            logGroupNamesDecoded0 = [Swift.String]()
            for string0 in logGroupNamesContainer {
                if let string0 = string0 {
                    logGroupNamesDecoded0?.append(string0)
                }
            }
        }
        logGroupNames = logGroupNamesDecoded0
        let queryStringDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .queryString)
        queryString = queryStringDecoded
    }
}
