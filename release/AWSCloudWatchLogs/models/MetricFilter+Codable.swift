// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CloudWatchLogsClientTypes.MetricFilter: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTime
        case filterName
        case filterPattern
        case logGroupName
        case metricTransformations
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationTime = self.creationTime {
            try encodeContainer.encode(creationTime, forKey: .creationTime)
        }
        if let filterName = self.filterName {
            try encodeContainer.encode(filterName, forKey: .filterName)
        }
        if let filterPattern = self.filterPattern {
            try encodeContainer.encode(filterPattern, forKey: .filterPattern)
        }
        if let logGroupName = self.logGroupName {
            try encodeContainer.encode(logGroupName, forKey: .logGroupName)
        }
        if let metricTransformations = metricTransformations {
            var metricTransformationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .metricTransformations)
            for metrictransformations0 in metricTransformations {
                try metricTransformationsContainer.encode(metrictransformations0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let filterNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .filterName)
        filterName = filterNameDecoded
        let filterPatternDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .filterPattern)
        filterPattern = filterPatternDecoded
        let metricTransformationsContainer = try containerValues.decodeIfPresent([CloudWatchLogsClientTypes.MetricTransformation?].self, forKey: .metricTransformations)
        var metricTransformationsDecoded0:[CloudWatchLogsClientTypes.MetricTransformation]? = nil
        if let metricTransformationsContainer = metricTransformationsContainer {
            metricTransformationsDecoded0 = [CloudWatchLogsClientTypes.MetricTransformation]()
            for structure0 in metricTransformationsContainer {
                if let structure0 = structure0 {
                    metricTransformationsDecoded0?.append(structure0)
                }
            }
        }
        metricTransformations = metricTransformationsDecoded0
        let creationTimeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let logGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logGroupName)
        logGroupName = logGroupNameDecoded
    }
}
