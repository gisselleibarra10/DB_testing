// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct PutLogEventsInputBody: Swift.Equatable {
    let logGroupName: Swift.String?
    let logStreamName: Swift.String?
    let logEvents: [CloudWatchLogsClientTypes.InputLogEvent]?
    let sequenceToken: Swift.String?
}

extension PutLogEventsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case logEvents
        case logGroupName
        case logStreamName
        case sequenceToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let logGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logGroupName)
        logGroupName = logGroupNameDecoded
        let logStreamNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logStreamName)
        logStreamName = logStreamNameDecoded
        let logEventsContainer = try containerValues.decodeIfPresent([CloudWatchLogsClientTypes.InputLogEvent?].self, forKey: .logEvents)
        var logEventsDecoded0:[CloudWatchLogsClientTypes.InputLogEvent]? = nil
        if let logEventsContainer = logEventsContainer {
            logEventsDecoded0 = [CloudWatchLogsClientTypes.InputLogEvent]()
            for structure0 in logEventsContainer {
                if let structure0 = structure0 {
                    logEventsDecoded0?.append(structure0)
                }
            }
        }
        logEvents = logEventsDecoded0
        let sequenceTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sequenceToken)
        sequenceToken = sequenceTokenDecoded
    }
}
