// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct PutSubscriptionFilterInputBody: Swift.Equatable {
    let logGroupName: Swift.String?
    let filterName: Swift.String?
    let filterPattern: Swift.String?
    let destinationArn: Swift.String?
    let roleArn: Swift.String?
    let distribution: CloudWatchLogsClientTypes.Distribution?
}

extension PutSubscriptionFilterInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case destinationArn
        case distribution
        case filterName
        case filterPattern
        case logGroupName
        case roleArn
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let logGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logGroupName)
        logGroupName = logGroupNameDecoded
        let filterNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .filterName)
        filterName = filterNameDecoded
        let filterPatternDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .filterPattern)
        filterPattern = filterPatternDecoded
        let destinationArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .destinationArn)
        destinationArn = destinationArnDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let distributionDecoded = try containerValues.decodeIfPresent(CloudWatchLogsClientTypes.Distribution.self, forKey: .distribution)
        distribution = distributionDecoded
    }
}
