// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListRecordsOutputResponseBody: Swift.Equatable {
    let records: [CognitoSyncClientTypes.Record]?
    let nextToken: Swift.String?
    let count: Swift.Int
    let datasetSyncCount: Swift.Int?
    let lastModifiedBy: Swift.String?
    let mergedDatasetNames: [Swift.String]?
    let datasetExists: Swift.Bool
    let datasetDeletedAfterRequestedSyncCount: Swift.Bool
    let syncSessionToken: Swift.String?
}

extension ListRecordsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case count = "Count"
        case datasetDeletedAfterRequestedSyncCount = "DatasetDeletedAfterRequestedSyncCount"
        case datasetExists = "DatasetExists"
        case datasetSyncCount = "DatasetSyncCount"
        case lastModifiedBy = "LastModifiedBy"
        case mergedDatasetNames = "MergedDatasetNames"
        case nextToken = "NextToken"
        case records = "Records"
        case syncSessionToken = "SyncSessionToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let recordsContainer = try containerValues.decodeIfPresent([CognitoSyncClientTypes.Record?].self, forKey: .records)
        var recordsDecoded0:[CognitoSyncClientTypes.Record]? = nil
        if let recordsContainer = recordsContainer {
            recordsDecoded0 = [CognitoSyncClientTypes.Record]()
            for structure0 in recordsContainer {
                if let structure0 = structure0 {
                    recordsDecoded0?.append(structure0)
                }
            }
        }
        records = recordsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let countDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .count) ?? 0
        count = countDecoded
        let datasetSyncCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .datasetSyncCount)
        datasetSyncCount = datasetSyncCountDecoded
        let lastModifiedByDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastModifiedBy)
        lastModifiedBy = lastModifiedByDecoded
        let mergedDatasetNamesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .mergedDatasetNames)
        var mergedDatasetNamesDecoded0:[Swift.String]? = nil
        if let mergedDatasetNamesContainer = mergedDatasetNamesContainer {
            mergedDatasetNamesDecoded0 = [Swift.String]()
            for string0 in mergedDatasetNamesContainer {
                if let string0 = string0 {
                    mergedDatasetNamesDecoded0?.append(string0)
                }
            }
        }
        mergedDatasetNames = mergedDatasetNamesDecoded0
        let datasetExistsDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .datasetExists) ?? false
        datasetExists = datasetExistsDecoded
        let datasetDeletedAfterRequestedSyncCountDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .datasetDeletedAfterRequestedSyncCount) ?? false
        datasetDeletedAfterRequestedSyncCount = datasetDeletedAfterRequestedSyncCountDecoded
        let syncSessionTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .syncSessionToken)
        syncSessionToken = syncSessionTokenDecoded
    }
}
