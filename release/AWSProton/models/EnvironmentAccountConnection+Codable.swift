// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ProtonClientTypes.EnvironmentAccountConnection: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn
        case componentRoleArn
        case environmentAccountId
        case environmentName
        case id
        case lastModifiedAt
        case managementAccountId
        case requestedAt
        case roleArn
        case status
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = self.arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let componentRoleArn = self.componentRoleArn {
            try encodeContainer.encode(componentRoleArn, forKey: .componentRoleArn)
        }
        if let environmentAccountId = self.environmentAccountId {
            try encodeContainer.encode(environmentAccountId, forKey: .environmentAccountId)
        }
        if let environmentName = self.environmentName {
            try encodeContainer.encode(environmentName, forKey: .environmentName)
        }
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let lastModifiedAt = self.lastModifiedAt {
            try encodeContainer.encode(lastModifiedAt.timeIntervalSince1970, forKey: .lastModifiedAt)
        }
        if let managementAccountId = self.managementAccountId {
            try encodeContainer.encode(managementAccountId, forKey: .managementAccountId)
        }
        if let requestedAt = self.requestedAt {
            try encodeContainer.encode(requestedAt.timeIntervalSince1970, forKey: .requestedAt)
        }
        if let roleArn = self.roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let managementAccountIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .managementAccountId)
        managementAccountId = managementAccountIdDecoded
        let environmentAccountIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .environmentAccountId)
        environmentAccountId = environmentAccountIdDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let environmentNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .environmentName)
        environmentName = environmentNameDecoded
        let requestedAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .requestedAt)
        requestedAt = requestedAtDecoded
        let lastModifiedAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedAt)
        lastModifiedAt = lastModifiedAtDecoded
        let statusDecoded = try containerValues.decodeIfPresent(ProtonClientTypes.EnvironmentAccountConnectionStatus.self, forKey: .status)
        status = statusDecoded
        let componentRoleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .componentRoleArn)
        componentRoleArn = componentRoleArnDecoded
    }
}
