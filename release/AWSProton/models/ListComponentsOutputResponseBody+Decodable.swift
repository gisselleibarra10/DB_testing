// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListComponentsOutputResponseBody: Swift.Equatable {
    let nextToken: Swift.String?
    let components: [ProtonClientTypes.ComponentSummary]?
}

extension ListComponentsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case components
        case nextToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let componentsContainer = try containerValues.decodeIfPresent([ProtonClientTypes.ComponentSummary?].self, forKey: .components)
        var componentsDecoded0:[ProtonClientTypes.ComponentSummary]? = nil
        if let componentsContainer = componentsContainer {
            componentsDecoded0 = [ProtonClientTypes.ComponentSummary]()
            for structure0 in componentsContainer {
                if let structure0 = structure0 {
                    componentsDecoded0?.append(structure0)
                }
            }
        }
        components = componentsDecoded0
    }
}
