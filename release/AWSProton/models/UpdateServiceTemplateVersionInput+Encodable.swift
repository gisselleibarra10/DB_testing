// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension UpdateServiceTemplateVersionInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case compatibleEnvironmentTemplates
        case description
        case majorVersion
        case minorVersion
        case status
        case supportedComponentSources
        case templateName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let compatibleEnvironmentTemplates = compatibleEnvironmentTemplates {
            var compatibleEnvironmentTemplatesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .compatibleEnvironmentTemplates)
            for compatibleenvironmenttemplateinputlist0 in compatibleEnvironmentTemplates {
                try compatibleEnvironmentTemplatesContainer.encode(compatibleenvironmenttemplateinputlist0)
            }
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let majorVersion = self.majorVersion {
            try encodeContainer.encode(majorVersion, forKey: .majorVersion)
        }
        if let minorVersion = self.minorVersion {
            try encodeContainer.encode(minorVersion, forKey: .minorVersion)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let supportedComponentSources = supportedComponentSources {
            var supportedComponentSourcesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .supportedComponentSources)
            for servicetemplatesupportedcomponentsourceinputlist0 in supportedComponentSources {
                try supportedComponentSourcesContainer.encode(servicetemplatesupportedcomponentsourceinputlist0.rawValue)
            }
        }
        if let templateName = self.templateName {
            try encodeContainer.encode(templateName, forKey: .templateName)
        }
    }
}
