// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct UpdateTemplateSyncConfigInputBody: Swift.Equatable {
    let templateName: Swift.String?
    let templateType: ProtonClientTypes.TemplateType?
    let repositoryProvider: ProtonClientTypes.RepositoryProvider?
    let repositoryName: Swift.String?
    let branch: Swift.String?
    let subdirectory: Swift.String?
}

extension UpdateTemplateSyncConfigInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case branch
        case repositoryName
        case repositoryProvider
        case subdirectory
        case templateName
        case templateType
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let templateNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateName)
        templateName = templateNameDecoded
        let templateTypeDecoded = try containerValues.decodeIfPresent(ProtonClientTypes.TemplateType.self, forKey: .templateType)
        templateType = templateTypeDecoded
        let repositoryProviderDecoded = try containerValues.decodeIfPresent(ProtonClientTypes.RepositoryProvider.self, forKey: .repositoryProvider)
        repositoryProvider = repositoryProviderDecoded
        let repositoryNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .repositoryName)
        repositoryName = repositoryNameDecoded
        let branchDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .branch)
        branch = branchDecoded
        let subdirectoryDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .subdirectory)
        subdirectory = subdirectoryDecoded
    }
}
