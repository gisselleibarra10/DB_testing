// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct UpdateComponentInputBody: Swift.Equatable {
    let name: Swift.String?
    let deploymentType: ProtonClientTypes.ComponentDeploymentUpdateType?
    let description: Swift.String?
    let serviceName: Swift.String?
    let serviceInstanceName: Swift.String?
    let serviceSpec: Swift.String?
    let templateFile: Swift.String?
}

extension UpdateComponentInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deploymentType
        case description
        case name
        case serviceInstanceName
        case serviceName
        case serviceSpec
        case templateFile
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let deploymentTypeDecoded = try containerValues.decodeIfPresent(ProtonClientTypes.ComponentDeploymentUpdateType.self, forKey: .deploymentType)
        deploymentType = deploymentTypeDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let serviceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serviceName)
        serviceName = serviceNameDecoded
        let serviceInstanceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serviceInstanceName)
        serviceInstanceName = serviceInstanceNameDecoded
        let serviceSpecDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serviceSpec)
        serviceSpec = serviceSpecDecoded
        let templateFileDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateFile)
        templateFile = templateFileDecoded
    }
}
