// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ProtonClientTypes.Revision: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case branch
        case directory
        case repositoryName
        case repositoryProvider
        case sha
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let branch = self.branch {
            try encodeContainer.encode(branch, forKey: .branch)
        }
        if let directory = self.directory {
            try encodeContainer.encode(directory, forKey: .directory)
        }
        if let repositoryName = self.repositoryName {
            try encodeContainer.encode(repositoryName, forKey: .repositoryName)
        }
        if let repositoryProvider = self.repositoryProvider {
            try encodeContainer.encode(repositoryProvider.rawValue, forKey: .repositoryProvider)
        }
        if let sha = self.sha {
            try encodeContainer.encode(sha, forKey: .sha)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let repositoryNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .repositoryName)
        repositoryName = repositoryNameDecoded
        let repositoryProviderDecoded = try containerValues.decodeIfPresent(ProtonClientTypes.RepositoryProvider.self, forKey: .repositoryProvider)
        repositoryProvider = repositoryProviderDecoded
        let shaDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sha)
        sha = shaDecoded
        let directoryDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .directory)
        directory = directoryDecoded
        let branchDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .branch)
        branch = branchDecoded
    }
}
