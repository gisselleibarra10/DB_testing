// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CreateServiceInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case branchName
        case description
        case name
        case repositoryConnectionArn
        case repositoryId
        case spec
        case tags
        case templateMajorVersion
        case templateMinorVersion
        case templateName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let branchName = self.branchName {
            try encodeContainer.encode(branchName, forKey: .branchName)
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let repositoryConnectionArn = self.repositoryConnectionArn {
            try encodeContainer.encode(repositoryConnectionArn, forKey: .repositoryConnectionArn)
        }
        if let repositoryId = self.repositoryId {
            try encodeContainer.encode(repositoryId, forKey: .repositoryId)
        }
        if let spec = self.spec {
            try encodeContainer.encode(spec, forKey: .spec)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
        if let templateMajorVersion = self.templateMajorVersion {
            try encodeContainer.encode(templateMajorVersion, forKey: .templateMajorVersion)
        }
        if let templateMinorVersion = self.templateMinorVersion {
            try encodeContainer.encode(templateMinorVersion, forKey: .templateMinorVersion)
        }
        if let templateName = self.templateName {
            try encodeContainer.encode(templateName, forKey: .templateName)
        }
    }
}
