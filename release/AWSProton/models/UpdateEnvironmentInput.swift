// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct UpdateEnvironmentInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the IAM service role that Proton uses when provisioning directly defined components in this environment. It determines the scope of infrastructure that a component can provision. The environment must have a componentRoleArn to allow directly defined components to be associated with the environment. For more information about components, see [Proton components](https://docs.aws.amazon.com/proton/latest/userguide/ag-components.html) in the Proton User Guide.
    public var componentRoleArn: Swift.String?
    /// There are four modes for updating an environment. The deploymentType field defines the mode. NONE In this mode, a deployment doesn't occur. Only the requested metadata parameters are updated. CURRENT_VERSION In this mode, the environment is deployed and updated with the new spec that you provide. Only requested parameters are updated. Donâ€™t include major or minor version parameters when you use this deployment-type. MINOR_VERSION In this mode, the environment is deployed and updated with the published, recommended (latest) minor version of the current major version in use, by default. You can also specify a different minor version of the current major version in use. MAJOR_VERSION In this mode, the environment is deployed and updated with the published, recommended (latest) major and minor version of the current template, by default. You can also specify a different major version that is higher than the major version in use and a minor version (optional).
    /// This member is required.
    public var deploymentType: ProtonClientTypes.DeploymentUpdateType?
    /// A description of the environment update.
    public var description: Swift.String?
    /// The ID of the environment account connection. You can only update to a new environment account connection if it was created in the same environment account that the current environment account connection was created in and is associated with the current environment.
    public var environmentAccountConnectionId: Swift.String?
    /// The name of the environment to update.
    /// This member is required.
    public var name: Swift.String?
    /// The Amazon Resource Name (ARN) of the Proton service role that allows Proton to make API calls to other services your behalf.
    public var protonServiceRoleArn: Swift.String?
    /// The linked repository that you use to host your rendered infrastructure templates for self-managed provisioning. A linked repository is a repository that has been registered with Proton. For more information, see [CreateRepository].
    public var provisioningRepository: ProtonClientTypes.RepositoryBranchInput?
    /// The formatted specification that defines the update.
    public var spec: Swift.String?
    /// The major version of the environment to update.
    public var templateMajorVersion: Swift.String?
    /// The minor version of the environment to update.
    public var templateMinorVersion: Swift.String?

    public init (
        componentRoleArn: Swift.String? = nil,
        deploymentType: ProtonClientTypes.DeploymentUpdateType? = nil,
        description: Swift.String? = nil,
        environmentAccountConnectionId: Swift.String? = nil,
        name: Swift.String? = nil,
        protonServiceRoleArn: Swift.String? = nil,
        provisioningRepository: ProtonClientTypes.RepositoryBranchInput? = nil,
        spec: Swift.String? = nil,
        templateMajorVersion: Swift.String? = nil,
        templateMinorVersion: Swift.String? = nil
    )
    {
        self.componentRoleArn = componentRoleArn
        self.deploymentType = deploymentType
        self.description = description
        self.environmentAccountConnectionId = environmentAccountConnectionId
        self.name = name
        self.protonServiceRoleArn = protonServiceRoleArn
        self.provisioningRepository = provisioningRepository
        self.spec = spec
        self.templateMajorVersion = templateMajorVersion
        self.templateMinorVersion = templateMinorVersion
    }
}
