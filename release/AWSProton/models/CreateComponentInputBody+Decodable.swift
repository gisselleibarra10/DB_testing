// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateComponentInputBody: Swift.Equatable {
    let name: Swift.String?
    let description: Swift.String?
    let serviceName: Swift.String?
    let serviceInstanceName: Swift.String?
    let environmentName: Swift.String?
    let templateFile: Swift.String?
    let manifest: Swift.String?
    let serviceSpec: Swift.String?
    let tags: [ProtonClientTypes.Tag]?
}

extension CreateComponentInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description
        case environmentName
        case manifest
        case name
        case serviceInstanceName
        case serviceName
        case serviceSpec
        case tags
        case templateFile
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let serviceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serviceName)
        serviceName = serviceNameDecoded
        let serviceInstanceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serviceInstanceName)
        serviceInstanceName = serviceInstanceNameDecoded
        let environmentNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .environmentName)
        environmentName = environmentNameDecoded
        let templateFileDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateFile)
        templateFile = templateFileDecoded
        let manifestDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .manifest)
        manifest = manifestDecoded
        let serviceSpecDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serviceSpec)
        serviceSpec = serviceSpecDecoded
        let tagsContainer = try containerValues.decodeIfPresent([ProtonClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[ProtonClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [ProtonClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}
