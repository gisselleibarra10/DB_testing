// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct CreateComponentInput: Swift.Equatable {
    /// An optional customer-provided description of the component.
    public var description: Swift.String?
    /// The name of the Proton environment that you want to associate this component with. You must specify this when you don't specify serviceInstanceName and serviceName.
    public var environmentName: Swift.String?
    /// A path to a manifest file that lists the Infrastructure as Code (IaC) file, template language, and rendering engine for infrastructure that a custom component provisions.
    /// This member is required.
    public var manifest: Swift.String?
    /// The customer-provided name of the component.
    /// This member is required.
    public var name: Swift.String?
    /// The name of the service instance that you want to attach this component to. If you don't specify this, the component isn't attached to any service instance. Specify both serviceInstanceName and serviceName or neither of them.
    public var serviceInstanceName: Swift.String?
    /// The name of the service that serviceInstanceName is associated with. If you don't specify this, the component isn't attached to any service instance. Specify both serviceInstanceName and serviceName or neither of them.
    public var serviceName: Swift.String?
    /// The service spec that you want the component to use to access service inputs. Set this only when you attach the component to a service instance.
    public var serviceSpec: Swift.String?
    /// An optional list of metadata items that you can associate with the Proton component. A tag is a key-value pair. For more information, see [Proton resources and tagging](https://docs.aws.amazon.com/proton/latest/userguide/resources.html) in the Proton User Guide.
    public var tags: [ProtonClientTypes.Tag]?
    /// A path to the Infrastructure as Code (IaC) file describing infrastructure that a custom component provisions. Components support a single IaC file, even if you use Terraform as your template language.
    /// This member is required.
    public var templateFile: Swift.String?

    public init (
        description: Swift.String? = nil,
        environmentName: Swift.String? = nil,
        manifest: Swift.String? = nil,
        name: Swift.String? = nil,
        serviceInstanceName: Swift.String? = nil,
        serviceName: Swift.String? = nil,
        serviceSpec: Swift.String? = nil,
        tags: [ProtonClientTypes.Tag]? = nil,
        templateFile: Swift.String? = nil
    )
    {
        self.description = description
        self.environmentName = environmentName
        self.manifest = manifest
        self.name = name
        self.serviceInstanceName = serviceInstanceName
        self.serviceName = serviceName
        self.serviceSpec = serviceSpec
        self.tags = tags
        self.templateFile = templateFile
    }
}
