// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateServiceTemplateVersionInputBody: Swift.Equatable {
    let clientToken: Swift.String?
    let templateName: Swift.String?
    let description: Swift.String?
    let majorVersion: Swift.String?
    let source: ProtonClientTypes.TemplateVersionSourceInput?
    let compatibleEnvironmentTemplates: [ProtonClientTypes.CompatibleEnvironmentTemplateInput]?
    let tags: [ProtonClientTypes.Tag]?
    let supportedComponentSources: [ProtonClientTypes.ServiceTemplateSupportedComponentSourceType]?
}

extension CreateServiceTemplateVersionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientToken
        case compatibleEnvironmentTemplates
        case description
        case majorVersion
        case source
        case supportedComponentSources
        case tags
        case templateName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clientTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientToken)
        clientToken = clientTokenDecoded
        let templateNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateName)
        templateName = templateNameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let majorVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .majorVersion)
        majorVersion = majorVersionDecoded
        let sourceDecoded = try containerValues.decodeIfPresent(ProtonClientTypes.TemplateVersionSourceInput.self, forKey: .source)
        source = sourceDecoded
        let compatibleEnvironmentTemplatesContainer = try containerValues.decodeIfPresent([ProtonClientTypes.CompatibleEnvironmentTemplateInput?].self, forKey: .compatibleEnvironmentTemplates)
        var compatibleEnvironmentTemplatesDecoded0:[ProtonClientTypes.CompatibleEnvironmentTemplateInput]? = nil
        if let compatibleEnvironmentTemplatesContainer = compatibleEnvironmentTemplatesContainer {
            compatibleEnvironmentTemplatesDecoded0 = [ProtonClientTypes.CompatibleEnvironmentTemplateInput]()
            for structure0 in compatibleEnvironmentTemplatesContainer {
                if let structure0 = structure0 {
                    compatibleEnvironmentTemplatesDecoded0?.append(structure0)
                }
            }
        }
        compatibleEnvironmentTemplates = compatibleEnvironmentTemplatesDecoded0
        let tagsContainer = try containerValues.decodeIfPresent([ProtonClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[ProtonClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [ProtonClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let supportedComponentSourcesContainer = try containerValues.decodeIfPresent([ProtonClientTypes.ServiceTemplateSupportedComponentSourceType?].self, forKey: .supportedComponentSources)
        var supportedComponentSourcesDecoded0:[ProtonClientTypes.ServiceTemplateSupportedComponentSourceType]? = nil
        if let supportedComponentSourcesContainer = supportedComponentSourcesContainer {
            supportedComponentSourcesDecoded0 = [ProtonClientTypes.ServiceTemplateSupportedComponentSourceType]()
            for string0 in supportedComponentSourcesContainer {
                if let string0 = string0 {
                    supportedComponentSourcesDecoded0?.append(string0)
                }
            }
        }
        supportedComponentSources = supportedComponentSourcesDecoded0
    }
}
