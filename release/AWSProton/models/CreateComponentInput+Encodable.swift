// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CreateComponentInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description
        case environmentName
        case manifest
        case name
        case serviceInstanceName
        case serviceName
        case serviceSpec
        case tags
        case templateFile
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let environmentName = self.environmentName {
            try encodeContainer.encode(environmentName, forKey: .environmentName)
        }
        if let manifest = self.manifest {
            try encodeContainer.encode(manifest, forKey: .manifest)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let serviceInstanceName = self.serviceInstanceName {
            try encodeContainer.encode(serviceInstanceName, forKey: .serviceInstanceName)
        }
        if let serviceName = self.serviceName {
            try encodeContainer.encode(serviceName, forKey: .serviceName)
        }
        if let serviceSpec = self.serviceSpec {
            try encodeContainer.encode(serviceSpec, forKey: .serviceSpec)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
        if let templateFile = self.templateFile {
            try encodeContainer.encode(templateFile, forKey: .templateFile)
        }
    }
}
