// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension IotEventsDataClientTypes {
    /// Contains a summary of an alarm.
    public struct AlarmSummary: Swift.Equatable {
        /// The name of the alarm model.
        public var alarmModelName: Swift.String?
        /// The version of the alarm model.
        public var alarmModelVersion: Swift.String?
        /// The time the alarm was created, in the Unix epoch format.
        public var creationTime: ClientRuntime.Date?
        /// The value of the key used as a filter to select only the alarms associated with the [key](https://docs.aws.amazon.com/iotevents/latest/apireference/API_CreateAlarmModel.html#iotevents-CreateAlarmModel-request-key).
        public var keyValue: Swift.String?
        /// The time the alarm was last updated, in the Unix epoch format.
        public var lastUpdateTime: ClientRuntime.Date?
        /// The name of the alarm state. The state name can be one of the following values:
        ///
        /// * DISABLED - When the alarm is in the DISABLED state, it isn't ready to evaluate data. To enable the alarm, you must change the alarm to the NORMAL state.
        ///
        /// * NORMAL - When the alarm is in the NORMAL state, it's ready to evaluate data.
        ///
        /// * ACTIVE - If the alarm is in the ACTIVE state, the alarm is invoked.
        ///
        /// * ACKNOWLEDGED - When the alarm is in the ACKNOWLEDGED state, the alarm was invoked and you acknowledged the alarm.
        ///
        /// * SNOOZE_DISABLED - When the alarm is in the SNOOZE_DISABLED state, the alarm is disabled for a specified period of time. After the snooze time, the alarm automatically changes to the NORMAL state.
        ///
        /// * LATCHED - When the alarm is in the LATCHED state, the alarm was invoked. However, the data that the alarm is currently evaluating is within the specified range. To change the alarm to the NORMAL state, you must acknowledge the alarm.
        public var stateName: IotEventsDataClientTypes.AlarmStateName?

        public init (
            alarmModelName: Swift.String? = nil,
            alarmModelVersion: Swift.String? = nil,
            creationTime: ClientRuntime.Date? = nil,
            keyValue: Swift.String? = nil,
            lastUpdateTime: ClientRuntime.Date? = nil,
            stateName: IotEventsDataClientTypes.AlarmStateName? = nil
        )
        {
            self.alarmModelName = alarmModelName
            self.alarmModelVersion = alarmModelVersion
            self.creationTime = creationTime
            self.keyValue = keyValue
            self.lastUpdateTime = lastUpdateTime
            self.stateName = stateName
        }
    }

}
