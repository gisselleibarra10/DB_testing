// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension IotEventsDataClientTypes {
    /// Contains information about the current state of the alarm.
    public struct AlarmState: Swift.Equatable {
        /// Contains information about the action that you can take to respond to the alarm.
        public var customerAction: IotEventsDataClientTypes.CustomerAction?
        /// Information needed to evaluate data.
        public var ruleEvaluation: IotEventsDataClientTypes.RuleEvaluation?
        /// The name of the alarm state. The state name can be one of the following values:
        ///
        /// * DISABLED - When the alarm is in the DISABLED state, it isn't ready to evaluate data. To enable the alarm, you must change the alarm to the NORMAL state.
        ///
        /// * NORMAL - When the alarm is in the NORMAL state, it's ready to evaluate data.
        ///
        /// * ACTIVE - If the alarm is in the ACTIVE state, the alarm is invoked.
        ///
        /// * ACKNOWLEDGED - When the alarm is in the ACKNOWLEDGED state, the alarm was invoked and you acknowledged the alarm.
        ///
        /// * SNOOZE_DISABLED - When the alarm is in the SNOOZE_DISABLED state, the alarm is disabled for a specified period of time. After the snooze time, the alarm automatically changes to the NORMAL state.
        ///
        /// * LATCHED - When the alarm is in the LATCHED state, the alarm was invoked. However, the data that the alarm is currently evaluating is within the specified range. To change the alarm to the NORMAL state, you must acknowledge the alarm.
        public var stateName: IotEventsDataClientTypes.AlarmStateName?
        /// Contains information about alarm state changes.
        public var systemEvent: IotEventsDataClientTypes.SystemEvent?

        public init (
            customerAction: IotEventsDataClientTypes.CustomerAction? = nil,
            ruleEvaluation: IotEventsDataClientTypes.RuleEvaluation? = nil,
            stateName: IotEventsDataClientTypes.AlarmStateName? = nil,
            systemEvent: IotEventsDataClientTypes.SystemEvent? = nil
        )
        {
            self.customerAction = customerAction
            self.ruleEvaluation = ruleEvaluation
            self.stateName = stateName
            self.systemEvent = systemEvent
        }
    }

}
