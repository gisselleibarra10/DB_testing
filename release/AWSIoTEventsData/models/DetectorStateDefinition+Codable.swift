// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension IotEventsDataClientTypes.DetectorStateDefinition: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case stateName
        case timers
        case variables
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let stateName = self.stateName {
            try encodeContainer.encode(stateName, forKey: .stateName)
        }
        if let timers = timers {
            var timersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .timers)
            for timerdefinitions0 in timers {
                try timersContainer.encode(timerdefinitions0)
            }
        }
        if let variables = variables {
            var variablesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .variables)
            for variabledefinitions0 in variables {
                try variablesContainer.encode(variabledefinitions0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let stateNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stateName)
        stateName = stateNameDecoded
        let variablesContainer = try containerValues.decodeIfPresent([IotEventsDataClientTypes.VariableDefinition?].self, forKey: .variables)
        var variablesDecoded0:[IotEventsDataClientTypes.VariableDefinition]? = nil
        if let variablesContainer = variablesContainer {
            variablesDecoded0 = [IotEventsDataClientTypes.VariableDefinition]()
            for structure0 in variablesContainer {
                if let structure0 = structure0 {
                    variablesDecoded0?.append(structure0)
                }
            }
        }
        variables = variablesDecoded0
        let timersContainer = try containerValues.decodeIfPresent([IotEventsDataClientTypes.TimerDefinition?].self, forKey: .timers)
        var timersDecoded0:[IotEventsDataClientTypes.TimerDefinition]? = nil
        if let timersContainer = timersContainer {
            timersDecoded0 = [IotEventsDataClientTypes.TimerDefinition]()
            for structure0 in timersContainer {
                if let structure0 = structure0 {
                    timersDecoded0?.append(structure0)
                }
            }
        }
        timers = timersDecoded0
    }
}
