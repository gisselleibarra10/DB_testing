// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension IotEventsDataClientTypes.CustomerAction: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case acknowledgeActionConfiguration
        case actionName
        case disableActionConfiguration
        case enableActionConfiguration
        case resetActionConfiguration
        case snoozeActionConfiguration
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let acknowledgeActionConfiguration = self.acknowledgeActionConfiguration {
            try encodeContainer.encode(acknowledgeActionConfiguration, forKey: .acknowledgeActionConfiguration)
        }
        if let actionName = self.actionName {
            try encodeContainer.encode(actionName.rawValue, forKey: .actionName)
        }
        if let disableActionConfiguration = self.disableActionConfiguration {
            try encodeContainer.encode(disableActionConfiguration, forKey: .disableActionConfiguration)
        }
        if let enableActionConfiguration = self.enableActionConfiguration {
            try encodeContainer.encode(enableActionConfiguration, forKey: .enableActionConfiguration)
        }
        if let resetActionConfiguration = self.resetActionConfiguration {
            try encodeContainer.encode(resetActionConfiguration, forKey: .resetActionConfiguration)
        }
        if let snoozeActionConfiguration = self.snoozeActionConfiguration {
            try encodeContainer.encode(snoozeActionConfiguration, forKey: .snoozeActionConfiguration)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let actionNameDecoded = try containerValues.decodeIfPresent(IotEventsDataClientTypes.CustomerActionName.self, forKey: .actionName)
        actionName = actionNameDecoded
        let snoozeActionConfigurationDecoded = try containerValues.decodeIfPresent(IotEventsDataClientTypes.SnoozeActionConfiguration.self, forKey: .snoozeActionConfiguration)
        snoozeActionConfiguration = snoozeActionConfigurationDecoded
        let enableActionConfigurationDecoded = try containerValues.decodeIfPresent(IotEventsDataClientTypes.EnableActionConfiguration.self, forKey: .enableActionConfiguration)
        enableActionConfiguration = enableActionConfigurationDecoded
        let disableActionConfigurationDecoded = try containerValues.decodeIfPresent(IotEventsDataClientTypes.DisableActionConfiguration.self, forKey: .disableActionConfiguration)
        disableActionConfiguration = disableActionConfigurationDecoded
        let acknowledgeActionConfigurationDecoded = try containerValues.decodeIfPresent(IotEventsDataClientTypes.AcknowledgeActionConfiguration.self, forKey: .acknowledgeActionConfiguration)
        acknowledgeActionConfiguration = acknowledgeActionConfigurationDecoded
        let resetActionConfigurationDecoded = try containerValues.decodeIfPresent(IotEventsDataClientTypes.ResetActionConfiguration.self, forKey: .resetActionConfiguration)
        resetActionConfiguration = resetActionConfigurationDecoded
    }
}
