// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateKnowledgeBaseInputBody: Swift.Equatable {
    let clientToken: Swift.String?
    let name: Swift.String?
    let knowledgeBaseType: WisdomClientTypes.KnowledgeBaseType?
    let sourceConfiguration: WisdomClientTypes.SourceConfiguration?
    let renderingConfiguration: WisdomClientTypes.RenderingConfiguration?
    let serverSideEncryptionConfiguration: WisdomClientTypes.ServerSideEncryptionConfiguration?
    let description: Swift.String?
    let tags: [Swift.String:Swift.String]?
}

extension CreateKnowledgeBaseInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientToken
        case description
        case knowledgeBaseType
        case name
        case renderingConfiguration
        case serverSideEncryptionConfiguration
        case sourceConfiguration
        case tags
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clientTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientToken)
        clientToken = clientTokenDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let knowledgeBaseTypeDecoded = try containerValues.decodeIfPresent(WisdomClientTypes.KnowledgeBaseType.self, forKey: .knowledgeBaseType)
        knowledgeBaseType = knowledgeBaseTypeDecoded
        let sourceConfigurationDecoded = try containerValues.decodeIfPresent(WisdomClientTypes.SourceConfiguration.self, forKey: .sourceConfiguration)
        sourceConfiguration = sourceConfigurationDecoded
        let renderingConfigurationDecoded = try containerValues.decodeIfPresent(WisdomClientTypes.RenderingConfiguration.self, forKey: .renderingConfiguration)
        renderingConfiguration = renderingConfigurationDecoded
        let serverSideEncryptionConfigurationDecoded = try containerValues.decodeIfPresent(WisdomClientTypes.ServerSideEncryptionConfiguration.self, forKey: .serverSideEncryptionConfiguration)
        serverSideEncryptionConfiguration = serverSideEncryptionConfigurationDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
    }
}
