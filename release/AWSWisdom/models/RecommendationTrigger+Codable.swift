// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension WisdomClientTypes.RecommendationTrigger: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case data
        case id
        case recommendationIds
        case source
        case type
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let data = self.data {
            try encodeContainer.encode(data, forKey: .data)
        }
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let recommendationIds = recommendationIds {
            var recommendationIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .recommendationIds)
            for recommendationidlist0 in recommendationIds {
                try recommendationIdsContainer.encode(recommendationidlist0)
            }
        }
        if let source = self.source {
            try encodeContainer.encode(source.rawValue, forKey: .source)
        }
        if let type = self.type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let typeDecoded = try containerValues.decodeIfPresent(WisdomClientTypes.RecommendationTriggerType.self, forKey: .type)
        type = typeDecoded
        let sourceDecoded = try containerValues.decodeIfPresent(WisdomClientTypes.RecommendationSourceType.self, forKey: .source)
        source = sourceDecoded
        let dataDecoded = try containerValues.decodeIfPresent(WisdomClientTypes.RecommendationTriggerData.self, forKey: .data)
        data = dataDecoded
        let recommendationIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .recommendationIds)
        var recommendationIdsDecoded0:[Swift.String]? = nil
        if let recommendationIdsContainer = recommendationIdsContainer {
            recommendationIdsDecoded0 = [Swift.String]()
            for string0 in recommendationIdsContainer {
                if let string0 = string0 {
                    recommendationIdsDecoded0?.append(string0)
                }
            }
        }
        recommendationIds = recommendationIdsDecoded0
    }
}
