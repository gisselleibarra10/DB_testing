// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension WisdomClientTypes.ResultData: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case document
        case relevanceScore
        case resultId
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let document = self.document {
            try encodeContainer.encode(document, forKey: .document)
        }
        if relevanceScore != 0.0 {
            try encodeContainer.encode(relevanceScore, forKey: .relevanceScore)
        }
        if let resultId = self.resultId {
            try encodeContainer.encode(resultId, forKey: .resultId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resultIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resultId)
        resultId = resultIdDecoded
        let documentDecoded = try containerValues.decodeIfPresent(WisdomClientTypes.Document.self, forKey: .document)
        document = documentDecoded
        let relevanceScoreDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .relevanceScore) ?? 0.0
        relevanceScore = relevanceScoreDecoded
    }
}
