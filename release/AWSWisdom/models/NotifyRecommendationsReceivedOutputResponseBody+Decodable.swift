// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct NotifyRecommendationsReceivedOutputResponseBody: Swift.Equatable {
    let recommendationIds: [Swift.String]?
    let errors: [WisdomClientTypes.NotifyRecommendationsReceivedError]?
}

extension NotifyRecommendationsReceivedOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case errors
        case recommendationIds
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let recommendationIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .recommendationIds)
        var recommendationIdsDecoded0:[Swift.String]? = nil
        if let recommendationIdsContainer = recommendationIdsContainer {
            recommendationIdsDecoded0 = [Swift.String]()
            for string0 in recommendationIdsContainer {
                if let string0 = string0 {
                    recommendationIdsDecoded0?.append(string0)
                }
            }
        }
        recommendationIds = recommendationIdsDecoded0
        let errorsContainer = try containerValues.decodeIfPresent([WisdomClientTypes.NotifyRecommendationsReceivedError?].self, forKey: .errors)
        var errorsDecoded0:[WisdomClientTypes.NotifyRecommendationsReceivedError]? = nil
        if let errorsContainer = errorsContainer {
            errorsDecoded0 = [WisdomClientTypes.NotifyRecommendationsReceivedError]()
            for structure0 in errorsContainer {
                if let structure0 = structure0 {
                    errorsDecoded0?.append(structure0)
                }
            }
        }
        errors = errorsDecoded0
    }
}
