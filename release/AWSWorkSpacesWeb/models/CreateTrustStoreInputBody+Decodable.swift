// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateTrustStoreInputBody: Swift.Equatable {
    let certificateList: [ClientRuntime.Data]?
    let tags: [WorkSpacesWebClientTypes.Tag]?
    let clientToken: Swift.String?
}

extension CreateTrustStoreInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case certificateList
        case clientToken
        case tags
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let certificateListContainer = try containerValues.decodeIfPresent([ClientRuntime.Data?].self, forKey: .certificateList)
        var certificateListDecoded0:[ClientRuntime.Data]? = nil
        if let certificateListContainer = certificateListContainer {
            certificateListDecoded0 = [ClientRuntime.Data]()
            for blob0 in certificateListContainer {
                if let blob0 = blob0 {
                    certificateListDecoded0?.append(blob0)
                }
            }
        }
        certificateList = certificateListDecoded0
        let tagsContainer = try containerValues.decodeIfPresent([WorkSpacesWebClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[WorkSpacesWebClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [WorkSpacesWebClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let clientTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientToken)
        clientToken = clientTokenDecoded
    }
}
