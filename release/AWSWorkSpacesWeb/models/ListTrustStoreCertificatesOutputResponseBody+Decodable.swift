// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListTrustStoreCertificatesOutputResponseBody: Swift.Equatable {
    let certificateList: [WorkSpacesWebClientTypes.CertificateSummary]?
    let trustStoreArn: Swift.String?
    let nextToken: Swift.String?
}

extension ListTrustStoreCertificatesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case certificateList
        case nextToken
        case trustStoreArn
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let certificateListContainer = try containerValues.decodeIfPresent([WorkSpacesWebClientTypes.CertificateSummary?].self, forKey: .certificateList)
        var certificateListDecoded0:[WorkSpacesWebClientTypes.CertificateSummary]? = nil
        if let certificateListContainer = certificateListContainer {
            certificateListDecoded0 = [WorkSpacesWebClientTypes.CertificateSummary]()
            for structure0 in certificateListContainer {
                if let structure0 = structure0 {
                    certificateListDecoded0?.append(structure0)
                }
            }
        }
        certificateList = certificateListDecoded0
        let trustStoreArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .trustStoreArn)
        trustStoreArn = trustStoreArnDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
