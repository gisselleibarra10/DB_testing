// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension WorkSpacesWebClientTypes.IdentityProvider: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case identityProviderArn
        case identityProviderDetails
        case identityProviderName
        case identityProviderType
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let identityProviderArn = self.identityProviderArn {
            try encodeContainer.encode(identityProviderArn, forKey: .identityProviderArn)
        }
        if let identityProviderDetails = identityProviderDetails {
            var identityProviderDetailsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .identityProviderDetails)
            for (dictKey0, identityproviderdetails0) in identityProviderDetails {
                try identityProviderDetailsContainer.encode(identityproviderdetails0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let identityProviderName = self.identityProviderName {
            try encodeContainer.encode(identityProviderName, forKey: .identityProviderName)
        }
        if let identityProviderType = self.identityProviderType {
            try encodeContainer.encode(identityProviderType.rawValue, forKey: .identityProviderType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let identityProviderArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .identityProviderArn)
        identityProviderArn = identityProviderArnDecoded
        let identityProviderNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .identityProviderName)
        identityProviderName = identityProviderNameDecoded
        let identityProviderTypeDecoded = try containerValues.decodeIfPresent(WorkSpacesWebClientTypes.IdentityProviderType.self, forKey: .identityProviderType)
        identityProviderType = identityProviderTypeDecoded
        let identityProviderDetailsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .identityProviderDetails)
        var identityProviderDetailsDecoded0: [Swift.String:Swift.String]? = nil
        if let identityProviderDetailsContainer = identityProviderDetailsContainer {
            identityProviderDetailsDecoded0 = [Swift.String:Swift.String]()
            for (key0, stringtype0) in identityProviderDetailsContainer {
                if let stringtype0 = stringtype0 {
                    identityProviderDetailsDecoded0?[key0] = stringtype0
                }
            }
        }
        identityProviderDetails = identityProviderDetailsDecoded0
    }
}
