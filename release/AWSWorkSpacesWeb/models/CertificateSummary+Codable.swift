// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension WorkSpacesWebClientTypes.CertificateSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case issuer
        case notValidAfter
        case notValidBefore
        case subject
        case thumbprint
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let issuer = self.issuer {
            try encodeContainer.encode(issuer, forKey: .issuer)
        }
        if let notValidAfter = self.notValidAfter {
            try encodeContainer.encode(notValidAfter.timeIntervalSince1970, forKey: .notValidAfter)
        }
        if let notValidBefore = self.notValidBefore {
            try encodeContainer.encode(notValidBefore.timeIntervalSince1970, forKey: .notValidBefore)
        }
        if let subject = self.subject {
            try encodeContainer.encode(subject, forKey: .subject)
        }
        if let thumbprint = self.thumbprint {
            try encodeContainer.encode(thumbprint, forKey: .thumbprint)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let thumbprintDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .thumbprint)
        thumbprint = thumbprintDecoded
        let subjectDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .subject)
        subject = subjectDecoded
        let issuerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .issuer)
        issuer = issuerDecoded
        let notValidBeforeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .notValidBefore)
        notValidBefore = notValidBeforeDecoded
        let notValidAfterDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .notValidAfter)
        notValidAfter = notValidAfterDecoded
    }
}
