// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateBrowserSettingsInputBody: Swift.Equatable {
    let tags: [WorkSpacesWebClientTypes.Tag]?
    let customerManagedKey: Swift.String?
    let additionalEncryptionContext: [Swift.String:Swift.String]?
    let browserPolicy: Swift.String?
    let clientToken: Swift.String?
}

extension CreateBrowserSettingsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case additionalEncryptionContext
        case browserPolicy
        case clientToken
        case customerManagedKey
        case tags
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tagsContainer = try containerValues.decodeIfPresent([WorkSpacesWebClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[WorkSpacesWebClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [WorkSpacesWebClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let customerManagedKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .customerManagedKey)
        customerManagedKey = customerManagedKeyDecoded
        let additionalEncryptionContextContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .additionalEncryptionContext)
        var additionalEncryptionContextDecoded0: [Swift.String:Swift.String]? = nil
        if let additionalEncryptionContextContainer = additionalEncryptionContextContainer {
            additionalEncryptionContextDecoded0 = [Swift.String:Swift.String]()
            for (key0, stringtype0) in additionalEncryptionContextContainer {
                if let stringtype0 = stringtype0 {
                    additionalEncryptionContextDecoded0?[key0] = stringtype0
                }
            }
        }
        additionalEncryptionContext = additionalEncryptionContextDecoded0
        let browserPolicyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .browserPolicy)
        browserPolicy = browserPolicyDecoded
        let clientTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientToken)
        clientToken = clientTokenDecoded
    }
}
