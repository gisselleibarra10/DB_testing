// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct UpdateUserSettingsInputBody: Swift.Equatable {
    let copyAllowed: WorkSpacesWebClientTypes.EnabledType?
    let pasteAllowed: WorkSpacesWebClientTypes.EnabledType?
    let downloadAllowed: WorkSpacesWebClientTypes.EnabledType?
    let uploadAllowed: WorkSpacesWebClientTypes.EnabledType?
    let printAllowed: WorkSpacesWebClientTypes.EnabledType?
    let disconnectTimeoutInMinutes: Swift.Int?
    let idleDisconnectTimeoutInMinutes: Swift.Int?
    let clientToken: Swift.String?
}

extension UpdateUserSettingsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientToken
        case copyAllowed
        case disconnectTimeoutInMinutes
        case downloadAllowed
        case idleDisconnectTimeoutInMinutes
        case pasteAllowed
        case printAllowed
        case uploadAllowed
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let copyAllowedDecoded = try containerValues.decodeIfPresent(WorkSpacesWebClientTypes.EnabledType.self, forKey: .copyAllowed)
        copyAllowed = copyAllowedDecoded
        let pasteAllowedDecoded = try containerValues.decodeIfPresent(WorkSpacesWebClientTypes.EnabledType.self, forKey: .pasteAllowed)
        pasteAllowed = pasteAllowedDecoded
        let downloadAllowedDecoded = try containerValues.decodeIfPresent(WorkSpacesWebClientTypes.EnabledType.self, forKey: .downloadAllowed)
        downloadAllowed = downloadAllowedDecoded
        let uploadAllowedDecoded = try containerValues.decodeIfPresent(WorkSpacesWebClientTypes.EnabledType.self, forKey: .uploadAllowed)
        uploadAllowed = uploadAllowedDecoded
        let printAllowedDecoded = try containerValues.decodeIfPresent(WorkSpacesWebClientTypes.EnabledType.self, forKey: .printAllowed)
        printAllowed = printAllowedDecoded
        let disconnectTimeoutInMinutesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .disconnectTimeoutInMinutes)
        disconnectTimeoutInMinutes = disconnectTimeoutInMinutesDecoded
        let idleDisconnectTimeoutInMinutesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .idleDisconnectTimeoutInMinutes)
        idleDisconnectTimeoutInMinutes = idleDisconnectTimeoutInMinutesDecoded
        let clientTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientToken)
        clientToken = clientTokenDecoded
    }
}
