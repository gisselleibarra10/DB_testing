// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension WorkSpacesWebClientTypes.UserSettings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case associatedPortalArns
        case copyAllowed
        case disconnectTimeoutInMinutes
        case downloadAllowed
        case idleDisconnectTimeoutInMinutes
        case pasteAllowed
        case printAllowed
        case uploadAllowed
        case userSettingsArn
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let associatedPortalArns = associatedPortalArns {
            var associatedPortalArnsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .associatedPortalArns)
            for arnlist0 in associatedPortalArns {
                try associatedPortalArnsContainer.encode(arnlist0)
            }
        }
        if let copyAllowed = self.copyAllowed {
            try encodeContainer.encode(copyAllowed.rawValue, forKey: .copyAllowed)
        }
        if let disconnectTimeoutInMinutes = self.disconnectTimeoutInMinutes {
            try encodeContainer.encode(disconnectTimeoutInMinutes, forKey: .disconnectTimeoutInMinutes)
        }
        if let downloadAllowed = self.downloadAllowed {
            try encodeContainer.encode(downloadAllowed.rawValue, forKey: .downloadAllowed)
        }
        if let idleDisconnectTimeoutInMinutes = self.idleDisconnectTimeoutInMinutes {
            try encodeContainer.encode(idleDisconnectTimeoutInMinutes, forKey: .idleDisconnectTimeoutInMinutes)
        }
        if let pasteAllowed = self.pasteAllowed {
            try encodeContainer.encode(pasteAllowed.rawValue, forKey: .pasteAllowed)
        }
        if let printAllowed = self.printAllowed {
            try encodeContainer.encode(printAllowed.rawValue, forKey: .printAllowed)
        }
        if let uploadAllowed = self.uploadAllowed {
            try encodeContainer.encode(uploadAllowed.rawValue, forKey: .uploadAllowed)
        }
        if let userSettingsArn = self.userSettingsArn {
            try encodeContainer.encode(userSettingsArn, forKey: .userSettingsArn)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let userSettingsArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userSettingsArn)
        userSettingsArn = userSettingsArnDecoded
        let associatedPortalArnsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .associatedPortalArns)
        var associatedPortalArnsDecoded0:[Swift.String]? = nil
        if let associatedPortalArnsContainer = associatedPortalArnsContainer {
            associatedPortalArnsDecoded0 = [Swift.String]()
            for string0 in associatedPortalArnsContainer {
                if let string0 = string0 {
                    associatedPortalArnsDecoded0?.append(string0)
                }
            }
        }
        associatedPortalArns = associatedPortalArnsDecoded0
        let copyAllowedDecoded = try containerValues.decodeIfPresent(WorkSpacesWebClientTypes.EnabledType.self, forKey: .copyAllowed)
        copyAllowed = copyAllowedDecoded
        let pasteAllowedDecoded = try containerValues.decodeIfPresent(WorkSpacesWebClientTypes.EnabledType.self, forKey: .pasteAllowed)
        pasteAllowed = pasteAllowedDecoded
        let downloadAllowedDecoded = try containerValues.decodeIfPresent(WorkSpacesWebClientTypes.EnabledType.self, forKey: .downloadAllowed)
        downloadAllowed = downloadAllowedDecoded
        let uploadAllowedDecoded = try containerValues.decodeIfPresent(WorkSpacesWebClientTypes.EnabledType.self, forKey: .uploadAllowed)
        uploadAllowed = uploadAllowedDecoded
        let printAllowedDecoded = try containerValues.decodeIfPresent(WorkSpacesWebClientTypes.EnabledType.self, forKey: .printAllowed)
        printAllowed = printAllowedDecoded
        let disconnectTimeoutInMinutesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .disconnectTimeoutInMinutes)
        disconnectTimeoutInMinutes = disconnectTimeoutInMinutesDecoded
        let idleDisconnectTimeoutInMinutesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .idleDisconnectTimeoutInMinutes)
        idleDisconnectTimeoutInMinutes = idleDisconnectTimeoutInMinutesDecoded
    }
}
