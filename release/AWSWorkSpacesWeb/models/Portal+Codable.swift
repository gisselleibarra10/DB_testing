// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension WorkSpacesWebClientTypes.Portal: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case browserSettingsArn
        case browserType
        case creationDate
        case displayName
        case networkSettingsArn
        case portalArn
        case portalEndpoint
        case portalStatus
        case rendererType
        case statusReason
        case trustStoreArn
        case userSettingsArn
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let browserSettingsArn = self.browserSettingsArn {
            try encodeContainer.encode(browserSettingsArn, forKey: .browserSettingsArn)
        }
        if let browserType = self.browserType {
            try encodeContainer.encode(browserType.rawValue, forKey: .browserType)
        }
        if let creationDate = self.creationDate {
            try encodeContainer.encode(creationDate.timeIntervalSince1970, forKey: .creationDate)
        }
        if let displayName = self.displayName {
            try encodeContainer.encode(displayName, forKey: .displayName)
        }
        if let networkSettingsArn = self.networkSettingsArn {
            try encodeContainer.encode(networkSettingsArn, forKey: .networkSettingsArn)
        }
        if let portalArn = self.portalArn {
            try encodeContainer.encode(portalArn, forKey: .portalArn)
        }
        if let portalEndpoint = self.portalEndpoint {
            try encodeContainer.encode(portalEndpoint, forKey: .portalEndpoint)
        }
        if let portalStatus = self.portalStatus {
            try encodeContainer.encode(portalStatus.rawValue, forKey: .portalStatus)
        }
        if let rendererType = self.rendererType {
            try encodeContainer.encode(rendererType.rawValue, forKey: .rendererType)
        }
        if let statusReason = self.statusReason {
            try encodeContainer.encode(statusReason, forKey: .statusReason)
        }
        if let trustStoreArn = self.trustStoreArn {
            try encodeContainer.encode(trustStoreArn, forKey: .trustStoreArn)
        }
        if let userSettingsArn = self.userSettingsArn {
            try encodeContainer.encode(userSettingsArn, forKey: .userSettingsArn)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let portalArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .portalArn)
        portalArn = portalArnDecoded
        let rendererTypeDecoded = try containerValues.decodeIfPresent(WorkSpacesWebClientTypes.RendererType.self, forKey: .rendererType)
        rendererType = rendererTypeDecoded
        let browserTypeDecoded = try containerValues.decodeIfPresent(WorkSpacesWebClientTypes.BrowserType.self, forKey: .browserType)
        browserType = browserTypeDecoded
        let portalStatusDecoded = try containerValues.decodeIfPresent(WorkSpacesWebClientTypes.PortalStatus.self, forKey: .portalStatus)
        portalStatus = portalStatusDecoded
        let portalEndpointDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .portalEndpoint)
        portalEndpoint = portalEndpointDecoded
        let displayNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .displayName)
        displayName = displayNameDecoded
        let creationDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationDate)
        creationDate = creationDateDecoded
        let browserSettingsArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .browserSettingsArn)
        browserSettingsArn = browserSettingsArnDecoded
        let userSettingsArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userSettingsArn)
        userSettingsArn = userSettingsArnDecoded
        let networkSettingsArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .networkSettingsArn)
        networkSettingsArn = networkSettingsArnDecoded
        let trustStoreArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .trustStoreArn)
        trustStoreArn = trustStoreArnDecoded
        let statusReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .statusReason)
        statusReason = statusReasonDecoded
    }
}
