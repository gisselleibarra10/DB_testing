// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CodeartifactClientTypes.AssetSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case hashes
        case name
        case size
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let hashes = hashes {
            var hashesContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .hashes)
            for (dictKey0, assethashes0) in hashes {
                try hashesContainer.encode(assethashes0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let size = self.size {
            try encodeContainer.encode(size, forKey: .size)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let sizeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .size)
        size = sizeDecoded
        let hashesContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .hashes)
        var hashesDecoded0: [Swift.String:Swift.String]? = nil
        if let hashesContainer = hashesContainer {
            hashesDecoded0 = [Swift.String:Swift.String]()
            for (key0, hashvalue0) in hashesContainer {
                if let hashvalue0 = hashvalue0 {
                    hashesDecoded0?[key0] = hashvalue0
                }
            }
        }
        hashes = hashesDecoded0
    }
}
