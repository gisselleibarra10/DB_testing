// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CodeartifactClientTypes.PackageDependency: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dependencyType
        case namespace
        case package
        case versionRequirement
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dependencyType = self.dependencyType {
            try encodeContainer.encode(dependencyType, forKey: .dependencyType)
        }
        if let namespace = self.namespace {
            try encodeContainer.encode(namespace, forKey: .namespace)
        }
        if let package = self.package {
            try encodeContainer.encode(package, forKey: .package)
        }
        if let versionRequirement = self.versionRequirement {
            try encodeContainer.encode(versionRequirement, forKey: .versionRequirement)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let namespaceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .namespace)
        namespace = namespaceDecoded
        let packageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .package)
        package = packageDecoded
        let dependencyTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dependencyType)
        dependencyType = dependencyTypeDecoded
        let versionRequirementDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .versionRequirement)
        versionRequirement = versionRequirementDecoded
    }
}
