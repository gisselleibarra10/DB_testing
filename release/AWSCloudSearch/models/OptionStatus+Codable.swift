// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CloudSearchClientTypes.OptionStatus: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationDate = "CreationDate"
        case pendingDeletion = "PendingDeletion"
        case state = "State"
        case updateDate = "UpdateDate"
        case updateVersion = "UpdateVersion"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let creationDate = creationDate {
            try container.encode(ClientRuntime.TimestampWrapper(creationDate, format: .dateTime), forKey: ClientRuntime.Key("creationDate"))
        }
        if let pendingDeletion = pendingDeletion {
            try container.encode(pendingDeletion, forKey: ClientRuntime.Key("PendingDeletion"))
        }
        if let state = state {
            try container.encode(state, forKey: ClientRuntime.Key("State"))
        }
        if let updateDate = updateDate {
            try container.encode(ClientRuntime.TimestampWrapper(updateDate, format: .dateTime), forKey: ClientRuntime.Key("updateDate"))
        }
        if updateVersion != 0 {
            try container.encode(updateVersion, forKey: ClientRuntime.Key("UpdateVersion"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let creationDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .creationDate)
        var creationDateBuffer:ClientRuntime.Date? = nil
        if let creationDateDecoded = creationDateDecoded {
            creationDateBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(creationDateDecoded, format: .dateTime)
        }
        creationDate = creationDateBuffer
        let updateDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .updateDate)
        var updateDateBuffer:ClientRuntime.Date? = nil
        if let updateDateDecoded = updateDateDecoded {
            updateDateBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(updateDateDecoded, format: .dateTime)
        }
        updateDate = updateDateBuffer
        let updateVersionDecoded = try containerValues.decode(Swift.Int.self, forKey: .updateVersion)
        updateVersion = updateVersionDecoded
        let stateDecoded = try containerValues.decodeIfPresent(CloudSearchClientTypes.OptionState.self, forKey: .state)
        state = stateDecoded
        let pendingDeletionDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .pendingDeletion)
        pendingDeletion = pendingDeletionDecoded
    }
}
