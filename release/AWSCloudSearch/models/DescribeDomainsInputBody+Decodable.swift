// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeDomainsInputBody: Swift.Equatable {
    let domainNames: [Swift.String]?
}

extension DescribeDomainsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domainNames = "DomainNames"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.domainNames) {
            struct KeyVal0{struct member{}}
            let domainNamesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .domainNames)
            if let domainNamesWrappedContainer = domainNamesWrappedContainer {
                let domainNamesContainer = try domainNamesWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var domainNamesBuffer:[Swift.String]? = nil
                if let domainNamesContainer = domainNamesContainer {
                    domainNamesBuffer = [Swift.String]()
                    for stringContainer0 in domainNamesContainer {
                        domainNamesBuffer?.append(stringContainer0)
                    }
                }
                domainNames = domainNamesBuffer
            } else {
                domainNames = []
            }
        } else {
            domainNames = nil
        }
    }
}
