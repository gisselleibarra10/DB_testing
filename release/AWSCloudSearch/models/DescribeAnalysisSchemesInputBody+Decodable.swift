// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeAnalysisSchemesInputBody: Swift.Equatable {
    let domainName: Swift.String?
    let analysisSchemeNames: [Swift.String]?
    let deployed: Swift.Bool?
}

extension DescribeAnalysisSchemesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case analysisSchemeNames = "AnalysisSchemeNames"
        case deployed = "Deployed"
        case domainName = "DomainName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domainName)
        domainName = domainNameDecoded
        if containerValues.contains(.analysisSchemeNames) {
            struct KeyVal0{struct member{}}
            let analysisSchemeNamesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .analysisSchemeNames)
            if let analysisSchemeNamesWrappedContainer = analysisSchemeNamesWrappedContainer {
                let analysisSchemeNamesContainer = try analysisSchemeNamesWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var analysisSchemeNamesBuffer:[Swift.String]? = nil
                if let analysisSchemeNamesContainer = analysisSchemeNamesContainer {
                    analysisSchemeNamesBuffer = [Swift.String]()
                    for stringContainer0 in analysisSchemeNamesContainer {
                        analysisSchemeNamesBuffer?.append(stringContainer0)
                    }
                }
                analysisSchemeNames = analysisSchemeNamesBuffer
            } else {
                analysisSchemeNames = []
            }
        } else {
            analysisSchemeNames = nil
        }
        let deployedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .deployed)
        deployed = deployedDecoded
    }
}
