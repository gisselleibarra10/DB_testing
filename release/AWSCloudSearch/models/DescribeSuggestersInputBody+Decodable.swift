// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeSuggestersInputBody: Swift.Equatable {
    let domainName: Swift.String?
    let suggesterNames: [Swift.String]?
    let deployed: Swift.Bool?
}

extension DescribeSuggestersInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deployed = "Deployed"
        case domainName = "DomainName"
        case suggesterNames = "SuggesterNames"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domainName)
        domainName = domainNameDecoded
        if containerValues.contains(.suggesterNames) {
            struct KeyVal0{struct member{}}
            let suggesterNamesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .suggesterNames)
            if let suggesterNamesWrappedContainer = suggesterNamesWrappedContainer {
                let suggesterNamesContainer = try suggesterNamesWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var suggesterNamesBuffer:[Swift.String]? = nil
                if let suggesterNamesContainer = suggesterNamesContainer {
                    suggesterNamesBuffer = [Swift.String]()
                    for stringContainer0 in suggesterNamesContainer {
                        suggesterNamesBuffer?.append(stringContainer0)
                    }
                }
                suggesterNames = suggesterNamesBuffer
            } else {
                suggesterNames = []
            }
        } else {
            suggesterNames = nil
        }
        let deployedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .deployed)
        deployed = deployedDecoded
    }
}
