// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension CloudSearchClientTypes {
    /// The type of field. The valid options for a field depend on the field type. For more information about the supported field types, see [Configuring Index Fields](http://docs.aws.amazon.com/cloudsearch/latest/developerguide/configuring-index-fields.html) in the Amazon CloudSearch Developer Guide.
    public enum IndexFieldType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case date
        case dateArray
        case double
        case doubleArray
        case int
        case intArray
        case latlon
        case literal
        case literalArray
        case text
        case textArray
        case sdkUnknown(Swift.String)

        public static var allCases: [IndexFieldType] {
            return [
                .date,
                .dateArray,
                .double,
                .doubleArray,
                .int,
                .intArray,
                .latlon,
                .literal,
                .literalArray,
                .text,
                .textArray,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .date: return "date"
            case .dateArray: return "date-array"
            case .double: return "double"
            case .doubleArray: return "double-array"
            case .int: return "int"
            case .intArray: return "int-array"
            case .latlon: return "latlon"
            case .literal: return "literal"
            case .literalArray: return "literal-array"
            case .text: return "text"
            case .textArray: return "text-array"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = IndexFieldType(rawValue: rawValue) ?? IndexFieldType.sdkUnknown(rawValue)
        }
    }
}
