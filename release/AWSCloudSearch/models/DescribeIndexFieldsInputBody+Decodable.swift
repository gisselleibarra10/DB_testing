// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeIndexFieldsInputBody: Swift.Equatable {
    let domainName: Swift.String?
    let fieldNames: [Swift.String]?
    let deployed: Swift.Bool?
}

extension DescribeIndexFieldsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deployed = "Deployed"
        case domainName = "DomainName"
        case fieldNames = "FieldNames"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domainName)
        domainName = domainNameDecoded
        if containerValues.contains(.fieldNames) {
            struct KeyVal0{struct member{}}
            let fieldNamesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .fieldNames)
            if let fieldNamesWrappedContainer = fieldNamesWrappedContainer {
                let fieldNamesContainer = try fieldNamesWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var fieldNamesBuffer:[Swift.String]? = nil
                if let fieldNamesContainer = fieldNamesContainer {
                    fieldNamesBuffer = [Swift.String]()
                    for stringContainer0 in fieldNamesContainer {
                        fieldNamesBuffer?.append(stringContainer0)
                    }
                }
                fieldNames = fieldNamesBuffer
            } else {
                fieldNames = []
            }
        } else {
            fieldNames = nil
        }
        let deployedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .deployed)
        deployed = deployedDecoded
    }
}
