// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListDomainNamesOutputResponseBody: Swift.Equatable {
    let domainNames: [Swift.String:Swift.String]?
}

extension ListDomainNamesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domainNames = "DomainNames"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("ListDomainNamesResult"))
        if containerValues.contains(.domainNames) {
            struct KeyVal0{struct key{}; struct value{}}
            let domainNamesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: ClientRuntime.MapEntry<Swift.String, Swift.String, KeyVal0.key, KeyVal0.value>.CodingKeys.self, forKey: .domainNames)
            if let domainNamesWrappedContainer = domainNamesWrappedContainer {
                let domainNamesContainer = try domainNamesWrappedContainer.decodeIfPresent([ClientRuntime.MapKeyValue<Swift.String, Swift.String, KeyVal0.key, KeyVal0.value>].self, forKey: .entry)
                var domainNamesBuffer: [Swift.String:Swift.String]? = nil
                if let domainNamesContainer = domainNamesContainer {
                    domainNamesBuffer = [Swift.String:Swift.String]()
                    for stringContainer0 in domainNamesContainer {
                        domainNamesBuffer?[stringContainer0.key] = stringContainer0.value
                    }
                }
                domainNames = domainNamesBuffer
            } else {
                domainNames = [:]
            }
        } else {
            domainNames = nil
        }
    }
}
