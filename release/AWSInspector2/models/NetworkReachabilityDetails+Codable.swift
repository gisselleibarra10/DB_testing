// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Inspector2ClientTypes.NetworkReachabilityDetails: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case networkPath
        case openPortRange
        case `protocol` = "protocol"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let networkPath = self.networkPath {
            try encodeContainer.encode(networkPath, forKey: .networkPath)
        }
        if let openPortRange = self.openPortRange {
            try encodeContainer.encode(openPortRange, forKey: .openPortRange)
        }
        if let `protocol` = self.`protocol` {
            try encodeContainer.encode(`protocol`.rawValue, forKey: .`protocol`)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let openPortRangeDecoded = try containerValues.decodeIfPresent(Inspector2ClientTypes.PortRange.self, forKey: .openPortRange)
        openPortRange = openPortRangeDecoded
        let protocolDecoded = try containerValues.decodeIfPresent(Inspector2ClientTypes.NetworkProtocol.self, forKey: .protocol)
        `protocol` = protocolDecoded
        let networkPathDecoded = try containerValues.decodeIfPresent(Inspector2ClientTypes.NetworkPath.self, forKey: .networkPath)
        networkPath = networkPathDecoded
    }
}
