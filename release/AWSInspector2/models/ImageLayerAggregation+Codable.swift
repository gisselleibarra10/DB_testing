// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Inspector2ClientTypes.ImageLayerAggregation: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case layerHashes
        case repositories
        case resourceIds
        case sortBy
        case sortOrder
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let layerHashes = layerHashes {
            var layerHashesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .layerHashes)
            for stringfilterlist0 in layerHashes {
                try layerHashesContainer.encode(stringfilterlist0)
            }
        }
        if let repositories = repositories {
            var repositoriesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .repositories)
            for stringfilterlist0 in repositories {
                try repositoriesContainer.encode(stringfilterlist0)
            }
        }
        if let resourceIds = resourceIds {
            var resourceIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .resourceIds)
            for stringfilterlist0 in resourceIds {
                try resourceIdsContainer.encode(stringfilterlist0)
            }
        }
        if let sortBy = self.sortBy {
            try encodeContainer.encode(sortBy.rawValue, forKey: .sortBy)
        }
        if let sortOrder = self.sortOrder {
            try encodeContainer.encode(sortOrder.rawValue, forKey: .sortOrder)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let repositoriesContainer = try containerValues.decodeIfPresent([Inspector2ClientTypes.StringFilter?].self, forKey: .repositories)
        var repositoriesDecoded0:[Inspector2ClientTypes.StringFilter]? = nil
        if let repositoriesContainer = repositoriesContainer {
            repositoriesDecoded0 = [Inspector2ClientTypes.StringFilter]()
            for structure0 in repositoriesContainer {
                if let structure0 = structure0 {
                    repositoriesDecoded0?.append(structure0)
                }
            }
        }
        repositories = repositoriesDecoded0
        let resourceIdsContainer = try containerValues.decodeIfPresent([Inspector2ClientTypes.StringFilter?].self, forKey: .resourceIds)
        var resourceIdsDecoded0:[Inspector2ClientTypes.StringFilter]? = nil
        if let resourceIdsContainer = resourceIdsContainer {
            resourceIdsDecoded0 = [Inspector2ClientTypes.StringFilter]()
            for structure0 in resourceIdsContainer {
                if let structure0 = structure0 {
                    resourceIdsDecoded0?.append(structure0)
                }
            }
        }
        resourceIds = resourceIdsDecoded0
        let layerHashesContainer = try containerValues.decodeIfPresent([Inspector2ClientTypes.StringFilter?].self, forKey: .layerHashes)
        var layerHashesDecoded0:[Inspector2ClientTypes.StringFilter]? = nil
        if let layerHashesContainer = layerHashesContainer {
            layerHashesDecoded0 = [Inspector2ClientTypes.StringFilter]()
            for structure0 in layerHashesContainer {
                if let structure0 = structure0 {
                    layerHashesDecoded0?.append(structure0)
                }
            }
        }
        layerHashes = layerHashesDecoded0
        let sortOrderDecoded = try containerValues.decodeIfPresent(Inspector2ClientTypes.SortOrder.self, forKey: .sortOrder)
        sortOrder = sortOrderDecoded
        let sortByDecoded = try containerValues.decodeIfPresent(Inspector2ClientTypes.ImageLayerSortBy.self, forKey: .sortBy)
        sortBy = sortByDecoded
    }
}
