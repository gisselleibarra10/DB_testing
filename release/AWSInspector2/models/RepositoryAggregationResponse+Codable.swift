// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Inspector2ClientTypes.RepositoryAggregationResponse: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountId
        case affectedImages
        case repository
        case severityCounts
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accountId = self.accountId {
            try encodeContainer.encode(accountId, forKey: .accountId)
        }
        if let affectedImages = self.affectedImages {
            try encodeContainer.encode(affectedImages, forKey: .affectedImages)
        }
        if let repository = self.repository {
            try encodeContainer.encode(repository, forKey: .repository)
        }
        if let severityCounts = self.severityCounts {
            try encodeContainer.encode(severityCounts, forKey: .severityCounts)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let repositoryDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .repository)
        repository = repositoryDecoded
        let accountIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .accountId)
        accountId = accountIdDecoded
        let severityCountsDecoded = try containerValues.decodeIfPresent(Inspector2ClientTypes.SeverityCounts.self, forKey: .severityCounts)
        severityCounts = severityCountsDecoded
        let affectedImagesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .affectedImages)
        affectedImages = affectedImagesDecoded
    }
}
