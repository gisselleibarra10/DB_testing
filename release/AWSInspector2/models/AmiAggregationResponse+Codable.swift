// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Inspector2ClientTypes.AmiAggregationResponse: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountId
        case affectedInstances
        case ami
        case severityCounts
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accountId = self.accountId {
            try encodeContainer.encode(accountId, forKey: .accountId)
        }
        if let affectedInstances = self.affectedInstances {
            try encodeContainer.encode(affectedInstances, forKey: .affectedInstances)
        }
        if let ami = self.ami {
            try encodeContainer.encode(ami, forKey: .ami)
        }
        if let severityCounts = self.severityCounts {
            try encodeContainer.encode(severityCounts, forKey: .severityCounts)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let amiDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ami)
        ami = amiDecoded
        let accountIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .accountId)
        accountId = accountIdDecoded
        let severityCountsDecoded = try containerValues.decodeIfPresent(Inspector2ClientTypes.SeverityCounts.self, forKey: .severityCounts)
        severityCounts = severityCountsDecoded
        let affectedInstancesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .affectedInstances)
        affectedInstances = affectedInstancesDecoded
    }
}
