// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension Inspector2ClientTypes {
    public enum SortField: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case awsAccountId
        case componentType
        case ecrImagePushedAt
        case ecrImageRegistry
        case ecrImageRepositoryName
        case findingStatus
        case findingType
        case firstObservedAt
        case inspectorScore
        case lastObservedAt
        case networkProtocol
        case resourceType
        case severity
        case vendorSeverity
        case vulnerabilityId
        case vulnerabilitySource
        case sdkUnknown(Swift.String)

        public static var allCases: [SortField] {
            return [
                .awsAccountId,
                .componentType,
                .ecrImagePushedAt,
                .ecrImageRegistry,
                .ecrImageRepositoryName,
                .findingStatus,
                .findingType,
                .firstObservedAt,
                .inspectorScore,
                .lastObservedAt,
                .networkProtocol,
                .resourceType,
                .severity,
                .vendorSeverity,
                .vulnerabilityId,
                .vulnerabilitySource,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .awsAccountId: return "AWS_ACCOUNT_ID"
            case .componentType: return "COMPONENT_TYPE"
            case .ecrImagePushedAt: return "ECR_IMAGE_PUSHED_AT"
            case .ecrImageRegistry: return "ECR_IMAGE_REGISTRY"
            case .ecrImageRepositoryName: return "ECR_IMAGE_REPOSITORY_NAME"
            case .findingStatus: return "FINDING_STATUS"
            case .findingType: return "FINDING_TYPE"
            case .firstObservedAt: return "FIRST_OBSERVED_AT"
            case .inspectorScore: return "INSPECTOR_SCORE"
            case .lastObservedAt: return "LAST_OBSERVED_AT"
            case .networkProtocol: return "NETWORK_PROTOCOL"
            case .resourceType: return "RESOURCE_TYPE"
            case .severity: return "SEVERITY"
            case .vendorSeverity: return "VENDOR_SEVERITY"
            case .vulnerabilityId: return "VULNERABILITY_ID"
            case .vulnerabilitySource: return "VULNERABILITY_SOURCE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = SortField(rawValue: rawValue) ?? SortField.sdkUnknown(rawValue)
        }
    }
}
