// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListFindingAggregationsInputBody: Swift.Equatable {
    let aggregationType: Inspector2ClientTypes.AggregationType?
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
    let accountIds: [Inspector2ClientTypes.StringFilter]?
    let aggregationRequest: Inspector2ClientTypes.AggregationRequest?
}

extension ListFindingAggregationsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountIds
        case aggregationRequest
        case aggregationType
        case maxResults
        case nextToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let aggregationTypeDecoded = try containerValues.decodeIfPresent(Inspector2ClientTypes.AggregationType.self, forKey: .aggregationType)
        aggregationType = aggregationTypeDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let accountIdsContainer = try containerValues.decodeIfPresent([Inspector2ClientTypes.StringFilter?].self, forKey: .accountIds)
        var accountIdsDecoded0:[Inspector2ClientTypes.StringFilter]? = nil
        if let accountIdsContainer = accountIdsContainer {
            accountIdsDecoded0 = [Inspector2ClientTypes.StringFilter]()
            for structure0 in accountIdsContainer {
                if let structure0 = structure0 {
                    accountIdsDecoded0?.append(structure0)
                }
            }
        }
        accountIds = accountIdsDecoded0
        let aggregationRequestDecoded = try containerValues.decodeIfPresent(Inspector2ClientTypes.AggregationRequest.self, forKey: .aggregationRequest)
        aggregationRequest = aggregationRequestDecoded
    }
}
