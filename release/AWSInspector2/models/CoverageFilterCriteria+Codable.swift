// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Inspector2ClientTypes.CoverageFilterCriteria: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountId
        case ec2InstanceTags
        case ecrImageTags
        case ecrRepositoryName
        case resourceId
        case resourceType
        case scanStatusCode
        case scanStatusReason
        case scanType
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accountId = accountId {
            var accountIdContainer = encodeContainer.nestedUnkeyedContainer(forKey: .accountId)
            for coveragestringfilterlist0 in accountId {
                try accountIdContainer.encode(coveragestringfilterlist0)
            }
        }
        if let ec2InstanceTags = ec2InstanceTags {
            var ec2InstanceTagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .ec2InstanceTags)
            for coveragemapfilterlist0 in ec2InstanceTags {
                try ec2InstanceTagsContainer.encode(coveragemapfilterlist0)
            }
        }
        if let ecrImageTags = ecrImageTags {
            var ecrImageTagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .ecrImageTags)
            for coveragestringfilterlist0 in ecrImageTags {
                try ecrImageTagsContainer.encode(coveragestringfilterlist0)
            }
        }
        if let ecrRepositoryName = ecrRepositoryName {
            var ecrRepositoryNameContainer = encodeContainer.nestedUnkeyedContainer(forKey: .ecrRepositoryName)
            for coveragestringfilterlist0 in ecrRepositoryName {
                try ecrRepositoryNameContainer.encode(coveragestringfilterlist0)
            }
        }
        if let resourceId = resourceId {
            var resourceIdContainer = encodeContainer.nestedUnkeyedContainer(forKey: .resourceId)
            for coveragestringfilterlist0 in resourceId {
                try resourceIdContainer.encode(coveragestringfilterlist0)
            }
        }
        if let resourceType = resourceType {
            var resourceTypeContainer = encodeContainer.nestedUnkeyedContainer(forKey: .resourceType)
            for coveragestringfilterlist0 in resourceType {
                try resourceTypeContainer.encode(coveragestringfilterlist0)
            }
        }
        if let scanStatusCode = scanStatusCode {
            var scanStatusCodeContainer = encodeContainer.nestedUnkeyedContainer(forKey: .scanStatusCode)
            for coveragestringfilterlist0 in scanStatusCode {
                try scanStatusCodeContainer.encode(coveragestringfilterlist0)
            }
        }
        if let scanStatusReason = scanStatusReason {
            var scanStatusReasonContainer = encodeContainer.nestedUnkeyedContainer(forKey: .scanStatusReason)
            for coveragestringfilterlist0 in scanStatusReason {
                try scanStatusReasonContainer.encode(coveragestringfilterlist0)
            }
        }
        if let scanType = scanType {
            var scanTypeContainer = encodeContainer.nestedUnkeyedContainer(forKey: .scanType)
            for coveragestringfilterlist0 in scanType {
                try scanTypeContainer.encode(coveragestringfilterlist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let scanStatusCodeContainer = try containerValues.decodeIfPresent([Inspector2ClientTypes.CoverageStringFilter?].self, forKey: .scanStatusCode)
        var scanStatusCodeDecoded0:[Inspector2ClientTypes.CoverageStringFilter]? = nil
        if let scanStatusCodeContainer = scanStatusCodeContainer {
            scanStatusCodeDecoded0 = [Inspector2ClientTypes.CoverageStringFilter]()
            for structure0 in scanStatusCodeContainer {
                if let structure0 = structure0 {
                    scanStatusCodeDecoded0?.append(structure0)
                }
            }
        }
        scanStatusCode = scanStatusCodeDecoded0
        let scanStatusReasonContainer = try containerValues.decodeIfPresent([Inspector2ClientTypes.CoverageStringFilter?].self, forKey: .scanStatusReason)
        var scanStatusReasonDecoded0:[Inspector2ClientTypes.CoverageStringFilter]? = nil
        if let scanStatusReasonContainer = scanStatusReasonContainer {
            scanStatusReasonDecoded0 = [Inspector2ClientTypes.CoverageStringFilter]()
            for structure0 in scanStatusReasonContainer {
                if let structure0 = structure0 {
                    scanStatusReasonDecoded0?.append(structure0)
                }
            }
        }
        scanStatusReason = scanStatusReasonDecoded0
        let accountIdContainer = try containerValues.decodeIfPresent([Inspector2ClientTypes.CoverageStringFilter?].self, forKey: .accountId)
        var accountIdDecoded0:[Inspector2ClientTypes.CoverageStringFilter]? = nil
        if let accountIdContainer = accountIdContainer {
            accountIdDecoded0 = [Inspector2ClientTypes.CoverageStringFilter]()
            for structure0 in accountIdContainer {
                if let structure0 = structure0 {
                    accountIdDecoded0?.append(structure0)
                }
            }
        }
        accountId = accountIdDecoded0
        let resourceIdContainer = try containerValues.decodeIfPresent([Inspector2ClientTypes.CoverageStringFilter?].self, forKey: .resourceId)
        var resourceIdDecoded0:[Inspector2ClientTypes.CoverageStringFilter]? = nil
        if let resourceIdContainer = resourceIdContainer {
            resourceIdDecoded0 = [Inspector2ClientTypes.CoverageStringFilter]()
            for structure0 in resourceIdContainer {
                if let structure0 = structure0 {
                    resourceIdDecoded0?.append(structure0)
                }
            }
        }
        resourceId = resourceIdDecoded0
        let resourceTypeContainer = try containerValues.decodeIfPresent([Inspector2ClientTypes.CoverageStringFilter?].self, forKey: .resourceType)
        var resourceTypeDecoded0:[Inspector2ClientTypes.CoverageStringFilter]? = nil
        if let resourceTypeContainer = resourceTypeContainer {
            resourceTypeDecoded0 = [Inspector2ClientTypes.CoverageStringFilter]()
            for structure0 in resourceTypeContainer {
                if let structure0 = structure0 {
                    resourceTypeDecoded0?.append(structure0)
                }
            }
        }
        resourceType = resourceTypeDecoded0
        let scanTypeContainer = try containerValues.decodeIfPresent([Inspector2ClientTypes.CoverageStringFilter?].self, forKey: .scanType)
        var scanTypeDecoded0:[Inspector2ClientTypes.CoverageStringFilter]? = nil
        if let scanTypeContainer = scanTypeContainer {
            scanTypeDecoded0 = [Inspector2ClientTypes.CoverageStringFilter]()
            for structure0 in scanTypeContainer {
                if let structure0 = structure0 {
                    scanTypeDecoded0?.append(structure0)
                }
            }
        }
        scanType = scanTypeDecoded0
        let ecrRepositoryNameContainer = try containerValues.decodeIfPresent([Inspector2ClientTypes.CoverageStringFilter?].self, forKey: .ecrRepositoryName)
        var ecrRepositoryNameDecoded0:[Inspector2ClientTypes.CoverageStringFilter]? = nil
        if let ecrRepositoryNameContainer = ecrRepositoryNameContainer {
            ecrRepositoryNameDecoded0 = [Inspector2ClientTypes.CoverageStringFilter]()
            for structure0 in ecrRepositoryNameContainer {
                if let structure0 = structure0 {
                    ecrRepositoryNameDecoded0?.append(structure0)
                }
            }
        }
        ecrRepositoryName = ecrRepositoryNameDecoded0
        let ecrImageTagsContainer = try containerValues.decodeIfPresent([Inspector2ClientTypes.CoverageStringFilter?].self, forKey: .ecrImageTags)
        var ecrImageTagsDecoded0:[Inspector2ClientTypes.CoverageStringFilter]? = nil
        if let ecrImageTagsContainer = ecrImageTagsContainer {
            ecrImageTagsDecoded0 = [Inspector2ClientTypes.CoverageStringFilter]()
            for structure0 in ecrImageTagsContainer {
                if let structure0 = structure0 {
                    ecrImageTagsDecoded0?.append(structure0)
                }
            }
        }
        ecrImageTags = ecrImageTagsDecoded0
        let ec2InstanceTagsContainer = try containerValues.decodeIfPresent([Inspector2ClientTypes.CoverageMapFilter?].self, forKey: .ec2InstanceTags)
        var ec2InstanceTagsDecoded0:[Inspector2ClientTypes.CoverageMapFilter]? = nil
        if let ec2InstanceTagsContainer = ec2InstanceTagsContainer {
            ec2InstanceTagsDecoded0 = [Inspector2ClientTypes.CoverageMapFilter]()
            for structure0 in ec2InstanceTagsContainer {
                if let structure0 = structure0 {
                    ec2InstanceTagsDecoded0?.append(structure0)
                }
            }
        }
        ec2InstanceTags = ec2InstanceTagsDecoded0
    }
}
