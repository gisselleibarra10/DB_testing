// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Inspector2ClientTypes.TitleAggregation: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceType
        case sortBy
        case sortOrder
        case titles
        case vulnerabilityIds
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let resourceType = self.resourceType {
            try encodeContainer.encode(resourceType.rawValue, forKey: .resourceType)
        }
        if let sortBy = self.sortBy {
            try encodeContainer.encode(sortBy.rawValue, forKey: .sortBy)
        }
        if let sortOrder = self.sortOrder {
            try encodeContainer.encode(sortOrder.rawValue, forKey: .sortOrder)
        }
        if let titles = titles {
            var titlesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .titles)
            for stringfilterlist0 in titles {
                try titlesContainer.encode(stringfilterlist0)
            }
        }
        if let vulnerabilityIds = vulnerabilityIds {
            var vulnerabilityIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .vulnerabilityIds)
            for stringfilterlist0 in vulnerabilityIds {
                try vulnerabilityIdsContainer.encode(stringfilterlist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let titlesContainer = try containerValues.decodeIfPresent([Inspector2ClientTypes.StringFilter?].self, forKey: .titles)
        var titlesDecoded0:[Inspector2ClientTypes.StringFilter]? = nil
        if let titlesContainer = titlesContainer {
            titlesDecoded0 = [Inspector2ClientTypes.StringFilter]()
            for structure0 in titlesContainer {
                if let structure0 = structure0 {
                    titlesDecoded0?.append(structure0)
                }
            }
        }
        titles = titlesDecoded0
        let vulnerabilityIdsContainer = try containerValues.decodeIfPresent([Inspector2ClientTypes.StringFilter?].self, forKey: .vulnerabilityIds)
        var vulnerabilityIdsDecoded0:[Inspector2ClientTypes.StringFilter]? = nil
        if let vulnerabilityIdsContainer = vulnerabilityIdsContainer {
            vulnerabilityIdsDecoded0 = [Inspector2ClientTypes.StringFilter]()
            for structure0 in vulnerabilityIdsContainer {
                if let structure0 = structure0 {
                    vulnerabilityIdsDecoded0?.append(structure0)
                }
            }
        }
        vulnerabilityIds = vulnerabilityIdsDecoded0
        let resourceTypeDecoded = try containerValues.decodeIfPresent(Inspector2ClientTypes.AggregationResourceType.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let sortOrderDecoded = try containerValues.decodeIfPresent(Inspector2ClientTypes.SortOrder.self, forKey: .sortOrder)
        sortOrder = sortOrderDecoded
        let sortByDecoded = try containerValues.decodeIfPresent(Inspector2ClientTypes.TitleSortBy.self, forKey: .sortBy)
        sortBy = sortByDecoded
    }
}
