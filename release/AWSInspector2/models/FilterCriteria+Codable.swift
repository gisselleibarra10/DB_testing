// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Inspector2ClientTypes.FilterCriteria: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case awsAccountId
        case componentId
        case componentType
        case ec2InstanceImageId
        case ec2InstanceSubnetId
        case ec2InstanceVpcId
        case ecrImageArchitecture
        case ecrImageHash
        case ecrImagePushedAt
        case ecrImageRegistry
        case ecrImageRepositoryName
        case ecrImageTags
        case findingArn
        case findingStatus
        case findingType
        case firstObservedAt
        case fixAvailable
        case inspectorScore
        case lastObservedAt
        case networkProtocol
        case portRange
        case relatedVulnerabilities
        case resourceId
        case resourceTags
        case resourceType
        case severity
        case title
        case updatedAt
        case vendorSeverity
        case vulnerabilityId
        case vulnerabilitySource
        case vulnerablePackages
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let awsAccountId = awsAccountId {
            var awsAccountIdContainer = encodeContainer.nestedUnkeyedContainer(forKey: .awsAccountId)
            for stringfilterlist0 in awsAccountId {
                try awsAccountIdContainer.encode(stringfilterlist0)
            }
        }
        if let componentId = componentId {
            var componentIdContainer = encodeContainer.nestedUnkeyedContainer(forKey: .componentId)
            for stringfilterlist0 in componentId {
                try componentIdContainer.encode(stringfilterlist0)
            }
        }
        if let componentType = componentType {
            var componentTypeContainer = encodeContainer.nestedUnkeyedContainer(forKey: .componentType)
            for stringfilterlist0 in componentType {
                try componentTypeContainer.encode(stringfilterlist0)
            }
        }
        if let ec2InstanceImageId = ec2InstanceImageId {
            var ec2InstanceImageIdContainer = encodeContainer.nestedUnkeyedContainer(forKey: .ec2InstanceImageId)
            for stringfilterlist0 in ec2InstanceImageId {
                try ec2InstanceImageIdContainer.encode(stringfilterlist0)
            }
        }
        if let ec2InstanceSubnetId = ec2InstanceSubnetId {
            var ec2InstanceSubnetIdContainer = encodeContainer.nestedUnkeyedContainer(forKey: .ec2InstanceSubnetId)
            for stringfilterlist0 in ec2InstanceSubnetId {
                try ec2InstanceSubnetIdContainer.encode(stringfilterlist0)
            }
        }
        if let ec2InstanceVpcId = ec2InstanceVpcId {
            var ec2InstanceVpcIdContainer = encodeContainer.nestedUnkeyedContainer(forKey: .ec2InstanceVpcId)
            for stringfilterlist0 in ec2InstanceVpcId {
                try ec2InstanceVpcIdContainer.encode(stringfilterlist0)
            }
        }
        if let ecrImageArchitecture = ecrImageArchitecture {
            var ecrImageArchitectureContainer = encodeContainer.nestedUnkeyedContainer(forKey: .ecrImageArchitecture)
            for stringfilterlist0 in ecrImageArchitecture {
                try ecrImageArchitectureContainer.encode(stringfilterlist0)
            }
        }
        if let ecrImageHash = ecrImageHash {
            var ecrImageHashContainer = encodeContainer.nestedUnkeyedContainer(forKey: .ecrImageHash)
            for stringfilterlist0 in ecrImageHash {
                try ecrImageHashContainer.encode(stringfilterlist0)
            }
        }
        if let ecrImagePushedAt = ecrImagePushedAt {
            var ecrImagePushedAtContainer = encodeContainer.nestedUnkeyedContainer(forKey: .ecrImagePushedAt)
            for datefilterlist0 in ecrImagePushedAt {
                try ecrImagePushedAtContainer.encode(datefilterlist0)
            }
        }
        if let ecrImageRegistry = ecrImageRegistry {
            var ecrImageRegistryContainer = encodeContainer.nestedUnkeyedContainer(forKey: .ecrImageRegistry)
            for stringfilterlist0 in ecrImageRegistry {
                try ecrImageRegistryContainer.encode(stringfilterlist0)
            }
        }
        if let ecrImageRepositoryName = ecrImageRepositoryName {
            var ecrImageRepositoryNameContainer = encodeContainer.nestedUnkeyedContainer(forKey: .ecrImageRepositoryName)
            for stringfilterlist0 in ecrImageRepositoryName {
                try ecrImageRepositoryNameContainer.encode(stringfilterlist0)
            }
        }
        if let ecrImageTags = ecrImageTags {
            var ecrImageTagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .ecrImageTags)
            for stringfilterlist0 in ecrImageTags {
                try ecrImageTagsContainer.encode(stringfilterlist0)
            }
        }
        if let findingArn = findingArn {
            var findingArnContainer = encodeContainer.nestedUnkeyedContainer(forKey: .findingArn)
            for stringfilterlist0 in findingArn {
                try findingArnContainer.encode(stringfilterlist0)
            }
        }
        if let findingStatus = findingStatus {
            var findingStatusContainer = encodeContainer.nestedUnkeyedContainer(forKey: .findingStatus)
            for stringfilterlist0 in findingStatus {
                try findingStatusContainer.encode(stringfilterlist0)
            }
        }
        if let findingType = findingType {
            var findingTypeContainer = encodeContainer.nestedUnkeyedContainer(forKey: .findingType)
            for stringfilterlist0 in findingType {
                try findingTypeContainer.encode(stringfilterlist0)
            }
        }
        if let firstObservedAt = firstObservedAt {
            var firstObservedAtContainer = encodeContainer.nestedUnkeyedContainer(forKey: .firstObservedAt)
            for datefilterlist0 in firstObservedAt {
                try firstObservedAtContainer.encode(datefilterlist0)
            }
        }
        if let fixAvailable = fixAvailable {
            var fixAvailableContainer = encodeContainer.nestedUnkeyedContainer(forKey: .fixAvailable)
            for stringfilterlist0 in fixAvailable {
                try fixAvailableContainer.encode(stringfilterlist0)
            }
        }
        if let inspectorScore = inspectorScore {
            var inspectorScoreContainer = encodeContainer.nestedUnkeyedContainer(forKey: .inspectorScore)
            for numberfilterlist0 in inspectorScore {
                try inspectorScoreContainer.encode(numberfilterlist0)
            }
        }
        if let lastObservedAt = lastObservedAt {
            var lastObservedAtContainer = encodeContainer.nestedUnkeyedContainer(forKey: .lastObservedAt)
            for datefilterlist0 in lastObservedAt {
                try lastObservedAtContainer.encode(datefilterlist0)
            }
        }
        if let networkProtocol = networkProtocol {
            var networkProtocolContainer = encodeContainer.nestedUnkeyedContainer(forKey: .networkProtocol)
            for stringfilterlist0 in networkProtocol {
                try networkProtocolContainer.encode(stringfilterlist0)
            }
        }
        if let portRange = portRange {
            var portRangeContainer = encodeContainer.nestedUnkeyedContainer(forKey: .portRange)
            for portrangefilterlist0 in portRange {
                try portRangeContainer.encode(portrangefilterlist0)
            }
        }
        if let relatedVulnerabilities = relatedVulnerabilities {
            var relatedVulnerabilitiesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .relatedVulnerabilities)
            for stringfilterlist0 in relatedVulnerabilities {
                try relatedVulnerabilitiesContainer.encode(stringfilterlist0)
            }
        }
        if let resourceId = resourceId {
            var resourceIdContainer = encodeContainer.nestedUnkeyedContainer(forKey: .resourceId)
            for stringfilterlist0 in resourceId {
                try resourceIdContainer.encode(stringfilterlist0)
            }
        }
        if let resourceTags = resourceTags {
            var resourceTagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .resourceTags)
            for mapfilterlist0 in resourceTags {
                try resourceTagsContainer.encode(mapfilterlist0)
            }
        }
        if let resourceType = resourceType {
            var resourceTypeContainer = encodeContainer.nestedUnkeyedContainer(forKey: .resourceType)
            for stringfilterlist0 in resourceType {
                try resourceTypeContainer.encode(stringfilterlist0)
            }
        }
        if let severity = severity {
            var severityContainer = encodeContainer.nestedUnkeyedContainer(forKey: .severity)
            for stringfilterlist0 in severity {
                try severityContainer.encode(stringfilterlist0)
            }
        }
        if let title = title {
            var titleContainer = encodeContainer.nestedUnkeyedContainer(forKey: .title)
            for stringfilterlist0 in title {
                try titleContainer.encode(stringfilterlist0)
            }
        }
        if let updatedAt = updatedAt {
            var updatedAtContainer = encodeContainer.nestedUnkeyedContainer(forKey: .updatedAt)
            for datefilterlist0 in updatedAt {
                try updatedAtContainer.encode(datefilterlist0)
            }
        }
        if let vendorSeverity = vendorSeverity {
            var vendorSeverityContainer = encodeContainer.nestedUnkeyedContainer(forKey: .vendorSeverity)
            for stringfilterlist0 in vendorSeverity {
                try vendorSeverityContainer.encode(stringfilterlist0)
            }
        }
        if let vulnerabilityId = vulnerabilityId {
            var vulnerabilityIdContainer = encodeContainer.nestedUnkeyedContainer(forKey: .vulnerabilityId)
            for stringfilterlist0 in vulnerabilityId {
                try vulnerabilityIdContainer.encode(stringfilterlist0)
            }
        }
        if let vulnerabilitySource = vulnerabilitySource {
            var vulnerabilitySourceContainer = encodeContainer.nestedUnkeyedContainer(forKey: .vulnerabilitySource)
            for stringfilterlist0 in vulnerabilitySource {
                try vulnerabilitySourceContainer.encode(stringfilterlist0)
            }
        }
        if let vulnerablePackages = vulnerablePackages {
            var vulnerablePackagesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .vulnerablePackages)
            for packagefilterlist0 in vulnerablePackages {
                try vulnerablePackagesContainer.encode(packagefilterlist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let findingArnContainer = try containerValues.decodeIfPresent([Inspector2ClientTypes.StringFilter?].self, forKey: .findingArn)
        var findingArnDecoded0:[Inspector2ClientTypes.StringFilter]? = nil
        if let findingArnContainer = findingArnContainer {
            findingArnDecoded0 = [Inspector2ClientTypes.StringFilter]()
            for structure0 in findingArnContainer {
                if let structure0 = structure0 {
                    findingArnDecoded0?.append(structure0)
                }
            }
        }
        findingArn = findingArnDecoded0
        let awsAccountIdContainer = try containerValues.decodeIfPresent([Inspector2ClientTypes.StringFilter?].self, forKey: .awsAccountId)
        var awsAccountIdDecoded0:[Inspector2ClientTypes.StringFilter]? = nil
        if let awsAccountIdContainer = awsAccountIdContainer {
            awsAccountIdDecoded0 = [Inspector2ClientTypes.StringFilter]()
            for structure0 in awsAccountIdContainer {
                if let structure0 = structure0 {
                    awsAccountIdDecoded0?.append(structure0)
                }
            }
        }
        awsAccountId = awsAccountIdDecoded0
        let findingTypeContainer = try containerValues.decodeIfPresent([Inspector2ClientTypes.StringFilter?].self, forKey: .findingType)
        var findingTypeDecoded0:[Inspector2ClientTypes.StringFilter]? = nil
        if let findingTypeContainer = findingTypeContainer {
            findingTypeDecoded0 = [Inspector2ClientTypes.StringFilter]()
            for structure0 in findingTypeContainer {
                if let structure0 = structure0 {
                    findingTypeDecoded0?.append(structure0)
                }
            }
        }
        findingType = findingTypeDecoded0
        let severityContainer = try containerValues.decodeIfPresent([Inspector2ClientTypes.StringFilter?].self, forKey: .severity)
        var severityDecoded0:[Inspector2ClientTypes.StringFilter]? = nil
        if let severityContainer = severityContainer {
            severityDecoded0 = [Inspector2ClientTypes.StringFilter]()
            for structure0 in severityContainer {
                if let structure0 = structure0 {
                    severityDecoded0?.append(structure0)
                }
            }
        }
        severity = severityDecoded0
        let firstObservedAtContainer = try containerValues.decodeIfPresent([Inspector2ClientTypes.DateFilter?].self, forKey: .firstObservedAt)
        var firstObservedAtDecoded0:[Inspector2ClientTypes.DateFilter]? = nil
        if let firstObservedAtContainer = firstObservedAtContainer {
            firstObservedAtDecoded0 = [Inspector2ClientTypes.DateFilter]()
            for structure0 in firstObservedAtContainer {
                if let structure0 = structure0 {
                    firstObservedAtDecoded0?.append(structure0)
                }
            }
        }
        firstObservedAt = firstObservedAtDecoded0
        let lastObservedAtContainer = try containerValues.decodeIfPresent([Inspector2ClientTypes.DateFilter?].self, forKey: .lastObservedAt)
        var lastObservedAtDecoded0:[Inspector2ClientTypes.DateFilter]? = nil
        if let lastObservedAtContainer = lastObservedAtContainer {
            lastObservedAtDecoded0 = [Inspector2ClientTypes.DateFilter]()
            for structure0 in lastObservedAtContainer {
                if let structure0 = structure0 {
                    lastObservedAtDecoded0?.append(structure0)
                }
            }
        }
        lastObservedAt = lastObservedAtDecoded0
        let updatedAtContainer = try containerValues.decodeIfPresent([Inspector2ClientTypes.DateFilter?].self, forKey: .updatedAt)
        var updatedAtDecoded0:[Inspector2ClientTypes.DateFilter]? = nil
        if let updatedAtContainer = updatedAtContainer {
            updatedAtDecoded0 = [Inspector2ClientTypes.DateFilter]()
            for structure0 in updatedAtContainer {
                if let structure0 = structure0 {
                    updatedAtDecoded0?.append(structure0)
                }
            }
        }
        updatedAt = updatedAtDecoded0
        let findingStatusContainer = try containerValues.decodeIfPresent([Inspector2ClientTypes.StringFilter?].self, forKey: .findingStatus)
        var findingStatusDecoded0:[Inspector2ClientTypes.StringFilter]? = nil
        if let findingStatusContainer = findingStatusContainer {
            findingStatusDecoded0 = [Inspector2ClientTypes.StringFilter]()
            for structure0 in findingStatusContainer {
                if let structure0 = structure0 {
                    findingStatusDecoded0?.append(structure0)
                }
            }
        }
        findingStatus = findingStatusDecoded0
        let titleContainer = try containerValues.decodeIfPresent([Inspector2ClientTypes.StringFilter?].self, forKey: .title)
        var titleDecoded0:[Inspector2ClientTypes.StringFilter]? = nil
        if let titleContainer = titleContainer {
            titleDecoded0 = [Inspector2ClientTypes.StringFilter]()
            for structure0 in titleContainer {
                if let structure0 = structure0 {
                    titleDecoded0?.append(structure0)
                }
            }
        }
        title = titleDecoded0
        let inspectorScoreContainer = try containerValues.decodeIfPresent([Inspector2ClientTypes.NumberFilter?].self, forKey: .inspectorScore)
        var inspectorScoreDecoded0:[Inspector2ClientTypes.NumberFilter]? = nil
        if let inspectorScoreContainer = inspectorScoreContainer {
            inspectorScoreDecoded0 = [Inspector2ClientTypes.NumberFilter]()
            for structure0 in inspectorScoreContainer {
                if let structure0 = structure0 {
                    inspectorScoreDecoded0?.append(structure0)
                }
            }
        }
        inspectorScore = inspectorScoreDecoded0
        let resourceTypeContainer = try containerValues.decodeIfPresent([Inspector2ClientTypes.StringFilter?].self, forKey: .resourceType)
        var resourceTypeDecoded0:[Inspector2ClientTypes.StringFilter]? = nil
        if let resourceTypeContainer = resourceTypeContainer {
            resourceTypeDecoded0 = [Inspector2ClientTypes.StringFilter]()
            for structure0 in resourceTypeContainer {
                if let structure0 = structure0 {
                    resourceTypeDecoded0?.append(structure0)
                }
            }
        }
        resourceType = resourceTypeDecoded0
        let resourceIdContainer = try containerValues.decodeIfPresent([Inspector2ClientTypes.StringFilter?].self, forKey: .resourceId)
        var resourceIdDecoded0:[Inspector2ClientTypes.StringFilter]? = nil
        if let resourceIdContainer = resourceIdContainer {
            resourceIdDecoded0 = [Inspector2ClientTypes.StringFilter]()
            for structure0 in resourceIdContainer {
                if let structure0 = structure0 {
                    resourceIdDecoded0?.append(structure0)
                }
            }
        }
        resourceId = resourceIdDecoded0
        let resourceTagsContainer = try containerValues.decodeIfPresent([Inspector2ClientTypes.MapFilter?].self, forKey: .resourceTags)
        var resourceTagsDecoded0:[Inspector2ClientTypes.MapFilter]? = nil
        if let resourceTagsContainer = resourceTagsContainer {
            resourceTagsDecoded0 = [Inspector2ClientTypes.MapFilter]()
            for structure0 in resourceTagsContainer {
                if let structure0 = structure0 {
                    resourceTagsDecoded0?.append(structure0)
                }
            }
        }
        resourceTags = resourceTagsDecoded0
        let ec2InstanceImageIdContainer = try containerValues.decodeIfPresent([Inspector2ClientTypes.StringFilter?].self, forKey: .ec2InstanceImageId)
        var ec2InstanceImageIdDecoded0:[Inspector2ClientTypes.StringFilter]? = nil
        if let ec2InstanceImageIdContainer = ec2InstanceImageIdContainer {
            ec2InstanceImageIdDecoded0 = [Inspector2ClientTypes.StringFilter]()
            for structure0 in ec2InstanceImageIdContainer {
                if let structure0 = structure0 {
                    ec2InstanceImageIdDecoded0?.append(structure0)
                }
            }
        }
        ec2InstanceImageId = ec2InstanceImageIdDecoded0
        let ec2InstanceVpcIdContainer = try containerValues.decodeIfPresent([Inspector2ClientTypes.StringFilter?].self, forKey: .ec2InstanceVpcId)
        var ec2InstanceVpcIdDecoded0:[Inspector2ClientTypes.StringFilter]? = nil
        if let ec2InstanceVpcIdContainer = ec2InstanceVpcIdContainer {
            ec2InstanceVpcIdDecoded0 = [Inspector2ClientTypes.StringFilter]()
            for structure0 in ec2InstanceVpcIdContainer {
                if let structure0 = structure0 {
                    ec2InstanceVpcIdDecoded0?.append(structure0)
                }
            }
        }
        ec2InstanceVpcId = ec2InstanceVpcIdDecoded0
        let ec2InstanceSubnetIdContainer = try containerValues.decodeIfPresent([Inspector2ClientTypes.StringFilter?].self, forKey: .ec2InstanceSubnetId)
        var ec2InstanceSubnetIdDecoded0:[Inspector2ClientTypes.StringFilter]? = nil
        if let ec2InstanceSubnetIdContainer = ec2InstanceSubnetIdContainer {
            ec2InstanceSubnetIdDecoded0 = [Inspector2ClientTypes.StringFilter]()
            for structure0 in ec2InstanceSubnetIdContainer {
                if let structure0 = structure0 {
                    ec2InstanceSubnetIdDecoded0?.append(structure0)
                }
            }
        }
        ec2InstanceSubnetId = ec2InstanceSubnetIdDecoded0
        let ecrImagePushedAtContainer = try containerValues.decodeIfPresent([Inspector2ClientTypes.DateFilter?].self, forKey: .ecrImagePushedAt)
        var ecrImagePushedAtDecoded0:[Inspector2ClientTypes.DateFilter]? = nil
        if let ecrImagePushedAtContainer = ecrImagePushedAtContainer {
            ecrImagePushedAtDecoded0 = [Inspector2ClientTypes.DateFilter]()
            for structure0 in ecrImagePushedAtContainer {
                if let structure0 = structure0 {
                    ecrImagePushedAtDecoded0?.append(structure0)
                }
            }
        }
        ecrImagePushedAt = ecrImagePushedAtDecoded0
        let ecrImageArchitectureContainer = try containerValues.decodeIfPresent([Inspector2ClientTypes.StringFilter?].self, forKey: .ecrImageArchitecture)
        var ecrImageArchitectureDecoded0:[Inspector2ClientTypes.StringFilter]? = nil
        if let ecrImageArchitectureContainer = ecrImageArchitectureContainer {
            ecrImageArchitectureDecoded0 = [Inspector2ClientTypes.StringFilter]()
            for structure0 in ecrImageArchitectureContainer {
                if let structure0 = structure0 {
                    ecrImageArchitectureDecoded0?.append(structure0)
                }
            }
        }
        ecrImageArchitecture = ecrImageArchitectureDecoded0
        let ecrImageRegistryContainer = try containerValues.decodeIfPresent([Inspector2ClientTypes.StringFilter?].self, forKey: .ecrImageRegistry)
        var ecrImageRegistryDecoded0:[Inspector2ClientTypes.StringFilter]? = nil
        if let ecrImageRegistryContainer = ecrImageRegistryContainer {
            ecrImageRegistryDecoded0 = [Inspector2ClientTypes.StringFilter]()
            for structure0 in ecrImageRegistryContainer {
                if let structure0 = structure0 {
                    ecrImageRegistryDecoded0?.append(structure0)
                }
            }
        }
        ecrImageRegistry = ecrImageRegistryDecoded0
        let ecrImageRepositoryNameContainer = try containerValues.decodeIfPresent([Inspector2ClientTypes.StringFilter?].self, forKey: .ecrImageRepositoryName)
        var ecrImageRepositoryNameDecoded0:[Inspector2ClientTypes.StringFilter]? = nil
        if let ecrImageRepositoryNameContainer = ecrImageRepositoryNameContainer {
            ecrImageRepositoryNameDecoded0 = [Inspector2ClientTypes.StringFilter]()
            for structure0 in ecrImageRepositoryNameContainer {
                if let structure0 = structure0 {
                    ecrImageRepositoryNameDecoded0?.append(structure0)
                }
            }
        }
        ecrImageRepositoryName = ecrImageRepositoryNameDecoded0
        let ecrImageTagsContainer = try containerValues.decodeIfPresent([Inspector2ClientTypes.StringFilter?].self, forKey: .ecrImageTags)
        var ecrImageTagsDecoded0:[Inspector2ClientTypes.StringFilter]? = nil
        if let ecrImageTagsContainer = ecrImageTagsContainer {
            ecrImageTagsDecoded0 = [Inspector2ClientTypes.StringFilter]()
            for structure0 in ecrImageTagsContainer {
                if let structure0 = structure0 {
                    ecrImageTagsDecoded0?.append(structure0)
                }
            }
        }
        ecrImageTags = ecrImageTagsDecoded0
        let ecrImageHashContainer = try containerValues.decodeIfPresent([Inspector2ClientTypes.StringFilter?].self, forKey: .ecrImageHash)
        var ecrImageHashDecoded0:[Inspector2ClientTypes.StringFilter]? = nil
        if let ecrImageHashContainer = ecrImageHashContainer {
            ecrImageHashDecoded0 = [Inspector2ClientTypes.StringFilter]()
            for structure0 in ecrImageHashContainer {
                if let structure0 = structure0 {
                    ecrImageHashDecoded0?.append(structure0)
                }
            }
        }
        ecrImageHash = ecrImageHashDecoded0
        let portRangeContainer = try containerValues.decodeIfPresent([Inspector2ClientTypes.PortRangeFilter?].self, forKey: .portRange)
        var portRangeDecoded0:[Inspector2ClientTypes.PortRangeFilter]? = nil
        if let portRangeContainer = portRangeContainer {
            portRangeDecoded0 = [Inspector2ClientTypes.PortRangeFilter]()
            for structure0 in portRangeContainer {
                if let structure0 = structure0 {
                    portRangeDecoded0?.append(structure0)
                }
            }
        }
        portRange = portRangeDecoded0
        let networkProtocolContainer = try containerValues.decodeIfPresent([Inspector2ClientTypes.StringFilter?].self, forKey: .networkProtocol)
        var networkProtocolDecoded0:[Inspector2ClientTypes.StringFilter]? = nil
        if let networkProtocolContainer = networkProtocolContainer {
            networkProtocolDecoded0 = [Inspector2ClientTypes.StringFilter]()
            for structure0 in networkProtocolContainer {
                if let structure0 = structure0 {
                    networkProtocolDecoded0?.append(structure0)
                }
            }
        }
        networkProtocol = networkProtocolDecoded0
        let componentIdContainer = try containerValues.decodeIfPresent([Inspector2ClientTypes.StringFilter?].self, forKey: .componentId)
        var componentIdDecoded0:[Inspector2ClientTypes.StringFilter]? = nil
        if let componentIdContainer = componentIdContainer {
            componentIdDecoded0 = [Inspector2ClientTypes.StringFilter]()
            for structure0 in componentIdContainer {
                if let structure0 = structure0 {
                    componentIdDecoded0?.append(structure0)
                }
            }
        }
        componentId = componentIdDecoded0
        let componentTypeContainer = try containerValues.decodeIfPresent([Inspector2ClientTypes.StringFilter?].self, forKey: .componentType)
        var componentTypeDecoded0:[Inspector2ClientTypes.StringFilter]? = nil
        if let componentTypeContainer = componentTypeContainer {
            componentTypeDecoded0 = [Inspector2ClientTypes.StringFilter]()
            for structure0 in componentTypeContainer {
                if let structure0 = structure0 {
                    componentTypeDecoded0?.append(structure0)
                }
            }
        }
        componentType = componentTypeDecoded0
        let vulnerabilityIdContainer = try containerValues.decodeIfPresent([Inspector2ClientTypes.StringFilter?].self, forKey: .vulnerabilityId)
        var vulnerabilityIdDecoded0:[Inspector2ClientTypes.StringFilter]? = nil
        if let vulnerabilityIdContainer = vulnerabilityIdContainer {
            vulnerabilityIdDecoded0 = [Inspector2ClientTypes.StringFilter]()
            for structure0 in vulnerabilityIdContainer {
                if let structure0 = structure0 {
                    vulnerabilityIdDecoded0?.append(structure0)
                }
            }
        }
        vulnerabilityId = vulnerabilityIdDecoded0
        let vulnerabilitySourceContainer = try containerValues.decodeIfPresent([Inspector2ClientTypes.StringFilter?].self, forKey: .vulnerabilitySource)
        var vulnerabilitySourceDecoded0:[Inspector2ClientTypes.StringFilter]? = nil
        if let vulnerabilitySourceContainer = vulnerabilitySourceContainer {
            vulnerabilitySourceDecoded0 = [Inspector2ClientTypes.StringFilter]()
            for structure0 in vulnerabilitySourceContainer {
                if let structure0 = structure0 {
                    vulnerabilitySourceDecoded0?.append(structure0)
                }
            }
        }
        vulnerabilitySource = vulnerabilitySourceDecoded0
        let vendorSeverityContainer = try containerValues.decodeIfPresent([Inspector2ClientTypes.StringFilter?].self, forKey: .vendorSeverity)
        var vendorSeverityDecoded0:[Inspector2ClientTypes.StringFilter]? = nil
        if let vendorSeverityContainer = vendorSeverityContainer {
            vendorSeverityDecoded0 = [Inspector2ClientTypes.StringFilter]()
            for structure0 in vendorSeverityContainer {
                if let structure0 = structure0 {
                    vendorSeverityDecoded0?.append(structure0)
                }
            }
        }
        vendorSeverity = vendorSeverityDecoded0
        let vulnerablePackagesContainer = try containerValues.decodeIfPresent([Inspector2ClientTypes.PackageFilter?].self, forKey: .vulnerablePackages)
        var vulnerablePackagesDecoded0:[Inspector2ClientTypes.PackageFilter]? = nil
        if let vulnerablePackagesContainer = vulnerablePackagesContainer {
            vulnerablePackagesDecoded0 = [Inspector2ClientTypes.PackageFilter]()
            for structure0 in vulnerablePackagesContainer {
                if let structure0 = structure0 {
                    vulnerablePackagesDecoded0?.append(structure0)
                }
            }
        }
        vulnerablePackages = vulnerablePackagesDecoded0
        let relatedVulnerabilitiesContainer = try containerValues.decodeIfPresent([Inspector2ClientTypes.StringFilter?].self, forKey: .relatedVulnerabilities)
        var relatedVulnerabilitiesDecoded0:[Inspector2ClientTypes.StringFilter]? = nil
        if let relatedVulnerabilitiesContainer = relatedVulnerabilitiesContainer {
            relatedVulnerabilitiesDecoded0 = [Inspector2ClientTypes.StringFilter]()
            for structure0 in relatedVulnerabilitiesContainer {
                if let structure0 = structure0 {
                    relatedVulnerabilitiesDecoded0?.append(structure0)
                }
            }
        }
        relatedVulnerabilities = relatedVulnerabilitiesDecoded0
        let fixAvailableContainer = try containerValues.decodeIfPresent([Inspector2ClientTypes.StringFilter?].self, forKey: .fixAvailable)
        var fixAvailableDecoded0:[Inspector2ClientTypes.StringFilter]? = nil
        if let fixAvailableContainer = fixAvailableContainer {
            fixAvailableDecoded0 = [Inspector2ClientTypes.StringFilter]()
            for structure0 in fixAvailableContainer {
                if let structure0 = structure0 {
                    fixAvailableDecoded0?.append(structure0)
                }
            }
        }
        fixAvailable = fixAvailableDecoded0
    }
}
