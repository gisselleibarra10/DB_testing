// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Inspector2ClientTypes.AwsEcrContainerAggregation: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case architectures
        case imageShas
        case imageTags
        case repositories
        case resourceIds
        case sortBy
        case sortOrder
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let architectures = architectures {
            var architecturesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .architectures)
            for stringfilterlist0 in architectures {
                try architecturesContainer.encode(stringfilterlist0)
            }
        }
        if let imageShas = imageShas {
            var imageShasContainer = encodeContainer.nestedUnkeyedContainer(forKey: .imageShas)
            for stringfilterlist0 in imageShas {
                try imageShasContainer.encode(stringfilterlist0)
            }
        }
        if let imageTags = imageTags {
            var imageTagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .imageTags)
            for stringfilterlist0 in imageTags {
                try imageTagsContainer.encode(stringfilterlist0)
            }
        }
        if let repositories = repositories {
            var repositoriesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .repositories)
            for stringfilterlist0 in repositories {
                try repositoriesContainer.encode(stringfilterlist0)
            }
        }
        if let resourceIds = resourceIds {
            var resourceIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .resourceIds)
            for stringfilterlist0 in resourceIds {
                try resourceIdsContainer.encode(stringfilterlist0)
            }
        }
        if let sortBy = self.sortBy {
            try encodeContainer.encode(sortBy.rawValue, forKey: .sortBy)
        }
        if let sortOrder = self.sortOrder {
            try encodeContainer.encode(sortOrder.rawValue, forKey: .sortOrder)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceIdsContainer = try containerValues.decodeIfPresent([Inspector2ClientTypes.StringFilter?].self, forKey: .resourceIds)
        var resourceIdsDecoded0:[Inspector2ClientTypes.StringFilter]? = nil
        if let resourceIdsContainer = resourceIdsContainer {
            resourceIdsDecoded0 = [Inspector2ClientTypes.StringFilter]()
            for structure0 in resourceIdsContainer {
                if let structure0 = structure0 {
                    resourceIdsDecoded0?.append(structure0)
                }
            }
        }
        resourceIds = resourceIdsDecoded0
        let imageShasContainer = try containerValues.decodeIfPresent([Inspector2ClientTypes.StringFilter?].self, forKey: .imageShas)
        var imageShasDecoded0:[Inspector2ClientTypes.StringFilter]? = nil
        if let imageShasContainer = imageShasContainer {
            imageShasDecoded0 = [Inspector2ClientTypes.StringFilter]()
            for structure0 in imageShasContainer {
                if let structure0 = structure0 {
                    imageShasDecoded0?.append(structure0)
                }
            }
        }
        imageShas = imageShasDecoded0
        let repositoriesContainer = try containerValues.decodeIfPresent([Inspector2ClientTypes.StringFilter?].self, forKey: .repositories)
        var repositoriesDecoded0:[Inspector2ClientTypes.StringFilter]? = nil
        if let repositoriesContainer = repositoriesContainer {
            repositoriesDecoded0 = [Inspector2ClientTypes.StringFilter]()
            for structure0 in repositoriesContainer {
                if let structure0 = structure0 {
                    repositoriesDecoded0?.append(structure0)
                }
            }
        }
        repositories = repositoriesDecoded0
        let architecturesContainer = try containerValues.decodeIfPresent([Inspector2ClientTypes.StringFilter?].self, forKey: .architectures)
        var architecturesDecoded0:[Inspector2ClientTypes.StringFilter]? = nil
        if let architecturesContainer = architecturesContainer {
            architecturesDecoded0 = [Inspector2ClientTypes.StringFilter]()
            for structure0 in architecturesContainer {
                if let structure0 = structure0 {
                    architecturesDecoded0?.append(structure0)
                }
            }
        }
        architectures = architecturesDecoded0
        let imageTagsContainer = try containerValues.decodeIfPresent([Inspector2ClientTypes.StringFilter?].self, forKey: .imageTags)
        var imageTagsDecoded0:[Inspector2ClientTypes.StringFilter]? = nil
        if let imageTagsContainer = imageTagsContainer {
            imageTagsDecoded0 = [Inspector2ClientTypes.StringFilter]()
            for structure0 in imageTagsContainer {
                if let structure0 = structure0 {
                    imageTagsDecoded0?.append(structure0)
                }
            }
        }
        imageTags = imageTagsDecoded0
        let sortOrderDecoded = try containerValues.decodeIfPresent(Inspector2ClientTypes.SortOrder.self, forKey: .sortOrder)
        sortOrder = sortOrderDecoded
        let sortByDecoded = try containerValues.decodeIfPresent(Inspector2ClientTypes.AwsEcrContainerSortBy.self, forKey: .sortBy)
        sortBy = sortByDecoded
    }
}
