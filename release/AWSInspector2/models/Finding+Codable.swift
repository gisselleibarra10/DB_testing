// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Inspector2ClientTypes.Finding: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case awsAccountId
        case description
        case findingArn
        case firstObservedAt
        case fixAvailable
        case inspectorScore
        case inspectorScoreDetails
        case lastObservedAt
        case networkReachabilityDetails
        case packageVulnerabilityDetails
        case remediation
        case resources
        case severity
        case status
        case title
        case type
        case updatedAt
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let awsAccountId = self.awsAccountId {
            try encodeContainer.encode(awsAccountId, forKey: .awsAccountId)
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let findingArn = self.findingArn {
            try encodeContainer.encode(findingArn, forKey: .findingArn)
        }
        if let firstObservedAt = self.firstObservedAt {
            try encodeContainer.encode(firstObservedAt.timeIntervalSince1970, forKey: .firstObservedAt)
        }
        if let fixAvailable = self.fixAvailable {
            try encodeContainer.encode(fixAvailable.rawValue, forKey: .fixAvailable)
        }
        if let inspectorScore = self.inspectorScore {
            try encodeContainer.encode(inspectorScore, forKey: .inspectorScore)
        }
        if let inspectorScoreDetails = self.inspectorScoreDetails {
            try encodeContainer.encode(inspectorScoreDetails, forKey: .inspectorScoreDetails)
        }
        if let lastObservedAt = self.lastObservedAt {
            try encodeContainer.encode(lastObservedAt.timeIntervalSince1970, forKey: .lastObservedAt)
        }
        if let networkReachabilityDetails = self.networkReachabilityDetails {
            try encodeContainer.encode(networkReachabilityDetails, forKey: .networkReachabilityDetails)
        }
        if let packageVulnerabilityDetails = self.packageVulnerabilityDetails {
            try encodeContainer.encode(packageVulnerabilityDetails, forKey: .packageVulnerabilityDetails)
        }
        if let remediation = self.remediation {
            try encodeContainer.encode(remediation, forKey: .remediation)
        }
        if let resources = resources {
            var resourcesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .resources)
            for resourcelist0 in resources {
                try resourcesContainer.encode(resourcelist0)
            }
        }
        if let severity = self.severity {
            try encodeContainer.encode(severity.rawValue, forKey: .severity)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let title = self.title {
            try encodeContainer.encode(title, forKey: .title)
        }
        if let type = self.type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
        if let updatedAt = self.updatedAt {
            try encodeContainer.encode(updatedAt.timeIntervalSince1970, forKey: .updatedAt)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let findingArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .findingArn)
        findingArn = findingArnDecoded
        let awsAccountIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .awsAccountId)
        awsAccountId = awsAccountIdDecoded
        let typeDecoded = try containerValues.decodeIfPresent(Inspector2ClientTypes.FindingType.self, forKey: .type)
        type = typeDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let titleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .title)
        title = titleDecoded
        let remediationDecoded = try containerValues.decodeIfPresent(Inspector2ClientTypes.Remediation.self, forKey: .remediation)
        remediation = remediationDecoded
        let severityDecoded = try containerValues.decodeIfPresent(Inspector2ClientTypes.Severity.self, forKey: .severity)
        severity = severityDecoded
        let firstObservedAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .firstObservedAt)
        firstObservedAt = firstObservedAtDecoded
        let lastObservedAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastObservedAt)
        lastObservedAt = lastObservedAtDecoded
        let updatedAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .updatedAt)
        updatedAt = updatedAtDecoded
        let statusDecoded = try containerValues.decodeIfPresent(Inspector2ClientTypes.FindingStatus.self, forKey: .status)
        status = statusDecoded
        let resourcesContainer = try containerValues.decodeIfPresent([Inspector2ClientTypes.Resource?].self, forKey: .resources)
        var resourcesDecoded0:[Inspector2ClientTypes.Resource]? = nil
        if let resourcesContainer = resourcesContainer {
            resourcesDecoded0 = [Inspector2ClientTypes.Resource]()
            for structure0 in resourcesContainer {
                if let structure0 = structure0 {
                    resourcesDecoded0?.append(structure0)
                }
            }
        }
        resources = resourcesDecoded0
        let inspectorScoreDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .inspectorScore)
        inspectorScore = inspectorScoreDecoded
        let inspectorScoreDetailsDecoded = try containerValues.decodeIfPresent(Inspector2ClientTypes.InspectorScoreDetails.self, forKey: .inspectorScoreDetails)
        inspectorScoreDetails = inspectorScoreDetailsDecoded
        let networkReachabilityDetailsDecoded = try containerValues.decodeIfPresent(Inspector2ClientTypes.NetworkReachabilityDetails.self, forKey: .networkReachabilityDetails)
        networkReachabilityDetails = networkReachabilityDetailsDecoded
        let packageVulnerabilityDetailsDecoded = try containerValues.decodeIfPresent(Inspector2ClientTypes.PackageVulnerabilityDetails.self, forKey: .packageVulnerabilityDetails)
        packageVulnerabilityDetails = packageVulnerabilityDetailsDecoded
        let fixAvailableDecoded = try containerValues.decodeIfPresent(Inspector2ClientTypes.FixAvailable.self, forKey: .fixAvailable)
        fixAvailable = fixAvailableDecoded
    }
}
