// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension Inspector2ClientTypes {
    public enum ScanStatusReason: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case accessDenied
        case ec2InstanceStopped
        case imageSizeExceeded
        case internalError
        case noInventory
        case noResourcesFound
        case pendingDisable
        case pendingInitialScan
        case resourceTerminated
        case scanEligibilityExpired
        case scanFrequencyManual
        case scanFrequencyScanOnPush
        case staleInventory
        case successful
        case unmanagedEc2Instance
        case unsupportedOs
        case sdkUnknown(Swift.String)

        public static var allCases: [ScanStatusReason] {
            return [
                .accessDenied,
                .ec2InstanceStopped,
                .imageSizeExceeded,
                .internalError,
                .noInventory,
                .noResourcesFound,
                .pendingDisable,
                .pendingInitialScan,
                .resourceTerminated,
                .scanEligibilityExpired,
                .scanFrequencyManual,
                .scanFrequencyScanOnPush,
                .staleInventory,
                .successful,
                .unmanagedEc2Instance,
                .unsupportedOs,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .accessDenied: return "ACCESS_DENIED"
            case .ec2InstanceStopped: return "EC2_INSTANCE_STOPPED"
            case .imageSizeExceeded: return "IMAGE_SIZE_EXCEEDED"
            case .internalError: return "INTERNAL_ERROR"
            case .noInventory: return "NO_INVENTORY"
            case .noResourcesFound: return "NO_RESOURCES_FOUND"
            case .pendingDisable: return "PENDING_DISABLE"
            case .pendingInitialScan: return "PENDING_INITIAL_SCAN"
            case .resourceTerminated: return "RESOURCE_TERMINATED"
            case .scanEligibilityExpired: return "SCAN_ELIGIBILITY_EXPIRED"
            case .scanFrequencyManual: return "SCAN_FREQUENCY_MANUAL"
            case .scanFrequencyScanOnPush: return "SCAN_FREQUENCY_SCAN_ON_PUSH"
            case .staleInventory: return "STALE_INVENTORY"
            case .successful: return "SUCCESSFUL"
            case .unmanagedEc2Instance: return "UNMANAGED_EC2_INSTANCE"
            case .unsupportedOs: return "UNSUPPORTED_OS"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ScanStatusReason(rawValue: rawValue) ?? ScanStatusReason.sdkUnknown(rawValue)
        }
    }
}
