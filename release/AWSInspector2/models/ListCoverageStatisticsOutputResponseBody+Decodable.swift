// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListCoverageStatisticsOutputResponseBody: Swift.Equatable {
    let countsByGroup: [Inspector2ClientTypes.Counts]?
    let totalCounts: Swift.Int?
    let nextToken: Swift.String?
}

extension ListCoverageStatisticsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case countsByGroup
        case nextToken
        case totalCounts
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let countsByGroupContainer = try containerValues.decodeIfPresent([Inspector2ClientTypes.Counts?].self, forKey: .countsByGroup)
        var countsByGroupDecoded0:[Inspector2ClientTypes.Counts]? = nil
        if let countsByGroupContainer = countsByGroupContainer {
            countsByGroupDecoded0 = [Inspector2ClientTypes.Counts]()
            for structure0 in countsByGroupContainer {
                if let structure0 = structure0 {
                    countsByGroupDecoded0?.append(structure0)
                }
            }
        }
        countsByGroup = countsByGroupDecoded0
        let totalCountsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .totalCounts)
        totalCounts = totalCountsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
