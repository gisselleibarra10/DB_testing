// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Inspector2ClientTypes.Ec2InstanceAggregationResponse: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountId
        case ami
        case instanceId
        case instanceTags
        case networkFindings
        case operatingSystem
        case severityCounts
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accountId = self.accountId {
            try encodeContainer.encode(accountId, forKey: .accountId)
        }
        if let ami = self.ami {
            try encodeContainer.encode(ami, forKey: .ami)
        }
        if let instanceId = self.instanceId {
            try encodeContainer.encode(instanceId, forKey: .instanceId)
        }
        if let instanceTags = instanceTags {
            var instanceTagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .instanceTags)
            for (dictKey0, tagmap0) in instanceTags {
                try instanceTagsContainer.encode(tagmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let networkFindings = self.networkFindings {
            try encodeContainer.encode(networkFindings, forKey: .networkFindings)
        }
        if let operatingSystem = self.operatingSystem {
            try encodeContainer.encode(operatingSystem, forKey: .operatingSystem)
        }
        if let severityCounts = self.severityCounts {
            try encodeContainer.encode(severityCounts, forKey: .severityCounts)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instanceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceId)
        instanceId = instanceIdDecoded
        let amiDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ami)
        ami = amiDecoded
        let operatingSystemDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .operatingSystem)
        operatingSystem = operatingSystemDecoded
        let instanceTagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .instanceTags)
        var instanceTagsDecoded0: [Swift.String:Swift.String]? = nil
        if let instanceTagsContainer = instanceTagsContainer {
            instanceTagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, mapvalue0) in instanceTagsContainer {
                if let mapvalue0 = mapvalue0 {
                    instanceTagsDecoded0?[key0] = mapvalue0
                }
            }
        }
        instanceTags = instanceTagsDecoded0
        let accountIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .accountId)
        accountId = accountIdDecoded
        let severityCountsDecoded = try containerValues.decodeIfPresent(Inspector2ClientTypes.SeverityCounts.self, forKey: .severityCounts)
        severityCounts = severityCountsDecoded
        let networkFindingsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .networkFindings)
        networkFindings = networkFindingsDecoded
    }
}
