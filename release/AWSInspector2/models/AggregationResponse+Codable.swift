// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Inspector2ClientTypes.AggregationResponse: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountaggregation = "accountAggregation"
        case amiaggregation = "amiAggregation"
        case awsecrcontaineraggregation = "awsEcrContainerAggregation"
        case ec2instanceaggregation = "ec2InstanceAggregation"
        case findingtypeaggregation = "findingTypeAggregation"
        case imagelayeraggregation = "imageLayerAggregation"
        case packageaggregation = "packageAggregation"
        case repositoryaggregation = "repositoryAggregation"
        case sdkUnknown
        case titleaggregation = "titleAggregation"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        switch self {
            case let .accountaggregation(accountaggregation):
                try container.encode(accountaggregation, forKey: .accountaggregation)
            case let .amiaggregation(amiaggregation):
                try container.encode(amiaggregation, forKey: .amiaggregation)
            case let .awsecrcontaineraggregation(awsecrcontaineraggregation):
                try container.encode(awsecrcontaineraggregation, forKey: .awsecrcontaineraggregation)
            case let .ec2instanceaggregation(ec2instanceaggregation):
                try container.encode(ec2instanceaggregation, forKey: .ec2instanceaggregation)
            case let .findingtypeaggregation(findingtypeaggregation):
                try container.encode(findingtypeaggregation, forKey: .findingtypeaggregation)
            case let .imagelayeraggregation(imagelayeraggregation):
                try container.encode(imagelayeraggregation, forKey: .imagelayeraggregation)
            case let .packageaggregation(packageaggregation):
                try container.encode(packageaggregation, forKey: .packageaggregation)
            case let .repositoryaggregation(repositoryaggregation):
                try container.encode(repositoryaggregation, forKey: .repositoryaggregation)
            case let .titleaggregation(titleaggregation):
                try container.encode(titleaggregation, forKey: .titleaggregation)
            case let .sdkUnknown(sdkUnknown):
                try container.encode(sdkUnknown, forKey: .sdkUnknown)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let values = try decoder.container(keyedBy: CodingKeys.self)
        let accountaggregationDecoded = try values.decodeIfPresent(Inspector2ClientTypes.AccountAggregationResponse.self, forKey: .accountaggregation)
        if let accountaggregation = accountaggregationDecoded {
            self = .accountaggregation(accountaggregation)
            return
        }
        let amiaggregationDecoded = try values.decodeIfPresent(Inspector2ClientTypes.AmiAggregationResponse.self, forKey: .amiaggregation)
        if let amiaggregation = amiaggregationDecoded {
            self = .amiaggregation(amiaggregation)
            return
        }
        let awsecrcontaineraggregationDecoded = try values.decodeIfPresent(Inspector2ClientTypes.AwsEcrContainerAggregationResponse.self, forKey: .awsecrcontaineraggregation)
        if let awsecrcontaineraggregation = awsecrcontaineraggregationDecoded {
            self = .awsecrcontaineraggregation(awsecrcontaineraggregation)
            return
        }
        let ec2instanceaggregationDecoded = try values.decodeIfPresent(Inspector2ClientTypes.Ec2InstanceAggregationResponse.self, forKey: .ec2instanceaggregation)
        if let ec2instanceaggregation = ec2instanceaggregationDecoded {
            self = .ec2instanceaggregation(ec2instanceaggregation)
            return
        }
        let findingtypeaggregationDecoded = try values.decodeIfPresent(Inspector2ClientTypes.FindingTypeAggregationResponse.self, forKey: .findingtypeaggregation)
        if let findingtypeaggregation = findingtypeaggregationDecoded {
            self = .findingtypeaggregation(findingtypeaggregation)
            return
        }
        let imagelayeraggregationDecoded = try values.decodeIfPresent(Inspector2ClientTypes.ImageLayerAggregationResponse.self, forKey: .imagelayeraggregation)
        if let imagelayeraggregation = imagelayeraggregationDecoded {
            self = .imagelayeraggregation(imagelayeraggregation)
            return
        }
        let packageaggregationDecoded = try values.decodeIfPresent(Inspector2ClientTypes.PackageAggregationResponse.self, forKey: .packageaggregation)
        if let packageaggregation = packageaggregationDecoded {
            self = .packageaggregation(packageaggregation)
            return
        }
        let repositoryaggregationDecoded = try values.decodeIfPresent(Inspector2ClientTypes.RepositoryAggregationResponse.self, forKey: .repositoryaggregation)
        if let repositoryaggregation = repositoryaggregationDecoded {
            self = .repositoryaggregation(repositoryaggregation)
            return
        }
        let titleaggregationDecoded = try values.decodeIfPresent(Inspector2ClientTypes.TitleAggregationResponse.self, forKey: .titleaggregation)
        if let titleaggregation = titleaggregationDecoded {
            self = .titleaggregation(titleaggregation)
            return
        }
        self = .sdkUnknown("")
    }
}
