// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension Inspector2ClientTypes {
    public enum RelationshipStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case accountSuspended
        case cannotCreateDetectorInOrgMaster
        case created
        case deleted
        case disabled
        case emailVerificationFailed
        case emailVerificationInProgress
        case enabled
        case invited
        case regionDisabled
        case removed
        case resigned
        case sdkUnknown(Swift.String)

        public static var allCases: [RelationshipStatus] {
            return [
                .accountSuspended,
                .cannotCreateDetectorInOrgMaster,
                .created,
                .deleted,
                .disabled,
                .emailVerificationFailed,
                .emailVerificationInProgress,
                .enabled,
                .invited,
                .regionDisabled,
                .removed,
                .resigned,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .accountSuspended: return "ACCOUNT_SUSPENDED"
            case .cannotCreateDetectorInOrgMaster: return "CANNOT_CREATE_DETECTOR_IN_ORG_MASTER"
            case .created: return "CREATED"
            case .deleted: return "DELETED"
            case .disabled: return "DISABLED"
            case .emailVerificationFailed: return "EMAIL_VERIFICATION_FAILED"
            case .emailVerificationInProgress: return "EMAIL_VERIFICATION_IN_PROGRESS"
            case .enabled: return "ENABLED"
            case .invited: return "INVITED"
            case .regionDisabled: return "REGION_DISABLED"
            case .removed: return "REMOVED"
            case .resigned: return "RESIGNED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = RelationshipStatus(rawValue: rawValue) ?? RelationshipStatus.sdkUnknown(rawValue)
        }
    }
}
