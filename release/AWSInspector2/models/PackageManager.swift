// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension Inspector2ClientTypes {
    public enum PackageManager: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case bundler
        case cargo
        case composer
        case gobinary
        case gomod
        case jar
        case nodepkg
        case npm
        case nuget
        case os
        case pip
        case pipenv
        case poetry
        case pom
        case pythonpkg
        case yarn
        case sdkUnknown(Swift.String)

        public static var allCases: [PackageManager] {
            return [
                .bundler,
                .cargo,
                .composer,
                .gobinary,
                .gomod,
                .jar,
                .nodepkg,
                .npm,
                .nuget,
                .os,
                .pip,
                .pipenv,
                .poetry,
                .pom,
                .pythonpkg,
                .yarn,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .bundler: return "BUNDLER"
            case .cargo: return "CARGO"
            case .composer: return "COMPOSER"
            case .gobinary: return "GOBINARY"
            case .gomod: return "GOMOD"
            case .jar: return "JAR"
            case .nodepkg: return "NODEPKG"
            case .npm: return "NPM"
            case .nuget: return "NUGET"
            case .os: return "OS"
            case .pip: return "PIP"
            case .pipenv: return "PIPENV"
            case .poetry: return "POETRY"
            case .pom: return "POM"
            case .pythonpkg: return "PYTHONPKG"
            case .yarn: return "YARN"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = PackageManager(rawValue: rawValue) ?? PackageManager.sdkUnknown(rawValue)
        }
    }
}
