// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Inspector2ClientTypes.Usage: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case currency
        case estimatedMonthlyCost
        case total
        case type
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let currency = self.currency {
            try encodeContainer.encode(currency.rawValue, forKey: .currency)
        }
        if estimatedMonthlyCost != 0.0 {
            try encodeContainer.encode(estimatedMonthlyCost, forKey: .estimatedMonthlyCost)
        }
        if total != 0.0 {
            try encodeContainer.encode(total, forKey: .total)
        }
        if let type = self.type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let typeDecoded = try containerValues.decodeIfPresent(Inspector2ClientTypes.UsageType.self, forKey: .type)
        type = typeDecoded
        let totalDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .total) ?? 0.0
        total = totalDecoded
        let estimatedMonthlyCostDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .estimatedMonthlyCost) ?? 0.0
        estimatedMonthlyCost = estimatedMonthlyCostDecoded
        let currencyDecoded = try containerValues.decodeIfPresent(Inspector2ClientTypes.Currency.self, forKey: .currency)
        currency = currencyDecoded
    }
}
