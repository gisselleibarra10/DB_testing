// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Iot1ClickProjectsClientTypes.DeviceTemplate: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case callbackOverrides
        case deviceType
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let callbackOverrides = callbackOverrides {
            var callbackOverridesContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .callbackOverrides)
            for (dictKey0, devicecallbackoverridemap0) in callbackOverrides {
                try callbackOverridesContainer.encode(devicecallbackoverridemap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let deviceType = self.deviceType {
            try encodeContainer.encode(deviceType, forKey: .deviceType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deviceTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deviceType)
        deviceType = deviceTypeDecoded
        let callbackOverridesContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .callbackOverrides)
        var callbackOverridesDecoded0: [Swift.String:Swift.String]? = nil
        if let callbackOverridesContainer = callbackOverridesContainer {
            callbackOverridesDecoded0 = [Swift.String:Swift.String]()
            for (key0, devicecallbackvalue0) in callbackOverridesContainer {
                if let devicecallbackvalue0 = devicecallbackvalue0 {
                    callbackOverridesDecoded0?[key0] = devicecallbackvalue0
                }
            }
        }
        callbackOverrides = callbackOverridesDecoded0
    }
}
