// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension PrivateNetworksClientTypes.NetworkResource: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attributes
        case createdAt
        case description
        case health
        case model
        case networkArn
        case networkResourceArn
        case networkSiteArn
        case orderArn
        case position
        case serialNumber
        case status
        case statusReason
        case type
        case vendor
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let attributes = attributes {
            var attributesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .attributes)
            for namevaluepairs0 in attributes {
                try attributesContainer.encode(namevaluepairs0)
            }
        }
        if let createdAt = self.createdAt {
            try encodeContainer.encode(createdAt.timeIntervalSince1970, forKey: .createdAt)
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let health = self.health {
            try encodeContainer.encode(health.rawValue, forKey: .health)
        }
        if let model = self.model {
            try encodeContainer.encode(model, forKey: .model)
        }
        if let networkArn = self.networkArn {
            try encodeContainer.encode(networkArn, forKey: .networkArn)
        }
        if let networkResourceArn = self.networkResourceArn {
            try encodeContainer.encode(networkResourceArn, forKey: .networkResourceArn)
        }
        if let networkSiteArn = self.networkSiteArn {
            try encodeContainer.encode(networkSiteArn, forKey: .networkSiteArn)
        }
        if let orderArn = self.orderArn {
            try encodeContainer.encode(orderArn, forKey: .orderArn)
        }
        if let position = self.position {
            try encodeContainer.encode(position, forKey: .position)
        }
        if let serialNumber = self.serialNumber {
            try encodeContainer.encode(serialNumber, forKey: .serialNumber)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let statusReason = self.statusReason {
            try encodeContainer.encode(statusReason, forKey: .statusReason)
        }
        if let type = self.type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
        if let vendor = self.vendor {
            try encodeContainer.encode(vendor, forKey: .vendor)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let networkResourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .networkResourceArn)
        networkResourceArn = networkResourceArnDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let typeDecoded = try containerValues.decodeIfPresent(PrivateNetworksClientTypes.NetworkResourceType.self, forKey: .type)
        type = typeDecoded
        let statusDecoded = try containerValues.decodeIfPresent(PrivateNetworksClientTypes.NetworkResourceStatus.self, forKey: .status)
        status = statusDecoded
        let statusReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .statusReason)
        statusReason = statusReasonDecoded
        let vendorDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vendor)
        vendor = vendorDecoded
        let modelDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .model)
        model = modelDecoded
        let serialNumberDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serialNumber)
        serialNumber = serialNumberDecoded
        let healthDecoded = try containerValues.decodeIfPresent(PrivateNetworksClientTypes.HealthStatus.self, forKey: .health)
        health = healthDecoded
        let networkArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .networkArn)
        networkArn = networkArnDecoded
        let networkSiteArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .networkSiteArn)
        networkSiteArn = networkSiteArnDecoded
        let orderArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .orderArn)
        orderArn = orderArnDecoded
        let attributesContainer = try containerValues.decodeIfPresent([PrivateNetworksClientTypes.NameValuePair?].self, forKey: .attributes)
        var attributesDecoded0:[PrivateNetworksClientTypes.NameValuePair]? = nil
        if let attributesContainer = attributesContainer {
            attributesDecoded0 = [PrivateNetworksClientTypes.NameValuePair]()
            for structure0 in attributesContainer {
                if let structure0 = structure0 {
                    attributesDecoded0?.append(structure0)
                }
            }
        }
        attributes = attributesDecoded0
        let positionDecoded = try containerValues.decodeIfPresent(PrivateNetworksClientTypes.Position.self, forKey: .position)
        position = positionDecoded
        let createdAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdAt)
        createdAt = createdAtDecoded
    }
}
