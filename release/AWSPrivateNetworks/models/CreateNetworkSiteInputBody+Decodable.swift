// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateNetworkSiteInputBody: Swift.Equatable {
    let networkSiteName: Swift.String?
    let description: Swift.String?
    let networkArn: Swift.String?
    let pendingPlan: PrivateNetworksClientTypes.SitePlan?
    let clientToken: Swift.String?
    let availabilityZone: Swift.String?
    let availabilityZoneId: Swift.String?
    let tags: [Swift.String:Swift.String]?
}

extension CreateNetworkSiteInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case availabilityZone
        case availabilityZoneId
        case clientToken
        case description
        case networkArn
        case networkSiteName
        case pendingPlan
        case tags
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let networkSiteNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .networkSiteName)
        networkSiteName = networkSiteNameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let networkArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .networkArn)
        networkArn = networkArnDecoded
        let pendingPlanDecoded = try containerValues.decodeIfPresent(PrivateNetworksClientTypes.SitePlan.self, forKey: .pendingPlan)
        pendingPlan = pendingPlanDecoded
        let clientTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientToken)
        clientToken = clientTokenDecoded
        let availabilityZoneDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .availabilityZone)
        availabilityZone = availabilityZoneDecoded
        let availabilityZoneIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .availabilityZoneId)
        availabilityZoneId = availabilityZoneIdDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
    }
}
