// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension PrivateNetworksClientTypes.Order: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case acknowledgmentStatus
        case createdAt
        case networkArn
        case networkSiteArn
        case orderArn
        case shippingAddress
        case trackingInformation
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let acknowledgmentStatus = self.acknowledgmentStatus {
            try encodeContainer.encode(acknowledgmentStatus.rawValue, forKey: .acknowledgmentStatus)
        }
        if let createdAt = self.createdAt {
            try encodeContainer.encode(createdAt.timeIntervalSince1970, forKey: .createdAt)
        }
        if let networkArn = self.networkArn {
            try encodeContainer.encode(networkArn, forKey: .networkArn)
        }
        if let networkSiteArn = self.networkSiteArn {
            try encodeContainer.encode(networkSiteArn, forKey: .networkSiteArn)
        }
        if let orderArn = self.orderArn {
            try encodeContainer.encode(orderArn, forKey: .orderArn)
        }
        if let shippingAddress = self.shippingAddress {
            try encodeContainer.encode(shippingAddress, forKey: .shippingAddress)
        }
        if let trackingInformation = trackingInformation {
            var trackingInformationContainer = encodeContainer.nestedUnkeyedContainer(forKey: .trackingInformation)
            for trackinginformationlist0 in trackingInformation {
                try trackingInformationContainer.encode(trackinginformationlist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let orderArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .orderArn)
        orderArn = orderArnDecoded
        let shippingAddressDecoded = try containerValues.decodeIfPresent(PrivateNetworksClientTypes.Address.self, forKey: .shippingAddress)
        shippingAddress = shippingAddressDecoded
        let networkArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .networkArn)
        networkArn = networkArnDecoded
        let networkSiteArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .networkSiteArn)
        networkSiteArn = networkSiteArnDecoded
        let trackingInformationContainer = try containerValues.decodeIfPresent([PrivateNetworksClientTypes.TrackingInformation?].self, forKey: .trackingInformation)
        var trackingInformationDecoded0:[PrivateNetworksClientTypes.TrackingInformation]? = nil
        if let trackingInformationContainer = trackingInformationContainer {
            trackingInformationDecoded0 = [PrivateNetworksClientTypes.TrackingInformation]()
            for structure0 in trackingInformationContainer {
                if let structure0 = structure0 {
                    trackingInformationDecoded0?.append(structure0)
                }
            }
        }
        trackingInformation = trackingInformationDecoded0
        let acknowledgmentStatusDecoded = try containerValues.decodeIfPresent(PrivateNetworksClientTypes.AcknowledgmentStatus.self, forKey: .acknowledgmentStatus)
        acknowledgmentStatus = acknowledgmentStatusDecoded
        let createdAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdAt)
        createdAt = createdAtDecoded
    }
}
