// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension PrivateNetworksClientTypes.NetworkSite: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case availabilityZone
        case availabilityZoneId
        case createdAt
        case currentPlan
        case description
        case networkArn
        case networkSiteArn
        case networkSiteName
        case pendingPlan
        case status
        case statusReason
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let availabilityZone = self.availabilityZone {
            try encodeContainer.encode(availabilityZone, forKey: .availabilityZone)
        }
        if let availabilityZoneId = self.availabilityZoneId {
            try encodeContainer.encode(availabilityZoneId, forKey: .availabilityZoneId)
        }
        if let createdAt = self.createdAt {
            try encodeContainer.encode(createdAt.timeIntervalSince1970, forKey: .createdAt)
        }
        if let currentPlan = self.currentPlan {
            try encodeContainer.encode(currentPlan, forKey: .currentPlan)
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let networkArn = self.networkArn {
            try encodeContainer.encode(networkArn, forKey: .networkArn)
        }
        if let networkSiteArn = self.networkSiteArn {
            try encodeContainer.encode(networkSiteArn, forKey: .networkSiteArn)
        }
        if let networkSiteName = self.networkSiteName {
            try encodeContainer.encode(networkSiteName, forKey: .networkSiteName)
        }
        if let pendingPlan = self.pendingPlan {
            try encodeContainer.encode(pendingPlan, forKey: .pendingPlan)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let statusReason = self.statusReason {
            try encodeContainer.encode(statusReason, forKey: .statusReason)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let networkSiteArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .networkSiteArn)
        networkSiteArn = networkSiteArnDecoded
        let networkSiteNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .networkSiteName)
        networkSiteName = networkSiteNameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let statusDecoded = try containerValues.decodeIfPresent(PrivateNetworksClientTypes.NetworkSiteStatus.self, forKey: .status)
        status = statusDecoded
        let statusReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .statusReason)
        statusReason = statusReasonDecoded
        let networkArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .networkArn)
        networkArn = networkArnDecoded
        let pendingPlanDecoded = try containerValues.decodeIfPresent(PrivateNetworksClientTypes.SitePlan.self, forKey: .pendingPlan)
        pendingPlan = pendingPlanDecoded
        let currentPlanDecoded = try containerValues.decodeIfPresent(PrivateNetworksClientTypes.SitePlan.self, forKey: .currentPlan)
        currentPlan = currentPlanDecoded
        let createdAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdAt)
        createdAt = createdAtDecoded
        let availabilityZoneDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .availabilityZone)
        availabilityZone = availabilityZoneDecoded
        let availabilityZoneIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .availabilityZoneId)
        availabilityZoneId = availabilityZoneIdDecoded
    }
}
