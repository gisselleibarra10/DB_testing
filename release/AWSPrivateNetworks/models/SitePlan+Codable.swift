// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension PrivateNetworksClientTypes.SitePlan: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case options
        case resourceDefinitions
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let options = options {
            var optionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .options)
            for options0 in options {
                try optionsContainer.encode(options0)
            }
        }
        if let resourceDefinitions = resourceDefinitions {
            var resourceDefinitionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .resourceDefinitions)
            for networkresourcedefinitions0 in resourceDefinitions {
                try resourceDefinitionsContainer.encode(networkresourcedefinitions0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceDefinitionsContainer = try containerValues.decodeIfPresent([PrivateNetworksClientTypes.NetworkResourceDefinition?].self, forKey: .resourceDefinitions)
        var resourceDefinitionsDecoded0:[PrivateNetworksClientTypes.NetworkResourceDefinition]? = nil
        if let resourceDefinitionsContainer = resourceDefinitionsContainer {
            resourceDefinitionsDecoded0 = [PrivateNetworksClientTypes.NetworkResourceDefinition]()
            for structure0 in resourceDefinitionsContainer {
                if let structure0 = structure0 {
                    resourceDefinitionsDecoded0?.append(structure0)
                }
            }
        }
        resourceDefinitions = resourceDefinitionsDecoded0
        let optionsContainer = try containerValues.decodeIfPresent([PrivateNetworksClientTypes.NameValuePair?].self, forKey: .options)
        var optionsDecoded0:[PrivateNetworksClientTypes.NameValuePair]? = nil
        if let optionsContainer = optionsContainer {
            optionsDecoded0 = [PrivateNetworksClientTypes.NameValuePair]()
            for structure0 in optionsContainer {
                if let structure0 = structure0 {
                    optionsDecoded0?.append(structure0)
                }
            }
        }
        options = optionsDecoded0
    }
}
