// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension PrivateNetworksClientTypes.NetworkResourceDefinition: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case count
        case options
        case type
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let count = self.count {
            try encodeContainer.encode(count, forKey: .count)
        }
        if let options = options {
            var optionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .options)
            for options0 in options {
                try optionsContainer.encode(options0)
            }
        }
        if let type = self.type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let typeDecoded = try containerValues.decodeIfPresent(PrivateNetworksClientTypes.NetworkResourceDefinitionType.self, forKey: .type)
        type = typeDecoded
        let optionsContainer = try containerValues.decodeIfPresent([PrivateNetworksClientTypes.NameValuePair?].self, forKey: .options)
        var optionsDecoded0:[PrivateNetworksClientTypes.NameValuePair]? = nil
        if let optionsContainer = optionsContainer {
            optionsDecoded0 = [PrivateNetworksClientTypes.NameValuePair]()
            for structure0 in optionsContainer {
                if let structure0 = structure0 {
                    optionsDecoded0?.append(structure0)
                }
            }
        }
        options = optionsDecoded0
        let countDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .count)
        count = countDecoded
    }
}
