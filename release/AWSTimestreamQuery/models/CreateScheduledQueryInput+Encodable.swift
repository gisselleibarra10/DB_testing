// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CreateScheduledQueryInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientToken = "ClientToken"
        case errorReportConfiguration = "ErrorReportConfiguration"
        case kmsKeyId = "KmsKeyId"
        case name = "Name"
        case notificationConfiguration = "NotificationConfiguration"
        case queryString = "QueryString"
        case scheduleConfiguration = "ScheduleConfiguration"
        case scheduledQueryExecutionRoleArn = "ScheduledQueryExecutionRoleArn"
        case tags = "Tags"
        case targetConfiguration = "TargetConfiguration"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientToken = self.clientToken {
            try encodeContainer.encode(clientToken, forKey: .clientToken)
        }
        if let errorReportConfiguration = self.errorReportConfiguration {
            try encodeContainer.encode(errorReportConfiguration, forKey: .errorReportConfiguration)
        }
        if let kmsKeyId = self.kmsKeyId {
            try encodeContainer.encode(kmsKeyId, forKey: .kmsKeyId)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let notificationConfiguration = self.notificationConfiguration {
            try encodeContainer.encode(notificationConfiguration, forKey: .notificationConfiguration)
        }
        if let queryString = self.queryString {
            try encodeContainer.encode(queryString, forKey: .queryString)
        }
        if let scheduleConfiguration = self.scheduleConfiguration {
            try encodeContainer.encode(scheduleConfiguration, forKey: .scheduleConfiguration)
        }
        if let scheduledQueryExecutionRoleArn = self.scheduledQueryExecutionRoleArn {
            try encodeContainer.encode(scheduledQueryExecutionRoleArn, forKey: .scheduledQueryExecutionRoleArn)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
        if let targetConfiguration = self.targetConfiguration {
            try encodeContainer.encode(targetConfiguration, forKey: .targetConfiguration)
        }
    }
}
