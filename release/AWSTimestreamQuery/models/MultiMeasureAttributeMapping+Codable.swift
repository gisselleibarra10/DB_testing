// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension TimestreamQueryClientTypes.MultiMeasureAttributeMapping: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case measureValueType = "MeasureValueType"
        case sourceColumn = "SourceColumn"
        case targetMultiMeasureAttributeName = "TargetMultiMeasureAttributeName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let measureValueType = self.measureValueType {
            try encodeContainer.encode(measureValueType.rawValue, forKey: .measureValueType)
        }
        if let sourceColumn = self.sourceColumn {
            try encodeContainer.encode(sourceColumn, forKey: .sourceColumn)
        }
        if let targetMultiMeasureAttributeName = self.targetMultiMeasureAttributeName {
            try encodeContainer.encode(targetMultiMeasureAttributeName, forKey: .targetMultiMeasureAttributeName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sourceColumnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceColumn)
        sourceColumn = sourceColumnDecoded
        let targetMultiMeasureAttributeNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .targetMultiMeasureAttributeName)
        targetMultiMeasureAttributeName = targetMultiMeasureAttributeNameDecoded
        let measureValueTypeDecoded = try containerValues.decodeIfPresent(TimestreamQueryClientTypes.ScalarMeasureValueType.self, forKey: .measureValueType)
        measureValueType = measureValueTypeDecoded
    }
}
