// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension TimestreamQueryClientTypes.TimestreamConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case databaseName = "DatabaseName"
        case dimensionMappings = "DimensionMappings"
        case measureNameColumn = "MeasureNameColumn"
        case mixedMeasureMappings = "MixedMeasureMappings"
        case multiMeasureMappings = "MultiMeasureMappings"
        case tableName = "TableName"
        case timeColumn = "TimeColumn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let databaseName = self.databaseName {
            try encodeContainer.encode(databaseName, forKey: .databaseName)
        }
        if let dimensionMappings = dimensionMappings {
            var dimensionMappingsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .dimensionMappings)
            for dimensionmappinglist0 in dimensionMappings {
                try dimensionMappingsContainer.encode(dimensionmappinglist0)
            }
        }
        if let measureNameColumn = self.measureNameColumn {
            try encodeContainer.encode(measureNameColumn, forKey: .measureNameColumn)
        }
        if let mixedMeasureMappings = mixedMeasureMappings {
            var mixedMeasureMappingsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .mixedMeasureMappings)
            for mixedmeasuremappinglist0 in mixedMeasureMappings {
                try mixedMeasureMappingsContainer.encode(mixedmeasuremappinglist0)
            }
        }
        if let multiMeasureMappings = self.multiMeasureMappings {
            try encodeContainer.encode(multiMeasureMappings, forKey: .multiMeasureMappings)
        }
        if let tableName = self.tableName {
            try encodeContainer.encode(tableName, forKey: .tableName)
        }
        if let timeColumn = self.timeColumn {
            try encodeContainer.encode(timeColumn, forKey: .timeColumn)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let databaseNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .databaseName)
        databaseName = databaseNameDecoded
        let tableNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tableName)
        tableName = tableNameDecoded
        let timeColumnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .timeColumn)
        timeColumn = timeColumnDecoded
        let dimensionMappingsContainer = try containerValues.decodeIfPresent([TimestreamQueryClientTypes.DimensionMapping?].self, forKey: .dimensionMappings)
        var dimensionMappingsDecoded0:[TimestreamQueryClientTypes.DimensionMapping]? = nil
        if let dimensionMappingsContainer = dimensionMappingsContainer {
            dimensionMappingsDecoded0 = [TimestreamQueryClientTypes.DimensionMapping]()
            for structure0 in dimensionMappingsContainer {
                if let structure0 = structure0 {
                    dimensionMappingsDecoded0?.append(structure0)
                }
            }
        }
        dimensionMappings = dimensionMappingsDecoded0
        let multiMeasureMappingsDecoded = try containerValues.decodeIfPresent(TimestreamQueryClientTypes.MultiMeasureMappings.self, forKey: .multiMeasureMappings)
        multiMeasureMappings = multiMeasureMappingsDecoded
        let mixedMeasureMappingsContainer = try containerValues.decodeIfPresent([TimestreamQueryClientTypes.MixedMeasureMapping?].self, forKey: .mixedMeasureMappings)
        var mixedMeasureMappingsDecoded0:[TimestreamQueryClientTypes.MixedMeasureMapping]? = nil
        if let mixedMeasureMappingsContainer = mixedMeasureMappingsContainer {
            mixedMeasureMappingsDecoded0 = [TimestreamQueryClientTypes.MixedMeasureMapping]()
            for structure0 in mixedMeasureMappingsContainer {
                if let structure0 = structure0 {
                    mixedMeasureMappingsDecoded0?.append(structure0)
                }
            }
        }
        mixedMeasureMappings = mixedMeasureMappingsDecoded0
        let measureNameColumnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .measureNameColumn)
        measureNameColumn = measureNameColumnDecoded
    }
}
