// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListResolverEndpointIpAddressesOutputResponseBody: Swift.Equatable {
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
    let ipAddresses: [Route53ResolverClientTypes.IpAddressResponse]?
}

extension ListResolverEndpointIpAddressesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case ipAddresses = "IpAddresses"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let ipAddressesContainer = try containerValues.decodeIfPresent([Route53ResolverClientTypes.IpAddressResponse?].self, forKey: .ipAddresses)
        var ipAddressesDecoded0:[Route53ResolverClientTypes.IpAddressResponse]? = nil
        if let ipAddressesContainer = ipAddressesContainer {
            ipAddressesDecoded0 = [Route53ResolverClientTypes.IpAddressResponse]()
            for structure0 in ipAddressesContainer {
                if let structure0 = structure0 {
                    ipAddressesDecoded0?.append(structure0)
                }
            }
        }
        ipAddresses = ipAddressesDecoded0
    }
}
