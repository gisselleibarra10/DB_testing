// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateResolverRuleInputBody: Swift.Equatable {
    let creatorRequestId: Swift.String?
    let name: Swift.String?
    let ruleType: Route53ResolverClientTypes.RuleTypeOption?
    let domainName: Swift.String?
    let targetIps: [Route53ResolverClientTypes.TargetAddress]?
    let resolverEndpointId: Swift.String?
    let tags: [Route53ResolverClientTypes.Tag]?
}

extension CreateResolverRuleInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creatorRequestId = "CreatorRequestId"
        case domainName = "DomainName"
        case name = "Name"
        case resolverEndpointId = "ResolverEndpointId"
        case ruleType = "RuleType"
        case tags = "Tags"
        case targetIps = "TargetIps"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let creatorRequestIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .creatorRequestId)
        creatorRequestId = creatorRequestIdDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let ruleTypeDecoded = try containerValues.decodeIfPresent(Route53ResolverClientTypes.RuleTypeOption.self, forKey: .ruleType)
        ruleType = ruleTypeDecoded
        let domainNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domainName)
        domainName = domainNameDecoded
        let targetIpsContainer = try containerValues.decodeIfPresent([Route53ResolverClientTypes.TargetAddress?].self, forKey: .targetIps)
        var targetIpsDecoded0:[Route53ResolverClientTypes.TargetAddress]? = nil
        if let targetIpsContainer = targetIpsContainer {
            targetIpsDecoded0 = [Route53ResolverClientTypes.TargetAddress]()
            for structure0 in targetIpsContainer {
                if let structure0 = structure0 {
                    targetIpsDecoded0?.append(structure0)
                }
            }
        }
        targetIps = targetIpsDecoded0
        let resolverEndpointIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resolverEndpointId)
        resolverEndpointId = resolverEndpointIdDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Route53ResolverClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[Route53ResolverClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Route53ResolverClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}
