// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension Route53ResolverClientTypes {
    /// For queries that originate in your VPC, detailed information about a Resolver rule, which specifies how to route DNS queries out of the VPC. The ResolverRule parameter appears in the response to a [CreateResolverRule](https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_CreateResolverRule.html), [DeleteResolverRule](https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_DeleteResolverRule.html), [GetResolverRule](https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_GetResolverRule.html), [ListResolverRules](https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ListResolverRules.html), or [UpdateResolverRule](https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_UpdateResolverRule.html) request.
    public struct ResolverRule: Swift.Equatable {
        /// The ARN (Amazon Resource Name) for the Resolver rule specified by Id.
        public var arn: Swift.String?
        /// The date and time that the Resolver rule was created, in Unix time format and Coordinated Universal Time (UTC).
        public var creationTime: Swift.String?
        /// A unique string that you specified when you created the Resolver rule. CreatorRequestId identifies the request and allows failed requests to be retried without the risk of running the operation twice.
        public var creatorRequestId: Swift.String?
        /// DNS queries for this domain name are forwarded to the IP addresses that are specified in TargetIps. If a query matches multiple Resolver rules (example.com and www.example.com), the query is routed using the Resolver rule that contains the most specific domain name (www.example.com).
        public var domainName: Swift.String?
        /// The ID that Resolver assigned to the Resolver rule when you created it.
        public var id: Swift.String?
        /// The date and time that the Resolver rule was last updated, in Unix time format and Coordinated Universal Time (UTC).
        public var modificationTime: Swift.String?
        /// The name for the Resolver rule, which you specified when you created the Resolver rule.
        public var name: Swift.String?
        /// When a rule is shared with another Amazon Web Services account, the account ID of the account that the rule is shared with.
        public var ownerId: Swift.String?
        /// The ID of the endpoint that the rule is associated with.
        public var resolverEndpointId: Swift.String?
        /// When you want to forward DNS queries for specified domain name to resolvers on your network, specify FORWARD. When you have a forwarding rule to forward DNS queries for a domain to your network and you want Resolver to process queries for a subdomain of that domain, specify SYSTEM. For example, to forward DNS queries for example.com to resolvers on your network, you create a rule and specify FORWARD for RuleType. To then have Resolver process queries for apex.example.com, you create a rule and specify SYSTEM for RuleType. Currently, only Resolver can create rules that have a value of RECURSIVE for RuleType.
        public var ruleType: Route53ResolverClientTypes.RuleTypeOption?
        /// Whether the rule is shared and, if so, whether the current account is sharing the rule with another account, or another account is sharing the rule with the current account.
        public var shareStatus: Route53ResolverClientTypes.ShareStatus?
        /// A code that specifies the current status of the Resolver rule.
        public var status: Route53ResolverClientTypes.ResolverRuleStatus?
        /// A detailed description of the status of a Resolver rule.
        public var statusMessage: Swift.String?
        /// An array that contains the IP addresses and ports that an outbound endpoint forwards DNS queries to. Typically, these are the IP addresses of DNS resolvers on your network. Specify IPv4 addresses. IPv6 is not supported.
        public var targetIps: [Route53ResolverClientTypes.TargetAddress]?

        public init (
            arn: Swift.String? = nil,
            creationTime: Swift.String? = nil,
            creatorRequestId: Swift.String? = nil,
            domainName: Swift.String? = nil,
            id: Swift.String? = nil,
            modificationTime: Swift.String? = nil,
            name: Swift.String? = nil,
            ownerId: Swift.String? = nil,
            resolverEndpointId: Swift.String? = nil,
            ruleType: Route53ResolverClientTypes.RuleTypeOption? = nil,
            shareStatus: Route53ResolverClientTypes.ShareStatus? = nil,
            status: Route53ResolverClientTypes.ResolverRuleStatus? = nil,
            statusMessage: Swift.String? = nil,
            targetIps: [Route53ResolverClientTypes.TargetAddress]? = nil
        )
        {
            self.arn = arn
            self.creationTime = creationTime
            self.creatorRequestId = creatorRequestId
            self.domainName = domainName
            self.id = id
            self.modificationTime = modificationTime
            self.name = name
            self.ownerId = ownerId
            self.resolverEndpointId = resolverEndpointId
            self.ruleType = ruleType
            self.shareStatus = shareStatus
            self.status = status
            self.statusMessage = statusMessage
            self.targetIps = targetIps
        }
    }

}
