// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateUserInputBody: Swift.Equatable {
    let identityStoreId: Swift.String?
    let userName: Swift.String?
    let name: IdentitystoreClientTypes.Name?
    let displayName: Swift.String?
    let nickName: Swift.String?
    let profileUrl: Swift.String?
    let emails: [IdentitystoreClientTypes.Email]?
    let addresses: [IdentitystoreClientTypes.Address]?
    let phoneNumbers: [IdentitystoreClientTypes.PhoneNumber]?
    let userType: Swift.String?
    let title: Swift.String?
    let preferredLanguage: Swift.String?
    let locale: Swift.String?
    let timezone: Swift.String?
}

extension CreateUserInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case addresses = "Addresses"
        case displayName = "DisplayName"
        case emails = "Emails"
        case identityStoreId = "IdentityStoreId"
        case locale = "Locale"
        case name = "Name"
        case nickName = "NickName"
        case phoneNumbers = "PhoneNumbers"
        case preferredLanguage = "PreferredLanguage"
        case profileUrl = "ProfileUrl"
        case timezone = "Timezone"
        case title = "Title"
        case userName = "UserName"
        case userType = "UserType"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let identityStoreIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .identityStoreId)
        identityStoreId = identityStoreIdDecoded
        let userNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userName)
        userName = userNameDecoded
        let nameDecoded = try containerValues.decodeIfPresent(IdentitystoreClientTypes.Name.self, forKey: .name)
        name = nameDecoded
        let displayNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .displayName)
        displayName = displayNameDecoded
        let nickNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nickName)
        nickName = nickNameDecoded
        let profileUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .profileUrl)
        profileUrl = profileUrlDecoded
        let emailsContainer = try containerValues.decodeIfPresent([IdentitystoreClientTypes.Email?].self, forKey: .emails)
        var emailsDecoded0:[IdentitystoreClientTypes.Email]? = nil
        if let emailsContainer = emailsContainer {
            emailsDecoded0 = [IdentitystoreClientTypes.Email]()
            for structure0 in emailsContainer {
                if let structure0 = structure0 {
                    emailsDecoded0?.append(structure0)
                }
            }
        }
        emails = emailsDecoded0
        let addressesContainer = try containerValues.decodeIfPresent([IdentitystoreClientTypes.Address?].self, forKey: .addresses)
        var addressesDecoded0:[IdentitystoreClientTypes.Address]? = nil
        if let addressesContainer = addressesContainer {
            addressesDecoded0 = [IdentitystoreClientTypes.Address]()
            for structure0 in addressesContainer {
                if let structure0 = structure0 {
                    addressesDecoded0?.append(structure0)
                }
            }
        }
        addresses = addressesDecoded0
        let phoneNumbersContainer = try containerValues.decodeIfPresent([IdentitystoreClientTypes.PhoneNumber?].self, forKey: .phoneNumbers)
        var phoneNumbersDecoded0:[IdentitystoreClientTypes.PhoneNumber]? = nil
        if let phoneNumbersContainer = phoneNumbersContainer {
            phoneNumbersDecoded0 = [IdentitystoreClientTypes.PhoneNumber]()
            for structure0 in phoneNumbersContainer {
                if let structure0 = structure0 {
                    phoneNumbersDecoded0?.append(structure0)
                }
            }
        }
        phoneNumbers = phoneNumbersDecoded0
        let userTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userType)
        userType = userTypeDecoded
        let titleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .title)
        title = titleDecoded
        let preferredLanguageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .preferredLanguage)
        preferredLanguage = preferredLanguageDecoded
        let localeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .locale)
        locale = localeDecoded
        let timezoneDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .timezone)
        timezone = timezoneDecoded
    }
}
