// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension IdentitystoreClientTypes.GroupMembershipExistenceResult: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case groupId = "GroupId"
        case memberId = "MemberId"
        case membershipExists = "MembershipExists"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let groupId = self.groupId {
            try encodeContainer.encode(groupId, forKey: .groupId)
        }
        if let memberId = self.memberId {
            try encodeContainer.encode(memberId, forKey: .memberId)
        }
        if membershipExists != false {
            try encodeContainer.encode(membershipExists, forKey: .membershipExists)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let groupIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .groupId)
        groupId = groupIdDecoded
        let memberIdDecoded = try containerValues.decodeIfPresent(IdentitystoreClientTypes.MemberId.self, forKey: .memberId)
        memberId = memberIdDecoded
        let membershipExistsDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .membershipExists) ?? false
        membershipExists = membershipExistsDecoded
    }
}
