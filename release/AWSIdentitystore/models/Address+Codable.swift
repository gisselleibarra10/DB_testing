// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension IdentitystoreClientTypes.Address: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case country = "Country"
        case formatted = "Formatted"
        case locality = "Locality"
        case postalCode = "PostalCode"
        case primary = "Primary"
        case region = "Region"
        case streetAddress = "StreetAddress"
        case type = "Type"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let country = self.country {
            try encodeContainer.encode(country, forKey: .country)
        }
        if let formatted = self.formatted {
            try encodeContainer.encode(formatted, forKey: .formatted)
        }
        if let locality = self.locality {
            try encodeContainer.encode(locality, forKey: .locality)
        }
        if let postalCode = self.postalCode {
            try encodeContainer.encode(postalCode, forKey: .postalCode)
        }
        if primary != false {
            try encodeContainer.encode(primary, forKey: .primary)
        }
        if let region = self.region {
            try encodeContainer.encode(region, forKey: .region)
        }
        if let streetAddress = self.streetAddress {
            try encodeContainer.encode(streetAddress, forKey: .streetAddress)
        }
        if let type = self.type {
            try encodeContainer.encode(type, forKey: .type)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let streetAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .streetAddress)
        streetAddress = streetAddressDecoded
        let localityDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .locality)
        locality = localityDecoded
        let regionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .region)
        region = regionDecoded
        let postalCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .postalCode)
        postalCode = postalCodeDecoded
        let countryDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .country)
        country = countryDecoded
        let formattedDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .formatted)
        formatted = formattedDecoded
        let typeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .type)
        type = typeDecoded
        let primaryDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .primary) ?? false
        primary = primaryDecoded
    }
}
