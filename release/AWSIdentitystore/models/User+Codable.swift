// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension IdentitystoreClientTypes.User: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case addresses = "Addresses"
        case displayName = "DisplayName"
        case emails = "Emails"
        case externalIds = "ExternalIds"
        case identityStoreId = "IdentityStoreId"
        case locale = "Locale"
        case name = "Name"
        case nickName = "NickName"
        case phoneNumbers = "PhoneNumbers"
        case preferredLanguage = "PreferredLanguage"
        case profileUrl = "ProfileUrl"
        case timezone = "Timezone"
        case title = "Title"
        case userId = "UserId"
        case userName = "UserName"
        case userType = "UserType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let addresses = addresses {
            var addressesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .addresses)
            for addresses0 in addresses {
                try addressesContainer.encode(addresses0)
            }
        }
        if let displayName = self.displayName {
            try encodeContainer.encode(displayName, forKey: .displayName)
        }
        if let emails = emails {
            var emailsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .emails)
            for emails0 in emails {
                try emailsContainer.encode(emails0)
            }
        }
        if let externalIds = externalIds {
            var externalIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .externalIds)
            for externalids0 in externalIds {
                try externalIdsContainer.encode(externalids0)
            }
        }
        if let identityStoreId = self.identityStoreId {
            try encodeContainer.encode(identityStoreId, forKey: .identityStoreId)
        }
        if let locale = self.locale {
            try encodeContainer.encode(locale, forKey: .locale)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let nickName = self.nickName {
            try encodeContainer.encode(nickName, forKey: .nickName)
        }
        if let phoneNumbers = phoneNumbers {
            var phoneNumbersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .phoneNumbers)
            for phonenumbers0 in phoneNumbers {
                try phoneNumbersContainer.encode(phonenumbers0)
            }
        }
        if let preferredLanguage = self.preferredLanguage {
            try encodeContainer.encode(preferredLanguage, forKey: .preferredLanguage)
        }
        if let profileUrl = self.profileUrl {
            try encodeContainer.encode(profileUrl, forKey: .profileUrl)
        }
        if let timezone = self.timezone {
            try encodeContainer.encode(timezone, forKey: .timezone)
        }
        if let title = self.title {
            try encodeContainer.encode(title, forKey: .title)
        }
        if let userId = self.userId {
            try encodeContainer.encode(userId, forKey: .userId)
        }
        if let userName = self.userName {
            try encodeContainer.encode(userName, forKey: .userName)
        }
        if let userType = self.userType {
            try encodeContainer.encode(userType, forKey: .userType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let userNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userName)
        userName = userNameDecoded
        let userIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userId)
        userId = userIdDecoded
        let externalIdsContainer = try containerValues.decodeIfPresent([IdentitystoreClientTypes.ExternalId?].self, forKey: .externalIds)
        var externalIdsDecoded0:[IdentitystoreClientTypes.ExternalId]? = nil
        if let externalIdsContainer = externalIdsContainer {
            externalIdsDecoded0 = [IdentitystoreClientTypes.ExternalId]()
            for structure0 in externalIdsContainer {
                if let structure0 = structure0 {
                    externalIdsDecoded0?.append(structure0)
                }
            }
        }
        externalIds = externalIdsDecoded0
        let nameDecoded = try containerValues.decodeIfPresent(IdentitystoreClientTypes.Name.self, forKey: .name)
        name = nameDecoded
        let displayNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .displayName)
        displayName = displayNameDecoded
        let nickNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nickName)
        nickName = nickNameDecoded
        let profileUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .profileUrl)
        profileUrl = profileUrlDecoded
        let emailsContainer = try containerValues.decodeIfPresent([IdentitystoreClientTypes.Email?].self, forKey: .emails)
        var emailsDecoded0:[IdentitystoreClientTypes.Email]? = nil
        if let emailsContainer = emailsContainer {
            emailsDecoded0 = [IdentitystoreClientTypes.Email]()
            for structure0 in emailsContainer {
                if let structure0 = structure0 {
                    emailsDecoded0?.append(structure0)
                }
            }
        }
        emails = emailsDecoded0
        let addressesContainer = try containerValues.decodeIfPresent([IdentitystoreClientTypes.Address?].self, forKey: .addresses)
        var addressesDecoded0:[IdentitystoreClientTypes.Address]? = nil
        if let addressesContainer = addressesContainer {
            addressesDecoded0 = [IdentitystoreClientTypes.Address]()
            for structure0 in addressesContainer {
                if let structure0 = structure0 {
                    addressesDecoded0?.append(structure0)
                }
            }
        }
        addresses = addressesDecoded0
        let phoneNumbersContainer = try containerValues.decodeIfPresent([IdentitystoreClientTypes.PhoneNumber?].self, forKey: .phoneNumbers)
        var phoneNumbersDecoded0:[IdentitystoreClientTypes.PhoneNumber]? = nil
        if let phoneNumbersContainer = phoneNumbersContainer {
            phoneNumbersDecoded0 = [IdentitystoreClientTypes.PhoneNumber]()
            for structure0 in phoneNumbersContainer {
                if let structure0 = structure0 {
                    phoneNumbersDecoded0?.append(structure0)
                }
            }
        }
        phoneNumbers = phoneNumbersDecoded0
        let userTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userType)
        userType = userTypeDecoded
        let titleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .title)
        title = titleDecoded
        let preferredLanguageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .preferredLanguage)
        preferredLanguage = preferredLanguageDecoded
        let localeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .locale)
        locale = localeDecoded
        let timezoneDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .timezone)
        timezone = timezoneDecoded
        let identityStoreIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .identityStoreId)
        identityStoreId = identityStoreIdDecoded
    }
}
