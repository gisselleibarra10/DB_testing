// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeReleaseLabelOutputResponseBody: Swift.Equatable {
    let releaseLabel: Swift.String?
    let applications: [EmrClientTypes.SimplifiedApplication]?
    let nextToken: Swift.String?
    let availableOSReleases: [EmrClientTypes.OSRelease]?
}

extension DescribeReleaseLabelOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applications = "Applications"
        case availableOSReleases = "AvailableOSReleases"
        case nextToken = "NextToken"
        case releaseLabel = "ReleaseLabel"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let releaseLabelDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .releaseLabel)
        releaseLabel = releaseLabelDecoded
        let applicationsContainer = try containerValues.decodeIfPresent([EmrClientTypes.SimplifiedApplication?].self, forKey: .applications)
        var applicationsDecoded0:[EmrClientTypes.SimplifiedApplication]? = nil
        if let applicationsContainer = applicationsContainer {
            applicationsDecoded0 = [EmrClientTypes.SimplifiedApplication]()
            for structure0 in applicationsContainer {
                if let structure0 = structure0 {
                    applicationsDecoded0?.append(structure0)
                }
            }
        }
        applications = applicationsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let availableOSReleasesContainer = try containerValues.decodeIfPresent([EmrClientTypes.OSRelease?].self, forKey: .availableOSReleases)
        var availableOSReleasesDecoded0:[EmrClientTypes.OSRelease]? = nil
        if let availableOSReleasesContainer = availableOSReleasesContainer {
            availableOSReleasesDecoded0 = [EmrClientTypes.OSRelease]()
            for structure0 in availableOSReleasesContainer {
                if let structure0 = structure0 {
                    availableOSReleasesDecoded0?.append(structure0)
                }
            }
        }
        availableOSReleases = availableOSReleasesDecoded0
    }
}
