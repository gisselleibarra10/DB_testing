// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension EmrClientTypes.KerberosAttributes: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case aDDomainJoinPassword = "ADDomainJoinPassword"
        case aDDomainJoinUser = "ADDomainJoinUser"
        case crossRealmTrustPrincipalPassword = "CrossRealmTrustPrincipalPassword"
        case kdcAdminPassword = "KdcAdminPassword"
        case realm = "Realm"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let aDDomainJoinPassword = self.aDDomainJoinPassword {
            try encodeContainer.encode(aDDomainJoinPassword, forKey: .aDDomainJoinPassword)
        }
        if let aDDomainJoinUser = self.aDDomainJoinUser {
            try encodeContainer.encode(aDDomainJoinUser, forKey: .aDDomainJoinUser)
        }
        if let crossRealmTrustPrincipalPassword = self.crossRealmTrustPrincipalPassword {
            try encodeContainer.encode(crossRealmTrustPrincipalPassword, forKey: .crossRealmTrustPrincipalPassword)
        }
        if let kdcAdminPassword = self.kdcAdminPassword {
            try encodeContainer.encode(kdcAdminPassword, forKey: .kdcAdminPassword)
        }
        if let realm = self.realm {
            try encodeContainer.encode(realm, forKey: .realm)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let realmDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .realm)
        realm = realmDecoded
        let kdcAdminPasswordDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kdcAdminPassword)
        kdcAdminPassword = kdcAdminPasswordDecoded
        let crossRealmTrustPrincipalPasswordDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .crossRealmTrustPrincipalPassword)
        crossRealmTrustPrincipalPassword = crossRealmTrustPrincipalPasswordDecoded
        let aDDomainJoinUserDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .aDDomainJoinUser)
        aDDomainJoinUser = aDDomainJoinUserDecoded
        let aDDomainJoinPasswordDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .aDDomainJoinPassword)
        aDDomainJoinPassword = aDDomainJoinPasswordDecoded
    }
}
