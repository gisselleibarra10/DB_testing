// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension EmrClientTypes {
    /// Describes the strategy for using unused Capacity Reservations for fulfilling On-Demand capacity.
    public struct OnDemandCapacityReservationOptions: Swift.Equatable {
        /// Indicates the instance's Capacity Reservation preferences. Possible preferences include:
        ///
        /// * open - The instance can run in any open Capacity Reservation that has matching attributes (instance type, platform, Availability Zone).
        ///
        /// * none - The instance avoids running in a Capacity Reservation even if one is available. The instance runs as an On-Demand Instance.
        public var capacityReservationPreference: EmrClientTypes.OnDemandCapacityReservationPreference?
        /// The ARN of the Capacity Reservation resource group in which to run the instance.
        public var capacityReservationResourceGroupArn: Swift.String?
        /// Indicates whether to use unused Capacity Reservations for fulfilling On-Demand capacity. If you specify use-capacity-reservations-first, the fleet uses unused Capacity Reservations to fulfill On-Demand capacity up to the target On-Demand capacity. If multiple instance pools have unused Capacity Reservations, the On-Demand allocation strategy (lowest-price) is applied. If the number of unused Capacity Reservations is less than the On-Demand target capacity, the remaining On-Demand target capacity is launched according to the On-Demand allocation strategy (lowest-price). If you do not specify a value, the fleet fulfills the On-Demand capacity according to the chosen On-Demand allocation strategy.
        public var usageStrategy: EmrClientTypes.OnDemandCapacityReservationUsageStrategy?

        public init (
            capacityReservationPreference: EmrClientTypes.OnDemandCapacityReservationPreference? = nil,
            capacityReservationResourceGroupArn: Swift.String? = nil,
            usageStrategy: EmrClientTypes.OnDemandCapacityReservationUsageStrategy? = nil
        )
        {
            self.capacityReservationPreference = capacityReservationPreference
            self.capacityReservationResourceGroupArn = capacityReservationResourceGroupArn
            self.usageStrategy = usageStrategy
        }
    }

}
