// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ListInstancesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterId = "ClusterId"
        case instanceFleetId = "InstanceFleetId"
        case instanceFleetType = "InstanceFleetType"
        case instanceGroupId = "InstanceGroupId"
        case instanceGroupTypes = "InstanceGroupTypes"
        case instanceStates = "InstanceStates"
        case marker = "Marker"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clusterId = self.clusterId {
            try encodeContainer.encode(clusterId, forKey: .clusterId)
        }
        if let instanceFleetId = self.instanceFleetId {
            try encodeContainer.encode(instanceFleetId, forKey: .instanceFleetId)
        }
        if let instanceFleetType = self.instanceFleetType {
            try encodeContainer.encode(instanceFleetType.rawValue, forKey: .instanceFleetType)
        }
        if let instanceGroupId = self.instanceGroupId {
            try encodeContainer.encode(instanceGroupId, forKey: .instanceGroupId)
        }
        if let instanceGroupTypes = instanceGroupTypes {
            var instanceGroupTypesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .instanceGroupTypes)
            for instancegrouptypelist0 in instanceGroupTypes {
                try instanceGroupTypesContainer.encode(instancegrouptypelist0.rawValue)
            }
        }
        if let instanceStates = instanceStates {
            var instanceStatesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .instanceStates)
            for instancestatelist0 in instanceStates {
                try instanceStatesContainer.encode(instancestatelist0.rawValue)
            }
        }
        if let marker = self.marker {
            try encodeContainer.encode(marker, forKey: .marker)
        }
    }
}
