// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension EmrClientTypes {
    /// Specify the type of Amazon EC2 instances that the cluster (job flow) runs on.
    public struct JobFlowInstancesDetail: Swift.Equatable {
        /// The name of an Amazon EC2 key pair that can be used to connect to the master node using SSH.
        public var ec2KeyName: Swift.String?
        /// For clusters launched within Amazon Virtual Private Cloud, this is the identifier of the subnet where the cluster was launched.
        public var ec2SubnetId: Swift.String?
        /// The Hadoop version for the cluster.
        public var hadoopVersion: Swift.String?
        /// The number of Amazon EC2 instances in the cluster. If the value is 1, the same instance serves as both the master and core and task node. If the value is greater than 1, one instance is the master node and all others are core and task nodes.
        /// This member is required.
        public var instanceCount: Swift.Int?
        /// Details about the instance groups in a cluster.
        public var instanceGroups: [EmrClientTypes.InstanceGroupDetail]?
        /// Specifies whether the cluster should remain available after completing all steps.
        public var keepJobFlowAliveWhenNoSteps: Swift.Bool
        /// The Amazon EC2 instance identifier of the master node.
        public var masterInstanceId: Swift.String?
        /// The Amazon EC2 master node instance type.
        /// This member is required.
        public var masterInstanceType: Swift.String?
        /// The DNS name of the master node. If the cluster is on a private subnet, this is the private DNS name. On a public subnet, this is the public DNS name.
        public var masterPublicDnsName: Swift.String?
        /// An approximation of the cost of the cluster, represented in m1.small/hours. This value is increased one time for every hour that an m1.small instance runs. Larger instances are weighted more heavily, so an Amazon EC2 instance that is roughly four times more expensive would result in the normalized instance hours being increased incrementally four times. This result is only an approximation and does not reflect the actual billing rate.
        public var normalizedInstanceHours: Swift.Int?
        /// The Amazon EC2 Availability Zone for the cluster.
        public var placement: EmrClientTypes.PlacementType?
        /// The Amazon EC2 core and task node instance type.
        /// This member is required.
        public var slaveInstanceType: Swift.String?
        /// Specifies whether the Amazon EC2 instances in the cluster are protected from termination by API calls, user intervention, or in the event of a job-flow error.
        public var terminationProtected: Swift.Bool

        public init (
            ec2KeyName: Swift.String? = nil,
            ec2SubnetId: Swift.String? = nil,
            hadoopVersion: Swift.String? = nil,
            instanceCount: Swift.Int? = nil,
            instanceGroups: [EmrClientTypes.InstanceGroupDetail]? = nil,
            keepJobFlowAliveWhenNoSteps: Swift.Bool = false,
            masterInstanceId: Swift.String? = nil,
            masterInstanceType: Swift.String? = nil,
            masterPublicDnsName: Swift.String? = nil,
            normalizedInstanceHours: Swift.Int? = nil,
            placement: EmrClientTypes.PlacementType? = nil,
            slaveInstanceType: Swift.String? = nil,
            terminationProtected: Swift.Bool = false
        )
        {
            self.ec2KeyName = ec2KeyName
            self.ec2SubnetId = ec2SubnetId
            self.hadoopVersion = hadoopVersion
            self.instanceCount = instanceCount
            self.instanceGroups = instanceGroups
            self.keepJobFlowAliveWhenNoSteps = keepJobFlowAliveWhenNoSteps
            self.masterInstanceId = masterInstanceId
            self.masterInstanceType = masterInstanceType
            self.masterPublicDnsName = masterPublicDnsName
            self.normalizedInstanceHours = normalizedInstanceHours
            self.placement = placement
            self.slaveInstanceType = slaveInstanceType
            self.terminationProtected = terminationProtected
        }
    }

}
