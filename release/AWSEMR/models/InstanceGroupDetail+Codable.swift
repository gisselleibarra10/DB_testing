// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension EmrClientTypes.InstanceGroupDetail: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bidPrice = "BidPrice"
        case creationDateTime = "CreationDateTime"
        case customAmiId = "CustomAmiId"
        case endDateTime = "EndDateTime"
        case instanceGroupId = "InstanceGroupId"
        case instanceRequestCount = "InstanceRequestCount"
        case instanceRole = "InstanceRole"
        case instanceRunningCount = "InstanceRunningCount"
        case instanceType = "InstanceType"
        case lastStateChangeReason = "LastStateChangeReason"
        case market = "Market"
        case name = "Name"
        case readyDateTime = "ReadyDateTime"
        case startDateTime = "StartDateTime"
        case state = "State"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let bidPrice = self.bidPrice {
            try encodeContainer.encode(bidPrice, forKey: .bidPrice)
        }
        if let creationDateTime = self.creationDateTime {
            try encodeContainer.encode(creationDateTime.timeIntervalSince1970, forKey: .creationDateTime)
        }
        if let customAmiId = self.customAmiId {
            try encodeContainer.encode(customAmiId, forKey: .customAmiId)
        }
        if let endDateTime = self.endDateTime {
            try encodeContainer.encode(endDateTime.timeIntervalSince1970, forKey: .endDateTime)
        }
        if let instanceGroupId = self.instanceGroupId {
            try encodeContainer.encode(instanceGroupId, forKey: .instanceGroupId)
        }
        if let instanceRequestCount = self.instanceRequestCount {
            try encodeContainer.encode(instanceRequestCount, forKey: .instanceRequestCount)
        }
        if let instanceRole = self.instanceRole {
            try encodeContainer.encode(instanceRole.rawValue, forKey: .instanceRole)
        }
        if let instanceRunningCount = self.instanceRunningCount {
            try encodeContainer.encode(instanceRunningCount, forKey: .instanceRunningCount)
        }
        if let instanceType = self.instanceType {
            try encodeContainer.encode(instanceType, forKey: .instanceType)
        }
        if let lastStateChangeReason = self.lastStateChangeReason {
            try encodeContainer.encode(lastStateChangeReason, forKey: .lastStateChangeReason)
        }
        if let market = self.market {
            try encodeContainer.encode(market.rawValue, forKey: .market)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let readyDateTime = self.readyDateTime {
            try encodeContainer.encode(readyDateTime.timeIntervalSince1970, forKey: .readyDateTime)
        }
        if let startDateTime = self.startDateTime {
            try encodeContainer.encode(startDateTime.timeIntervalSince1970, forKey: .startDateTime)
        }
        if let state = self.state {
            try encodeContainer.encode(state.rawValue, forKey: .state)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instanceGroupIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceGroupId)
        instanceGroupId = instanceGroupIdDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let marketDecoded = try containerValues.decodeIfPresent(EmrClientTypes.MarketType.self, forKey: .market)
        market = marketDecoded
        let instanceRoleDecoded = try containerValues.decodeIfPresent(EmrClientTypes.InstanceRoleType.self, forKey: .instanceRole)
        instanceRole = instanceRoleDecoded
        let bidPriceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .bidPrice)
        bidPrice = bidPriceDecoded
        let instanceTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceType)
        instanceType = instanceTypeDecoded
        let instanceRequestCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .instanceRequestCount)
        instanceRequestCount = instanceRequestCountDecoded
        let instanceRunningCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .instanceRunningCount)
        instanceRunningCount = instanceRunningCountDecoded
        let stateDecoded = try containerValues.decodeIfPresent(EmrClientTypes.InstanceGroupState.self, forKey: .state)
        state = stateDecoded
        let lastStateChangeReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastStateChangeReason)
        lastStateChangeReason = lastStateChangeReasonDecoded
        let creationDateTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationDateTime)
        creationDateTime = creationDateTimeDecoded
        let startDateTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .startDateTime)
        startDateTime = startDateTimeDecoded
        let readyDateTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .readyDateTime)
        readyDateTime = readyDateTimeDecoded
        let endDateTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .endDateTime)
        endDateTime = endDateTimeDecoded
        let customAmiIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .customAmiId)
        customAmiId = customAmiIdDecoded
    }
}
