// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension EmrClientTypes {
    /// A notebook execution. An execution is a specific instance that an EMR Notebook is run using the StartNotebookExecution action.
    public struct NotebookExecution: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the notebook execution.
        public var arn: Swift.String?
        /// The unique identifier of the EMR Notebook that is used for the notebook execution.
        public var editorId: Swift.String?
        /// The timestamp when notebook execution ended.
        public var endTime: ClientRuntime.Date?
        /// The execution engine, such as an EMR cluster, used to run the EMR notebook and perform the notebook execution.
        public var executionEngine: EmrClientTypes.ExecutionEngineConfig?
        /// The reason for the latest status change of the notebook execution.
        public var lastStateChangeReason: Swift.String?
        /// The unique identifier of a notebook execution.
        public var notebookExecutionId: Swift.String?
        /// A name for the notebook execution.
        public var notebookExecutionName: Swift.String?
        /// The unique identifier of the EC2 security group associated with the EMR Notebook instance. For more information see [Specifying EC2 Security Groups for EMR Notebooks](https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-managed-notebooks-security-groups.html) in the EMR Management Guide.
        public var notebookInstanceSecurityGroupId: Swift.String?
        /// Input parameters in JSON format passed to the EMR Notebook at runtime for execution.
        public var notebookParams: Swift.String?
        /// The location of the notebook execution's output file in Amazon S3.
        public var outputNotebookURI: Swift.String?
        /// The timestamp when notebook execution started.
        public var startTime: ClientRuntime.Date?
        /// The status of the notebook execution.
        ///
        /// * START_PENDING indicates that the cluster has received the execution request but execution has not begun.
        ///
        /// * STARTING indicates that the execution is starting on the cluster.
        ///
        /// * RUNNING indicates that the execution is being processed by the cluster.
        ///
        /// * FINISHING indicates that execution processing is in the final stages.
        ///
        /// * FINISHED indicates that the execution has completed without error.
        ///
        /// * FAILING indicates that the execution is failing and will not finish successfully.
        ///
        /// * FAILED indicates that the execution failed.
        ///
        /// * STOP_PENDING indicates that the cluster has received a StopNotebookExecution request and the stop is pending.
        ///
        /// * STOPPING indicates that the cluster is in the process of stopping the execution as a result of a StopNotebookExecution request.
        ///
        /// * STOPPED indicates that the execution stopped because of a StopNotebookExecution request.
        public var status: EmrClientTypes.NotebookExecutionStatus?
        /// A list of tags associated with a notebook execution. Tags are user-defined key-value pairs that consist of a required key string with a maximum of 128 characters and an optional value string with a maximum of 256 characters.
        public var tags: [EmrClientTypes.Tag]?

        public init (
            arn: Swift.String? = nil,
            editorId: Swift.String? = nil,
            endTime: ClientRuntime.Date? = nil,
            executionEngine: EmrClientTypes.ExecutionEngineConfig? = nil,
            lastStateChangeReason: Swift.String? = nil,
            notebookExecutionId: Swift.String? = nil,
            notebookExecutionName: Swift.String? = nil,
            notebookInstanceSecurityGroupId: Swift.String? = nil,
            notebookParams: Swift.String? = nil,
            outputNotebookURI: Swift.String? = nil,
            startTime: ClientRuntime.Date? = nil,
            status: EmrClientTypes.NotebookExecutionStatus? = nil,
            tags: [EmrClientTypes.Tag]? = nil
        )
        {
            self.arn = arn
            self.editorId = editorId
            self.endTime = endTime
            self.executionEngine = executionEngine
            self.lastStateChangeReason = lastStateChangeReason
            self.notebookExecutionId = notebookExecutionId
            self.notebookExecutionName = notebookExecutionName
            self.notebookInstanceSecurityGroupId = notebookInstanceSecurityGroupId
            self.notebookParams = notebookParams
            self.outputNotebookURI = outputNotebookURI
            self.startTime = startTime
            self.status = status
            self.tags = tags
        }
    }

}
