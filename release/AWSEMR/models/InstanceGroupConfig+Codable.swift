// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension EmrClientTypes.InstanceGroupConfig: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case autoScalingPolicy = "AutoScalingPolicy"
        case bidPrice = "BidPrice"
        case configurations = "Configurations"
        case customAmiId = "CustomAmiId"
        case ebsConfiguration = "EbsConfiguration"
        case instanceCount = "InstanceCount"
        case instanceRole = "InstanceRole"
        case instanceType = "InstanceType"
        case market = "Market"
        case name = "Name"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let autoScalingPolicy = self.autoScalingPolicy {
            try encodeContainer.encode(autoScalingPolicy, forKey: .autoScalingPolicy)
        }
        if let bidPrice = self.bidPrice {
            try encodeContainer.encode(bidPrice, forKey: .bidPrice)
        }
        if let configurations = configurations {
            var configurationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .configurations)
            for configurationlist0 in configurations {
                try configurationsContainer.encode(configurationlist0)
            }
        }
        if let customAmiId = self.customAmiId {
            try encodeContainer.encode(customAmiId, forKey: .customAmiId)
        }
        if let ebsConfiguration = self.ebsConfiguration {
            try encodeContainer.encode(ebsConfiguration, forKey: .ebsConfiguration)
        }
        if let instanceCount = self.instanceCount {
            try encodeContainer.encode(instanceCount, forKey: .instanceCount)
        }
        if let instanceRole = self.instanceRole {
            try encodeContainer.encode(instanceRole.rawValue, forKey: .instanceRole)
        }
        if let instanceType = self.instanceType {
            try encodeContainer.encode(instanceType, forKey: .instanceType)
        }
        if let market = self.market {
            try encodeContainer.encode(market.rawValue, forKey: .market)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let marketDecoded = try containerValues.decodeIfPresent(EmrClientTypes.MarketType.self, forKey: .market)
        market = marketDecoded
        let instanceRoleDecoded = try containerValues.decodeIfPresent(EmrClientTypes.InstanceRoleType.self, forKey: .instanceRole)
        instanceRole = instanceRoleDecoded
        let bidPriceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .bidPrice)
        bidPrice = bidPriceDecoded
        let instanceTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceType)
        instanceType = instanceTypeDecoded
        let instanceCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .instanceCount)
        instanceCount = instanceCountDecoded
        let configurationsContainer = try containerValues.decodeIfPresent([EmrClientTypes.Configuration?].self, forKey: .configurations)
        var configurationsDecoded0:[EmrClientTypes.Configuration]? = nil
        if let configurationsContainer = configurationsContainer {
            configurationsDecoded0 = [EmrClientTypes.Configuration]()
            for structure0 in configurationsContainer {
                if let structure0 = structure0 {
                    configurationsDecoded0?.append(structure0)
                }
            }
        }
        configurations = configurationsDecoded0
        let ebsConfigurationDecoded = try containerValues.decodeIfPresent(EmrClientTypes.EbsConfiguration.self, forKey: .ebsConfiguration)
        ebsConfiguration = ebsConfigurationDecoded
        let autoScalingPolicyDecoded = try containerValues.decodeIfPresent(EmrClientTypes.AutoScalingPolicy.self, forKey: .autoScalingPolicy)
        autoScalingPolicy = autoScalingPolicyDecoded
        let customAmiIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .customAmiId)
        customAmiId = customAmiIdDecoded
    }
}
