// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListStepsInputBody: Swift.Equatable {
    let clusterId: Swift.String?
    let stepStates: [EmrClientTypes.StepState]?
    let stepIds: [Swift.String]?
    let marker: Swift.String?
}

extension ListStepsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterId = "ClusterId"
        case marker = "Marker"
        case stepIds = "StepIds"
        case stepStates = "StepStates"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clusterIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterId)
        clusterId = clusterIdDecoded
        let stepStatesContainer = try containerValues.decodeIfPresent([EmrClientTypes.StepState?].self, forKey: .stepStates)
        var stepStatesDecoded0:[EmrClientTypes.StepState]? = nil
        if let stepStatesContainer = stepStatesContainer {
            stepStatesDecoded0 = [EmrClientTypes.StepState]()
            for string0 in stepStatesContainer {
                if let string0 = string0 {
                    stepStatesDecoded0?.append(string0)
                }
            }
        }
        stepStates = stepStatesDecoded0
        let stepIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .stepIds)
        var stepIdsDecoded0:[Swift.String]? = nil
        if let stepIdsContainer = stepIdsContainer {
            stepIdsDecoded0 = [Swift.String]()
            for string0 in stepIdsContainer {
                if let string0 = string0 {
                    stepIdsDecoded0?.append(string0)
                }
            }
        }
        stepIds = stepIdsDecoded0
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
    }
}
