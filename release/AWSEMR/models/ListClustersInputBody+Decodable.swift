// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListClustersInputBody: Swift.Equatable {
    let createdAfter: ClientRuntime.Date?
    let createdBefore: ClientRuntime.Date?
    let clusterStates: [EmrClientTypes.ClusterState]?
    let marker: Swift.String?
}

extension ListClustersInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterStates = "ClusterStates"
        case createdAfter = "CreatedAfter"
        case createdBefore = "CreatedBefore"
        case marker = "Marker"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let createdAfterDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdAfter)
        createdAfter = createdAfterDecoded
        let createdBeforeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdBefore)
        createdBefore = createdBeforeDecoded
        let clusterStatesContainer = try containerValues.decodeIfPresent([EmrClientTypes.ClusterState?].self, forKey: .clusterStates)
        var clusterStatesDecoded0:[EmrClientTypes.ClusterState]? = nil
        if let clusterStatesContainer = clusterStatesContainer {
            clusterStatesDecoded0 = [EmrClientTypes.ClusterState]()
            for string0 in clusterStatesContainer {
                if let string0 = string0 {
                    clusterStatesDecoded0?.append(string0)
                }
            }
        }
        clusterStates = clusterStatesDecoded0
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
    }
}
