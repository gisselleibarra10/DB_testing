// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension EmrClientTypes {
    /// The detailed description of the cluster.
    public struct Cluster: Swift.Equatable {
        /// The applications installed on this cluster.
        public var applications: [EmrClientTypes.Application]?
        /// An IAM role for automatic scaling policies. The default role is EMR_AutoScaling_DefaultRole. The IAM role provides permissions that the automatic scaling feature requires to launch and terminate EC2 instances in an instance group.
        public var autoScalingRole: Swift.String?
        /// Specifies whether the cluster should terminate after completing all steps.
        public var autoTerminate: Swift.Bool
        /// The Amazon Resource Name of the cluster.
        public var clusterArn: Swift.String?
        /// Applies only to Amazon EMR releases 4.x and later. The list of Configurations supplied to the EMR cluster.
        public var configurations: [EmrClientTypes.Configuration]?
        /// Available only in Amazon EMR version 5.7.0 and later. The ID of a custom Amazon EBS-backed Linux AMI if the cluster uses a custom AMI.
        public var customAmiId: Swift.String?
        /// The size, in GiB, of the Amazon EBS root device volume of the Linux AMI that is used for each EC2 instance. Available in Amazon EMR version 4.x and later.
        public var ebsRootVolumeSize: Swift.Int?
        /// Provides information about the EC2 instances in a cluster grouped by category. For example, key name, subnet ID, IAM instance profile, and so on.
        public var ec2InstanceAttributes: EmrClientTypes.Ec2InstanceAttributes?
        /// The unique identifier for the cluster.
        public var id: Swift.String?
        /// The instance fleet configuration is available only in Amazon EMR versions 4.8.0 and later, excluding 5.0.x versions. The instance group configuration of the cluster. A value of INSTANCE_GROUP indicates a uniform instance group configuration. A value of INSTANCE_FLEET indicates an instance fleets configuration.
        public var instanceCollectionType: EmrClientTypes.InstanceCollectionType?
        /// Attributes for Kerberos configuration when Kerberos authentication is enabled using a security configuration. For more information see [Use Kerberos Authentication](https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-kerberos.html) in the Amazon EMR Management Guide.
        public var kerberosAttributes: EmrClientTypes.KerberosAttributes?
        /// The KMS key used for encrypting log files. This attribute is only available with EMR version 5.30.0 and later, excluding EMR 6.0.0.
        public var logEncryptionKmsKeyId: Swift.String?
        /// The path to the Amazon S3 location where logs for this cluster are stored.
        public var logUri: Swift.String?
        /// The DNS name of the master node. If the cluster is on a private subnet, this is the private DNS name. On a public subnet, this is the public DNS name.
        public var masterPublicDnsName: Swift.String?
        /// The name of the cluster.
        public var name: Swift.String?
        /// An approximation of the cost of the cluster, represented in m1.small/hours. This value is incremented one time for every hour an m1.small instance runs. Larger instances are weighted more, so an EC2 instance that is roughly four times more expensive would result in the normalized instance hours being incremented by four. This result is only an approximation and does not reflect the actual billing rate.
        public var normalizedInstanceHours: Swift.Int?
        /// The Amazon Linux release specified in a cluster launch RunJobFlow request. If no Amazon Linux release was specified, the default Amazon Linux release is shown in the response.
        public var oSReleaseLabel: Swift.String?
        /// The Amazon Resource Name (ARN) of the Outpost where the cluster is launched.
        public var outpostArn: Swift.String?
        /// Placement group configured for an Amazon EMR cluster.
        public var placementGroups: [EmrClientTypes.PlacementGroupConfig]?
        /// The Amazon EMR release label, which determines the version of open-source application packages installed on the cluster. Release labels are in the form emr-x.x.x, where x.x.x is an Amazon EMR release version such as emr-5.14.0. For more information about Amazon EMR release versions and included application versions and features, see [https://docs.aws.amazon.com/emr/latest/ReleaseGuide/](https://docs.aws.amazon.com/emr/latest/ReleaseGuide/). The release label applies only to Amazon EMR releases version 4.0 and later. Earlier versions use AmiVersion.
        public var releaseLabel: Swift.String?
        /// Applies only when CustomAmiID is used. Specifies the type of updates that are applied from the Amazon Linux AMI package repositories when an instance boots using the AMI.
        public var repoUpgradeOnBoot: EmrClientTypes.RepoUpgradeOnBoot?
        /// The AMI version requested for this cluster.
        public var requestedAmiVersion: Swift.String?
        /// The AMI version running on this cluster.
        public var runningAmiVersion: Swift.String?
        /// The way that individual Amazon EC2 instances terminate when an automatic scale-in activity occurs or an instance group is resized. TERMINATE_AT_INSTANCE_HOUR indicates that Amazon EMR terminates nodes at the instance-hour boundary, regardless of when the request to terminate the instance was submitted. This option is only available with Amazon EMR 5.1.0 and later and is the default for clusters created using that version. TERMINATE_AT_TASK_COMPLETION indicates that Amazon EMR adds nodes to a deny list and drains tasks from nodes before terminating the Amazon EC2 instances, regardless of the instance-hour boundary. With either behavior, Amazon EMR removes the least active nodes first and blocks instance termination if it could lead to HDFS corruption. TERMINATE_AT_TASK_COMPLETION is available only in Amazon EMR version 4.1.0 and later, and is the default for versions of Amazon EMR earlier than 5.1.0.
        public var scaleDownBehavior: EmrClientTypes.ScaleDownBehavior?
        /// The name of the security configuration applied to the cluster.
        public var securityConfiguration: Swift.String?
        /// The IAM role that Amazon EMR assumes in order to access Amazon Web Services resources on your behalf.
        public var serviceRole: Swift.String?
        /// The current status details about the cluster.
        public var status: EmrClientTypes.ClusterStatus?
        /// Specifies the number of steps that can be executed concurrently.
        public var stepConcurrencyLevel: Swift.Int?
        /// A list of tags associated with a cluster.
        public var tags: [EmrClientTypes.Tag]?
        /// Indicates whether Amazon EMR will lock the cluster to prevent the EC2 instances from being terminated by an API call or user intervention, or in the event of a cluster error.
        public var terminationProtected: Swift.Bool
        /// Indicates whether the cluster is visible to IAM principals in the Amazon Web Services account associated with the cluster. When true, IAM principals in the Amazon Web Services account can perform EMR cluster actions on the cluster that their IAM policies allow. When false, only the IAM principal that created the cluster and the Amazon Web Services account root user can perform EMR actions, regardless of IAM permissions policies attached to other IAM principals. The default value is true if a value is not provided when creating a cluster using the EMR API [RunJobFlow] command, the CLI [create-cluster](https://docs.aws.amazon.com/cli/latest/reference/emr/create-cluster.html) command, or the Amazon Web Services Management Console.
        public var visibleToAllUsers: Swift.Bool

        public init (
            applications: [EmrClientTypes.Application]? = nil,
            autoScalingRole: Swift.String? = nil,
            autoTerminate: Swift.Bool = false,
            clusterArn: Swift.String? = nil,
            configurations: [EmrClientTypes.Configuration]? = nil,
            customAmiId: Swift.String? = nil,
            ebsRootVolumeSize: Swift.Int? = nil,
            ec2InstanceAttributes: EmrClientTypes.Ec2InstanceAttributes? = nil,
            id: Swift.String? = nil,
            instanceCollectionType: EmrClientTypes.InstanceCollectionType? = nil,
            kerberosAttributes: EmrClientTypes.KerberosAttributes? = nil,
            logEncryptionKmsKeyId: Swift.String? = nil,
            logUri: Swift.String? = nil,
            masterPublicDnsName: Swift.String? = nil,
            name: Swift.String? = nil,
            normalizedInstanceHours: Swift.Int? = nil,
            oSReleaseLabel: Swift.String? = nil,
            outpostArn: Swift.String? = nil,
            placementGroups: [EmrClientTypes.PlacementGroupConfig]? = nil,
            releaseLabel: Swift.String? = nil,
            repoUpgradeOnBoot: EmrClientTypes.RepoUpgradeOnBoot? = nil,
            requestedAmiVersion: Swift.String? = nil,
            runningAmiVersion: Swift.String? = nil,
            scaleDownBehavior: EmrClientTypes.ScaleDownBehavior? = nil,
            securityConfiguration: Swift.String? = nil,
            serviceRole: Swift.String? = nil,
            status: EmrClientTypes.ClusterStatus? = nil,
            stepConcurrencyLevel: Swift.Int? = nil,
            tags: [EmrClientTypes.Tag]? = nil,
            terminationProtected: Swift.Bool = false,
            visibleToAllUsers: Swift.Bool = false
        )
        {
            self.applications = applications
            self.autoScalingRole = autoScalingRole
            self.autoTerminate = autoTerminate
            self.clusterArn = clusterArn
            self.configurations = configurations
            self.customAmiId = customAmiId
            self.ebsRootVolumeSize = ebsRootVolumeSize
            self.ec2InstanceAttributes = ec2InstanceAttributes
            self.id = id
            self.instanceCollectionType = instanceCollectionType
            self.kerberosAttributes = kerberosAttributes
            self.logEncryptionKmsKeyId = logEncryptionKmsKeyId
            self.logUri = logUri
            self.masterPublicDnsName = masterPublicDnsName
            self.name = name
            self.normalizedInstanceHours = normalizedInstanceHours
            self.oSReleaseLabel = oSReleaseLabel
            self.outpostArn = outpostArn
            self.placementGroups = placementGroups
            self.releaseLabel = releaseLabel
            self.repoUpgradeOnBoot = repoUpgradeOnBoot
            self.requestedAmiVersion = requestedAmiVersion
            self.runningAmiVersion = runningAmiVersion
            self.scaleDownBehavior = scaleDownBehavior
            self.securityConfiguration = securityConfiguration
            self.serviceRole = serviceRole
            self.status = status
            self.stepConcurrencyLevel = stepConcurrencyLevel
            self.tags = tags
            self.terminationProtected = terminationProtected
            self.visibleToAllUsers = visibleToAllUsers
        }
    }

}
