// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension EmrClientTypes.Cluster: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applications = "Applications"
        case autoScalingRole = "AutoScalingRole"
        case autoTerminate = "AutoTerminate"
        case clusterArn = "ClusterArn"
        case configurations = "Configurations"
        case customAmiId = "CustomAmiId"
        case ebsRootVolumeSize = "EbsRootVolumeSize"
        case ec2InstanceAttributes = "Ec2InstanceAttributes"
        case id = "Id"
        case instanceCollectionType = "InstanceCollectionType"
        case kerberosAttributes = "KerberosAttributes"
        case logEncryptionKmsKeyId = "LogEncryptionKmsKeyId"
        case logUri = "LogUri"
        case masterPublicDnsName = "MasterPublicDnsName"
        case name = "Name"
        case normalizedInstanceHours = "NormalizedInstanceHours"
        case oSReleaseLabel = "OSReleaseLabel"
        case outpostArn = "OutpostArn"
        case placementGroups = "PlacementGroups"
        case releaseLabel = "ReleaseLabel"
        case repoUpgradeOnBoot = "RepoUpgradeOnBoot"
        case requestedAmiVersion = "RequestedAmiVersion"
        case runningAmiVersion = "RunningAmiVersion"
        case scaleDownBehavior = "ScaleDownBehavior"
        case securityConfiguration = "SecurityConfiguration"
        case serviceRole = "ServiceRole"
        case status = "Status"
        case stepConcurrencyLevel = "StepConcurrencyLevel"
        case tags = "Tags"
        case terminationProtected = "TerminationProtected"
        case visibleToAllUsers = "VisibleToAllUsers"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let applications = applications {
            var applicationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .applications)
            for applicationlist0 in applications {
                try applicationsContainer.encode(applicationlist0)
            }
        }
        if let autoScalingRole = self.autoScalingRole {
            try encodeContainer.encode(autoScalingRole, forKey: .autoScalingRole)
        }
        if autoTerminate != false {
            try encodeContainer.encode(autoTerminate, forKey: .autoTerminate)
        }
        if let clusterArn = self.clusterArn {
            try encodeContainer.encode(clusterArn, forKey: .clusterArn)
        }
        if let configurations = configurations {
            var configurationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .configurations)
            for configurationlist0 in configurations {
                try configurationsContainer.encode(configurationlist0)
            }
        }
        if let customAmiId = self.customAmiId {
            try encodeContainer.encode(customAmiId, forKey: .customAmiId)
        }
        if let ebsRootVolumeSize = self.ebsRootVolumeSize {
            try encodeContainer.encode(ebsRootVolumeSize, forKey: .ebsRootVolumeSize)
        }
        if let ec2InstanceAttributes = self.ec2InstanceAttributes {
            try encodeContainer.encode(ec2InstanceAttributes, forKey: .ec2InstanceAttributes)
        }
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let instanceCollectionType = self.instanceCollectionType {
            try encodeContainer.encode(instanceCollectionType.rawValue, forKey: .instanceCollectionType)
        }
        if let kerberosAttributes = self.kerberosAttributes {
            try encodeContainer.encode(kerberosAttributes, forKey: .kerberosAttributes)
        }
        if let logEncryptionKmsKeyId = self.logEncryptionKmsKeyId {
            try encodeContainer.encode(logEncryptionKmsKeyId, forKey: .logEncryptionKmsKeyId)
        }
        if let logUri = self.logUri {
            try encodeContainer.encode(logUri, forKey: .logUri)
        }
        if let masterPublicDnsName = self.masterPublicDnsName {
            try encodeContainer.encode(masterPublicDnsName, forKey: .masterPublicDnsName)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let normalizedInstanceHours = self.normalizedInstanceHours {
            try encodeContainer.encode(normalizedInstanceHours, forKey: .normalizedInstanceHours)
        }
        if let oSReleaseLabel = self.oSReleaseLabel {
            try encodeContainer.encode(oSReleaseLabel, forKey: .oSReleaseLabel)
        }
        if let outpostArn = self.outpostArn {
            try encodeContainer.encode(outpostArn, forKey: .outpostArn)
        }
        if let placementGroups = placementGroups {
            var placementGroupsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .placementGroups)
            for placementgroupconfiglist0 in placementGroups {
                try placementGroupsContainer.encode(placementgroupconfiglist0)
            }
        }
        if let releaseLabel = self.releaseLabel {
            try encodeContainer.encode(releaseLabel, forKey: .releaseLabel)
        }
        if let repoUpgradeOnBoot = self.repoUpgradeOnBoot {
            try encodeContainer.encode(repoUpgradeOnBoot.rawValue, forKey: .repoUpgradeOnBoot)
        }
        if let requestedAmiVersion = self.requestedAmiVersion {
            try encodeContainer.encode(requestedAmiVersion, forKey: .requestedAmiVersion)
        }
        if let runningAmiVersion = self.runningAmiVersion {
            try encodeContainer.encode(runningAmiVersion, forKey: .runningAmiVersion)
        }
        if let scaleDownBehavior = self.scaleDownBehavior {
            try encodeContainer.encode(scaleDownBehavior.rawValue, forKey: .scaleDownBehavior)
        }
        if let securityConfiguration = self.securityConfiguration {
            try encodeContainer.encode(securityConfiguration, forKey: .securityConfiguration)
        }
        if let serviceRole = self.serviceRole {
            try encodeContainer.encode(serviceRole, forKey: .serviceRole)
        }
        if let status = self.status {
            try encodeContainer.encode(status, forKey: .status)
        }
        if let stepConcurrencyLevel = self.stepConcurrencyLevel {
            try encodeContainer.encode(stepConcurrencyLevel, forKey: .stepConcurrencyLevel)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
        if terminationProtected != false {
            try encodeContainer.encode(terminationProtected, forKey: .terminationProtected)
        }
        if visibleToAllUsers != false {
            try encodeContainer.encode(visibleToAllUsers, forKey: .visibleToAllUsers)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let statusDecoded = try containerValues.decodeIfPresent(EmrClientTypes.ClusterStatus.self, forKey: .status)
        status = statusDecoded
        let ec2InstanceAttributesDecoded = try containerValues.decodeIfPresent(EmrClientTypes.Ec2InstanceAttributes.self, forKey: .ec2InstanceAttributes)
        ec2InstanceAttributes = ec2InstanceAttributesDecoded
        let instanceCollectionTypeDecoded = try containerValues.decodeIfPresent(EmrClientTypes.InstanceCollectionType.self, forKey: .instanceCollectionType)
        instanceCollectionType = instanceCollectionTypeDecoded
        let logUriDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logUri)
        logUri = logUriDecoded
        let logEncryptionKmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logEncryptionKmsKeyId)
        logEncryptionKmsKeyId = logEncryptionKmsKeyIdDecoded
        let requestedAmiVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .requestedAmiVersion)
        requestedAmiVersion = requestedAmiVersionDecoded
        let runningAmiVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .runningAmiVersion)
        runningAmiVersion = runningAmiVersionDecoded
        let releaseLabelDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .releaseLabel)
        releaseLabel = releaseLabelDecoded
        let autoTerminateDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .autoTerminate) ?? false
        autoTerminate = autoTerminateDecoded
        let terminationProtectedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .terminationProtected) ?? false
        terminationProtected = terminationProtectedDecoded
        let visibleToAllUsersDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .visibleToAllUsers) ?? false
        visibleToAllUsers = visibleToAllUsersDecoded
        let applicationsContainer = try containerValues.decodeIfPresent([EmrClientTypes.Application?].self, forKey: .applications)
        var applicationsDecoded0:[EmrClientTypes.Application]? = nil
        if let applicationsContainer = applicationsContainer {
            applicationsDecoded0 = [EmrClientTypes.Application]()
            for structure0 in applicationsContainer {
                if let structure0 = structure0 {
                    applicationsDecoded0?.append(structure0)
                }
            }
        }
        applications = applicationsDecoded0
        let tagsContainer = try containerValues.decodeIfPresent([EmrClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[EmrClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [EmrClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let serviceRoleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serviceRole)
        serviceRole = serviceRoleDecoded
        let normalizedInstanceHoursDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .normalizedInstanceHours)
        normalizedInstanceHours = normalizedInstanceHoursDecoded
        let masterPublicDnsNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .masterPublicDnsName)
        masterPublicDnsName = masterPublicDnsNameDecoded
        let configurationsContainer = try containerValues.decodeIfPresent([EmrClientTypes.Configuration?].self, forKey: .configurations)
        var configurationsDecoded0:[EmrClientTypes.Configuration]? = nil
        if let configurationsContainer = configurationsContainer {
            configurationsDecoded0 = [EmrClientTypes.Configuration]()
            for structure0 in configurationsContainer {
                if let structure0 = structure0 {
                    configurationsDecoded0?.append(structure0)
                }
            }
        }
        configurations = configurationsDecoded0
        let securityConfigurationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .securityConfiguration)
        securityConfiguration = securityConfigurationDecoded
        let autoScalingRoleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .autoScalingRole)
        autoScalingRole = autoScalingRoleDecoded
        let scaleDownBehaviorDecoded = try containerValues.decodeIfPresent(EmrClientTypes.ScaleDownBehavior.self, forKey: .scaleDownBehavior)
        scaleDownBehavior = scaleDownBehaviorDecoded
        let customAmiIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .customAmiId)
        customAmiId = customAmiIdDecoded
        let ebsRootVolumeSizeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .ebsRootVolumeSize)
        ebsRootVolumeSize = ebsRootVolumeSizeDecoded
        let repoUpgradeOnBootDecoded = try containerValues.decodeIfPresent(EmrClientTypes.RepoUpgradeOnBoot.self, forKey: .repoUpgradeOnBoot)
        repoUpgradeOnBoot = repoUpgradeOnBootDecoded
        let kerberosAttributesDecoded = try containerValues.decodeIfPresent(EmrClientTypes.KerberosAttributes.self, forKey: .kerberosAttributes)
        kerberosAttributes = kerberosAttributesDecoded
        let clusterArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterArn)
        clusterArn = clusterArnDecoded
        let outpostArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .outpostArn)
        outpostArn = outpostArnDecoded
        let stepConcurrencyLevelDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .stepConcurrencyLevel)
        stepConcurrencyLevel = stepConcurrencyLevelDecoded
        let placementGroupsContainer = try containerValues.decodeIfPresent([EmrClientTypes.PlacementGroupConfig?].self, forKey: .placementGroups)
        var placementGroupsDecoded0:[EmrClientTypes.PlacementGroupConfig]? = nil
        if let placementGroupsContainer = placementGroupsContainer {
            placementGroupsDecoded0 = [EmrClientTypes.PlacementGroupConfig]()
            for structure0 in placementGroupsContainer {
                if let structure0 = structure0 {
                    placementGroupsDecoded0?.append(structure0)
                }
            }
        }
        placementGroups = placementGroupsDecoded0
        let oSReleaseLabelDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .oSReleaseLabel)
        oSReleaseLabel = oSReleaseLabelDecoded
    }
}
