// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension StartNotebookExecutionInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case editorId = "EditorId"
        case executionEngine = "ExecutionEngine"
        case notebookExecutionName = "NotebookExecutionName"
        case notebookInstanceSecurityGroupId = "NotebookInstanceSecurityGroupId"
        case notebookParams = "NotebookParams"
        case relativePath = "RelativePath"
        case serviceRole = "ServiceRole"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let editorId = self.editorId {
            try encodeContainer.encode(editorId, forKey: .editorId)
        }
        if let executionEngine = self.executionEngine {
            try encodeContainer.encode(executionEngine, forKey: .executionEngine)
        }
        if let notebookExecutionName = self.notebookExecutionName {
            try encodeContainer.encode(notebookExecutionName, forKey: .notebookExecutionName)
        }
        if let notebookInstanceSecurityGroupId = self.notebookInstanceSecurityGroupId {
            try encodeContainer.encode(notebookInstanceSecurityGroupId, forKey: .notebookInstanceSecurityGroupId)
        }
        if let notebookParams = self.notebookParams {
            try encodeContainer.encode(notebookParams, forKey: .notebookParams)
        }
        if let relativePath = self.relativePath {
            try encodeContainer.encode(relativePath, forKey: .relativePath)
        }
        if let serviceRole = self.serviceRole {
            try encodeContainer.encode(serviceRole, forKey: .serviceRole)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }
}
