// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListInstancesInputBody: Swift.Equatable {
    let clusterId: Swift.String?
    let instanceGroupId: Swift.String?
    let instanceGroupTypes: [EmrClientTypes.InstanceGroupType]?
    let instanceFleetId: Swift.String?
    let instanceFleetType: EmrClientTypes.InstanceFleetType?
    let instanceStates: [EmrClientTypes.InstanceState]?
    let marker: Swift.String?
}

extension ListInstancesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterId = "ClusterId"
        case instanceFleetId = "InstanceFleetId"
        case instanceFleetType = "InstanceFleetType"
        case instanceGroupId = "InstanceGroupId"
        case instanceGroupTypes = "InstanceGroupTypes"
        case instanceStates = "InstanceStates"
        case marker = "Marker"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clusterIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterId)
        clusterId = clusterIdDecoded
        let instanceGroupIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceGroupId)
        instanceGroupId = instanceGroupIdDecoded
        let instanceGroupTypesContainer = try containerValues.decodeIfPresent([EmrClientTypes.InstanceGroupType?].self, forKey: .instanceGroupTypes)
        var instanceGroupTypesDecoded0:[EmrClientTypes.InstanceGroupType]? = nil
        if let instanceGroupTypesContainer = instanceGroupTypesContainer {
            instanceGroupTypesDecoded0 = [EmrClientTypes.InstanceGroupType]()
            for string0 in instanceGroupTypesContainer {
                if let string0 = string0 {
                    instanceGroupTypesDecoded0?.append(string0)
                }
            }
        }
        instanceGroupTypes = instanceGroupTypesDecoded0
        let instanceFleetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceFleetId)
        instanceFleetId = instanceFleetIdDecoded
        let instanceFleetTypeDecoded = try containerValues.decodeIfPresent(EmrClientTypes.InstanceFleetType.self, forKey: .instanceFleetType)
        instanceFleetType = instanceFleetTypeDecoded
        let instanceStatesContainer = try containerValues.decodeIfPresent([EmrClientTypes.InstanceState?].self, forKey: .instanceStates)
        var instanceStatesDecoded0:[EmrClientTypes.InstanceState]? = nil
        if let instanceStatesContainer = instanceStatesContainer {
            instanceStatesDecoded0 = [EmrClientTypes.InstanceState]()
            for string0 in instanceStatesContainer {
                if let string0 = string0 {
                    instanceStatesDecoded0?.append(string0)
                }
            }
        }
        instanceStates = instanceStatesDecoded0
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
    }
}
