// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension EmrClientTypes.SpotProvisioningSpecification: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case allocationStrategy = "AllocationStrategy"
        case blockDurationMinutes = "BlockDurationMinutes"
        case timeoutAction = "TimeoutAction"
        case timeoutDurationMinutes = "TimeoutDurationMinutes"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let allocationStrategy = self.allocationStrategy {
            try encodeContainer.encode(allocationStrategy.rawValue, forKey: .allocationStrategy)
        }
        if let blockDurationMinutes = self.blockDurationMinutes {
            try encodeContainer.encode(blockDurationMinutes, forKey: .blockDurationMinutes)
        }
        if let timeoutAction = self.timeoutAction {
            try encodeContainer.encode(timeoutAction.rawValue, forKey: .timeoutAction)
        }
        if let timeoutDurationMinutes = self.timeoutDurationMinutes {
            try encodeContainer.encode(timeoutDurationMinutes, forKey: .timeoutDurationMinutes)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let timeoutDurationMinutesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .timeoutDurationMinutes)
        timeoutDurationMinutes = timeoutDurationMinutesDecoded
        let timeoutActionDecoded = try containerValues.decodeIfPresent(EmrClientTypes.SpotProvisioningTimeoutAction.self, forKey: .timeoutAction)
        timeoutAction = timeoutActionDecoded
        let blockDurationMinutesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .blockDurationMinutes)
        blockDurationMinutes = blockDurationMinutesDecoded
        let allocationStrategyDecoded = try containerValues.decodeIfPresent(EmrClientTypes.SpotProvisioningAllocationStrategy.self, forKey: .allocationStrategy)
        allocationStrategy = allocationStrategyDecoded
    }
}
