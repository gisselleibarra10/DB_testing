// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct ListNotebookExecutionsInput: Swift.Equatable {
    /// The unique ID of the editor associated with the notebook execution.
    public var editorId: Swift.String?
    /// The beginning of time range filter for listing notebook executions. The default is the timestamp of 30 days ago.
    public var from: ClientRuntime.Date?
    /// The pagination token, returned by a previous ListNotebookExecutions call, that indicates the start of the list for this ListNotebookExecutions call.
    public var marker: Swift.String?
    /// The status filter for listing notebook executions.
    ///
    /// * START_PENDING indicates that the cluster has received the execution request but execution has not begun.
    ///
    /// * STARTING indicates that the execution is starting on the cluster.
    ///
    /// * RUNNING indicates that the execution is being processed by the cluster.
    ///
    /// * FINISHING indicates that execution processing is in the final stages.
    ///
    /// * FINISHED indicates that the execution has completed without error.
    ///
    /// * FAILING indicates that the execution is failing and will not finish successfully.
    ///
    /// * FAILED indicates that the execution failed.
    ///
    /// * STOP_PENDING indicates that the cluster has received a StopNotebookExecution request and the stop is pending.
    ///
    /// * STOPPING indicates that the cluster is in the process of stopping the execution as a result of a StopNotebookExecution request.
    ///
    /// * STOPPED indicates that the execution stopped because of a StopNotebookExecution request.
    public var status: EmrClientTypes.NotebookExecutionStatus?
    /// The end of time range filter for listing notebook executions. The default is the current timestamp.
    public var to: ClientRuntime.Date?

    public init (
        editorId: Swift.String? = nil,
        from: ClientRuntime.Date? = nil,
        marker: Swift.String? = nil,
        status: EmrClientTypes.NotebookExecutionStatus? = nil,
        to: ClientRuntime.Date? = nil
    )
    {
        self.editorId = editorId
        self.from = from
        self.marker = marker
        self.status = status
        self.to = to
    }
}
