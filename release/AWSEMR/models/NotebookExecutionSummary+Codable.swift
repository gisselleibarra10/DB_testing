// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension EmrClientTypes.NotebookExecutionSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case editorId = "EditorId"
        case endTime = "EndTime"
        case notebookExecutionId = "NotebookExecutionId"
        case notebookExecutionName = "NotebookExecutionName"
        case startTime = "StartTime"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let editorId = self.editorId {
            try encodeContainer.encode(editorId, forKey: .editorId)
        }
        if let endTime = self.endTime {
            try encodeContainer.encode(endTime.timeIntervalSince1970, forKey: .endTime)
        }
        if let notebookExecutionId = self.notebookExecutionId {
            try encodeContainer.encode(notebookExecutionId, forKey: .notebookExecutionId)
        }
        if let notebookExecutionName = self.notebookExecutionName {
            try encodeContainer.encode(notebookExecutionName, forKey: .notebookExecutionName)
        }
        if let startTime = self.startTime {
            try encodeContainer.encode(startTime.timeIntervalSince1970, forKey: .startTime)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let notebookExecutionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .notebookExecutionId)
        notebookExecutionId = notebookExecutionIdDecoded
        let editorIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .editorId)
        editorId = editorIdDecoded
        let notebookExecutionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .notebookExecutionName)
        notebookExecutionName = notebookExecutionNameDecoded
        let statusDecoded = try containerValues.decodeIfPresent(EmrClientTypes.NotebookExecutionStatus.self, forKey: .status)
        status = statusDecoded
        let startTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .startTime)
        startTime = startTimeDecoded
        let endTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .endTime)
        endTime = endTimeDecoded
    }
}
