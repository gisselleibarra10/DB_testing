// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension EmrClientTypes {
    /// The definition of a CloudWatch metric alarm, which determines when an automatic scaling activity is triggered. When the defined alarm conditions are satisfied, scaling activity begins.
    public struct CloudWatchAlarmDefinition: Swift.Equatable {
        /// Determines how the metric specified by MetricName is compared to the value specified by Threshold.
        /// This member is required.
        public var comparisonOperator: EmrClientTypes.ComparisonOperator?
        /// A CloudWatch metric dimension.
        public var dimensions: [EmrClientTypes.MetricDimension]?
        /// The number of periods, in five-minute increments, during which the alarm condition must exist before the alarm triggers automatic scaling activity. The default value is 1.
        public var evaluationPeriods: Swift.Int?
        /// The name of the CloudWatch metric that is watched to determine an alarm condition.
        /// This member is required.
        public var metricName: Swift.String?
        /// The namespace for the CloudWatch metric. The default is AWS/ElasticMapReduce.
        public var namespace: Swift.String?
        /// The period, in seconds, over which the statistic is applied. EMR CloudWatch metrics are emitted every five minutes (300 seconds), so if an EMR CloudWatch metric is specified, specify 300.
        /// This member is required.
        public var period: Swift.Int?
        /// The statistic to apply to the metric associated with the alarm. The default is AVERAGE.
        public var statistic: EmrClientTypes.Statistic?
        /// The value against which the specified statistic is compared.
        /// This member is required.
        public var threshold: Swift.Double?
        /// The unit of measure associated with the CloudWatch metric being watched. The value specified for Unit must correspond to the units specified in the CloudWatch metric.
        public var unit: EmrClientTypes.Unit?

        public init (
            comparisonOperator: EmrClientTypes.ComparisonOperator? = nil,
            dimensions: [EmrClientTypes.MetricDimension]? = nil,
            evaluationPeriods: Swift.Int? = nil,
            metricName: Swift.String? = nil,
            namespace: Swift.String? = nil,
            period: Swift.Int? = nil,
            statistic: EmrClientTypes.Statistic? = nil,
            threshold: Swift.Double? = nil,
            unit: EmrClientTypes.Unit? = nil
        )
        {
            self.comparisonOperator = comparisonOperator
            self.dimensions = dimensions
            self.evaluationPeriods = evaluationPeriods
            self.metricName = metricName
            self.namespace = namespace
            self.period = period
            self.statistic = statistic
            self.threshold = threshold
            self.unit = unit
        }
    }

}
