// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension EmrClientTypes.HadoopStepConfig: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case args = "Args"
        case jar = "Jar"
        case mainClass = "MainClass"
        case properties = "Properties"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let args = args {
            var argsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .args)
            for stringlist0 in args {
                try argsContainer.encode(stringlist0)
            }
        }
        if let jar = self.jar {
            try encodeContainer.encode(jar, forKey: .jar)
        }
        if let mainClass = self.mainClass {
            try encodeContainer.encode(mainClass, forKey: .mainClass)
        }
        if let properties = properties {
            var propertiesContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .properties)
            for (dictKey0, stringmap0) in properties {
                try propertiesContainer.encode(stringmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jarDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jar)
        jar = jarDecoded
        let propertiesContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .properties)
        var propertiesDecoded0: [Swift.String:Swift.String]? = nil
        if let propertiesContainer = propertiesContainer {
            propertiesDecoded0 = [Swift.String:Swift.String]()
            for (key0, string0) in propertiesContainer {
                if let string0 = string0 {
                    propertiesDecoded0?[key0] = string0
                }
            }
        }
        properties = propertiesDecoded0
        let mainClassDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .mainClass)
        mainClass = mainClassDecoded
        let argsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .args)
        var argsDecoded0:[Swift.String]? = nil
        if let argsContainer = argsContainer {
            argsDecoded0 = [Swift.String]()
            for string0 in argsContainer {
                if let string0 = string0 {
                    argsDecoded0?.append(string0)
                }
            }
        }
        args = argsDecoded0
    }
}
