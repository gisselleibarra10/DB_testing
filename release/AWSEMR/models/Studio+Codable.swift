// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension EmrClientTypes.Studio: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case authMode = "AuthMode"
        case creationTime = "CreationTime"
        case defaultS3Location = "DefaultS3Location"
        case description = "Description"
        case engineSecurityGroupId = "EngineSecurityGroupId"
        case idpAuthUrl = "IdpAuthUrl"
        case idpRelayStateParameterName = "IdpRelayStateParameterName"
        case name = "Name"
        case serviceRole = "ServiceRole"
        case studioArn = "StudioArn"
        case studioId = "StudioId"
        case subnetIds = "SubnetIds"
        case tags = "Tags"
        case url = "Url"
        case userRole = "UserRole"
        case vpcId = "VpcId"
        case workspaceSecurityGroupId = "WorkspaceSecurityGroupId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let authMode = self.authMode {
            try encodeContainer.encode(authMode.rawValue, forKey: .authMode)
        }
        if let creationTime = self.creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let defaultS3Location = self.defaultS3Location {
            try encodeContainer.encode(defaultS3Location, forKey: .defaultS3Location)
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let engineSecurityGroupId = self.engineSecurityGroupId {
            try encodeContainer.encode(engineSecurityGroupId, forKey: .engineSecurityGroupId)
        }
        if let idpAuthUrl = self.idpAuthUrl {
            try encodeContainer.encode(idpAuthUrl, forKey: .idpAuthUrl)
        }
        if let idpRelayStateParameterName = self.idpRelayStateParameterName {
            try encodeContainer.encode(idpRelayStateParameterName, forKey: .idpRelayStateParameterName)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let serviceRole = self.serviceRole {
            try encodeContainer.encode(serviceRole, forKey: .serviceRole)
        }
        if let studioArn = self.studioArn {
            try encodeContainer.encode(studioArn, forKey: .studioArn)
        }
        if let studioId = self.studioId {
            try encodeContainer.encode(studioId, forKey: .studioId)
        }
        if let subnetIds = subnetIds {
            var subnetIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .subnetIds)
            for subnetidlist0 in subnetIds {
                try subnetIdsContainer.encode(subnetidlist0)
            }
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
        if let url = self.url {
            try encodeContainer.encode(url, forKey: .url)
        }
        if let userRole = self.userRole {
            try encodeContainer.encode(userRole, forKey: .userRole)
        }
        if let vpcId = self.vpcId {
            try encodeContainer.encode(vpcId, forKey: .vpcId)
        }
        if let workspaceSecurityGroupId = self.workspaceSecurityGroupId {
            try encodeContainer.encode(workspaceSecurityGroupId, forKey: .workspaceSecurityGroupId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let studioIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .studioId)
        studioId = studioIdDecoded
        let studioArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .studioArn)
        studioArn = studioArnDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let authModeDecoded = try containerValues.decodeIfPresent(EmrClientTypes.AuthMode.self, forKey: .authMode)
        authMode = authModeDecoded
        let vpcIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vpcId)
        vpcId = vpcIdDecoded
        let subnetIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .subnetIds)
        var subnetIdsDecoded0:[Swift.String]? = nil
        if let subnetIdsContainer = subnetIdsContainer {
            subnetIdsDecoded0 = [Swift.String]()
            for string0 in subnetIdsContainer {
                if let string0 = string0 {
                    subnetIdsDecoded0?.append(string0)
                }
            }
        }
        subnetIds = subnetIdsDecoded0
        let serviceRoleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serviceRole)
        serviceRole = serviceRoleDecoded
        let userRoleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userRole)
        userRole = userRoleDecoded
        let workspaceSecurityGroupIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .workspaceSecurityGroupId)
        workspaceSecurityGroupId = workspaceSecurityGroupIdDecoded
        let engineSecurityGroupIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .engineSecurityGroupId)
        engineSecurityGroupId = engineSecurityGroupIdDecoded
        let urlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .url)
        url = urlDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let defaultS3LocationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .defaultS3Location)
        defaultS3Location = defaultS3LocationDecoded
        let idpAuthUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .idpAuthUrl)
        idpAuthUrl = idpAuthUrlDecoded
        let idpRelayStateParameterNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .idpRelayStateParameterName)
        idpRelayStateParameterName = idpRelayStateParameterNameDecoded
        let tagsContainer = try containerValues.decodeIfPresent([EmrClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[EmrClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [EmrClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}
