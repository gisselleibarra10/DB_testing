// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension EmrClientTypes {
    /// Details for a notebook execution. The details include information such as the unique ID and status of the notebook execution.
    public struct NotebookExecutionSummary: Swift.Equatable {
        /// The unique identifier of the editor associated with the notebook execution.
        public var editorId: Swift.String?
        /// The timestamp when notebook execution started.
        public var endTime: ClientRuntime.Date?
        /// The unique identifier of the notebook execution.
        public var notebookExecutionId: Swift.String?
        /// The name of the notebook execution.
        public var notebookExecutionName: Swift.String?
        /// The timestamp when notebook execution started.
        public var startTime: ClientRuntime.Date?
        /// The status of the notebook execution.
        ///
        /// * START_PENDING indicates that the cluster has received the execution request but execution has not begun.
        ///
        /// * STARTING indicates that the execution is starting on the cluster.
        ///
        /// * RUNNING indicates that the execution is being processed by the cluster.
        ///
        /// * FINISHING indicates that execution processing is in the final stages.
        ///
        /// * FINISHED indicates that the execution has completed without error.
        ///
        /// * FAILING indicates that the execution is failing and will not finish successfully.
        ///
        /// * FAILED indicates that the execution failed.
        ///
        /// * STOP_PENDING indicates that the cluster has received a StopNotebookExecution request and the stop is pending.
        ///
        /// * STOPPING indicates that the cluster is in the process of stopping the execution as a result of a StopNotebookExecution request.
        ///
        /// * STOPPED indicates that the execution stopped because of a StopNotebookExecution request.
        public var status: EmrClientTypes.NotebookExecutionStatus?

        public init (
            editorId: Swift.String? = nil,
            endTime: ClientRuntime.Date? = nil,
            notebookExecutionId: Swift.String? = nil,
            notebookExecutionName: Swift.String? = nil,
            startTime: ClientRuntime.Date? = nil,
            status: EmrClientTypes.NotebookExecutionStatus? = nil
        )
        {
            self.editorId = editorId
            self.endTime = endTime
            self.notebookExecutionId = notebookExecutionId
            self.notebookExecutionName = notebookExecutionName
            self.startTime = startTime
            self.status = status
        }
    }

}
