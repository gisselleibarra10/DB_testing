// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension EmrClientTypes {
    /// This entity represents an instance group, which is a group of instances that have common purpose. For example, CORE instance group is used for HDFS.
    public struct InstanceGroup: Swift.Equatable {
        /// An automatic scaling policy for a core instance group or task instance group in an Amazon EMR cluster. The automatic scaling policy defines how an instance group dynamically adds and terminates EC2 instances in response to the value of a CloudWatch metric. See PutAutoScalingPolicy.
        public var autoScalingPolicy: EmrClientTypes.AutoScalingPolicyDescription?
        /// If specified, indicates that the instance group uses Spot Instances. This is the maximum price you are willing to pay for Spot Instances. Specify OnDemandPrice to set the amount equal to the On-Demand price, or specify an amount in USD.
        public var bidPrice: Swift.String?
        /// Amazon EMR releases 4.x or later. The list of configurations supplied for an Amazon EMR cluster instance group. You can specify a separate configuration for each instance group (master, core, and task).
        public var configurations: [EmrClientTypes.Configuration]?
        /// The version number of the requested configuration specification for this instance group.
        public var configurationsVersion: Swift.Int
        /// The custom AMI ID to use for the provisioned instance group.
        public var customAmiId: Swift.String?
        /// The EBS block devices that are mapped to this instance group.
        public var ebsBlockDevices: [EmrClientTypes.EbsBlockDevice]?
        /// If the instance group is EBS-optimized. An Amazon EBS-optimized instance uses an optimized configuration stack and provides additional, dedicated capacity for Amazon EBS I/O.
        public var ebsOptimized: Swift.Bool?
        /// The identifier of the instance group.
        public var id: Swift.String?
        /// The type of the instance group. Valid values are MASTER, CORE or TASK.
        public var instanceGroupType: EmrClientTypes.InstanceGroupType?
        /// The EC2 instance type for all instances in the instance group.
        public var instanceType: Swift.String?
        /// A list of configurations that were successfully applied for an instance group last time.
        public var lastSuccessfullyAppliedConfigurations: [EmrClientTypes.Configuration]?
        /// The version number of a configuration specification that was successfully applied for an instance group last time.
        public var lastSuccessfullyAppliedConfigurationsVersion: Swift.Int
        /// The marketplace to provision instances for this group. Valid values are ON_DEMAND or SPOT.
        public var market: EmrClientTypes.MarketType?
        /// The name of the instance group.
        public var name: Swift.String?
        /// The target number of instances for the instance group.
        public var requestedInstanceCount: Swift.Int?
        /// The number of instances currently running in this instance group.
        public var runningInstanceCount: Swift.Int?
        /// Policy for customizing shrink operations.
        public var shrinkPolicy: EmrClientTypes.ShrinkPolicy?
        /// The current status of the instance group.
        public var status: EmrClientTypes.InstanceGroupStatus?

        public init (
            autoScalingPolicy: EmrClientTypes.AutoScalingPolicyDescription? = nil,
            bidPrice: Swift.String? = nil,
            configurations: [EmrClientTypes.Configuration]? = nil,
            configurationsVersion: Swift.Int = 0,
            customAmiId: Swift.String? = nil,
            ebsBlockDevices: [EmrClientTypes.EbsBlockDevice]? = nil,
            ebsOptimized: Swift.Bool? = nil,
            id: Swift.String? = nil,
            instanceGroupType: EmrClientTypes.InstanceGroupType? = nil,
            instanceType: Swift.String? = nil,
            lastSuccessfullyAppliedConfigurations: [EmrClientTypes.Configuration]? = nil,
            lastSuccessfullyAppliedConfigurationsVersion: Swift.Int = 0,
            market: EmrClientTypes.MarketType? = nil,
            name: Swift.String? = nil,
            requestedInstanceCount: Swift.Int? = nil,
            runningInstanceCount: Swift.Int? = nil,
            shrinkPolicy: EmrClientTypes.ShrinkPolicy? = nil,
            status: EmrClientTypes.InstanceGroupStatus? = nil
        )
        {
            self.autoScalingPolicy = autoScalingPolicy
            self.bidPrice = bidPrice
            self.configurations = configurations
            self.configurationsVersion = configurationsVersion
            self.customAmiId = customAmiId
            self.ebsBlockDevices = ebsBlockDevices
            self.ebsOptimized = ebsOptimized
            self.id = id
            self.instanceGroupType = instanceGroupType
            self.instanceType = instanceType
            self.lastSuccessfullyAppliedConfigurations = lastSuccessfullyAppliedConfigurations
            self.lastSuccessfullyAppliedConfigurationsVersion = lastSuccessfullyAppliedConfigurationsVersion
            self.market = market
            self.name = name
            self.requestedInstanceCount = requestedInstanceCount
            self.runningInstanceCount = runningInstanceCount
            self.shrinkPolicy = shrinkPolicy
            self.status = status
        }
    }

}
