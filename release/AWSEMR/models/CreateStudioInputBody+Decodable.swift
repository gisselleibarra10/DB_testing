// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateStudioInputBody: Swift.Equatable {
    let name: Swift.String?
    let description: Swift.String?
    let authMode: EmrClientTypes.AuthMode?
    let vpcId: Swift.String?
    let subnetIds: [Swift.String]?
    let serviceRole: Swift.String?
    let userRole: Swift.String?
    let workspaceSecurityGroupId: Swift.String?
    let engineSecurityGroupId: Swift.String?
    let defaultS3Location: Swift.String?
    let idpAuthUrl: Swift.String?
    let idpRelayStateParameterName: Swift.String?
    let tags: [EmrClientTypes.Tag]?
}

extension CreateStudioInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case authMode = "AuthMode"
        case defaultS3Location = "DefaultS3Location"
        case description = "Description"
        case engineSecurityGroupId = "EngineSecurityGroupId"
        case idpAuthUrl = "IdpAuthUrl"
        case idpRelayStateParameterName = "IdpRelayStateParameterName"
        case name = "Name"
        case serviceRole = "ServiceRole"
        case subnetIds = "SubnetIds"
        case tags = "Tags"
        case userRole = "UserRole"
        case vpcId = "VpcId"
        case workspaceSecurityGroupId = "WorkspaceSecurityGroupId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let authModeDecoded = try containerValues.decodeIfPresent(EmrClientTypes.AuthMode.self, forKey: .authMode)
        authMode = authModeDecoded
        let vpcIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vpcId)
        vpcId = vpcIdDecoded
        let subnetIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .subnetIds)
        var subnetIdsDecoded0:[Swift.String]? = nil
        if let subnetIdsContainer = subnetIdsContainer {
            subnetIdsDecoded0 = [Swift.String]()
            for string0 in subnetIdsContainer {
                if let string0 = string0 {
                    subnetIdsDecoded0?.append(string0)
                }
            }
        }
        subnetIds = subnetIdsDecoded0
        let serviceRoleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serviceRole)
        serviceRole = serviceRoleDecoded
        let userRoleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userRole)
        userRole = userRoleDecoded
        let workspaceSecurityGroupIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .workspaceSecurityGroupId)
        workspaceSecurityGroupId = workspaceSecurityGroupIdDecoded
        let engineSecurityGroupIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .engineSecurityGroupId)
        engineSecurityGroupId = engineSecurityGroupIdDecoded
        let defaultS3LocationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .defaultS3Location)
        defaultS3Location = defaultS3LocationDecoded
        let idpAuthUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .idpAuthUrl)
        idpAuthUrl = idpAuthUrlDecoded
        let idpRelayStateParameterNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .idpRelayStateParameterName)
        idpRelayStateParameterName = idpRelayStateParameterNameDecoded
        let tagsContainer = try containerValues.decodeIfPresent([EmrClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[EmrClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [EmrClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}
