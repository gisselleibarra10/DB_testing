// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct RunJobFlowInputBody: Swift.Equatable {
    let name: Swift.String?
    let logUri: Swift.String?
    let logEncryptionKmsKeyId: Swift.String?
    let additionalInfo: Swift.String?
    let amiVersion: Swift.String?
    let releaseLabel: Swift.String?
    let instances: EmrClientTypes.JobFlowInstancesConfig?
    let steps: [EmrClientTypes.StepConfig]?
    let bootstrapActions: [EmrClientTypes.BootstrapActionConfig]?
    let supportedProducts: [Swift.String]?
    let newSupportedProducts: [EmrClientTypes.SupportedProductConfig]?
    let applications: [EmrClientTypes.Application]?
    let configurations: [EmrClientTypes.Configuration]?
    let visibleToAllUsers: Swift.Bool
    let jobFlowRole: Swift.String?
    let serviceRole: Swift.String?
    let tags: [EmrClientTypes.Tag]?
    let securityConfiguration: Swift.String?
    let autoScalingRole: Swift.String?
    let scaleDownBehavior: EmrClientTypes.ScaleDownBehavior?
    let customAmiId: Swift.String?
    let ebsRootVolumeSize: Swift.Int?
    let repoUpgradeOnBoot: EmrClientTypes.RepoUpgradeOnBoot?
    let kerberosAttributes: EmrClientTypes.KerberosAttributes?
    let stepConcurrencyLevel: Swift.Int?
    let managedScalingPolicy: EmrClientTypes.ManagedScalingPolicy?
    let placementGroupConfigs: [EmrClientTypes.PlacementGroupConfig]?
    let autoTerminationPolicy: EmrClientTypes.AutoTerminationPolicy?
    let oSReleaseLabel: Swift.String?
}

extension RunJobFlowInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case additionalInfo = "AdditionalInfo"
        case amiVersion = "AmiVersion"
        case applications = "Applications"
        case autoScalingRole = "AutoScalingRole"
        case autoTerminationPolicy = "AutoTerminationPolicy"
        case bootstrapActions = "BootstrapActions"
        case configurations = "Configurations"
        case customAmiId = "CustomAmiId"
        case ebsRootVolumeSize = "EbsRootVolumeSize"
        case instances = "Instances"
        case jobFlowRole = "JobFlowRole"
        case kerberosAttributes = "KerberosAttributes"
        case logEncryptionKmsKeyId = "LogEncryptionKmsKeyId"
        case logUri = "LogUri"
        case managedScalingPolicy = "ManagedScalingPolicy"
        case name = "Name"
        case newSupportedProducts = "NewSupportedProducts"
        case oSReleaseLabel = "OSReleaseLabel"
        case placementGroupConfigs = "PlacementGroupConfigs"
        case releaseLabel = "ReleaseLabel"
        case repoUpgradeOnBoot = "RepoUpgradeOnBoot"
        case scaleDownBehavior = "ScaleDownBehavior"
        case securityConfiguration = "SecurityConfiguration"
        case serviceRole = "ServiceRole"
        case stepConcurrencyLevel = "StepConcurrencyLevel"
        case steps = "Steps"
        case supportedProducts = "SupportedProducts"
        case tags = "Tags"
        case visibleToAllUsers = "VisibleToAllUsers"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let logUriDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logUri)
        logUri = logUriDecoded
        let logEncryptionKmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logEncryptionKmsKeyId)
        logEncryptionKmsKeyId = logEncryptionKmsKeyIdDecoded
        let additionalInfoDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .additionalInfo)
        additionalInfo = additionalInfoDecoded
        let amiVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .amiVersion)
        amiVersion = amiVersionDecoded
        let releaseLabelDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .releaseLabel)
        releaseLabel = releaseLabelDecoded
        let instancesDecoded = try containerValues.decodeIfPresent(EmrClientTypes.JobFlowInstancesConfig.self, forKey: .instances)
        instances = instancesDecoded
        let stepsContainer = try containerValues.decodeIfPresent([EmrClientTypes.StepConfig?].self, forKey: .steps)
        var stepsDecoded0:[EmrClientTypes.StepConfig]? = nil
        if let stepsContainer = stepsContainer {
            stepsDecoded0 = [EmrClientTypes.StepConfig]()
            for structure0 in stepsContainer {
                if let structure0 = structure0 {
                    stepsDecoded0?.append(structure0)
                }
            }
        }
        steps = stepsDecoded0
        let bootstrapActionsContainer = try containerValues.decodeIfPresent([EmrClientTypes.BootstrapActionConfig?].self, forKey: .bootstrapActions)
        var bootstrapActionsDecoded0:[EmrClientTypes.BootstrapActionConfig]? = nil
        if let bootstrapActionsContainer = bootstrapActionsContainer {
            bootstrapActionsDecoded0 = [EmrClientTypes.BootstrapActionConfig]()
            for structure0 in bootstrapActionsContainer {
                if let structure0 = structure0 {
                    bootstrapActionsDecoded0?.append(structure0)
                }
            }
        }
        bootstrapActions = bootstrapActionsDecoded0
        let supportedProductsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .supportedProducts)
        var supportedProductsDecoded0:[Swift.String]? = nil
        if let supportedProductsContainer = supportedProductsContainer {
            supportedProductsDecoded0 = [Swift.String]()
            for string0 in supportedProductsContainer {
                if let string0 = string0 {
                    supportedProductsDecoded0?.append(string0)
                }
            }
        }
        supportedProducts = supportedProductsDecoded0
        let newSupportedProductsContainer = try containerValues.decodeIfPresent([EmrClientTypes.SupportedProductConfig?].self, forKey: .newSupportedProducts)
        var newSupportedProductsDecoded0:[EmrClientTypes.SupportedProductConfig]? = nil
        if let newSupportedProductsContainer = newSupportedProductsContainer {
            newSupportedProductsDecoded0 = [EmrClientTypes.SupportedProductConfig]()
            for structure0 in newSupportedProductsContainer {
                if let structure0 = structure0 {
                    newSupportedProductsDecoded0?.append(structure0)
                }
            }
        }
        newSupportedProducts = newSupportedProductsDecoded0
        let applicationsContainer = try containerValues.decodeIfPresent([EmrClientTypes.Application?].self, forKey: .applications)
        var applicationsDecoded0:[EmrClientTypes.Application]? = nil
        if let applicationsContainer = applicationsContainer {
            applicationsDecoded0 = [EmrClientTypes.Application]()
            for structure0 in applicationsContainer {
                if let structure0 = structure0 {
                    applicationsDecoded0?.append(structure0)
                }
            }
        }
        applications = applicationsDecoded0
        let configurationsContainer = try containerValues.decodeIfPresent([EmrClientTypes.Configuration?].self, forKey: .configurations)
        var configurationsDecoded0:[EmrClientTypes.Configuration]? = nil
        if let configurationsContainer = configurationsContainer {
            configurationsDecoded0 = [EmrClientTypes.Configuration]()
            for structure0 in configurationsContainer {
                if let structure0 = structure0 {
                    configurationsDecoded0?.append(structure0)
                }
            }
        }
        configurations = configurationsDecoded0
        let visibleToAllUsersDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .visibleToAllUsers) ?? false
        visibleToAllUsers = visibleToAllUsersDecoded
        let jobFlowRoleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobFlowRole)
        jobFlowRole = jobFlowRoleDecoded
        let serviceRoleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serviceRole)
        serviceRole = serviceRoleDecoded
        let tagsContainer = try containerValues.decodeIfPresent([EmrClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[EmrClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [EmrClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let securityConfigurationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .securityConfiguration)
        securityConfiguration = securityConfigurationDecoded
        let autoScalingRoleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .autoScalingRole)
        autoScalingRole = autoScalingRoleDecoded
        let scaleDownBehaviorDecoded = try containerValues.decodeIfPresent(EmrClientTypes.ScaleDownBehavior.self, forKey: .scaleDownBehavior)
        scaleDownBehavior = scaleDownBehaviorDecoded
        let customAmiIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .customAmiId)
        customAmiId = customAmiIdDecoded
        let ebsRootVolumeSizeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .ebsRootVolumeSize)
        ebsRootVolumeSize = ebsRootVolumeSizeDecoded
        let repoUpgradeOnBootDecoded = try containerValues.decodeIfPresent(EmrClientTypes.RepoUpgradeOnBoot.self, forKey: .repoUpgradeOnBoot)
        repoUpgradeOnBoot = repoUpgradeOnBootDecoded
        let kerberosAttributesDecoded = try containerValues.decodeIfPresent(EmrClientTypes.KerberosAttributes.self, forKey: .kerberosAttributes)
        kerberosAttributes = kerberosAttributesDecoded
        let stepConcurrencyLevelDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .stepConcurrencyLevel)
        stepConcurrencyLevel = stepConcurrencyLevelDecoded
        let managedScalingPolicyDecoded = try containerValues.decodeIfPresent(EmrClientTypes.ManagedScalingPolicy.self, forKey: .managedScalingPolicy)
        managedScalingPolicy = managedScalingPolicyDecoded
        let placementGroupConfigsContainer = try containerValues.decodeIfPresent([EmrClientTypes.PlacementGroupConfig?].self, forKey: .placementGroupConfigs)
        var placementGroupConfigsDecoded0:[EmrClientTypes.PlacementGroupConfig]? = nil
        if let placementGroupConfigsContainer = placementGroupConfigsContainer {
            placementGroupConfigsDecoded0 = [EmrClientTypes.PlacementGroupConfig]()
            for structure0 in placementGroupConfigsContainer {
                if let structure0 = structure0 {
                    placementGroupConfigsDecoded0?.append(structure0)
                }
            }
        }
        placementGroupConfigs = placementGroupConfigsDecoded0
        let autoTerminationPolicyDecoded = try containerValues.decodeIfPresent(EmrClientTypes.AutoTerminationPolicy.self, forKey: .autoTerminationPolicy)
        autoTerminationPolicy = autoTerminationPolicyDecoded
        let oSReleaseLabelDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .oSReleaseLabel)
        oSReleaseLabel = oSReleaseLabelDecoded
    }
}
