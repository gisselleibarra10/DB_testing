// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ApplicationDiscoveryClientTypes.AgentInfo: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case agentId
        case agentNetworkInfoList
        case agentType
        case collectionStatus
        case connectorId
        case health
        case hostName
        case lastHealthPingTime
        case registeredTime
        case version
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let agentId = self.agentId {
            try encodeContainer.encode(agentId, forKey: .agentId)
        }
        if let agentNetworkInfoList = agentNetworkInfoList {
            var agentNetworkInfoListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .agentNetworkInfoList)
            for agentnetworkinfolist0 in agentNetworkInfoList {
                try agentNetworkInfoListContainer.encode(agentnetworkinfolist0)
            }
        }
        if let agentType = self.agentType {
            try encodeContainer.encode(agentType, forKey: .agentType)
        }
        if let collectionStatus = self.collectionStatus {
            try encodeContainer.encode(collectionStatus, forKey: .collectionStatus)
        }
        if let connectorId = self.connectorId {
            try encodeContainer.encode(connectorId, forKey: .connectorId)
        }
        if let health = self.health {
            try encodeContainer.encode(health.rawValue, forKey: .health)
        }
        if let hostName = self.hostName {
            try encodeContainer.encode(hostName, forKey: .hostName)
        }
        if let lastHealthPingTime = self.lastHealthPingTime {
            try encodeContainer.encode(lastHealthPingTime, forKey: .lastHealthPingTime)
        }
        if let registeredTime = self.registeredTime {
            try encodeContainer.encode(registeredTime, forKey: .registeredTime)
        }
        if let version = self.version {
            try encodeContainer.encode(version, forKey: .version)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let agentIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .agentId)
        agentId = agentIdDecoded
        let hostNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .hostName)
        hostName = hostNameDecoded
        let agentNetworkInfoListContainer = try containerValues.decodeIfPresent([ApplicationDiscoveryClientTypes.AgentNetworkInfo?].self, forKey: .agentNetworkInfoList)
        var agentNetworkInfoListDecoded0:[ApplicationDiscoveryClientTypes.AgentNetworkInfo]? = nil
        if let agentNetworkInfoListContainer = agentNetworkInfoListContainer {
            agentNetworkInfoListDecoded0 = [ApplicationDiscoveryClientTypes.AgentNetworkInfo]()
            for structure0 in agentNetworkInfoListContainer {
                if let structure0 = structure0 {
                    agentNetworkInfoListDecoded0?.append(structure0)
                }
            }
        }
        agentNetworkInfoList = agentNetworkInfoListDecoded0
        let connectorIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .connectorId)
        connectorId = connectorIdDecoded
        let versionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .version)
        version = versionDecoded
        let healthDecoded = try containerValues.decodeIfPresent(ApplicationDiscoveryClientTypes.AgentStatus.self, forKey: .health)
        health = healthDecoded
        let lastHealthPingTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastHealthPingTime)
        lastHealthPingTime = lastHealthPingTimeDecoded
        let collectionStatusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .collectionStatus)
        collectionStatus = collectionStatusDecoded
        let agentTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .agentType)
        agentType = agentTypeDecoded
        let registeredTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .registeredTime)
        registeredTime = registeredTimeDecoded
    }
}
