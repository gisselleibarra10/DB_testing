// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ApplicationDiscoveryClientTypes.CustomerAgentlessCollectorInfo: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case activeAgentlessCollectors
        case denyListedAgentlessCollectors
        case healthyAgentlessCollectors
        case shutdownAgentlessCollectors
        case totalAgentlessCollectors
        case unhealthyAgentlessCollectors
        case unknownAgentlessCollectors
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if activeAgentlessCollectors != 0 {
            try encodeContainer.encode(activeAgentlessCollectors, forKey: .activeAgentlessCollectors)
        }
        if denyListedAgentlessCollectors != 0 {
            try encodeContainer.encode(denyListedAgentlessCollectors, forKey: .denyListedAgentlessCollectors)
        }
        if healthyAgentlessCollectors != 0 {
            try encodeContainer.encode(healthyAgentlessCollectors, forKey: .healthyAgentlessCollectors)
        }
        if shutdownAgentlessCollectors != 0 {
            try encodeContainer.encode(shutdownAgentlessCollectors, forKey: .shutdownAgentlessCollectors)
        }
        if totalAgentlessCollectors != 0 {
            try encodeContainer.encode(totalAgentlessCollectors, forKey: .totalAgentlessCollectors)
        }
        if unhealthyAgentlessCollectors != 0 {
            try encodeContainer.encode(unhealthyAgentlessCollectors, forKey: .unhealthyAgentlessCollectors)
        }
        if unknownAgentlessCollectors != 0 {
            try encodeContainer.encode(unknownAgentlessCollectors, forKey: .unknownAgentlessCollectors)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let activeAgentlessCollectorsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .activeAgentlessCollectors) ?? 0
        activeAgentlessCollectors = activeAgentlessCollectorsDecoded
        let healthyAgentlessCollectorsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .healthyAgentlessCollectors) ?? 0
        healthyAgentlessCollectors = healthyAgentlessCollectorsDecoded
        let denyListedAgentlessCollectorsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .denyListedAgentlessCollectors) ?? 0
        denyListedAgentlessCollectors = denyListedAgentlessCollectorsDecoded
        let shutdownAgentlessCollectorsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .shutdownAgentlessCollectors) ?? 0
        shutdownAgentlessCollectors = shutdownAgentlessCollectorsDecoded
        let unhealthyAgentlessCollectorsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .unhealthyAgentlessCollectors) ?? 0
        unhealthyAgentlessCollectors = unhealthyAgentlessCollectorsDecoded
        let totalAgentlessCollectorsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .totalAgentlessCollectors) ?? 0
        totalAgentlessCollectors = totalAgentlessCollectorsDecoded
        let unknownAgentlessCollectorsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .unknownAgentlessCollectors) ?? 0
        unknownAgentlessCollectors = unknownAgentlessCollectorsDecoded
    }
}
