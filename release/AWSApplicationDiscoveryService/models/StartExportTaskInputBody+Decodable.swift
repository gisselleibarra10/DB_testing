// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct StartExportTaskInputBody: Swift.Equatable {
    let exportDataFormat: [ApplicationDiscoveryClientTypes.ExportDataFormat]?
    let filters: [ApplicationDiscoveryClientTypes.ExportFilter]?
    let startTime: ClientRuntime.Date?
    let endTime: ClientRuntime.Date?
}

extension StartExportTaskInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case endTime
        case exportDataFormat
        case filters
        case startTime
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let exportDataFormatContainer = try containerValues.decodeIfPresent([ApplicationDiscoveryClientTypes.ExportDataFormat?].self, forKey: .exportDataFormat)
        var exportDataFormatDecoded0:[ApplicationDiscoveryClientTypes.ExportDataFormat]? = nil
        if let exportDataFormatContainer = exportDataFormatContainer {
            exportDataFormatDecoded0 = [ApplicationDiscoveryClientTypes.ExportDataFormat]()
            for string0 in exportDataFormatContainer {
                if let string0 = string0 {
                    exportDataFormatDecoded0?.append(string0)
                }
            }
        }
        exportDataFormat = exportDataFormatDecoded0
        let filtersContainer = try containerValues.decodeIfPresent([ApplicationDiscoveryClientTypes.ExportFilter?].self, forKey: .filters)
        var filtersDecoded0:[ApplicationDiscoveryClientTypes.ExportFilter]? = nil
        if let filtersContainer = filtersContainer {
            filtersDecoded0 = [ApplicationDiscoveryClientTypes.ExportFilter]()
            for structure0 in filtersContainer {
                if let structure0 = structure0 {
                    filtersDecoded0?.append(structure0)
                }
            }
        }
        filters = filtersDecoded0
        let startTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .startTime)
        startTime = startTimeDecoded
        let endTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .endTime)
        endTime = endTimeDecoded
    }
}
