// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// Input to the LookupDeveloperIdentityInput action.
public struct LookupDeveloperIdentityInput: Swift.Equatable {
    /// A unique ID used by your backend authentication process to identify a user. Typically, a developer identity provider would issue many developer user identifiers, in keeping with the number of users.
    public var developerUserIdentifier: Swift.String?
    /// A unique identifier in the format REGION:GUID.
    public var identityId: Swift.String?
    /// An identity pool ID in the format REGION:GUID.
    /// This member is required.
    public var identityPoolId: Swift.String?
    /// The maximum number of identities to return.
    public var maxResults: Swift.Int
    /// A pagination token. The first call you make will have NextToken set to null. After that the service will return NextToken values as needed. For example, let's say you make a request with MaxResults set to 10, and there are 20 matches in the database. The service will return a pagination token as a part of the response. This token can be used to call the API again and get results starting from the 11th match.
    public var nextToken: Swift.String?

    public init (
        developerUserIdentifier: Swift.String? = nil,
        identityId: Swift.String? = nil,
        identityPoolId: Swift.String? = nil,
        maxResults: Swift.Int = 0,
        nextToken: Swift.String? = nil
    )
    {
        self.developerUserIdentifier = developerUserIdentifier
        self.identityId = identityId
        self.identityPoolId = identityPoolId
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}
