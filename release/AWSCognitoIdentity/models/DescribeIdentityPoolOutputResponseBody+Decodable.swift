// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeIdentityPoolOutputResponseBody: Swift.Equatable {
    let identityPoolId: Swift.String?
    let identityPoolName: Swift.String?
    let allowUnauthenticatedIdentities: Swift.Bool
    let allowClassicFlow: Swift.Bool?
    let supportedLoginProviders: [Swift.String:Swift.String]?
    let developerProviderName: Swift.String?
    let openIdConnectProviderARNs: [Swift.String]?
    let cognitoIdentityProviders: [CognitoIdentityClientTypes.CognitoIdentityProvider]?
    let samlProviderARNs: [Swift.String]?
    let identityPoolTags: [Swift.String:Swift.String]?
}

extension DescribeIdentityPoolOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case allowClassicFlow = "AllowClassicFlow"
        case allowUnauthenticatedIdentities = "AllowUnauthenticatedIdentities"
        case cognitoIdentityProviders = "CognitoIdentityProviders"
        case developerProviderName = "DeveloperProviderName"
        case identityPoolId = "IdentityPoolId"
        case identityPoolName = "IdentityPoolName"
        case identityPoolTags = "IdentityPoolTags"
        case openIdConnectProviderARNs = "OpenIdConnectProviderARNs"
        case samlProviderARNs = "SamlProviderARNs"
        case supportedLoginProviders = "SupportedLoginProviders"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let identityPoolIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .identityPoolId)
        identityPoolId = identityPoolIdDecoded
        let identityPoolNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .identityPoolName)
        identityPoolName = identityPoolNameDecoded
        let allowUnauthenticatedIdentitiesDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .allowUnauthenticatedIdentities) ?? false
        allowUnauthenticatedIdentities = allowUnauthenticatedIdentitiesDecoded
        let allowClassicFlowDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .allowClassicFlow)
        allowClassicFlow = allowClassicFlowDecoded
        let supportedLoginProvidersContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .supportedLoginProviders)
        var supportedLoginProvidersDecoded0: [Swift.String:Swift.String]? = nil
        if let supportedLoginProvidersContainer = supportedLoginProvidersContainer {
            supportedLoginProvidersDecoded0 = [Swift.String:Swift.String]()
            for (key0, identityproviderid0) in supportedLoginProvidersContainer {
                if let identityproviderid0 = identityproviderid0 {
                    supportedLoginProvidersDecoded0?[key0] = identityproviderid0
                }
            }
        }
        supportedLoginProviders = supportedLoginProvidersDecoded0
        let developerProviderNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .developerProviderName)
        developerProviderName = developerProviderNameDecoded
        let openIdConnectProviderARNsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .openIdConnectProviderARNs)
        var openIdConnectProviderARNsDecoded0:[Swift.String]? = nil
        if let openIdConnectProviderARNsContainer = openIdConnectProviderARNsContainer {
            openIdConnectProviderARNsDecoded0 = [Swift.String]()
            for string0 in openIdConnectProviderARNsContainer {
                if let string0 = string0 {
                    openIdConnectProviderARNsDecoded0?.append(string0)
                }
            }
        }
        openIdConnectProviderARNs = openIdConnectProviderARNsDecoded0
        let cognitoIdentityProvidersContainer = try containerValues.decodeIfPresent([CognitoIdentityClientTypes.CognitoIdentityProvider?].self, forKey: .cognitoIdentityProviders)
        var cognitoIdentityProvidersDecoded0:[CognitoIdentityClientTypes.CognitoIdentityProvider]? = nil
        if let cognitoIdentityProvidersContainer = cognitoIdentityProvidersContainer {
            cognitoIdentityProvidersDecoded0 = [CognitoIdentityClientTypes.CognitoIdentityProvider]()
            for structure0 in cognitoIdentityProvidersContainer {
                if let structure0 = structure0 {
                    cognitoIdentityProvidersDecoded0?.append(structure0)
                }
            }
        }
        cognitoIdentityProviders = cognitoIdentityProvidersDecoded0
        let samlProviderARNsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .samlProviderARNs)
        var samlProviderARNsDecoded0:[Swift.String]? = nil
        if let samlProviderARNsContainer = samlProviderARNsContainer {
            samlProviderARNsDecoded0 = [Swift.String]()
            for string0 in samlProviderARNsContainer {
                if let string0 = string0 {
                    samlProviderARNsDecoded0?.append(string0)
                }
            }
        }
        samlProviderARNs = samlProviderARNsDecoded0
        let identityPoolTagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .identityPoolTags)
        var identityPoolTagsDecoded0: [Swift.String:Swift.String]? = nil
        if let identityPoolTagsContainer = identityPoolTagsContainer {
            identityPoolTagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvaluetype0) in identityPoolTagsContainer {
                if let tagvaluetype0 = tagvaluetype0 {
                    identityPoolTagsDecoded0?[key0] = tagvaluetype0
                }
            }
        }
        identityPoolTags = identityPoolTagsDecoded0
    }
}
