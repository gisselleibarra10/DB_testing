// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct UpdateChannelInputBody: Swift.Equatable {
    let arn: Swift.String?
    let name: Swift.String?
    let latencyMode: IvsClientTypes.ChannelLatencyMode?
    let type: IvsClientTypes.ChannelType?
    let authorized: Swift.Bool
    let recordingConfigurationArn: Swift.String?
}

extension UpdateChannelInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn
        case authorized
        case latencyMode
        case name
        case recordingConfigurationArn
        case type
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let latencyModeDecoded = try containerValues.decodeIfPresent(IvsClientTypes.ChannelLatencyMode.self, forKey: .latencyMode)
        latencyMode = latencyModeDecoded
        let typeDecoded = try containerValues.decodeIfPresent(IvsClientTypes.ChannelType.self, forKey: .type)
        type = typeDecoded
        let authorizedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .authorized) ?? false
        authorized = authorizedDecoded
        let recordingConfigurationArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .recordingConfigurationArn)
        recordingConfigurationArn = recordingConfigurationArnDecoded
    }
}
