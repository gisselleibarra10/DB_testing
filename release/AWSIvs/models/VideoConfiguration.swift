// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension IvsClientTypes {
    /// Object specifying a streamâ€™s video configuration, as set up by the broadcaster (usually in an encoder). This is part of the [IngestConfiguration] object and used for monitoring stream health.
    public struct VideoConfiguration: Swift.Equatable {
        /// Indicates the degree of required decoder performance for a profile. Normally this is set automatically by the encoder. For details, see the H.264 specification.
        public var avcLevel: Swift.String?
        /// Indicates to the decoder the requirements for decoding the stream. For definitions of the valid values, see the H.264 specification.
        public var avcProfile: Swift.String?
        /// Codec used for the video encoding.
        public var codec: Swift.String?
        /// Software or hardware used to encode the video.
        public var encoder: Swift.String?
        /// The expected ingest bitrate (bits per second). This is configured in the encoder.
        public var targetBitrate: Swift.Int
        /// The expected ingest framerate. This is configured in the encoder.
        public var targetFramerate: Swift.Int
        /// Video-resolution height in pixels.
        public var videoHeight: Swift.Int
        /// Video-resolution width in pixels.
        public var videoWidth: Swift.Int

        public init (
            avcLevel: Swift.String? = nil,
            avcProfile: Swift.String? = nil,
            codec: Swift.String? = nil,
            encoder: Swift.String? = nil,
            targetBitrate: Swift.Int = 0,
            targetFramerate: Swift.Int = 0,
            videoHeight: Swift.Int = 0,
            videoWidth: Swift.Int = 0
        )
        {
            self.avcLevel = avcLevel
            self.avcProfile = avcProfile
            self.codec = codec
            self.encoder = encoder
            self.targetBitrate = targetBitrate
            self.targetFramerate = targetFramerate
            self.videoHeight = videoHeight
            self.videoWidth = videoWidth
        }
    }

}
