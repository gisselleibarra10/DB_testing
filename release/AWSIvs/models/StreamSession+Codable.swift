// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension IvsClientTypes.StreamSession: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case channel
        case endTime
        case ingestConfiguration
        case recordingConfiguration
        case startTime
        case streamId
        case truncatedEvents
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let channel = self.channel {
            try encodeContainer.encode(channel, forKey: .channel)
        }
        if let endTime = self.endTime {
            try encodeContainer.encode(endTime.timeIntervalSince1970, forKey: .endTime)
        }
        if let ingestConfiguration = self.ingestConfiguration {
            try encodeContainer.encode(ingestConfiguration, forKey: .ingestConfiguration)
        }
        if let recordingConfiguration = self.recordingConfiguration {
            try encodeContainer.encode(recordingConfiguration, forKey: .recordingConfiguration)
        }
        if let startTime = self.startTime {
            try encodeContainer.encode(startTime.timeIntervalSince1970, forKey: .startTime)
        }
        if let streamId = self.streamId {
            try encodeContainer.encode(streamId, forKey: .streamId)
        }
        if let truncatedEvents = truncatedEvents {
            var truncatedEventsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .truncatedEvents)
            for streamevents0 in truncatedEvents {
                try truncatedEventsContainer.encode(streamevents0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let streamIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .streamId)
        streamId = streamIdDecoded
        let startTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .startTime)
        startTime = startTimeDecoded
        let endTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .endTime)
        endTime = endTimeDecoded
        let channelDecoded = try containerValues.decodeIfPresent(IvsClientTypes.Channel.self, forKey: .channel)
        channel = channelDecoded
        let ingestConfigurationDecoded = try containerValues.decodeIfPresent(IvsClientTypes.IngestConfiguration.self, forKey: .ingestConfiguration)
        ingestConfiguration = ingestConfigurationDecoded
        let recordingConfigurationDecoded = try containerValues.decodeIfPresent(IvsClientTypes.RecordingConfiguration.self, forKey: .recordingConfiguration)
        recordingConfiguration = recordingConfigurationDecoded
        let truncatedEventsContainer = try containerValues.decodeIfPresent([IvsClientTypes.StreamEvent?].self, forKey: .truncatedEvents)
        var truncatedEventsDecoded0:[IvsClientTypes.StreamEvent]? = nil
        if let truncatedEventsContainer = truncatedEventsContainer {
            truncatedEventsDecoded0 = [IvsClientTypes.StreamEvent]()
            for structure0 in truncatedEventsContainer {
                if let structure0 = structure0 {
                    truncatedEventsDecoded0?.append(structure0)
                }
            }
        }
        truncatedEvents = truncatedEventsDecoded0
    }
}
