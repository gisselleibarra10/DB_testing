// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AmplifyBackendClientTypes.UpdateBackendAuthOAuthConfig: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domainPrefix = "domainPrefix"
        case oAuthGrantType = "oAuthGrantType"
        case oAuthScopes = "oAuthScopes"
        case redirectSignInURIs = "redirectSignInURIs"
        case redirectSignOutURIs = "redirectSignOutURIs"
        case socialProviderSettings = "socialProviderSettings"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let domainPrefix = self.domainPrefix {
            try encodeContainer.encode(domainPrefix, forKey: .domainPrefix)
        }
        if let oAuthGrantType = self.oAuthGrantType {
            try encodeContainer.encode(oAuthGrantType.rawValue, forKey: .oAuthGrantType)
        }
        if let oAuthScopes = oAuthScopes {
            var oAuthScopesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .oAuthScopes)
            for listofoauthscopeselement0 in oAuthScopes {
                try oAuthScopesContainer.encode(listofoauthscopeselement0.rawValue)
            }
        }
        if let redirectSignInURIs = redirectSignInURIs {
            var redirectSignInURIsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .redirectSignInURIs)
            for listof__string0 in redirectSignInURIs {
                try redirectSignInURIsContainer.encode(listof__string0)
            }
        }
        if let redirectSignOutURIs = redirectSignOutURIs {
            var redirectSignOutURIsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .redirectSignOutURIs)
            for listof__string0 in redirectSignOutURIs {
                try redirectSignOutURIsContainer.encode(listof__string0)
            }
        }
        if let socialProviderSettings = self.socialProviderSettings {
            try encodeContainer.encode(socialProviderSettings, forKey: .socialProviderSettings)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainPrefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domainPrefix)
        domainPrefix = domainPrefixDecoded
        let oAuthGrantTypeDecoded = try containerValues.decodeIfPresent(AmplifyBackendClientTypes.OAuthGrantType.self, forKey: .oAuthGrantType)
        oAuthGrantType = oAuthGrantTypeDecoded
        let oAuthScopesContainer = try containerValues.decodeIfPresent([AmplifyBackendClientTypes.OAuthScopesElement?].self, forKey: .oAuthScopes)
        var oAuthScopesDecoded0:[AmplifyBackendClientTypes.OAuthScopesElement]? = nil
        if let oAuthScopesContainer = oAuthScopesContainer {
            oAuthScopesDecoded0 = [AmplifyBackendClientTypes.OAuthScopesElement]()
            for string0 in oAuthScopesContainer {
                if let string0 = string0 {
                    oAuthScopesDecoded0?.append(string0)
                }
            }
        }
        oAuthScopes = oAuthScopesDecoded0
        let redirectSignInURIsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .redirectSignInURIs)
        var redirectSignInURIsDecoded0:[Swift.String]? = nil
        if let redirectSignInURIsContainer = redirectSignInURIsContainer {
            redirectSignInURIsDecoded0 = [Swift.String]()
            for string0 in redirectSignInURIsContainer {
                if let string0 = string0 {
                    redirectSignInURIsDecoded0?.append(string0)
                }
            }
        }
        redirectSignInURIs = redirectSignInURIsDecoded0
        let redirectSignOutURIsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .redirectSignOutURIs)
        var redirectSignOutURIsDecoded0:[Swift.String]? = nil
        if let redirectSignOutURIsContainer = redirectSignOutURIsContainer {
            redirectSignOutURIsDecoded0 = [Swift.String]()
            for string0 in redirectSignOutURIsContainer {
                if let string0 = string0 {
                    redirectSignOutURIsDecoded0?.append(string0)
                }
            }
        }
        redirectSignOutURIs = redirectSignOutURIsDecoded0
        let socialProviderSettingsDecoded = try containerValues.decodeIfPresent(AmplifyBackendClientTypes.SocialProviderSettings.self, forKey: .socialProviderSettings)
        socialProviderSettings = socialProviderSettingsDecoded
    }
}
