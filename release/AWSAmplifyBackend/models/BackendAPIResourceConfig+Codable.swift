// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AmplifyBackendClientTypes.BackendAPIResourceConfig: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case additionalAuthTypes = "additionalAuthTypes"
        case apiName = "apiName"
        case conflictResolution = "conflictResolution"
        case defaultAuthType = "defaultAuthType"
        case service = "service"
        case transformSchema = "transformSchema"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let additionalAuthTypes = additionalAuthTypes {
            var additionalAuthTypesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .additionalAuthTypes)
            for listofbackendapiauthtype0 in additionalAuthTypes {
                try additionalAuthTypesContainer.encode(listofbackendapiauthtype0)
            }
        }
        if let apiName = self.apiName {
            try encodeContainer.encode(apiName, forKey: .apiName)
        }
        if let conflictResolution = self.conflictResolution {
            try encodeContainer.encode(conflictResolution, forKey: .conflictResolution)
        }
        if let defaultAuthType = self.defaultAuthType {
            try encodeContainer.encode(defaultAuthType, forKey: .defaultAuthType)
        }
        if let service = self.service {
            try encodeContainer.encode(service, forKey: .service)
        }
        if let transformSchema = self.transformSchema {
            try encodeContainer.encode(transformSchema, forKey: .transformSchema)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let additionalAuthTypesContainer = try containerValues.decodeIfPresent([AmplifyBackendClientTypes.BackendAPIAuthType?].self, forKey: .additionalAuthTypes)
        var additionalAuthTypesDecoded0:[AmplifyBackendClientTypes.BackendAPIAuthType]? = nil
        if let additionalAuthTypesContainer = additionalAuthTypesContainer {
            additionalAuthTypesDecoded0 = [AmplifyBackendClientTypes.BackendAPIAuthType]()
            for structure0 in additionalAuthTypesContainer {
                if let structure0 = structure0 {
                    additionalAuthTypesDecoded0?.append(structure0)
                }
            }
        }
        additionalAuthTypes = additionalAuthTypesDecoded0
        let apiNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .apiName)
        apiName = apiNameDecoded
        let conflictResolutionDecoded = try containerValues.decodeIfPresent(AmplifyBackendClientTypes.BackendAPIConflictResolution.self, forKey: .conflictResolution)
        conflictResolution = conflictResolutionDecoded
        let defaultAuthTypeDecoded = try containerValues.decodeIfPresent(AmplifyBackendClientTypes.BackendAPIAuthType.self, forKey: .defaultAuthType)
        defaultAuthType = defaultAuthTypeDecoded
        let serviceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .service)
        service = serviceDecoded
        let transformSchemaDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .transformSchema)
        transformSchema = transformSchemaDecoded
    }
}
