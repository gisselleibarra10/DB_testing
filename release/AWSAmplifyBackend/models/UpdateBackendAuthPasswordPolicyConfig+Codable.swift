// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AmplifyBackendClientTypes.UpdateBackendAuthPasswordPolicyConfig: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case additionalConstraints = "additionalConstraints"
        case minimumLength = "minimumLength"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let additionalConstraints = additionalConstraints {
            var additionalConstraintsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .additionalConstraints)
            for listofadditionalconstraintselement0 in additionalConstraints {
                try additionalConstraintsContainer.encode(listofadditionalconstraintselement0.rawValue)
            }
        }
        if let minimumLength = self.minimumLength {
            try encodeContainer.encode(minimumLength, forKey: .minimumLength)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let additionalConstraintsContainer = try containerValues.decodeIfPresent([AmplifyBackendClientTypes.AdditionalConstraintsElement?].self, forKey: .additionalConstraints)
        var additionalConstraintsDecoded0:[AmplifyBackendClientTypes.AdditionalConstraintsElement]? = nil
        if let additionalConstraintsContainer = additionalConstraintsContainer {
            additionalConstraintsDecoded0 = [AmplifyBackendClientTypes.AdditionalConstraintsElement]()
            for string0 in additionalConstraintsContainer {
                if let string0 = string0 {
                    additionalConstraintsDecoded0?.append(string0)
                }
            }
        }
        additionalConstraints = additionalConstraintsDecoded0
        let minimumLengthDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .minimumLength)
        minimumLength = minimumLengthDecoded
    }
}
