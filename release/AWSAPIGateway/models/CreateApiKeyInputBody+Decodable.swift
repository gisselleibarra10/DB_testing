// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateApiKeyInputBody: Swift.Equatable {
    let name: Swift.String?
    let description: Swift.String?
    let enabled: Swift.Bool
    let generateDistinctId: Swift.Bool
    let value: Swift.String?
    let stageKeys: [ApiGatewayClientTypes.StageKey]?
    let customerId: Swift.String?
    let tags: [Swift.String:Swift.String]?
}

extension CreateApiKeyInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case customerId
        case description
        case enabled
        case generateDistinctId
        case name
        case stageKeys
        case tags
        case value
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let enabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enabled) ?? false
        enabled = enabledDecoded
        let generateDistinctIdDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .generateDistinctId) ?? false
        generateDistinctId = generateDistinctIdDecoded
        let valueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .value)
        value = valueDecoded
        let stageKeysContainer = try containerValues.decodeIfPresent([ApiGatewayClientTypes.StageKey?].self, forKey: .stageKeys)
        var stageKeysDecoded0:[ApiGatewayClientTypes.StageKey]? = nil
        if let stageKeysContainer = stageKeysContainer {
            stageKeysDecoded0 = [ApiGatewayClientTypes.StageKey]()
            for structure0 in stageKeysContainer {
                if let structure0 = structure0 {
                    stageKeysDecoded0?.append(structure0)
                }
            }
        }
        stageKeys = stageKeysDecoded0
        let customerIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .customerId)
        customerId = customerIdDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, string0) in tagsContainer {
                if let string0 = string0 {
                    tagsDecoded0?[key0] = string0
                }
            }
        }
        tags = tagsDecoded0
    }
}
