// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ApiGatewayClientTypes.DomainName: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case certificateArn
        case certificateName
        case certificateUploadDate
        case distributionDomainName
        case distributionHostedZoneId
        case domainName
        case domainNameStatus
        case domainNameStatusMessage
        case endpointConfiguration
        case mutualTlsAuthentication
        case ownershipVerificationCertificateArn
        case regionalCertificateArn
        case regionalCertificateName
        case regionalDomainName
        case regionalHostedZoneId
        case securityPolicy
        case tags
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let certificateArn = self.certificateArn {
            try encodeContainer.encode(certificateArn, forKey: .certificateArn)
        }
        if let certificateName = self.certificateName {
            try encodeContainer.encode(certificateName, forKey: .certificateName)
        }
        if let certificateUploadDate = self.certificateUploadDate {
            try encodeContainer.encode(certificateUploadDate.timeIntervalSince1970, forKey: .certificateUploadDate)
        }
        if let distributionDomainName = self.distributionDomainName {
            try encodeContainer.encode(distributionDomainName, forKey: .distributionDomainName)
        }
        if let distributionHostedZoneId = self.distributionHostedZoneId {
            try encodeContainer.encode(distributionHostedZoneId, forKey: .distributionHostedZoneId)
        }
        if let domainName = self.domainName {
            try encodeContainer.encode(domainName, forKey: .domainName)
        }
        if let domainNameStatus = self.domainNameStatus {
            try encodeContainer.encode(domainNameStatus.rawValue, forKey: .domainNameStatus)
        }
        if let domainNameStatusMessage = self.domainNameStatusMessage {
            try encodeContainer.encode(domainNameStatusMessage, forKey: .domainNameStatusMessage)
        }
        if let endpointConfiguration = self.endpointConfiguration {
            try encodeContainer.encode(endpointConfiguration, forKey: .endpointConfiguration)
        }
        if let mutualTlsAuthentication = self.mutualTlsAuthentication {
            try encodeContainer.encode(mutualTlsAuthentication, forKey: .mutualTlsAuthentication)
        }
        if let ownershipVerificationCertificateArn = self.ownershipVerificationCertificateArn {
            try encodeContainer.encode(ownershipVerificationCertificateArn, forKey: .ownershipVerificationCertificateArn)
        }
        if let regionalCertificateArn = self.regionalCertificateArn {
            try encodeContainer.encode(regionalCertificateArn, forKey: .regionalCertificateArn)
        }
        if let regionalCertificateName = self.regionalCertificateName {
            try encodeContainer.encode(regionalCertificateName, forKey: .regionalCertificateName)
        }
        if let regionalDomainName = self.regionalDomainName {
            try encodeContainer.encode(regionalDomainName, forKey: .regionalDomainName)
        }
        if let regionalHostedZoneId = self.regionalHostedZoneId {
            try encodeContainer.encode(regionalHostedZoneId, forKey: .regionalHostedZoneId)
        }
        if let securityPolicy = self.securityPolicy {
            try encodeContainer.encode(securityPolicy.rawValue, forKey: .securityPolicy)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, mapofstringtostring0) in tags {
                try tagsContainer.encode(mapofstringtostring0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domainName)
        domainName = domainNameDecoded
        let certificateNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .certificateName)
        certificateName = certificateNameDecoded
        let certificateArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .certificateArn)
        certificateArn = certificateArnDecoded
        let certificateUploadDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .certificateUploadDate)
        certificateUploadDate = certificateUploadDateDecoded
        let regionalDomainNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .regionalDomainName)
        regionalDomainName = regionalDomainNameDecoded
        let regionalHostedZoneIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .regionalHostedZoneId)
        regionalHostedZoneId = regionalHostedZoneIdDecoded
        let regionalCertificateNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .regionalCertificateName)
        regionalCertificateName = regionalCertificateNameDecoded
        let regionalCertificateArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .regionalCertificateArn)
        regionalCertificateArn = regionalCertificateArnDecoded
        let distributionDomainNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .distributionDomainName)
        distributionDomainName = distributionDomainNameDecoded
        let distributionHostedZoneIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .distributionHostedZoneId)
        distributionHostedZoneId = distributionHostedZoneIdDecoded
        let endpointConfigurationDecoded = try containerValues.decodeIfPresent(ApiGatewayClientTypes.EndpointConfiguration.self, forKey: .endpointConfiguration)
        endpointConfiguration = endpointConfigurationDecoded
        let domainNameStatusDecoded = try containerValues.decodeIfPresent(ApiGatewayClientTypes.DomainNameStatus.self, forKey: .domainNameStatus)
        domainNameStatus = domainNameStatusDecoded
        let domainNameStatusMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domainNameStatusMessage)
        domainNameStatusMessage = domainNameStatusMessageDecoded
        let securityPolicyDecoded = try containerValues.decodeIfPresent(ApiGatewayClientTypes.SecurityPolicy.self, forKey: .securityPolicy)
        securityPolicy = securityPolicyDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, string0) in tagsContainer {
                if let string0 = string0 {
                    tagsDecoded0?[key0] = string0
                }
            }
        }
        tags = tagsDecoded0
        let mutualTlsAuthenticationDecoded = try containerValues.decodeIfPresent(ApiGatewayClientTypes.MutualTlsAuthentication.self, forKey: .mutualTlsAuthentication)
        mutualTlsAuthentication = mutualTlsAuthenticationDecoded
        let ownershipVerificationCertificateArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ownershipVerificationCertificateArn)
        ownershipVerificationCertificateArn = ownershipVerificationCertificateArnDecoded
    }
}
