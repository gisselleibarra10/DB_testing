// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct TestInvokeMethodOutputResponseBody: Swift.Equatable {
    let status: Swift.Int
    let body: Swift.String?
    let headers: [Swift.String:Swift.String]?
    let multiValueHeaders: [Swift.String:[Swift.String]]?
    let log: Swift.String?
    let latency: Swift.Int
}

extension TestInvokeMethodOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case body
        case headers
        case latency
        case log
        case multiValueHeaders
        case status
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statusDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .status) ?? 0
        status = statusDecoded
        let bodyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .body)
        body = bodyDecoded
        let headersContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .headers)
        var headersDecoded0: [Swift.String:Swift.String]? = nil
        if let headersContainer = headersContainer {
            headersDecoded0 = [Swift.String:Swift.String]()
            for (key0, string0) in headersContainer {
                if let string0 = string0 {
                    headersDecoded0?[key0] = string0
                }
            }
        }
        headers = headersDecoded0
        let multiValueHeadersContainer = try containerValues.decodeIfPresent([Swift.String: [Swift.String?]?].self, forKey: .multiValueHeaders)
        var multiValueHeadersDecoded0: [Swift.String:[Swift.String]]? = nil
        if let multiValueHeadersContainer = multiValueHeadersContainer {
            multiValueHeadersDecoded0 = [Swift.String:[Swift.String]]()
            for (key0, listofstring0) in multiValueHeadersContainer {
                var listofstring0Decoded0: [Swift.String]? = nil
                if let listofstring0 = listofstring0 {
                    listofstring0Decoded0 = [Swift.String]()
                    for string1 in listofstring0 {
                        if let string1 = string1 {
                            listofstring0Decoded0?.append(string1)
                        }
                    }
                }
                multiValueHeadersDecoded0?[key0] = listofstring0Decoded0
            }
        }
        multiValueHeaders = multiValueHeadersDecoded0
        let logDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .log)
        log = logDecoded
        let latencyDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .latency) ?? 0
        latency = latencyDecoded
    }
}
