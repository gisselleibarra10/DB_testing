// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension TestInvokeAuthorizerInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case additionalContext
        case body
        case headers
        case multiValueHeaders
        case pathWithQueryString
        case stageVariables
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let additionalContext = additionalContext {
            var additionalContextContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .additionalContext)
            for (dictKey0, mapofstringtostring0) in additionalContext {
                try additionalContextContainer.encode(mapofstringtostring0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let body = self.body {
            try encodeContainer.encode(body, forKey: .body)
        }
        if let headers = headers {
            var headersContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .headers)
            for (dictKey0, mapofstringtostring0) in headers {
                try headersContainer.encode(mapofstringtostring0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let multiValueHeaders = multiValueHeaders {
            var multiValueHeadersContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .multiValueHeaders)
            for (dictKey0, mapofstringtolist0) in multiValueHeaders {
                try multiValueHeadersContainer.encode(mapofstringtolist0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let pathWithQueryString = self.pathWithQueryString {
            try encodeContainer.encode(pathWithQueryString, forKey: .pathWithQueryString)
        }
        if let stageVariables = stageVariables {
            var stageVariablesContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .stageVariables)
            for (dictKey0, mapofstringtostring0) in stageVariables {
                try stageVariablesContainer.encode(mapofstringtostring0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }
}
