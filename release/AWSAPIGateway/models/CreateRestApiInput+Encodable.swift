// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CreateRestApiInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case apiKeySource
        case binaryMediaTypes
        case cloneFrom
        case description
        case disableExecuteApiEndpoint
        case endpointConfiguration
        case minimumCompressionSize
        case name
        case policy
        case tags
        case version
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let apiKeySource = self.apiKeySource {
            try encodeContainer.encode(apiKeySource.rawValue, forKey: .apiKeySource)
        }
        if let binaryMediaTypes = binaryMediaTypes {
            var binaryMediaTypesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .binaryMediaTypes)
            for listofstring0 in binaryMediaTypes {
                try binaryMediaTypesContainer.encode(listofstring0)
            }
        }
        if let cloneFrom = self.cloneFrom {
            try encodeContainer.encode(cloneFrom, forKey: .cloneFrom)
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if disableExecuteApiEndpoint != false {
            try encodeContainer.encode(disableExecuteApiEndpoint, forKey: .disableExecuteApiEndpoint)
        }
        if let endpointConfiguration = self.endpointConfiguration {
            try encodeContainer.encode(endpointConfiguration, forKey: .endpointConfiguration)
        }
        if let minimumCompressionSize = self.minimumCompressionSize {
            try encodeContainer.encode(minimumCompressionSize, forKey: .minimumCompressionSize)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let policy = self.policy {
            try encodeContainer.encode(policy, forKey: .policy)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, mapofstringtostring0) in tags {
                try tagsContainer.encode(mapofstringtostring0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let version = self.version {
            try encodeContainer.encode(version, forKey: .version)
        }
    }
}
