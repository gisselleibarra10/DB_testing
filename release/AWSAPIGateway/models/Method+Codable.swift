// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ApiGatewayClientTypes.Method: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case apiKeyRequired
        case authorizationScopes
        case authorizationType
        case authorizerId
        case httpMethod
        case methodIntegration
        case methodResponses
        case operationName
        case requestModels
        case requestParameters
        case requestValidatorId
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let apiKeyRequired = self.apiKeyRequired {
            try encodeContainer.encode(apiKeyRequired, forKey: .apiKeyRequired)
        }
        if let authorizationScopes = authorizationScopes {
            var authorizationScopesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .authorizationScopes)
            for listofstring0 in authorizationScopes {
                try authorizationScopesContainer.encode(listofstring0)
            }
        }
        if let authorizationType = self.authorizationType {
            try encodeContainer.encode(authorizationType, forKey: .authorizationType)
        }
        if let authorizerId = self.authorizerId {
            try encodeContainer.encode(authorizerId, forKey: .authorizerId)
        }
        if let httpMethod = self.httpMethod {
            try encodeContainer.encode(httpMethod, forKey: .httpMethod)
        }
        if let methodIntegration = self.methodIntegration {
            try encodeContainer.encode(methodIntegration, forKey: .methodIntegration)
        }
        if let methodResponses = methodResponses {
            var methodResponsesContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .methodResponses)
            for (dictKey0, mapofmethodresponse0) in methodResponses {
                try methodResponsesContainer.encode(mapofmethodresponse0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let operationName = self.operationName {
            try encodeContainer.encode(operationName, forKey: .operationName)
        }
        if let requestModels = requestModels {
            var requestModelsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .requestModels)
            for (dictKey0, mapofstringtostring0) in requestModels {
                try requestModelsContainer.encode(mapofstringtostring0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let requestParameters = requestParameters {
            var requestParametersContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .requestParameters)
            for (dictKey0, mapofstringtoboolean0) in requestParameters {
                try requestParametersContainer.encode(mapofstringtoboolean0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let requestValidatorId = self.requestValidatorId {
            try encodeContainer.encode(requestValidatorId, forKey: .requestValidatorId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let httpMethodDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .httpMethod)
        httpMethod = httpMethodDecoded
        let authorizationTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .authorizationType)
        authorizationType = authorizationTypeDecoded
        let authorizerIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .authorizerId)
        authorizerId = authorizerIdDecoded
        let apiKeyRequiredDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .apiKeyRequired)
        apiKeyRequired = apiKeyRequiredDecoded
        let requestValidatorIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .requestValidatorId)
        requestValidatorId = requestValidatorIdDecoded
        let operationNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .operationName)
        operationName = operationNameDecoded
        let requestParametersContainer = try containerValues.decodeIfPresent([Swift.String: Swift.Bool?].self, forKey: .requestParameters)
        var requestParametersDecoded0: [Swift.String:Swift.Bool]? = nil
        if let requestParametersContainer = requestParametersContainer {
            requestParametersDecoded0 = [Swift.String:Swift.Bool]()
            for (key0, nullableboolean0) in requestParametersContainer {
                if let nullableboolean0 = nullableboolean0 {
                    requestParametersDecoded0?[key0] = nullableboolean0
                }
            }
        }
        requestParameters = requestParametersDecoded0
        let requestModelsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .requestModels)
        var requestModelsDecoded0: [Swift.String:Swift.String]? = nil
        if let requestModelsContainer = requestModelsContainer {
            requestModelsDecoded0 = [Swift.String:Swift.String]()
            for (key0, string0) in requestModelsContainer {
                if let string0 = string0 {
                    requestModelsDecoded0?[key0] = string0
                }
            }
        }
        requestModels = requestModelsDecoded0
        let methodResponsesContainer = try containerValues.decodeIfPresent([Swift.String: ApiGatewayClientTypes.MethodResponse?].self, forKey: .methodResponses)
        var methodResponsesDecoded0: [Swift.String:ApiGatewayClientTypes.MethodResponse]? = nil
        if let methodResponsesContainer = methodResponsesContainer {
            methodResponsesDecoded0 = [Swift.String:ApiGatewayClientTypes.MethodResponse]()
            for (key0, methodresponse0) in methodResponsesContainer {
                if let methodresponse0 = methodresponse0 {
                    methodResponsesDecoded0?[key0] = methodresponse0
                }
            }
        }
        methodResponses = methodResponsesDecoded0
        let methodIntegrationDecoded = try containerValues.decodeIfPresent(ApiGatewayClientTypes.Integration.self, forKey: .methodIntegration)
        methodIntegration = methodIntegrationDecoded
        let authorizationScopesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .authorizationScopes)
        var authorizationScopesDecoded0:[Swift.String]? = nil
        if let authorizationScopesContainer = authorizationScopesContainer {
            authorizationScopesDecoded0 = [Swift.String]()
            for string0 in authorizationScopesContainer {
                if let string0 = string0 {
                    authorizationScopesDecoded0?.append(string0)
                }
            }
        }
        authorizationScopes = authorizationScopesDecoded0
    }
}
