// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ApiGatewayClientTypes.UsagePlan: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case apiStages
        case description
        case id
        case name
        case productCode
        case quota
        case tags
        case throttle
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let apiStages = apiStages {
            var apiStagesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .apiStages)
            for listofapistage0 in apiStages {
                try apiStagesContainer.encode(listofapistage0)
            }
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let productCode = self.productCode {
            try encodeContainer.encode(productCode, forKey: .productCode)
        }
        if let quota = self.quota {
            try encodeContainer.encode(quota, forKey: .quota)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, mapofstringtostring0) in tags {
                try tagsContainer.encode(mapofstringtostring0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let throttle = self.throttle {
            try encodeContainer.encode(throttle, forKey: .throttle)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let apiStagesContainer = try containerValues.decodeIfPresent([ApiGatewayClientTypes.ApiStage?].self, forKey: .apiStages)
        var apiStagesDecoded0:[ApiGatewayClientTypes.ApiStage]? = nil
        if let apiStagesContainer = apiStagesContainer {
            apiStagesDecoded0 = [ApiGatewayClientTypes.ApiStage]()
            for structure0 in apiStagesContainer {
                if let structure0 = structure0 {
                    apiStagesDecoded0?.append(structure0)
                }
            }
        }
        apiStages = apiStagesDecoded0
        let throttleDecoded = try containerValues.decodeIfPresent(ApiGatewayClientTypes.ThrottleSettings.self, forKey: .throttle)
        throttle = throttleDecoded
        let quotaDecoded = try containerValues.decodeIfPresent(ApiGatewayClientTypes.QuotaSettings.self, forKey: .quota)
        quota = quotaDecoded
        let productCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .productCode)
        productCode = productCodeDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, string0) in tagsContainer {
                if let string0 = string0 {
                    tagsDecoded0?[key0] = string0
                }
            }
        }
        tags = tagsDecoded0
    }
}
