// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// Sets up a method's integration.
public struct PutIntegrationInput: Swift.Equatable {
    /// A list of request parameters whose values API Gateway caches. To be valid values for cacheKeyParameters, these parameters must also be specified for Method requestParameters.
    public var cacheKeyParameters: [Swift.String]?
    /// Specifies a group of related cached parameters. By default, API Gateway uses the resource ID as the cacheNamespace. You can specify the same cacheNamespace across resources to return the same cached data for requests to different resources.
    public var cacheNamespace: Swift.String?
    /// The ID of the VpcLink used for the integration. Specify this value only if you specify VPC_LINK as the connection type.
    public var connectionId: Swift.String?
    /// The type of the network connection to the integration endpoint. The valid value is INTERNET for connections through the public routable internet or VPC_LINK for private connections between API Gateway and a network load balancer in a VPC. The default value is INTERNET.
    public var connectionType: ApiGatewayClientTypes.ConnectionType?
    /// Specifies how to handle request payload content type conversions. Supported values are CONVERT_TO_BINARY and CONVERT_TO_TEXT, with the following behaviors: If this property is not defined, the request payload will be passed through from the method request to integration request without modification, provided that the passthroughBehavior is configured to support payload pass-through.
    public var contentHandling: ApiGatewayClientTypes.ContentHandlingStrategy?
    /// Specifies whether credentials are required for a put integration.
    public var credentials: Swift.String?
    /// Specifies the HTTP method for the integration.
    /// This member is required.
    public var httpMethod: Swift.String?
    /// The HTTP method for the integration.
    public var integrationHttpMethod: Swift.String?
    /// Specifies the pass-through behavior for incoming requests based on the Content-Type header in the request, and the available mapping templates specified as the requestTemplates property on the Integration resource. There are three valid values: WHEN_NO_MATCH, WHEN_NO_TEMPLATES, and NEVER.
    public var passthroughBehavior: Swift.String?
    /// A key-value map specifying request parameters that are passed from the method request to the back end. The key is an integration request parameter name and the associated value is a method request parameter value or static value that must be enclosed within single quotes and pre-encoded as required by the back end. The method request parameter value must match the pattern of method.request.{location}.{name}, where location is querystring, path, or header and name must be a valid and unique method request parameter name.
    public var requestParameters: [Swift.String:Swift.String]?
    /// Represents a map of Velocity templates that are applied on the request payload based on the value of the Content-Type header sent by the client. The content type value is the key in this map, and the template (as a String) is the value.
    public var requestTemplates: [Swift.String:Swift.String]?
    /// Specifies a put integration request's resource ID.
    /// This member is required.
    public var resourceId: Swift.String?
    /// The string identifier of the associated RestApi.
    /// This member is required.
    public var restApiId: Swift.String?
    /// Custom timeout between 50 and 29,000 milliseconds. The default value is 29,000 milliseconds or 29 seconds.
    public var timeoutInMillis: Swift.Int?
    /// Specifies the TLS configuration for an integration.
    public var tlsConfig: ApiGatewayClientTypes.TlsConfig?
    /// Specifies a put integration input's type.
    /// This member is required.
    public var type: ApiGatewayClientTypes.IntegrationType?
    /// Specifies Uniform Resource Identifier (URI) of the integration endpoint. For HTTP or HTTP_PROXY integrations, the URI must be a fully formed, encoded HTTP(S) URL according to the RFC-3986 specification, for either standard integration, where connectionType is not VPC_LINK, or private integration, where connectionType is VPC_LINK. For a private HTTP integration, the URI is not used for routing. For AWS or AWS_PROXY integrations, the URI is of the form arn:aws:apigateway:{region}:{subdomain.service|service}:path|action/{service_api}. Here, {Region} is the API Gateway region (e.g., us-east-1); {service} is the name of the integrated Amazon Web Services service (e.g., s3); and {subdomain} is a designated subdomain supported by certain Amazon Web Services service for fast host-name lookup. action can be used for an Amazon Web Services service action-based API, using an Action={name}&{p1}={v1}&p2={v2}... query string. The ensuing {service_api} refers to a supported action {name} plus any required input parameters. Alternatively, path can be used for an Amazon Web Services service path-based API. The ensuing service_api refers to the path to an Amazon Web Services service resource, including the region of the integrated Amazon Web Services service, if applicable. For example, for integration with the S3 API of GetObject, the uri can be either arn:aws:apigateway:us-west-2:s3:action/GetObject&Bucket={bucket}&Key={key} or arn:aws:apigateway:us-west-2:s3:path/{bucket}/{key}.
    public var uri: Swift.String?

    public init (
        cacheKeyParameters: [Swift.String]? = nil,
        cacheNamespace: Swift.String? = nil,
        connectionId: Swift.String? = nil,
        connectionType: ApiGatewayClientTypes.ConnectionType? = nil,
        contentHandling: ApiGatewayClientTypes.ContentHandlingStrategy? = nil,
        credentials: Swift.String? = nil,
        httpMethod: Swift.String? = nil,
        integrationHttpMethod: Swift.String? = nil,
        passthroughBehavior: Swift.String? = nil,
        requestParameters: [Swift.String:Swift.String]? = nil,
        requestTemplates: [Swift.String:Swift.String]? = nil,
        resourceId: Swift.String? = nil,
        restApiId: Swift.String? = nil,
        timeoutInMillis: Swift.Int? = nil,
        tlsConfig: ApiGatewayClientTypes.TlsConfig? = nil,
        type: ApiGatewayClientTypes.IntegrationType? = nil,
        uri: Swift.String? = nil
    )
    {
        self.cacheKeyParameters = cacheKeyParameters
        self.cacheNamespace = cacheNamespace
        self.connectionId = connectionId
        self.connectionType = connectionType
        self.contentHandling = contentHandling
        self.credentials = credentials
        self.httpMethod = httpMethod
        self.integrationHttpMethod = integrationHttpMethod
        self.passthroughBehavior = passthroughBehavior
        self.requestParameters = requestParameters
        self.requestTemplates = requestTemplates
        self.resourceId = resourceId
        self.restApiId = restApiId
        self.timeoutInMillis = timeoutInMillis
        self.tlsConfig = tlsConfig
        self.type = type
        self.uri = uri
    }
}
