// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ApiGatewayClientTypes.Integration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cacheKeyParameters
        case cacheNamespace
        case connectionId
        case connectionType
        case contentHandling
        case credentials
        case httpMethod
        case integrationResponses
        case passthroughBehavior
        case requestParameters
        case requestTemplates
        case timeoutInMillis
        case tlsConfig
        case type
        case uri
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cacheKeyParameters = cacheKeyParameters {
            var cacheKeyParametersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .cacheKeyParameters)
            for listofstring0 in cacheKeyParameters {
                try cacheKeyParametersContainer.encode(listofstring0)
            }
        }
        if let cacheNamespace = self.cacheNamespace {
            try encodeContainer.encode(cacheNamespace, forKey: .cacheNamespace)
        }
        if let connectionId = self.connectionId {
            try encodeContainer.encode(connectionId, forKey: .connectionId)
        }
        if let connectionType = self.connectionType {
            try encodeContainer.encode(connectionType.rawValue, forKey: .connectionType)
        }
        if let contentHandling = self.contentHandling {
            try encodeContainer.encode(contentHandling.rawValue, forKey: .contentHandling)
        }
        if let credentials = self.credentials {
            try encodeContainer.encode(credentials, forKey: .credentials)
        }
        if let httpMethod = self.httpMethod {
            try encodeContainer.encode(httpMethod, forKey: .httpMethod)
        }
        if let integrationResponses = integrationResponses {
            var integrationResponsesContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .integrationResponses)
            for (dictKey0, mapofintegrationresponse0) in integrationResponses {
                try integrationResponsesContainer.encode(mapofintegrationresponse0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let passthroughBehavior = self.passthroughBehavior {
            try encodeContainer.encode(passthroughBehavior, forKey: .passthroughBehavior)
        }
        if let requestParameters = requestParameters {
            var requestParametersContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .requestParameters)
            for (dictKey0, mapofstringtostring0) in requestParameters {
                try requestParametersContainer.encode(mapofstringtostring0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let requestTemplates = requestTemplates {
            var requestTemplatesContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .requestTemplates)
            for (dictKey0, mapofstringtostring0) in requestTemplates {
                try requestTemplatesContainer.encode(mapofstringtostring0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if timeoutInMillis != 0 {
            try encodeContainer.encode(timeoutInMillis, forKey: .timeoutInMillis)
        }
        if let tlsConfig = self.tlsConfig {
            try encodeContainer.encode(tlsConfig, forKey: .tlsConfig)
        }
        if let type = self.type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
        if let uri = self.uri {
            try encodeContainer.encode(uri, forKey: .uri)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let typeDecoded = try containerValues.decodeIfPresent(ApiGatewayClientTypes.IntegrationType.self, forKey: .type)
        type = typeDecoded
        let httpMethodDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .httpMethod)
        httpMethod = httpMethodDecoded
        let uriDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .uri)
        uri = uriDecoded
        let connectionTypeDecoded = try containerValues.decodeIfPresent(ApiGatewayClientTypes.ConnectionType.self, forKey: .connectionType)
        connectionType = connectionTypeDecoded
        let connectionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .connectionId)
        connectionId = connectionIdDecoded
        let credentialsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .credentials)
        credentials = credentialsDecoded
        let requestParametersContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .requestParameters)
        var requestParametersDecoded0: [Swift.String:Swift.String]? = nil
        if let requestParametersContainer = requestParametersContainer {
            requestParametersDecoded0 = [Swift.String:Swift.String]()
            for (key0, string0) in requestParametersContainer {
                if let string0 = string0 {
                    requestParametersDecoded0?[key0] = string0
                }
            }
        }
        requestParameters = requestParametersDecoded0
        let requestTemplatesContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .requestTemplates)
        var requestTemplatesDecoded0: [Swift.String:Swift.String]? = nil
        if let requestTemplatesContainer = requestTemplatesContainer {
            requestTemplatesDecoded0 = [Swift.String:Swift.String]()
            for (key0, string0) in requestTemplatesContainer {
                if let string0 = string0 {
                    requestTemplatesDecoded0?[key0] = string0
                }
            }
        }
        requestTemplates = requestTemplatesDecoded0
        let passthroughBehaviorDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .passthroughBehavior)
        passthroughBehavior = passthroughBehaviorDecoded
        let contentHandlingDecoded = try containerValues.decodeIfPresent(ApiGatewayClientTypes.ContentHandlingStrategy.self, forKey: .contentHandling)
        contentHandling = contentHandlingDecoded
        let timeoutInMillisDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .timeoutInMillis) ?? 0
        timeoutInMillis = timeoutInMillisDecoded
        let cacheNamespaceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cacheNamespace)
        cacheNamespace = cacheNamespaceDecoded
        let cacheKeyParametersContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .cacheKeyParameters)
        var cacheKeyParametersDecoded0:[Swift.String]? = nil
        if let cacheKeyParametersContainer = cacheKeyParametersContainer {
            cacheKeyParametersDecoded0 = [Swift.String]()
            for string0 in cacheKeyParametersContainer {
                if let string0 = string0 {
                    cacheKeyParametersDecoded0?.append(string0)
                }
            }
        }
        cacheKeyParameters = cacheKeyParametersDecoded0
        let integrationResponsesContainer = try containerValues.decodeIfPresent([Swift.String: ApiGatewayClientTypes.IntegrationResponse?].self, forKey: .integrationResponses)
        var integrationResponsesDecoded0: [Swift.String:ApiGatewayClientTypes.IntegrationResponse]? = nil
        if let integrationResponsesContainer = integrationResponsesContainer {
            integrationResponsesDecoded0 = [Swift.String:ApiGatewayClientTypes.IntegrationResponse]()
            for (key0, integrationresponse0) in integrationResponsesContainer {
                if let integrationresponse0 = integrationresponse0 {
                    integrationResponsesDecoded0?[key0] = integrationresponse0
                }
            }
        }
        integrationResponses = integrationResponsesDecoded0
        let tlsConfigDecoded = try containerValues.decodeIfPresent(ApiGatewayClientTypes.TlsConfig.self, forKey: .tlsConfig)
        tlsConfig = tlsConfigDecoded
    }
}
