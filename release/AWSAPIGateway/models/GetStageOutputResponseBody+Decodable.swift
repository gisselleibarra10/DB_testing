// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetStageOutputResponseBody: Swift.Equatable {
    let deploymentId: Swift.String?
    let clientCertificateId: Swift.String?
    let stageName: Swift.String?
    let description: Swift.String?
    let cacheClusterEnabled: Swift.Bool
    let cacheClusterSize: ApiGatewayClientTypes.CacheClusterSize?
    let cacheClusterStatus: ApiGatewayClientTypes.CacheClusterStatus?
    let methodSettings: [Swift.String:ApiGatewayClientTypes.MethodSetting]?
    let variables: [Swift.String:Swift.String]?
    let documentationVersion: Swift.String?
    let accessLogSettings: ApiGatewayClientTypes.AccessLogSettings?
    let canarySettings: ApiGatewayClientTypes.CanarySettings?
    let tracingEnabled: Swift.Bool
    let webAclArn: Swift.String?
    let tags: [Swift.String:Swift.String]?
    let createdDate: ClientRuntime.Date?
    let lastUpdatedDate: ClientRuntime.Date?
}

extension GetStageOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accessLogSettings
        case cacheClusterEnabled
        case cacheClusterSize
        case cacheClusterStatus
        case canarySettings
        case clientCertificateId
        case createdDate
        case deploymentId
        case description
        case documentationVersion
        case lastUpdatedDate
        case methodSettings
        case stageName
        case tags
        case tracingEnabled
        case variables
        case webAclArn
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deploymentIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deploymentId)
        deploymentId = deploymentIdDecoded
        let clientCertificateIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientCertificateId)
        clientCertificateId = clientCertificateIdDecoded
        let stageNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stageName)
        stageName = stageNameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let cacheClusterEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .cacheClusterEnabled) ?? false
        cacheClusterEnabled = cacheClusterEnabledDecoded
        let cacheClusterSizeDecoded = try containerValues.decodeIfPresent(ApiGatewayClientTypes.CacheClusterSize.self, forKey: .cacheClusterSize)
        cacheClusterSize = cacheClusterSizeDecoded
        let cacheClusterStatusDecoded = try containerValues.decodeIfPresent(ApiGatewayClientTypes.CacheClusterStatus.self, forKey: .cacheClusterStatus)
        cacheClusterStatus = cacheClusterStatusDecoded
        let methodSettingsContainer = try containerValues.decodeIfPresent([Swift.String: ApiGatewayClientTypes.MethodSetting?].self, forKey: .methodSettings)
        var methodSettingsDecoded0: [Swift.String:ApiGatewayClientTypes.MethodSetting]? = nil
        if let methodSettingsContainer = methodSettingsContainer {
            methodSettingsDecoded0 = [Swift.String:ApiGatewayClientTypes.MethodSetting]()
            for (key0, methodsetting0) in methodSettingsContainer {
                if let methodsetting0 = methodsetting0 {
                    methodSettingsDecoded0?[key0] = methodsetting0
                }
            }
        }
        methodSettings = methodSettingsDecoded0
        let variablesContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .variables)
        var variablesDecoded0: [Swift.String:Swift.String]? = nil
        if let variablesContainer = variablesContainer {
            variablesDecoded0 = [Swift.String:Swift.String]()
            for (key0, string0) in variablesContainer {
                if let string0 = string0 {
                    variablesDecoded0?[key0] = string0
                }
            }
        }
        variables = variablesDecoded0
        let documentationVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .documentationVersion)
        documentationVersion = documentationVersionDecoded
        let accessLogSettingsDecoded = try containerValues.decodeIfPresent(ApiGatewayClientTypes.AccessLogSettings.self, forKey: .accessLogSettings)
        accessLogSettings = accessLogSettingsDecoded
        let canarySettingsDecoded = try containerValues.decodeIfPresent(ApiGatewayClientTypes.CanarySettings.self, forKey: .canarySettings)
        canarySettings = canarySettingsDecoded
        let tracingEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .tracingEnabled) ?? false
        tracingEnabled = tracingEnabledDecoded
        let webAclArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .webAclArn)
        webAclArn = webAclArnDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, string0) in tagsContainer {
                if let string0 = string0 {
                    tagsDecoded0?[key0] = string0
                }
            }
        }
        tags = tagsDecoded0
        let createdDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdDate)
        createdDate = createdDateDecoded
        let lastUpdatedDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastUpdatedDate)
        lastUpdatedDate = lastUpdatedDateDecoded
    }
}
