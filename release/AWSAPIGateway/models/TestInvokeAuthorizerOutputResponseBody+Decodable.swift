// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct TestInvokeAuthorizerOutputResponseBody: Swift.Equatable {
    let clientStatus: Swift.Int
    let log: Swift.String?
    let latency: Swift.Int
    let principalId: Swift.String?
    let policy: Swift.String?
    let authorization: [Swift.String:[Swift.String]]?
    let claims: [Swift.String:Swift.String]?
}

extension TestInvokeAuthorizerOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case authorization
        case claims
        case clientStatus
        case latency
        case log
        case policy
        case principalId
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clientStatusDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .clientStatus) ?? 0
        clientStatus = clientStatusDecoded
        let logDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .log)
        log = logDecoded
        let latencyDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .latency) ?? 0
        latency = latencyDecoded
        let principalIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .principalId)
        principalId = principalIdDecoded
        let policyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policy)
        policy = policyDecoded
        let authorizationContainer = try containerValues.decodeIfPresent([Swift.String: [Swift.String?]?].self, forKey: .authorization)
        var authorizationDecoded0: [Swift.String:[Swift.String]]? = nil
        if let authorizationContainer = authorizationContainer {
            authorizationDecoded0 = [Swift.String:[Swift.String]]()
            for (key0, listofstring0) in authorizationContainer {
                var listofstring0Decoded0: [Swift.String]? = nil
                if let listofstring0 = listofstring0 {
                    listofstring0Decoded0 = [Swift.String]()
                    for string1 in listofstring0 {
                        if let string1 = string1 {
                            listofstring0Decoded0?.append(string1)
                        }
                    }
                }
                authorizationDecoded0?[key0] = listofstring0Decoded0
            }
        }
        authorization = authorizationDecoded0
        let claimsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .claims)
        var claimsDecoded0: [Swift.String:Swift.String]? = nil
        if let claimsContainer = claimsContainer {
            claimsDecoded0 = [Swift.String:Swift.String]()
            for (key0, string0) in claimsContainer {
                if let string0 = string0 {
                    claimsDecoded0?[key0] = string0
                }
            }
        }
        claims = claimsDecoded0
    }
}
