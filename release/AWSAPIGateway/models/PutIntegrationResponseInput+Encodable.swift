// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension PutIntegrationResponseInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case contentHandling
        case responseParameters
        case responseTemplates
        case selectionPattern
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let contentHandling = self.contentHandling {
            try encodeContainer.encode(contentHandling.rawValue, forKey: .contentHandling)
        }
        if let responseParameters = responseParameters {
            var responseParametersContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .responseParameters)
            for (dictKey0, mapofstringtostring0) in responseParameters {
                try responseParametersContainer.encode(mapofstringtostring0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let responseTemplates = responseTemplates {
            var responseTemplatesContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .responseTemplates)
            for (dictKey0, mapofstringtostring0) in responseTemplates {
                try responseTemplatesContainer.encode(mapofstringtostring0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let selectionPattern = self.selectionPattern {
            try encodeContainer.encode(selectionPattern, forKey: .selectionPattern)
        }
    }
}
