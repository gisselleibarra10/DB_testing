// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension ApiGatewayClientTypes {
    public enum DocumentationPartType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case api
        case authorizer
        case method
        case model
        case pathParameter
        case queryParameter
        case requestBody
        case requestHeader
        case resource
        case response
        case responseBody
        case responseHeader
        case sdkUnknown(Swift.String)

        public static var allCases: [DocumentationPartType] {
            return [
                .api,
                .authorizer,
                .method,
                .model,
                .pathParameter,
                .queryParameter,
                .requestBody,
                .requestHeader,
                .resource,
                .response,
                .responseBody,
                .responseHeader,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .api: return "API"
            case .authorizer: return "AUTHORIZER"
            case .method: return "METHOD"
            case .model: return "MODEL"
            case .pathParameter: return "PATH_PARAMETER"
            case .queryParameter: return "QUERY_PARAMETER"
            case .requestBody: return "REQUEST_BODY"
            case .requestHeader: return "REQUEST_HEADER"
            case .resource: return "RESOURCE"
            case .response: return "RESPONSE"
            case .responseBody: return "RESPONSE_BODY"
            case .responseHeader: return "RESPONSE_HEADER"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DocumentationPartType(rawValue: rawValue) ?? DocumentationPartType.sdkUnknown(rawValue)
        }
    }
}
