// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension ApiGatewayClientTypes {
    /// Represents a client-facing interface by which the client calls the API to access back-end resources. A Method resource is integrated with an Integration resource. Both consist of a request and one or more responses. The method request takes the client input that is passed to the back end through the integration request. A method response returns the output from the back end to the client through an integration response. A method request is embodied in a Method resource, whereas an integration request is embodied in an Integration resource. On the other hand, a method response is represented by a MethodResponse resource, whereas an integration response is represented by an IntegrationResponse resource.
    public struct Method: Swift.Equatable {
        /// A boolean flag specifying whether a valid ApiKey is required to invoke this method.
        public var apiKeyRequired: Swift.Bool?
        /// A list of authorization scopes configured on the method. The scopes are used with a COGNITO_USER_POOLS authorizer to authorize the method invocation. The authorization works by matching the method scopes against the scopes parsed from the access token in the incoming request. The method invocation is authorized if any method scopes matches a claimed scope in the access token. Otherwise, the invocation is not authorized. When the method scope is configured, the client must provide an access token instead of an identity token for authorization purposes.
        public var authorizationScopes: [Swift.String]?
        /// The method's authorization type. Valid values are NONE for open access, AWS_IAM for using AWS IAM permissions, CUSTOM for using a custom authorizer, or COGNITO_USER_POOLS for using a Cognito user pool.
        public var authorizationType: Swift.String?
        /// The identifier of an Authorizer to use on this method. The authorizationType must be CUSTOM.
        public var authorizerId: Swift.String?
        /// The method's HTTP verb.
        public var httpMethod: Swift.String?
        /// Gets the method's integration responsible for passing the client-submitted request to the back end and performing necessary transformations to make the request compliant with the back end.
        public var methodIntegration: ApiGatewayClientTypes.Integration?
        /// Gets a method response associated with a given HTTP status code.
        public var methodResponses: [Swift.String:ApiGatewayClientTypes.MethodResponse]?
        /// A human-friendly operation identifier for the method. For example, you can assign the operationName of ListPets for the GET /pets method in the PetStore example.
        public var operationName: Swift.String?
        /// A key-value map specifying data schemas, represented by Model resources, (as the mapped value) of the request payloads of given content types (as the mapping key).
        public var requestModels: [Swift.String:Swift.String]?
        /// A key-value map defining required or optional method request parameters that can be accepted by API Gateway. A key is a method request parameter name matching the pattern of method.request.{location}.{name}, where location is querystring, path, or header and name is a valid and unique parameter name. The value associated with the key is a Boolean flag indicating whether the parameter is required (true) or optional (false). The method request parameter names defined here are available in Integration to be mapped to integration request parameters or templates.
        public var requestParameters: [Swift.String:Swift.Bool]?
        /// The identifier of a RequestValidator for request validation.
        public var requestValidatorId: Swift.String?

        public init (
            apiKeyRequired: Swift.Bool? = nil,
            authorizationScopes: [Swift.String]? = nil,
            authorizationType: Swift.String? = nil,
            authorizerId: Swift.String? = nil,
            httpMethod: Swift.String? = nil,
            methodIntegration: ApiGatewayClientTypes.Integration? = nil,
            methodResponses: [Swift.String:ApiGatewayClientTypes.MethodResponse]? = nil,
            operationName: Swift.String? = nil,
            requestModels: [Swift.String:Swift.String]? = nil,
            requestParameters: [Swift.String:Swift.Bool]? = nil,
            requestValidatorId: Swift.String? = nil
        )
        {
            self.apiKeyRequired = apiKeyRequired
            self.authorizationScopes = authorizationScopes
            self.authorizationType = authorizationType
            self.authorizerId = authorizerId
            self.httpMethod = httpMethod
            self.methodIntegration = methodIntegration
            self.methodResponses = methodResponses
            self.operationName = operationName
            self.requestModels = requestModels
            self.requestParameters = requestParameters
            self.requestValidatorId = requestValidatorId
        }
    }

}
