// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension ApiGatewayClientTypes {
    public enum GatewayResponseType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case accessDenied
        case apiConfigurationError
        case authorizerConfigurationError
        case authorizerFailure
        case badRequestBody
        case badRequestParameters
        case default4xx
        case default5xx
        case expiredToken
        case integrationFailure
        case integrationTimeout
        case invalidApiKey
        case invalidSignature
        case missingAuthenticationToken
        case quotaExceeded
        case requestTooLarge
        case resourceNotFound
        case throttled
        case unauthorized
        case unsupportedMediaType
        case wafFiltered
        case sdkUnknown(Swift.String)

        public static var allCases: [GatewayResponseType] {
            return [
                .accessDenied,
                .apiConfigurationError,
                .authorizerConfigurationError,
                .authorizerFailure,
                .badRequestBody,
                .badRequestParameters,
                .default4xx,
                .default5xx,
                .expiredToken,
                .integrationFailure,
                .integrationTimeout,
                .invalidApiKey,
                .invalidSignature,
                .missingAuthenticationToken,
                .quotaExceeded,
                .requestTooLarge,
                .resourceNotFound,
                .throttled,
                .unauthorized,
                .unsupportedMediaType,
                .wafFiltered,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .accessDenied: return "ACCESS_DENIED"
            case .apiConfigurationError: return "API_CONFIGURATION_ERROR"
            case .authorizerConfigurationError: return "AUTHORIZER_CONFIGURATION_ERROR"
            case .authorizerFailure: return "AUTHORIZER_FAILURE"
            case .badRequestBody: return "BAD_REQUEST_BODY"
            case .badRequestParameters: return "BAD_REQUEST_PARAMETERS"
            case .default4xx: return "DEFAULT_4XX"
            case .default5xx: return "DEFAULT_5XX"
            case .expiredToken: return "EXPIRED_TOKEN"
            case .integrationFailure: return "INTEGRATION_FAILURE"
            case .integrationTimeout: return "INTEGRATION_TIMEOUT"
            case .invalidApiKey: return "INVALID_API_KEY"
            case .invalidSignature: return "INVALID_SIGNATURE"
            case .missingAuthenticationToken: return "MISSING_AUTHENTICATION_TOKEN"
            case .quotaExceeded: return "QUOTA_EXCEEDED"
            case .requestTooLarge: return "REQUEST_TOO_LARGE"
            case .resourceNotFound: return "RESOURCE_NOT_FOUND"
            case .throttled: return "THROTTLED"
            case .unauthorized: return "UNAUTHORIZED"
            case .unsupportedMediaType: return "UNSUPPORTED_MEDIA_TYPE"
            case .wafFiltered: return "WAF_FILTERED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = GatewayResponseType(rawValue: rawValue) ?? GatewayResponseType.sdkUnknown(rawValue)
        }
    }
}
