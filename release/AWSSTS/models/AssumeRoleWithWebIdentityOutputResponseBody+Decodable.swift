// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct AssumeRoleWithWebIdentityOutputResponseBody: Swift.Equatable {
    let credentials: StsClientTypes.Credentials?
    let subjectFromWebIdentityToken: Swift.String?
    let assumedRoleUser: StsClientTypes.AssumedRoleUser?
    let packedPolicySize: Swift.Int?
    let provider: Swift.String?
    let audience: Swift.String?
    let sourceIdentity: Swift.String?
}

extension AssumeRoleWithWebIdentityOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case assumedRoleUser = "AssumedRoleUser"
        case audience = "Audience"
        case credentials = "Credentials"
        case packedPolicySize = "PackedPolicySize"
        case provider = "Provider"
        case sourceIdentity = "SourceIdentity"
        case subjectFromWebIdentityToken = "SubjectFromWebIdentityToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("AssumeRoleWithWebIdentityResult"))
        let credentialsDecoded = try containerValues.decodeIfPresent(StsClientTypes.Credentials.self, forKey: .credentials)
        credentials = credentialsDecoded
        let subjectFromWebIdentityTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .subjectFromWebIdentityToken)
        subjectFromWebIdentityToken = subjectFromWebIdentityTokenDecoded
        let assumedRoleUserDecoded = try containerValues.decodeIfPresent(StsClientTypes.AssumedRoleUser.self, forKey: .assumedRoleUser)
        assumedRoleUser = assumedRoleUserDecoded
        let packedPolicySizeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .packedPolicySize)
        packedPolicySize = packedPolicySizeDecoded
        let providerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .provider)
        provider = providerDecoded
        let audienceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .audience)
        audience = audienceDecoded
        let sourceIdentityDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceIdentity)
        sourceIdentity = sourceIdentityDecoded
    }
}
