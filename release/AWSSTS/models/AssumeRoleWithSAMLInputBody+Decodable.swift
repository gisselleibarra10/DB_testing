// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct AssumeRoleWithSAMLInputBody: Swift.Equatable {
    let roleArn: Swift.String?
    let principalArn: Swift.String?
    let sAMLAssertion: Swift.String?
    let policyArns: [StsClientTypes.PolicyDescriptorType]?
    let policy: Swift.String?
    let durationSeconds: Swift.Int?
}

extension AssumeRoleWithSAMLInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case durationSeconds = "DurationSeconds"
        case policy = "Policy"
        case policyArns = "PolicyArns"
        case principalArn = "PrincipalArn"
        case roleArn = "RoleArn"
        case sAMLAssertion = "SAMLAssertion"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let principalArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .principalArn)
        principalArn = principalArnDecoded
        let sAMLAssertionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sAMLAssertion)
        sAMLAssertion = sAMLAssertionDecoded
        if containerValues.contains(.policyArns) {
            struct KeyVal0{struct member{}}
            let policyArnsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .policyArns)
            if let policyArnsWrappedContainer = policyArnsWrappedContainer {
                let policyArnsContainer = try policyArnsWrappedContainer.decodeIfPresent([StsClientTypes.PolicyDescriptorType].self, forKey: .member)
                var policyArnsBuffer:[StsClientTypes.PolicyDescriptorType]? = nil
                if let policyArnsContainer = policyArnsContainer {
                    policyArnsBuffer = [StsClientTypes.PolicyDescriptorType]()
                    for structureContainer0 in policyArnsContainer {
                        policyArnsBuffer?.append(structureContainer0)
                    }
                }
                policyArns = policyArnsBuffer
            } else {
                policyArns = []
            }
        } else {
            policyArns = nil
        }
        let policyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policy)
        policy = policyDecoded
        let durationSecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .durationSeconds)
        durationSeconds = durationSecondsDecoded
    }
}
