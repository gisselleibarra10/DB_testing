// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct AssumeRoleInputBody: Swift.Equatable {
    let roleArn: Swift.String?
    let roleSessionName: Swift.String?
    let policyArns: [StsClientTypes.PolicyDescriptorType]?
    let policy: Swift.String?
    let durationSeconds: Swift.Int?
    let tags: [StsClientTypes.Tag]?
    let transitiveTagKeys: [Swift.String]?
    let externalId: Swift.String?
    let serialNumber: Swift.String?
    let tokenCode: Swift.String?
    let sourceIdentity: Swift.String?
}

extension AssumeRoleInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case durationSeconds = "DurationSeconds"
        case externalId = "ExternalId"
        case policy = "Policy"
        case policyArns = "PolicyArns"
        case roleArn = "RoleArn"
        case roleSessionName = "RoleSessionName"
        case serialNumber = "SerialNumber"
        case sourceIdentity = "SourceIdentity"
        case tags = "Tags"
        case tokenCode = "TokenCode"
        case transitiveTagKeys = "TransitiveTagKeys"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let roleSessionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleSessionName)
        roleSessionName = roleSessionNameDecoded
        if containerValues.contains(.policyArns) {
            struct KeyVal0{struct member{}}
            let policyArnsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .policyArns)
            if let policyArnsWrappedContainer = policyArnsWrappedContainer {
                let policyArnsContainer = try policyArnsWrappedContainer.decodeIfPresent([StsClientTypes.PolicyDescriptorType].self, forKey: .member)
                var policyArnsBuffer:[StsClientTypes.PolicyDescriptorType]? = nil
                if let policyArnsContainer = policyArnsContainer {
                    policyArnsBuffer = [StsClientTypes.PolicyDescriptorType]()
                    for structureContainer0 in policyArnsContainer {
                        policyArnsBuffer?.append(structureContainer0)
                    }
                }
                policyArns = policyArnsBuffer
            } else {
                policyArns = []
            }
        } else {
            policyArns = nil
        }
        let policyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policy)
        policy = policyDecoded
        let durationSecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .durationSeconds)
        durationSeconds = durationSecondsDecoded
        if containerValues.contains(.tags) {
            struct KeyVal0{struct member{}}
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .tags)
            if let tagsWrappedContainer = tagsWrappedContainer {
                let tagsContainer = try tagsWrappedContainer.decodeIfPresent([StsClientTypes.Tag].self, forKey: .member)
                var tagsBuffer:[StsClientTypes.Tag]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [StsClientTypes.Tag]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
        if containerValues.contains(.transitiveTagKeys) {
            struct KeyVal0{struct member{}}
            let transitiveTagKeysWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .transitiveTagKeys)
            if let transitiveTagKeysWrappedContainer = transitiveTagKeysWrappedContainer {
                let transitiveTagKeysContainer = try transitiveTagKeysWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var transitiveTagKeysBuffer:[Swift.String]? = nil
                if let transitiveTagKeysContainer = transitiveTagKeysContainer {
                    transitiveTagKeysBuffer = [Swift.String]()
                    for stringContainer0 in transitiveTagKeysContainer {
                        transitiveTagKeysBuffer?.append(stringContainer0)
                    }
                }
                transitiveTagKeys = transitiveTagKeysBuffer
            } else {
                transitiveTagKeys = []
            }
        } else {
            transitiveTagKeys = nil
        }
        let externalIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .externalId)
        externalId = externalIdDecoded
        let serialNumberDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serialNumber)
        serialNumber = serialNumberDecoded
        let tokenCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tokenCode)
        tokenCode = tokenCodeDecoded
        let sourceIdentityDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceIdentity)
        sourceIdentity = sourceIdentityDecoded
    }
}
