// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeConnectorOutputResponseBody: Swift.Equatable {
    let capacity: KafkaConnectClientTypes.CapacityDescription?
    let connectorArn: Swift.String?
    let connectorConfiguration: [Swift.String:Swift.String]?
    let connectorDescription: Swift.String?
    let connectorName: Swift.String?
    let connectorState: KafkaConnectClientTypes.ConnectorState?
    let creationTime: ClientRuntime.Date?
    let currentVersion: Swift.String?
    let kafkaCluster: KafkaConnectClientTypes.KafkaClusterDescription?
    let kafkaClusterClientAuthentication: KafkaConnectClientTypes.KafkaClusterClientAuthenticationDescription?
    let kafkaClusterEncryptionInTransit: KafkaConnectClientTypes.KafkaClusterEncryptionInTransitDescription?
    let kafkaConnectVersion: Swift.String?
    let logDelivery: KafkaConnectClientTypes.LogDeliveryDescription?
    let plugins: [KafkaConnectClientTypes.PluginDescription]?
    let serviceExecutionRoleArn: Swift.String?
    let workerConfiguration: KafkaConnectClientTypes.WorkerConfigurationDescription?
    let stateDescription: KafkaConnectClientTypes.StateDescription?
}

extension DescribeConnectorOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case capacity
        case connectorArn
        case connectorConfiguration
        case connectorDescription
        case connectorName
        case connectorState
        case creationTime
        case currentVersion
        case kafkaCluster
        case kafkaClusterClientAuthentication
        case kafkaClusterEncryptionInTransit
        case kafkaConnectVersion
        case logDelivery
        case plugins
        case serviceExecutionRoleArn
        case stateDescription
        case workerConfiguration
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let capacityDecoded = try containerValues.decodeIfPresent(KafkaConnectClientTypes.CapacityDescription.self, forKey: .capacity)
        capacity = capacityDecoded
        let connectorArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .connectorArn)
        connectorArn = connectorArnDecoded
        let connectorConfigurationContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .connectorConfiguration)
        var connectorConfigurationDecoded0: [Swift.String:Swift.String]? = nil
        if let connectorConfigurationContainer = connectorConfigurationContainer {
            connectorConfigurationDecoded0 = [Swift.String:Swift.String]()
            for (key0, __string0) in connectorConfigurationContainer {
                if let __string0 = __string0 {
                    connectorConfigurationDecoded0?[key0] = __string0
                }
            }
        }
        connectorConfiguration = connectorConfigurationDecoded0
        let connectorDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .connectorDescription)
        connectorDescription = connectorDescriptionDecoded
        let connectorNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .connectorName)
        connectorName = connectorNameDecoded
        let connectorStateDecoded = try containerValues.decodeIfPresent(KafkaConnectClientTypes.ConnectorState.self, forKey: .connectorState)
        connectorState = connectorStateDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let currentVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .currentVersion)
        currentVersion = currentVersionDecoded
        let kafkaClusterDecoded = try containerValues.decodeIfPresent(KafkaConnectClientTypes.KafkaClusterDescription.self, forKey: .kafkaCluster)
        kafkaCluster = kafkaClusterDecoded
        let kafkaClusterClientAuthenticationDecoded = try containerValues.decodeIfPresent(KafkaConnectClientTypes.KafkaClusterClientAuthenticationDescription.self, forKey: .kafkaClusterClientAuthentication)
        kafkaClusterClientAuthentication = kafkaClusterClientAuthenticationDecoded
        let kafkaClusterEncryptionInTransitDecoded = try containerValues.decodeIfPresent(KafkaConnectClientTypes.KafkaClusterEncryptionInTransitDescription.self, forKey: .kafkaClusterEncryptionInTransit)
        kafkaClusterEncryptionInTransit = kafkaClusterEncryptionInTransitDecoded
        let kafkaConnectVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kafkaConnectVersion)
        kafkaConnectVersion = kafkaConnectVersionDecoded
        let logDeliveryDecoded = try containerValues.decodeIfPresent(KafkaConnectClientTypes.LogDeliveryDescription.self, forKey: .logDelivery)
        logDelivery = logDeliveryDecoded
        let pluginsContainer = try containerValues.decodeIfPresent([KafkaConnectClientTypes.PluginDescription?].self, forKey: .plugins)
        var pluginsDecoded0:[KafkaConnectClientTypes.PluginDescription]? = nil
        if let pluginsContainer = pluginsContainer {
            pluginsDecoded0 = [KafkaConnectClientTypes.PluginDescription]()
            for structure0 in pluginsContainer {
                if let structure0 = structure0 {
                    pluginsDecoded0?.append(structure0)
                }
            }
        }
        plugins = pluginsDecoded0
        let serviceExecutionRoleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serviceExecutionRoleArn)
        serviceExecutionRoleArn = serviceExecutionRoleArnDecoded
        let workerConfigurationDecoded = try containerValues.decodeIfPresent(KafkaConnectClientTypes.WorkerConfigurationDescription.self, forKey: .workerConfiguration)
        workerConfiguration = workerConfigurationDecoded
        let stateDescriptionDecoded = try containerValues.decodeIfPresent(KafkaConnectClientTypes.StateDescription.self, forKey: .stateDescription)
        stateDescription = stateDescriptionDecoded
    }
}
