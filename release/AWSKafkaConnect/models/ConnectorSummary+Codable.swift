// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension KafkaConnectClientTypes.ConnectorSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case capacity
        case connectorArn
        case connectorDescription
        case connectorName
        case connectorState
        case creationTime
        case currentVersion
        case kafkaCluster
        case kafkaClusterClientAuthentication
        case kafkaClusterEncryptionInTransit
        case kafkaConnectVersion
        case logDelivery
        case plugins
        case serviceExecutionRoleArn
        case workerConfiguration
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let capacity = self.capacity {
            try encodeContainer.encode(capacity, forKey: .capacity)
        }
        if let connectorArn = self.connectorArn {
            try encodeContainer.encode(connectorArn, forKey: .connectorArn)
        }
        if let connectorDescription = self.connectorDescription {
            try encodeContainer.encode(connectorDescription, forKey: .connectorDescription)
        }
        if let connectorName = self.connectorName {
            try encodeContainer.encode(connectorName, forKey: .connectorName)
        }
        if let connectorState = self.connectorState {
            try encodeContainer.encode(connectorState.rawValue, forKey: .connectorState)
        }
        if let creationTime = self.creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let currentVersion = self.currentVersion {
            try encodeContainer.encode(currentVersion, forKey: .currentVersion)
        }
        if let kafkaCluster = self.kafkaCluster {
            try encodeContainer.encode(kafkaCluster, forKey: .kafkaCluster)
        }
        if let kafkaClusterClientAuthentication = self.kafkaClusterClientAuthentication {
            try encodeContainer.encode(kafkaClusterClientAuthentication, forKey: .kafkaClusterClientAuthentication)
        }
        if let kafkaClusterEncryptionInTransit = self.kafkaClusterEncryptionInTransit {
            try encodeContainer.encode(kafkaClusterEncryptionInTransit, forKey: .kafkaClusterEncryptionInTransit)
        }
        if let kafkaConnectVersion = self.kafkaConnectVersion {
            try encodeContainer.encode(kafkaConnectVersion, forKey: .kafkaConnectVersion)
        }
        if let logDelivery = self.logDelivery {
            try encodeContainer.encode(logDelivery, forKey: .logDelivery)
        }
        if let plugins = plugins {
            var pluginsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .plugins)
            for __listofplugindescription0 in plugins {
                try pluginsContainer.encode(__listofplugindescription0)
            }
        }
        if let serviceExecutionRoleArn = self.serviceExecutionRoleArn {
            try encodeContainer.encode(serviceExecutionRoleArn, forKey: .serviceExecutionRoleArn)
        }
        if let workerConfiguration = self.workerConfiguration {
            try encodeContainer.encode(workerConfiguration, forKey: .workerConfiguration)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let capacityDecoded = try containerValues.decodeIfPresent(KafkaConnectClientTypes.CapacityDescription.self, forKey: .capacity)
        capacity = capacityDecoded
        let connectorArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .connectorArn)
        connectorArn = connectorArnDecoded
        let connectorDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .connectorDescription)
        connectorDescription = connectorDescriptionDecoded
        let connectorNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .connectorName)
        connectorName = connectorNameDecoded
        let connectorStateDecoded = try containerValues.decodeIfPresent(KafkaConnectClientTypes.ConnectorState.self, forKey: .connectorState)
        connectorState = connectorStateDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let currentVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .currentVersion)
        currentVersion = currentVersionDecoded
        let kafkaClusterDecoded = try containerValues.decodeIfPresent(KafkaConnectClientTypes.KafkaClusterDescription.self, forKey: .kafkaCluster)
        kafkaCluster = kafkaClusterDecoded
        let kafkaClusterClientAuthenticationDecoded = try containerValues.decodeIfPresent(KafkaConnectClientTypes.KafkaClusterClientAuthenticationDescription.self, forKey: .kafkaClusterClientAuthentication)
        kafkaClusterClientAuthentication = kafkaClusterClientAuthenticationDecoded
        let kafkaClusterEncryptionInTransitDecoded = try containerValues.decodeIfPresent(KafkaConnectClientTypes.KafkaClusterEncryptionInTransitDescription.self, forKey: .kafkaClusterEncryptionInTransit)
        kafkaClusterEncryptionInTransit = kafkaClusterEncryptionInTransitDecoded
        let kafkaConnectVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kafkaConnectVersion)
        kafkaConnectVersion = kafkaConnectVersionDecoded
        let logDeliveryDecoded = try containerValues.decodeIfPresent(KafkaConnectClientTypes.LogDeliveryDescription.self, forKey: .logDelivery)
        logDelivery = logDeliveryDecoded
        let pluginsContainer = try containerValues.decodeIfPresent([KafkaConnectClientTypes.PluginDescription?].self, forKey: .plugins)
        var pluginsDecoded0:[KafkaConnectClientTypes.PluginDescription]? = nil
        if let pluginsContainer = pluginsContainer {
            pluginsDecoded0 = [KafkaConnectClientTypes.PluginDescription]()
            for structure0 in pluginsContainer {
                if let structure0 = structure0 {
                    pluginsDecoded0?.append(structure0)
                }
            }
        }
        plugins = pluginsDecoded0
        let serviceExecutionRoleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serviceExecutionRoleArn)
        serviceExecutionRoleArn = serviceExecutionRoleArnDecoded
        let workerConfigurationDecoded = try containerValues.decodeIfPresent(KafkaConnectClientTypes.WorkerConfigurationDescription.self, forKey: .workerConfiguration)
        workerConfiguration = workerConfigurationDecoded
    }
}
