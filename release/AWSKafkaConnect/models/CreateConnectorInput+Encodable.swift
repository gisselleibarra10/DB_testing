// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CreateConnectorInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case capacity
        case connectorConfiguration
        case connectorDescription
        case connectorName
        case kafkaCluster
        case kafkaClusterClientAuthentication
        case kafkaClusterEncryptionInTransit
        case kafkaConnectVersion
        case logDelivery
        case plugins
        case serviceExecutionRoleArn
        case workerConfiguration
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let capacity = self.capacity {
            try encodeContainer.encode(capacity, forKey: .capacity)
        }
        if let connectorConfiguration = connectorConfiguration {
            var connectorConfigurationContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .connectorConfiguration)
            for (dictKey0, __sensitive__mapof__string0) in connectorConfiguration {
                try connectorConfigurationContainer.encode(__sensitive__mapof__string0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let connectorDescription = self.connectorDescription {
            try encodeContainer.encode(connectorDescription, forKey: .connectorDescription)
        }
        if let connectorName = self.connectorName {
            try encodeContainer.encode(connectorName, forKey: .connectorName)
        }
        if let kafkaCluster = self.kafkaCluster {
            try encodeContainer.encode(kafkaCluster, forKey: .kafkaCluster)
        }
        if let kafkaClusterClientAuthentication = self.kafkaClusterClientAuthentication {
            try encodeContainer.encode(kafkaClusterClientAuthentication, forKey: .kafkaClusterClientAuthentication)
        }
        if let kafkaClusterEncryptionInTransit = self.kafkaClusterEncryptionInTransit {
            try encodeContainer.encode(kafkaClusterEncryptionInTransit, forKey: .kafkaClusterEncryptionInTransit)
        }
        if let kafkaConnectVersion = self.kafkaConnectVersion {
            try encodeContainer.encode(kafkaConnectVersion, forKey: .kafkaConnectVersion)
        }
        if let logDelivery = self.logDelivery {
            try encodeContainer.encode(logDelivery, forKey: .logDelivery)
        }
        if let plugins = plugins {
            var pluginsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .plugins)
            for __listofplugin0 in plugins {
                try pluginsContainer.encode(__listofplugin0)
            }
        }
        if let serviceExecutionRoleArn = self.serviceExecutionRoleArn {
            try encodeContainer.encode(serviceExecutionRoleArn, forKey: .serviceExecutionRoleArn)
        }
        if let workerConfiguration = self.workerConfiguration {
            try encodeContainer.encode(workerConfiguration, forKey: .workerConfiguration)
        }
    }
}
