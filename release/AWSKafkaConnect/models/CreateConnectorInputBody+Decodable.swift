// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateConnectorInputBody: Swift.Equatable {
    let capacity: KafkaConnectClientTypes.Capacity?
    let connectorConfiguration: [Swift.String:Swift.String]?
    let connectorDescription: Swift.String?
    let connectorName: Swift.String?
    let kafkaCluster: KafkaConnectClientTypes.KafkaCluster?
    let kafkaClusterClientAuthentication: KafkaConnectClientTypes.KafkaClusterClientAuthentication?
    let kafkaClusterEncryptionInTransit: KafkaConnectClientTypes.KafkaClusterEncryptionInTransit?
    let kafkaConnectVersion: Swift.String?
    let logDelivery: KafkaConnectClientTypes.LogDelivery?
    let plugins: [KafkaConnectClientTypes.Plugin]?
    let serviceExecutionRoleArn: Swift.String?
    let workerConfiguration: KafkaConnectClientTypes.WorkerConfiguration?
}

extension CreateConnectorInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case capacity
        case connectorConfiguration
        case connectorDescription
        case connectorName
        case kafkaCluster
        case kafkaClusterClientAuthentication
        case kafkaClusterEncryptionInTransit
        case kafkaConnectVersion
        case logDelivery
        case plugins
        case serviceExecutionRoleArn
        case workerConfiguration
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let capacityDecoded = try containerValues.decodeIfPresent(KafkaConnectClientTypes.Capacity.self, forKey: .capacity)
        capacity = capacityDecoded
        let connectorConfigurationContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .connectorConfiguration)
        var connectorConfigurationDecoded0: [Swift.String:Swift.String]? = nil
        if let connectorConfigurationContainer = connectorConfigurationContainer {
            connectorConfigurationDecoded0 = [Swift.String:Swift.String]()
            for (key0, __string0) in connectorConfigurationContainer {
                if let __string0 = __string0 {
                    connectorConfigurationDecoded0?[key0] = __string0
                }
            }
        }
        connectorConfiguration = connectorConfigurationDecoded0
        let connectorDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .connectorDescription)
        connectorDescription = connectorDescriptionDecoded
        let connectorNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .connectorName)
        connectorName = connectorNameDecoded
        let kafkaClusterDecoded = try containerValues.decodeIfPresent(KafkaConnectClientTypes.KafkaCluster.self, forKey: .kafkaCluster)
        kafkaCluster = kafkaClusterDecoded
        let kafkaClusterClientAuthenticationDecoded = try containerValues.decodeIfPresent(KafkaConnectClientTypes.KafkaClusterClientAuthentication.self, forKey: .kafkaClusterClientAuthentication)
        kafkaClusterClientAuthentication = kafkaClusterClientAuthenticationDecoded
        let kafkaClusterEncryptionInTransitDecoded = try containerValues.decodeIfPresent(KafkaConnectClientTypes.KafkaClusterEncryptionInTransit.self, forKey: .kafkaClusterEncryptionInTransit)
        kafkaClusterEncryptionInTransit = kafkaClusterEncryptionInTransitDecoded
        let kafkaConnectVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kafkaConnectVersion)
        kafkaConnectVersion = kafkaConnectVersionDecoded
        let logDeliveryDecoded = try containerValues.decodeIfPresent(KafkaConnectClientTypes.LogDelivery.self, forKey: .logDelivery)
        logDelivery = logDeliveryDecoded
        let pluginsContainer = try containerValues.decodeIfPresent([KafkaConnectClientTypes.Plugin?].self, forKey: .plugins)
        var pluginsDecoded0:[KafkaConnectClientTypes.Plugin]? = nil
        if let pluginsContainer = pluginsContainer {
            pluginsDecoded0 = [KafkaConnectClientTypes.Plugin]()
            for structure0 in pluginsContainer {
                if let structure0 = structure0 {
                    pluginsDecoded0?.append(structure0)
                }
            }
        }
        plugins = pluginsDecoded0
        let serviceExecutionRoleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serviceExecutionRoleArn)
        serviceExecutionRoleArn = serviceExecutionRoleArnDecoded
        let workerConfigurationDecoded = try containerValues.decodeIfPresent(KafkaConnectClientTypes.WorkerConfiguration.self, forKey: .workerConfiguration)
        workerConfiguration = workerConfigurationDecoded
    }
}
