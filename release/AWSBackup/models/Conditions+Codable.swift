// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension BackupClientTypes.Conditions: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case stringEquals = "StringEquals"
        case stringLike = "StringLike"
        case stringNotEquals = "StringNotEquals"
        case stringNotLike = "StringNotLike"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let stringEquals = stringEquals {
            var stringEqualsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .stringEquals)
            for conditionparameters0 in stringEquals {
                try stringEqualsContainer.encode(conditionparameters0)
            }
        }
        if let stringLike = stringLike {
            var stringLikeContainer = encodeContainer.nestedUnkeyedContainer(forKey: .stringLike)
            for conditionparameters0 in stringLike {
                try stringLikeContainer.encode(conditionparameters0)
            }
        }
        if let stringNotEquals = stringNotEquals {
            var stringNotEqualsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .stringNotEquals)
            for conditionparameters0 in stringNotEquals {
                try stringNotEqualsContainer.encode(conditionparameters0)
            }
        }
        if let stringNotLike = stringNotLike {
            var stringNotLikeContainer = encodeContainer.nestedUnkeyedContainer(forKey: .stringNotLike)
            for conditionparameters0 in stringNotLike {
                try stringNotLikeContainer.encode(conditionparameters0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let stringEqualsContainer = try containerValues.decodeIfPresent([BackupClientTypes.ConditionParameter?].self, forKey: .stringEquals)
        var stringEqualsDecoded0:[BackupClientTypes.ConditionParameter]? = nil
        if let stringEqualsContainer = stringEqualsContainer {
            stringEqualsDecoded0 = [BackupClientTypes.ConditionParameter]()
            for structure0 in stringEqualsContainer {
                if let structure0 = structure0 {
                    stringEqualsDecoded0?.append(structure0)
                }
            }
        }
        stringEquals = stringEqualsDecoded0
        let stringNotEqualsContainer = try containerValues.decodeIfPresent([BackupClientTypes.ConditionParameter?].self, forKey: .stringNotEquals)
        var stringNotEqualsDecoded0:[BackupClientTypes.ConditionParameter]? = nil
        if let stringNotEqualsContainer = stringNotEqualsContainer {
            stringNotEqualsDecoded0 = [BackupClientTypes.ConditionParameter]()
            for structure0 in stringNotEqualsContainer {
                if let structure0 = structure0 {
                    stringNotEqualsDecoded0?.append(structure0)
                }
            }
        }
        stringNotEquals = stringNotEqualsDecoded0
        let stringLikeContainer = try containerValues.decodeIfPresent([BackupClientTypes.ConditionParameter?].self, forKey: .stringLike)
        var stringLikeDecoded0:[BackupClientTypes.ConditionParameter]? = nil
        if let stringLikeContainer = stringLikeContainer {
            stringLikeDecoded0 = [BackupClientTypes.ConditionParameter]()
            for structure0 in stringLikeContainer {
                if let structure0 = structure0 {
                    stringLikeDecoded0?.append(structure0)
                }
            }
        }
        stringLike = stringLikeDecoded0
        let stringNotLikeContainer = try containerValues.decodeIfPresent([BackupClientTypes.ConditionParameter?].self, forKey: .stringNotLike)
        var stringNotLikeDecoded0:[BackupClientTypes.ConditionParameter]? = nil
        if let stringNotLikeContainer = stringNotLikeContainer {
            stringNotLikeDecoded0 = [BackupClientTypes.ConditionParameter]()
            for structure0 in stringNotLikeContainer {
                if let structure0 = structure0 {
                    stringNotLikeDecoded0?.append(structure0)
                }
            }
        }
        stringNotLike = stringNotLikeDecoded0
    }
}
