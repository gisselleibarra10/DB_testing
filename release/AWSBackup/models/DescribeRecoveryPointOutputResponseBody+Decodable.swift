// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeRecoveryPointOutputResponseBody: Swift.Equatable {
    let recoveryPointArn: Swift.String?
    let backupVaultName: Swift.String?
    let backupVaultArn: Swift.String?
    let sourceBackupVaultArn: Swift.String?
    let resourceArn: Swift.String?
    let resourceType: Swift.String?
    let createdBy: BackupClientTypes.RecoveryPointCreator?
    let iamRoleArn: Swift.String?
    let status: BackupClientTypes.RecoveryPointStatus?
    let statusMessage: Swift.String?
    let creationDate: ClientRuntime.Date?
    let completionDate: ClientRuntime.Date?
    let backupSizeInBytes: Swift.Int?
    let calculatedLifecycle: BackupClientTypes.CalculatedLifecycle?
    let lifecycle: BackupClientTypes.Lifecycle?
    let encryptionKeyArn: Swift.String?
    let isEncrypted: Swift.Bool
    let storageClass: BackupClientTypes.StorageClass?
    let lastRestoreTime: ClientRuntime.Date?
}

extension DescribeRecoveryPointOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case backupSizeInBytes = "BackupSizeInBytes"
        case backupVaultArn = "BackupVaultArn"
        case backupVaultName = "BackupVaultName"
        case calculatedLifecycle = "CalculatedLifecycle"
        case completionDate = "CompletionDate"
        case createdBy = "CreatedBy"
        case creationDate = "CreationDate"
        case encryptionKeyArn = "EncryptionKeyArn"
        case iamRoleArn = "IamRoleArn"
        case isEncrypted = "IsEncrypted"
        case lastRestoreTime = "LastRestoreTime"
        case lifecycle = "Lifecycle"
        case recoveryPointArn = "RecoveryPointArn"
        case resourceArn = "ResourceArn"
        case resourceType = "ResourceType"
        case sourceBackupVaultArn = "SourceBackupVaultArn"
        case status = "Status"
        case statusMessage = "StatusMessage"
        case storageClass = "StorageClass"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let recoveryPointArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .recoveryPointArn)
        recoveryPointArn = recoveryPointArnDecoded
        let backupVaultNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .backupVaultName)
        backupVaultName = backupVaultNameDecoded
        let backupVaultArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .backupVaultArn)
        backupVaultArn = backupVaultArnDecoded
        let sourceBackupVaultArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceBackupVaultArn)
        sourceBackupVaultArn = sourceBackupVaultArnDecoded
        let resourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceArn)
        resourceArn = resourceArnDecoded
        let resourceTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let createdByDecoded = try containerValues.decodeIfPresent(BackupClientTypes.RecoveryPointCreator.self, forKey: .createdBy)
        createdBy = createdByDecoded
        let iamRoleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .iamRoleArn)
        iamRoleArn = iamRoleArnDecoded
        let statusDecoded = try containerValues.decodeIfPresent(BackupClientTypes.RecoveryPointStatus.self, forKey: .status)
        status = statusDecoded
        let statusMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .statusMessage)
        statusMessage = statusMessageDecoded
        let creationDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationDate)
        creationDate = creationDateDecoded
        let completionDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .completionDate)
        completionDate = completionDateDecoded
        let backupSizeInBytesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .backupSizeInBytes)
        backupSizeInBytes = backupSizeInBytesDecoded
        let calculatedLifecycleDecoded = try containerValues.decodeIfPresent(BackupClientTypes.CalculatedLifecycle.self, forKey: .calculatedLifecycle)
        calculatedLifecycle = calculatedLifecycleDecoded
        let lifecycleDecoded = try containerValues.decodeIfPresent(BackupClientTypes.Lifecycle.self, forKey: .lifecycle)
        lifecycle = lifecycleDecoded
        let encryptionKeyArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .encryptionKeyArn)
        encryptionKeyArn = encryptionKeyArnDecoded
        let isEncryptedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .isEncrypted) ?? false
        isEncrypted = isEncryptedDecoded
        let storageClassDecoded = try containerValues.decodeIfPresent(BackupClientTypes.StorageClass.self, forKey: .storageClass)
        storageClass = storageClassDecoded
        let lastRestoreTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastRestoreTime)
        lastRestoreTime = lastRestoreTimeDecoded
    }
}
