// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetBackupVaultNotificationsOutputResponseBody: Swift.Equatable {
    let backupVaultName: Swift.String?
    let backupVaultArn: Swift.String?
    let sNSTopicArn: Swift.String?
    let backupVaultEvents: [BackupClientTypes.BackupVaultEvent]?
}

extension GetBackupVaultNotificationsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case backupVaultArn = "BackupVaultArn"
        case backupVaultEvents = "BackupVaultEvents"
        case backupVaultName = "BackupVaultName"
        case sNSTopicArn = "SNSTopicArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let backupVaultNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .backupVaultName)
        backupVaultName = backupVaultNameDecoded
        let backupVaultArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .backupVaultArn)
        backupVaultArn = backupVaultArnDecoded
        let sNSTopicArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sNSTopicArn)
        sNSTopicArn = sNSTopicArnDecoded
        let backupVaultEventsContainer = try containerValues.decodeIfPresent([BackupClientTypes.BackupVaultEvent?].self, forKey: .backupVaultEvents)
        var backupVaultEventsDecoded0:[BackupClientTypes.BackupVaultEvent]? = nil
        if let backupVaultEventsContainer = backupVaultEventsContainer {
            backupVaultEventsDecoded0 = [BackupClientTypes.BackupVaultEvent]()
            for string0 in backupVaultEventsContainer {
                if let string0 = string0 {
                    backupVaultEventsDecoded0?.append(string0)
                }
            }
        }
        backupVaultEvents = backupVaultEventsDecoded0
    }
}
