// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension BackupClientTypes.ReportPlan: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTime = "CreationTime"
        case deploymentStatus = "DeploymentStatus"
        case lastAttemptedExecutionTime = "LastAttemptedExecutionTime"
        case lastSuccessfulExecutionTime = "LastSuccessfulExecutionTime"
        case reportDeliveryChannel = "ReportDeliveryChannel"
        case reportPlanArn = "ReportPlanArn"
        case reportPlanDescription = "ReportPlanDescription"
        case reportPlanName = "ReportPlanName"
        case reportSetting = "ReportSetting"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationTime = self.creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let deploymentStatus = self.deploymentStatus {
            try encodeContainer.encode(deploymentStatus, forKey: .deploymentStatus)
        }
        if let lastAttemptedExecutionTime = self.lastAttemptedExecutionTime {
            try encodeContainer.encode(lastAttemptedExecutionTime.timeIntervalSince1970, forKey: .lastAttemptedExecutionTime)
        }
        if let lastSuccessfulExecutionTime = self.lastSuccessfulExecutionTime {
            try encodeContainer.encode(lastSuccessfulExecutionTime.timeIntervalSince1970, forKey: .lastSuccessfulExecutionTime)
        }
        if let reportDeliveryChannel = self.reportDeliveryChannel {
            try encodeContainer.encode(reportDeliveryChannel, forKey: .reportDeliveryChannel)
        }
        if let reportPlanArn = self.reportPlanArn {
            try encodeContainer.encode(reportPlanArn, forKey: .reportPlanArn)
        }
        if let reportPlanDescription = self.reportPlanDescription {
            try encodeContainer.encode(reportPlanDescription, forKey: .reportPlanDescription)
        }
        if let reportPlanName = self.reportPlanName {
            try encodeContainer.encode(reportPlanName, forKey: .reportPlanName)
        }
        if let reportSetting = self.reportSetting {
            try encodeContainer.encode(reportSetting, forKey: .reportSetting)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let reportPlanArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .reportPlanArn)
        reportPlanArn = reportPlanArnDecoded
        let reportPlanNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .reportPlanName)
        reportPlanName = reportPlanNameDecoded
        let reportPlanDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .reportPlanDescription)
        reportPlanDescription = reportPlanDescriptionDecoded
        let reportSettingDecoded = try containerValues.decodeIfPresent(BackupClientTypes.ReportSetting.self, forKey: .reportSetting)
        reportSetting = reportSettingDecoded
        let reportDeliveryChannelDecoded = try containerValues.decodeIfPresent(BackupClientTypes.ReportDeliveryChannel.self, forKey: .reportDeliveryChannel)
        reportDeliveryChannel = reportDeliveryChannelDecoded
        let deploymentStatusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deploymentStatus)
        deploymentStatus = deploymentStatusDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let lastAttemptedExecutionTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastAttemptedExecutionTime)
        lastAttemptedExecutionTime = lastAttemptedExecutionTimeDecoded
        let lastSuccessfulExecutionTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastSuccessfulExecutionTime)
        lastSuccessfulExecutionTime = lastSuccessfulExecutionTimeDecoded
    }
}
