// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListBackupPlanVersionsOutputResponseBody: Swift.Equatable {
    let nextToken: Swift.String?
    let backupPlanVersionsList: [BackupClientTypes.BackupPlansListMember]?
}

extension ListBackupPlanVersionsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case backupPlanVersionsList = "BackupPlanVersionsList"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let backupPlanVersionsListContainer = try containerValues.decodeIfPresent([BackupClientTypes.BackupPlansListMember?].self, forKey: .backupPlanVersionsList)
        var backupPlanVersionsListDecoded0:[BackupClientTypes.BackupPlansListMember]? = nil
        if let backupPlanVersionsListContainer = backupPlanVersionsListContainer {
            backupPlanVersionsListDecoded0 = [BackupClientTypes.BackupPlansListMember]()
            for structure0 in backupPlanVersionsListContainer {
                if let structure0 = structure0 {
                    backupPlanVersionsListDecoded0?.append(structure0)
                }
            }
        }
        backupPlanVersionsList = backupPlanVersionsListDecoded0
    }
}
