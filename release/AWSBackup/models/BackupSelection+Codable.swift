// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension BackupClientTypes.BackupSelection: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case conditions = "Conditions"
        case iamRoleArn = "IamRoleArn"
        case listOfTags = "ListOfTags"
        case notResources = "NotResources"
        case resources = "Resources"
        case selectionName = "SelectionName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let conditions = self.conditions {
            try encodeContainer.encode(conditions, forKey: .conditions)
        }
        if let iamRoleArn = self.iamRoleArn {
            try encodeContainer.encode(iamRoleArn, forKey: .iamRoleArn)
        }
        if let listOfTags = listOfTags {
            var listOfTagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .listOfTags)
            for listoftags0 in listOfTags {
                try listOfTagsContainer.encode(listoftags0)
            }
        }
        if let notResources = notResources {
            var notResourcesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .notResources)
            for resourcearns0 in notResources {
                try notResourcesContainer.encode(resourcearns0)
            }
        }
        if let resources = resources {
            var resourcesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .resources)
            for resourcearns0 in resources {
                try resourcesContainer.encode(resourcearns0)
            }
        }
        if let selectionName = self.selectionName {
            try encodeContainer.encode(selectionName, forKey: .selectionName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let selectionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .selectionName)
        selectionName = selectionNameDecoded
        let iamRoleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .iamRoleArn)
        iamRoleArn = iamRoleArnDecoded
        let resourcesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .resources)
        var resourcesDecoded0:[Swift.String]? = nil
        if let resourcesContainer = resourcesContainer {
            resourcesDecoded0 = [Swift.String]()
            for string0 in resourcesContainer {
                if let string0 = string0 {
                    resourcesDecoded0?.append(string0)
                }
            }
        }
        resources = resourcesDecoded0
        let listOfTagsContainer = try containerValues.decodeIfPresent([BackupClientTypes.Condition?].self, forKey: .listOfTags)
        var listOfTagsDecoded0:[BackupClientTypes.Condition]? = nil
        if let listOfTagsContainer = listOfTagsContainer {
            listOfTagsDecoded0 = [BackupClientTypes.Condition]()
            for structure0 in listOfTagsContainer {
                if let structure0 = structure0 {
                    listOfTagsDecoded0?.append(structure0)
                }
            }
        }
        listOfTags = listOfTagsDecoded0
        let notResourcesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .notResources)
        var notResourcesDecoded0:[Swift.String]? = nil
        if let notResourcesContainer = notResourcesContainer {
            notResourcesDecoded0 = [Swift.String]()
            for string0 in notResourcesContainer {
                if let string0 = string0 {
                    notResourcesDecoded0?.append(string0)
                }
            }
        }
        notResources = notResourcesDecoded0
        let conditionsDecoded = try containerValues.decodeIfPresent(BackupClientTypes.Conditions.self, forKey: .conditions)
        conditions = conditionsDecoded
    }
}
