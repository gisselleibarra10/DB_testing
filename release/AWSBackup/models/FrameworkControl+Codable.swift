// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension BackupClientTypes.FrameworkControl: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case controlInputParameters = "ControlInputParameters"
        case controlName = "ControlName"
        case controlScope = "ControlScope"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let controlInputParameters = controlInputParameters {
            var controlInputParametersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .controlInputParameters)
            for controlinputparameters0 in controlInputParameters {
                try controlInputParametersContainer.encode(controlinputparameters0)
            }
        }
        if let controlName = self.controlName {
            try encodeContainer.encode(controlName, forKey: .controlName)
        }
        if let controlScope = self.controlScope {
            try encodeContainer.encode(controlScope, forKey: .controlScope)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let controlNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .controlName)
        controlName = controlNameDecoded
        let controlInputParametersContainer = try containerValues.decodeIfPresent([BackupClientTypes.ControlInputParameter?].self, forKey: .controlInputParameters)
        var controlInputParametersDecoded0:[BackupClientTypes.ControlInputParameter]? = nil
        if let controlInputParametersContainer = controlInputParametersContainer {
            controlInputParametersDecoded0 = [BackupClientTypes.ControlInputParameter]()
            for structure0 in controlInputParametersContainer {
                if let structure0 = structure0 {
                    controlInputParametersDecoded0?.append(structure0)
                }
            }
        }
        controlInputParameters = controlInputParametersDecoded0
        let controlScopeDecoded = try containerValues.decodeIfPresent(BackupClientTypes.ControlScope.self, forKey: .controlScope)
        controlScope = controlScopeDecoded
    }
}
