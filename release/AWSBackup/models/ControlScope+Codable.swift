// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension BackupClientTypes.ControlScope: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case complianceResourceIds = "ComplianceResourceIds"
        case complianceResourceTypes = "ComplianceResourceTypes"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let complianceResourceIds = complianceResourceIds {
            var complianceResourceIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .complianceResourceIds)
            for complianceresourceidlist0 in complianceResourceIds {
                try complianceResourceIdsContainer.encode(complianceresourceidlist0)
            }
        }
        if let complianceResourceTypes = complianceResourceTypes {
            var complianceResourceTypesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .complianceResourceTypes)
            for resourcetypelist0 in complianceResourceTypes {
                try complianceResourceTypesContainer.encode(resourcetypelist0)
            }
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, stringmap0) in tags {
                try tagsContainer.encode(stringmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let complianceResourceIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .complianceResourceIds)
        var complianceResourceIdsDecoded0:[Swift.String]? = nil
        if let complianceResourceIdsContainer = complianceResourceIdsContainer {
            complianceResourceIdsDecoded0 = [Swift.String]()
            for string0 in complianceResourceIdsContainer {
                if let string0 = string0 {
                    complianceResourceIdsDecoded0?.append(string0)
                }
            }
        }
        complianceResourceIds = complianceResourceIdsDecoded0
        let complianceResourceTypesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .complianceResourceTypes)
        var complianceResourceTypesDecoded0:[Swift.String]? = nil
        if let complianceResourceTypesContainer = complianceResourceTypesContainer {
            complianceResourceTypesDecoded0 = [Swift.String]()
            for string0 in complianceResourceTypesContainer {
                if let string0 = string0 {
                    complianceResourceTypesDecoded0?.append(string0)
                }
            }
        }
        complianceResourceTypes = complianceResourceTypesDecoded0
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, string0) in tagsContainer {
                if let string0 = string0 {
                    tagsDecoded0?[key0] = string0
                }
            }
        }
        tags = tagsDecoded0
    }
}
