// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension BackupClientTypes.Condition: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case conditionKey = "ConditionKey"
        case conditionType = "ConditionType"
        case conditionValue = "ConditionValue"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let conditionKey = self.conditionKey {
            try encodeContainer.encode(conditionKey, forKey: .conditionKey)
        }
        if let conditionType = self.conditionType {
            try encodeContainer.encode(conditionType.rawValue, forKey: .conditionType)
        }
        if let conditionValue = self.conditionValue {
            try encodeContainer.encode(conditionValue, forKey: .conditionValue)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let conditionTypeDecoded = try containerValues.decodeIfPresent(BackupClientTypes.ConditionType.self, forKey: .conditionType)
        conditionType = conditionTypeDecoded
        let conditionKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .conditionKey)
        conditionKey = conditionKeyDecoded
        let conditionValueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .conditionValue)
        conditionValue = conditionValueDecoded
    }
}
