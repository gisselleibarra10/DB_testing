// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct DescribeFrameworkOutputResponse: Swift.Equatable {
    /// The date and time that a framework is created, in Unix format and Coordinated Universal Time (UTC). The value of CreationTime is accurate to milliseconds. For example, the value 1516925490.087 represents Friday, January 26, 2018 12:11:30.087 AM.
    public var creationTime: ClientRuntime.Date?
    /// The deployment status of a framework. The statuses are: CREATE_IN_PROGRESS | UPDATE_IN_PROGRESS | DELETE_IN_PROGRESS | COMPLETED | FAILED
    public var deploymentStatus: Swift.String?
    /// An Amazon Resource Name (ARN) that uniquely identifies a resource. The format of the ARN depends on the resource type.
    public var frameworkArn: Swift.String?
    /// A list of the controls that make up the framework. Each control in the list has a name, input parameters, and scope.
    public var frameworkControls: [BackupClientTypes.FrameworkControl]?
    /// An optional description of the framework.
    public var frameworkDescription: Swift.String?
    /// The unique name of a framework.
    public var frameworkName: Swift.String?
    /// A framework consists of one or more controls. Each control governs a resource, such as backup plans, backup selections, backup vaults, or recovery points. You can also turn Config recording on or off for each resource. The statuses are:
    ///
    /// * ACTIVE when recording is turned on for all resources governed by the framework.
    ///
    /// * PARTIALLY_ACTIVE when recording is turned off for at least one resource governed by the framework.
    ///
    /// * INACTIVE when recording is turned off for all resources governed by the framework.
    ///
    /// * UNAVAILABLE when Backup is unable to validate recording status at this time.
    public var frameworkStatus: Swift.String?
    /// A customer-chosen string that you can use to distinguish between otherwise identical calls to DescribeFrameworkOutput. Retrying a successful request with the same idempotency token results in a success message with no action taken.
    public var idempotencyToken: Swift.String?

    public init (
        creationTime: ClientRuntime.Date? = nil,
        deploymentStatus: Swift.String? = nil,
        frameworkArn: Swift.String? = nil,
        frameworkControls: [BackupClientTypes.FrameworkControl]? = nil,
        frameworkDescription: Swift.String? = nil,
        frameworkName: Swift.String? = nil,
        frameworkStatus: Swift.String? = nil,
        idempotencyToken: Swift.String? = nil
    )
    {
        self.creationTime = creationTime
        self.deploymentStatus = deploymentStatus
        self.frameworkArn = frameworkArn
        self.frameworkControls = frameworkControls
        self.frameworkDescription = frameworkDescription
        self.frameworkName = frameworkName
        self.frameworkStatus = frameworkStatus
        self.idempotencyToken = idempotencyToken
    }
}
