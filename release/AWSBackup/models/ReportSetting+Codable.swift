// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension BackupClientTypes.ReportSetting: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case frameworkArns = "FrameworkArns"
        case numberOfFrameworks = "NumberOfFrameworks"
        case reportTemplate = "ReportTemplate"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let frameworkArns = frameworkArns {
            var frameworkArnsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .frameworkArns)
            for stringlist0 in frameworkArns {
                try frameworkArnsContainer.encode(stringlist0)
            }
        }
        if numberOfFrameworks != 0 {
            try encodeContainer.encode(numberOfFrameworks, forKey: .numberOfFrameworks)
        }
        if let reportTemplate = self.reportTemplate {
            try encodeContainer.encode(reportTemplate, forKey: .reportTemplate)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let reportTemplateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .reportTemplate)
        reportTemplate = reportTemplateDecoded
        let frameworkArnsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .frameworkArns)
        var frameworkArnsDecoded0:[Swift.String]? = nil
        if let frameworkArnsContainer = frameworkArnsContainer {
            frameworkArnsDecoded0 = [Swift.String]()
            for string0 in frameworkArnsContainer {
                if let string0 = string0 {
                    frameworkArnsDecoded0?.append(string0)
                }
            }
        }
        frameworkArns = frameworkArnsDecoded0
        let numberOfFrameworksDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .numberOfFrameworks) ?? 0
        numberOfFrameworks = numberOfFrameworksDecoded
    }
}
