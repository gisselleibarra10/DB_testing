// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension BackupClientTypes.BackupVaultListMember: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case backupVaultArn = "BackupVaultArn"
        case backupVaultName = "BackupVaultName"
        case creationDate = "CreationDate"
        case creatorRequestId = "CreatorRequestId"
        case encryptionKeyArn = "EncryptionKeyArn"
        case lockDate = "LockDate"
        case locked = "Locked"
        case maxRetentionDays = "MaxRetentionDays"
        case minRetentionDays = "MinRetentionDays"
        case numberOfRecoveryPoints = "NumberOfRecoveryPoints"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let backupVaultArn = self.backupVaultArn {
            try encodeContainer.encode(backupVaultArn, forKey: .backupVaultArn)
        }
        if let backupVaultName = self.backupVaultName {
            try encodeContainer.encode(backupVaultName, forKey: .backupVaultName)
        }
        if let creationDate = self.creationDate {
            try encodeContainer.encode(creationDate.timeIntervalSince1970, forKey: .creationDate)
        }
        if let creatorRequestId = self.creatorRequestId {
            try encodeContainer.encode(creatorRequestId, forKey: .creatorRequestId)
        }
        if let encryptionKeyArn = self.encryptionKeyArn {
            try encodeContainer.encode(encryptionKeyArn, forKey: .encryptionKeyArn)
        }
        if let lockDate = self.lockDate {
            try encodeContainer.encode(lockDate.timeIntervalSince1970, forKey: .lockDate)
        }
        if let locked = self.locked {
            try encodeContainer.encode(locked, forKey: .locked)
        }
        if let maxRetentionDays = self.maxRetentionDays {
            try encodeContainer.encode(maxRetentionDays, forKey: .maxRetentionDays)
        }
        if let minRetentionDays = self.minRetentionDays {
            try encodeContainer.encode(minRetentionDays, forKey: .minRetentionDays)
        }
        if numberOfRecoveryPoints != 0 {
            try encodeContainer.encode(numberOfRecoveryPoints, forKey: .numberOfRecoveryPoints)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let backupVaultNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .backupVaultName)
        backupVaultName = backupVaultNameDecoded
        let backupVaultArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .backupVaultArn)
        backupVaultArn = backupVaultArnDecoded
        let creationDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationDate)
        creationDate = creationDateDecoded
        let encryptionKeyArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .encryptionKeyArn)
        encryptionKeyArn = encryptionKeyArnDecoded
        let creatorRequestIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .creatorRequestId)
        creatorRequestId = creatorRequestIdDecoded
        let numberOfRecoveryPointsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .numberOfRecoveryPoints) ?? 0
        numberOfRecoveryPoints = numberOfRecoveryPointsDecoded
        let lockedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .locked)
        locked = lockedDecoded
        let minRetentionDaysDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .minRetentionDays)
        minRetentionDays = minRetentionDaysDecoded
        let maxRetentionDaysDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxRetentionDays)
        maxRetentionDays = maxRetentionDaysDecoded
        let lockDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lockDate)
        lockDate = lockDateDecoded
    }
}
