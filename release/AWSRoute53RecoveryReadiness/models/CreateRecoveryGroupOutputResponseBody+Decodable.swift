// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateRecoveryGroupOutputResponseBody: Swift.Equatable {
    let cells: [Swift.String]?
    let recoveryGroupArn: Swift.String?
    let recoveryGroupName: Swift.String?
    let tags: [Swift.String:Swift.String]?
}

extension CreateRecoveryGroupOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cells = "cells"
        case recoveryGroupArn = "recoveryGroupArn"
        case recoveryGroupName = "recoveryGroupName"
        case tags = "tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let cellsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .cells)
        var cellsDecoded0:[Swift.String]? = nil
        if let cellsContainer = cellsContainer {
            cellsDecoded0 = [Swift.String]()
            for string0 in cellsContainer {
                if let string0 = string0 {
                    cellsDecoded0?.append(string0)
                }
            }
        }
        cells = cellsDecoded0
        let recoveryGroupArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .recoveryGroupArn)
        recoveryGroupArn = recoveryGroupArnDecoded
        let recoveryGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .recoveryGroupName)
        recoveryGroupName = recoveryGroupNameDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, __string0) in tagsContainer {
                if let __string0 = __string0 {
                    tagsDecoded0?[key0] = __string0
                }
            }
        }
        tags = tagsDecoded0
    }
}
