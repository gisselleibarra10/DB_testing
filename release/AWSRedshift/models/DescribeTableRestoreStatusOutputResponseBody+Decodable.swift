// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeTableRestoreStatusOutputResponseBody: Swift.Equatable {
    let tableRestoreStatusDetails: [RedshiftClientTypes.TableRestoreStatus]?
    let marker: Swift.String?
}

extension DescribeTableRestoreStatusOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case marker = "Marker"
        case tableRestoreStatusDetails = "TableRestoreStatusDetails"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeTableRestoreStatusResult"))
        if containerValues.contains(.tableRestoreStatusDetails) {
            struct KeyVal0{struct TableRestoreStatus{}}
            let tableRestoreStatusDetailsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.TableRestoreStatus>.CodingKeys.self, forKey: .tableRestoreStatusDetails)
            if let tableRestoreStatusDetailsWrappedContainer = tableRestoreStatusDetailsWrappedContainer {
                let tableRestoreStatusDetailsContainer = try tableRestoreStatusDetailsWrappedContainer.decodeIfPresent([RedshiftClientTypes.TableRestoreStatus].self, forKey: .member)
                var tableRestoreStatusDetailsBuffer:[RedshiftClientTypes.TableRestoreStatus]? = nil
                if let tableRestoreStatusDetailsContainer = tableRestoreStatusDetailsContainer {
                    tableRestoreStatusDetailsBuffer = [RedshiftClientTypes.TableRestoreStatus]()
                    for structureContainer0 in tableRestoreStatusDetailsContainer {
                        tableRestoreStatusDetailsBuffer?.append(structureContainer0)
                    }
                }
                tableRestoreStatusDetails = tableRestoreStatusDetailsBuffer
            } else {
                tableRestoreStatusDetails = []
            }
        } else {
            tableRestoreStatusDetails = nil
        }
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
    }
}
