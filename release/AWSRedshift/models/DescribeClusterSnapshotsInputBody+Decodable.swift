// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeClusterSnapshotsInputBody: Swift.Equatable {
    let clusterIdentifier: Swift.String?
    let snapshotIdentifier: Swift.String?
    let snapshotArn: Swift.String?
    let snapshotType: Swift.String?
    let startTime: ClientRuntime.Date?
    let endTime: ClientRuntime.Date?
    let maxRecords: Swift.Int?
    let marker: Swift.String?
    let ownerAccount: Swift.String?
    let tagKeys: [Swift.String]?
    let tagValues: [Swift.String]?
    let clusterExists: Swift.Bool?
    let sortingEntities: [RedshiftClientTypes.SnapshotSortingEntity]?
}

extension DescribeClusterSnapshotsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterExists = "ClusterExists"
        case clusterIdentifier = "ClusterIdentifier"
        case endTime = "EndTime"
        case marker = "Marker"
        case maxRecords = "MaxRecords"
        case ownerAccount = "OwnerAccount"
        case snapshotArn = "SnapshotArn"
        case snapshotIdentifier = "SnapshotIdentifier"
        case snapshotType = "SnapshotType"
        case sortingEntities = "SortingEntities"
        case startTime = "StartTime"
        case tagKeys = "TagKeys"
        case tagValues = "TagValues"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clusterIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterIdentifier)
        clusterIdentifier = clusterIdentifierDecoded
        let snapshotIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .snapshotIdentifier)
        snapshotIdentifier = snapshotIdentifierDecoded
        let snapshotArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .snapshotArn)
        snapshotArn = snapshotArnDecoded
        let snapshotTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .snapshotType)
        snapshotType = snapshotTypeDecoded
        let startTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .startTime)
        var startTimeBuffer:ClientRuntime.Date? = nil
        if let startTimeDecoded = startTimeDecoded {
            startTimeBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(startTimeDecoded, format: .dateTime)
        }
        startTime = startTimeBuffer
        let endTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .endTime)
        var endTimeBuffer:ClientRuntime.Date? = nil
        if let endTimeDecoded = endTimeDecoded {
            endTimeBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(endTimeDecoded, format: .dateTime)
        }
        endTime = endTimeBuffer
        let maxRecordsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxRecords)
        maxRecords = maxRecordsDecoded
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
        let ownerAccountDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ownerAccount)
        ownerAccount = ownerAccountDecoded
        if containerValues.contains(.tagKeys) {
            struct KeyVal0{struct TagKey{}}
            let tagKeysWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.TagKey>.CodingKeys.self, forKey: .tagKeys)
            if let tagKeysWrappedContainer = tagKeysWrappedContainer {
                let tagKeysContainer = try tagKeysWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var tagKeysBuffer:[Swift.String]? = nil
                if let tagKeysContainer = tagKeysContainer {
                    tagKeysBuffer = [Swift.String]()
                    for stringContainer0 in tagKeysContainer {
                        tagKeysBuffer?.append(stringContainer0)
                    }
                }
                tagKeys = tagKeysBuffer
            } else {
                tagKeys = []
            }
        } else {
            tagKeys = nil
        }
        if containerValues.contains(.tagValues) {
            struct KeyVal0{struct TagValue{}}
            let tagValuesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.TagValue>.CodingKeys.self, forKey: .tagValues)
            if let tagValuesWrappedContainer = tagValuesWrappedContainer {
                let tagValuesContainer = try tagValuesWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var tagValuesBuffer:[Swift.String]? = nil
                if let tagValuesContainer = tagValuesContainer {
                    tagValuesBuffer = [Swift.String]()
                    for stringContainer0 in tagValuesContainer {
                        tagValuesBuffer?.append(stringContainer0)
                    }
                }
                tagValues = tagValuesBuffer
            } else {
                tagValues = []
            }
        } else {
            tagValues = nil
        }
        let clusterExistsDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .clusterExists)
        clusterExists = clusterExistsDecoded
        if containerValues.contains(.sortingEntities) {
            struct KeyVal0{struct SnapshotSortingEntity{}}
            let sortingEntitiesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.SnapshotSortingEntity>.CodingKeys.self, forKey: .sortingEntities)
            if let sortingEntitiesWrappedContainer = sortingEntitiesWrappedContainer {
                let sortingEntitiesContainer = try sortingEntitiesWrappedContainer.decodeIfPresent([RedshiftClientTypes.SnapshotSortingEntity].self, forKey: .member)
                var sortingEntitiesBuffer:[RedshiftClientTypes.SnapshotSortingEntity]? = nil
                if let sortingEntitiesContainer = sortingEntitiesContainer {
                    sortingEntitiesBuffer = [RedshiftClientTypes.SnapshotSortingEntity]()
                    for structureContainer0 in sortingEntitiesContainer {
                        sortingEntitiesBuffer?.append(structureContainer0)
                    }
                }
                sortingEntities = sortingEntitiesBuffer
            } else {
                sortingEntities = []
            }
        } else {
            sortingEntities = nil
        }
    }
}
