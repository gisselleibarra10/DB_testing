// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ModifyClusterIamRolesInputBody: Swift.Equatable {
    let clusterIdentifier: Swift.String?
    let addIamRoles: [Swift.String]?
    let removeIamRoles: [Swift.String]?
    let defaultIamRoleArn: Swift.String?
}

extension ModifyClusterIamRolesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case addIamRoles = "AddIamRoles"
        case clusterIdentifier = "ClusterIdentifier"
        case defaultIamRoleArn = "DefaultIamRoleArn"
        case removeIamRoles = "RemoveIamRoles"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clusterIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterIdentifier)
        clusterIdentifier = clusterIdentifierDecoded
        if containerValues.contains(.addIamRoles) {
            struct KeyVal0{struct IamRoleArn{}}
            let addIamRolesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.IamRoleArn>.CodingKeys.self, forKey: .addIamRoles)
            if let addIamRolesWrappedContainer = addIamRolesWrappedContainer {
                let addIamRolesContainer = try addIamRolesWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var addIamRolesBuffer:[Swift.String]? = nil
                if let addIamRolesContainer = addIamRolesContainer {
                    addIamRolesBuffer = [Swift.String]()
                    for stringContainer0 in addIamRolesContainer {
                        addIamRolesBuffer?.append(stringContainer0)
                    }
                }
                addIamRoles = addIamRolesBuffer
            } else {
                addIamRoles = []
            }
        } else {
            addIamRoles = nil
        }
        if containerValues.contains(.removeIamRoles) {
            struct KeyVal0{struct IamRoleArn{}}
            let removeIamRolesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.IamRoleArn>.CodingKeys.self, forKey: .removeIamRoles)
            if let removeIamRolesWrappedContainer = removeIamRolesWrappedContainer {
                let removeIamRolesContainer = try removeIamRolesWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var removeIamRolesBuffer:[Swift.String]? = nil
                if let removeIamRolesContainer = removeIamRolesContainer {
                    removeIamRolesBuffer = [Swift.String]()
                    for stringContainer0 in removeIamRolesContainer {
                        removeIamRolesBuffer?.append(stringContainer0)
                    }
                }
                removeIamRoles = removeIamRolesBuffer
            } else {
                removeIamRoles = []
            }
        } else {
            removeIamRoles = nil
        }
        let defaultIamRoleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .defaultIamRoleArn)
        defaultIamRoleArn = defaultIamRoleArnDecoded
    }
}
