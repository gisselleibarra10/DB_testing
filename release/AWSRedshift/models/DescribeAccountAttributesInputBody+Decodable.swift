// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeAccountAttributesInputBody: Swift.Equatable {
    let attributeNames: [Swift.String]?
}

extension DescribeAccountAttributesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attributeNames = "AttributeNames"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.attributeNames) {
            struct KeyVal0{struct AttributeName{}}
            let attributeNamesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.AttributeName>.CodingKeys.self, forKey: .attributeNames)
            if let attributeNamesWrappedContainer = attributeNamesWrappedContainer {
                let attributeNamesContainer = try attributeNamesWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var attributeNamesBuffer:[Swift.String]? = nil
                if let attributeNamesContainer = attributeNamesContainer {
                    attributeNamesBuffer = [Swift.String]()
                    for stringContainer0 in attributeNamesContainer {
                        attributeNamesBuffer?.append(stringContainer0)
                    }
                }
                attributeNames = attributeNamesBuffer
            } else {
                attributeNames = []
            }
        } else {
            attributeNames = nil
        }
    }
}
