// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeUsageLimitsOutputResponseBody: Swift.Equatable {
    let usageLimits: [RedshiftClientTypes.UsageLimit]?
    let marker: Swift.String?
}

extension DescribeUsageLimitsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case marker = "Marker"
        case usageLimits = "UsageLimits"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeUsageLimitsResult"))
        if containerValues.contains(.usageLimits) {
            struct KeyVal0{struct member{}}
            let usageLimitsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .usageLimits)
            if let usageLimitsWrappedContainer = usageLimitsWrappedContainer {
                let usageLimitsContainer = try usageLimitsWrappedContainer.decodeIfPresent([RedshiftClientTypes.UsageLimit].self, forKey: .member)
                var usageLimitsBuffer:[RedshiftClientTypes.UsageLimit]? = nil
                if let usageLimitsContainer = usageLimitsContainer {
                    usageLimitsBuffer = [RedshiftClientTypes.UsageLimit]()
                    for structureContainer0 in usageLimitsContainer {
                        usageLimitsBuffer?.append(structureContainer0)
                    }
                }
                usageLimits = usageLimitsBuffer
            } else {
                usageLimits = []
            }
        } else {
            usageLimits = nil
        }
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
    }
}
