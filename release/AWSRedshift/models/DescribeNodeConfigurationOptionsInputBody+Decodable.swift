// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeNodeConfigurationOptionsInputBody: Swift.Equatable {
    let actionType: RedshiftClientTypes.ActionType?
    let clusterIdentifier: Swift.String?
    let snapshotIdentifier: Swift.String?
    let snapshotArn: Swift.String?
    let ownerAccount: Swift.String?
    let filters: [RedshiftClientTypes.NodeConfigurationOptionsFilter]?
    let marker: Swift.String?
    let maxRecords: Swift.Int?
}

extension DescribeNodeConfigurationOptionsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case actionType = "ActionType"
        case clusterIdentifier = "ClusterIdentifier"
        case filters = "Filter"
        case marker = "Marker"
        case maxRecords = "MaxRecords"
        case ownerAccount = "OwnerAccount"
        case snapshotArn = "SnapshotArn"
        case snapshotIdentifier = "SnapshotIdentifier"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let actionTypeDecoded = try containerValues.decodeIfPresent(RedshiftClientTypes.ActionType.self, forKey: .actionType)
        actionType = actionTypeDecoded
        let clusterIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterIdentifier)
        clusterIdentifier = clusterIdentifierDecoded
        let snapshotIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .snapshotIdentifier)
        snapshotIdentifier = snapshotIdentifierDecoded
        let snapshotArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .snapshotArn)
        snapshotArn = snapshotArnDecoded
        let ownerAccountDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ownerAccount)
        ownerAccount = ownerAccountDecoded
        if containerValues.contains(.filters) {
            struct KeyVal0{struct NodeConfigurationOptionsFilter{}}
            let filtersWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.NodeConfigurationOptionsFilter>.CodingKeys.self, forKey: .filters)
            if let filtersWrappedContainer = filtersWrappedContainer {
                let filtersContainer = try filtersWrappedContainer.decodeIfPresent([RedshiftClientTypes.NodeConfigurationOptionsFilter].self, forKey: .member)
                var filtersBuffer:[RedshiftClientTypes.NodeConfigurationOptionsFilter]? = nil
                if let filtersContainer = filtersContainer {
                    filtersBuffer = [RedshiftClientTypes.NodeConfigurationOptionsFilter]()
                    for structureContainer0 in filtersContainer {
                        filtersBuffer?.append(structureContainer0)
                    }
                }
                filters = filtersBuffer
            } else {
                filters = []
            }
        } else {
            filters = nil
        }
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
        let maxRecordsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxRecords)
        maxRecords = maxRecordsDecoded
    }
}
