// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct EnableLoggingInputBody: Swift.Equatable {
    let clusterIdentifier: Swift.String?
    let bucketName: Swift.String?
    let s3KeyPrefix: Swift.String?
    let logDestinationType: RedshiftClientTypes.LogDestinationType?
    let logExports: [Swift.String]?
}

extension EnableLoggingInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bucketName = "BucketName"
        case clusterIdentifier = "ClusterIdentifier"
        case logDestinationType = "LogDestinationType"
        case logExports = "LogExports"
        case s3KeyPrefix = "S3KeyPrefix"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clusterIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterIdentifier)
        clusterIdentifier = clusterIdentifierDecoded
        let bucketNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .bucketName)
        bucketName = bucketNameDecoded
        let s3KeyPrefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .s3KeyPrefix)
        s3KeyPrefix = s3KeyPrefixDecoded
        let logDestinationTypeDecoded = try containerValues.decodeIfPresent(RedshiftClientTypes.LogDestinationType.self, forKey: .logDestinationType)
        logDestinationType = logDestinationTypeDecoded
        if containerValues.contains(.logExports) {
            struct KeyVal0{struct member{}}
            let logExportsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .logExports)
            if let logExportsWrappedContainer = logExportsWrappedContainer {
                let logExportsContainer = try logExportsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var logExportsBuffer:[Swift.String]? = nil
                if let logExportsContainer = logExportsContainer {
                    logExportsBuffer = [Swift.String]()
                    for stringContainer0 in logExportsContainer {
                        logExportsBuffer?.append(stringContainer0)
                    }
                }
                logExports = logExportsBuffer
            } else {
                logExports = []
            }
        } else {
            logExports = nil
        }
    }
}
