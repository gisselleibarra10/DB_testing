// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateClusterInputBody: Swift.Equatable {
    let dBName: Swift.String?
    let clusterIdentifier: Swift.String?
    let clusterType: Swift.String?
    let nodeType: Swift.String?
    let masterUsername: Swift.String?
    let masterUserPassword: Swift.String?
    let clusterSecurityGroups: [Swift.String]?
    let vpcSecurityGroupIds: [Swift.String]?
    let clusterSubnetGroupName: Swift.String?
    let availabilityZone: Swift.String?
    let preferredMaintenanceWindow: Swift.String?
    let clusterParameterGroupName: Swift.String?
    let automatedSnapshotRetentionPeriod: Swift.Int?
    let manualSnapshotRetentionPeriod: Swift.Int?
    let port: Swift.Int?
    let clusterVersion: Swift.String?
    let allowVersionUpgrade: Swift.Bool?
    let numberOfNodes: Swift.Int?
    let publiclyAccessible: Swift.Bool?
    let encrypted: Swift.Bool?
    let hsmClientCertificateIdentifier: Swift.String?
    let hsmConfigurationIdentifier: Swift.String?
    let elasticIp: Swift.String?
    let tags: [RedshiftClientTypes.Tag]?
    let kmsKeyId: Swift.String?
    let enhancedVpcRouting: Swift.Bool?
    let additionalInfo: Swift.String?
    let iamRoles: [Swift.String]?
    let maintenanceTrackName: Swift.String?
    let snapshotScheduleIdentifier: Swift.String?
    let availabilityZoneRelocation: Swift.Bool?
    let aquaConfigurationStatus: RedshiftClientTypes.AquaConfigurationStatus?
    let defaultIamRoleArn: Swift.String?
    let loadSampleData: Swift.String?
}

extension CreateClusterInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case additionalInfo = "AdditionalInfo"
        case allowVersionUpgrade = "AllowVersionUpgrade"
        case aquaConfigurationStatus = "AquaConfigurationStatus"
        case automatedSnapshotRetentionPeriod = "AutomatedSnapshotRetentionPeriod"
        case availabilityZone = "AvailabilityZone"
        case availabilityZoneRelocation = "AvailabilityZoneRelocation"
        case clusterIdentifier = "ClusterIdentifier"
        case clusterParameterGroupName = "ClusterParameterGroupName"
        case clusterSecurityGroups = "ClusterSecurityGroups"
        case clusterSubnetGroupName = "ClusterSubnetGroupName"
        case clusterType = "ClusterType"
        case clusterVersion = "ClusterVersion"
        case dBName = "DBName"
        case defaultIamRoleArn = "DefaultIamRoleArn"
        case elasticIp = "ElasticIp"
        case encrypted = "Encrypted"
        case enhancedVpcRouting = "EnhancedVpcRouting"
        case hsmClientCertificateIdentifier = "HsmClientCertificateIdentifier"
        case hsmConfigurationIdentifier = "HsmConfigurationIdentifier"
        case iamRoles = "IamRoles"
        case kmsKeyId = "KmsKeyId"
        case loadSampleData = "LoadSampleData"
        case maintenanceTrackName = "MaintenanceTrackName"
        case manualSnapshotRetentionPeriod = "ManualSnapshotRetentionPeriod"
        case masterUserPassword = "MasterUserPassword"
        case masterUsername = "MasterUsername"
        case nodeType = "NodeType"
        case numberOfNodes = "NumberOfNodes"
        case port = "Port"
        case preferredMaintenanceWindow = "PreferredMaintenanceWindow"
        case publiclyAccessible = "PubliclyAccessible"
        case snapshotScheduleIdentifier = "SnapshotScheduleIdentifier"
        case tags = "Tags"
        case vpcSecurityGroupIds = "VpcSecurityGroupIds"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dBNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dBName)
        dBName = dBNameDecoded
        let clusterIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterIdentifier)
        clusterIdentifier = clusterIdentifierDecoded
        let clusterTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterType)
        clusterType = clusterTypeDecoded
        let nodeTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nodeType)
        nodeType = nodeTypeDecoded
        let masterUsernameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .masterUsername)
        masterUsername = masterUsernameDecoded
        let masterUserPasswordDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .masterUserPassword)
        masterUserPassword = masterUserPasswordDecoded
        if containerValues.contains(.clusterSecurityGroups) {
            struct KeyVal0{struct ClusterSecurityGroupName{}}
            let clusterSecurityGroupsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.ClusterSecurityGroupName>.CodingKeys.self, forKey: .clusterSecurityGroups)
            if let clusterSecurityGroupsWrappedContainer = clusterSecurityGroupsWrappedContainer {
                let clusterSecurityGroupsContainer = try clusterSecurityGroupsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var clusterSecurityGroupsBuffer:[Swift.String]? = nil
                if let clusterSecurityGroupsContainer = clusterSecurityGroupsContainer {
                    clusterSecurityGroupsBuffer = [Swift.String]()
                    for stringContainer0 in clusterSecurityGroupsContainer {
                        clusterSecurityGroupsBuffer?.append(stringContainer0)
                    }
                }
                clusterSecurityGroups = clusterSecurityGroupsBuffer
            } else {
                clusterSecurityGroups = []
            }
        } else {
            clusterSecurityGroups = nil
        }
        if containerValues.contains(.vpcSecurityGroupIds) {
            struct KeyVal0{struct VpcSecurityGroupId{}}
            let vpcSecurityGroupIdsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.VpcSecurityGroupId>.CodingKeys.self, forKey: .vpcSecurityGroupIds)
            if let vpcSecurityGroupIdsWrappedContainer = vpcSecurityGroupIdsWrappedContainer {
                let vpcSecurityGroupIdsContainer = try vpcSecurityGroupIdsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var vpcSecurityGroupIdsBuffer:[Swift.String]? = nil
                if let vpcSecurityGroupIdsContainer = vpcSecurityGroupIdsContainer {
                    vpcSecurityGroupIdsBuffer = [Swift.String]()
                    for stringContainer0 in vpcSecurityGroupIdsContainer {
                        vpcSecurityGroupIdsBuffer?.append(stringContainer0)
                    }
                }
                vpcSecurityGroupIds = vpcSecurityGroupIdsBuffer
            } else {
                vpcSecurityGroupIds = []
            }
        } else {
            vpcSecurityGroupIds = nil
        }
        let clusterSubnetGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterSubnetGroupName)
        clusterSubnetGroupName = clusterSubnetGroupNameDecoded
        let availabilityZoneDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .availabilityZone)
        availabilityZone = availabilityZoneDecoded
        let preferredMaintenanceWindowDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .preferredMaintenanceWindow)
        preferredMaintenanceWindow = preferredMaintenanceWindowDecoded
        let clusterParameterGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterParameterGroupName)
        clusterParameterGroupName = clusterParameterGroupNameDecoded
        let automatedSnapshotRetentionPeriodDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .automatedSnapshotRetentionPeriod)
        automatedSnapshotRetentionPeriod = automatedSnapshotRetentionPeriodDecoded
        let manualSnapshotRetentionPeriodDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .manualSnapshotRetentionPeriod)
        manualSnapshotRetentionPeriod = manualSnapshotRetentionPeriodDecoded
        let portDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .port)
        port = portDecoded
        let clusterVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterVersion)
        clusterVersion = clusterVersionDecoded
        let allowVersionUpgradeDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .allowVersionUpgrade)
        allowVersionUpgrade = allowVersionUpgradeDecoded
        let numberOfNodesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .numberOfNodes)
        numberOfNodes = numberOfNodesDecoded
        let publiclyAccessibleDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .publiclyAccessible)
        publiclyAccessible = publiclyAccessibleDecoded
        let encryptedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .encrypted)
        encrypted = encryptedDecoded
        let hsmClientCertificateIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .hsmClientCertificateIdentifier)
        hsmClientCertificateIdentifier = hsmClientCertificateIdentifierDecoded
        let hsmConfigurationIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .hsmConfigurationIdentifier)
        hsmConfigurationIdentifier = hsmConfigurationIdentifierDecoded
        let elasticIpDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .elasticIp)
        elasticIp = elasticIpDecoded
        if containerValues.contains(.tags) {
            struct KeyVal0{struct Tag{}}
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.Tag>.CodingKeys.self, forKey: .tags)
            if let tagsWrappedContainer = tagsWrappedContainer {
                let tagsContainer = try tagsWrappedContainer.decodeIfPresent([RedshiftClientTypes.Tag].self, forKey: .member)
                var tagsBuffer:[RedshiftClientTypes.Tag]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [RedshiftClientTypes.Tag]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
        let kmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kmsKeyId)
        kmsKeyId = kmsKeyIdDecoded
        let enhancedVpcRoutingDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enhancedVpcRouting)
        enhancedVpcRouting = enhancedVpcRoutingDecoded
        let additionalInfoDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .additionalInfo)
        additionalInfo = additionalInfoDecoded
        if containerValues.contains(.iamRoles) {
            struct KeyVal0{struct IamRoleArn{}}
            let iamRolesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.IamRoleArn>.CodingKeys.self, forKey: .iamRoles)
            if let iamRolesWrappedContainer = iamRolesWrappedContainer {
                let iamRolesContainer = try iamRolesWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var iamRolesBuffer:[Swift.String]? = nil
                if let iamRolesContainer = iamRolesContainer {
                    iamRolesBuffer = [Swift.String]()
                    for stringContainer0 in iamRolesContainer {
                        iamRolesBuffer?.append(stringContainer0)
                    }
                }
                iamRoles = iamRolesBuffer
            } else {
                iamRoles = []
            }
        } else {
            iamRoles = nil
        }
        let maintenanceTrackNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .maintenanceTrackName)
        maintenanceTrackName = maintenanceTrackNameDecoded
        let snapshotScheduleIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .snapshotScheduleIdentifier)
        snapshotScheduleIdentifier = snapshotScheduleIdentifierDecoded
        let availabilityZoneRelocationDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .availabilityZoneRelocation)
        availabilityZoneRelocation = availabilityZoneRelocationDecoded
        let aquaConfigurationStatusDecoded = try containerValues.decodeIfPresent(RedshiftClientTypes.AquaConfigurationStatus.self, forKey: .aquaConfigurationStatus)
        aquaConfigurationStatus = aquaConfigurationStatusDecoded
        let defaultIamRoleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .defaultIamRoleArn)
        defaultIamRoleArn = defaultIamRoleArnDecoded
        let loadSampleDataDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .loadSampleData)
        loadSampleData = loadSampleDataDecoded
    }
}
