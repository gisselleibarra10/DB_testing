// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct CreateScheduledActionInput: Swift.Equatable {
    /// If true, the schedule is enabled. If false, the scheduled action does not trigger. For more information about state of the scheduled action, see [ScheduledAction].
    public var enable: Swift.Bool?
    /// The end time in UTC of the scheduled action. After this time, the scheduled action does not trigger. For more information about this parameter, see [ScheduledAction].
    public var endTime: ClientRuntime.Date?
    /// The IAM role to assume to run the target action. For more information about this parameter, see [ScheduledAction].
    /// This member is required.
    public var iamRole: Swift.String?
    /// The schedule in at( ) or cron( ) format. For more information about this parameter, see [ScheduledAction].
    /// This member is required.
    public var schedule: Swift.String?
    /// The description of the scheduled action.
    public var scheduledActionDescription: Swift.String?
    /// The name of the scheduled action. The name must be unique within an account. For more information about this parameter, see [ScheduledAction].
    /// This member is required.
    public var scheduledActionName: Swift.String?
    /// The start time in UTC of the scheduled action. Before this time, the scheduled action does not trigger. For more information about this parameter, see [ScheduledAction].
    public var startTime: ClientRuntime.Date?
    /// A JSON format string of the Amazon Redshift API operation with input parameters. For more information about this parameter, see [ScheduledAction].
    /// This member is required.
    public var targetAction: RedshiftClientTypes.ScheduledActionType?

    public init (
        enable: Swift.Bool? = nil,
        endTime: ClientRuntime.Date? = nil,
        iamRole: Swift.String? = nil,
        schedule: Swift.String? = nil,
        scheduledActionDescription: Swift.String? = nil,
        scheduledActionName: Swift.String? = nil,
        startTime: ClientRuntime.Date? = nil,
        targetAction: RedshiftClientTypes.ScheduledActionType? = nil
    )
    {
        self.enable = enable
        self.endTime = endTime
        self.iamRole = iamRole
        self.schedule = schedule
        self.scheduledActionDescription = scheduledActionDescription
        self.scheduledActionName = scheduledActionName
        self.startTime = startTime
        self.targetAction = targetAction
    }
}
