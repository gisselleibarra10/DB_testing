// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeSnapshotSchedulesOutputResponseBody: Swift.Equatable {
    let snapshotSchedules: [RedshiftClientTypes.SnapshotSchedule]?
    let marker: Swift.String?
}

extension DescribeSnapshotSchedulesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case marker = "Marker"
        case snapshotSchedules = "SnapshotSchedules"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeSnapshotSchedulesResult"))
        if containerValues.contains(.snapshotSchedules) {
            struct KeyVal0{struct SnapshotSchedule{}}
            let snapshotSchedulesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.SnapshotSchedule>.CodingKeys.self, forKey: .snapshotSchedules)
            if let snapshotSchedulesWrappedContainer = snapshotSchedulesWrappedContainer {
                let snapshotSchedulesContainer = try snapshotSchedulesWrappedContainer.decodeIfPresent([RedshiftClientTypes.SnapshotSchedule].self, forKey: .member)
                var snapshotSchedulesBuffer:[RedshiftClientTypes.SnapshotSchedule]? = nil
                if let snapshotSchedulesContainer = snapshotSchedulesContainer {
                    snapshotSchedulesBuffer = [RedshiftClientTypes.SnapshotSchedule]()
                    for structureContainer0 in snapshotSchedulesContainer {
                        snapshotSchedulesBuffer?.append(structureContainer0)
                    }
                }
                snapshotSchedules = snapshotSchedulesBuffer
            } else {
                snapshotSchedules = []
            }
        } else {
            snapshotSchedules = nil
        }
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
    }
}
