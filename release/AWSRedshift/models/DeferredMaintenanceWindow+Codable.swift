// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension RedshiftClientTypes.DeferredMaintenanceWindow: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deferMaintenanceEndTime = "DeferMaintenanceEndTime"
        case deferMaintenanceIdentifier = "DeferMaintenanceIdentifier"
        case deferMaintenanceStartTime = "DeferMaintenanceStartTime"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let deferMaintenanceEndTime = deferMaintenanceEndTime {
            try container.encode(ClientRuntime.TimestampWrapper(deferMaintenanceEndTime, format: .dateTime), forKey: ClientRuntime.Key("deferMaintenanceEndTime"))
        }
        if let deferMaintenanceIdentifier = deferMaintenanceIdentifier {
            try container.encode(deferMaintenanceIdentifier, forKey: ClientRuntime.Key("DeferMaintenanceIdentifier"))
        }
        if let deferMaintenanceStartTime = deferMaintenanceStartTime {
            try container.encode(ClientRuntime.TimestampWrapper(deferMaintenanceStartTime, format: .dateTime), forKey: ClientRuntime.Key("deferMaintenanceStartTime"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deferMaintenanceIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deferMaintenanceIdentifier)
        deferMaintenanceIdentifier = deferMaintenanceIdentifierDecoded
        let deferMaintenanceStartTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deferMaintenanceStartTime)
        var deferMaintenanceStartTimeBuffer:ClientRuntime.Date? = nil
        if let deferMaintenanceStartTimeDecoded = deferMaintenanceStartTimeDecoded {
            deferMaintenanceStartTimeBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(deferMaintenanceStartTimeDecoded, format: .dateTime)
        }
        deferMaintenanceStartTime = deferMaintenanceStartTimeBuffer
        let deferMaintenanceEndTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deferMaintenanceEndTime)
        var deferMaintenanceEndTimeBuffer:ClientRuntime.Date? = nil
        if let deferMaintenanceEndTimeDecoded = deferMaintenanceEndTimeDecoded {
            deferMaintenanceEndTimeBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(deferMaintenanceEndTimeDecoded, format: .dateTime)
        }
        deferMaintenanceEndTime = deferMaintenanceEndTimeBuffer
    }
}
