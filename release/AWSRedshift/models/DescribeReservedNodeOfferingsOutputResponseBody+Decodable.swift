// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeReservedNodeOfferingsOutputResponseBody: Swift.Equatable {
    let marker: Swift.String?
    let reservedNodeOfferings: [RedshiftClientTypes.ReservedNodeOffering]?
}

extension DescribeReservedNodeOfferingsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case marker = "Marker"
        case reservedNodeOfferings = "ReservedNodeOfferings"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeReservedNodeOfferingsResult"))
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
        if containerValues.contains(.reservedNodeOfferings) {
            struct KeyVal0{struct ReservedNodeOffering{}}
            let reservedNodeOfferingsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.ReservedNodeOffering>.CodingKeys.self, forKey: .reservedNodeOfferings)
            if let reservedNodeOfferingsWrappedContainer = reservedNodeOfferingsWrappedContainer {
                let reservedNodeOfferingsContainer = try reservedNodeOfferingsWrappedContainer.decodeIfPresent([RedshiftClientTypes.ReservedNodeOffering].self, forKey: .member)
                var reservedNodeOfferingsBuffer:[RedshiftClientTypes.ReservedNodeOffering]? = nil
                if let reservedNodeOfferingsContainer = reservedNodeOfferingsContainer {
                    reservedNodeOfferingsBuffer = [RedshiftClientTypes.ReservedNodeOffering]()
                    for structureContainer0 in reservedNodeOfferingsContainer {
                        reservedNodeOfferingsBuffer?.append(structureContainer0)
                    }
                }
                reservedNodeOfferings = reservedNodeOfferingsBuffer
            } else {
                reservedNodeOfferings = []
            }
        } else {
            reservedNodeOfferings = nil
        }
    }
}
