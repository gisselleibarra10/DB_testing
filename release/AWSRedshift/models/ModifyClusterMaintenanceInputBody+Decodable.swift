// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ModifyClusterMaintenanceInputBody: Swift.Equatable {
    let clusterIdentifier: Swift.String?
    let deferMaintenance: Swift.Bool?
    let deferMaintenanceIdentifier: Swift.String?
    let deferMaintenanceStartTime: ClientRuntime.Date?
    let deferMaintenanceEndTime: ClientRuntime.Date?
    let deferMaintenanceDuration: Swift.Int?
}

extension ModifyClusterMaintenanceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterIdentifier = "ClusterIdentifier"
        case deferMaintenance = "DeferMaintenance"
        case deferMaintenanceDuration = "DeferMaintenanceDuration"
        case deferMaintenanceEndTime = "DeferMaintenanceEndTime"
        case deferMaintenanceIdentifier = "DeferMaintenanceIdentifier"
        case deferMaintenanceStartTime = "DeferMaintenanceStartTime"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clusterIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterIdentifier)
        clusterIdentifier = clusterIdentifierDecoded
        let deferMaintenanceDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .deferMaintenance)
        deferMaintenance = deferMaintenanceDecoded
        let deferMaintenanceIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deferMaintenanceIdentifier)
        deferMaintenanceIdentifier = deferMaintenanceIdentifierDecoded
        let deferMaintenanceStartTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deferMaintenanceStartTime)
        var deferMaintenanceStartTimeBuffer:ClientRuntime.Date? = nil
        if let deferMaintenanceStartTimeDecoded = deferMaintenanceStartTimeDecoded {
            deferMaintenanceStartTimeBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(deferMaintenanceStartTimeDecoded, format: .dateTime)
        }
        deferMaintenanceStartTime = deferMaintenanceStartTimeBuffer
        let deferMaintenanceEndTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deferMaintenanceEndTime)
        var deferMaintenanceEndTimeBuffer:ClientRuntime.Date? = nil
        if let deferMaintenanceEndTimeDecoded = deferMaintenanceEndTimeDecoded {
            deferMaintenanceEndTimeBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(deferMaintenanceEndTimeDecoded, format: .dateTime)
        }
        deferMaintenanceEndTime = deferMaintenanceEndTimeBuffer
        let deferMaintenanceDurationDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .deferMaintenanceDuration)
        deferMaintenanceDuration = deferMaintenanceDurationDecoded
    }
}
