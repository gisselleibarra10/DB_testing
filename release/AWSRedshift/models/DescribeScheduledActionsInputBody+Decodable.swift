// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeScheduledActionsInputBody: Swift.Equatable {
    let scheduledActionName: Swift.String?
    let targetActionType: RedshiftClientTypes.ScheduledActionTypeValues?
    let startTime: ClientRuntime.Date?
    let endTime: ClientRuntime.Date?
    let active: Swift.Bool?
    let filters: [RedshiftClientTypes.ScheduledActionFilter]?
    let marker: Swift.String?
    let maxRecords: Swift.Int?
}

extension DescribeScheduledActionsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case active = "Active"
        case endTime = "EndTime"
        case filters = "Filters"
        case marker = "Marker"
        case maxRecords = "MaxRecords"
        case scheduledActionName = "ScheduledActionName"
        case startTime = "StartTime"
        case targetActionType = "TargetActionType"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let scheduledActionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .scheduledActionName)
        scheduledActionName = scheduledActionNameDecoded
        let targetActionTypeDecoded = try containerValues.decodeIfPresent(RedshiftClientTypes.ScheduledActionTypeValues.self, forKey: .targetActionType)
        targetActionType = targetActionTypeDecoded
        let startTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .startTime)
        var startTimeBuffer:ClientRuntime.Date? = nil
        if let startTimeDecoded = startTimeDecoded {
            startTimeBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(startTimeDecoded, format: .dateTime)
        }
        startTime = startTimeBuffer
        let endTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .endTime)
        var endTimeBuffer:ClientRuntime.Date? = nil
        if let endTimeDecoded = endTimeDecoded {
            endTimeBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(endTimeDecoded, format: .dateTime)
        }
        endTime = endTimeBuffer
        let activeDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .active)
        active = activeDecoded
        if containerValues.contains(.filters) {
            struct KeyVal0{struct ScheduledActionFilter{}}
            let filtersWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.ScheduledActionFilter>.CodingKeys.self, forKey: .filters)
            if let filtersWrappedContainer = filtersWrappedContainer {
                let filtersContainer = try filtersWrappedContainer.decodeIfPresent([RedshiftClientTypes.ScheduledActionFilter].self, forKey: .member)
                var filtersBuffer:[RedshiftClientTypes.ScheduledActionFilter]? = nil
                if let filtersContainer = filtersContainer {
                    filtersBuffer = [RedshiftClientTypes.ScheduledActionFilter]()
                    for structureContainer0 in filtersContainer {
                        filtersBuffer?.append(structureContainer0)
                    }
                }
                filters = filtersBuffer
            } else {
                filters = []
            }
        } else {
            filters = nil
        }
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
        let maxRecordsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxRecords)
        maxRecords = maxRecordsDecoded
    }
}
