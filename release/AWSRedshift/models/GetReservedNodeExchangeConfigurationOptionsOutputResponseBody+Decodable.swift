// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetReservedNodeExchangeConfigurationOptionsOutputResponseBody: Swift.Equatable {
    let marker: Swift.String?
    let reservedNodeConfigurationOptionList: [RedshiftClientTypes.ReservedNodeConfigurationOption]?
}

extension GetReservedNodeExchangeConfigurationOptionsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case marker = "Marker"
        case reservedNodeConfigurationOptionList = "ReservedNodeConfigurationOptionList"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("GetReservedNodeExchangeConfigurationOptionsResult"))
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
        if containerValues.contains(.reservedNodeConfigurationOptionList) {
            struct KeyVal0{struct ReservedNodeConfigurationOption{}}
            let reservedNodeConfigurationOptionListWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.ReservedNodeConfigurationOption>.CodingKeys.self, forKey: .reservedNodeConfigurationOptionList)
            if let reservedNodeConfigurationOptionListWrappedContainer = reservedNodeConfigurationOptionListWrappedContainer {
                let reservedNodeConfigurationOptionListContainer = try reservedNodeConfigurationOptionListWrappedContainer.decodeIfPresent([RedshiftClientTypes.ReservedNodeConfigurationOption].self, forKey: .member)
                var reservedNodeConfigurationOptionListBuffer:[RedshiftClientTypes.ReservedNodeConfigurationOption]? = nil
                if let reservedNodeConfigurationOptionListContainer = reservedNodeConfigurationOptionListContainer {
                    reservedNodeConfigurationOptionListBuffer = [RedshiftClientTypes.ReservedNodeConfigurationOption]()
                    for structureContainer0 in reservedNodeConfigurationOptionListContainer {
                        reservedNodeConfigurationOptionListBuffer?.append(structureContainer0)
                    }
                }
                reservedNodeConfigurationOptionList = reservedNodeConfigurationOptionListBuffer
            } else {
                reservedNodeConfigurationOptionList = []
            }
        } else {
            reservedNodeConfigurationOptionList = nil
        }
    }
}
