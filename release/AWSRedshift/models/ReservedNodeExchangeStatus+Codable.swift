// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension RedshiftClientTypes.ReservedNodeExchangeStatus: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case requestTime = "RequestTime"
        case reservedNodeExchangeRequestId = "ReservedNodeExchangeRequestId"
        case sourceReservedNodeCount = "SourceReservedNodeCount"
        case sourceReservedNodeId = "SourceReservedNodeId"
        case sourceReservedNodeType = "SourceReservedNodeType"
        case status = "Status"
        case targetReservedNodeCount = "TargetReservedNodeCount"
        case targetReservedNodeOfferingId = "TargetReservedNodeOfferingId"
        case targetReservedNodeType = "TargetReservedNodeType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let requestTime = requestTime {
            try container.encode(ClientRuntime.TimestampWrapper(requestTime, format: .dateTime), forKey: ClientRuntime.Key("requestTime"))
        }
        if let reservedNodeExchangeRequestId = reservedNodeExchangeRequestId {
            try container.encode(reservedNodeExchangeRequestId, forKey: ClientRuntime.Key("ReservedNodeExchangeRequestId"))
        }
        if sourceReservedNodeCount != 0 {
            try container.encode(sourceReservedNodeCount, forKey: ClientRuntime.Key("SourceReservedNodeCount"))
        }
        if let sourceReservedNodeId = sourceReservedNodeId {
            try container.encode(sourceReservedNodeId, forKey: ClientRuntime.Key("SourceReservedNodeId"))
        }
        if let sourceReservedNodeType = sourceReservedNodeType {
            try container.encode(sourceReservedNodeType, forKey: ClientRuntime.Key("SourceReservedNodeType"))
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
        if targetReservedNodeCount != 0 {
            try container.encode(targetReservedNodeCount, forKey: ClientRuntime.Key("TargetReservedNodeCount"))
        }
        if let targetReservedNodeOfferingId = targetReservedNodeOfferingId {
            try container.encode(targetReservedNodeOfferingId, forKey: ClientRuntime.Key("TargetReservedNodeOfferingId"))
        }
        if let targetReservedNodeType = targetReservedNodeType {
            try container.encode(targetReservedNodeType, forKey: ClientRuntime.Key("TargetReservedNodeType"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let reservedNodeExchangeRequestIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .reservedNodeExchangeRequestId)
        reservedNodeExchangeRequestId = reservedNodeExchangeRequestIdDecoded
        let statusDecoded = try containerValues.decodeIfPresent(RedshiftClientTypes.ReservedNodeExchangeStatusType.self, forKey: .status)
        status = statusDecoded
        let requestTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .requestTime)
        var requestTimeBuffer:ClientRuntime.Date? = nil
        if let requestTimeDecoded = requestTimeDecoded {
            requestTimeBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(requestTimeDecoded, format: .dateTime)
        }
        requestTime = requestTimeBuffer
        let sourceReservedNodeIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceReservedNodeId)
        sourceReservedNodeId = sourceReservedNodeIdDecoded
        let sourceReservedNodeTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceReservedNodeType)
        sourceReservedNodeType = sourceReservedNodeTypeDecoded
        let sourceReservedNodeCountDecoded = try containerValues.decode(Swift.Int.self, forKey: .sourceReservedNodeCount)
        sourceReservedNodeCount = sourceReservedNodeCountDecoded
        let targetReservedNodeOfferingIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .targetReservedNodeOfferingId)
        targetReservedNodeOfferingId = targetReservedNodeOfferingIdDecoded
        let targetReservedNodeTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .targetReservedNodeType)
        targetReservedNodeType = targetReservedNodeTypeDecoded
        let targetReservedNodeCountDecoded = try containerValues.decode(Swift.Int.self, forKey: .targetReservedNodeCount)
        targetReservedNodeCount = targetReservedNodeCountDecoded
    }
}
