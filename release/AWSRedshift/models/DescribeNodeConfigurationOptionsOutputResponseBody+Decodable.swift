// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeNodeConfigurationOptionsOutputResponseBody: Swift.Equatable {
    let nodeConfigurationOptionList: [RedshiftClientTypes.NodeConfigurationOption]?
    let marker: Swift.String?
}

extension DescribeNodeConfigurationOptionsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case marker = "Marker"
        case nodeConfigurationOptionList = "NodeConfigurationOptionList"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeNodeConfigurationOptionsResult"))
        if containerValues.contains(.nodeConfigurationOptionList) {
            struct KeyVal0{struct NodeConfigurationOption{}}
            let nodeConfigurationOptionListWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.NodeConfigurationOption>.CodingKeys.self, forKey: .nodeConfigurationOptionList)
            if let nodeConfigurationOptionListWrappedContainer = nodeConfigurationOptionListWrappedContainer {
                let nodeConfigurationOptionListContainer = try nodeConfigurationOptionListWrappedContainer.decodeIfPresent([RedshiftClientTypes.NodeConfigurationOption].self, forKey: .member)
                var nodeConfigurationOptionListBuffer:[RedshiftClientTypes.NodeConfigurationOption]? = nil
                if let nodeConfigurationOptionListContainer = nodeConfigurationOptionListContainer {
                    nodeConfigurationOptionListBuffer = [RedshiftClientTypes.NodeConfigurationOption]()
                    for structureContainer0 in nodeConfigurationOptionListContainer {
                        nodeConfigurationOptionListBuffer?.append(structureContainer0)
                    }
                }
                nodeConfigurationOptionList = nodeConfigurationOptionListBuffer
            } else {
                nodeConfigurationOptionList = []
            }
        } else {
            nodeConfigurationOptionList = nil
        }
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
    }
}
