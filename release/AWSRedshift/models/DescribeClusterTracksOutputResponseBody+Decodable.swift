// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeClusterTracksOutputResponseBody: Swift.Equatable {
    let maintenanceTracks: [RedshiftClientTypes.MaintenanceTrack]?
    let marker: Swift.String?
}

extension DescribeClusterTracksOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maintenanceTracks = "MaintenanceTracks"
        case marker = "Marker"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeClusterTracksResult"))
        if containerValues.contains(.maintenanceTracks) {
            struct KeyVal0{struct MaintenanceTrack{}}
            let maintenanceTracksWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.MaintenanceTrack>.CodingKeys.self, forKey: .maintenanceTracks)
            if let maintenanceTracksWrappedContainer = maintenanceTracksWrappedContainer {
                let maintenanceTracksContainer = try maintenanceTracksWrappedContainer.decodeIfPresent([RedshiftClientTypes.MaintenanceTrack].self, forKey: .member)
                var maintenanceTracksBuffer:[RedshiftClientTypes.MaintenanceTrack]? = nil
                if let maintenanceTracksContainer = maintenanceTracksContainer {
                    maintenanceTracksBuffer = [RedshiftClientTypes.MaintenanceTrack]()
                    for structureContainer0 in maintenanceTracksContainer {
                        maintenanceTracksBuffer?.append(structureContainer0)
                    }
                }
                maintenanceTracks = maintenanceTracksBuffer
            } else {
                maintenanceTracks = []
            }
        } else {
            maintenanceTracks = nil
        }
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
    }
}
