// Code generated by smithy-swift-codegen. DO NOT EDIT!



///
public struct ModifyEventSubscriptionInput: Swift.Equatable {
    /// A Boolean value indicating if the subscription is enabled. true indicates the subscription is enabled
    public var enabled: Swift.Bool?
    /// Specifies the Amazon Redshift event categories to be published by the event notification subscription. Values: configuration, management, monitoring, security, pending
    public var eventCategories: [Swift.String]?
    /// Specifies the Amazon Redshift event severity to be published by the event notification subscription. Values: ERROR, INFO
    public var severity: Swift.String?
    /// The Amazon Resource Name (ARN) of the SNS topic to be used by the event notification subscription.
    public var snsTopicArn: Swift.String?
    /// A list of one or more identifiers of Amazon Redshift source objects. All of the objects must be of the same type as was specified in the source type parameter. The event subscription will return only events generated by the specified objects. If not specified, then events are returned for all objects within the source type specified. Example: my-cluster-1, my-cluster-2 Example: my-snapshot-20131010
    public var sourceIds: [Swift.String]?
    /// The type of source that will be generating the events. For example, if you want to be notified of events generated by a cluster, you would set this parameter to cluster. If this value is not specified, events are returned for all Amazon Redshift objects in your Amazon Web Services account. You must specify a source type in order to specify source IDs. Valid values: cluster, cluster-parameter-group, cluster-security-group, cluster-snapshot, and scheduled-action.
    public var sourceType: Swift.String?
    /// The name of the modified Amazon Redshift event notification subscription.
    /// This member is required.
    public var subscriptionName: Swift.String?

    public init (
        enabled: Swift.Bool? = nil,
        eventCategories: [Swift.String]? = nil,
        severity: Swift.String? = nil,
        snsTopicArn: Swift.String? = nil,
        sourceIds: [Swift.String]? = nil,
        sourceType: Swift.String? = nil,
        subscriptionName: Swift.String? = nil
    )
    {
        self.enabled = enabled
        self.eventCategories = eventCategories
        self.severity = severity
        self.snsTopicArn = snsTopicArn
        self.sourceIds = sourceIds
        self.sourceType = sourceType
        self.subscriptionName = subscriptionName
    }
}
