// Code generated by smithy-swift-codegen. DO NOT EDIT!



///
public struct EnableLoggingInput: Swift.Equatable {
    /// The name of an existing S3 bucket where the log files are to be stored. Constraints:
    ///
    /// * Must be in the same region as the cluster
    ///
    /// * The cluster must have read bucket and put object permissions
    public var bucketName: Swift.String?
    /// The identifier of the cluster on which logging is to be started. Example: examplecluster
    /// This member is required.
    public var clusterIdentifier: Swift.String?
    /// The log destination type. An enum with possible values of s3 and cloudwatch.
    public var logDestinationType: RedshiftClientTypes.LogDestinationType?
    /// The collection of exported log types. Log types include the connection log, user log and user activity log.
    public var logExports: [Swift.String]?
    /// The prefix applied to the log file names. Constraints:
    ///
    /// * Cannot exceed 512 characters
    ///
    /// * Cannot contain spaces( ), double quotes ("), single quotes ('), a backslash (\), or control characters. The hexadecimal codes for invalid characters are:
    ///
    /// * x00 to x20
    ///
    /// * x22
    ///
    /// * x27
    ///
    /// * x5c
    ///
    /// * x7f or larger
    public var s3KeyPrefix: Swift.String?

    public init (
        bucketName: Swift.String? = nil,
        clusterIdentifier: Swift.String? = nil,
        logDestinationType: RedshiftClientTypes.LogDestinationType? = nil,
        logExports: [Swift.String]? = nil,
        s3KeyPrefix: Swift.String? = nil
    )
    {
        self.bucketName = bucketName
        self.clusterIdentifier = clusterIdentifier
        self.logDestinationType = logDestinationType
        self.logExports = logExports
        self.s3KeyPrefix = s3KeyPrefix
    }
}
