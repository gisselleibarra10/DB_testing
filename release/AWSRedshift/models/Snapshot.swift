// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension RedshiftClientTypes {
    /// Describes a snapshot.
    public struct Snapshot: Swift.Equatable {
        /// A list of the Amazon Web Services accounts authorized to restore the snapshot. Returns null if no accounts are authorized. Visible only to the snapshot owner.
        public var accountsWithRestoreAccess: [RedshiftClientTypes.AccountWithRestoreAccess]?
        /// The size of the incremental backup.
        public var actualIncrementalBackupSizeInMegaBytes: Swift.Double
        /// The Availability Zone in which the cluster was created.
        public var availabilityZone: Swift.String?
        /// The number of megabytes that have been transferred to the snapshot backup.
        public var backupProgressInMegaBytes: Swift.Double
        /// The time (UTC) when the cluster was originally created.
        public var clusterCreateTime: ClientRuntime.Date?
        /// The identifier of the cluster for which the snapshot was taken.
        public var clusterIdentifier: Swift.String?
        /// The version ID of the Amazon Redshift engine that is running on the cluster.
        public var clusterVersion: Swift.String?
        /// The number of megabytes per second being transferred to the snapshot backup. Returns 0 for a completed backup.
        public var currentBackupRateInMegaBytesPerSecond: Swift.Double
        /// The name of the database that was created when the cluster was created.
        public var dBName: Swift.String?
        /// The amount of time an in-progress snapshot backup has been running, or the amount of time it took a completed backup to finish.
        public var elapsedTimeInSeconds: Swift.Int
        /// If true, the data in the snapshot is encrypted at rest.
        public var encrypted: Swift.Bool
        /// A boolean that indicates whether the snapshot data is encrypted using the HSM keys of the source cluster. true indicates that the data is encrypted using HSM keys.
        public var encryptedWithHSM: Swift.Bool
        /// The cluster version of the cluster used to create the snapshot. For example, 1.0.15503.
        public var engineFullVersion: Swift.String?
        /// An option that specifies whether to create the cluster with enhanced VPC routing enabled. To create a cluster that uses enhanced VPC routing, the cluster must be in a VPC. For more information, see [Enhanced VPC Routing](https://docs.aws.amazon.com/redshift/latest/mgmt/enhanced-vpc-routing.html) in the Amazon Redshift Cluster Management Guide. If this option is true, enhanced VPC routing is enabled. Default: false
        public var enhancedVpcRouting: Swift.Bool
        /// The estimate of the time remaining before the snapshot backup will complete. Returns 0 for a completed backup.
        public var estimatedSecondsToCompletion: Swift.Int
        /// The Key Management Service (KMS) key ID of the encryption key that was used to encrypt data in the cluster from which the snapshot was taken.
        public var kmsKeyId: Swift.String?
        /// The name of the maintenance track for the snapshot.
        public var maintenanceTrackName: Swift.String?
        /// The number of days until a manual snapshot will pass its retention period.
        public var manualSnapshotRemainingDays: Swift.Int?
        /// The number of days that a manual snapshot is retained. If the value is -1, the manual snapshot is retained indefinitely. The value must be either -1 or an integer between 1 and 3,653.
        public var manualSnapshotRetentionPeriod: Swift.Int?
        /// The admin user name for the cluster.
        public var masterUsername: Swift.String?
        /// The node type of the nodes in the cluster.
        public var nodeType: Swift.String?
        /// The number of nodes in the cluster.
        public var numberOfNodes: Swift.Int
        /// For manual snapshots, the Amazon Web Services account used to create or copy the snapshot. For automatic snapshots, the owner of the cluster. The owner can perform all snapshot actions, such as sharing a manual snapshot.
        public var ownerAccount: Swift.String?
        /// The port that the cluster is listening on.
        public var port: Swift.Int
        /// The list of node types that this cluster snapshot is able to restore into.
        public var restorableNodeTypes: [Swift.String]?
        /// The time (in UTC format) when Amazon Redshift began the snapshot. A snapshot contains a copy of the cluster data as of this exact time.
        public var snapshotCreateTime: ClientRuntime.Date?
        /// The snapshot identifier that is provided in the request.
        public var snapshotIdentifier: Swift.String?
        /// A timestamp representing the start of the retention period for the snapshot.
        public var snapshotRetentionStartTime: ClientRuntime.Date?
        /// The snapshot type. Snapshots created using [CreateClusterSnapshot] and [CopyClusterSnapshot] are of type "manual".
        public var snapshotType: Swift.String?
        /// The source region from which the snapshot was copied.
        public var sourceRegion: Swift.String?
        /// The snapshot status. The value of the status depends on the API operation used:
        ///
        /// * [CreateClusterSnapshot] and [CopyClusterSnapshot] returns status as "creating".
        ///
        /// * [DescribeClusterSnapshots] returns status as "creating", "available", "final snapshot", or "failed".
        ///
        /// * [DeleteClusterSnapshot] returns status as "deleted".
        public var status: Swift.String?
        /// The list of tags for the cluster snapshot.
        public var tags: [RedshiftClientTypes.Tag]?
        /// The size of the complete set of backup data that would be used to restore the cluster.
        public var totalBackupSizeInMegaBytes: Swift.Double
        /// The VPC identifier of the cluster if the snapshot is from a cluster in a VPC. Otherwise, this field is not in the output.
        public var vpcId: Swift.String?

        public init (
            accountsWithRestoreAccess: [RedshiftClientTypes.AccountWithRestoreAccess]? = nil,
            actualIncrementalBackupSizeInMegaBytes: Swift.Double = 0.0,
            availabilityZone: Swift.String? = nil,
            backupProgressInMegaBytes: Swift.Double = 0.0,
            clusterCreateTime: ClientRuntime.Date? = nil,
            clusterIdentifier: Swift.String? = nil,
            clusterVersion: Swift.String? = nil,
            currentBackupRateInMegaBytesPerSecond: Swift.Double = 0.0,
            dBName: Swift.String? = nil,
            elapsedTimeInSeconds: Swift.Int = 0,
            encrypted: Swift.Bool = false,
            encryptedWithHSM: Swift.Bool = false,
            engineFullVersion: Swift.String? = nil,
            enhancedVpcRouting: Swift.Bool = false,
            estimatedSecondsToCompletion: Swift.Int = 0,
            kmsKeyId: Swift.String? = nil,
            maintenanceTrackName: Swift.String? = nil,
            manualSnapshotRemainingDays: Swift.Int? = nil,
            manualSnapshotRetentionPeriod: Swift.Int? = nil,
            masterUsername: Swift.String? = nil,
            nodeType: Swift.String? = nil,
            numberOfNodes: Swift.Int = 0,
            ownerAccount: Swift.String? = nil,
            port: Swift.Int = 0,
            restorableNodeTypes: [Swift.String]? = nil,
            snapshotCreateTime: ClientRuntime.Date? = nil,
            snapshotIdentifier: Swift.String? = nil,
            snapshotRetentionStartTime: ClientRuntime.Date? = nil,
            snapshotType: Swift.String? = nil,
            sourceRegion: Swift.String? = nil,
            status: Swift.String? = nil,
            tags: [RedshiftClientTypes.Tag]? = nil,
            totalBackupSizeInMegaBytes: Swift.Double = 0.0,
            vpcId: Swift.String? = nil
        )
        {
            self.accountsWithRestoreAccess = accountsWithRestoreAccess
            self.actualIncrementalBackupSizeInMegaBytes = actualIncrementalBackupSizeInMegaBytes
            self.availabilityZone = availabilityZone
            self.backupProgressInMegaBytes = backupProgressInMegaBytes
            self.clusterCreateTime = clusterCreateTime
            self.clusterIdentifier = clusterIdentifier
            self.clusterVersion = clusterVersion
            self.currentBackupRateInMegaBytesPerSecond = currentBackupRateInMegaBytesPerSecond
            self.dBName = dBName
            self.elapsedTimeInSeconds = elapsedTimeInSeconds
            self.encrypted = encrypted
            self.encryptedWithHSM = encryptedWithHSM
            self.engineFullVersion = engineFullVersion
            self.enhancedVpcRouting = enhancedVpcRouting
            self.estimatedSecondsToCompletion = estimatedSecondsToCompletion
            self.kmsKeyId = kmsKeyId
            self.maintenanceTrackName = maintenanceTrackName
            self.manualSnapshotRemainingDays = manualSnapshotRemainingDays
            self.manualSnapshotRetentionPeriod = manualSnapshotRetentionPeriod
            self.masterUsername = masterUsername
            self.nodeType = nodeType
            self.numberOfNodes = numberOfNodes
            self.ownerAccount = ownerAccount
            self.port = port
            self.restorableNodeTypes = restorableNodeTypes
            self.snapshotCreateTime = snapshotCreateTime
            self.snapshotIdentifier = snapshotIdentifier
            self.snapshotRetentionStartTime = snapshotRetentionStartTime
            self.snapshotType = snapshotType
            self.sourceRegion = sourceRegion
            self.status = status
            self.tags = tags
            self.totalBackupSizeInMegaBytes = totalBackupSizeInMegaBytes
            self.vpcId = vpcId
        }
    }

}
