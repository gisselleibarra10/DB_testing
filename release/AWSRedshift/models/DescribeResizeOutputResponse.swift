// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// Describes the result of a cluster resize operation.
public struct DescribeResizeOutputResponse: Swift.Equatable {
    /// The average rate of the resize operation over the last few minutes, measured in megabytes per second. After the resize operation completes, this value shows the average rate of the entire resize operation.
    public var avgResizeRateInMegaBytesPerSecond: Swift.Double?
    /// The percent of data transferred from source cluster to target cluster.
    public var dataTransferProgressPercent: Swift.Double?
    /// The amount of seconds that have elapsed since the resize operation began. After the resize operation completes, this value shows the total actual time, in seconds, for the resize operation.
    public var elapsedTimeInSeconds: Swift.Int?
    /// The estimated time remaining, in seconds, until the resize operation is complete. This value is calculated based on the average resize rate and the estimated amount of data remaining to be processed. Once the resize operation is complete, this value will be 0.
    public var estimatedTimeToCompletionInSeconds: Swift.Int?
    /// The names of tables that have been completely imported . Valid Values: List of table names.
    public var importTablesCompleted: [Swift.String]?
    /// The names of tables that are being currently imported. Valid Values: List of table names.
    public var importTablesInProgress: [Swift.String]?
    /// The names of tables that have not been yet imported. Valid Values: List of table names
    public var importTablesNotStarted: [Swift.String]?
    /// An optional string to provide additional details about the resize action.
    public var message: Swift.String?
    /// While the resize operation is in progress, this value shows the current amount of data, in megabytes, that has been processed so far. When the resize operation is complete, this value shows the total amount of data, in megabytes, on the cluster, which may be more or less than TotalResizeDataInMegaBytes (the estimated total amount of data before resize).
    public var progressInMegaBytes: Swift.Int?
    /// An enum with possible values of ClassicResize and ElasticResize. These values describe the type of resize operation being performed.
    public var resizeType: Swift.String?
    /// The status of the resize operation. Valid Values: NONE | IN_PROGRESS | FAILED | SUCCEEDED | CANCELLING
    public var status: Swift.String?
    /// The cluster type after the resize operation is complete. Valid Values: multi-node | single-node
    public var targetClusterType: Swift.String?
    /// The type of encryption for the cluster after the resize is complete. Possible values are KMS and None.
    public var targetEncryptionType: Swift.String?
    /// The node type that the cluster will have after the resize operation is complete.
    public var targetNodeType: Swift.String?
    /// The number of nodes that the cluster will have after the resize operation is complete.
    public var targetNumberOfNodes: Swift.Int?
    /// The estimated total amount of data, in megabytes, on the cluster before the resize operation began.
    public var totalResizeDataInMegaBytes: Swift.Int?

    public init (
        avgResizeRateInMegaBytesPerSecond: Swift.Double? = nil,
        dataTransferProgressPercent: Swift.Double? = nil,
        elapsedTimeInSeconds: Swift.Int? = nil,
        estimatedTimeToCompletionInSeconds: Swift.Int? = nil,
        importTablesCompleted: [Swift.String]? = nil,
        importTablesInProgress: [Swift.String]? = nil,
        importTablesNotStarted: [Swift.String]? = nil,
        message: Swift.String? = nil,
        progressInMegaBytes: Swift.Int? = nil,
        resizeType: Swift.String? = nil,
        status: Swift.String? = nil,
        targetClusterType: Swift.String? = nil,
        targetEncryptionType: Swift.String? = nil,
        targetNodeType: Swift.String? = nil,
        targetNumberOfNodes: Swift.Int? = nil,
        totalResizeDataInMegaBytes: Swift.Int? = nil
    )
    {
        self.avgResizeRateInMegaBytesPerSecond = avgResizeRateInMegaBytesPerSecond
        self.dataTransferProgressPercent = dataTransferProgressPercent
        self.elapsedTimeInSeconds = elapsedTimeInSeconds
        self.estimatedTimeToCompletionInSeconds = estimatedTimeToCompletionInSeconds
        self.importTablesCompleted = importTablesCompleted
        self.importTablesInProgress = importTablesInProgress
        self.importTablesNotStarted = importTablesNotStarted
        self.message = message
        self.progressInMegaBytes = progressInMegaBytes
        self.resizeType = resizeType
        self.status = status
        self.targetClusterType = targetClusterType
        self.targetEncryptionType = targetEncryptionType
        self.targetNodeType = targetNodeType
        self.targetNumberOfNodes = targetNumberOfNodes
        self.totalResizeDataInMegaBytes = totalResizeDataInMegaBytes
    }
}
