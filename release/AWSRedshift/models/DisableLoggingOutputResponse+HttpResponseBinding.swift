// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension DisableLoggingOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DisableLoggingOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.bucketName = output.bucketName
            self.lastFailureMessage = output.lastFailureMessage
            self.lastFailureTime = output.lastFailureTime
            self.lastSuccessfulDeliveryTime = output.lastSuccessfulDeliveryTime
            self.logDestinationType = output.logDestinationType
            self.logExports = output.logExports
            self.loggingEnabled = output.loggingEnabled
            self.s3KeyPrefix = output.s3KeyPrefix
        } else {
            self.bucketName = nil
            self.lastFailureMessage = nil
            self.lastFailureTime = nil
            self.lastSuccessfulDeliveryTime = nil
            self.logDestinationType = nil
            self.logExports = nil
            self.loggingEnabled = false
            self.s3KeyPrefix = nil
        }
    }
}
