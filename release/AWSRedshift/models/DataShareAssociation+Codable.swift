// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension RedshiftClientTypes.DataShareAssociation: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case consumerIdentifier = "ConsumerIdentifier"
        case consumerRegion = "ConsumerRegion"
        case createdDate = "CreatedDate"
        case status = "Status"
        case statusChangeDate = "StatusChangeDate"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let consumerIdentifier = consumerIdentifier {
            try container.encode(consumerIdentifier, forKey: ClientRuntime.Key("ConsumerIdentifier"))
        }
        if let consumerRegion = consumerRegion {
            try container.encode(consumerRegion, forKey: ClientRuntime.Key("ConsumerRegion"))
        }
        if let createdDate = createdDate {
            try container.encode(ClientRuntime.TimestampWrapper(createdDate, format: .dateTime), forKey: ClientRuntime.Key("createdDate"))
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
        if let statusChangeDate = statusChangeDate {
            try container.encode(ClientRuntime.TimestampWrapper(statusChangeDate, format: .dateTime), forKey: ClientRuntime.Key("statusChangeDate"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let consumerIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .consumerIdentifier)
        consumerIdentifier = consumerIdentifierDecoded
        let statusDecoded = try containerValues.decodeIfPresent(RedshiftClientTypes.DataShareStatus.self, forKey: .status)
        status = statusDecoded
        let consumerRegionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .consumerRegion)
        consumerRegion = consumerRegionDecoded
        let createdDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .createdDate)
        var createdDateBuffer:ClientRuntime.Date? = nil
        if let createdDateDecoded = createdDateDecoded {
            createdDateBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(createdDateDecoded, format: .dateTime)
        }
        createdDate = createdDateBuffer
        let statusChangeDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .statusChangeDate)
        var statusChangeDateBuffer:ClientRuntime.Date? = nil
        if let statusChangeDateDecoded = statusChangeDateDecoded {
            statusChangeDateBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(statusChangeDateDecoded, format: .dateTime)
        }
        statusChangeDate = statusChangeDateBuffer
    }
}
