// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeClusterParameterGroupsOutputResponseBody: Swift.Equatable {
    let marker: Swift.String?
    let parameterGroups: [RedshiftClientTypes.ClusterParameterGroup]?
}

extension DescribeClusterParameterGroupsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case marker = "Marker"
        case parameterGroups = "ParameterGroups"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeClusterParameterGroupsResult"))
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
        if containerValues.contains(.parameterGroups) {
            struct KeyVal0{struct ClusterParameterGroup{}}
            let parameterGroupsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.ClusterParameterGroup>.CodingKeys.self, forKey: .parameterGroups)
            if let parameterGroupsWrappedContainer = parameterGroupsWrappedContainer {
                let parameterGroupsContainer = try parameterGroupsWrappedContainer.decodeIfPresent([RedshiftClientTypes.ClusterParameterGroup].self, forKey: .member)
                var parameterGroupsBuffer:[RedshiftClientTypes.ClusterParameterGroup]? = nil
                if let parameterGroupsContainer = parameterGroupsContainer {
                    parameterGroupsBuffer = [RedshiftClientTypes.ClusterParameterGroup]()
                    for structureContainer0 in parameterGroupsContainer {
                        parameterGroupsBuffer?.append(structureContainer0)
                    }
                }
                parameterGroups = parameterGroupsBuffer
            } else {
                parameterGroups = []
            }
        } else {
            parameterGroups = nil
        }
    }
}
