// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeSnapshotCopyGrantsOutputResponseBody: Swift.Equatable {
    let marker: Swift.String?
    let snapshotCopyGrants: [RedshiftClientTypes.SnapshotCopyGrant]?
}

extension DescribeSnapshotCopyGrantsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case marker = "Marker"
        case snapshotCopyGrants = "SnapshotCopyGrants"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeSnapshotCopyGrantsResult"))
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
        if containerValues.contains(.snapshotCopyGrants) {
            struct KeyVal0{struct SnapshotCopyGrant{}}
            let snapshotCopyGrantsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.SnapshotCopyGrant>.CodingKeys.self, forKey: .snapshotCopyGrants)
            if let snapshotCopyGrantsWrappedContainer = snapshotCopyGrantsWrappedContainer {
                let snapshotCopyGrantsContainer = try snapshotCopyGrantsWrappedContainer.decodeIfPresent([RedshiftClientTypes.SnapshotCopyGrant].self, forKey: .member)
                var snapshotCopyGrantsBuffer:[RedshiftClientTypes.SnapshotCopyGrant]? = nil
                if let snapshotCopyGrantsContainer = snapshotCopyGrantsContainer {
                    snapshotCopyGrantsBuffer = [RedshiftClientTypes.SnapshotCopyGrant]()
                    for structureContainer0 in snapshotCopyGrantsContainer {
                        snapshotCopyGrantsBuffer?.append(structureContainer0)
                    }
                }
                snapshotCopyGrants = snapshotCopyGrantsBuffer
            } else {
                snapshotCopyGrants = []
            }
        } else {
            snapshotCopyGrants = nil
        }
    }
}
