// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeHsmConfigurationsOutputResponseBody: Swift.Equatable {
    let marker: Swift.String?
    let hsmConfigurations: [RedshiftClientTypes.HsmConfiguration]?
}

extension DescribeHsmConfigurationsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case hsmConfigurations = "HsmConfigurations"
        case marker = "Marker"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeHsmConfigurationsResult"))
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
        if containerValues.contains(.hsmConfigurations) {
            struct KeyVal0{struct HsmConfiguration{}}
            let hsmConfigurationsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.HsmConfiguration>.CodingKeys.self, forKey: .hsmConfigurations)
            if let hsmConfigurationsWrappedContainer = hsmConfigurationsWrappedContainer {
                let hsmConfigurationsContainer = try hsmConfigurationsWrappedContainer.decodeIfPresent([RedshiftClientTypes.HsmConfiguration].self, forKey: .member)
                var hsmConfigurationsBuffer:[RedshiftClientTypes.HsmConfiguration]? = nil
                if let hsmConfigurationsContainer = hsmConfigurationsContainer {
                    hsmConfigurationsBuffer = [RedshiftClientTypes.HsmConfiguration]()
                    for structureContainer0 in hsmConfigurationsContainer {
                        hsmConfigurationsBuffer?.append(structureContainer0)
                    }
                }
                hsmConfigurations = hsmConfigurationsBuffer
            } else {
                hsmConfigurations = []
            }
        } else {
            hsmConfigurations = nil
        }
    }
}
