// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct UpdatePartnerStatusInputBody: Swift.Equatable {
    let accountId: Swift.String?
    let clusterIdentifier: Swift.String?
    let databaseName: Swift.String?
    let partnerName: Swift.String?
    let status: RedshiftClientTypes.PartnerIntegrationStatus?
    let statusMessage: Swift.String?
}

extension UpdatePartnerStatusInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountId = "AccountId"
        case clusterIdentifier = "ClusterIdentifier"
        case databaseName = "DatabaseName"
        case partnerName = "PartnerName"
        case status = "Status"
        case statusMessage = "StatusMessage"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let accountIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .accountId)
        accountId = accountIdDecoded
        let clusterIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterIdentifier)
        clusterIdentifier = clusterIdentifierDecoded
        let databaseNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .databaseName)
        databaseName = databaseNameDecoded
        let partnerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .partnerName)
        partnerName = partnerNameDecoded
        let statusDecoded = try containerValues.decodeIfPresent(RedshiftClientTypes.PartnerIntegrationStatus.self, forKey: .status)
        status = statusDecoded
        let statusMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .statusMessage)
        statusMessage = statusMessageDecoded
    }
}
