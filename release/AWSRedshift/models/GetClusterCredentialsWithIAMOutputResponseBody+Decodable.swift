// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetClusterCredentialsWithIAMOutputResponseBody: Swift.Equatable {
    let dbUser: Swift.String?
    let dbPassword: Swift.String?
    let expiration: ClientRuntime.Date?
    let nextRefreshTime: ClientRuntime.Date?
}

extension GetClusterCredentialsWithIAMOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dbPassword = "DbPassword"
        case dbUser = "DbUser"
        case expiration = "Expiration"
        case nextRefreshTime = "NextRefreshTime"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("GetClusterCredentialsWithIAMResult"))
        let dbUserDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dbUser)
        dbUser = dbUserDecoded
        let dbPasswordDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dbPassword)
        dbPassword = dbPasswordDecoded
        let expirationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .expiration)
        var expirationBuffer:ClientRuntime.Date? = nil
        if let expirationDecoded = expirationDecoded {
            expirationBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(expirationDecoded, format: .dateTime)
        }
        expiration = expirationBuffer
        let nextRefreshTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextRefreshTime)
        var nextRefreshTimeBuffer:ClientRuntime.Date? = nil
        if let nextRefreshTimeDecoded = nextRefreshTimeDecoded {
            nextRefreshTimeBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(nextRefreshTimeDecoded, format: .dateTime)
        }
        nextRefreshTime = nextRefreshTimeBuffer
    }
}
