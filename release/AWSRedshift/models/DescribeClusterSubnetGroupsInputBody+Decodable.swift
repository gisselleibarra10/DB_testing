// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeClusterSubnetGroupsInputBody: Swift.Equatable {
    let clusterSubnetGroupName: Swift.String?
    let maxRecords: Swift.Int?
    let marker: Swift.String?
    let tagKeys: [Swift.String]?
    let tagValues: [Swift.String]?
}

extension DescribeClusterSubnetGroupsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterSubnetGroupName = "ClusterSubnetGroupName"
        case marker = "Marker"
        case maxRecords = "MaxRecords"
        case tagKeys = "TagKeys"
        case tagValues = "TagValues"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clusterSubnetGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterSubnetGroupName)
        clusterSubnetGroupName = clusterSubnetGroupNameDecoded
        let maxRecordsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxRecords)
        maxRecords = maxRecordsDecoded
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
        if containerValues.contains(.tagKeys) {
            struct KeyVal0{struct TagKey{}}
            let tagKeysWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.TagKey>.CodingKeys.self, forKey: .tagKeys)
            if let tagKeysWrappedContainer = tagKeysWrappedContainer {
                let tagKeysContainer = try tagKeysWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var tagKeysBuffer:[Swift.String]? = nil
                if let tagKeysContainer = tagKeysContainer {
                    tagKeysBuffer = [Swift.String]()
                    for stringContainer0 in tagKeysContainer {
                        tagKeysBuffer?.append(stringContainer0)
                    }
                }
                tagKeys = tagKeysBuffer
            } else {
                tagKeys = []
            }
        } else {
            tagKeys = nil
        }
        if containerValues.contains(.tagValues) {
            struct KeyVal0{struct TagValue{}}
            let tagValuesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.TagValue>.CodingKeys.self, forKey: .tagValues)
            if let tagValuesWrappedContainer = tagValuesWrappedContainer {
                let tagValuesContainer = try tagValuesWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var tagValuesBuffer:[Swift.String]? = nil
                if let tagValuesContainer = tagValuesContainer {
                    tagValuesBuffer = [Swift.String]()
                    for stringContainer0 in tagValuesContainer {
                        tagValuesBuffer?.append(stringContainer0)
                    }
                }
                tagValues = tagValuesBuffer
            } else {
                tagValues = []
            }
        } else {
            tagValues = nil
        }
    }
}
