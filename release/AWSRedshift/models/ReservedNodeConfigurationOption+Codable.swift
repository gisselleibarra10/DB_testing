// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension RedshiftClientTypes.ReservedNodeConfigurationOption: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case sourceReservedNode = "SourceReservedNode"
        case targetReservedNodeCount = "TargetReservedNodeCount"
        case targetReservedNodeOffering = "TargetReservedNodeOffering"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let sourceReservedNode = sourceReservedNode {
            try container.encode(sourceReservedNode, forKey: ClientRuntime.Key("SourceReservedNode"))
        }
        if targetReservedNodeCount != 0 {
            try container.encode(targetReservedNodeCount, forKey: ClientRuntime.Key("TargetReservedNodeCount"))
        }
        if let targetReservedNodeOffering = targetReservedNodeOffering {
            try container.encode(targetReservedNodeOffering, forKey: ClientRuntime.Key("TargetReservedNodeOffering"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sourceReservedNodeDecoded = try containerValues.decodeIfPresent(RedshiftClientTypes.ReservedNode.self, forKey: .sourceReservedNode)
        sourceReservedNode = sourceReservedNodeDecoded
        let targetReservedNodeCountDecoded = try containerValues.decode(Swift.Int.self, forKey: .targetReservedNodeCount)
        targetReservedNodeCount = targetReservedNodeCountDecoded
        let targetReservedNodeOfferingDecoded = try containerValues.decodeIfPresent(RedshiftClientTypes.ReservedNodeOffering.self, forKey: .targetReservedNodeOffering)
        targetReservedNodeOffering = targetReservedNodeOfferingDecoded
    }
}
