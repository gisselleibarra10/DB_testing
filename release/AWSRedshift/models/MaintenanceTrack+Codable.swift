// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension RedshiftClientTypes.MaintenanceTrack: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case databaseVersion = "DatabaseVersion"
        case maintenanceTrackName = "MaintenanceTrackName"
        case updateTargets = "UpdateTargets"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let databaseVersion = databaseVersion {
            try container.encode(databaseVersion, forKey: ClientRuntime.Key("DatabaseVersion"))
        }
        if let maintenanceTrackName = maintenanceTrackName {
            try container.encode(maintenanceTrackName, forKey: ClientRuntime.Key("MaintenanceTrackName"))
        }
        if let updateTargets = updateTargets {
            var updateTargetsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("UpdateTargets"))
            for (index0, updatetarget0) in updateTargets.enumerated() {
                try updateTargetsContainer.encode(updatetarget0, forKey: ClientRuntime.Key("UpdateTarget.\(index0.advanced(by: 1))"))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let maintenanceTrackNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .maintenanceTrackName)
        maintenanceTrackName = maintenanceTrackNameDecoded
        let databaseVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .databaseVersion)
        databaseVersion = databaseVersionDecoded
        if containerValues.contains(.updateTargets) {
            struct KeyVal0{struct UpdateTarget{}}
            let updateTargetsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.UpdateTarget>.CodingKeys.self, forKey: .updateTargets)
            if let updateTargetsWrappedContainer = updateTargetsWrappedContainer {
                let updateTargetsContainer = try updateTargetsWrappedContainer.decodeIfPresent([RedshiftClientTypes.UpdateTarget].self, forKey: .member)
                var updateTargetsBuffer:[RedshiftClientTypes.UpdateTarget]? = nil
                if let updateTargetsContainer = updateTargetsContainer {
                    updateTargetsBuffer = [RedshiftClientTypes.UpdateTarget]()
                    for structureContainer0 in updateTargetsContainer {
                        updateTargetsBuffer?.append(structureContainer0)
                    }
                }
                updateTargets = updateTargetsBuffer
            } else {
                updateTargets = []
            }
        } else {
            updateTargets = nil
        }
    }
}
