// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeReservedNodeExchangeStatusOutputResponseBody: Swift.Equatable {
    let reservedNodeExchangeStatusDetails: [RedshiftClientTypes.ReservedNodeExchangeStatus]?
    let marker: Swift.String?
}

extension DescribeReservedNodeExchangeStatusOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case marker = "Marker"
        case reservedNodeExchangeStatusDetails = "ReservedNodeExchangeStatusDetails"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeReservedNodeExchangeStatusResult"))
        if containerValues.contains(.reservedNodeExchangeStatusDetails) {
            struct KeyVal0{struct ReservedNodeExchangeStatus{}}
            let reservedNodeExchangeStatusDetailsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.ReservedNodeExchangeStatus>.CodingKeys.self, forKey: .reservedNodeExchangeStatusDetails)
            if let reservedNodeExchangeStatusDetailsWrappedContainer = reservedNodeExchangeStatusDetailsWrappedContainer {
                let reservedNodeExchangeStatusDetailsContainer = try reservedNodeExchangeStatusDetailsWrappedContainer.decodeIfPresent([RedshiftClientTypes.ReservedNodeExchangeStatus].self, forKey: .member)
                var reservedNodeExchangeStatusDetailsBuffer:[RedshiftClientTypes.ReservedNodeExchangeStatus]? = nil
                if let reservedNodeExchangeStatusDetailsContainer = reservedNodeExchangeStatusDetailsContainer {
                    reservedNodeExchangeStatusDetailsBuffer = [RedshiftClientTypes.ReservedNodeExchangeStatus]()
                    for structureContainer0 in reservedNodeExchangeStatusDetailsContainer {
                        reservedNodeExchangeStatusDetailsBuffer?.append(structureContainer0)
                    }
                }
                reservedNodeExchangeStatusDetails = reservedNodeExchangeStatusDetailsBuffer
            } else {
                reservedNodeExchangeStatusDetails = []
            }
        } else {
            reservedNodeExchangeStatusDetails = nil
        }
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
    }
}
