// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// The request parameters to get cluster credentials.
public struct GetClusterCredentialsInput: Swift.Equatable {
    /// Create a database user with the name specified for the user named in DbUser if one does not exist.
    public var autoCreate: Swift.Bool?
    /// The unique identifier of the cluster that contains the database for which you are requesting credentials. This parameter is case sensitive.
    /// This member is required.
    public var clusterIdentifier: Swift.String?
    /// A list of the names of existing database groups that the user named in DbUser will join for the current session, in addition to any group memberships for an existing user. If not specified, a new user is added only to PUBLIC. Database group name constraints
    ///
    /// * Must be 1 to 64 alphanumeric characters or hyphens
    ///
    /// * Must contain only lowercase letters, numbers, underscore, plus sign, period (dot), at symbol (@), or hyphen.
    ///
    /// * First character must be a letter.
    ///
    /// * Must not contain a colon ( : ) or slash ( / ).
    ///
    /// * Cannot be a reserved word. A list of reserved words can be found in [Reserved Words](http://docs.aws.amazon.com/redshift/latest/dg/r_pg_keywords.html) in the Amazon Redshift Database Developer Guide.
    public var dbGroups: [Swift.String]?
    /// The name of a database that DbUser is authorized to log on to. If DbName is not specified, DbUser can log on to any existing database. Constraints:
    ///
    /// * Must be 1 to 64 alphanumeric characters or hyphens
    ///
    /// * Must contain uppercase or lowercase letters, numbers, underscore, plus sign, period (dot), at symbol (@), or hyphen.
    ///
    /// * First character must be a letter.
    ///
    /// * Must not contain a colon ( : ) or slash ( / ).
    ///
    /// * Cannot be a reserved word. A list of reserved words can be found in [Reserved Words](http://docs.aws.amazon.com/redshift/latest/dg/r_pg_keywords.html) in the Amazon Redshift Database Developer Guide.
    public var dbName: Swift.String?
    /// The name of a database user. If a user name matching DbUser exists in the database, the temporary user credentials have the same permissions as the existing user. If DbUser doesn't exist in the database and Autocreate is True, a new user is created using the value for DbUser with PUBLIC permissions. If a database user matching the value for DbUser doesn't exist and Autocreate is False, then the command succeeds but the connection attempt will fail because the user doesn't exist in the database. For more information, see [CREATE USER](https://docs.aws.amazon.com/redshift/latest/dg/r_CREATE_USER.html) in the Amazon Redshift Database Developer Guide. Constraints:
    ///
    /// * Must be 1 to 64 alphanumeric characters or hyphens. The user name can't be PUBLIC.
    ///
    /// * Must contain uppercase or lowercase letters, numbers, underscore, plus sign, period (dot), at symbol (@), or hyphen.
    ///
    /// * First character must be a letter.
    ///
    /// * Must not contain a colon ( : ) or slash ( / ).
    ///
    /// * Cannot be a reserved word. A list of reserved words can be found in [Reserved Words](http://docs.aws.amazon.com/redshift/latest/dg/r_pg_keywords.html) in the Amazon Redshift Database Developer Guide.
    /// This member is required.
    public var dbUser: Swift.String?
    /// The number of seconds until the returned temporary password expires. Constraint: minimum 900, maximum 3600. Default: 900
    public var durationSeconds: Swift.Int?

    public init (
        autoCreate: Swift.Bool? = nil,
        clusterIdentifier: Swift.String? = nil,
        dbGroups: [Swift.String]? = nil,
        dbName: Swift.String? = nil,
        dbUser: Swift.String? = nil,
        durationSeconds: Swift.Int? = nil
    )
    {
        self.autoCreate = autoCreate
        self.clusterIdentifier = clusterIdentifier
        self.dbGroups = dbGroups
        self.dbName = dbName
        self.dbUser = dbUser
        self.durationSeconds = durationSeconds
    }
}
