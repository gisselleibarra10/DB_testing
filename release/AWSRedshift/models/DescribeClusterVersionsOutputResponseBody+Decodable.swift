// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeClusterVersionsOutputResponseBody: Swift.Equatable {
    let marker: Swift.String?
    let clusterVersions: [RedshiftClientTypes.ClusterVersion]?
}

extension DescribeClusterVersionsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterVersions = "ClusterVersions"
        case marker = "Marker"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeClusterVersionsResult"))
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
        if containerValues.contains(.clusterVersions) {
            struct KeyVal0{struct ClusterVersion{}}
            let clusterVersionsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.ClusterVersion>.CodingKeys.self, forKey: .clusterVersions)
            if let clusterVersionsWrappedContainer = clusterVersionsWrappedContainer {
                let clusterVersionsContainer = try clusterVersionsWrappedContainer.decodeIfPresent([RedshiftClientTypes.ClusterVersion].self, forKey: .member)
                var clusterVersionsBuffer:[RedshiftClientTypes.ClusterVersion]? = nil
                if let clusterVersionsContainer = clusterVersionsContainer {
                    clusterVersionsBuffer = [RedshiftClientTypes.ClusterVersion]()
                    for structureContainer0 in clusterVersionsContainer {
                        clusterVersionsBuffer?.append(structureContainer0)
                    }
                }
                clusterVersions = clusterVersionsBuffer
            } else {
                clusterVersions = []
            }
        } else {
            clusterVersions = nil
        }
    }
}
