// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeEndpointAuthorizationOutputResponseBody: Swift.Equatable {
    let endpointAuthorizationList: [RedshiftClientTypes.EndpointAuthorization]?
    let marker: Swift.String?
}

extension DescribeEndpointAuthorizationOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case endpointAuthorizationList = "EndpointAuthorizationList"
        case marker = "Marker"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeEndpointAuthorizationResult"))
        if containerValues.contains(.endpointAuthorizationList) {
            struct KeyVal0{struct member{}}
            let endpointAuthorizationListWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .endpointAuthorizationList)
            if let endpointAuthorizationListWrappedContainer = endpointAuthorizationListWrappedContainer {
                let endpointAuthorizationListContainer = try endpointAuthorizationListWrappedContainer.decodeIfPresent([RedshiftClientTypes.EndpointAuthorization].self, forKey: .member)
                var endpointAuthorizationListBuffer:[RedshiftClientTypes.EndpointAuthorization]? = nil
                if let endpointAuthorizationListContainer = endpointAuthorizationListContainer {
                    endpointAuthorizationListBuffer = [RedshiftClientTypes.EndpointAuthorization]()
                    for structureContainer0 in endpointAuthorizationListContainer {
                        endpointAuthorizationListBuffer?.append(structureContainer0)
                    }
                }
                endpointAuthorizationList = endpointAuthorizationListBuffer
            } else {
                endpointAuthorizationList = []
            }
        } else {
            endpointAuthorizationList = nil
        }
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
    }
}
