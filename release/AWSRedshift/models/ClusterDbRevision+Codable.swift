// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension RedshiftClientTypes.ClusterDbRevision: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterIdentifier = "ClusterIdentifier"
        case currentDatabaseRevision = "CurrentDatabaseRevision"
        case databaseRevisionReleaseDate = "DatabaseRevisionReleaseDate"
        case revisionTargets = "RevisionTargets"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let clusterIdentifier = clusterIdentifier {
            try container.encode(clusterIdentifier, forKey: ClientRuntime.Key("ClusterIdentifier"))
        }
        if let currentDatabaseRevision = currentDatabaseRevision {
            try container.encode(currentDatabaseRevision, forKey: ClientRuntime.Key("CurrentDatabaseRevision"))
        }
        if let databaseRevisionReleaseDate = databaseRevisionReleaseDate {
            try container.encode(ClientRuntime.TimestampWrapper(databaseRevisionReleaseDate, format: .dateTime), forKey: ClientRuntime.Key("databaseRevisionReleaseDate"))
        }
        if let revisionTargets = revisionTargets {
            var revisionTargetsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("RevisionTargets"))
            for (index0, revisiontarget0) in revisionTargets.enumerated() {
                try revisionTargetsContainer.encode(revisiontarget0, forKey: ClientRuntime.Key("RevisionTarget.\(index0.advanced(by: 1))"))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clusterIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterIdentifier)
        clusterIdentifier = clusterIdentifierDecoded
        let currentDatabaseRevisionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .currentDatabaseRevision)
        currentDatabaseRevision = currentDatabaseRevisionDecoded
        let databaseRevisionReleaseDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .databaseRevisionReleaseDate)
        var databaseRevisionReleaseDateBuffer:ClientRuntime.Date? = nil
        if let databaseRevisionReleaseDateDecoded = databaseRevisionReleaseDateDecoded {
            databaseRevisionReleaseDateBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(databaseRevisionReleaseDateDecoded, format: .dateTime)
        }
        databaseRevisionReleaseDate = databaseRevisionReleaseDateBuffer
        if containerValues.contains(.revisionTargets) {
            struct KeyVal0{struct RevisionTarget{}}
            let revisionTargetsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.RevisionTarget>.CodingKeys.self, forKey: .revisionTargets)
            if let revisionTargetsWrappedContainer = revisionTargetsWrappedContainer {
                let revisionTargetsContainer = try revisionTargetsWrappedContainer.decodeIfPresent([RedshiftClientTypes.RevisionTarget].self, forKey: .member)
                var revisionTargetsBuffer:[RedshiftClientTypes.RevisionTarget]? = nil
                if let revisionTargetsContainer = revisionTargetsContainer {
                    revisionTargetsBuffer = [RedshiftClientTypes.RevisionTarget]()
                    for structureContainer0 in revisionTargetsContainer {
                        revisionTargetsBuffer?.append(structureContainer0)
                    }
                }
                revisionTargets = revisionTargetsBuffer
            } else {
                revisionTargets = []
            }
        } else {
            revisionTargets = nil
        }
    }
}
