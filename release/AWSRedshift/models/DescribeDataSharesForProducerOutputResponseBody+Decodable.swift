// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeDataSharesForProducerOutputResponseBody: Swift.Equatable {
    let dataShares: [RedshiftClientTypes.DataShare]?
    let marker: Swift.String?
}

extension DescribeDataSharesForProducerOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dataShares = "DataShares"
        case marker = "Marker"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeDataSharesForProducerResult"))
        if containerValues.contains(.dataShares) {
            struct KeyVal0{struct member{}}
            let dataSharesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .dataShares)
            if let dataSharesWrappedContainer = dataSharesWrappedContainer {
                let dataSharesContainer = try dataSharesWrappedContainer.decodeIfPresent([RedshiftClientTypes.DataShare].self, forKey: .member)
                var dataSharesBuffer:[RedshiftClientTypes.DataShare]? = nil
                if let dataSharesContainer = dataSharesContainer {
                    dataSharesBuffer = [RedshiftClientTypes.DataShare]()
                    for structureContainer0 in dataSharesContainer {
                        dataSharesBuffer?.append(structureContainer0)
                    }
                }
                dataShares = dataSharesBuffer
            } else {
                dataShares = []
            }
        } else {
            dataShares = nil
        }
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
    }
}
