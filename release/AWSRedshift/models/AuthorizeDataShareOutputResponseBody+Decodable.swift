// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct AuthorizeDataShareOutputResponseBody: Swift.Equatable {
    let dataShareArn: Swift.String?
    let producerArn: Swift.String?
    let allowPubliclyAccessibleConsumers: Swift.Bool
    let dataShareAssociations: [RedshiftClientTypes.DataShareAssociation]?
    let managedBy: Swift.String?
}

extension AuthorizeDataShareOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case allowPubliclyAccessibleConsumers = "AllowPubliclyAccessibleConsumers"
        case dataShareArn = "DataShareArn"
        case dataShareAssociations = "DataShareAssociations"
        case managedBy = "ManagedBy"
        case producerArn = "ProducerArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("AuthorizeDataShareResult"))
        let dataShareArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataShareArn)
        dataShareArn = dataShareArnDecoded
        let producerArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .producerArn)
        producerArn = producerArnDecoded
        let allowPubliclyAccessibleConsumersDecoded = try containerValues.decode(Swift.Bool.self, forKey: .allowPubliclyAccessibleConsumers)
        allowPubliclyAccessibleConsumers = allowPubliclyAccessibleConsumersDecoded
        if containerValues.contains(.dataShareAssociations) {
            struct KeyVal0{struct member{}}
            let dataShareAssociationsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .dataShareAssociations)
            if let dataShareAssociationsWrappedContainer = dataShareAssociationsWrappedContainer {
                let dataShareAssociationsContainer = try dataShareAssociationsWrappedContainer.decodeIfPresent([RedshiftClientTypes.DataShareAssociation].self, forKey: .member)
                var dataShareAssociationsBuffer:[RedshiftClientTypes.DataShareAssociation]? = nil
                if let dataShareAssociationsContainer = dataShareAssociationsContainer {
                    dataShareAssociationsBuffer = [RedshiftClientTypes.DataShareAssociation]()
                    for structureContainer0 in dataShareAssociationsContainer {
                        dataShareAssociationsBuffer?.append(structureContainer0)
                    }
                }
                dataShareAssociations = dataShareAssociationsBuffer
            } else {
                dataShareAssociations = []
            }
        } else {
            dataShareAssociations = nil
        }
        let managedByDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .managedBy)
        managedBy = managedByDecoded
    }
}
