// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension MigrationHubRefactorSpacesClientTypes.EnvironmentVpc: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountId = "AccountId"
        case cidrBlocks = "CidrBlocks"
        case createdTime = "CreatedTime"
        case environmentId = "EnvironmentId"
        case lastUpdatedTime = "LastUpdatedTime"
        case vpcId = "VpcId"
        case vpcName = "VpcName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accountId = self.accountId {
            try encodeContainer.encode(accountId, forKey: .accountId)
        }
        if let cidrBlocks = cidrBlocks {
            var cidrBlocksContainer = encodeContainer.nestedUnkeyedContainer(forKey: .cidrBlocks)
            for cidrblocks0 in cidrBlocks {
                try cidrBlocksContainer.encode(cidrblocks0)
            }
        }
        if let createdTime = self.createdTime {
            try encodeContainer.encode(createdTime.timeIntervalSince1970, forKey: .createdTime)
        }
        if let environmentId = self.environmentId {
            try encodeContainer.encode(environmentId, forKey: .environmentId)
        }
        if let lastUpdatedTime = self.lastUpdatedTime {
            try encodeContainer.encode(lastUpdatedTime.timeIntervalSince1970, forKey: .lastUpdatedTime)
        }
        if let vpcId = self.vpcId {
            try encodeContainer.encode(vpcId, forKey: .vpcId)
        }
        if let vpcName = self.vpcName {
            try encodeContainer.encode(vpcName, forKey: .vpcName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let environmentIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .environmentId)
        environmentId = environmentIdDecoded
        let vpcIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vpcId)
        vpcId = vpcIdDecoded
        let accountIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .accountId)
        accountId = accountIdDecoded
        let cidrBlocksContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .cidrBlocks)
        var cidrBlocksDecoded0:[Swift.String]? = nil
        if let cidrBlocksContainer = cidrBlocksContainer {
            cidrBlocksDecoded0 = [Swift.String]()
            for string0 in cidrBlocksContainer {
                if let string0 = string0 {
                    cidrBlocksDecoded0?.append(string0)
                }
            }
        }
        cidrBlocks = cidrBlocksDecoded0
        let vpcNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vpcName)
        vpcName = vpcNameDecoded
        let lastUpdatedTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastUpdatedTime)
        lastUpdatedTime = lastUpdatedTimeDecoded
        let createdTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdTime)
        createdTime = createdTimeDecoded
    }
}
