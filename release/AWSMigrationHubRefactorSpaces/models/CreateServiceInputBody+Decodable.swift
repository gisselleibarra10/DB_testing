// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateServiceInputBody: Swift.Equatable {
    let name: Swift.String?
    let description: Swift.String?
    let vpcId: Swift.String?
    let endpointType: MigrationHubRefactorSpacesClientTypes.ServiceEndpointType?
    let urlEndpoint: MigrationHubRefactorSpacesClientTypes.UrlEndpointInput?
    let lambdaEndpoint: MigrationHubRefactorSpacesClientTypes.LambdaEndpointInput?
    let tags: [Swift.String:Swift.String]?
    let clientToken: Swift.String?
}

extension CreateServiceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientToken = "ClientToken"
        case description = "Description"
        case endpointType = "EndpointType"
        case lambdaEndpoint = "LambdaEndpoint"
        case name = "Name"
        case tags = "Tags"
        case urlEndpoint = "UrlEndpoint"
        case vpcId = "VpcId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let vpcIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vpcId)
        vpcId = vpcIdDecoded
        let endpointTypeDecoded = try containerValues.decodeIfPresent(MigrationHubRefactorSpacesClientTypes.ServiceEndpointType.self, forKey: .endpointType)
        endpointType = endpointTypeDecoded
        let urlEndpointDecoded = try containerValues.decodeIfPresent(MigrationHubRefactorSpacesClientTypes.UrlEndpointInput.self, forKey: .urlEndpoint)
        urlEndpoint = urlEndpointDecoded
        let lambdaEndpointDecoded = try containerValues.decodeIfPresent(MigrationHubRefactorSpacesClientTypes.LambdaEndpointInput.self, forKey: .lambdaEndpoint)
        lambdaEndpoint = lambdaEndpointDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, string0) in tagsContainer {
                if let string0 = string0 {
                    tagsDecoded0?[key0] = string0
                }
            }
        }
        tags = tagsDecoded0
        let clientTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientToken)
        clientToken = clientTokenDecoded
    }
}
