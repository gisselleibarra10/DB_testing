// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension MigrationHubRefactorSpacesClientTypes.RouteSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applicationId = "ApplicationId"
        case arn = "Arn"
        case createdByAccountId = "CreatedByAccountId"
        case createdTime = "CreatedTime"
        case environmentId = "EnvironmentId"
        case error = "Error"
        case includeChildPaths = "IncludeChildPaths"
        case lastUpdatedTime = "LastUpdatedTime"
        case methods = "Methods"
        case ownerAccountId = "OwnerAccountId"
        case pathResourceToId = "PathResourceToId"
        case routeId = "RouteId"
        case routeType = "RouteType"
        case serviceId = "ServiceId"
        case sourcePath = "SourcePath"
        case state = "State"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let applicationId = self.applicationId {
            try encodeContainer.encode(applicationId, forKey: .applicationId)
        }
        if let arn = self.arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let createdByAccountId = self.createdByAccountId {
            try encodeContainer.encode(createdByAccountId, forKey: .createdByAccountId)
        }
        if let createdTime = self.createdTime {
            try encodeContainer.encode(createdTime.timeIntervalSince1970, forKey: .createdTime)
        }
        if let environmentId = self.environmentId {
            try encodeContainer.encode(environmentId, forKey: .environmentId)
        }
        if let error = self.error {
            try encodeContainer.encode(error, forKey: .error)
        }
        if let includeChildPaths = self.includeChildPaths {
            try encodeContainer.encode(includeChildPaths, forKey: .includeChildPaths)
        }
        if let lastUpdatedTime = self.lastUpdatedTime {
            try encodeContainer.encode(lastUpdatedTime.timeIntervalSince1970, forKey: .lastUpdatedTime)
        }
        if let methods = methods {
            var methodsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .methods)
            for httpmethods0 in methods {
                try methodsContainer.encode(httpmethods0.rawValue)
            }
        }
        if let ownerAccountId = self.ownerAccountId {
            try encodeContainer.encode(ownerAccountId, forKey: .ownerAccountId)
        }
        if let pathResourceToId = pathResourceToId {
            var pathResourceToIdContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .pathResourceToId)
            for (dictKey0, pathresourcetoid0) in pathResourceToId {
                try pathResourceToIdContainer.encode(pathresourcetoid0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let routeId = self.routeId {
            try encodeContainer.encode(routeId, forKey: .routeId)
        }
        if let routeType = self.routeType {
            try encodeContainer.encode(routeType.rawValue, forKey: .routeType)
        }
        if let serviceId = self.serviceId {
            try encodeContainer.encode(serviceId, forKey: .serviceId)
        }
        if let sourcePath = self.sourcePath {
            try encodeContainer.encode(sourcePath, forKey: .sourcePath)
        }
        if let state = self.state {
            try encodeContainer.encode(state.rawValue, forKey: .state)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, tagmap0) in tags {
                try tagsContainer.encode(tagmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let routeIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .routeId)
        routeId = routeIdDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let ownerAccountIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ownerAccountId)
        ownerAccountId = ownerAccountIdDecoded
        let createdByAccountIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .createdByAccountId)
        createdByAccountId = createdByAccountIdDecoded
        let routeTypeDecoded = try containerValues.decodeIfPresent(MigrationHubRefactorSpacesClientTypes.RouteType.self, forKey: .routeType)
        routeType = routeTypeDecoded
        let serviceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serviceId)
        serviceId = serviceIdDecoded
        let applicationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .applicationId)
        applicationId = applicationIdDecoded
        let environmentIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .environmentId)
        environmentId = environmentIdDecoded
        let sourcePathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourcePath)
        sourcePath = sourcePathDecoded
        let methodsContainer = try containerValues.decodeIfPresent([MigrationHubRefactorSpacesClientTypes.HttpMethod?].self, forKey: .methods)
        var methodsDecoded0:[MigrationHubRefactorSpacesClientTypes.HttpMethod]? = nil
        if let methodsContainer = methodsContainer {
            methodsDecoded0 = [MigrationHubRefactorSpacesClientTypes.HttpMethod]()
            for string0 in methodsContainer {
                if let string0 = string0 {
                    methodsDecoded0?.append(string0)
                }
            }
        }
        methods = methodsDecoded0
        let includeChildPathsDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .includeChildPaths)
        includeChildPaths = includeChildPathsDecoded
        let pathResourceToIdContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .pathResourceToId)
        var pathResourceToIdDecoded0: [Swift.String:Swift.String]? = nil
        if let pathResourceToIdContainer = pathResourceToIdContainer {
            pathResourceToIdDecoded0 = [Swift.String:Swift.String]()
            for (key0, pathresourcetoidvalue0) in pathResourceToIdContainer {
                if let pathresourcetoidvalue0 = pathresourcetoidvalue0 {
                    pathResourceToIdDecoded0?[key0] = pathresourcetoidvalue0
                }
            }
        }
        pathResourceToId = pathResourceToIdDecoded0
        let stateDecoded = try containerValues.decodeIfPresent(MigrationHubRefactorSpacesClientTypes.RouteState.self, forKey: .state)
        state = stateDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, string0) in tagsContainer {
                if let string0 = string0 {
                    tagsDecoded0?[key0] = string0
                }
            }
        }
        tags = tagsDecoded0
        let errorDecoded = try containerValues.decodeIfPresent(MigrationHubRefactorSpacesClientTypes.ErrorResponse.self, forKey: .error)
        error = errorDecoded
        let lastUpdatedTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastUpdatedTime)
        lastUpdatedTime = lastUpdatedTimeDecoded
        let createdTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdTime)
        createdTime = createdTimeDecoded
    }
}
