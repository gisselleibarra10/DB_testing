// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct CreateServiceInput: Swift.Equatable {
    /// The ID of the application which the service is created.
    /// This member is required.
    public var applicationIdentifier: Swift.String?
    /// A unique, case-sensitive identifier that you provide to ensure the idempotency of the request.
    public var clientToken: Swift.String?
    /// The description of the service.
    public var description: Swift.String?
    /// The type of endpoint to use for the service. The type can be a URL in a VPC or an Lambda function.
    /// This member is required.
    public var endpointType: MigrationHubRefactorSpacesClientTypes.ServiceEndpointType?
    /// The ID of the environment in which the service is created.
    /// This member is required.
    public var environmentIdentifier: Swift.String?
    /// The configuration for the Lambda endpoint type.
    public var lambdaEndpoint: MigrationHubRefactorSpacesClientTypes.LambdaEndpointInput?
    /// The name of the service.
    /// This member is required.
    public var name: Swift.String?
    /// The tags to assign to the service. A tag is a label that you assign to an Amazon Web Services resource. Each tag consists of a key-value pair..
    public var tags: [Swift.String:Swift.String]?
    /// The configuration for the URL endpoint type.
    public var urlEndpoint: MigrationHubRefactorSpacesClientTypes.UrlEndpointInput?
    /// The ID of the VPC.
    public var vpcId: Swift.String?

    public init (
        applicationIdentifier: Swift.String? = nil,
        clientToken: Swift.String? = nil,
        description: Swift.String? = nil,
        endpointType: MigrationHubRefactorSpacesClientTypes.ServiceEndpointType? = nil,
        environmentIdentifier: Swift.String? = nil,
        lambdaEndpoint: MigrationHubRefactorSpacesClientTypes.LambdaEndpointInput? = nil,
        name: Swift.String? = nil,
        tags: [Swift.String:Swift.String]? = nil,
        urlEndpoint: MigrationHubRefactorSpacesClientTypes.UrlEndpointInput? = nil,
        vpcId: Swift.String? = nil
    )
    {
        self.applicationIdentifier = applicationIdentifier
        self.clientToken = clientToken
        self.description = description
        self.endpointType = endpointType
        self.environmentIdentifier = environmentIdentifier
        self.lambdaEndpoint = lambdaEndpoint
        self.name = name
        self.tags = tags
        self.urlEndpoint = urlEndpoint
        self.vpcId = vpcId
    }
}
