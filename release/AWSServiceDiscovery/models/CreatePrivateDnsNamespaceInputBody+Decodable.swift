// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreatePrivateDnsNamespaceInputBody: Swift.Equatable {
    let name: Swift.String?
    let creatorRequestId: Swift.String?
    let description: Swift.String?
    let vpc: Swift.String?
    let tags: [ServiceDiscoveryClientTypes.Tag]?
    let properties: ServiceDiscoveryClientTypes.PrivateDnsNamespaceProperties?
}

extension CreatePrivateDnsNamespaceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creatorRequestId = "CreatorRequestId"
        case description = "Description"
        case name = "Name"
        case properties = "Properties"
        case tags = "Tags"
        case vpc = "Vpc"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let creatorRequestIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .creatorRequestId)
        creatorRequestId = creatorRequestIdDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let vpcDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vpc)
        vpc = vpcDecoded
        let tagsContainer = try containerValues.decodeIfPresent([ServiceDiscoveryClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[ServiceDiscoveryClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [ServiceDiscoveryClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let propertiesDecoded = try containerValues.decodeIfPresent(ServiceDiscoveryClientTypes.PrivateDnsNamespaceProperties.self, forKey: .properties)
        properties = propertiesDecoded
    }
}
