// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct DiscoverInstancesInput: Swift.Equatable {
    /// The health status of the instances that you want to discover. This parameter is ignored for services that don't have a health check configured, and all instances are returned. HEALTHY Returns healthy instances. UNHEALTHY Returns unhealthy instances. ALL Returns all instances. HEALTHY_OR_ELSE_ALL Returns healthy instances, unless none are reporting a healthy state. In that case, return all instances. This is also called failing open.
    public var healthStatus: ServiceDiscoveryClientTypes.HealthStatusFilter?
    /// The maximum number of instances that you want Cloud Map to return in the response to a DiscoverInstances request. If you don't specify a value for MaxResults, Cloud Map returns up to 100 instances.
    public var maxResults: Swift.Int?
    /// The HttpName name of the namespace. It's found in the HttpProperties member of the Properties member of the namespace.
    /// This member is required.
    public var namespaceName: Swift.String?
    /// Opportunistic filters to scope the results based on custom attributes. If there are instances that match both the filters specified in both the QueryParameters parameter and this parameter, all of these instances are returned. Otherwise, the filters are ignored, and only instances that match the filters that are specified in the QueryParameters parameter are returned.
    public var optionalParameters: [Swift.String:Swift.String]?
    /// Filters to scope the results based on custom attributes for the instance (for example, {version=v1, az=1a}). Only instances that match all the specified key-value pairs are returned.
    public var queryParameters: [Swift.String:Swift.String]?
    /// The name of the service that you specified when you registered the instance.
    /// This member is required.
    public var serviceName: Swift.String?

    public init (
        healthStatus: ServiceDiscoveryClientTypes.HealthStatusFilter? = nil,
        maxResults: Swift.Int? = nil,
        namespaceName: Swift.String? = nil,
        optionalParameters: [Swift.String:Swift.String]? = nil,
        queryParameters: [Swift.String:Swift.String]? = nil,
        serviceName: Swift.String? = nil
    )
    {
        self.healthStatus = healthStatus
        self.maxResults = maxResults
        self.namespaceName = namespaceName
        self.optionalParameters = optionalParameters
        self.queryParameters = queryParameters
        self.serviceName = serviceName
    }
}
