// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListEventActionsOutputResponseBody: Swift.Equatable {
    let eventActions: [DataExchangeClientTypes.EventActionEntry]?
    let nextToken: Swift.String?
}

extension ListEventActionsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case eventActions = "EventActions"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let eventActionsContainer = try containerValues.decodeIfPresent([DataExchangeClientTypes.EventActionEntry?].self, forKey: .eventActions)
        var eventActionsDecoded0:[DataExchangeClientTypes.EventActionEntry]? = nil
        if let eventActionsContainer = eventActionsContainer {
            eventActionsDecoded0 = [DataExchangeClientTypes.EventActionEntry]()
            for structure0 in eventActionsContainer {
                if let structure0 = structure0 {
                    eventActionsDecoded0?.append(structure0)
                }
            }
        }
        eventActions = eventActionsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
