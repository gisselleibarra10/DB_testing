// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension DataExchangeClientTypes.ApiGatewayApiAsset: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case apiDescription = "ApiDescription"
        case apiEndpoint = "ApiEndpoint"
        case apiId = "ApiId"
        case apiKey = "ApiKey"
        case apiName = "ApiName"
        case apiSpecificationDownloadUrl = "ApiSpecificationDownloadUrl"
        case apiSpecificationDownloadUrlExpiresAt = "ApiSpecificationDownloadUrlExpiresAt"
        case protocolType = "ProtocolType"
        case stage = "Stage"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let apiDescription = self.apiDescription {
            try encodeContainer.encode(apiDescription, forKey: .apiDescription)
        }
        if let apiEndpoint = self.apiEndpoint {
            try encodeContainer.encode(apiEndpoint, forKey: .apiEndpoint)
        }
        if let apiId = self.apiId {
            try encodeContainer.encode(apiId, forKey: .apiId)
        }
        if let apiKey = self.apiKey {
            try encodeContainer.encode(apiKey, forKey: .apiKey)
        }
        if let apiName = self.apiName {
            try encodeContainer.encode(apiName, forKey: .apiName)
        }
        if let apiSpecificationDownloadUrl = self.apiSpecificationDownloadUrl {
            try encodeContainer.encode(apiSpecificationDownloadUrl, forKey: .apiSpecificationDownloadUrl)
        }
        if let apiSpecificationDownloadUrlExpiresAt = self.apiSpecificationDownloadUrlExpiresAt {
            try encodeContainer.encode(apiSpecificationDownloadUrlExpiresAt.timeIntervalSince1970, forKey: .apiSpecificationDownloadUrlExpiresAt)
        }
        if let protocolType = self.protocolType {
            try encodeContainer.encode(protocolType.rawValue, forKey: .protocolType)
        }
        if let stage = self.stage {
            try encodeContainer.encode(stage, forKey: .stage)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let apiDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .apiDescription)
        apiDescription = apiDescriptionDecoded
        let apiEndpointDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .apiEndpoint)
        apiEndpoint = apiEndpointDecoded
        let apiIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .apiId)
        apiId = apiIdDecoded
        let apiKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .apiKey)
        apiKey = apiKeyDecoded
        let apiNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .apiName)
        apiName = apiNameDecoded
        let apiSpecificationDownloadUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .apiSpecificationDownloadUrl)
        apiSpecificationDownloadUrl = apiSpecificationDownloadUrlDecoded
        let apiSpecificationDownloadUrlExpiresAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .apiSpecificationDownloadUrlExpiresAt)
        apiSpecificationDownloadUrlExpiresAt = apiSpecificationDownloadUrlExpiresAtDecoded
        let protocolTypeDecoded = try containerValues.decodeIfPresent(DataExchangeClientTypes.ProtocolType.self, forKey: .protocolType)
        protocolType = protocolTypeDecoded
        let stageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stage)
        stage = stageDecoded
    }
}
