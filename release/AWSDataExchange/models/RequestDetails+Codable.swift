// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension DataExchangeClientTypes.RequestDetails: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case exportAssetToSignedUrl = "ExportAssetToSignedUrl"
        case exportAssetsToS3 = "ExportAssetsToS3"
        case exportRevisionsToS3 = "ExportRevisionsToS3"
        case importAssetFromApiGatewayApi = "ImportAssetFromApiGatewayApi"
        case importAssetFromSignedUrl = "ImportAssetFromSignedUrl"
        case importAssetsFromRedshiftDataShares = "ImportAssetsFromRedshiftDataShares"
        case importAssetsFromS3 = "ImportAssetsFromS3"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let exportAssetToSignedUrl = self.exportAssetToSignedUrl {
            try encodeContainer.encode(exportAssetToSignedUrl, forKey: .exportAssetToSignedUrl)
        }
        if let exportAssetsToS3 = self.exportAssetsToS3 {
            try encodeContainer.encode(exportAssetsToS3, forKey: .exportAssetsToS3)
        }
        if let exportRevisionsToS3 = self.exportRevisionsToS3 {
            try encodeContainer.encode(exportRevisionsToS3, forKey: .exportRevisionsToS3)
        }
        if let importAssetFromApiGatewayApi = self.importAssetFromApiGatewayApi {
            try encodeContainer.encode(importAssetFromApiGatewayApi, forKey: .importAssetFromApiGatewayApi)
        }
        if let importAssetFromSignedUrl = self.importAssetFromSignedUrl {
            try encodeContainer.encode(importAssetFromSignedUrl, forKey: .importAssetFromSignedUrl)
        }
        if let importAssetsFromRedshiftDataShares = self.importAssetsFromRedshiftDataShares {
            try encodeContainer.encode(importAssetsFromRedshiftDataShares, forKey: .importAssetsFromRedshiftDataShares)
        }
        if let importAssetsFromS3 = self.importAssetsFromS3 {
            try encodeContainer.encode(importAssetsFromS3, forKey: .importAssetsFromS3)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let exportAssetToSignedUrlDecoded = try containerValues.decodeIfPresent(DataExchangeClientTypes.ExportAssetToSignedUrlRequestDetails.self, forKey: .exportAssetToSignedUrl)
        exportAssetToSignedUrl = exportAssetToSignedUrlDecoded
        let exportAssetsToS3Decoded = try containerValues.decodeIfPresent(DataExchangeClientTypes.ExportAssetsToS3RequestDetails.self, forKey: .exportAssetsToS3)
        exportAssetsToS3 = exportAssetsToS3Decoded
        let exportRevisionsToS3Decoded = try containerValues.decodeIfPresent(DataExchangeClientTypes.ExportRevisionsToS3RequestDetails.self, forKey: .exportRevisionsToS3)
        exportRevisionsToS3 = exportRevisionsToS3Decoded
        let importAssetFromSignedUrlDecoded = try containerValues.decodeIfPresent(DataExchangeClientTypes.ImportAssetFromSignedUrlRequestDetails.self, forKey: .importAssetFromSignedUrl)
        importAssetFromSignedUrl = importAssetFromSignedUrlDecoded
        let importAssetsFromS3Decoded = try containerValues.decodeIfPresent(DataExchangeClientTypes.ImportAssetsFromS3RequestDetails.self, forKey: .importAssetsFromS3)
        importAssetsFromS3 = importAssetsFromS3Decoded
        let importAssetsFromRedshiftDataSharesDecoded = try containerValues.decodeIfPresent(DataExchangeClientTypes.ImportAssetsFromRedshiftDataSharesRequestDetails.self, forKey: .importAssetsFromRedshiftDataShares)
        importAssetsFromRedshiftDataShares = importAssetsFromRedshiftDataSharesDecoded
        let importAssetFromApiGatewayApiDecoded = try containerValues.decodeIfPresent(DataExchangeClientTypes.ImportAssetFromApiGatewayApiRequestDetails.self, forKey: .importAssetFromApiGatewayApi)
        importAssetFromApiGatewayApi = importAssetFromApiGatewayApiDecoded
    }
}
