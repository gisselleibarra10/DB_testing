// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension DataExchangeClientTypes.JobError: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case code = "Code"
        case details = "Details"
        case limitName = "LimitName"
        case limitValue = "LimitValue"
        case message = "Message"
        case resourceId = "ResourceId"
        case resourceType = "ResourceType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let code = self.code {
            try encodeContainer.encode(code.rawValue, forKey: .code)
        }
        if let details = self.details {
            try encodeContainer.encode(details, forKey: .details)
        }
        if let limitName = self.limitName {
            try encodeContainer.encode(limitName.rawValue, forKey: .limitName)
        }
        if let limitValue = self.limitValue {
            try encodeContainer.encode(limitValue, forKey: .limitValue)
        }
        if let message = self.message {
            try encodeContainer.encode(message, forKey: .message)
        }
        if let resourceId = self.resourceId {
            try encodeContainer.encode(resourceId, forKey: .resourceId)
        }
        if let resourceType = self.resourceType {
            try encodeContainer.encode(resourceType.rawValue, forKey: .resourceType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let codeDecoded = try containerValues.decodeIfPresent(DataExchangeClientTypes.Code.self, forKey: .code)
        code = codeDecoded
        let detailsDecoded = try containerValues.decodeIfPresent(DataExchangeClientTypes.Details.self, forKey: .details)
        details = detailsDecoded
        let limitNameDecoded = try containerValues.decodeIfPresent(DataExchangeClientTypes.JobErrorLimitName.self, forKey: .limitName)
        limitName = limitNameDecoded
        let limitValueDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .limitValue)
        limitValue = limitValueDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let resourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceId)
        resourceId = resourceIdDecoded
        let resourceTypeDecoded = try containerValues.decodeIfPresent(DataExchangeClientTypes.JobErrorResourceTypes.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
    }
}
