// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetEventActionOutputResponseBody: Swift.Equatable {
    let action: DataExchangeClientTypes.Action?
    let arn: Swift.String?
    let createdAt: ClientRuntime.Date?
    let event: DataExchangeClientTypes.Event?
    let id: Swift.String?
    let updatedAt: ClientRuntime.Date?
}

extension GetEventActionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case action = "Action"
        case arn = "Arn"
        case createdAt = "CreatedAt"
        case event = "Event"
        case id = "Id"
        case updatedAt = "UpdatedAt"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let actionDecoded = try containerValues.decodeIfPresent(DataExchangeClientTypes.Action.self, forKey: .action)
        action = actionDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let createdAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdAt)
        createdAt = createdAtDecoded
        let eventDecoded = try containerValues.decodeIfPresent(DataExchangeClientTypes.Event.self, forKey: .event)
        event = eventDecoded
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let updatedAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .updatedAt)
        updatedAt = updatedAtDecoded
    }
}
