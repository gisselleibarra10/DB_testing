// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension DataExchangeClientTypes.ExportAssetsToS3ResponseDetails: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case assetDestinations = "AssetDestinations"
        case dataSetId = "DataSetId"
        case encryption = "Encryption"
        case revisionId = "RevisionId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let assetDestinations = assetDestinations {
            var assetDestinationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .assetDestinations)
            for listofassetdestinationentry0 in assetDestinations {
                try assetDestinationsContainer.encode(listofassetdestinationentry0)
            }
        }
        if let dataSetId = self.dataSetId {
            try encodeContainer.encode(dataSetId, forKey: .dataSetId)
        }
        if let encryption = self.encryption {
            try encodeContainer.encode(encryption, forKey: .encryption)
        }
        if let revisionId = self.revisionId {
            try encodeContainer.encode(revisionId, forKey: .revisionId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let assetDestinationsContainer = try containerValues.decodeIfPresent([DataExchangeClientTypes.AssetDestinationEntry?].self, forKey: .assetDestinations)
        var assetDestinationsDecoded0:[DataExchangeClientTypes.AssetDestinationEntry]? = nil
        if let assetDestinationsContainer = assetDestinationsContainer {
            assetDestinationsDecoded0 = [DataExchangeClientTypes.AssetDestinationEntry]()
            for structure0 in assetDestinationsContainer {
                if let structure0 = structure0 {
                    assetDestinationsDecoded0?.append(structure0)
                }
            }
        }
        assetDestinations = assetDestinationsDecoded0
        let dataSetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataSetId)
        dataSetId = dataSetIdDecoded
        let encryptionDecoded = try containerValues.decodeIfPresent(DataExchangeClientTypes.ExportServerSideEncryption.self, forKey: .encryption)
        encryption = encryptionDecoded
        let revisionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .revisionId)
        revisionId = revisionIdDecoded
    }
}
