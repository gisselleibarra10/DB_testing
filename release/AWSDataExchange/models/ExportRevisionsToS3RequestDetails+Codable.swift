// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension DataExchangeClientTypes.ExportRevisionsToS3RequestDetails: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dataSetId = "DataSetId"
        case encryption = "Encryption"
        case revisionDestinations = "RevisionDestinations"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dataSetId = self.dataSetId {
            try encodeContainer.encode(dataSetId, forKey: .dataSetId)
        }
        if let encryption = self.encryption {
            try encodeContainer.encode(encryption, forKey: .encryption)
        }
        if let revisionDestinations = revisionDestinations {
            var revisionDestinationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .revisionDestinations)
            for listofrevisiondestinationentry0 in revisionDestinations {
                try revisionDestinationsContainer.encode(listofrevisiondestinationentry0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dataSetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataSetId)
        dataSetId = dataSetIdDecoded
        let encryptionDecoded = try containerValues.decodeIfPresent(DataExchangeClientTypes.ExportServerSideEncryption.self, forKey: .encryption)
        encryption = encryptionDecoded
        let revisionDestinationsContainer = try containerValues.decodeIfPresent([DataExchangeClientTypes.RevisionDestinationEntry?].self, forKey: .revisionDestinations)
        var revisionDestinationsDecoded0:[DataExchangeClientTypes.RevisionDestinationEntry]? = nil
        if let revisionDestinationsContainer = revisionDestinationsContainer {
            revisionDestinationsDecoded0 = [DataExchangeClientTypes.RevisionDestinationEntry]()
            for structure0 in revisionDestinationsContainer {
                if let structure0 = structure0 {
                    revisionDestinationsDecoded0?.append(structure0)
                }
            }
        }
        revisionDestinations = revisionDestinationsDecoded0
    }
}
