// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetRevisionOutputResponseBody: Swift.Equatable {
    let arn: Swift.String?
    let comment: Swift.String?
    let createdAt: ClientRuntime.Date?
    let dataSetId: Swift.String?
    let finalized: Swift.Bool?
    let id: Swift.String?
    let sourceId: Swift.String?
    let tags: [Swift.String:Swift.String]?
    let updatedAt: ClientRuntime.Date?
    let revocationComment: Swift.String?
    let revoked: Swift.Bool?
    let revokedAt: ClientRuntime.Date?
}

extension GetRevisionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "Arn"
        case comment = "Comment"
        case createdAt = "CreatedAt"
        case dataSetId = "DataSetId"
        case finalized = "Finalized"
        case id = "Id"
        case revocationComment = "RevocationComment"
        case revoked = "Revoked"
        case revokedAt = "RevokedAt"
        case sourceId = "SourceId"
        case tags = "Tags"
        case updatedAt = "UpdatedAt"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let commentDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .comment)
        comment = commentDecoded
        let createdAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdAt)
        createdAt = createdAtDecoded
        let dataSetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataSetId)
        dataSetId = dataSetIdDecoded
        let finalizedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .finalized)
        finalized = finalizedDecoded
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let sourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceId)
        sourceId = sourceIdDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, __string0) in tagsContainer {
                if let __string0 = __string0 {
                    tagsDecoded0?[key0] = __string0
                }
            }
        }
        tags = tagsDecoded0
        let updatedAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .updatedAt)
        updatedAt = updatedAtDecoded
        let revocationCommentDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .revocationComment)
        revocationComment = revocationCommentDecoded
        let revokedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .revoked)
        revoked = revokedDecoded
        let revokedAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .revokedAt)
        revokedAt = revokedAtDecoded
    }
}
