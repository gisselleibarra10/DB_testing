// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension LookoutVisionClientTypes.DetectAnomalyResult: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case anomalies = "Anomalies"
        case anomalyMask = "AnomalyMask"
        case confidence = "Confidence"
        case isAnomalous = "IsAnomalous"
        case source = "Source"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let anomalies = anomalies {
            var anomaliesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .anomalies)
            for anomalylist0 in anomalies {
                try anomaliesContainer.encode(anomalylist0)
            }
        }
        if let anomalyMask = self.anomalyMask {
            try encodeContainer.encode(anomalyMask.base64EncodedString(), forKey: .anomalyMask)
        }
        if let confidence = self.confidence {
            try encodeContainer.encode(confidence, forKey: .confidence)
        }
        if isAnomalous != false {
            try encodeContainer.encode(isAnomalous, forKey: .isAnomalous)
        }
        if let source = self.source {
            try encodeContainer.encode(source, forKey: .source)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sourceDecoded = try containerValues.decodeIfPresent(LookoutVisionClientTypes.ImageSource.self, forKey: .source)
        source = sourceDecoded
        let isAnomalousDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .isAnomalous) ?? false
        isAnomalous = isAnomalousDecoded
        let confidenceDecoded = try containerValues.decodeIfPresent(Swift.Float.self, forKey: .confidence)
        confidence = confidenceDecoded
        let anomaliesContainer = try containerValues.decodeIfPresent([LookoutVisionClientTypes.Anomaly?].self, forKey: .anomalies)
        var anomaliesDecoded0:[LookoutVisionClientTypes.Anomaly]? = nil
        if let anomaliesContainer = anomaliesContainer {
            anomaliesDecoded0 = [LookoutVisionClientTypes.Anomaly]()
            for structure0 in anomaliesContainer {
                if let structure0 = structure0 {
                    anomaliesDecoded0?.append(structure0)
                }
            }
        }
        anomalies = anomaliesDecoded0
        let anomalyMaskDecoded = try containerValues.decodeIfPresent(ClientRuntime.Data.self, forKey: .anomalyMask)
        anomalyMask = anomalyMaskDecoded
    }
}
