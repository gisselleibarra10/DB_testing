// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension LookoutVisionClientTypes {
    public enum ModelHostingStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case hosted
        case hostingFailed
        case startingHosting
        case stoppingHosting
        case systemUpdating
        case sdkUnknown(Swift.String)

        public static var allCases: [ModelHostingStatus] {
            return [
                .hosted,
                .hostingFailed,
                .startingHosting,
                .stoppingHosting,
                .systemUpdating,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .hosted: return "HOSTED"
            case .hostingFailed: return "HOSTING_FAILED"
            case .startingHosting: return "STARTING_HOSTING"
            case .stoppingHosting: return "STOPPING_HOSTING"
            case .systemUpdating: return "SYSTEM_UPDATING"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ModelHostingStatus(rawValue: rawValue) ?? ModelHostingStatus.sdkUnknown(rawValue)
        }
    }
}
