// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListModelPackagingJobsOutputResponseBody: Swift.Equatable {
    let modelPackagingJobs: [LookoutVisionClientTypes.ModelPackagingJobMetadata]?
    let nextToken: Swift.String?
}

extension ListModelPackagingJobsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case modelPackagingJobs = "ModelPackagingJobs"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let modelPackagingJobsContainer = try containerValues.decodeIfPresent([LookoutVisionClientTypes.ModelPackagingJobMetadata?].self, forKey: .modelPackagingJobs)
        var modelPackagingJobsDecoded0:[LookoutVisionClientTypes.ModelPackagingJobMetadata]? = nil
        if let modelPackagingJobsContainer = modelPackagingJobsContainer {
            modelPackagingJobsDecoded0 = [LookoutVisionClientTypes.ModelPackagingJobMetadata]()
            for structure0 in modelPackagingJobsContainer {
                if let structure0 = structure0 {
                    modelPackagingJobsDecoded0?.append(structure0)
                }
            }
        }
        modelPackagingJobs = modelPackagingJobsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
