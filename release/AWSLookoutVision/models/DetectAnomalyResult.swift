// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension LookoutVisionClientTypes {
    /// The prediction results from a call to [DetectAnomalies]. DetectAnomalyResult includes classification information for the prediction (IsAnomalous and Confidence). If the model you use is an image segementation model, DetectAnomalyResult also includes segmentation information (Anomalies and AnomalyMask). Classification information is calculated separately from segmentation information and you shouldn't assume a relationship between them.
    public struct DetectAnomalyResult: Swift.Equatable {
        /// If the model is an image segmentation model, Anomalies contains a list of anomaly types found in the image. There is one entry for each type of anomaly found (even if multiple instances of an anomaly type exist on the image). The first element in the list is always an anomaly type representing the image background ('background') and shouldn't be considered an anomaly. Amazon Lookout for Vision automatically add the background anomaly type to the response, and you don't need to declare a background anomaly type in your dataset. If the list has one entry ('background'), no anomalies were found on the image. An image classification model doesn't return an Anomalies list.
        public var anomalies: [LookoutVisionClientTypes.Anomaly]?
        /// If the model is an image segmentation model, AnomalyMask contains pixel masks that covers all anomaly types found on the image. Each anomaly type has a different mask color. To map a color to an anomaly type, see the color field of the [PixelAnomaly] object. An image classification model doesn't return an Anomalies list.
        public var anomalyMask: ClientRuntime.Data?
        /// The confidence that Lookout for Vision has in the accuracy of the classification in IsAnomalous.
        public var confidence: Swift.Float?
        /// True if Amazon Lookout for Vision classifies the image as containing an anomaly, otherwise false.
        public var isAnomalous: Swift.Bool
        /// The source of the image that was analyzed. direct means that the images was supplied from the local computer. No other values are supported.
        public var source: LookoutVisionClientTypes.ImageSource?

        public init (
            anomalies: [LookoutVisionClientTypes.Anomaly]? = nil,
            anomalyMask: ClientRuntime.Data? = nil,
            confidence: Swift.Float? = nil,
            isAnomalous: Swift.Bool = false,
            source: LookoutVisionClientTypes.ImageSource? = nil
        )
        {
            self.anomalies = anomalies
            self.anomalyMask = anomalyMask
            self.confidence = confidence
            self.isAnomalous = isAnomalous
            self.source = source
        }
    }

}
