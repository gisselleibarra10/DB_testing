// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension LookoutVisionClientTypes.TargetPlatform: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accelerator = "Accelerator"
        case arch = "Arch"
        case os = "Os"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accelerator = self.accelerator {
            try encodeContainer.encode(accelerator.rawValue, forKey: .accelerator)
        }
        if let arch = self.arch {
            try encodeContainer.encode(arch.rawValue, forKey: .arch)
        }
        if let os = self.os {
            try encodeContainer.encode(os.rawValue, forKey: .os)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let osDecoded = try containerValues.decodeIfPresent(LookoutVisionClientTypes.TargetPlatformOs.self, forKey: .os)
        os = osDecoded
        let archDecoded = try containerValues.decodeIfPresent(LookoutVisionClientTypes.TargetPlatformArch.self, forKey: .arch)
        arch = archDecoded
        let acceleratorDecoded = try containerValues.decodeIfPresent(LookoutVisionClientTypes.TargetPlatformAccelerator.self, forKey: .accelerator)
        accelerator = acceleratorDecoded
    }
}
