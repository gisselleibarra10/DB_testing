// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension LookoutVisionClientTypes.ModelPackagingDescription: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTimestamp = "CreationTimestamp"
        case jobName = "JobName"
        case lastUpdatedTimestamp = "LastUpdatedTimestamp"
        case modelPackagingConfiguration = "ModelPackagingConfiguration"
        case modelPackagingJobDescription = "ModelPackagingJobDescription"
        case modelPackagingMethod = "ModelPackagingMethod"
        case modelPackagingOutputDetails = "ModelPackagingOutputDetails"
        case modelVersion = "ModelVersion"
        case projectName = "ProjectName"
        case status = "Status"
        case statusMessage = "StatusMessage"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationTimestamp = self.creationTimestamp {
            try encodeContainer.encode(creationTimestamp.timeIntervalSince1970, forKey: .creationTimestamp)
        }
        if let jobName = self.jobName {
            try encodeContainer.encode(jobName, forKey: .jobName)
        }
        if let lastUpdatedTimestamp = self.lastUpdatedTimestamp {
            try encodeContainer.encode(lastUpdatedTimestamp.timeIntervalSince1970, forKey: .lastUpdatedTimestamp)
        }
        if let modelPackagingConfiguration = self.modelPackagingConfiguration {
            try encodeContainer.encode(modelPackagingConfiguration, forKey: .modelPackagingConfiguration)
        }
        if let modelPackagingJobDescription = self.modelPackagingJobDescription {
            try encodeContainer.encode(modelPackagingJobDescription, forKey: .modelPackagingJobDescription)
        }
        if let modelPackagingMethod = self.modelPackagingMethod {
            try encodeContainer.encode(modelPackagingMethod, forKey: .modelPackagingMethod)
        }
        if let modelPackagingOutputDetails = self.modelPackagingOutputDetails {
            try encodeContainer.encode(modelPackagingOutputDetails, forKey: .modelPackagingOutputDetails)
        }
        if let modelVersion = self.modelVersion {
            try encodeContainer.encode(modelVersion, forKey: .modelVersion)
        }
        if let projectName = self.projectName {
            try encodeContainer.encode(projectName, forKey: .projectName)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let statusMessage = self.statusMessage {
            try encodeContainer.encode(statusMessage, forKey: .statusMessage)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobName)
        jobName = jobNameDecoded
        let projectNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .projectName)
        projectName = projectNameDecoded
        let modelVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelVersion)
        modelVersion = modelVersionDecoded
        let modelPackagingConfigurationDecoded = try containerValues.decodeIfPresent(LookoutVisionClientTypes.ModelPackagingConfiguration.self, forKey: .modelPackagingConfiguration)
        modelPackagingConfiguration = modelPackagingConfigurationDecoded
        let modelPackagingJobDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelPackagingJobDescription)
        modelPackagingJobDescription = modelPackagingJobDescriptionDecoded
        let modelPackagingMethodDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelPackagingMethod)
        modelPackagingMethod = modelPackagingMethodDecoded
        let modelPackagingOutputDetailsDecoded = try containerValues.decodeIfPresent(LookoutVisionClientTypes.ModelPackagingOutputDetails.self, forKey: .modelPackagingOutputDetails)
        modelPackagingOutputDetails = modelPackagingOutputDetailsDecoded
        let statusDecoded = try containerValues.decodeIfPresent(LookoutVisionClientTypes.ModelPackagingJobStatus.self, forKey: .status)
        status = statusDecoded
        let statusMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .statusMessage)
        statusMessage = statusMessageDecoded
        let creationTimestampDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTimestamp)
        creationTimestamp = creationTimestampDecoded
        let lastUpdatedTimestampDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastUpdatedTimestamp)
        lastUpdatedTimestamp = lastUpdatedTimestampDecoded
    }
}
