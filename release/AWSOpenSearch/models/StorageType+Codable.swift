// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension OpenSearchClientTypes.StorageType: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case storageSubTypeName = "StorageSubTypeName"
        case storageTypeLimits = "StorageTypeLimits"
        case storageTypeName = "StorageTypeName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let storageSubTypeName = self.storageSubTypeName {
            try encodeContainer.encode(storageSubTypeName, forKey: .storageSubTypeName)
        }
        if let storageTypeLimits = storageTypeLimits {
            var storageTypeLimitsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .storageTypeLimits)
            for storagetypelimitlist0 in storageTypeLimits {
                try storageTypeLimitsContainer.encode(storagetypelimitlist0)
            }
        }
        if let storageTypeName = self.storageTypeName {
            try encodeContainer.encode(storageTypeName, forKey: .storageTypeName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let storageTypeNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .storageTypeName)
        storageTypeName = storageTypeNameDecoded
        let storageSubTypeNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .storageSubTypeName)
        storageSubTypeName = storageSubTypeNameDecoded
        let storageTypeLimitsContainer = try containerValues.decodeIfPresent([OpenSearchClientTypes.StorageTypeLimit?].self, forKey: .storageTypeLimits)
        var storageTypeLimitsDecoded0:[OpenSearchClientTypes.StorageTypeLimit]? = nil
        if let storageTypeLimitsContainer = storageTypeLimitsContainer {
            storageTypeLimitsDecoded0 = [OpenSearchClientTypes.StorageTypeLimit]()
            for structure0 in storageTypeLimitsContainer {
                if let structure0 = structure0 {
                    storageTypeLimitsDecoded0?.append(structure0)
                }
            }
        }
        storageTypeLimits = storageTypeLimitsDecoded0
    }
}
