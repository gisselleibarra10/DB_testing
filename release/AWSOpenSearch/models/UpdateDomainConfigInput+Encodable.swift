// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension UpdateDomainConfigInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accessPolicies = "AccessPolicies"
        case advancedOptions = "AdvancedOptions"
        case advancedSecurityOptions = "AdvancedSecurityOptions"
        case autoTuneOptions = "AutoTuneOptions"
        case clusterConfig = "ClusterConfig"
        case cognitoOptions = "CognitoOptions"
        case domainEndpointOptions = "DomainEndpointOptions"
        case dryRun = "DryRun"
        case eBSOptions = "EBSOptions"
        case encryptionAtRestOptions = "EncryptionAtRestOptions"
        case logPublishingOptions = "LogPublishingOptions"
        case nodeToNodeEncryptionOptions = "NodeToNodeEncryptionOptions"
        case snapshotOptions = "SnapshotOptions"
        case vPCOptions = "VPCOptions"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accessPolicies = self.accessPolicies {
            try encodeContainer.encode(accessPolicies, forKey: .accessPolicies)
        }
        if let advancedOptions = advancedOptions {
            var advancedOptionsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .advancedOptions)
            for (dictKey0, advancedoptions0) in advancedOptions {
                try advancedOptionsContainer.encode(advancedoptions0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let advancedSecurityOptions = self.advancedSecurityOptions {
            try encodeContainer.encode(advancedSecurityOptions, forKey: .advancedSecurityOptions)
        }
        if let autoTuneOptions = self.autoTuneOptions {
            try encodeContainer.encode(autoTuneOptions, forKey: .autoTuneOptions)
        }
        if let clusterConfig = self.clusterConfig {
            try encodeContainer.encode(clusterConfig, forKey: .clusterConfig)
        }
        if let cognitoOptions = self.cognitoOptions {
            try encodeContainer.encode(cognitoOptions, forKey: .cognitoOptions)
        }
        if let domainEndpointOptions = self.domainEndpointOptions {
            try encodeContainer.encode(domainEndpointOptions, forKey: .domainEndpointOptions)
        }
        if let dryRun = self.dryRun {
            try encodeContainer.encode(dryRun, forKey: .dryRun)
        }
        if let eBSOptions = self.eBSOptions {
            try encodeContainer.encode(eBSOptions, forKey: .eBSOptions)
        }
        if let encryptionAtRestOptions = self.encryptionAtRestOptions {
            try encodeContainer.encode(encryptionAtRestOptions, forKey: .encryptionAtRestOptions)
        }
        if let logPublishingOptions = logPublishingOptions {
            var logPublishingOptionsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .logPublishingOptions)
            for (dictKey0, logpublishingoptions0) in logPublishingOptions {
                try logPublishingOptionsContainer.encode(logpublishingoptions0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let nodeToNodeEncryptionOptions = self.nodeToNodeEncryptionOptions {
            try encodeContainer.encode(nodeToNodeEncryptionOptions, forKey: .nodeToNodeEncryptionOptions)
        }
        if let snapshotOptions = self.snapshotOptions {
            try encodeContainer.encode(snapshotOptions, forKey: .snapshotOptions)
        }
        if let vPCOptions = self.vPCOptions {
            try encodeContainer.encode(vPCOptions, forKey: .vPCOptions)
        }
    }
}
