// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension OpenSearchClientTypes {
    public enum OpenSearchWarmPartitionInstanceType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case ultrawarm1LargeSearch
        case ultrawarm1MediumSearch
        case ultrawarm1XlargeSearch
        case sdkUnknown(Swift.String)

        public static var allCases: [OpenSearchWarmPartitionInstanceType] {
            return [
                .ultrawarm1LargeSearch,
                .ultrawarm1MediumSearch,
                .ultrawarm1XlargeSearch,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .ultrawarm1LargeSearch: return "ultrawarm1.large.search"
            case .ultrawarm1MediumSearch: return "ultrawarm1.medium.search"
            case .ultrawarm1XlargeSearch: return "ultrawarm1.xlarge.search"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = OpenSearchWarmPartitionInstanceType(rawValue: rawValue) ?? OpenSearchWarmPartitionInstanceType.sdkUnknown(rawValue)
        }
    }
}
