// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension OpenSearchClientTypes.InstanceTypeDetails: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case advancedSecurityEnabled = "AdvancedSecurityEnabled"
        case appLogsEnabled = "AppLogsEnabled"
        case cognitoEnabled = "CognitoEnabled"
        case encryptionEnabled = "EncryptionEnabled"
        case instanceRole = "InstanceRole"
        case instanceType = "InstanceType"
        case warmEnabled = "WarmEnabled"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let advancedSecurityEnabled = self.advancedSecurityEnabled {
            try encodeContainer.encode(advancedSecurityEnabled, forKey: .advancedSecurityEnabled)
        }
        if let appLogsEnabled = self.appLogsEnabled {
            try encodeContainer.encode(appLogsEnabled, forKey: .appLogsEnabled)
        }
        if let cognitoEnabled = self.cognitoEnabled {
            try encodeContainer.encode(cognitoEnabled, forKey: .cognitoEnabled)
        }
        if let encryptionEnabled = self.encryptionEnabled {
            try encodeContainer.encode(encryptionEnabled, forKey: .encryptionEnabled)
        }
        if let instanceRole = instanceRole {
            var instanceRoleContainer = encodeContainer.nestedUnkeyedContainer(forKey: .instanceRole)
            for instancerolelist0 in instanceRole {
                try instanceRoleContainer.encode(instancerolelist0)
            }
        }
        if let instanceType = self.instanceType {
            try encodeContainer.encode(instanceType.rawValue, forKey: .instanceType)
        }
        if let warmEnabled = self.warmEnabled {
            try encodeContainer.encode(warmEnabled, forKey: .warmEnabled)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instanceTypeDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.OpenSearchPartitionInstanceType.self, forKey: .instanceType)
        instanceType = instanceTypeDecoded
        let encryptionEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .encryptionEnabled)
        encryptionEnabled = encryptionEnabledDecoded
        let cognitoEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .cognitoEnabled)
        cognitoEnabled = cognitoEnabledDecoded
        let appLogsEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .appLogsEnabled)
        appLogsEnabled = appLogsEnabledDecoded
        let advancedSecurityEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .advancedSecurityEnabled)
        advancedSecurityEnabled = advancedSecurityEnabledDecoded
        let warmEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .warmEnabled)
        warmEnabled = warmEnabledDecoded
        let instanceRoleContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .instanceRole)
        var instanceRoleDecoded0:[Swift.String]? = nil
        if let instanceRoleContainer = instanceRoleContainer {
            instanceRoleDecoded0 = [Swift.String]()
            for string0 in instanceRoleContainer {
                if let string0 = string0 {
                    instanceRoleDecoded0?.append(string0)
                }
            }
        }
        instanceRole = instanceRoleDecoded0
    }
}
