// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension OpenSearchClientTypes.DomainConfig: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accessPolicies = "AccessPolicies"
        case advancedOptions = "AdvancedOptions"
        case advancedSecurityOptions = "AdvancedSecurityOptions"
        case autoTuneOptions = "AutoTuneOptions"
        case changeProgressDetails = "ChangeProgressDetails"
        case clusterConfig = "ClusterConfig"
        case cognitoOptions = "CognitoOptions"
        case domainEndpointOptions = "DomainEndpointOptions"
        case eBSOptions = "EBSOptions"
        case encryptionAtRestOptions = "EncryptionAtRestOptions"
        case engineVersion = "EngineVersion"
        case logPublishingOptions = "LogPublishingOptions"
        case nodeToNodeEncryptionOptions = "NodeToNodeEncryptionOptions"
        case snapshotOptions = "SnapshotOptions"
        case vPCOptions = "VPCOptions"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accessPolicies = self.accessPolicies {
            try encodeContainer.encode(accessPolicies, forKey: .accessPolicies)
        }
        if let advancedOptions = self.advancedOptions {
            try encodeContainer.encode(advancedOptions, forKey: .advancedOptions)
        }
        if let advancedSecurityOptions = self.advancedSecurityOptions {
            try encodeContainer.encode(advancedSecurityOptions, forKey: .advancedSecurityOptions)
        }
        if let autoTuneOptions = self.autoTuneOptions {
            try encodeContainer.encode(autoTuneOptions, forKey: .autoTuneOptions)
        }
        if let changeProgressDetails = self.changeProgressDetails {
            try encodeContainer.encode(changeProgressDetails, forKey: .changeProgressDetails)
        }
        if let clusterConfig = self.clusterConfig {
            try encodeContainer.encode(clusterConfig, forKey: .clusterConfig)
        }
        if let cognitoOptions = self.cognitoOptions {
            try encodeContainer.encode(cognitoOptions, forKey: .cognitoOptions)
        }
        if let domainEndpointOptions = self.domainEndpointOptions {
            try encodeContainer.encode(domainEndpointOptions, forKey: .domainEndpointOptions)
        }
        if let eBSOptions = self.eBSOptions {
            try encodeContainer.encode(eBSOptions, forKey: .eBSOptions)
        }
        if let encryptionAtRestOptions = self.encryptionAtRestOptions {
            try encodeContainer.encode(encryptionAtRestOptions, forKey: .encryptionAtRestOptions)
        }
        if let engineVersion = self.engineVersion {
            try encodeContainer.encode(engineVersion, forKey: .engineVersion)
        }
        if let logPublishingOptions = self.logPublishingOptions {
            try encodeContainer.encode(logPublishingOptions, forKey: .logPublishingOptions)
        }
        if let nodeToNodeEncryptionOptions = self.nodeToNodeEncryptionOptions {
            try encodeContainer.encode(nodeToNodeEncryptionOptions, forKey: .nodeToNodeEncryptionOptions)
        }
        if let snapshotOptions = self.snapshotOptions {
            try encodeContainer.encode(snapshotOptions, forKey: .snapshotOptions)
        }
        if let vPCOptions = self.vPCOptions {
            try encodeContainer.encode(vPCOptions, forKey: .vPCOptions)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let engineVersionDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.VersionStatus.self, forKey: .engineVersion)
        engineVersion = engineVersionDecoded
        let clusterConfigDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.ClusterConfigStatus.self, forKey: .clusterConfig)
        clusterConfig = clusterConfigDecoded
        let eBSOptionsDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.EBSOptionsStatus.self, forKey: .eBSOptions)
        eBSOptions = eBSOptionsDecoded
        let accessPoliciesDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.AccessPoliciesStatus.self, forKey: .accessPolicies)
        accessPolicies = accessPoliciesDecoded
        let snapshotOptionsDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.SnapshotOptionsStatus.self, forKey: .snapshotOptions)
        snapshotOptions = snapshotOptionsDecoded
        let vPCOptionsDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.VPCDerivedInfoStatus.self, forKey: .vPCOptions)
        vPCOptions = vPCOptionsDecoded
        let cognitoOptionsDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.CognitoOptionsStatus.self, forKey: .cognitoOptions)
        cognitoOptions = cognitoOptionsDecoded
        let encryptionAtRestOptionsDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.EncryptionAtRestOptionsStatus.self, forKey: .encryptionAtRestOptions)
        encryptionAtRestOptions = encryptionAtRestOptionsDecoded
        let nodeToNodeEncryptionOptionsDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.NodeToNodeEncryptionOptionsStatus.self, forKey: .nodeToNodeEncryptionOptions)
        nodeToNodeEncryptionOptions = nodeToNodeEncryptionOptionsDecoded
        let advancedOptionsDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.AdvancedOptionsStatus.self, forKey: .advancedOptions)
        advancedOptions = advancedOptionsDecoded
        let logPublishingOptionsDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.LogPublishingOptionsStatus.self, forKey: .logPublishingOptions)
        logPublishingOptions = logPublishingOptionsDecoded
        let domainEndpointOptionsDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.DomainEndpointOptionsStatus.self, forKey: .domainEndpointOptions)
        domainEndpointOptions = domainEndpointOptionsDecoded
        let advancedSecurityOptionsDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.AdvancedSecurityOptionsStatus.self, forKey: .advancedSecurityOptions)
        advancedSecurityOptions = advancedSecurityOptionsDecoded
        let autoTuneOptionsDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.AutoTuneOptionsStatus.self, forKey: .autoTuneOptions)
        autoTuneOptions = autoTuneOptionsDecoded
        let changeProgressDetailsDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.ChangeProgressDetails.self, forKey: .changeProgressDetails)
        changeProgressDetails = changeProgressDetailsDecoded
    }
}
