// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension OpenSearchClientTypes.ChangeProgressStatusDetails: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case changeId = "ChangeId"
        case changeProgressStages = "ChangeProgressStages"
        case completedProperties = "CompletedProperties"
        case pendingProperties = "PendingProperties"
        case startTime = "StartTime"
        case status = "Status"
        case totalNumberOfStages = "TotalNumberOfStages"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let changeId = self.changeId {
            try encodeContainer.encode(changeId, forKey: .changeId)
        }
        if let changeProgressStages = changeProgressStages {
            var changeProgressStagesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .changeProgressStages)
            for changeprogressstagelist0 in changeProgressStages {
                try changeProgressStagesContainer.encode(changeprogressstagelist0)
            }
        }
        if let completedProperties = completedProperties {
            var completedPropertiesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .completedProperties)
            for stringlist0 in completedProperties {
                try completedPropertiesContainer.encode(stringlist0)
            }
        }
        if let pendingProperties = pendingProperties {
            var pendingPropertiesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .pendingProperties)
            for stringlist0 in pendingProperties {
                try pendingPropertiesContainer.encode(stringlist0)
            }
        }
        if let startTime = self.startTime {
            try encodeContainer.encode(startTime.timeIntervalSince1970, forKey: .startTime)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if totalNumberOfStages != 0 {
            try encodeContainer.encode(totalNumberOfStages, forKey: .totalNumberOfStages)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let changeIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .changeId)
        changeId = changeIdDecoded
        let startTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .startTime)
        startTime = startTimeDecoded
        let statusDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.OverallChangeStatus.self, forKey: .status)
        status = statusDecoded
        let pendingPropertiesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .pendingProperties)
        var pendingPropertiesDecoded0:[Swift.String]? = nil
        if let pendingPropertiesContainer = pendingPropertiesContainer {
            pendingPropertiesDecoded0 = [Swift.String]()
            for string0 in pendingPropertiesContainer {
                if let string0 = string0 {
                    pendingPropertiesDecoded0?.append(string0)
                }
            }
        }
        pendingProperties = pendingPropertiesDecoded0
        let completedPropertiesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .completedProperties)
        var completedPropertiesDecoded0:[Swift.String]? = nil
        if let completedPropertiesContainer = completedPropertiesContainer {
            completedPropertiesDecoded0 = [Swift.String]()
            for string0 in completedPropertiesContainer {
                if let string0 = string0 {
                    completedPropertiesDecoded0?.append(string0)
                }
            }
        }
        completedProperties = completedPropertiesDecoded0
        let totalNumberOfStagesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .totalNumberOfStages) ?? 0
        totalNumberOfStages = totalNumberOfStagesDecoded
        let changeProgressStagesContainer = try containerValues.decodeIfPresent([OpenSearchClientTypes.ChangeProgressStage?].self, forKey: .changeProgressStages)
        var changeProgressStagesDecoded0:[OpenSearchClientTypes.ChangeProgressStage]? = nil
        if let changeProgressStagesContainer = changeProgressStagesContainer {
            changeProgressStagesDecoded0 = [OpenSearchClientTypes.ChangeProgressStage]()
            for structure0 in changeProgressStagesContainer {
                if let structure0 = structure0 {
                    changeProgressStagesDecoded0?.append(structure0)
                }
            }
        }
        changeProgressStages = changeProgressStagesDecoded0
    }
}
