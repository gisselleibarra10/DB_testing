// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension OpenSearchClientTypes.EBSOptions: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case eBSEnabled = "EBSEnabled"
        case iops = "Iops"
        case throughput = "Throughput"
        case volumeSize = "VolumeSize"
        case volumeType = "VolumeType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let eBSEnabled = self.eBSEnabled {
            try encodeContainer.encode(eBSEnabled, forKey: .eBSEnabled)
        }
        if let iops = self.iops {
            try encodeContainer.encode(iops, forKey: .iops)
        }
        if let throughput = self.throughput {
            try encodeContainer.encode(throughput, forKey: .throughput)
        }
        if let volumeSize = self.volumeSize {
            try encodeContainer.encode(volumeSize, forKey: .volumeSize)
        }
        if let volumeType = self.volumeType {
            try encodeContainer.encode(volumeType.rawValue, forKey: .volumeType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let eBSEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .eBSEnabled)
        eBSEnabled = eBSEnabledDecoded
        let volumeTypeDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.VolumeType.self, forKey: .volumeType)
        volumeType = volumeTypeDecoded
        let volumeSizeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .volumeSize)
        volumeSize = volumeSizeDecoded
        let iopsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .iops)
        iops = iopsDecoded
        let throughputDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .throughput)
        throughput = throughputDecoded
    }
}
