// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension OpenSearchClientTypes.LogPublishingOptionsStatus: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case options = "Options"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let options = options {
            var optionsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .options)
            for (dictKey0, logpublishingoptions0) in options {
                try optionsContainer.encode(logpublishingoptions0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let status = self.status {
            try encodeContainer.encode(status, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let optionsContainer = try containerValues.decodeIfPresent([Swift.String: OpenSearchClientTypes.LogPublishingOption?].self, forKey: .options)
        var optionsDecoded0: [Swift.String:OpenSearchClientTypes.LogPublishingOption]? = nil
        if let optionsContainer = optionsContainer {
            optionsDecoded0 = [Swift.String:OpenSearchClientTypes.LogPublishingOption]()
            for (key0, logpublishingoption0) in optionsContainer {
                if let logpublishingoption0 = logpublishingoption0 {
                    optionsDecoded0?[key0] = logpublishingoption0
                }
            }
        }
        options = optionsDecoded0
        let statusDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.OptionStatus.self, forKey: .status)
        status = statusDecoded
    }
}
