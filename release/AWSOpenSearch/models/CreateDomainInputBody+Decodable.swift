// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateDomainInputBody: Swift.Equatable {
    let domainName: Swift.String?
    let engineVersion: Swift.String?
    let clusterConfig: OpenSearchClientTypes.ClusterConfig?
    let eBSOptions: OpenSearchClientTypes.EBSOptions?
    let accessPolicies: Swift.String?
    let snapshotOptions: OpenSearchClientTypes.SnapshotOptions?
    let vPCOptions: OpenSearchClientTypes.VPCOptions?
    let cognitoOptions: OpenSearchClientTypes.CognitoOptions?
    let encryptionAtRestOptions: OpenSearchClientTypes.EncryptionAtRestOptions?
    let nodeToNodeEncryptionOptions: OpenSearchClientTypes.NodeToNodeEncryptionOptions?
    let advancedOptions: [Swift.String:Swift.String]?
    let logPublishingOptions: [Swift.String:OpenSearchClientTypes.LogPublishingOption]?
    let domainEndpointOptions: OpenSearchClientTypes.DomainEndpointOptions?
    let advancedSecurityOptions: OpenSearchClientTypes.AdvancedSecurityOptionsInput?
    let tagList: [OpenSearchClientTypes.Tag]?
    let autoTuneOptions: OpenSearchClientTypes.AutoTuneOptionsInput?
}

extension CreateDomainInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accessPolicies = "AccessPolicies"
        case advancedOptions = "AdvancedOptions"
        case advancedSecurityOptions = "AdvancedSecurityOptions"
        case autoTuneOptions = "AutoTuneOptions"
        case clusterConfig = "ClusterConfig"
        case cognitoOptions = "CognitoOptions"
        case domainEndpointOptions = "DomainEndpointOptions"
        case domainName = "DomainName"
        case eBSOptions = "EBSOptions"
        case encryptionAtRestOptions = "EncryptionAtRestOptions"
        case engineVersion = "EngineVersion"
        case logPublishingOptions = "LogPublishingOptions"
        case nodeToNodeEncryptionOptions = "NodeToNodeEncryptionOptions"
        case snapshotOptions = "SnapshotOptions"
        case tagList = "TagList"
        case vPCOptions = "VPCOptions"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domainName)
        domainName = domainNameDecoded
        let engineVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .engineVersion)
        engineVersion = engineVersionDecoded
        let clusterConfigDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.ClusterConfig.self, forKey: .clusterConfig)
        clusterConfig = clusterConfigDecoded
        let eBSOptionsDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.EBSOptions.self, forKey: .eBSOptions)
        eBSOptions = eBSOptionsDecoded
        let accessPoliciesDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .accessPolicies)
        accessPolicies = accessPoliciesDecoded
        let snapshotOptionsDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.SnapshotOptions.self, forKey: .snapshotOptions)
        snapshotOptions = snapshotOptionsDecoded
        let vPCOptionsDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.VPCOptions.self, forKey: .vPCOptions)
        vPCOptions = vPCOptionsDecoded
        let cognitoOptionsDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.CognitoOptions.self, forKey: .cognitoOptions)
        cognitoOptions = cognitoOptionsDecoded
        let encryptionAtRestOptionsDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.EncryptionAtRestOptions.self, forKey: .encryptionAtRestOptions)
        encryptionAtRestOptions = encryptionAtRestOptionsDecoded
        let nodeToNodeEncryptionOptionsDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.NodeToNodeEncryptionOptions.self, forKey: .nodeToNodeEncryptionOptions)
        nodeToNodeEncryptionOptions = nodeToNodeEncryptionOptionsDecoded
        let advancedOptionsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .advancedOptions)
        var advancedOptionsDecoded0: [Swift.String:Swift.String]? = nil
        if let advancedOptionsContainer = advancedOptionsContainer {
            advancedOptionsDecoded0 = [Swift.String:Swift.String]()
            for (key0, string0) in advancedOptionsContainer {
                if let string0 = string0 {
                    advancedOptionsDecoded0?[key0] = string0
                }
            }
        }
        advancedOptions = advancedOptionsDecoded0
        let logPublishingOptionsContainer = try containerValues.decodeIfPresent([Swift.String: OpenSearchClientTypes.LogPublishingOption?].self, forKey: .logPublishingOptions)
        var logPublishingOptionsDecoded0: [Swift.String:OpenSearchClientTypes.LogPublishingOption]? = nil
        if let logPublishingOptionsContainer = logPublishingOptionsContainer {
            logPublishingOptionsDecoded0 = [Swift.String:OpenSearchClientTypes.LogPublishingOption]()
            for (key0, logpublishingoption0) in logPublishingOptionsContainer {
                if let logpublishingoption0 = logpublishingoption0 {
                    logPublishingOptionsDecoded0?[key0] = logpublishingoption0
                }
            }
        }
        logPublishingOptions = logPublishingOptionsDecoded0
        let domainEndpointOptionsDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.DomainEndpointOptions.self, forKey: .domainEndpointOptions)
        domainEndpointOptions = domainEndpointOptionsDecoded
        let advancedSecurityOptionsDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.AdvancedSecurityOptionsInput.self, forKey: .advancedSecurityOptions)
        advancedSecurityOptions = advancedSecurityOptionsDecoded
        let tagListContainer = try containerValues.decodeIfPresent([OpenSearchClientTypes.Tag?].self, forKey: .tagList)
        var tagListDecoded0:[OpenSearchClientTypes.Tag]? = nil
        if let tagListContainer = tagListContainer {
            tagListDecoded0 = [OpenSearchClientTypes.Tag]()
            for structure0 in tagListContainer {
                if let structure0 = structure0 {
                    tagListDecoded0?.append(structure0)
                }
            }
        }
        tagList = tagListDecoded0
        let autoTuneOptionsDecoded = try containerValues.decodeIfPresent(OpenSearchClientTypes.AutoTuneOptionsInput.self, forKey: .autoTuneOptions)
        autoTuneOptions = autoTuneOptionsDecoded
    }
}
