// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct UpdateJobExecutionInputBody: Swift.Equatable {
    let status: IotJobsDataPlaneClientTypes.JobExecutionStatus?
    let statusDetails: [Swift.String:Swift.String]?
    let stepTimeoutInMinutes: Swift.Int?
    let expectedVersion: Swift.Int?
    let includeJobExecutionState: Swift.Bool?
    let includeJobDocument: Swift.Bool?
    let executionNumber: Swift.Int?
}

extension UpdateJobExecutionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case executionNumber
        case expectedVersion
        case includeJobDocument
        case includeJobExecutionState
        case status
        case statusDetails
        case stepTimeoutInMinutes
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statusDecoded = try containerValues.decodeIfPresent(IotJobsDataPlaneClientTypes.JobExecutionStatus.self, forKey: .status)
        status = statusDecoded
        let statusDetailsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .statusDetails)
        var statusDetailsDecoded0: [Swift.String:Swift.String]? = nil
        if let statusDetailsContainer = statusDetailsContainer {
            statusDetailsDecoded0 = [Swift.String:Swift.String]()
            for (key0, detailsvalue0) in statusDetailsContainer {
                if let detailsvalue0 = detailsvalue0 {
                    statusDetailsDecoded0?[key0] = detailsvalue0
                }
            }
        }
        statusDetails = statusDetailsDecoded0
        let stepTimeoutInMinutesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .stepTimeoutInMinutes)
        stepTimeoutInMinutes = stepTimeoutInMinutesDecoded
        let expectedVersionDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .expectedVersion)
        expectedVersion = expectedVersionDecoded
        let includeJobExecutionStateDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .includeJobExecutionState)
        includeJobExecutionState = includeJobExecutionStateDecoded
        let includeJobDocumentDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .includeJobDocument)
        includeJobDocument = includeJobDocumentDecoded
        let executionNumberDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .executionNumber)
        executionNumber = executionNumberDecoded
    }
}
