// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct DescribeArchiveOutputResponse: Swift.Equatable {
    /// The ARN of the archive.
    public var archiveArn: Swift.String?
    /// The name of the archive.
    public var archiveName: Swift.String?
    /// The time at which the archive was created.
    public var creationTime: ClientRuntime.Date?
    /// The description of the archive.
    public var description: Swift.String?
    /// The number of events in the archive.
    public var eventCount: Swift.Int
    /// The event pattern used to filter events sent to the archive.
    public var eventPattern: Swift.String?
    /// The ARN of the event source associated with the archive.
    public var eventSourceArn: Swift.String?
    /// The number of days to retain events for in the archive.
    public var retentionDays: Swift.Int?
    /// The size of the archive in bytes.
    public var sizeBytes: Swift.Int
    /// The state of the archive.
    public var state: CloudWatchEventsClientTypes.ArchiveState?
    /// The reason that the archive is in the state.
    public var stateReason: Swift.String?

    public init (
        archiveArn: Swift.String? = nil,
        archiveName: Swift.String? = nil,
        creationTime: ClientRuntime.Date? = nil,
        description: Swift.String? = nil,
        eventCount: Swift.Int = 0,
        eventPattern: Swift.String? = nil,
        eventSourceArn: Swift.String? = nil,
        retentionDays: Swift.Int? = nil,
        sizeBytes: Swift.Int = 0,
        state: CloudWatchEventsClientTypes.ArchiveState? = nil,
        stateReason: Swift.String? = nil
    )
    {
        self.archiveArn = archiveArn
        self.archiveName = archiveName
        self.creationTime = creationTime
        self.description = description
        self.eventCount = eventCount
        self.eventPattern = eventPattern
        self.eventSourceArn = eventSourceArn
        self.retentionDays = retentionDays
        self.sizeBytes = sizeBytes
        self.state = state
        self.stateReason = stateReason
    }
}
