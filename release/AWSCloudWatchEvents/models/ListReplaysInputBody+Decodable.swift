// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListReplaysInputBody: Swift.Equatable {
    let namePrefix: Swift.String?
    let state: CloudWatchEventsClientTypes.ReplayState?
    let eventSourceArn: Swift.String?
    let nextToken: Swift.String?
    let limit: Swift.Int?
}

extension ListReplaysInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case eventSourceArn = "EventSourceArn"
        case limit = "Limit"
        case namePrefix = "NamePrefix"
        case nextToken = "NextToken"
        case state = "State"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let namePrefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .namePrefix)
        namePrefix = namePrefixDecoded
        let stateDecoded = try containerValues.decodeIfPresent(CloudWatchEventsClientTypes.ReplayState.self, forKey: .state)
        state = stateDecoded
        let eventSourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .eventSourceArn)
        eventSourceArn = eventSourceArnDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let limitDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .limit)
        limit = limitDecoded
    }
}
