// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeArchiveOutputResponseBody: Swift.Equatable {
    let archiveArn: Swift.String?
    let archiveName: Swift.String?
    let eventSourceArn: Swift.String?
    let description: Swift.String?
    let eventPattern: Swift.String?
    let state: CloudWatchEventsClientTypes.ArchiveState?
    let stateReason: Swift.String?
    let retentionDays: Swift.Int?
    let sizeBytes: Swift.Int
    let eventCount: Swift.Int
    let creationTime: ClientRuntime.Date?
}

extension DescribeArchiveOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case archiveArn = "ArchiveArn"
        case archiveName = "ArchiveName"
        case creationTime = "CreationTime"
        case description = "Description"
        case eventCount = "EventCount"
        case eventPattern = "EventPattern"
        case eventSourceArn = "EventSourceArn"
        case retentionDays = "RetentionDays"
        case sizeBytes = "SizeBytes"
        case state = "State"
        case stateReason = "StateReason"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let archiveArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .archiveArn)
        archiveArn = archiveArnDecoded
        let archiveNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .archiveName)
        archiveName = archiveNameDecoded
        let eventSourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .eventSourceArn)
        eventSourceArn = eventSourceArnDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let eventPatternDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .eventPattern)
        eventPattern = eventPatternDecoded
        let stateDecoded = try containerValues.decodeIfPresent(CloudWatchEventsClientTypes.ArchiveState.self, forKey: .state)
        state = stateDecoded
        let stateReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stateReason)
        stateReason = stateReasonDecoded
        let retentionDaysDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .retentionDays)
        retentionDays = retentionDaysDecoded
        let sizeBytesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .sizeBytes) ?? 0
        sizeBytes = sizeBytesDecoded
        let eventCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .eventCount) ?? 0
        eventCount = eventCountDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
    }
}
