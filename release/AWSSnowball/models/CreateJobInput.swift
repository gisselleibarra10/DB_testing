// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct CreateJobInput: Swift.Equatable {
    /// The ID for the address that you want the Snow device shipped to.
    public var addressId: Swift.String?
    /// The ID of a cluster. If you're creating a job for a node in a cluster, you need to provide only this clusterId value. The other job attributes are inherited from the cluster.
    public var clusterId: Swift.String?
    /// Defines an optional description of this specific job, for example Important Photos 2016-08-11.
    public var description: Swift.String?
    /// Defines the device configuration for an Snowcone job. For more information, see "https://docs.aws.amazon.com/snowball/latest/snowcone-guide/snow-device-types.html" (Snow Family Devices and Capacity) in the Snowcone User Guide or "https://docs.aws.amazon.com/snowball/latest/developer-guide/snow-device-types.html" (Snow Family Devices and Capacity) in the Snowcone User Guide.
    public var deviceConfiguration: SnowballClientTypes.DeviceConfiguration?
    /// The forwarding address ID for a job. This field is not supported in most Regions.
    public var forwardingAddressId: Swift.String?
    /// Defines the type of job that you're creating.
    public var jobType: SnowballClientTypes.JobType?
    /// The KmsKeyARN that you want to associate with this job. KmsKeyARNs are created using the [CreateKey](https://docs.aws.amazon.com/kms/latest/APIReference/API_CreateKey.html) Key Management Service (KMS) API action.
    public var kmsKeyARN: Swift.String?
    /// The ID of the long-term pricing type for the device.
    public var longTermPricingId: Swift.String?
    /// Defines the Amazon Simple Notification Service (Amazon SNS) notification settings for this job.
    public var notification: SnowballClientTypes.Notification?
    /// Specifies the service or services on the Snow Family device that your transferred data will be exported from or imported into. Amazon Web Services Snow Family supports Amazon S3 and NFS (Network File System) and the Amazon Web Services Storage Gateway service Tape Gateway type.
    public var onDeviceServiceConfiguration: SnowballClientTypes.OnDeviceServiceConfiguration?
    /// Allows you to securely operate and manage Snowcone devices remotely from outside of your internal network. When set to INSTALLED_AUTOSTART, remote management will automatically be available when the device arrives at your location. Otherwise, you need to use the Snowball Client to manage the device.
    public var remoteManagement: SnowballClientTypes.RemoteManagement?
    /// Defines the Amazon S3 buckets associated with this job. With IMPORT jobs, you specify the bucket or buckets that your transferred data will be imported into. With EXPORT jobs, you specify the bucket or buckets that your transferred data will be exported from. Optionally, you can also specify a KeyRange value. If you choose to export a range, you define the length of the range by providing either an inclusive BeginMarker value, an inclusive EndMarker value, or both. Ranges are UTF-8 binary sorted.
    public var resources: SnowballClientTypes.JobResource?
    /// The RoleARN that you want to associate with this job. RoleArns are created using the [CreateRole](https://docs.aws.amazon.com/IAM/latest/APIReference/API_CreateRole.html) Identity and Access Management (IAM) API action.
    public var roleARN: Swift.String?
    /// The shipping speed for this job. This speed doesn't dictate how soon you'll get the Snow device, rather it represents how quickly the Snow device moves to its destination while in transit. Regional shipping speeds are as follows:
    ///
    /// * In Australia, you have access to express shipping. Typically, Snow devices shipped express are delivered in about a day.
    ///
    /// * In the European Union (EU), you have access to express shipping. Typically, Snow devices shipped express are delivered in about a day. In addition, most countries in the EU have access to standard shipping, which typically takes less than a week, one way.
    ///
    /// * In India, Snow devices are delivered in one to seven days.
    ///
    /// * In the US, you have access to one-day shipping and two-day shipping.
    public var shippingOption: SnowballClientTypes.ShippingOption?
    /// If your job is being created in one of the US regions, you have the option of specifying what size Snow device you'd like for this job. In all other regions, Snowballs come with 80 TB in storage capacity. For more information, see "https://docs.aws.amazon.com/snowball/latest/snowcone-guide/snow-device-types.html" (Snow Family Devices and Capacity) in the Snowcone User Guide or "https://docs.aws.amazon.com/snowball/latest/developer-guide/snow-device-types.html" (Snow Family Devices and Capacity) in the Snowcone User Guide.
    public var snowballCapacityPreference: SnowballClientTypes.SnowballCapacity?
    /// The type of Snow Family Devices to use for this job. For cluster jobs, Amazon Web Services Snow Family currently supports only the EDGE device type. The type of Amazon Web Services Snow device to use for this job. Currently, the only supported device type for cluster jobs is EDGE. For more information, see [Snowball Edge Device Options](https://docs.aws.amazon.com/snowball/latest/developer-guide/device-differences.html) in the Snowball Edge Developer Guide. For more information, see "https://docs.aws.amazon.com/snowball/latest/snowcone-guide/snow-device-types.html" (Snow Family Devices and Capacity) in the Snowcone User Guide or "https://docs.aws.amazon.com/snowball/latest/developer-guide/snow-device-types.html" (Snow Family Devices and Capacity) in the Snowcone User Guide.
    public var snowballType: SnowballClientTypes.SnowballType?
    /// The tax documents required in your Amazon Web Services Region.
    public var taxDocuments: SnowballClientTypes.TaxDocuments?

    public init (
        addressId: Swift.String? = nil,
        clusterId: Swift.String? = nil,
        description: Swift.String? = nil,
        deviceConfiguration: SnowballClientTypes.DeviceConfiguration? = nil,
        forwardingAddressId: Swift.String? = nil,
        jobType: SnowballClientTypes.JobType? = nil,
        kmsKeyARN: Swift.String? = nil,
        longTermPricingId: Swift.String? = nil,
        notification: SnowballClientTypes.Notification? = nil,
        onDeviceServiceConfiguration: SnowballClientTypes.OnDeviceServiceConfiguration? = nil,
        remoteManagement: SnowballClientTypes.RemoteManagement? = nil,
        resources: SnowballClientTypes.JobResource? = nil,
        roleARN: Swift.String? = nil,
        shippingOption: SnowballClientTypes.ShippingOption? = nil,
        snowballCapacityPreference: SnowballClientTypes.SnowballCapacity? = nil,
        snowballType: SnowballClientTypes.SnowballType? = nil,
        taxDocuments: SnowballClientTypes.TaxDocuments? = nil
    )
    {
        self.addressId = addressId
        self.clusterId = clusterId
        self.description = description
        self.deviceConfiguration = deviceConfiguration
        self.forwardingAddressId = forwardingAddressId
        self.jobType = jobType
        self.kmsKeyARN = kmsKeyARN
        self.longTermPricingId = longTermPricingId
        self.notification = notification
        self.onDeviceServiceConfiguration = onDeviceServiceConfiguration
        self.remoteManagement = remoteManagement
        self.resources = resources
        self.roleARN = roleARN
        self.shippingOption = shippingOption
        self.snowballCapacityPreference = snowballCapacityPreference
        self.snowballType = snowballType
        self.taxDocuments = taxDocuments
    }
}
