// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct UpdateClusterInputBody: Swift.Equatable {
    let clusterId: Swift.String?
    let roleARN: Swift.String?
    let description: Swift.String?
    let resources: SnowballClientTypes.JobResource?
    let onDeviceServiceConfiguration: SnowballClientTypes.OnDeviceServiceConfiguration?
    let addressId: Swift.String?
    let shippingOption: SnowballClientTypes.ShippingOption?
    let notification: SnowballClientTypes.Notification?
    let forwardingAddressId: Swift.String?
}

extension UpdateClusterInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case addressId = "AddressId"
        case clusterId = "ClusterId"
        case description = "Description"
        case forwardingAddressId = "ForwardingAddressId"
        case notification = "Notification"
        case onDeviceServiceConfiguration = "OnDeviceServiceConfiguration"
        case resources = "Resources"
        case roleARN = "RoleARN"
        case shippingOption = "ShippingOption"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clusterIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterId)
        clusterId = clusterIdDecoded
        let roleARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleARN)
        roleARN = roleARNDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let resourcesDecoded = try containerValues.decodeIfPresent(SnowballClientTypes.JobResource.self, forKey: .resources)
        resources = resourcesDecoded
        let onDeviceServiceConfigurationDecoded = try containerValues.decodeIfPresent(SnowballClientTypes.OnDeviceServiceConfiguration.self, forKey: .onDeviceServiceConfiguration)
        onDeviceServiceConfiguration = onDeviceServiceConfigurationDecoded
        let addressIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .addressId)
        addressId = addressIdDecoded
        let shippingOptionDecoded = try containerValues.decodeIfPresent(SnowballClientTypes.ShippingOption.self, forKey: .shippingOption)
        shippingOption = shippingOptionDecoded
        let notificationDecoded = try containerValues.decodeIfPresent(SnowballClientTypes.Notification.self, forKey: .notification)
        notification = notificationDecoded
        let forwardingAddressIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .forwardingAddressId)
        forwardingAddressId = forwardingAddressIdDecoded
    }
}
