// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListLongTermPricingOutputResponseBody: Swift.Equatable {
    let longTermPricingEntries: [SnowballClientTypes.LongTermPricingListEntry]?
    let nextToken: Swift.String?
}

extension ListLongTermPricingOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case longTermPricingEntries = "LongTermPricingEntries"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let longTermPricingEntriesContainer = try containerValues.decodeIfPresent([SnowballClientTypes.LongTermPricingListEntry?].self, forKey: .longTermPricingEntries)
        var longTermPricingEntriesDecoded0:[SnowballClientTypes.LongTermPricingListEntry]? = nil
        if let longTermPricingEntriesContainer = longTermPricingEntriesContainer {
            longTermPricingEntriesDecoded0 = [SnowballClientTypes.LongTermPricingListEntry]()
            for structure0 in longTermPricingEntriesContainer {
                if let structure0 = structure0 {
                    longTermPricingEntriesDecoded0?.append(structure0)
                }
            }
        }
        longTermPricingEntries = longTermPricingEntriesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
