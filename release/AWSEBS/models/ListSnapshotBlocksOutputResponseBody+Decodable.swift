// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListSnapshotBlocksOutputResponseBody: Swift.Equatable {
    let blocks: [EbsClientTypes.Block]?
    let expiryTime: ClientRuntime.Date?
    let volumeSize: Swift.Int?
    let blockSize: Swift.Int?
    let nextToken: Swift.String?
}

extension ListSnapshotBlocksOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case blockSize = "BlockSize"
        case blocks = "Blocks"
        case expiryTime = "ExpiryTime"
        case nextToken = "NextToken"
        case volumeSize = "VolumeSize"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let blocksContainer = try containerValues.decodeIfPresent([EbsClientTypes.Block?].self, forKey: .blocks)
        var blocksDecoded0:[EbsClientTypes.Block]? = nil
        if let blocksContainer = blocksContainer {
            blocksDecoded0 = [EbsClientTypes.Block]()
            for structure0 in blocksContainer {
                if let structure0 = structure0 {
                    blocksDecoded0?.append(structure0)
                }
            }
        }
        blocks = blocksDecoded0
        let expiryTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .expiryTime)
        expiryTime = expiryTimeDecoded
        let volumeSizeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .volumeSize)
        volumeSize = volumeSizeDecoded
        let blockSizeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .blockSize)
        blockSize = blockSizeDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
