// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct StartSnapshotInputBody: Swift.Equatable {
    let volumeSize: Swift.Int?
    let parentSnapshotId: Swift.String?
    let tags: [EbsClientTypes.Tag]?
    let description: Swift.String?
    let clientToken: Swift.String?
    let encrypted: Swift.Bool?
    let kmsKeyArn: Swift.String?
    let timeout: Swift.Int?
}

extension StartSnapshotInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientToken = "ClientToken"
        case description = "Description"
        case encrypted = "Encrypted"
        case kmsKeyArn = "KmsKeyArn"
        case parentSnapshotId = "ParentSnapshotId"
        case tags = "Tags"
        case timeout = "Timeout"
        case volumeSize = "VolumeSize"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let volumeSizeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .volumeSize)
        volumeSize = volumeSizeDecoded
        let parentSnapshotIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .parentSnapshotId)
        parentSnapshotId = parentSnapshotIdDecoded
        let tagsContainer = try containerValues.decodeIfPresent([EbsClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[EbsClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [EbsClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let clientTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientToken)
        clientToken = clientTokenDecoded
        let encryptedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .encrypted)
        encrypted = encryptedDecoded
        let kmsKeyArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kmsKeyArn)
        kmsKeyArn = kmsKeyArnDecoded
        let timeoutDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .timeout)
        timeout = timeoutDecoded
    }
}
