// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension EbsClientTypes {
    public enum ValidationExceptionReason: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case conflictingBlockUpdate
        case invalidBlock
        case invalidBlockToken
        case invalidContentEncoding
        case invalidCustomerKey
        case invalidDependencyRequest
        case invalidPageToken
        case invalidParameterValue
        case invalidSnapshotId
        case invalidTag
        case invalidVolumeSize
        case unrelatedSnapshots
        case sdkUnknown(Swift.String)

        public static var allCases: [ValidationExceptionReason] {
            return [
                .conflictingBlockUpdate,
                .invalidBlock,
                .invalidBlockToken,
                .invalidContentEncoding,
                .invalidCustomerKey,
                .invalidDependencyRequest,
                .invalidPageToken,
                .invalidParameterValue,
                .invalidSnapshotId,
                .invalidTag,
                .invalidVolumeSize,
                .unrelatedSnapshots,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .conflictingBlockUpdate: return "CONFLICTING_BLOCK_UPDATE"
            case .invalidBlock: return "INVALID_BLOCK"
            case .invalidBlockToken: return "INVALID_BLOCK_TOKEN"
            case .invalidContentEncoding: return "INVALID_CONTENT_ENCODING"
            case .invalidCustomerKey: return "INVALID_CUSTOMER_KEY"
            case .invalidDependencyRequest: return "INVALID_DEPENDENCY_REQUEST"
            case .invalidPageToken: return "INVALID_PAGE_TOKEN"
            case .invalidParameterValue: return "INVALID_PARAMETER_VALUE"
            case .invalidSnapshotId: return "INVALID_SNAPSHOT_ID"
            case .invalidTag: return "INVALID_TAG"
            case .invalidVolumeSize: return "INVALID_VOLUME_SIZE"
            case .unrelatedSnapshots: return "UNRELATED_SNAPSHOTS"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ValidationExceptionReason(rawValue: rawValue) ?? ValidationExceptionReason.sdkUnknown(rawValue)
        }
    }
}
