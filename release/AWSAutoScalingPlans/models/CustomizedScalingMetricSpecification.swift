// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension AutoScalingPlansClientTypes {
    /// Represents a CloudWatch metric of your choosing that can be used for dynamic scaling as part of a target tracking scaling policy. To create your customized scaling metric specification:
    ///
    /// * Add values for each required parameter from CloudWatch. You can use an existing metric, or a new metric that you create. To use your own metric, you must first publish the metric to CloudWatch. For more information, see [Publish Custom Metrics](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/publishingMetrics.html) in the Amazon CloudWatch User Guide.
    ///
    /// * Choose a metric that changes proportionally with capacity. The value of the metric should increase or decrease in inverse proportion to the number of capacity units. That is, the value of the metric should decrease when capacity increases.
    ///
    ///
    /// For information about terminology, available metrics, or how to publish new metrics, see [Amazon CloudWatch Concepts](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/cloudwatch_concepts.html) in the Amazon CloudWatch User Guide.
    public struct CustomizedScalingMetricSpecification: Swift.Equatable {
        /// The dimensions of the metric. Conditional: If you published your metric with dimensions, you must specify the same dimensions in your customized scaling metric specification.
        public var dimensions: [AutoScalingPlansClientTypes.MetricDimension]?
        /// The name of the metric.
        /// This member is required.
        public var metricName: Swift.String?
        /// The namespace of the metric.
        /// This member is required.
        public var namespace: Swift.String?
        /// The statistic of the metric.
        /// This member is required.
        public var statistic: AutoScalingPlansClientTypes.MetricStatistic?
        /// The unit of the metric.
        public var unit: Swift.String?

        public init (
            dimensions: [AutoScalingPlansClientTypes.MetricDimension]? = nil,
            metricName: Swift.String? = nil,
            namespace: Swift.String? = nil,
            statistic: AutoScalingPlansClientTypes.MetricStatistic? = nil,
            unit: Swift.String? = nil
        )
        {
            self.dimensions = dimensions
            self.metricName = metricName
            self.namespace = namespace
            self.statistic = statistic
            self.unit = unit
        }
    }

}
