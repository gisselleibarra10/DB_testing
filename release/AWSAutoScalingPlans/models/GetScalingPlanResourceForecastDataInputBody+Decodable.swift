// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetScalingPlanResourceForecastDataInputBody: Swift.Equatable {
    let scalingPlanName: Swift.String?
    let scalingPlanVersion: Swift.Int?
    let serviceNamespace: AutoScalingPlansClientTypes.ServiceNamespace?
    let resourceId: Swift.String?
    let scalableDimension: AutoScalingPlansClientTypes.ScalableDimension?
    let forecastDataType: AutoScalingPlansClientTypes.ForecastDataType?
    let startTime: ClientRuntime.Date?
    let endTime: ClientRuntime.Date?
}

extension GetScalingPlanResourceForecastDataInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case endTime = "EndTime"
        case forecastDataType = "ForecastDataType"
        case resourceId = "ResourceId"
        case scalableDimension = "ScalableDimension"
        case scalingPlanName = "ScalingPlanName"
        case scalingPlanVersion = "ScalingPlanVersion"
        case serviceNamespace = "ServiceNamespace"
        case startTime = "StartTime"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let scalingPlanNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .scalingPlanName)
        scalingPlanName = scalingPlanNameDecoded
        let scalingPlanVersionDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .scalingPlanVersion)
        scalingPlanVersion = scalingPlanVersionDecoded
        let serviceNamespaceDecoded = try containerValues.decodeIfPresent(AutoScalingPlansClientTypes.ServiceNamespace.self, forKey: .serviceNamespace)
        serviceNamespace = serviceNamespaceDecoded
        let resourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceId)
        resourceId = resourceIdDecoded
        let scalableDimensionDecoded = try containerValues.decodeIfPresent(AutoScalingPlansClientTypes.ScalableDimension.self, forKey: .scalableDimension)
        scalableDimension = scalableDimensionDecoded
        let forecastDataTypeDecoded = try containerValues.decodeIfPresent(AutoScalingPlansClientTypes.ForecastDataType.self, forKey: .forecastDataType)
        forecastDataType = forecastDataTypeDecoded
        let startTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .startTime)
        startTime = startTimeDecoded
        let endTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .endTime)
        endTime = endTimeDecoded
    }
}
