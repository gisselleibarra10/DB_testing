// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeScalingPlansInputBody: Swift.Equatable {
    let scalingPlanNames: [Swift.String]?
    let scalingPlanVersion: Swift.Int?
    let applicationSources: [AutoScalingPlansClientTypes.ApplicationSource]?
    let maxResults: Swift.Int?
    let nextToken: Swift.String?
}

extension DescribeScalingPlansInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applicationSources = "ApplicationSources"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case scalingPlanNames = "ScalingPlanNames"
        case scalingPlanVersion = "ScalingPlanVersion"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let scalingPlanNamesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .scalingPlanNames)
        var scalingPlanNamesDecoded0:[Swift.String]? = nil
        if let scalingPlanNamesContainer = scalingPlanNamesContainer {
            scalingPlanNamesDecoded0 = [Swift.String]()
            for string0 in scalingPlanNamesContainer {
                if let string0 = string0 {
                    scalingPlanNamesDecoded0?.append(string0)
                }
            }
        }
        scalingPlanNames = scalingPlanNamesDecoded0
        let scalingPlanVersionDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .scalingPlanVersion)
        scalingPlanVersion = scalingPlanVersionDecoded
        let applicationSourcesContainer = try containerValues.decodeIfPresent([AutoScalingPlansClientTypes.ApplicationSource?].self, forKey: .applicationSources)
        var applicationSourcesDecoded0:[AutoScalingPlansClientTypes.ApplicationSource]? = nil
        if let applicationSourcesContainer = applicationSourcesContainer {
            applicationSourcesDecoded0 = [AutoScalingPlansClientTypes.ApplicationSource]()
            for structure0 in applicationSourcesContainer {
                if let structure0 = structure0 {
                    applicationSourcesDecoded0?.append(structure0)
                }
            }
        }
        applicationSources = applicationSourcesDecoded0
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
