// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct GetObjectInputGETQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetObjectInputGETQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetObjectInput>,
                  next: H) async throws -> ClientRuntime.OperationOutput<GetObjectOutputResponse>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context
    {
        if let bucket = input.operationInput.bucket {
            let queryItem = ClientRuntime.URLQueryItem(name: "Bucket".urlPercentEncoding(), value: Swift.String(bucket).urlPercentEncoding())
            input.builder.withQueryItem(queryItem)
        }
        if let ifMatch = input.operationInput.ifMatch {
            let queryItem = ClientRuntime.URLQueryItem(name: "IfMatch".urlPercentEncoding(), value: Swift.String(ifMatch).urlPercentEncoding())
            input.builder.withQueryItem(queryItem)
        }
        if let ifNoneMatch = input.operationInput.ifNoneMatch {
            let queryItem = ClientRuntime.URLQueryItem(name: "IfNoneMatch".urlPercentEncoding(), value: Swift.String(ifNoneMatch).urlPercentEncoding())
            input.builder.withQueryItem(queryItem)
        }
        if let key = input.operationInput.key {
            let queryItem = ClientRuntime.URLQueryItem(name: "Key".urlPercentEncoding(), value: Swift.String(key).urlPercentEncoding())
            input.builder.withQueryItem(queryItem)
        }
        if let range = input.operationInput.range {
            let queryItem = ClientRuntime.URLQueryItem(name: "Range".urlPercentEncoding(), value: Swift.String(range).urlPercentEncoding())
            input.builder.withQueryItem(queryItem)
        }
        if let responseCacheControl = input.operationInput.responseCacheControl {
            let queryItem = ClientRuntime.URLQueryItem(name: "ResponseCacheControl".urlPercentEncoding(), value: Swift.String(responseCacheControl).urlPercentEncoding())
            input.builder.withQueryItem(queryItem)
        }
        if let responseContentDisposition = input.operationInput.responseContentDisposition {
            let queryItem = ClientRuntime.URLQueryItem(name: "ResponseContentDisposition".urlPercentEncoding(), value: Swift.String(responseContentDisposition).urlPercentEncoding())
            input.builder.withQueryItem(queryItem)
        }
        if let responseContentEncoding = input.operationInput.responseContentEncoding {
            let queryItem = ClientRuntime.URLQueryItem(name: "ResponseContentEncoding".urlPercentEncoding(), value: Swift.String(responseContentEncoding).urlPercentEncoding())
            input.builder.withQueryItem(queryItem)
        }
        if let responseContentLanguage = input.operationInput.responseContentLanguage {
            let queryItem = ClientRuntime.URLQueryItem(name: "ResponseContentLanguage".urlPercentEncoding(), value: Swift.String(responseContentLanguage).urlPercentEncoding())
            input.builder.withQueryItem(queryItem)
        }
        if let responseContentType = input.operationInput.responseContentType {
            let queryItem = ClientRuntime.URLQueryItem(name: "ResponseContentType".urlPercentEncoding(), value: Swift.String(responseContentType).urlPercentEncoding())
            input.builder.withQueryItem(queryItem)
        }
        if let versionId = input.operationInput.versionId {
            let queryItem = ClientRuntime.URLQueryItem(name: "VersionId".urlPercentEncoding(), value: Swift.String(versionId).urlPercentEncoding())
            input.builder.withQueryItem(queryItem)
        }
        if let sseCustomerAlgorithm = input.operationInput.sseCustomerAlgorithm {
            let queryItem = ClientRuntime.URLQueryItem(name: "SSECustomerAlgorithm".urlPercentEncoding(), value: Swift.String(sseCustomerAlgorithm).urlPercentEncoding())
            input.builder.withQueryItem(queryItem)
        }
        if let sseCustomerKey = input.operationInput.sseCustomerKey {
            let queryItem = ClientRuntime.URLQueryItem(name: "SSECustomerKey".urlPercentEncoding(), value: Swift.String(sseCustomerKey).urlPercentEncoding())
            input.builder.withQueryItem(queryItem)
        }
        if let sseCustomerKeyMD5 = input.operationInput.sseCustomerKeyMD5 {
            let queryItem = ClientRuntime.URLQueryItem(name: "SSECustomerKeyMD5".urlPercentEncoding(), value: Swift.String(sseCustomerKeyMD5).urlPercentEncoding())
            input.builder.withQueryItem(queryItem)
        }
        if let requestPayer = input.operationInput.requestPayer {
            let queryItem = ClientRuntime.URLQueryItem(name: "RequestPayer".urlPercentEncoding(), value: Swift.String(requestPayer.rawValue).urlPercentEncoding())
            input.builder.withQueryItem(queryItem)
        }
        if let expectedBucketOwner = input.operationInput.expectedBucketOwner {
            let queryItem = ClientRuntime.URLQueryItem(name: "ExpectedBucketOwner".urlPercentEncoding(), value: Swift.String(expectedBucketOwner).urlPercentEncoding())
            input.builder.withQueryItem(queryItem)
        }
        if let checksumMode = input.operationInput.checksumMode {
            let queryItem = ClientRuntime.URLQueryItem(name: "ChecksumMode".urlPercentEncoding(), value: Swift.String(checksumMode.rawValue).urlPercentEncoding())
            input.builder.withQueryItem(queryItem)
        }
        return try await next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetObjectInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetObjectOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
}
