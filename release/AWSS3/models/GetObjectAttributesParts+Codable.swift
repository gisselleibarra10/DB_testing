// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension S3ClientTypes.GetObjectAttributesParts: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case isTruncated = "IsTruncated"
        case maxParts = "MaxParts"
        case nextPartNumberMarker = "NextPartNumberMarker"
        case partNumberMarker = "PartNumberMarker"
        case parts = "Part"
        case totalPartsCount = "PartsCount"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://s3.amazonaws.com/doc/2006-03-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if isTruncated != false {
            try container.encode(isTruncated, forKey: ClientRuntime.Key("IsTruncated"))
        }
        if maxParts != 0 {
            try container.encode(maxParts, forKey: ClientRuntime.Key("MaxParts"))
        }
        if let nextPartNumberMarker = nextPartNumberMarker {
            try container.encode(nextPartNumberMarker, forKey: ClientRuntime.Key("NextPartNumberMarker"))
        }
        if let partNumberMarker = partNumberMarker {
            try container.encode(partNumberMarker, forKey: ClientRuntime.Key("PartNumberMarker"))
        }
        if let parts = parts {
            if parts.isEmpty {
                var partsContainer = container.nestedUnkeyedContainer(forKey: ClientRuntime.Key("Part"))
                try partsContainer.encodeNil()
            } else {
                for objectpart0 in parts {
                    var partsContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Part"))
                    try partsContainer0.encode(objectpart0, forKey: ClientRuntime.Key(""))
                }
            }
        }
        if totalPartsCount != 0 {
            try container.encode(totalPartsCount, forKey: ClientRuntime.Key("PartsCount"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let totalPartsCountDecoded = try containerValues.decode(Swift.Int.self, forKey: .totalPartsCount)
        totalPartsCount = totalPartsCountDecoded
        let partNumberMarkerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .partNumberMarker)
        partNumberMarker = partNumberMarkerDecoded
        let nextPartNumberMarkerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextPartNumberMarker)
        nextPartNumberMarker = nextPartNumberMarkerDecoded
        let maxPartsDecoded = try containerValues.decode(Swift.Int.self, forKey: .maxParts)
        maxParts = maxPartsDecoded
        let isTruncatedDecoded = try containerValues.decode(Swift.Bool.self, forKey: .isTruncated)
        isTruncated = isTruncatedDecoded
        if containerValues.contains(.parts) {
            let partsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CodingKeys.self, forKey: .parts)
            if partsWrappedContainer != nil {
                let partsContainer = try containerValues.decodeIfPresent([S3ClientTypes.ObjectPart].self, forKey: .parts)
                var partsBuffer:[S3ClientTypes.ObjectPart]? = nil
                if let partsContainer = partsContainer {
                    partsBuffer = [S3ClientTypes.ObjectPart]()
                    for structureContainer0 in partsContainer {
                        partsBuffer?.append(structureContainer0)
                    }
                }
                parts = partsBuffer
            } else {
                parts = []
            }
        } else {
            parts = nil
        }
    }
}
