// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DeleteObjectsOutputResponseBody: Swift.Equatable {
    let deleted: [S3ClientTypes.DeletedObject]?
    let errors: [S3ClientTypes.Error]?
}

extension DeleteObjectsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deleted = "Deleted"
        case errors = "Error"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.deleted) {
            let deletedWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CodingKeys.self, forKey: .deleted)
            if deletedWrappedContainer != nil {
                let deletedContainer = try containerValues.decodeIfPresent([S3ClientTypes.DeletedObject].self, forKey: .deleted)
                var deletedBuffer:[S3ClientTypes.DeletedObject]? = nil
                if let deletedContainer = deletedContainer {
                    deletedBuffer = [S3ClientTypes.DeletedObject]()
                    for structureContainer0 in deletedContainer {
                        deletedBuffer?.append(structureContainer0)
                    }
                }
                deleted = deletedBuffer
            } else {
                deleted = []
            }
        } else {
            deleted = nil
        }
        if containerValues.contains(.errors) {
            let errorsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CodingKeys.self, forKey: .errors)
            if errorsWrappedContainer != nil {
                let errorsContainer = try containerValues.decodeIfPresent([S3ClientTypes.Error].self, forKey: .errors)
                var errorsBuffer:[S3ClientTypes.Error]? = nil
                if let errorsContainer = errorsContainer {
                    errorsBuffer = [S3ClientTypes.Error]()
                    for structureContainer0 in errorsContainer {
                        errorsBuffer?.append(structureContainer0)
                    }
                }
                errors = errorsBuffer
            } else {
                errors = []
            }
        } else {
            errors = nil
        }
    }
}
