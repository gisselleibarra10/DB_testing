// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension S3ClientTypes.Object: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case checksumAlgorithm = "ChecksumAlgorithm"
        case eTag = "ETag"
        case key = "Key"
        case lastModified = "LastModified"
        case owner = "Owner"
        case size = "Size"
        case storageClass = "StorageClass"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://s3.amazonaws.com/doc/2006-03-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let checksumAlgorithm = checksumAlgorithm {
            if checksumAlgorithm.isEmpty {
                var checksumAlgorithmContainer = container.nestedUnkeyedContainer(forKey: ClientRuntime.Key("ChecksumAlgorithm"))
                try checksumAlgorithmContainer.encodeNil()
            } else {
                for checksumalgorithm0 in checksumAlgorithm {
                    var checksumAlgorithmContainer0 = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("checksumAlgorithm"))
                    try checksumAlgorithmContainer0.encode(checksumalgorithm0, forKey: ClientRuntime.Key(""))
                }
            }
        }
        if let eTag = eTag {
            try container.encode(eTag, forKey: ClientRuntime.Key("ETag"))
        }
        if let key = key {
            try container.encode(key, forKey: ClientRuntime.Key("Key"))
        }
        if let lastModified = lastModified {
            try container.encode(ClientRuntime.TimestampWrapper(lastModified, format: .dateTime), forKey: ClientRuntime.Key("LastModified"))
        }
        if let owner = owner {
            try container.encode(owner, forKey: ClientRuntime.Key("Owner"))
        }
        if size != 0 {
            try container.encode(size, forKey: ClientRuntime.Key("Size"))
        }
        if let storageClass = storageClass {
            try container.encode(storageClass, forKey: ClientRuntime.Key("StorageClass"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .key)
        key = keyDecoded
        let lastModifiedDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastModified)
        var lastModifiedBuffer:ClientRuntime.Date? = nil
        if let lastModifiedDecoded = lastModifiedDecoded {
            lastModifiedBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(lastModifiedDecoded, format: .dateTime)
        }
        lastModified = lastModifiedBuffer
        let eTagDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .eTag)
        eTag = eTagDecoded
        if containerValues.contains(.checksumAlgorithm) {
            let checksumAlgorithmWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CodingKeys.self, forKey: .checksumAlgorithm)
            if checksumAlgorithmWrappedContainer != nil {
                let checksumAlgorithmContainer = try containerValues.decodeIfPresent([S3ClientTypes.ChecksumAlgorithm].self, forKey: .checksumAlgorithm)
                var checksumAlgorithmBuffer:[S3ClientTypes.ChecksumAlgorithm]? = nil
                if let checksumAlgorithmContainer = checksumAlgorithmContainer {
                    checksumAlgorithmBuffer = [S3ClientTypes.ChecksumAlgorithm]()
                    for stringContainer0 in checksumAlgorithmContainer {
                        checksumAlgorithmBuffer?.append(stringContainer0)
                    }
                }
                checksumAlgorithm = checksumAlgorithmBuffer
            } else {
                checksumAlgorithm = []
            }
        } else {
            checksumAlgorithm = nil
        }
        let sizeDecoded = try containerValues.decode(Swift.Int.self, forKey: .size)
        size = sizeDecoded
        let storageClassDecoded = try containerValues.decodeIfPresent(S3ClientTypes.ObjectStorageClass.self, forKey: .storageClass)
        storageClass = storageClassDecoded
        let ownerDecoded = try containerValues.decodeIfPresent(S3ClientTypes.Owner.self, forKey: .owner)
        owner = ownerDecoded
    }
}
