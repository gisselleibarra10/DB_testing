// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CreateMultipartUploadInput: ClientRuntime.HeaderProvider {
    public var headers: ClientRuntime.Headers {
        var items = ClientRuntime.Headers()
        if let acl = acl {
            items.add(Header(name: "x-amz-acl", value: Swift.String(acl.rawValue)))
        }
        if bucketKeyEnabled != false {
            items.add(Header(name: "x-amz-server-side-encryption-bucket-key-enabled", value: Swift.String(bucketKeyEnabled)))
        }
        if let cacheControl = cacheControl {
            items.add(Header(name: "Cache-Control", value: Swift.String(cacheControl)))
        }
        if let checksumAlgorithm = checksumAlgorithm {
            items.add(Header(name: "x-amz-checksum-algorithm", value: Swift.String(checksumAlgorithm.rawValue)))
        }
        if let contentDisposition = contentDisposition {
            items.add(Header(name: "Content-Disposition", value: Swift.String(contentDisposition)))
        }
        if let contentEncoding = contentEncoding {
            items.add(Header(name: "Content-Encoding", value: Swift.String(contentEncoding)))
        }
        if let contentLanguage = contentLanguage {
            items.add(Header(name: "Content-Language", value: Swift.String(contentLanguage)))
        }
        if let contentType = contentType {
            items.add(Header(name: "Content-Type", value: Swift.String(contentType)))
        }
        if let expectedBucketOwner = expectedBucketOwner {
            items.add(Header(name: "x-amz-expected-bucket-owner", value: Swift.String(expectedBucketOwner)))
        }
        if let expires = expires {
            items.add(Header(name: "Expires", value: Swift.String(TimestampFormatter(format: .httpDate).string(from: expires))))
        }
        if let grantFullControl = grantFullControl {
            items.add(Header(name: "x-amz-grant-full-control", value: Swift.String(grantFullControl)))
        }
        if let grantRead = grantRead {
            items.add(Header(name: "x-amz-grant-read", value: Swift.String(grantRead)))
        }
        if let grantReadACP = grantReadACP {
            items.add(Header(name: "x-amz-grant-read-acp", value: Swift.String(grantReadACP)))
        }
        if let grantWriteACP = grantWriteACP {
            items.add(Header(name: "x-amz-grant-write-acp", value: Swift.String(grantWriteACP)))
        }
        if let objectLockLegalHoldStatus = objectLockLegalHoldStatus {
            items.add(Header(name: "x-amz-object-lock-legal-hold", value: Swift.String(objectLockLegalHoldStatus.rawValue)))
        }
        if let objectLockMode = objectLockMode {
            items.add(Header(name: "x-amz-object-lock-mode", value: Swift.String(objectLockMode.rawValue)))
        }
        if let objectLockRetainUntilDate = objectLockRetainUntilDate {
            items.add(Header(name: "x-amz-object-lock-retain-until-date", value: Swift.String(TimestampFormatter(format: .dateTime).string(from: objectLockRetainUntilDate))))
        }
        if let requestPayer = requestPayer {
            items.add(Header(name: "x-amz-request-payer", value: Swift.String(requestPayer.rawValue)))
        }
        if let sseCustomerAlgorithm = sseCustomerAlgorithm {
            items.add(Header(name: "x-amz-server-side-encryption-customer-algorithm", value: Swift.String(sseCustomerAlgorithm)))
        }
        if let sseCustomerKey = sseCustomerKey {
            items.add(Header(name: "x-amz-server-side-encryption-customer-key", value: Swift.String(sseCustomerKey)))
        }
        if let sseCustomerKeyMD5 = sseCustomerKeyMD5 {
            items.add(Header(name: "x-amz-server-side-encryption-customer-key-MD5", value: Swift.String(sseCustomerKeyMD5)))
        }
        if let ssekmsEncryptionContext = ssekmsEncryptionContext {
            items.add(Header(name: "x-amz-server-side-encryption-context", value: Swift.String(ssekmsEncryptionContext)))
        }
        if let ssekmsKeyId = ssekmsKeyId {
            items.add(Header(name: "x-amz-server-side-encryption-aws-kms-key-id", value: Swift.String(ssekmsKeyId)))
        }
        if let serverSideEncryption = serverSideEncryption {
            items.add(Header(name: "x-amz-server-side-encryption", value: Swift.String(serverSideEncryption.rawValue)))
        }
        if let storageClass = storageClass {
            items.add(Header(name: "x-amz-storage-class", value: Swift.String(storageClass.rawValue)))
        }
        if let tagging = tagging {
            items.add(Header(name: "x-amz-tagging", value: Swift.String(tagging)))
        }
        if let websiteRedirectLocation = websiteRedirectLocation {
            items.add(Header(name: "x-amz-website-redirect-location", value: Swift.String(websiteRedirectLocation)))
        }
        if let metadata = metadata {
            for (prefixHeaderMapKey, prefixHeaderMapValue) in metadata {
                items.add(Header(name: "x-amz-meta-\(prefixHeaderMapKey)", value: Swift.String(prefixHeaderMapValue)))
            }
        }
        return items
    }
}
