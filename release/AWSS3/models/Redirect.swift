// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension S3ClientTypes {
    /// Specifies how requests are redirected. In the event of an error, you can specify a different error code to return.
    public struct Redirect: Swift.Equatable {
        /// The host name to use in the redirect request.
        public var hostName: Swift.String?
        /// The HTTP redirect code to use on the response. Not required if one of the siblings is present.
        public var httpRedirectCode: Swift.String?
        /// Protocol to use when redirecting requests. The default is the protocol that is used in the original request.
        public var `protocol`: S3ClientTypes.ModelProtocol?
        /// The object key prefix to use in the redirect request. For example, to redirect requests for all pages with prefix docs/ (objects in the docs/ folder) to documents/, you can set a condition block with KeyPrefixEquals set to docs/ and in the Redirect set ReplaceKeyPrefixWith to /documents. Not required if one of the siblings is present. Can be present only if ReplaceKeyWith is not provided. Replacement must be made for object keys containing special characters (such as carriage returns) when using XML requests. For more information, see [ XML related object key constraints](https://docs.aws.amazon.com/AmazonS3/latest/userguide/object-keys.html#object-key-xml-related-constraints).
        public var replaceKeyPrefixWith: Swift.String?
        /// The specific object key to use in the redirect request. For example, redirect request to error.html. Not required if one of the siblings is present. Can be present only if ReplaceKeyPrefixWith is not provided. Replacement must be made for object keys containing special characters (such as carriage returns) when using XML requests. For more information, see [ XML related object key constraints](https://docs.aws.amazon.com/AmazonS3/latest/userguide/object-keys.html#object-key-xml-related-constraints).
        public var replaceKeyWith: Swift.String?

        public init (
            hostName: Swift.String? = nil,
            httpRedirectCode: Swift.String? = nil,
            `protocol`: S3ClientTypes.ModelProtocol? = nil,
            replaceKeyPrefixWith: Swift.String? = nil,
            replaceKeyWith: Swift.String? = nil
        )
        {
            self.hostName = hostName
            self.httpRedirectCode = httpRedirectCode
            self.`protocol` = `protocol`
            self.replaceKeyPrefixWith = replaceKeyPrefixWith
            self.replaceKeyWith = replaceKeyWith
        }
    }

}
