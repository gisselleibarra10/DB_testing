// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct ListPartsOutputResponse: Swift.Equatable {
    /// If the bucket has a lifecycle rule configured with an action to abort incomplete multipart uploads and the prefix in the lifecycle rule matches the object name in the request, then the response includes this header indicating when the initiated multipart upload will become eligible for abort operation. For more information, see [Aborting Incomplete Multipart Uploads Using a Bucket Lifecycle Policy](https://docs.aws.amazon.com/AmazonS3/latest/dev/mpuoverview.html#mpu-abort-incomplete-mpu-lifecycle-config). The response will also include the x-amz-abort-rule-id header that will provide the ID of the lifecycle configuration rule that defines this action.
    public var abortDate: ClientRuntime.Date?
    /// This header is returned along with the x-amz-abort-date header. It identifies applicable lifecycle configuration rule that defines the action to abort incomplete multipart uploads.
    public var abortRuleId: Swift.String?
    /// The name of the bucket to which the multipart upload was initiated. Does not return the access point ARN or access point alias if used.
    public var bucket: Swift.String?
    /// The algorithm that was used to create a checksum of the object.
    public var checksumAlgorithm: S3ClientTypes.ChecksumAlgorithm?
    /// Container element that identifies who initiated the multipart upload. If the initiator is an Amazon Web Services account, this element provides the same information as the Owner element. If the initiator is an IAM User, this element provides the user ARN and display name.
    public var initiator: S3ClientTypes.Initiator?
    /// Indicates whether the returned list of parts is truncated. A true value indicates that the list was truncated. A list can be truncated if the number of parts exceeds the limit returned in the MaxParts element.
    public var isTruncated: Swift.Bool
    /// Object key for which the multipart upload was initiated.
    public var key: Swift.String?
    /// Maximum number of parts that were allowed in the response.
    public var maxParts: Swift.Int
    /// When a list is truncated, this element specifies the last part in the list, as well as the value to use for the part-number-marker request parameter in a subsequent request.
    public var nextPartNumberMarker: Swift.String?
    /// Container element that identifies the object owner, after the object is created. If multipart upload is initiated by an IAM user, this element provides the parent account ID and display name.
    public var owner: S3ClientTypes.Owner?
    /// When a list is truncated, this element specifies the last part in the list, as well as the value to use for the part-number-marker request parameter in a subsequent request.
    public var partNumberMarker: Swift.String?
    /// Container for elements related to a particular part. A response can contain zero or more Part elements.
    public var parts: [S3ClientTypes.Part]?
    /// If present, indicates that the requester was successfully charged for the request.
    public var requestCharged: S3ClientTypes.RequestCharged?
    /// Class of storage (STANDARD or REDUCED_REDUNDANCY) used to store the uploaded object.
    public var storageClass: S3ClientTypes.StorageClass?
    /// Upload ID identifying the multipart upload whose parts are being listed.
    public var uploadId: Swift.String?

    public init (
        abortDate: ClientRuntime.Date? = nil,
        abortRuleId: Swift.String? = nil,
        bucket: Swift.String? = nil,
        checksumAlgorithm: S3ClientTypes.ChecksumAlgorithm? = nil,
        initiator: S3ClientTypes.Initiator? = nil,
        isTruncated: Swift.Bool = false,
        key: Swift.String? = nil,
        maxParts: Swift.Int = 0,
        nextPartNumberMarker: Swift.String? = nil,
        owner: S3ClientTypes.Owner? = nil,
        partNumberMarker: Swift.String? = nil,
        parts: [S3ClientTypes.Part]? = nil,
        requestCharged: S3ClientTypes.RequestCharged? = nil,
        storageClass: S3ClientTypes.StorageClass? = nil,
        uploadId: Swift.String? = nil
    )
    {
        self.abortDate = abortDate
        self.abortRuleId = abortRuleId
        self.bucket = bucket
        self.checksumAlgorithm = checksumAlgorithm
        self.initiator = initiator
        self.isTruncated = isTruncated
        self.key = key
        self.maxParts = maxParts
        self.nextPartNumberMarker = nextPartNumberMarker
        self.owner = owner
        self.partNumberMarker = partNumberMarker
        self.parts = parts
        self.requestCharged = requestCharged
        self.storageClass = storageClass
        self.uploadId = uploadId
    }
}
