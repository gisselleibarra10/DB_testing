// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension S3ClientTypes.LoggingEnabled: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case targetBucket = "TargetBucket"
        case targetGrants = "TargetGrants"
        case targetPrefix = "TargetPrefix"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://s3.amazonaws.com/doc/2006-03-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let targetBucket = targetBucket {
            try container.encode(targetBucket, forKey: ClientRuntime.Key("TargetBucket"))
        }
        if let targetGrants = targetGrants {
            var targetGrantsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TargetGrants"))
            for targetgrant0 in targetGrants {
                try targetGrantsContainer.encode(targetgrant0, forKey: ClientRuntime.Key("Grant"))
            }
        }
        if let targetPrefix = targetPrefix {
            try container.encode(targetPrefix, forKey: ClientRuntime.Key("TargetPrefix"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let targetBucketDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .targetBucket)
        targetBucket = targetBucketDecoded
        if containerValues.contains(.targetGrants) {
            struct KeyVal0{struct Grant{}}
            let targetGrantsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.Grant>.CodingKeys.self, forKey: .targetGrants)
            if let targetGrantsWrappedContainer = targetGrantsWrappedContainer {
                let targetGrantsContainer = try targetGrantsWrappedContainer.decodeIfPresent([S3ClientTypes.TargetGrant].self, forKey: .member)
                var targetGrantsBuffer:[S3ClientTypes.TargetGrant]? = nil
                if let targetGrantsContainer = targetGrantsContainer {
                    targetGrantsBuffer = [S3ClientTypes.TargetGrant]()
                    for structureContainer0 in targetGrantsContainer {
                        targetGrantsBuffer?.append(structureContainer0)
                    }
                }
                targetGrants = targetGrantsBuffer
            } else {
                targetGrants = []
            }
        } else {
            targetGrants = nil
        }
        let targetPrefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .targetPrefix)
        targetPrefix = targetPrefixDecoded
    }
}
