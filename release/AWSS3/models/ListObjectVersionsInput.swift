// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct ListObjectVersionsInput: Swift.Equatable {
    /// The bucket name that contains the objects.
    /// This member is required.
    public var bucket: Swift.String?
    /// A delimiter is a character that you specify to group keys. All keys that contain the same string between the prefix and the first occurrence of the delimiter are grouped under a single result element in CommonPrefixes. These groups are counted as one result against the max-keys limitation. These keys are not returned elsewhere in the response.
    public var delimiter: Swift.String?
    /// Requests Amazon S3 to encode the object keys in the response and specifies the encoding method to use. An object key may contain any Unicode character; however, XML 1.0 parser cannot parse some characters, such as characters with an ASCII value from 0 to 10. For characters that are not supported in XML 1.0, you can add this parameter to request that Amazon S3 encode the keys in the response.
    public var encodingType: S3ClientTypes.EncodingType?
    /// The account ID of the expected bucket owner. If the bucket is owned by a different account, the request fails with the HTTP status code 403 Forbidden (access denied).
    public var expectedBucketOwner: Swift.String?
    /// Specifies the key to start with when listing objects in a bucket.
    public var keyMarker: Swift.String?
    /// Sets the maximum number of keys returned in the response. By default the action returns up to 1,000 key names. The response might contain fewer keys but will never contain more. If additional keys satisfy the search criteria, but were not returned because max-keys was exceeded, the response contains true. To return the additional keys, see key-marker and version-id-marker.
    public var maxKeys: Swift.Int
    /// Use this parameter to select only those keys that begin with the specified prefix. You can use prefixes to separate a bucket into different groupings of keys. (You can think of using prefix to make groups in the same way you'd use a folder in a file system.) You can use prefix with delimiter to roll up numerous objects into a single result under CommonPrefixes.
    public var `prefix`: Swift.String?
    /// Specifies the object version you want to start listing from.
    public var versionIdMarker: Swift.String?

    public init (
        bucket: Swift.String? = nil,
        delimiter: Swift.String? = nil,
        encodingType: S3ClientTypes.EncodingType? = nil,
        expectedBucketOwner: Swift.String? = nil,
        keyMarker: Swift.String? = nil,
        maxKeys: Swift.Int = 0,
        `prefix`: Swift.String? = nil,
        versionIdMarker: Swift.String? = nil
    )
    {
        self.bucket = bucket
        self.delimiter = delimiter
        self.encodingType = encodingType
        self.expectedBucketOwner = expectedBucketOwner
        self.keyMarker = keyMarker
        self.maxKeys = maxKeys
        self.`prefix` = `prefix`
        self.versionIdMarker = versionIdMarker
    }
}
