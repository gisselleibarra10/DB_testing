// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension S3ClientTypes {
    /// A lifecycle rule for individual objects in an Amazon S3 bucket.
    public struct LifecycleRule: Swift.Equatable {
        /// Specifies the days since the initiation of an incomplete multipart upload that Amazon S3 will wait before permanently removing all parts of the upload. For more information, see [ Aborting Incomplete Multipart Uploads Using a Bucket Lifecycle Policy](https://docs.aws.amazon.com/AmazonS3/latest/dev/mpuoverview.html#mpu-abort-incomplete-mpu-lifecycle-config) in the Amazon S3 User Guide.
        public var abortIncompleteMultipartUpload: S3ClientTypes.AbortIncompleteMultipartUpload?
        /// Specifies the expiration for the lifecycle of the object in the form of date, days and, whether the object has a delete marker.
        public var expiration: S3ClientTypes.LifecycleExpiration?
        /// The Filter is used to identify objects that a Lifecycle Rule applies to. A Filter must have exactly one of Prefix, Tag, or And specified. Filter is required if the LifecycleRule does not contain a Prefix element.
        public var filter: S3ClientTypes.LifecycleRuleFilter?
        /// Unique identifier for the rule. The value cannot be longer than 255 characters.
        public var id: Swift.String?
        /// Specifies when noncurrent object versions expire. Upon expiration, Amazon S3 permanently deletes the noncurrent object versions. You set this lifecycle configuration action on a bucket that has versioning enabled (or suspended) to request that Amazon S3 delete noncurrent object versions at a specific period in the object's lifetime.
        public var noncurrentVersionExpiration: S3ClientTypes.NoncurrentVersionExpiration?
        /// Specifies the transition rule for the lifecycle rule that describes when noncurrent objects transition to a specific storage class. If your bucket is versioning-enabled (or versioning is suspended), you can set this action to request that Amazon S3 transition noncurrent object versions to a specific storage class at a set period in the object's lifetime.
        public var noncurrentVersionTransitions: [S3ClientTypes.NoncurrentVersionTransition]?
        /// Prefix identifying one or more objects to which the rule applies. This is no longer used; use Filter instead. Replacement must be made for object keys containing special characters (such as carriage returns) when using XML requests. For more information, see [ XML related object key constraints](https://docs.aws.amazon.com/AmazonS3/latest/userguide/object-keys.html#object-key-xml-related-constraints).
        @available(*, deprecated)
        public var `prefix`: Swift.String?
        /// If 'Enabled', the rule is currently being applied. If 'Disabled', the rule is not currently being applied.
        /// This member is required.
        public var status: S3ClientTypes.ExpirationStatus?
        /// Specifies when an Amazon S3 object transitions to a specified storage class.
        public var transitions: [S3ClientTypes.Transition]?

        public init (
            abortIncompleteMultipartUpload: S3ClientTypes.AbortIncompleteMultipartUpload? = nil,
            expiration: S3ClientTypes.LifecycleExpiration? = nil,
            filter: S3ClientTypes.LifecycleRuleFilter? = nil,
            id: Swift.String? = nil,
            noncurrentVersionExpiration: S3ClientTypes.NoncurrentVersionExpiration? = nil,
            noncurrentVersionTransitions: [S3ClientTypes.NoncurrentVersionTransition]? = nil,
            `prefix`: Swift.String? = nil,
            status: S3ClientTypes.ExpirationStatus? = nil,
            transitions: [S3ClientTypes.Transition]? = nil
        )
        {
            self.abortIncompleteMultipartUpload = abortIncompleteMultipartUpload
            self.expiration = expiration
            self.filter = filter
            self.id = id
            self.noncurrentVersionExpiration = noncurrentVersionExpiration
            self.noncurrentVersionTransitions = noncurrentVersionTransitions
            self.`prefix` = `prefix`
            self.status = status
            self.transitions = transitions
        }
    }

}
