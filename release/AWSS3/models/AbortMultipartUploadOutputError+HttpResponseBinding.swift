// Code generated by smithy-swift-codegen. DO NOT EDIT!

import AWSClientRuntime
import ClientRuntime

extension AbortMultipartUploadOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let restXMLError = try AWSClientRuntime.RestXMLError.makeError(from: httpResponse
        try self.init(
            errorType: restXMLError.errorCode,
            httpResponse: httpResponse,
            decoder: decoder,
            message: restXMLError.message,
            requestID: restXMLError.requestId,
            requestID2: httpResponse.requestId2
        )
    }
}

extension AbortMultipartUploadOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil, requestID2: Swift.String? = nil) throws {
        switch errorType {
        case "NoSuchUpload" : self = .noSuchUpload(try NoSuchUpload(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID, requestID2: requestID2))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}
