// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListPartsOutputResponseBody: Swift.Equatable {
    let bucket: Swift.String?
    let key: Swift.String?
    let uploadId: Swift.String?
    let partNumberMarker: Swift.String?
    let nextPartNumberMarker: Swift.String?
    let maxParts: Swift.Int
    let isTruncated: Swift.Bool
    let parts: [S3ClientTypes.Part]?
    let initiator: S3ClientTypes.Initiator?
    let owner: S3ClientTypes.Owner?
    let storageClass: S3ClientTypes.StorageClass?
    let checksumAlgorithm: S3ClientTypes.ChecksumAlgorithm?
}

extension ListPartsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bucket = "Bucket"
        case checksumAlgorithm = "ChecksumAlgorithm"
        case initiator = "Initiator"
        case isTruncated = "IsTruncated"
        case key = "Key"
        case maxParts = "MaxParts"
        case nextPartNumberMarker = "NextPartNumberMarker"
        case owner = "Owner"
        case partNumberMarker = "PartNumberMarker"
        case parts = "Part"
        case storageClass = "StorageClass"
        case uploadId = "UploadId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let bucketDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .bucket)
        bucket = bucketDecoded
        let keyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .key)
        key = keyDecoded
        let uploadIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .uploadId)
        uploadId = uploadIdDecoded
        let partNumberMarkerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .partNumberMarker)
        partNumberMarker = partNumberMarkerDecoded
        let nextPartNumberMarkerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextPartNumberMarker)
        nextPartNumberMarker = nextPartNumberMarkerDecoded
        let maxPartsDecoded = try containerValues.decode(Swift.Int.self, forKey: .maxParts)
        maxParts = maxPartsDecoded
        let isTruncatedDecoded = try containerValues.decode(Swift.Bool.self, forKey: .isTruncated)
        isTruncated = isTruncatedDecoded
        if containerValues.contains(.parts) {
            let partsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CodingKeys.self, forKey: .parts)
            if partsWrappedContainer != nil {
                let partsContainer = try containerValues.decodeIfPresent([S3ClientTypes.Part].self, forKey: .parts)
                var partsBuffer:[S3ClientTypes.Part]? = nil
                if let partsContainer = partsContainer {
                    partsBuffer = [S3ClientTypes.Part]()
                    for structureContainer0 in partsContainer {
                        partsBuffer?.append(structureContainer0)
                    }
                }
                parts = partsBuffer
            } else {
                parts = []
            }
        } else {
            parts = nil
        }
        let initiatorDecoded = try containerValues.decodeIfPresent(S3ClientTypes.Initiator.self, forKey: .initiator)
        initiator = initiatorDecoded
        let ownerDecoded = try containerValues.decodeIfPresent(S3ClientTypes.Owner.self, forKey: .owner)
        owner = ownerDecoded
        let storageClassDecoded = try containerValues.decodeIfPresent(S3ClientTypes.StorageClass.self, forKey: .storageClass)
        storageClass = storageClassDecoded
        let checksumAlgorithmDecoded = try containerValues.decodeIfPresent(S3ClientTypes.ChecksumAlgorithm.self, forKey: .checksumAlgorithm)
        checksumAlgorithm = checksumAlgorithmDecoded
    }
}
