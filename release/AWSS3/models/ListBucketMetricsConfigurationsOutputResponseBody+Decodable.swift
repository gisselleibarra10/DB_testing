// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListBucketMetricsConfigurationsOutputResponseBody: Swift.Equatable {
    let isTruncated: Swift.Bool
    let continuationToken: Swift.String?
    let nextContinuationToken: Swift.String?
    let metricsConfigurationList: [S3ClientTypes.MetricsConfiguration]?
}

extension ListBucketMetricsConfigurationsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case continuationToken = "ContinuationToken"
        case isTruncated = "IsTruncated"
        case metricsConfigurationList = "MetricsConfiguration"
        case nextContinuationToken = "NextContinuationToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let isTruncatedDecoded = try containerValues.decode(Swift.Bool.self, forKey: .isTruncated)
        isTruncated = isTruncatedDecoded
        let continuationTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .continuationToken)
        continuationToken = continuationTokenDecoded
        let nextContinuationTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextContinuationToken)
        nextContinuationToken = nextContinuationTokenDecoded
        if containerValues.contains(.metricsConfigurationList) {
            let metricsConfigurationListWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CodingKeys.self, forKey: .metricsConfigurationList)
            if metricsConfigurationListWrappedContainer != nil {
                let metricsConfigurationListContainer = try containerValues.decodeIfPresent([S3ClientTypes.MetricsConfiguration].self, forKey: .metricsConfigurationList)
                var metricsConfigurationListBuffer:[S3ClientTypes.MetricsConfiguration]? = nil
                if let metricsConfigurationListContainer = metricsConfigurationListContainer {
                    metricsConfigurationListBuffer = [S3ClientTypes.MetricsConfiguration]()
                    for structureContainer0 in metricsConfigurationListContainer {
                        metricsConfigurationListBuffer?.append(structureContainer0)
                    }
                }
                metricsConfigurationList = metricsConfigurationListBuffer
            } else {
                metricsConfigurationList = []
            }
        } else {
            metricsConfigurationList = nil
        }
    }
}
