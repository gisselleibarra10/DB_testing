// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct UpdateHealthCheckInputBody: Swift.Equatable {
    let healthCheckVersion: Swift.Int?
    let iPAddress: Swift.String?
    let port: Swift.Int?
    let resourcePath: Swift.String?
    let fullyQualifiedDomainName: Swift.String?
    let searchString: Swift.String?
    let failureThreshold: Swift.Int?
    let inverted: Swift.Bool?
    let disabled: Swift.Bool?
    let healthThreshold: Swift.Int?
    let childHealthChecks: [Swift.String]?
    let enableSNI: Swift.Bool?
    let regions: [Route53ClientTypes.HealthCheckRegion]?
    let alarmIdentifier: Route53ClientTypes.AlarmIdentifier?
    let insufficientDataHealthStatus: Route53ClientTypes.InsufficientDataHealthStatus?
    let resetElements: [Route53ClientTypes.ResettableElementName]?
}

extension UpdateHealthCheckInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case alarmIdentifier = "AlarmIdentifier"
        case childHealthChecks = "ChildHealthChecks"
        case disabled = "Disabled"
        case enableSNI = "EnableSNI"
        case failureThreshold = "FailureThreshold"
        case fullyQualifiedDomainName = "FullyQualifiedDomainName"
        case healthCheckVersion = "HealthCheckVersion"
        case healthThreshold = "HealthThreshold"
        case iPAddress = "IPAddress"
        case insufficientDataHealthStatus = "InsufficientDataHealthStatus"
        case inverted = "Inverted"
        case port = "Port"
        case regions = "Regions"
        case resetElements = "ResetElements"
        case resourcePath = "ResourcePath"
        case searchString = "SearchString"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let healthCheckVersionDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .healthCheckVersion)
        healthCheckVersion = healthCheckVersionDecoded
        let iPAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .iPAddress)
        iPAddress = iPAddressDecoded
        let portDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .port)
        port = portDecoded
        let resourcePathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourcePath)
        resourcePath = resourcePathDecoded
        let fullyQualifiedDomainNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fullyQualifiedDomainName)
        fullyQualifiedDomainName = fullyQualifiedDomainNameDecoded
        let searchStringDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .searchString)
        searchString = searchStringDecoded
        let failureThresholdDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .failureThreshold)
        failureThreshold = failureThresholdDecoded
        let invertedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .inverted)
        inverted = invertedDecoded
        let disabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .disabled)
        disabled = disabledDecoded
        let healthThresholdDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .healthThreshold)
        healthThreshold = healthThresholdDecoded
        if containerValues.contains(.childHealthChecks) {
            struct KeyVal0{struct ChildHealthCheck{}}
            let childHealthChecksWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.ChildHealthCheck>.CodingKeys.self, forKey: .childHealthChecks)
            if let childHealthChecksWrappedContainer = childHealthChecksWrappedContainer {
                let childHealthChecksContainer = try childHealthChecksWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var childHealthChecksBuffer:[Swift.String]? = nil
                if let childHealthChecksContainer = childHealthChecksContainer {
                    childHealthChecksBuffer = [Swift.String]()
                    for stringContainer0 in childHealthChecksContainer {
                        childHealthChecksBuffer?.append(stringContainer0)
                    }
                }
                childHealthChecks = childHealthChecksBuffer
            } else {
                childHealthChecks = []
            }
        } else {
            childHealthChecks = nil
        }
        let enableSNIDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enableSNI)
        enableSNI = enableSNIDecoded
        if containerValues.contains(.regions) {
            struct KeyVal0{struct Region{}}
            let regionsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.Region>.CodingKeys.self, forKey: .regions)
            if let regionsWrappedContainer = regionsWrappedContainer {
                let regionsContainer = try regionsWrappedContainer.decodeIfPresent([Route53ClientTypes.HealthCheckRegion].self, forKey: .member)
                var regionsBuffer:[Route53ClientTypes.HealthCheckRegion]? = nil
                if let regionsContainer = regionsContainer {
                    regionsBuffer = [Route53ClientTypes.HealthCheckRegion]()
                    for stringContainer0 in regionsContainer {
                        regionsBuffer?.append(stringContainer0)
                    }
                }
                regions = regionsBuffer
            } else {
                regions = []
            }
        } else {
            regions = nil
        }
        let alarmIdentifierDecoded = try containerValues.decodeIfPresent(Route53ClientTypes.AlarmIdentifier.self, forKey: .alarmIdentifier)
        alarmIdentifier = alarmIdentifierDecoded
        let insufficientDataHealthStatusDecoded = try containerValues.decodeIfPresent(Route53ClientTypes.InsufficientDataHealthStatus.self, forKey: .insufficientDataHealthStatus)
        insufficientDataHealthStatus = insufficientDataHealthStatusDecoded
        if containerValues.contains(.resetElements) {
            struct KeyVal0{struct ResettableElementName{}}
            let resetElementsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.ResettableElementName>.CodingKeys.self, forKey: .resetElements)
            if let resetElementsWrappedContainer = resetElementsWrappedContainer {
                let resetElementsContainer = try resetElementsWrappedContainer.decodeIfPresent([Route53ClientTypes.ResettableElementName].self, forKey: .member)
                var resetElementsBuffer:[Route53ClientTypes.ResettableElementName]? = nil
                if let resetElementsContainer = resetElementsContainer {
                    resetElementsBuffer = [Route53ClientTypes.ResettableElementName]()
                    for stringContainer0 in resetElementsContainer {
                        resetElementsBuffer?.append(stringContainer0)
                    }
                }
                resetElements = resetElementsBuffer
            } else {
                resetElements = []
            }
        } else {
            resetElements = nil
        }
    }
}
