// Code generated by smithy-swift-codegen. DO NOT EDIT!

import AWSClientRuntime
import ClientRuntime

extension EnableHostedZoneDNSSECOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension EnableHostedZoneDNSSECOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConcurrentModification" : self = .concurrentModification(try ConcurrentModification(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DNSSECNotFound" : self = .dNSSECNotFound(try DNSSECNotFound(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "HostedZonePartiallyDelegated" : self = .hostedZonePartiallyDelegated(try HostedZonePartiallyDelegated(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidArgument" : self = .invalidArgument(try InvalidArgument(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInput" : self = .invalidInput(try InvalidInput(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidKeySigningKeyStatus" : self = .invalidKeySigningKeyStatus(try InvalidKeySigningKeyStatus(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidKMSArn" : self = .invalidKMSArn(try InvalidKMSArn(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "KeySigningKeyWithActiveStatusNotFound" : self = .keySigningKeyWithActiveStatusNotFound(try KeySigningKeyWithActiveStatusNotFound(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchHostedZone" : self = .noSuchHostedZone(try NoSuchHostedZone(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}
