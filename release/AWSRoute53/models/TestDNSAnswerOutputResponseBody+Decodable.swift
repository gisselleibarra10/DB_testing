// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct TestDNSAnswerOutputResponseBody: Swift.Equatable {
    let nameserver: Swift.String?
    let recordName: Swift.String?
    let recordType: Route53ClientTypes.RRType?
    let recordData: [Swift.String]?
    let responseCode: Swift.String?
    let `protocol`: Swift.String?
}

extension TestDNSAnswerOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nameserver = "Nameserver"
        case `protocol` = "Protocol"
        case recordData = "RecordData"
        case recordName = "RecordName"
        case recordType = "RecordType"
        case responseCode = "ResponseCode"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameserverDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nameserver)
        nameserver = nameserverDecoded
        let recordNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .recordName)
        recordName = recordNameDecoded
        let recordTypeDecoded = try containerValues.decodeIfPresent(Route53ClientTypes.RRType.self, forKey: .recordType)
        recordType = recordTypeDecoded
        if containerValues.contains(.recordData) {
            struct KeyVal0{struct RecordDataEntry{}}
            let recordDataWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.RecordDataEntry>.CodingKeys.self, forKey: .recordData)
            if let recordDataWrappedContainer = recordDataWrappedContainer {
                let recordDataContainer = try recordDataWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var recordDataBuffer:[Swift.String]? = nil
                if let recordDataContainer = recordDataContainer {
                    recordDataBuffer = [Swift.String]()
                    for stringContainer0 in recordDataContainer {
                        recordDataBuffer?.append(stringContainer0)
                    }
                }
                recordData = recordDataBuffer
            } else {
                recordData = []
            }
        } else {
            recordData = nil
        }
        let responseCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .responseCode)
        responseCode = responseCodeDecoded
        let protocolDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .protocol)
        `protocol` = protocolDecoded
    }
}
