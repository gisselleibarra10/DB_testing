// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListTagsForResourcesInputBody: Swift.Equatable {
    let resourceIds: [Swift.String]?
}

extension ListTagsForResourcesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceIds = "ResourceIds"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.resourceIds) {
            struct KeyVal0{struct ResourceId{}}
            let resourceIdsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.ResourceId>.CodingKeys.self, forKey: .resourceIds)
            if let resourceIdsWrappedContainer = resourceIdsWrappedContainer {
                let resourceIdsContainer = try resourceIdsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var resourceIdsBuffer:[Swift.String]? = nil
                if let resourceIdsContainer = resourceIdsContainer {
                    resourceIdsBuffer = [Swift.String]()
                    for stringContainer0 in resourceIdsContainer {
                        resourceIdsBuffer?.append(stringContainer0)
                    }
                }
                resourceIds = resourceIdsBuffer
            } else {
                resourceIds = []
            }
        } else {
            resourceIds = nil
        }
    }
}
