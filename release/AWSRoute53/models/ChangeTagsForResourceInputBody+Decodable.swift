// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ChangeTagsForResourceInputBody: Swift.Equatable {
    let addTags: [Route53ClientTypes.Tag]?
    let removeTagKeys: [Swift.String]?
}

extension ChangeTagsForResourceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case addTags = "AddTags"
        case removeTagKeys = "RemoveTagKeys"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.addTags) {
            struct KeyVal0{struct Tag{}}
            let addTagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.Tag>.CodingKeys.self, forKey: .addTags)
            if let addTagsWrappedContainer = addTagsWrappedContainer {
                let addTagsContainer = try addTagsWrappedContainer.decodeIfPresent([Route53ClientTypes.Tag].self, forKey: .member)
                var addTagsBuffer:[Route53ClientTypes.Tag]? = nil
                if let addTagsContainer = addTagsContainer {
                    addTagsBuffer = [Route53ClientTypes.Tag]()
                    for structureContainer0 in addTagsContainer {
                        addTagsBuffer?.append(structureContainer0)
                    }
                }
                addTags = addTagsBuffer
            } else {
                addTags = []
            }
        } else {
            addTags = nil
        }
        if containerValues.contains(.removeTagKeys) {
            struct KeyVal0{struct Key{}}
            let removeTagKeysWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.Key>.CodingKeys.self, forKey: .removeTagKeys)
            if let removeTagKeysWrappedContainer = removeTagKeysWrappedContainer {
                let removeTagKeysContainer = try removeTagKeysWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var removeTagKeysBuffer:[Swift.String]? = nil
                if let removeTagKeysContainer = removeTagKeysContainer {
                    removeTagKeysBuffer = [Swift.String]()
                    for stringContainer0 in removeTagKeysContainer {
                        removeTagKeysBuffer?.append(stringContainer0)
                    }
                }
                removeTagKeys = removeTagKeysBuffer
            } else {
                removeTagKeys = []
            }
        } else {
            removeTagKeys = nil
        }
    }
}
