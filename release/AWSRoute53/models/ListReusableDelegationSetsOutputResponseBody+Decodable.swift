// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListReusableDelegationSetsOutputResponseBody: Swift.Equatable {
    let delegationSets: [Route53ClientTypes.DelegationSet]?
    let marker: Swift.String?
    let isTruncated: Swift.Bool
    let nextMarker: Swift.String?
    let maxItems: Swift.Int?
}

extension ListReusableDelegationSetsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case delegationSets = "DelegationSets"
        case isTruncated = "IsTruncated"
        case marker = "Marker"
        case maxItems = "MaxItems"
        case nextMarker = "NextMarker"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.delegationSets) {
            struct KeyVal0{struct DelegationSet{}}
            let delegationSetsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.DelegationSet>.CodingKeys.self, forKey: .delegationSets)
            if let delegationSetsWrappedContainer = delegationSetsWrappedContainer {
                let delegationSetsContainer = try delegationSetsWrappedContainer.decodeIfPresent([Route53ClientTypes.DelegationSet].self, forKey: .member)
                var delegationSetsBuffer:[Route53ClientTypes.DelegationSet]? = nil
                if let delegationSetsContainer = delegationSetsContainer {
                    delegationSetsBuffer = [Route53ClientTypes.DelegationSet]()
                    for structureContainer0 in delegationSetsContainer {
                        delegationSetsBuffer?.append(structureContainer0)
                    }
                }
                delegationSets = delegationSetsBuffer
            } else {
                delegationSets = []
            }
        } else {
            delegationSets = nil
        }
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
        let isTruncatedDecoded = try containerValues.decode(Swift.Bool.self, forKey: .isTruncated)
        isTruncated = isTruncatedDecoded
        let nextMarkerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextMarker)
        nextMarker = nextMarkerDecoded
        let maxItemsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxItems)
        maxItems = maxItemsDecoded
    }
}
