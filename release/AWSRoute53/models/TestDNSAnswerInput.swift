// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// Gets the value that Amazon Route 53 returns in response to a DNS request for a specified record name and type. You can optionally specify the IP address of a DNS resolver, an EDNS0 client subnet IP address, and a subnet mask.
public struct TestDNSAnswerInput: Swift.Equatable {
    /// If the resolver that you specified for resolverip supports EDNS0, specify the IPv4 or IPv6 address of a client in the applicable location, for example, 192.0.2.44 or 2001:db8:85a3::8a2e:370:7334.
    public var eDNS0ClientSubnetIP: Swift.String?
    /// If you specify an IP address for edns0clientsubnetip, you can optionally specify the number of bits of the IP address that you want the checking tool to include in the DNS query. For example, if you specify 192.0.2.44 for edns0clientsubnetip and 24 for edns0clientsubnetmask, the checking tool will simulate a request from 192.0.2.0/24. The default value is 24 bits for IPv4 addresses and 64 bits for IPv6 addresses. The range of valid values depends on whether edns0clientsubnetip is an IPv4 or an IPv6 address:
    ///
    /// * IPv4: Specify a value between 0 and 32
    ///
    /// * IPv6: Specify a value between 0 and 128
    public var eDNS0ClientSubnetMask: Swift.String?
    /// The ID of the hosted zone that you want Amazon Route 53 to simulate a query for.
    /// This member is required.
    public var hostedZoneId: Swift.String?
    /// The name of the resource record set that you want Amazon Route 53 to simulate a query for.
    /// This member is required.
    public var recordName: Swift.String?
    /// The type of the resource record set.
    /// This member is required.
    public var recordType: Route53ClientTypes.RRType?
    /// If you want to simulate a request from a specific DNS resolver, specify the IP address for that resolver. If you omit this value, TestDnsAnswer uses the IP address of a DNS resolver in the Amazon Web Services US East (N. Virginia) Region (us-east-1).
    public var resolverIP: Swift.String?

    public init (
        eDNS0ClientSubnetIP: Swift.String? = nil,
        eDNS0ClientSubnetMask: Swift.String? = nil,
        hostedZoneId: Swift.String? = nil,
        recordName: Swift.String? = nil,
        recordType: Route53ClientTypes.RRType? = nil,
        resolverIP: Swift.String? = nil
    )
    {
        self.eDNS0ClientSubnetIP = eDNS0ClientSubnetIP
        self.eDNS0ClientSubnetMask = eDNS0ClientSubnetMask
        self.hostedZoneId = hostedZoneId
        self.recordName = recordName
        self.recordType = recordType
        self.resolverIP = resolverIP
    }
}
