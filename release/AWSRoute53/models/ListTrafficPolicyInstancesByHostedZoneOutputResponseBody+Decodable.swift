// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListTrafficPolicyInstancesByHostedZoneOutputResponseBody: Swift.Equatable {
    let trafficPolicyInstances: [Route53ClientTypes.TrafficPolicyInstance]?
    let trafficPolicyInstanceNameMarker: Swift.String?
    let trafficPolicyInstanceTypeMarker: Route53ClientTypes.RRType?
    let isTruncated: Swift.Bool
    let maxItems: Swift.Int?
}

extension ListTrafficPolicyInstancesByHostedZoneOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case isTruncated = "IsTruncated"
        case maxItems = "MaxItems"
        case trafficPolicyInstanceNameMarker = "TrafficPolicyInstanceNameMarker"
        case trafficPolicyInstanceTypeMarker = "TrafficPolicyInstanceTypeMarker"
        case trafficPolicyInstances = "TrafficPolicyInstances"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.trafficPolicyInstances) {
            struct KeyVal0{struct TrafficPolicyInstance{}}
            let trafficPolicyInstancesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.TrafficPolicyInstance>.CodingKeys.self, forKey: .trafficPolicyInstances)
            if let trafficPolicyInstancesWrappedContainer = trafficPolicyInstancesWrappedContainer {
                let trafficPolicyInstancesContainer = try trafficPolicyInstancesWrappedContainer.decodeIfPresent([Route53ClientTypes.TrafficPolicyInstance].self, forKey: .member)
                var trafficPolicyInstancesBuffer:[Route53ClientTypes.TrafficPolicyInstance]? = nil
                if let trafficPolicyInstancesContainer = trafficPolicyInstancesContainer {
                    trafficPolicyInstancesBuffer = [Route53ClientTypes.TrafficPolicyInstance]()
                    for structureContainer0 in trafficPolicyInstancesContainer {
                        trafficPolicyInstancesBuffer?.append(structureContainer0)
                    }
                }
                trafficPolicyInstances = trafficPolicyInstancesBuffer
            } else {
                trafficPolicyInstances = []
            }
        } else {
            trafficPolicyInstances = nil
        }
        let trafficPolicyInstanceNameMarkerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .trafficPolicyInstanceNameMarker)
        trafficPolicyInstanceNameMarker = trafficPolicyInstanceNameMarkerDecoded
        let trafficPolicyInstanceTypeMarkerDecoded = try containerValues.decodeIfPresent(Route53ClientTypes.RRType.self, forKey: .trafficPolicyInstanceTypeMarker)
        trafficPolicyInstanceTypeMarker = trafficPolicyInstanceTypeMarkerDecoded
        let isTruncatedDecoded = try containerValues.decode(Swift.Bool.self, forKey: .isTruncated)
        isTruncated = isTruncatedDecoded
        let maxItemsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxItems)
        maxItems = maxItemsDecoded
    }
}
