// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Route53ClientTypes.CidrCollectionChange: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case action = "Action"
        case cidrList = "CidrList"
        case locationName = "LocationName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("https://route53.amazonaws.com/doc/2013-04-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let action = action {
            try container.encode(action, forKey: ClientRuntime.Key("Action"))
        }
        if let cidrList = cidrList {
            var cidrListContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("CidrList"))
            for cidr0 in cidrList {
                try cidrListContainer.encode(cidr0, forKey: ClientRuntime.Key("Cidr"))
            }
        }
        if let locationName = locationName {
            try container.encode(locationName, forKey: ClientRuntime.Key("LocationName"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let locationNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .locationName)
        locationName = locationNameDecoded
        let actionDecoded = try containerValues.decodeIfPresent(Route53ClientTypes.CidrCollectionChangeAction.self, forKey: .action)
        action = actionDecoded
        if containerValues.contains(.cidrList) {
            struct KeyVal0{struct Cidr{}}
            let cidrListWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.Cidr>.CodingKeys.self, forKey: .cidrList)
            if let cidrListWrappedContainer = cidrListWrappedContainer {
                let cidrListContainer = try cidrListWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var cidrListBuffer:[Swift.String]? = nil
                if let cidrListContainer = cidrListContainer {
                    cidrListBuffer = [Swift.String]()
                    for stringContainer0 in cidrListContainer {
                        cidrListBuffer?.append(stringContainer0)
                    }
                }
                cidrList = cidrListBuffer
            } else {
                cidrList = []
            }
        } else {
            cidrList = nil
        }
    }
}
