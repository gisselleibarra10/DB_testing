// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListResourceRecordSetsOutputResponseBody: Swift.Equatable {
    let resourceRecordSets: [Route53ClientTypes.ResourceRecordSet]?
    let isTruncated: Swift.Bool
    let nextRecordName: Swift.String?
    let nextRecordType: Route53ClientTypes.RRType?
    let nextRecordIdentifier: Swift.String?
    let maxItems: Swift.Int?
}

extension ListResourceRecordSetsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case isTruncated = "IsTruncated"
        case maxItems = "MaxItems"
        case nextRecordIdentifier = "NextRecordIdentifier"
        case nextRecordName = "NextRecordName"
        case nextRecordType = "NextRecordType"
        case resourceRecordSets = "ResourceRecordSets"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.resourceRecordSets) {
            struct KeyVal0{struct ResourceRecordSet{}}
            let resourceRecordSetsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.ResourceRecordSet>.CodingKeys.self, forKey: .resourceRecordSets)
            if let resourceRecordSetsWrappedContainer = resourceRecordSetsWrappedContainer {
                let resourceRecordSetsContainer = try resourceRecordSetsWrappedContainer.decodeIfPresent([Route53ClientTypes.ResourceRecordSet].self, forKey: .member)
                var resourceRecordSetsBuffer:[Route53ClientTypes.ResourceRecordSet]? = nil
                if let resourceRecordSetsContainer = resourceRecordSetsContainer {
                    resourceRecordSetsBuffer = [Route53ClientTypes.ResourceRecordSet]()
                    for structureContainer0 in resourceRecordSetsContainer {
                        resourceRecordSetsBuffer?.append(structureContainer0)
                    }
                }
                resourceRecordSets = resourceRecordSetsBuffer
            } else {
                resourceRecordSets = []
            }
        } else {
            resourceRecordSets = nil
        }
        let isTruncatedDecoded = try containerValues.decode(Swift.Bool.self, forKey: .isTruncated)
        isTruncated = isTruncatedDecoded
        let nextRecordNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextRecordName)
        nextRecordName = nextRecordNameDecoded
        let nextRecordTypeDecoded = try containerValues.decodeIfPresent(Route53ClientTypes.RRType.self, forKey: .nextRecordType)
        nextRecordType = nextRecordTypeDecoded
        let nextRecordIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextRecordIdentifier)
        nextRecordIdentifier = nextRecordIdentifierDecoded
        let maxItemsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxItems)
        maxItems = maxItemsDecoded
    }
}
