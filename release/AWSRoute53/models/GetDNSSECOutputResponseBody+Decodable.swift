// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetDNSSECOutputResponseBody: Swift.Equatable {
    let status: Route53ClientTypes.DNSSECStatus?
    let keySigningKeys: [Route53ClientTypes.KeySigningKey]?
}

extension GetDNSSECOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case keySigningKeys = "KeySigningKeys"
        case status = "Status"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statusDecoded = try containerValues.decodeIfPresent(Route53ClientTypes.DNSSECStatus.self, forKey: .status)
        status = statusDecoded
        if containerValues.contains(.keySigningKeys) {
            struct KeyVal0{struct member{}}
            let keySigningKeysWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .keySigningKeys)
            if let keySigningKeysWrappedContainer = keySigningKeysWrappedContainer {
                let keySigningKeysContainer = try keySigningKeysWrappedContainer.decodeIfPresent([Route53ClientTypes.KeySigningKey].self, forKey: .member)
                var keySigningKeysBuffer:[Route53ClientTypes.KeySigningKey]? = nil
                if let keySigningKeysContainer = keySigningKeysContainer {
                    keySigningKeysBuffer = [Route53ClientTypes.KeySigningKey]()
                    for structureContainer0 in keySigningKeysContainer {
                        keySigningKeysBuffer?.append(structureContainer0)
                    }
                }
                keySigningKeys = keySigningKeysBuffer
            } else {
                keySigningKeys = []
            }
        } else {
            keySigningKeys = nil
        }
    }
}
