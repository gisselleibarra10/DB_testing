// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListCidrCollectionsOutputResponseBody: Swift.Equatable {
    let nextToken: Swift.String?
    let cidrCollections: [Route53ClientTypes.CollectionSummary]?
}

extension ListCidrCollectionsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cidrCollections = "CidrCollections"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        if containerValues.contains(.cidrCollections) {
            struct KeyVal0{struct member{}}
            let cidrCollectionsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .cidrCollections)
            if let cidrCollectionsWrappedContainer = cidrCollectionsWrappedContainer {
                let cidrCollectionsContainer = try cidrCollectionsWrappedContainer.decodeIfPresent([Route53ClientTypes.CollectionSummary].self, forKey: .member)
                var cidrCollectionsBuffer:[Route53ClientTypes.CollectionSummary]? = nil
                if let cidrCollectionsContainer = cidrCollectionsContainer {
                    cidrCollectionsBuffer = [Route53ClientTypes.CollectionSummary]()
                    for structureContainer0 in cidrCollectionsContainer {
                        cidrCollectionsBuffer?.append(structureContainer0)
                    }
                }
                cidrCollections = cidrCollectionsBuffer
            } else {
                cidrCollections = []
            }
        } else {
            cidrCollections = nil
        }
    }
}
