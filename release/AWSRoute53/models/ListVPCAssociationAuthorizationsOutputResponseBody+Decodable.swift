// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListVPCAssociationAuthorizationsOutputResponseBody: Swift.Equatable {
    let hostedZoneId: Swift.String?
    let nextToken: Swift.String?
    let vPCs: [Route53ClientTypes.VPC]?
}

extension ListVPCAssociationAuthorizationsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case hostedZoneId = "HostedZoneId"
        case nextToken = "NextToken"
        case vPCs = "VPCs"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let hostedZoneIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .hostedZoneId)
        hostedZoneId = hostedZoneIdDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        if containerValues.contains(.vPCs) {
            struct KeyVal0{struct VPC{}}
            let vPCsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.VPC>.CodingKeys.self, forKey: .vPCs)
            if let vPCsWrappedContainer = vPCsWrappedContainer {
                let vPCsContainer = try vPCsWrappedContainer.decodeIfPresent([Route53ClientTypes.VPC].self, forKey: .member)
                var vPCsBuffer:[Route53ClientTypes.VPC]? = nil
                if let vPCsContainer = vPCsContainer {
                    vPCsBuffer = [Route53ClientTypes.VPC]()
                    for structureContainer0 in vPCsContainer {
                        vPCsBuffer?.append(structureContainer0)
                    }
                }
                vPCs = vPCsBuffer
            } else {
                vPCs = []
            }
        } else {
            vPCs = nil
        }
    }
}
