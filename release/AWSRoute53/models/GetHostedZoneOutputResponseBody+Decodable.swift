// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetHostedZoneOutputResponseBody: Swift.Equatable {
    let hostedZone: Route53ClientTypes.HostedZone?
    let delegationSet: Route53ClientTypes.DelegationSet?
    let vPCs: [Route53ClientTypes.VPC]?
}

extension GetHostedZoneOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case delegationSet = "DelegationSet"
        case hostedZone = "HostedZone"
        case vPCs = "VPCs"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let hostedZoneDecoded = try containerValues.decodeIfPresent(Route53ClientTypes.HostedZone.self, forKey: .hostedZone)
        hostedZone = hostedZoneDecoded
        let delegationSetDecoded = try containerValues.decodeIfPresent(Route53ClientTypes.DelegationSet.self, forKey: .delegationSet)
        delegationSet = delegationSetDecoded
        if containerValues.contains(.vPCs) {
            struct KeyVal0{struct VPC{}}
            let vPCsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.VPC>.CodingKeys.self, forKey: .vPCs)
            if let vPCsWrappedContainer = vPCsWrappedContainer {
                let vPCsContainer = try vPCsWrappedContainer.decodeIfPresent([Route53ClientTypes.VPC].self, forKey: .member)
                var vPCsBuffer:[Route53ClientTypes.VPC]? = nil
                if let vPCsContainer = vPCsContainer {
                    vPCsBuffer = [Route53ClientTypes.VPC]()
                    for structureContainer0 in vPCsContainer {
                        vPCsBuffer?.append(structureContainer0)
                    }
                }
                vPCs = vPCsBuffer
            } else {
                vPCs = []
            }
        } else {
            vPCs = nil
        }
    }
}
