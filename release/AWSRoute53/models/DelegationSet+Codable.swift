// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Route53ClientTypes.DelegationSet: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case callerReference = "CallerReference"
        case id = "Id"
        case nameServers = "NameServers"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("https://route53.amazonaws.com/doc/2013-04-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let callerReference = callerReference {
            try container.encode(callerReference, forKey: ClientRuntime.Key("CallerReference"))
        }
        if let id = id {
            try container.encode(id, forKey: ClientRuntime.Key("Id"))
        }
        if let nameServers = nameServers {
            var nameServersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("NameServers"))
            for dnsname0 in nameServers {
                try nameServersContainer.encode(dnsname0, forKey: ClientRuntime.Key("NameServer"))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let callerReferenceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .callerReference)
        callerReference = callerReferenceDecoded
        if containerValues.contains(.nameServers) {
            struct KeyVal0{struct NameServer{}}
            let nameServersWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.NameServer>.CodingKeys.self, forKey: .nameServers)
            if let nameServersWrappedContainer = nameServersWrappedContainer {
                let nameServersContainer = try nameServersWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var nameServersBuffer:[Swift.String]? = nil
                if let nameServersContainer = nameServersContainer {
                    nameServersBuffer = [Swift.String]()
                    for stringContainer0 in nameServersContainer {
                        nameServersBuffer?.append(stringContainer0)
                    }
                }
                nameServers = nameServersBuffer
            } else {
                nameServers = []
            }
        } else {
            nameServers = nil
        }
    }
}
