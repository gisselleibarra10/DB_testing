// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ChangeCidrCollectionInputBody: Swift.Equatable {
    let collectionVersion: Swift.Int?
    let changes: [Route53ClientTypes.CidrCollectionChange]?
}

extension ChangeCidrCollectionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case changes = "Changes"
        case collectionVersion = "CollectionVersion"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let collectionVersionDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .collectionVersion)
        collectionVersion = collectionVersionDecoded
        if containerValues.contains(.changes) {
            struct KeyVal0{struct member{}}
            let changesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .changes)
            if let changesWrappedContainer = changesWrappedContainer {
                let changesContainer = try changesWrappedContainer.decodeIfPresent([Route53ClientTypes.CidrCollectionChange].self, forKey: .member)
                var changesBuffer:[Route53ClientTypes.CidrCollectionChange]? = nil
                if let changesContainer = changesContainer {
                    changesBuffer = [Route53ClientTypes.CidrCollectionChange]()
                    for structureContainer0 in changesContainer {
                        changesBuffer?.append(structureContainer0)
                    }
                }
                changes = changesBuffer
            } else {
                changes = []
            }
        } else {
            changes = nil
        }
    }
}
