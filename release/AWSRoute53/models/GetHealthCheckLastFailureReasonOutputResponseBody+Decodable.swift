// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetHealthCheckLastFailureReasonOutputResponseBody: Swift.Equatable {
    let healthCheckObservations: [Route53ClientTypes.HealthCheckObservation]?
}

extension GetHealthCheckLastFailureReasonOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case healthCheckObservations = "HealthCheckObservations"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.healthCheckObservations) {
            struct KeyVal0{struct HealthCheckObservation{}}
            let healthCheckObservationsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.HealthCheckObservation>.CodingKeys.self, forKey: .healthCheckObservations)
            if let healthCheckObservationsWrappedContainer = healthCheckObservationsWrappedContainer {
                let healthCheckObservationsContainer = try healthCheckObservationsWrappedContainer.decodeIfPresent([Route53ClientTypes.HealthCheckObservation].self, forKey: .member)
                var healthCheckObservationsBuffer:[Route53ClientTypes.HealthCheckObservation]? = nil
                if let healthCheckObservationsContainer = healthCheckObservationsContainer {
                    healthCheckObservationsBuffer = [Route53ClientTypes.HealthCheckObservation]()
                    for structureContainer0 in healthCheckObservationsContainer {
                        healthCheckObservationsBuffer?.append(structureContainer0)
                    }
                }
                healthCheckObservations = healthCheckObservationsBuffer
            } else {
                healthCheckObservations = []
            }
        } else {
            healthCheckObservations = nil
        }
    }
}
