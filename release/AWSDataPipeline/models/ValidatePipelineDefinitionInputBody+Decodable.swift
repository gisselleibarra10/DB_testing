// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ValidatePipelineDefinitionInputBody: Swift.Equatable {
    let pipelineId: Swift.String?
    let pipelineObjects: [DataPipelineClientTypes.PipelineObject]?
    let parameterObjects: [DataPipelineClientTypes.ParameterObject]?
    let parameterValues: [DataPipelineClientTypes.ParameterValue]?
}

extension ValidatePipelineDefinitionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case parameterObjects
        case parameterValues
        case pipelineId
        case pipelineObjects
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pipelineIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pipelineId)
        pipelineId = pipelineIdDecoded
        let pipelineObjectsContainer = try containerValues.decodeIfPresent([DataPipelineClientTypes.PipelineObject?].self, forKey: .pipelineObjects)
        var pipelineObjectsDecoded0:[DataPipelineClientTypes.PipelineObject]? = nil
        if let pipelineObjectsContainer = pipelineObjectsContainer {
            pipelineObjectsDecoded0 = [DataPipelineClientTypes.PipelineObject]()
            for structure0 in pipelineObjectsContainer {
                if let structure0 = structure0 {
                    pipelineObjectsDecoded0?.append(structure0)
                }
            }
        }
        pipelineObjects = pipelineObjectsDecoded0
        let parameterObjectsContainer = try containerValues.decodeIfPresent([DataPipelineClientTypes.ParameterObject?].self, forKey: .parameterObjects)
        var parameterObjectsDecoded0:[DataPipelineClientTypes.ParameterObject]? = nil
        if let parameterObjectsContainer = parameterObjectsContainer {
            parameterObjectsDecoded0 = [DataPipelineClientTypes.ParameterObject]()
            for structure0 in parameterObjectsContainer {
                if let structure0 = structure0 {
                    parameterObjectsDecoded0?.append(structure0)
                }
            }
        }
        parameterObjects = parameterObjectsDecoded0
        let parameterValuesContainer = try containerValues.decodeIfPresent([DataPipelineClientTypes.ParameterValue?].self, forKey: .parameterValues)
        var parameterValuesDecoded0:[DataPipelineClientTypes.ParameterValue]? = nil
        if let parameterValuesContainer = parameterValuesContainer {
            parameterValuesDecoded0 = [DataPipelineClientTypes.ParameterValue]()
            for structure0 in parameterValuesContainer {
                if let structure0 = structure0 {
                    parameterValuesDecoded0?.append(structure0)
                }
            }
        }
        parameterValues = parameterValuesDecoded0
    }
}
