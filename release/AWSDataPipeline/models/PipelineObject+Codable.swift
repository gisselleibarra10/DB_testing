// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension DataPipelineClientTypes.PipelineObject: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case fields
        case id
        case name
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let fields = fields {
            var fieldsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .fields)
            for fieldlist0 in fields {
                try fieldsContainer.encode(fieldlist0)
            }
        }
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let fieldsContainer = try containerValues.decodeIfPresent([DataPipelineClientTypes.Field?].self, forKey: .fields)
        var fieldsDecoded0:[DataPipelineClientTypes.Field]? = nil
        if let fieldsContainer = fieldsContainer {
            fieldsDecoded0 = [DataPipelineClientTypes.Field]()
            for structure0 in fieldsContainer {
                if let structure0 = structure0 {
                    fieldsDecoded0?.append(structure0)
                }
            }
        }
        fields = fieldsDecoded0
    }
}
