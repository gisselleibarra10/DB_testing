// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension EfsClientTypes.AccessPointDescription: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accessPointArn = "AccessPointArn"
        case accessPointId = "AccessPointId"
        case clientToken = "ClientToken"
        case fileSystemId = "FileSystemId"
        case lifeCycleState = "LifeCycleState"
        case name = "Name"
        case ownerId = "OwnerId"
        case posixUser = "PosixUser"
        case rootDirectory = "RootDirectory"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accessPointArn = self.accessPointArn {
            try encodeContainer.encode(accessPointArn, forKey: .accessPointArn)
        }
        if let accessPointId = self.accessPointId {
            try encodeContainer.encode(accessPointId, forKey: .accessPointId)
        }
        if let clientToken = self.clientToken {
            try encodeContainer.encode(clientToken, forKey: .clientToken)
        }
        if let fileSystemId = self.fileSystemId {
            try encodeContainer.encode(fileSystemId, forKey: .fileSystemId)
        }
        if let lifeCycleState = self.lifeCycleState {
            try encodeContainer.encode(lifeCycleState.rawValue, forKey: .lifeCycleState)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let ownerId = self.ownerId {
            try encodeContainer.encode(ownerId, forKey: .ownerId)
        }
        if let posixUser = self.posixUser {
            try encodeContainer.encode(posixUser, forKey: .posixUser)
        }
        if let rootDirectory = self.rootDirectory {
            try encodeContainer.encode(rootDirectory, forKey: .rootDirectory)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tags0 in tags {
                try tagsContainer.encode(tags0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clientTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientToken)
        clientToken = clientTokenDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let tagsContainer = try containerValues.decodeIfPresent([EfsClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[EfsClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [EfsClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let accessPointIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .accessPointId)
        accessPointId = accessPointIdDecoded
        let accessPointArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .accessPointArn)
        accessPointArn = accessPointArnDecoded
        let fileSystemIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fileSystemId)
        fileSystemId = fileSystemIdDecoded
        let posixUserDecoded = try containerValues.decodeIfPresent(EfsClientTypes.PosixUser.self, forKey: .posixUser)
        posixUser = posixUserDecoded
        let rootDirectoryDecoded = try containerValues.decodeIfPresent(EfsClientTypes.RootDirectory.self, forKey: .rootDirectory)
        rootDirectory = rootDirectoryDecoded
        let ownerIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ownerId)
        ownerId = ownerIdDecoded
        let lifeCycleStateDecoded = try containerValues.decodeIfPresent(EfsClientTypes.LifeCycleState.self, forKey: .lifeCycleState)
        lifeCycleState = lifeCycleStateDecoded
    }
}
