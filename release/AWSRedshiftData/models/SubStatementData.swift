// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension RedshiftDataClientTypes {
    /// Information about an SQL statement.
    public struct SubStatementData: Swift.Equatable {
        /// The date and time (UTC) the statement was created.
        public var createdAt: ClientRuntime.Date?
        /// The amount of time in nanoseconds that the statement ran.
        public var duration: Swift.Int
        /// The error message from the cluster if the SQL statement encountered an error while running.
        public var error: Swift.String?
        /// A value that indicates whether the statement has a result set. The result set can be empty. The value is true for an empty result set.
        public var hasResultSet: Swift.Bool?
        /// The identifier of the SQL statement. This value is a universally unique identifier (UUID) generated by Amazon Redshift Data API. A suffix indicates the number of the SQL statement. For example, d9b6c0c9-0747-4bf4-b142-e8883122f766:2 has a suffix of :2 that indicates the second SQL statement of a batch query.
        /// This member is required.
        public var id: Swift.String?
        /// The SQL statement text.
        public var queryString: Swift.String?
        /// The SQL statement identifier. This value is a universally unique identifier (UUID) generated by Amazon Redshift Data API.
        public var redshiftQueryId: Swift.Int
        /// Either the number of rows returned from the SQL statement or the number of rows affected. If result size is greater than zero, the result rows can be the number of rows affected by SQL statements such as INSERT, UPDATE, DELETE, COPY, and others. A -1 indicates the value is null.
        public var resultRows: Swift.Int
        /// The size in bytes of the returned results. A -1 indicates the value is null.
        public var resultSize: Swift.Int
        /// The status of the SQL statement. An example is the that the SQL statement finished.
        public var status: RedshiftDataClientTypes.StatementStatusString?
        /// The date and time (UTC) that the statement metadata was last updated.
        public var updatedAt: ClientRuntime.Date?

        public init (
            createdAt: ClientRuntime.Date? = nil,
            duration: Swift.Int = 0,
            error: Swift.String? = nil,
            hasResultSet: Swift.Bool? = nil,
            id: Swift.String? = nil,
            queryString: Swift.String? = nil,
            redshiftQueryId: Swift.Int = 0,
            resultRows: Swift.Int = 0,
            resultSize: Swift.Int = 0,
            status: RedshiftDataClientTypes.StatementStatusString? = nil,
            updatedAt: ClientRuntime.Date? = nil
        )
        {
            self.createdAt = createdAt
            self.duration = duration
            self.error = error
            self.hasResultSet = hasResultSet
            self.id = id
            self.queryString = queryString
            self.redshiftQueryId = redshiftQueryId
            self.resultRows = resultRows
            self.resultSize = resultSize
            self.status = status
            self.updatedAt = updatedAt
        }
    }

}
