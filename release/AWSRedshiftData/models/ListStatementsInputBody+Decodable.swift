// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListStatementsInputBody: Swift.Equatable {
    let nextToken: Swift.String?
    let maxResults: Swift.Int
    let statementName: Swift.String?
    let status: RedshiftDataClientTypes.StatusString?
    let roleLevel: Swift.Bool?
}

extension ListStatementsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case roleLevel = "RoleLevel"
        case statementName = "StatementName"
        case status = "Status"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults) ?? 0
        maxResults = maxResultsDecoded
        let statementNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .statementName)
        statementName = statementNameDecoded
        let statusDecoded = try containerValues.decodeIfPresent(RedshiftDataClientTypes.StatusString.self, forKey: .status)
        status = statusDecoded
        let roleLevelDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .roleLevel)
        roleLevel = roleLevelDecoded
    }
}
