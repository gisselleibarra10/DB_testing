// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension RedshiftDataClientTypes {
    /// The SQL statement to run.
    public struct StatementData: Swift.Equatable {
        /// The date and time (UTC) the statement was created.
        public var createdAt: ClientRuntime.Date?
        /// The SQL statement identifier. This value is a universally unique identifier (UUID) generated by Amazon Redshift Data API.
        /// This member is required.
        public var id: Swift.String?
        /// A value that indicates whether the statement is a batch query request.
        public var isBatchStatement: Swift.Bool?
        /// The parameters used in a SQL statement.
        public var queryParameters: [RedshiftDataClientTypes.SqlParameter]?
        /// The SQL statement.
        public var queryString: Swift.String?
        /// One or more SQL statements. Each query string in the array corresponds to one of the queries in a batch query request.
        public var queryStrings: [Swift.String]?
        /// The name or Amazon Resource Name (ARN) of the secret that enables access to the database.
        public var secretArn: Swift.String?
        /// The name of the SQL statement.
        public var statementName: Swift.String?
        /// The status of the SQL statement. An example is the that the SQL statement finished.
        public var status: RedshiftDataClientTypes.StatusString?
        /// The date and time (UTC) that the statement metadata was last updated.
        public var updatedAt: ClientRuntime.Date?

        public init (
            createdAt: ClientRuntime.Date? = nil,
            id: Swift.String? = nil,
            isBatchStatement: Swift.Bool? = nil,
            queryParameters: [RedshiftDataClientTypes.SqlParameter]? = nil,
            queryString: Swift.String? = nil,
            queryStrings: [Swift.String]? = nil,
            secretArn: Swift.String? = nil,
            statementName: Swift.String? = nil,
            status: RedshiftDataClientTypes.StatusString? = nil,
            updatedAt: ClientRuntime.Date? = nil
        )
        {
            self.createdAt = createdAt
            self.id = id
            self.isBatchStatement = isBatchStatement
            self.queryParameters = queryParameters
            self.queryString = queryString
            self.queryStrings = queryStrings
            self.secretArn = secretArn
            self.statementName = statementName
            self.status = status
            self.updatedAt = updatedAt
        }
    }

}
