// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct DescribeStatementOutputResponse: Swift.Equatable {
    /// The cluster identifier.
    public var clusterIdentifier: Swift.String?
    /// The date and time (UTC) when the SQL statement was submitted to run.
    public var createdAt: ClientRuntime.Date?
    /// The name of the database.
    public var database: Swift.String?
    /// The database user name.
    public var dbUser: Swift.String?
    /// The amount of time in nanoseconds that the statement ran.
    public var duration: Swift.Int
    /// The error message from the cluster if the SQL statement encountered an error while running.
    public var error: Swift.String?
    /// A value that indicates whether the statement has a result set. The result set can be empty. The value is true for an empty result set. The value is true if any substatement returns a result set.
    public var hasResultSet: Swift.Bool?
    /// The identifier of the SQL statement described. This value is a universally unique identifier (UUID) generated by Amazon Redshift Data API.
    /// This member is required.
    public var id: Swift.String?
    /// The parameters for the SQL statement.
    public var queryParameters: [RedshiftDataClientTypes.SqlParameter]?
    /// The SQL statement text.
    public var queryString: Swift.String?
    /// The process identifier from Amazon Redshift.
    public var redshiftPid: Swift.Int
    /// The identifier of the query generated by Amazon Redshift. These identifiers are also available in the query column of the STL_QUERY system view.
    public var redshiftQueryId: Swift.Int
    /// Either the number of rows returned from the SQL statement or the number of rows affected. If result size is greater than zero, the result rows can be the number of rows affected by SQL statements such as INSERT, UPDATE, DELETE, COPY, and others. A -1 indicates the value is null.
    public var resultRows: Swift.Int
    /// The size in bytes of the returned results. A -1 indicates the value is null.
    public var resultSize: Swift.Int
    /// The name or Amazon Resource Name (ARN) of the secret that enables access to the database.
    public var secretArn: Swift.String?
    /// The status of the SQL statement being described. Status values are defined as follows:
    ///
    /// * ABORTED - The query run was stopped by the user.
    ///
    /// * ALL - A status value that includes all query statuses. This value can be used to filter results.
    ///
    /// * FAILED - The query run failed.
    ///
    /// * FINISHED - The query has finished running.
    ///
    /// * PICKED - The query has been chosen to be run.
    ///
    /// * STARTED - The query run has started.
    ///
    /// * SUBMITTED - The query was submitted, but not yet processed.
    public var status: RedshiftDataClientTypes.StatusString?
    /// The SQL statements from a multiple statement run.
    public var subStatements: [RedshiftDataClientTypes.SubStatementData]?
    /// The date and time (UTC) that the metadata for the SQL statement was last updated. An example is the time the status last changed.
    public var updatedAt: ClientRuntime.Date?
    /// The serverless workgroup name.
    public var workgroupName: Swift.String?

    public init (
        clusterIdentifier: Swift.String? = nil,
        createdAt: ClientRuntime.Date? = nil,
        database: Swift.String? = nil,
        dbUser: Swift.String? = nil,
        duration: Swift.Int = 0,
        error: Swift.String? = nil,
        hasResultSet: Swift.Bool? = nil,
        id: Swift.String? = nil,
        queryParameters: [RedshiftDataClientTypes.SqlParameter]? = nil,
        queryString: Swift.String? = nil,
        redshiftPid: Swift.Int = 0,
        redshiftQueryId: Swift.Int = 0,
        resultRows: Swift.Int = 0,
        resultSize: Swift.Int = 0,
        secretArn: Swift.String? = nil,
        status: RedshiftDataClientTypes.StatusString? = nil,
        subStatements: [RedshiftDataClientTypes.SubStatementData]? = nil,
        updatedAt: ClientRuntime.Date? = nil,
        workgroupName: Swift.String? = nil
    )
    {
        self.clusterIdentifier = clusterIdentifier
        self.createdAt = createdAt
        self.database = database
        self.dbUser = dbUser
        self.duration = duration
        self.error = error
        self.hasResultSet = hasResultSet
        self.id = id
        self.queryParameters = queryParameters
        self.queryString = queryString
        self.redshiftPid = redshiftPid
        self.redshiftQueryId = redshiftQueryId
        self.resultRows = resultRows
        self.resultSize = resultSize
        self.secretArn = secretArn
        self.status = status
        self.subStatements = subStatements
        self.updatedAt = updatedAt
        self.workgroupName = workgroupName
    }
}
