// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension RedshiftDataClientTypes.SubStatementData: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createdAt = "CreatedAt"
        case duration = "Duration"
        case error = "Error"
        case hasResultSet = "HasResultSet"
        case id = "Id"
        case queryString = "QueryString"
        case redshiftQueryId = "RedshiftQueryId"
        case resultRows = "ResultRows"
        case resultSize = "ResultSize"
        case status = "Status"
        case updatedAt = "UpdatedAt"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let createdAt = self.createdAt {
            try encodeContainer.encode(createdAt.timeIntervalSince1970, forKey: .createdAt)
        }
        if duration != 0 {
            try encodeContainer.encode(duration, forKey: .duration)
        }
        if let error = self.error {
            try encodeContainer.encode(error, forKey: .error)
        }
        if let hasResultSet = self.hasResultSet {
            try encodeContainer.encode(hasResultSet, forKey: .hasResultSet)
        }
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let queryString = self.queryString {
            try encodeContainer.encode(queryString, forKey: .queryString)
        }
        if redshiftQueryId != 0 {
            try encodeContainer.encode(redshiftQueryId, forKey: .redshiftQueryId)
        }
        if resultRows != 0 {
            try encodeContainer.encode(resultRows, forKey: .resultRows)
        }
        if resultSize != 0 {
            try encodeContainer.encode(resultSize, forKey: .resultSize)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let updatedAt = self.updatedAt {
            try encodeContainer.encode(updatedAt.timeIntervalSince1970, forKey: .updatedAt)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let durationDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .duration) ?? 0
        duration = durationDecoded
        let errorDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .error)
        error = errorDecoded
        let statusDecoded = try containerValues.decodeIfPresent(RedshiftDataClientTypes.StatementStatusString.self, forKey: .status)
        status = statusDecoded
        let createdAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdAt)
        createdAt = createdAtDecoded
        let updatedAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .updatedAt)
        updatedAt = updatedAtDecoded
        let queryStringDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .queryString)
        queryString = queryStringDecoded
        let resultRowsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .resultRows) ?? 0
        resultRows = resultRowsDecoded
        let resultSizeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .resultSize) ?? 0
        resultSize = resultSizeDecoded
        let redshiftQueryIdDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .redshiftQueryId) ?? 0
        redshiftQueryId = redshiftQueryIdDecoded
        let hasResultSetDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .hasResultSet)
        hasResultSet = hasResultSetDecoded
    }
}
