// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct ExecuteStatementInput: Swift.Equatable {
    /// The cluster identifier. This parameter is required when connecting to a cluster and authenticating using either Secrets Manager or temporary credentials.
    public var clusterIdentifier: Swift.String?
    /// The name of the database. This parameter is required when authenticating using either Secrets Manager or temporary credentials.
    /// This member is required.
    public var database: Swift.String?
    /// The database user name. This parameter is required when connecting to a cluster and authenticating using temporary credentials.
    public var dbUser: Swift.String?
    /// The parameters for the SQL statement.
    public var parameters: [RedshiftDataClientTypes.SqlParameter]?
    /// The name or ARN of the secret that enables access to the database. This parameter is required when authenticating using Secrets Manager.
    public var secretArn: Swift.String?
    /// The SQL statement text to run.
    /// This member is required.
    public var sql: Swift.String?
    /// The name of the SQL statement. You can name the SQL statement when you create it to identify the query.
    public var statementName: Swift.String?
    /// A value that indicates whether to send an event to the Amazon EventBridge event bus after the SQL statement runs.
    public var withEvent: Swift.Bool?
    /// The serverless workgroup name. This parameter is required when connecting to a serverless workgroup and authenticating using either Secrets Manager or temporary credentials.
    public var workgroupName: Swift.String?

    public init (
        clusterIdentifier: Swift.String? = nil,
        database: Swift.String? = nil,
        dbUser: Swift.String? = nil,
        parameters: [RedshiftDataClientTypes.SqlParameter]? = nil,
        secretArn: Swift.String? = nil,
        sql: Swift.String? = nil,
        statementName: Swift.String? = nil,
        withEvent: Swift.Bool? = nil,
        workgroupName: Swift.String? = nil
    )
    {
        self.clusterIdentifier = clusterIdentifier
        self.database = database
        self.dbUser = dbUser
        self.parameters = parameters
        self.secretArn = secretArn
        self.sql = sql
        self.statementName = statementName
        self.withEvent = withEvent
        self.workgroupName = workgroupName
    }
}
