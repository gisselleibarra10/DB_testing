// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension RedshiftDataClientTypes.StatementData: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createdAt = "CreatedAt"
        case id = "Id"
        case isBatchStatement = "IsBatchStatement"
        case queryParameters = "QueryParameters"
        case queryString = "QueryString"
        case queryStrings = "QueryStrings"
        case secretArn = "SecretArn"
        case statementName = "StatementName"
        case status = "Status"
        case updatedAt = "UpdatedAt"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let createdAt = self.createdAt {
            try encodeContainer.encode(createdAt.timeIntervalSince1970, forKey: .createdAt)
        }
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let isBatchStatement = self.isBatchStatement {
            try encodeContainer.encode(isBatchStatement, forKey: .isBatchStatement)
        }
        if let queryParameters = queryParameters {
            var queryParametersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .queryParameters)
            for sqlparameterslist0 in queryParameters {
                try queryParametersContainer.encode(sqlparameterslist0)
            }
        }
        if let queryString = self.queryString {
            try encodeContainer.encode(queryString, forKey: .queryString)
        }
        if let queryStrings = queryStrings {
            var queryStringsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .queryStrings)
            for statementstringlist0 in queryStrings {
                try queryStringsContainer.encode(statementstringlist0)
            }
        }
        if let secretArn = self.secretArn {
            try encodeContainer.encode(secretArn, forKey: .secretArn)
        }
        if let statementName = self.statementName {
            try encodeContainer.encode(statementName, forKey: .statementName)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let updatedAt = self.updatedAt {
            try encodeContainer.encode(updatedAt.timeIntervalSince1970, forKey: .updatedAt)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let queryStringDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .queryString)
        queryString = queryStringDecoded
        let queryStringsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .queryStrings)
        var queryStringsDecoded0:[Swift.String]? = nil
        if let queryStringsContainer = queryStringsContainer {
            queryStringsDecoded0 = [Swift.String]()
            for string0 in queryStringsContainer {
                if let string0 = string0 {
                    queryStringsDecoded0?.append(string0)
                }
            }
        }
        queryStrings = queryStringsDecoded0
        let secretArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .secretArn)
        secretArn = secretArnDecoded
        let statusDecoded = try containerValues.decodeIfPresent(RedshiftDataClientTypes.StatusString.self, forKey: .status)
        status = statusDecoded
        let statementNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .statementName)
        statementName = statementNameDecoded
        let createdAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdAt)
        createdAt = createdAtDecoded
        let updatedAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .updatedAt)
        updatedAt = updatedAtDecoded
        let queryParametersContainer = try containerValues.decodeIfPresent([RedshiftDataClientTypes.SqlParameter?].self, forKey: .queryParameters)
        var queryParametersDecoded0:[RedshiftDataClientTypes.SqlParameter]? = nil
        if let queryParametersContainer = queryParametersContainer {
            queryParametersDecoded0 = [RedshiftDataClientTypes.SqlParameter]()
            for structure0 in queryParametersContainer {
                if let structure0 = structure0 {
                    queryParametersDecoded0?.append(structure0)
                }
            }
        }
        queryParameters = queryParametersDecoded0
        let isBatchStatementDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .isBatchStatement)
        isBatchStatement = isBatchStatementDecoded
    }
}
