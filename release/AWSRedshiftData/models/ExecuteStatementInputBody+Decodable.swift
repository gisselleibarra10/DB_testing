// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ExecuteStatementInputBody: Swift.Equatable {
    let sql: Swift.String?
    let clusterIdentifier: Swift.String?
    let secretArn: Swift.String?
    let dbUser: Swift.String?
    let database: Swift.String?
    let withEvent: Swift.Bool?
    let statementName: Swift.String?
    let parameters: [RedshiftDataClientTypes.SqlParameter]?
    let workgroupName: Swift.String?
}

extension ExecuteStatementInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterIdentifier = "ClusterIdentifier"
        case database = "Database"
        case dbUser = "DbUser"
        case parameters = "Parameters"
        case secretArn = "SecretArn"
        case sql = "Sql"
        case statementName = "StatementName"
        case withEvent = "WithEvent"
        case workgroupName = "WorkgroupName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sqlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sql)
        sql = sqlDecoded
        let clusterIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterIdentifier)
        clusterIdentifier = clusterIdentifierDecoded
        let secretArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .secretArn)
        secretArn = secretArnDecoded
        let dbUserDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dbUser)
        dbUser = dbUserDecoded
        let databaseDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .database)
        database = databaseDecoded
        let withEventDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .withEvent)
        withEvent = withEventDecoded
        let statementNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .statementName)
        statementName = statementNameDecoded
        let parametersContainer = try containerValues.decodeIfPresent([RedshiftDataClientTypes.SqlParameter?].self, forKey: .parameters)
        var parametersDecoded0:[RedshiftDataClientTypes.SqlParameter]? = nil
        if let parametersContainer = parametersContainer {
            parametersDecoded0 = [RedshiftDataClientTypes.SqlParameter]()
            for structure0 in parametersContainer {
                if let structure0 = structure0 {
                    parametersDecoded0?.append(structure0)
                }
            }
        }
        parameters = parametersDecoded0
        let workgroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .workgroupName)
        workgroupName = workgroupNameDecoded
    }
}
