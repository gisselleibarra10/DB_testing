// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct BatchExecuteStatementInputBody: Swift.Equatable {
    let sqls: [Swift.String]?
    let clusterIdentifier: Swift.String?
    let secretArn: Swift.String?
    let dbUser: Swift.String?
    let database: Swift.String?
    let withEvent: Swift.Bool?
    let statementName: Swift.String?
    let workgroupName: Swift.String?
}

extension BatchExecuteStatementInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterIdentifier = "ClusterIdentifier"
        case database = "Database"
        case dbUser = "DbUser"
        case secretArn = "SecretArn"
        case sqls = "Sqls"
        case statementName = "StatementName"
        case withEvent = "WithEvent"
        case workgroupName = "WorkgroupName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sqlsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .sqls)
        var sqlsDecoded0:[Swift.String]? = nil
        if let sqlsContainer = sqlsContainer {
            sqlsDecoded0 = [Swift.String]()
            for string0 in sqlsContainer {
                if let string0 = string0 {
                    sqlsDecoded0?.append(string0)
                }
            }
        }
        sqls = sqlsDecoded0
        let clusterIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterIdentifier)
        clusterIdentifier = clusterIdentifierDecoded
        let secretArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .secretArn)
        secretArn = secretArnDecoded
        let dbUserDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dbUser)
        dbUser = dbUserDecoded
        let databaseDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .database)
        database = databaseDecoded
        let withEventDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .withEvent)
        withEvent = withEventDecoded
        let statementNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .statementName)
        statementName = statementNameDecoded
        let workgroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .workgroupName)
        workgroupName = workgroupNameDecoded
    }
}
