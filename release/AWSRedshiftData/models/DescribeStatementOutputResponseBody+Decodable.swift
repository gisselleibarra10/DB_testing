// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeStatementOutputResponseBody: Swift.Equatable {
    let id: Swift.String?
    let secretArn: Swift.String?
    let dbUser: Swift.String?
    let database: Swift.String?
    let clusterIdentifier: Swift.String?
    let duration: Swift.Int
    let error: Swift.String?
    let status: RedshiftDataClientTypes.StatusString?
    let createdAt: ClientRuntime.Date?
    let updatedAt: ClientRuntime.Date?
    let redshiftPid: Swift.Int
    let hasResultSet: Swift.Bool?
    let queryString: Swift.String?
    let resultRows: Swift.Int
    let resultSize: Swift.Int
    let redshiftQueryId: Swift.Int
    let queryParameters: [RedshiftDataClientTypes.SqlParameter]?
    let subStatements: [RedshiftDataClientTypes.SubStatementData]?
    let workgroupName: Swift.String?
}

extension DescribeStatementOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterIdentifier = "ClusterIdentifier"
        case createdAt = "CreatedAt"
        case database = "Database"
        case dbUser = "DbUser"
        case duration = "Duration"
        case error = "Error"
        case hasResultSet = "HasResultSet"
        case id = "Id"
        case queryParameters = "QueryParameters"
        case queryString = "QueryString"
        case redshiftPid = "RedshiftPid"
        case redshiftQueryId = "RedshiftQueryId"
        case resultRows = "ResultRows"
        case resultSize = "ResultSize"
        case secretArn = "SecretArn"
        case status = "Status"
        case subStatements = "SubStatements"
        case updatedAt = "UpdatedAt"
        case workgroupName = "WorkgroupName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let secretArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .secretArn)
        secretArn = secretArnDecoded
        let dbUserDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dbUser)
        dbUser = dbUserDecoded
        let databaseDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .database)
        database = databaseDecoded
        let clusterIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterIdentifier)
        clusterIdentifier = clusterIdentifierDecoded
        let durationDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .duration) ?? 0
        duration = durationDecoded
        let errorDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .error)
        error = errorDecoded
        let statusDecoded = try containerValues.decodeIfPresent(RedshiftDataClientTypes.StatusString.self, forKey: .status)
        status = statusDecoded
        let createdAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdAt)
        createdAt = createdAtDecoded
        let updatedAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .updatedAt)
        updatedAt = updatedAtDecoded
        let redshiftPidDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .redshiftPid) ?? 0
        redshiftPid = redshiftPidDecoded
        let hasResultSetDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .hasResultSet)
        hasResultSet = hasResultSetDecoded
        let queryStringDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .queryString)
        queryString = queryStringDecoded
        let resultRowsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .resultRows) ?? 0
        resultRows = resultRowsDecoded
        let resultSizeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .resultSize) ?? 0
        resultSize = resultSizeDecoded
        let redshiftQueryIdDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .redshiftQueryId) ?? 0
        redshiftQueryId = redshiftQueryIdDecoded
        let queryParametersContainer = try containerValues.decodeIfPresent([RedshiftDataClientTypes.SqlParameter?].self, forKey: .queryParameters)
        var queryParametersDecoded0:[RedshiftDataClientTypes.SqlParameter]? = nil
        if let queryParametersContainer = queryParametersContainer {
            queryParametersDecoded0 = [RedshiftDataClientTypes.SqlParameter]()
            for structure0 in queryParametersContainer {
                if let structure0 = structure0 {
                    queryParametersDecoded0?.append(structure0)
                }
            }
        }
        queryParameters = queryParametersDecoded0
        let subStatementsContainer = try containerValues.decodeIfPresent([RedshiftDataClientTypes.SubStatementData?].self, forKey: .subStatements)
        var subStatementsDecoded0:[RedshiftDataClientTypes.SubStatementData]? = nil
        if let subStatementsContainer = subStatementsContainer {
            subStatementsDecoded0 = [RedshiftDataClientTypes.SubStatementData]()
            for structure0 in subStatementsContainer {
                if let structure0 = structure0 {
                    subStatementsDecoded0?.append(structure0)
                }
            }
        }
        subStatements = subStatementsDecoded0
        let workgroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .workgroupName)
        workgroupName = workgroupNameDecoded
    }
}
