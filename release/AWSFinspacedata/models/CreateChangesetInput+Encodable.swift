// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CreateChangesetInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case changeType
        case clientToken
        case formatParams
        case sourceParams
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let changeType = self.changeType {
            try encodeContainer.encode(changeType.rawValue, forKey: .changeType)
        }
        if let clientToken = self.clientToken {
            try encodeContainer.encode(clientToken, forKey: .clientToken)
        }
        if let formatParams = formatParams {
            var formatParamsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .formatParams)
            for (dictKey0, formatparams0) in formatParams {
                try formatParamsContainer.encode(formatparams0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let sourceParams = sourceParams {
            var sourceParamsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .sourceParams)
            for (dictKey0, sourceparams0) in sourceParams {
                try sourceParamsContainer.encode(sourceparams0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }
}
