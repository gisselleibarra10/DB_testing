// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension FinspaceDataClientTypes.DataViewDestinationTypeParams: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case destinationType
        case s3DestinationExportFileFormat
        case s3DestinationExportFileFormatOptions
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let destinationType = self.destinationType {
            try encodeContainer.encode(destinationType, forKey: .destinationType)
        }
        if let s3DestinationExportFileFormat = self.s3DestinationExportFileFormat {
            try encodeContainer.encode(s3DestinationExportFileFormat.rawValue, forKey: .s3DestinationExportFileFormat)
        }
        if let s3DestinationExportFileFormatOptions = s3DestinationExportFileFormatOptions {
            var s3DestinationExportFileFormatOptionsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .s3DestinationExportFileFormatOptions)
            for (dictKey0, s3destinationformatoptions0) in s3DestinationExportFileFormatOptions {
                try s3DestinationExportFileFormatOptionsContainer.encode(s3destinationformatoptions0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let destinationTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .destinationType)
        destinationType = destinationTypeDecoded
        let s3DestinationExportFileFormatDecoded = try containerValues.decodeIfPresent(FinspaceDataClientTypes.ExportFileFormat.self, forKey: .s3DestinationExportFileFormat)
        s3DestinationExportFileFormat = s3DestinationExportFileFormatDecoded
        let s3DestinationExportFileFormatOptionsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .s3DestinationExportFileFormatOptions)
        var s3DestinationExportFileFormatOptionsDecoded0: [Swift.String:Swift.String]? = nil
        if let s3DestinationExportFileFormatOptionsContainer = s3DestinationExportFileFormatOptionsContainer {
            s3DestinationExportFileFormatOptionsDecoded0 = [Swift.String:Swift.String]()
            for (key0, stringmapvalue0) in s3DestinationExportFileFormatOptionsContainer {
                if let stringmapvalue0 = stringmapvalue0 {
                    s3DestinationExportFileFormatOptionsDecoded0?[key0] = stringmapvalue0
                }
            }
        }
        s3DestinationExportFileFormatOptions = s3DestinationExportFileFormatOptionsDecoded0
    }
}
