// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetChangesetOutputResponseBody: Swift.Equatable {
    let changesetId: Swift.String?
    let changesetArn: Swift.String?
    let datasetId: Swift.String?
    let changeType: FinspaceDataClientTypes.ChangeType?
    let sourceParams: [Swift.String:Swift.String]?
    let formatParams: [Swift.String:Swift.String]?
    let createTime: Swift.Int
    let status: FinspaceDataClientTypes.IngestionStatus?
    let errorInfo: FinspaceDataClientTypes.ChangesetErrorInfo?
    let activeUntilTimestamp: Swift.Int?
    let activeFromTimestamp: Swift.Int?
    let updatesChangesetId: Swift.String?
    let updatedByChangesetId: Swift.String?
}

extension GetChangesetOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case activeFromTimestamp
        case activeUntilTimestamp
        case changeType
        case changesetArn
        case changesetId
        case createTime
        case datasetId
        case errorInfo
        case formatParams
        case sourceParams
        case status
        case updatedByChangesetId
        case updatesChangesetId
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let changesetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .changesetId)
        changesetId = changesetIdDecoded
        let changesetArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .changesetArn)
        changesetArn = changesetArnDecoded
        let datasetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .datasetId)
        datasetId = datasetIdDecoded
        let changeTypeDecoded = try containerValues.decodeIfPresent(FinspaceDataClientTypes.ChangeType.self, forKey: .changeType)
        changeType = changeTypeDecoded
        let sourceParamsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .sourceParams)
        var sourceParamsDecoded0: [Swift.String:Swift.String]? = nil
        if let sourceParamsContainer = sourceParamsContainer {
            sourceParamsDecoded0 = [Swift.String:Swift.String]()
            for (key0, stringmapvalue0) in sourceParamsContainer {
                if let stringmapvalue0 = stringmapvalue0 {
                    sourceParamsDecoded0?[key0] = stringmapvalue0
                }
            }
        }
        sourceParams = sourceParamsDecoded0
        let formatParamsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .formatParams)
        var formatParamsDecoded0: [Swift.String:Swift.String]? = nil
        if let formatParamsContainer = formatParamsContainer {
            formatParamsDecoded0 = [Swift.String:Swift.String]()
            for (key0, stringmapvalue0) in formatParamsContainer {
                if let stringmapvalue0 = stringmapvalue0 {
                    formatParamsDecoded0?[key0] = stringmapvalue0
                }
            }
        }
        formatParams = formatParamsDecoded0
        let createTimeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .createTime) ?? 0
        createTime = createTimeDecoded
        let statusDecoded = try containerValues.decodeIfPresent(FinspaceDataClientTypes.IngestionStatus.self, forKey: .status)
        status = statusDecoded
        let errorInfoDecoded = try containerValues.decodeIfPresent(FinspaceDataClientTypes.ChangesetErrorInfo.self, forKey: .errorInfo)
        errorInfo = errorInfoDecoded
        let activeUntilTimestampDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .activeUntilTimestamp)
        activeUntilTimestamp = activeUntilTimestampDecoded
        let activeFromTimestampDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .activeFromTimestamp)
        activeFromTimestamp = activeFromTimestampDecoded
        let updatesChangesetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .updatesChangesetId)
        updatesChangesetId = updatesChangesetIdDecoded
        let updatedByChangesetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .updatedByChangesetId)
        updatedByChangesetId = updatedByChangesetIdDecoded
    }
}
