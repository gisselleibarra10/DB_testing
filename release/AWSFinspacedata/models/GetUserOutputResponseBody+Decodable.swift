// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetUserOutputResponseBody: Swift.Equatable {
    let userId: Swift.String?
    let status: FinspaceDataClientTypes.UserStatus?
    let firstName: Swift.String?
    let lastName: Swift.String?
    let emailAddress: Swift.String?
    let type: FinspaceDataClientTypes.UserType?
    let apiAccess: FinspaceDataClientTypes.ApiAccess?
    let apiAccessPrincipalArn: Swift.String?
    let createTime: Swift.Int
    let lastEnabledTime: Swift.Int
    let lastDisabledTime: Swift.Int
    let lastModifiedTime: Swift.Int
    let lastLoginTime: Swift.Int
}

extension GetUserOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case apiAccess
        case apiAccessPrincipalArn
        case createTime
        case emailAddress
        case firstName
        case lastDisabledTime
        case lastEnabledTime
        case lastLoginTime
        case lastModifiedTime
        case lastName
        case status
        case type
        case userId
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let userIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userId)
        userId = userIdDecoded
        let statusDecoded = try containerValues.decodeIfPresent(FinspaceDataClientTypes.UserStatus.self, forKey: .status)
        status = statusDecoded
        let firstNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .firstName)
        firstName = firstNameDecoded
        let lastNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastName)
        lastName = lastNameDecoded
        let emailAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .emailAddress)
        emailAddress = emailAddressDecoded
        let typeDecoded = try containerValues.decodeIfPresent(FinspaceDataClientTypes.UserType.self, forKey: .type)
        type = typeDecoded
        let apiAccessDecoded = try containerValues.decodeIfPresent(FinspaceDataClientTypes.ApiAccess.self, forKey: .apiAccess)
        apiAccess = apiAccessDecoded
        let apiAccessPrincipalArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .apiAccessPrincipalArn)
        apiAccessPrincipalArn = apiAccessPrincipalArnDecoded
        let createTimeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .createTime) ?? 0
        createTime = createTimeDecoded
        let lastEnabledTimeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .lastEnabledTime) ?? 0
        lastEnabledTime = lastEnabledTimeDecoded
        let lastDisabledTimeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .lastDisabledTime) ?? 0
        lastDisabledTime = lastDisabledTimeDecoded
        let lastModifiedTimeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .lastModifiedTime) ?? 0
        lastModifiedTime = lastModifiedTimeDecoded
        let lastLoginTimeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .lastLoginTime) ?? 0
        lastLoginTime = lastLoginTimeDecoded
    }
}
