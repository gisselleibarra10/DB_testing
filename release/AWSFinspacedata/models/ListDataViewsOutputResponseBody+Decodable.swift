// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListDataViewsOutputResponseBody: Swift.Equatable {
    let nextToken: Swift.String?
    let dataViews: [FinspaceDataClientTypes.DataViewSummary]?
}

extension ListDataViewsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dataViews
        case nextToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let dataViewsContainer = try containerValues.decodeIfPresent([FinspaceDataClientTypes.DataViewSummary?].self, forKey: .dataViews)
        var dataViewsDecoded0:[FinspaceDataClientTypes.DataViewSummary]? = nil
        if let dataViewsContainer = dataViewsContainer {
            dataViewsDecoded0 = [FinspaceDataClientTypes.DataViewSummary]()
            for structure0 in dataViewsContainer {
                if let structure0 = structure0 {
                    dataViewsDecoded0?.append(structure0)
                }
            }
        }
        dataViews = dataViewsDecoded0
    }
}
