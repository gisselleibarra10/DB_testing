// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetDataViewOutputResponseBody: Swift.Equatable {
    let autoUpdate: Swift.Bool
    let partitionColumns: [Swift.String]?
    let datasetId: Swift.String?
    let asOfTimestamp: Swift.Int?
    let errorInfo: FinspaceDataClientTypes.DataViewErrorInfo?
    let lastModifiedTime: Swift.Int
    let createTime: Swift.Int
    let sortColumns: [Swift.String]?
    let dataViewId: Swift.String?
    let dataViewArn: Swift.String?
    let destinationTypeParams: FinspaceDataClientTypes.DataViewDestinationTypeParams?
    let status: FinspaceDataClientTypes.DataViewStatus?
}

extension GetDataViewOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case asOfTimestamp
        case autoUpdate
        case createTime
        case dataViewArn
        case dataViewId
        case datasetId
        case destinationTypeParams
        case errorInfo
        case lastModifiedTime
        case partitionColumns
        case sortColumns
        case status
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let autoUpdateDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .autoUpdate) ?? false
        autoUpdate = autoUpdateDecoded
        let partitionColumnsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .partitionColumns)
        var partitionColumnsDecoded0:[Swift.String]? = nil
        if let partitionColumnsContainer = partitionColumnsContainer {
            partitionColumnsDecoded0 = [Swift.String]()
            for string0 in partitionColumnsContainer {
                if let string0 = string0 {
                    partitionColumnsDecoded0?.append(string0)
                }
            }
        }
        partitionColumns = partitionColumnsDecoded0
        let datasetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .datasetId)
        datasetId = datasetIdDecoded
        let asOfTimestampDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .asOfTimestamp)
        asOfTimestamp = asOfTimestampDecoded
        let errorInfoDecoded = try containerValues.decodeIfPresent(FinspaceDataClientTypes.DataViewErrorInfo.self, forKey: .errorInfo)
        errorInfo = errorInfoDecoded
        let lastModifiedTimeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .lastModifiedTime) ?? 0
        lastModifiedTime = lastModifiedTimeDecoded
        let createTimeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .createTime) ?? 0
        createTime = createTimeDecoded
        let sortColumnsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .sortColumns)
        var sortColumnsDecoded0:[Swift.String]? = nil
        if let sortColumnsContainer = sortColumnsContainer {
            sortColumnsDecoded0 = [Swift.String]()
            for string0 in sortColumnsContainer {
                if let string0 = string0 {
                    sortColumnsDecoded0?.append(string0)
                }
            }
        }
        sortColumns = sortColumnsDecoded0
        let dataViewIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataViewId)
        dataViewId = dataViewIdDecoded
        let dataViewArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataViewArn)
        dataViewArn = dataViewArnDecoded
        let destinationTypeParamsDecoded = try containerValues.decodeIfPresent(FinspaceDataClientTypes.DataViewDestinationTypeParams.self, forKey: .destinationTypeParams)
        destinationTypeParams = destinationTypeParamsDecoded
        let statusDecoded = try containerValues.decodeIfPresent(FinspaceDataClientTypes.DataViewStatus.self, forKey: .status)
        status = statusDecoded
    }
}
