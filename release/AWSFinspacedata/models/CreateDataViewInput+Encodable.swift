// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CreateDataViewInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case asOfTimestamp
        case autoUpdate
        case clientToken
        case destinationTypeParams
        case partitionColumns
        case sortColumns
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let asOfTimestamp = self.asOfTimestamp {
            try encodeContainer.encode(asOfTimestamp, forKey: .asOfTimestamp)
        }
        if autoUpdate != false {
            try encodeContainer.encode(autoUpdate, forKey: .autoUpdate)
        }
        if let clientToken = self.clientToken {
            try encodeContainer.encode(clientToken, forKey: .clientToken)
        }
        if let destinationTypeParams = self.destinationTypeParams {
            try encodeContainer.encode(destinationTypeParams, forKey: .destinationTypeParams)
        }
        if let partitionColumns = partitionColumns {
            var partitionColumnsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .partitionColumns)
            for partitioncolumnlist0 in partitionColumns {
                try partitionColumnsContainer.encode(partitioncolumnlist0)
            }
        }
        if let sortColumns = sortColumns {
            var sortColumnsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .sortColumns)
            for sortcolumnlist0 in sortColumns {
                try sortColumnsContainer.encode(sortcolumnlist0)
            }
        }
    }
}
