// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeServiceUpdatesInputBody: Swift.Equatable {
    let serviceUpdateName: Swift.String?
    let serviceUpdateStatus: [ElastiCacheClientTypes.ServiceUpdateStatus]?
    let maxRecords: Swift.Int?
    let marker: Swift.String?
}

extension DescribeServiceUpdatesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case marker = "Marker"
        case maxRecords = "MaxRecords"
        case serviceUpdateName = "ServiceUpdateName"
        case serviceUpdateStatus = "ServiceUpdateStatus"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let serviceUpdateNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serviceUpdateName)
        serviceUpdateName = serviceUpdateNameDecoded
        if containerValues.contains(.serviceUpdateStatus) {
            struct KeyVal0{struct member{}}
            let serviceUpdateStatusWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .serviceUpdateStatus)
            if let serviceUpdateStatusWrappedContainer = serviceUpdateStatusWrappedContainer {
                let serviceUpdateStatusContainer = try serviceUpdateStatusWrappedContainer.decodeIfPresent([ElastiCacheClientTypes.ServiceUpdateStatus].self, forKey: .member)
                var serviceUpdateStatusBuffer:[ElastiCacheClientTypes.ServiceUpdateStatus]? = nil
                if let serviceUpdateStatusContainer = serviceUpdateStatusContainer {
                    serviceUpdateStatusBuffer = [ElastiCacheClientTypes.ServiceUpdateStatus]()
                    for stringContainer0 in serviceUpdateStatusContainer {
                        serviceUpdateStatusBuffer?.append(stringContainer0)
                    }
                }
                serviceUpdateStatus = serviceUpdateStatusBuffer
            } else {
                serviceUpdateStatus = []
            }
        } else {
            serviceUpdateStatus = nil
        }
        let maxRecordsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxRecords)
        maxRecords = maxRecordsDecoded
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
    }
}
