// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeCacheParameterGroupsOutputResponseBody: Swift.Equatable {
    let marker: Swift.String?
    let cacheParameterGroups: [ElastiCacheClientTypes.CacheParameterGroup]?
}

extension DescribeCacheParameterGroupsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cacheParameterGroups = "CacheParameterGroups"
        case marker = "Marker"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeCacheParameterGroupsResult"))
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
        if containerValues.contains(.cacheParameterGroups) {
            struct KeyVal0{struct CacheParameterGroup{}}
            let cacheParameterGroupsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.CacheParameterGroup>.CodingKeys.self, forKey: .cacheParameterGroups)
            if let cacheParameterGroupsWrappedContainer = cacheParameterGroupsWrappedContainer {
                let cacheParameterGroupsContainer = try cacheParameterGroupsWrappedContainer.decodeIfPresent([ElastiCacheClientTypes.CacheParameterGroup].self, forKey: .member)
                var cacheParameterGroupsBuffer:[ElastiCacheClientTypes.CacheParameterGroup]? = nil
                if let cacheParameterGroupsContainer = cacheParameterGroupsContainer {
                    cacheParameterGroupsBuffer = [ElastiCacheClientTypes.CacheParameterGroup]()
                    for structureContainer0 in cacheParameterGroupsContainer {
                        cacheParameterGroupsBuffer?.append(structureContainer0)
                    }
                }
                cacheParameterGroups = cacheParameterGroupsBuffer
            } else {
                cacheParameterGroups = []
            }
        } else {
            cacheParameterGroups = nil
        }
    }
}
