// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeUpdateActionsOutputResponseBody: Swift.Equatable {
    let marker: Swift.String?
    let updateActions: [ElastiCacheClientTypes.UpdateAction]?
}

extension DescribeUpdateActionsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case marker = "Marker"
        case updateActions = "UpdateActions"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeUpdateActionsResult"))
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
        if containerValues.contains(.updateActions) {
            struct KeyVal0{struct UpdateAction{}}
            let updateActionsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.UpdateAction>.CodingKeys.self, forKey: .updateActions)
            if let updateActionsWrappedContainer = updateActionsWrappedContainer {
                let updateActionsContainer = try updateActionsWrappedContainer.decodeIfPresent([ElastiCacheClientTypes.UpdateAction].self, forKey: .member)
                var updateActionsBuffer:[ElastiCacheClientTypes.UpdateAction]? = nil
                if let updateActionsContainer = updateActionsContainer {
                    updateActionsBuffer = [ElastiCacheClientTypes.UpdateAction]()
                    for structureContainer0 in updateActionsContainer {
                        updateActionsBuffer?.append(structureContainer0)
                    }
                }
                updateActions = updateActionsBuffer
            } else {
                updateActions = []
            }
        } else {
            updateActions = nil
        }
    }
}
