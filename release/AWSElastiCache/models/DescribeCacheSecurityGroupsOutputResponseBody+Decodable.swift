// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeCacheSecurityGroupsOutputResponseBody: Swift.Equatable {
    let marker: Swift.String?
    let cacheSecurityGroups: [ElastiCacheClientTypes.CacheSecurityGroup]?
}

extension DescribeCacheSecurityGroupsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cacheSecurityGroups = "CacheSecurityGroups"
        case marker = "Marker"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeCacheSecurityGroupsResult"))
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
        if containerValues.contains(.cacheSecurityGroups) {
            struct KeyVal0{struct CacheSecurityGroup{}}
            let cacheSecurityGroupsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.CacheSecurityGroup>.CodingKeys.self, forKey: .cacheSecurityGroups)
            if let cacheSecurityGroupsWrappedContainer = cacheSecurityGroupsWrappedContainer {
                let cacheSecurityGroupsContainer = try cacheSecurityGroupsWrappedContainer.decodeIfPresent([ElastiCacheClientTypes.CacheSecurityGroup].self, forKey: .member)
                var cacheSecurityGroupsBuffer:[ElastiCacheClientTypes.CacheSecurityGroup]? = nil
                if let cacheSecurityGroupsContainer = cacheSecurityGroupsContainer {
                    cacheSecurityGroupsBuffer = [ElastiCacheClientTypes.CacheSecurityGroup]()
                    for structureContainer0 in cacheSecurityGroupsContainer {
                        cacheSecurityGroupsBuffer?.append(structureContainer0)
                    }
                }
                cacheSecurityGroups = cacheSecurityGroupsBuffer
            } else {
                cacheSecurityGroups = []
            }
        } else {
            cacheSecurityGroups = nil
        }
    }
}
