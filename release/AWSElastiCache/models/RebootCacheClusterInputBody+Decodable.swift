// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct RebootCacheClusterInputBody: Swift.Equatable {
    let cacheClusterId: Swift.String?
    let cacheNodeIdsToReboot: [Swift.String]?
}

extension RebootCacheClusterInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cacheClusterId = "CacheClusterId"
        case cacheNodeIdsToReboot = "CacheNodeIdsToReboot"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let cacheClusterIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cacheClusterId)
        cacheClusterId = cacheClusterIdDecoded
        if containerValues.contains(.cacheNodeIdsToReboot) {
            struct KeyVal0{struct CacheNodeId{}}
            let cacheNodeIdsToRebootWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.CacheNodeId>.CodingKeys.self, forKey: .cacheNodeIdsToReboot)
            if let cacheNodeIdsToRebootWrappedContainer = cacheNodeIdsToRebootWrappedContainer {
                let cacheNodeIdsToRebootContainer = try cacheNodeIdsToRebootWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var cacheNodeIdsToRebootBuffer:[Swift.String]? = nil
                if let cacheNodeIdsToRebootContainer = cacheNodeIdsToRebootContainer {
                    cacheNodeIdsToRebootBuffer = [Swift.String]()
                    for stringContainer0 in cacheNodeIdsToRebootContainer {
                        cacheNodeIdsToRebootBuffer?.append(stringContainer0)
                    }
                }
                cacheNodeIdsToReboot = cacheNodeIdsToRebootBuffer
            } else {
                cacheNodeIdsToReboot = []
            }
        } else {
            cacheNodeIdsToReboot = nil
        }
    }
}
