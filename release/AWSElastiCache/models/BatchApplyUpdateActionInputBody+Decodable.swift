// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct BatchApplyUpdateActionInputBody: Swift.Equatable {
    let replicationGroupIds: [Swift.String]?
    let cacheClusterIds: [Swift.String]?
    let serviceUpdateName: Swift.String?
}

extension BatchApplyUpdateActionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cacheClusterIds = "CacheClusterIds"
        case replicationGroupIds = "ReplicationGroupIds"
        case serviceUpdateName = "ServiceUpdateName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.replicationGroupIds) {
            struct KeyVal0{struct member{}}
            let replicationGroupIdsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .replicationGroupIds)
            if let replicationGroupIdsWrappedContainer = replicationGroupIdsWrappedContainer {
                let replicationGroupIdsContainer = try replicationGroupIdsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var replicationGroupIdsBuffer:[Swift.String]? = nil
                if let replicationGroupIdsContainer = replicationGroupIdsContainer {
                    replicationGroupIdsBuffer = [Swift.String]()
                    for stringContainer0 in replicationGroupIdsContainer {
                        replicationGroupIdsBuffer?.append(stringContainer0)
                    }
                }
                replicationGroupIds = replicationGroupIdsBuffer
            } else {
                replicationGroupIds = []
            }
        } else {
            replicationGroupIds = nil
        }
        if containerValues.contains(.cacheClusterIds) {
            struct KeyVal0{struct member{}}
            let cacheClusterIdsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .cacheClusterIds)
            if let cacheClusterIdsWrappedContainer = cacheClusterIdsWrappedContainer {
                let cacheClusterIdsContainer = try cacheClusterIdsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var cacheClusterIdsBuffer:[Swift.String]? = nil
                if let cacheClusterIdsContainer = cacheClusterIdsContainer {
                    cacheClusterIdsBuffer = [Swift.String]()
                    for stringContainer0 in cacheClusterIdsContainer {
                        cacheClusterIdsBuffer?.append(stringContainer0)
                    }
                }
                cacheClusterIds = cacheClusterIdsBuffer
            } else {
                cacheClusterIds = []
            }
        } else {
            cacheClusterIds = nil
        }
        let serviceUpdateNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serviceUpdateName)
        serviceUpdateName = serviceUpdateNameDecoded
    }
}
