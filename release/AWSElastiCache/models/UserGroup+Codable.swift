// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ElastiCacheClientTypes.UserGroup: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case aRN = "ARN"
        case engine = "Engine"
        case minimumEngineVersion = "MinimumEngineVersion"
        case pendingChanges = "PendingChanges"
        case replicationGroups = "ReplicationGroups"
        case status = "Status"
        case userGroupId = "UserGroupId"
        case userIds = "UserIds"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let aRN = aRN {
            try container.encode(aRN, forKey: ClientRuntime.Key("ARN"))
        }
        if let engine = engine {
            try container.encode(engine, forKey: ClientRuntime.Key("Engine"))
        }
        if let minimumEngineVersion = minimumEngineVersion {
            try container.encode(minimumEngineVersion, forKey: ClientRuntime.Key("MinimumEngineVersion"))
        }
        if let pendingChanges = pendingChanges {
            try container.encode(pendingChanges, forKey: ClientRuntime.Key("PendingChanges"))
        }
        if let replicationGroups = replicationGroups {
            var replicationGroupsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ReplicationGroups"))
            for (index0, string0) in replicationGroups.enumerated() {
                try replicationGroupsContainer.encode(string0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
        if let userGroupId = userGroupId {
            try container.encode(userGroupId, forKey: ClientRuntime.Key("UserGroupId"))
        }
        if let userIds = userIds {
            var userIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("UserIds"))
            for (index0, userid0) in userIds.enumerated() {
                try userIdsContainer.encode(userid0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let userGroupIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userGroupId)
        userGroupId = userGroupIdDecoded
        let statusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .status)
        status = statusDecoded
        let engineDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .engine)
        engine = engineDecoded
        if containerValues.contains(.userIds) {
            struct KeyVal0{struct member{}}
            let userIdsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .userIds)
            if let userIdsWrappedContainer = userIdsWrappedContainer {
                let userIdsContainer = try userIdsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var userIdsBuffer:[Swift.String]? = nil
                if let userIdsContainer = userIdsContainer {
                    userIdsBuffer = [Swift.String]()
                    for stringContainer0 in userIdsContainer {
                        userIdsBuffer?.append(stringContainer0)
                    }
                }
                userIds = userIdsBuffer
            } else {
                userIds = []
            }
        } else {
            userIds = nil
        }
        let minimumEngineVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .minimumEngineVersion)
        minimumEngineVersion = minimumEngineVersionDecoded
        let pendingChangesDecoded = try containerValues.decodeIfPresent(ElastiCacheClientTypes.UserGroupPendingChanges.self, forKey: .pendingChanges)
        pendingChanges = pendingChangesDecoded
        if containerValues.contains(.replicationGroups) {
            struct KeyVal0{struct member{}}
            let replicationGroupsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .replicationGroups)
            if let replicationGroupsWrappedContainer = replicationGroupsWrappedContainer {
                let replicationGroupsContainer = try replicationGroupsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var replicationGroupsBuffer:[Swift.String]? = nil
                if let replicationGroupsContainer = replicationGroupsContainer {
                    replicationGroupsBuffer = [Swift.String]()
                    for stringContainer0 in replicationGroupsContainer {
                        replicationGroupsBuffer?.append(stringContainer0)
                    }
                }
                replicationGroups = replicationGroupsBuffer
            } else {
                replicationGroups = []
            }
        } else {
            replicationGroups = nil
        }
        let aRNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .aRN)
        aRN = aRNDecoded
    }
}
