// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ModifyUserInputBody: Swift.Equatable {
    let userId: Swift.String?
    let accessString: Swift.String?
    let appendAccessString: Swift.String?
    let passwords: [Swift.String]?
    let noPasswordRequired: Swift.Bool?
}

extension ModifyUserInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accessString = "AccessString"
        case appendAccessString = "AppendAccessString"
        case noPasswordRequired = "NoPasswordRequired"
        case passwords = "Passwords"
        case userId = "UserId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let userIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userId)
        userId = userIdDecoded
        let accessStringDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .accessString)
        accessString = accessStringDecoded
        let appendAccessStringDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .appendAccessString)
        appendAccessString = appendAccessStringDecoded
        if containerValues.contains(.passwords) {
            struct KeyVal0{struct member{}}
            let passwordsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .passwords)
            if let passwordsWrappedContainer = passwordsWrappedContainer {
                let passwordsContainer = try passwordsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var passwordsBuffer:[Swift.String]? = nil
                if let passwordsContainer = passwordsContainer {
                    passwordsBuffer = [Swift.String]()
                    for stringContainer0 in passwordsContainer {
                        passwordsBuffer?.append(stringContainer0)
                    }
                }
                passwords = passwordsBuffer
            } else {
                passwords = []
            }
        } else {
            passwords = nil
        }
        let noPasswordRequiredDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .noPasswordRequired)
        noPasswordRequired = noPasswordRequiredDecoded
    }
}
