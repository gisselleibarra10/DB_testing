// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeGlobalReplicationGroupsOutputResponseBody: Swift.Equatable {
    let marker: Swift.String?
    let globalReplicationGroups: [ElastiCacheClientTypes.GlobalReplicationGroup]?
}

extension DescribeGlobalReplicationGroupsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case globalReplicationGroups = "GlobalReplicationGroups"
        case marker = "Marker"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeGlobalReplicationGroupsResult"))
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
        if containerValues.contains(.globalReplicationGroups) {
            struct KeyVal0{struct GlobalReplicationGroup{}}
            let globalReplicationGroupsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.GlobalReplicationGroup>.CodingKeys.self, forKey: .globalReplicationGroups)
            if let globalReplicationGroupsWrappedContainer = globalReplicationGroupsWrappedContainer {
                let globalReplicationGroupsContainer = try globalReplicationGroupsWrappedContainer.decodeIfPresent([ElastiCacheClientTypes.GlobalReplicationGroup].self, forKey: .member)
                var globalReplicationGroupsBuffer:[ElastiCacheClientTypes.GlobalReplicationGroup]? = nil
                if let globalReplicationGroupsContainer = globalReplicationGroupsContainer {
                    globalReplicationGroupsBuffer = [ElastiCacheClientTypes.GlobalReplicationGroup]()
                    for structureContainer0 in globalReplicationGroupsContainer {
                        globalReplicationGroupsBuffer?.append(structureContainer0)
                    }
                }
                globalReplicationGroups = globalReplicationGroupsBuffer
            } else {
                globalReplicationGroups = []
            }
        } else {
            globalReplicationGroups = nil
        }
    }
}
