// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension ElastiCacheClientTypes {
    /// Consists of a primary cluster that accepts writes and an associated secondary cluster that resides in a different Amazon region. The secondary cluster accepts only reads. The primary cluster automatically replicates updates to the secondary cluster.
    ///
    /// * The GlobalReplicationGroupIdSuffix represents the name of the Global datastore, which is what you use to associate a secondary cluster.
    public struct GlobalReplicationGroup: Swift.Equatable {
        /// The ARN (Amazon Resource Name) of the global replication group.
        public var aRN: Swift.String?
        /// A flag that enables encryption at rest when set to true. You cannot modify the value of AtRestEncryptionEnabled after the replication group is created. To enable encryption at rest on a replication group you must set AtRestEncryptionEnabled to true when you create the replication group. Required: Only available when creating a replication group in an Amazon VPC using redis version 3.2.6, 4.x or later.
        public var atRestEncryptionEnabled: Swift.Bool?
        /// A flag that enables using an AuthToken (password) when issuing Redis commands. Default: false
        public var authTokenEnabled: Swift.Bool?
        /// The cache node type of the Global datastore
        public var cacheNodeType: Swift.String?
        /// A flag that indicates whether the Global datastore is cluster enabled.
        public var clusterEnabled: Swift.Bool?
        /// The Elasticache engine. For Redis only.
        public var engine: Swift.String?
        /// The Elasticache Redis engine version.
        public var engineVersion: Swift.String?
        /// Indicates the slot configuration and global identifier for each slice group.
        public var globalNodeGroups: [ElastiCacheClientTypes.GlobalNodeGroup]?
        /// The optional description of the Global datastore
        public var globalReplicationGroupDescription: Swift.String?
        /// The name of the Global datastore
        public var globalReplicationGroupId: Swift.String?
        /// The replication groups that comprise the Global datastore.
        public var members: [ElastiCacheClientTypes.GlobalReplicationGroupMember]?
        /// The status of the Global datastore
        public var status: Swift.String?
        /// A flag that enables in-transit encryption when set to true. You cannot modify the value of TransitEncryptionEnabled after the cluster is created. To enable in-transit encryption on a cluster you must set TransitEncryptionEnabled to true when you create a cluster. Required: Only available when creating a replication group in an Amazon VPC using redis version 3.2.6, 4.x or later.
        public var transitEncryptionEnabled: Swift.Bool?

        public init (
            aRN: Swift.String? = nil,
            atRestEncryptionEnabled: Swift.Bool? = nil,
            authTokenEnabled: Swift.Bool? = nil,
            cacheNodeType: Swift.String? = nil,
            clusterEnabled: Swift.Bool? = nil,
            engine: Swift.String? = nil,
            engineVersion: Swift.String? = nil,
            globalNodeGroups: [ElastiCacheClientTypes.GlobalNodeGroup]? = nil,
            globalReplicationGroupDescription: Swift.String? = nil,
            globalReplicationGroupId: Swift.String? = nil,
            members: [ElastiCacheClientTypes.GlobalReplicationGroupMember]? = nil,
            status: Swift.String? = nil,
            transitEncryptionEnabled: Swift.Bool? = nil
        )
        {
            self.aRN = aRN
            self.atRestEncryptionEnabled = atRestEncryptionEnabled
            self.authTokenEnabled = authTokenEnabled
            self.cacheNodeType = cacheNodeType
            self.clusterEnabled = clusterEnabled
            self.engine = engine
            self.engineVersion = engineVersion
            self.globalNodeGroups = globalNodeGroups
            self.globalReplicationGroupDescription = globalReplicationGroupDescription
            self.globalReplicationGroupId = globalReplicationGroupId
            self.members = members
            self.status = status
            self.transitEncryptionEnabled = transitEncryptionEnabled
        }
    }

}
