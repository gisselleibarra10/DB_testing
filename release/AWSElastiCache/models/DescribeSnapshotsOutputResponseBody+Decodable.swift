// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeSnapshotsOutputResponseBody: Swift.Equatable {
    let marker: Swift.String?
    let snapshots: [ElastiCacheClientTypes.Snapshot]?
}

extension DescribeSnapshotsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case marker = "Marker"
        case snapshots = "Snapshots"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeSnapshotsResult"))
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
        if containerValues.contains(.snapshots) {
            struct KeyVal0{struct Snapshot{}}
            let snapshotsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.Snapshot>.CodingKeys.self, forKey: .snapshots)
            if let snapshotsWrappedContainer = snapshotsWrappedContainer {
                let snapshotsContainer = try snapshotsWrappedContainer.decodeIfPresent([ElastiCacheClientTypes.Snapshot].self, forKey: .member)
                var snapshotsBuffer:[ElastiCacheClientTypes.Snapshot]? = nil
                if let snapshotsContainer = snapshotsContainer {
                    snapshotsBuffer = [ElastiCacheClientTypes.Snapshot]()
                    for structureContainer0 in snapshotsContainer {
                        snapshotsBuffer?.append(structureContainer0)
                    }
                }
                snapshots = snapshotsBuffer
            } else {
                snapshots = []
            }
        } else {
            snapshots = nil
        }
    }
}
