// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ElastiCacheClientTypes.RegionalConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case replicationGroupId = "ReplicationGroupId"
        case replicationGroupRegion = "ReplicationGroupRegion"
        case reshardingConfiguration = "ReshardingConfiguration"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let replicationGroupId = replicationGroupId {
            try container.encode(replicationGroupId, forKey: ClientRuntime.Key("ReplicationGroupId"))
        }
        if let replicationGroupRegion = replicationGroupRegion {
            try container.encode(replicationGroupRegion, forKey: ClientRuntime.Key("ReplicationGroupRegion"))
        }
        if let reshardingConfiguration = reshardingConfiguration {
            var reshardingConfigurationContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ReshardingConfiguration"))
            for (index0, reshardingconfiguration0) in reshardingConfiguration.enumerated() {
                try reshardingConfigurationContainer.encode(reshardingconfiguration0, forKey: ClientRuntime.Key("ReshardingConfiguration.\(index0.advanced(by: 1))"))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let replicationGroupIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .replicationGroupId)
        replicationGroupId = replicationGroupIdDecoded
        let replicationGroupRegionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .replicationGroupRegion)
        replicationGroupRegion = replicationGroupRegionDecoded
        if containerValues.contains(.reshardingConfiguration) {
            struct KeyVal0{struct ReshardingConfiguration{}}
            let reshardingConfigurationWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.ReshardingConfiguration>.CodingKeys.self, forKey: .reshardingConfiguration)
            if let reshardingConfigurationWrappedContainer = reshardingConfigurationWrappedContainer {
                let reshardingConfigurationContainer = try reshardingConfigurationWrappedContainer.decodeIfPresent([ElastiCacheClientTypes.ReshardingConfiguration].self, forKey: .member)
                var reshardingConfigurationBuffer:[ElastiCacheClientTypes.ReshardingConfiguration]? = nil
                if let reshardingConfigurationContainer = reshardingConfigurationContainer {
                    reshardingConfigurationBuffer = [ElastiCacheClientTypes.ReshardingConfiguration]()
                    for structureContainer0 in reshardingConfigurationContainer {
                        reshardingConfigurationBuffer?.append(structureContainer0)
                    }
                }
                reshardingConfiguration = reshardingConfigurationBuffer
            } else {
                reshardingConfiguration = []
            }
        } else {
            reshardingConfiguration = nil
        }
    }
}
