// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ElastiCacheClientTypes {
    /// Contains all of the attributes of a specific cluster.
    public struct CacheCluster: Swift.Equatable {
        /// The ARN (Amazon Resource Name) of the cache cluster.
        public var aRN: Swift.String?
        /// A flag that enables encryption at-rest when set to true. You cannot modify the value of AtRestEncryptionEnabled after the cluster is created. To enable at-rest encryption on a cluster you must set AtRestEncryptionEnabled to true when you create a cluster. Required: Only available when creating a replication group in an Amazon VPC using redis version 3.2.6, 4.x or later. Default: false
        public var atRestEncryptionEnabled: Swift.Bool?
        /// A flag that enables using an AuthToken (password) when issuing Redis commands. Default: false
        public var authTokenEnabled: Swift.Bool?
        /// The date the auth token was last modified
        public var authTokenLastModifiedDate: ClientRuntime.Date?
        ///  If you are running Redis engine version 6.0 or later, set this parameter to yes if you want to opt-in to the next auto minor version upgrade campaign. This parameter is disabled for previous versions.
        public var autoMinorVersionUpgrade: Swift.Bool
        /// The date and time when the cluster was created.
        public var cacheClusterCreateTime: ClientRuntime.Date?
        /// The user-supplied identifier of the cluster. This identifier is a unique key that identifies a cluster.
        public var cacheClusterId: Swift.String?
        /// The current state of this cluster, one of the following values: available, creating, deleted, deleting, incompatible-network, modifying, rebooting cluster nodes, restore-failed, or snapshotting.
        public var cacheClusterStatus: Swift.String?
        /// The name of the compute and memory capacity node type for the cluster. The following node types are supported by ElastiCache. Generally speaking, the current generation types provide more memory and computational power at lower cost when compared to their equivalent previous generation counterparts.
        ///
        /// * General purpose:
        ///
        /// * Current generation: M6g node types: (available only for Redis engine version 5.0.6 onward and for Memcached engine version 1.5.16 onward): cache.m6g.large, cache.m6g.xlarge, cache.m6g.2xlarge, cache.m6g.4xlarge, cache.m6g.8xlarge, cache.m6g.12xlarge, cache.m6g.16xlarge For region availability, see [Supported Node Types](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/CacheNodes.SupportedTypes.html#CacheNodes.SupportedTypesByRegion) M5 node types: cache.m5.large, cache.m5.xlarge, cache.m5.2xlarge, cache.m5.4xlarge, cache.m5.12xlarge, cache.m5.24xlarge M4 node types: cache.m4.large, cache.m4.xlarge, cache.m4.2xlarge, cache.m4.4xlarge, cache.m4.10xlarge T4g node types (available only for Redis engine version 5.0.6 onward and for Memcached engine version 1.5.16 onward): cache.t4g.micro, cache.t4g.small, cache.t4g.medium T3 node types: cache.t3.micro, cache.t3.small, cache.t3.medium T2 node types: cache.t2.micro, cache.t2.small, cache.t2.medium
        ///
        /// * Previous generation: (not recommended. Existing clusters are still supported but creation of new clusters is not supported for these types.) T1 node types: cache.t1.micro M1 node types: cache.m1.small, cache.m1.medium, cache.m1.large, cache.m1.xlarge M3 node types: cache.m3.medium, cache.m3.large, cache.m3.xlarge, cache.m3.2xlarge
        ///
        ///
        ///
        ///
        /// * Compute optimized:
        ///
        /// * Previous generation: (not recommended. Existing clusters are still supported but creation of new clusters is not supported for these types.) C1 node types: cache.c1.xlarge
        ///
        ///
        ///
        ///
        /// * Memory optimized with data tiering:
        ///
        /// * Current generation: R6gd node types (available only for Redis engine version 6.2 onward). cache.r6gd.xlarge, cache.r6gd.2xlarge, cache.r6gd.4xlarge, cache.r6gd.8xlarge, cache.r6gd.12xlarge, cache.r6gd.16xlarge
        ///
        ///
        ///
        ///
        /// * Memory optimized:
        ///
        /// * Current generation: R6g node types (available only for Redis engine version 5.0.6 onward and for Memcached engine version 1.5.16 onward). cache.r6g.large, cache.r6g.xlarge, cache.r6g.2xlarge, cache.r6g.4xlarge, cache.r6g.8xlarge, cache.r6g.12xlarge, cache.r6g.16xlarge For region availability, see [Supported Node Types](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/CacheNodes.SupportedTypes.html#CacheNodes.SupportedTypesByRegion) R5 node types: cache.r5.large, cache.r5.xlarge, cache.r5.2xlarge, cache.r5.4xlarge, cache.r5.12xlarge, cache.r5.24xlarge R4 node types: cache.r4.large, cache.r4.xlarge, cache.r4.2xlarge, cache.r4.4xlarge, cache.r4.8xlarge, cache.r4.16xlarge
        ///
        /// * Previous generation: (not recommended. Existing clusters are still supported but creation of new clusters is not supported for these types.) M2 node types: cache.m2.xlarge, cache.m2.2xlarge, cache.m2.4xlarge R3 node types: cache.r3.large, cache.r3.xlarge, cache.r3.2xlarge,
        ///
        ///
        /// cache.r3.4xlarge, cache.r3.8xlarge
        ///
        ///
        ///
        ///
        ///
        /// Additional node type info
        ///
        /// * All current generation instance types are created in Amazon VPC by default.
        ///
        /// * Redis append-only files (AOF) are not supported for T1 or T2 instances.
        ///
        /// * Redis Multi-AZ with automatic failover is not supported on T1 instances.
        ///
        /// * Redis configuration variables appendonly and appendfsync are not supported on Redis version 2.8.22 and later.
        public var cacheNodeType: Swift.String?
        /// A list of cache nodes that are members of the cluster.
        public var cacheNodes: [ElastiCacheClientTypes.CacheNode]?
        /// Status of the cache parameter group.
        public var cacheParameterGroup: ElastiCacheClientTypes.CacheParameterGroupStatus?
        /// A list of cache security group elements, composed of name and status sub-elements.
        public var cacheSecurityGroups: [ElastiCacheClientTypes.CacheSecurityGroupMembership]?
        /// The name of the cache subnet group associated with the cluster.
        public var cacheSubnetGroupName: Swift.String?
        /// The URL of the web page where you can download the latest ElastiCache client library.
        public var clientDownloadLandingPage: Swift.String?
        /// Represents a Memcached cluster endpoint which can be used by an application to connect to any node in the cluster. The configuration endpoint will always have .cfg in it. Example: mem-3.9dvc4r.cfg.usw2.cache.amazonaws.com:11211
        public var configurationEndpoint: ElastiCacheClientTypes.Endpoint?
        /// The name of the cache engine (memcached or redis) to be used for this cluster.
        public var engine: Swift.String?
        /// The version of the cache engine that is used in this cluster.
        public var engineVersion: Swift.String?
        /// Returns the destination, format and type of the logs.
        public var logDeliveryConfigurations: [ElastiCacheClientTypes.LogDeliveryConfiguration]?
        /// Describes a notification topic and its status. Notification topics are used for publishing ElastiCache events to subscribers using Amazon Simple Notification Service (SNS).
        public var notificationConfiguration: ElastiCacheClientTypes.NotificationConfiguration?
        /// The number of cache nodes in the cluster. For clusters running Redis, this value must be 1. For clusters running Memcached, this value must be between 1 and 40.
        public var numCacheNodes: Swift.Int?
        /// A group of settings that are applied to the cluster in the future, or that are currently being applied.
        public var pendingModifiedValues: ElastiCacheClientTypes.PendingModifiedValues?
        /// The name of the Availability Zone in which the cluster is located or "Multiple" if the cache nodes are located in different Availability Zones.
        public var preferredAvailabilityZone: Swift.String?
        /// Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period. Valid values for ddd are:
        ///
        /// * sun
        ///
        /// * mon
        ///
        /// * tue
        ///
        /// * wed
        ///
        /// * thu
        ///
        /// * fri
        ///
        /// * sat
        ///
        ///
        /// Example: sun:23:00-mon:01:30
        public var preferredMaintenanceWindow: Swift.String?
        /// The outpost ARN in which the cache cluster is created.
        public var preferredOutpostArn: Swift.String?
        /// The replication group to which this cluster belongs. If this field is empty, the cluster is not associated with any replication group.
        public var replicationGroupId: Swift.String?
        /// A boolean value indicating whether log delivery is enabled for the replication group.
        public var replicationGroupLogDeliveryEnabled: Swift.Bool
        /// A list of VPC Security Groups associated with the cluster.
        public var securityGroups: [ElastiCacheClientTypes.SecurityGroupMembership]?
        /// The number of days for which ElastiCache retains automatic cluster snapshots before deleting them. For example, if you set SnapshotRetentionLimit to 5, a snapshot that was taken today is retained for 5 days before being deleted. If the value of SnapshotRetentionLimit is set to zero (0), backups are turned off.
        public var snapshotRetentionLimit: Swift.Int?
        /// The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of your cluster. Example: 05:00-09:00
        public var snapshotWindow: Swift.String?
        /// A flag that enables in-transit encryption when set to true. You cannot modify the value of TransitEncryptionEnabled after the cluster is created. To enable in-transit encryption on a cluster you must set TransitEncryptionEnabled to true when you create a cluster. Required: Only available when creating a replication group in an Amazon VPC using redis version 3.2.6, 4.x or later. Default: false
        public var transitEncryptionEnabled: Swift.Bool?

        public init (
            aRN: Swift.String? = nil,
            atRestEncryptionEnabled: Swift.Bool? = nil,
            authTokenEnabled: Swift.Bool? = nil,
            authTokenLastModifiedDate: ClientRuntime.Date? = nil,
            autoMinorVersionUpgrade: Swift.Bool = false,
            cacheClusterCreateTime: ClientRuntime.Date? = nil,
            cacheClusterId: Swift.String? = nil,
            cacheClusterStatus: Swift.String? = nil,
            cacheNodeType: Swift.String? = nil,
            cacheNodes: [ElastiCacheClientTypes.CacheNode]? = nil,
            cacheParameterGroup: ElastiCacheClientTypes.CacheParameterGroupStatus? = nil,
            cacheSecurityGroups: [ElastiCacheClientTypes.CacheSecurityGroupMembership]? = nil,
            cacheSubnetGroupName: Swift.String? = nil,
            clientDownloadLandingPage: Swift.String? = nil,
            configurationEndpoint: ElastiCacheClientTypes.Endpoint? = nil,
            engine: Swift.String? = nil,
            engineVersion: Swift.String? = nil,
            logDeliveryConfigurations: [ElastiCacheClientTypes.LogDeliveryConfiguration]? = nil,
            notificationConfiguration: ElastiCacheClientTypes.NotificationConfiguration? = nil,
            numCacheNodes: Swift.Int? = nil,
            pendingModifiedValues: ElastiCacheClientTypes.PendingModifiedValues? = nil,
            preferredAvailabilityZone: Swift.String? = nil,
            preferredMaintenanceWindow: Swift.String? = nil,
            preferredOutpostArn: Swift.String? = nil,
            replicationGroupId: Swift.String? = nil,
            replicationGroupLogDeliveryEnabled: Swift.Bool = false,
            securityGroups: [ElastiCacheClientTypes.SecurityGroupMembership]? = nil,
            snapshotRetentionLimit: Swift.Int? = nil,
            snapshotWindow: Swift.String? = nil,
            transitEncryptionEnabled: Swift.Bool? = nil
        )
        {
            self.aRN = aRN
            self.atRestEncryptionEnabled = atRestEncryptionEnabled
            self.authTokenEnabled = authTokenEnabled
            self.authTokenLastModifiedDate = authTokenLastModifiedDate
            self.autoMinorVersionUpgrade = autoMinorVersionUpgrade
            self.cacheClusterCreateTime = cacheClusterCreateTime
            self.cacheClusterId = cacheClusterId
            self.cacheClusterStatus = cacheClusterStatus
            self.cacheNodeType = cacheNodeType
            self.cacheNodes = cacheNodes
            self.cacheParameterGroup = cacheParameterGroup
            self.cacheSecurityGroups = cacheSecurityGroups
            self.cacheSubnetGroupName = cacheSubnetGroupName
            self.clientDownloadLandingPage = clientDownloadLandingPage
            self.configurationEndpoint = configurationEndpoint
            self.engine = engine
            self.engineVersion = engineVersion
            self.logDeliveryConfigurations = logDeliveryConfigurations
            self.notificationConfiguration = notificationConfiguration
            self.numCacheNodes = numCacheNodes
            self.pendingModifiedValues = pendingModifiedValues
            self.preferredAvailabilityZone = preferredAvailabilityZone
            self.preferredMaintenanceWindow = preferredMaintenanceWindow
            self.preferredOutpostArn = preferredOutpostArn
            self.replicationGroupId = replicationGroupId
            self.replicationGroupLogDeliveryEnabled = replicationGroupLogDeliveryEnabled
            self.securityGroups = securityGroups
            self.snapshotRetentionLimit = snapshotRetentionLimit
            self.snapshotWindow = snapshotWindow
            self.transitEncryptionEnabled = transitEncryptionEnabled
        }
    }

}
