// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeCacheEngineVersionsOutputResponseBody: Swift.Equatable {
    let marker: Swift.String?
    let cacheEngineVersions: [ElastiCacheClientTypes.CacheEngineVersion]?
}

extension DescribeCacheEngineVersionsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cacheEngineVersions = "CacheEngineVersions"
        case marker = "Marker"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeCacheEngineVersionsResult"))
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
        if containerValues.contains(.cacheEngineVersions) {
            struct KeyVal0{struct CacheEngineVersion{}}
            let cacheEngineVersionsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.CacheEngineVersion>.CodingKeys.self, forKey: .cacheEngineVersions)
            if let cacheEngineVersionsWrappedContainer = cacheEngineVersionsWrappedContainer {
                let cacheEngineVersionsContainer = try cacheEngineVersionsWrappedContainer.decodeIfPresent([ElastiCacheClientTypes.CacheEngineVersion].self, forKey: .member)
                var cacheEngineVersionsBuffer:[ElastiCacheClientTypes.CacheEngineVersion]? = nil
                if let cacheEngineVersionsContainer = cacheEngineVersionsContainer {
                    cacheEngineVersionsBuffer = [ElastiCacheClientTypes.CacheEngineVersion]()
                    for structureContainer0 in cacheEngineVersionsContainer {
                        cacheEngineVersionsBuffer?.append(structureContainer0)
                    }
                }
                cacheEngineVersions = cacheEngineVersionsBuffer
            } else {
                cacheEngineVersions = []
            }
        } else {
            cacheEngineVersions = nil
        }
    }
}
