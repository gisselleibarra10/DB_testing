// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ElastiCacheClientTypes.CacheCluster: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case aRN = "ARN"
        case atRestEncryptionEnabled = "AtRestEncryptionEnabled"
        case authTokenEnabled = "AuthTokenEnabled"
        case authTokenLastModifiedDate = "AuthTokenLastModifiedDate"
        case autoMinorVersionUpgrade = "AutoMinorVersionUpgrade"
        case cacheClusterCreateTime = "CacheClusterCreateTime"
        case cacheClusterId = "CacheClusterId"
        case cacheClusterStatus = "CacheClusterStatus"
        case cacheNodeType = "CacheNodeType"
        case cacheNodes = "CacheNodes"
        case cacheParameterGroup = "CacheParameterGroup"
        case cacheSecurityGroups = "CacheSecurityGroups"
        case cacheSubnetGroupName = "CacheSubnetGroupName"
        case clientDownloadLandingPage = "ClientDownloadLandingPage"
        case configurationEndpoint = "ConfigurationEndpoint"
        case engine = "Engine"
        case engineVersion = "EngineVersion"
        case logDeliveryConfigurations = "LogDeliveryConfigurations"
        case notificationConfiguration = "NotificationConfiguration"
        case numCacheNodes = "NumCacheNodes"
        case pendingModifiedValues = "PendingModifiedValues"
        case preferredAvailabilityZone = "PreferredAvailabilityZone"
        case preferredMaintenanceWindow = "PreferredMaintenanceWindow"
        case preferredOutpostArn = "PreferredOutpostArn"
        case replicationGroupId = "ReplicationGroupId"
        case replicationGroupLogDeliveryEnabled = "ReplicationGroupLogDeliveryEnabled"
        case securityGroups = "SecurityGroups"
        case snapshotRetentionLimit = "SnapshotRetentionLimit"
        case snapshotWindow = "SnapshotWindow"
        case transitEncryptionEnabled = "TransitEncryptionEnabled"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let aRN = aRN {
            try container.encode(aRN, forKey: ClientRuntime.Key("ARN"))
        }
        if let atRestEncryptionEnabled = atRestEncryptionEnabled {
            try container.encode(atRestEncryptionEnabled, forKey: ClientRuntime.Key("AtRestEncryptionEnabled"))
        }
        if let authTokenEnabled = authTokenEnabled {
            try container.encode(authTokenEnabled, forKey: ClientRuntime.Key("AuthTokenEnabled"))
        }
        if let authTokenLastModifiedDate = authTokenLastModifiedDate {
            try container.encode(ClientRuntime.TimestampWrapper(authTokenLastModifiedDate, format: .dateTime), forKey: ClientRuntime.Key("authTokenLastModifiedDate"))
        }
        if autoMinorVersionUpgrade != false {
            try container.encode(autoMinorVersionUpgrade, forKey: ClientRuntime.Key("AutoMinorVersionUpgrade"))
        }
        if let cacheClusterCreateTime = cacheClusterCreateTime {
            try container.encode(ClientRuntime.TimestampWrapper(cacheClusterCreateTime, format: .dateTime), forKey: ClientRuntime.Key("cacheClusterCreateTime"))
        }
        if let cacheClusterId = cacheClusterId {
            try container.encode(cacheClusterId, forKey: ClientRuntime.Key("CacheClusterId"))
        }
        if let cacheClusterStatus = cacheClusterStatus {
            try container.encode(cacheClusterStatus, forKey: ClientRuntime.Key("CacheClusterStatus"))
        }
        if let cacheNodeType = cacheNodeType {
            try container.encode(cacheNodeType, forKey: ClientRuntime.Key("CacheNodeType"))
        }
        if let cacheNodes = cacheNodes {
            var cacheNodesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("CacheNodes"))
            for (index0, cachenode0) in cacheNodes.enumerated() {
                try cacheNodesContainer.encode(cachenode0, forKey: ClientRuntime.Key("CacheNode.\(index0.advanced(by: 1))"))
            }
        }
        if let cacheParameterGroup = cacheParameterGroup {
            try container.encode(cacheParameterGroup, forKey: ClientRuntime.Key("CacheParameterGroup"))
        }
        if let cacheSecurityGroups = cacheSecurityGroups {
            var cacheSecurityGroupsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("CacheSecurityGroups"))
            for (index0, cachesecuritygroupmembership0) in cacheSecurityGroups.enumerated() {
                try cacheSecurityGroupsContainer.encode(cachesecuritygroupmembership0, forKey: ClientRuntime.Key("CacheSecurityGroup.\(index0.advanced(by: 1))"))
            }
        }
        if let cacheSubnetGroupName = cacheSubnetGroupName {
            try container.encode(cacheSubnetGroupName, forKey: ClientRuntime.Key("CacheSubnetGroupName"))
        }
        if let clientDownloadLandingPage = clientDownloadLandingPage {
            try container.encode(clientDownloadLandingPage, forKey: ClientRuntime.Key("ClientDownloadLandingPage"))
        }
        if let configurationEndpoint = configurationEndpoint {
            try container.encode(configurationEndpoint, forKey: ClientRuntime.Key("ConfigurationEndpoint"))
        }
        if let engine = engine {
            try container.encode(engine, forKey: ClientRuntime.Key("Engine"))
        }
        if let engineVersion = engineVersion {
            try container.encode(engineVersion, forKey: ClientRuntime.Key("EngineVersion"))
        }
        if let logDeliveryConfigurations = logDeliveryConfigurations {
            var logDeliveryConfigurationsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("LogDeliveryConfigurations"))
            for (index0, logdeliveryconfiguration0) in logDeliveryConfigurations.enumerated() {
                try logDeliveryConfigurationsContainer.encode(logdeliveryconfiguration0, forKey: ClientRuntime.Key("LogDeliveryConfiguration.\(index0.advanced(by: 1))"))
            }
        }
        if let notificationConfiguration = notificationConfiguration {
            try container.encode(notificationConfiguration, forKey: ClientRuntime.Key("NotificationConfiguration"))
        }
        if let numCacheNodes = numCacheNodes {
            try container.encode(numCacheNodes, forKey: ClientRuntime.Key("NumCacheNodes"))
        }
        if let pendingModifiedValues = pendingModifiedValues {
            try container.encode(pendingModifiedValues, forKey: ClientRuntime.Key("PendingModifiedValues"))
        }
        if let preferredAvailabilityZone = preferredAvailabilityZone {
            try container.encode(preferredAvailabilityZone, forKey: ClientRuntime.Key("PreferredAvailabilityZone"))
        }
        if let preferredMaintenanceWindow = preferredMaintenanceWindow {
            try container.encode(preferredMaintenanceWindow, forKey: ClientRuntime.Key("PreferredMaintenanceWindow"))
        }
        if let preferredOutpostArn = preferredOutpostArn {
            try container.encode(preferredOutpostArn, forKey: ClientRuntime.Key("PreferredOutpostArn"))
        }
        if let replicationGroupId = replicationGroupId {
            try container.encode(replicationGroupId, forKey: ClientRuntime.Key("ReplicationGroupId"))
        }
        if replicationGroupLogDeliveryEnabled != false {
            try container.encode(replicationGroupLogDeliveryEnabled, forKey: ClientRuntime.Key("ReplicationGroupLogDeliveryEnabled"))
        }
        if let securityGroups = securityGroups {
            var securityGroupsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("SecurityGroups"))
            for (index0, securitygroupmembership0) in securityGroups.enumerated() {
                try securityGroupsContainer.encode(securitygroupmembership0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let snapshotRetentionLimit = snapshotRetentionLimit {
            try container.encode(snapshotRetentionLimit, forKey: ClientRuntime.Key("SnapshotRetentionLimit"))
        }
        if let snapshotWindow = snapshotWindow {
            try container.encode(snapshotWindow, forKey: ClientRuntime.Key("SnapshotWindow"))
        }
        if let transitEncryptionEnabled = transitEncryptionEnabled {
            try container.encode(transitEncryptionEnabled, forKey: ClientRuntime.Key("TransitEncryptionEnabled"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let cacheClusterIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cacheClusterId)
        cacheClusterId = cacheClusterIdDecoded
        let configurationEndpointDecoded = try containerValues.decodeIfPresent(ElastiCacheClientTypes.Endpoint.self, forKey: .configurationEndpoint)
        configurationEndpoint = configurationEndpointDecoded
        let clientDownloadLandingPageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientDownloadLandingPage)
        clientDownloadLandingPage = clientDownloadLandingPageDecoded
        let cacheNodeTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cacheNodeType)
        cacheNodeType = cacheNodeTypeDecoded
        let engineDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .engine)
        engine = engineDecoded
        let engineVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .engineVersion)
        engineVersion = engineVersionDecoded
        let cacheClusterStatusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cacheClusterStatus)
        cacheClusterStatus = cacheClusterStatusDecoded
        let numCacheNodesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .numCacheNodes)
        numCacheNodes = numCacheNodesDecoded
        let preferredAvailabilityZoneDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .preferredAvailabilityZone)
        preferredAvailabilityZone = preferredAvailabilityZoneDecoded
        let preferredOutpostArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .preferredOutpostArn)
        preferredOutpostArn = preferredOutpostArnDecoded
        let cacheClusterCreateTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cacheClusterCreateTime)
        var cacheClusterCreateTimeBuffer:ClientRuntime.Date? = nil
        if let cacheClusterCreateTimeDecoded = cacheClusterCreateTimeDecoded {
            cacheClusterCreateTimeBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(cacheClusterCreateTimeDecoded, format: .dateTime)
        }
        cacheClusterCreateTime = cacheClusterCreateTimeBuffer
        let preferredMaintenanceWindowDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .preferredMaintenanceWindow)
        preferredMaintenanceWindow = preferredMaintenanceWindowDecoded
        let pendingModifiedValuesDecoded = try containerValues.decodeIfPresent(ElastiCacheClientTypes.PendingModifiedValues.self, forKey: .pendingModifiedValues)
        pendingModifiedValues = pendingModifiedValuesDecoded
        let notificationConfigurationDecoded = try containerValues.decodeIfPresent(ElastiCacheClientTypes.NotificationConfiguration.self, forKey: .notificationConfiguration)
        notificationConfiguration = notificationConfigurationDecoded
        if containerValues.contains(.cacheSecurityGroups) {
            struct KeyVal0{struct CacheSecurityGroup{}}
            let cacheSecurityGroupsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.CacheSecurityGroup>.CodingKeys.self, forKey: .cacheSecurityGroups)
            if let cacheSecurityGroupsWrappedContainer = cacheSecurityGroupsWrappedContainer {
                let cacheSecurityGroupsContainer = try cacheSecurityGroupsWrappedContainer.decodeIfPresent([ElastiCacheClientTypes.CacheSecurityGroupMembership].self, forKey: .member)
                var cacheSecurityGroupsBuffer:[ElastiCacheClientTypes.CacheSecurityGroupMembership]? = nil
                if let cacheSecurityGroupsContainer = cacheSecurityGroupsContainer {
                    cacheSecurityGroupsBuffer = [ElastiCacheClientTypes.CacheSecurityGroupMembership]()
                    for structureContainer0 in cacheSecurityGroupsContainer {
                        cacheSecurityGroupsBuffer?.append(structureContainer0)
                    }
                }
                cacheSecurityGroups = cacheSecurityGroupsBuffer
            } else {
                cacheSecurityGroups = []
            }
        } else {
            cacheSecurityGroups = nil
        }
        let cacheParameterGroupDecoded = try containerValues.decodeIfPresent(ElastiCacheClientTypes.CacheParameterGroupStatus.self, forKey: .cacheParameterGroup)
        cacheParameterGroup = cacheParameterGroupDecoded
        let cacheSubnetGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cacheSubnetGroupName)
        cacheSubnetGroupName = cacheSubnetGroupNameDecoded
        if containerValues.contains(.cacheNodes) {
            struct KeyVal0{struct CacheNode{}}
            let cacheNodesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.CacheNode>.CodingKeys.self, forKey: .cacheNodes)
            if let cacheNodesWrappedContainer = cacheNodesWrappedContainer {
                let cacheNodesContainer = try cacheNodesWrappedContainer.decodeIfPresent([ElastiCacheClientTypes.CacheNode].self, forKey: .member)
                var cacheNodesBuffer:[ElastiCacheClientTypes.CacheNode]? = nil
                if let cacheNodesContainer = cacheNodesContainer {
                    cacheNodesBuffer = [ElastiCacheClientTypes.CacheNode]()
                    for structureContainer0 in cacheNodesContainer {
                        cacheNodesBuffer?.append(structureContainer0)
                    }
                }
                cacheNodes = cacheNodesBuffer
            } else {
                cacheNodes = []
            }
        } else {
            cacheNodes = nil
        }
        let autoMinorVersionUpgradeDecoded = try containerValues.decode(Swift.Bool.self, forKey: .autoMinorVersionUpgrade)
        autoMinorVersionUpgrade = autoMinorVersionUpgradeDecoded
        if containerValues.contains(.securityGroups) {
            struct KeyVal0{struct member{}}
            let securityGroupsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .securityGroups)
            if let securityGroupsWrappedContainer = securityGroupsWrappedContainer {
                let securityGroupsContainer = try securityGroupsWrappedContainer.decodeIfPresent([ElastiCacheClientTypes.SecurityGroupMembership].self, forKey: .member)
                var securityGroupsBuffer:[ElastiCacheClientTypes.SecurityGroupMembership]? = nil
                if let securityGroupsContainer = securityGroupsContainer {
                    securityGroupsBuffer = [ElastiCacheClientTypes.SecurityGroupMembership]()
                    for structureContainer0 in securityGroupsContainer {
                        securityGroupsBuffer?.append(structureContainer0)
                    }
                }
                securityGroups = securityGroupsBuffer
            } else {
                securityGroups = []
            }
        } else {
            securityGroups = nil
        }
        let replicationGroupIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .replicationGroupId)
        replicationGroupId = replicationGroupIdDecoded
        let snapshotRetentionLimitDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .snapshotRetentionLimit)
        snapshotRetentionLimit = snapshotRetentionLimitDecoded
        let snapshotWindowDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .snapshotWindow)
        snapshotWindow = snapshotWindowDecoded
        let authTokenEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .authTokenEnabled)
        authTokenEnabled = authTokenEnabledDecoded
        let authTokenLastModifiedDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .authTokenLastModifiedDate)
        var authTokenLastModifiedDateBuffer:ClientRuntime.Date? = nil
        if let authTokenLastModifiedDateDecoded = authTokenLastModifiedDateDecoded {
            authTokenLastModifiedDateBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(authTokenLastModifiedDateDecoded, format: .dateTime)
        }
        authTokenLastModifiedDate = authTokenLastModifiedDateBuffer
        let transitEncryptionEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .transitEncryptionEnabled)
        transitEncryptionEnabled = transitEncryptionEnabledDecoded
        let atRestEncryptionEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .atRestEncryptionEnabled)
        atRestEncryptionEnabled = atRestEncryptionEnabledDecoded
        let aRNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .aRN)
        aRN = aRNDecoded
        let replicationGroupLogDeliveryEnabledDecoded = try containerValues.decode(Swift.Bool.self, forKey: .replicationGroupLogDeliveryEnabled)
        replicationGroupLogDeliveryEnabled = replicationGroupLogDeliveryEnabledDecoded
        if containerValues.contains(.logDeliveryConfigurations) {
            struct KeyVal0{struct LogDeliveryConfiguration{}}
            let logDeliveryConfigurationsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.LogDeliveryConfiguration>.CodingKeys.self, forKey: .logDeliveryConfigurations)
            if let logDeliveryConfigurationsWrappedContainer = logDeliveryConfigurationsWrappedContainer {
                let logDeliveryConfigurationsContainer = try logDeliveryConfigurationsWrappedContainer.decodeIfPresent([ElastiCacheClientTypes.LogDeliveryConfiguration].self, forKey: .member)
                var logDeliveryConfigurationsBuffer:[ElastiCacheClientTypes.LogDeliveryConfiguration]? = nil
                if let logDeliveryConfigurationsContainer = logDeliveryConfigurationsContainer {
                    logDeliveryConfigurationsBuffer = [ElastiCacheClientTypes.LogDeliveryConfiguration]()
                    for structureContainer0 in logDeliveryConfigurationsContainer {
                        logDeliveryConfigurationsBuffer?.append(structureContainer0)
                    }
                }
                logDeliveryConfigurations = logDeliveryConfigurationsBuffer
            } else {
                logDeliveryConfigurations = []
            }
        } else {
            logDeliveryConfigurations = nil
        }
    }
}
