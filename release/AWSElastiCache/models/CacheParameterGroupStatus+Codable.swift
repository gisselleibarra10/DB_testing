// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ElastiCacheClientTypes.CacheParameterGroupStatus: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cacheNodeIdsToReboot = "CacheNodeIdsToReboot"
        case cacheParameterGroupName = "CacheParameterGroupName"
        case parameterApplyStatus = "ParameterApplyStatus"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let cacheNodeIdsToReboot = cacheNodeIdsToReboot {
            var cacheNodeIdsToRebootContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("CacheNodeIdsToReboot"))
            for (index0, string0) in cacheNodeIdsToReboot.enumerated() {
                try cacheNodeIdsToRebootContainer.encode(string0, forKey: ClientRuntime.Key("CacheNodeId.\(index0.advanced(by: 1))"))
            }
        }
        if let cacheParameterGroupName = cacheParameterGroupName {
            try container.encode(cacheParameterGroupName, forKey: ClientRuntime.Key("CacheParameterGroupName"))
        }
        if let parameterApplyStatus = parameterApplyStatus {
            try container.encode(parameterApplyStatus, forKey: ClientRuntime.Key("ParameterApplyStatus"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let cacheParameterGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cacheParameterGroupName)
        cacheParameterGroupName = cacheParameterGroupNameDecoded
        let parameterApplyStatusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .parameterApplyStatus)
        parameterApplyStatus = parameterApplyStatusDecoded
        if containerValues.contains(.cacheNodeIdsToReboot) {
            struct KeyVal0{struct CacheNodeId{}}
            let cacheNodeIdsToRebootWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.CacheNodeId>.CodingKeys.self, forKey: .cacheNodeIdsToReboot)
            if let cacheNodeIdsToRebootWrappedContainer = cacheNodeIdsToRebootWrappedContainer {
                let cacheNodeIdsToRebootContainer = try cacheNodeIdsToRebootWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var cacheNodeIdsToRebootBuffer:[Swift.String]? = nil
                if let cacheNodeIdsToRebootContainer = cacheNodeIdsToRebootContainer {
                    cacheNodeIdsToRebootBuffer = [Swift.String]()
                    for stringContainer0 in cacheNodeIdsToRebootContainer {
                        cacheNodeIdsToRebootBuffer?.append(stringContainer0)
                    }
                }
                cacheNodeIdsToReboot = cacheNodeIdsToRebootBuffer
            } else {
                cacheNodeIdsToReboot = []
            }
        } else {
            cacheNodeIdsToReboot = nil
        }
    }
}
