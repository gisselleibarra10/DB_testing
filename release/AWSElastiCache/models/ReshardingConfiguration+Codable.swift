// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ElastiCacheClientTypes.ReshardingConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nodeGroupId = "NodeGroupId"
        case preferredAvailabilityZones = "PreferredAvailabilityZones"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let nodeGroupId = nodeGroupId {
            try container.encode(nodeGroupId, forKey: ClientRuntime.Key("NodeGroupId"))
        }
        if let preferredAvailabilityZones = preferredAvailabilityZones {
            var preferredAvailabilityZonesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("PreferredAvailabilityZones"))
            for (index0, string0) in preferredAvailabilityZones.enumerated() {
                try preferredAvailabilityZonesContainer.encode(string0, forKey: ClientRuntime.Key("AvailabilityZone.\(index0.advanced(by: 1))"))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nodeGroupIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nodeGroupId)
        nodeGroupId = nodeGroupIdDecoded
        if containerValues.contains(.preferredAvailabilityZones) {
            struct KeyVal0{struct AvailabilityZone{}}
            let preferredAvailabilityZonesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.AvailabilityZone>.CodingKeys.self, forKey: .preferredAvailabilityZones)
            if let preferredAvailabilityZonesWrappedContainer = preferredAvailabilityZonesWrappedContainer {
                let preferredAvailabilityZonesContainer = try preferredAvailabilityZonesWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var preferredAvailabilityZonesBuffer:[Swift.String]? = nil
                if let preferredAvailabilityZonesContainer = preferredAvailabilityZonesContainer {
                    preferredAvailabilityZonesBuffer = [Swift.String]()
                    for stringContainer0 in preferredAvailabilityZonesContainer {
                        preferredAvailabilityZonesBuffer?.append(stringContainer0)
                    }
                }
                preferredAvailabilityZones = preferredAvailabilityZonesBuffer
            } else {
                preferredAvailabilityZones = []
            }
        } else {
            preferredAvailabilityZones = nil
        }
    }
}
