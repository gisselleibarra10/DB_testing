// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension ElastiCacheClientTypes {
    /// Represents a collection of cache nodes in a replication group. One node in the node group is the read/write primary node. All the other nodes are read-only Replica nodes.
    public struct NodeGroup: Swift.Equatable {
        /// The identifier for the node group (shard). A Redis (cluster mode disabled) replication group contains only 1 node group; therefore, the node group ID is 0001. A Redis (cluster mode enabled) replication group contains 1 to 90 node groups numbered 0001 to 0090. Optionally, the user can provide the id for a node group.
        public var nodeGroupId: Swift.String?
        /// A list containing information about individual nodes within the node group (shard).
        public var nodeGroupMembers: [ElastiCacheClientTypes.NodeGroupMember]?
        /// The endpoint of the primary node in this node group (shard).
        public var primaryEndpoint: ElastiCacheClientTypes.Endpoint?
        /// The endpoint of the replica nodes in this node group (shard).
        public var readerEndpoint: ElastiCacheClientTypes.Endpoint?
        /// The keyspace for this node group (shard).
        public var slots: Swift.String?
        /// The current state of this replication group - creating, available, modifying, deleting.
        public var status: Swift.String?

        public init (
            nodeGroupId: Swift.String? = nil,
            nodeGroupMembers: [ElastiCacheClientTypes.NodeGroupMember]? = nil,
            primaryEndpoint: ElastiCacheClientTypes.Endpoint? = nil,
            readerEndpoint: ElastiCacheClientTypes.Endpoint? = nil,
            slots: Swift.String? = nil,
            status: Swift.String? = nil
        )
        {
            self.nodeGroupId = nodeGroupId
            self.nodeGroupMembers = nodeGroupMembers
            self.primaryEndpoint = primaryEndpoint
            self.readerEndpoint = readerEndpoint
            self.slots = slots
            self.status = status
        }
    }

}
