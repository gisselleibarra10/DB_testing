// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeCacheClustersOutputResponseBody: Swift.Equatable {
    let marker: Swift.String?
    let cacheClusters: [ElastiCacheClientTypes.CacheCluster]?
}

extension DescribeCacheClustersOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cacheClusters = "CacheClusters"
        case marker = "Marker"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeCacheClustersResult"))
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
        if containerValues.contains(.cacheClusters) {
            struct KeyVal0{struct CacheCluster{}}
            let cacheClustersWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.CacheCluster>.CodingKeys.self, forKey: .cacheClusters)
            if let cacheClustersWrappedContainer = cacheClustersWrappedContainer {
                let cacheClustersContainer = try cacheClustersWrappedContainer.decodeIfPresent([ElastiCacheClientTypes.CacheCluster].self, forKey: .member)
                var cacheClustersBuffer:[ElastiCacheClientTypes.CacheCluster]? = nil
                if let cacheClustersContainer = cacheClustersContainer {
                    cacheClustersBuffer = [ElastiCacheClientTypes.CacheCluster]()
                    for structureContainer0 in cacheClustersContainer {
                        cacheClustersBuffer?.append(structureContainer0)
                    }
                }
                cacheClusters = cacheClustersBuffer
            } else {
                cacheClusters = []
            }
        } else {
            cacheClusters = nil
        }
    }
}
