// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ElastiCacheClientTypes.NodeGroup: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nodeGroupId = "NodeGroupId"
        case nodeGroupMembers = "NodeGroupMembers"
        case primaryEndpoint = "PrimaryEndpoint"
        case readerEndpoint = "ReaderEndpoint"
        case slots = "Slots"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let nodeGroupId = nodeGroupId {
            try container.encode(nodeGroupId, forKey: ClientRuntime.Key("NodeGroupId"))
        }
        if let nodeGroupMembers = nodeGroupMembers {
            var nodeGroupMembersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("NodeGroupMembers"))
            for (index0, nodegroupmember0) in nodeGroupMembers.enumerated() {
                try nodeGroupMembersContainer.encode(nodegroupmember0, forKey: ClientRuntime.Key("NodeGroupMember.\(index0.advanced(by: 1))"))
            }
        }
        if let primaryEndpoint = primaryEndpoint {
            try container.encode(primaryEndpoint, forKey: ClientRuntime.Key("PrimaryEndpoint"))
        }
        if let readerEndpoint = readerEndpoint {
            try container.encode(readerEndpoint, forKey: ClientRuntime.Key("ReaderEndpoint"))
        }
        if let slots = slots {
            try container.encode(slots, forKey: ClientRuntime.Key("Slots"))
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nodeGroupIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nodeGroupId)
        nodeGroupId = nodeGroupIdDecoded
        let statusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .status)
        status = statusDecoded
        let primaryEndpointDecoded = try containerValues.decodeIfPresent(ElastiCacheClientTypes.Endpoint.self, forKey: .primaryEndpoint)
        primaryEndpoint = primaryEndpointDecoded
        let readerEndpointDecoded = try containerValues.decodeIfPresent(ElastiCacheClientTypes.Endpoint.self, forKey: .readerEndpoint)
        readerEndpoint = readerEndpointDecoded
        let slotsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .slots)
        slots = slotsDecoded
        if containerValues.contains(.nodeGroupMembers) {
            struct KeyVal0{struct NodeGroupMember{}}
            let nodeGroupMembersWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.NodeGroupMember>.CodingKeys.self, forKey: .nodeGroupMembers)
            if let nodeGroupMembersWrappedContainer = nodeGroupMembersWrappedContainer {
                let nodeGroupMembersContainer = try nodeGroupMembersWrappedContainer.decodeIfPresent([ElastiCacheClientTypes.NodeGroupMember].self, forKey: .member)
                var nodeGroupMembersBuffer:[ElastiCacheClientTypes.NodeGroupMember]? = nil
                if let nodeGroupMembersContainer = nodeGroupMembersContainer {
                    nodeGroupMembersBuffer = [ElastiCacheClientTypes.NodeGroupMember]()
                    for structureContainer0 in nodeGroupMembersContainer {
                        nodeGroupMembersBuffer?.append(structureContainer0)
                    }
                }
                nodeGroupMembers = nodeGroupMembersBuffer
            } else {
                nodeGroupMembers = []
            }
        } else {
            nodeGroupMembers = nil
        }
    }
}
