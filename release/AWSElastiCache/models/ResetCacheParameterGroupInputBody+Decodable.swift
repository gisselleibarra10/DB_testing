// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ResetCacheParameterGroupInputBody: Swift.Equatable {
    let cacheParameterGroupName: Swift.String?
    let resetAllParameters: Swift.Bool
    let parameterNameValues: [ElastiCacheClientTypes.ParameterNameValue]?
}

extension ResetCacheParameterGroupInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cacheParameterGroupName = "CacheParameterGroupName"
        case parameterNameValues = "ParameterNameValues"
        case resetAllParameters = "ResetAllParameters"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let cacheParameterGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cacheParameterGroupName)
        cacheParameterGroupName = cacheParameterGroupNameDecoded
        let resetAllParametersDecoded = try containerValues.decode(Swift.Bool.self, forKey: .resetAllParameters)
        resetAllParameters = resetAllParametersDecoded
        if containerValues.contains(.parameterNameValues) {
            struct KeyVal0{struct ParameterNameValue{}}
            let parameterNameValuesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.ParameterNameValue>.CodingKeys.self, forKey: .parameterNameValues)
            if let parameterNameValuesWrappedContainer = parameterNameValuesWrappedContainer {
                let parameterNameValuesContainer = try parameterNameValuesWrappedContainer.decodeIfPresent([ElastiCacheClientTypes.ParameterNameValue].self, forKey: .member)
                var parameterNameValuesBuffer:[ElastiCacheClientTypes.ParameterNameValue]? = nil
                if let parameterNameValuesContainer = parameterNameValuesContainer {
                    parameterNameValuesBuffer = [ElastiCacheClientTypes.ParameterNameValue]()
                    for structureContainer0 in parameterNameValuesContainer {
                        parameterNameValuesBuffer?.append(structureContainer0)
                    }
                }
                parameterNameValues = parameterNameValuesBuffer
            } else {
                parameterNameValues = []
            }
        } else {
            parameterNameValues = nil
        }
    }
}
