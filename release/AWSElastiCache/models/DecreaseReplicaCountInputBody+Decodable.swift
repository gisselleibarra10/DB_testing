// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DecreaseReplicaCountInputBody: Swift.Equatable {
    let replicationGroupId: Swift.String?
    let newReplicaCount: Swift.Int?
    let replicaConfiguration: [ElastiCacheClientTypes.ConfigureShard]?
    let replicasToRemove: [Swift.String]?
    let applyImmediately: Swift.Bool
}

extension DecreaseReplicaCountInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applyImmediately = "ApplyImmediately"
        case newReplicaCount = "NewReplicaCount"
        case replicaConfiguration = "ReplicaConfiguration"
        case replicasToRemove = "ReplicasToRemove"
        case replicationGroupId = "ReplicationGroupId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let replicationGroupIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .replicationGroupId)
        replicationGroupId = replicationGroupIdDecoded
        let newReplicaCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .newReplicaCount)
        newReplicaCount = newReplicaCountDecoded
        if containerValues.contains(.replicaConfiguration) {
            struct KeyVal0{struct ConfigureShard{}}
            let replicaConfigurationWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.ConfigureShard>.CodingKeys.self, forKey: .replicaConfiguration)
            if let replicaConfigurationWrappedContainer = replicaConfigurationWrappedContainer {
                let replicaConfigurationContainer = try replicaConfigurationWrappedContainer.decodeIfPresent([ElastiCacheClientTypes.ConfigureShard].self, forKey: .member)
                var replicaConfigurationBuffer:[ElastiCacheClientTypes.ConfigureShard]? = nil
                if let replicaConfigurationContainer = replicaConfigurationContainer {
                    replicaConfigurationBuffer = [ElastiCacheClientTypes.ConfigureShard]()
                    for structureContainer0 in replicaConfigurationContainer {
                        replicaConfigurationBuffer?.append(structureContainer0)
                    }
                }
                replicaConfiguration = replicaConfigurationBuffer
            } else {
                replicaConfiguration = []
            }
        } else {
            replicaConfiguration = nil
        }
        if containerValues.contains(.replicasToRemove) {
            struct KeyVal0{struct member{}}
            let replicasToRemoveWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .replicasToRemove)
            if let replicasToRemoveWrappedContainer = replicasToRemoveWrappedContainer {
                let replicasToRemoveContainer = try replicasToRemoveWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var replicasToRemoveBuffer:[Swift.String]? = nil
                if let replicasToRemoveContainer = replicasToRemoveContainer {
                    replicasToRemoveBuffer = [Swift.String]()
                    for stringContainer0 in replicasToRemoveContainer {
                        replicasToRemoveBuffer?.append(stringContainer0)
                    }
                }
                replicasToRemove = replicasToRemoveBuffer
            } else {
                replicasToRemove = []
            }
        } else {
            replicasToRemove = nil
        }
        let applyImmediatelyDecoded = try containerValues.decode(Swift.Bool.self, forKey: .applyImmediately)
        applyImmediately = applyImmediatelyDecoded
    }
}
