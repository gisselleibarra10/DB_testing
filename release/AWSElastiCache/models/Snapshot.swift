// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ElastiCacheClientTypes {
    /// Represents a copy of an entire Redis cluster as of the time when the snapshot was taken.
    public struct Snapshot: Swift.Equatable {
        /// The ARN (Amazon Resource Name) of the snapshot.
        public var aRN: Swift.String?
        ///  If you are running Redis engine version 6.0 or later, set this parameter to yes if you want to opt-in to the next auto minor version upgrade campaign. This parameter is disabled for previous versions.
        public var autoMinorVersionUpgrade: Swift.Bool
        /// Indicates the status of automatic failover for the source Redis replication group.
        public var automaticFailover: ElastiCacheClientTypes.AutomaticFailoverStatus?
        /// The date and time when the source cluster was created.
        public var cacheClusterCreateTime: ClientRuntime.Date?
        /// The user-supplied identifier of the source cluster.
        public var cacheClusterId: Swift.String?
        /// The name of the compute and memory capacity node type for the source cluster. The following node types are supported by ElastiCache. Generally speaking, the current generation types provide more memory and computational power at lower cost when compared to their equivalent previous generation counterparts.
        ///
        /// * General purpose:
        ///
        /// * Current generation: M6g node types (available only for Redis engine version 5.0.6 onward and for Memcached engine version 1.5.16 onward). cache.m6g.large, cache.m6g.xlarge, cache.m6g.2xlarge, cache.m6g.4xlarge, cache.m6g.8xlarge, cache.m6g.12xlarge, cache.m6g.16xlarge For region availability, see [Supported Node Types](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/CacheNodes.SupportedTypes.html#CacheNodes.SupportedTypesByRegion) M5 node types: cache.m5.large, cache.m5.xlarge, cache.m5.2xlarge, cache.m5.4xlarge, cache.m5.12xlarge, cache.m5.24xlarge M4 node types: cache.m4.large, cache.m4.xlarge, cache.m4.2xlarge, cache.m4.4xlarge, cache.m4.10xlarge T4g node types (available only for Redis engine version 5.0.6 onward and Memcached engine version 1.5.16 onward): cache.t4g.micro, cache.t4g.small, cache.t4g.medium T3 node types: cache.t3.micro, cache.t3.small, cache.t3.medium T2 node types: cache.t2.micro, cache.t2.small, cache.t2.medium
        ///
        /// * Previous generation: (not recommended. Existing clusters are still supported but creation of new clusters is not supported for these types.) T1 node types: cache.t1.micro M1 node types: cache.m1.small, cache.m1.medium, cache.m1.large, cache.m1.xlarge M3 node types: cache.m3.medium, cache.m3.large, cache.m3.xlarge, cache.m3.2xlarge
        ///
        ///
        ///
        ///
        /// * Compute optimized:
        ///
        /// * Previous generation: (not recommended. Existing clusters are still supported but creation of new clusters is not supported for these types.) C1 node types: cache.c1.xlarge
        ///
        ///
        ///
        ///
        /// * Memory optimized with data tiering:
        ///
        /// * Current generation: R6gd node types (available only for Redis engine version 6.2 onward). cache.r6gd.xlarge, cache.r6gd.2xlarge, cache.r6gd.4xlarge, cache.r6gd.8xlarge, cache.r6gd.12xlarge, cache.r6gd.16xlarge
        ///
        ///
        ///
        ///
        /// * Memory optimized:
        ///
        /// * Current generation: R6g node types (available only for Redis engine version 5.0.6 onward and for Memcached engine version 1.5.16 onward). cache.r6g.large, cache.r6g.xlarge, cache.r6g.2xlarge, cache.r6g.4xlarge, cache.r6g.8xlarge, cache.r6g.12xlarge, cache.r6g.16xlarge For region availability, see [Supported Node Types](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/CacheNodes.SupportedTypes.html#CacheNodes.SupportedTypesByRegion) For region availability, see [Supported Node Types](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/CacheNodes.SupportedTypes.html#CacheNodes.SupportedTypesByRegion) R5 node types: cache.r5.large, cache.r5.xlarge, cache.r5.2xlarge, cache.r5.4xlarge, cache.r5.12xlarge, cache.r5.24xlarge R4 node types: cache.r4.large, cache.r4.xlarge, cache.r4.2xlarge, cache.r4.4xlarge, cache.r4.8xlarge, cache.r4.16xlarge
        ///
        /// * Previous generation: (not recommended. Existing clusters are still supported but creation of new clusters is not supported for these types.) M2 node types: cache.m2.xlarge, cache.m2.2xlarge, cache.m2.4xlarge R3 node types: cache.r3.large, cache.r3.xlarge, cache.r3.2xlarge,
        ///
        ///
        /// cache.r3.4xlarge, cache.r3.8xlarge
        ///
        ///
        ///
        ///
        ///
        /// Additional node type info
        ///
        /// * All current generation instance types are created in Amazon VPC by default.
        ///
        /// * Redis append-only files (AOF) are not supported for T1 or T2 instances.
        ///
        /// * Redis Multi-AZ with automatic failover is not supported on T1 instances.
        ///
        /// * Redis configuration variables appendonly and appendfsync are not supported on Redis version 2.8.22 and later.
        public var cacheNodeType: Swift.String?
        /// The cache parameter group that is associated with the source cluster.
        public var cacheParameterGroupName: Swift.String?
        /// The name of the cache subnet group associated with the source cluster.
        public var cacheSubnetGroupName: Swift.String?
        /// Enables data tiering. Data tiering is only supported for replication groups using the r6gd node type. This parameter must be set to true when using r6gd nodes. For more information, see [Data tiering](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/data-tiering.html).
        public var dataTiering: ElastiCacheClientTypes.DataTieringStatus?
        /// The name of the cache engine (memcached or redis) used by the source cluster.
        public var engine: Swift.String?
        /// The version of the cache engine version that is used by the source cluster.
        public var engineVersion: Swift.String?
        /// The ID of the KMS key used to encrypt the snapshot.
        public var kmsKeyId: Swift.String?
        /// A list of the cache nodes in the source cluster.
        public var nodeSnapshots: [ElastiCacheClientTypes.NodeSnapshot]?
        /// The number of cache nodes in the source cluster. For clusters running Redis, this value must be 1. For clusters running Memcached, this value must be between 1 and 40.
        public var numCacheNodes: Swift.Int?
        /// The number of node groups (shards) in this snapshot. When restoring from a snapshot, the number of node groups (shards) in the snapshot and in the restored replication group must be the same.
        public var numNodeGroups: Swift.Int?
        /// The port number used by each cache nodes in the source cluster.
        public var port: Swift.Int?
        /// The name of the Availability Zone in which the source cluster is located.
        public var preferredAvailabilityZone: Swift.String?
        /// Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period. Valid values for ddd are:
        ///
        /// * sun
        ///
        /// * mon
        ///
        /// * tue
        ///
        /// * wed
        ///
        /// * thu
        ///
        /// * fri
        ///
        /// * sat
        ///
        ///
        /// Example: sun:23:00-mon:01:30
        public var preferredMaintenanceWindow: Swift.String?
        /// The ARN (Amazon Resource Name) of the preferred outpost.
        public var preferredOutpostArn: Swift.String?
        /// A description of the source replication group.
        public var replicationGroupDescription: Swift.String?
        /// The unique identifier of the source replication group.
        public var replicationGroupId: Swift.String?
        /// The name of a snapshot. For an automatic snapshot, the name is system-generated. For a manual snapshot, this is the user-provided name.
        public var snapshotName: Swift.String?
        /// For an automatic snapshot, the number of days for which ElastiCache retains the snapshot before deleting it. For manual snapshots, this field reflects the SnapshotRetentionLimit for the source cluster when the snapshot was created. This field is otherwise ignored: Manual snapshots do not expire, and can only be deleted using the DeleteSnapshot operation. Important If the value of SnapshotRetentionLimit is set to zero (0), backups are turned off.
        public var snapshotRetentionLimit: Swift.Int?
        /// Indicates whether the snapshot is from an automatic backup (automated) or was created manually (manual).
        public var snapshotSource: Swift.String?
        /// The status of the snapshot. Valid values: creating | available | restoring | copying | deleting.
        public var snapshotStatus: Swift.String?
        /// The daily time range during which ElastiCache takes daily snapshots of the source cluster.
        public var snapshotWindow: Swift.String?
        /// The Amazon Resource Name (ARN) for the topic used by the source cluster for publishing notifications.
        public var topicArn: Swift.String?
        /// The Amazon Virtual Private Cloud identifier (VPC ID) of the cache subnet group for the source cluster.
        public var vpcId: Swift.String?

        public init (
            aRN: Swift.String? = nil,
            autoMinorVersionUpgrade: Swift.Bool = false,
            automaticFailover: ElastiCacheClientTypes.AutomaticFailoverStatus? = nil,
            cacheClusterCreateTime: ClientRuntime.Date? = nil,
            cacheClusterId: Swift.String? = nil,
            cacheNodeType: Swift.String? = nil,
            cacheParameterGroupName: Swift.String? = nil,
            cacheSubnetGroupName: Swift.String? = nil,
            dataTiering: ElastiCacheClientTypes.DataTieringStatus? = nil,
            engine: Swift.String? = nil,
            engineVersion: Swift.String? = nil,
            kmsKeyId: Swift.String? = nil,
            nodeSnapshots: [ElastiCacheClientTypes.NodeSnapshot]? = nil,
            numCacheNodes: Swift.Int? = nil,
            numNodeGroups: Swift.Int? = nil,
            port: Swift.Int? = nil,
            preferredAvailabilityZone: Swift.String? = nil,
            preferredMaintenanceWindow: Swift.String? = nil,
            preferredOutpostArn: Swift.String? = nil,
            replicationGroupDescription: Swift.String? = nil,
            replicationGroupId: Swift.String? = nil,
            snapshotName: Swift.String? = nil,
            snapshotRetentionLimit: Swift.Int? = nil,
            snapshotSource: Swift.String? = nil,
            snapshotStatus: Swift.String? = nil,
            snapshotWindow: Swift.String? = nil,
            topicArn: Swift.String? = nil,
            vpcId: Swift.String? = nil
        )
        {
            self.aRN = aRN
            self.autoMinorVersionUpgrade = autoMinorVersionUpgrade
            self.automaticFailover = automaticFailover
            self.cacheClusterCreateTime = cacheClusterCreateTime
            self.cacheClusterId = cacheClusterId
            self.cacheNodeType = cacheNodeType
            self.cacheParameterGroupName = cacheParameterGroupName
            self.cacheSubnetGroupName = cacheSubnetGroupName
            self.dataTiering = dataTiering
            self.engine = engine
            self.engineVersion = engineVersion
            self.kmsKeyId = kmsKeyId
            self.nodeSnapshots = nodeSnapshots
            self.numCacheNodes = numCacheNodes
            self.numNodeGroups = numNodeGroups
            self.port = port
            self.preferredAvailabilityZone = preferredAvailabilityZone
            self.preferredMaintenanceWindow = preferredMaintenanceWindow
            self.preferredOutpostArn = preferredOutpostArn
            self.replicationGroupDescription = replicationGroupDescription
            self.replicationGroupId = replicationGroupId
            self.snapshotName = snapshotName
            self.snapshotRetentionLimit = snapshotRetentionLimit
            self.snapshotSource = snapshotSource
            self.snapshotStatus = snapshotStatus
            self.snapshotWindow = snapshotWindow
            self.topicArn = topicArn
            self.vpcId = vpcId
        }
    }

}
