// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension ElastiCacheClientTypes {
    /// A parameter that has a different value for each cache node type it is applied to. For example, in a Redis cluster, a cache.m1.large cache node type would have a larger maxmemory value than a cache.m1.small type.
    public struct CacheNodeTypeSpecificParameter: Swift.Equatable {
        /// The valid range of values for the parameter.
        public var allowedValues: Swift.String?
        /// A list of cache node types and their corresponding values for this parameter.
        public var cacheNodeTypeSpecificValues: [ElastiCacheClientTypes.CacheNodeTypeSpecificValue]?
        /// Indicates whether a change to the parameter is applied immediately or requires a reboot for the change to be applied. You can force a reboot or wait until the next maintenance window's reboot. For more information, see [Rebooting a Cluster](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Clusters.Rebooting.html).
        public var changeType: ElastiCacheClientTypes.ChangeType?
        /// The valid data type for the parameter.
        public var dataType: Swift.String?
        /// A description of the parameter.
        public var description: Swift.String?
        /// Indicates whether (true) or not (false) the parameter can be modified. Some parameters have security or operational implications that prevent them from being changed.
        public var isModifiable: Swift.Bool
        /// The earliest cache engine version to which the parameter can apply.
        public var minimumEngineVersion: Swift.String?
        /// The name of the parameter.
        public var parameterName: Swift.String?
        /// The source of the parameter value.
        public var source: Swift.String?

        public init (
            allowedValues: Swift.String? = nil,
            cacheNodeTypeSpecificValues: [ElastiCacheClientTypes.CacheNodeTypeSpecificValue]? = nil,
            changeType: ElastiCacheClientTypes.ChangeType? = nil,
            dataType: Swift.String? = nil,
            description: Swift.String? = nil,
            isModifiable: Swift.Bool = false,
            minimumEngineVersion: Swift.String? = nil,
            parameterName: Swift.String? = nil,
            source: Swift.String? = nil
        )
        {
            self.allowedValues = allowedValues
            self.cacheNodeTypeSpecificValues = cacheNodeTypeSpecificValues
            self.changeType = changeType
            self.dataType = dataType
            self.description = description
            self.isModifiable = isModifiable
            self.minimumEngineVersion = minimumEngineVersion
            self.parameterName = parameterName
            self.source = source
        }
    }

}
