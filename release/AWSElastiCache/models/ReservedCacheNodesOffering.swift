// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension ElastiCacheClientTypes {
    /// Describes all of the attributes of a reserved cache node offering.
    public struct ReservedCacheNodesOffering: Swift.Equatable {
        /// The cache node type for the reserved cache node. The following node types are supported by ElastiCache. Generally speaking, the current generation types provide more memory and computational power at lower cost when compared to their equivalent previous generation counterparts.
        ///
        /// * General purpose:
        ///
        /// * Current generation: M6g node types: (available only for Redis engine version 5.0.6 onward and for Memcached engine version 1.5.16 onward): cache.m6g.large, cache.m6g.xlarge, cache.m6g.2xlarge, cache.m6g.4xlarge, cache.m6g.8xlarge, cache.m6g.12xlarge, cache.m6g.16xlarge For region availability, see [Supported Node Types](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/CacheNodes.SupportedTypes.html#CacheNodes.SupportedTypesByRegion) M5 node types: cache.m5.large, cache.m5.xlarge, cache.m5.2xlarge, cache.m5.4xlarge, cache.m5.12xlarge, cache.m5.24xlarge M4 node types: cache.m4.large, cache.m4.xlarge, cache.m4.2xlarge, cache.m4.4xlarge, cache.m4.10xlarge T4g node types (available only for Redis engine version 5.0.6 onward and Memcached engine version 1.5.16 onward): cache.t4g.micro, cache.t4g.small, cache.t4g.medium T3 node types: cache.t3.micro, cache.t3.small, cache.t3.medium T2 node types: cache.t2.micro, cache.t2.small, cache.t2.medium
        ///
        /// * Previous generation: (not recommended. Existing clusters are still supported but creation of new clusters is not supported for these types.) T1 node types: cache.t1.micro M1 node types: cache.m1.small, cache.m1.medium, cache.m1.large, cache.m1.xlarge M3 node types: cache.m3.medium, cache.m3.large, cache.m3.xlarge, cache.m3.2xlarge
        ///
        ///
        ///
        ///
        /// * Compute optimized:
        ///
        /// * Previous generation: (not recommended. Existing clusters are still supported but creation of new clusters is not supported for these types.) C1 node types: cache.c1.xlarge
        ///
        ///
        ///
        ///
        /// * Memory optimized with data tiering:
        ///
        /// * Current generation: R6gd node types (available only for Redis engine version 6.2 onward). cache.r6gd.xlarge, cache.r6gd.2xlarge, cache.r6gd.4xlarge, cache.r6gd.8xlarge, cache.r6gd.12xlarge, cache.r6gd.16xlarge
        ///
        ///
        ///
        ///
        /// * Memory optimized:
        ///
        /// * Current generation: R6g node types (available only for Redis engine version 5.0.6 onward and for Memcached engine version 1.5.16 onward). cache.r6g.large, cache.r6g.xlarge, cache.r6g.2xlarge, cache.r6g.4xlarge, cache.r6g.8xlarge, cache.r6g.12xlarge, cache.r6g.16xlarge For region availability, see [Supported Node Types](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/CacheNodes.SupportedTypes.html#CacheNodes.SupportedTypesByRegion) R5 node types: cache.r5.large, cache.r5.xlarge, cache.r5.2xlarge, cache.r5.4xlarge, cache.r5.12xlarge, cache.r5.24xlarge R4 node types: cache.r4.large, cache.r4.xlarge, cache.r4.2xlarge, cache.r4.4xlarge, cache.r4.8xlarge, cache.r4.16xlarge
        ///
        /// * Previous generation: (not recommended. Existing clusters are still supported but creation of new clusters is not supported for these types.) M2 node types: cache.m2.xlarge, cache.m2.2xlarge, cache.m2.4xlarge R3 node types: cache.r3.large, cache.r3.xlarge, cache.r3.2xlarge,
        ///
        ///
        /// cache.r3.4xlarge, cache.r3.8xlarge
        ///
        ///
        ///
        ///
        ///
        /// Additional node type info
        ///
        /// * All current generation instance types are created in Amazon VPC by default.
        ///
        /// * Redis append-only files (AOF) are not supported for T1 or T2 instances.
        ///
        /// * Redis Multi-AZ with automatic failover is not supported on T1 instances.
        ///
        /// * Redis configuration variables appendonly and appendfsync are not supported on Redis version 2.8.22 and later.
        public var cacheNodeType: Swift.String?
        /// The duration of the offering. in seconds.
        public var duration: Swift.Int
        /// The fixed price charged for this offering.
        public var fixedPrice: Swift.Double
        /// The offering type.
        public var offeringType: Swift.String?
        /// The cache engine used by the offering.
        public var productDescription: Swift.String?
        /// The recurring price charged to run this reserved cache node.
        public var recurringCharges: [ElastiCacheClientTypes.RecurringCharge]?
        /// A unique identifier for the reserved cache node offering.
        public var reservedCacheNodesOfferingId: Swift.String?
        /// The hourly price charged for this offering.
        public var usagePrice: Swift.Double

        public init (
            cacheNodeType: Swift.String? = nil,
            duration: Swift.Int = 0,
            fixedPrice: Swift.Double = 0.0,
            offeringType: Swift.String? = nil,
            productDescription: Swift.String? = nil,
            recurringCharges: [ElastiCacheClientTypes.RecurringCharge]? = nil,
            reservedCacheNodesOfferingId: Swift.String? = nil,
            usagePrice: Swift.Double = 0.0
        )
        {
            self.cacheNodeType = cacheNodeType
            self.duration = duration
            self.fixedPrice = fixedPrice
            self.offeringType = offeringType
            self.productDescription = productDescription
            self.recurringCharges = recurringCharges
            self.reservedCacheNodesOfferingId = reservedCacheNodesOfferingId
            self.usagePrice = usagePrice
        }
    }

}
