// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeReservedCacheNodesOfferingsOutputResponseBody: Swift.Equatable {
    let marker: Swift.String?
    let reservedCacheNodesOfferings: [ElastiCacheClientTypes.ReservedCacheNodesOffering]?
}

extension DescribeReservedCacheNodesOfferingsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case marker = "Marker"
        case reservedCacheNodesOfferings = "ReservedCacheNodesOfferings"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeReservedCacheNodesOfferingsResult"))
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
        if containerValues.contains(.reservedCacheNodesOfferings) {
            struct KeyVal0{struct ReservedCacheNodesOffering{}}
            let reservedCacheNodesOfferingsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.ReservedCacheNodesOffering>.CodingKeys.self, forKey: .reservedCacheNodesOfferings)
            if let reservedCacheNodesOfferingsWrappedContainer = reservedCacheNodesOfferingsWrappedContainer {
                let reservedCacheNodesOfferingsContainer = try reservedCacheNodesOfferingsWrappedContainer.decodeIfPresent([ElastiCacheClientTypes.ReservedCacheNodesOffering].self, forKey: .member)
                var reservedCacheNodesOfferingsBuffer:[ElastiCacheClientTypes.ReservedCacheNodesOffering]? = nil
                if let reservedCacheNodesOfferingsContainer = reservedCacheNodesOfferingsContainer {
                    reservedCacheNodesOfferingsBuffer = [ElastiCacheClientTypes.ReservedCacheNodesOffering]()
                    for structureContainer0 in reservedCacheNodesOfferingsContainer {
                        reservedCacheNodesOfferingsBuffer?.append(structureContainer0)
                    }
                }
                reservedCacheNodesOfferings = reservedCacheNodesOfferingsBuffer
            } else {
                reservedCacheNodesOfferings = []
            }
        } else {
            reservedCacheNodesOfferings = nil
        }
    }
}
