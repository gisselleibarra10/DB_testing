// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DecreaseNodeGroupsInGlobalReplicationGroupInputBody: Swift.Equatable {
    let globalReplicationGroupId: Swift.String?
    let nodeGroupCount: Swift.Int
    let globalNodeGroupsToRemove: [Swift.String]?
    let globalNodeGroupsToRetain: [Swift.String]?
    let applyImmediately: Swift.Bool
}

extension DecreaseNodeGroupsInGlobalReplicationGroupInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applyImmediately = "ApplyImmediately"
        case globalNodeGroupsToRemove = "GlobalNodeGroupsToRemove"
        case globalNodeGroupsToRetain = "GlobalNodeGroupsToRetain"
        case globalReplicationGroupId = "GlobalReplicationGroupId"
        case nodeGroupCount = "NodeGroupCount"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let globalReplicationGroupIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .globalReplicationGroupId)
        globalReplicationGroupId = globalReplicationGroupIdDecoded
        let nodeGroupCountDecoded = try containerValues.decode(Swift.Int.self, forKey: .nodeGroupCount)
        nodeGroupCount = nodeGroupCountDecoded
        if containerValues.contains(.globalNodeGroupsToRemove) {
            struct KeyVal0{struct GlobalNodeGroupId{}}
            let globalNodeGroupsToRemoveWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.GlobalNodeGroupId>.CodingKeys.self, forKey: .globalNodeGroupsToRemove)
            if let globalNodeGroupsToRemoveWrappedContainer = globalNodeGroupsToRemoveWrappedContainer {
                let globalNodeGroupsToRemoveContainer = try globalNodeGroupsToRemoveWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var globalNodeGroupsToRemoveBuffer:[Swift.String]? = nil
                if let globalNodeGroupsToRemoveContainer = globalNodeGroupsToRemoveContainer {
                    globalNodeGroupsToRemoveBuffer = [Swift.String]()
                    for stringContainer0 in globalNodeGroupsToRemoveContainer {
                        globalNodeGroupsToRemoveBuffer?.append(stringContainer0)
                    }
                }
                globalNodeGroupsToRemove = globalNodeGroupsToRemoveBuffer
            } else {
                globalNodeGroupsToRemove = []
            }
        } else {
            globalNodeGroupsToRemove = nil
        }
        if containerValues.contains(.globalNodeGroupsToRetain) {
            struct KeyVal0{struct GlobalNodeGroupId{}}
            let globalNodeGroupsToRetainWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.GlobalNodeGroupId>.CodingKeys.self, forKey: .globalNodeGroupsToRetain)
            if let globalNodeGroupsToRetainWrappedContainer = globalNodeGroupsToRetainWrappedContainer {
                let globalNodeGroupsToRetainContainer = try globalNodeGroupsToRetainWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var globalNodeGroupsToRetainBuffer:[Swift.String]? = nil
                if let globalNodeGroupsToRetainContainer = globalNodeGroupsToRetainContainer {
                    globalNodeGroupsToRetainBuffer = [Swift.String]()
                    for stringContainer0 in globalNodeGroupsToRetainContainer {
                        globalNodeGroupsToRetainBuffer?.append(stringContainer0)
                    }
                }
                globalNodeGroupsToRetain = globalNodeGroupsToRetainBuffer
            } else {
                globalNodeGroupsToRetain = []
            }
        } else {
            globalNodeGroupsToRetain = nil
        }
        let applyImmediatelyDecoded = try containerValues.decode(Swift.Bool.self, forKey: .applyImmediately)
        applyImmediately = applyImmediatelyDecoded
    }
}
