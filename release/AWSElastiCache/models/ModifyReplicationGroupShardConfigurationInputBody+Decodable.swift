// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ModifyReplicationGroupShardConfigurationInputBody: Swift.Equatable {
    let replicationGroupId: Swift.String?
    let nodeGroupCount: Swift.Int
    let applyImmediately: Swift.Bool
    let reshardingConfiguration: [ElastiCacheClientTypes.ReshardingConfiguration]?
    let nodeGroupsToRemove: [Swift.String]?
    let nodeGroupsToRetain: [Swift.String]?
}

extension ModifyReplicationGroupShardConfigurationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applyImmediately = "ApplyImmediately"
        case nodeGroupCount = "NodeGroupCount"
        case nodeGroupsToRemove = "NodeGroupsToRemove"
        case nodeGroupsToRetain = "NodeGroupsToRetain"
        case replicationGroupId = "ReplicationGroupId"
        case reshardingConfiguration = "ReshardingConfiguration"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let replicationGroupIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .replicationGroupId)
        replicationGroupId = replicationGroupIdDecoded
        let nodeGroupCountDecoded = try containerValues.decode(Swift.Int.self, forKey: .nodeGroupCount)
        nodeGroupCount = nodeGroupCountDecoded
        let applyImmediatelyDecoded = try containerValues.decode(Swift.Bool.self, forKey: .applyImmediately)
        applyImmediately = applyImmediatelyDecoded
        if containerValues.contains(.reshardingConfiguration) {
            struct KeyVal0{struct ReshardingConfiguration{}}
            let reshardingConfigurationWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.ReshardingConfiguration>.CodingKeys.self, forKey: .reshardingConfiguration)
            if let reshardingConfigurationWrappedContainer = reshardingConfigurationWrappedContainer {
                let reshardingConfigurationContainer = try reshardingConfigurationWrappedContainer.decodeIfPresent([ElastiCacheClientTypes.ReshardingConfiguration].self, forKey: .member)
                var reshardingConfigurationBuffer:[ElastiCacheClientTypes.ReshardingConfiguration]? = nil
                if let reshardingConfigurationContainer = reshardingConfigurationContainer {
                    reshardingConfigurationBuffer = [ElastiCacheClientTypes.ReshardingConfiguration]()
                    for structureContainer0 in reshardingConfigurationContainer {
                        reshardingConfigurationBuffer?.append(structureContainer0)
                    }
                }
                reshardingConfiguration = reshardingConfigurationBuffer
            } else {
                reshardingConfiguration = []
            }
        } else {
            reshardingConfiguration = nil
        }
        if containerValues.contains(.nodeGroupsToRemove) {
            struct KeyVal0{struct NodeGroupToRemove{}}
            let nodeGroupsToRemoveWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.NodeGroupToRemove>.CodingKeys.self, forKey: .nodeGroupsToRemove)
            if let nodeGroupsToRemoveWrappedContainer = nodeGroupsToRemoveWrappedContainer {
                let nodeGroupsToRemoveContainer = try nodeGroupsToRemoveWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var nodeGroupsToRemoveBuffer:[Swift.String]? = nil
                if let nodeGroupsToRemoveContainer = nodeGroupsToRemoveContainer {
                    nodeGroupsToRemoveBuffer = [Swift.String]()
                    for stringContainer0 in nodeGroupsToRemoveContainer {
                        nodeGroupsToRemoveBuffer?.append(stringContainer0)
                    }
                }
                nodeGroupsToRemove = nodeGroupsToRemoveBuffer
            } else {
                nodeGroupsToRemove = []
            }
        } else {
            nodeGroupsToRemove = nil
        }
        if containerValues.contains(.nodeGroupsToRetain) {
            struct KeyVal0{struct NodeGroupToRetain{}}
            let nodeGroupsToRetainWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.NodeGroupToRetain>.CodingKeys.self, forKey: .nodeGroupsToRetain)
            if let nodeGroupsToRetainWrappedContainer = nodeGroupsToRetainWrappedContainer {
                let nodeGroupsToRetainContainer = try nodeGroupsToRetainWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var nodeGroupsToRetainBuffer:[Swift.String]? = nil
                if let nodeGroupsToRetainContainer = nodeGroupsToRetainContainer {
                    nodeGroupsToRetainBuffer = [Swift.String]()
                    for stringContainer0 in nodeGroupsToRetainContainer {
                        nodeGroupsToRetainBuffer?.append(stringContainer0)
                    }
                }
                nodeGroupsToRetain = nodeGroupsToRetainBuffer
            } else {
                nodeGroupsToRetain = []
            }
        } else {
            nodeGroupsToRetain = nil
        }
    }
}
