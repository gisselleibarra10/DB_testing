// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ElastiCacheClientTypes.Snapshot: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case aRN = "ARN"
        case autoMinorVersionUpgrade = "AutoMinorVersionUpgrade"
        case automaticFailover = "AutomaticFailover"
        case cacheClusterCreateTime = "CacheClusterCreateTime"
        case cacheClusterId = "CacheClusterId"
        case cacheNodeType = "CacheNodeType"
        case cacheParameterGroupName = "CacheParameterGroupName"
        case cacheSubnetGroupName = "CacheSubnetGroupName"
        case dataTiering = "DataTiering"
        case engine = "Engine"
        case engineVersion = "EngineVersion"
        case kmsKeyId = "KmsKeyId"
        case nodeSnapshots = "NodeSnapshots"
        case numCacheNodes = "NumCacheNodes"
        case numNodeGroups = "NumNodeGroups"
        case port = "Port"
        case preferredAvailabilityZone = "PreferredAvailabilityZone"
        case preferredMaintenanceWindow = "PreferredMaintenanceWindow"
        case preferredOutpostArn = "PreferredOutpostArn"
        case replicationGroupDescription = "ReplicationGroupDescription"
        case replicationGroupId = "ReplicationGroupId"
        case snapshotName = "SnapshotName"
        case snapshotRetentionLimit = "SnapshotRetentionLimit"
        case snapshotSource = "SnapshotSource"
        case snapshotStatus = "SnapshotStatus"
        case snapshotWindow = "SnapshotWindow"
        case topicArn = "TopicArn"
        case vpcId = "VpcId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let aRN = aRN {
            try container.encode(aRN, forKey: ClientRuntime.Key("ARN"))
        }
        if autoMinorVersionUpgrade != false {
            try container.encode(autoMinorVersionUpgrade, forKey: ClientRuntime.Key("AutoMinorVersionUpgrade"))
        }
        if let automaticFailover = automaticFailover {
            try container.encode(automaticFailover, forKey: ClientRuntime.Key("AutomaticFailover"))
        }
        if let cacheClusterCreateTime = cacheClusterCreateTime {
            try container.encode(ClientRuntime.TimestampWrapper(cacheClusterCreateTime, format: .dateTime), forKey: ClientRuntime.Key("cacheClusterCreateTime"))
        }
        if let cacheClusterId = cacheClusterId {
            try container.encode(cacheClusterId, forKey: ClientRuntime.Key("CacheClusterId"))
        }
        if let cacheNodeType = cacheNodeType {
            try container.encode(cacheNodeType, forKey: ClientRuntime.Key("CacheNodeType"))
        }
        if let cacheParameterGroupName = cacheParameterGroupName {
            try container.encode(cacheParameterGroupName, forKey: ClientRuntime.Key("CacheParameterGroupName"))
        }
        if let cacheSubnetGroupName = cacheSubnetGroupName {
            try container.encode(cacheSubnetGroupName, forKey: ClientRuntime.Key("CacheSubnetGroupName"))
        }
        if let dataTiering = dataTiering {
            try container.encode(dataTiering, forKey: ClientRuntime.Key("DataTiering"))
        }
        if let engine = engine {
            try container.encode(engine, forKey: ClientRuntime.Key("Engine"))
        }
        if let engineVersion = engineVersion {
            try container.encode(engineVersion, forKey: ClientRuntime.Key("EngineVersion"))
        }
        if let kmsKeyId = kmsKeyId {
            try container.encode(kmsKeyId, forKey: ClientRuntime.Key("KmsKeyId"))
        }
        if let nodeSnapshots = nodeSnapshots {
            var nodeSnapshotsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("NodeSnapshots"))
            for (index0, nodesnapshot0) in nodeSnapshots.enumerated() {
                try nodeSnapshotsContainer.encode(nodesnapshot0, forKey: ClientRuntime.Key("NodeSnapshot.\(index0.advanced(by: 1))"))
            }
        }
        if let numCacheNodes = numCacheNodes {
            try container.encode(numCacheNodes, forKey: ClientRuntime.Key("NumCacheNodes"))
        }
        if let numNodeGroups = numNodeGroups {
            try container.encode(numNodeGroups, forKey: ClientRuntime.Key("NumNodeGroups"))
        }
        if let port = port {
            try container.encode(port, forKey: ClientRuntime.Key("Port"))
        }
        if let preferredAvailabilityZone = preferredAvailabilityZone {
            try container.encode(preferredAvailabilityZone, forKey: ClientRuntime.Key("PreferredAvailabilityZone"))
        }
        if let preferredMaintenanceWindow = preferredMaintenanceWindow {
            try container.encode(preferredMaintenanceWindow, forKey: ClientRuntime.Key("PreferredMaintenanceWindow"))
        }
        if let preferredOutpostArn = preferredOutpostArn {
            try container.encode(preferredOutpostArn, forKey: ClientRuntime.Key("PreferredOutpostArn"))
        }
        if let replicationGroupDescription = replicationGroupDescription {
            try container.encode(replicationGroupDescription, forKey: ClientRuntime.Key("ReplicationGroupDescription"))
        }
        if let replicationGroupId = replicationGroupId {
            try container.encode(replicationGroupId, forKey: ClientRuntime.Key("ReplicationGroupId"))
        }
        if let snapshotName = snapshotName {
            try container.encode(snapshotName, forKey: ClientRuntime.Key("SnapshotName"))
        }
        if let snapshotRetentionLimit = snapshotRetentionLimit {
            try container.encode(snapshotRetentionLimit, forKey: ClientRuntime.Key("SnapshotRetentionLimit"))
        }
        if let snapshotSource = snapshotSource {
            try container.encode(snapshotSource, forKey: ClientRuntime.Key("SnapshotSource"))
        }
        if let snapshotStatus = snapshotStatus {
            try container.encode(snapshotStatus, forKey: ClientRuntime.Key("SnapshotStatus"))
        }
        if let snapshotWindow = snapshotWindow {
            try container.encode(snapshotWindow, forKey: ClientRuntime.Key("SnapshotWindow"))
        }
        if let topicArn = topicArn {
            try container.encode(topicArn, forKey: ClientRuntime.Key("TopicArn"))
        }
        if let vpcId = vpcId {
            try container.encode(vpcId, forKey: ClientRuntime.Key("VpcId"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let snapshotNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .snapshotName)
        snapshotName = snapshotNameDecoded
        let replicationGroupIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .replicationGroupId)
        replicationGroupId = replicationGroupIdDecoded
        let replicationGroupDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .replicationGroupDescription)
        replicationGroupDescription = replicationGroupDescriptionDecoded
        let cacheClusterIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cacheClusterId)
        cacheClusterId = cacheClusterIdDecoded
        let snapshotStatusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .snapshotStatus)
        snapshotStatus = snapshotStatusDecoded
        let snapshotSourceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .snapshotSource)
        snapshotSource = snapshotSourceDecoded
        let cacheNodeTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cacheNodeType)
        cacheNodeType = cacheNodeTypeDecoded
        let engineDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .engine)
        engine = engineDecoded
        let engineVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .engineVersion)
        engineVersion = engineVersionDecoded
        let numCacheNodesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .numCacheNodes)
        numCacheNodes = numCacheNodesDecoded
        let preferredAvailabilityZoneDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .preferredAvailabilityZone)
        preferredAvailabilityZone = preferredAvailabilityZoneDecoded
        let preferredOutpostArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .preferredOutpostArn)
        preferredOutpostArn = preferredOutpostArnDecoded
        let cacheClusterCreateTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cacheClusterCreateTime)
        var cacheClusterCreateTimeBuffer:ClientRuntime.Date? = nil
        if let cacheClusterCreateTimeDecoded = cacheClusterCreateTimeDecoded {
            cacheClusterCreateTimeBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(cacheClusterCreateTimeDecoded, format: .dateTime)
        }
        cacheClusterCreateTime = cacheClusterCreateTimeBuffer
        let preferredMaintenanceWindowDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .preferredMaintenanceWindow)
        preferredMaintenanceWindow = preferredMaintenanceWindowDecoded
        let topicArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .topicArn)
        topicArn = topicArnDecoded
        let portDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .port)
        port = portDecoded
        let cacheParameterGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cacheParameterGroupName)
        cacheParameterGroupName = cacheParameterGroupNameDecoded
        let cacheSubnetGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cacheSubnetGroupName)
        cacheSubnetGroupName = cacheSubnetGroupNameDecoded
        let vpcIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vpcId)
        vpcId = vpcIdDecoded
        let autoMinorVersionUpgradeDecoded = try containerValues.decode(Swift.Bool.self, forKey: .autoMinorVersionUpgrade)
        autoMinorVersionUpgrade = autoMinorVersionUpgradeDecoded
        let snapshotRetentionLimitDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .snapshotRetentionLimit)
        snapshotRetentionLimit = snapshotRetentionLimitDecoded
        let snapshotWindowDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .snapshotWindow)
        snapshotWindow = snapshotWindowDecoded
        let numNodeGroupsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .numNodeGroups)
        numNodeGroups = numNodeGroupsDecoded
        let automaticFailoverDecoded = try containerValues.decodeIfPresent(ElastiCacheClientTypes.AutomaticFailoverStatus.self, forKey: .automaticFailover)
        automaticFailover = automaticFailoverDecoded
        if containerValues.contains(.nodeSnapshots) {
            struct KeyVal0{struct NodeSnapshot{}}
            let nodeSnapshotsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.NodeSnapshot>.CodingKeys.self, forKey: .nodeSnapshots)
            if let nodeSnapshotsWrappedContainer = nodeSnapshotsWrappedContainer {
                let nodeSnapshotsContainer = try nodeSnapshotsWrappedContainer.decodeIfPresent([ElastiCacheClientTypes.NodeSnapshot].self, forKey: .member)
                var nodeSnapshotsBuffer:[ElastiCacheClientTypes.NodeSnapshot]? = nil
                if let nodeSnapshotsContainer = nodeSnapshotsContainer {
                    nodeSnapshotsBuffer = [ElastiCacheClientTypes.NodeSnapshot]()
                    for structureContainer0 in nodeSnapshotsContainer {
                        nodeSnapshotsBuffer?.append(structureContainer0)
                    }
                }
                nodeSnapshots = nodeSnapshotsBuffer
            } else {
                nodeSnapshots = []
            }
        } else {
            nodeSnapshots = nil
        }
        let kmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kmsKeyId)
        kmsKeyId = kmsKeyIdDecoded
        let aRNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .aRN)
        aRN = aRNDecoded
        let dataTieringDecoded = try containerValues.decodeIfPresent(ElastiCacheClientTypes.DataTieringStatus.self, forKey: .dataTiering)
        dataTiering = dataTieringDecoded
    }
}
