// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct StartMigrationInputBody: Swift.Equatable {
    let replicationGroupId: Swift.String?
    let customerNodeEndpointList: [ElastiCacheClientTypes.CustomerNodeEndpoint]?
}

extension StartMigrationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case customerNodeEndpointList = "CustomerNodeEndpointList"
        case replicationGroupId = "ReplicationGroupId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let replicationGroupIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .replicationGroupId)
        replicationGroupId = replicationGroupIdDecoded
        if containerValues.contains(.customerNodeEndpointList) {
            struct KeyVal0{struct member{}}
            let customerNodeEndpointListWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .customerNodeEndpointList)
            if let customerNodeEndpointListWrappedContainer = customerNodeEndpointListWrappedContainer {
                let customerNodeEndpointListContainer = try customerNodeEndpointListWrappedContainer.decodeIfPresent([ElastiCacheClientTypes.CustomerNodeEndpoint].self, forKey: .member)
                var customerNodeEndpointListBuffer:[ElastiCacheClientTypes.CustomerNodeEndpoint]? = nil
                if let customerNodeEndpointListContainer = customerNodeEndpointListContainer {
                    customerNodeEndpointListBuffer = [ElastiCacheClientTypes.CustomerNodeEndpoint]()
                    for structureContainer0 in customerNodeEndpointListContainer {
                        customerNodeEndpointListBuffer?.append(structureContainer0)
                    }
                }
                customerNodeEndpointList = customerNodeEndpointListBuffer
            } else {
                customerNodeEndpointList = []
            }
        } else {
            customerNodeEndpointList = nil
        }
    }
}
