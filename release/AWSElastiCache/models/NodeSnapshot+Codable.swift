// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ElastiCacheClientTypes.NodeSnapshot: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cacheClusterId = "CacheClusterId"
        case cacheNodeCreateTime = "CacheNodeCreateTime"
        case cacheNodeId = "CacheNodeId"
        case cacheSize = "CacheSize"
        case nodeGroupConfiguration = "NodeGroupConfiguration"
        case nodeGroupId = "NodeGroupId"
        case snapshotCreateTime = "SnapshotCreateTime"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let cacheClusterId = cacheClusterId {
            try container.encode(cacheClusterId, forKey: ClientRuntime.Key("CacheClusterId"))
        }
        if let cacheNodeCreateTime = cacheNodeCreateTime {
            try container.encode(ClientRuntime.TimestampWrapper(cacheNodeCreateTime, format: .dateTime), forKey: ClientRuntime.Key("cacheNodeCreateTime"))
        }
        if let cacheNodeId = cacheNodeId {
            try container.encode(cacheNodeId, forKey: ClientRuntime.Key("CacheNodeId"))
        }
        if let cacheSize = cacheSize {
            try container.encode(cacheSize, forKey: ClientRuntime.Key("CacheSize"))
        }
        if let nodeGroupConfiguration = nodeGroupConfiguration {
            try container.encode(nodeGroupConfiguration, forKey: ClientRuntime.Key("NodeGroupConfiguration"))
        }
        if let nodeGroupId = nodeGroupId {
            try container.encode(nodeGroupId, forKey: ClientRuntime.Key("NodeGroupId"))
        }
        if let snapshotCreateTime = snapshotCreateTime {
            try container.encode(ClientRuntime.TimestampWrapper(snapshotCreateTime, format: .dateTime), forKey: ClientRuntime.Key("snapshotCreateTime"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let cacheClusterIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cacheClusterId)
        cacheClusterId = cacheClusterIdDecoded
        let nodeGroupIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nodeGroupId)
        nodeGroupId = nodeGroupIdDecoded
        let cacheNodeIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cacheNodeId)
        cacheNodeId = cacheNodeIdDecoded
        let nodeGroupConfigurationDecoded = try containerValues.decodeIfPresent(ElastiCacheClientTypes.NodeGroupConfiguration.self, forKey: .nodeGroupConfiguration)
        nodeGroupConfiguration = nodeGroupConfigurationDecoded
        let cacheSizeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cacheSize)
        cacheSize = cacheSizeDecoded
        let cacheNodeCreateTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cacheNodeCreateTime)
        var cacheNodeCreateTimeBuffer:ClientRuntime.Date? = nil
        if let cacheNodeCreateTimeDecoded = cacheNodeCreateTimeDecoded {
            cacheNodeCreateTimeBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(cacheNodeCreateTimeDecoded, format: .dateTime)
        }
        cacheNodeCreateTime = cacheNodeCreateTimeBuffer
        let snapshotCreateTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .snapshotCreateTime)
        var snapshotCreateTimeBuffer:ClientRuntime.Date? = nil
        if let snapshotCreateTimeDecoded = snapshotCreateTimeDecoded {
            snapshotCreateTimeBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(snapshotCreateTimeDecoded, format: .dateTime)
        }
        snapshotCreateTime = snapshotCreateTimeBuffer
    }
}
