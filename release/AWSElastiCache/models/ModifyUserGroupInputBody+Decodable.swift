// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ModifyUserGroupInputBody: Swift.Equatable {
    let userGroupId: Swift.String?
    let userIdsToAdd: [Swift.String]?
    let userIdsToRemove: [Swift.String]?
}

extension ModifyUserGroupInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case userGroupId = "UserGroupId"
        case userIdsToAdd = "UserIdsToAdd"
        case userIdsToRemove = "UserIdsToRemove"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let userGroupIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userGroupId)
        userGroupId = userGroupIdDecoded
        if containerValues.contains(.userIdsToAdd) {
            struct KeyVal0{struct member{}}
            let userIdsToAddWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .userIdsToAdd)
            if let userIdsToAddWrappedContainer = userIdsToAddWrappedContainer {
                let userIdsToAddContainer = try userIdsToAddWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var userIdsToAddBuffer:[Swift.String]? = nil
                if let userIdsToAddContainer = userIdsToAddContainer {
                    userIdsToAddBuffer = [Swift.String]()
                    for stringContainer0 in userIdsToAddContainer {
                        userIdsToAddBuffer?.append(stringContainer0)
                    }
                }
                userIdsToAdd = userIdsToAddBuffer
            } else {
                userIdsToAdd = []
            }
        } else {
            userIdsToAdd = nil
        }
        if containerValues.contains(.userIdsToRemove) {
            struct KeyVal0{struct member{}}
            let userIdsToRemoveWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .userIdsToRemove)
            if let userIdsToRemoveWrappedContainer = userIdsToRemoveWrappedContainer {
                let userIdsToRemoveContainer = try userIdsToRemoveWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var userIdsToRemoveBuffer:[Swift.String]? = nil
                if let userIdsToRemoveContainer = userIdsToRemoveContainer {
                    userIdsToRemoveBuffer = [Swift.String]()
                    for stringContainer0 in userIdsToRemoveContainer {
                        userIdsToRemoveBuffer?.append(stringContainer0)
                    }
                }
                userIdsToRemove = userIdsToRemoveBuffer
            } else {
                userIdsToRemove = []
            }
        } else {
            userIdsToRemove = nil
        }
    }
}
