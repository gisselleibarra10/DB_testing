// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeUpdateActionsInputBody: Swift.Equatable {
    let serviceUpdateName: Swift.String?
    let replicationGroupIds: [Swift.String]?
    let cacheClusterIds: [Swift.String]?
    let engine: Swift.String?
    let serviceUpdateStatus: [ElastiCacheClientTypes.ServiceUpdateStatus]?
    let serviceUpdateTimeRange: ElastiCacheClientTypes.TimeRangeFilter?
    let updateActionStatus: [ElastiCacheClientTypes.UpdateActionStatus]?
    let showNodeLevelUpdateStatus: Swift.Bool?
    let maxRecords: Swift.Int?
    let marker: Swift.String?
}

extension DescribeUpdateActionsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cacheClusterIds = "CacheClusterIds"
        case engine = "Engine"
        case marker = "Marker"
        case maxRecords = "MaxRecords"
        case replicationGroupIds = "ReplicationGroupIds"
        case serviceUpdateName = "ServiceUpdateName"
        case serviceUpdateStatus = "ServiceUpdateStatus"
        case serviceUpdateTimeRange = "ServiceUpdateTimeRange"
        case showNodeLevelUpdateStatus = "ShowNodeLevelUpdateStatus"
        case updateActionStatus = "UpdateActionStatus"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let serviceUpdateNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serviceUpdateName)
        serviceUpdateName = serviceUpdateNameDecoded
        if containerValues.contains(.replicationGroupIds) {
            struct KeyVal0{struct member{}}
            let replicationGroupIdsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .replicationGroupIds)
            if let replicationGroupIdsWrappedContainer = replicationGroupIdsWrappedContainer {
                let replicationGroupIdsContainer = try replicationGroupIdsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var replicationGroupIdsBuffer:[Swift.String]? = nil
                if let replicationGroupIdsContainer = replicationGroupIdsContainer {
                    replicationGroupIdsBuffer = [Swift.String]()
                    for stringContainer0 in replicationGroupIdsContainer {
                        replicationGroupIdsBuffer?.append(stringContainer0)
                    }
                }
                replicationGroupIds = replicationGroupIdsBuffer
            } else {
                replicationGroupIds = []
            }
        } else {
            replicationGroupIds = nil
        }
        if containerValues.contains(.cacheClusterIds) {
            struct KeyVal0{struct member{}}
            let cacheClusterIdsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .cacheClusterIds)
            if let cacheClusterIdsWrappedContainer = cacheClusterIdsWrappedContainer {
                let cacheClusterIdsContainer = try cacheClusterIdsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var cacheClusterIdsBuffer:[Swift.String]? = nil
                if let cacheClusterIdsContainer = cacheClusterIdsContainer {
                    cacheClusterIdsBuffer = [Swift.String]()
                    for stringContainer0 in cacheClusterIdsContainer {
                        cacheClusterIdsBuffer?.append(stringContainer0)
                    }
                }
                cacheClusterIds = cacheClusterIdsBuffer
            } else {
                cacheClusterIds = []
            }
        } else {
            cacheClusterIds = nil
        }
        let engineDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .engine)
        engine = engineDecoded
        if containerValues.contains(.serviceUpdateStatus) {
            struct KeyVal0{struct member{}}
            let serviceUpdateStatusWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .serviceUpdateStatus)
            if let serviceUpdateStatusWrappedContainer = serviceUpdateStatusWrappedContainer {
                let serviceUpdateStatusContainer = try serviceUpdateStatusWrappedContainer.decodeIfPresent([ElastiCacheClientTypes.ServiceUpdateStatus].self, forKey: .member)
                var serviceUpdateStatusBuffer:[ElastiCacheClientTypes.ServiceUpdateStatus]? = nil
                if let serviceUpdateStatusContainer = serviceUpdateStatusContainer {
                    serviceUpdateStatusBuffer = [ElastiCacheClientTypes.ServiceUpdateStatus]()
                    for stringContainer0 in serviceUpdateStatusContainer {
                        serviceUpdateStatusBuffer?.append(stringContainer0)
                    }
                }
                serviceUpdateStatus = serviceUpdateStatusBuffer
            } else {
                serviceUpdateStatus = []
            }
        } else {
            serviceUpdateStatus = nil
        }
        let serviceUpdateTimeRangeDecoded = try containerValues.decodeIfPresent(ElastiCacheClientTypes.TimeRangeFilter.self, forKey: .serviceUpdateTimeRange)
        serviceUpdateTimeRange = serviceUpdateTimeRangeDecoded
        if containerValues.contains(.updateActionStatus) {
            struct KeyVal0{struct member{}}
            let updateActionStatusWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .updateActionStatus)
            if let updateActionStatusWrappedContainer = updateActionStatusWrappedContainer {
                let updateActionStatusContainer = try updateActionStatusWrappedContainer.decodeIfPresent([ElastiCacheClientTypes.UpdateActionStatus].self, forKey: .member)
                var updateActionStatusBuffer:[ElastiCacheClientTypes.UpdateActionStatus]? = nil
                if let updateActionStatusContainer = updateActionStatusContainer {
                    updateActionStatusBuffer = [ElastiCacheClientTypes.UpdateActionStatus]()
                    for stringContainer0 in updateActionStatusContainer {
                        updateActionStatusBuffer?.append(stringContainer0)
                    }
                }
                updateActionStatus = updateActionStatusBuffer
            } else {
                updateActionStatus = []
            }
        } else {
            updateActionStatus = nil
        }
        let showNodeLevelUpdateStatusDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .showNodeLevelUpdateStatus)
        showNodeLevelUpdateStatus = showNodeLevelUpdateStatusDecoded
        let maxRecordsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxRecords)
        maxRecords = maxRecordsDecoded
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
    }
}
