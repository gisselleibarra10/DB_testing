// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ElastiCacheClientTypes.PendingModifiedValues: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case authTokenStatus = "AuthTokenStatus"
        case cacheNodeIdsToRemove = "CacheNodeIdsToRemove"
        case cacheNodeType = "CacheNodeType"
        case engineVersion = "EngineVersion"
        case logDeliveryConfigurations = "LogDeliveryConfigurations"
        case numCacheNodes = "NumCacheNodes"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let authTokenStatus = authTokenStatus {
            try container.encode(authTokenStatus, forKey: ClientRuntime.Key("AuthTokenStatus"))
        }
        if let cacheNodeIdsToRemove = cacheNodeIdsToRemove {
            var cacheNodeIdsToRemoveContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("CacheNodeIdsToRemove"))
            for (index0, string0) in cacheNodeIdsToRemove.enumerated() {
                try cacheNodeIdsToRemoveContainer.encode(string0, forKey: ClientRuntime.Key("CacheNodeId.\(index0.advanced(by: 1))"))
            }
        }
        if let cacheNodeType = cacheNodeType {
            try container.encode(cacheNodeType, forKey: ClientRuntime.Key("CacheNodeType"))
        }
        if let engineVersion = engineVersion {
            try container.encode(engineVersion, forKey: ClientRuntime.Key("EngineVersion"))
        }
        if let logDeliveryConfigurations = logDeliveryConfigurations {
            var logDeliveryConfigurationsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("LogDeliveryConfigurations"))
            for (index0, pendinglogdeliveryconfiguration0) in logDeliveryConfigurations.enumerated() {
                try logDeliveryConfigurationsContainer.encode(pendinglogdeliveryconfiguration0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let numCacheNodes = numCacheNodes {
            try container.encode(numCacheNodes, forKey: ClientRuntime.Key("NumCacheNodes"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let numCacheNodesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .numCacheNodes)
        numCacheNodes = numCacheNodesDecoded
        if containerValues.contains(.cacheNodeIdsToRemove) {
            struct KeyVal0{struct CacheNodeId{}}
            let cacheNodeIdsToRemoveWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.CacheNodeId>.CodingKeys.self, forKey: .cacheNodeIdsToRemove)
            if let cacheNodeIdsToRemoveWrappedContainer = cacheNodeIdsToRemoveWrappedContainer {
                let cacheNodeIdsToRemoveContainer = try cacheNodeIdsToRemoveWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var cacheNodeIdsToRemoveBuffer:[Swift.String]? = nil
                if let cacheNodeIdsToRemoveContainer = cacheNodeIdsToRemoveContainer {
                    cacheNodeIdsToRemoveBuffer = [Swift.String]()
                    for stringContainer0 in cacheNodeIdsToRemoveContainer {
                        cacheNodeIdsToRemoveBuffer?.append(stringContainer0)
                    }
                }
                cacheNodeIdsToRemove = cacheNodeIdsToRemoveBuffer
            } else {
                cacheNodeIdsToRemove = []
            }
        } else {
            cacheNodeIdsToRemove = nil
        }
        let engineVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .engineVersion)
        engineVersion = engineVersionDecoded
        let cacheNodeTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cacheNodeType)
        cacheNodeType = cacheNodeTypeDecoded
        let authTokenStatusDecoded = try containerValues.decodeIfPresent(ElastiCacheClientTypes.AuthTokenUpdateStatus.self, forKey: .authTokenStatus)
        authTokenStatus = authTokenStatusDecoded
        if containerValues.contains(.logDeliveryConfigurations) {
            struct KeyVal0{struct member{}}
            let logDeliveryConfigurationsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .logDeliveryConfigurations)
            if let logDeliveryConfigurationsWrappedContainer = logDeliveryConfigurationsWrappedContainer {
                let logDeliveryConfigurationsContainer = try logDeliveryConfigurationsWrappedContainer.decodeIfPresent([ElastiCacheClientTypes.PendingLogDeliveryConfiguration].self, forKey: .member)
                var logDeliveryConfigurationsBuffer:[ElastiCacheClientTypes.PendingLogDeliveryConfiguration]? = nil
                if let logDeliveryConfigurationsContainer = logDeliveryConfigurationsContainer {
                    logDeliveryConfigurationsBuffer = [ElastiCacheClientTypes.PendingLogDeliveryConfiguration]()
                    for structureContainer0 in logDeliveryConfigurationsContainer {
                        logDeliveryConfigurationsBuffer?.append(structureContainer0)
                    }
                }
                logDeliveryConfigurations = logDeliveryConfigurationsBuffer
            } else {
                logDeliveryConfigurations = []
            }
        } else {
            logDeliveryConfigurations = nil
        }
    }
}
