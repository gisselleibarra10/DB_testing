// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeUserGroupsOutputResponseBody: Swift.Equatable {
    let userGroups: [ElastiCacheClientTypes.UserGroup]?
    let marker: Swift.String?
}

extension DescribeUserGroupsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case marker = "Marker"
        case userGroups = "UserGroups"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeUserGroupsResult"))
        if containerValues.contains(.userGroups) {
            struct KeyVal0{struct member{}}
            let userGroupsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .userGroups)
            if let userGroupsWrappedContainer = userGroupsWrappedContainer {
                let userGroupsContainer = try userGroupsWrappedContainer.decodeIfPresent([ElastiCacheClientTypes.UserGroup].self, forKey: .member)
                var userGroupsBuffer:[ElastiCacheClientTypes.UserGroup]? = nil
                if let userGroupsContainer = userGroupsContainer {
                    userGroupsBuffer = [ElastiCacheClientTypes.UserGroup]()
                    for structureContainer0 in userGroupsContainer {
                        userGroupsBuffer?.append(structureContainer0)
                    }
                }
                userGroups = userGroupsBuffer
            } else {
                userGroups = []
            }
        } else {
            userGroups = nil
        }
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
    }
}
