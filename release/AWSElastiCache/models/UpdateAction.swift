// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ElastiCacheClientTypes {
    /// The status of the service update for a specific replication group
    public struct UpdateAction: Swift.Equatable {
        /// The ID of the cache cluster
        public var cacheClusterId: Swift.String?
        /// The status of the service update on the cache node
        public var cacheNodeUpdateStatus: [ElastiCacheClientTypes.CacheNodeUpdateStatus]?
        /// The Elasticache engine to which the update applies. Either Redis or Memcached
        public var engine: Swift.String?
        /// The estimated length of time for the update to complete
        public var estimatedUpdateTime: Swift.String?
        /// The status of the service update on the node group
        public var nodeGroupUpdateStatus: [ElastiCacheClientTypes.NodeGroupUpdateStatus]?
        /// The progress of the service update on the replication group
        public var nodesUpdated: Swift.String?
        /// The ID of the replication group
        public var replicationGroupId: Swift.String?
        /// The unique ID of the service update
        public var serviceUpdateName: Swift.String?
        /// The recommended date to apply the service update to ensure compliance. For information on compliance, see [Self-Service Security Updates for Compliance](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/elasticache-compliance.html#elasticache-compliance-self-service).
        public var serviceUpdateRecommendedApplyByDate: ClientRuntime.Date?
        /// The date the update is first available
        public var serviceUpdateReleaseDate: ClientRuntime.Date?
        /// The severity of the service update
        public var serviceUpdateSeverity: ElastiCacheClientTypes.ServiceUpdateSeverity?
        /// The status of the service update
        public var serviceUpdateStatus: ElastiCacheClientTypes.ServiceUpdateStatus?
        /// Reflects the nature of the service update
        public var serviceUpdateType: ElastiCacheClientTypes.ServiceUpdateType?
        /// If yes, all nodes in the replication group have been updated by the recommended apply-by date. If no, at least one node in the replication group have not been updated by the recommended apply-by date. If N/A, the replication group was created after the recommended apply-by date.
        public var slaMet: ElastiCacheClientTypes.SlaMet?
        /// The date that the service update is available to a replication group
        public var updateActionAvailableDate: ClientRuntime.Date?
        /// The status of the update action
        public var updateActionStatus: ElastiCacheClientTypes.UpdateActionStatus?
        /// The date when the UpdateActionStatus was last modified
        public var updateActionStatusModifiedDate: ClientRuntime.Date?

        public init (
            cacheClusterId: Swift.String? = nil,
            cacheNodeUpdateStatus: [ElastiCacheClientTypes.CacheNodeUpdateStatus]? = nil,
            engine: Swift.String? = nil,
            estimatedUpdateTime: Swift.String? = nil,
            nodeGroupUpdateStatus: [ElastiCacheClientTypes.NodeGroupUpdateStatus]? = nil,
            nodesUpdated: Swift.String? = nil,
            replicationGroupId: Swift.String? = nil,
            serviceUpdateName: Swift.String? = nil,
            serviceUpdateRecommendedApplyByDate: ClientRuntime.Date? = nil,
            serviceUpdateReleaseDate: ClientRuntime.Date? = nil,
            serviceUpdateSeverity: ElastiCacheClientTypes.ServiceUpdateSeverity? = nil,
            serviceUpdateStatus: ElastiCacheClientTypes.ServiceUpdateStatus? = nil,
            serviceUpdateType: ElastiCacheClientTypes.ServiceUpdateType? = nil,
            slaMet: ElastiCacheClientTypes.SlaMet? = nil,
            updateActionAvailableDate: ClientRuntime.Date? = nil,
            updateActionStatus: ElastiCacheClientTypes.UpdateActionStatus? = nil,
            updateActionStatusModifiedDate: ClientRuntime.Date? = nil
        )
        {
            self.cacheClusterId = cacheClusterId
            self.cacheNodeUpdateStatus = cacheNodeUpdateStatus
            self.engine = engine
            self.estimatedUpdateTime = estimatedUpdateTime
            self.nodeGroupUpdateStatus = nodeGroupUpdateStatus
            self.nodesUpdated = nodesUpdated
            self.replicationGroupId = replicationGroupId
            self.serviceUpdateName = serviceUpdateName
            self.serviceUpdateRecommendedApplyByDate = serviceUpdateRecommendedApplyByDate
            self.serviceUpdateReleaseDate = serviceUpdateReleaseDate
            self.serviceUpdateSeverity = serviceUpdateSeverity
            self.serviceUpdateStatus = serviceUpdateStatus
            self.serviceUpdateType = serviceUpdateType
            self.slaMet = slaMet
            self.updateActionAvailableDate = updateActionAvailableDate
            self.updateActionStatus = updateActionStatus
            self.updateActionStatusModifiedDate = updateActionStatusModifiedDate
        }
    }

}
