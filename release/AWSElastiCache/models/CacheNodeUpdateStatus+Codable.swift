// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ElastiCacheClientTypes.CacheNodeUpdateStatus: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cacheNodeId = "CacheNodeId"
        case nodeDeletionDate = "NodeDeletionDate"
        case nodeUpdateEndDate = "NodeUpdateEndDate"
        case nodeUpdateInitiatedBy = "NodeUpdateInitiatedBy"
        case nodeUpdateInitiatedDate = "NodeUpdateInitiatedDate"
        case nodeUpdateStartDate = "NodeUpdateStartDate"
        case nodeUpdateStatus = "NodeUpdateStatus"
        case nodeUpdateStatusModifiedDate = "NodeUpdateStatusModifiedDate"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let cacheNodeId = cacheNodeId {
            try container.encode(cacheNodeId, forKey: ClientRuntime.Key("CacheNodeId"))
        }
        if let nodeDeletionDate = nodeDeletionDate {
            try container.encode(ClientRuntime.TimestampWrapper(nodeDeletionDate, format: .dateTime), forKey: ClientRuntime.Key("nodeDeletionDate"))
        }
        if let nodeUpdateEndDate = nodeUpdateEndDate {
            try container.encode(ClientRuntime.TimestampWrapper(nodeUpdateEndDate, format: .dateTime), forKey: ClientRuntime.Key("nodeUpdateEndDate"))
        }
        if let nodeUpdateInitiatedBy = nodeUpdateInitiatedBy {
            try container.encode(nodeUpdateInitiatedBy, forKey: ClientRuntime.Key("NodeUpdateInitiatedBy"))
        }
        if let nodeUpdateInitiatedDate = nodeUpdateInitiatedDate {
            try container.encode(ClientRuntime.TimestampWrapper(nodeUpdateInitiatedDate, format: .dateTime), forKey: ClientRuntime.Key("nodeUpdateInitiatedDate"))
        }
        if let nodeUpdateStartDate = nodeUpdateStartDate {
            try container.encode(ClientRuntime.TimestampWrapper(nodeUpdateStartDate, format: .dateTime), forKey: ClientRuntime.Key("nodeUpdateStartDate"))
        }
        if let nodeUpdateStatus = nodeUpdateStatus {
            try container.encode(nodeUpdateStatus, forKey: ClientRuntime.Key("NodeUpdateStatus"))
        }
        if let nodeUpdateStatusModifiedDate = nodeUpdateStatusModifiedDate {
            try container.encode(ClientRuntime.TimestampWrapper(nodeUpdateStatusModifiedDate, format: .dateTime), forKey: ClientRuntime.Key("nodeUpdateStatusModifiedDate"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let cacheNodeIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cacheNodeId)
        cacheNodeId = cacheNodeIdDecoded
        let nodeUpdateStatusDecoded = try containerValues.decodeIfPresent(ElastiCacheClientTypes.NodeUpdateStatus.self, forKey: .nodeUpdateStatus)
        nodeUpdateStatus = nodeUpdateStatusDecoded
        let nodeDeletionDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nodeDeletionDate)
        var nodeDeletionDateBuffer:ClientRuntime.Date? = nil
        if let nodeDeletionDateDecoded = nodeDeletionDateDecoded {
            nodeDeletionDateBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(nodeDeletionDateDecoded, format: .dateTime)
        }
        nodeDeletionDate = nodeDeletionDateBuffer
        let nodeUpdateStartDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nodeUpdateStartDate)
        var nodeUpdateStartDateBuffer:ClientRuntime.Date? = nil
        if let nodeUpdateStartDateDecoded = nodeUpdateStartDateDecoded {
            nodeUpdateStartDateBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(nodeUpdateStartDateDecoded, format: .dateTime)
        }
        nodeUpdateStartDate = nodeUpdateStartDateBuffer
        let nodeUpdateEndDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nodeUpdateEndDate)
        var nodeUpdateEndDateBuffer:ClientRuntime.Date? = nil
        if let nodeUpdateEndDateDecoded = nodeUpdateEndDateDecoded {
            nodeUpdateEndDateBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(nodeUpdateEndDateDecoded, format: .dateTime)
        }
        nodeUpdateEndDate = nodeUpdateEndDateBuffer
        let nodeUpdateInitiatedByDecoded = try containerValues.decodeIfPresent(ElastiCacheClientTypes.NodeUpdateInitiatedBy.self, forKey: .nodeUpdateInitiatedBy)
        nodeUpdateInitiatedBy = nodeUpdateInitiatedByDecoded
        let nodeUpdateInitiatedDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nodeUpdateInitiatedDate)
        var nodeUpdateInitiatedDateBuffer:ClientRuntime.Date? = nil
        if let nodeUpdateInitiatedDateDecoded = nodeUpdateInitiatedDateDecoded {
            nodeUpdateInitiatedDateBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(nodeUpdateInitiatedDateDecoded, format: .dateTime)
        }
        nodeUpdateInitiatedDate = nodeUpdateInitiatedDateBuffer
        let nodeUpdateStatusModifiedDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nodeUpdateStatusModifiedDate)
        var nodeUpdateStatusModifiedDateBuffer:ClientRuntime.Date? = nil
        if let nodeUpdateStatusModifiedDateDecoded = nodeUpdateStatusModifiedDateDecoded {
            nodeUpdateStatusModifiedDateBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(nodeUpdateStatusModifiedDateDecoded, format: .dateTime)
        }
        nodeUpdateStatusModifiedDate = nodeUpdateStatusModifiedDateBuffer
    }
}
