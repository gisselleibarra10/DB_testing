// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateUserInputBody: Swift.Equatable {
    let userId: Swift.String?
    let userName: Swift.String?
    let engine: Swift.String?
    let passwords: [Swift.String]?
    let accessString: Swift.String?
    let noPasswordRequired: Swift.Bool?
    let tags: [ElastiCacheClientTypes.Tag]?
}

extension CreateUserInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accessString = "AccessString"
        case engine = "Engine"
        case noPasswordRequired = "NoPasswordRequired"
        case passwords = "Passwords"
        case tags = "Tags"
        case userId = "UserId"
        case userName = "UserName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let userIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userId)
        userId = userIdDecoded
        let userNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userName)
        userName = userNameDecoded
        let engineDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .engine)
        engine = engineDecoded
        if containerValues.contains(.passwords) {
            struct KeyVal0{struct member{}}
            let passwordsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .passwords)
            if let passwordsWrappedContainer = passwordsWrappedContainer {
                let passwordsContainer = try passwordsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var passwordsBuffer:[Swift.String]? = nil
                if let passwordsContainer = passwordsContainer {
                    passwordsBuffer = [Swift.String]()
                    for stringContainer0 in passwordsContainer {
                        passwordsBuffer?.append(stringContainer0)
                    }
                }
                passwords = passwordsBuffer
            } else {
                passwords = []
            }
        } else {
            passwords = nil
        }
        let accessStringDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .accessString)
        accessString = accessStringDecoded
        let noPasswordRequiredDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .noPasswordRequired)
        noPasswordRequired = noPasswordRequiredDecoded
        if containerValues.contains(.tags) {
            struct KeyVal0{struct Tag{}}
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.Tag>.CodingKeys.self, forKey: .tags)
            if let tagsWrappedContainer = tagsWrappedContainer {
                let tagsContainer = try tagsWrappedContainer.decodeIfPresent([ElastiCacheClientTypes.Tag].self, forKey: .member)
                var tagsBuffer:[ElastiCacheClientTypes.Tag]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [ElastiCacheClientTypes.Tag]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
    }
}
