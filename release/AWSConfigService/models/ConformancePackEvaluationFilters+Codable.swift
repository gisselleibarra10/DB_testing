// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ConfigClientTypes.ConformancePackEvaluationFilters: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case complianceType = "ComplianceType"
        case configRuleNames = "ConfigRuleNames"
        case resourceIds = "ResourceIds"
        case resourceType = "ResourceType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let complianceType = self.complianceType {
            try encodeContainer.encode(complianceType.rawValue, forKey: .complianceType)
        }
        if let configRuleNames = configRuleNames {
            var configRuleNamesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .configRuleNames)
            for conformancepackconfigrulenames0 in configRuleNames {
                try configRuleNamesContainer.encode(conformancepackconfigrulenames0)
            }
        }
        if let resourceIds = resourceIds {
            var resourceIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .resourceIds)
            for conformancepackcomplianceresourceids0 in resourceIds {
                try resourceIdsContainer.encode(conformancepackcomplianceresourceids0)
            }
        }
        if let resourceType = self.resourceType {
            try encodeContainer.encode(resourceType, forKey: .resourceType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let configRuleNamesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .configRuleNames)
        var configRuleNamesDecoded0:[Swift.String]? = nil
        if let configRuleNamesContainer = configRuleNamesContainer {
            configRuleNamesDecoded0 = [Swift.String]()
            for string0 in configRuleNamesContainer {
                if let string0 = string0 {
                    configRuleNamesDecoded0?.append(string0)
                }
            }
        }
        configRuleNames = configRuleNamesDecoded0
        let complianceTypeDecoded = try containerValues.decodeIfPresent(ConfigClientTypes.ConformancePackComplianceType.self, forKey: .complianceType)
        complianceType = complianceTypeDecoded
        let resourceTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let resourceIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .resourceIds)
        var resourceIdsDecoded0:[Swift.String]? = nil
        if let resourceIdsContainer = resourceIdsContainer {
            resourceIdsDecoded0 = [Swift.String]()
            for string0 in resourceIdsContainer {
                if let string0 = string0 {
                    resourceIdsDecoded0?.append(string0)
                }
            }
        }
        resourceIds = resourceIdsDecoded0
    }
}
