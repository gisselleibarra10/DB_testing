// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ConfigClientTypes.ConfigurationAggregator: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountAggregationSources = "AccountAggregationSources"
        case configurationAggregatorArn = "ConfigurationAggregatorArn"
        case configurationAggregatorName = "ConfigurationAggregatorName"
        case createdBy = "CreatedBy"
        case creationTime = "CreationTime"
        case lastUpdatedTime = "LastUpdatedTime"
        case organizationAggregationSource = "OrganizationAggregationSource"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accountAggregationSources = accountAggregationSources {
            var accountAggregationSourcesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .accountAggregationSources)
            for accountaggregationsourcelist0 in accountAggregationSources {
                try accountAggregationSourcesContainer.encode(accountaggregationsourcelist0)
            }
        }
        if let configurationAggregatorArn = self.configurationAggregatorArn {
            try encodeContainer.encode(configurationAggregatorArn, forKey: .configurationAggregatorArn)
        }
        if let configurationAggregatorName = self.configurationAggregatorName {
            try encodeContainer.encode(configurationAggregatorName, forKey: .configurationAggregatorName)
        }
        if let createdBy = self.createdBy {
            try encodeContainer.encode(createdBy, forKey: .createdBy)
        }
        if let creationTime = self.creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let lastUpdatedTime = self.lastUpdatedTime {
            try encodeContainer.encode(lastUpdatedTime.timeIntervalSince1970, forKey: .lastUpdatedTime)
        }
        if let organizationAggregationSource = self.organizationAggregationSource {
            try encodeContainer.encode(organizationAggregationSource, forKey: .organizationAggregationSource)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let configurationAggregatorNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .configurationAggregatorName)
        configurationAggregatorName = configurationAggregatorNameDecoded
        let configurationAggregatorArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .configurationAggregatorArn)
        configurationAggregatorArn = configurationAggregatorArnDecoded
        let accountAggregationSourcesContainer = try containerValues.decodeIfPresent([ConfigClientTypes.AccountAggregationSource?].self, forKey: .accountAggregationSources)
        var accountAggregationSourcesDecoded0:[ConfigClientTypes.AccountAggregationSource]? = nil
        if let accountAggregationSourcesContainer = accountAggregationSourcesContainer {
            accountAggregationSourcesDecoded0 = [ConfigClientTypes.AccountAggregationSource]()
            for structure0 in accountAggregationSourcesContainer {
                if let structure0 = structure0 {
                    accountAggregationSourcesDecoded0?.append(structure0)
                }
            }
        }
        accountAggregationSources = accountAggregationSourcesDecoded0
        let organizationAggregationSourceDecoded = try containerValues.decodeIfPresent(ConfigClientTypes.OrganizationAggregationSource.self, forKey: .organizationAggregationSource)
        organizationAggregationSource = organizationAggregationSourceDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let lastUpdatedTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastUpdatedTime)
        lastUpdatedTime = lastUpdatedTimeDecoded
        let createdByDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .createdBy)
        createdBy = createdByDecoded
    }
}
