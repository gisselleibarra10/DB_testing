// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListAggregateDiscoveredResourcesInputBody: Swift.Equatable {
    let configurationAggregatorName: Swift.String?
    let resourceType: ConfigClientTypes.ResourceType?
    let filters: ConfigClientTypes.ResourceFilters?
    let limit: Swift.Int
    let nextToken: Swift.String?
}

extension ListAggregateDiscoveredResourcesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configurationAggregatorName = "ConfigurationAggregatorName"
        case filters = "Filters"
        case limit = "Limit"
        case nextToken = "NextToken"
        case resourceType = "ResourceType"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let configurationAggregatorNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .configurationAggregatorName)
        configurationAggregatorName = configurationAggregatorNameDecoded
        let resourceTypeDecoded = try containerValues.decodeIfPresent(ConfigClientTypes.ResourceType.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let filtersDecoded = try containerValues.decodeIfPresent(ConfigClientTypes.ResourceFilters.self, forKey: .filters)
        filters = filtersDecoded
        let limitDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .limit) ?? 0
        limit = limitDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
