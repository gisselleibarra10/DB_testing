// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct PutRemediationExceptionsInputBody: Swift.Equatable {
    let configRuleName: Swift.String?
    let resourceKeys: [ConfigClientTypes.RemediationExceptionResourceKey]?
    let message: Swift.String?
    let expirationTime: ClientRuntime.Date?
}

extension PutRemediationExceptionsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configRuleName = "ConfigRuleName"
        case expirationTime = "ExpirationTime"
        case message = "Message"
        case resourceKeys = "ResourceKeys"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let configRuleNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .configRuleName)
        configRuleName = configRuleNameDecoded
        let resourceKeysContainer = try containerValues.decodeIfPresent([ConfigClientTypes.RemediationExceptionResourceKey?].self, forKey: .resourceKeys)
        var resourceKeysDecoded0:[ConfigClientTypes.RemediationExceptionResourceKey]? = nil
        if let resourceKeysContainer = resourceKeysContainer {
            resourceKeysDecoded0 = [ConfigClientTypes.RemediationExceptionResourceKey]()
            for structure0 in resourceKeysContainer {
                if let structure0 = structure0 {
                    resourceKeysDecoded0?.append(structure0)
                }
            }
        }
        resourceKeys = resourceKeysDecoded0
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let expirationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .expirationTime)
        expirationTime = expirationTimeDecoded
    }
}
