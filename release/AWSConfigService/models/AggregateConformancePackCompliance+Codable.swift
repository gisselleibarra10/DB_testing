// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ConfigClientTypes.AggregateConformancePackCompliance: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case complianceType = "ComplianceType"
        case compliantRuleCount = "CompliantRuleCount"
        case nonCompliantRuleCount = "NonCompliantRuleCount"
        case totalRuleCount = "TotalRuleCount"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let complianceType = self.complianceType {
            try encodeContainer.encode(complianceType.rawValue, forKey: .complianceType)
        }
        if compliantRuleCount != 0 {
            try encodeContainer.encode(compliantRuleCount, forKey: .compliantRuleCount)
        }
        if nonCompliantRuleCount != 0 {
            try encodeContainer.encode(nonCompliantRuleCount, forKey: .nonCompliantRuleCount)
        }
        if totalRuleCount != 0 {
            try encodeContainer.encode(totalRuleCount, forKey: .totalRuleCount)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let complianceTypeDecoded = try containerValues.decodeIfPresent(ConfigClientTypes.ConformancePackComplianceType.self, forKey: .complianceType)
        complianceType = complianceTypeDecoded
        let compliantRuleCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .compliantRuleCount) ?? 0
        compliantRuleCount = compliantRuleCountDecoded
        let nonCompliantRuleCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .nonCompliantRuleCount) ?? 0
        nonCompliantRuleCount = nonCompliantRuleCountDecoded
        let totalRuleCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .totalRuleCount) ?? 0
        totalRuleCount = totalRuleCountDecoded
    }
}
