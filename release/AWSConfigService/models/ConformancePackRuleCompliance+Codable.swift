// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ConfigClientTypes.ConformancePackRuleCompliance: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case complianceType = "ComplianceType"
        case configRuleName = "ConfigRuleName"
        case controls = "Controls"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let complianceType = self.complianceType {
            try encodeContainer.encode(complianceType.rawValue, forKey: .complianceType)
        }
        if let configRuleName = self.configRuleName {
            try encodeContainer.encode(configRuleName, forKey: .configRuleName)
        }
        if let controls = controls {
            var controlsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .controls)
            for controlslist0 in controls {
                try controlsContainer.encode(controlslist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let configRuleNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .configRuleName)
        configRuleName = configRuleNameDecoded
        let complianceTypeDecoded = try containerValues.decodeIfPresent(ConfigClientTypes.ConformancePackComplianceType.self, forKey: .complianceType)
        complianceType = complianceTypeDecoded
        let controlsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .controls)
        var controlsDecoded0:[Swift.String]? = nil
        if let controlsContainer = controlsContainer {
            controlsDecoded0 = [Swift.String]()
            for string0 in controlsContainer {
                if let string0 = string0 {
                    controlsDecoded0?.append(string0)
                }
            }
        }
        controls = controlsDecoded0
    }
}
