// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetAggregateComplianceDetailsByConfigRuleInputBody: Swift.Equatable {
    let configurationAggregatorName: Swift.String?
    let configRuleName: Swift.String?
    let accountId: Swift.String?
    let awsRegion: Swift.String?
    let complianceType: ConfigClientTypes.ComplianceType?
    let limit: Swift.Int
    let nextToken: Swift.String?
}

extension GetAggregateComplianceDetailsByConfigRuleInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountId = "AccountId"
        case awsRegion = "AwsRegion"
        case complianceType = "ComplianceType"
        case configRuleName = "ConfigRuleName"
        case configurationAggregatorName = "ConfigurationAggregatorName"
        case limit = "Limit"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let configurationAggregatorNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .configurationAggregatorName)
        configurationAggregatorName = configurationAggregatorNameDecoded
        let configRuleNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .configRuleName)
        configRuleName = configRuleNameDecoded
        let accountIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .accountId)
        accountId = accountIdDecoded
        let awsRegionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .awsRegion)
        awsRegion = awsRegionDecoded
        let complianceTypeDecoded = try containerValues.decodeIfPresent(ConfigClientTypes.ComplianceType.self, forKey: .complianceType)
        complianceType = complianceTypeDecoded
        let limitDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .limit) ?? 0
        limit = limitDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
