// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ConfigClientTypes.SourceDetail: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case eventSource = "EventSource"
        case maximumExecutionFrequency = "MaximumExecutionFrequency"
        case messageType = "MessageType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let eventSource = self.eventSource {
            try encodeContainer.encode(eventSource.rawValue, forKey: .eventSource)
        }
        if let maximumExecutionFrequency = self.maximumExecutionFrequency {
            try encodeContainer.encode(maximumExecutionFrequency.rawValue, forKey: .maximumExecutionFrequency)
        }
        if let messageType = self.messageType {
            try encodeContainer.encode(messageType.rawValue, forKey: .messageType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let eventSourceDecoded = try containerValues.decodeIfPresent(ConfigClientTypes.EventSource.self, forKey: .eventSource)
        eventSource = eventSourceDecoded
        let messageTypeDecoded = try containerValues.decodeIfPresent(ConfigClientTypes.MessageType.self, forKey: .messageType)
        messageType = messageTypeDecoded
        let maximumExecutionFrequencyDecoded = try containerValues.decodeIfPresent(ConfigClientTypes.MaximumExecutionFrequency.self, forKey: .maximumExecutionFrequency)
        maximumExecutionFrequency = maximumExecutionFrequencyDecoded
    }
}
