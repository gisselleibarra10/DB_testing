// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetAggregateConfigRuleComplianceSummaryOutputResponseBody: Swift.Equatable {
    let groupByKey: Swift.String?
    let aggregateComplianceCounts: [ConfigClientTypes.AggregateComplianceCount]?
    let nextToken: Swift.String?
}

extension GetAggregateConfigRuleComplianceSummaryOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case aggregateComplianceCounts = "AggregateComplianceCounts"
        case groupByKey = "GroupByKey"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let groupByKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .groupByKey)
        groupByKey = groupByKeyDecoded
        let aggregateComplianceCountsContainer = try containerValues.decodeIfPresent([ConfigClientTypes.AggregateComplianceCount?].self, forKey: .aggregateComplianceCounts)
        var aggregateComplianceCountsDecoded0:[ConfigClientTypes.AggregateComplianceCount]? = nil
        if let aggregateComplianceCountsContainer = aggregateComplianceCountsContainer {
            aggregateComplianceCountsDecoded0 = [ConfigClientTypes.AggregateComplianceCount]()
            for structure0 in aggregateComplianceCountsContainer {
                if let structure0 = structure0 {
                    aggregateComplianceCountsDecoded0?.append(structure0)
                }
            }
        }
        aggregateComplianceCounts = aggregateComplianceCountsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
