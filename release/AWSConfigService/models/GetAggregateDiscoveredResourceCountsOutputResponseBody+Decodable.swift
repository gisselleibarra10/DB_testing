// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetAggregateDiscoveredResourceCountsOutputResponseBody: Swift.Equatable {
    let totalDiscoveredResources: Swift.Int
    let groupByKey: Swift.String?
    let groupedResourceCounts: [ConfigClientTypes.GroupedResourceCount]?
    let nextToken: Swift.String?
}

extension GetAggregateDiscoveredResourceCountsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case groupByKey = "GroupByKey"
        case groupedResourceCounts = "GroupedResourceCounts"
        case nextToken = "NextToken"
        case totalDiscoveredResources = "TotalDiscoveredResources"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let totalDiscoveredResourcesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .totalDiscoveredResources) ?? 0
        totalDiscoveredResources = totalDiscoveredResourcesDecoded
        let groupByKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .groupByKey)
        groupByKey = groupByKeyDecoded
        let groupedResourceCountsContainer = try containerValues.decodeIfPresent([ConfigClientTypes.GroupedResourceCount?].self, forKey: .groupedResourceCounts)
        var groupedResourceCountsDecoded0:[ConfigClientTypes.GroupedResourceCount]? = nil
        if let groupedResourceCountsContainer = groupedResourceCountsContainer {
            groupedResourceCountsDecoded0 = [ConfigClientTypes.GroupedResourceCount]()
            for structure0 in groupedResourceCountsContainer {
                if let structure0 = structure0 {
                    groupedResourceCountsDecoded0?.append(structure0)
                }
            }
        }
        groupedResourceCounts = groupedResourceCountsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
