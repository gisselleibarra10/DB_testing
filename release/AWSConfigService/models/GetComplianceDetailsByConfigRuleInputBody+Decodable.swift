// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetComplianceDetailsByConfigRuleInputBody: Swift.Equatable {
    let configRuleName: Swift.String?
    let complianceTypes: [ConfigClientTypes.ComplianceType]?
    let limit: Swift.Int
    let nextToken: Swift.String?
}

extension GetComplianceDetailsByConfigRuleInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case complianceTypes = "ComplianceTypes"
        case configRuleName = "ConfigRuleName"
        case limit = "Limit"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let configRuleNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .configRuleName)
        configRuleName = configRuleNameDecoded
        let complianceTypesContainer = try containerValues.decodeIfPresent([ConfigClientTypes.ComplianceType?].self, forKey: .complianceTypes)
        var complianceTypesDecoded0:[ConfigClientTypes.ComplianceType]? = nil
        if let complianceTypesContainer = complianceTypesContainer {
            complianceTypesDecoded0 = [ConfigClientTypes.ComplianceType]()
            for string0 in complianceTypesContainer {
                if let string0 = string0 {
                    complianceTypesDecoded0?.append(string0)
                }
            }
        }
        complianceTypes = complianceTypesDecoded0
        let limitDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .limit) ?? 0
        limit = limitDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
