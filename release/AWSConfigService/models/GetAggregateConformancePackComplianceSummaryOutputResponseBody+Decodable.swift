// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetAggregateConformancePackComplianceSummaryOutputResponseBody: Swift.Equatable {
    let aggregateConformancePackComplianceSummaries: [ConfigClientTypes.AggregateConformancePackComplianceSummary]?
    let groupByKey: Swift.String?
    let nextToken: Swift.String?
}

extension GetAggregateConformancePackComplianceSummaryOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case aggregateConformancePackComplianceSummaries = "AggregateConformancePackComplianceSummaries"
        case groupByKey = "GroupByKey"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let aggregateConformancePackComplianceSummariesContainer = try containerValues.decodeIfPresent([ConfigClientTypes.AggregateConformancePackComplianceSummary?].self, forKey: .aggregateConformancePackComplianceSummaries)
        var aggregateConformancePackComplianceSummariesDecoded0:[ConfigClientTypes.AggregateConformancePackComplianceSummary]? = nil
        if let aggregateConformancePackComplianceSummariesContainer = aggregateConformancePackComplianceSummariesContainer {
            aggregateConformancePackComplianceSummariesDecoded0 = [ConfigClientTypes.AggregateConformancePackComplianceSummary]()
            for structure0 in aggregateConformancePackComplianceSummariesContainer {
                if let structure0 = structure0 {
                    aggregateConformancePackComplianceSummariesDecoded0?.append(structure0)
                }
            }
        }
        aggregateConformancePackComplianceSummaries = aggregateConformancePackComplianceSummariesDecoded0
        let groupByKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .groupByKey)
        groupByKey = groupByKeyDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
