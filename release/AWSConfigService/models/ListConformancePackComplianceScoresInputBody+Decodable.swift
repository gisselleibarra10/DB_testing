// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListConformancePackComplianceScoresInputBody: Swift.Equatable {
    let filters: ConfigClientTypes.ConformancePackComplianceScoresFilters?
    let sortOrder: ConfigClientTypes.SortOrder?
    let sortBy: ConfigClientTypes.SortBy?
    let limit: Swift.Int
    let nextToken: Swift.String?
}

extension ListConformancePackComplianceScoresInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filters = "Filters"
        case limit = "Limit"
        case nextToken = "NextToken"
        case sortBy = "SortBy"
        case sortOrder = "SortOrder"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let filtersDecoded = try containerValues.decodeIfPresent(ConfigClientTypes.ConformancePackComplianceScoresFilters.self, forKey: .filters)
        filters = filtersDecoded
        let sortOrderDecoded = try containerValues.decodeIfPresent(ConfigClientTypes.SortOrder.self, forKey: .sortOrder)
        sortOrder = sortOrderDecoded
        let sortByDecoded = try containerValues.decodeIfPresent(ConfigClientTypes.SortBy.self, forKey: .sortBy)
        sortBy = sortByDecoded
        let limitDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .limit) ?? 0
        limit = limitDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
