// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeConfigurationAggregatorSourcesStatusInputBody: Swift.Equatable {
    let configurationAggregatorName: Swift.String?
    let updateStatus: [ConfigClientTypes.AggregatedSourceStatusType]?
    let nextToken: Swift.String?
    let limit: Swift.Int
}

extension DescribeConfigurationAggregatorSourcesStatusInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configurationAggregatorName = "ConfigurationAggregatorName"
        case limit = "Limit"
        case nextToken = "NextToken"
        case updateStatus = "UpdateStatus"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let configurationAggregatorNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .configurationAggregatorName)
        configurationAggregatorName = configurationAggregatorNameDecoded
        let updateStatusContainer = try containerValues.decodeIfPresent([ConfigClientTypes.AggregatedSourceStatusType?].self, forKey: .updateStatus)
        var updateStatusDecoded0:[ConfigClientTypes.AggregatedSourceStatusType]? = nil
        if let updateStatusContainer = updateStatusContainer {
            updateStatusDecoded0 = [ConfigClientTypes.AggregatedSourceStatusType]()
            for string0 in updateStatusContainer {
                if let string0 = string0 {
                    updateStatusDecoded0?.append(string0)
                }
            }
        }
        updateStatus = updateStatusDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let limitDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .limit) ?? 0
        limit = limitDecoded
    }
}
