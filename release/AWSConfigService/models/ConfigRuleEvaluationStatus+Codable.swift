// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ConfigClientTypes.ConfigRuleEvaluationStatus: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configRuleArn = "ConfigRuleArn"
        case configRuleId = "ConfigRuleId"
        case configRuleName = "ConfigRuleName"
        case firstActivatedTime = "FirstActivatedTime"
        case firstEvaluationStarted = "FirstEvaluationStarted"
        case lastDeactivatedTime = "LastDeactivatedTime"
        case lastDebugLogDeliveryStatus = "LastDebugLogDeliveryStatus"
        case lastDebugLogDeliveryStatusReason = "LastDebugLogDeliveryStatusReason"
        case lastDebugLogDeliveryTime = "LastDebugLogDeliveryTime"
        case lastErrorCode = "LastErrorCode"
        case lastErrorMessage = "LastErrorMessage"
        case lastFailedEvaluationTime = "LastFailedEvaluationTime"
        case lastFailedInvocationTime = "LastFailedInvocationTime"
        case lastSuccessfulEvaluationTime = "LastSuccessfulEvaluationTime"
        case lastSuccessfulInvocationTime = "LastSuccessfulInvocationTime"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let configRuleArn = self.configRuleArn {
            try encodeContainer.encode(configRuleArn, forKey: .configRuleArn)
        }
        if let configRuleId = self.configRuleId {
            try encodeContainer.encode(configRuleId, forKey: .configRuleId)
        }
        if let configRuleName = self.configRuleName {
            try encodeContainer.encode(configRuleName, forKey: .configRuleName)
        }
        if let firstActivatedTime = self.firstActivatedTime {
            try encodeContainer.encode(firstActivatedTime.timeIntervalSince1970, forKey: .firstActivatedTime)
        }
        if firstEvaluationStarted != false {
            try encodeContainer.encode(firstEvaluationStarted, forKey: .firstEvaluationStarted)
        }
        if let lastDeactivatedTime = self.lastDeactivatedTime {
            try encodeContainer.encode(lastDeactivatedTime.timeIntervalSince1970, forKey: .lastDeactivatedTime)
        }
        if let lastDebugLogDeliveryStatus = self.lastDebugLogDeliveryStatus {
            try encodeContainer.encode(lastDebugLogDeliveryStatus, forKey: .lastDebugLogDeliveryStatus)
        }
        if let lastDebugLogDeliveryStatusReason = self.lastDebugLogDeliveryStatusReason {
            try encodeContainer.encode(lastDebugLogDeliveryStatusReason, forKey: .lastDebugLogDeliveryStatusReason)
        }
        if let lastDebugLogDeliveryTime = self.lastDebugLogDeliveryTime {
            try encodeContainer.encode(lastDebugLogDeliveryTime.timeIntervalSince1970, forKey: .lastDebugLogDeliveryTime)
        }
        if let lastErrorCode = self.lastErrorCode {
            try encodeContainer.encode(lastErrorCode, forKey: .lastErrorCode)
        }
        if let lastErrorMessage = self.lastErrorMessage {
            try encodeContainer.encode(lastErrorMessage, forKey: .lastErrorMessage)
        }
        if let lastFailedEvaluationTime = self.lastFailedEvaluationTime {
            try encodeContainer.encode(lastFailedEvaluationTime.timeIntervalSince1970, forKey: .lastFailedEvaluationTime)
        }
        if let lastFailedInvocationTime = self.lastFailedInvocationTime {
            try encodeContainer.encode(lastFailedInvocationTime.timeIntervalSince1970, forKey: .lastFailedInvocationTime)
        }
        if let lastSuccessfulEvaluationTime = self.lastSuccessfulEvaluationTime {
            try encodeContainer.encode(lastSuccessfulEvaluationTime.timeIntervalSince1970, forKey: .lastSuccessfulEvaluationTime)
        }
        if let lastSuccessfulInvocationTime = self.lastSuccessfulInvocationTime {
            try encodeContainer.encode(lastSuccessfulInvocationTime.timeIntervalSince1970, forKey: .lastSuccessfulInvocationTime)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let configRuleNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .configRuleName)
        configRuleName = configRuleNameDecoded
        let configRuleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .configRuleArn)
        configRuleArn = configRuleArnDecoded
        let configRuleIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .configRuleId)
        configRuleId = configRuleIdDecoded
        let lastSuccessfulInvocationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastSuccessfulInvocationTime)
        lastSuccessfulInvocationTime = lastSuccessfulInvocationTimeDecoded
        let lastFailedInvocationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastFailedInvocationTime)
        lastFailedInvocationTime = lastFailedInvocationTimeDecoded
        let lastSuccessfulEvaluationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastSuccessfulEvaluationTime)
        lastSuccessfulEvaluationTime = lastSuccessfulEvaluationTimeDecoded
        let lastFailedEvaluationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastFailedEvaluationTime)
        lastFailedEvaluationTime = lastFailedEvaluationTimeDecoded
        let firstActivatedTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .firstActivatedTime)
        firstActivatedTime = firstActivatedTimeDecoded
        let lastDeactivatedTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastDeactivatedTime)
        lastDeactivatedTime = lastDeactivatedTimeDecoded
        let lastErrorCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastErrorCode)
        lastErrorCode = lastErrorCodeDecoded
        let lastErrorMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastErrorMessage)
        lastErrorMessage = lastErrorMessageDecoded
        let firstEvaluationStartedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .firstEvaluationStarted) ?? false
        firstEvaluationStarted = firstEvaluationStartedDecoded
        let lastDebugLogDeliveryStatusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastDebugLogDeliveryStatus)
        lastDebugLogDeliveryStatus = lastDebugLogDeliveryStatusDecoded
        let lastDebugLogDeliveryStatusReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastDebugLogDeliveryStatusReason)
        lastDebugLogDeliveryStatusReason = lastDebugLogDeliveryStatusReasonDecoded
        let lastDebugLogDeliveryTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastDebugLogDeliveryTime)
        lastDebugLogDeliveryTime = lastDebugLogDeliveryTimeDecoded
    }
}
