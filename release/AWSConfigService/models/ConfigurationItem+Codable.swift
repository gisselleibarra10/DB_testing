// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ConfigClientTypes.ConfigurationItem: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountId
        case arn
        case availabilityZone
        case awsRegion
        case configuration
        case configurationItemCaptureTime
        case configurationItemMD5Hash
        case configurationItemStatus
        case configurationStateId
        case relatedEvents
        case relationships
        case resourceCreationTime
        case resourceId
        case resourceName
        case resourceType
        case supplementaryConfiguration
        case tags
        case version
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accountId = self.accountId {
            try encodeContainer.encode(accountId, forKey: .accountId)
        }
        if let arn = self.arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let availabilityZone = self.availabilityZone {
            try encodeContainer.encode(availabilityZone, forKey: .availabilityZone)
        }
        if let awsRegion = self.awsRegion {
            try encodeContainer.encode(awsRegion, forKey: .awsRegion)
        }
        if let configuration = self.configuration {
            try encodeContainer.encode(configuration, forKey: .configuration)
        }
        if let configurationItemCaptureTime = self.configurationItemCaptureTime {
            try encodeContainer.encode(configurationItemCaptureTime.timeIntervalSince1970, forKey: .configurationItemCaptureTime)
        }
        if let configurationItemMD5Hash = self.configurationItemMD5Hash {
            try encodeContainer.encode(configurationItemMD5Hash, forKey: .configurationItemMD5Hash)
        }
        if let configurationItemStatus = self.configurationItemStatus {
            try encodeContainer.encode(configurationItemStatus.rawValue, forKey: .configurationItemStatus)
        }
        if let configurationStateId = self.configurationStateId {
            try encodeContainer.encode(configurationStateId, forKey: .configurationStateId)
        }
        if let relatedEvents = relatedEvents {
            var relatedEventsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .relatedEvents)
            for relatedeventlist0 in relatedEvents {
                try relatedEventsContainer.encode(relatedeventlist0)
            }
        }
        if let relationships = relationships {
            var relationshipsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .relationships)
            for relationshiplist0 in relationships {
                try relationshipsContainer.encode(relationshiplist0)
            }
        }
        if let resourceCreationTime = self.resourceCreationTime {
            try encodeContainer.encode(resourceCreationTime.timeIntervalSince1970, forKey: .resourceCreationTime)
        }
        if let resourceId = self.resourceId {
            try encodeContainer.encode(resourceId, forKey: .resourceId)
        }
        if let resourceName = self.resourceName {
            try encodeContainer.encode(resourceName, forKey: .resourceName)
        }
        if let resourceType = self.resourceType {
            try encodeContainer.encode(resourceType.rawValue, forKey: .resourceType)
        }
        if let supplementaryConfiguration = supplementaryConfiguration {
            var supplementaryConfigurationContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .supplementaryConfiguration)
            for (dictKey0, supplementaryconfiguration0) in supplementaryConfiguration {
                try supplementaryConfigurationContainer.encode(supplementaryconfiguration0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, tags0) in tags {
                try tagsContainer.encode(tags0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let version = self.version {
            try encodeContainer.encode(version, forKey: .version)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let versionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .version)
        version = versionDecoded
        let accountIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .accountId)
        accountId = accountIdDecoded
        let configurationItemCaptureTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .configurationItemCaptureTime)
        configurationItemCaptureTime = configurationItemCaptureTimeDecoded
        let configurationItemStatusDecoded = try containerValues.decodeIfPresent(ConfigClientTypes.ConfigurationItemStatus.self, forKey: .configurationItemStatus)
        configurationItemStatus = configurationItemStatusDecoded
        let configurationStateIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .configurationStateId)
        configurationStateId = configurationStateIdDecoded
        let configurationItemMD5HashDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .configurationItemMD5Hash)
        configurationItemMD5Hash = configurationItemMD5HashDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let resourceTypeDecoded = try containerValues.decodeIfPresent(ConfigClientTypes.ResourceType.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let resourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceId)
        resourceId = resourceIdDecoded
        let resourceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceName)
        resourceName = resourceNameDecoded
        let awsRegionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .awsRegion)
        awsRegion = awsRegionDecoded
        let availabilityZoneDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .availabilityZone)
        availabilityZone = availabilityZoneDecoded
        let resourceCreationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .resourceCreationTime)
        resourceCreationTime = resourceCreationTimeDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, value0) in tagsContainer {
                if let value0 = value0 {
                    tagsDecoded0?[key0] = value0
                }
            }
        }
        tags = tagsDecoded0
        let relatedEventsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .relatedEvents)
        var relatedEventsDecoded0:[Swift.String]? = nil
        if let relatedEventsContainer = relatedEventsContainer {
            relatedEventsDecoded0 = [Swift.String]()
            for string0 in relatedEventsContainer {
                if let string0 = string0 {
                    relatedEventsDecoded0?.append(string0)
                }
            }
        }
        relatedEvents = relatedEventsDecoded0
        let relationshipsContainer = try containerValues.decodeIfPresent([ConfigClientTypes.Relationship?].self, forKey: .relationships)
        var relationshipsDecoded0:[ConfigClientTypes.Relationship]? = nil
        if let relationshipsContainer = relationshipsContainer {
            relationshipsDecoded0 = [ConfigClientTypes.Relationship]()
            for structure0 in relationshipsContainer {
                if let structure0 = structure0 {
                    relationshipsDecoded0?.append(structure0)
                }
            }
        }
        relationships = relationshipsDecoded0
        let configurationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .configuration)
        configuration = configurationDecoded
        let supplementaryConfigurationContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .supplementaryConfiguration)
        var supplementaryConfigurationDecoded0: [Swift.String:Swift.String]? = nil
        if let supplementaryConfigurationContainer = supplementaryConfigurationContainer {
            supplementaryConfigurationDecoded0 = [Swift.String:Swift.String]()
            for (key0, supplementaryconfigurationvalue0) in supplementaryConfigurationContainer {
                if let supplementaryconfigurationvalue0 = supplementaryconfigurationvalue0 {
                    supplementaryConfigurationDecoded0?[key0] = supplementaryconfigurationvalue0
                }
            }
        }
        supplementaryConfiguration = supplementaryConfigurationDecoded0
    }
}
