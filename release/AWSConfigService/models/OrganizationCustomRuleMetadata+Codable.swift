// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ConfigClientTypes.OrganizationCustomRuleMetadata: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description = "Description"
        case inputParameters = "InputParameters"
        case lambdaFunctionArn = "LambdaFunctionArn"
        case maximumExecutionFrequency = "MaximumExecutionFrequency"
        case organizationConfigRuleTriggerTypes = "OrganizationConfigRuleTriggerTypes"
        case resourceIdScope = "ResourceIdScope"
        case resourceTypesScope = "ResourceTypesScope"
        case tagKeyScope = "TagKeyScope"
        case tagValueScope = "TagValueScope"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let inputParameters = self.inputParameters {
            try encodeContainer.encode(inputParameters, forKey: .inputParameters)
        }
        if let lambdaFunctionArn = self.lambdaFunctionArn {
            try encodeContainer.encode(lambdaFunctionArn, forKey: .lambdaFunctionArn)
        }
        if let maximumExecutionFrequency = self.maximumExecutionFrequency {
            try encodeContainer.encode(maximumExecutionFrequency.rawValue, forKey: .maximumExecutionFrequency)
        }
        if let organizationConfigRuleTriggerTypes = organizationConfigRuleTriggerTypes {
            var organizationConfigRuleTriggerTypesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .organizationConfigRuleTriggerTypes)
            for organizationconfigruletriggertypes0 in organizationConfigRuleTriggerTypes {
                try organizationConfigRuleTriggerTypesContainer.encode(organizationconfigruletriggertypes0.rawValue)
            }
        }
        if let resourceIdScope = self.resourceIdScope {
            try encodeContainer.encode(resourceIdScope, forKey: .resourceIdScope)
        }
        if let resourceTypesScope = resourceTypesScope {
            var resourceTypesScopeContainer = encodeContainer.nestedUnkeyedContainer(forKey: .resourceTypesScope)
            for resourcetypesscope0 in resourceTypesScope {
                try resourceTypesScopeContainer.encode(resourcetypesscope0)
            }
        }
        if let tagKeyScope = self.tagKeyScope {
            try encodeContainer.encode(tagKeyScope, forKey: .tagKeyScope)
        }
        if let tagValueScope = self.tagValueScope {
            try encodeContainer.encode(tagValueScope, forKey: .tagValueScope)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let lambdaFunctionArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lambdaFunctionArn)
        lambdaFunctionArn = lambdaFunctionArnDecoded
        let organizationConfigRuleTriggerTypesContainer = try containerValues.decodeIfPresent([ConfigClientTypes.OrganizationConfigRuleTriggerType?].self, forKey: .organizationConfigRuleTriggerTypes)
        var organizationConfigRuleTriggerTypesDecoded0:[ConfigClientTypes.OrganizationConfigRuleTriggerType]? = nil
        if let organizationConfigRuleTriggerTypesContainer = organizationConfigRuleTriggerTypesContainer {
            organizationConfigRuleTriggerTypesDecoded0 = [ConfigClientTypes.OrganizationConfigRuleTriggerType]()
            for string0 in organizationConfigRuleTriggerTypesContainer {
                if let string0 = string0 {
                    organizationConfigRuleTriggerTypesDecoded0?.append(string0)
                }
            }
        }
        organizationConfigRuleTriggerTypes = organizationConfigRuleTriggerTypesDecoded0
        let inputParametersDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .inputParameters)
        inputParameters = inputParametersDecoded
        let maximumExecutionFrequencyDecoded = try containerValues.decodeIfPresent(ConfigClientTypes.MaximumExecutionFrequency.self, forKey: .maximumExecutionFrequency)
        maximumExecutionFrequency = maximumExecutionFrequencyDecoded
        let resourceTypesScopeContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .resourceTypesScope)
        var resourceTypesScopeDecoded0:[Swift.String]? = nil
        if let resourceTypesScopeContainer = resourceTypesScopeContainer {
            resourceTypesScopeDecoded0 = [Swift.String]()
            for string0 in resourceTypesScopeContainer {
                if let string0 = string0 {
                    resourceTypesScopeDecoded0?.append(string0)
                }
            }
        }
        resourceTypesScope = resourceTypesScopeDecoded0
        let resourceIdScopeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceIdScope)
        resourceIdScope = resourceIdScopeDecoded
        let tagKeyScopeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tagKeyScope)
        tagKeyScope = tagKeyScopeDecoded
        let tagValueScopeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tagValueScope)
        tagValueScope = tagValueScopeDecoded
    }
}
