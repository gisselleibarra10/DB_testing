// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ConfigClientTypes.RemediationExecutionStatus: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case invocationTime = "InvocationTime"
        case lastUpdatedTime = "LastUpdatedTime"
        case resourceKey = "ResourceKey"
        case state = "State"
        case stepDetails = "StepDetails"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let invocationTime = self.invocationTime {
            try encodeContainer.encode(invocationTime.timeIntervalSince1970, forKey: .invocationTime)
        }
        if let lastUpdatedTime = self.lastUpdatedTime {
            try encodeContainer.encode(lastUpdatedTime.timeIntervalSince1970, forKey: .lastUpdatedTime)
        }
        if let resourceKey = self.resourceKey {
            try encodeContainer.encode(resourceKey, forKey: .resourceKey)
        }
        if let state = self.state {
            try encodeContainer.encode(state.rawValue, forKey: .state)
        }
        if let stepDetails = stepDetails {
            var stepDetailsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .stepDetails)
            for remediationexecutionsteps0 in stepDetails {
                try stepDetailsContainer.encode(remediationexecutionsteps0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceKeyDecoded = try containerValues.decodeIfPresent(ConfigClientTypes.ResourceKey.self, forKey: .resourceKey)
        resourceKey = resourceKeyDecoded
        let stateDecoded = try containerValues.decodeIfPresent(ConfigClientTypes.RemediationExecutionState.self, forKey: .state)
        state = stateDecoded
        let stepDetailsContainer = try containerValues.decodeIfPresent([ConfigClientTypes.RemediationExecutionStep?].self, forKey: .stepDetails)
        var stepDetailsDecoded0:[ConfigClientTypes.RemediationExecutionStep]? = nil
        if let stepDetailsContainer = stepDetailsContainer {
            stepDetailsDecoded0 = [ConfigClientTypes.RemediationExecutionStep]()
            for structure0 in stepDetailsContainer {
                if let structure0 = structure0 {
                    stepDetailsDecoded0?.append(structure0)
                }
            }
        }
        stepDetails = stepDetailsDecoded0
        let invocationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .invocationTime)
        invocationTime = invocationTimeDecoded
        let lastUpdatedTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastUpdatedTime)
        lastUpdatedTime = lastUpdatedTimeDecoded
    }
}
