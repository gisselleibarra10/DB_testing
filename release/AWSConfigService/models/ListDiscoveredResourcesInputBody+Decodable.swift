// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListDiscoveredResourcesInputBody: Swift.Equatable {
    let resourceType: ConfigClientTypes.ResourceType?
    let resourceIds: [Swift.String]?
    let resourceName: Swift.String?
    let limit: Swift.Int
    let includeDeletedResources: Swift.Bool
    let nextToken: Swift.String?
}

extension ListDiscoveredResourcesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case includeDeletedResources
        case limit
        case nextToken
        case resourceIds
        case resourceName
        case resourceType
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceTypeDecoded = try containerValues.decodeIfPresent(ConfigClientTypes.ResourceType.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let resourceIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .resourceIds)
        var resourceIdsDecoded0:[Swift.String]? = nil
        if let resourceIdsContainer = resourceIdsContainer {
            resourceIdsDecoded0 = [Swift.String]()
            for string0 in resourceIdsContainer {
                if let string0 = string0 {
                    resourceIdsDecoded0?.append(string0)
                }
            }
        }
        resourceIds = resourceIdsDecoded0
        let resourceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceName)
        resourceName = resourceNameDecoded
        let limitDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .limit) ?? 0
        limit = limitDecoded
        let includeDeletedResourcesDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .includeDeletedResources) ?? false
        includeDeletedResources = includeDeletedResourcesDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
