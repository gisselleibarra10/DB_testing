// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeConformancePackComplianceOutputResponseBody: Swift.Equatable {
    let conformancePackName: Swift.String?
    let conformancePackRuleComplianceList: [ConfigClientTypes.ConformancePackRuleCompliance]?
    let nextToken: Swift.String?
}

extension DescribeConformancePackComplianceOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case conformancePackName = "ConformancePackName"
        case conformancePackRuleComplianceList = "ConformancePackRuleComplianceList"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let conformancePackNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .conformancePackName)
        conformancePackName = conformancePackNameDecoded
        let conformancePackRuleComplianceListContainer = try containerValues.decodeIfPresent([ConfigClientTypes.ConformancePackRuleCompliance?].self, forKey: .conformancePackRuleComplianceList)
        var conformancePackRuleComplianceListDecoded0:[ConfigClientTypes.ConformancePackRuleCompliance]? = nil
        if let conformancePackRuleComplianceListContainer = conformancePackRuleComplianceListContainer {
            conformancePackRuleComplianceListDecoded0 = [ConfigClientTypes.ConformancePackRuleCompliance]()
            for structure0 in conformancePackRuleComplianceListContainer {
                if let structure0 = structure0 {
                    conformancePackRuleComplianceListDecoded0?.append(structure0)
                }
            }
        }
        conformancePackRuleComplianceList = conformancePackRuleComplianceListDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
