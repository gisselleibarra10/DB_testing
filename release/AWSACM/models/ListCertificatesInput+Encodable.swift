// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ListCertificatesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case certificateStatuses = "CertificateStatuses"
        case includes = "Includes"
        case maxItems = "MaxItems"
        case nextToken = "NextToken"
        case sortBy = "SortBy"
        case sortOrder = "SortOrder"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let certificateStatuses = certificateStatuses {
            var certificateStatusesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .certificateStatuses)
            for certificatestatuses0 in certificateStatuses {
                try certificateStatusesContainer.encode(certificatestatuses0.rawValue)
            }
        }
        if let includes = self.includes {
            try encodeContainer.encode(includes, forKey: .includes)
        }
        if let maxItems = self.maxItems {
            try encodeContainer.encode(maxItems, forKey: .maxItems)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let sortBy = self.sortBy {
            try encodeContainer.encode(sortBy.rawValue, forKey: .sortBy)
        }
        if let sortOrder = self.sortOrder {
            try encodeContainer.encode(sortOrder.rawValue, forKey: .sortOrder)
        }
    }
}
