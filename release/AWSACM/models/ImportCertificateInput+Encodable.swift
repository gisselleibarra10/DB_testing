// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ImportCertificateInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case certificate = "Certificate"
        case certificateArn = "CertificateArn"
        case certificateChain = "CertificateChain"
        case privateKey = "PrivateKey"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let certificate = self.certificate {
            try encodeContainer.encode(certificate.base64EncodedString(), forKey: .certificate)
        }
        if let certificateArn = self.certificateArn {
            try encodeContainer.encode(certificateArn, forKey: .certificateArn)
        }
        if let certificateChain = self.certificateChain {
            try encodeContainer.encode(certificateChain.base64EncodedString(), forKey: .certificateChain)
        }
        if let privateKey = self.privateKey {
            try encodeContainer.encode(privateKey.base64EncodedString(), forKey: .privateKey)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }
}
