// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension AcmClientTypes {
    public enum KeyUsageName: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case any
        case certificateSigning
        case crlSigning
        case custom
        case dataEncipherment
        case decipherOnly
        case digitalSignature
        case enchiperOnly
        case keyAgreement
        case keyEncipherment
        case nonRepudation
        case sdkUnknown(Swift.String)

        public static var allCases: [KeyUsageName] {
            return [
                .any,
                .certificateSigning,
                .crlSigning,
                .custom,
                .dataEncipherment,
                .decipherOnly,
                .digitalSignature,
                .enchiperOnly,
                .keyAgreement,
                .keyEncipherment,
                .nonRepudation,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .any: return "ANY"
            case .certificateSigning: return "CERTIFICATE_SIGNING"
            case .crlSigning: return "CRL_SIGNING"
            case .custom: return "CUSTOM"
            case .dataEncipherment: return "DATA_ENCIPHERMENT"
            case .decipherOnly: return "DECIPHER_ONLY"
            case .digitalSignature: return "DIGITAL_SIGNATURE"
            case .enchiperOnly: return "ENCIPHER_ONLY"
            case .keyAgreement: return "KEY_AGREEMENT"
            case .keyEncipherment: return "KEY_ENCIPHERMENT"
            case .nonRepudation: return "NON_REPUDIATION"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = KeyUsageName(rawValue: rawValue) ?? KeyUsageName.sdkUnknown(rawValue)
        }
    }
}
