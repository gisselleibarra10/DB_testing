// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension RequestCertificateInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case certificateAuthorityArn = "CertificateAuthorityArn"
        case domainName = "DomainName"
        case domainValidationOptions = "DomainValidationOptions"
        case idempotencyToken = "IdempotencyToken"
        case options = "Options"
        case subjectAlternativeNames = "SubjectAlternativeNames"
        case tags = "Tags"
        case validationMethod = "ValidationMethod"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let certificateAuthorityArn = self.certificateAuthorityArn {
            try encodeContainer.encode(certificateAuthorityArn, forKey: .certificateAuthorityArn)
        }
        if let domainName = self.domainName {
            try encodeContainer.encode(domainName, forKey: .domainName)
        }
        if let domainValidationOptions = domainValidationOptions {
            var domainValidationOptionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .domainValidationOptions)
            for domainvalidationoptionlist0 in domainValidationOptions {
                try domainValidationOptionsContainer.encode(domainvalidationoptionlist0)
            }
        }
        if let idempotencyToken = self.idempotencyToken {
            try encodeContainer.encode(idempotencyToken, forKey: .idempotencyToken)
        }
        if let options = self.options {
            try encodeContainer.encode(options, forKey: .options)
        }
        if let subjectAlternativeNames = subjectAlternativeNames {
            var subjectAlternativeNamesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .subjectAlternativeNames)
            for domainlist0 in subjectAlternativeNames {
                try subjectAlternativeNamesContainer.encode(domainlist0)
            }
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
        if let validationMethod = self.validationMethod {
            try encodeContainer.encode(validationMethod.rawValue, forKey: .validationMethod)
        }
    }
}
