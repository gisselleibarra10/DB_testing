// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct RequestCertificateInputBody: Swift.Equatable {
    let domainName: Swift.String?
    let validationMethod: AcmClientTypes.ValidationMethod?
    let subjectAlternativeNames: [Swift.String]?
    let idempotencyToken: Swift.String?
    let domainValidationOptions: [AcmClientTypes.DomainValidationOption]?
    let options: AcmClientTypes.CertificateOptions?
    let certificateAuthorityArn: Swift.String?
    let tags: [AcmClientTypes.Tag]?
}

extension RequestCertificateInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case certificateAuthorityArn = "CertificateAuthorityArn"
        case domainName = "DomainName"
        case domainValidationOptions = "DomainValidationOptions"
        case idempotencyToken = "IdempotencyToken"
        case options = "Options"
        case subjectAlternativeNames = "SubjectAlternativeNames"
        case tags = "Tags"
        case validationMethod = "ValidationMethod"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domainName)
        domainName = domainNameDecoded
        let validationMethodDecoded = try containerValues.decodeIfPresent(AcmClientTypes.ValidationMethod.self, forKey: .validationMethod)
        validationMethod = validationMethodDecoded
        let subjectAlternativeNamesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .subjectAlternativeNames)
        var subjectAlternativeNamesDecoded0:[Swift.String]? = nil
        if let subjectAlternativeNamesContainer = subjectAlternativeNamesContainer {
            subjectAlternativeNamesDecoded0 = [Swift.String]()
            for string0 in subjectAlternativeNamesContainer {
                if let string0 = string0 {
                    subjectAlternativeNamesDecoded0?.append(string0)
                }
            }
        }
        subjectAlternativeNames = subjectAlternativeNamesDecoded0
        let idempotencyTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .idempotencyToken)
        idempotencyToken = idempotencyTokenDecoded
        let domainValidationOptionsContainer = try containerValues.decodeIfPresent([AcmClientTypes.DomainValidationOption?].self, forKey: .domainValidationOptions)
        var domainValidationOptionsDecoded0:[AcmClientTypes.DomainValidationOption]? = nil
        if let domainValidationOptionsContainer = domainValidationOptionsContainer {
            domainValidationOptionsDecoded0 = [AcmClientTypes.DomainValidationOption]()
            for structure0 in domainValidationOptionsContainer {
                if let structure0 = structure0 {
                    domainValidationOptionsDecoded0?.append(structure0)
                }
            }
        }
        domainValidationOptions = domainValidationOptionsDecoded0
        let optionsDecoded = try containerValues.decodeIfPresent(AcmClientTypes.CertificateOptions.self, forKey: .options)
        options = optionsDecoded
        let certificateAuthorityArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .certificateAuthorityArn)
        certificateAuthorityArn = certificateAuthorityArnDecoded
        let tagsContainer = try containerValues.decodeIfPresent([AcmClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[AcmClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [AcmClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}
