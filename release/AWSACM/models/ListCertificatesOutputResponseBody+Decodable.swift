// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListCertificatesOutputResponseBody: Swift.Equatable {
    let nextToken: Swift.String?
    let certificateSummaryList: [AcmClientTypes.CertificateSummary]?
}

extension ListCertificatesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case certificateSummaryList = "CertificateSummaryList"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let certificateSummaryListContainer = try containerValues.decodeIfPresent([AcmClientTypes.CertificateSummary?].self, forKey: .certificateSummaryList)
        var certificateSummaryListDecoded0:[AcmClientTypes.CertificateSummary]? = nil
        if let certificateSummaryListContainer = certificateSummaryListContainer {
            certificateSummaryListDecoded0 = [AcmClientTypes.CertificateSummary]()
            for structure0 in certificateSummaryListContainer {
                if let structure0 = structure0 {
                    certificateSummaryListDecoded0?.append(structure0)
                }
            }
        }
        certificateSummaryList = certificateSummaryListDecoded0
    }
}
