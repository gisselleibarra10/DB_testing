// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AcmClientTypes {
    /// Contains metadata about an ACM certificate. This structure is returned in the response to a [DescribeCertificate] request.
    public struct CertificateDetail: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the certificate. For more information about ARNs, see [Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the Amazon Web Services General Reference.
        public var certificateArn: Swift.String?
        /// The Amazon Resource Name (ARN) of the private certificate authority (CA) that issued the certificate. This has the following format: arn:aws:acm-pca:region:account:certificate-authority/12345678-1234-1234-1234-123456789012
        public var certificateAuthorityArn: Swift.String?
        /// The time at which the certificate was requested.
        public var createdAt: ClientRuntime.Date?
        /// The fully qualified domain name for the certificate, such as www.example.com or example.com.
        public var domainName: Swift.String?
        /// Contains information about the initial validation of each domain name that occurs as a result of the [RequestCertificate] request. This field exists only when the certificate type is AMAZON_ISSUED.
        public var domainValidationOptions: [AcmClientTypes.DomainValidation]?
        /// Contains a list of Extended Key Usage X.509 v3 extension objects. Each object specifies a purpose for which the certificate public key can be used and consists of a name and an object identifier (OID).
        public var extendedKeyUsages: [AcmClientTypes.ExtendedKeyUsage]?
        /// The reason the certificate request failed. This value exists only when the certificate status is FAILED. For more information, see [Certificate Request Failed](https://docs.aws.amazon.com/acm/latest/userguide/troubleshooting.html#troubleshooting-failed) in the Certificate Manager User Guide.
        public var failureReason: AcmClientTypes.FailureReason?
        /// The date and time when the certificate was imported. This value exists only when the certificate type is IMPORTED.
        public var importedAt: ClientRuntime.Date?
        /// A list of ARNs for the Amazon Web Services resources that are using the certificate. A certificate can be used by multiple Amazon Web Services resources.
        public var inUseBy: [Swift.String]?
        /// The time at which the certificate was issued. This value exists only when the certificate type is AMAZON_ISSUED.
        public var issuedAt: ClientRuntime.Date?
        /// The name of the certificate authority that issued and signed the certificate.
        public var issuer: Swift.String?
        /// The algorithm that was used to generate the public-private key pair.
        public var keyAlgorithm: AcmClientTypes.KeyAlgorithm?
        /// A list of Key Usage X.509 v3 extension objects. Each object is a string value that identifies the purpose of the public key contained in the certificate. Possible extension values include DIGITAL_SIGNATURE, KEY_ENCHIPHERMENT, NON_REPUDIATION, and more.
        public var keyUsages: [AcmClientTypes.KeyUsage]?
        /// The time after which the certificate is not valid.
        public var notAfter: ClientRuntime.Date?
        /// The time before which the certificate is not valid.
        public var notBefore: ClientRuntime.Date?
        /// Value that specifies whether to add the certificate to a transparency log. Certificate transparency makes it possible to detect SSL certificates that have been mistakenly or maliciously issued. A browser might respond to certificate that has not been logged by showing an error message. The logs are cryptographically secure.
        public var options: AcmClientTypes.CertificateOptions?
        /// Specifies whether the certificate is eligible for renewal. At this time, only exported private certificates can be renewed with the [RenewCertificate] command.
        public var renewalEligibility: AcmClientTypes.RenewalEligibility?
        /// Contains information about the status of ACM's [managed renewal](https://docs.aws.amazon.com/acm/latest/userguide/acm-renewal.html) for the certificate. This field exists only when the certificate type is AMAZON_ISSUED.
        public var renewalSummary: AcmClientTypes.RenewalSummary?
        /// The reason the certificate was revoked. This value exists only when the certificate status is REVOKED.
        public var revocationReason: AcmClientTypes.RevocationReason?
        /// The time at which the certificate was revoked. This value exists only when the certificate status is REVOKED.
        public var revokedAt: ClientRuntime.Date?
        /// The serial number of the certificate.
        public var serial: Swift.String?
        /// The algorithm that was used to sign the certificate.
        public var signatureAlgorithm: Swift.String?
        /// The status of the certificate. A certificate enters status PENDING_VALIDATION upon being requested, unless it fails for any of the reasons given in the troubleshooting topic [Certificate request fails](https://docs.aws.amazon.com/acm/latest/userguide/troubleshooting-failed.html). ACM makes repeated attempts to validate a certificate for 72 hours and then times out. If a certificate shows status FAILED or VALIDATION_TIMED_OUT, delete the request, correct the issue with [DNS validation](https://docs.aws.amazon.com/acm/latest/userguide/dns-validation.html) or [Email validation](https://docs.aws.amazon.com/acm/latest/userguide/email-validation.html), and try again. If validation succeeds, the certificate enters status ISSUED.
        public var status: AcmClientTypes.CertificateStatus?
        /// The name of the entity that is associated with the public key contained in the certificate.
        public var subject: Swift.String?
        /// One or more domain names (subject alternative names) included in the certificate. This list contains the domain names that are bound to the public key that is contained in the certificate. The subject alternative names include the canonical domain name (CN) of the certificate and additional domain names that can be used to connect to the website.
        public var subjectAlternativeNames: [Swift.String]?
        /// The source of the certificate. For certificates provided by ACM, this value is AMAZON_ISSUED. For certificates that you imported with [ImportCertificate], this value is IMPORTED. ACM does not provide [managed renewal](https://docs.aws.amazon.com/acm/latest/userguide/acm-renewal.html) for imported certificates. For more information about the differences between certificates that you import and those that ACM provides, see [Importing Certificates](https://docs.aws.amazon.com/acm/latest/userguide/import-certificate.html) in the Certificate Manager User Guide.
        public var type: AcmClientTypes.CertificateType?

        public init (
            certificateArn: Swift.String? = nil,
            certificateAuthorityArn: Swift.String? = nil,
            createdAt: ClientRuntime.Date? = nil,
            domainName: Swift.String? = nil,
            domainValidationOptions: [AcmClientTypes.DomainValidation]? = nil,
            extendedKeyUsages: [AcmClientTypes.ExtendedKeyUsage]? = nil,
            failureReason: AcmClientTypes.FailureReason? = nil,
            importedAt: ClientRuntime.Date? = nil,
            inUseBy: [Swift.String]? = nil,
            issuedAt: ClientRuntime.Date? = nil,
            issuer: Swift.String? = nil,
            keyAlgorithm: AcmClientTypes.KeyAlgorithm? = nil,
            keyUsages: [AcmClientTypes.KeyUsage]? = nil,
            notAfter: ClientRuntime.Date? = nil,
            notBefore: ClientRuntime.Date? = nil,
            options: AcmClientTypes.CertificateOptions? = nil,
            renewalEligibility: AcmClientTypes.RenewalEligibility? = nil,
            renewalSummary: AcmClientTypes.RenewalSummary? = nil,
            revocationReason: AcmClientTypes.RevocationReason? = nil,
            revokedAt: ClientRuntime.Date? = nil,
            serial: Swift.String? = nil,
            signatureAlgorithm: Swift.String? = nil,
            status: AcmClientTypes.CertificateStatus? = nil,
            subject: Swift.String? = nil,
            subjectAlternativeNames: [Swift.String]? = nil,
            type: AcmClientTypes.CertificateType? = nil
        )
        {
            self.certificateArn = certificateArn
            self.certificateAuthorityArn = certificateAuthorityArn
            self.createdAt = createdAt
            self.domainName = domainName
            self.domainValidationOptions = domainValidationOptions
            self.extendedKeyUsages = extendedKeyUsages
            self.failureReason = failureReason
            self.importedAt = importedAt
            self.inUseBy = inUseBy
            self.issuedAt = issuedAt
            self.issuer = issuer
            self.keyAlgorithm = keyAlgorithm
            self.keyUsages = keyUsages
            self.notAfter = notAfter
            self.notBefore = notBefore
            self.options = options
            self.renewalEligibility = renewalEligibility
            self.renewalSummary = renewalSummary
            self.revocationReason = revocationReason
            self.revokedAt = revokedAt
            self.serial = serial
            self.signatureAlgorithm = signatureAlgorithm
            self.status = status
            self.subject = subject
            self.subjectAlternativeNames = subjectAlternativeNames
            self.type = type
        }
    }

}
