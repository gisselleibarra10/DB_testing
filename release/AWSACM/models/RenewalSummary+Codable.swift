// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AcmClientTypes.RenewalSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domainValidationOptions = "DomainValidationOptions"
        case renewalStatus = "RenewalStatus"
        case renewalStatusReason = "RenewalStatusReason"
        case updatedAt = "UpdatedAt"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let domainValidationOptions = domainValidationOptions {
            var domainValidationOptionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .domainValidationOptions)
            for domainvalidationlist0 in domainValidationOptions {
                try domainValidationOptionsContainer.encode(domainvalidationlist0)
            }
        }
        if let renewalStatus = self.renewalStatus {
            try encodeContainer.encode(renewalStatus.rawValue, forKey: .renewalStatus)
        }
        if let renewalStatusReason = self.renewalStatusReason {
            try encodeContainer.encode(renewalStatusReason.rawValue, forKey: .renewalStatusReason)
        }
        if let updatedAt = self.updatedAt {
            try encodeContainer.encode(updatedAt.timeIntervalSince1970, forKey: .updatedAt)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let renewalStatusDecoded = try containerValues.decodeIfPresent(AcmClientTypes.RenewalStatus.self, forKey: .renewalStatus)
        renewalStatus = renewalStatusDecoded
        let domainValidationOptionsContainer = try containerValues.decodeIfPresent([AcmClientTypes.DomainValidation?].self, forKey: .domainValidationOptions)
        var domainValidationOptionsDecoded0:[AcmClientTypes.DomainValidation]? = nil
        if let domainValidationOptionsContainer = domainValidationOptionsContainer {
            domainValidationOptionsDecoded0 = [AcmClientTypes.DomainValidation]()
            for structure0 in domainValidationOptionsContainer {
                if let structure0 = structure0 {
                    domainValidationOptionsDecoded0?.append(structure0)
                }
            }
        }
        domainValidationOptions = domainValidationOptionsDecoded0
        let renewalStatusReasonDecoded = try containerValues.decodeIfPresent(AcmClientTypes.FailureReason.self, forKey: .renewalStatusReason)
        renewalStatusReason = renewalStatusReasonDecoded
        let updatedAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .updatedAt)
        updatedAt = updatedAtDecoded
    }
}
