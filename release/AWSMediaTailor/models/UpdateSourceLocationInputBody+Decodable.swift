// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct UpdateSourceLocationInputBody: Swift.Equatable {
    let accessConfiguration: MediaTailorClientTypes.AccessConfiguration?
    let defaultSegmentDeliveryConfiguration: MediaTailorClientTypes.DefaultSegmentDeliveryConfiguration?
    let httpConfiguration: MediaTailorClientTypes.HttpConfiguration?
    let segmentDeliveryConfigurations: [MediaTailorClientTypes.SegmentDeliveryConfiguration]?
}

extension UpdateSourceLocationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accessConfiguration = "AccessConfiguration"
        case defaultSegmentDeliveryConfiguration = "DefaultSegmentDeliveryConfiguration"
        case httpConfiguration = "HttpConfiguration"
        case segmentDeliveryConfigurations = "SegmentDeliveryConfigurations"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let accessConfigurationDecoded = try containerValues.decodeIfPresent(MediaTailorClientTypes.AccessConfiguration.self, forKey: .accessConfiguration)
        accessConfiguration = accessConfigurationDecoded
        let defaultSegmentDeliveryConfigurationDecoded = try containerValues.decodeIfPresent(MediaTailorClientTypes.DefaultSegmentDeliveryConfiguration.self, forKey: .defaultSegmentDeliveryConfiguration)
        defaultSegmentDeliveryConfiguration = defaultSegmentDeliveryConfigurationDecoded
        let httpConfigurationDecoded = try containerValues.decodeIfPresent(MediaTailorClientTypes.HttpConfiguration.self, forKey: .httpConfiguration)
        httpConfiguration = httpConfigurationDecoded
        let segmentDeliveryConfigurationsContainer = try containerValues.decodeIfPresent([MediaTailorClientTypes.SegmentDeliveryConfiguration?].self, forKey: .segmentDeliveryConfigurations)
        var segmentDeliveryConfigurationsDecoded0:[MediaTailorClientTypes.SegmentDeliveryConfiguration]? = nil
        if let segmentDeliveryConfigurationsContainer = segmentDeliveryConfigurationsContainer {
            segmentDeliveryConfigurationsDecoded0 = [MediaTailorClientTypes.SegmentDeliveryConfiguration]()
            for structure0 in segmentDeliveryConfigurationsContainer {
                if let structure0 = structure0 {
                    segmentDeliveryConfigurationsDecoded0?.append(structure0)
                }
            }
        }
        segmentDeliveryConfigurations = segmentDeliveryConfigurationsDecoded0
    }
}
