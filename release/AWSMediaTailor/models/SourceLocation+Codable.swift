// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension MediaTailorClientTypes.SourceLocation: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accessConfiguration = "AccessConfiguration"
        case arn = "Arn"
        case creationTime = "CreationTime"
        case defaultSegmentDeliveryConfiguration = "DefaultSegmentDeliveryConfiguration"
        case httpConfiguration = "HttpConfiguration"
        case lastModifiedTime = "LastModifiedTime"
        case segmentDeliveryConfigurations = "SegmentDeliveryConfigurations"
        case sourceLocationName = "SourceLocationName"
        case tags = "tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accessConfiguration = self.accessConfiguration {
            try encodeContainer.encode(accessConfiguration, forKey: .accessConfiguration)
        }
        if let arn = self.arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let creationTime = self.creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let defaultSegmentDeliveryConfiguration = self.defaultSegmentDeliveryConfiguration {
            try encodeContainer.encode(defaultSegmentDeliveryConfiguration, forKey: .defaultSegmentDeliveryConfiguration)
        }
        if let httpConfiguration = self.httpConfiguration {
            try encodeContainer.encode(httpConfiguration, forKey: .httpConfiguration)
        }
        if let lastModifiedTime = self.lastModifiedTime {
            try encodeContainer.encode(lastModifiedTime.timeIntervalSince1970, forKey: .lastModifiedTime)
        }
        if let segmentDeliveryConfigurations = segmentDeliveryConfigurations {
            var segmentDeliveryConfigurationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .segmentDeliveryConfigurations)
            for __listofsegmentdeliveryconfiguration0 in segmentDeliveryConfigurations {
                try segmentDeliveryConfigurationsContainer.encode(__listofsegmentdeliveryconfiguration0)
            }
        }
        if let sourceLocationName = self.sourceLocationName {
            try encodeContainer.encode(sourceLocationName, forKey: .sourceLocationName)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, __mapof__string0) in tags {
                try tagsContainer.encode(__mapof__string0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let accessConfigurationDecoded = try containerValues.decodeIfPresent(MediaTailorClientTypes.AccessConfiguration.self, forKey: .accessConfiguration)
        accessConfiguration = accessConfigurationDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let defaultSegmentDeliveryConfigurationDecoded = try containerValues.decodeIfPresent(MediaTailorClientTypes.DefaultSegmentDeliveryConfiguration.self, forKey: .defaultSegmentDeliveryConfiguration)
        defaultSegmentDeliveryConfiguration = defaultSegmentDeliveryConfigurationDecoded
        let httpConfigurationDecoded = try containerValues.decodeIfPresent(MediaTailorClientTypes.HttpConfiguration.self, forKey: .httpConfiguration)
        httpConfiguration = httpConfigurationDecoded
        let lastModifiedTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedTime)
        lastModifiedTime = lastModifiedTimeDecoded
        let segmentDeliveryConfigurationsContainer = try containerValues.decodeIfPresent([MediaTailorClientTypes.SegmentDeliveryConfiguration?].self, forKey: .segmentDeliveryConfigurations)
        var segmentDeliveryConfigurationsDecoded0:[MediaTailorClientTypes.SegmentDeliveryConfiguration]? = nil
        if let segmentDeliveryConfigurationsContainer = segmentDeliveryConfigurationsContainer {
            segmentDeliveryConfigurationsDecoded0 = [MediaTailorClientTypes.SegmentDeliveryConfiguration]()
            for structure0 in segmentDeliveryConfigurationsContainer {
                if let structure0 = structure0 {
                    segmentDeliveryConfigurationsDecoded0?.append(structure0)
                }
            }
        }
        segmentDeliveryConfigurations = segmentDeliveryConfigurationsDecoded0
        let sourceLocationNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceLocationName)
        sourceLocationName = sourceLocationNameDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, __string0) in tagsContainer {
                if let __string0 = __string0 {
                    tagsDecoded0?[key0] = __string0
                }
            }
        }
        tags = tagsDecoded0
    }
}
