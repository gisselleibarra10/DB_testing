// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension MediaTailorClientTypes.ResponseOutputItem: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dashPlaylistSettings = "DashPlaylistSettings"
        case hlsPlaylistSettings = "HlsPlaylistSettings"
        case manifestName = "ManifestName"
        case playbackUrl = "PlaybackUrl"
        case sourceGroup = "SourceGroup"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dashPlaylistSettings = self.dashPlaylistSettings {
            try encodeContainer.encode(dashPlaylistSettings, forKey: .dashPlaylistSettings)
        }
        if let hlsPlaylistSettings = self.hlsPlaylistSettings {
            try encodeContainer.encode(hlsPlaylistSettings, forKey: .hlsPlaylistSettings)
        }
        if let manifestName = self.manifestName {
            try encodeContainer.encode(manifestName, forKey: .manifestName)
        }
        if let playbackUrl = self.playbackUrl {
            try encodeContainer.encode(playbackUrl, forKey: .playbackUrl)
        }
        if let sourceGroup = self.sourceGroup {
            try encodeContainer.encode(sourceGroup, forKey: .sourceGroup)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dashPlaylistSettingsDecoded = try containerValues.decodeIfPresent(MediaTailorClientTypes.DashPlaylistSettings.self, forKey: .dashPlaylistSettings)
        dashPlaylistSettings = dashPlaylistSettingsDecoded
        let hlsPlaylistSettingsDecoded = try containerValues.decodeIfPresent(MediaTailorClientTypes.HlsPlaylistSettings.self, forKey: .hlsPlaylistSettings)
        hlsPlaylistSettings = hlsPlaylistSettingsDecoded
        let manifestNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .manifestName)
        manifestName = manifestNameDecoded
        let playbackUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .playbackUrl)
        playbackUrl = playbackUrlDecoded
        let sourceGroupDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceGroup)
        sourceGroup = sourceGroupDecoded
    }
}
