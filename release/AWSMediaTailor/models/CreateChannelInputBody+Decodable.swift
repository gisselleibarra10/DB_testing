// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateChannelInputBody: Swift.Equatable {
    let fillerSlate: MediaTailorClientTypes.SlateSource?
    let outputs: [MediaTailorClientTypes.RequestOutputItem]?
    let playbackMode: MediaTailorClientTypes.PlaybackMode?
    let tags: [Swift.String:Swift.String]?
    let tier: MediaTailorClientTypes.Tier?
}

extension CreateChannelInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case fillerSlate = "FillerSlate"
        case outputs = "Outputs"
        case playbackMode = "PlaybackMode"
        case tags = "tags"
        case tier = "Tier"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fillerSlateDecoded = try containerValues.decodeIfPresent(MediaTailorClientTypes.SlateSource.self, forKey: .fillerSlate)
        fillerSlate = fillerSlateDecoded
        let outputsContainer = try containerValues.decodeIfPresent([MediaTailorClientTypes.RequestOutputItem?].self, forKey: .outputs)
        var outputsDecoded0:[MediaTailorClientTypes.RequestOutputItem]? = nil
        if let outputsContainer = outputsContainer {
            outputsDecoded0 = [MediaTailorClientTypes.RequestOutputItem]()
            for structure0 in outputsContainer {
                if let structure0 = structure0 {
                    outputsDecoded0?.append(structure0)
                }
            }
        }
        outputs = outputsDecoded0
        let playbackModeDecoded = try containerValues.decodeIfPresent(MediaTailorClientTypes.PlaybackMode.self, forKey: .playbackMode)
        playbackMode = playbackModeDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, __string0) in tagsContainer {
                if let __string0 = __string0 {
                    tagsDecoded0?[key0] = __string0
                }
            }
        }
        tags = tagsDecoded0
        let tierDecoded = try containerValues.decodeIfPresent(MediaTailorClientTypes.Tier.self, forKey: .tier)
        tier = tierDecoded
    }
}
