// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateSourceLocationOutputResponseBody: Swift.Equatable {
    let accessConfiguration: MediaTailorClientTypes.AccessConfiguration?
    let arn: Swift.String?
    let creationTime: ClientRuntime.Date?
    let defaultSegmentDeliveryConfiguration: MediaTailorClientTypes.DefaultSegmentDeliveryConfiguration?
    let httpConfiguration: MediaTailorClientTypes.HttpConfiguration?
    let lastModifiedTime: ClientRuntime.Date?
    let segmentDeliveryConfigurations: [MediaTailorClientTypes.SegmentDeliveryConfiguration]?
    let sourceLocationName: Swift.String?
    let tags: [Swift.String:Swift.String]?
}

extension CreateSourceLocationOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accessConfiguration = "AccessConfiguration"
        case arn = "Arn"
        case creationTime = "CreationTime"
        case defaultSegmentDeliveryConfiguration = "DefaultSegmentDeliveryConfiguration"
        case httpConfiguration = "HttpConfiguration"
        case lastModifiedTime = "LastModifiedTime"
        case segmentDeliveryConfigurations = "SegmentDeliveryConfigurations"
        case sourceLocationName = "SourceLocationName"
        case tags = "tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let accessConfigurationDecoded = try containerValues.decodeIfPresent(MediaTailorClientTypes.AccessConfiguration.self, forKey: .accessConfiguration)
        accessConfiguration = accessConfigurationDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let defaultSegmentDeliveryConfigurationDecoded = try containerValues.decodeIfPresent(MediaTailorClientTypes.DefaultSegmentDeliveryConfiguration.self, forKey: .defaultSegmentDeliveryConfiguration)
        defaultSegmentDeliveryConfiguration = defaultSegmentDeliveryConfigurationDecoded
        let httpConfigurationDecoded = try containerValues.decodeIfPresent(MediaTailorClientTypes.HttpConfiguration.self, forKey: .httpConfiguration)
        httpConfiguration = httpConfigurationDecoded
        let lastModifiedTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedTime)
        lastModifiedTime = lastModifiedTimeDecoded
        let segmentDeliveryConfigurationsContainer = try containerValues.decodeIfPresent([MediaTailorClientTypes.SegmentDeliveryConfiguration?].self, forKey: .segmentDeliveryConfigurations)
        var segmentDeliveryConfigurationsDecoded0:[MediaTailorClientTypes.SegmentDeliveryConfiguration]? = nil
        if let segmentDeliveryConfigurationsContainer = segmentDeliveryConfigurationsContainer {
            segmentDeliveryConfigurationsDecoded0 = [MediaTailorClientTypes.SegmentDeliveryConfiguration]()
            for structure0 in segmentDeliveryConfigurationsContainer {
                if let structure0 = structure0 {
                    segmentDeliveryConfigurationsDecoded0?.append(structure0)
                }
            }
        }
        segmentDeliveryConfigurations = segmentDeliveryConfigurationsDecoded0
        let sourceLocationNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceLocationName)
        sourceLocationName = sourceLocationNameDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, __string0) in tagsContainer {
                if let __string0 = __string0 {
                    tagsDecoded0?[key0] = __string0
                }
            }
        }
        tags = tagsDecoded0
    }
}
