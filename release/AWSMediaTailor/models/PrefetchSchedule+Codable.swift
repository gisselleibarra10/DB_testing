// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension MediaTailorClientTypes.PrefetchSchedule: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "Arn"
        case consumption = "Consumption"
        case name = "Name"
        case playbackConfigurationName = "PlaybackConfigurationName"
        case retrieval = "Retrieval"
        case streamId = "StreamId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = self.arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let consumption = self.consumption {
            try encodeContainer.encode(consumption, forKey: .consumption)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let playbackConfigurationName = self.playbackConfigurationName {
            try encodeContainer.encode(playbackConfigurationName, forKey: .playbackConfigurationName)
        }
        if let retrieval = self.retrieval {
            try encodeContainer.encode(retrieval, forKey: .retrieval)
        }
        if let streamId = self.streamId {
            try encodeContainer.encode(streamId, forKey: .streamId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let consumptionDecoded = try containerValues.decodeIfPresent(MediaTailorClientTypes.PrefetchConsumption.self, forKey: .consumption)
        consumption = consumptionDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let playbackConfigurationNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .playbackConfigurationName)
        playbackConfigurationName = playbackConfigurationNameDecoded
        let retrievalDecoded = try containerValues.decodeIfPresent(MediaTailorClientTypes.PrefetchRetrieval.self, forKey: .retrieval)
        retrieval = retrievalDecoded
        let streamIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .streamId)
        streamId = streamIdDecoded
    }
}
