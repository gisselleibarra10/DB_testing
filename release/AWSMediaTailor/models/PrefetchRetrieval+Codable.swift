// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension MediaTailorClientTypes.PrefetchRetrieval: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dynamicVariables = "DynamicVariables"
        case endTime = "EndTime"
        case startTime = "StartTime"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dynamicVariables = dynamicVariables {
            var dynamicVariablesContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .dynamicVariables)
            for (dictKey0, __mapof__string0) in dynamicVariables {
                try dynamicVariablesContainer.encode(__mapof__string0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let endTime = self.endTime {
            try encodeContainer.encode(endTime.timeIntervalSince1970, forKey: .endTime)
        }
        if let startTime = self.startTime {
            try encodeContainer.encode(startTime.timeIntervalSince1970, forKey: .startTime)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dynamicVariablesContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .dynamicVariables)
        var dynamicVariablesDecoded0: [Swift.String:Swift.String]? = nil
        if let dynamicVariablesContainer = dynamicVariablesContainer {
            dynamicVariablesDecoded0 = [Swift.String:Swift.String]()
            for (key0, __string0) in dynamicVariablesContainer {
                if let __string0 = __string0 {
                    dynamicVariablesDecoded0?[key0] = __string0
                }
            }
        }
        dynamicVariables = dynamicVariablesDecoded0
        let endTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .endTime)
        endTime = endTimeDecoded
        let startTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .startTime)
        startTime = startTimeDecoded
    }
}
