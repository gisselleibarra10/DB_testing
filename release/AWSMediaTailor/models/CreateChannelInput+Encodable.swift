// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CreateChannelInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case fillerSlate = "FillerSlate"
        case outputs = "Outputs"
        case playbackMode = "PlaybackMode"
        case tags = "tags"
        case tier = "Tier"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let fillerSlate = self.fillerSlate {
            try encodeContainer.encode(fillerSlate, forKey: .fillerSlate)
        }
        if let outputs = outputs {
            var outputsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .outputs)
            for requestoutputs0 in outputs {
                try outputsContainer.encode(requestoutputs0)
            }
        }
        if let playbackMode = self.playbackMode {
            try encodeContainer.encode(playbackMode.rawValue, forKey: .playbackMode)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, __mapof__string0) in tags {
                try tagsContainer.encode(__mapof__string0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let tier = self.tier {
            try encodeContainer.encode(tier.rawValue, forKey: .tier)
        }
    }
}
