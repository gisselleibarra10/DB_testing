// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct PutPlaybackConfigurationOutputResponseBody: Swift.Equatable {
    let adDecisionServerUrl: Swift.String?
    let availSuppression: MediaTailorClientTypes.AvailSuppression?
    let bumper: MediaTailorClientTypes.Bumper?
    let cdnConfiguration: MediaTailorClientTypes.CdnConfiguration?
    let configurationAliases: [Swift.String:[Swift.String:Swift.String]]?
    let dashConfiguration: MediaTailorClientTypes.DashConfiguration?
    let hlsConfiguration: MediaTailorClientTypes.HlsConfiguration?
    let livePreRollConfiguration: MediaTailorClientTypes.LivePreRollConfiguration?
    let logConfiguration: MediaTailorClientTypes.LogConfiguration?
    let manifestProcessingRules: MediaTailorClientTypes.ManifestProcessingRules?
    let name: Swift.String?
    let personalizationThresholdSeconds: Swift.Int?
    let playbackConfigurationArn: Swift.String?
    let playbackEndpointPrefix: Swift.String?
    let sessionInitializationEndpointPrefix: Swift.String?
    let slateAdUrl: Swift.String?
    let tags: [Swift.String:Swift.String]?
    let transcodeProfileName: Swift.String?
    let videoContentSourceUrl: Swift.String?
}

extension PutPlaybackConfigurationOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case adDecisionServerUrl = "AdDecisionServerUrl"
        case availSuppression = "AvailSuppression"
        case bumper = "Bumper"
        case cdnConfiguration = "CdnConfiguration"
        case configurationAliases = "ConfigurationAliases"
        case dashConfiguration = "DashConfiguration"
        case hlsConfiguration = "HlsConfiguration"
        case livePreRollConfiguration = "LivePreRollConfiguration"
        case logConfiguration = "LogConfiguration"
        case manifestProcessingRules = "ManifestProcessingRules"
        case name = "Name"
        case personalizationThresholdSeconds = "PersonalizationThresholdSeconds"
        case playbackConfigurationArn = "PlaybackConfigurationArn"
        case playbackEndpointPrefix = "PlaybackEndpointPrefix"
        case sessionInitializationEndpointPrefix = "SessionInitializationEndpointPrefix"
        case slateAdUrl = "SlateAdUrl"
        case tags = "tags"
        case transcodeProfileName = "TranscodeProfileName"
        case videoContentSourceUrl = "VideoContentSourceUrl"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let adDecisionServerUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .adDecisionServerUrl)
        adDecisionServerUrl = adDecisionServerUrlDecoded
        let availSuppressionDecoded = try containerValues.decodeIfPresent(MediaTailorClientTypes.AvailSuppression.self, forKey: .availSuppression)
        availSuppression = availSuppressionDecoded
        let bumperDecoded = try containerValues.decodeIfPresent(MediaTailorClientTypes.Bumper.self, forKey: .bumper)
        bumper = bumperDecoded
        let cdnConfigurationDecoded = try containerValues.decodeIfPresent(MediaTailorClientTypes.CdnConfiguration.self, forKey: .cdnConfiguration)
        cdnConfiguration = cdnConfigurationDecoded
        let configurationAliasesContainer = try containerValues.decodeIfPresent([Swift.String: [Swift.String: Swift.String?]?].self, forKey: .configurationAliases)
        var configurationAliasesDecoded0: [Swift.String:[Swift.String:Swift.String]]? = nil
        if let configurationAliasesContainer = configurationAliasesContainer {
            configurationAliasesDecoded0 = [Swift.String:[Swift.String:Swift.String]]()
            for (key0, __mapof__string0) in configurationAliasesContainer {
                var __mapof__string0Decoded0: [Swift.String: Swift.String]? = nil
                if let __mapof__string0 = __mapof__string0 {
                    __mapof__string0Decoded0 = [Swift.String: Swift.String]()
                    for (key1, __string1) in __mapof__string0 {
                        if let __string1 = __string1 {
                            __mapof__string0Decoded0?[key1] = __string1
                        }
                    }
                }
                configurationAliasesDecoded0?[key0] = __mapof__string0Decoded0
            }
        }
        configurationAliases = configurationAliasesDecoded0
        let dashConfigurationDecoded = try containerValues.decodeIfPresent(MediaTailorClientTypes.DashConfiguration.self, forKey: .dashConfiguration)
        dashConfiguration = dashConfigurationDecoded
        let hlsConfigurationDecoded = try containerValues.decodeIfPresent(MediaTailorClientTypes.HlsConfiguration.self, forKey: .hlsConfiguration)
        hlsConfiguration = hlsConfigurationDecoded
        let livePreRollConfigurationDecoded = try containerValues.decodeIfPresent(MediaTailorClientTypes.LivePreRollConfiguration.self, forKey: .livePreRollConfiguration)
        livePreRollConfiguration = livePreRollConfigurationDecoded
        let logConfigurationDecoded = try containerValues.decodeIfPresent(MediaTailorClientTypes.LogConfiguration.self, forKey: .logConfiguration)
        logConfiguration = logConfigurationDecoded
        let manifestProcessingRulesDecoded = try containerValues.decodeIfPresent(MediaTailorClientTypes.ManifestProcessingRules.self, forKey: .manifestProcessingRules)
        manifestProcessingRules = manifestProcessingRulesDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let personalizationThresholdSecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .personalizationThresholdSeconds)
        personalizationThresholdSeconds = personalizationThresholdSecondsDecoded
        let playbackConfigurationArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .playbackConfigurationArn)
        playbackConfigurationArn = playbackConfigurationArnDecoded
        let playbackEndpointPrefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .playbackEndpointPrefix)
        playbackEndpointPrefix = playbackEndpointPrefixDecoded
        let sessionInitializationEndpointPrefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sessionInitializationEndpointPrefix)
        sessionInitializationEndpointPrefix = sessionInitializationEndpointPrefixDecoded
        let slateAdUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .slateAdUrl)
        slateAdUrl = slateAdUrlDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, __string0) in tagsContainer {
                if let __string0 = __string0 {
                    tagsDecoded0?[key0] = __string0
                }
            }
        }
        tags = tagsDecoded0
        let transcodeProfileNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .transcodeProfileName)
        transcodeProfileName = transcodeProfileNameDecoded
        let videoContentSourceUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .videoContentSourceUrl)
        videoContentSourceUrl = videoContentSourceUrlDecoded
    }
}
