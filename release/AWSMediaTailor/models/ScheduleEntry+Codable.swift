// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension MediaTailorClientTypes.ScheduleEntry: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case approximateDurationSeconds = "ApproximateDurationSeconds"
        case approximateStartTime = "ApproximateStartTime"
        case arn = "Arn"
        case channelName = "ChannelName"
        case liveSourceName = "LiveSourceName"
        case programName = "ProgramName"
        case scheduleAdBreaks = "ScheduleAdBreaks"
        case scheduleEntryType = "ScheduleEntryType"
        case sourceLocationName = "SourceLocationName"
        case vodSourceName = "VodSourceName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let approximateDurationSeconds = self.approximateDurationSeconds {
            try encodeContainer.encode(approximateDurationSeconds, forKey: .approximateDurationSeconds)
        }
        if let approximateStartTime = self.approximateStartTime {
            try encodeContainer.encode(approximateStartTime.timeIntervalSince1970, forKey: .approximateStartTime)
        }
        if let arn = self.arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let channelName = self.channelName {
            try encodeContainer.encode(channelName, forKey: .channelName)
        }
        if let liveSourceName = self.liveSourceName {
            try encodeContainer.encode(liveSourceName, forKey: .liveSourceName)
        }
        if let programName = self.programName {
            try encodeContainer.encode(programName, forKey: .programName)
        }
        if let scheduleAdBreaks = scheduleAdBreaks {
            var scheduleAdBreaksContainer = encodeContainer.nestedUnkeyedContainer(forKey: .scheduleAdBreaks)
            for __listofscheduleadbreak0 in scheduleAdBreaks {
                try scheduleAdBreaksContainer.encode(__listofscheduleadbreak0)
            }
        }
        if let scheduleEntryType = self.scheduleEntryType {
            try encodeContainer.encode(scheduleEntryType.rawValue, forKey: .scheduleEntryType)
        }
        if let sourceLocationName = self.sourceLocationName {
            try encodeContainer.encode(sourceLocationName, forKey: .sourceLocationName)
        }
        if let vodSourceName = self.vodSourceName {
            try encodeContainer.encode(vodSourceName, forKey: .vodSourceName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let approximateDurationSecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .approximateDurationSeconds)
        approximateDurationSeconds = approximateDurationSecondsDecoded
        let approximateStartTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .approximateStartTime)
        approximateStartTime = approximateStartTimeDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let channelNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .channelName)
        channelName = channelNameDecoded
        let liveSourceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .liveSourceName)
        liveSourceName = liveSourceNameDecoded
        let programNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .programName)
        programName = programNameDecoded
        let scheduleAdBreaksContainer = try containerValues.decodeIfPresent([MediaTailorClientTypes.ScheduleAdBreak?].self, forKey: .scheduleAdBreaks)
        var scheduleAdBreaksDecoded0:[MediaTailorClientTypes.ScheduleAdBreak]? = nil
        if let scheduleAdBreaksContainer = scheduleAdBreaksContainer {
            scheduleAdBreaksDecoded0 = [MediaTailorClientTypes.ScheduleAdBreak]()
            for structure0 in scheduleAdBreaksContainer {
                if let structure0 = structure0 {
                    scheduleAdBreaksDecoded0?.append(structure0)
                }
            }
        }
        scheduleAdBreaks = scheduleAdBreaksDecoded0
        let scheduleEntryTypeDecoded = try containerValues.decodeIfPresent(MediaTailorClientTypes.ScheduleEntryType.self, forKey: .scheduleEntryType)
        scheduleEntryType = scheduleEntryTypeDecoded
        let sourceLocationNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceLocationName)
        sourceLocationName = sourceLocationNameDecoded
        let vodSourceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vodSourceName)
        vodSourceName = vodSourceNameDecoded
    }
}
