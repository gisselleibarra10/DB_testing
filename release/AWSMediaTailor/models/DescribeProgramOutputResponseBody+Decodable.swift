// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeProgramOutputResponseBody: Swift.Equatable {
    let adBreaks: [MediaTailorClientTypes.AdBreak]?
    let arn: Swift.String?
    let channelName: Swift.String?
    let creationTime: ClientRuntime.Date?
    let liveSourceName: Swift.String?
    let programName: Swift.String?
    let scheduledStartTime: ClientRuntime.Date?
    let sourceLocationName: Swift.String?
    let vodSourceName: Swift.String?
}

extension DescribeProgramOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case adBreaks = "AdBreaks"
        case arn = "Arn"
        case channelName = "ChannelName"
        case creationTime = "CreationTime"
        case liveSourceName = "LiveSourceName"
        case programName = "ProgramName"
        case scheduledStartTime = "ScheduledStartTime"
        case sourceLocationName = "SourceLocationName"
        case vodSourceName = "VodSourceName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let adBreaksContainer = try containerValues.decodeIfPresent([MediaTailorClientTypes.AdBreak?].self, forKey: .adBreaks)
        var adBreaksDecoded0:[MediaTailorClientTypes.AdBreak]? = nil
        if let adBreaksContainer = adBreaksContainer {
            adBreaksDecoded0 = [MediaTailorClientTypes.AdBreak]()
            for structure0 in adBreaksContainer {
                if let structure0 = structure0 {
                    adBreaksDecoded0?.append(structure0)
                }
            }
        }
        adBreaks = adBreaksDecoded0
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let channelNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .channelName)
        channelName = channelNameDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let liveSourceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .liveSourceName)
        liveSourceName = liveSourceNameDecoded
        let programNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .programName)
        programName = programNameDecoded
        let scheduledStartTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .scheduledStartTime)
        scheduledStartTime = scheduledStartTimeDecoded
        let sourceLocationNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceLocationName)
        sourceLocationName = sourceLocationNameDecoded
        let vodSourceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vodSourceName)
        vodSourceName = vodSourceNameDecoded
    }
}
