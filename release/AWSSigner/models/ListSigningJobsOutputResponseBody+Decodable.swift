// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListSigningJobsOutputResponseBody: Swift.Equatable {
    let jobs: [SignerClientTypes.SigningJob]?
    let nextToken: Swift.String?
}

extension ListSigningJobsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobs
        case nextToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobsContainer = try containerValues.decodeIfPresent([SignerClientTypes.SigningJob?].self, forKey: .jobs)
        var jobsDecoded0:[SignerClientTypes.SigningJob]? = nil
        if let jobsContainer = jobsContainer {
            jobsDecoded0 = [SignerClientTypes.SigningJob]()
            for structure0 in jobsContainer {
                if let structure0 = structure0 {
                    jobsDecoded0?.append(structure0)
                }
            }
        }
        jobs = jobsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
