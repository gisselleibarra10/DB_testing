// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct GetSigningPlatformOutputResponse: Swift.Equatable {
    /// The category type of the target signing platform.
    public var category: SignerClientTypes.Category?
    /// The display name of the target signing platform.
    public var displayName: Swift.String?
    /// The maximum size (in MB) of the payload that can be signed by the target platform.
    public var maxSizeInMB: Swift.Int
    /// A list of partner entities that use the target signing platform.
    public var partner: Swift.String?
    /// The ID of the target signing platform.
    public var platformId: Swift.String?
    /// A flag indicating whether signatures generated for the signing platform can be revoked.
    public var revocationSupported: Swift.Bool
    /// A list of configurations applied to the target platform at signing.
    public var signingConfiguration: SignerClientTypes.SigningConfiguration?
    /// The format of the target platform's signing image.
    public var signingImageFormat: SignerClientTypes.SigningImageFormat?
    /// The validation template that is used by the target signing platform.
    public var target: Swift.String?

    public init (
        category: SignerClientTypes.Category? = nil,
        displayName: Swift.String? = nil,
        maxSizeInMB: Swift.Int = 0,
        partner: Swift.String? = nil,
        platformId: Swift.String? = nil,
        revocationSupported: Swift.Bool = false,
        signingConfiguration: SignerClientTypes.SigningConfiguration? = nil,
        signingImageFormat: SignerClientTypes.SigningImageFormat? = nil,
        target: Swift.String? = nil
    )
    {
        self.category = category
        self.displayName = displayName
        self.maxSizeInMB = maxSizeInMB
        self.partner = partner
        self.platformId = platformId
        self.revocationSupported = revocationSupported
        self.signingConfiguration = signingConfiguration
        self.signingImageFormat = signingImageFormat
        self.target = target
    }
}
