// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SignerClientTypes.SigningPlatform: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case category
        case displayName
        case maxSizeInMB
        case partner
        case platformId
        case revocationSupported
        case signingConfiguration
        case signingImageFormat
        case target
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let category = self.category {
            try encodeContainer.encode(category.rawValue, forKey: .category)
        }
        if let displayName = self.displayName {
            try encodeContainer.encode(displayName, forKey: .displayName)
        }
        if maxSizeInMB != 0 {
            try encodeContainer.encode(maxSizeInMB, forKey: .maxSizeInMB)
        }
        if let partner = self.partner {
            try encodeContainer.encode(partner, forKey: .partner)
        }
        if let platformId = self.platformId {
            try encodeContainer.encode(platformId, forKey: .platformId)
        }
        if revocationSupported != false {
            try encodeContainer.encode(revocationSupported, forKey: .revocationSupported)
        }
        if let signingConfiguration = self.signingConfiguration {
            try encodeContainer.encode(signingConfiguration, forKey: .signingConfiguration)
        }
        if let signingImageFormat = self.signingImageFormat {
            try encodeContainer.encode(signingImageFormat, forKey: .signingImageFormat)
        }
        if let target = self.target {
            try encodeContainer.encode(target, forKey: .target)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let platformIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .platformId)
        platformId = platformIdDecoded
        let displayNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .displayName)
        displayName = displayNameDecoded
        let partnerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .partner)
        partner = partnerDecoded
        let targetDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .target)
        target = targetDecoded
        let categoryDecoded = try containerValues.decodeIfPresent(SignerClientTypes.Category.self, forKey: .category)
        category = categoryDecoded
        let signingConfigurationDecoded = try containerValues.decodeIfPresent(SignerClientTypes.SigningConfiguration.self, forKey: .signingConfiguration)
        signingConfiguration = signingConfigurationDecoded
        let signingImageFormatDecoded = try containerValues.decodeIfPresent(SignerClientTypes.SigningImageFormat.self, forKey: .signingImageFormat)
        signingImageFormat = signingImageFormatDecoded
        let maxSizeInMBDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxSizeInMB) ?? 0
        maxSizeInMB = maxSizeInMBDecoded
        let revocationSupportedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .revocationSupported) ?? false
        revocationSupported = revocationSupportedDecoded
    }
}
