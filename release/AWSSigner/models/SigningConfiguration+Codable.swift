// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SignerClientTypes.SigningConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case encryptionAlgorithmOptions
        case hashAlgorithmOptions
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let encryptionAlgorithmOptions = self.encryptionAlgorithmOptions {
            try encodeContainer.encode(encryptionAlgorithmOptions, forKey: .encryptionAlgorithmOptions)
        }
        if let hashAlgorithmOptions = self.hashAlgorithmOptions {
            try encodeContainer.encode(hashAlgorithmOptions, forKey: .hashAlgorithmOptions)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let encryptionAlgorithmOptionsDecoded = try containerValues.decodeIfPresent(SignerClientTypes.EncryptionAlgorithmOptions.self, forKey: .encryptionAlgorithmOptions)
        encryptionAlgorithmOptions = encryptionAlgorithmOptionsDecoded
        let hashAlgorithmOptionsDecoded = try containerValues.decodeIfPresent(SignerClientTypes.HashAlgorithmOptions.self, forKey: .hashAlgorithmOptions)
        hashAlgorithmOptions = hashAlgorithmOptionsDecoded
    }
}
