// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListSigningPlatformsOutputResponseBody: Swift.Equatable {
    let platforms: [SignerClientTypes.SigningPlatform]?
    let nextToken: Swift.String?
}

extension ListSigningPlatformsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken
        case platforms
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let platformsContainer = try containerValues.decodeIfPresent([SignerClientTypes.SigningPlatform?].self, forKey: .platforms)
        var platformsDecoded0:[SignerClientTypes.SigningPlatform]? = nil
        if let platformsContainer = platformsContainer {
            platformsDecoded0 = [SignerClientTypes.SigningPlatform]()
            for structure0 in platformsContainer {
                if let structure0 = structure0 {
                    platformsDecoded0?.append(structure0)
                }
            }
        }
        platforms = platformsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
