// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetSigningPlatformOutputResponseBody: Swift.Equatable {
    let platformId: Swift.String?
    let displayName: Swift.String?
    let partner: Swift.String?
    let target: Swift.String?
    let category: SignerClientTypes.Category?
    let signingConfiguration: SignerClientTypes.SigningConfiguration?
    let signingImageFormat: SignerClientTypes.SigningImageFormat?
    let maxSizeInMB: Swift.Int
    let revocationSupported: Swift.Bool
}

extension GetSigningPlatformOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case category
        case displayName
        case maxSizeInMB
        case partner
        case platformId
        case revocationSupported
        case signingConfiguration
        case signingImageFormat
        case target
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let platformIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .platformId)
        platformId = platformIdDecoded
        let displayNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .displayName)
        displayName = displayNameDecoded
        let partnerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .partner)
        partner = partnerDecoded
        let targetDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .target)
        target = targetDecoded
        let categoryDecoded = try containerValues.decodeIfPresent(SignerClientTypes.Category.self, forKey: .category)
        category = categoryDecoded
        let signingConfigurationDecoded = try containerValues.decodeIfPresent(SignerClientTypes.SigningConfiguration.self, forKey: .signingConfiguration)
        signingConfiguration = signingConfigurationDecoded
        let signingImageFormatDecoded = try containerValues.decodeIfPresent(SignerClientTypes.SigningImageFormat.self, forKey: .signingImageFormat)
        signingImageFormat = signingImageFormatDecoded
        let maxSizeInMBDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxSizeInMB) ?? 0
        maxSizeInMB = maxSizeInMBDecoded
        let revocationSupportedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .revocationSupported) ?? false
        revocationSupported = revocationSupportedDecoded
    }
}
