// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AccessAnalyzerClientTypes.PathElement: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case index
        case key
        case sdkUnknown
        case substring
        case value
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        switch self {
            case let .index(index):
                try container.encode(index, forKey: .index)
            case let .key(key):
                try container.encode(key, forKey: .key)
            case let .substring(substring):
                try container.encode(substring, forKey: .substring)
            case let .value(value):
                try container.encode(value, forKey: .value)
            case let .sdkUnknown(sdkUnknown):
                try container.encode(sdkUnknown, forKey: .sdkUnknown)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let values = try decoder.container(keyedBy: CodingKeys.self)
        let indexDecoded = try values.decodeIfPresent(Swift.Int.self, forKey: .index)
        if let index = indexDecoded {
            self = .index(index)
            return
        }
        let keyDecoded = try values.decodeIfPresent(Swift.String.self, forKey: .key)
        if let key = keyDecoded {
            self = .key(key)
            return
        }
        let substringDecoded = try values.decodeIfPresent(AccessAnalyzerClientTypes.Substring.self, forKey: .substring)
        if let substring = substringDecoded {
            self = .substring(substring)
            return
        }
        let valueDecoded = try values.decodeIfPresent(Swift.String.self, forKey: .value)
        if let value = valueDecoded {
            self = .value(value)
            return
        }
        self = .sdkUnknown("")
    }
}
