// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateAnalyzerInputBody: Swift.Equatable {
    let analyzerName: Swift.String?
    let type: AccessAnalyzerClientTypes.ModelType?
    let archiveRules: [AccessAnalyzerClientTypes.InlineArchiveRule]?
    let tags: [Swift.String:Swift.String]?
    let clientToken: Swift.String?
}

extension CreateAnalyzerInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case analyzerName
        case archiveRules
        case clientToken
        case tags
        case type
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let analyzerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .analyzerName)
        analyzerName = analyzerNameDecoded
        let typeDecoded = try containerValues.decodeIfPresent(AccessAnalyzerClientTypes.ModelType.self, forKey: .type)
        type = typeDecoded
        let archiveRulesContainer = try containerValues.decodeIfPresent([AccessAnalyzerClientTypes.InlineArchiveRule?].self, forKey: .archiveRules)
        var archiveRulesDecoded0:[AccessAnalyzerClientTypes.InlineArchiveRule]? = nil
        if let archiveRulesContainer = archiveRulesContainer {
            archiveRulesDecoded0 = [AccessAnalyzerClientTypes.InlineArchiveRule]()
            for structure0 in archiveRulesContainer {
                if let structure0 = structure0 {
                    archiveRulesDecoded0?.append(structure0)
                }
            }
        }
        archiveRules = archiveRulesDecoded0
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, string0) in tagsContainer {
                if let string0 = string0 {
                    tagsDecoded0?[key0] = string0
                }
            }
        }
        tags = tagsDecoded0
        let clientTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientToken)
        clientToken = clientTokenDecoded
    }
}
