// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AccessAnalyzerClientTypes.AnalyzedResource: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case actions
        case analyzedAt
        case createdAt
        case error
        case isPublic
        case resourceArn
        case resourceOwnerAccount
        case resourceType
        case sharedVia
        case status
        case updatedAt
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let actions = actions {
            var actionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .actions)
            for actionlist0 in actions {
                try actionsContainer.encode(actionlist0)
            }
        }
        if let analyzedAt = self.analyzedAt {
            try encodeContainer.encode(analyzedAt.timeIntervalSince1970, forKey: .analyzedAt)
        }
        if let createdAt = self.createdAt {
            try encodeContainer.encode(createdAt.timeIntervalSince1970, forKey: .createdAt)
        }
        if let error = self.error {
            try encodeContainer.encode(error, forKey: .error)
        }
        if let isPublic = self.isPublic {
            try encodeContainer.encode(isPublic, forKey: .isPublic)
        }
        if let resourceArn = self.resourceArn {
            try encodeContainer.encode(resourceArn, forKey: .resourceArn)
        }
        if let resourceOwnerAccount = self.resourceOwnerAccount {
            try encodeContainer.encode(resourceOwnerAccount, forKey: .resourceOwnerAccount)
        }
        if let resourceType = self.resourceType {
            try encodeContainer.encode(resourceType.rawValue, forKey: .resourceType)
        }
        if let sharedVia = sharedVia {
            var sharedViaContainer = encodeContainer.nestedUnkeyedContainer(forKey: .sharedVia)
            for sharedvialist0 in sharedVia {
                try sharedViaContainer.encode(sharedvialist0)
            }
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let updatedAt = self.updatedAt {
            try encodeContainer.encode(updatedAt.timeIntervalSince1970, forKey: .updatedAt)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceArn)
        resourceArn = resourceArnDecoded
        let resourceTypeDecoded = try containerValues.decodeIfPresent(AccessAnalyzerClientTypes.ResourceType.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let createdAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdAt)
        createdAt = createdAtDecoded
        let analyzedAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .analyzedAt)
        analyzedAt = analyzedAtDecoded
        let updatedAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .updatedAt)
        updatedAt = updatedAtDecoded
        let isPublicDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .isPublic)
        isPublic = isPublicDecoded
        let actionsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .actions)
        var actionsDecoded0:[Swift.String]? = nil
        if let actionsContainer = actionsContainer {
            actionsDecoded0 = [Swift.String]()
            for string0 in actionsContainer {
                if let string0 = string0 {
                    actionsDecoded0?.append(string0)
                }
            }
        }
        actions = actionsDecoded0
        let sharedViaContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .sharedVia)
        var sharedViaDecoded0:[Swift.String]? = nil
        if let sharedViaContainer = sharedViaContainer {
            sharedViaDecoded0 = [Swift.String]()
            for string0 in sharedViaContainer {
                if let string0 = string0 {
                    sharedViaDecoded0?.append(string0)
                }
            }
        }
        sharedVia = sharedViaDecoded0
        let statusDecoded = try containerValues.decodeIfPresent(AccessAnalyzerClientTypes.FindingStatus.self, forKey: .status)
        status = statusDecoded
        let resourceOwnerAccountDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceOwnerAccount)
        resourceOwnerAccount = resourceOwnerAccountDecoded
        let errorDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .error)
        error = errorDecoded
    }
}
