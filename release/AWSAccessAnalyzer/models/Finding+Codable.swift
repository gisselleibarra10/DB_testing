// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AccessAnalyzerClientTypes.Finding: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case action
        case analyzedAt
        case condition
        case createdAt
        case error
        case id
        case isPublic
        case principal
        case resource
        case resourceOwnerAccount
        case resourceType
        case sources
        case status
        case updatedAt
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let action = action {
            var actionContainer = encodeContainer.nestedUnkeyedContainer(forKey: .action)
            for actionlist0 in action {
                try actionContainer.encode(actionlist0)
            }
        }
        if let analyzedAt = self.analyzedAt {
            try encodeContainer.encode(analyzedAt.timeIntervalSince1970, forKey: .analyzedAt)
        }
        if let condition = condition {
            var conditionContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .condition)
            for (dictKey0, conditionkeymap0) in condition {
                try conditionContainer.encode(conditionkeymap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let createdAt = self.createdAt {
            try encodeContainer.encode(createdAt.timeIntervalSince1970, forKey: .createdAt)
        }
        if let error = self.error {
            try encodeContainer.encode(error, forKey: .error)
        }
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let isPublic = self.isPublic {
            try encodeContainer.encode(isPublic, forKey: .isPublic)
        }
        if let principal = principal {
            var principalContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .principal)
            for (dictKey0, principalmap0) in principal {
                try principalContainer.encode(principalmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let resource = self.resource {
            try encodeContainer.encode(resource, forKey: .resource)
        }
        if let resourceOwnerAccount = self.resourceOwnerAccount {
            try encodeContainer.encode(resourceOwnerAccount, forKey: .resourceOwnerAccount)
        }
        if let resourceType = self.resourceType {
            try encodeContainer.encode(resourceType.rawValue, forKey: .resourceType)
        }
        if let sources = sources {
            var sourcesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .sources)
            for findingsourcelist0 in sources {
                try sourcesContainer.encode(findingsourcelist0)
            }
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let updatedAt = self.updatedAt {
            try encodeContainer.encode(updatedAt.timeIntervalSince1970, forKey: .updatedAt)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let principalContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .principal)
        var principalDecoded0: [Swift.String:Swift.String]? = nil
        if let principalContainer = principalContainer {
            principalDecoded0 = [Swift.String:Swift.String]()
            for (key0, string0) in principalContainer {
                if let string0 = string0 {
                    principalDecoded0?[key0] = string0
                }
            }
        }
        principal = principalDecoded0
        let actionContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .action)
        var actionDecoded0:[Swift.String]? = nil
        if let actionContainer = actionContainer {
            actionDecoded0 = [Swift.String]()
            for string0 in actionContainer {
                if let string0 = string0 {
                    actionDecoded0?.append(string0)
                }
            }
        }
        action = actionDecoded0
        let resourceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resource)
        resource = resourceDecoded
        let isPublicDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .isPublic)
        isPublic = isPublicDecoded
        let resourceTypeDecoded = try containerValues.decodeIfPresent(AccessAnalyzerClientTypes.ResourceType.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let conditionContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .condition)
        var conditionDecoded0: [Swift.String:Swift.String]? = nil
        if let conditionContainer = conditionContainer {
            conditionDecoded0 = [Swift.String:Swift.String]()
            for (key0, string0) in conditionContainer {
                if let string0 = string0 {
                    conditionDecoded0?[key0] = string0
                }
            }
        }
        condition = conditionDecoded0
        let createdAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdAt)
        createdAt = createdAtDecoded
        let analyzedAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .analyzedAt)
        analyzedAt = analyzedAtDecoded
        let updatedAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .updatedAt)
        updatedAt = updatedAtDecoded
        let statusDecoded = try containerValues.decodeIfPresent(AccessAnalyzerClientTypes.FindingStatus.self, forKey: .status)
        status = statusDecoded
        let resourceOwnerAccountDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceOwnerAccount)
        resourceOwnerAccount = resourceOwnerAccountDecoded
        let errorDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .error)
        error = errorDecoded
        let sourcesContainer = try containerValues.decodeIfPresent([AccessAnalyzerClientTypes.FindingSource?].self, forKey: .sources)
        var sourcesDecoded0:[AccessAnalyzerClientTypes.FindingSource]? = nil
        if let sourcesContainer = sourcesContainer {
            sourcesDecoded0 = [AccessAnalyzerClientTypes.FindingSource]()
            for structure0 in sourcesContainer {
                if let structure0 = structure0 {
                    sourcesDecoded0?.append(structure0)
                }
            }
        }
        sources = sourcesDecoded0
    }
}
