// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AccessAnalyzerClientTypes.Criterion: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case contains
        case eq
        case exists
        case neq
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let contains = contains {
            var containsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .contains)
            for valuelist0 in contains {
                try containsContainer.encode(valuelist0)
            }
        }
        if let eq = eq {
            var eqContainer = encodeContainer.nestedUnkeyedContainer(forKey: .eq)
            for valuelist0 in eq {
                try eqContainer.encode(valuelist0)
            }
        }
        if let exists = self.exists {
            try encodeContainer.encode(exists, forKey: .exists)
        }
        if let neq = neq {
            var neqContainer = encodeContainer.nestedUnkeyedContainer(forKey: .neq)
            for valuelist0 in neq {
                try neqContainer.encode(valuelist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let eqContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .eq)
        var eqDecoded0:[Swift.String]? = nil
        if let eqContainer = eqContainer {
            eqDecoded0 = [Swift.String]()
            for string0 in eqContainer {
                if let string0 = string0 {
                    eqDecoded0?.append(string0)
                }
            }
        }
        eq = eqDecoded0
        let neqContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .neq)
        var neqDecoded0:[Swift.String]? = nil
        if let neqContainer = neqContainer {
            neqDecoded0 = [Swift.String]()
            for string0 in neqContainer {
                if let string0 = string0 {
                    neqDecoded0?.append(string0)
                }
            }
        }
        neq = neqDecoded0
        let containsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .contains)
        var containsDecoded0:[Swift.String]? = nil
        if let containsContainer = containsContainer {
            containsDecoded0 = [Swift.String]()
            for string0 in containsContainer {
                if let string0 = string0 {
                    containsDecoded0?.append(string0)
                }
            }
        }
        contains = containsDecoded0
        let existsDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .exists)
        exists = existsDecoded
    }
}
