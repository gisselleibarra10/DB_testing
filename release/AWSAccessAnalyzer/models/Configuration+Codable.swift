// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AccessAnalyzerClientTypes.Configuration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case iamrole = "iamRole"
        case kmskey = "kmsKey"
        case s3bucket = "s3Bucket"
        case sdkUnknown
        case secretsmanagersecret = "secretsManagerSecret"
        case sqsqueue = "sqsQueue"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        switch self {
            case let .iamrole(iamrole):
                try container.encode(iamrole, forKey: .iamrole)
            case let .kmskey(kmskey):
                try container.encode(kmskey, forKey: .kmskey)
            case let .s3bucket(s3bucket):
                try container.encode(s3bucket, forKey: .s3bucket)
            case let .secretsmanagersecret(secretsmanagersecret):
                try container.encode(secretsmanagersecret, forKey: .secretsmanagersecret)
            case let .sqsqueue(sqsqueue):
                try container.encode(sqsqueue, forKey: .sqsqueue)
            case let .sdkUnknown(sdkUnknown):
                try container.encode(sdkUnknown, forKey: .sdkUnknown)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let values = try decoder.container(keyedBy: CodingKeys.self)
        let iamroleDecoded = try values.decodeIfPresent(AccessAnalyzerClientTypes.IamRoleConfiguration.self, forKey: .iamrole)
        if let iamrole = iamroleDecoded {
            self = .iamrole(iamrole)
            return
        }
        let kmskeyDecoded = try values.decodeIfPresent(AccessAnalyzerClientTypes.KmsKeyConfiguration.self, forKey: .kmskey)
        if let kmskey = kmskeyDecoded {
            self = .kmskey(kmskey)
            return
        }
        let secretsmanagersecretDecoded = try values.decodeIfPresent(AccessAnalyzerClientTypes.SecretsManagerSecretConfiguration.self, forKey: .secretsmanagersecret)
        if let secretsmanagersecret = secretsmanagersecretDecoded {
            self = .secretsmanagersecret(secretsmanagersecret)
            return
        }
        let s3bucketDecoded = try values.decodeIfPresent(AccessAnalyzerClientTypes.S3BucketConfiguration.self, forKey: .s3bucket)
        if let s3bucket = s3bucketDecoded {
            self = .s3bucket(s3bucket)
            return
        }
        let sqsqueueDecoded = try values.decodeIfPresent(AccessAnalyzerClientTypes.SqsQueueConfiguration.self, forKey: .sqsqueue)
        if let sqsqueue = sqsqueueDecoded {
            self = .sqsqueue(sqsqueue)
            return
        }
        self = .sdkUnknown("")
    }
}
