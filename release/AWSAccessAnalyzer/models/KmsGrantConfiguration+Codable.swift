// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AccessAnalyzerClientTypes.KmsGrantConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case constraints
        case granteePrincipal
        case issuingAccount
        case operations
        case retiringPrincipal
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let constraints = self.constraints {
            try encodeContainer.encode(constraints, forKey: .constraints)
        }
        if let granteePrincipal = self.granteePrincipal {
            try encodeContainer.encode(granteePrincipal, forKey: .granteePrincipal)
        }
        if let issuingAccount = self.issuingAccount {
            try encodeContainer.encode(issuingAccount, forKey: .issuingAccount)
        }
        if let operations = operations {
            var operationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .operations)
            for kmsgrantoperationslist0 in operations {
                try operationsContainer.encode(kmsgrantoperationslist0.rawValue)
            }
        }
        if let retiringPrincipal = self.retiringPrincipal {
            try encodeContainer.encode(retiringPrincipal, forKey: .retiringPrincipal)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let operationsContainer = try containerValues.decodeIfPresent([AccessAnalyzerClientTypes.KmsGrantOperation?].self, forKey: .operations)
        var operationsDecoded0:[AccessAnalyzerClientTypes.KmsGrantOperation]? = nil
        if let operationsContainer = operationsContainer {
            operationsDecoded0 = [AccessAnalyzerClientTypes.KmsGrantOperation]()
            for string0 in operationsContainer {
                if let string0 = string0 {
                    operationsDecoded0?.append(string0)
                }
            }
        }
        operations = operationsDecoded0
        let granteePrincipalDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .granteePrincipal)
        granteePrincipal = granteePrincipalDecoded
        let retiringPrincipalDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .retiringPrincipal)
        retiringPrincipal = retiringPrincipalDecoded
        let constraintsDecoded = try containerValues.decodeIfPresent(AccessAnalyzerClientTypes.KmsGrantConstraints.self, forKey: .constraints)
        constraints = constraintsDecoded
        let issuingAccountDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .issuingAccount)
        issuingAccount = issuingAccountDecoded
    }
}
