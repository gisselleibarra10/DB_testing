// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AccessAnalyzerClientTypes.CloudTrailDetails: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accessRole
        case endTime
        case startTime
        case trails
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accessRole = self.accessRole {
            try encodeContainer.encode(accessRole, forKey: .accessRole)
        }
        if let endTime = self.endTime {
            try encodeContainer.encode(endTime.timeIntervalSince1970, forKey: .endTime)
        }
        if let startTime = self.startTime {
            try encodeContainer.encode(startTime.timeIntervalSince1970, forKey: .startTime)
        }
        if let trails = trails {
            var trailsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .trails)
            for traillist0 in trails {
                try trailsContainer.encode(traillist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let trailsContainer = try containerValues.decodeIfPresent([AccessAnalyzerClientTypes.Trail?].self, forKey: .trails)
        var trailsDecoded0:[AccessAnalyzerClientTypes.Trail]? = nil
        if let trailsContainer = trailsContainer {
            trailsDecoded0 = [AccessAnalyzerClientTypes.Trail]()
            for structure0 in trailsContainer {
                if let structure0 = structure0 {
                    trailsDecoded0?.append(structure0)
                }
            }
        }
        trails = trailsDecoded0
        let accessRoleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .accessRole)
        accessRole = accessRoleDecoded
        let startTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .startTime)
        startTime = startTimeDecoded
        let endTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .endTime)
        endTime = endTimeDecoded
    }
}
