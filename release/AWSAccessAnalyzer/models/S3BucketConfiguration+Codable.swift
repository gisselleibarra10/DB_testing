// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AccessAnalyzerClientTypes.S3BucketConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accessPoints
        case bucketAclGrants
        case bucketPolicy
        case bucketPublicAccessBlock
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accessPoints = accessPoints {
            var accessPointsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .accessPoints)
            for (dictKey0, s3accesspointconfigurationsmap0) in accessPoints {
                try accessPointsContainer.encode(s3accesspointconfigurationsmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let bucketAclGrants = bucketAclGrants {
            var bucketAclGrantsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .bucketAclGrants)
            for s3bucketaclgrantconfigurationslist0 in bucketAclGrants {
                try bucketAclGrantsContainer.encode(s3bucketaclgrantconfigurationslist0)
            }
        }
        if let bucketPolicy = self.bucketPolicy {
            try encodeContainer.encode(bucketPolicy, forKey: .bucketPolicy)
        }
        if let bucketPublicAccessBlock = self.bucketPublicAccessBlock {
            try encodeContainer.encode(bucketPublicAccessBlock, forKey: .bucketPublicAccessBlock)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let bucketPolicyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .bucketPolicy)
        bucketPolicy = bucketPolicyDecoded
        let bucketAclGrantsContainer = try containerValues.decodeIfPresent([AccessAnalyzerClientTypes.S3BucketAclGrantConfiguration?].self, forKey: .bucketAclGrants)
        var bucketAclGrantsDecoded0:[AccessAnalyzerClientTypes.S3BucketAclGrantConfiguration]? = nil
        if let bucketAclGrantsContainer = bucketAclGrantsContainer {
            bucketAclGrantsDecoded0 = [AccessAnalyzerClientTypes.S3BucketAclGrantConfiguration]()
            for structure0 in bucketAclGrantsContainer {
                if let structure0 = structure0 {
                    bucketAclGrantsDecoded0?.append(structure0)
                }
            }
        }
        bucketAclGrants = bucketAclGrantsDecoded0
        let bucketPublicAccessBlockDecoded = try containerValues.decodeIfPresent(AccessAnalyzerClientTypes.S3PublicAccessBlockConfiguration.self, forKey: .bucketPublicAccessBlock)
        bucketPublicAccessBlock = bucketPublicAccessBlockDecoded
        let accessPointsContainer = try containerValues.decodeIfPresent([Swift.String: AccessAnalyzerClientTypes.S3AccessPointConfiguration?].self, forKey: .accessPoints)
        var accessPointsDecoded0: [Swift.String:AccessAnalyzerClientTypes.S3AccessPointConfiguration]? = nil
        if let accessPointsContainer = accessPointsContainer {
            accessPointsDecoded0 = [Swift.String:AccessAnalyzerClientTypes.S3AccessPointConfiguration]()
            for (key0, s3accesspointconfiguration0) in accessPointsContainer {
                if let s3accesspointconfiguration0 = s3accesspointconfiguration0 {
                    accessPointsDecoded0?[key0] = s3accesspointconfiguration0
                }
            }
        }
        accessPoints = accessPointsDecoded0
    }
}
