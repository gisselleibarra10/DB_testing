// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AccessAnalyzerClientTypes.GeneratedPolicyResult: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case generatedPolicies
        case properties
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let generatedPolicies = generatedPolicies {
            var generatedPoliciesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .generatedPolicies)
            for generatedpolicylist0 in generatedPolicies {
                try generatedPoliciesContainer.encode(generatedpolicylist0)
            }
        }
        if let properties = self.properties {
            try encodeContainer.encode(properties, forKey: .properties)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let propertiesDecoded = try containerValues.decodeIfPresent(AccessAnalyzerClientTypes.GeneratedPolicyProperties.self, forKey: .properties)
        properties = propertiesDecoded
        let generatedPoliciesContainer = try containerValues.decodeIfPresent([AccessAnalyzerClientTypes.GeneratedPolicy?].self, forKey: .generatedPolicies)
        var generatedPoliciesDecoded0:[AccessAnalyzerClientTypes.GeneratedPolicy]? = nil
        if let generatedPoliciesContainer = generatedPoliciesContainer {
            generatedPoliciesDecoded0 = [AccessAnalyzerClientTypes.GeneratedPolicy]()
            for structure0 in generatedPoliciesContainer {
                if let structure0 = structure0 {
                    generatedPoliciesDecoded0?.append(structure0)
                }
            }
        }
        generatedPolicies = generatedPoliciesDecoded0
    }
}
