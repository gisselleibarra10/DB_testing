// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListUserAssociationsOutputResponseBody: Swift.Equatable {
    let instanceUserSummaries: [LicenseManagerUserSubscriptionsClientTypes.InstanceUserSummary]?
    let nextToken: Swift.String?
}

extension ListUserAssociationsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case instanceUserSummaries = "InstanceUserSummaries"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instanceUserSummariesContainer = try containerValues.decodeIfPresent([LicenseManagerUserSubscriptionsClientTypes.InstanceUserSummary?].self, forKey: .instanceUserSummaries)
        var instanceUserSummariesDecoded0:[LicenseManagerUserSubscriptionsClientTypes.InstanceUserSummary]? = nil
        if let instanceUserSummariesContainer = instanceUserSummariesContainer {
            instanceUserSummariesDecoded0 = [LicenseManagerUserSubscriptionsClientTypes.InstanceUserSummary]()
            for structure0 in instanceUserSummariesContainer {
                if let structure0 = structure0 {
                    instanceUserSummariesDecoded0?.append(structure0)
                }
            }
        }
        instanceUserSummaries = instanceUserSummariesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
