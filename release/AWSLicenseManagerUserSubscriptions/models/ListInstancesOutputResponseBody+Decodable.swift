// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListInstancesOutputResponseBody: Swift.Equatable {
    let instanceSummaries: [LicenseManagerUserSubscriptionsClientTypes.InstanceSummary]?
    let nextToken: Swift.String?
}

extension ListInstancesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case instanceSummaries = "InstanceSummaries"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instanceSummariesContainer = try containerValues.decodeIfPresent([LicenseManagerUserSubscriptionsClientTypes.InstanceSummary?].self, forKey: .instanceSummaries)
        var instanceSummariesDecoded0:[LicenseManagerUserSubscriptionsClientTypes.InstanceSummary]? = nil
        if let instanceSummariesContainer = instanceSummariesContainer {
            instanceSummariesDecoded0 = [LicenseManagerUserSubscriptionsClientTypes.InstanceSummary]()
            for structure0 in instanceSummariesContainer {
                if let structure0 = structure0 {
                    instanceSummariesDecoded0?.append(structure0)
                }
            }
        }
        instanceSummaries = instanceSummariesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
