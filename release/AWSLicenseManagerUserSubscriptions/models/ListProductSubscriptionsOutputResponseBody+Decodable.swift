// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListProductSubscriptionsOutputResponseBody: Swift.Equatable {
    let productUserSummaries: [LicenseManagerUserSubscriptionsClientTypes.ProductUserSummary]?
    let nextToken: Swift.String?
}

extension ListProductSubscriptionsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case productUserSummaries = "ProductUserSummaries"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let productUserSummariesContainer = try containerValues.decodeIfPresent([LicenseManagerUserSubscriptionsClientTypes.ProductUserSummary?].self, forKey: .productUserSummaries)
        var productUserSummariesDecoded0:[LicenseManagerUserSubscriptionsClientTypes.ProductUserSummary]? = nil
        if let productUserSummariesContainer = productUserSummariesContainer {
            productUserSummariesDecoded0 = [LicenseManagerUserSubscriptionsClientTypes.ProductUserSummary]()
            for structure0 in productUserSummariesContainer {
                if let structure0 = structure0 {
                    productUserSummariesDecoded0?.append(structure0)
                }
            }
        }
        productUserSummaries = productUserSummariesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
