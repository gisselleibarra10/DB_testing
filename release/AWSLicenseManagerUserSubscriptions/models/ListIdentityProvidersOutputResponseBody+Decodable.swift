// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListIdentityProvidersOutputResponseBody: Swift.Equatable {
    let identityProviderSummaries: [LicenseManagerUserSubscriptionsClientTypes.IdentityProviderSummary]?
    let nextToken: Swift.String?
}

extension ListIdentityProvidersOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case identityProviderSummaries = "IdentityProviderSummaries"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let identityProviderSummariesContainer = try containerValues.decodeIfPresent([LicenseManagerUserSubscriptionsClientTypes.IdentityProviderSummary?].self, forKey: .identityProviderSummaries)
        var identityProviderSummariesDecoded0:[LicenseManagerUserSubscriptionsClientTypes.IdentityProviderSummary]? = nil
        if let identityProviderSummariesContainer = identityProviderSummariesContainer {
            identityProviderSummariesDecoded0 = [LicenseManagerUserSubscriptionsClientTypes.IdentityProviderSummary]()
            for structure0 in identityProviderSummariesContainer {
                if let structure0 = structure0 {
                    identityProviderSummariesDecoded0?.append(structure0)
                }
            }
        }
        identityProviderSummaries = identityProviderSummariesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
