// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension EcrClientTypes.ImageScanFindingsSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case findingSeverityCounts
        case imageScanCompletedAt
        case vulnerabilitySourceUpdatedAt
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let findingSeverityCounts = findingSeverityCounts {
            var findingSeverityCountsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .findingSeverityCounts)
            for (dictKey0, findingseveritycounts0) in findingSeverityCounts {
                try findingSeverityCountsContainer.encode(findingseveritycounts0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let imageScanCompletedAt = self.imageScanCompletedAt {
            try encodeContainer.encode(imageScanCompletedAt.timeIntervalSince1970, forKey: .imageScanCompletedAt)
        }
        if let vulnerabilitySourceUpdatedAt = self.vulnerabilitySourceUpdatedAt {
            try encodeContainer.encode(vulnerabilitySourceUpdatedAt.timeIntervalSince1970, forKey: .vulnerabilitySourceUpdatedAt)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let imageScanCompletedAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .imageScanCompletedAt)
        imageScanCompletedAt = imageScanCompletedAtDecoded
        let vulnerabilitySourceUpdatedAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .vulnerabilitySourceUpdatedAt)
        vulnerabilitySourceUpdatedAt = vulnerabilitySourceUpdatedAtDecoded
        let findingSeverityCountsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.Int?].self, forKey: .findingSeverityCounts)
        var findingSeverityCountsDecoded0: [Swift.String:Swift.Int]? = nil
        if let findingSeverityCountsContainer = findingSeverityCountsContainer {
            findingSeverityCountsDecoded0 = [Swift.String:Swift.Int]()
            for (key0, severitycount0) in findingSeverityCountsContainer {
                if let severitycount0 = severitycount0 {
                    findingSeverityCountsDecoded0?[key0] = severitycount0
                }
            }
        }
        findingSeverityCounts = findingSeverityCountsDecoded0
    }
}
