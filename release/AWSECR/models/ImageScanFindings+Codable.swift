// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension EcrClientTypes.ImageScanFindings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case enhancedFindings
        case findingSeverityCounts
        case findings
        case imageScanCompletedAt
        case vulnerabilitySourceUpdatedAt
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let enhancedFindings = enhancedFindings {
            var enhancedFindingsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .enhancedFindings)
            for enhancedimagescanfindinglist0 in enhancedFindings {
                try enhancedFindingsContainer.encode(enhancedimagescanfindinglist0)
            }
        }
        if let findingSeverityCounts = findingSeverityCounts {
            var findingSeverityCountsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .findingSeverityCounts)
            for (dictKey0, findingseveritycounts0) in findingSeverityCounts {
                try findingSeverityCountsContainer.encode(findingseveritycounts0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let findings = findings {
            var findingsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .findings)
            for imagescanfindinglist0 in findings {
                try findingsContainer.encode(imagescanfindinglist0)
            }
        }
        if let imageScanCompletedAt = self.imageScanCompletedAt {
            try encodeContainer.encode(imageScanCompletedAt.timeIntervalSince1970, forKey: .imageScanCompletedAt)
        }
        if let vulnerabilitySourceUpdatedAt = self.vulnerabilitySourceUpdatedAt {
            try encodeContainer.encode(vulnerabilitySourceUpdatedAt.timeIntervalSince1970, forKey: .vulnerabilitySourceUpdatedAt)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let imageScanCompletedAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .imageScanCompletedAt)
        imageScanCompletedAt = imageScanCompletedAtDecoded
        let vulnerabilitySourceUpdatedAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .vulnerabilitySourceUpdatedAt)
        vulnerabilitySourceUpdatedAt = vulnerabilitySourceUpdatedAtDecoded
        let findingSeverityCountsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.Int?].self, forKey: .findingSeverityCounts)
        var findingSeverityCountsDecoded0: [Swift.String:Swift.Int]? = nil
        if let findingSeverityCountsContainer = findingSeverityCountsContainer {
            findingSeverityCountsDecoded0 = [Swift.String:Swift.Int]()
            for (key0, severitycount0) in findingSeverityCountsContainer {
                if let severitycount0 = severitycount0 {
                    findingSeverityCountsDecoded0?[key0] = severitycount0
                }
            }
        }
        findingSeverityCounts = findingSeverityCountsDecoded0
        let findingsContainer = try containerValues.decodeIfPresent([EcrClientTypes.ImageScanFinding?].self, forKey: .findings)
        var findingsDecoded0:[EcrClientTypes.ImageScanFinding]? = nil
        if let findingsContainer = findingsContainer {
            findingsDecoded0 = [EcrClientTypes.ImageScanFinding]()
            for structure0 in findingsContainer {
                if let structure0 = structure0 {
                    findingsDecoded0?.append(structure0)
                }
            }
        }
        findings = findingsDecoded0
        let enhancedFindingsContainer = try containerValues.decodeIfPresent([EcrClientTypes.EnhancedImageScanFinding?].self, forKey: .enhancedFindings)
        var enhancedFindingsDecoded0:[EcrClientTypes.EnhancedImageScanFinding]? = nil
        if let enhancedFindingsContainer = enhancedFindingsContainer {
            enhancedFindingsDecoded0 = [EcrClientTypes.EnhancedImageScanFinding]()
            for structure0 in enhancedFindingsContainer {
                if let structure0 = structure0 {
                    enhancedFindingsDecoded0?.append(structure0)
                }
            }
        }
        enhancedFindings = enhancedFindingsDecoded0
    }
}
