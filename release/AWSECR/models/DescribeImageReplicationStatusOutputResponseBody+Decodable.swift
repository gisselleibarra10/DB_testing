// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeImageReplicationStatusOutputResponseBody: Swift.Equatable {
    let repositoryName: Swift.String?
    let imageId: EcrClientTypes.ImageIdentifier?
    let replicationStatuses: [EcrClientTypes.ImageReplicationStatus]?
}

extension DescribeImageReplicationStatusOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case imageId
        case replicationStatuses
        case repositoryName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let repositoryNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .repositoryName)
        repositoryName = repositoryNameDecoded
        let imageIdDecoded = try containerValues.decodeIfPresent(EcrClientTypes.ImageIdentifier.self, forKey: .imageId)
        imageId = imageIdDecoded
        let replicationStatusesContainer = try containerValues.decodeIfPresent([EcrClientTypes.ImageReplicationStatus?].self, forKey: .replicationStatuses)
        var replicationStatusesDecoded0:[EcrClientTypes.ImageReplicationStatus]? = nil
        if let replicationStatusesContainer = replicationStatusesContainer {
            replicationStatusesDecoded0 = [EcrClientTypes.ImageReplicationStatus]()
            for structure0 in replicationStatusesContainer {
                if let structure0 = structure0 {
                    replicationStatusesDecoded0?.append(structure0)
                }
            }
        }
        replicationStatuses = replicationStatusesDecoded0
    }
}
