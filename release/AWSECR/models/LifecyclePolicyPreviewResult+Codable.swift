// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension EcrClientTypes.LifecyclePolicyPreviewResult: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case action
        case appliedRulePriority
        case imageDigest
        case imagePushedAt
        case imageTags
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let action = self.action {
            try encodeContainer.encode(action, forKey: .action)
        }
        if let appliedRulePriority = self.appliedRulePriority {
            try encodeContainer.encode(appliedRulePriority, forKey: .appliedRulePriority)
        }
        if let imageDigest = self.imageDigest {
            try encodeContainer.encode(imageDigest, forKey: .imageDigest)
        }
        if let imagePushedAt = self.imagePushedAt {
            try encodeContainer.encode(imagePushedAt.timeIntervalSince1970, forKey: .imagePushedAt)
        }
        if let imageTags = imageTags {
            var imageTagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .imageTags)
            for imagetaglist0 in imageTags {
                try imageTagsContainer.encode(imagetaglist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let imageTagsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .imageTags)
        var imageTagsDecoded0:[Swift.String]? = nil
        if let imageTagsContainer = imageTagsContainer {
            imageTagsDecoded0 = [Swift.String]()
            for string0 in imageTagsContainer {
                if let string0 = string0 {
                    imageTagsDecoded0?.append(string0)
                }
            }
        }
        imageTags = imageTagsDecoded0
        let imageDigestDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .imageDigest)
        imageDigest = imageDigestDecoded
        let imagePushedAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .imagePushedAt)
        imagePushedAt = imagePushedAtDecoded
        let actionDecoded = try containerValues.decodeIfPresent(EcrClientTypes.LifecyclePolicyRuleAction.self, forKey: .action)
        action = actionDecoded
        let appliedRulePriorityDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .appliedRulePriority)
        appliedRulePriority = appliedRulePriorityDecoded
    }
}
