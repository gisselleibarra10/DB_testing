// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension BackupStorageClientTypes.Chunk: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case checksum = "Checksum"
        case checksumAlgorithm = "ChecksumAlgorithm"
        case chunkToken = "ChunkToken"
        case index = "Index"
        case length = "Length"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let checksum = self.checksum {
            try encodeContainer.encode(checksum, forKey: .checksum)
        }
        if let checksumAlgorithm = self.checksumAlgorithm {
            try encodeContainer.encode(checksumAlgorithm.rawValue, forKey: .checksumAlgorithm)
        }
        if let chunkToken = self.chunkToken {
            try encodeContainer.encode(chunkToken, forKey: .chunkToken)
        }
        if index != 0 {
            try encodeContainer.encode(index, forKey: .index)
        }
        if length != 0 {
            try encodeContainer.encode(length, forKey: .length)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let indexDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .index) ?? 0
        index = indexDecoded
        let lengthDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .length) ?? 0
        length = lengthDecoded
        let checksumDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .checksum)
        checksum = checksumDecoded
        let checksumAlgorithmDecoded = try containerValues.decodeIfPresent(BackupStorageClientTypes.DataChecksumAlgorithm.self, forKey: .checksumAlgorithm)
        checksumAlgorithm = checksumAlgorithmDecoded
        let chunkTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .chunkToken)
        chunkToken = chunkTokenDecoded
    }
}
