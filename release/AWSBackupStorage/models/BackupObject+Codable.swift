// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension BackupStorageClientTypes.BackupObject: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case chunksCount = "ChunksCount"
        case metadataString = "MetadataString"
        case name = "Name"
        case objectChecksum = "ObjectChecksum"
        case objectChecksumAlgorithm = "ObjectChecksumAlgorithm"
        case objectToken = "ObjectToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let chunksCount = self.chunksCount {
            try encodeContainer.encode(chunksCount, forKey: .chunksCount)
        }
        if let metadataString = self.metadataString {
            try encodeContainer.encode(metadataString, forKey: .metadataString)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let objectChecksum = self.objectChecksum {
            try encodeContainer.encode(objectChecksum, forKey: .objectChecksum)
        }
        if let objectChecksumAlgorithm = self.objectChecksumAlgorithm {
            try encodeContainer.encode(objectChecksumAlgorithm.rawValue, forKey: .objectChecksumAlgorithm)
        }
        if let objectToken = self.objectToken {
            try encodeContainer.encode(objectToken, forKey: .objectToken)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let chunksCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .chunksCount)
        chunksCount = chunksCountDecoded
        let metadataStringDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .metadataString)
        metadataString = metadataStringDecoded
        let objectChecksumDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .objectChecksum)
        objectChecksum = objectChecksumDecoded
        let objectChecksumAlgorithmDecoded = try containerValues.decodeIfPresent(BackupStorageClientTypes.SummaryChecksumAlgorithm.self, forKey: .objectChecksumAlgorithm)
        objectChecksumAlgorithm = objectChecksumAlgorithmDecoded
        let objectTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .objectToken)
        objectToken = objectTokenDecoded
    }
}
