// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct PutProfileObjectTypeOutputResponseBody: Swift.Equatable {
    let objectTypeName: Swift.String?
    let description: Swift.String?
    let templateId: Swift.String?
    let expirationDays: Swift.Int?
    let encryptionKey: Swift.String?
    let allowProfileCreation: Swift.Bool
    let sourceLastUpdatedTimestampFormat: Swift.String?
    let fields: [Swift.String:CustomerProfilesClientTypes.ObjectTypeField]?
    let keys: [Swift.String:[CustomerProfilesClientTypes.ObjectTypeKey]]?
    let createdAt: ClientRuntime.Date?
    let lastUpdatedAt: ClientRuntime.Date?
    let tags: [Swift.String:Swift.String]?
}

extension PutProfileObjectTypeOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case allowProfileCreation = "AllowProfileCreation"
        case createdAt = "CreatedAt"
        case description = "Description"
        case encryptionKey = "EncryptionKey"
        case expirationDays = "ExpirationDays"
        case fields = "Fields"
        case keys = "Keys"
        case lastUpdatedAt = "LastUpdatedAt"
        case objectTypeName = "ObjectTypeName"
        case sourceLastUpdatedTimestampFormat = "SourceLastUpdatedTimestampFormat"
        case tags = "Tags"
        case templateId = "TemplateId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let objectTypeNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .objectTypeName)
        objectTypeName = objectTypeNameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let templateIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateId)
        templateId = templateIdDecoded
        let expirationDaysDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .expirationDays)
        expirationDays = expirationDaysDecoded
        let encryptionKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .encryptionKey)
        encryptionKey = encryptionKeyDecoded
        let allowProfileCreationDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .allowProfileCreation) ?? false
        allowProfileCreation = allowProfileCreationDecoded
        let sourceLastUpdatedTimestampFormatDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceLastUpdatedTimestampFormat)
        sourceLastUpdatedTimestampFormat = sourceLastUpdatedTimestampFormatDecoded
        let fieldsContainer = try containerValues.decodeIfPresent([Swift.String: CustomerProfilesClientTypes.ObjectTypeField?].self, forKey: .fields)
        var fieldsDecoded0: [Swift.String:CustomerProfilesClientTypes.ObjectTypeField]? = nil
        if let fieldsContainer = fieldsContainer {
            fieldsDecoded0 = [Swift.String:CustomerProfilesClientTypes.ObjectTypeField]()
            for (key0, objecttypefield0) in fieldsContainer {
                if let objecttypefield0 = objecttypefield0 {
                    fieldsDecoded0?[key0] = objecttypefield0
                }
            }
        }
        fields = fieldsDecoded0
        let keysContainer = try containerValues.decodeIfPresent([Swift.String: [CustomerProfilesClientTypes.ObjectTypeKey?]?].self, forKey: .keys)
        var keysDecoded0: [Swift.String:[CustomerProfilesClientTypes.ObjectTypeKey]]? = nil
        if let keysContainer = keysContainer {
            keysDecoded0 = [Swift.String:[CustomerProfilesClientTypes.ObjectTypeKey]]()
            for (key0, objecttypekeylist0) in keysContainer {
                var objecttypekeylist0Decoded0: [CustomerProfilesClientTypes.ObjectTypeKey]? = nil
                if let objecttypekeylist0 = objecttypekeylist0 {
                    objecttypekeylist0Decoded0 = [CustomerProfilesClientTypes.ObjectTypeKey]()
                    for structure1 in objecttypekeylist0 {
                        if let structure1 = structure1 {
                            objecttypekeylist0Decoded0?.append(structure1)
                        }
                    }
                }
                keysDecoded0?[key0] = objecttypekeylist0Decoded0
            }
        }
        keys = keysDecoded0
        let createdAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdAt)
        createdAt = createdAtDecoded
        let lastUpdatedAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastUpdatedAt)
        lastUpdatedAt = lastUpdatedAtDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
    }
}
