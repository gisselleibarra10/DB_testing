// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateIntegrationWorkflowInputBody: Swift.Equatable {
    let workflowType: CustomerProfilesClientTypes.WorkflowType?
    let integrationConfig: CustomerProfilesClientTypes.IntegrationConfig?
    let objectTypeName: Swift.String?
    let roleArn: Swift.String?
    let tags: [Swift.String:Swift.String]?
}

extension CreateIntegrationWorkflowInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case integrationConfig = "IntegrationConfig"
        case objectTypeName = "ObjectTypeName"
        case roleArn = "RoleArn"
        case tags = "Tags"
        case workflowType = "WorkflowType"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let workflowTypeDecoded = try containerValues.decodeIfPresent(CustomerProfilesClientTypes.WorkflowType.self, forKey: .workflowType)
        workflowType = workflowTypeDecoded
        let integrationConfigDecoded = try containerValues.decodeIfPresent(CustomerProfilesClientTypes.IntegrationConfig.self, forKey: .integrationConfig)
        integrationConfig = integrationConfigDecoded
        let objectTypeNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .objectTypeName)
        objectTypeName = objectTypeNameDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
    }
}
