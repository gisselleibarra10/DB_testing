// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct UpdateDomainOutputResponse: Swift.Equatable {
    /// The timestamp of when the domain was created.
    /// This member is required.
    public var createdAt: ClientRuntime.Date?
    /// The URL of the SQS dead letter queue, which is used for reporting errors associated with ingesting data from third party applications.
    public var deadLetterQueueUrl: Swift.String?
    /// The default encryption key, which is an AWS managed key, is used when no specific type of encryption key is specified. It is used to encrypt all data before it is placed in permanent or semi-permanent storage.
    public var defaultEncryptionKey: Swift.String?
    /// The default number of days until the data within the domain expires.
    public var defaultExpirationDays: Swift.Int?
    /// The unique name of the domain.
    /// This member is required.
    public var domainName: Swift.String?
    /// The timestamp of when the domain was most recently edited.
    /// This member is required.
    public var lastUpdatedAt: ClientRuntime.Date?
    /// The process of matching duplicate profiles. If Matching = true, Amazon Connect Customer Profiles starts a weekly batch process called Identity Resolution Job. If you do not specify a date and time for Identity Resolution Job to run, by default it runs every Saturday at 12AM UTC to detect duplicate profiles in your domains. After the Identity Resolution Job completes, use the [GetMatches](https://docs.aws.amazon.com/customerprofiles/latest/APIReference/API_GetMatches.html) API to return and review the results. Or, if you have configured ExportingConfig in the MatchingRequest, you can download the results from S3.
    public var matching: CustomerProfilesClientTypes.MatchingResponse?
    /// The tags used to organize, track, or control access for this resource.
    public var tags: [Swift.String:Swift.String]?

    public init (
        createdAt: ClientRuntime.Date? = nil,
        deadLetterQueueUrl: Swift.String? = nil,
        defaultEncryptionKey: Swift.String? = nil,
        defaultExpirationDays: Swift.Int? = nil,
        domainName: Swift.String? = nil,
        lastUpdatedAt: ClientRuntime.Date? = nil,
        matching: CustomerProfilesClientTypes.MatchingResponse? = nil,
        tags: [Swift.String:Swift.String]? = nil
    )
    {
        self.createdAt = createdAt
        self.deadLetterQueueUrl = deadLetterQueueUrl
        self.defaultEncryptionKey = defaultEncryptionKey
        self.defaultExpirationDays = defaultExpirationDays
        self.domainName = domainName
        self.lastUpdatedAt = lastUpdatedAt
        self.matching = matching
        self.tags = tags
    }
}
