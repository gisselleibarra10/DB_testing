// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct PutIntegrationInputBody: Swift.Equatable {
    let uri: Swift.String?
    let objectTypeName: Swift.String?
    let tags: [Swift.String:Swift.String]?
    let flowDefinition: CustomerProfilesClientTypes.FlowDefinition?
    let objectTypeNames: [Swift.String:Swift.String]?
}

extension PutIntegrationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case flowDefinition = "FlowDefinition"
        case objectTypeName = "ObjectTypeName"
        case objectTypeNames = "ObjectTypeNames"
        case tags = "Tags"
        case uri = "Uri"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let uriDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .uri)
        uri = uriDecoded
        let objectTypeNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .objectTypeName)
        objectTypeName = objectTypeNameDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
        let flowDefinitionDecoded = try containerValues.decodeIfPresent(CustomerProfilesClientTypes.FlowDefinition.self, forKey: .flowDefinition)
        flowDefinition = flowDefinitionDecoded
        let objectTypeNamesContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .objectTypeNames)
        var objectTypeNamesDecoded0: [Swift.String:Swift.String]? = nil
        if let objectTypeNamesContainer = objectTypeNamesContainer {
            objectTypeNamesDecoded0 = [Swift.String:Swift.String]()
            for (key0, typename0) in objectTypeNamesContainer {
                if let typename0 = typename0 {
                    objectTypeNamesDecoded0?[key0] = typename0
                }
            }
        }
        objectTypeNames = objectTypeNamesDecoded0
    }
}
