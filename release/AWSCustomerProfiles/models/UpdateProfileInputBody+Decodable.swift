// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct UpdateProfileInputBody: Swift.Equatable {
    let profileId: Swift.String?
    let additionalInformation: Swift.String?
    let accountNumber: Swift.String?
    let partyType: CustomerProfilesClientTypes.PartyType?
    let businessName: Swift.String?
    let firstName: Swift.String?
    let middleName: Swift.String?
    let lastName: Swift.String?
    let birthDate: Swift.String?
    let gender: CustomerProfilesClientTypes.Gender?
    let phoneNumber: Swift.String?
    let mobilePhoneNumber: Swift.String?
    let homePhoneNumber: Swift.String?
    let businessPhoneNumber: Swift.String?
    let emailAddress: Swift.String?
    let personalEmailAddress: Swift.String?
    let businessEmailAddress: Swift.String?
    let address: CustomerProfilesClientTypes.UpdateAddress?
    let shippingAddress: CustomerProfilesClientTypes.UpdateAddress?
    let mailingAddress: CustomerProfilesClientTypes.UpdateAddress?
    let billingAddress: CustomerProfilesClientTypes.UpdateAddress?
    let attributes: [Swift.String:Swift.String]?
}

extension UpdateProfileInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountNumber = "AccountNumber"
        case additionalInformation = "AdditionalInformation"
        case address = "Address"
        case attributes = "Attributes"
        case billingAddress = "BillingAddress"
        case birthDate = "BirthDate"
        case businessEmailAddress = "BusinessEmailAddress"
        case businessName = "BusinessName"
        case businessPhoneNumber = "BusinessPhoneNumber"
        case emailAddress = "EmailAddress"
        case firstName = "FirstName"
        case gender = "Gender"
        case homePhoneNumber = "HomePhoneNumber"
        case lastName = "LastName"
        case mailingAddress = "MailingAddress"
        case middleName = "MiddleName"
        case mobilePhoneNumber = "MobilePhoneNumber"
        case partyType = "PartyType"
        case personalEmailAddress = "PersonalEmailAddress"
        case phoneNumber = "PhoneNumber"
        case profileId = "ProfileId"
        case shippingAddress = "ShippingAddress"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let profileIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .profileId)
        profileId = profileIdDecoded
        let additionalInformationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .additionalInformation)
        additionalInformation = additionalInformationDecoded
        let accountNumberDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .accountNumber)
        accountNumber = accountNumberDecoded
        let partyTypeDecoded = try containerValues.decodeIfPresent(CustomerProfilesClientTypes.PartyType.self, forKey: .partyType)
        partyType = partyTypeDecoded
        let businessNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .businessName)
        businessName = businessNameDecoded
        let firstNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .firstName)
        firstName = firstNameDecoded
        let middleNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .middleName)
        middleName = middleNameDecoded
        let lastNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastName)
        lastName = lastNameDecoded
        let birthDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .birthDate)
        birthDate = birthDateDecoded
        let genderDecoded = try containerValues.decodeIfPresent(CustomerProfilesClientTypes.Gender.self, forKey: .gender)
        gender = genderDecoded
        let phoneNumberDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .phoneNumber)
        phoneNumber = phoneNumberDecoded
        let mobilePhoneNumberDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .mobilePhoneNumber)
        mobilePhoneNumber = mobilePhoneNumberDecoded
        let homePhoneNumberDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .homePhoneNumber)
        homePhoneNumber = homePhoneNumberDecoded
        let businessPhoneNumberDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .businessPhoneNumber)
        businessPhoneNumber = businessPhoneNumberDecoded
        let emailAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .emailAddress)
        emailAddress = emailAddressDecoded
        let personalEmailAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .personalEmailAddress)
        personalEmailAddress = personalEmailAddressDecoded
        let businessEmailAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .businessEmailAddress)
        businessEmailAddress = businessEmailAddressDecoded
        let addressDecoded = try containerValues.decodeIfPresent(CustomerProfilesClientTypes.UpdateAddress.self, forKey: .address)
        address = addressDecoded
        let shippingAddressDecoded = try containerValues.decodeIfPresent(CustomerProfilesClientTypes.UpdateAddress.self, forKey: .shippingAddress)
        shippingAddress = shippingAddressDecoded
        let mailingAddressDecoded = try containerValues.decodeIfPresent(CustomerProfilesClientTypes.UpdateAddress.self, forKey: .mailingAddress)
        mailingAddress = mailingAddressDecoded
        let billingAddressDecoded = try containerValues.decodeIfPresent(CustomerProfilesClientTypes.UpdateAddress.self, forKey: .billingAddress)
        billingAddress = billingAddressDecoded
        let attributesContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .attributes)
        var attributesDecoded0: [Swift.String:Swift.String]? = nil
        if let attributesContainer = attributesContainer {
            attributesDecoded0 = [Swift.String:Swift.String]()
            for (key0, string0to2550) in attributesContainer {
                if let string0to2550 = string0to2550 {
                    attributesDecoded0?[key0] = string0to2550
                }
            }
        }
        attributes = attributesDecoded0
    }
}
