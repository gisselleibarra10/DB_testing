// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetIdentityResolutionJobOutputResponseBody: Swift.Equatable {
    let domainName: Swift.String?
    let jobId: Swift.String?
    let status: CustomerProfilesClientTypes.IdentityResolutionJobStatus?
    let message: Swift.String?
    let jobStartTime: ClientRuntime.Date?
    let jobEndTime: ClientRuntime.Date?
    let lastUpdatedAt: ClientRuntime.Date?
    let jobExpirationTime: ClientRuntime.Date?
    let autoMerging: CustomerProfilesClientTypes.AutoMerging?
    let exportingLocation: CustomerProfilesClientTypes.ExportingLocation?
    let jobStats: CustomerProfilesClientTypes.JobStats?
}

extension GetIdentityResolutionJobOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case autoMerging = "AutoMerging"
        case domainName = "DomainName"
        case exportingLocation = "ExportingLocation"
        case jobEndTime = "JobEndTime"
        case jobExpirationTime = "JobExpirationTime"
        case jobId = "JobId"
        case jobStartTime = "JobStartTime"
        case jobStats = "JobStats"
        case lastUpdatedAt = "LastUpdatedAt"
        case message = "Message"
        case status = "Status"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domainName)
        domainName = domainNameDecoded
        let jobIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobId)
        jobId = jobIdDecoded
        let statusDecoded = try containerValues.decodeIfPresent(CustomerProfilesClientTypes.IdentityResolutionJobStatus.self, forKey: .status)
        status = statusDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let jobStartTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .jobStartTime)
        jobStartTime = jobStartTimeDecoded
        let jobEndTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .jobEndTime)
        jobEndTime = jobEndTimeDecoded
        let lastUpdatedAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastUpdatedAt)
        lastUpdatedAt = lastUpdatedAtDecoded
        let jobExpirationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .jobExpirationTime)
        jobExpirationTime = jobExpirationTimeDecoded
        let autoMergingDecoded = try containerValues.decodeIfPresent(CustomerProfilesClientTypes.AutoMerging.self, forKey: .autoMerging)
        autoMerging = autoMergingDecoded
        let exportingLocationDecoded = try containerValues.decodeIfPresent(CustomerProfilesClientTypes.ExportingLocation.self, forKey: .exportingLocation)
        exportingLocation = exportingLocationDecoded
        let jobStatsDecoded = try containerValues.decodeIfPresent(CustomerProfilesClientTypes.JobStats.self, forKey: .jobStats)
        jobStats = jobStatsDecoded
    }
}
