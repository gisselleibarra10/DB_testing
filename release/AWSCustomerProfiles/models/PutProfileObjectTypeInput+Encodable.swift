// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension PutProfileObjectTypeInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case allowProfileCreation = "AllowProfileCreation"
        case description = "Description"
        case encryptionKey = "EncryptionKey"
        case expirationDays = "ExpirationDays"
        case fields = "Fields"
        case keys = "Keys"
        case sourceLastUpdatedTimestampFormat = "SourceLastUpdatedTimestampFormat"
        case tags = "Tags"
        case templateId = "TemplateId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if allowProfileCreation != false {
            try encodeContainer.encode(allowProfileCreation, forKey: .allowProfileCreation)
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let encryptionKey = self.encryptionKey {
            try encodeContainer.encode(encryptionKey, forKey: .encryptionKey)
        }
        if let expirationDays = self.expirationDays {
            try encodeContainer.encode(expirationDays, forKey: .expirationDays)
        }
        if let fields = fields {
            var fieldsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .fields)
            for (dictKey0, fieldmap0) in fields {
                try fieldsContainer.encode(fieldmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let keys = keys {
            var keysContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .keys)
            for (dictKey0, keymap0) in keys {
                try keysContainer.encode(keymap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let sourceLastUpdatedTimestampFormat = self.sourceLastUpdatedTimestampFormat {
            try encodeContainer.encode(sourceLastUpdatedTimestampFormat, forKey: .sourceLastUpdatedTimestampFormat)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, tagmap0) in tags {
                try tagsContainer.encode(tagmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let templateId = self.templateId {
            try encodeContainer.encode(templateId, forKey: .templateId)
        }
    }
}
