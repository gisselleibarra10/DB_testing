// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetMatchesOutputResponseBody: Swift.Equatable {
    let nextToken: Swift.String?
    let matchGenerationDate: ClientRuntime.Date?
    let potentialMatches: Swift.Int?
    let matches: [CustomerProfilesClientTypes.MatchItem]?
}

extension GetMatchesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case matchGenerationDate = "MatchGenerationDate"
        case matches = "Matches"
        case nextToken = "NextToken"
        case potentialMatches = "PotentialMatches"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let matchGenerationDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .matchGenerationDate)
        matchGenerationDate = matchGenerationDateDecoded
        let potentialMatchesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .potentialMatches)
        potentialMatches = potentialMatchesDecoded
        let matchesContainer = try containerValues.decodeIfPresent([CustomerProfilesClientTypes.MatchItem?].self, forKey: .matches)
        var matchesDecoded0:[CustomerProfilesClientTypes.MatchItem]? = nil
        if let matchesContainer = matchesContainer {
            matchesDecoded0 = [CustomerProfilesClientTypes.MatchItem]()
            for structure0 in matchesContainer {
                if let structure0 = structure0 {
                    matchesDecoded0?.append(structure0)
                }
            }
        }
        matches = matchesDecoded0
    }
}
