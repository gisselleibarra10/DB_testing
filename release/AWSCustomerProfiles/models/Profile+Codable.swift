// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CustomerProfilesClientTypes.Profile: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountNumber = "AccountNumber"
        case additionalInformation = "AdditionalInformation"
        case address = "Address"
        case attributes = "Attributes"
        case billingAddress = "BillingAddress"
        case birthDate = "BirthDate"
        case businessEmailAddress = "BusinessEmailAddress"
        case businessName = "BusinessName"
        case businessPhoneNumber = "BusinessPhoneNumber"
        case emailAddress = "EmailAddress"
        case firstName = "FirstName"
        case gender = "Gender"
        case homePhoneNumber = "HomePhoneNumber"
        case lastName = "LastName"
        case mailingAddress = "MailingAddress"
        case middleName = "MiddleName"
        case mobilePhoneNumber = "MobilePhoneNumber"
        case partyType = "PartyType"
        case personalEmailAddress = "PersonalEmailAddress"
        case phoneNumber = "PhoneNumber"
        case profileId = "ProfileId"
        case shippingAddress = "ShippingAddress"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accountNumber = self.accountNumber {
            try encodeContainer.encode(accountNumber, forKey: .accountNumber)
        }
        if let additionalInformation = self.additionalInformation {
            try encodeContainer.encode(additionalInformation, forKey: .additionalInformation)
        }
        if let address = self.address {
            try encodeContainer.encode(address, forKey: .address)
        }
        if let attributes = attributes {
            var attributesContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .attributes)
            for (dictKey0, attributes0) in attributes {
                try attributesContainer.encode(attributes0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let billingAddress = self.billingAddress {
            try encodeContainer.encode(billingAddress, forKey: .billingAddress)
        }
        if let birthDate = self.birthDate {
            try encodeContainer.encode(birthDate, forKey: .birthDate)
        }
        if let businessEmailAddress = self.businessEmailAddress {
            try encodeContainer.encode(businessEmailAddress, forKey: .businessEmailAddress)
        }
        if let businessName = self.businessName {
            try encodeContainer.encode(businessName, forKey: .businessName)
        }
        if let businessPhoneNumber = self.businessPhoneNumber {
            try encodeContainer.encode(businessPhoneNumber, forKey: .businessPhoneNumber)
        }
        if let emailAddress = self.emailAddress {
            try encodeContainer.encode(emailAddress, forKey: .emailAddress)
        }
        if let firstName = self.firstName {
            try encodeContainer.encode(firstName, forKey: .firstName)
        }
        if let gender = self.gender {
            try encodeContainer.encode(gender.rawValue, forKey: .gender)
        }
        if let homePhoneNumber = self.homePhoneNumber {
            try encodeContainer.encode(homePhoneNumber, forKey: .homePhoneNumber)
        }
        if let lastName = self.lastName {
            try encodeContainer.encode(lastName, forKey: .lastName)
        }
        if let mailingAddress = self.mailingAddress {
            try encodeContainer.encode(mailingAddress, forKey: .mailingAddress)
        }
        if let middleName = self.middleName {
            try encodeContainer.encode(middleName, forKey: .middleName)
        }
        if let mobilePhoneNumber = self.mobilePhoneNumber {
            try encodeContainer.encode(mobilePhoneNumber, forKey: .mobilePhoneNumber)
        }
        if let partyType = self.partyType {
            try encodeContainer.encode(partyType.rawValue, forKey: .partyType)
        }
        if let personalEmailAddress = self.personalEmailAddress {
            try encodeContainer.encode(personalEmailAddress, forKey: .personalEmailAddress)
        }
        if let phoneNumber = self.phoneNumber {
            try encodeContainer.encode(phoneNumber, forKey: .phoneNumber)
        }
        if let profileId = self.profileId {
            try encodeContainer.encode(profileId, forKey: .profileId)
        }
        if let shippingAddress = self.shippingAddress {
            try encodeContainer.encode(shippingAddress, forKey: .shippingAddress)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let profileIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .profileId)
        profileId = profileIdDecoded
        let accountNumberDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .accountNumber)
        accountNumber = accountNumberDecoded
        let additionalInformationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .additionalInformation)
        additionalInformation = additionalInformationDecoded
        let partyTypeDecoded = try containerValues.decodeIfPresent(CustomerProfilesClientTypes.PartyType.self, forKey: .partyType)
        partyType = partyTypeDecoded
        let businessNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .businessName)
        businessName = businessNameDecoded
        let firstNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .firstName)
        firstName = firstNameDecoded
        let middleNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .middleName)
        middleName = middleNameDecoded
        let lastNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastName)
        lastName = lastNameDecoded
        let birthDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .birthDate)
        birthDate = birthDateDecoded
        let genderDecoded = try containerValues.decodeIfPresent(CustomerProfilesClientTypes.Gender.self, forKey: .gender)
        gender = genderDecoded
        let phoneNumberDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .phoneNumber)
        phoneNumber = phoneNumberDecoded
        let mobilePhoneNumberDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .mobilePhoneNumber)
        mobilePhoneNumber = mobilePhoneNumberDecoded
        let homePhoneNumberDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .homePhoneNumber)
        homePhoneNumber = homePhoneNumberDecoded
        let businessPhoneNumberDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .businessPhoneNumber)
        businessPhoneNumber = businessPhoneNumberDecoded
        let emailAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .emailAddress)
        emailAddress = emailAddressDecoded
        let personalEmailAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .personalEmailAddress)
        personalEmailAddress = personalEmailAddressDecoded
        let businessEmailAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .businessEmailAddress)
        businessEmailAddress = businessEmailAddressDecoded
        let addressDecoded = try containerValues.decodeIfPresent(CustomerProfilesClientTypes.Address.self, forKey: .address)
        address = addressDecoded
        let shippingAddressDecoded = try containerValues.decodeIfPresent(CustomerProfilesClientTypes.Address.self, forKey: .shippingAddress)
        shippingAddress = shippingAddressDecoded
        let mailingAddressDecoded = try containerValues.decodeIfPresent(CustomerProfilesClientTypes.Address.self, forKey: .mailingAddress)
        mailingAddress = mailingAddressDecoded
        let billingAddressDecoded = try containerValues.decodeIfPresent(CustomerProfilesClientTypes.Address.self, forKey: .billingAddress)
        billingAddress = billingAddressDecoded
        let attributesContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .attributes)
        var attributesDecoded0: [Swift.String:Swift.String]? = nil
        if let attributesContainer = attributesContainer {
            attributesDecoded0 = [Swift.String:Swift.String]()
            for (key0, string1to2550) in attributesContainer {
                if let string1to2550 = string1to2550 {
                    attributesDecoded0?[key0] = string1to2550
                }
            }
        }
        attributes = attributesDecoded0
    }
}
