// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CustomerProfilesClientTypes.Task: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case connectorOperator = "ConnectorOperator"
        case destinationField = "DestinationField"
        case sourceFields = "SourceFields"
        case taskProperties = "TaskProperties"
        case taskType = "TaskType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let connectorOperator = self.connectorOperator {
            try encodeContainer.encode(connectorOperator, forKey: .connectorOperator)
        }
        if let destinationField = self.destinationField {
            try encodeContainer.encode(destinationField, forKey: .destinationField)
        }
        if let sourceFields = sourceFields {
            var sourceFieldsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .sourceFields)
            for sourcefields0 in sourceFields {
                try sourceFieldsContainer.encode(sourcefields0)
            }
        }
        if let taskProperties = taskProperties {
            var taskPropertiesContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .taskProperties)
            for (dictKey0, taskpropertiesmap0) in taskProperties {
                try taskPropertiesContainer.encode(taskpropertiesmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let taskType = self.taskType {
            try encodeContainer.encode(taskType.rawValue, forKey: .taskType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let connectorOperatorDecoded = try containerValues.decodeIfPresent(CustomerProfilesClientTypes.ConnectorOperator.self, forKey: .connectorOperator)
        connectorOperator = connectorOperatorDecoded
        let destinationFieldDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .destinationField)
        destinationField = destinationFieldDecoded
        let sourceFieldsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .sourceFields)
        var sourceFieldsDecoded0:[Swift.String]? = nil
        if let sourceFieldsContainer = sourceFieldsContainer {
            sourceFieldsDecoded0 = [Swift.String]()
            for string0 in sourceFieldsContainer {
                if let string0 = string0 {
                    sourceFieldsDecoded0?.append(string0)
                }
            }
        }
        sourceFields = sourceFieldsDecoded0
        let taskPropertiesContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .taskProperties)
        var taskPropertiesDecoded0: [Swift.String:Swift.String]? = nil
        if let taskPropertiesContainer = taskPropertiesContainer {
            taskPropertiesDecoded0 = [Swift.String:Swift.String]()
            for (key0, property0) in taskPropertiesContainer {
                if let property0 = property0 {
                    taskPropertiesDecoded0?[key0] = property0
                }
            }
        }
        taskProperties = taskPropertiesDecoded0
        let taskTypeDecoded = try containerValues.decodeIfPresent(CustomerProfilesClientTypes.TaskType.self, forKey: .taskType)
        taskType = taskTypeDecoded
    }
}
