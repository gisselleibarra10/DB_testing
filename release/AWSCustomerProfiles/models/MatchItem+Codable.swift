// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CustomerProfilesClientTypes.MatchItem: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case confidenceScore = "ConfidenceScore"
        case matchId = "MatchId"
        case profileIds = "ProfileIds"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let confidenceScore = self.confidenceScore {
            try encodeContainer.encode(confidenceScore, forKey: .confidenceScore)
        }
        if let matchId = self.matchId {
            try encodeContainer.encode(matchId, forKey: .matchId)
        }
        if let profileIds = profileIds {
            var profileIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .profileIds)
            for profileidlist0 in profileIds {
                try profileIdsContainer.encode(profileidlist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let matchIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .matchId)
        matchId = matchIdDecoded
        let profileIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .profileIds)
        var profileIdsDecoded0:[Swift.String]? = nil
        if let profileIdsContainer = profileIdsContainer {
            profileIdsDecoded0 = [Swift.String]()
            for string0 in profileIdsContainer {
                if let string0 = string0 {
                    profileIdsDecoded0?.append(string0)
                }
            }
        }
        profileIds = profileIdsDecoded0
        let confidenceScoreDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .confidenceScore)
        confidenceScore = confidenceScoreDecoded
    }
}
