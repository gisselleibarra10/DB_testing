// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateListenerInputBody: Swift.Equatable {
    let acceleratorArn: Swift.String?
    let portRanges: [GlobalAcceleratorClientTypes.PortRange]?
    let `protocol`: GlobalAcceleratorClientTypes.ModelProtocol?
    let clientAffinity: GlobalAcceleratorClientTypes.ClientAffinity?
    let idempotencyToken: Swift.String?
}

extension CreateListenerInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case acceleratorArn = "AcceleratorArn"
        case clientAffinity = "ClientAffinity"
        case idempotencyToken = "IdempotencyToken"
        case portRanges = "PortRanges"
        case `protocol` = "Protocol"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let acceleratorArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .acceleratorArn)
        acceleratorArn = acceleratorArnDecoded
        let portRangesContainer = try containerValues.decodeIfPresent([GlobalAcceleratorClientTypes.PortRange?].self, forKey: .portRanges)
        var portRangesDecoded0:[GlobalAcceleratorClientTypes.PortRange]? = nil
        if let portRangesContainer = portRangesContainer {
            portRangesDecoded0 = [GlobalAcceleratorClientTypes.PortRange]()
            for structure0 in portRangesContainer {
                if let structure0 = structure0 {
                    portRangesDecoded0?.append(structure0)
                }
            }
        }
        portRanges = portRangesDecoded0
        let protocolDecoded = try containerValues.decodeIfPresent(GlobalAcceleratorClientTypes.ModelProtocol.self, forKey: .protocol)
        `protocol` = protocolDecoded
        let clientAffinityDecoded = try containerValues.decodeIfPresent(GlobalAcceleratorClientTypes.ClientAffinity.self, forKey: .clientAffinity)
        clientAffinity = clientAffinityDecoded
        let idempotencyTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .idempotencyToken)
        idempotencyToken = idempotencyTokenDecoded
    }
}
