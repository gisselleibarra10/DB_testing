// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension GlobalAcceleratorClientTypes.DestinationPortMapping: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case acceleratorArn = "AcceleratorArn"
        case acceleratorSocketAddresses = "AcceleratorSocketAddresses"
        case destinationSocketAddress = "DestinationSocketAddress"
        case destinationTrafficState = "DestinationTrafficState"
        case endpointGroupArn = "EndpointGroupArn"
        case endpointGroupRegion = "EndpointGroupRegion"
        case endpointId = "EndpointId"
        case ipAddressType = "IpAddressType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let acceleratorArn = self.acceleratorArn {
            try encodeContainer.encode(acceleratorArn, forKey: .acceleratorArn)
        }
        if let acceleratorSocketAddresses = acceleratorSocketAddresses {
            var acceleratorSocketAddressesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .acceleratorSocketAddresses)
            for socketaddresses0 in acceleratorSocketAddresses {
                try acceleratorSocketAddressesContainer.encode(socketaddresses0)
            }
        }
        if let destinationSocketAddress = self.destinationSocketAddress {
            try encodeContainer.encode(destinationSocketAddress, forKey: .destinationSocketAddress)
        }
        if let destinationTrafficState = self.destinationTrafficState {
            try encodeContainer.encode(destinationTrafficState.rawValue, forKey: .destinationTrafficState)
        }
        if let endpointGroupArn = self.endpointGroupArn {
            try encodeContainer.encode(endpointGroupArn, forKey: .endpointGroupArn)
        }
        if let endpointGroupRegion = self.endpointGroupRegion {
            try encodeContainer.encode(endpointGroupRegion, forKey: .endpointGroupRegion)
        }
        if let endpointId = self.endpointId {
            try encodeContainer.encode(endpointId, forKey: .endpointId)
        }
        if let ipAddressType = self.ipAddressType {
            try encodeContainer.encode(ipAddressType.rawValue, forKey: .ipAddressType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let acceleratorArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .acceleratorArn)
        acceleratorArn = acceleratorArnDecoded
        let acceleratorSocketAddressesContainer = try containerValues.decodeIfPresent([GlobalAcceleratorClientTypes.SocketAddress?].self, forKey: .acceleratorSocketAddresses)
        var acceleratorSocketAddressesDecoded0:[GlobalAcceleratorClientTypes.SocketAddress]? = nil
        if let acceleratorSocketAddressesContainer = acceleratorSocketAddressesContainer {
            acceleratorSocketAddressesDecoded0 = [GlobalAcceleratorClientTypes.SocketAddress]()
            for structure0 in acceleratorSocketAddressesContainer {
                if let structure0 = structure0 {
                    acceleratorSocketAddressesDecoded0?.append(structure0)
                }
            }
        }
        acceleratorSocketAddresses = acceleratorSocketAddressesDecoded0
        let endpointGroupArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .endpointGroupArn)
        endpointGroupArn = endpointGroupArnDecoded
        let endpointIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .endpointId)
        endpointId = endpointIdDecoded
        let endpointGroupRegionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .endpointGroupRegion)
        endpointGroupRegion = endpointGroupRegionDecoded
        let destinationSocketAddressDecoded = try containerValues.decodeIfPresent(GlobalAcceleratorClientTypes.SocketAddress.self, forKey: .destinationSocketAddress)
        destinationSocketAddress = destinationSocketAddressDecoded
        let ipAddressTypeDecoded = try containerValues.decodeIfPresent(GlobalAcceleratorClientTypes.IpAddressType.self, forKey: .ipAddressType)
        ipAddressType = ipAddressTypeDecoded
        let destinationTrafficStateDecoded = try containerValues.decodeIfPresent(GlobalAcceleratorClientTypes.CustomRoutingDestinationTrafficState.self, forKey: .destinationTrafficState)
        destinationTrafficState = destinationTrafficStateDecoded
    }
}
