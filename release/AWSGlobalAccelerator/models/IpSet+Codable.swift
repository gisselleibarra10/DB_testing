// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension GlobalAcceleratorClientTypes.IpSet: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case ipAddressFamily = "IpAddressFamily"
        case ipAddresses = "IpAddresses"
        case ipFamily = "IpFamily"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let ipAddressFamily = self.ipAddressFamily {
            try encodeContainer.encode(ipAddressFamily.rawValue, forKey: .ipAddressFamily)
        }
        if let ipAddresses = ipAddresses {
            var ipAddressesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .ipAddresses)
            for ipaddresses0 in ipAddresses {
                try ipAddressesContainer.encode(ipaddresses0)
            }
        }
        if let ipFamily = self.ipFamily {
            try encodeContainer.encode(ipFamily, forKey: .ipFamily)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ipFamilyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ipFamily)
        ipFamily = ipFamilyDecoded
        let ipAddressesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .ipAddresses)
        var ipAddressesDecoded0:[Swift.String]? = nil
        if let ipAddressesContainer = ipAddressesContainer {
            ipAddressesDecoded0 = [Swift.String]()
            for string0 in ipAddressesContainer {
                if let string0 = string0 {
                    ipAddressesDecoded0?.append(string0)
                }
            }
        }
        ipAddresses = ipAddressesDecoded0
        let ipAddressFamilyDecoded = try containerValues.decodeIfPresent(GlobalAcceleratorClientTypes.IpAddressFamily.self, forKey: .ipAddressFamily)
        ipAddressFamily = ipAddressFamilyDecoded
    }
}
