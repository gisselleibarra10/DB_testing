// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension GlobalAcceleratorClientTypes {
    public enum ByoipCidrState: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case advertising
        case deprovisioned
        case failedAdvertising
        case failedDeprovision
        case failedProvision
        case failedWithdraw
        case pendingAdvertising
        case pendingDeprovisioning
        case pendingProvisioning
        case pendingWithdrawing
        case ready
        case sdkUnknown(Swift.String)

        public static var allCases: [ByoipCidrState] {
            return [
                .advertising,
                .deprovisioned,
                .failedAdvertising,
                .failedDeprovision,
                .failedProvision,
                .failedWithdraw,
                .pendingAdvertising,
                .pendingDeprovisioning,
                .pendingProvisioning,
                .pendingWithdrawing,
                .ready,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .advertising: return "ADVERTISING"
            case .deprovisioned: return "DEPROVISIONED"
            case .failedAdvertising: return "FAILED_ADVERTISING"
            case .failedDeprovision: return "FAILED_DEPROVISION"
            case .failedProvision: return "FAILED_PROVISION"
            case .failedWithdraw: return "FAILED_WITHDRAW"
            case .pendingAdvertising: return "PENDING_ADVERTISING"
            case .pendingDeprovisioning: return "PENDING_DEPROVISIONING"
            case .pendingProvisioning: return "PENDING_PROVISIONING"
            case .pendingWithdrawing: return "PENDING_WITHDRAWING"
            case .ready: return "READY"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ByoipCidrState(rawValue: rawValue) ?? ByoipCidrState.sdkUnknown(rawValue)
        }
    }
}
