// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListDatasourcePackagesOutputResponseBody: Swift.Equatable {
    let datasourcePackages: [Swift.String:DetectiveClientTypes.DatasourcePackageIngestDetail]?
    let nextToken: Swift.String?
}

extension ListDatasourcePackagesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case datasourcePackages = "DatasourcePackages"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let datasourcePackagesContainer = try containerValues.decodeIfPresent([Swift.String: DetectiveClientTypes.DatasourcePackageIngestDetail?].self, forKey: .datasourcePackages)
        var datasourcePackagesDecoded0: [Swift.String:DetectiveClientTypes.DatasourcePackageIngestDetail]? = nil
        if let datasourcePackagesContainer = datasourcePackagesContainer {
            datasourcePackagesDecoded0 = [Swift.String:DetectiveClientTypes.DatasourcePackageIngestDetail]()
            for (key0, datasourcepackageingestdetail0) in datasourcePackagesContainer {
                if let datasourcepackageingestdetail0 = datasourcepackageingestdetail0 {
                    datasourcePackagesDecoded0?[key0] = datasourcepackageingestdetail0
                }
            }
        }
        datasourcePackages = datasourcePackagesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
