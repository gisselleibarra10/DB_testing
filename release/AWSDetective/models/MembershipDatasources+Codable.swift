// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension DetectiveClientTypes.MembershipDatasources: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountId = "AccountId"
        case datasourcePackageIngestHistory = "DatasourcePackageIngestHistory"
        case graphArn = "GraphArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accountId = self.accountId {
            try encodeContainer.encode(accountId, forKey: .accountId)
        }
        if let datasourcePackageIngestHistory = datasourcePackageIngestHistory {
            var datasourcePackageIngestHistoryContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .datasourcePackageIngestHistory)
            for (dictKey0, datasourcepackageingesthistory0) in datasourcePackageIngestHistory {
                try datasourcePackageIngestHistoryContainer.encode(datasourcepackageingesthistory0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let graphArn = self.graphArn {
            try encodeContainer.encode(graphArn, forKey: .graphArn)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let accountIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .accountId)
        accountId = accountIdDecoded
        let graphArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .graphArn)
        graphArn = graphArnDecoded
        let datasourcePackageIngestHistoryContainer = try containerValues.decodeIfPresent([Swift.String: [Swift.String: DetectiveClientTypes.TimestampForCollection?]?].self, forKey: .datasourcePackageIngestHistory)
        var datasourcePackageIngestHistoryDecoded0: [Swift.String:[Swift.String:DetectiveClientTypes.TimestampForCollection]]? = nil
        if let datasourcePackageIngestHistoryContainer = datasourcePackageIngestHistoryContainer {
            datasourcePackageIngestHistoryDecoded0 = [Swift.String:[Swift.String:DetectiveClientTypes.TimestampForCollection]]()
            for (key0, lastingeststatechangedates0) in datasourcePackageIngestHistoryContainer {
                var lastingeststatechangedates0Decoded0: [Swift.String: DetectiveClientTypes.TimestampForCollection]? = nil
                if let lastingeststatechangedates0 = lastingeststatechangedates0 {
                    lastingeststatechangedates0Decoded0 = [Swift.String: DetectiveClientTypes.TimestampForCollection]()
                    for (key1, timestampforcollection1) in lastingeststatechangedates0 {
                        if let timestampforcollection1 = timestampforcollection1 {
                            lastingeststatechangedates0Decoded0?[key1] = timestampforcollection1
                        }
                    }
                }
                datasourcePackageIngestHistoryDecoded0?[key0] = lastingeststatechangedates0Decoded0
            }
        }
        datasourcePackageIngestHistory = datasourcePackageIngestHistoryDecoded0
    }
}
