// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct UpdateDatasourcePackagesInputBody: Swift.Equatable {
    let graphArn: Swift.String?
    let datasourcePackages: [DetectiveClientTypes.DatasourcePackage]?
}

extension UpdateDatasourcePackagesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case datasourcePackages = "DatasourcePackages"
        case graphArn = "GraphArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let graphArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .graphArn)
        graphArn = graphArnDecoded
        let datasourcePackagesContainer = try containerValues.decodeIfPresent([DetectiveClientTypes.DatasourcePackage?].self, forKey: .datasourcePackages)
        var datasourcePackagesDecoded0:[DetectiveClientTypes.DatasourcePackage]? = nil
        if let datasourcePackagesContainer = datasourcePackagesContainer {
            datasourcePackagesDecoded0 = [DetectiveClientTypes.DatasourcePackage]()
            for string0 in datasourcePackagesContainer {
                if let string0 = string0 {
                    datasourcePackagesDecoded0?.append(string0)
                }
            }
        }
        datasourcePackages = datasourcePackagesDecoded0
    }
}
