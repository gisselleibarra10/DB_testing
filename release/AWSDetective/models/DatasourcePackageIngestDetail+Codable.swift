// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension DetectiveClientTypes.DatasourcePackageIngestDetail: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case datasourcePackageIngestState = "DatasourcePackageIngestState"
        case lastIngestStateChange = "LastIngestStateChange"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let datasourcePackageIngestState = self.datasourcePackageIngestState {
            try encodeContainer.encode(datasourcePackageIngestState.rawValue, forKey: .datasourcePackageIngestState)
        }
        if let lastIngestStateChange = lastIngestStateChange {
            var lastIngestStateChangeContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .lastIngestStateChange)
            for (dictKey0, lastingeststatechangedates0) in lastIngestStateChange {
                try lastIngestStateChangeContainer.encode(lastingeststatechangedates0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let datasourcePackageIngestStateDecoded = try containerValues.decodeIfPresent(DetectiveClientTypes.DatasourcePackageIngestState.self, forKey: .datasourcePackageIngestState)
        datasourcePackageIngestState = datasourcePackageIngestStateDecoded
        let lastIngestStateChangeContainer = try containerValues.decodeIfPresent([Swift.String: DetectiveClientTypes.TimestampForCollection?].self, forKey: .lastIngestStateChange)
        var lastIngestStateChangeDecoded0: [Swift.String:DetectiveClientTypes.TimestampForCollection]? = nil
        if let lastIngestStateChangeContainer = lastIngestStateChangeContainer {
            lastIngestStateChangeDecoded0 = [Swift.String:DetectiveClientTypes.TimestampForCollection]()
            for (key0, timestampforcollection0) in lastIngestStateChangeContainer {
                if let timestampforcollection0 = timestampforcollection0 {
                    lastIngestStateChangeDecoded0?[key0] = timestampforcollection0
                }
            }
        }
        lastIngestStateChange = lastIngestStateChangeDecoded0
    }
}
