// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension DetectiveClientTypes.MemberDetail: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountId = "AccountId"
        case administratorId = "AdministratorId"
        case datasourcePackageIngestStates = "DatasourcePackageIngestStates"
        case disabledReason = "DisabledReason"
        case emailAddress = "EmailAddress"
        case graphArn = "GraphArn"
        case invitationType = "InvitationType"
        case invitedTime = "InvitedTime"
        case masterId = "MasterId"
        case percentOfGraphUtilization = "PercentOfGraphUtilization"
        case percentOfGraphUtilizationUpdatedTime = "PercentOfGraphUtilizationUpdatedTime"
        case status = "Status"
        case updatedTime = "UpdatedTime"
        case volumeUsageByDatasourcePackage = "VolumeUsageByDatasourcePackage"
        case volumeUsageInBytes = "VolumeUsageInBytes"
        case volumeUsageUpdatedTime = "VolumeUsageUpdatedTime"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accountId = self.accountId {
            try encodeContainer.encode(accountId, forKey: .accountId)
        }
        if let administratorId = self.administratorId {
            try encodeContainer.encode(administratorId, forKey: .administratorId)
        }
        if let datasourcePackageIngestStates = datasourcePackageIngestStates {
            var datasourcePackageIngestStatesContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .datasourcePackageIngestStates)
            for (dictKey0, datasourcepackageingeststates0) in datasourcePackageIngestStates {
                try datasourcePackageIngestStatesContainer.encode(datasourcepackageingeststates0.rawValue, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let disabledReason = self.disabledReason {
            try encodeContainer.encode(disabledReason.rawValue, forKey: .disabledReason)
        }
        if let emailAddress = self.emailAddress {
            try encodeContainer.encode(emailAddress, forKey: .emailAddress)
        }
        if let graphArn = self.graphArn {
            try encodeContainer.encode(graphArn, forKey: .graphArn)
        }
        if let invitationType = self.invitationType {
            try encodeContainer.encode(invitationType.rawValue, forKey: .invitationType)
        }
        if let invitedTime = self.invitedTime {
            try encodeContainer.encode(invitedTime.timeIntervalSince1970, forKey: .invitedTime)
        }
        if let masterId = self.masterId {
            try encodeContainer.encode(masterId, forKey: .masterId)
        }
        if let percentOfGraphUtilization = self.percentOfGraphUtilization {
            try encodeContainer.encode(percentOfGraphUtilization, forKey: .percentOfGraphUtilization)
        }
        if let percentOfGraphUtilizationUpdatedTime = self.percentOfGraphUtilizationUpdatedTime {
            try encodeContainer.encode(percentOfGraphUtilizationUpdatedTime.timeIntervalSince1970, forKey: .percentOfGraphUtilizationUpdatedTime)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let updatedTime = self.updatedTime {
            try encodeContainer.encode(updatedTime.timeIntervalSince1970, forKey: .updatedTime)
        }
        if let volumeUsageByDatasourcePackage = volumeUsageByDatasourcePackage {
            var volumeUsageByDatasourcePackageContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .volumeUsageByDatasourcePackage)
            for (dictKey0, volumeusagebydatasourcepackage0) in volumeUsageByDatasourcePackage {
                try volumeUsageByDatasourcePackageContainer.encode(volumeusagebydatasourcepackage0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let volumeUsageInBytes = self.volumeUsageInBytes {
            try encodeContainer.encode(volumeUsageInBytes, forKey: .volumeUsageInBytes)
        }
        if let volumeUsageUpdatedTime = self.volumeUsageUpdatedTime {
            try encodeContainer.encode(volumeUsageUpdatedTime.timeIntervalSince1970, forKey: .volumeUsageUpdatedTime)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let accountIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .accountId)
        accountId = accountIdDecoded
        let emailAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .emailAddress)
        emailAddress = emailAddressDecoded
        let graphArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .graphArn)
        graphArn = graphArnDecoded
        let masterIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .masterId)
        masterId = masterIdDecoded
        let administratorIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .administratorId)
        administratorId = administratorIdDecoded
        let statusDecoded = try containerValues.decodeIfPresent(DetectiveClientTypes.MemberStatus.self, forKey: .status)
        status = statusDecoded
        let disabledReasonDecoded = try containerValues.decodeIfPresent(DetectiveClientTypes.MemberDisabledReason.self, forKey: .disabledReason)
        disabledReason = disabledReasonDecoded
        let invitedTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .invitedTime)
        invitedTime = invitedTimeDecoded
        let updatedTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .updatedTime)
        updatedTime = updatedTimeDecoded
        let volumeUsageInBytesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .volumeUsageInBytes)
        volumeUsageInBytes = volumeUsageInBytesDecoded
        let volumeUsageUpdatedTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .volumeUsageUpdatedTime)
        volumeUsageUpdatedTime = volumeUsageUpdatedTimeDecoded
        let percentOfGraphUtilizationDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .percentOfGraphUtilization)
        percentOfGraphUtilization = percentOfGraphUtilizationDecoded
        let percentOfGraphUtilizationUpdatedTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .percentOfGraphUtilizationUpdatedTime)
        percentOfGraphUtilizationUpdatedTime = percentOfGraphUtilizationUpdatedTimeDecoded
        let invitationTypeDecoded = try containerValues.decodeIfPresent(DetectiveClientTypes.InvitationType.self, forKey: .invitationType)
        invitationType = invitationTypeDecoded
        let volumeUsageByDatasourcePackageContainer = try containerValues.decodeIfPresent([Swift.String: DetectiveClientTypes.DatasourcePackageUsageInfo?].self, forKey: .volumeUsageByDatasourcePackage)
        var volumeUsageByDatasourcePackageDecoded0: [Swift.String:DetectiveClientTypes.DatasourcePackageUsageInfo]? = nil
        if let volumeUsageByDatasourcePackageContainer = volumeUsageByDatasourcePackageContainer {
            volumeUsageByDatasourcePackageDecoded0 = [Swift.String:DetectiveClientTypes.DatasourcePackageUsageInfo]()
            for (key0, datasourcepackageusageinfo0) in volumeUsageByDatasourcePackageContainer {
                if let datasourcepackageusageinfo0 = datasourcepackageusageinfo0 {
                    volumeUsageByDatasourcePackageDecoded0?[key0] = datasourcepackageusageinfo0
                }
            }
        }
        volumeUsageByDatasourcePackage = volumeUsageByDatasourcePackageDecoded0
        let datasourcePackageIngestStatesContainer = try containerValues.decodeIfPresent([Swift.String: DetectiveClientTypes.DatasourcePackageIngestState?].self, forKey: .datasourcePackageIngestStates)
        var datasourcePackageIngestStatesDecoded0: [Swift.String:DetectiveClientTypes.DatasourcePackageIngestState]? = nil
        if let datasourcePackageIngestStatesContainer = datasourcePackageIngestStatesContainer {
            datasourcePackageIngestStatesDecoded0 = [Swift.String:DetectiveClientTypes.DatasourcePackageIngestState]()
            for (key0, datasourcepackageingeststate0) in datasourcePackageIngestStatesContainer {
                if let datasourcepackageingeststate0 = datasourcepackageingeststate0 {
                    datasourcePackageIngestStatesDecoded0?[key0] = datasourcepackageingeststate0
                }
            }
        }
        datasourcePackageIngestStates = datasourcePackageIngestStatesDecoded0
    }
}
