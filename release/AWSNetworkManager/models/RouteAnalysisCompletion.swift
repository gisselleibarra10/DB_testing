// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension NetworkManagerClientTypes {
    /// Describes the status of an analysis at completion.
    public struct RouteAnalysisCompletion: Swift.Equatable {
        /// The reason code. Available only if a connection is not found.
        ///
        /// * BLACKHOLE_ROUTE_FOR_DESTINATION_FOUND - Found a black hole route with the destination CIDR block.
        ///
        /// * CYCLIC_PATH_DETECTED - Found the same resource multiple times while traversing the path.
        ///
        /// * INACTIVE_ROUTE_FOR_DESTINATION_FOUND - Found an inactive route with the destination CIDR block.
        ///
        /// * MAX_HOPS_EXCEEDED - Analysis exceeded 64 hops without finding the destination.
        ///
        /// * ROUTE_NOT_FOUND - Cannot find a route table with the destination CIDR block.
        ///
        /// * TGW_ATTACH_ARN_NO_MATCH - Found an attachment, but not with the correct destination ARN.
        ///
        /// * TGW_ATTACH_NOT_FOUND - Cannot find an attachment.
        ///
        /// * TGW_ATTACH_NOT_IN_TGW - Found an attachment, but not to the correct transit gateway.
        ///
        /// * TGW_ATTACH_STABLE_ROUTE_TABLE_NOT_FOUND - The state of the route table association is not associated.
        public var reasonCode: NetworkManagerClientTypes.RouteAnalysisCompletionReasonCode?
        /// Additional information about the path. Available only if a connection is not found.
        public var reasonContext: [Swift.String:Swift.String]?
        /// The result of the analysis. If the status is NOT_CONNECTED, check the reason code.
        public var resultCode: NetworkManagerClientTypes.RouteAnalysisCompletionResultCode?

        public init (
            reasonCode: NetworkManagerClientTypes.RouteAnalysisCompletionReasonCode? = nil,
            reasonContext: [Swift.String:Swift.String]? = nil,
            resultCode: NetworkManagerClientTypes.RouteAnalysisCompletionResultCode? = nil
        )
        {
            self.reasonCode = reasonCode
            self.reasonContext = reasonContext
            self.resultCode = resultCode
        }
    }

}
