// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateConnectPeerInputBody: Swift.Equatable {
    let connectAttachmentId: Swift.String?
    let coreNetworkAddress: Swift.String?
    let peerAddress: Swift.String?
    let bgpOptions: NetworkManagerClientTypes.BgpOptions?
    let insideCidrBlocks: [Swift.String]?
    let tags: [NetworkManagerClientTypes.Tag]?
    let clientToken: Swift.String?
}

extension CreateConnectPeerInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bgpOptions = "BgpOptions"
        case clientToken = "ClientToken"
        case connectAttachmentId = "ConnectAttachmentId"
        case coreNetworkAddress = "CoreNetworkAddress"
        case insideCidrBlocks = "InsideCidrBlocks"
        case peerAddress = "PeerAddress"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let connectAttachmentIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .connectAttachmentId)
        connectAttachmentId = connectAttachmentIdDecoded
        let coreNetworkAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .coreNetworkAddress)
        coreNetworkAddress = coreNetworkAddressDecoded
        let peerAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .peerAddress)
        peerAddress = peerAddressDecoded
        let bgpOptionsDecoded = try containerValues.decodeIfPresent(NetworkManagerClientTypes.BgpOptions.self, forKey: .bgpOptions)
        bgpOptions = bgpOptionsDecoded
        let insideCidrBlocksContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .insideCidrBlocks)
        var insideCidrBlocksDecoded0:[Swift.String]? = nil
        if let insideCidrBlocksContainer = insideCidrBlocksContainer {
            insideCidrBlocksDecoded0 = [Swift.String]()
            for string0 in insideCidrBlocksContainer {
                if let string0 = string0 {
                    insideCidrBlocksDecoded0?.append(string0)
                }
            }
        }
        insideCidrBlocks = insideCidrBlocksDecoded0
        let tagsContainer = try containerValues.decodeIfPresent([NetworkManagerClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[NetworkManagerClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [NetworkManagerClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let clientTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientToken)
        clientToken = clientTokenDecoded
    }
}
