// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct GetNetworkRoutesInput: Swift.Equatable {
    /// Filter by route table destination. Possible Values: TRANSIT_GATEWAY_ATTACHMENT_ID, RESOURCE_ID, or RESOURCE_TYPE.
    public var destinationFilters: [Swift.String:[Swift.String]]?
    /// An exact CIDR block.
    public var exactCidrMatches: [Swift.String]?
    /// The ID of the global network.
    /// This member is required.
    public var globalNetworkId: Swift.String?
    /// The most specific route that matches the traffic (longest prefix match).
    public var longestPrefixMatches: [Swift.String]?
    /// The IDs of the prefix lists.
    public var prefixListIds: [Swift.String]?
    /// The ID of the route table.
    /// This member is required.
    public var routeTableIdentifier: NetworkManagerClientTypes.RouteTableIdentifier?
    /// The route states.
    public var states: [NetworkManagerClientTypes.RouteState]?
    /// The routes with a subnet that match the specified CIDR filter.
    public var subnetOfMatches: [Swift.String]?
    /// The routes with a CIDR that encompasses the CIDR filter. Example: If you specify 10.0.1.0/30, then the result returns 10.0.1.0/29.
    public var supernetOfMatches: [Swift.String]?
    /// The route types.
    public var types: [NetworkManagerClientTypes.RouteType]?

    public init (
        destinationFilters: [Swift.String:[Swift.String]]? = nil,
        exactCidrMatches: [Swift.String]? = nil,
        globalNetworkId: Swift.String? = nil,
        longestPrefixMatches: [Swift.String]? = nil,
        prefixListIds: [Swift.String]? = nil,
        routeTableIdentifier: NetworkManagerClientTypes.RouteTableIdentifier? = nil,
        states: [NetworkManagerClientTypes.RouteState]? = nil,
        subnetOfMatches: [Swift.String]? = nil,
        supernetOfMatches: [Swift.String]? = nil,
        types: [NetworkManagerClientTypes.RouteType]? = nil
    )
    {
        self.destinationFilters = destinationFilters
        self.exactCidrMatches = exactCidrMatches
        self.globalNetworkId = globalNetworkId
        self.longestPrefixMatches = longestPrefixMatches
        self.prefixListIds = prefixListIds
        self.routeTableIdentifier = routeTableIdentifier
        self.states = states
        self.subnetOfMatches = subnetOfMatches
        self.supernetOfMatches = supernetOfMatches
        self.types = types
    }
}
