// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension NetworkManagerClientTypes.CoreNetworkEdge: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case asn = "Asn"
        case edgeLocation = "EdgeLocation"
        case insideCidrBlocks = "InsideCidrBlocks"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let asn = self.asn {
            try encodeContainer.encode(asn, forKey: .asn)
        }
        if let edgeLocation = self.edgeLocation {
            try encodeContainer.encode(edgeLocation, forKey: .edgeLocation)
        }
        if let insideCidrBlocks = insideCidrBlocks {
            var insideCidrBlocksContainer = encodeContainer.nestedUnkeyedContainer(forKey: .insideCidrBlocks)
            for constrainedstringlist0 in insideCidrBlocks {
                try insideCidrBlocksContainer.encode(constrainedstringlist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let edgeLocationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .edgeLocation)
        edgeLocation = edgeLocationDecoded
        let asnDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .asn)
        asn = asnDecoded
        let insideCidrBlocksContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .insideCidrBlocks)
        var insideCidrBlocksDecoded0:[Swift.String]? = nil
        if let insideCidrBlocksContainer = insideCidrBlocksContainer {
            insideCidrBlocksDecoded0 = [Swift.String]()
            for string0 in insideCidrBlocksContainer {
                if let string0 = string0 {
                    insideCidrBlocksDecoded0?.append(string0)
                }
            }
        }
        insideCidrBlocks = insideCidrBlocksDecoded0
    }
}
