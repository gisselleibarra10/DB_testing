// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension NetworkManagerClientTypes.ConnectPeerSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case connectAttachmentId = "ConnectAttachmentId"
        case connectPeerId = "ConnectPeerId"
        case connectPeerState = "ConnectPeerState"
        case coreNetworkId = "CoreNetworkId"
        case createdAt = "CreatedAt"
        case edgeLocation = "EdgeLocation"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let connectAttachmentId = self.connectAttachmentId {
            try encodeContainer.encode(connectAttachmentId, forKey: .connectAttachmentId)
        }
        if let connectPeerId = self.connectPeerId {
            try encodeContainer.encode(connectPeerId, forKey: .connectPeerId)
        }
        if let connectPeerState = self.connectPeerState {
            try encodeContainer.encode(connectPeerState.rawValue, forKey: .connectPeerState)
        }
        if let coreNetworkId = self.coreNetworkId {
            try encodeContainer.encode(coreNetworkId, forKey: .coreNetworkId)
        }
        if let createdAt = self.createdAt {
            try encodeContainer.encode(createdAt.timeIntervalSince1970, forKey: .createdAt)
        }
        if let edgeLocation = self.edgeLocation {
            try encodeContainer.encode(edgeLocation, forKey: .edgeLocation)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let coreNetworkIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .coreNetworkId)
        coreNetworkId = coreNetworkIdDecoded
        let connectAttachmentIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .connectAttachmentId)
        connectAttachmentId = connectAttachmentIdDecoded
        let connectPeerIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .connectPeerId)
        connectPeerId = connectPeerIdDecoded
        let edgeLocationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .edgeLocation)
        edgeLocation = edgeLocationDecoded
        let connectPeerStateDecoded = try containerValues.decodeIfPresent(NetworkManagerClientTypes.ConnectPeerState.self, forKey: .connectPeerState)
        connectPeerState = connectPeerStateDecoded
        let createdAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdAt)
        createdAt = createdAtDecoded
        let tagsContainer = try containerValues.decodeIfPresent([NetworkManagerClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[NetworkManagerClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [NetworkManagerClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}
