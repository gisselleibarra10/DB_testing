// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension GetNetworkRoutesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case destinationFilters = "DestinationFilters"
        case exactCidrMatches = "ExactCidrMatches"
        case longestPrefixMatches = "LongestPrefixMatches"
        case prefixListIds = "PrefixListIds"
        case routeTableIdentifier = "RouteTableIdentifier"
        case states = "States"
        case subnetOfMatches = "SubnetOfMatches"
        case supernetOfMatches = "SupernetOfMatches"
        case types = "Types"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let destinationFilters = destinationFilters {
            var destinationFiltersContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .destinationFilters)
            for (dictKey0, filtermap0) in destinationFilters {
                try destinationFiltersContainer.encode(filtermap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let exactCidrMatches = exactCidrMatches {
            var exactCidrMatchesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .exactCidrMatches)
            for constrainedstringlist0 in exactCidrMatches {
                try exactCidrMatchesContainer.encode(constrainedstringlist0)
            }
        }
        if let longestPrefixMatches = longestPrefixMatches {
            var longestPrefixMatchesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .longestPrefixMatches)
            for constrainedstringlist0 in longestPrefixMatches {
                try longestPrefixMatchesContainer.encode(constrainedstringlist0)
            }
        }
        if let prefixListIds = prefixListIds {
            var prefixListIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .prefixListIds)
            for constrainedstringlist0 in prefixListIds {
                try prefixListIdsContainer.encode(constrainedstringlist0)
            }
        }
        if let routeTableIdentifier = self.routeTableIdentifier {
            try encodeContainer.encode(routeTableIdentifier, forKey: .routeTableIdentifier)
        }
        if let states = states {
            var statesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .states)
            for routestatelist0 in states {
                try statesContainer.encode(routestatelist0.rawValue)
            }
        }
        if let subnetOfMatches = subnetOfMatches {
            var subnetOfMatchesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .subnetOfMatches)
            for constrainedstringlist0 in subnetOfMatches {
                try subnetOfMatchesContainer.encode(constrainedstringlist0)
            }
        }
        if let supernetOfMatches = supernetOfMatches {
            var supernetOfMatchesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .supernetOfMatches)
            for constrainedstringlist0 in supernetOfMatches {
                try supernetOfMatchesContainer.encode(constrainedstringlist0)
            }
        }
        if let types = types {
            var typesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .types)
            for routetypelist0 in types {
                try typesContainer.encode(routetypelist0.rawValue)
            }
        }
    }
}
