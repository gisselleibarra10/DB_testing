// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetNetworkRoutesInputBody: Swift.Equatable {
    let routeTableIdentifier: NetworkManagerClientTypes.RouteTableIdentifier?
    let exactCidrMatches: [Swift.String]?
    let longestPrefixMatches: [Swift.String]?
    let subnetOfMatches: [Swift.String]?
    let supernetOfMatches: [Swift.String]?
    let prefixListIds: [Swift.String]?
    let states: [NetworkManagerClientTypes.RouteState]?
    let types: [NetworkManagerClientTypes.RouteType]?
    let destinationFilters: [Swift.String:[Swift.String]]?
}

extension GetNetworkRoutesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case destinationFilters = "DestinationFilters"
        case exactCidrMatches = "ExactCidrMatches"
        case longestPrefixMatches = "LongestPrefixMatches"
        case prefixListIds = "PrefixListIds"
        case routeTableIdentifier = "RouteTableIdentifier"
        case states = "States"
        case subnetOfMatches = "SubnetOfMatches"
        case supernetOfMatches = "SupernetOfMatches"
        case types = "Types"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let routeTableIdentifierDecoded = try containerValues.decodeIfPresent(NetworkManagerClientTypes.RouteTableIdentifier.self, forKey: .routeTableIdentifier)
        routeTableIdentifier = routeTableIdentifierDecoded
        let exactCidrMatchesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .exactCidrMatches)
        var exactCidrMatchesDecoded0:[Swift.String]? = nil
        if let exactCidrMatchesContainer = exactCidrMatchesContainer {
            exactCidrMatchesDecoded0 = [Swift.String]()
            for string0 in exactCidrMatchesContainer {
                if let string0 = string0 {
                    exactCidrMatchesDecoded0?.append(string0)
                }
            }
        }
        exactCidrMatches = exactCidrMatchesDecoded0
        let longestPrefixMatchesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .longestPrefixMatches)
        var longestPrefixMatchesDecoded0:[Swift.String]? = nil
        if let longestPrefixMatchesContainer = longestPrefixMatchesContainer {
            longestPrefixMatchesDecoded0 = [Swift.String]()
            for string0 in longestPrefixMatchesContainer {
                if let string0 = string0 {
                    longestPrefixMatchesDecoded0?.append(string0)
                }
            }
        }
        longestPrefixMatches = longestPrefixMatchesDecoded0
        let subnetOfMatchesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .subnetOfMatches)
        var subnetOfMatchesDecoded0:[Swift.String]? = nil
        if let subnetOfMatchesContainer = subnetOfMatchesContainer {
            subnetOfMatchesDecoded0 = [Swift.String]()
            for string0 in subnetOfMatchesContainer {
                if let string0 = string0 {
                    subnetOfMatchesDecoded0?.append(string0)
                }
            }
        }
        subnetOfMatches = subnetOfMatchesDecoded0
        let supernetOfMatchesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .supernetOfMatches)
        var supernetOfMatchesDecoded0:[Swift.String]? = nil
        if let supernetOfMatchesContainer = supernetOfMatchesContainer {
            supernetOfMatchesDecoded0 = [Swift.String]()
            for string0 in supernetOfMatchesContainer {
                if let string0 = string0 {
                    supernetOfMatchesDecoded0?.append(string0)
                }
            }
        }
        supernetOfMatches = supernetOfMatchesDecoded0
        let prefixListIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .prefixListIds)
        var prefixListIdsDecoded0:[Swift.String]? = nil
        if let prefixListIdsContainer = prefixListIdsContainer {
            prefixListIdsDecoded0 = [Swift.String]()
            for string0 in prefixListIdsContainer {
                if let string0 = string0 {
                    prefixListIdsDecoded0?.append(string0)
                }
            }
        }
        prefixListIds = prefixListIdsDecoded0
        let statesContainer = try containerValues.decodeIfPresent([NetworkManagerClientTypes.RouteState?].self, forKey: .states)
        var statesDecoded0:[NetworkManagerClientTypes.RouteState]? = nil
        if let statesContainer = statesContainer {
            statesDecoded0 = [NetworkManagerClientTypes.RouteState]()
            for string0 in statesContainer {
                if let string0 = string0 {
                    statesDecoded0?.append(string0)
                }
            }
        }
        states = statesDecoded0
        let typesContainer = try containerValues.decodeIfPresent([NetworkManagerClientTypes.RouteType?].self, forKey: .types)
        var typesDecoded0:[NetworkManagerClientTypes.RouteType]? = nil
        if let typesContainer = typesContainer {
            typesDecoded0 = [NetworkManagerClientTypes.RouteType]()
            for string0 in typesContainer {
                if let string0 = string0 {
                    typesDecoded0?.append(string0)
                }
            }
        }
        types = typesDecoded0
        let destinationFiltersContainer = try containerValues.decodeIfPresent([Swift.String: [Swift.String?]?].self, forKey: .destinationFilters)
        var destinationFiltersDecoded0: [Swift.String:[Swift.String]]? = nil
        if let destinationFiltersContainer = destinationFiltersContainer {
            destinationFiltersDecoded0 = [Swift.String:[Swift.String]]()
            for (key0, filtervalues0) in destinationFiltersContainer {
                var filtervalues0Decoded0: [Swift.String]? = nil
                if let filtervalues0 = filtervalues0 {
                    filtervalues0Decoded0 = [Swift.String]()
                    for string1 in filtervalues0 {
                        if let string1 = string1 {
                            filtervalues0Decoded0?.append(string1)
                        }
                    }
                }
                destinationFiltersDecoded0?[key0] = filtervalues0Decoded0
            }
        }
        destinationFilters = destinationFiltersDecoded0
    }
}
