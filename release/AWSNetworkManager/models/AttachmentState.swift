// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension NetworkManagerClientTypes {
    public enum AttachmentState: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case available
        case creating
        case deleting
        case failed
        case pendingAttachmentAcceptance
        case pendingNetworkUpdate
        case pendingTagAcceptance
        case rejected
        case updating
        case sdkUnknown(Swift.String)

        public static var allCases: [AttachmentState] {
            return [
                .available,
                .creating,
                .deleting,
                .failed,
                .pendingAttachmentAcceptance,
                .pendingNetworkUpdate,
                .pendingTagAcceptance,
                .rejected,
                .updating,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .available: return "AVAILABLE"
            case .creating: return "CREATING"
            case .deleting: return "DELETING"
            case .failed: return "FAILED"
            case .pendingAttachmentAcceptance: return "PENDING_ATTACHMENT_ACCEPTANCE"
            case .pendingNetworkUpdate: return "PENDING_NETWORK_UPDATE"
            case .pendingTagAcceptance: return "PENDING_TAG_ACCEPTANCE"
            case .rejected: return "REJECTED"
            case .updating: return "UPDATING"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = AttachmentState(rawValue: rawValue) ?? AttachmentState.sdkUnknown(rawValue)
        }
    }
}
