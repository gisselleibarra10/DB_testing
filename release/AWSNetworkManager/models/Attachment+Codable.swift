// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension NetworkManagerClientTypes.Attachment: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attachmentId = "AttachmentId"
        case attachmentPolicyRuleNumber = "AttachmentPolicyRuleNumber"
        case attachmentType = "AttachmentType"
        case coreNetworkArn = "CoreNetworkArn"
        case coreNetworkId = "CoreNetworkId"
        case createdAt = "CreatedAt"
        case edgeLocation = "EdgeLocation"
        case ownerAccountId = "OwnerAccountId"
        case proposedSegmentChange = "ProposedSegmentChange"
        case resourceArn = "ResourceArn"
        case segmentName = "SegmentName"
        case state = "State"
        case tags = "Tags"
        case updatedAt = "UpdatedAt"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let attachmentId = self.attachmentId {
            try encodeContainer.encode(attachmentId, forKey: .attachmentId)
        }
        if let attachmentPolicyRuleNumber = self.attachmentPolicyRuleNumber {
            try encodeContainer.encode(attachmentPolicyRuleNumber, forKey: .attachmentPolicyRuleNumber)
        }
        if let attachmentType = self.attachmentType {
            try encodeContainer.encode(attachmentType.rawValue, forKey: .attachmentType)
        }
        if let coreNetworkArn = self.coreNetworkArn {
            try encodeContainer.encode(coreNetworkArn, forKey: .coreNetworkArn)
        }
        if let coreNetworkId = self.coreNetworkId {
            try encodeContainer.encode(coreNetworkId, forKey: .coreNetworkId)
        }
        if let createdAt = self.createdAt {
            try encodeContainer.encode(createdAt.timeIntervalSince1970, forKey: .createdAt)
        }
        if let edgeLocation = self.edgeLocation {
            try encodeContainer.encode(edgeLocation, forKey: .edgeLocation)
        }
        if let ownerAccountId = self.ownerAccountId {
            try encodeContainer.encode(ownerAccountId, forKey: .ownerAccountId)
        }
        if let proposedSegmentChange = self.proposedSegmentChange {
            try encodeContainer.encode(proposedSegmentChange, forKey: .proposedSegmentChange)
        }
        if let resourceArn = self.resourceArn {
            try encodeContainer.encode(resourceArn, forKey: .resourceArn)
        }
        if let segmentName = self.segmentName {
            try encodeContainer.encode(segmentName, forKey: .segmentName)
        }
        if let state = self.state {
            try encodeContainer.encode(state.rawValue, forKey: .state)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
        if let updatedAt = self.updatedAt {
            try encodeContainer.encode(updatedAt.timeIntervalSince1970, forKey: .updatedAt)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let coreNetworkIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .coreNetworkId)
        coreNetworkId = coreNetworkIdDecoded
        let coreNetworkArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .coreNetworkArn)
        coreNetworkArn = coreNetworkArnDecoded
        let attachmentIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .attachmentId)
        attachmentId = attachmentIdDecoded
        let ownerAccountIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ownerAccountId)
        ownerAccountId = ownerAccountIdDecoded
        let attachmentTypeDecoded = try containerValues.decodeIfPresent(NetworkManagerClientTypes.AttachmentType.self, forKey: .attachmentType)
        attachmentType = attachmentTypeDecoded
        let stateDecoded = try containerValues.decodeIfPresent(NetworkManagerClientTypes.AttachmentState.self, forKey: .state)
        state = stateDecoded
        let edgeLocationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .edgeLocation)
        edgeLocation = edgeLocationDecoded
        let resourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceArn)
        resourceArn = resourceArnDecoded
        let attachmentPolicyRuleNumberDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .attachmentPolicyRuleNumber)
        attachmentPolicyRuleNumber = attachmentPolicyRuleNumberDecoded
        let segmentNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .segmentName)
        segmentName = segmentNameDecoded
        let tagsContainer = try containerValues.decodeIfPresent([NetworkManagerClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[NetworkManagerClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [NetworkManagerClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let proposedSegmentChangeDecoded = try containerValues.decodeIfPresent(NetworkManagerClientTypes.ProposedSegmentChange.self, forKey: .proposedSegmentChange)
        proposedSegmentChange = proposedSegmentChangeDecoded
        let createdAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdAt)
        createdAt = createdAtDecoded
        let updatedAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .updatedAt)
        updatedAt = updatedAtDecoded
    }
}
