// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateTransitGatewayRouteTableAttachmentInputBody: Swift.Equatable {
    let peeringId: Swift.String?
    let transitGatewayRouteTableArn: Swift.String?
    let tags: [NetworkManagerClientTypes.Tag]?
    let clientToken: Swift.String?
}

extension CreateTransitGatewayRouteTableAttachmentInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientToken = "ClientToken"
        case peeringId = "PeeringId"
        case tags = "Tags"
        case transitGatewayRouteTableArn = "TransitGatewayRouteTableArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let peeringIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .peeringId)
        peeringId = peeringIdDecoded
        let transitGatewayRouteTableArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .transitGatewayRouteTableArn)
        transitGatewayRouteTableArn = transitGatewayRouteTableArnDecoded
        let tagsContainer = try containerValues.decodeIfPresent([NetworkManagerClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[NetworkManagerClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [NetworkManagerClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let clientTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientToken)
        clientToken = clientTokenDecoded
    }
}
