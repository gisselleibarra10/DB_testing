// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateVpcAttachmentInputBody: Swift.Equatable {
    let coreNetworkId: Swift.String?
    let vpcArn: Swift.String?
    let subnetArns: [Swift.String]?
    let options: NetworkManagerClientTypes.VpcOptions?
    let tags: [NetworkManagerClientTypes.Tag]?
    let clientToken: Swift.String?
}

extension CreateVpcAttachmentInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientToken = "ClientToken"
        case coreNetworkId = "CoreNetworkId"
        case options = "Options"
        case subnetArns = "SubnetArns"
        case tags = "Tags"
        case vpcArn = "VpcArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let coreNetworkIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .coreNetworkId)
        coreNetworkId = coreNetworkIdDecoded
        let vpcArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vpcArn)
        vpcArn = vpcArnDecoded
        let subnetArnsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .subnetArns)
        var subnetArnsDecoded0:[Swift.String]? = nil
        if let subnetArnsContainer = subnetArnsContainer {
            subnetArnsDecoded0 = [Swift.String]()
            for string0 in subnetArnsContainer {
                if let string0 = string0 {
                    subnetArnsDecoded0?.append(string0)
                }
            }
        }
        subnetArns = subnetArnsDecoded0
        let optionsDecoded = try containerValues.decodeIfPresent(NetworkManagerClientTypes.VpcOptions.self, forKey: .options)
        options = optionsDecoded
        let tagsContainer = try containerValues.decodeIfPresent([NetworkManagerClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[NetworkManagerClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [NetworkManagerClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let clientTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientToken)
        clientToken = clientTokenDecoded
    }
}
