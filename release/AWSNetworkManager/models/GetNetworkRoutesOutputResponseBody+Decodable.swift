// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetNetworkRoutesOutputResponseBody: Swift.Equatable {
    let routeTableArn: Swift.String?
    let coreNetworkSegmentEdge: NetworkManagerClientTypes.CoreNetworkSegmentEdgeIdentifier?
    let routeTableType: NetworkManagerClientTypes.RouteTableType?
    let routeTableTimestamp: ClientRuntime.Date?
    let networkRoutes: [NetworkManagerClientTypes.NetworkRoute]?
}

extension GetNetworkRoutesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case coreNetworkSegmentEdge = "CoreNetworkSegmentEdge"
        case networkRoutes = "NetworkRoutes"
        case routeTableArn = "RouteTableArn"
        case routeTableTimestamp = "RouteTableTimestamp"
        case routeTableType = "RouteTableType"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let routeTableArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .routeTableArn)
        routeTableArn = routeTableArnDecoded
        let coreNetworkSegmentEdgeDecoded = try containerValues.decodeIfPresent(NetworkManagerClientTypes.CoreNetworkSegmentEdgeIdentifier.self, forKey: .coreNetworkSegmentEdge)
        coreNetworkSegmentEdge = coreNetworkSegmentEdgeDecoded
        let routeTableTypeDecoded = try containerValues.decodeIfPresent(NetworkManagerClientTypes.RouteTableType.self, forKey: .routeTableType)
        routeTableType = routeTableTypeDecoded
        let routeTableTimestampDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .routeTableTimestamp)
        routeTableTimestamp = routeTableTimestampDecoded
        let networkRoutesContainer = try containerValues.decodeIfPresent([NetworkManagerClientTypes.NetworkRoute?].self, forKey: .networkRoutes)
        var networkRoutesDecoded0:[NetworkManagerClientTypes.NetworkRoute]? = nil
        if let networkRoutesContainer = networkRoutesContainer {
            networkRoutesDecoded0 = [NetworkManagerClientTypes.NetworkRoute]()
            for structure0 in networkRoutesContainer {
                if let structure0 = structure0 {
                    networkRoutesDecoded0?.append(structure0)
                }
            }
        }
        networkRoutes = networkRoutesDecoded0
    }
}
