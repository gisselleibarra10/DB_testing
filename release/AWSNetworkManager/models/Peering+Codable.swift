// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension NetworkManagerClientTypes.Peering: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case coreNetworkArn = "CoreNetworkArn"
        case coreNetworkId = "CoreNetworkId"
        case createdAt = "CreatedAt"
        case edgeLocation = "EdgeLocation"
        case ownerAccountId = "OwnerAccountId"
        case peeringId = "PeeringId"
        case peeringType = "PeeringType"
        case resourceArn = "ResourceArn"
        case state = "State"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let coreNetworkArn = self.coreNetworkArn {
            try encodeContainer.encode(coreNetworkArn, forKey: .coreNetworkArn)
        }
        if let coreNetworkId = self.coreNetworkId {
            try encodeContainer.encode(coreNetworkId, forKey: .coreNetworkId)
        }
        if let createdAt = self.createdAt {
            try encodeContainer.encode(createdAt.timeIntervalSince1970, forKey: .createdAt)
        }
        if let edgeLocation = self.edgeLocation {
            try encodeContainer.encode(edgeLocation, forKey: .edgeLocation)
        }
        if let ownerAccountId = self.ownerAccountId {
            try encodeContainer.encode(ownerAccountId, forKey: .ownerAccountId)
        }
        if let peeringId = self.peeringId {
            try encodeContainer.encode(peeringId, forKey: .peeringId)
        }
        if let peeringType = self.peeringType {
            try encodeContainer.encode(peeringType.rawValue, forKey: .peeringType)
        }
        if let resourceArn = self.resourceArn {
            try encodeContainer.encode(resourceArn, forKey: .resourceArn)
        }
        if let state = self.state {
            try encodeContainer.encode(state.rawValue, forKey: .state)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let coreNetworkIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .coreNetworkId)
        coreNetworkId = coreNetworkIdDecoded
        let coreNetworkArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .coreNetworkArn)
        coreNetworkArn = coreNetworkArnDecoded
        let peeringIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .peeringId)
        peeringId = peeringIdDecoded
        let ownerAccountIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ownerAccountId)
        ownerAccountId = ownerAccountIdDecoded
        let peeringTypeDecoded = try containerValues.decodeIfPresent(NetworkManagerClientTypes.PeeringType.self, forKey: .peeringType)
        peeringType = peeringTypeDecoded
        let stateDecoded = try containerValues.decodeIfPresent(NetworkManagerClientTypes.PeeringState.self, forKey: .state)
        state = stateDecoded
        let edgeLocationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .edgeLocation)
        edgeLocation = edgeLocationDecoded
        let resourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceArn)
        resourceArn = resourceArnDecoded
        let tagsContainer = try containerValues.decodeIfPresent([NetworkManagerClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[NetworkManagerClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [NetworkManagerClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let createdAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdAt)
        createdAt = createdAtDecoded
    }
}
