// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension NetworkManagerClientTypes.CoreNetworkSegment: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case edgeLocations = "EdgeLocations"
        case name = "Name"
        case sharedSegments = "SharedSegments"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let edgeLocations = edgeLocations {
            var edgeLocationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .edgeLocations)
            for externalregioncodelist0 in edgeLocations {
                try edgeLocationsContainer.encode(externalregioncodelist0)
            }
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let sharedSegments = sharedSegments {
            var sharedSegmentsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .sharedSegments)
            for constrainedstringlist0 in sharedSegments {
                try sharedSegmentsContainer.encode(constrainedstringlist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let edgeLocationsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .edgeLocations)
        var edgeLocationsDecoded0:[Swift.String]? = nil
        if let edgeLocationsContainer = edgeLocationsContainer {
            edgeLocationsDecoded0 = [Swift.String]()
            for string0 in edgeLocationsContainer {
                if let string0 = string0 {
                    edgeLocationsDecoded0?.append(string0)
                }
            }
        }
        edgeLocations = edgeLocationsDecoded0
        let sharedSegmentsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .sharedSegments)
        var sharedSegmentsDecoded0:[Swift.String]? = nil
        if let sharedSegmentsContainer = sharedSegmentsContainer {
            sharedSegmentsDecoded0 = [Swift.String]()
            for string0 in sharedSegmentsContainer {
                if let string0 = string0 {
                    sharedSegmentsDecoded0?.append(string0)
                }
            }
        }
        sharedSegments = sharedSegmentsDecoded0
    }
}
