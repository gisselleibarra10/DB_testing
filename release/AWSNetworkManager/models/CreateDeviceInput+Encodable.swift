// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CreateDeviceInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case aWSLocation = "AWSLocation"
        case description = "Description"
        case location = "Location"
        case model = "Model"
        case serialNumber = "SerialNumber"
        case siteId = "SiteId"
        case tags = "Tags"
        case type = "Type"
        case vendor = "Vendor"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let aWSLocation = self.aWSLocation {
            try encodeContainer.encode(aWSLocation, forKey: .aWSLocation)
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let location = self.location {
            try encodeContainer.encode(location, forKey: .location)
        }
        if let model = self.model {
            try encodeContainer.encode(model, forKey: .model)
        }
        if let serialNumber = self.serialNumber {
            try encodeContainer.encode(serialNumber, forKey: .serialNumber)
        }
        if let siteId = self.siteId {
            try encodeContainer.encode(siteId, forKey: .siteId)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
        if let type = self.type {
            try encodeContainer.encode(type, forKey: .type)
        }
        if let vendor = self.vendor {
            try encodeContainer.encode(vendor, forKey: .vendor)
        }
    }
}
