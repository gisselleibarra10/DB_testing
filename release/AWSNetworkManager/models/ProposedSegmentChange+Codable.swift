// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension NetworkManagerClientTypes.ProposedSegmentChange: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attachmentPolicyRuleNumber = "AttachmentPolicyRuleNumber"
        case segmentName = "SegmentName"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let attachmentPolicyRuleNumber = self.attachmentPolicyRuleNumber {
            try encodeContainer.encode(attachmentPolicyRuleNumber, forKey: .attachmentPolicyRuleNumber)
        }
        if let segmentName = self.segmentName {
            try encodeContainer.encode(segmentName, forKey: .segmentName)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tagsContainer = try containerValues.decodeIfPresent([NetworkManagerClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[NetworkManagerClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [NetworkManagerClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let attachmentPolicyRuleNumberDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .attachmentPolicyRuleNumber)
        attachmentPolicyRuleNumber = attachmentPolicyRuleNumberDecoded
        let segmentNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .segmentName)
        segmentName = segmentNameDecoded
    }
}
