// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension NetworkManagerClientTypes.ConnectPeerAssociation: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case connectPeerId = "ConnectPeerId"
        case deviceId = "DeviceId"
        case globalNetworkId = "GlobalNetworkId"
        case linkId = "LinkId"
        case state = "State"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let connectPeerId = self.connectPeerId {
            try encodeContainer.encode(connectPeerId, forKey: .connectPeerId)
        }
        if let deviceId = self.deviceId {
            try encodeContainer.encode(deviceId, forKey: .deviceId)
        }
        if let globalNetworkId = self.globalNetworkId {
            try encodeContainer.encode(globalNetworkId, forKey: .globalNetworkId)
        }
        if let linkId = self.linkId {
            try encodeContainer.encode(linkId, forKey: .linkId)
        }
        if let state = self.state {
            try encodeContainer.encode(state.rawValue, forKey: .state)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let connectPeerIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .connectPeerId)
        connectPeerId = connectPeerIdDecoded
        let globalNetworkIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .globalNetworkId)
        globalNetworkId = globalNetworkIdDecoded
        let deviceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deviceId)
        deviceId = deviceIdDecoded
        let linkIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .linkId)
        linkId = linkIdDecoded
        let stateDecoded = try containerValues.decodeIfPresent(NetworkManagerClientTypes.ConnectPeerAssociationState.self, forKey: .state)
        state = stateDecoded
    }
}
