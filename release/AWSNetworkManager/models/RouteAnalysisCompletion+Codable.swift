// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension NetworkManagerClientTypes.RouteAnalysisCompletion: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case reasonCode = "ReasonCode"
        case reasonContext = "ReasonContext"
        case resultCode = "ResultCode"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let reasonCode = self.reasonCode {
            try encodeContainer.encode(reasonCode.rawValue, forKey: .reasonCode)
        }
        if let reasonContext = reasonContext {
            var reasonContextContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .reasonContext)
            for (dictKey0, reasoncontextmap0) in reasonContext {
                try reasonContextContainer.encode(reasoncontextmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let resultCode = self.resultCode {
            try encodeContainer.encode(resultCode.rawValue, forKey: .resultCode)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resultCodeDecoded = try containerValues.decodeIfPresent(NetworkManagerClientTypes.RouteAnalysisCompletionResultCode.self, forKey: .resultCode)
        resultCode = resultCodeDecoded
        let reasonCodeDecoded = try containerValues.decodeIfPresent(NetworkManagerClientTypes.RouteAnalysisCompletionReasonCode.self, forKey: .reasonCode)
        reasonCode = reasonCodeDecoded
        let reasonContextContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .reasonContext)
        var reasonContextDecoded0: [Swift.String:Swift.String]? = nil
        if let reasonContextContainer = reasonContextContainer {
            reasonContextDecoded0 = [Swift.String:Swift.String]()
            for (key0, reasoncontextvalue0) in reasonContextContainer {
                if let reasoncontextvalue0 = reasoncontextvalue0 {
                    reasonContextDecoded0?[key0] = reasoncontextvalue0
                }
            }
        }
        reasonContext = reasonContextDecoded0
    }
}
