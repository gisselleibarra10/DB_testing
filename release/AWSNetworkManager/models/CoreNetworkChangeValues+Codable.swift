// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension NetworkManagerClientTypes.CoreNetworkChangeValues: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case asn = "Asn"
        case cidr = "Cidr"
        case destinationIdentifier = "DestinationIdentifier"
        case edgeLocations = "EdgeLocations"
        case insideCidrBlocks = "InsideCidrBlocks"
        case segmentName = "SegmentName"
        case sharedSegments = "SharedSegments"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let asn = self.asn {
            try encodeContainer.encode(asn, forKey: .asn)
        }
        if let cidr = self.cidr {
            try encodeContainer.encode(cidr, forKey: .cidr)
        }
        if let destinationIdentifier = self.destinationIdentifier {
            try encodeContainer.encode(destinationIdentifier, forKey: .destinationIdentifier)
        }
        if let edgeLocations = edgeLocations {
            var edgeLocationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .edgeLocations)
            for externalregioncodelist0 in edgeLocations {
                try edgeLocationsContainer.encode(externalregioncodelist0)
            }
        }
        if let insideCidrBlocks = insideCidrBlocks {
            var insideCidrBlocksContainer = encodeContainer.nestedUnkeyedContainer(forKey: .insideCidrBlocks)
            for constrainedstringlist0 in insideCidrBlocks {
                try insideCidrBlocksContainer.encode(constrainedstringlist0)
            }
        }
        if let segmentName = self.segmentName {
            try encodeContainer.encode(segmentName, forKey: .segmentName)
        }
        if let sharedSegments = sharedSegments {
            var sharedSegmentsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .sharedSegments)
            for constrainedstringlist0 in sharedSegments {
                try sharedSegmentsContainer.encode(constrainedstringlist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let segmentNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .segmentName)
        segmentName = segmentNameDecoded
        let edgeLocationsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .edgeLocations)
        var edgeLocationsDecoded0:[Swift.String]? = nil
        if let edgeLocationsContainer = edgeLocationsContainer {
            edgeLocationsDecoded0 = [Swift.String]()
            for string0 in edgeLocationsContainer {
                if let string0 = string0 {
                    edgeLocationsDecoded0?.append(string0)
                }
            }
        }
        edgeLocations = edgeLocationsDecoded0
        let asnDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .asn)
        asn = asnDecoded
        let cidrDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cidr)
        cidr = cidrDecoded
        let destinationIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .destinationIdentifier)
        destinationIdentifier = destinationIdentifierDecoded
        let insideCidrBlocksContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .insideCidrBlocks)
        var insideCidrBlocksDecoded0:[Swift.String]? = nil
        if let insideCidrBlocksContainer = insideCidrBlocksContainer {
            insideCidrBlocksDecoded0 = [Swift.String]()
            for string0 in insideCidrBlocksContainer {
                if let string0 = string0 {
                    insideCidrBlocksDecoded0?.append(string0)
                }
            }
        }
        insideCidrBlocks = insideCidrBlocksDecoded0
        let sharedSegmentsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .sharedSegments)
        var sharedSegmentsDecoded0:[Swift.String]? = nil
        if let sharedSegmentsContainer = sharedSegmentsContainer {
            sharedSegmentsDecoded0 = [Swift.String]()
            for string0 in sharedSegmentsContainer {
                if let string0 = string0 {
                    sharedSegmentsDecoded0?.append(string0)
                }
            }
        }
        sharedSegments = sharedSegmentsDecoded0
    }
}
