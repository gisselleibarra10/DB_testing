// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SsmClientTypes {
    /// Describes the parameters for a document.
    public struct AssociationDescription: Swift.Equatable {
        /// The details for the CloudWatch alarm you want to apply to an automation or command.
        public var alarmConfiguration: SsmClientTypes.AlarmConfiguration?
        /// By default, when you create a new associations, the system runs it immediately after it is created and then according to the schedule you specified. Specify this option if you don't want an association to run immediately after you create it. This parameter isn't supported for rate expressions.
        public var applyOnlyAtCronInterval: Swift.Bool
        /// The association ID.
        public var associationId: Swift.String?
        /// The association name.
        public var associationName: Swift.String?
        /// The association version.
        public var associationVersion: Swift.String?
        /// Choose the parameter that will define how your automation will branch out. This target is required for associations that use an Automation runbook and target resources by using rate controls. Automation is a capability of Amazon Web Services Systems Manager.
        public var automationTargetParameterName: Swift.String?
        /// The names or Amazon Resource Names (ARNs) of the Change Calendar type documents your associations are gated under. The associations only run when that change calendar is open. For more information, see [Amazon Web Services Systems Manager Change Calendar](https://docs.aws.amazon.com/systems-manager/latest/userguide/systems-manager-change-calendar).
        public var calendarNames: [Swift.String]?
        /// The severity level that is assigned to the association.
        public var complianceSeverity: SsmClientTypes.AssociationComplianceSeverity?
        /// The date when the association was made.
        public var date: ClientRuntime.Date?
        /// The document version.
        public var documentVersion: Swift.String?
        /// The managed node ID.
        public var instanceId: Swift.String?
        /// The date on which the association was last run.
        public var lastExecutionDate: ClientRuntime.Date?
        /// The last date on which the association was successfully run.
        public var lastSuccessfulExecutionDate: ClientRuntime.Date?
        /// The date when the association was last updated.
        public var lastUpdateAssociationDate: ClientRuntime.Date?
        /// The maximum number of targets allowed to run the association at the same time. You can specify a number, for example 10, or a percentage of the target set, for example 10%. The default value is 100%, which means all targets run the association at the same time. If a new managed node starts and attempts to run an association while Systems Manager is running MaxConcurrency associations, the association is allowed to run. During the next association interval, the new managed node will process its association within the limit specified for MaxConcurrency.
        public var maxConcurrency: Swift.String?
        /// The number of errors that are allowed before the system stops sending requests to run the association on additional targets. You can specify either an absolute number of errors, for example 10, or a percentage of the target set, for example 10%. If you specify 3, for example, the system stops sending requests when the fourth error is received. If you specify 0, then the system stops sending requests after the first error is returned. If you run an association on 50 managed nodes and set MaxError to 10%, then the system stops sending the request when the sixth error is received. Executions that are already running an association when MaxErrors is reached are allowed to complete, but some of these executions may fail as well. If you need to ensure that there won't be more than max-errors failed executions, set MaxConcurrency to 1 so that executions proceed one at a time.
        public var maxErrors: Swift.String?
        /// The name of the SSM document.
        public var name: Swift.String?
        /// An S3 bucket where you want to store the output details of the request.
        public var outputLocation: SsmClientTypes.InstanceAssociationOutputLocation?
        /// Information about the association.
        public var overview: SsmClientTypes.AssociationOverview?
        /// A description of the parameters for a document.
        public var parameters: [Swift.String:[Swift.String]]?
        /// A cron expression that specifies a schedule when the association runs.
        public var scheduleExpression: Swift.String?
        /// Number of days to wait after the scheduled day to run an association.
        public var scheduleOffset: Swift.Int?
        /// The association status.
        public var status: SsmClientTypes.AssociationStatus?
        /// The mode for generating association compliance. You can specify AUTO or MANUAL. In AUTO mode, the system uses the status of the association execution to determine the compliance status. If the association execution runs successfully, then the association is COMPLIANT. If the association execution doesn't run successfully, the association is NON-COMPLIANT. In MANUAL mode, you must specify the AssociationId as a parameter for the [PutComplianceItems] API operation. In this case, compliance data isn't managed by State Manager, a capability of Amazon Web Services Systems Manager. It is managed by your direct call to the [PutComplianceItems] API operation. By default, all associations use AUTO mode.
        public var syncCompliance: SsmClientTypes.AssociationSyncCompliance?
        /// The combination of Amazon Web Services Regions and Amazon Web Services accounts where you want to run the association.
        public var targetLocations: [SsmClientTypes.TargetLocation]?
        /// A key-value mapping of document parameters to target resources. Both Targets and TargetMaps can't be specified together.
        public var targetMaps: [[Swift.String:[Swift.String]]]?
        /// The managed nodes targeted by the request.
        public var targets: [SsmClientTypes.Target]?
        /// The CloudWatch alarm that was invoked during the association.
        public var triggeredAlarms: [SsmClientTypes.AlarmStateInformation]?

        public init (
            alarmConfiguration: SsmClientTypes.AlarmConfiguration? = nil,
            applyOnlyAtCronInterval: Swift.Bool = false,
            associationId: Swift.String? = nil,
            associationName: Swift.String? = nil,
            associationVersion: Swift.String? = nil,
            automationTargetParameterName: Swift.String? = nil,
            calendarNames: [Swift.String]? = nil,
            complianceSeverity: SsmClientTypes.AssociationComplianceSeverity? = nil,
            date: ClientRuntime.Date? = nil,
            documentVersion: Swift.String? = nil,
            instanceId: Swift.String? = nil,
            lastExecutionDate: ClientRuntime.Date? = nil,
            lastSuccessfulExecutionDate: ClientRuntime.Date? = nil,
            lastUpdateAssociationDate: ClientRuntime.Date? = nil,
            maxConcurrency: Swift.String? = nil,
            maxErrors: Swift.String? = nil,
            name: Swift.String? = nil,
            outputLocation: SsmClientTypes.InstanceAssociationOutputLocation? = nil,
            overview: SsmClientTypes.AssociationOverview? = nil,
            parameters: [Swift.String:[Swift.String]]? = nil,
            scheduleExpression: Swift.String? = nil,
            scheduleOffset: Swift.Int? = nil,
            status: SsmClientTypes.AssociationStatus? = nil,
            syncCompliance: SsmClientTypes.AssociationSyncCompliance? = nil,
            targetLocations: [SsmClientTypes.TargetLocation]? = nil,
            targetMaps: [[Swift.String:[Swift.String]]]? = nil,
            targets: [SsmClientTypes.Target]? = nil,
            triggeredAlarms: [SsmClientTypes.AlarmStateInformation]? = nil
        )
        {
            self.alarmConfiguration = alarmConfiguration
            self.applyOnlyAtCronInterval = applyOnlyAtCronInterval
            self.associationId = associationId
            self.associationName = associationName
            self.associationVersion = associationVersion
            self.automationTargetParameterName = automationTargetParameterName
            self.calendarNames = calendarNames
            self.complianceSeverity = complianceSeverity
            self.date = date
            self.documentVersion = documentVersion
            self.instanceId = instanceId
            self.lastExecutionDate = lastExecutionDate
            self.lastSuccessfulExecutionDate = lastSuccessfulExecutionDate
            self.lastUpdateAssociationDate = lastUpdateAssociationDate
            self.maxConcurrency = maxConcurrency
            self.maxErrors = maxErrors
            self.name = name
            self.outputLocation = outputLocation
            self.overview = overview
            self.parameters = parameters
            self.scheduleExpression = scheduleExpression
            self.scheduleOffset = scheduleOffset
            self.status = status
            self.syncCompliance = syncCompliance
            self.targetLocations = targetLocations
            self.targetMaps = targetMaps
            self.targets = targets
            self.triggeredAlarms = triggeredAlarms
        }
    }

}
