// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension StartChangeRequestExecutionInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case autoApprove = "AutoApprove"
        case changeDetails = "ChangeDetails"
        case changeRequestName = "ChangeRequestName"
        case clientToken = "ClientToken"
        case documentName = "DocumentName"
        case documentVersion = "DocumentVersion"
        case parameters = "Parameters"
        case runbooks = "Runbooks"
        case scheduledEndTime = "ScheduledEndTime"
        case scheduledTime = "ScheduledTime"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if autoApprove != false {
            try encodeContainer.encode(autoApprove, forKey: .autoApprove)
        }
        if let changeDetails = self.changeDetails {
            try encodeContainer.encode(changeDetails, forKey: .changeDetails)
        }
        if let changeRequestName = self.changeRequestName {
            try encodeContainer.encode(changeRequestName, forKey: .changeRequestName)
        }
        if let clientToken = self.clientToken {
            try encodeContainer.encode(clientToken, forKey: .clientToken)
        }
        if let documentName = self.documentName {
            try encodeContainer.encode(documentName, forKey: .documentName)
        }
        if let documentVersion = self.documentVersion {
            try encodeContainer.encode(documentVersion, forKey: .documentVersion)
        }
        if let parameters = parameters {
            var parametersContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .parameters)
            for (dictKey0, automationparametermap0) in parameters {
                try parametersContainer.encode(automationparametermap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let runbooks = runbooks {
            var runbooksContainer = encodeContainer.nestedUnkeyedContainer(forKey: .runbooks)
            for runbooks0 in runbooks {
                try runbooksContainer.encode(runbooks0)
            }
        }
        if let scheduledEndTime = self.scheduledEndTime {
            try encodeContainer.encode(scheduledEndTime.timeIntervalSince1970, forKey: .scheduledEndTime)
        }
        if let scheduledTime = self.scheduledTime {
            try encodeContainer.encode(scheduledTime.timeIntervalSince1970, forKey: .scheduledTime)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }
}
