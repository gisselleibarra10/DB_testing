// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SsmClientTypes {
    /// Information about the association version.
    public struct AssociationVersionInfo: Swift.Equatable {
        /// By default, when you create a new associations, the system runs it immediately after it is created and then according to the schedule you specified. Specify this option if you don't want an association to run immediately after you create it. This parameter isn't supported for rate expressions.
        public var applyOnlyAtCronInterval: Swift.Bool
        /// The ID created by the system when the association was created.
        public var associationId: Swift.String?
        /// The name specified for the association version when the association version was created.
        public var associationName: Swift.String?
        /// The association version.
        public var associationVersion: Swift.String?
        /// The names or Amazon Resource Names (ARNs) of the Change Calendar type documents your associations are gated under. The associations for this version only run when that Change Calendar is open. For more information, see [Amazon Web Services Systems Manager Change Calendar](https://docs.aws.amazon.com/systems-manager/latest/userguide/systems-manager-change-calendar).
        public var calendarNames: [Swift.String]?
        /// The severity level that is assigned to the association.
        public var complianceSeverity: SsmClientTypes.AssociationComplianceSeverity?
        /// The date the association version was created.
        public var createdDate: ClientRuntime.Date?
        /// The version of an Amazon Web Services Systems Manager document (SSM document) used when the association version was created.
        public var documentVersion: Swift.String?
        /// The maximum number of targets allowed to run the association at the same time. You can specify a number, for example 10, or a percentage of the target set, for example 10%. The default value is 100%, which means all targets run the association at the same time. If a new managed node starts and attempts to run an association while Systems Manager is running MaxConcurrency associations, the association is allowed to run. During the next association interval, the new managed node will process its association within the limit specified for MaxConcurrency.
        public var maxConcurrency: Swift.String?
        /// The number of errors that are allowed before the system stops sending requests to run the association on additional targets. You can specify either an absolute number of errors, for example 10, or a percentage of the target set, for example 10%. If you specify 3, for example, the system stops sending requests when the fourth error is received. If you specify 0, then the system stops sending requests after the first error is returned. If you run an association on 50 managed nodes and set MaxError to 10%, then the system stops sending the request when the sixth error is received. Executions that are already running an association when MaxErrors is reached are allowed to complete, but some of these executions may fail as well. If you need to ensure that there won't be more than max-errors failed executions, set MaxConcurrency to 1 so that executions proceed one at a time.
        public var maxErrors: Swift.String?
        /// The name specified when the association was created.
        public var name: Swift.String?
        /// The location in Amazon S3 specified for the association when the association version was created.
        public var outputLocation: SsmClientTypes.InstanceAssociationOutputLocation?
        /// Parameters specified when the association version was created.
        public var parameters: [Swift.String:[Swift.String]]?
        /// The cron or rate schedule specified for the association when the association version was created.
        public var scheduleExpression: Swift.String?
        /// Number of days to wait after the scheduled day to run an association.
        public var scheduleOffset: Swift.Int?
        /// The mode for generating association compliance. You can specify AUTO or MANUAL. In AUTO mode, the system uses the status of the association execution to determine the compliance status. If the association execution runs successfully, then the association is COMPLIANT. If the association execution doesn't run successfully, the association is NON-COMPLIANT. In MANUAL mode, you must specify the AssociationId as a parameter for the [PutComplianceItems] API operation. In this case, compliance data isn't managed by State Manager, a capability of Amazon Web Services Systems Manager. It is managed by your direct call to the [PutComplianceItems] API operation. By default, all associations use AUTO mode.
        public var syncCompliance: SsmClientTypes.AssociationSyncCompliance?
        /// The combination of Amazon Web Services Regions and Amazon Web Services accounts where you wanted to run the association when this association version was created.
        public var targetLocations: [SsmClientTypes.TargetLocation]?
        /// A key-value mapping of document parameters to target resources. Both Targets and TargetMaps can't be specified together.
        public var targetMaps: [[Swift.String:[Swift.String]]]?
        /// The targets specified for the association when the association version was created.
        public var targets: [SsmClientTypes.Target]?

        public init (
            applyOnlyAtCronInterval: Swift.Bool = false,
            associationId: Swift.String? = nil,
            associationName: Swift.String? = nil,
            associationVersion: Swift.String? = nil,
            calendarNames: [Swift.String]? = nil,
            complianceSeverity: SsmClientTypes.AssociationComplianceSeverity? = nil,
            createdDate: ClientRuntime.Date? = nil,
            documentVersion: Swift.String? = nil,
            maxConcurrency: Swift.String? = nil,
            maxErrors: Swift.String? = nil,
            name: Swift.String? = nil,
            outputLocation: SsmClientTypes.InstanceAssociationOutputLocation? = nil,
            parameters: [Swift.String:[Swift.String]]? = nil,
            scheduleExpression: Swift.String? = nil,
            scheduleOffset: Swift.Int? = nil,
            syncCompliance: SsmClientTypes.AssociationSyncCompliance? = nil,
            targetLocations: [SsmClientTypes.TargetLocation]? = nil,
            targetMaps: [[Swift.String:[Swift.String]]]? = nil,
            targets: [SsmClientTypes.Target]? = nil
        )
        {
            self.applyOnlyAtCronInterval = applyOnlyAtCronInterval
            self.associationId = associationId
            self.associationName = associationName
            self.associationVersion = associationVersion
            self.calendarNames = calendarNames
            self.complianceSeverity = complianceSeverity
            self.createdDate = createdDate
            self.documentVersion = documentVersion
            self.maxConcurrency = maxConcurrency
            self.maxErrors = maxErrors
            self.name = name
            self.outputLocation = outputLocation
            self.parameters = parameters
            self.scheduleExpression = scheduleExpression
            self.scheduleOffset = scheduleOffset
            self.syncCompliance = syncCompliance
            self.targetLocations = targetLocations
            self.targetMaps = targetMaps
            self.targets = targets
        }
    }

}
