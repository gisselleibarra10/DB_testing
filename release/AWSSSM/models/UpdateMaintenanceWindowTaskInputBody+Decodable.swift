// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct UpdateMaintenanceWindowTaskInputBody: Swift.Equatable {
    let windowId: Swift.String?
    let windowTaskId: Swift.String?
    let targets: [SsmClientTypes.Target]?
    let taskArn: Swift.String?
    let serviceRoleArn: Swift.String?
    let taskParameters: [Swift.String:SsmClientTypes.MaintenanceWindowTaskParameterValueExpression]?
    let taskInvocationParameters: SsmClientTypes.MaintenanceWindowTaskInvocationParameters?
    let priority: Swift.Int?
    let maxConcurrency: Swift.String?
    let maxErrors: Swift.String?
    let loggingInfo: SsmClientTypes.LoggingInfo?
    let name: Swift.String?
    let description: Swift.String?
    let replace: Swift.Bool?
    let cutoffBehavior: SsmClientTypes.MaintenanceWindowTaskCutoffBehavior?
    let alarmConfiguration: SsmClientTypes.AlarmConfiguration?
}

extension UpdateMaintenanceWindowTaskInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case alarmConfiguration = "AlarmConfiguration"
        case cutoffBehavior = "CutoffBehavior"
        case description = "Description"
        case loggingInfo = "LoggingInfo"
        case maxConcurrency = "MaxConcurrency"
        case maxErrors = "MaxErrors"
        case name = "Name"
        case priority = "Priority"
        case replace = "Replace"
        case serviceRoleArn = "ServiceRoleArn"
        case targets = "Targets"
        case taskArn = "TaskArn"
        case taskInvocationParameters = "TaskInvocationParameters"
        case taskParameters = "TaskParameters"
        case windowId = "WindowId"
        case windowTaskId = "WindowTaskId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let windowIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .windowId)
        windowId = windowIdDecoded
        let windowTaskIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .windowTaskId)
        windowTaskId = windowTaskIdDecoded
        let targetsContainer = try containerValues.decodeIfPresent([SsmClientTypes.Target?].self, forKey: .targets)
        var targetsDecoded0:[SsmClientTypes.Target]? = nil
        if let targetsContainer = targetsContainer {
            targetsDecoded0 = [SsmClientTypes.Target]()
            for structure0 in targetsContainer {
                if let structure0 = structure0 {
                    targetsDecoded0?.append(structure0)
                }
            }
        }
        targets = targetsDecoded0
        let taskArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .taskArn)
        taskArn = taskArnDecoded
        let serviceRoleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serviceRoleArn)
        serviceRoleArn = serviceRoleArnDecoded
        let taskParametersContainer = try containerValues.decodeIfPresent([Swift.String: SsmClientTypes.MaintenanceWindowTaskParameterValueExpression?].self, forKey: .taskParameters)
        var taskParametersDecoded0: [Swift.String:SsmClientTypes.MaintenanceWindowTaskParameterValueExpression]? = nil
        if let taskParametersContainer = taskParametersContainer {
            taskParametersDecoded0 = [Swift.String:SsmClientTypes.MaintenanceWindowTaskParameterValueExpression]()
            for (key0, maintenancewindowtaskparametervalueexpression0) in taskParametersContainer {
                if let maintenancewindowtaskparametervalueexpression0 = maintenancewindowtaskparametervalueexpression0 {
                    taskParametersDecoded0?[key0] = maintenancewindowtaskparametervalueexpression0
                }
            }
        }
        taskParameters = taskParametersDecoded0
        let taskInvocationParametersDecoded = try containerValues.decodeIfPresent(SsmClientTypes.MaintenanceWindowTaskInvocationParameters.self, forKey: .taskInvocationParameters)
        taskInvocationParameters = taskInvocationParametersDecoded
        let priorityDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .priority)
        priority = priorityDecoded
        let maxConcurrencyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .maxConcurrency)
        maxConcurrency = maxConcurrencyDecoded
        let maxErrorsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .maxErrors)
        maxErrors = maxErrorsDecoded
        let loggingInfoDecoded = try containerValues.decodeIfPresent(SsmClientTypes.LoggingInfo.self, forKey: .loggingInfo)
        loggingInfo = loggingInfoDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let replaceDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .replace)
        replace = replaceDecoded
        let cutoffBehaviorDecoded = try containerValues.decodeIfPresent(SsmClientTypes.MaintenanceWindowTaskCutoffBehavior.self, forKey: .cutoffBehavior)
        cutoffBehavior = cutoffBehaviorDecoded
        let alarmConfigurationDecoded = try containerValues.decodeIfPresent(SsmClientTypes.AlarmConfiguration.self, forKey: .alarmConfiguration)
        alarmConfiguration = alarmConfigurationDecoded
    }
}
