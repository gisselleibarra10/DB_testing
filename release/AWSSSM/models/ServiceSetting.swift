// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SsmClientTypes {
    /// The service setting data structure. ServiceSetting is an account-level setting for an Amazon Web Services service. This setting defines how a user interacts with or uses a service or a feature of a service. For example, if an Amazon Web Services service charges money to the account based on feature or service usage, then the Amazon Web Services service team might create a default setting of "false". This means the user can't use this feature unless they change the setting to "true" and intentionally opt in for a paid feature. Services map a SettingId object to a setting value. Amazon Web Services services teams define the default value for a SettingId. You can't create a new SettingId, but you can overwrite the default value if you have the ssm:UpdateServiceSetting permission for the setting. Use the [UpdateServiceSetting] API operation to change the default setting. Or, use the [ResetServiceSetting] to change the value back to the original value defined by the Amazon Web Services service team.
    public struct ServiceSetting: Swift.Equatable {
        /// The ARN of the service setting.
        public var aRN: Swift.String?
        /// The last time the service setting was modified.
        public var lastModifiedDate: ClientRuntime.Date?
        /// The ARN of the last modified user. This field is populated only if the setting value was overwritten.
        public var lastModifiedUser: Swift.String?
        /// The ID of the service setting.
        public var settingId: Swift.String?
        /// The value of the service setting.
        public var settingValue: Swift.String?
        /// The status of the service setting. The value can be Default, Customized or PendingUpdate.
        ///
        /// * Default: The current setting uses a default value provisioned by the Amazon Web Services service team.
        ///
        /// * Customized: The current setting use a custom value specified by the customer.
        ///
        /// * PendingUpdate: The current setting uses a default or custom value, but a setting change request is pending approval.
        public var status: Swift.String?

        public init (
            aRN: Swift.String? = nil,
            lastModifiedDate: ClientRuntime.Date? = nil,
            lastModifiedUser: Swift.String? = nil,
            settingId: Swift.String? = nil,
            settingValue: Swift.String? = nil,
            status: Swift.String? = nil
        )
        {
            self.aRN = aRN
            self.lastModifiedDate = lastModifiedDate
            self.lastModifiedUser = lastModifiedUser
            self.settingId = settingId
            self.settingValue = settingValue
            self.status = status
        }
    }

}
