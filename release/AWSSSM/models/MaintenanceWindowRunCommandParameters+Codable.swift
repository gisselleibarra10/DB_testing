// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SsmClientTypes.MaintenanceWindowRunCommandParameters: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cloudWatchOutputConfig = "CloudWatchOutputConfig"
        case comment = "Comment"
        case documentHash = "DocumentHash"
        case documentHashType = "DocumentHashType"
        case documentVersion = "DocumentVersion"
        case notificationConfig = "NotificationConfig"
        case outputS3BucketName = "OutputS3BucketName"
        case outputS3KeyPrefix = "OutputS3KeyPrefix"
        case parameters = "Parameters"
        case serviceRoleArn = "ServiceRoleArn"
        case timeoutSeconds = "TimeoutSeconds"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cloudWatchOutputConfig = self.cloudWatchOutputConfig {
            try encodeContainer.encode(cloudWatchOutputConfig, forKey: .cloudWatchOutputConfig)
        }
        if let comment = self.comment {
            try encodeContainer.encode(comment, forKey: .comment)
        }
        if let documentHash = self.documentHash {
            try encodeContainer.encode(documentHash, forKey: .documentHash)
        }
        if let documentHashType = self.documentHashType {
            try encodeContainer.encode(documentHashType.rawValue, forKey: .documentHashType)
        }
        if let documentVersion = self.documentVersion {
            try encodeContainer.encode(documentVersion, forKey: .documentVersion)
        }
        if let notificationConfig = self.notificationConfig {
            try encodeContainer.encode(notificationConfig, forKey: .notificationConfig)
        }
        if let outputS3BucketName = self.outputS3BucketName {
            try encodeContainer.encode(outputS3BucketName, forKey: .outputS3BucketName)
        }
        if let outputS3KeyPrefix = self.outputS3KeyPrefix {
            try encodeContainer.encode(outputS3KeyPrefix, forKey: .outputS3KeyPrefix)
        }
        if let parameters = parameters {
            var parametersContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .parameters)
            for (dictKey0, parameters0) in parameters {
                try parametersContainer.encode(parameters0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let serviceRoleArn = self.serviceRoleArn {
            try encodeContainer.encode(serviceRoleArn, forKey: .serviceRoleArn)
        }
        if let timeoutSeconds = self.timeoutSeconds {
            try encodeContainer.encode(timeoutSeconds, forKey: .timeoutSeconds)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let commentDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .comment)
        comment = commentDecoded
        let cloudWatchOutputConfigDecoded = try containerValues.decodeIfPresent(SsmClientTypes.CloudWatchOutputConfig.self, forKey: .cloudWatchOutputConfig)
        cloudWatchOutputConfig = cloudWatchOutputConfigDecoded
        let documentHashDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .documentHash)
        documentHash = documentHashDecoded
        let documentHashTypeDecoded = try containerValues.decodeIfPresent(SsmClientTypes.DocumentHashType.self, forKey: .documentHashType)
        documentHashType = documentHashTypeDecoded
        let documentVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .documentVersion)
        documentVersion = documentVersionDecoded
        let notificationConfigDecoded = try containerValues.decodeIfPresent(SsmClientTypes.NotificationConfig.self, forKey: .notificationConfig)
        notificationConfig = notificationConfigDecoded
        let outputS3BucketNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .outputS3BucketName)
        outputS3BucketName = outputS3BucketNameDecoded
        let outputS3KeyPrefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .outputS3KeyPrefix)
        outputS3KeyPrefix = outputS3KeyPrefixDecoded
        let parametersContainer = try containerValues.decodeIfPresent([Swift.String: [Swift.String?]?].self, forKey: .parameters)
        var parametersDecoded0: [Swift.String:[Swift.String]]? = nil
        if let parametersContainer = parametersContainer {
            parametersDecoded0 = [Swift.String:[Swift.String]]()
            for (key0, parametervaluelist0) in parametersContainer {
                var parametervaluelist0Decoded0: [Swift.String]? = nil
                if let parametervaluelist0 = parametervaluelist0 {
                    parametervaluelist0Decoded0 = [Swift.String]()
                    for string1 in parametervaluelist0 {
                        if let string1 = string1 {
                            parametervaluelist0Decoded0?.append(string1)
                        }
                    }
                }
                parametersDecoded0?[key0] = parametervaluelist0Decoded0
            }
        }
        parameters = parametersDecoded0
        let serviceRoleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serviceRoleArn)
        serviceRoleArn = serviceRoleArnDecoded
        let timeoutSecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .timeoutSeconds)
        timeoutSeconds = timeoutSecondsDecoded
    }
}
