// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SsmClientTypes.Patch: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case advisoryIds = "AdvisoryIds"
        case arch = "Arch"
        case bugzillaIds = "BugzillaIds"
        case cVEIds = "CVEIds"
        case classification = "Classification"
        case contentUrl = "ContentUrl"
        case description = "Description"
        case epoch = "Epoch"
        case id = "Id"
        case kbNumber = "KbNumber"
        case language = "Language"
        case msrcNumber = "MsrcNumber"
        case msrcSeverity = "MsrcSeverity"
        case name = "Name"
        case product = "Product"
        case productFamily = "ProductFamily"
        case release = "Release"
        case releaseDate = "ReleaseDate"
        case repository = "Repository"
        case severity = "Severity"
        case title = "Title"
        case vendor = "Vendor"
        case version = "Version"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let advisoryIds = advisoryIds {
            var advisoryIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .advisoryIds)
            for patchadvisoryidlist0 in advisoryIds {
                try advisoryIdsContainer.encode(patchadvisoryidlist0)
            }
        }
        if let arch = self.arch {
            try encodeContainer.encode(arch, forKey: .arch)
        }
        if let bugzillaIds = bugzillaIds {
            var bugzillaIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .bugzillaIds)
            for patchbugzillaidlist0 in bugzillaIds {
                try bugzillaIdsContainer.encode(patchbugzillaidlist0)
            }
        }
        if let cVEIds = cVEIds {
            var cVEIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .cVEIds)
            for patchcveidlist0 in cVEIds {
                try cVEIdsContainer.encode(patchcveidlist0)
            }
        }
        if let classification = self.classification {
            try encodeContainer.encode(classification, forKey: .classification)
        }
        if let contentUrl = self.contentUrl {
            try encodeContainer.encode(contentUrl, forKey: .contentUrl)
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if epoch != 0 {
            try encodeContainer.encode(epoch, forKey: .epoch)
        }
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let kbNumber = self.kbNumber {
            try encodeContainer.encode(kbNumber, forKey: .kbNumber)
        }
        if let language = self.language {
            try encodeContainer.encode(language, forKey: .language)
        }
        if let msrcNumber = self.msrcNumber {
            try encodeContainer.encode(msrcNumber, forKey: .msrcNumber)
        }
        if let msrcSeverity = self.msrcSeverity {
            try encodeContainer.encode(msrcSeverity, forKey: .msrcSeverity)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let product = self.product {
            try encodeContainer.encode(product, forKey: .product)
        }
        if let productFamily = self.productFamily {
            try encodeContainer.encode(productFamily, forKey: .productFamily)
        }
        if let release = self.release {
            try encodeContainer.encode(release, forKey: .release)
        }
        if let releaseDate = self.releaseDate {
            try encodeContainer.encode(releaseDate.timeIntervalSince1970, forKey: .releaseDate)
        }
        if let repository = self.repository {
            try encodeContainer.encode(repository, forKey: .repository)
        }
        if let severity = self.severity {
            try encodeContainer.encode(severity, forKey: .severity)
        }
        if let title = self.title {
            try encodeContainer.encode(title, forKey: .title)
        }
        if let vendor = self.vendor {
            try encodeContainer.encode(vendor, forKey: .vendor)
        }
        if let version = self.version {
            try encodeContainer.encode(version, forKey: .version)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let releaseDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .releaseDate)
        releaseDate = releaseDateDecoded
        let titleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .title)
        title = titleDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let contentUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .contentUrl)
        contentUrl = contentUrlDecoded
        let vendorDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vendor)
        vendor = vendorDecoded
        let productFamilyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .productFamily)
        productFamily = productFamilyDecoded
        let productDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .product)
        product = productDecoded
        let classificationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .classification)
        classification = classificationDecoded
        let msrcSeverityDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .msrcSeverity)
        msrcSeverity = msrcSeverityDecoded
        let kbNumberDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kbNumber)
        kbNumber = kbNumberDecoded
        let msrcNumberDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .msrcNumber)
        msrcNumber = msrcNumberDecoded
        let languageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .language)
        language = languageDecoded
        let advisoryIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .advisoryIds)
        var advisoryIdsDecoded0:[Swift.String]? = nil
        if let advisoryIdsContainer = advisoryIdsContainer {
            advisoryIdsDecoded0 = [Swift.String]()
            for string0 in advisoryIdsContainer {
                if let string0 = string0 {
                    advisoryIdsDecoded0?.append(string0)
                }
            }
        }
        advisoryIds = advisoryIdsDecoded0
        let bugzillaIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .bugzillaIds)
        var bugzillaIdsDecoded0:[Swift.String]? = nil
        if let bugzillaIdsContainer = bugzillaIdsContainer {
            bugzillaIdsDecoded0 = [Swift.String]()
            for string0 in bugzillaIdsContainer {
                if let string0 = string0 {
                    bugzillaIdsDecoded0?.append(string0)
                }
            }
        }
        bugzillaIds = bugzillaIdsDecoded0
        let cVEIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .cVEIds)
        var cVEIdsDecoded0:[Swift.String]? = nil
        if let cVEIdsContainer = cVEIdsContainer {
            cVEIdsDecoded0 = [Swift.String]()
            for string0 in cVEIdsContainer {
                if let string0 = string0 {
                    cVEIdsDecoded0?.append(string0)
                }
            }
        }
        cVEIds = cVEIdsDecoded0
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let epochDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .epoch) ?? 0
        epoch = epochDecoded
        let versionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .version)
        version = versionDecoded
        let releaseDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .release)
        release = releaseDecoded
        let archDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arch)
        arch = archDecoded
        let severityDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .severity)
        severity = severityDecoded
        let repositoryDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .repository)
        repository = repositoryDecoded
    }
}
