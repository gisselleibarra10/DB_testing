// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SsmClientTypes.ResourceDataSyncItem: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case lastStatus = "LastStatus"
        case lastSuccessfulSyncTime = "LastSuccessfulSyncTime"
        case lastSyncStatusMessage = "LastSyncStatusMessage"
        case lastSyncTime = "LastSyncTime"
        case s3Destination = "S3Destination"
        case syncCreatedTime = "SyncCreatedTime"
        case syncLastModifiedTime = "SyncLastModifiedTime"
        case syncName = "SyncName"
        case syncSource = "SyncSource"
        case syncType = "SyncType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let lastStatus = self.lastStatus {
            try encodeContainer.encode(lastStatus.rawValue, forKey: .lastStatus)
        }
        if let lastSuccessfulSyncTime = self.lastSuccessfulSyncTime {
            try encodeContainer.encode(lastSuccessfulSyncTime.timeIntervalSince1970, forKey: .lastSuccessfulSyncTime)
        }
        if let lastSyncStatusMessage = self.lastSyncStatusMessage {
            try encodeContainer.encode(lastSyncStatusMessage, forKey: .lastSyncStatusMessage)
        }
        if let lastSyncTime = self.lastSyncTime {
            try encodeContainer.encode(lastSyncTime.timeIntervalSince1970, forKey: .lastSyncTime)
        }
        if let s3Destination = self.s3Destination {
            try encodeContainer.encode(s3Destination, forKey: .s3Destination)
        }
        if let syncCreatedTime = self.syncCreatedTime {
            try encodeContainer.encode(syncCreatedTime.timeIntervalSince1970, forKey: .syncCreatedTime)
        }
        if let syncLastModifiedTime = self.syncLastModifiedTime {
            try encodeContainer.encode(syncLastModifiedTime.timeIntervalSince1970, forKey: .syncLastModifiedTime)
        }
        if let syncName = self.syncName {
            try encodeContainer.encode(syncName, forKey: .syncName)
        }
        if let syncSource = self.syncSource {
            try encodeContainer.encode(syncSource, forKey: .syncSource)
        }
        if let syncType = self.syncType {
            try encodeContainer.encode(syncType, forKey: .syncType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let syncNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .syncName)
        syncName = syncNameDecoded
        let syncTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .syncType)
        syncType = syncTypeDecoded
        let syncSourceDecoded = try containerValues.decodeIfPresent(SsmClientTypes.ResourceDataSyncSourceWithState.self, forKey: .syncSource)
        syncSource = syncSourceDecoded
        let s3DestinationDecoded = try containerValues.decodeIfPresent(SsmClientTypes.ResourceDataSyncS3Destination.self, forKey: .s3Destination)
        s3Destination = s3DestinationDecoded
        let lastSyncTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastSyncTime)
        lastSyncTime = lastSyncTimeDecoded
        let lastSuccessfulSyncTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastSuccessfulSyncTime)
        lastSuccessfulSyncTime = lastSuccessfulSyncTimeDecoded
        let syncLastModifiedTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .syncLastModifiedTime)
        syncLastModifiedTime = syncLastModifiedTimeDecoded
        let lastStatusDecoded = try containerValues.decodeIfPresent(SsmClientTypes.LastResourceDataSyncStatus.self, forKey: .lastStatus)
        lastStatus = lastStatusDecoded
        let syncCreatedTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .syncCreatedTime)
        syncCreatedTime = syncCreatedTimeDecoded
        let lastSyncStatusMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastSyncStatusMessage)
        lastSyncStatusMessage = lastSyncStatusMessageDecoded
    }
}
