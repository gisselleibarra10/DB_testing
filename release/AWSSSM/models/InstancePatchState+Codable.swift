// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SsmClientTypes.InstancePatchState: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case baselineId = "BaselineId"
        case criticalNonCompliantCount = "CriticalNonCompliantCount"
        case failedCount = "FailedCount"
        case installOverrideList = "InstallOverrideList"
        case installedCount = "InstalledCount"
        case installedOtherCount = "InstalledOtherCount"
        case installedPendingRebootCount = "InstalledPendingRebootCount"
        case installedRejectedCount = "InstalledRejectedCount"
        case instanceId = "InstanceId"
        case lastNoRebootInstallOperationTime = "LastNoRebootInstallOperationTime"
        case missingCount = "MissingCount"
        case notApplicableCount = "NotApplicableCount"
        case operation = "Operation"
        case operationEndTime = "OperationEndTime"
        case operationStartTime = "OperationStartTime"
        case otherNonCompliantCount = "OtherNonCompliantCount"
        case ownerInformation = "OwnerInformation"
        case patchGroup = "PatchGroup"
        case rebootOption = "RebootOption"
        case securityNonCompliantCount = "SecurityNonCompliantCount"
        case snapshotId = "SnapshotId"
        case unreportedNotApplicableCount = "UnreportedNotApplicableCount"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let baselineId = self.baselineId {
            try encodeContainer.encode(baselineId, forKey: .baselineId)
        }
        if let criticalNonCompliantCount = self.criticalNonCompliantCount {
            try encodeContainer.encode(criticalNonCompliantCount, forKey: .criticalNonCompliantCount)
        }
        if failedCount != 0 {
            try encodeContainer.encode(failedCount, forKey: .failedCount)
        }
        if let installOverrideList = self.installOverrideList {
            try encodeContainer.encode(installOverrideList, forKey: .installOverrideList)
        }
        if installedCount != 0 {
            try encodeContainer.encode(installedCount, forKey: .installedCount)
        }
        if installedOtherCount != 0 {
            try encodeContainer.encode(installedOtherCount, forKey: .installedOtherCount)
        }
        if let installedPendingRebootCount = self.installedPendingRebootCount {
            try encodeContainer.encode(installedPendingRebootCount, forKey: .installedPendingRebootCount)
        }
        if let installedRejectedCount = self.installedRejectedCount {
            try encodeContainer.encode(installedRejectedCount, forKey: .installedRejectedCount)
        }
        if let instanceId = self.instanceId {
            try encodeContainer.encode(instanceId, forKey: .instanceId)
        }
        if let lastNoRebootInstallOperationTime = self.lastNoRebootInstallOperationTime {
            try encodeContainer.encode(lastNoRebootInstallOperationTime.timeIntervalSince1970, forKey: .lastNoRebootInstallOperationTime)
        }
        if missingCount != 0 {
            try encodeContainer.encode(missingCount, forKey: .missingCount)
        }
        if notApplicableCount != 0 {
            try encodeContainer.encode(notApplicableCount, forKey: .notApplicableCount)
        }
        if let operation = self.operation {
            try encodeContainer.encode(operation.rawValue, forKey: .operation)
        }
        if let operationEndTime = self.operationEndTime {
            try encodeContainer.encode(operationEndTime.timeIntervalSince1970, forKey: .operationEndTime)
        }
        if let operationStartTime = self.operationStartTime {
            try encodeContainer.encode(operationStartTime.timeIntervalSince1970, forKey: .operationStartTime)
        }
        if let otherNonCompliantCount = self.otherNonCompliantCount {
            try encodeContainer.encode(otherNonCompliantCount, forKey: .otherNonCompliantCount)
        }
        if let ownerInformation = self.ownerInformation {
            try encodeContainer.encode(ownerInformation, forKey: .ownerInformation)
        }
        if let patchGroup = self.patchGroup {
            try encodeContainer.encode(patchGroup, forKey: .patchGroup)
        }
        if let rebootOption = self.rebootOption {
            try encodeContainer.encode(rebootOption.rawValue, forKey: .rebootOption)
        }
        if let securityNonCompliantCount = self.securityNonCompliantCount {
            try encodeContainer.encode(securityNonCompliantCount, forKey: .securityNonCompliantCount)
        }
        if let snapshotId = self.snapshotId {
            try encodeContainer.encode(snapshotId, forKey: .snapshotId)
        }
        if let unreportedNotApplicableCount = self.unreportedNotApplicableCount {
            try encodeContainer.encode(unreportedNotApplicableCount, forKey: .unreportedNotApplicableCount)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instanceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceId)
        instanceId = instanceIdDecoded
        let patchGroupDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .patchGroup)
        patchGroup = patchGroupDecoded
        let baselineIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .baselineId)
        baselineId = baselineIdDecoded
        let snapshotIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .snapshotId)
        snapshotId = snapshotIdDecoded
        let installOverrideListDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .installOverrideList)
        installOverrideList = installOverrideListDecoded
        let ownerInformationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ownerInformation)
        ownerInformation = ownerInformationDecoded
        let installedCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .installedCount) ?? 0
        installedCount = installedCountDecoded
        let installedOtherCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .installedOtherCount) ?? 0
        installedOtherCount = installedOtherCountDecoded
        let installedPendingRebootCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .installedPendingRebootCount)
        installedPendingRebootCount = installedPendingRebootCountDecoded
        let installedRejectedCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .installedRejectedCount)
        installedRejectedCount = installedRejectedCountDecoded
        let missingCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .missingCount) ?? 0
        missingCount = missingCountDecoded
        let failedCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .failedCount) ?? 0
        failedCount = failedCountDecoded
        let unreportedNotApplicableCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .unreportedNotApplicableCount)
        unreportedNotApplicableCount = unreportedNotApplicableCountDecoded
        let notApplicableCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .notApplicableCount) ?? 0
        notApplicableCount = notApplicableCountDecoded
        let operationStartTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .operationStartTime)
        operationStartTime = operationStartTimeDecoded
        let operationEndTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .operationEndTime)
        operationEndTime = operationEndTimeDecoded
        let operationDecoded = try containerValues.decodeIfPresent(SsmClientTypes.PatchOperationType.self, forKey: .operation)
        operation = operationDecoded
        let lastNoRebootInstallOperationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastNoRebootInstallOperationTime)
        lastNoRebootInstallOperationTime = lastNoRebootInstallOperationTimeDecoded
        let rebootOptionDecoded = try containerValues.decodeIfPresent(SsmClientTypes.RebootOption.self, forKey: .rebootOption)
        rebootOption = rebootOptionDecoded
        let criticalNonCompliantCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .criticalNonCompliantCount)
        criticalNonCompliantCount = criticalNonCompliantCountDecoded
        let securityNonCompliantCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .securityNonCompliantCount)
        securityNonCompliantCount = securityNonCompliantCountDecoded
        let otherNonCompliantCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .otherNonCompliantCount)
        otherNonCompliantCount = otherNonCompliantCountDecoded
    }
}
