// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension SsmClientTypes {
    /// Defines the basic information about a patch baseline override.
    public struct BaselineOverride: Swift.Equatable {
        /// A set of rules defining the approval rules for a patch baseline.
        public var approvalRules: SsmClientTypes.PatchRuleGroup?
        /// A list of explicitly approved patches for the baseline. For information about accepted formats for lists of approved patches and rejected patches, see [About package name formats for approved and rejected patch lists](https://docs.aws.amazon.com/systems-manager/latest/userguide/patch-manager-approved-rejected-package-name-formats.html) in the Amazon Web Services Systems Manager User Guide.
        public var approvedPatches: [Swift.String]?
        /// Defines the compliance level for approved patches. When an approved patch is reported as missing, this value describes the severity of the compliance violation.
        public var approvedPatchesComplianceLevel: SsmClientTypes.PatchComplianceLevel?
        /// Indicates whether the list of approved patches includes non-security updates that should be applied to the managed nodes. The default value is false. Applies to Linux managed nodes only.
        public var approvedPatchesEnableNonSecurity: Swift.Bool
        /// A set of patch filters, typically used for approval rules.
        public var globalFilters: SsmClientTypes.PatchFilterGroup?
        /// The operating system rule used by the patch baseline override.
        public var operatingSystem: SsmClientTypes.OperatingSystem?
        /// A list of explicitly rejected patches for the baseline. For information about accepted formats for lists of approved patches and rejected patches, see [About package name formats for approved and rejected patch lists](https://docs.aws.amazon.com/systems-manager/latest/userguide/patch-manager-approved-rejected-package-name-formats.html) in the Amazon Web Services Systems Manager User Guide.
        public var rejectedPatches: [Swift.String]?
        /// The action for Patch Manager to take on patches included in the RejectedPackages list. A patch can be allowed only if it is a dependency of another package, or blocked entirely along with packages that include it as a dependency.
        public var rejectedPatchesAction: SsmClientTypes.PatchAction?
        /// Information about the patches to use to update the managed nodes, including target operating systems and source repositories. Applies to Linux managed nodes only.
        public var sources: [SsmClientTypes.PatchSource]?

        public init (
            approvalRules: SsmClientTypes.PatchRuleGroup? = nil,
            approvedPatches: [Swift.String]? = nil,
            approvedPatchesComplianceLevel: SsmClientTypes.PatchComplianceLevel? = nil,
            approvedPatchesEnableNonSecurity: Swift.Bool = false,
            globalFilters: SsmClientTypes.PatchFilterGroup? = nil,
            operatingSystem: SsmClientTypes.OperatingSystem? = nil,
            rejectedPatches: [Swift.String]? = nil,
            rejectedPatchesAction: SsmClientTypes.PatchAction? = nil,
            sources: [SsmClientTypes.PatchSource]? = nil
        )
        {
            self.approvalRules = approvalRules
            self.approvedPatches = approvedPatches
            self.approvedPatchesComplianceLevel = approvedPatchesComplianceLevel
            self.approvedPatchesEnableNonSecurity = approvedPatchesEnableNonSecurity
            self.globalFilters = globalFilters
            self.operatingSystem = operatingSystem
            self.rejectedPatches = rejectedPatches
            self.rejectedPatchesAction = rejectedPatchesAction
            self.sources = sources
        }
    }

}
