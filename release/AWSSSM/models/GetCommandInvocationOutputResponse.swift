// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct GetCommandInvocationOutputResponse: Swift.Equatable {
    /// Amazon CloudWatch Logs information where Systems Manager sent the command output.
    public var cloudWatchOutputConfig: SsmClientTypes.CloudWatchOutputConfig?
    /// The parent command ID of the invocation plugin.
    public var commandId: Swift.String?
    /// The comment text for the command.
    public var comment: Swift.String?
    /// The name of the document that was run. For example, AWS-RunShellScript.
    public var documentName: Swift.String?
    /// The Systems Manager document (SSM document) version used in the request.
    public var documentVersion: Swift.String?
    /// Duration since ExecutionStartDateTime.
    public var executionElapsedTime: Swift.String?
    /// The date and time the plugin finished running. Date and time are written in ISO 8601 format. For example, June 7, 2017 is represented as 2017-06-7. The following sample Amazon Web Services CLI command uses the InvokedAfter filter. aws ssm list-commands --filters key=InvokedAfter,value=2017-06-07T00:00:00Z If the plugin hasn't started to run, the string is empty.
    public var executionEndDateTime: Swift.String?
    /// The date and time the plugin started running. Date and time are written in ISO 8601 format. For example, June 7, 2017 is represented as 2017-06-7. The following sample Amazon Web Services CLI command uses the InvokedBefore filter. aws ssm list-commands --filters key=InvokedBefore,value=2017-06-07T00:00:00Z If the plugin hasn't started to run, the string is empty.
    public var executionStartDateTime: Swift.String?
    /// The ID of the managed node targeted by the command. A managed node can be an Amazon Elastic Compute Cloud (Amazon EC2) instance, edge device, or on-premises server or VM in your hybrid environment that is configured for Amazon Web Services Systems Manager.
    public var instanceId: Swift.String?
    /// The name of the plugin, or step name, for which details are reported. For example, aws:RunShellScript is a plugin.
    public var pluginName: Swift.String?
    /// The error level response code for the plugin script. If the response code is -1, then the command hasn't started running on the managed node, or it wasn't received by the node.
    public var responseCode: Swift.Int
    /// The first 8,000 characters written by the plugin to stderr. If the command hasn't finished running, then this string is empty.
    public var standardErrorContent: Swift.String?
    /// The URL for the complete text written by the plugin to stderr. If the command hasn't finished running, then this string is empty.
    public var standardErrorUrl: Swift.String?
    /// The first 24,000 characters written by the plugin to stdout. If the command hasn't finished running, if ExecutionStatus is neither Succeeded nor Failed, then this string is empty.
    public var standardOutputContent: Swift.String?
    /// The URL for the complete text written by the plugin to stdout in Amazon Simple Storage Service (Amazon S3). If an S3 bucket wasn't specified, then this string is empty.
    public var standardOutputUrl: Swift.String?
    /// The status of this invocation plugin. This status can be different than StatusDetails.
    public var status: SsmClientTypes.CommandInvocationStatus?
    /// A detailed status of the command execution for an invocation. StatusDetails includes more information than Status because it includes states resulting from error and concurrency control parameters. StatusDetails can show different results than Status. For more information about these statuses, see [Understanding command statuses](https://docs.aws.amazon.com/systems-manager/latest/userguide/monitor-commands.html) in the Amazon Web Services Systems Manager User Guide. StatusDetails can be one of the following values:
    ///
    /// * Pending: The command hasn't been sent to the managed node.
    ///
    /// * In Progress: The command has been sent to the managed node but hasn't reached a terminal state.
    ///
    /// * Delayed: The system attempted to send the command to the target, but the target wasn't available. The managed node might not be available because of network issues, because the node was stopped, or for similar reasons. The system will try to send the command again.
    ///
    /// * Success: The command or plugin ran successfully. This is a terminal state.
    ///
    /// * Delivery Timed Out: The command wasn't delivered to the managed node before the delivery timeout expired. Delivery timeouts don't count against the parent command's MaxErrors limit, but they do contribute to whether the parent command status is Success or Incomplete. This is a terminal state.
    ///
    /// * Execution Timed Out: The command started to run on the managed node, but the execution wasn't complete before the timeout expired. Execution timeouts count against the MaxErrors limit of the parent command. This is a terminal state.
    ///
    /// * Failed: The command wasn't run successfully on the managed node. For a plugin, this indicates that the result code wasn't zero. For a command invocation, this indicates that the result code for one or more plugins wasn't zero. Invocation failures count against the MaxErrors limit of the parent command. This is a terminal state.
    ///
    /// * Cancelled: The command was terminated before it was completed. This is a terminal state.
    ///
    /// * Undeliverable: The command can't be delivered to the managed node. The node might not exist or might not be responding. Undeliverable invocations don't count against the parent command's MaxErrors limit and don't contribute to whether the parent command status is Success or Incomplete. This is a terminal state.
    ///
    /// * Terminated: The parent command exceeded its MaxErrors limit and subsequent command invocations were canceled by the system. This is a terminal state.
    public var statusDetails: Swift.String?

    public init (
        cloudWatchOutputConfig: SsmClientTypes.CloudWatchOutputConfig? = nil,
        commandId: Swift.String? = nil,
        comment: Swift.String? = nil,
        documentName: Swift.String? = nil,
        documentVersion: Swift.String? = nil,
        executionElapsedTime: Swift.String? = nil,
        executionEndDateTime: Swift.String? = nil,
        executionStartDateTime: Swift.String? = nil,
        instanceId: Swift.String? = nil,
        pluginName: Swift.String? = nil,
        responseCode: Swift.Int = 0,
        standardErrorContent: Swift.String? = nil,
        standardErrorUrl: Swift.String? = nil,
        standardOutputContent: Swift.String? = nil,
        standardOutputUrl: Swift.String? = nil,
        status: SsmClientTypes.CommandInvocationStatus? = nil,
        statusDetails: Swift.String? = nil
    )
    {
        self.cloudWatchOutputConfig = cloudWatchOutputConfig
        self.commandId = commandId
        self.comment = comment
        self.documentName = documentName
        self.documentVersion = documentVersion
        self.executionElapsedTime = executionElapsedTime
        self.executionEndDateTime = executionEndDateTime
        self.executionStartDateTime = executionStartDateTime
        self.instanceId = instanceId
        self.pluginName = pluginName
        self.responseCode = responseCode
        self.standardErrorContent = standardErrorContent
        self.standardErrorUrl = standardErrorUrl
        self.standardOutputContent = standardOutputContent
        self.standardOutputUrl = standardOutputUrl
        self.status = status
        self.statusDetails = statusDetails
    }
}
