// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct SendCommandInputBody: Swift.Equatable {
    let instanceIds: [Swift.String]?
    let targets: [SsmClientTypes.Target]?
    let documentName: Swift.String?
    let documentVersion: Swift.String?
    let documentHash: Swift.String?
    let documentHashType: SsmClientTypes.DocumentHashType?
    let timeoutSeconds: Swift.Int?
    let comment: Swift.String?
    let parameters: [Swift.String:[Swift.String]]?
    let outputS3Region: Swift.String?
    let outputS3BucketName: Swift.String?
    let outputS3KeyPrefix: Swift.String?
    let maxConcurrency: Swift.String?
    let maxErrors: Swift.String?
    let serviceRoleArn: Swift.String?
    let notificationConfig: SsmClientTypes.NotificationConfig?
    let cloudWatchOutputConfig: SsmClientTypes.CloudWatchOutputConfig?
    let alarmConfiguration: SsmClientTypes.AlarmConfiguration?
}

extension SendCommandInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case alarmConfiguration = "AlarmConfiguration"
        case cloudWatchOutputConfig = "CloudWatchOutputConfig"
        case comment = "Comment"
        case documentHash = "DocumentHash"
        case documentHashType = "DocumentHashType"
        case documentName = "DocumentName"
        case documentVersion = "DocumentVersion"
        case instanceIds = "InstanceIds"
        case maxConcurrency = "MaxConcurrency"
        case maxErrors = "MaxErrors"
        case notificationConfig = "NotificationConfig"
        case outputS3BucketName = "OutputS3BucketName"
        case outputS3KeyPrefix = "OutputS3KeyPrefix"
        case outputS3Region = "OutputS3Region"
        case parameters = "Parameters"
        case serviceRoleArn = "ServiceRoleArn"
        case targets = "Targets"
        case timeoutSeconds = "TimeoutSeconds"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instanceIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .instanceIds)
        var instanceIdsDecoded0:[Swift.String]? = nil
        if let instanceIdsContainer = instanceIdsContainer {
            instanceIdsDecoded0 = [Swift.String]()
            for string0 in instanceIdsContainer {
                if let string0 = string0 {
                    instanceIdsDecoded0?.append(string0)
                }
            }
        }
        instanceIds = instanceIdsDecoded0
        let targetsContainer = try containerValues.decodeIfPresent([SsmClientTypes.Target?].self, forKey: .targets)
        var targetsDecoded0:[SsmClientTypes.Target]? = nil
        if let targetsContainer = targetsContainer {
            targetsDecoded0 = [SsmClientTypes.Target]()
            for structure0 in targetsContainer {
                if let structure0 = structure0 {
                    targetsDecoded0?.append(structure0)
                }
            }
        }
        targets = targetsDecoded0
        let documentNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .documentName)
        documentName = documentNameDecoded
        let documentVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .documentVersion)
        documentVersion = documentVersionDecoded
        let documentHashDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .documentHash)
        documentHash = documentHashDecoded
        let documentHashTypeDecoded = try containerValues.decodeIfPresent(SsmClientTypes.DocumentHashType.self, forKey: .documentHashType)
        documentHashType = documentHashTypeDecoded
        let timeoutSecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .timeoutSeconds)
        timeoutSeconds = timeoutSecondsDecoded
        let commentDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .comment)
        comment = commentDecoded
        let parametersContainer = try containerValues.decodeIfPresent([Swift.String: [Swift.String?]?].self, forKey: .parameters)
        var parametersDecoded0: [Swift.String:[Swift.String]]? = nil
        if let parametersContainer = parametersContainer {
            parametersDecoded0 = [Swift.String:[Swift.String]]()
            for (key0, parametervaluelist0) in parametersContainer {
                var parametervaluelist0Decoded0: [Swift.String]? = nil
                if let parametervaluelist0 = parametervaluelist0 {
                    parametervaluelist0Decoded0 = [Swift.String]()
                    for string1 in parametervaluelist0 {
                        if let string1 = string1 {
                            parametervaluelist0Decoded0?.append(string1)
                        }
                    }
                }
                parametersDecoded0?[key0] = parametervaluelist0Decoded0
            }
        }
        parameters = parametersDecoded0
        let outputS3RegionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .outputS3Region)
        outputS3Region = outputS3RegionDecoded
        let outputS3BucketNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .outputS3BucketName)
        outputS3BucketName = outputS3BucketNameDecoded
        let outputS3KeyPrefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .outputS3KeyPrefix)
        outputS3KeyPrefix = outputS3KeyPrefixDecoded
        let maxConcurrencyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .maxConcurrency)
        maxConcurrency = maxConcurrencyDecoded
        let maxErrorsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .maxErrors)
        maxErrors = maxErrorsDecoded
        let serviceRoleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serviceRoleArn)
        serviceRoleArn = serviceRoleArnDecoded
        let notificationConfigDecoded = try containerValues.decodeIfPresent(SsmClientTypes.NotificationConfig.self, forKey: .notificationConfig)
        notificationConfig = notificationConfigDecoded
        let cloudWatchOutputConfigDecoded = try containerValues.decodeIfPresent(SsmClientTypes.CloudWatchOutputConfig.self, forKey: .cloudWatchOutputConfig)
        cloudWatchOutputConfig = cloudWatchOutputConfigDecoded
        let alarmConfigurationDecoded = try containerValues.decodeIfPresent(SsmClientTypes.AlarmConfiguration.self, forKey: .alarmConfiguration)
        alarmConfiguration = alarmConfigurationDecoded
    }
}
