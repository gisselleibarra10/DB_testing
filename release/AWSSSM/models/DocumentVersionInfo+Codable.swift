// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SsmClientTypes.DocumentVersionInfo: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createdDate = "CreatedDate"
        case displayName = "DisplayName"
        case documentFormat = "DocumentFormat"
        case documentVersion = "DocumentVersion"
        case isDefaultVersion = "IsDefaultVersion"
        case name = "Name"
        case reviewStatus = "ReviewStatus"
        case status = "Status"
        case statusInformation = "StatusInformation"
        case versionName = "VersionName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let createdDate = self.createdDate {
            try encodeContainer.encode(createdDate.timeIntervalSince1970, forKey: .createdDate)
        }
        if let displayName = self.displayName {
            try encodeContainer.encode(displayName, forKey: .displayName)
        }
        if let documentFormat = self.documentFormat {
            try encodeContainer.encode(documentFormat.rawValue, forKey: .documentFormat)
        }
        if let documentVersion = self.documentVersion {
            try encodeContainer.encode(documentVersion, forKey: .documentVersion)
        }
        if isDefaultVersion != false {
            try encodeContainer.encode(isDefaultVersion, forKey: .isDefaultVersion)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let reviewStatus = self.reviewStatus {
            try encodeContainer.encode(reviewStatus.rawValue, forKey: .reviewStatus)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let statusInformation = self.statusInformation {
            try encodeContainer.encode(statusInformation, forKey: .statusInformation)
        }
        if let versionName = self.versionName {
            try encodeContainer.encode(versionName, forKey: .versionName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let displayNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .displayName)
        displayName = displayNameDecoded
        let documentVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .documentVersion)
        documentVersion = documentVersionDecoded
        let versionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .versionName)
        versionName = versionNameDecoded
        let createdDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdDate)
        createdDate = createdDateDecoded
        let isDefaultVersionDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .isDefaultVersion) ?? false
        isDefaultVersion = isDefaultVersionDecoded
        let documentFormatDecoded = try containerValues.decodeIfPresent(SsmClientTypes.DocumentFormat.self, forKey: .documentFormat)
        documentFormat = documentFormatDecoded
        let statusDecoded = try containerValues.decodeIfPresent(SsmClientTypes.DocumentStatus.self, forKey: .status)
        status = statusDecoded
        let statusInformationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .statusInformation)
        statusInformation = statusInformationDecoded
        let reviewStatusDecoded = try containerValues.decodeIfPresent(SsmClientTypes.ReviewStatus.self, forKey: .reviewStatus)
        reviewStatus = reviewStatusDecoded
    }
}
