// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct GetPatchBaselineOutputResponse: Swift.Equatable {
    /// A set of rules used to include patches in the baseline.
    public var approvalRules: SsmClientTypes.PatchRuleGroup?
    /// A list of explicitly approved patches for the baseline.
    public var approvedPatches: [Swift.String]?
    /// Returns the specified compliance severity level for approved patches in the patch baseline.
    public var approvedPatchesComplianceLevel: SsmClientTypes.PatchComplianceLevel?
    /// Indicates whether the list of approved patches includes non-security updates that should be applied to the managed nodes. The default value is false. Applies to Linux managed nodes only.
    public var approvedPatchesEnableNonSecurity: Swift.Bool?
    /// The ID of the retrieved patch baseline.
    public var baselineId: Swift.String?
    /// The date the patch baseline was created.
    public var createdDate: ClientRuntime.Date?
    /// A description of the patch baseline.
    public var description: Swift.String?
    /// A set of global filters used to exclude patches from the baseline.
    public var globalFilters: SsmClientTypes.PatchFilterGroup?
    /// The date the patch baseline was last modified.
    public var modifiedDate: ClientRuntime.Date?
    /// The name of the patch baseline.
    public var name: Swift.String?
    /// Returns the operating system specified for the patch baseline.
    public var operatingSystem: SsmClientTypes.OperatingSystem?
    /// Patch groups included in the patch baseline.
    public var patchGroups: [Swift.String]?
    /// A list of explicitly rejected patches for the baseline.
    public var rejectedPatches: [Swift.String]?
    /// The action specified to take on patches included in the RejectedPatches list. A patch can be allowed only if it is a dependency of another package, or blocked entirely along with packages that include it as a dependency.
    public var rejectedPatchesAction: SsmClientTypes.PatchAction?
    /// Information about the patches to use to update the managed nodes, including target operating systems and source repositories. Applies to Linux managed nodes only.
    public var sources: [SsmClientTypes.PatchSource]?

    public init (
        approvalRules: SsmClientTypes.PatchRuleGroup? = nil,
        approvedPatches: [Swift.String]? = nil,
        approvedPatchesComplianceLevel: SsmClientTypes.PatchComplianceLevel? = nil,
        approvedPatchesEnableNonSecurity: Swift.Bool? = nil,
        baselineId: Swift.String? = nil,
        createdDate: ClientRuntime.Date? = nil,
        description: Swift.String? = nil,
        globalFilters: SsmClientTypes.PatchFilterGroup? = nil,
        modifiedDate: ClientRuntime.Date? = nil,
        name: Swift.String? = nil,
        operatingSystem: SsmClientTypes.OperatingSystem? = nil,
        patchGroups: [Swift.String]? = nil,
        rejectedPatches: [Swift.String]? = nil,
        rejectedPatchesAction: SsmClientTypes.PatchAction? = nil,
        sources: [SsmClientTypes.PatchSource]? = nil
    )
    {
        self.approvalRules = approvalRules
        self.approvedPatches = approvedPatches
        self.approvedPatchesComplianceLevel = approvedPatchesComplianceLevel
        self.approvedPatchesEnableNonSecurity = approvedPatchesEnableNonSecurity
        self.baselineId = baselineId
        self.createdDate = createdDate
        self.description = description
        self.globalFilters = globalFilters
        self.modifiedDate = modifiedDate
        self.name = name
        self.operatingSystem = operatingSystem
        self.patchGroups = patchGroups
        self.rejectedPatches = rejectedPatches
        self.rejectedPatchesAction = rejectedPatchesAction
        self.sources = sources
    }
}
