// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SsmClientTypes.MaintenanceWindowExecutionTaskIdentity: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case alarmConfiguration = "AlarmConfiguration"
        case endTime = "EndTime"
        case startTime = "StartTime"
        case status = "Status"
        case statusDetails = "StatusDetails"
        case taskArn = "TaskArn"
        case taskExecutionId = "TaskExecutionId"
        case taskType = "TaskType"
        case triggeredAlarms = "TriggeredAlarms"
        case windowExecutionId = "WindowExecutionId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let alarmConfiguration = self.alarmConfiguration {
            try encodeContainer.encode(alarmConfiguration, forKey: .alarmConfiguration)
        }
        if let endTime = self.endTime {
            try encodeContainer.encode(endTime.timeIntervalSince1970, forKey: .endTime)
        }
        if let startTime = self.startTime {
            try encodeContainer.encode(startTime.timeIntervalSince1970, forKey: .startTime)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let statusDetails = self.statusDetails {
            try encodeContainer.encode(statusDetails, forKey: .statusDetails)
        }
        if let taskArn = self.taskArn {
            try encodeContainer.encode(taskArn, forKey: .taskArn)
        }
        if let taskExecutionId = self.taskExecutionId {
            try encodeContainer.encode(taskExecutionId, forKey: .taskExecutionId)
        }
        if let taskType = self.taskType {
            try encodeContainer.encode(taskType.rawValue, forKey: .taskType)
        }
        if let triggeredAlarms = triggeredAlarms {
            var triggeredAlarmsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .triggeredAlarms)
            for alarmstateinformationlist0 in triggeredAlarms {
                try triggeredAlarmsContainer.encode(alarmstateinformationlist0)
            }
        }
        if let windowExecutionId = self.windowExecutionId {
            try encodeContainer.encode(windowExecutionId, forKey: .windowExecutionId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let windowExecutionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .windowExecutionId)
        windowExecutionId = windowExecutionIdDecoded
        let taskExecutionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .taskExecutionId)
        taskExecutionId = taskExecutionIdDecoded
        let statusDecoded = try containerValues.decodeIfPresent(SsmClientTypes.MaintenanceWindowExecutionStatus.self, forKey: .status)
        status = statusDecoded
        let statusDetailsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .statusDetails)
        statusDetails = statusDetailsDecoded
        let startTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .startTime)
        startTime = startTimeDecoded
        let endTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .endTime)
        endTime = endTimeDecoded
        let taskArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .taskArn)
        taskArn = taskArnDecoded
        let taskTypeDecoded = try containerValues.decodeIfPresent(SsmClientTypes.MaintenanceWindowTaskType.self, forKey: .taskType)
        taskType = taskTypeDecoded
        let alarmConfigurationDecoded = try containerValues.decodeIfPresent(SsmClientTypes.AlarmConfiguration.self, forKey: .alarmConfiguration)
        alarmConfiguration = alarmConfigurationDecoded
        let triggeredAlarmsContainer = try containerValues.decodeIfPresent([SsmClientTypes.AlarmStateInformation?].self, forKey: .triggeredAlarms)
        var triggeredAlarmsDecoded0:[SsmClientTypes.AlarmStateInformation]? = nil
        if let triggeredAlarmsContainer = triggeredAlarmsContainer {
            triggeredAlarmsDecoded0 = [SsmClientTypes.AlarmStateInformation]()
            for structure0 in triggeredAlarmsContainer {
                if let structure0 = structure0 {
                    triggeredAlarmsDecoded0?.append(structure0)
                }
            }
        }
        triggeredAlarms = triggeredAlarmsDecoded0
    }
}
