// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension SsmClientTypes {
    public enum DocumentType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case applicationconfiguration
        case applicationconfigurationschema
        case automation
        case changecalendar
        case changetemplate
        case cloudformation
        case command
        case conformancepacktemplate
        case deploymentstrategy
        case package
        case policy
        case problemanalysis
        case problemanalysistemplate
        case session
        case sdkUnknown(Swift.String)

        public static var allCases: [DocumentType] {
            return [
                .applicationconfiguration,
                .applicationconfigurationschema,
                .automation,
                .changecalendar,
                .changetemplate,
                .cloudformation,
                .command,
                .conformancepacktemplate,
                .deploymentstrategy,
                .package,
                .policy,
                .problemanalysis,
                .problemanalysistemplate,
                .session,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .applicationconfiguration: return "ApplicationConfiguration"
            case .applicationconfigurationschema: return "ApplicationConfigurationSchema"
            case .automation: return "Automation"
            case .changecalendar: return "ChangeCalendar"
            case .changetemplate: return "Automation.ChangeTemplate"
            case .cloudformation: return "CloudFormation"
            case .command: return "Command"
            case .conformancepacktemplate: return "ConformancePackTemplate"
            case .deploymentstrategy: return "DeploymentStrategy"
            case .package: return "Package"
            case .policy: return "Policy"
            case .problemanalysis: return "ProblemAnalysis"
            case .problemanalysistemplate: return "ProblemAnalysisTemplate"
            case .session: return "Session"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DocumentType(rawValue: rawValue) ?? DocumentType.sdkUnknown(rawValue)
        }
    }
}
