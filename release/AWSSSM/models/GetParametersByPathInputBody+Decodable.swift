// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetParametersByPathInputBody: Swift.Equatable {
    let path: Swift.String?
    let recursive: Swift.Bool?
    let parameterFilters: [SsmClientTypes.ParameterStringFilter]?
    let withDecryption: Swift.Bool?
    let maxResults: Swift.Int?
    let nextToken: Swift.String?
}

extension GetParametersByPathInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case parameterFilters = "ParameterFilters"
        case path = "Path"
        case recursive = "Recursive"
        case withDecryption = "WithDecryption"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .path)
        path = pathDecoded
        let recursiveDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .recursive)
        recursive = recursiveDecoded
        let parameterFiltersContainer = try containerValues.decodeIfPresent([SsmClientTypes.ParameterStringFilter?].self, forKey: .parameterFilters)
        var parameterFiltersDecoded0:[SsmClientTypes.ParameterStringFilter]? = nil
        if let parameterFiltersContainer = parameterFiltersContainer {
            parameterFiltersDecoded0 = [SsmClientTypes.ParameterStringFilter]()
            for structure0 in parameterFiltersContainer {
                if let structure0 = structure0 {
                    parameterFiltersDecoded0?.append(structure0)
                }
            }
        }
        parameterFilters = parameterFiltersDecoded0
        let withDecryptionDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .withDecryption)
        withDecryption = withDecryptionDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
