// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SsmClientTypes.Command: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case alarmConfiguration = "AlarmConfiguration"
        case cloudWatchOutputConfig = "CloudWatchOutputConfig"
        case commandId = "CommandId"
        case comment = "Comment"
        case completedCount = "CompletedCount"
        case deliveryTimedOutCount = "DeliveryTimedOutCount"
        case documentName = "DocumentName"
        case documentVersion = "DocumentVersion"
        case errorCount = "ErrorCount"
        case expiresAfter = "ExpiresAfter"
        case instanceIds = "InstanceIds"
        case maxConcurrency = "MaxConcurrency"
        case maxErrors = "MaxErrors"
        case notificationConfig = "NotificationConfig"
        case outputS3BucketName = "OutputS3BucketName"
        case outputS3KeyPrefix = "OutputS3KeyPrefix"
        case outputS3Region = "OutputS3Region"
        case parameters = "Parameters"
        case requestedDateTime = "RequestedDateTime"
        case serviceRole = "ServiceRole"
        case status = "Status"
        case statusDetails = "StatusDetails"
        case targetCount = "TargetCount"
        case targets = "Targets"
        case timeoutSeconds = "TimeoutSeconds"
        case triggeredAlarms = "TriggeredAlarms"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let alarmConfiguration = self.alarmConfiguration {
            try encodeContainer.encode(alarmConfiguration, forKey: .alarmConfiguration)
        }
        if let cloudWatchOutputConfig = self.cloudWatchOutputConfig {
            try encodeContainer.encode(cloudWatchOutputConfig, forKey: .cloudWatchOutputConfig)
        }
        if let commandId = self.commandId {
            try encodeContainer.encode(commandId, forKey: .commandId)
        }
        if let comment = self.comment {
            try encodeContainer.encode(comment, forKey: .comment)
        }
        if completedCount != 0 {
            try encodeContainer.encode(completedCount, forKey: .completedCount)
        }
        if deliveryTimedOutCount != 0 {
            try encodeContainer.encode(deliveryTimedOutCount, forKey: .deliveryTimedOutCount)
        }
        if let documentName = self.documentName {
            try encodeContainer.encode(documentName, forKey: .documentName)
        }
        if let documentVersion = self.documentVersion {
            try encodeContainer.encode(documentVersion, forKey: .documentVersion)
        }
        if errorCount != 0 {
            try encodeContainer.encode(errorCount, forKey: .errorCount)
        }
        if let expiresAfter = self.expiresAfter {
            try encodeContainer.encode(expiresAfter.timeIntervalSince1970, forKey: .expiresAfter)
        }
        if let instanceIds = instanceIds {
            var instanceIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .instanceIds)
            for instanceidlist0 in instanceIds {
                try instanceIdsContainer.encode(instanceidlist0)
            }
        }
        if let maxConcurrency = self.maxConcurrency {
            try encodeContainer.encode(maxConcurrency, forKey: .maxConcurrency)
        }
        if let maxErrors = self.maxErrors {
            try encodeContainer.encode(maxErrors, forKey: .maxErrors)
        }
        if let notificationConfig = self.notificationConfig {
            try encodeContainer.encode(notificationConfig, forKey: .notificationConfig)
        }
        if let outputS3BucketName = self.outputS3BucketName {
            try encodeContainer.encode(outputS3BucketName, forKey: .outputS3BucketName)
        }
        if let outputS3KeyPrefix = self.outputS3KeyPrefix {
            try encodeContainer.encode(outputS3KeyPrefix, forKey: .outputS3KeyPrefix)
        }
        if let outputS3Region = self.outputS3Region {
            try encodeContainer.encode(outputS3Region, forKey: .outputS3Region)
        }
        if let parameters = parameters {
            var parametersContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .parameters)
            for (dictKey0, parameters0) in parameters {
                try parametersContainer.encode(parameters0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let requestedDateTime = self.requestedDateTime {
            try encodeContainer.encode(requestedDateTime.timeIntervalSince1970, forKey: .requestedDateTime)
        }
        if let serviceRole = self.serviceRole {
            try encodeContainer.encode(serviceRole, forKey: .serviceRole)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let statusDetails = self.statusDetails {
            try encodeContainer.encode(statusDetails, forKey: .statusDetails)
        }
        if targetCount != 0 {
            try encodeContainer.encode(targetCount, forKey: .targetCount)
        }
        if let targets = targets {
            var targetsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .targets)
            for targets0 in targets {
                try targetsContainer.encode(targets0)
            }
        }
        if timeoutSeconds != 0 {
            try encodeContainer.encode(timeoutSeconds, forKey: .timeoutSeconds)
        }
        if let triggeredAlarms = triggeredAlarms {
            var triggeredAlarmsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .triggeredAlarms)
            for alarmstateinformationlist0 in triggeredAlarms {
                try triggeredAlarmsContainer.encode(alarmstateinformationlist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let commandIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .commandId)
        commandId = commandIdDecoded
        let documentNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .documentName)
        documentName = documentNameDecoded
        let documentVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .documentVersion)
        documentVersion = documentVersionDecoded
        let commentDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .comment)
        comment = commentDecoded
        let expiresAfterDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .expiresAfter)
        expiresAfter = expiresAfterDecoded
        let parametersContainer = try containerValues.decodeIfPresent([Swift.String: [Swift.String?]?].self, forKey: .parameters)
        var parametersDecoded0: [Swift.String:[Swift.String]]? = nil
        if let parametersContainer = parametersContainer {
            parametersDecoded0 = [Swift.String:[Swift.String]]()
            for (key0, parametervaluelist0) in parametersContainer {
                var parametervaluelist0Decoded0: [Swift.String]? = nil
                if let parametervaluelist0 = parametervaluelist0 {
                    parametervaluelist0Decoded0 = [Swift.String]()
                    for string1 in parametervaluelist0 {
                        if let string1 = string1 {
                            parametervaluelist0Decoded0?.append(string1)
                        }
                    }
                }
                parametersDecoded0?[key0] = parametervaluelist0Decoded0
            }
        }
        parameters = parametersDecoded0
        let instanceIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .instanceIds)
        var instanceIdsDecoded0:[Swift.String]? = nil
        if let instanceIdsContainer = instanceIdsContainer {
            instanceIdsDecoded0 = [Swift.String]()
            for string0 in instanceIdsContainer {
                if let string0 = string0 {
                    instanceIdsDecoded0?.append(string0)
                }
            }
        }
        instanceIds = instanceIdsDecoded0
        let targetsContainer = try containerValues.decodeIfPresent([SsmClientTypes.Target?].self, forKey: .targets)
        var targetsDecoded0:[SsmClientTypes.Target]? = nil
        if let targetsContainer = targetsContainer {
            targetsDecoded0 = [SsmClientTypes.Target]()
            for structure0 in targetsContainer {
                if let structure0 = structure0 {
                    targetsDecoded0?.append(structure0)
                }
            }
        }
        targets = targetsDecoded0
        let requestedDateTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .requestedDateTime)
        requestedDateTime = requestedDateTimeDecoded
        let statusDecoded = try containerValues.decodeIfPresent(SsmClientTypes.CommandStatus.self, forKey: .status)
        status = statusDecoded
        let statusDetailsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .statusDetails)
        statusDetails = statusDetailsDecoded
        let outputS3RegionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .outputS3Region)
        outputS3Region = outputS3RegionDecoded
        let outputS3BucketNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .outputS3BucketName)
        outputS3BucketName = outputS3BucketNameDecoded
        let outputS3KeyPrefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .outputS3KeyPrefix)
        outputS3KeyPrefix = outputS3KeyPrefixDecoded
        let maxConcurrencyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .maxConcurrency)
        maxConcurrency = maxConcurrencyDecoded
        let maxErrorsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .maxErrors)
        maxErrors = maxErrorsDecoded
        let targetCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .targetCount) ?? 0
        targetCount = targetCountDecoded
        let completedCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .completedCount) ?? 0
        completedCount = completedCountDecoded
        let errorCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .errorCount) ?? 0
        errorCount = errorCountDecoded
        let deliveryTimedOutCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .deliveryTimedOutCount) ?? 0
        deliveryTimedOutCount = deliveryTimedOutCountDecoded
        let serviceRoleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serviceRole)
        serviceRole = serviceRoleDecoded
        let notificationConfigDecoded = try containerValues.decodeIfPresent(SsmClientTypes.NotificationConfig.self, forKey: .notificationConfig)
        notificationConfig = notificationConfigDecoded
        let cloudWatchOutputConfigDecoded = try containerValues.decodeIfPresent(SsmClientTypes.CloudWatchOutputConfig.self, forKey: .cloudWatchOutputConfig)
        cloudWatchOutputConfig = cloudWatchOutputConfigDecoded
        let timeoutSecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .timeoutSeconds) ?? 0
        timeoutSeconds = timeoutSecondsDecoded
        let alarmConfigurationDecoded = try containerValues.decodeIfPresent(SsmClientTypes.AlarmConfiguration.self, forKey: .alarmConfiguration)
        alarmConfiguration = alarmConfigurationDecoded
        let triggeredAlarmsContainer = try containerValues.decodeIfPresent([SsmClientTypes.AlarmStateInformation?].self, forKey: .triggeredAlarms)
        var triggeredAlarmsDecoded0:[SsmClientTypes.AlarmStateInformation]? = nil
        if let triggeredAlarmsContainer = triggeredAlarmsContainer {
            triggeredAlarmsDecoded0 = [SsmClientTypes.AlarmStateInformation]()
            for structure0 in triggeredAlarmsContainer {
                if let structure0 = structure0 {
                    triggeredAlarmsDecoded0?.append(structure0)
                }
            }
        }
        triggeredAlarms = triggeredAlarmsDecoded0
    }
}
