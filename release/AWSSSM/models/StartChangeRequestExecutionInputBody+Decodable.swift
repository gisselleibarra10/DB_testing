// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct StartChangeRequestExecutionInputBody: Swift.Equatable {
    let scheduledTime: ClientRuntime.Date?
    let documentName: Swift.String?
    let documentVersion: Swift.String?
    let parameters: [Swift.String:[Swift.String]]?
    let changeRequestName: Swift.String?
    let clientToken: Swift.String?
    let autoApprove: Swift.Bool
    let runbooks: [SsmClientTypes.Runbook]?
    let tags: [SsmClientTypes.Tag]?
    let scheduledEndTime: ClientRuntime.Date?
    let changeDetails: Swift.String?
}

extension StartChangeRequestExecutionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case autoApprove = "AutoApprove"
        case changeDetails = "ChangeDetails"
        case changeRequestName = "ChangeRequestName"
        case clientToken = "ClientToken"
        case documentName = "DocumentName"
        case documentVersion = "DocumentVersion"
        case parameters = "Parameters"
        case runbooks = "Runbooks"
        case scheduledEndTime = "ScheduledEndTime"
        case scheduledTime = "ScheduledTime"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let scheduledTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .scheduledTime)
        scheduledTime = scheduledTimeDecoded
        let documentNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .documentName)
        documentName = documentNameDecoded
        let documentVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .documentVersion)
        documentVersion = documentVersionDecoded
        let parametersContainer = try containerValues.decodeIfPresent([Swift.String: [Swift.String?]?].self, forKey: .parameters)
        var parametersDecoded0: [Swift.String:[Swift.String]]? = nil
        if let parametersContainer = parametersContainer {
            parametersDecoded0 = [Swift.String:[Swift.String]]()
            for (key0, automationparametervaluelist0) in parametersContainer {
                var automationparametervaluelist0Decoded0: [Swift.String]? = nil
                if let automationparametervaluelist0 = automationparametervaluelist0 {
                    automationparametervaluelist0Decoded0 = [Swift.String]()
                    for string1 in automationparametervaluelist0 {
                        if let string1 = string1 {
                            automationparametervaluelist0Decoded0?.append(string1)
                        }
                    }
                }
                parametersDecoded0?[key0] = automationparametervaluelist0Decoded0
            }
        }
        parameters = parametersDecoded0
        let changeRequestNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .changeRequestName)
        changeRequestName = changeRequestNameDecoded
        let clientTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientToken)
        clientToken = clientTokenDecoded
        let autoApproveDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .autoApprove) ?? false
        autoApprove = autoApproveDecoded
        let runbooksContainer = try containerValues.decodeIfPresent([SsmClientTypes.Runbook?].self, forKey: .runbooks)
        var runbooksDecoded0:[SsmClientTypes.Runbook]? = nil
        if let runbooksContainer = runbooksContainer {
            runbooksDecoded0 = [SsmClientTypes.Runbook]()
            for structure0 in runbooksContainer {
                if let structure0 = structure0 {
                    runbooksDecoded0?.append(structure0)
                }
            }
        }
        runbooks = runbooksDecoded0
        let tagsContainer = try containerValues.decodeIfPresent([SsmClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[SsmClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [SsmClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let scheduledEndTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .scheduledEndTime)
        scheduledEndTime = scheduledEndTimeDecoded
        let changeDetailsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .changeDetails)
        changeDetails = changeDetailsDecoded
    }
}
