// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SsmClientTypes.InventoryItem: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case captureTime = "CaptureTime"
        case content = "Content"
        case contentHash = "ContentHash"
        case context = "Context"
        case schemaVersion = "SchemaVersion"
        case typeName = "TypeName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let captureTime = self.captureTime {
            try encodeContainer.encode(captureTime, forKey: .captureTime)
        }
        if let content = content {
            var contentContainer = encodeContainer.nestedUnkeyedContainer(forKey: .content)
            for inventoryitementrylist0 in content {
                var inventoryitementrylist0Container = contentContainer.nestedContainer(keyedBy: ClientRuntime.Key.self)
                for (dictKey1, inventoryitementry1) in inventoryitementrylist0 {
                    try inventoryitementrylist0Container.encode(inventoryitementry1, forKey: ClientRuntime.Key(stringValue: dictKey1))
                }
            }
        }
        if let contentHash = self.contentHash {
            try encodeContainer.encode(contentHash, forKey: .contentHash)
        }
        if let context = context {
            var contextContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .context)
            for (dictKey0, inventoryitemcontentcontext0) in context {
                try contextContainer.encode(inventoryitemcontentcontext0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let schemaVersion = self.schemaVersion {
            try encodeContainer.encode(schemaVersion, forKey: .schemaVersion)
        }
        if let typeName = self.typeName {
            try encodeContainer.encode(typeName, forKey: .typeName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let typeNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .typeName)
        typeName = typeNameDecoded
        let schemaVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .schemaVersion)
        schemaVersion = schemaVersionDecoded
        let captureTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .captureTime)
        captureTime = captureTimeDecoded
        let contentHashDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .contentHash)
        contentHash = contentHashDecoded
        let contentContainer = try containerValues.decodeIfPresent([[Swift.String: Swift.String?]?].self, forKey: .content)
        var contentDecoded0:[[Swift.String:Swift.String]]? = nil
        if let contentContainer = contentContainer {
            contentDecoded0 = [[Swift.String:Swift.String]]()
            for map0 in contentContainer {
                var contentContainerDecoded0: [Swift.String: Swift.String]? = nil
                if let map0 = map0 {
                    contentContainerDecoded0 = [Swift.String: Swift.String]()
                    for (key1, attributevalue1) in map0 {
                        if let attributevalue1 = attributevalue1 {
                            contentContainerDecoded0?[key1] = attributevalue1
                        }
                    }
                }
                if let contentContainerDecoded0 = contentContainerDecoded0 {
                    contentDecoded0?.append(contentContainerDecoded0)
                }
            }
        }
        content = contentDecoded0
        let contextContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .context)
        var contextDecoded0: [Swift.String:Swift.String]? = nil
        if let contextContainer = contextContainer {
            contextDecoded0 = [Swift.String:Swift.String]()
            for (key0, attributevalue0) in contextContainer {
                if let attributevalue0 = attributevalue0 {
                    contextDecoded0?[key0] = attributevalue0
                }
            }
        }
        context = contextDecoded0
    }
}
