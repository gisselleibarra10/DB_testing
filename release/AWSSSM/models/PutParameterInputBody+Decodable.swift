// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct PutParameterInputBody: Swift.Equatable {
    let name: Swift.String?
    let description: Swift.String?
    let value: Swift.String?
    let type: SsmClientTypes.ParameterType?
    let keyId: Swift.String?
    let overwrite: Swift.Bool?
    let allowedPattern: Swift.String?
    let tags: [SsmClientTypes.Tag]?
    let tier: SsmClientTypes.ParameterTier?
    let policies: Swift.String?
    let dataType: Swift.String?
}

extension PutParameterInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case allowedPattern = "AllowedPattern"
        case dataType = "DataType"
        case description = "Description"
        case keyId = "KeyId"
        case name = "Name"
        case overwrite = "Overwrite"
        case policies = "Policies"
        case tags = "Tags"
        case tier = "Tier"
        case type = "Type"
        case value = "Value"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let valueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .value)
        value = valueDecoded
        let typeDecoded = try containerValues.decodeIfPresent(SsmClientTypes.ParameterType.self, forKey: .type)
        type = typeDecoded
        let keyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyId)
        keyId = keyIdDecoded
        let overwriteDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .overwrite)
        overwrite = overwriteDecoded
        let allowedPatternDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .allowedPattern)
        allowedPattern = allowedPatternDecoded
        let tagsContainer = try containerValues.decodeIfPresent([SsmClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[SsmClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [SsmClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let tierDecoded = try containerValues.decodeIfPresent(SsmClientTypes.ParameterTier.self, forKey: .tier)
        tier = tierDecoded
        let policiesDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policies)
        policies = policiesDecoded
        let dataTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataType)
        dataType = dataTypeDecoded
    }
}
