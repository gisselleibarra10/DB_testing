// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SsmClientTypes.MaintenanceWindowIdentity: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cutoff = "Cutoff"
        case description = "Description"
        case duration = "Duration"
        case enabled = "Enabled"
        case endDate = "EndDate"
        case name = "Name"
        case nextExecutionTime = "NextExecutionTime"
        case schedule = "Schedule"
        case scheduleOffset = "ScheduleOffset"
        case scheduleTimezone = "ScheduleTimezone"
        case startDate = "StartDate"
        case windowId = "WindowId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if cutoff != 0 {
            try encodeContainer.encode(cutoff, forKey: .cutoff)
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if duration != 0 {
            try encodeContainer.encode(duration, forKey: .duration)
        }
        if enabled != false {
            try encodeContainer.encode(enabled, forKey: .enabled)
        }
        if let endDate = self.endDate {
            try encodeContainer.encode(endDate, forKey: .endDate)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let nextExecutionTime = self.nextExecutionTime {
            try encodeContainer.encode(nextExecutionTime, forKey: .nextExecutionTime)
        }
        if let schedule = self.schedule {
            try encodeContainer.encode(schedule, forKey: .schedule)
        }
        if let scheduleOffset = self.scheduleOffset {
            try encodeContainer.encode(scheduleOffset, forKey: .scheduleOffset)
        }
        if let scheduleTimezone = self.scheduleTimezone {
            try encodeContainer.encode(scheduleTimezone, forKey: .scheduleTimezone)
        }
        if let startDate = self.startDate {
            try encodeContainer.encode(startDate, forKey: .startDate)
        }
        if let windowId = self.windowId {
            try encodeContainer.encode(windowId, forKey: .windowId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let windowIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .windowId)
        windowId = windowIdDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let enabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enabled) ?? false
        enabled = enabledDecoded
        let durationDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .duration) ?? 0
        duration = durationDecoded
        let cutoffDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .cutoff) ?? 0
        cutoff = cutoffDecoded
        let scheduleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .schedule)
        schedule = scheduleDecoded
        let scheduleTimezoneDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .scheduleTimezone)
        scheduleTimezone = scheduleTimezoneDecoded
        let scheduleOffsetDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .scheduleOffset)
        scheduleOffset = scheduleOffsetDecoded
        let endDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .endDate)
        endDate = endDateDecoded
        let startDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .startDate)
        startDate = startDateDecoded
        let nextExecutionTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextExecutionTime)
        nextExecutionTime = nextExecutionTimeDecoded
    }
}
