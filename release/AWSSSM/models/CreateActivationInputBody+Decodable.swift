// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateActivationInputBody: Swift.Equatable {
    let description: Swift.String?
    let defaultInstanceName: Swift.String?
    let iamRole: Swift.String?
    let registrationLimit: Swift.Int?
    let expirationDate: ClientRuntime.Date?
    let tags: [SsmClientTypes.Tag]?
    let registrationMetadata: [SsmClientTypes.RegistrationMetadataItem]?
}

extension CreateActivationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case defaultInstanceName = "DefaultInstanceName"
        case description = "Description"
        case expirationDate = "ExpirationDate"
        case iamRole = "IamRole"
        case registrationLimit = "RegistrationLimit"
        case registrationMetadata = "RegistrationMetadata"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let defaultInstanceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .defaultInstanceName)
        defaultInstanceName = defaultInstanceNameDecoded
        let iamRoleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .iamRole)
        iamRole = iamRoleDecoded
        let registrationLimitDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .registrationLimit)
        registrationLimit = registrationLimitDecoded
        let expirationDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .expirationDate)
        expirationDate = expirationDateDecoded
        let tagsContainer = try containerValues.decodeIfPresent([SsmClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[SsmClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [SsmClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let registrationMetadataContainer = try containerValues.decodeIfPresent([SsmClientTypes.RegistrationMetadataItem?].self, forKey: .registrationMetadata)
        var registrationMetadataDecoded0:[SsmClientTypes.RegistrationMetadataItem]? = nil
        if let registrationMetadataContainer = registrationMetadataContainer {
            registrationMetadataDecoded0 = [SsmClientTypes.RegistrationMetadataItem]()
            for structure0 in registrationMetadataContainer {
                if let structure0 = structure0 {
                    registrationMetadataDecoded0?.append(structure0)
                }
            }
        }
        registrationMetadata = registrationMetadataDecoded0
    }
}
