// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SsmClientTypes {
    /// Details about a specific Automation execution.
    public struct AutomationExecutionMetadata: Swift.Equatable {
        /// The details for the CloudWatch alarm applied to your automation.
        public var alarmConfiguration: SsmClientTypes.AlarmConfiguration?
        /// The ID of a State Manager association used in the Automation operation.
        public var associationId: Swift.String?
        /// The execution ID.
        public var automationExecutionId: Swift.String?
        /// The status of the execution.
        public var automationExecutionStatus: SsmClientTypes.AutomationExecutionStatus?
        /// The subtype of the Automation operation. Currently, the only supported value is ChangeRequest.
        public var automationSubtype: SsmClientTypes.AutomationSubtype?
        /// Use this filter with [DescribeAutomationExecutions]. Specify either Local or CrossAccount. CrossAccount is an Automation that runs in multiple Amazon Web Services Regions and Amazon Web Services accounts. For more information, see [Running Automation workflows in multiple Amazon Web Services Regions and accounts](https://docs.aws.amazon.com/systems-manager/latest/userguide/systems-manager-automation-multiple-accounts-and-regions.html) in the Amazon Web Services Systems Manager User Guide.
        public var automationType: SsmClientTypes.AutomationType?
        /// The name of the Change Manager change request.
        public var changeRequestName: Swift.String?
        /// The action of the step that is currently running.
        public var currentAction: Swift.String?
        /// The name of the step that is currently running.
        public var currentStepName: Swift.String?
        /// The name of the Automation runbook used during execution.
        public var documentName: Swift.String?
        /// The document version used during the execution.
        public var documentVersion: Swift.String?
        /// The IAM role ARN of the user who ran the automation.
        public var executedBy: Swift.String?
        /// The time the execution finished. This isn't populated if the execution is still in progress.
        public var executionEndTime: ClientRuntime.Date?
        /// The time the execution started.
        public var executionStartTime: ClientRuntime.Date?
        /// The list of execution outputs as defined in the Automation runbook.
        public var failureMessage: Swift.String?
        /// An S3 bucket where execution information is stored.
        public var logFile: Swift.String?
        /// The MaxConcurrency value specified by the user when starting the automation.
        public var maxConcurrency: Swift.String?
        /// The MaxErrors value specified by the user when starting the automation.
        public var maxErrors: Swift.String?
        /// The Automation execution mode.
        public var mode: SsmClientTypes.ExecutionMode?
        /// The ID of an OpsItem that is created to represent a Change Manager change request.
        public var opsItemId: Swift.String?
        /// The list of execution outputs as defined in the Automation runbook.
        public var outputs: [Swift.String:[Swift.String]]?
        /// The execution ID of the parent automation.
        public var parentAutomationExecutionId: Swift.String?
        /// A list of targets that resolved during the execution.
        public var resolvedTargets: SsmClientTypes.ResolvedTargets?
        /// Information about the Automation runbooks that are run during a runbook workflow in Change Manager. The Automation runbooks specified for the runbook workflow can't run until all required approvals for the change request have been received.
        public var runbooks: [SsmClientTypes.Runbook]?
        /// The date and time the Automation operation is scheduled to start.
        public var scheduledTime: ClientRuntime.Date?
        /// The list of execution outputs as defined in the Automation runbook.
        public var target: Swift.String?
        /// The specified key-value mapping of document parameters to target resources.
        public var targetMaps: [[Swift.String:[Swift.String]]]?
        /// The list of execution outputs as defined in the Automation runbook.
        public var targetParameterName: Swift.String?
        /// The targets defined by the user when starting the automation.
        public var targets: [SsmClientTypes.Target]?
        /// The CloudWatch alarm that was invoked by the automation.
        public var triggeredAlarms: [SsmClientTypes.AlarmStateInformation]?

        public init (
            alarmConfiguration: SsmClientTypes.AlarmConfiguration? = nil,
            associationId: Swift.String? = nil,
            automationExecutionId: Swift.String? = nil,
            automationExecutionStatus: SsmClientTypes.AutomationExecutionStatus? = nil,
            automationSubtype: SsmClientTypes.AutomationSubtype? = nil,
            automationType: SsmClientTypes.AutomationType? = nil,
            changeRequestName: Swift.String? = nil,
            currentAction: Swift.String? = nil,
            currentStepName: Swift.String? = nil,
            documentName: Swift.String? = nil,
            documentVersion: Swift.String? = nil,
            executedBy: Swift.String? = nil,
            executionEndTime: ClientRuntime.Date? = nil,
            executionStartTime: ClientRuntime.Date? = nil,
            failureMessage: Swift.String? = nil,
            logFile: Swift.String? = nil,
            maxConcurrency: Swift.String? = nil,
            maxErrors: Swift.String? = nil,
            mode: SsmClientTypes.ExecutionMode? = nil,
            opsItemId: Swift.String? = nil,
            outputs: [Swift.String:[Swift.String]]? = nil,
            parentAutomationExecutionId: Swift.String? = nil,
            resolvedTargets: SsmClientTypes.ResolvedTargets? = nil,
            runbooks: [SsmClientTypes.Runbook]? = nil,
            scheduledTime: ClientRuntime.Date? = nil,
            target: Swift.String? = nil,
            targetMaps: [[Swift.String:[Swift.String]]]? = nil,
            targetParameterName: Swift.String? = nil,
            targets: [SsmClientTypes.Target]? = nil,
            triggeredAlarms: [SsmClientTypes.AlarmStateInformation]? = nil
        )
        {
            self.alarmConfiguration = alarmConfiguration
            self.associationId = associationId
            self.automationExecutionId = automationExecutionId
            self.automationExecutionStatus = automationExecutionStatus
            self.automationSubtype = automationSubtype
            self.automationType = automationType
            self.changeRequestName = changeRequestName
            self.currentAction = currentAction
            self.currentStepName = currentStepName
            self.documentName = documentName
            self.documentVersion = documentVersion
            self.executedBy = executedBy
            self.executionEndTime = executionEndTime
            self.executionStartTime = executionStartTime
            self.failureMessage = failureMessage
            self.logFile = logFile
            self.maxConcurrency = maxConcurrency
            self.maxErrors = maxErrors
            self.mode = mode
            self.opsItemId = opsItemId
            self.outputs = outputs
            self.parentAutomationExecutionId = parentAutomationExecutionId
            self.resolvedTargets = resolvedTargets
            self.runbooks = runbooks
            self.scheduledTime = scheduledTime
            self.target = target
            self.targetMaps = targetMaps
            self.targetParameterName = targetParameterName
            self.targets = targets
            self.triggeredAlarms = triggeredAlarms
        }
    }

}
