// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListCommandsOutputResponseBody: Swift.Equatable {
    let commands: [SsmClientTypes.Command]?
    let nextToken: Swift.String?
}

extension ListCommandsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case commands = "Commands"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let commandsContainer = try containerValues.decodeIfPresent([SsmClientTypes.Command?].self, forKey: .commands)
        var commandsDecoded0:[SsmClientTypes.Command]? = nil
        if let commandsContainer = commandsContainer {
            commandsDecoded0 = [SsmClientTypes.Command]()
            for structure0 in commandsContainer {
                if let structure0 = structure0 {
                    commandsDecoded0?.append(structure0)
                }
            }
        }
        commands = commandsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
