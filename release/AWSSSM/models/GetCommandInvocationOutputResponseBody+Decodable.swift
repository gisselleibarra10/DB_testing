// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetCommandInvocationOutputResponseBody: Swift.Equatable {
    let commandId: Swift.String?
    let instanceId: Swift.String?
    let comment: Swift.String?
    let documentName: Swift.String?
    let documentVersion: Swift.String?
    let pluginName: Swift.String?
    let responseCode: Swift.Int
    let executionStartDateTime: Swift.String?
    let executionElapsedTime: Swift.String?
    let executionEndDateTime: Swift.String?
    let status: SsmClientTypes.CommandInvocationStatus?
    let statusDetails: Swift.String?
    let standardOutputContent: Swift.String?
    let standardOutputUrl: Swift.String?
    let standardErrorContent: Swift.String?
    let standardErrorUrl: Swift.String?
    let cloudWatchOutputConfig: SsmClientTypes.CloudWatchOutputConfig?
}

extension GetCommandInvocationOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cloudWatchOutputConfig = "CloudWatchOutputConfig"
        case commandId = "CommandId"
        case comment = "Comment"
        case documentName = "DocumentName"
        case documentVersion = "DocumentVersion"
        case executionElapsedTime = "ExecutionElapsedTime"
        case executionEndDateTime = "ExecutionEndDateTime"
        case executionStartDateTime = "ExecutionStartDateTime"
        case instanceId = "InstanceId"
        case pluginName = "PluginName"
        case responseCode = "ResponseCode"
        case standardErrorContent = "StandardErrorContent"
        case standardErrorUrl = "StandardErrorUrl"
        case standardOutputContent = "StandardOutputContent"
        case standardOutputUrl = "StandardOutputUrl"
        case status = "Status"
        case statusDetails = "StatusDetails"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let commandIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .commandId)
        commandId = commandIdDecoded
        let instanceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceId)
        instanceId = instanceIdDecoded
        let commentDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .comment)
        comment = commentDecoded
        let documentNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .documentName)
        documentName = documentNameDecoded
        let documentVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .documentVersion)
        documentVersion = documentVersionDecoded
        let pluginNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pluginName)
        pluginName = pluginNameDecoded
        let responseCodeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .responseCode) ?? 0
        responseCode = responseCodeDecoded
        let executionStartDateTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .executionStartDateTime)
        executionStartDateTime = executionStartDateTimeDecoded
        let executionElapsedTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .executionElapsedTime)
        executionElapsedTime = executionElapsedTimeDecoded
        let executionEndDateTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .executionEndDateTime)
        executionEndDateTime = executionEndDateTimeDecoded
        let statusDecoded = try containerValues.decodeIfPresent(SsmClientTypes.CommandInvocationStatus.self, forKey: .status)
        status = statusDecoded
        let statusDetailsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .statusDetails)
        statusDetails = statusDetailsDecoded
        let standardOutputContentDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .standardOutputContent)
        standardOutputContent = standardOutputContentDecoded
        let standardOutputUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .standardOutputUrl)
        standardOutputUrl = standardOutputUrlDecoded
        let standardErrorContentDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .standardErrorContent)
        standardErrorContent = standardErrorContentDecoded
        let standardErrorUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .standardErrorUrl)
        standardErrorUrl = standardErrorUrlDecoded
        let cloudWatchOutputConfigDecoded = try containerValues.decodeIfPresent(SsmClientTypes.CloudWatchOutputConfig.self, forKey: .cloudWatchOutputConfig)
        cloudWatchOutputConfig = cloudWatchOutputConfigDecoded
    }
}
