// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SsmClientTypes.InstanceAssociationStatusInfo: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case associationId = "AssociationId"
        case associationName = "AssociationName"
        case associationVersion = "AssociationVersion"
        case detailedStatus = "DetailedStatus"
        case documentVersion = "DocumentVersion"
        case errorCode = "ErrorCode"
        case executionDate = "ExecutionDate"
        case executionSummary = "ExecutionSummary"
        case instanceId = "InstanceId"
        case name = "Name"
        case outputUrl = "OutputUrl"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let associationId = self.associationId {
            try encodeContainer.encode(associationId, forKey: .associationId)
        }
        if let associationName = self.associationName {
            try encodeContainer.encode(associationName, forKey: .associationName)
        }
        if let associationVersion = self.associationVersion {
            try encodeContainer.encode(associationVersion, forKey: .associationVersion)
        }
        if let detailedStatus = self.detailedStatus {
            try encodeContainer.encode(detailedStatus, forKey: .detailedStatus)
        }
        if let documentVersion = self.documentVersion {
            try encodeContainer.encode(documentVersion, forKey: .documentVersion)
        }
        if let errorCode = self.errorCode {
            try encodeContainer.encode(errorCode, forKey: .errorCode)
        }
        if let executionDate = self.executionDate {
            try encodeContainer.encode(executionDate.timeIntervalSince1970, forKey: .executionDate)
        }
        if let executionSummary = self.executionSummary {
            try encodeContainer.encode(executionSummary, forKey: .executionSummary)
        }
        if let instanceId = self.instanceId {
            try encodeContainer.encode(instanceId, forKey: .instanceId)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let outputUrl = self.outputUrl {
            try encodeContainer.encode(outputUrl, forKey: .outputUrl)
        }
        if let status = self.status {
            try encodeContainer.encode(status, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let associationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .associationId)
        associationId = associationIdDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let documentVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .documentVersion)
        documentVersion = documentVersionDecoded
        let associationVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .associationVersion)
        associationVersion = associationVersionDecoded
        let instanceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceId)
        instanceId = instanceIdDecoded
        let executionDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .executionDate)
        executionDate = executionDateDecoded
        let statusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .status)
        status = statusDecoded
        let detailedStatusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .detailedStatus)
        detailedStatus = detailedStatusDecoded
        let executionSummaryDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .executionSummary)
        executionSummary = executionSummaryDecoded
        let errorCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .errorCode)
        errorCode = errorCodeDecoded
        let outputUrlDecoded = try containerValues.decodeIfPresent(SsmClientTypes.InstanceAssociationOutputUrl.self, forKey: .outputUrl)
        outputUrl = outputUrlDecoded
        let associationNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .associationName)
        associationName = associationNameDecoded
    }
}
