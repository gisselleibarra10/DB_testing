// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SsmClientTypes {
    /// Describes a command request.
    public struct Command: Swift.Equatable {
        /// The details for the CloudWatch alarm applied to your command.
        public var alarmConfiguration: SsmClientTypes.AlarmConfiguration?
        /// Amazon CloudWatch Logs information where you want Amazon Web Services Systems Manager to send the command output.
        public var cloudWatchOutputConfig: SsmClientTypes.CloudWatchOutputConfig?
        /// A unique identifier for this command.
        public var commandId: Swift.String?
        /// User-specified information about the command, such as a brief description of what the command should do.
        public var comment: Swift.String?
        /// The number of targets for which the command invocation reached a terminal state. Terminal states include the following: Success, Failed, Execution Timed Out, Delivery Timed Out, Cancelled, Terminated, or Undeliverable.
        public var completedCount: Swift.Int
        /// The number of targets for which the status is Delivery Timed Out.
        public var deliveryTimedOutCount: Swift.Int
        /// The name of the document requested for execution.
        public var documentName: Swift.String?
        /// The Systems Manager document (SSM document) version.
        public var documentVersion: Swift.String?
        /// The number of targets for which the status is Failed or Execution Timed Out.
        public var errorCount: Swift.Int
        /// If a command expires, it changes status to DeliveryTimedOut for all invocations that have the status InProgress, Pending, or Delayed. ExpiresAfter is calculated based on the total timeout for the overall command. For more information, see [Understanding command timeout values](https://docs.aws.amazon.com/systems-manager/latest/userguide/monitor-commands.html?icmpid=docs_ec2_console#monitor-about-status-timeouts) in the Amazon Web Services Systems Manager User Guide.
        public var expiresAfter: ClientRuntime.Date?
        /// The managed node IDs against which this command was requested.
        public var instanceIds: [Swift.String]?
        /// The maximum number of managed nodes that are allowed to run the command at the same time. You can specify a number of managed nodes, such as 10, or a percentage of nodes, such as 10%. The default value is 50. For more information about how to use MaxConcurrency, see [Running commands using Systems Manager Run Command](https://docs.aws.amazon.com/systems-manager/latest/userguide/run-command.html) in the Amazon Web Services Systems Manager User Guide.
        public var maxConcurrency: Swift.String?
        /// The maximum number of errors allowed before the system stops sending the command to additional targets. You can specify a number of errors, such as 10, or a percentage or errors, such as 10%. The default value is 0. For more information about how to use MaxErrors, see [Running commands using Systems Manager Run Command](https://docs.aws.amazon.com/systems-manager/latest/userguide/run-command.html) in the Amazon Web Services Systems Manager User Guide.
        public var maxErrors: Swift.String?
        /// Configurations for sending notifications about command status changes.
        public var notificationConfig: SsmClientTypes.NotificationConfig?
        /// The S3 bucket where the responses to the command executions should be stored. This was requested when issuing the command.
        public var outputS3BucketName: Swift.String?
        /// The S3 directory path inside the bucket where the responses to the command executions should be stored. This was requested when issuing the command.
        public var outputS3KeyPrefix: Swift.String?
        /// (Deprecated) You can no longer specify this parameter. The system ignores it. Instead, Systems Manager automatically determines the Amazon Web Services Region of the S3 bucket.
        public var outputS3Region: Swift.String?
        /// The parameter values to be inserted in the document when running the command.
        public var parameters: [Swift.String:[Swift.String]]?
        /// The date and time the command was requested.
        public var requestedDateTime: ClientRuntime.Date?
        /// The Identity and Access Management (IAM) service role that Run Command, a capability of Amazon Web Services Systems Manager, uses to act on your behalf when sending notifications about command status changes.
        public var serviceRole: Swift.String?
        /// The status of the command.
        public var status: SsmClientTypes.CommandStatus?
        /// A detailed status of the command execution. StatusDetails includes more information than Status because it includes states resulting from error and concurrency control parameters. StatusDetails can show different results than Status. For more information about these statuses, see [Understanding command statuses](https://docs.aws.amazon.com/systems-manager/latest/userguide/monitor-commands.html) in the Amazon Web Services Systems Manager User Guide. StatusDetails can be one of the following values:
        ///
        /// * Pending: The command hasn't been sent to any managed nodes.
        ///
        /// * In Progress: The command has been sent to at least one managed node but hasn't reached a final state on all managed nodes.
        ///
        /// * Success: The command successfully ran on all invocations. This is a terminal state.
        ///
        /// * Delivery Timed Out: The value of MaxErrors or more command invocations shows a status of Delivery Timed Out. This is a terminal state.
        ///
        /// * Execution Timed Out: The value of MaxErrors or more command invocations shows a status of Execution Timed Out. This is a terminal state.
        ///
        /// * Failed: The value of MaxErrors or more command invocations shows a status of Failed. This is a terminal state.
        ///
        /// * Incomplete: The command was attempted on all managed nodes and one or more invocations doesn't have a value of Success but not enough invocations failed for the status to be Failed. This is a terminal state.
        ///
        /// * Cancelled: The command was terminated before it was completed. This is a terminal state.
        ///
        /// * Rate Exceeded: The number of managed nodes targeted by the command exceeded the account limit for pending invocations. The system has canceled the command before running it on any managed node. This is a terminal state.
        ///
        /// * Delayed: The system attempted to send the command to the managed node but wasn't successful. The system retries again.
        public var statusDetails: Swift.String?
        /// The number of targets for the command.
        public var targetCount: Swift.Int
        /// An array of search criteria that targets managed nodes using a Key,Value combination that you specify. Targets is required if you don't provide one or more managed node IDs in the call.
        public var targets: [SsmClientTypes.Target]?
        /// The TimeoutSeconds value specified for a command.
        public var timeoutSeconds: Swift.Int
        /// The CloudWatch alarm that was invoked by the command.
        public var triggeredAlarms: [SsmClientTypes.AlarmStateInformation]?

        public init (
            alarmConfiguration: SsmClientTypes.AlarmConfiguration? = nil,
            cloudWatchOutputConfig: SsmClientTypes.CloudWatchOutputConfig? = nil,
            commandId: Swift.String? = nil,
            comment: Swift.String? = nil,
            completedCount: Swift.Int = 0,
            deliveryTimedOutCount: Swift.Int = 0,
            documentName: Swift.String? = nil,
            documentVersion: Swift.String? = nil,
            errorCount: Swift.Int = 0,
            expiresAfter: ClientRuntime.Date? = nil,
            instanceIds: [Swift.String]? = nil,
            maxConcurrency: Swift.String? = nil,
            maxErrors: Swift.String? = nil,
            notificationConfig: SsmClientTypes.NotificationConfig? = nil,
            outputS3BucketName: Swift.String? = nil,
            outputS3KeyPrefix: Swift.String? = nil,
            outputS3Region: Swift.String? = nil,
            parameters: [Swift.String:[Swift.String]]? = nil,
            requestedDateTime: ClientRuntime.Date? = nil,
            serviceRole: Swift.String? = nil,
            status: SsmClientTypes.CommandStatus? = nil,
            statusDetails: Swift.String? = nil,
            targetCount: Swift.Int = 0,
            targets: [SsmClientTypes.Target]? = nil,
            timeoutSeconds: Swift.Int = 0,
            triggeredAlarms: [SsmClientTypes.AlarmStateInformation]? = nil
        )
        {
            self.alarmConfiguration = alarmConfiguration
            self.cloudWatchOutputConfig = cloudWatchOutputConfig
            self.commandId = commandId
            self.comment = comment
            self.completedCount = completedCount
            self.deliveryTimedOutCount = deliveryTimedOutCount
            self.documentName = documentName
            self.documentVersion = documentVersion
            self.errorCount = errorCount
            self.expiresAfter = expiresAfter
            self.instanceIds = instanceIds
            self.maxConcurrency = maxConcurrency
            self.maxErrors = maxErrors
            self.notificationConfig = notificationConfig
            self.outputS3BucketName = outputS3BucketName
            self.outputS3KeyPrefix = outputS3KeyPrefix
            self.outputS3Region = outputS3Region
            self.parameters = parameters
            self.requestedDateTime = requestedDateTime
            self.serviceRole = serviceRole
            self.status = status
            self.statusDetails = statusDetails
            self.targetCount = targetCount
            self.targets = targets
            self.timeoutSeconds = timeoutSeconds
            self.triggeredAlarms = triggeredAlarms
        }
    }

}
