// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension SsmClientTypes {
    public enum OperatingSystem: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case amazonlinux
        case amazonlinux2
        case centos
        case debian
        case macos
        case oraclelinux
        case raspbian
        case redhatenterpriselinux
        case rockyLinux
        case suse
        case ubuntu
        case windows
        case sdkUnknown(Swift.String)

        public static var allCases: [OperatingSystem] {
            return [
                .amazonlinux,
                .amazonlinux2,
                .centos,
                .debian,
                .macos,
                .oraclelinux,
                .raspbian,
                .redhatenterpriselinux,
                .rockyLinux,
                .suse,
                .ubuntu,
                .windows,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .amazonlinux: return "AMAZON_LINUX"
            case .amazonlinux2: return "AMAZON_LINUX_2"
            case .centos: return "CENTOS"
            case .debian: return "DEBIAN"
            case .macos: return "MACOS"
            case .oraclelinux: return "ORACLE_LINUX"
            case .raspbian: return "RASPBIAN"
            case .redhatenterpriselinux: return "REDHAT_ENTERPRISE_LINUX"
            case .rockyLinux: return "ROCKY_LINUX"
            case .suse: return "SUSE"
            case .ubuntu: return "UBUNTU"
            case .windows: return "WINDOWS"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = OperatingSystem(rawValue: rawValue) ?? OperatingSystem.sdkUnknown(rawValue)
        }
    }
}
