// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct UnlabelParameterVersionInputBody: Swift.Equatable {
    let name: Swift.String?
    let parameterVersion: Swift.Int?
    let labels: [Swift.String]?
}

extension UnlabelParameterVersionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case labels = "Labels"
        case name = "Name"
        case parameterVersion = "ParameterVersion"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let parameterVersionDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .parameterVersion)
        parameterVersion = parameterVersionDecoded
        let labelsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .labels)
        var labelsDecoded0:[Swift.String]? = nil
        if let labelsContainer = labelsContainer {
            labelsDecoded0 = [Swift.String]()
            for string0 in labelsContainer {
                if let string0 = string0 {
                    labelsDecoded0?.append(string0)
                }
            }
        }
        labels = labelsDecoded0
    }
}
