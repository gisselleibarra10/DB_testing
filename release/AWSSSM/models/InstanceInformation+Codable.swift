// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SsmClientTypes.InstanceInformation: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case activationId = "ActivationId"
        case agentVersion = "AgentVersion"
        case associationOverview = "AssociationOverview"
        case associationStatus = "AssociationStatus"
        case computerName = "ComputerName"
        case iPAddress = "IPAddress"
        case iamRole = "IamRole"
        case instanceId = "InstanceId"
        case isLatestVersion = "IsLatestVersion"
        case lastAssociationExecutionDate = "LastAssociationExecutionDate"
        case lastPingDateTime = "LastPingDateTime"
        case lastSuccessfulAssociationExecutionDate = "LastSuccessfulAssociationExecutionDate"
        case name = "Name"
        case pingStatus = "PingStatus"
        case platformName = "PlatformName"
        case platformType = "PlatformType"
        case platformVersion = "PlatformVersion"
        case registrationDate = "RegistrationDate"
        case resourceType = "ResourceType"
        case sourceId = "SourceId"
        case sourceType = "SourceType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let activationId = self.activationId {
            try encodeContainer.encode(activationId, forKey: .activationId)
        }
        if let agentVersion = self.agentVersion {
            try encodeContainer.encode(agentVersion, forKey: .agentVersion)
        }
        if let associationOverview = self.associationOverview {
            try encodeContainer.encode(associationOverview, forKey: .associationOverview)
        }
        if let associationStatus = self.associationStatus {
            try encodeContainer.encode(associationStatus, forKey: .associationStatus)
        }
        if let computerName = self.computerName {
            try encodeContainer.encode(computerName, forKey: .computerName)
        }
        if let iPAddress = self.iPAddress {
            try encodeContainer.encode(iPAddress, forKey: .iPAddress)
        }
        if let iamRole = self.iamRole {
            try encodeContainer.encode(iamRole, forKey: .iamRole)
        }
        if let instanceId = self.instanceId {
            try encodeContainer.encode(instanceId, forKey: .instanceId)
        }
        if let isLatestVersion = self.isLatestVersion {
            try encodeContainer.encode(isLatestVersion, forKey: .isLatestVersion)
        }
        if let lastAssociationExecutionDate = self.lastAssociationExecutionDate {
            try encodeContainer.encode(lastAssociationExecutionDate.timeIntervalSince1970, forKey: .lastAssociationExecutionDate)
        }
        if let lastPingDateTime = self.lastPingDateTime {
            try encodeContainer.encode(lastPingDateTime.timeIntervalSince1970, forKey: .lastPingDateTime)
        }
        if let lastSuccessfulAssociationExecutionDate = self.lastSuccessfulAssociationExecutionDate {
            try encodeContainer.encode(lastSuccessfulAssociationExecutionDate.timeIntervalSince1970, forKey: .lastSuccessfulAssociationExecutionDate)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let pingStatus = self.pingStatus {
            try encodeContainer.encode(pingStatus.rawValue, forKey: .pingStatus)
        }
        if let platformName = self.platformName {
            try encodeContainer.encode(platformName, forKey: .platformName)
        }
        if let platformType = self.platformType {
            try encodeContainer.encode(platformType.rawValue, forKey: .platformType)
        }
        if let platformVersion = self.platformVersion {
            try encodeContainer.encode(platformVersion, forKey: .platformVersion)
        }
        if let registrationDate = self.registrationDate {
            try encodeContainer.encode(registrationDate.timeIntervalSince1970, forKey: .registrationDate)
        }
        if let resourceType = self.resourceType {
            try encodeContainer.encode(resourceType.rawValue, forKey: .resourceType)
        }
        if let sourceId = self.sourceId {
            try encodeContainer.encode(sourceId, forKey: .sourceId)
        }
        if let sourceType = self.sourceType {
            try encodeContainer.encode(sourceType.rawValue, forKey: .sourceType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instanceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceId)
        instanceId = instanceIdDecoded
        let pingStatusDecoded = try containerValues.decodeIfPresent(SsmClientTypes.PingStatus.self, forKey: .pingStatus)
        pingStatus = pingStatusDecoded
        let lastPingDateTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastPingDateTime)
        lastPingDateTime = lastPingDateTimeDecoded
        let agentVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .agentVersion)
        agentVersion = agentVersionDecoded
        let isLatestVersionDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .isLatestVersion)
        isLatestVersion = isLatestVersionDecoded
        let platformTypeDecoded = try containerValues.decodeIfPresent(SsmClientTypes.PlatformType.self, forKey: .platformType)
        platformType = platformTypeDecoded
        let platformNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .platformName)
        platformName = platformNameDecoded
        let platformVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .platformVersion)
        platformVersion = platformVersionDecoded
        let activationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .activationId)
        activationId = activationIdDecoded
        let iamRoleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .iamRole)
        iamRole = iamRoleDecoded
        let registrationDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .registrationDate)
        registrationDate = registrationDateDecoded
        let resourceTypeDecoded = try containerValues.decodeIfPresent(SsmClientTypes.ResourceType.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let iPAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .iPAddress)
        iPAddress = iPAddressDecoded
        let computerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .computerName)
        computerName = computerNameDecoded
        let associationStatusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .associationStatus)
        associationStatus = associationStatusDecoded
        let lastAssociationExecutionDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastAssociationExecutionDate)
        lastAssociationExecutionDate = lastAssociationExecutionDateDecoded
        let lastSuccessfulAssociationExecutionDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastSuccessfulAssociationExecutionDate)
        lastSuccessfulAssociationExecutionDate = lastSuccessfulAssociationExecutionDateDecoded
        let associationOverviewDecoded = try containerValues.decodeIfPresent(SsmClientTypes.InstanceAggregatedAssociationOverview.self, forKey: .associationOverview)
        associationOverview = associationOverviewDecoded
        let sourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceId)
        sourceId = sourceIdDecoded
        let sourceTypeDecoded = try containerValues.decodeIfPresent(SsmClientTypes.SourceType.self, forKey: .sourceType)
        sourceType = sourceTypeDecoded
    }
}
