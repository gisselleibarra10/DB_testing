// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateDocumentInputBody: Swift.Equatable {
    let content: Swift.String?
    let requires: [SsmClientTypes.DocumentRequires]?
    let attachments: [SsmClientTypes.AttachmentsSource]?
    let name: Swift.String?
    let displayName: Swift.String?
    let versionName: Swift.String?
    let documentType: SsmClientTypes.DocumentType?
    let documentFormat: SsmClientTypes.DocumentFormat?
    let targetType: Swift.String?
    let tags: [SsmClientTypes.Tag]?
}

extension CreateDocumentInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attachments = "Attachments"
        case content = "Content"
        case displayName = "DisplayName"
        case documentFormat = "DocumentFormat"
        case documentType = "DocumentType"
        case name = "Name"
        case requires = "Requires"
        case tags = "Tags"
        case targetType = "TargetType"
        case versionName = "VersionName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let contentDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .content)
        content = contentDecoded
        let requiresContainer = try containerValues.decodeIfPresent([SsmClientTypes.DocumentRequires?].self, forKey: .requires)
        var requiresDecoded0:[SsmClientTypes.DocumentRequires]? = nil
        if let requiresContainer = requiresContainer {
            requiresDecoded0 = [SsmClientTypes.DocumentRequires]()
            for structure0 in requiresContainer {
                if let structure0 = structure0 {
                    requiresDecoded0?.append(structure0)
                }
            }
        }
        requires = requiresDecoded0
        let attachmentsContainer = try containerValues.decodeIfPresent([SsmClientTypes.AttachmentsSource?].self, forKey: .attachments)
        var attachmentsDecoded0:[SsmClientTypes.AttachmentsSource]? = nil
        if let attachmentsContainer = attachmentsContainer {
            attachmentsDecoded0 = [SsmClientTypes.AttachmentsSource]()
            for structure0 in attachmentsContainer {
                if let structure0 = structure0 {
                    attachmentsDecoded0?.append(structure0)
                }
            }
        }
        attachments = attachmentsDecoded0
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let displayNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .displayName)
        displayName = displayNameDecoded
        let versionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .versionName)
        versionName = versionNameDecoded
        let documentTypeDecoded = try containerValues.decodeIfPresent(SsmClientTypes.DocumentType.self, forKey: .documentType)
        documentType = documentTypeDecoded
        let documentFormatDecoded = try containerValues.decodeIfPresent(SsmClientTypes.DocumentFormat.self, forKey: .documentFormat)
        documentFormat = documentFormatDecoded
        let targetTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .targetType)
        targetType = targetTypeDecoded
        let tagsContainer = try containerValues.decodeIfPresent([SsmClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[SsmClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [SsmClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}
