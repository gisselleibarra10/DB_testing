// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribePatchGroupStateOutputResponseBody: Swift.Equatable {
    let instances: Swift.Int
    let instancesWithInstalledPatches: Swift.Int
    let instancesWithInstalledOtherPatches: Swift.Int
    let instancesWithInstalledPendingRebootPatches: Swift.Int?
    let instancesWithInstalledRejectedPatches: Swift.Int?
    let instancesWithMissingPatches: Swift.Int
    let instancesWithFailedPatches: Swift.Int
    let instancesWithNotApplicablePatches: Swift.Int
    let instancesWithUnreportedNotApplicablePatches: Swift.Int?
    let instancesWithCriticalNonCompliantPatches: Swift.Int?
    let instancesWithSecurityNonCompliantPatches: Swift.Int?
    let instancesWithOtherNonCompliantPatches: Swift.Int?
}

extension DescribePatchGroupStateOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case instances = "Instances"
        case instancesWithCriticalNonCompliantPatches = "InstancesWithCriticalNonCompliantPatches"
        case instancesWithFailedPatches = "InstancesWithFailedPatches"
        case instancesWithInstalledOtherPatches = "InstancesWithInstalledOtherPatches"
        case instancesWithInstalledPatches = "InstancesWithInstalledPatches"
        case instancesWithInstalledPendingRebootPatches = "InstancesWithInstalledPendingRebootPatches"
        case instancesWithInstalledRejectedPatches = "InstancesWithInstalledRejectedPatches"
        case instancesWithMissingPatches = "InstancesWithMissingPatches"
        case instancesWithNotApplicablePatches = "InstancesWithNotApplicablePatches"
        case instancesWithOtherNonCompliantPatches = "InstancesWithOtherNonCompliantPatches"
        case instancesWithSecurityNonCompliantPatches = "InstancesWithSecurityNonCompliantPatches"
        case instancesWithUnreportedNotApplicablePatches = "InstancesWithUnreportedNotApplicablePatches"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instancesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .instances) ?? 0
        instances = instancesDecoded
        let instancesWithInstalledPatchesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .instancesWithInstalledPatches) ?? 0
        instancesWithInstalledPatches = instancesWithInstalledPatchesDecoded
        let instancesWithInstalledOtherPatchesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .instancesWithInstalledOtherPatches) ?? 0
        instancesWithInstalledOtherPatches = instancesWithInstalledOtherPatchesDecoded
        let instancesWithInstalledPendingRebootPatchesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .instancesWithInstalledPendingRebootPatches)
        instancesWithInstalledPendingRebootPatches = instancesWithInstalledPendingRebootPatchesDecoded
        let instancesWithInstalledRejectedPatchesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .instancesWithInstalledRejectedPatches)
        instancesWithInstalledRejectedPatches = instancesWithInstalledRejectedPatchesDecoded
        let instancesWithMissingPatchesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .instancesWithMissingPatches) ?? 0
        instancesWithMissingPatches = instancesWithMissingPatchesDecoded
        let instancesWithFailedPatchesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .instancesWithFailedPatches) ?? 0
        instancesWithFailedPatches = instancesWithFailedPatchesDecoded
        let instancesWithNotApplicablePatchesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .instancesWithNotApplicablePatches) ?? 0
        instancesWithNotApplicablePatches = instancesWithNotApplicablePatchesDecoded
        let instancesWithUnreportedNotApplicablePatchesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .instancesWithUnreportedNotApplicablePatches)
        instancesWithUnreportedNotApplicablePatches = instancesWithUnreportedNotApplicablePatchesDecoded
        let instancesWithCriticalNonCompliantPatchesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .instancesWithCriticalNonCompliantPatches)
        instancesWithCriticalNonCompliantPatches = instancesWithCriticalNonCompliantPatchesDecoded
        let instancesWithSecurityNonCompliantPatchesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .instancesWithSecurityNonCompliantPatches)
        instancesWithSecurityNonCompliantPatches = instancesWithSecurityNonCompliantPatchesDecoded
        let instancesWithOtherNonCompliantPatchesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .instancesWithOtherNonCompliantPatches)
        instancesWithOtherNonCompliantPatches = instancesWithOtherNonCompliantPatchesDecoded
    }
}
