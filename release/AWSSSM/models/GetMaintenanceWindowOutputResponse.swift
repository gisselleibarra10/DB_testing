// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct GetMaintenanceWindowOutputResponse: Swift.Equatable {
    /// Whether targets must be registered with the maintenance window before tasks can be defined for those targets.
    public var allowUnassociatedTargets: Swift.Bool
    /// The date the maintenance window was created.
    public var createdDate: ClientRuntime.Date?
    /// The number of hours before the end of the maintenance window that Amazon Web Services Systems Manager stops scheduling new tasks for execution.
    public var cutoff: Swift.Int
    /// The description of the maintenance window.
    public var description: Swift.String?
    /// The duration of the maintenance window in hours.
    public var duration: Swift.Int
    /// Indicates whether the maintenance window is enabled.
    public var enabled: Swift.Bool
    /// The date and time, in ISO-8601 Extended format, for when the maintenance window is scheduled to become inactive. The maintenance window won't run after this specified time.
    public var endDate: Swift.String?
    /// The date the maintenance window was last modified.
    public var modifiedDate: ClientRuntime.Date?
    /// The name of the maintenance window.
    public var name: Swift.String?
    /// The next time the maintenance window will actually run, taking into account any specified times for the maintenance window to become active or inactive.
    public var nextExecutionTime: Swift.String?
    /// The schedule of the maintenance window in the form of a cron or rate expression.
    public var schedule: Swift.String?
    /// The number of days to wait to run a maintenance window after the scheduled cron expression date and time.
    public var scheduleOffset: Swift.Int?
    /// The time zone that the scheduled maintenance window executions are based on, in Internet Assigned Numbers Authority (IANA) format. For example: "America/Los_Angeles", "UTC", or "Asia/Seoul". For more information, see the [Time Zone Database](https://www.iana.org/time-zones) on the IANA website.
    public var scheduleTimezone: Swift.String?
    /// The date and time, in ISO-8601 Extended format, for when the maintenance window is scheduled to become active. The maintenance window won't run before this specified time.
    public var startDate: Swift.String?
    /// The ID of the created maintenance window.
    public var windowId: Swift.String?

    public init (
        allowUnassociatedTargets: Swift.Bool = false,
        createdDate: ClientRuntime.Date? = nil,
        cutoff: Swift.Int = 0,
        description: Swift.String? = nil,
        duration: Swift.Int = 0,
        enabled: Swift.Bool = false,
        endDate: Swift.String? = nil,
        modifiedDate: ClientRuntime.Date? = nil,
        name: Swift.String? = nil,
        nextExecutionTime: Swift.String? = nil,
        schedule: Swift.String? = nil,
        scheduleOffset: Swift.Int? = nil,
        scheduleTimezone: Swift.String? = nil,
        startDate: Swift.String? = nil,
        windowId: Swift.String? = nil
    )
    {
        self.allowUnassociatedTargets = allowUnassociatedTargets
        self.createdDate = createdDate
        self.cutoff = cutoff
        self.description = description
        self.duration = duration
        self.enabled = enabled
        self.endDate = endDate
        self.modifiedDate = modifiedDate
        self.name = name
        self.nextExecutionTime = nextExecutionTime
        self.schedule = schedule
        self.scheduleOffset = scheduleOffset
        self.scheduleTimezone = scheduleTimezone
        self.startDate = startDate
        self.windowId = windowId
    }
}
