// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct UpdateOpsItemInputBody: Swift.Equatable {
    let description: Swift.String?
    let operationalData: [Swift.String:SsmClientTypes.OpsItemDataValue]?
    let operationalDataToDelete: [Swift.String]?
    let notifications: [SsmClientTypes.OpsItemNotification]?
    let priority: Swift.Int?
    let relatedOpsItems: [SsmClientTypes.RelatedOpsItem]?
    let status: SsmClientTypes.OpsItemStatus?
    let opsItemId: Swift.String?
    let title: Swift.String?
    let category: Swift.String?
    let severity: Swift.String?
    let actualStartTime: ClientRuntime.Date?
    let actualEndTime: ClientRuntime.Date?
    let plannedStartTime: ClientRuntime.Date?
    let plannedEndTime: ClientRuntime.Date?
}

extension UpdateOpsItemInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case actualEndTime = "ActualEndTime"
        case actualStartTime = "ActualStartTime"
        case category = "Category"
        case description = "Description"
        case notifications = "Notifications"
        case operationalData = "OperationalData"
        case operationalDataToDelete = "OperationalDataToDelete"
        case opsItemId = "OpsItemId"
        case plannedEndTime = "PlannedEndTime"
        case plannedStartTime = "PlannedStartTime"
        case priority = "Priority"
        case relatedOpsItems = "RelatedOpsItems"
        case severity = "Severity"
        case status = "Status"
        case title = "Title"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let operationalDataContainer = try containerValues.decodeIfPresent([Swift.String: SsmClientTypes.OpsItemDataValue?].self, forKey: .operationalData)
        var operationalDataDecoded0: [Swift.String:SsmClientTypes.OpsItemDataValue]? = nil
        if let operationalDataContainer = operationalDataContainer {
            operationalDataDecoded0 = [Swift.String:SsmClientTypes.OpsItemDataValue]()
            for (key0, opsitemdatavalue0) in operationalDataContainer {
                if let opsitemdatavalue0 = opsitemdatavalue0 {
                    operationalDataDecoded0?[key0] = opsitemdatavalue0
                }
            }
        }
        operationalData = operationalDataDecoded0
        let operationalDataToDeleteContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .operationalDataToDelete)
        var operationalDataToDeleteDecoded0:[Swift.String]? = nil
        if let operationalDataToDeleteContainer = operationalDataToDeleteContainer {
            operationalDataToDeleteDecoded0 = [Swift.String]()
            for string0 in operationalDataToDeleteContainer {
                if let string0 = string0 {
                    operationalDataToDeleteDecoded0?.append(string0)
                }
            }
        }
        operationalDataToDelete = operationalDataToDeleteDecoded0
        let notificationsContainer = try containerValues.decodeIfPresent([SsmClientTypes.OpsItemNotification?].self, forKey: .notifications)
        var notificationsDecoded0:[SsmClientTypes.OpsItemNotification]? = nil
        if let notificationsContainer = notificationsContainer {
            notificationsDecoded0 = [SsmClientTypes.OpsItemNotification]()
            for structure0 in notificationsContainer {
                if let structure0 = structure0 {
                    notificationsDecoded0?.append(structure0)
                }
            }
        }
        notifications = notificationsDecoded0
        let priorityDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .priority)
        priority = priorityDecoded
        let relatedOpsItemsContainer = try containerValues.decodeIfPresent([SsmClientTypes.RelatedOpsItem?].self, forKey: .relatedOpsItems)
        var relatedOpsItemsDecoded0:[SsmClientTypes.RelatedOpsItem]? = nil
        if let relatedOpsItemsContainer = relatedOpsItemsContainer {
            relatedOpsItemsDecoded0 = [SsmClientTypes.RelatedOpsItem]()
            for structure0 in relatedOpsItemsContainer {
                if let structure0 = structure0 {
                    relatedOpsItemsDecoded0?.append(structure0)
                }
            }
        }
        relatedOpsItems = relatedOpsItemsDecoded0
        let statusDecoded = try containerValues.decodeIfPresent(SsmClientTypes.OpsItemStatus.self, forKey: .status)
        status = statusDecoded
        let opsItemIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .opsItemId)
        opsItemId = opsItemIdDecoded
        let titleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .title)
        title = titleDecoded
        let categoryDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .category)
        category = categoryDecoded
        let severityDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .severity)
        severity = severityDecoded
        let actualStartTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .actualStartTime)
        actualStartTime = actualStartTimeDecoded
        let actualEndTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .actualEndTime)
        actualEndTime = actualEndTimeDecoded
        let plannedStartTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .plannedStartTime)
        plannedStartTime = plannedStartTimeDecoded
        let plannedEndTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .plannedEndTime)
        plannedEndTime = plannedEndTimeDecoded
    }
}
