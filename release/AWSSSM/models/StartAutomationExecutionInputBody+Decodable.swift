// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct StartAutomationExecutionInputBody: Swift.Equatable {
    let documentName: Swift.String?
    let documentVersion: Swift.String?
    let parameters: [Swift.String:[Swift.String]]?
    let clientToken: Swift.String?
    let mode: SsmClientTypes.ExecutionMode?
    let targetParameterName: Swift.String?
    let targets: [SsmClientTypes.Target]?
    let targetMaps: [[Swift.String:[Swift.String]]]?
    let maxConcurrency: Swift.String?
    let maxErrors: Swift.String?
    let targetLocations: [SsmClientTypes.TargetLocation]?
    let tags: [SsmClientTypes.Tag]?
    let alarmConfiguration: SsmClientTypes.AlarmConfiguration?
}

extension StartAutomationExecutionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case alarmConfiguration = "AlarmConfiguration"
        case clientToken = "ClientToken"
        case documentName = "DocumentName"
        case documentVersion = "DocumentVersion"
        case maxConcurrency = "MaxConcurrency"
        case maxErrors = "MaxErrors"
        case mode = "Mode"
        case parameters = "Parameters"
        case tags = "Tags"
        case targetLocations = "TargetLocations"
        case targetMaps = "TargetMaps"
        case targetParameterName = "TargetParameterName"
        case targets = "Targets"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let documentNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .documentName)
        documentName = documentNameDecoded
        let documentVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .documentVersion)
        documentVersion = documentVersionDecoded
        let parametersContainer = try containerValues.decodeIfPresent([Swift.String: [Swift.String?]?].self, forKey: .parameters)
        var parametersDecoded0: [Swift.String:[Swift.String]]? = nil
        if let parametersContainer = parametersContainer {
            parametersDecoded0 = [Swift.String:[Swift.String]]()
            for (key0, automationparametervaluelist0) in parametersContainer {
                var automationparametervaluelist0Decoded0: [Swift.String]? = nil
                if let automationparametervaluelist0 = automationparametervaluelist0 {
                    automationparametervaluelist0Decoded0 = [Swift.String]()
                    for string1 in automationparametervaluelist0 {
                        if let string1 = string1 {
                            automationparametervaluelist0Decoded0?.append(string1)
                        }
                    }
                }
                parametersDecoded0?[key0] = automationparametervaluelist0Decoded0
            }
        }
        parameters = parametersDecoded0
        let clientTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientToken)
        clientToken = clientTokenDecoded
        let modeDecoded = try containerValues.decodeIfPresent(SsmClientTypes.ExecutionMode.self, forKey: .mode)
        mode = modeDecoded
        let targetParameterNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .targetParameterName)
        targetParameterName = targetParameterNameDecoded
        let targetsContainer = try containerValues.decodeIfPresent([SsmClientTypes.Target?].self, forKey: .targets)
        var targetsDecoded0:[SsmClientTypes.Target]? = nil
        if let targetsContainer = targetsContainer {
            targetsDecoded0 = [SsmClientTypes.Target]()
            for structure0 in targetsContainer {
                if let structure0 = structure0 {
                    targetsDecoded0?.append(structure0)
                }
            }
        }
        targets = targetsDecoded0
        let targetMapsContainer = try containerValues.decodeIfPresent([[Swift.String: [Swift.String?]?]?].self, forKey: .targetMaps)
        var targetMapsDecoded0:[[Swift.String:[Swift.String]]]? = nil
        if let targetMapsContainer = targetMapsContainer {
            targetMapsDecoded0 = [[Swift.String:[Swift.String]]]()
            for map0 in targetMapsContainer {
                var targetMapsContainerDecoded0: [Swift.String: [Swift.String]]? = nil
                if let map0 = map0 {
                    targetMapsContainerDecoded0 = [Swift.String: [Swift.String]]()
                    for (key1, targetmapvaluelist1) in map0 {
                        var targetmapvaluelist1Decoded1: [Swift.String]? = nil
                        if let targetmapvaluelist1 = targetmapvaluelist1 {
                            targetmapvaluelist1Decoded1 = [Swift.String]()
                            for string2 in targetmapvaluelist1 {
                                if let string2 = string2 {
                                    targetmapvaluelist1Decoded1?.append(string2)
                                }
                            }
                        }
                        targetMapsContainerDecoded0?[key1] = targetmapvaluelist1Decoded1
                    }
                }
                if let targetMapsContainerDecoded0 = targetMapsContainerDecoded0 {
                    targetMapsDecoded0?.append(targetMapsContainerDecoded0)
                }
            }
        }
        targetMaps = targetMapsDecoded0
        let maxConcurrencyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .maxConcurrency)
        maxConcurrency = maxConcurrencyDecoded
        let maxErrorsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .maxErrors)
        maxErrors = maxErrorsDecoded
        let targetLocationsContainer = try containerValues.decodeIfPresent([SsmClientTypes.TargetLocation?].self, forKey: .targetLocations)
        var targetLocationsDecoded0:[SsmClientTypes.TargetLocation]? = nil
        if let targetLocationsContainer = targetLocationsContainer {
            targetLocationsDecoded0 = [SsmClientTypes.TargetLocation]()
            for structure0 in targetLocationsContainer {
                if let structure0 = structure0 {
                    targetLocationsDecoded0?.append(structure0)
                }
            }
        }
        targetLocations = targetLocationsDecoded0
        let tagsContainer = try containerValues.decodeIfPresent([SsmClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[SsmClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [SsmClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let alarmConfigurationDecoded = try containerValues.decodeIfPresent(SsmClientTypes.AlarmConfiguration.self, forKey: .alarmConfiguration)
        alarmConfiguration = alarmConfigurationDecoded
    }
}
