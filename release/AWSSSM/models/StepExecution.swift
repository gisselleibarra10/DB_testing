// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SsmClientTypes {
    /// Detailed information about an the execution state of an Automation step.
    public struct StepExecution: Swift.Equatable {
        /// The action this step performs. The action determines the behavior of the step.
        public var action: Swift.String?
        /// If a step has finished execution, this contains the time the execution ended. If the step hasn't yet concluded, this field isn't populated.
        public var executionEndTime: ClientRuntime.Date?
        /// If a step has begun execution, this contains the time the step started. If the step is in Pending status, this field isn't populated.
        public var executionStartTime: ClientRuntime.Date?
        /// Information about the Automation failure.
        public var failureDetails: SsmClientTypes.FailureDetails?
        /// If a step failed, this message explains why the execution failed.
        public var failureMessage: Swift.String?
        /// Fully-resolved values passed into the step before execution.
        public var inputs: [Swift.String:Swift.String]?
        /// The flag which can be used to help decide whether the failure of current step leads to the Automation failure.
        public var isCritical: Swift.Bool?
        /// The flag which can be used to end automation no matter whether the step succeeds or fails.
        public var isEnd: Swift.Bool?
        /// The maximum number of tries to run the action of the step. The default value is 1.
        public var maxAttempts: Swift.Int?
        /// The next step after the step succeeds.
        public var nextStep: Swift.String?
        /// The action to take if the step fails. The default value is Abort.
        public var onFailure: Swift.String?
        /// Returned values from the execution of the step.
        public var outputs: [Swift.String:[Swift.String]]?
        /// A user-specified list of parameters to override when running a step.
        public var overriddenParameters: [Swift.String:[Swift.String]]?
        /// A message associated with the response code for an execution.
        public var response: Swift.String?
        /// The response code returned by the execution of the step.
        public var responseCode: Swift.String?
        /// The unique ID of a step execution.
        public var stepExecutionId: Swift.String?
        /// The name of this execution step.
        public var stepName: Swift.String?
        /// The execution status for this step.
        public var stepStatus: SsmClientTypes.AutomationExecutionStatus?
        /// The combination of Amazon Web Services Regions and Amazon Web Services accounts targeted by the current Automation execution.
        public var targetLocation: SsmClientTypes.TargetLocation?
        /// The targets for the step execution.
        public var targets: [SsmClientTypes.Target]?
        /// The timeout seconds of the step.
        public var timeoutSeconds: Swift.Int?
        /// Strategies used when step fails, we support Continue and Abort. Abort will fail the automation when the step fails. Continue will ignore the failure of current step and allow automation to run the next step. With conditional branching, we add step:stepName to support the automation to go to another specific step.
        public var validNextSteps: [Swift.String]?

        public init (
            action: Swift.String? = nil,
            executionEndTime: ClientRuntime.Date? = nil,
            executionStartTime: ClientRuntime.Date? = nil,
            failureDetails: SsmClientTypes.FailureDetails? = nil,
            failureMessage: Swift.String? = nil,
            inputs: [Swift.String:Swift.String]? = nil,
            isCritical: Swift.Bool? = nil,
            isEnd: Swift.Bool? = nil,
            maxAttempts: Swift.Int? = nil,
            nextStep: Swift.String? = nil,
            onFailure: Swift.String? = nil,
            outputs: [Swift.String:[Swift.String]]? = nil,
            overriddenParameters: [Swift.String:[Swift.String]]? = nil,
            response: Swift.String? = nil,
            responseCode: Swift.String? = nil,
            stepExecutionId: Swift.String? = nil,
            stepName: Swift.String? = nil,
            stepStatus: SsmClientTypes.AutomationExecutionStatus? = nil,
            targetLocation: SsmClientTypes.TargetLocation? = nil,
            targets: [SsmClientTypes.Target]? = nil,
            timeoutSeconds: Swift.Int? = nil,
            validNextSteps: [Swift.String]? = nil
        )
        {
            self.action = action
            self.executionEndTime = executionEndTime
            self.executionStartTime = executionStartTime
            self.failureDetails = failureDetails
            self.failureMessage = failureMessage
            self.inputs = inputs
            self.isCritical = isCritical
            self.isEnd = isEnd
            self.maxAttempts = maxAttempts
            self.nextStep = nextStep
            self.onFailure = onFailure
            self.outputs = outputs
            self.overriddenParameters = overriddenParameters
            self.response = response
            self.responseCode = responseCode
            self.stepExecutionId = stepExecutionId
            self.stepName = stepName
            self.stepStatus = stepStatus
            self.targetLocation = targetLocation
            self.targets = targets
            self.timeoutSeconds = timeoutSeconds
            self.validNextSteps = validNextSteps
        }
    }

}
