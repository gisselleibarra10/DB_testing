// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SsmClientTypes.TargetLocation: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accounts = "Accounts"
        case executionRoleName = "ExecutionRoleName"
        case regions = "Regions"
        case targetLocationMaxConcurrency = "TargetLocationMaxConcurrency"
        case targetLocationMaxErrors = "TargetLocationMaxErrors"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accounts = accounts {
            var accountsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .accounts)
            for accounts0 in accounts {
                try accountsContainer.encode(accounts0)
            }
        }
        if let executionRoleName = self.executionRoleName {
            try encodeContainer.encode(executionRoleName, forKey: .executionRoleName)
        }
        if let regions = regions {
            var regionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .regions)
            for regions0 in regions {
                try regionsContainer.encode(regions0)
            }
        }
        if let targetLocationMaxConcurrency = self.targetLocationMaxConcurrency {
            try encodeContainer.encode(targetLocationMaxConcurrency, forKey: .targetLocationMaxConcurrency)
        }
        if let targetLocationMaxErrors = self.targetLocationMaxErrors {
            try encodeContainer.encode(targetLocationMaxErrors, forKey: .targetLocationMaxErrors)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let accountsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .accounts)
        var accountsDecoded0:[Swift.String]? = nil
        if let accountsContainer = accountsContainer {
            accountsDecoded0 = [Swift.String]()
            for string0 in accountsContainer {
                if let string0 = string0 {
                    accountsDecoded0?.append(string0)
                }
            }
        }
        accounts = accountsDecoded0
        let regionsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .regions)
        var regionsDecoded0:[Swift.String]? = nil
        if let regionsContainer = regionsContainer {
            regionsDecoded0 = [Swift.String]()
            for string0 in regionsContainer {
                if let string0 = string0 {
                    regionsDecoded0?.append(string0)
                }
            }
        }
        regions = regionsDecoded0
        let targetLocationMaxConcurrencyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .targetLocationMaxConcurrency)
        targetLocationMaxConcurrency = targetLocationMaxConcurrencyDecoded
        let targetLocationMaxErrorsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .targetLocationMaxErrors)
        targetLocationMaxErrors = targetLocationMaxErrorsDecoded
        let executionRoleNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .executionRoleName)
        executionRoleName = executionRoleNameDecoded
    }
}
