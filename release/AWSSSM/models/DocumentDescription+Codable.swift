// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SsmClientTypes.DocumentDescription: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case approvedVersion = "ApprovedVersion"
        case attachmentsInformation = "AttachmentsInformation"
        case author = "Author"
        case category = "Category"
        case categoryEnum = "CategoryEnum"
        case createdDate = "CreatedDate"
        case defaultVersion = "DefaultVersion"
        case description = "Description"
        case displayName = "DisplayName"
        case documentFormat = "DocumentFormat"
        case documentType = "DocumentType"
        case documentVersion = "DocumentVersion"
        case hash = "Hash"
        case hashType = "HashType"
        case latestVersion = "LatestVersion"
        case name = "Name"
        case owner = "Owner"
        case parameters = "Parameters"
        case pendingReviewVersion = "PendingReviewVersion"
        case platformTypes = "PlatformTypes"
        case requires = "Requires"
        case reviewInformation = "ReviewInformation"
        case reviewStatus = "ReviewStatus"
        case schemaVersion = "SchemaVersion"
        case sha1 = "Sha1"
        case status = "Status"
        case statusInformation = "StatusInformation"
        case tags = "Tags"
        case targetType = "TargetType"
        case versionName = "VersionName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let approvedVersion = self.approvedVersion {
            try encodeContainer.encode(approvedVersion, forKey: .approvedVersion)
        }
        if let attachmentsInformation = attachmentsInformation {
            var attachmentsInformationContainer = encodeContainer.nestedUnkeyedContainer(forKey: .attachmentsInformation)
            for attachmentinformationlist0 in attachmentsInformation {
                try attachmentsInformationContainer.encode(attachmentinformationlist0)
            }
        }
        if let author = self.author {
            try encodeContainer.encode(author, forKey: .author)
        }
        if let category = category {
            var categoryContainer = encodeContainer.nestedUnkeyedContainer(forKey: .category)
            for categorylist0 in category {
                try categoryContainer.encode(categorylist0)
            }
        }
        if let categoryEnum = categoryEnum {
            var categoryEnumContainer = encodeContainer.nestedUnkeyedContainer(forKey: .categoryEnum)
            for categoryenumlist0 in categoryEnum {
                try categoryEnumContainer.encode(categoryenumlist0)
            }
        }
        if let createdDate = self.createdDate {
            try encodeContainer.encode(createdDate.timeIntervalSince1970, forKey: .createdDate)
        }
        if let defaultVersion = self.defaultVersion {
            try encodeContainer.encode(defaultVersion, forKey: .defaultVersion)
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let displayName = self.displayName {
            try encodeContainer.encode(displayName, forKey: .displayName)
        }
        if let documentFormat = self.documentFormat {
            try encodeContainer.encode(documentFormat.rawValue, forKey: .documentFormat)
        }
        if let documentType = self.documentType {
            try encodeContainer.encode(documentType.rawValue, forKey: .documentType)
        }
        if let documentVersion = self.documentVersion {
            try encodeContainer.encode(documentVersion, forKey: .documentVersion)
        }
        if let hash = self.hash {
            try encodeContainer.encode(hash, forKey: .hash)
        }
        if let hashType = self.hashType {
            try encodeContainer.encode(hashType.rawValue, forKey: .hashType)
        }
        if let latestVersion = self.latestVersion {
            try encodeContainer.encode(latestVersion, forKey: .latestVersion)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let owner = self.owner {
            try encodeContainer.encode(owner, forKey: .owner)
        }
        if let parameters = parameters {
            var parametersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .parameters)
            for documentparameterlist0 in parameters {
                try parametersContainer.encode(documentparameterlist0)
            }
        }
        if let pendingReviewVersion = self.pendingReviewVersion {
            try encodeContainer.encode(pendingReviewVersion, forKey: .pendingReviewVersion)
        }
        if let platformTypes = platformTypes {
            var platformTypesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .platformTypes)
            for platformtypelist0 in platformTypes {
                try platformTypesContainer.encode(platformtypelist0.rawValue)
            }
        }
        if let requires = requires {
            var requiresContainer = encodeContainer.nestedUnkeyedContainer(forKey: .requires)
            for documentrequireslist0 in requires {
                try requiresContainer.encode(documentrequireslist0)
            }
        }
        if let reviewInformation = reviewInformation {
            var reviewInformationContainer = encodeContainer.nestedUnkeyedContainer(forKey: .reviewInformation)
            for reviewinformationlist0 in reviewInformation {
                try reviewInformationContainer.encode(reviewinformationlist0)
            }
        }
        if let reviewStatus = self.reviewStatus {
            try encodeContainer.encode(reviewStatus.rawValue, forKey: .reviewStatus)
        }
        if let schemaVersion = self.schemaVersion {
            try encodeContainer.encode(schemaVersion, forKey: .schemaVersion)
        }
        if let sha1 = self.sha1 {
            try encodeContainer.encode(sha1, forKey: .sha1)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let statusInformation = self.statusInformation {
            try encodeContainer.encode(statusInformation, forKey: .statusInformation)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
        if let targetType = self.targetType {
            try encodeContainer.encode(targetType, forKey: .targetType)
        }
        if let versionName = self.versionName {
            try encodeContainer.encode(versionName, forKey: .versionName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sha1Decoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sha1)
        sha1 = sha1Decoded
        let hashDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .hash)
        hash = hashDecoded
        let hashTypeDecoded = try containerValues.decodeIfPresent(SsmClientTypes.DocumentHashType.self, forKey: .hashType)
        hashType = hashTypeDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let displayNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .displayName)
        displayName = displayNameDecoded
        let versionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .versionName)
        versionName = versionNameDecoded
        let ownerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .owner)
        owner = ownerDecoded
        let createdDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdDate)
        createdDate = createdDateDecoded
        let statusDecoded = try containerValues.decodeIfPresent(SsmClientTypes.DocumentStatus.self, forKey: .status)
        status = statusDecoded
        let statusInformationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .statusInformation)
        statusInformation = statusInformationDecoded
        let documentVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .documentVersion)
        documentVersion = documentVersionDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let parametersContainer = try containerValues.decodeIfPresent([SsmClientTypes.DocumentParameter?].self, forKey: .parameters)
        var parametersDecoded0:[SsmClientTypes.DocumentParameter]? = nil
        if let parametersContainer = parametersContainer {
            parametersDecoded0 = [SsmClientTypes.DocumentParameter]()
            for structure0 in parametersContainer {
                if let structure0 = structure0 {
                    parametersDecoded0?.append(structure0)
                }
            }
        }
        parameters = parametersDecoded0
        let platformTypesContainer = try containerValues.decodeIfPresent([SsmClientTypes.PlatformType?].self, forKey: .platformTypes)
        var platformTypesDecoded0:[SsmClientTypes.PlatformType]? = nil
        if let platformTypesContainer = platformTypesContainer {
            platformTypesDecoded0 = [SsmClientTypes.PlatformType]()
            for enum0 in platformTypesContainer {
                if let enum0 = enum0 {
                    platformTypesDecoded0?.append(enum0)
                }
            }
        }
        platformTypes = platformTypesDecoded0
        let documentTypeDecoded = try containerValues.decodeIfPresent(SsmClientTypes.DocumentType.self, forKey: .documentType)
        documentType = documentTypeDecoded
        let schemaVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .schemaVersion)
        schemaVersion = schemaVersionDecoded
        let latestVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .latestVersion)
        latestVersion = latestVersionDecoded
        let defaultVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .defaultVersion)
        defaultVersion = defaultVersionDecoded
        let documentFormatDecoded = try containerValues.decodeIfPresent(SsmClientTypes.DocumentFormat.self, forKey: .documentFormat)
        documentFormat = documentFormatDecoded
        let targetTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .targetType)
        targetType = targetTypeDecoded
        let tagsContainer = try containerValues.decodeIfPresent([SsmClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[SsmClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [SsmClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let attachmentsInformationContainer = try containerValues.decodeIfPresent([SsmClientTypes.AttachmentInformation?].self, forKey: .attachmentsInformation)
        var attachmentsInformationDecoded0:[SsmClientTypes.AttachmentInformation]? = nil
        if let attachmentsInformationContainer = attachmentsInformationContainer {
            attachmentsInformationDecoded0 = [SsmClientTypes.AttachmentInformation]()
            for structure0 in attachmentsInformationContainer {
                if let structure0 = structure0 {
                    attachmentsInformationDecoded0?.append(structure0)
                }
            }
        }
        attachmentsInformation = attachmentsInformationDecoded0
        let requiresContainer = try containerValues.decodeIfPresent([SsmClientTypes.DocumentRequires?].self, forKey: .requires)
        var requiresDecoded0:[SsmClientTypes.DocumentRequires]? = nil
        if let requiresContainer = requiresContainer {
            requiresDecoded0 = [SsmClientTypes.DocumentRequires]()
            for structure0 in requiresContainer {
                if let structure0 = structure0 {
                    requiresDecoded0?.append(structure0)
                }
            }
        }
        requires = requiresDecoded0
        let authorDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .author)
        author = authorDecoded
        let reviewInformationContainer = try containerValues.decodeIfPresent([SsmClientTypes.ReviewInformation?].self, forKey: .reviewInformation)
        var reviewInformationDecoded0:[SsmClientTypes.ReviewInformation]? = nil
        if let reviewInformationContainer = reviewInformationContainer {
            reviewInformationDecoded0 = [SsmClientTypes.ReviewInformation]()
            for structure0 in reviewInformationContainer {
                if let structure0 = structure0 {
                    reviewInformationDecoded0?.append(structure0)
                }
            }
        }
        reviewInformation = reviewInformationDecoded0
        let approvedVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .approvedVersion)
        approvedVersion = approvedVersionDecoded
        let pendingReviewVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pendingReviewVersion)
        pendingReviewVersion = pendingReviewVersionDecoded
        let reviewStatusDecoded = try containerValues.decodeIfPresent(SsmClientTypes.ReviewStatus.self, forKey: .reviewStatus)
        reviewStatus = reviewStatusDecoded
        let categoryContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .category)
        var categoryDecoded0:[Swift.String]? = nil
        if let categoryContainer = categoryContainer {
            categoryDecoded0 = [Swift.String]()
            for string0 in categoryContainer {
                if let string0 = string0 {
                    categoryDecoded0?.append(string0)
                }
            }
        }
        category = categoryDecoded0
        let categoryEnumContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .categoryEnum)
        var categoryEnumDecoded0:[Swift.String]? = nil
        if let categoryEnumContainer = categoryEnumContainer {
            categoryEnumDecoded0 = [Swift.String]()
            for string0 in categoryEnumContainer {
                if let string0 = string0 {
                    categoryEnumDecoded0?.append(string0)
                }
            }
        }
        categoryEnum = categoryEnumDecoded0
    }
}
