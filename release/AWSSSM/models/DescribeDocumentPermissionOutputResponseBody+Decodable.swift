// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeDocumentPermissionOutputResponseBody: Swift.Equatable {
    let accountIds: [Swift.String]?
    let accountSharingInfoList: [SsmClientTypes.AccountSharingInfo]?
    let nextToken: Swift.String?
}

extension DescribeDocumentPermissionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountIds = "AccountIds"
        case accountSharingInfoList = "AccountSharingInfoList"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let accountIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .accountIds)
        var accountIdsDecoded0:[Swift.String]? = nil
        if let accountIdsContainer = accountIdsContainer {
            accountIdsDecoded0 = [Swift.String]()
            for string0 in accountIdsContainer {
                if let string0 = string0 {
                    accountIdsDecoded0?.append(string0)
                }
            }
        }
        accountIds = accountIdsDecoded0
        let accountSharingInfoListContainer = try containerValues.decodeIfPresent([SsmClientTypes.AccountSharingInfo?].self, forKey: .accountSharingInfoList)
        var accountSharingInfoListDecoded0:[SsmClientTypes.AccountSharingInfo]? = nil
        if let accountSharingInfoListContainer = accountSharingInfoListContainer {
            accountSharingInfoListDecoded0 = [SsmClientTypes.AccountSharingInfo]()
            for structure0 in accountSharingInfoListContainer {
                if let structure0 = structure0 {
                    accountSharingInfoListDecoded0?.append(structure0)
                }
            }
        }
        accountSharingInfoList = accountSharingInfoListDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
