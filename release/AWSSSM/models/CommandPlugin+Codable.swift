// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SsmClientTypes.CommandPlugin: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case output = "Output"
        case outputS3BucketName = "OutputS3BucketName"
        case outputS3KeyPrefix = "OutputS3KeyPrefix"
        case outputS3Region = "OutputS3Region"
        case responseCode = "ResponseCode"
        case responseFinishDateTime = "ResponseFinishDateTime"
        case responseStartDateTime = "ResponseStartDateTime"
        case standardErrorUrl = "StandardErrorUrl"
        case standardOutputUrl = "StandardOutputUrl"
        case status = "Status"
        case statusDetails = "StatusDetails"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let output = self.output {
            try encodeContainer.encode(output, forKey: .output)
        }
        if let outputS3BucketName = self.outputS3BucketName {
            try encodeContainer.encode(outputS3BucketName, forKey: .outputS3BucketName)
        }
        if let outputS3KeyPrefix = self.outputS3KeyPrefix {
            try encodeContainer.encode(outputS3KeyPrefix, forKey: .outputS3KeyPrefix)
        }
        if let outputS3Region = self.outputS3Region {
            try encodeContainer.encode(outputS3Region, forKey: .outputS3Region)
        }
        if responseCode != 0 {
            try encodeContainer.encode(responseCode, forKey: .responseCode)
        }
        if let responseFinishDateTime = self.responseFinishDateTime {
            try encodeContainer.encode(responseFinishDateTime.timeIntervalSince1970, forKey: .responseFinishDateTime)
        }
        if let responseStartDateTime = self.responseStartDateTime {
            try encodeContainer.encode(responseStartDateTime.timeIntervalSince1970, forKey: .responseStartDateTime)
        }
        if let standardErrorUrl = self.standardErrorUrl {
            try encodeContainer.encode(standardErrorUrl, forKey: .standardErrorUrl)
        }
        if let standardOutputUrl = self.standardOutputUrl {
            try encodeContainer.encode(standardOutputUrl, forKey: .standardOutputUrl)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let statusDetails = self.statusDetails {
            try encodeContainer.encode(statusDetails, forKey: .statusDetails)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let statusDecoded = try containerValues.decodeIfPresent(SsmClientTypes.CommandPluginStatus.self, forKey: .status)
        status = statusDecoded
        let statusDetailsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .statusDetails)
        statusDetails = statusDetailsDecoded
        let responseCodeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .responseCode) ?? 0
        responseCode = responseCodeDecoded
        let responseStartDateTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .responseStartDateTime)
        responseStartDateTime = responseStartDateTimeDecoded
        let responseFinishDateTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .responseFinishDateTime)
        responseFinishDateTime = responseFinishDateTimeDecoded
        let outputDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .output)
        output = outputDecoded
        let standardOutputUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .standardOutputUrl)
        standardOutputUrl = standardOutputUrlDecoded
        let standardErrorUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .standardErrorUrl)
        standardErrorUrl = standardErrorUrlDecoded
        let outputS3RegionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .outputS3Region)
        outputS3Region = outputS3RegionDecoded
        let outputS3BucketNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .outputS3BucketName)
        outputS3BucketName = outputS3BucketNameDecoded
        let outputS3KeyPrefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .outputS3KeyPrefix)
        outputS3KeyPrefix = outputS3KeyPrefixDecoded
    }
}
