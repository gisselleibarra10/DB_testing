// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension SsmClientTypes {
    /// Defines an approval rule for a patch baseline.
    public struct PatchRule: Swift.Equatable {
        /// The number of days after the release date of each patch matched by the rule that the patch is marked as approved in the patch baseline. For example, a value of 7 means that patches are approved seven days after they are released. Not supported on Debian Server or Ubuntu Server.
        public var approveAfterDays: Swift.Int?
        /// The cutoff date for auto approval of released patches. Any patches released on or before this date are installed automatically. Not supported on Debian Server or Ubuntu Server. Enter dates in the format YYYY-MM-DD. For example, 2021-12-31.
        public var approveUntilDate: Swift.String?
        /// A compliance severity level for all approved patches in a patch baseline.
        public var complianceLevel: SsmClientTypes.PatchComplianceLevel?
        /// For managed nodes identified by the approval rule filters, enables a patch baseline to apply non-security updates available in the specified repository. The default value is false. Applies to Linux managed nodes only.
        public var enableNonSecurity: Swift.Bool?
        /// The patch filter group that defines the criteria for the rule.
        /// This member is required.
        public var patchFilterGroup: SsmClientTypes.PatchFilterGroup?

        public init (
            approveAfterDays: Swift.Int? = nil,
            approveUntilDate: Swift.String? = nil,
            complianceLevel: SsmClientTypes.PatchComplianceLevel? = nil,
            enableNonSecurity: Swift.Bool? = nil,
            patchFilterGroup: SsmClientTypes.PatchFilterGroup? = nil
        )
        {
            self.approveAfterDays = approveAfterDays
            self.approveUntilDate = approveUntilDate
            self.complianceLevel = complianceLevel
            self.enableNonSecurity = enableNonSecurity
            self.patchFilterGroup = patchFilterGroup
        }
    }

}
