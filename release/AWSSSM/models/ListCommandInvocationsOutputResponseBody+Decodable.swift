// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListCommandInvocationsOutputResponseBody: Swift.Equatable {
    let commandInvocations: [SsmClientTypes.CommandInvocation]?
    let nextToken: Swift.String?
}

extension ListCommandInvocationsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case commandInvocations = "CommandInvocations"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let commandInvocationsContainer = try containerValues.decodeIfPresent([SsmClientTypes.CommandInvocation?].self, forKey: .commandInvocations)
        var commandInvocationsDecoded0:[SsmClientTypes.CommandInvocation]? = nil
        if let commandInvocationsContainer = commandInvocationsContainer {
            commandInvocationsDecoded0 = [SsmClientTypes.CommandInvocation]()
            for structure0 in commandInvocationsContainer {
                if let structure0 = structure0 {
                    commandInvocationsDecoded0?.append(structure0)
                }
            }
        }
        commandInvocations = commandInvocationsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
