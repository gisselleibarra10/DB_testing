// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetMaintenanceWindowExecutionTaskOutputResponseBody: Swift.Equatable {
    let windowExecutionId: Swift.String?
    let taskExecutionId: Swift.String?
    let taskArn: Swift.String?
    let serviceRole: Swift.String?
    let type: SsmClientTypes.MaintenanceWindowTaskType?
    let taskParameters: [[Swift.String:SsmClientTypes.MaintenanceWindowTaskParameterValueExpression]]?
    let priority: Swift.Int
    let maxConcurrency: Swift.String?
    let maxErrors: Swift.String?
    let status: SsmClientTypes.MaintenanceWindowExecutionStatus?
    let statusDetails: Swift.String?
    let startTime: ClientRuntime.Date?
    let endTime: ClientRuntime.Date?
    let alarmConfiguration: SsmClientTypes.AlarmConfiguration?
    let triggeredAlarms: [SsmClientTypes.AlarmStateInformation]?
}

extension GetMaintenanceWindowExecutionTaskOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case alarmConfiguration = "AlarmConfiguration"
        case endTime = "EndTime"
        case maxConcurrency = "MaxConcurrency"
        case maxErrors = "MaxErrors"
        case priority = "Priority"
        case serviceRole = "ServiceRole"
        case startTime = "StartTime"
        case status = "Status"
        case statusDetails = "StatusDetails"
        case taskArn = "TaskArn"
        case taskExecutionId = "TaskExecutionId"
        case taskParameters = "TaskParameters"
        case triggeredAlarms = "TriggeredAlarms"
        case type = "Type"
        case windowExecutionId = "WindowExecutionId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let windowExecutionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .windowExecutionId)
        windowExecutionId = windowExecutionIdDecoded
        let taskExecutionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .taskExecutionId)
        taskExecutionId = taskExecutionIdDecoded
        let taskArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .taskArn)
        taskArn = taskArnDecoded
        let serviceRoleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serviceRole)
        serviceRole = serviceRoleDecoded
        let typeDecoded = try containerValues.decodeIfPresent(SsmClientTypes.MaintenanceWindowTaskType.self, forKey: .type)
        type = typeDecoded
        let taskParametersContainer = try containerValues.decodeIfPresent([[Swift.String: SsmClientTypes.MaintenanceWindowTaskParameterValueExpression?]?].self, forKey: .taskParameters)
        var taskParametersDecoded0:[[Swift.String:SsmClientTypes.MaintenanceWindowTaskParameterValueExpression]]? = nil
        if let taskParametersContainer = taskParametersContainer {
            taskParametersDecoded0 = [[Swift.String:SsmClientTypes.MaintenanceWindowTaskParameterValueExpression]]()
            for map0 in taskParametersContainer {
                var taskParametersContainerDecoded0: [Swift.String: SsmClientTypes.MaintenanceWindowTaskParameterValueExpression]? = nil
                if let map0 = map0 {
                    taskParametersContainerDecoded0 = [Swift.String: SsmClientTypes.MaintenanceWindowTaskParameterValueExpression]()
                    for (key1, maintenancewindowtaskparametervalueexpression1) in map0 {
                        if let maintenancewindowtaskparametervalueexpression1 = maintenancewindowtaskparametervalueexpression1 {
                            taskParametersContainerDecoded0?[key1] = maintenancewindowtaskparametervalueexpression1
                        }
                    }
                }
                if let taskParametersContainerDecoded0 = taskParametersContainerDecoded0 {
                    taskParametersDecoded0?.append(taskParametersContainerDecoded0)
                }
            }
        }
        taskParameters = taskParametersDecoded0
        let priorityDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .priority) ?? 0
        priority = priorityDecoded
        let maxConcurrencyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .maxConcurrency)
        maxConcurrency = maxConcurrencyDecoded
        let maxErrorsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .maxErrors)
        maxErrors = maxErrorsDecoded
        let statusDecoded = try containerValues.decodeIfPresent(SsmClientTypes.MaintenanceWindowExecutionStatus.self, forKey: .status)
        status = statusDecoded
        let statusDetailsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .statusDetails)
        statusDetails = statusDetailsDecoded
        let startTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .startTime)
        startTime = startTimeDecoded
        let endTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .endTime)
        endTime = endTimeDecoded
        let alarmConfigurationDecoded = try containerValues.decodeIfPresent(SsmClientTypes.AlarmConfiguration.self, forKey: .alarmConfiguration)
        alarmConfiguration = alarmConfigurationDecoded
        let triggeredAlarmsContainer = try containerValues.decodeIfPresent([SsmClientTypes.AlarmStateInformation?].self, forKey: .triggeredAlarms)
        var triggeredAlarmsDecoded0:[SsmClientTypes.AlarmStateInformation]? = nil
        if let triggeredAlarmsContainer = triggeredAlarmsContainer {
            triggeredAlarmsDecoded0 = [SsmClientTypes.AlarmStateInformation]()
            for structure0 in triggeredAlarmsContainer {
                if let structure0 = structure0 {
                    triggeredAlarmsDecoded0?.append(structure0)
                }
            }
        }
        triggeredAlarms = triggeredAlarmsDecoded0
    }
}
