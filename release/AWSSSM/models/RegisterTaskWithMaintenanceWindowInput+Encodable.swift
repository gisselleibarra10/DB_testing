// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension RegisterTaskWithMaintenanceWindowInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case alarmConfiguration = "AlarmConfiguration"
        case clientToken = "ClientToken"
        case cutoffBehavior = "CutoffBehavior"
        case description = "Description"
        case loggingInfo = "LoggingInfo"
        case maxConcurrency = "MaxConcurrency"
        case maxErrors = "MaxErrors"
        case name = "Name"
        case priority = "Priority"
        case serviceRoleArn = "ServiceRoleArn"
        case targets = "Targets"
        case taskArn = "TaskArn"
        case taskInvocationParameters = "TaskInvocationParameters"
        case taskParameters = "TaskParameters"
        case taskType = "TaskType"
        case windowId = "WindowId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let alarmConfiguration = self.alarmConfiguration {
            try encodeContainer.encode(alarmConfiguration, forKey: .alarmConfiguration)
        }
        if let clientToken = self.clientToken {
            try encodeContainer.encode(clientToken, forKey: .clientToken)
        }
        if let cutoffBehavior = self.cutoffBehavior {
            try encodeContainer.encode(cutoffBehavior.rawValue, forKey: .cutoffBehavior)
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let loggingInfo = self.loggingInfo {
            try encodeContainer.encode(loggingInfo, forKey: .loggingInfo)
        }
        if let maxConcurrency = self.maxConcurrency {
            try encodeContainer.encode(maxConcurrency, forKey: .maxConcurrency)
        }
        if let maxErrors = self.maxErrors {
            try encodeContainer.encode(maxErrors, forKey: .maxErrors)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let priority = self.priority {
            try encodeContainer.encode(priority, forKey: .priority)
        }
        if let serviceRoleArn = self.serviceRoleArn {
            try encodeContainer.encode(serviceRoleArn, forKey: .serviceRoleArn)
        }
        if let targets = targets {
            var targetsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .targets)
            for targets0 in targets {
                try targetsContainer.encode(targets0)
            }
        }
        if let taskArn = self.taskArn {
            try encodeContainer.encode(taskArn, forKey: .taskArn)
        }
        if let taskInvocationParameters = self.taskInvocationParameters {
            try encodeContainer.encode(taskInvocationParameters, forKey: .taskInvocationParameters)
        }
        if let taskParameters = taskParameters {
            var taskParametersContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .taskParameters)
            for (dictKey0, maintenancewindowtaskparameters0) in taskParameters {
                try taskParametersContainer.encode(maintenancewindowtaskparameters0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let taskType = self.taskType {
            try encodeContainer.encode(taskType.rawValue, forKey: .taskType)
        }
        if let windowId = self.windowId {
            try encodeContainer.encode(windowId, forKey: .windowId)
        }
    }
}
