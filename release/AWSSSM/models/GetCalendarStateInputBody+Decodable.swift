// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetCalendarStateInputBody: Swift.Equatable {
    let calendarNames: [Swift.String]?
    let atTime: Swift.String?
}

extension GetCalendarStateInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case atTime = "AtTime"
        case calendarNames = "CalendarNames"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let calendarNamesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .calendarNames)
        var calendarNamesDecoded0:[Swift.String]? = nil
        if let calendarNamesContainer = calendarNamesContainer {
            calendarNamesDecoded0 = [Swift.String]()
            for string0 in calendarNamesContainer {
                if let string0 = string0 {
                    calendarNamesDecoded0?.append(string0)
                }
            }
        }
        calendarNames = calendarNamesDecoded0
        let atTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .atTime)
        atTime = atTimeDecoded
    }
}
