// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ModifyDocumentPermissionInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountIdsToAdd = "AccountIdsToAdd"
        case accountIdsToRemove = "AccountIdsToRemove"
        case name = "Name"
        case permissionType = "PermissionType"
        case sharedDocumentVersion = "SharedDocumentVersion"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accountIdsToAdd = accountIdsToAdd {
            var accountIdsToAddContainer = encodeContainer.nestedUnkeyedContainer(forKey: .accountIdsToAdd)
            for accountidlist0 in accountIdsToAdd {
                try accountIdsToAddContainer.encode(accountidlist0)
            }
        }
        if let accountIdsToRemove = accountIdsToRemove {
            var accountIdsToRemoveContainer = encodeContainer.nestedUnkeyedContainer(forKey: .accountIdsToRemove)
            for accountidlist0 in accountIdsToRemove {
                try accountIdsToRemoveContainer.encode(accountidlist0)
            }
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let permissionType = self.permissionType {
            try encodeContainer.encode(permissionType.rawValue, forKey: .permissionType)
        }
        if let sharedDocumentVersion = self.sharedDocumentVersion {
            try encodeContainer.encode(sharedDocumentVersion, forKey: .sharedDocumentVersion)
        }
    }
}
