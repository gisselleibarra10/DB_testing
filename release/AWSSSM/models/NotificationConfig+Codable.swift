// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SsmClientTypes.NotificationConfig: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case notificationArn = "NotificationArn"
        case notificationEvents = "NotificationEvents"
        case notificationType = "NotificationType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let notificationArn = self.notificationArn {
            try encodeContainer.encode(notificationArn, forKey: .notificationArn)
        }
        if let notificationEvents = notificationEvents {
            var notificationEventsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .notificationEvents)
            for notificationeventlist0 in notificationEvents {
                try notificationEventsContainer.encode(notificationeventlist0.rawValue)
            }
        }
        if let notificationType = self.notificationType {
            try encodeContainer.encode(notificationType.rawValue, forKey: .notificationType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let notificationArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .notificationArn)
        notificationArn = notificationArnDecoded
        let notificationEventsContainer = try containerValues.decodeIfPresent([SsmClientTypes.NotificationEvent?].self, forKey: .notificationEvents)
        var notificationEventsDecoded0:[SsmClientTypes.NotificationEvent]? = nil
        if let notificationEventsContainer = notificationEventsContainer {
            notificationEventsDecoded0 = [SsmClientTypes.NotificationEvent]()
            for enum0 in notificationEventsContainer {
                if let enum0 = enum0 {
                    notificationEventsDecoded0?.append(enum0)
                }
            }
        }
        notificationEvents = notificationEventsDecoded0
        let notificationTypeDecoded = try containerValues.decodeIfPresent(SsmClientTypes.NotificationType.self, forKey: .notificationType)
        notificationType = notificationTypeDecoded
    }
}
