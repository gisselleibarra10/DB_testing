// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetOpsSummaryInputBody: Swift.Equatable {
    let syncName: Swift.String?
    let filters: [SsmClientTypes.OpsFilter]?
    let aggregators: [SsmClientTypes.OpsAggregator]?
    let resultAttributes: [SsmClientTypes.OpsResultAttribute]?
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
}

extension GetOpsSummaryInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case aggregators = "Aggregators"
        case filters = "Filters"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case resultAttributes = "ResultAttributes"
        case syncName = "SyncName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let syncNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .syncName)
        syncName = syncNameDecoded
        let filtersContainer = try containerValues.decodeIfPresent([SsmClientTypes.OpsFilter?].self, forKey: .filters)
        var filtersDecoded0:[SsmClientTypes.OpsFilter]? = nil
        if let filtersContainer = filtersContainer {
            filtersDecoded0 = [SsmClientTypes.OpsFilter]()
            for structure0 in filtersContainer {
                if let structure0 = structure0 {
                    filtersDecoded0?.append(structure0)
                }
            }
        }
        filters = filtersDecoded0
        let aggregatorsContainer = try containerValues.decodeIfPresent([SsmClientTypes.OpsAggregator?].self, forKey: .aggregators)
        var aggregatorsDecoded0:[SsmClientTypes.OpsAggregator]? = nil
        if let aggregatorsContainer = aggregatorsContainer {
            aggregatorsDecoded0 = [SsmClientTypes.OpsAggregator]()
            for structure0 in aggregatorsContainer {
                if let structure0 = structure0 {
                    aggregatorsDecoded0?.append(structure0)
                }
            }
        }
        aggregators = aggregatorsDecoded0
        let resultAttributesContainer = try containerValues.decodeIfPresent([SsmClientTypes.OpsResultAttribute?].self, forKey: .resultAttributes)
        var resultAttributesDecoded0:[SsmClientTypes.OpsResultAttribute]? = nil
        if let resultAttributesContainer = resultAttributesContainer {
            resultAttributesDecoded0 = [SsmClientTypes.OpsResultAttribute]()
            for structure0 in resultAttributesContainer {
                if let structure0 = structure0 {
                    resultAttributesDecoded0?.append(structure0)
                }
            }
        }
        resultAttributes = resultAttributesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
    }
}
