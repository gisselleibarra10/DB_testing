// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SsmClientTypes.OpsAggregator: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case aggregatorType = "AggregatorType"
        case aggregators = "Aggregators"
        case attributeName = "AttributeName"
        case filters = "Filters"
        case typeName = "TypeName"
        case values = "Values"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let aggregatorType = self.aggregatorType {
            try encodeContainer.encode(aggregatorType, forKey: .aggregatorType)
        }
        if let aggregators = aggregators {
            var aggregatorsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .aggregators)
            for opsaggregatorlist0 in aggregators {
                try aggregatorsContainer.encode(opsaggregatorlist0)
            }
        }
        if let attributeName = self.attributeName {
            try encodeContainer.encode(attributeName, forKey: .attributeName)
        }
        if let filters = filters {
            var filtersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .filters)
            for opsfilterlist0 in filters {
                try filtersContainer.encode(opsfilterlist0)
            }
        }
        if let typeName = self.typeName {
            try encodeContainer.encode(typeName, forKey: .typeName)
        }
        if let values = values {
            var valuesContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .values)
            for (dictKey0, opsaggregatorvaluemap0) in values {
                try valuesContainer.encode(opsaggregatorvaluemap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let aggregatorTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .aggregatorType)
        aggregatorType = aggregatorTypeDecoded
        let typeNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .typeName)
        typeName = typeNameDecoded
        let attributeNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .attributeName)
        attributeName = attributeNameDecoded
        let valuesContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .values)
        var valuesDecoded0: [Swift.String:Swift.String]? = nil
        if let valuesContainer = valuesContainer {
            valuesDecoded0 = [Swift.String:Swift.String]()
            for (key0, opsaggregatorvalue0) in valuesContainer {
                if let opsaggregatorvalue0 = opsaggregatorvalue0 {
                    valuesDecoded0?[key0] = opsaggregatorvalue0
                }
            }
        }
        values = valuesDecoded0
        let filtersContainer = try containerValues.decodeIfPresent([SsmClientTypes.OpsFilter?].self, forKey: .filters)
        var filtersDecoded0:[SsmClientTypes.OpsFilter]? = nil
        if let filtersContainer = filtersContainer {
            filtersDecoded0 = [SsmClientTypes.OpsFilter]()
            for structure0 in filtersContainer {
                if let structure0 = structure0 {
                    filtersDecoded0?.append(structure0)
                }
            }
        }
        filters = filtersDecoded0
        let aggregatorsContainer = try containerValues.decodeIfPresent([SsmClientTypes.OpsAggregator?].self, forKey: .aggregators)
        var aggregatorsDecoded0:[SsmClientTypes.OpsAggregator]? = nil
        if let aggregatorsContainer = aggregatorsContainer {
            aggregatorsDecoded0 = [SsmClientTypes.OpsAggregator]()
            for structure0 in aggregatorsContainer {
                if let structure0 = structure0 {
                    aggregatorsDecoded0?.append(structure0)
                }
            }
        }
        aggregators = aggregatorsDecoded0
    }
}
