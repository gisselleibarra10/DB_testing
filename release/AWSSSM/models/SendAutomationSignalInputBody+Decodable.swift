// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct SendAutomationSignalInputBody: Swift.Equatable {
    let automationExecutionId: Swift.String?
    let signalType: SsmClientTypes.SignalType?
    let payload: [Swift.String:[Swift.String]]?
}

extension SendAutomationSignalInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case automationExecutionId = "AutomationExecutionId"
        case payload = "Payload"
        case signalType = "SignalType"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let automationExecutionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .automationExecutionId)
        automationExecutionId = automationExecutionIdDecoded
        let signalTypeDecoded = try containerValues.decodeIfPresent(SsmClientTypes.SignalType.self, forKey: .signalType)
        signalType = signalTypeDecoded
        let payloadContainer = try containerValues.decodeIfPresent([Swift.String: [Swift.String?]?].self, forKey: .payload)
        var payloadDecoded0: [Swift.String:[Swift.String]]? = nil
        if let payloadContainer = payloadContainer {
            payloadDecoded0 = [Swift.String:[Swift.String]]()
            for (key0, automationparametervaluelist0) in payloadContainer {
                var automationparametervaluelist0Decoded0: [Swift.String]? = nil
                if let automationparametervaluelist0 = automationparametervaluelist0 {
                    automationparametervaluelist0Decoded0 = [Swift.String]()
                    for string1 in automationparametervaluelist0 {
                        if let string1 = string1 {
                            automationparametervaluelist0Decoded0?.append(string1)
                        }
                    }
                }
                payloadDecoded0?[key0] = automationparametervaluelist0Decoded0
            }
        }
        payload = payloadDecoded0
    }
}
