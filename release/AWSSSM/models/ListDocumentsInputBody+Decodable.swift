// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListDocumentsInputBody: Swift.Equatable {
    let documentFilterList: [SsmClientTypes.DocumentFilter]?
    let filters: [SsmClientTypes.DocumentKeyValuesFilter]?
    let maxResults: Swift.Int?
    let nextToken: Swift.String?
}

extension ListDocumentsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case documentFilterList = "DocumentFilterList"
        case filters = "Filters"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let documentFilterListContainer = try containerValues.decodeIfPresent([SsmClientTypes.DocumentFilter?].self, forKey: .documentFilterList)
        var documentFilterListDecoded0:[SsmClientTypes.DocumentFilter]? = nil
        if let documentFilterListContainer = documentFilterListContainer {
            documentFilterListDecoded0 = [SsmClientTypes.DocumentFilter]()
            for structure0 in documentFilterListContainer {
                if let structure0 = structure0 {
                    documentFilterListDecoded0?.append(structure0)
                }
            }
        }
        documentFilterList = documentFilterListDecoded0
        let filtersContainer = try containerValues.decodeIfPresent([SsmClientTypes.DocumentKeyValuesFilter?].self, forKey: .filters)
        var filtersDecoded0:[SsmClientTypes.DocumentKeyValuesFilter]? = nil
        if let filtersContainer = filtersContainer {
            filtersDecoded0 = [SsmClientTypes.DocumentKeyValuesFilter]()
            for structure0 in filtersContainer {
                if let structure0 = structure0 {
                    filtersDecoded0?.append(structure0)
                }
            }
        }
        filters = filtersDecoded0
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
