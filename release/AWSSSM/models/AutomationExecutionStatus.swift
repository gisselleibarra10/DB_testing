// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension SsmClientTypes {
    public enum AutomationExecutionStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case approved
        case cancelled
        case cancelling
        case changeCalendarOverrideApproved
        case changeCalendarOverrideRejected
        case completedWithFailure
        case completedWithSuccess
        case failed
        case inprogress
        case pending
        case pendingApproval
        case pendingChangeCalendarOverride
        case rejected
        case runbookInprogress
        case scheduled
        case success
        case timedout
        case waiting
        case sdkUnknown(Swift.String)

        public static var allCases: [AutomationExecutionStatus] {
            return [
                .approved,
                .cancelled,
                .cancelling,
                .changeCalendarOverrideApproved,
                .changeCalendarOverrideRejected,
                .completedWithFailure,
                .completedWithSuccess,
                .failed,
                .inprogress,
                .pending,
                .pendingApproval,
                .pendingChangeCalendarOverride,
                .rejected,
                .runbookInprogress,
                .scheduled,
                .success,
                .timedout,
                .waiting,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .approved: return "Approved"
            case .cancelled: return "Cancelled"
            case .cancelling: return "Cancelling"
            case .changeCalendarOverrideApproved: return "ChangeCalendarOverrideApproved"
            case .changeCalendarOverrideRejected: return "ChangeCalendarOverrideRejected"
            case .completedWithFailure: return "CompletedWithFailure"
            case .completedWithSuccess: return "CompletedWithSuccess"
            case .failed: return "Failed"
            case .inprogress: return "InProgress"
            case .pending: return "Pending"
            case .pendingApproval: return "PendingApproval"
            case .pendingChangeCalendarOverride: return "PendingChangeCalendarOverride"
            case .rejected: return "Rejected"
            case .runbookInprogress: return "RunbookInProgress"
            case .scheduled: return "Scheduled"
            case .success: return "Success"
            case .timedout: return "TimedOut"
            case .waiting: return "Waiting"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = AutomationExecutionStatus(rawValue: rawValue) ?? AutomationExecutionStatus.sdkUnknown(rawValue)
        }
    }
}
