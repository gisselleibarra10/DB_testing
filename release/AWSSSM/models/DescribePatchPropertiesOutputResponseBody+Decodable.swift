// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribePatchPropertiesOutputResponseBody: Swift.Equatable {
    let properties: [[Swift.String:Swift.String]]?
    let nextToken: Swift.String?
}

extension DescribePatchPropertiesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case properties = "Properties"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let propertiesContainer = try containerValues.decodeIfPresent([[Swift.String: Swift.String?]?].self, forKey: .properties)
        var propertiesDecoded0:[[Swift.String:Swift.String]]? = nil
        if let propertiesContainer = propertiesContainer {
            propertiesDecoded0 = [[Swift.String:Swift.String]]()
            for map0 in propertiesContainer {
                var propertiesContainerDecoded0: [Swift.String: Swift.String]? = nil
                if let map0 = map0 {
                    propertiesContainerDecoded0 = [Swift.String: Swift.String]()
                    for (key1, attributevalue1) in map0 {
                        if let attributevalue1 = attributevalue1 {
                            propertiesContainerDecoded0?[key1] = attributevalue1
                        }
                    }
                }
                if let propertiesContainerDecoded0 = propertiesContainerDecoded0 {
                    propertiesDecoded0?.append(propertiesContainerDecoded0)
                }
            }
        }
        properties = propertiesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
