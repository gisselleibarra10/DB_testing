// Code generated by smithy-swift-codegen. DO NOT EDIT!

import AWSClientRuntime
import ClientRuntime

extension PutParameterOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension PutParameterOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "HierarchyLevelLimitExceededException" : self = .hierarchyLevelLimitExceededException(try HierarchyLevelLimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "HierarchyTypeMismatchException" : self = .hierarchyTypeMismatchException(try HierarchyTypeMismatchException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "IncompatiblePolicyException" : self = .incompatiblePolicyException(try IncompatiblePolicyException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidAllowedPatternException" : self = .invalidAllowedPatternException(try InvalidAllowedPatternException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidKeyId" : self = .invalidKeyId(try InvalidKeyId(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidPolicyAttributeException" : self = .invalidPolicyAttributeException(try InvalidPolicyAttributeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidPolicyTypeException" : self = .invalidPolicyTypeException(try InvalidPolicyTypeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ParameterAlreadyExists" : self = .parameterAlreadyExists(try ParameterAlreadyExists(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ParameterLimitExceeded" : self = .parameterLimitExceeded(try ParameterLimitExceeded(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ParameterMaxVersionLimitExceeded" : self = .parameterMaxVersionLimitExceeded(try ParameterMaxVersionLimitExceeded(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ParameterPatternMismatchException" : self = .parameterPatternMismatchException(try ParameterPatternMismatchException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PoliciesLimitExceededException" : self = .policiesLimitExceededException(try PoliciesLimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyUpdates" : self = .tooManyUpdates(try TooManyUpdates(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedParameterType" : self = .unsupportedParameterType(try UnsupportedParameterType(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}
