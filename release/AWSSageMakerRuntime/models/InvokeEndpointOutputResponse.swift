// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct InvokeEndpointOutputResponse: Swift.Equatable {
    /// Includes the inference provided by the model. For information about the format of the response body, see [Common Data Formats-Inference](https://docs.aws.amazon.com/sagemaker/latest/dg/cdf-inference.html).
    /// This member is required.
    public var body: ClientRuntime.Data?
    /// The MIME type of the inference returned in the response body.
    public var contentType: Swift.String?
    /// Provides additional information in the response about the inference returned by a model hosted at an Amazon SageMaker endpoint. The information is an opaque value that is forwarded verbatim. You could use this value, for example, to return an ID received in the CustomAttributes header of a request or other metadata that a service endpoint was programmed to produce. The value must consist of no more than 1024 visible US-ASCII characters as specified in [Section 3.3.6. Field Value Components](https://tools.ietf.org/html/rfc7230#section-3.2.6) of the Hypertext Transfer Protocol (HTTP/1.1). If the customer wants the custom attribute returned, the model must set the custom attribute to be included on the way back. The code in your model is responsible for setting or updating any custom attributes in the response. If your code does not set this value in the response, an empty value is returned. For example, if a custom attribute represents the trace ID, your model can prepend the custom attribute with Trace ID: in your post-processing function. This feature is currently supported in the Amazon Web Services SDKs but not in the Amazon SageMaker Python SDK.
    public var customAttributes: Swift.String?
    /// Identifies the production variant that was invoked.
    public var invokedProductionVariant: Swift.String?

    public init (
        body: ClientRuntime.Data? = nil,
        contentType: Swift.String? = nil,
        customAttributes: Swift.String? = nil,
        invokedProductionVariant: Swift.String? = nil
    )
    {
        self.body = body
        self.contentType = contentType
        self.customAttributes = customAttributes
        self.invokedProductionVariant = invokedProductionVariant
    }
}
