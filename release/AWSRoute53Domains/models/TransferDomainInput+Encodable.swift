// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension TransferDomainInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case adminContact = "AdminContact"
        case authCode = "AuthCode"
        case autoRenew = "AutoRenew"
        case domainName = "DomainName"
        case durationInYears = "DurationInYears"
        case idnLangCode = "IdnLangCode"
        case nameservers = "Nameservers"
        case privacyProtectAdminContact = "PrivacyProtectAdminContact"
        case privacyProtectRegistrantContact = "PrivacyProtectRegistrantContact"
        case privacyProtectTechContact = "PrivacyProtectTechContact"
        case registrantContact = "RegistrantContact"
        case techContact = "TechContact"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let adminContact = self.adminContact {
            try encodeContainer.encode(adminContact, forKey: .adminContact)
        }
        if let authCode = self.authCode {
            try encodeContainer.encode(authCode, forKey: .authCode)
        }
        if let autoRenew = self.autoRenew {
            try encodeContainer.encode(autoRenew, forKey: .autoRenew)
        }
        if let domainName = self.domainName {
            try encodeContainer.encode(domainName, forKey: .domainName)
        }
        if let durationInYears = self.durationInYears {
            try encodeContainer.encode(durationInYears, forKey: .durationInYears)
        }
        if let idnLangCode = self.idnLangCode {
            try encodeContainer.encode(idnLangCode, forKey: .idnLangCode)
        }
        if let nameservers = nameservers {
            var nameserversContainer = encodeContainer.nestedUnkeyedContainer(forKey: .nameservers)
            for nameserverlist0 in nameservers {
                try nameserversContainer.encode(nameserverlist0)
            }
        }
        if let privacyProtectAdminContact = self.privacyProtectAdminContact {
            try encodeContainer.encode(privacyProtectAdminContact, forKey: .privacyProtectAdminContact)
        }
        if let privacyProtectRegistrantContact = self.privacyProtectRegistrantContact {
            try encodeContainer.encode(privacyProtectRegistrantContact, forKey: .privacyProtectRegistrantContact)
        }
        if let privacyProtectTechContact = self.privacyProtectTechContact {
            try encodeContainer.encode(privacyProtectTechContact, forKey: .privacyProtectTechContact)
        }
        if let registrantContact = self.registrantContact {
            try encodeContainer.encode(registrantContact, forKey: .registrantContact)
        }
        if let techContact = self.techContact {
            try encodeContainer.encode(techContact, forKey: .techContact)
        }
    }
}
