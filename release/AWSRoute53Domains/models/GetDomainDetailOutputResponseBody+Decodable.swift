// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetDomainDetailOutputResponseBody: Swift.Equatable {
    let domainName: Swift.String?
    let nameservers: [Route53DomainsClientTypes.Nameserver]?
    let autoRenew: Swift.Bool?
    let adminContact: Route53DomainsClientTypes.ContactDetail?
    let registrantContact: Route53DomainsClientTypes.ContactDetail?
    let techContact: Route53DomainsClientTypes.ContactDetail?
    let adminPrivacy: Swift.Bool?
    let registrantPrivacy: Swift.Bool?
    let techPrivacy: Swift.Bool?
    let registrarName: Swift.String?
    let whoIsServer: Swift.String?
    let registrarUrl: Swift.String?
    let abuseContactEmail: Swift.String?
    let abuseContactPhone: Swift.String?
    let registryDomainId: Swift.String?
    let creationDate: ClientRuntime.Date?
    let updatedDate: ClientRuntime.Date?
    let expirationDate: ClientRuntime.Date?
    let reseller: Swift.String?
    let dnsSec: Swift.String?
    let statusList: [Swift.String]?
}

extension GetDomainDetailOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case abuseContactEmail = "AbuseContactEmail"
        case abuseContactPhone = "AbuseContactPhone"
        case adminContact = "AdminContact"
        case adminPrivacy = "AdminPrivacy"
        case autoRenew = "AutoRenew"
        case creationDate = "CreationDate"
        case dnsSec = "DnsSec"
        case domainName = "DomainName"
        case expirationDate = "ExpirationDate"
        case nameservers = "Nameservers"
        case registrantContact = "RegistrantContact"
        case registrantPrivacy = "RegistrantPrivacy"
        case registrarName = "RegistrarName"
        case registrarUrl = "RegistrarUrl"
        case registryDomainId = "RegistryDomainId"
        case reseller = "Reseller"
        case statusList = "StatusList"
        case techContact = "TechContact"
        case techPrivacy = "TechPrivacy"
        case updatedDate = "UpdatedDate"
        case whoIsServer = "WhoIsServer"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domainName)
        domainName = domainNameDecoded
        let nameserversContainer = try containerValues.decodeIfPresent([Route53DomainsClientTypes.Nameserver?].self, forKey: .nameservers)
        var nameserversDecoded0:[Route53DomainsClientTypes.Nameserver]? = nil
        if let nameserversContainer = nameserversContainer {
            nameserversDecoded0 = [Route53DomainsClientTypes.Nameserver]()
            for structure0 in nameserversContainer {
                if let structure0 = structure0 {
                    nameserversDecoded0?.append(structure0)
                }
            }
        }
        nameservers = nameserversDecoded0
        let autoRenewDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .autoRenew)
        autoRenew = autoRenewDecoded
        let adminContactDecoded = try containerValues.decodeIfPresent(Route53DomainsClientTypes.ContactDetail.self, forKey: .adminContact)
        adminContact = adminContactDecoded
        let registrantContactDecoded = try containerValues.decodeIfPresent(Route53DomainsClientTypes.ContactDetail.self, forKey: .registrantContact)
        registrantContact = registrantContactDecoded
        let techContactDecoded = try containerValues.decodeIfPresent(Route53DomainsClientTypes.ContactDetail.self, forKey: .techContact)
        techContact = techContactDecoded
        let adminPrivacyDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .adminPrivacy)
        adminPrivacy = adminPrivacyDecoded
        let registrantPrivacyDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .registrantPrivacy)
        registrantPrivacy = registrantPrivacyDecoded
        let techPrivacyDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .techPrivacy)
        techPrivacy = techPrivacyDecoded
        let registrarNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .registrarName)
        registrarName = registrarNameDecoded
        let whoIsServerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .whoIsServer)
        whoIsServer = whoIsServerDecoded
        let registrarUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .registrarUrl)
        registrarUrl = registrarUrlDecoded
        let abuseContactEmailDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .abuseContactEmail)
        abuseContactEmail = abuseContactEmailDecoded
        let abuseContactPhoneDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .abuseContactPhone)
        abuseContactPhone = abuseContactPhoneDecoded
        let registryDomainIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .registryDomainId)
        registryDomainId = registryDomainIdDecoded
        let creationDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationDate)
        creationDate = creationDateDecoded
        let updatedDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .updatedDate)
        updatedDate = updatedDateDecoded
        let expirationDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .expirationDate)
        expirationDate = expirationDateDecoded
        let resellerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .reseller)
        reseller = resellerDecoded
        let dnsSecDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dnsSec)
        dnsSec = dnsSecDecoded
        let statusListContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .statusList)
        var statusListDecoded0:[Swift.String]? = nil
        if let statusListContainer = statusListContainer {
            statusListDecoded0 = [Swift.String]()
            for string0 in statusListContainer {
                if let string0 = string0 {
                    statusListDecoded0?.append(string0)
                }
            }
        }
        statusList = statusListDecoded0
    }
}
