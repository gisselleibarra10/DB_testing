// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// The TransferDomain request includes the following elements.
public struct TransferDomainInput: Swift.Equatable {
    /// Provides detailed contact information.
    /// This member is required.
    public var adminContact: Route53DomainsClientTypes.ContactDetail?
    /// The authorization code for the domain. You get this value from the current registrar.
    public var authCode: Swift.String?
    /// Indicates whether the domain will be automatically renewed (true) or not (false). Autorenewal only takes effect after the account is charged. Default: true
    public var autoRenew: Swift.Bool?
    /// The name of the domain that you want to transfer to Route 53. The top-level domain (TLD), such as .com, must be a TLD that Route 53 supports. For a list of supported TLDs, see [Domains that You Can Register with Amazon Route 53](https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/registrar-tld-list.html) in the Amazon Route 53 Developer Guide. The domain name can contain only the following characters:
    ///
    /// * Letters a through z. Domain names are not case sensitive.
    ///
    /// * Numbers 0 through 9.
    ///
    /// * Hyphen (-). You can't specify a hyphen at the beginning or end of a label.
    ///
    /// * Period (.) to separate the labels in the name, such as the . in example.com.
    /// This member is required.
    public var domainName: Swift.String?
    /// The number of years that you want to register the domain for. Domains are registered for a minimum of one year. The maximum period depends on the top-level domain. Default: 1
    /// This member is required.
    public var durationInYears: Swift.Int?
    /// Reserved for future use.
    public var idnLangCode: Swift.String?
    /// Contains details for the host and glue IP addresses.
    public var nameservers: [Route53DomainsClientTypes.Nameserver]?
    /// Whether you want to conceal contact information from WHOIS queries. If you specify true, WHOIS ("who is") queries return contact information either for Amazon Registrar (for .com, .net, and .org domains) or for our registrar associate, Gandi (for all other TLDs). If you specify false, WHOIS queries return the information that you entered for the admin contact. You must specify the same privacy setting for the administrative, registrant, and technical contacts. Default: true
    public var privacyProtectAdminContact: Swift.Bool?
    /// Whether you want to conceal contact information from WHOIS queries. If you specify true, WHOIS ("who is") queries return contact information either for Amazon Registrar (for .com, .net, and .org domains) or for our registrar associate, Gandi (for all other TLDs). If you specify false, WHOIS queries return the information that you entered for the registrant contact (domain owner). You must specify the same privacy setting for the administrative, registrant, and technical contacts. Default: true
    public var privacyProtectRegistrantContact: Swift.Bool?
    /// Whether you want to conceal contact information from WHOIS queries. If you specify true, WHOIS ("who is") queries return contact information either for Amazon Registrar (for .com, .net, and .org domains) or for our registrar associate, Gandi (for all other TLDs). If you specify false, WHOIS queries return the information that you entered for the technical contact. You must specify the same privacy setting for the administrative, registrant, and technical contacts. Default: true
    public var privacyProtectTechContact: Swift.Bool?
    /// Provides detailed contact information.
    /// This member is required.
    public var registrantContact: Route53DomainsClientTypes.ContactDetail?
    /// Provides detailed contact information.
    /// This member is required.
    public var techContact: Route53DomainsClientTypes.ContactDetail?

    public init (
        adminContact: Route53DomainsClientTypes.ContactDetail? = nil,
        authCode: Swift.String? = nil,
        autoRenew: Swift.Bool? = nil,
        domainName: Swift.String? = nil,
        durationInYears: Swift.Int? = nil,
        idnLangCode: Swift.String? = nil,
        nameservers: [Route53DomainsClientTypes.Nameserver]? = nil,
        privacyProtectAdminContact: Swift.Bool? = nil,
        privacyProtectRegistrantContact: Swift.Bool? = nil,
        privacyProtectTechContact: Swift.Bool? = nil,
        registrantContact: Route53DomainsClientTypes.ContactDetail? = nil,
        techContact: Route53DomainsClientTypes.ContactDetail? = nil
    )
    {
        self.adminContact = adminContact
        self.authCode = authCode
        self.autoRenew = autoRenew
        self.domainName = domainName
        self.durationInYears = durationInYears
        self.idnLangCode = idnLangCode
        self.nameservers = nameservers
        self.privacyProtectAdminContact = privacyProtectAdminContact
        self.privacyProtectRegistrantContact = privacyProtectRegistrantContact
        self.privacyProtectTechContact = privacyProtectTechContact
        self.registrantContact = registrantContact
        self.techContact = techContact
    }
}
