// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct RegisterDomainInputBody: Swift.Equatable {
    let domainName: Swift.String?
    let idnLangCode: Swift.String?
    let durationInYears: Swift.Int?
    let autoRenew: Swift.Bool?
    let adminContact: Route53DomainsClientTypes.ContactDetail?
    let registrantContact: Route53DomainsClientTypes.ContactDetail?
    let techContact: Route53DomainsClientTypes.ContactDetail?
    let privacyProtectAdminContact: Swift.Bool?
    let privacyProtectRegistrantContact: Swift.Bool?
    let privacyProtectTechContact: Swift.Bool?
}

extension RegisterDomainInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case adminContact = "AdminContact"
        case autoRenew = "AutoRenew"
        case domainName = "DomainName"
        case durationInYears = "DurationInYears"
        case idnLangCode = "IdnLangCode"
        case privacyProtectAdminContact = "PrivacyProtectAdminContact"
        case privacyProtectRegistrantContact = "PrivacyProtectRegistrantContact"
        case privacyProtectTechContact = "PrivacyProtectTechContact"
        case registrantContact = "RegistrantContact"
        case techContact = "TechContact"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domainName)
        domainName = domainNameDecoded
        let idnLangCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .idnLangCode)
        idnLangCode = idnLangCodeDecoded
        let durationInYearsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .durationInYears)
        durationInYears = durationInYearsDecoded
        let autoRenewDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .autoRenew)
        autoRenew = autoRenewDecoded
        let adminContactDecoded = try containerValues.decodeIfPresent(Route53DomainsClientTypes.ContactDetail.self, forKey: .adminContact)
        adminContact = adminContactDecoded
        let registrantContactDecoded = try containerValues.decodeIfPresent(Route53DomainsClientTypes.ContactDetail.self, forKey: .registrantContact)
        registrantContact = registrantContactDecoded
        let techContactDecoded = try containerValues.decodeIfPresent(Route53DomainsClientTypes.ContactDetail.self, forKey: .techContact)
        techContact = techContactDecoded
        let privacyProtectAdminContactDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .privacyProtectAdminContact)
        privacyProtectAdminContact = privacyProtectAdminContactDecoded
        let privacyProtectRegistrantContactDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .privacyProtectRegistrantContact)
        privacyProtectRegistrantContact = privacyProtectRegistrantContactDecoded
        let privacyProtectTechContactDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .privacyProtectTechContact)
        privacyProtectTechContact = privacyProtectTechContactDecoded
    }
}
