// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct UpdateDomainNameserversInputBody: Swift.Equatable {
    let domainName: Swift.String?
    let fIAuthKey: Swift.String?
    let nameservers: [Route53DomainsClientTypes.Nameserver]?
}

extension UpdateDomainNameserversInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domainName = "DomainName"
        case fIAuthKey = "FIAuthKey"
        case nameservers = "Nameservers"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domainName)
        domainName = domainNameDecoded
        let fIAuthKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fIAuthKey)
        fIAuthKey = fIAuthKeyDecoded
        let nameserversContainer = try containerValues.decodeIfPresent([Route53DomainsClientTypes.Nameserver?].self, forKey: .nameservers)
        var nameserversDecoded0:[Route53DomainsClientTypes.Nameserver]? = nil
        if let nameserversContainer = nameserversContainer {
            nameserversDecoded0 = [Route53DomainsClientTypes.Nameserver]()
            for structure0 in nameserversContainer {
                if let structure0 = structure0 {
                    nameserversDecoded0?.append(structure0)
                }
            }
        }
        nameservers = nameserversDecoded0
    }
}
