// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct PutLifecycleHookInputBody: Swift.Equatable {
    let lifecycleHookName: Swift.String?
    let autoScalingGroupName: Swift.String?
    let lifecycleTransition: Swift.String?
    let roleARN: Swift.String?
    let notificationTargetARN: Swift.String?
    let notificationMetadata: Swift.String?
    let heartbeatTimeout: Swift.Int?
    let defaultResult: Swift.String?
}

extension PutLifecycleHookInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case autoScalingGroupName = "AutoScalingGroupName"
        case defaultResult = "DefaultResult"
        case heartbeatTimeout = "HeartbeatTimeout"
        case lifecycleHookName = "LifecycleHookName"
        case lifecycleTransition = "LifecycleTransition"
        case notificationMetadata = "NotificationMetadata"
        case notificationTargetARN = "NotificationTargetARN"
        case roleARN = "RoleARN"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let lifecycleHookNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lifecycleHookName)
        lifecycleHookName = lifecycleHookNameDecoded
        let autoScalingGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .autoScalingGroupName)
        autoScalingGroupName = autoScalingGroupNameDecoded
        let lifecycleTransitionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lifecycleTransition)
        lifecycleTransition = lifecycleTransitionDecoded
        let roleARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleARN)
        roleARN = roleARNDecoded
        let notificationTargetARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .notificationTargetARN)
        notificationTargetARN = notificationTargetARNDecoded
        let notificationMetadataDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .notificationMetadata)
        notificationMetadata = notificationMetadataDecoded
        let heartbeatTimeoutDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .heartbeatTimeout)
        heartbeatTimeout = heartbeatTimeoutDecoded
        let defaultResultDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .defaultResult)
        defaultResult = defaultResultDecoded
    }
}
