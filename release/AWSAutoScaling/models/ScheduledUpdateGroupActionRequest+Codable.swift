// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AutoScalingClientTypes.ScheduledUpdateGroupActionRequest: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case desiredCapacity = "DesiredCapacity"
        case endTime = "EndTime"
        case maxSize = "MaxSize"
        case minSize = "MinSize"
        case recurrence = "Recurrence"
        case scheduledActionName = "ScheduledActionName"
        case startTime = "StartTime"
        case timeZone = "TimeZone"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let desiredCapacity = desiredCapacity {
            try container.encode(desiredCapacity, forKey: ClientRuntime.Key("DesiredCapacity"))
        }
        if let endTime = endTime {
            try container.encode(ClientRuntime.TimestampWrapper(endTime, format: .dateTime), forKey: ClientRuntime.Key("endTime"))
        }
        if let maxSize = maxSize {
            try container.encode(maxSize, forKey: ClientRuntime.Key("MaxSize"))
        }
        if let minSize = minSize {
            try container.encode(minSize, forKey: ClientRuntime.Key("MinSize"))
        }
        if let recurrence = recurrence {
            try container.encode(recurrence, forKey: ClientRuntime.Key("Recurrence"))
        }
        if let scheduledActionName = scheduledActionName {
            try container.encode(scheduledActionName, forKey: ClientRuntime.Key("ScheduledActionName"))
        }
        if let startTime = startTime {
            try container.encode(ClientRuntime.TimestampWrapper(startTime, format: .dateTime), forKey: ClientRuntime.Key("startTime"))
        }
        if let timeZone = timeZone {
            try container.encode(timeZone, forKey: ClientRuntime.Key("TimeZone"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let scheduledActionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .scheduledActionName)
        scheduledActionName = scheduledActionNameDecoded
        let startTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .startTime)
        var startTimeBuffer:ClientRuntime.Date? = nil
        if let startTimeDecoded = startTimeDecoded {
            startTimeBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(startTimeDecoded, format: .dateTime)
        }
        startTime = startTimeBuffer
        let endTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .endTime)
        var endTimeBuffer:ClientRuntime.Date? = nil
        if let endTimeDecoded = endTimeDecoded {
            endTimeBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(endTimeDecoded, format: .dateTime)
        }
        endTime = endTimeBuffer
        let recurrenceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .recurrence)
        recurrence = recurrenceDecoded
        let minSizeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .minSize)
        minSize = minSizeDecoded
        let maxSizeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxSize)
        maxSize = maxSizeDecoded
        let desiredCapacityDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .desiredCapacity)
        desiredCapacity = desiredCapacityDecoded
        let timeZoneDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .timeZone)
        timeZone = timeZoneDecoded
    }
}
