// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AutoScalingClientTypes.RefreshPreferences: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case checkpointDelay = "CheckpointDelay"
        case checkpointPercentages = "CheckpointPercentages"
        case instanceWarmup = "InstanceWarmup"
        case minHealthyPercentage = "MinHealthyPercentage"
        case skipMatching = "SkipMatching"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let checkpointDelay = checkpointDelay {
            try container.encode(checkpointDelay, forKey: ClientRuntime.Key("CheckpointDelay"))
        }
        if let checkpointPercentages = checkpointPercentages {
            var checkpointPercentagesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("CheckpointPercentages"))
            for (index0, nonzerointpercent0) in checkpointPercentages.enumerated() {
                try checkpointPercentagesContainer.encode(nonzerointpercent0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let instanceWarmup = instanceWarmup {
            try container.encode(instanceWarmup, forKey: ClientRuntime.Key("InstanceWarmup"))
        }
        if let minHealthyPercentage = minHealthyPercentage {
            try container.encode(minHealthyPercentage, forKey: ClientRuntime.Key("MinHealthyPercentage"))
        }
        if let skipMatching = skipMatching {
            try container.encode(skipMatching, forKey: ClientRuntime.Key("SkipMatching"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let minHealthyPercentageDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .minHealthyPercentage)
        minHealthyPercentage = minHealthyPercentageDecoded
        let instanceWarmupDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .instanceWarmup)
        instanceWarmup = instanceWarmupDecoded
        if containerValues.contains(.checkpointPercentages) {
            struct KeyVal0{struct member{}}
            let checkpointPercentagesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .checkpointPercentages)
            if let checkpointPercentagesWrappedContainer = checkpointPercentagesWrappedContainer {
                let checkpointPercentagesContainer = try checkpointPercentagesWrappedContainer.decodeIfPresent([Swift.Int].self, forKey: .member)
                var checkpointPercentagesBuffer:[Swift.Int]? = nil
                if let checkpointPercentagesContainer = checkpointPercentagesContainer {
                    checkpointPercentagesBuffer = [Swift.Int]()
                    for integerContainer0 in checkpointPercentagesContainer {
                        checkpointPercentagesBuffer?.append(integerContainer0)
                    }
                }
                checkpointPercentages = checkpointPercentagesBuffer
            } else {
                checkpointPercentages = []
            }
        } else {
            checkpointPercentages = nil
        }
        let checkpointDelayDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .checkpointDelay)
        checkpointDelay = checkpointDelayDecoded
        let skipMatchingDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .skipMatching)
        skipMatching = skipMatchingDecoded
    }
}
