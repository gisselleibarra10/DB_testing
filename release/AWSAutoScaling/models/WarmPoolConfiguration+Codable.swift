// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AutoScalingClientTypes.WarmPoolConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case instanceReusePolicy = "InstanceReusePolicy"
        case maxGroupPreparedCapacity = "MaxGroupPreparedCapacity"
        case minSize = "MinSize"
        case poolState = "PoolState"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let instanceReusePolicy = instanceReusePolicy {
            try container.encode(instanceReusePolicy, forKey: ClientRuntime.Key("InstanceReusePolicy"))
        }
        if let maxGroupPreparedCapacity = maxGroupPreparedCapacity {
            try container.encode(maxGroupPreparedCapacity, forKey: ClientRuntime.Key("MaxGroupPreparedCapacity"))
        }
        if let minSize = minSize {
            try container.encode(minSize, forKey: ClientRuntime.Key("MinSize"))
        }
        if let poolState = poolState {
            try container.encode(poolState, forKey: ClientRuntime.Key("PoolState"))
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let maxGroupPreparedCapacityDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxGroupPreparedCapacity)
        maxGroupPreparedCapacity = maxGroupPreparedCapacityDecoded
        let minSizeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .minSize)
        minSize = minSizeDecoded
        let poolStateDecoded = try containerValues.decodeIfPresent(AutoScalingClientTypes.WarmPoolState.self, forKey: .poolState)
        poolState = poolStateDecoded
        let statusDecoded = try containerValues.decodeIfPresent(AutoScalingClientTypes.WarmPoolStatus.self, forKey: .status)
        status = statusDecoded
        let instanceReusePolicyDecoded = try containerValues.decodeIfPresent(AutoScalingClientTypes.InstanceReusePolicy.self, forKey: .instanceReusePolicy)
        instanceReusePolicy = instanceReusePolicyDecoded
    }
}
