// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AutoScalingClientTypes {
    /// Describes an Auto Scaling group.
    public struct AutoScalingGroup: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the Auto Scaling group.
        public var autoScalingGroupARN: Swift.String?
        /// The name of the Auto Scaling group.
        /// This member is required.
        public var autoScalingGroupName: Swift.String?
        /// One or more Availability Zones for the group.
        /// This member is required.
        public var availabilityZones: [Swift.String]?
        /// Indicates whether Capacity Rebalancing is enabled.
        public var capacityRebalance: Swift.Bool?
        /// Reserved.
        public var context: Swift.String?
        /// The date and time the group was created.
        /// This member is required.
        public var createdTime: ClientRuntime.Date?
        /// The duration of the default cooldown period, in seconds.
        /// This member is required.
        public var defaultCooldown: Swift.Int?
        /// The duration of the default instance warmup, in seconds.
        public var defaultInstanceWarmup: Swift.Int?
        /// The desired size of the group.
        /// This member is required.
        public var desiredCapacity: Swift.Int?
        /// The unit of measurement for the value specified for desired capacity. Amazon EC2 Auto Scaling supports DesiredCapacityType for attribute-based instance type selection only.
        public var desiredCapacityType: Swift.String?
        /// The metrics enabled for the group.
        public var enabledMetrics: [AutoScalingClientTypes.EnabledMetric]?
        /// The duration of the health check grace period, in seconds.
        public var healthCheckGracePeriod: Swift.Int?
        /// The service to use for the health checks. The valid values are EC2 and ELB. If you configure an Auto Scaling group to use ELB health checks, it considers the instance unhealthy if it fails either the EC2 status checks or the load balancer health checks.
        /// This member is required.
        public var healthCheckType: Swift.String?
        /// The EC2 instances associated with the group.
        public var instances: [AutoScalingClientTypes.Instance]?
        /// The name of the associated launch configuration.
        public var launchConfigurationName: Swift.String?
        /// The launch template for the group.
        public var launchTemplate: AutoScalingClientTypes.LaunchTemplateSpecification?
        /// One or more load balancers associated with the group.
        public var loadBalancerNames: [Swift.String]?
        /// The maximum amount of time, in seconds, that an instance can be in service. Valid Range: Minimum value of 0.
        public var maxInstanceLifetime: Swift.Int?
        /// The maximum size of the group.
        /// This member is required.
        public var maxSize: Swift.Int?
        /// The minimum size of the group.
        /// This member is required.
        public var minSize: Swift.Int?
        /// The mixed instances policy for the group.
        public var mixedInstancesPolicy: AutoScalingClientTypes.MixedInstancesPolicy?
        /// Indicates whether newly launched instances are protected from termination by Amazon EC2 Auto Scaling when scaling in.
        public var newInstancesProtectedFromScaleIn: Swift.Bool?
        /// The name of the placement group into which to launch your instances, if any.
        public var placementGroup: Swift.String?
        /// The predicted capacity of the group when it has a predictive scaling policy.
        public var predictedCapacity: Swift.Int?
        /// The Amazon Resource Name (ARN) of the service-linked role that the Auto Scaling group uses to call other Amazon Web Services on your behalf.
        public var serviceLinkedRoleARN: Swift.String?
        /// The current state of the group when the [DeleteAutoScalingGroup] operation is in progress.
        public var status: Swift.String?
        /// The suspended processes associated with the group.
        public var suspendedProcesses: [AutoScalingClientTypes.SuspendedProcess]?
        /// The tags for the group.
        public var tags: [AutoScalingClientTypes.TagDescription]?
        /// The Amazon Resource Names (ARN) of the target groups for your load balancer.
        public var targetGroupARNs: [Swift.String]?
        /// The termination policies for the group.
        public var terminationPolicies: [Swift.String]?
        /// One or more subnet IDs, if applicable, separated by commas.
        public var vPCZoneIdentifier: Swift.String?
        /// The warm pool for the group.
        public var warmPoolConfiguration: AutoScalingClientTypes.WarmPoolConfiguration?
        /// The current size of the warm pool.
        public var warmPoolSize: Swift.Int?

        public init (
            autoScalingGroupARN: Swift.String? = nil,
            autoScalingGroupName: Swift.String? = nil,
            availabilityZones: [Swift.String]? = nil,
            capacityRebalance: Swift.Bool? = nil,
            context: Swift.String? = nil,
            createdTime: ClientRuntime.Date? = nil,
            defaultCooldown: Swift.Int? = nil,
            defaultInstanceWarmup: Swift.Int? = nil,
            desiredCapacity: Swift.Int? = nil,
            desiredCapacityType: Swift.String? = nil,
            enabledMetrics: [AutoScalingClientTypes.EnabledMetric]? = nil,
            healthCheckGracePeriod: Swift.Int? = nil,
            healthCheckType: Swift.String? = nil,
            instances: [AutoScalingClientTypes.Instance]? = nil,
            launchConfigurationName: Swift.String? = nil,
            launchTemplate: AutoScalingClientTypes.LaunchTemplateSpecification? = nil,
            loadBalancerNames: [Swift.String]? = nil,
            maxInstanceLifetime: Swift.Int? = nil,
            maxSize: Swift.Int? = nil,
            minSize: Swift.Int? = nil,
            mixedInstancesPolicy: AutoScalingClientTypes.MixedInstancesPolicy? = nil,
            newInstancesProtectedFromScaleIn: Swift.Bool? = nil,
            placementGroup: Swift.String? = nil,
            predictedCapacity: Swift.Int? = nil,
            serviceLinkedRoleARN: Swift.String? = nil,
            status: Swift.String? = nil,
            suspendedProcesses: [AutoScalingClientTypes.SuspendedProcess]? = nil,
            tags: [AutoScalingClientTypes.TagDescription]? = nil,
            targetGroupARNs: [Swift.String]? = nil,
            terminationPolicies: [Swift.String]? = nil,
            vPCZoneIdentifier: Swift.String? = nil,
            warmPoolConfiguration: AutoScalingClientTypes.WarmPoolConfiguration? = nil,
            warmPoolSize: Swift.Int? = nil
        )
        {
            self.autoScalingGroupARN = autoScalingGroupARN
            self.autoScalingGroupName = autoScalingGroupName
            self.availabilityZones = availabilityZones
            self.capacityRebalance = capacityRebalance
            self.context = context
            self.createdTime = createdTime
            self.defaultCooldown = defaultCooldown
            self.defaultInstanceWarmup = defaultInstanceWarmup
            self.desiredCapacity = desiredCapacity
            self.desiredCapacityType = desiredCapacityType
            self.enabledMetrics = enabledMetrics
            self.healthCheckGracePeriod = healthCheckGracePeriod
            self.healthCheckType = healthCheckType
            self.instances = instances
            self.launchConfigurationName = launchConfigurationName
            self.launchTemplate = launchTemplate
            self.loadBalancerNames = loadBalancerNames
            self.maxInstanceLifetime = maxInstanceLifetime
            self.maxSize = maxSize
            self.minSize = minSize
            self.mixedInstancesPolicy = mixedInstancesPolicy
            self.newInstancesProtectedFromScaleIn = newInstancesProtectedFromScaleIn
            self.placementGroup = placementGroup
            self.predictedCapacity = predictedCapacity
            self.serviceLinkedRoleARN = serviceLinkedRoleARN
            self.status = status
            self.suspendedProcesses = suspendedProcesses
            self.tags = tags
            self.targetGroupARNs = targetGroupARNs
            self.terminationPolicies = terminationPolicies
            self.vPCZoneIdentifier = vPCZoneIdentifier
            self.warmPoolConfiguration = warmPoolConfiguration
            self.warmPoolSize = warmPoolSize
        }
    }

}
