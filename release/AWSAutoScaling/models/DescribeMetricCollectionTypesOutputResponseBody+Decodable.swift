// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeMetricCollectionTypesOutputResponseBody: Swift.Equatable {
    let metrics: [AutoScalingClientTypes.MetricCollectionType]?
    let granularities: [AutoScalingClientTypes.MetricGranularityType]?
}

extension DescribeMetricCollectionTypesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case granularities = "Granularities"
        case metrics = "Metrics"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeMetricCollectionTypesResult"))
        if containerValues.contains(.metrics) {
            struct KeyVal0{struct member{}}
            let metricsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .metrics)
            if let metricsWrappedContainer = metricsWrappedContainer {
                let metricsContainer = try metricsWrappedContainer.decodeIfPresent([AutoScalingClientTypes.MetricCollectionType].self, forKey: .member)
                var metricsBuffer:[AutoScalingClientTypes.MetricCollectionType]? = nil
                if let metricsContainer = metricsContainer {
                    metricsBuffer = [AutoScalingClientTypes.MetricCollectionType]()
                    for structureContainer0 in metricsContainer {
                        metricsBuffer?.append(structureContainer0)
                    }
                }
                metrics = metricsBuffer
            } else {
                metrics = []
            }
        } else {
            metrics = nil
        }
        if containerValues.contains(.granularities) {
            struct KeyVal0{struct member{}}
            let granularitiesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .granularities)
            if let granularitiesWrappedContainer = granularitiesWrappedContainer {
                let granularitiesContainer = try granularitiesWrappedContainer.decodeIfPresent([AutoScalingClientTypes.MetricGranularityType].self, forKey: .member)
                var granularitiesBuffer:[AutoScalingClientTypes.MetricGranularityType]? = nil
                if let granularitiesContainer = granularitiesContainer {
                    granularitiesBuffer = [AutoScalingClientTypes.MetricGranularityType]()
                    for structureContainer0 in granularitiesContainer {
                        granularitiesBuffer?.append(structureContainer0)
                    }
                }
                granularities = granularitiesBuffer
            } else {
                granularities = []
            }
        } else {
            granularities = nil
        }
    }
}
