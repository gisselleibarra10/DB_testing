// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeAutoScalingNotificationTypesOutputResponseBody: Swift.Equatable {
    let autoScalingNotificationTypes: [Swift.String]?
}

extension DescribeAutoScalingNotificationTypesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case autoScalingNotificationTypes = "AutoScalingNotificationTypes"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeAutoScalingNotificationTypesResult"))
        if containerValues.contains(.autoScalingNotificationTypes) {
            struct KeyVal0{struct member{}}
            let autoScalingNotificationTypesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .autoScalingNotificationTypes)
            if let autoScalingNotificationTypesWrappedContainer = autoScalingNotificationTypesWrappedContainer {
                let autoScalingNotificationTypesContainer = try autoScalingNotificationTypesWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var autoScalingNotificationTypesBuffer:[Swift.String]? = nil
                if let autoScalingNotificationTypesContainer = autoScalingNotificationTypesContainer {
                    autoScalingNotificationTypesBuffer = [Swift.String]()
                    for stringContainer0 in autoScalingNotificationTypesContainer {
                        autoScalingNotificationTypesBuffer?.append(stringContainer0)
                    }
                }
                autoScalingNotificationTypes = autoScalingNotificationTypesBuffer
            } else {
                autoScalingNotificationTypes = []
            }
        } else {
            autoScalingNotificationTypes = nil
        }
    }
}
