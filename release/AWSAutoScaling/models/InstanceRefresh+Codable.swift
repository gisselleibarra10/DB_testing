// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AutoScalingClientTypes.InstanceRefresh: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case autoScalingGroupName = "AutoScalingGroupName"
        case desiredConfiguration = "DesiredConfiguration"
        case endTime = "EndTime"
        case instanceRefreshId = "InstanceRefreshId"
        case instancesToUpdate = "InstancesToUpdate"
        case percentageComplete = "PercentageComplete"
        case preferences = "Preferences"
        case progressDetails = "ProgressDetails"
        case startTime = "StartTime"
        case status = "Status"
        case statusReason = "StatusReason"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let autoScalingGroupName = autoScalingGroupName {
            try container.encode(autoScalingGroupName, forKey: ClientRuntime.Key("AutoScalingGroupName"))
        }
        if let desiredConfiguration = desiredConfiguration {
            try container.encode(desiredConfiguration, forKey: ClientRuntime.Key("DesiredConfiguration"))
        }
        if let endTime = endTime {
            try container.encode(ClientRuntime.TimestampWrapper(endTime, format: .dateTime), forKey: ClientRuntime.Key("endTime"))
        }
        if let instanceRefreshId = instanceRefreshId {
            try container.encode(instanceRefreshId, forKey: ClientRuntime.Key("InstanceRefreshId"))
        }
        if let instancesToUpdate = instancesToUpdate {
            try container.encode(instancesToUpdate, forKey: ClientRuntime.Key("InstancesToUpdate"))
        }
        if let percentageComplete = percentageComplete {
            try container.encode(percentageComplete, forKey: ClientRuntime.Key("PercentageComplete"))
        }
        if let preferences = preferences {
            try container.encode(preferences, forKey: ClientRuntime.Key("Preferences"))
        }
        if let progressDetails = progressDetails {
            try container.encode(progressDetails, forKey: ClientRuntime.Key("ProgressDetails"))
        }
        if let startTime = startTime {
            try container.encode(ClientRuntime.TimestampWrapper(startTime, format: .dateTime), forKey: ClientRuntime.Key("startTime"))
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
        if let statusReason = statusReason {
            try container.encode(statusReason, forKey: ClientRuntime.Key("StatusReason"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instanceRefreshIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceRefreshId)
        instanceRefreshId = instanceRefreshIdDecoded
        let autoScalingGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .autoScalingGroupName)
        autoScalingGroupName = autoScalingGroupNameDecoded
        let statusDecoded = try containerValues.decodeIfPresent(AutoScalingClientTypes.InstanceRefreshStatus.self, forKey: .status)
        status = statusDecoded
        let statusReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .statusReason)
        statusReason = statusReasonDecoded
        let startTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .startTime)
        var startTimeBuffer:ClientRuntime.Date? = nil
        if let startTimeDecoded = startTimeDecoded {
            startTimeBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(startTimeDecoded, format: .dateTime)
        }
        startTime = startTimeBuffer
        let endTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .endTime)
        var endTimeBuffer:ClientRuntime.Date? = nil
        if let endTimeDecoded = endTimeDecoded {
            endTimeBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(endTimeDecoded, format: .dateTime)
        }
        endTime = endTimeBuffer
        let percentageCompleteDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .percentageComplete)
        percentageComplete = percentageCompleteDecoded
        let instancesToUpdateDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .instancesToUpdate)
        instancesToUpdate = instancesToUpdateDecoded
        let progressDetailsDecoded = try containerValues.decodeIfPresent(AutoScalingClientTypes.InstanceRefreshProgressDetails.self, forKey: .progressDetails)
        progressDetails = progressDetailsDecoded
        let preferencesDecoded = try containerValues.decodeIfPresent(AutoScalingClientTypes.RefreshPreferences.self, forKey: .preferences)
        preferences = preferencesDecoded
        let desiredConfigurationDecoded = try containerValues.decodeIfPresent(AutoScalingClientTypes.DesiredConfiguration.self, forKey: .desiredConfiguration)
        desiredConfiguration = desiredConfigurationDecoded
    }
}
