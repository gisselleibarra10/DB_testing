// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeInstanceRefreshesInputBody: Swift.Equatable {
    let autoScalingGroupName: Swift.String?
    let instanceRefreshIds: [Swift.String]?
    let nextToken: Swift.String?
    let maxRecords: Swift.Int?
}

extension DescribeInstanceRefreshesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case autoScalingGroupName = "AutoScalingGroupName"
        case instanceRefreshIds = "InstanceRefreshIds"
        case maxRecords = "MaxRecords"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let autoScalingGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .autoScalingGroupName)
        autoScalingGroupName = autoScalingGroupNameDecoded
        if containerValues.contains(.instanceRefreshIds) {
            struct KeyVal0{struct member{}}
            let instanceRefreshIdsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .instanceRefreshIds)
            if let instanceRefreshIdsWrappedContainer = instanceRefreshIdsWrappedContainer {
                let instanceRefreshIdsContainer = try instanceRefreshIdsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var instanceRefreshIdsBuffer:[Swift.String]? = nil
                if let instanceRefreshIdsContainer = instanceRefreshIdsContainer {
                    instanceRefreshIdsBuffer = [Swift.String]()
                    for stringContainer0 in instanceRefreshIdsContainer {
                        instanceRefreshIdsBuffer?.append(stringContainer0)
                    }
                }
                instanceRefreshIds = instanceRefreshIdsBuffer
            } else {
                instanceRefreshIds = []
            }
        } else {
            instanceRefreshIds = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxRecordsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxRecords)
        maxRecords = maxRecordsDecoded
    }
}
