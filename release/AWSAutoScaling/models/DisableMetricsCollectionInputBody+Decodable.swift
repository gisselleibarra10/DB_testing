// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DisableMetricsCollectionInputBody: Swift.Equatable {
    let autoScalingGroupName: Swift.String?
    let metrics: [Swift.String]?
}

extension DisableMetricsCollectionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case autoScalingGroupName = "AutoScalingGroupName"
        case metrics = "Metrics"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let autoScalingGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .autoScalingGroupName)
        autoScalingGroupName = autoScalingGroupNameDecoded
        if containerValues.contains(.metrics) {
            struct KeyVal0{struct member{}}
            let metricsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .metrics)
            if let metricsWrappedContainer = metricsWrappedContainer {
                let metricsContainer = try metricsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var metricsBuffer:[Swift.String]? = nil
                if let metricsContainer = metricsContainer {
                    metricsBuffer = [Swift.String]()
                    for stringContainer0 in metricsContainer {
                        metricsBuffer?.append(stringContainer0)
                    }
                }
                metrics = metricsBuffer
            } else {
                metrics = []
            }
        } else {
            metrics = nil
        }
    }
}
