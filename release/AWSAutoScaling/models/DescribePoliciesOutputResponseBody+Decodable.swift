// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribePoliciesOutputResponseBody: Swift.Equatable {
    let scalingPolicies: [AutoScalingClientTypes.ScalingPolicy]?
    let nextToken: Swift.String?
}

extension DescribePoliciesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case scalingPolicies = "ScalingPolicies"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribePoliciesResult"))
        if containerValues.contains(.scalingPolicies) {
            struct KeyVal0{struct member{}}
            let scalingPoliciesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .scalingPolicies)
            if let scalingPoliciesWrappedContainer = scalingPoliciesWrappedContainer {
                let scalingPoliciesContainer = try scalingPoliciesWrappedContainer.decodeIfPresent([AutoScalingClientTypes.ScalingPolicy].self, forKey: .member)
                var scalingPoliciesBuffer:[AutoScalingClientTypes.ScalingPolicy]? = nil
                if let scalingPoliciesContainer = scalingPoliciesContainer {
                    scalingPoliciesBuffer = [AutoScalingClientTypes.ScalingPolicy]()
                    for structureContainer0 in scalingPoliciesContainer {
                        scalingPoliciesBuffer?.append(structureContainer0)
                    }
                }
                scalingPolicies = scalingPoliciesBuffer
            } else {
                scalingPolicies = []
            }
        } else {
            scalingPolicies = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
