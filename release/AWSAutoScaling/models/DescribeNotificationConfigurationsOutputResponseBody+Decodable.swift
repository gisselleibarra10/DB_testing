// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeNotificationConfigurationsOutputResponseBody: Swift.Equatable {
    let notificationConfigurations: [AutoScalingClientTypes.NotificationConfiguration]?
    let nextToken: Swift.String?
}

extension DescribeNotificationConfigurationsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case notificationConfigurations = "NotificationConfigurations"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeNotificationConfigurationsResult"))
        if containerValues.contains(.notificationConfigurations) {
            struct KeyVal0{struct member{}}
            let notificationConfigurationsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .notificationConfigurations)
            if let notificationConfigurationsWrappedContainer = notificationConfigurationsWrappedContainer {
                let notificationConfigurationsContainer = try notificationConfigurationsWrappedContainer.decodeIfPresent([AutoScalingClientTypes.NotificationConfiguration].self, forKey: .member)
                var notificationConfigurationsBuffer:[AutoScalingClientTypes.NotificationConfiguration]? = nil
                if let notificationConfigurationsContainer = notificationConfigurationsContainer {
                    notificationConfigurationsBuffer = [AutoScalingClientTypes.NotificationConfiguration]()
                    for structureContainer0 in notificationConfigurationsContainer {
                        notificationConfigurationsBuffer?.append(structureContainer0)
                    }
                }
                notificationConfigurations = notificationConfigurationsBuffer
            } else {
                notificationConfigurations = []
            }
        } else {
            notificationConfigurations = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
