// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AutoScalingClientTypes.TargetTrackingConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case customizedMetricSpecification = "CustomizedMetricSpecification"
        case disableScaleIn = "DisableScaleIn"
        case predefinedMetricSpecification = "PredefinedMetricSpecification"
        case targetValue = "TargetValue"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let customizedMetricSpecification = customizedMetricSpecification {
            try container.encode(customizedMetricSpecification, forKey: ClientRuntime.Key("CustomizedMetricSpecification"))
        }
        if let disableScaleIn = disableScaleIn {
            try container.encode(disableScaleIn, forKey: ClientRuntime.Key("DisableScaleIn"))
        }
        if let predefinedMetricSpecification = predefinedMetricSpecification {
            try container.encode(predefinedMetricSpecification, forKey: ClientRuntime.Key("PredefinedMetricSpecification"))
        }
        if let targetValue = targetValue {
            try container.encode(targetValue, forKey: ClientRuntime.Key("TargetValue"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let predefinedMetricSpecificationDecoded = try containerValues.decodeIfPresent(AutoScalingClientTypes.PredefinedMetricSpecification.self, forKey: .predefinedMetricSpecification)
        predefinedMetricSpecification = predefinedMetricSpecificationDecoded
        let customizedMetricSpecificationDecoded = try containerValues.decodeIfPresent(AutoScalingClientTypes.CustomizedMetricSpecification.self, forKey: .customizedMetricSpecification)
        customizedMetricSpecification = customizedMetricSpecificationDecoded
        let targetValueDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .targetValue)
        targetValue = targetValueDecoded
        let disableScaleInDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .disableScaleIn)
        disableScaleIn = disableScaleInDecoded
    }
}
