// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct PutNotificationConfigurationInputBody: Swift.Equatable {
    let autoScalingGroupName: Swift.String?
    let topicARN: Swift.String?
    let notificationTypes: [Swift.String]?
}

extension PutNotificationConfigurationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case autoScalingGroupName = "AutoScalingGroupName"
        case notificationTypes = "NotificationTypes"
        case topicARN = "TopicARN"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let autoScalingGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .autoScalingGroupName)
        autoScalingGroupName = autoScalingGroupNameDecoded
        let topicARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .topicARN)
        topicARN = topicARNDecoded
        if containerValues.contains(.notificationTypes) {
            struct KeyVal0{struct member{}}
            let notificationTypesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .notificationTypes)
            if let notificationTypesWrappedContainer = notificationTypesWrappedContainer {
                let notificationTypesContainer = try notificationTypesWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var notificationTypesBuffer:[Swift.String]? = nil
                if let notificationTypesContainer = notificationTypesContainer {
                    notificationTypesBuffer = [Swift.String]()
                    for stringContainer0 in notificationTypesContainer {
                        notificationTypesBuffer?.append(stringContainer0)
                    }
                }
                notificationTypes = notificationTypesBuffer
            } else {
                notificationTypes = []
            }
        } else {
            notificationTypes = nil
        }
    }
}
