// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CreateLaunchConfigurationInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let associatePublicIpAddress = associatePublicIpAddress {
            try container.encode(associatePublicIpAddress, forKey: ClientRuntime.Key("AssociatePublicIpAddress"))
        }
        if let blockDeviceMappings = blockDeviceMappings {
            var blockDeviceMappingsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("BlockDeviceMappings"))
            for (index0, blockdevicemapping0) in blockDeviceMappings.enumerated() {
                try blockDeviceMappingsContainer.encode(blockdevicemapping0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let classicLinkVPCId = classicLinkVPCId {
            try container.encode(classicLinkVPCId, forKey: ClientRuntime.Key("ClassicLinkVPCId"))
        }
        if let classicLinkVPCSecurityGroups = classicLinkVPCSecurityGroups {
            var classicLinkVPCSecurityGroupsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ClassicLinkVPCSecurityGroups"))
            for (index0, xmlstringmaxlen2550) in classicLinkVPCSecurityGroups.enumerated() {
                try classicLinkVPCSecurityGroupsContainer.encode(xmlstringmaxlen2550, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let ebsOptimized = ebsOptimized {
            try container.encode(ebsOptimized, forKey: ClientRuntime.Key("EbsOptimized"))
        }
        if let iamInstanceProfile = iamInstanceProfile {
            try container.encode(iamInstanceProfile, forKey: ClientRuntime.Key("IamInstanceProfile"))
        }
        if let imageId = imageId {
            try container.encode(imageId, forKey: ClientRuntime.Key("ImageId"))
        }
        if let instanceId = instanceId {
            try container.encode(instanceId, forKey: ClientRuntime.Key("InstanceId"))
        }
        if let instanceMonitoring = instanceMonitoring {
            try container.encode(instanceMonitoring, forKey: ClientRuntime.Key("InstanceMonitoring"))
        }
        if let instanceType = instanceType {
            try container.encode(instanceType, forKey: ClientRuntime.Key("InstanceType"))
        }
        if let kernelId = kernelId {
            try container.encode(kernelId, forKey: ClientRuntime.Key("KernelId"))
        }
        if let keyName = keyName {
            try container.encode(keyName, forKey: ClientRuntime.Key("KeyName"))
        }
        if let launchConfigurationName = launchConfigurationName {
            try container.encode(launchConfigurationName, forKey: ClientRuntime.Key("LaunchConfigurationName"))
        }
        if let metadataOptions = metadataOptions {
            try container.encode(metadataOptions, forKey: ClientRuntime.Key("MetadataOptions"))
        }
        if let placementTenancy = placementTenancy {
            try container.encode(placementTenancy, forKey: ClientRuntime.Key("PlacementTenancy"))
        }
        if let ramdiskId = ramdiskId {
            try container.encode(ramdiskId, forKey: ClientRuntime.Key("RamdiskId"))
        }
        if let securityGroups = securityGroups {
            var securityGroupsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("SecurityGroups"))
            for (index0, xmlstring0) in securityGroups.enumerated() {
                try securityGroupsContainer.encode(xmlstring0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let spotPrice = spotPrice {
            try container.encode(spotPrice, forKey: ClientRuntime.Key("SpotPrice"))
        }
        if let userData = userData {
            try container.encode(userData, forKey: ClientRuntime.Key("UserData"))
        }
        try container.encode("CreateLaunchConfiguration", forKey:ClientRuntime.Key("Action"))
        try container.encode("2011-01-01", forKey:ClientRuntime.Key("Version"))
    }
}
