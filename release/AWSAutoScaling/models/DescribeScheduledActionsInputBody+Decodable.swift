// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeScheduledActionsInputBody: Swift.Equatable {
    let autoScalingGroupName: Swift.String?
    let scheduledActionNames: [Swift.String]?
    let startTime: ClientRuntime.Date?
    let endTime: ClientRuntime.Date?
    let nextToken: Swift.String?
    let maxRecords: Swift.Int?
}

extension DescribeScheduledActionsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case autoScalingGroupName = "AutoScalingGroupName"
        case endTime = "EndTime"
        case maxRecords = "MaxRecords"
        case nextToken = "NextToken"
        case scheduledActionNames = "ScheduledActionNames"
        case startTime = "StartTime"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let autoScalingGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .autoScalingGroupName)
        autoScalingGroupName = autoScalingGroupNameDecoded
        if containerValues.contains(.scheduledActionNames) {
            struct KeyVal0{struct member{}}
            let scheduledActionNamesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .scheduledActionNames)
            if let scheduledActionNamesWrappedContainer = scheduledActionNamesWrappedContainer {
                let scheduledActionNamesContainer = try scheduledActionNamesWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var scheduledActionNamesBuffer:[Swift.String]? = nil
                if let scheduledActionNamesContainer = scheduledActionNamesContainer {
                    scheduledActionNamesBuffer = [Swift.String]()
                    for stringContainer0 in scheduledActionNamesContainer {
                        scheduledActionNamesBuffer?.append(stringContainer0)
                    }
                }
                scheduledActionNames = scheduledActionNamesBuffer
            } else {
                scheduledActionNames = []
            }
        } else {
            scheduledActionNames = nil
        }
        let startTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .startTime)
        var startTimeBuffer:ClientRuntime.Date? = nil
        if let startTimeDecoded = startTimeDecoded {
            startTimeBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(startTimeDecoded, format: .dateTime)
        }
        startTime = startTimeBuffer
        let endTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .endTime)
        var endTimeBuffer:ClientRuntime.Date? = nil
        if let endTimeDecoded = endTimeDecoded {
            endTimeBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(endTimeDecoded, format: .dateTime)
        }
        endTime = endTimeBuffer
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxRecordsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxRecords)
        maxRecords = maxRecordsDecoded
    }
}
