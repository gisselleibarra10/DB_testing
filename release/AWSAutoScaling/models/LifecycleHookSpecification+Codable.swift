// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AutoScalingClientTypes.LifecycleHookSpecification: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case defaultResult = "DefaultResult"
        case heartbeatTimeout = "HeartbeatTimeout"
        case lifecycleHookName = "LifecycleHookName"
        case lifecycleTransition = "LifecycleTransition"
        case notificationMetadata = "NotificationMetadata"
        case notificationTargetARN = "NotificationTargetARN"
        case roleARN = "RoleARN"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let defaultResult = defaultResult {
            try container.encode(defaultResult, forKey: ClientRuntime.Key("DefaultResult"))
        }
        if let heartbeatTimeout = heartbeatTimeout {
            try container.encode(heartbeatTimeout, forKey: ClientRuntime.Key("HeartbeatTimeout"))
        }
        if let lifecycleHookName = lifecycleHookName {
            try container.encode(lifecycleHookName, forKey: ClientRuntime.Key("LifecycleHookName"))
        }
        if let lifecycleTransition = lifecycleTransition {
            try container.encode(lifecycleTransition, forKey: ClientRuntime.Key("LifecycleTransition"))
        }
        if let notificationMetadata = notificationMetadata {
            try container.encode(notificationMetadata, forKey: ClientRuntime.Key("NotificationMetadata"))
        }
        if let notificationTargetARN = notificationTargetARN {
            try container.encode(notificationTargetARN, forKey: ClientRuntime.Key("NotificationTargetARN"))
        }
        if let roleARN = roleARN {
            try container.encode(roleARN, forKey: ClientRuntime.Key("RoleARN"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let lifecycleHookNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lifecycleHookName)
        lifecycleHookName = lifecycleHookNameDecoded
        let lifecycleTransitionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lifecycleTransition)
        lifecycleTransition = lifecycleTransitionDecoded
        let notificationMetadataDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .notificationMetadata)
        notificationMetadata = notificationMetadataDecoded
        let heartbeatTimeoutDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .heartbeatTimeout)
        heartbeatTimeout = heartbeatTimeoutDecoded
        let defaultResultDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .defaultResult)
        defaultResult = defaultResultDecoded
        let notificationTargetARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .notificationTargetARN)
        notificationTargetARN = notificationTargetARNDecoded
        let roleARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleARN)
        roleARN = roleARNDecoded
    }
}
