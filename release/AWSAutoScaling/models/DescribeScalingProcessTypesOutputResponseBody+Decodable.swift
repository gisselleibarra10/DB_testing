// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeScalingProcessTypesOutputResponseBody: Swift.Equatable {
    let processes: [AutoScalingClientTypes.ProcessType]?
}

extension DescribeScalingProcessTypesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case processes = "Processes"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeScalingProcessTypesResult"))
        if containerValues.contains(.processes) {
            struct KeyVal0{struct member{}}
            let processesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .processes)
            if let processesWrappedContainer = processesWrappedContainer {
                let processesContainer = try processesWrappedContainer.decodeIfPresent([AutoScalingClientTypes.ProcessType].self, forKey: .member)
                var processesBuffer:[AutoScalingClientTypes.ProcessType]? = nil
                if let processesContainer = processesContainer {
                    processesBuffer = [AutoScalingClientTypes.ProcessType]()
                    for structureContainer0 in processesContainer {
                        processesBuffer?.append(structureContainer0)
                    }
                }
                processes = processesBuffer
            } else {
                processes = []
            }
        } else {
            processes = nil
        }
    }
}
