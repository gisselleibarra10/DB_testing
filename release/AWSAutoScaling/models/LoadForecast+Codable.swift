// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AutoScalingClientTypes.LoadForecast: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case metricSpecification = "MetricSpecification"
        case timestamps = "Timestamps"
        case values = "Values"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let metricSpecification = metricSpecification {
            try container.encode(metricSpecification, forKey: ClientRuntime.Key("MetricSpecification"))
        }
        if let timestamps = timestamps {
            var timestampsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Timestamps"))
            for (index0, timestamptype0) in timestamps.enumerated() {
                try timestampsContainer.encode(TimestampWrapper(timestamptype0, format: .dateTime), forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let values = values {
            var valuesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Values"))
            for (index0, metricscale0) in values.enumerated() {
                try valuesContainer.encode(metricscale0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.timestamps) {
            struct KeyVal0{struct member{}}
            let timestampsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .timestamps)
            if let timestampsWrappedContainer = timestampsWrappedContainer {
                let timestampsContainer = try timestampsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var timestampsBuffer:[ClientRuntime.Date]? = nil
                if let timestampsContainer = timestampsContainer {
                    timestampsBuffer = [ClientRuntime.Date]()
                    for timestampContainer0 in timestampsContainer {
                        try timestampsBuffer?.append(ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(timestampContainer0, format: .dateTime))
                    }
                }
                timestamps = timestampsBuffer
            } else {
                timestamps = []
            }
        } else {
            timestamps = nil
        }
        if containerValues.contains(.values) {
            struct KeyVal0{struct member{}}
            let valuesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .values)
            if let valuesWrappedContainer = valuesWrappedContainer {
                let valuesContainer = try valuesWrappedContainer.decodeIfPresent([Swift.Double].self, forKey: .member)
                var valuesBuffer:[Swift.Double]? = nil
                if let valuesContainer = valuesContainer {
                    valuesBuffer = [Swift.Double]()
                    for doubleContainer0 in valuesContainer {
                        valuesBuffer?.append(doubleContainer0)
                    }
                }
                values = valuesBuffer
            } else {
                values = []
            }
        } else {
            values = nil
        }
        let metricSpecificationDecoded = try containerValues.decodeIfPresent(AutoScalingClientTypes.PredictiveScalingMetricSpecification.self, forKey: .metricSpecification)
        metricSpecification = metricSpecificationDecoded
    }
}
