// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribePoliciesInputBody: Swift.Equatable {
    let autoScalingGroupName: Swift.String?
    let policyNames: [Swift.String]?
    let policyTypes: [Swift.String]?
    let nextToken: Swift.String?
    let maxRecords: Swift.Int?
}

extension DescribePoliciesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case autoScalingGroupName = "AutoScalingGroupName"
        case maxRecords = "MaxRecords"
        case nextToken = "NextToken"
        case policyNames = "PolicyNames"
        case policyTypes = "PolicyTypes"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let autoScalingGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .autoScalingGroupName)
        autoScalingGroupName = autoScalingGroupNameDecoded
        if containerValues.contains(.policyNames) {
            struct KeyVal0{struct member{}}
            let policyNamesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .policyNames)
            if let policyNamesWrappedContainer = policyNamesWrappedContainer {
                let policyNamesContainer = try policyNamesWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var policyNamesBuffer:[Swift.String]? = nil
                if let policyNamesContainer = policyNamesContainer {
                    policyNamesBuffer = [Swift.String]()
                    for stringContainer0 in policyNamesContainer {
                        policyNamesBuffer?.append(stringContainer0)
                    }
                }
                policyNames = policyNamesBuffer
            } else {
                policyNames = []
            }
        } else {
            policyNames = nil
        }
        if containerValues.contains(.policyTypes) {
            struct KeyVal0{struct member{}}
            let policyTypesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .policyTypes)
            if let policyTypesWrappedContainer = policyTypesWrappedContainer {
                let policyTypesContainer = try policyTypesWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var policyTypesBuffer:[Swift.String]? = nil
                if let policyTypesContainer = policyTypesContainer {
                    policyTypesBuffer = [Swift.String]()
                    for stringContainer0 in policyTypesContainer {
                        policyTypesBuffer?.append(stringContainer0)
                    }
                }
                policyTypes = policyTypesBuffer
            } else {
                policyTypes = []
            }
        } else {
            policyTypes = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxRecordsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxRecords)
        maxRecords = maxRecordsDecoded
    }
}
