// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeLifecycleHooksOutputResponseBody: Swift.Equatable {
    let lifecycleHooks: [AutoScalingClientTypes.LifecycleHook]?
}

extension DescribeLifecycleHooksOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case lifecycleHooks = "LifecycleHooks"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeLifecycleHooksResult"))
        if containerValues.contains(.lifecycleHooks) {
            struct KeyVal0{struct member{}}
            let lifecycleHooksWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .lifecycleHooks)
            if let lifecycleHooksWrappedContainer = lifecycleHooksWrappedContainer {
                let lifecycleHooksContainer = try lifecycleHooksWrappedContainer.decodeIfPresent([AutoScalingClientTypes.LifecycleHook].self, forKey: .member)
                var lifecycleHooksBuffer:[AutoScalingClientTypes.LifecycleHook]? = nil
                if let lifecycleHooksContainer = lifecycleHooksContainer {
                    lifecycleHooksBuffer = [AutoScalingClientTypes.LifecycleHook]()
                    for structureContainer0 in lifecycleHooksContainer {
                        lifecycleHooksBuffer?.append(structureContainer0)
                    }
                }
                lifecycleHooks = lifecycleHooksBuffer
            } else {
                lifecycleHooks = []
            }
        } else {
            lifecycleHooks = nil
        }
    }
}
