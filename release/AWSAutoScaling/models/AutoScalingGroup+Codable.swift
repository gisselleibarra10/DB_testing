// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AutoScalingClientTypes.AutoScalingGroup: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case autoScalingGroupARN = "AutoScalingGroupARN"
        case autoScalingGroupName = "AutoScalingGroupName"
        case availabilityZones = "AvailabilityZones"
        case capacityRebalance = "CapacityRebalance"
        case context = "Context"
        case createdTime = "CreatedTime"
        case defaultCooldown = "DefaultCooldown"
        case defaultInstanceWarmup = "DefaultInstanceWarmup"
        case desiredCapacity = "DesiredCapacity"
        case desiredCapacityType = "DesiredCapacityType"
        case enabledMetrics = "EnabledMetrics"
        case healthCheckGracePeriod = "HealthCheckGracePeriod"
        case healthCheckType = "HealthCheckType"
        case instances = "Instances"
        case launchConfigurationName = "LaunchConfigurationName"
        case launchTemplate = "LaunchTemplate"
        case loadBalancerNames = "LoadBalancerNames"
        case maxInstanceLifetime = "MaxInstanceLifetime"
        case maxSize = "MaxSize"
        case minSize = "MinSize"
        case mixedInstancesPolicy = "MixedInstancesPolicy"
        case newInstancesProtectedFromScaleIn = "NewInstancesProtectedFromScaleIn"
        case placementGroup = "PlacementGroup"
        case predictedCapacity = "PredictedCapacity"
        case serviceLinkedRoleARN = "ServiceLinkedRoleARN"
        case status = "Status"
        case suspendedProcesses = "SuspendedProcesses"
        case tags = "Tags"
        case targetGroupARNs = "TargetGroupARNs"
        case terminationPolicies = "TerminationPolicies"
        case vPCZoneIdentifier = "VPCZoneIdentifier"
        case warmPoolConfiguration = "WarmPoolConfiguration"
        case warmPoolSize = "WarmPoolSize"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let autoScalingGroupARN = autoScalingGroupARN {
            try container.encode(autoScalingGroupARN, forKey: ClientRuntime.Key("AutoScalingGroupARN"))
        }
        if let autoScalingGroupName = autoScalingGroupName {
            try container.encode(autoScalingGroupName, forKey: ClientRuntime.Key("AutoScalingGroupName"))
        }
        if let availabilityZones = availabilityZones {
            var availabilityZonesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AvailabilityZones"))
            for (index0, xmlstringmaxlen2550) in availabilityZones.enumerated() {
                try availabilityZonesContainer.encode(xmlstringmaxlen2550, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let capacityRebalance = capacityRebalance {
            try container.encode(capacityRebalance, forKey: ClientRuntime.Key("CapacityRebalance"))
        }
        if let context = context {
            try container.encode(context, forKey: ClientRuntime.Key("Context"))
        }
        if let createdTime = createdTime {
            try container.encode(ClientRuntime.TimestampWrapper(createdTime, format: .dateTime), forKey: ClientRuntime.Key("createdTime"))
        }
        if let defaultCooldown = defaultCooldown {
            try container.encode(defaultCooldown, forKey: ClientRuntime.Key("DefaultCooldown"))
        }
        if let defaultInstanceWarmup = defaultInstanceWarmup {
            try container.encode(defaultInstanceWarmup, forKey: ClientRuntime.Key("DefaultInstanceWarmup"))
        }
        if let desiredCapacity = desiredCapacity {
            try container.encode(desiredCapacity, forKey: ClientRuntime.Key("DesiredCapacity"))
        }
        if let desiredCapacityType = desiredCapacityType {
            try container.encode(desiredCapacityType, forKey: ClientRuntime.Key("DesiredCapacityType"))
        }
        if let enabledMetrics = enabledMetrics {
            var enabledMetricsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("EnabledMetrics"))
            for (index0, enabledmetric0) in enabledMetrics.enumerated() {
                try enabledMetricsContainer.encode(enabledmetric0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let healthCheckGracePeriod = healthCheckGracePeriod {
            try container.encode(healthCheckGracePeriod, forKey: ClientRuntime.Key("HealthCheckGracePeriod"))
        }
        if let healthCheckType = healthCheckType {
            try container.encode(healthCheckType, forKey: ClientRuntime.Key("HealthCheckType"))
        }
        if let instances = instances {
            var instancesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Instances"))
            for (index0, instance0) in instances.enumerated() {
                try instancesContainer.encode(instance0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let launchConfigurationName = launchConfigurationName {
            try container.encode(launchConfigurationName, forKey: ClientRuntime.Key("LaunchConfigurationName"))
        }
        if let launchTemplate = launchTemplate {
            try container.encode(launchTemplate, forKey: ClientRuntime.Key("LaunchTemplate"))
        }
        if let loadBalancerNames = loadBalancerNames {
            var loadBalancerNamesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("LoadBalancerNames"))
            for (index0, xmlstringmaxlen2550) in loadBalancerNames.enumerated() {
                try loadBalancerNamesContainer.encode(xmlstringmaxlen2550, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let maxInstanceLifetime = maxInstanceLifetime {
            try container.encode(maxInstanceLifetime, forKey: ClientRuntime.Key("MaxInstanceLifetime"))
        }
        if let maxSize = maxSize {
            try container.encode(maxSize, forKey: ClientRuntime.Key("MaxSize"))
        }
        if let minSize = minSize {
            try container.encode(minSize, forKey: ClientRuntime.Key("MinSize"))
        }
        if let mixedInstancesPolicy = mixedInstancesPolicy {
            try container.encode(mixedInstancesPolicy, forKey: ClientRuntime.Key("MixedInstancesPolicy"))
        }
        if let newInstancesProtectedFromScaleIn = newInstancesProtectedFromScaleIn {
            try container.encode(newInstancesProtectedFromScaleIn, forKey: ClientRuntime.Key("NewInstancesProtectedFromScaleIn"))
        }
        if let placementGroup = placementGroup {
            try container.encode(placementGroup, forKey: ClientRuntime.Key("PlacementGroup"))
        }
        if let predictedCapacity = predictedCapacity {
            try container.encode(predictedCapacity, forKey: ClientRuntime.Key("PredictedCapacity"))
        }
        if let serviceLinkedRoleARN = serviceLinkedRoleARN {
            try container.encode(serviceLinkedRoleARN, forKey: ClientRuntime.Key("ServiceLinkedRoleARN"))
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
        if let suspendedProcesses = suspendedProcesses {
            var suspendedProcessesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("SuspendedProcesses"))
            for (index0, suspendedprocess0) in suspendedProcesses.enumerated() {
                try suspendedProcessesContainer.encode(suspendedprocess0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let tags = tags {
            var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
            for (index0, tagdescription0) in tags.enumerated() {
                try tagsContainer.encode(tagdescription0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let targetGroupARNs = targetGroupARNs {
            var targetGroupARNsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TargetGroupARNs"))
            for (index0, xmlstringmaxlen5110) in targetGroupARNs.enumerated() {
                try targetGroupARNsContainer.encode(xmlstringmaxlen5110, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let terminationPolicies = terminationPolicies {
            var terminationPoliciesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TerminationPolicies"))
            for (index0, xmlstringmaxlen16000) in terminationPolicies.enumerated() {
                try terminationPoliciesContainer.encode(xmlstringmaxlen16000, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let vPCZoneIdentifier = vPCZoneIdentifier {
            try container.encode(vPCZoneIdentifier, forKey: ClientRuntime.Key("VPCZoneIdentifier"))
        }
        if let warmPoolConfiguration = warmPoolConfiguration {
            try container.encode(warmPoolConfiguration, forKey: ClientRuntime.Key("WarmPoolConfiguration"))
        }
        if let warmPoolSize = warmPoolSize {
            try container.encode(warmPoolSize, forKey: ClientRuntime.Key("WarmPoolSize"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let autoScalingGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .autoScalingGroupName)
        autoScalingGroupName = autoScalingGroupNameDecoded
        let autoScalingGroupARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .autoScalingGroupARN)
        autoScalingGroupARN = autoScalingGroupARNDecoded
        let launchConfigurationNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .launchConfigurationName)
        launchConfigurationName = launchConfigurationNameDecoded
        let launchTemplateDecoded = try containerValues.decodeIfPresent(AutoScalingClientTypes.LaunchTemplateSpecification.self, forKey: .launchTemplate)
        launchTemplate = launchTemplateDecoded
        let mixedInstancesPolicyDecoded = try containerValues.decodeIfPresent(AutoScalingClientTypes.MixedInstancesPolicy.self, forKey: .mixedInstancesPolicy)
        mixedInstancesPolicy = mixedInstancesPolicyDecoded
        let minSizeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .minSize)
        minSize = minSizeDecoded
        let maxSizeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxSize)
        maxSize = maxSizeDecoded
        let desiredCapacityDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .desiredCapacity)
        desiredCapacity = desiredCapacityDecoded
        let predictedCapacityDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .predictedCapacity)
        predictedCapacity = predictedCapacityDecoded
        let defaultCooldownDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .defaultCooldown)
        defaultCooldown = defaultCooldownDecoded
        if containerValues.contains(.availabilityZones) {
            struct KeyVal0{struct member{}}
            let availabilityZonesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .availabilityZones)
            if let availabilityZonesWrappedContainer = availabilityZonesWrappedContainer {
                let availabilityZonesContainer = try availabilityZonesWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var availabilityZonesBuffer:[Swift.String]? = nil
                if let availabilityZonesContainer = availabilityZonesContainer {
                    availabilityZonesBuffer = [Swift.String]()
                    for stringContainer0 in availabilityZonesContainer {
                        availabilityZonesBuffer?.append(stringContainer0)
                    }
                }
                availabilityZones = availabilityZonesBuffer
            } else {
                availabilityZones = []
            }
        } else {
            availabilityZones = nil
        }
        if containerValues.contains(.loadBalancerNames) {
            struct KeyVal0{struct member{}}
            let loadBalancerNamesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .loadBalancerNames)
            if let loadBalancerNamesWrappedContainer = loadBalancerNamesWrappedContainer {
                let loadBalancerNamesContainer = try loadBalancerNamesWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var loadBalancerNamesBuffer:[Swift.String]? = nil
                if let loadBalancerNamesContainer = loadBalancerNamesContainer {
                    loadBalancerNamesBuffer = [Swift.String]()
                    for stringContainer0 in loadBalancerNamesContainer {
                        loadBalancerNamesBuffer?.append(stringContainer0)
                    }
                }
                loadBalancerNames = loadBalancerNamesBuffer
            } else {
                loadBalancerNames = []
            }
        } else {
            loadBalancerNames = nil
        }
        if containerValues.contains(.targetGroupARNs) {
            struct KeyVal0{struct member{}}
            let targetGroupARNsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .targetGroupARNs)
            if let targetGroupARNsWrappedContainer = targetGroupARNsWrappedContainer {
                let targetGroupARNsContainer = try targetGroupARNsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var targetGroupARNsBuffer:[Swift.String]? = nil
                if let targetGroupARNsContainer = targetGroupARNsContainer {
                    targetGroupARNsBuffer = [Swift.String]()
                    for stringContainer0 in targetGroupARNsContainer {
                        targetGroupARNsBuffer?.append(stringContainer0)
                    }
                }
                targetGroupARNs = targetGroupARNsBuffer
            } else {
                targetGroupARNs = []
            }
        } else {
            targetGroupARNs = nil
        }
        let healthCheckTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .healthCheckType)
        healthCheckType = healthCheckTypeDecoded
        let healthCheckGracePeriodDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .healthCheckGracePeriod)
        healthCheckGracePeriod = healthCheckGracePeriodDecoded
        if containerValues.contains(.instances) {
            struct KeyVal0{struct member{}}
            let instancesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .instances)
            if let instancesWrappedContainer = instancesWrappedContainer {
                let instancesContainer = try instancesWrappedContainer.decodeIfPresent([AutoScalingClientTypes.Instance].self, forKey: .member)
                var instancesBuffer:[AutoScalingClientTypes.Instance]? = nil
                if let instancesContainer = instancesContainer {
                    instancesBuffer = [AutoScalingClientTypes.Instance]()
                    for structureContainer0 in instancesContainer {
                        instancesBuffer?.append(structureContainer0)
                    }
                }
                instances = instancesBuffer
            } else {
                instances = []
            }
        } else {
            instances = nil
        }
        let createdTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .createdTime)
        var createdTimeBuffer:ClientRuntime.Date? = nil
        if let createdTimeDecoded = createdTimeDecoded {
            createdTimeBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(createdTimeDecoded, format: .dateTime)
        }
        createdTime = createdTimeBuffer
        if containerValues.contains(.suspendedProcesses) {
            struct KeyVal0{struct member{}}
            let suspendedProcessesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .suspendedProcesses)
            if let suspendedProcessesWrappedContainer = suspendedProcessesWrappedContainer {
                let suspendedProcessesContainer = try suspendedProcessesWrappedContainer.decodeIfPresent([AutoScalingClientTypes.SuspendedProcess].self, forKey: .member)
                var suspendedProcessesBuffer:[AutoScalingClientTypes.SuspendedProcess]? = nil
                if let suspendedProcessesContainer = suspendedProcessesContainer {
                    suspendedProcessesBuffer = [AutoScalingClientTypes.SuspendedProcess]()
                    for structureContainer0 in suspendedProcessesContainer {
                        suspendedProcessesBuffer?.append(structureContainer0)
                    }
                }
                suspendedProcesses = suspendedProcessesBuffer
            } else {
                suspendedProcesses = []
            }
        } else {
            suspendedProcesses = nil
        }
        let placementGroupDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .placementGroup)
        placementGroup = placementGroupDecoded
        let vPCZoneIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vPCZoneIdentifier)
        vPCZoneIdentifier = vPCZoneIdentifierDecoded
        if containerValues.contains(.enabledMetrics) {
            struct KeyVal0{struct member{}}
            let enabledMetricsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .enabledMetrics)
            if let enabledMetricsWrappedContainer = enabledMetricsWrappedContainer {
                let enabledMetricsContainer = try enabledMetricsWrappedContainer.decodeIfPresent([AutoScalingClientTypes.EnabledMetric].self, forKey: .member)
                var enabledMetricsBuffer:[AutoScalingClientTypes.EnabledMetric]? = nil
                if let enabledMetricsContainer = enabledMetricsContainer {
                    enabledMetricsBuffer = [AutoScalingClientTypes.EnabledMetric]()
                    for structureContainer0 in enabledMetricsContainer {
                        enabledMetricsBuffer?.append(structureContainer0)
                    }
                }
                enabledMetrics = enabledMetricsBuffer
            } else {
                enabledMetrics = []
            }
        } else {
            enabledMetrics = nil
        }
        let statusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .status)
        status = statusDecoded
        if containerValues.contains(.tags) {
            struct KeyVal0{struct member{}}
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .tags)
            if let tagsWrappedContainer = tagsWrappedContainer {
                let tagsContainer = try tagsWrappedContainer.decodeIfPresent([AutoScalingClientTypes.TagDescription].self, forKey: .member)
                var tagsBuffer:[AutoScalingClientTypes.TagDescription]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [AutoScalingClientTypes.TagDescription]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
        if containerValues.contains(.terminationPolicies) {
            struct KeyVal0{struct member{}}
            let terminationPoliciesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .terminationPolicies)
            if let terminationPoliciesWrappedContainer = terminationPoliciesWrappedContainer {
                let terminationPoliciesContainer = try terminationPoliciesWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var terminationPoliciesBuffer:[Swift.String]? = nil
                if let terminationPoliciesContainer = terminationPoliciesContainer {
                    terminationPoliciesBuffer = [Swift.String]()
                    for stringContainer0 in terminationPoliciesContainer {
                        terminationPoliciesBuffer?.append(stringContainer0)
                    }
                }
                terminationPolicies = terminationPoliciesBuffer
            } else {
                terminationPolicies = []
            }
        } else {
            terminationPolicies = nil
        }
        let newInstancesProtectedFromScaleInDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .newInstancesProtectedFromScaleIn)
        newInstancesProtectedFromScaleIn = newInstancesProtectedFromScaleInDecoded
        let serviceLinkedRoleARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serviceLinkedRoleARN)
        serviceLinkedRoleARN = serviceLinkedRoleARNDecoded
        let maxInstanceLifetimeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxInstanceLifetime)
        maxInstanceLifetime = maxInstanceLifetimeDecoded
        let capacityRebalanceDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .capacityRebalance)
        capacityRebalance = capacityRebalanceDecoded
        let warmPoolConfigurationDecoded = try containerValues.decodeIfPresent(AutoScalingClientTypes.WarmPoolConfiguration.self, forKey: .warmPoolConfiguration)
        warmPoolConfiguration = warmPoolConfigurationDecoded
        let warmPoolSizeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .warmPoolSize)
        warmPoolSize = warmPoolSizeDecoded
        let contextDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .context)
        context = contextDecoded
        let desiredCapacityTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .desiredCapacityType)
        desiredCapacityType = desiredCapacityTypeDecoded
        let defaultInstanceWarmupDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .defaultInstanceWarmup)
        defaultInstanceWarmup = defaultInstanceWarmupDecoded
    }
}
