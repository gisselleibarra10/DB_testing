// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeLoadBalancerTargetGroupsOutputResponseBody: Swift.Equatable {
    let loadBalancerTargetGroups: [AutoScalingClientTypes.LoadBalancerTargetGroupState]?
    let nextToken: Swift.String?
}

extension DescribeLoadBalancerTargetGroupsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case loadBalancerTargetGroups = "LoadBalancerTargetGroups"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeLoadBalancerTargetGroupsResult"))
        if containerValues.contains(.loadBalancerTargetGroups) {
            struct KeyVal0{struct member{}}
            let loadBalancerTargetGroupsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .loadBalancerTargetGroups)
            if let loadBalancerTargetGroupsWrappedContainer = loadBalancerTargetGroupsWrappedContainer {
                let loadBalancerTargetGroupsContainer = try loadBalancerTargetGroupsWrappedContainer.decodeIfPresent([AutoScalingClientTypes.LoadBalancerTargetGroupState].self, forKey: .member)
                var loadBalancerTargetGroupsBuffer:[AutoScalingClientTypes.LoadBalancerTargetGroupState]? = nil
                if let loadBalancerTargetGroupsContainer = loadBalancerTargetGroupsContainer {
                    loadBalancerTargetGroupsBuffer = [AutoScalingClientTypes.LoadBalancerTargetGroupState]()
                    for structureContainer0 in loadBalancerTargetGroupsContainer {
                        loadBalancerTargetGroupsBuffer?.append(structureContainer0)
                    }
                }
                loadBalancerTargetGroups = loadBalancerTargetGroupsBuffer
            } else {
                loadBalancerTargetGroups = []
            }
        } else {
            loadBalancerTargetGroups = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
