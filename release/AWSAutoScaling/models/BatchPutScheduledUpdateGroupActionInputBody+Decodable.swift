// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct BatchPutScheduledUpdateGroupActionInputBody: Swift.Equatable {
    let autoScalingGroupName: Swift.String?
    let scheduledUpdateGroupActions: [AutoScalingClientTypes.ScheduledUpdateGroupActionRequest]?
}

extension BatchPutScheduledUpdateGroupActionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case autoScalingGroupName = "AutoScalingGroupName"
        case scheduledUpdateGroupActions = "ScheduledUpdateGroupActions"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let autoScalingGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .autoScalingGroupName)
        autoScalingGroupName = autoScalingGroupNameDecoded
        if containerValues.contains(.scheduledUpdateGroupActions) {
            struct KeyVal0{struct member{}}
            let scheduledUpdateGroupActionsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .scheduledUpdateGroupActions)
            if let scheduledUpdateGroupActionsWrappedContainer = scheduledUpdateGroupActionsWrappedContainer {
                let scheduledUpdateGroupActionsContainer = try scheduledUpdateGroupActionsWrappedContainer.decodeIfPresent([AutoScalingClientTypes.ScheduledUpdateGroupActionRequest].self, forKey: .member)
                var scheduledUpdateGroupActionsBuffer:[AutoScalingClientTypes.ScheduledUpdateGroupActionRequest]? = nil
                if let scheduledUpdateGroupActionsContainer = scheduledUpdateGroupActionsContainer {
                    scheduledUpdateGroupActionsBuffer = [AutoScalingClientTypes.ScheduledUpdateGroupActionRequest]()
                    for structureContainer0 in scheduledUpdateGroupActionsContainer {
                        scheduledUpdateGroupActionsBuffer?.append(structureContainer0)
                    }
                }
                scheduledUpdateGroupActions = scheduledUpdateGroupActionsBuffer
            } else {
                scheduledUpdateGroupActions = []
            }
        } else {
            scheduledUpdateGroupActions = nil
        }
    }
}
