// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeAdjustmentTypesOutputResponseBody: Swift.Equatable {
    let adjustmentTypes: [AutoScalingClientTypes.AdjustmentType]?
}

extension DescribeAdjustmentTypesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case adjustmentTypes = "AdjustmentTypes"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeAdjustmentTypesResult"))
        if containerValues.contains(.adjustmentTypes) {
            struct KeyVal0{struct member{}}
            let adjustmentTypesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .adjustmentTypes)
            if let adjustmentTypesWrappedContainer = adjustmentTypesWrappedContainer {
                let adjustmentTypesContainer = try adjustmentTypesWrappedContainer.decodeIfPresent([AutoScalingClientTypes.AdjustmentType].self, forKey: .member)
                var adjustmentTypesBuffer:[AutoScalingClientTypes.AdjustmentType]? = nil
                if let adjustmentTypesContainer = adjustmentTypesContainer {
                    adjustmentTypesBuffer = [AutoScalingClientTypes.AdjustmentType]()
                    for structureContainer0 in adjustmentTypesContainer {
                        adjustmentTypesBuffer?.append(structureContainer0)
                    }
                }
                adjustmentTypes = adjustmentTypesBuffer
            } else {
                adjustmentTypes = []
            }
        } else {
            adjustmentTypes = nil
        }
    }
}
