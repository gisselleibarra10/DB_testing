// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct PutScheduledUpdateGroupActionInputBody: Swift.Equatable {
    let autoScalingGroupName: Swift.String?
    let scheduledActionName: Swift.String?
    let time: ClientRuntime.Date?
    let startTime: ClientRuntime.Date?
    let endTime: ClientRuntime.Date?
    let recurrence: Swift.String?
    let minSize: Swift.Int?
    let maxSize: Swift.Int?
    let desiredCapacity: Swift.Int?
    let timeZone: Swift.String?
}

extension PutScheduledUpdateGroupActionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case autoScalingGroupName = "AutoScalingGroupName"
        case desiredCapacity = "DesiredCapacity"
        case endTime = "EndTime"
        case maxSize = "MaxSize"
        case minSize = "MinSize"
        case recurrence = "Recurrence"
        case scheduledActionName = "ScheduledActionName"
        case startTime = "StartTime"
        case time = "Time"
        case timeZone = "TimeZone"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let autoScalingGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .autoScalingGroupName)
        autoScalingGroupName = autoScalingGroupNameDecoded
        let scheduledActionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .scheduledActionName)
        scheduledActionName = scheduledActionNameDecoded
        let timeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .time)
        var timeBuffer:ClientRuntime.Date? = nil
        if let timeDecoded = timeDecoded {
            timeBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(timeDecoded, format: .dateTime)
        }
        time = timeBuffer
        let startTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .startTime)
        var startTimeBuffer:ClientRuntime.Date? = nil
        if let startTimeDecoded = startTimeDecoded {
            startTimeBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(startTimeDecoded, format: .dateTime)
        }
        startTime = startTimeBuffer
        let endTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .endTime)
        var endTimeBuffer:ClientRuntime.Date? = nil
        if let endTimeDecoded = endTimeDecoded {
            endTimeBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(endTimeDecoded, format: .dateTime)
        }
        endTime = endTimeBuffer
        let recurrenceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .recurrence)
        recurrence = recurrenceDecoded
        let minSizeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .minSize)
        minSize = minSizeDecoded
        let maxSizeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxSize)
        maxSize = maxSizeDecoded
        let desiredCapacityDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .desiredCapacity)
        desiredCapacity = desiredCapacityDecoded
        let timeZoneDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .timeZone)
        timeZone = timeZoneDecoded
    }
}
