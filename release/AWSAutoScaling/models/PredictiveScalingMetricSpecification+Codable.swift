// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AutoScalingClientTypes.PredictiveScalingMetricSpecification: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case customizedCapacityMetricSpecification = "CustomizedCapacityMetricSpecification"
        case customizedLoadMetricSpecification = "CustomizedLoadMetricSpecification"
        case customizedScalingMetricSpecification = "CustomizedScalingMetricSpecification"
        case predefinedLoadMetricSpecification = "PredefinedLoadMetricSpecification"
        case predefinedMetricPairSpecification = "PredefinedMetricPairSpecification"
        case predefinedScalingMetricSpecification = "PredefinedScalingMetricSpecification"
        case targetValue = "TargetValue"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let customizedCapacityMetricSpecification = customizedCapacityMetricSpecification {
            try container.encode(customizedCapacityMetricSpecification, forKey: ClientRuntime.Key("CustomizedCapacityMetricSpecification"))
        }
        if let customizedLoadMetricSpecification = customizedLoadMetricSpecification {
            try container.encode(customizedLoadMetricSpecification, forKey: ClientRuntime.Key("CustomizedLoadMetricSpecification"))
        }
        if let customizedScalingMetricSpecification = customizedScalingMetricSpecification {
            try container.encode(customizedScalingMetricSpecification, forKey: ClientRuntime.Key("CustomizedScalingMetricSpecification"))
        }
        if let predefinedLoadMetricSpecification = predefinedLoadMetricSpecification {
            try container.encode(predefinedLoadMetricSpecification, forKey: ClientRuntime.Key("PredefinedLoadMetricSpecification"))
        }
        if let predefinedMetricPairSpecification = predefinedMetricPairSpecification {
            try container.encode(predefinedMetricPairSpecification, forKey: ClientRuntime.Key("PredefinedMetricPairSpecification"))
        }
        if let predefinedScalingMetricSpecification = predefinedScalingMetricSpecification {
            try container.encode(predefinedScalingMetricSpecification, forKey: ClientRuntime.Key("PredefinedScalingMetricSpecification"))
        }
        if let targetValue = targetValue {
            try container.encode(targetValue, forKey: ClientRuntime.Key("TargetValue"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let targetValueDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .targetValue)
        targetValue = targetValueDecoded
        let predefinedMetricPairSpecificationDecoded = try containerValues.decodeIfPresent(AutoScalingClientTypes.PredictiveScalingPredefinedMetricPair.self, forKey: .predefinedMetricPairSpecification)
        predefinedMetricPairSpecification = predefinedMetricPairSpecificationDecoded
        let predefinedScalingMetricSpecificationDecoded = try containerValues.decodeIfPresent(AutoScalingClientTypes.PredictiveScalingPredefinedScalingMetric.self, forKey: .predefinedScalingMetricSpecification)
        predefinedScalingMetricSpecification = predefinedScalingMetricSpecificationDecoded
        let predefinedLoadMetricSpecificationDecoded = try containerValues.decodeIfPresent(AutoScalingClientTypes.PredictiveScalingPredefinedLoadMetric.self, forKey: .predefinedLoadMetricSpecification)
        predefinedLoadMetricSpecification = predefinedLoadMetricSpecificationDecoded
        let customizedScalingMetricSpecificationDecoded = try containerValues.decodeIfPresent(AutoScalingClientTypes.PredictiveScalingCustomizedScalingMetric.self, forKey: .customizedScalingMetricSpecification)
        customizedScalingMetricSpecification = customizedScalingMetricSpecificationDecoded
        let customizedLoadMetricSpecificationDecoded = try containerValues.decodeIfPresent(AutoScalingClientTypes.PredictiveScalingCustomizedLoadMetric.self, forKey: .customizedLoadMetricSpecification)
        customizedLoadMetricSpecification = customizedLoadMetricSpecificationDecoded
        let customizedCapacityMetricSpecificationDecoded = try containerValues.decodeIfPresent(AutoScalingClientTypes.PredictiveScalingCustomizedCapacityMetric.self, forKey: .customizedCapacityMetricSpecification)
        customizedCapacityMetricSpecification = customizedCapacityMetricSpecificationDecoded
    }
}
