// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct PutScalingPolicyInputBody: Swift.Equatable {
    let autoScalingGroupName: Swift.String?
    let policyName: Swift.String?
    let policyType: Swift.String?
    let adjustmentType: Swift.String?
    let minAdjustmentStep: Swift.Int?
    let minAdjustmentMagnitude: Swift.Int?
    let scalingAdjustment: Swift.Int?
    let cooldown: Swift.Int?
    let metricAggregationType: Swift.String?
    let stepAdjustments: [AutoScalingClientTypes.StepAdjustment]?
    let estimatedInstanceWarmup: Swift.Int?
    let targetTrackingConfiguration: AutoScalingClientTypes.TargetTrackingConfiguration?
    let enabled: Swift.Bool?
    let predictiveScalingConfiguration: AutoScalingClientTypes.PredictiveScalingConfiguration?
}

extension PutScalingPolicyInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case adjustmentType = "AdjustmentType"
        case autoScalingGroupName = "AutoScalingGroupName"
        case cooldown = "Cooldown"
        case enabled = "Enabled"
        case estimatedInstanceWarmup = "EstimatedInstanceWarmup"
        case metricAggregationType = "MetricAggregationType"
        case minAdjustmentMagnitude = "MinAdjustmentMagnitude"
        case minAdjustmentStep = "MinAdjustmentStep"
        case policyName = "PolicyName"
        case policyType = "PolicyType"
        case predictiveScalingConfiguration = "PredictiveScalingConfiguration"
        case scalingAdjustment = "ScalingAdjustment"
        case stepAdjustments = "StepAdjustments"
        case targetTrackingConfiguration = "TargetTrackingConfiguration"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let autoScalingGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .autoScalingGroupName)
        autoScalingGroupName = autoScalingGroupNameDecoded
        let policyNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policyName)
        policyName = policyNameDecoded
        let policyTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policyType)
        policyType = policyTypeDecoded
        let adjustmentTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .adjustmentType)
        adjustmentType = adjustmentTypeDecoded
        let minAdjustmentStepDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .minAdjustmentStep)
        minAdjustmentStep = minAdjustmentStepDecoded
        let minAdjustmentMagnitudeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .minAdjustmentMagnitude)
        minAdjustmentMagnitude = minAdjustmentMagnitudeDecoded
        let scalingAdjustmentDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .scalingAdjustment)
        scalingAdjustment = scalingAdjustmentDecoded
        let cooldownDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .cooldown)
        cooldown = cooldownDecoded
        let metricAggregationTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .metricAggregationType)
        metricAggregationType = metricAggregationTypeDecoded
        if containerValues.contains(.stepAdjustments) {
            struct KeyVal0{struct member{}}
            let stepAdjustmentsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .stepAdjustments)
            if let stepAdjustmentsWrappedContainer = stepAdjustmentsWrappedContainer {
                let stepAdjustmentsContainer = try stepAdjustmentsWrappedContainer.decodeIfPresent([AutoScalingClientTypes.StepAdjustment].self, forKey: .member)
                var stepAdjustmentsBuffer:[AutoScalingClientTypes.StepAdjustment]? = nil
                if let stepAdjustmentsContainer = stepAdjustmentsContainer {
                    stepAdjustmentsBuffer = [AutoScalingClientTypes.StepAdjustment]()
                    for structureContainer0 in stepAdjustmentsContainer {
                        stepAdjustmentsBuffer?.append(structureContainer0)
                    }
                }
                stepAdjustments = stepAdjustmentsBuffer
            } else {
                stepAdjustments = []
            }
        } else {
            stepAdjustments = nil
        }
        let estimatedInstanceWarmupDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .estimatedInstanceWarmup)
        estimatedInstanceWarmup = estimatedInstanceWarmupDecoded
        let targetTrackingConfigurationDecoded = try containerValues.decodeIfPresent(AutoScalingClientTypes.TargetTrackingConfiguration.self, forKey: .targetTrackingConfiguration)
        targetTrackingConfiguration = targetTrackingConfigurationDecoded
        let enabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enabled)
        enabled = enabledDecoded
        let predictiveScalingConfigurationDecoded = try containerValues.decodeIfPresent(AutoScalingClientTypes.PredictiveScalingConfiguration.self, forKey: .predictiveScalingConfiguration)
        predictiveScalingConfiguration = predictiveScalingConfigurationDecoded
    }
}
