// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AutoScalingClientTypes {
    /// Describes a launch configuration.
    public struct LaunchConfiguration: Swift.Equatable {
        /// Specifies whether to assign a public IPv4 address to the group's instances. If the instance is launched into a default subnet, the default is to assign a public IPv4 address, unless you disabled the option to assign a public IPv4 address on the subnet. If the instance is launched into a nondefault subnet, the default is not to assign a public IPv4 address, unless you enabled the option to assign a public IPv4 address on the subnet. For more information, see [Launching Auto Scaling instances in a VPC](https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-in-vpc.html) in the Amazon EC2 Auto Scaling User Guide.
        public var associatePublicIpAddress: Swift.Bool?
        /// The block device mapping entries that define the block devices to attach to the instances at launch. By default, the block devices specified in the block device mapping for the AMI are used. For more information, see [Block Device Mapping](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/block-device-mapping-concepts.html) in the Amazon EC2 User Guide for Linux Instances.
        public var blockDeviceMappings: [AutoScalingClientTypes.BlockDeviceMapping]?
        /// EC2-Classic retires on August 15, 2022. This property is not supported after that date. The ID of a ClassicLink-enabled VPC to link your EC2-Classic instances to.
        public var classicLinkVPCId: Swift.String?
        /// EC2-Classic retires on August 15, 2022. This property is not supported after that date. The IDs of one or more security groups for the VPC specified in ClassicLinkVPCId.
        public var classicLinkVPCSecurityGroups: [Swift.String]?
        /// The creation date and time for the launch configuration.
        /// This member is required.
        public var createdTime: ClientRuntime.Date?
        /// Specifies whether the launch configuration is optimized for EBS I/O (true) or not (false). For more information, see [Amazon EBS-Optimized Instances](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSOptimized.html) in the Amazon EC2 User Guide for Linux Instances.
        public var ebsOptimized: Swift.Bool?
        /// The name or the Amazon Resource Name (ARN) of the instance profile associated with the IAM role for the instance. The instance profile contains the IAM role. For more information, see [IAM role for applications that run on Amazon EC2 instances](https://docs.aws.amazon.com/autoscaling/ec2/userguide/us-iam-role.html) in the Amazon EC2 Auto Scaling User Guide.
        public var iamInstanceProfile: Swift.String?
        /// The ID of the Amazon Machine Image (AMI) to use to launch your EC2 instances. For more information, see [Find a Linux AMI](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/finding-an-ami.html) in the Amazon EC2 User Guide for Linux Instances.
        /// This member is required.
        public var imageId: Swift.String?
        /// Controls whether instances in this group are launched with detailed (true) or basic (false) monitoring. For more information, see [Configure Monitoring for Auto Scaling Instances](https://docs.aws.amazon.com/autoscaling/latest/userguide/enable-as-instance-metrics.html) in the Amazon EC2 Auto Scaling User Guide.
        public var instanceMonitoring: AutoScalingClientTypes.InstanceMonitoring?
        /// The instance type for the instances. For information about available instance types, see [Available instance types](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html#AvailableInstanceTypes) in the Amazon EC2 User Guide for Linux Instances.
        /// This member is required.
        public var instanceType: Swift.String?
        /// The ID of the kernel associated with the AMI.
        public var kernelId: Swift.String?
        /// The name of the key pair. For more information, see [Amazon EC2 Key Pairs](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html) in the Amazon EC2 User Guide for Linux Instances.
        public var keyName: Swift.String?
        /// The Amazon Resource Name (ARN) of the launch configuration.
        public var launchConfigurationARN: Swift.String?
        /// The name of the launch configuration.
        /// This member is required.
        public var launchConfigurationName: Swift.String?
        /// The metadata options for the instances. For more information, see [Configuring the Instance Metadata Options](https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-config.html#launch-configurations-imds) in the Amazon EC2 Auto Scaling User Guide.
        public var metadataOptions: AutoScalingClientTypes.InstanceMetadataOptions?
        /// The tenancy of the instance, either default or dedicated. An instance with dedicated tenancy runs on isolated, single-tenant hardware and can only be launched into a VPC. For more information, see [Configuring instance tenancy with Amazon EC2 Auto Scaling](https://docs.aws.amazon.com/autoscaling/ec2/userguide/auto-scaling-dedicated-instances.html) in the Amazon EC2 Auto Scaling User Guide.
        public var placementTenancy: Swift.String?
        /// The ID of the RAM disk associated with the AMI.
        public var ramdiskId: Swift.String?
        /// A list that contains the security groups to assign to the instances in the Auto Scaling group. For more information, see [Security Groups for Your VPC](https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_SecurityGroups.html) in the Amazon Virtual Private Cloud User Guide.
        public var securityGroups: [Swift.String]?
        /// The maximum hourly price to be paid for any Spot Instance launched to fulfill the request. Spot Instances are launched when the price you specify exceeds the current Spot price. For more information, see [Requesting Spot Instances](https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-launch-spot-instances.html) in the Amazon EC2 Auto Scaling User Guide.
        public var spotPrice: Swift.String?
        /// The user data to make available to the launched EC2 instances. For more information, see [Instance metadata and user data](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html) (Linux) and [Instance metadata and user data](https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/ec2-instance-metadata.html) (Windows). If you are using a command line tool, base64-encoding is performed for you, and you can load the text from a file. Otherwise, you must provide base64-encoded text. User data is limited to 16 KB.
        public var userData: Swift.String?

        public init (
            associatePublicIpAddress: Swift.Bool? = nil,
            blockDeviceMappings: [AutoScalingClientTypes.BlockDeviceMapping]? = nil,
            classicLinkVPCId: Swift.String? = nil,
            classicLinkVPCSecurityGroups: [Swift.String]? = nil,
            createdTime: ClientRuntime.Date? = nil,
            ebsOptimized: Swift.Bool? = nil,
            iamInstanceProfile: Swift.String? = nil,
            imageId: Swift.String? = nil,
            instanceMonitoring: AutoScalingClientTypes.InstanceMonitoring? = nil,
            instanceType: Swift.String? = nil,
            kernelId: Swift.String? = nil,
            keyName: Swift.String? = nil,
            launchConfigurationARN: Swift.String? = nil,
            launchConfigurationName: Swift.String? = nil,
            metadataOptions: AutoScalingClientTypes.InstanceMetadataOptions? = nil,
            placementTenancy: Swift.String? = nil,
            ramdiskId: Swift.String? = nil,
            securityGroups: [Swift.String]? = nil,
            spotPrice: Swift.String? = nil,
            userData: Swift.String? = nil
        )
        {
            self.associatePublicIpAddress = associatePublicIpAddress
            self.blockDeviceMappings = blockDeviceMappings
            self.classicLinkVPCId = classicLinkVPCId
            self.classicLinkVPCSecurityGroups = classicLinkVPCSecurityGroups
            self.createdTime = createdTime
            self.ebsOptimized = ebsOptimized
            self.iamInstanceProfile = iamInstanceProfile
            self.imageId = imageId
            self.instanceMonitoring = instanceMonitoring
            self.instanceType = instanceType
            self.kernelId = kernelId
            self.keyName = keyName
            self.launchConfigurationARN = launchConfigurationARN
            self.launchConfigurationName = launchConfigurationName
            self.metadataOptions = metadataOptions
            self.placementTenancy = placementTenancy
            self.ramdiskId = ramdiskId
            self.securityGroups = securityGroups
            self.spotPrice = spotPrice
            self.userData = userData
        }
    }

}
