// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeVTLDevicesOutputResponseBody: Swift.Equatable {
    let gatewayARN: Swift.String?
    let vTLDevices: [StorageGatewayClientTypes.VTLDevice]?
    let marker: Swift.String?
}

extension DescribeVTLDevicesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case gatewayARN = "GatewayARN"
        case marker = "Marker"
        case vTLDevices = "VTLDevices"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let gatewayARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .gatewayARN)
        gatewayARN = gatewayARNDecoded
        let vTLDevicesContainer = try containerValues.decodeIfPresent([StorageGatewayClientTypes.VTLDevice?].self, forKey: .vTLDevices)
        var vTLDevicesDecoded0:[StorageGatewayClientTypes.VTLDevice]? = nil
        if let vTLDevicesContainer = vTLDevicesContainer {
            vTLDevicesDecoded0 = [StorageGatewayClientTypes.VTLDevice]()
            for structure0 in vTLDevicesContainer {
                if let structure0 = structure0 {
                    vTLDevicesDecoded0?.append(structure0)
                }
            }
        }
        vTLDevices = vTLDevicesDecoded0
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
    }
}
