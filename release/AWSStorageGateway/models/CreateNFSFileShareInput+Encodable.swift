// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CreateNFSFileShareInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case auditDestinationARN = "AuditDestinationARN"
        case bucketRegion = "BucketRegion"
        case cacheAttributes = "CacheAttributes"
        case clientList = "ClientList"
        case clientToken = "ClientToken"
        case defaultStorageClass = "DefaultStorageClass"
        case fileShareName = "FileShareName"
        case gatewayARN = "GatewayARN"
        case guessMIMETypeEnabled = "GuessMIMETypeEnabled"
        case kMSEncrypted = "KMSEncrypted"
        case kMSKey = "KMSKey"
        case locationARN = "LocationARN"
        case nFSFileShareDefaults = "NFSFileShareDefaults"
        case notificationPolicy = "NotificationPolicy"
        case objectACL = "ObjectACL"
        case readOnly = "ReadOnly"
        case requesterPays = "RequesterPays"
        case role = "Role"
        case squash = "Squash"
        case tags = "Tags"
        case vPCEndpointDNSName = "VPCEndpointDNSName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let auditDestinationARN = self.auditDestinationARN {
            try encodeContainer.encode(auditDestinationARN, forKey: .auditDestinationARN)
        }
        if let bucketRegion = self.bucketRegion {
            try encodeContainer.encode(bucketRegion, forKey: .bucketRegion)
        }
        if let cacheAttributes = self.cacheAttributes {
            try encodeContainer.encode(cacheAttributes, forKey: .cacheAttributes)
        }
        if let clientList = clientList {
            var clientListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .clientList)
            for fileshareclientlist0 in clientList {
                try clientListContainer.encode(fileshareclientlist0)
            }
        }
        if let clientToken = self.clientToken {
            try encodeContainer.encode(clientToken, forKey: .clientToken)
        }
        if let defaultStorageClass = self.defaultStorageClass {
            try encodeContainer.encode(defaultStorageClass, forKey: .defaultStorageClass)
        }
        if let fileShareName = self.fileShareName {
            try encodeContainer.encode(fileShareName, forKey: .fileShareName)
        }
        if let gatewayARN = self.gatewayARN {
            try encodeContainer.encode(gatewayARN, forKey: .gatewayARN)
        }
        if let guessMIMETypeEnabled = self.guessMIMETypeEnabled {
            try encodeContainer.encode(guessMIMETypeEnabled, forKey: .guessMIMETypeEnabled)
        }
        if let kMSEncrypted = self.kMSEncrypted {
            try encodeContainer.encode(kMSEncrypted, forKey: .kMSEncrypted)
        }
        if let kMSKey = self.kMSKey {
            try encodeContainer.encode(kMSKey, forKey: .kMSKey)
        }
        if let locationARN = self.locationARN {
            try encodeContainer.encode(locationARN, forKey: .locationARN)
        }
        if let nFSFileShareDefaults = self.nFSFileShareDefaults {
            try encodeContainer.encode(nFSFileShareDefaults, forKey: .nFSFileShareDefaults)
        }
        if let notificationPolicy = self.notificationPolicy {
            try encodeContainer.encode(notificationPolicy, forKey: .notificationPolicy)
        }
        if let objectACL = self.objectACL {
            try encodeContainer.encode(objectACL.rawValue, forKey: .objectACL)
        }
        if let readOnly = self.readOnly {
            try encodeContainer.encode(readOnly, forKey: .readOnly)
        }
        if let requesterPays = self.requesterPays {
            try encodeContainer.encode(requesterPays, forKey: .requesterPays)
        }
        if let role = self.role {
            try encodeContainer.encode(role, forKey: .role)
        }
        if let squash = self.squash {
            try encodeContainer.encode(squash, forKey: .squash)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tags0 in tags {
                try tagsContainer.encode(tags0)
            }
        }
        if let vPCEndpointDNSName = self.vPCEndpointDNSName {
            try encodeContainer.encode(vPCEndpointDNSName, forKey: .vPCEndpointDNSName)
        }
    }
}
