// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension UpdateSMBFileShareInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accessBasedEnumeration = "AccessBasedEnumeration"
        case adminUserList = "AdminUserList"
        case auditDestinationARN = "AuditDestinationARN"
        case cacheAttributes = "CacheAttributes"
        case caseSensitivity = "CaseSensitivity"
        case defaultStorageClass = "DefaultStorageClass"
        case fileShareARN = "FileShareARN"
        case fileShareName = "FileShareName"
        case guessMIMETypeEnabled = "GuessMIMETypeEnabled"
        case invalidUserList = "InvalidUserList"
        case kMSEncrypted = "KMSEncrypted"
        case kMSKey = "KMSKey"
        case notificationPolicy = "NotificationPolicy"
        case objectACL = "ObjectACL"
        case oplocksEnabled = "OplocksEnabled"
        case readOnly = "ReadOnly"
        case requesterPays = "RequesterPays"
        case sMBACLEnabled = "SMBACLEnabled"
        case validUserList = "ValidUserList"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accessBasedEnumeration = self.accessBasedEnumeration {
            try encodeContainer.encode(accessBasedEnumeration, forKey: .accessBasedEnumeration)
        }
        if let adminUserList = adminUserList {
            var adminUserListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .adminUserList)
            for userlist0 in adminUserList {
                try adminUserListContainer.encode(userlist0)
            }
        }
        if let auditDestinationARN = self.auditDestinationARN {
            try encodeContainer.encode(auditDestinationARN, forKey: .auditDestinationARN)
        }
        if let cacheAttributes = self.cacheAttributes {
            try encodeContainer.encode(cacheAttributes, forKey: .cacheAttributes)
        }
        if let caseSensitivity = self.caseSensitivity {
            try encodeContainer.encode(caseSensitivity.rawValue, forKey: .caseSensitivity)
        }
        if let defaultStorageClass = self.defaultStorageClass {
            try encodeContainer.encode(defaultStorageClass, forKey: .defaultStorageClass)
        }
        if let fileShareARN = self.fileShareARN {
            try encodeContainer.encode(fileShareARN, forKey: .fileShareARN)
        }
        if let fileShareName = self.fileShareName {
            try encodeContainer.encode(fileShareName, forKey: .fileShareName)
        }
        if let guessMIMETypeEnabled = self.guessMIMETypeEnabled {
            try encodeContainer.encode(guessMIMETypeEnabled, forKey: .guessMIMETypeEnabled)
        }
        if let invalidUserList = invalidUserList {
            var invalidUserListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .invalidUserList)
            for userlist0 in invalidUserList {
                try invalidUserListContainer.encode(userlist0)
            }
        }
        if let kMSEncrypted = self.kMSEncrypted {
            try encodeContainer.encode(kMSEncrypted, forKey: .kMSEncrypted)
        }
        if let kMSKey = self.kMSKey {
            try encodeContainer.encode(kMSKey, forKey: .kMSKey)
        }
        if let notificationPolicy = self.notificationPolicy {
            try encodeContainer.encode(notificationPolicy, forKey: .notificationPolicy)
        }
        if let objectACL = self.objectACL {
            try encodeContainer.encode(objectACL.rawValue, forKey: .objectACL)
        }
        if let oplocksEnabled = self.oplocksEnabled {
            try encodeContainer.encode(oplocksEnabled, forKey: .oplocksEnabled)
        }
        if let readOnly = self.readOnly {
            try encodeContainer.encode(readOnly, forKey: .readOnly)
        }
        if let requesterPays = self.requesterPays {
            try encodeContainer.encode(requesterPays, forKey: .requesterPays)
        }
        if let sMBACLEnabled = self.sMBACLEnabled {
            try encodeContainer.encode(sMBACLEnabled, forKey: .sMBACLEnabled)
        }
        if let validUserList = validUserList {
            var validUserListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .validUserList)
            for userlist0 in validUserList {
                try validUserListContainer.encode(userlist0)
            }
        }
    }
}
