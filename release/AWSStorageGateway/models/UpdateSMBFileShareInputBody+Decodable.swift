// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct UpdateSMBFileShareInputBody: Swift.Equatable {
    let fileShareARN: Swift.String?
    let kMSEncrypted: Swift.Bool?
    let kMSKey: Swift.String?
    let defaultStorageClass: Swift.String?
    let objectACL: StorageGatewayClientTypes.ObjectACL?
    let readOnly: Swift.Bool?
    let guessMIMETypeEnabled: Swift.Bool?
    let requesterPays: Swift.Bool?
    let sMBACLEnabled: Swift.Bool?
    let accessBasedEnumeration: Swift.Bool?
    let adminUserList: [Swift.String]?
    let validUserList: [Swift.String]?
    let invalidUserList: [Swift.String]?
    let auditDestinationARN: Swift.String?
    let caseSensitivity: StorageGatewayClientTypes.CaseSensitivity?
    let fileShareName: Swift.String?
    let cacheAttributes: StorageGatewayClientTypes.CacheAttributes?
    let notificationPolicy: Swift.String?
    let oplocksEnabled: Swift.Bool?
}

extension UpdateSMBFileShareInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accessBasedEnumeration = "AccessBasedEnumeration"
        case adminUserList = "AdminUserList"
        case auditDestinationARN = "AuditDestinationARN"
        case cacheAttributes = "CacheAttributes"
        case caseSensitivity = "CaseSensitivity"
        case defaultStorageClass = "DefaultStorageClass"
        case fileShareARN = "FileShareARN"
        case fileShareName = "FileShareName"
        case guessMIMETypeEnabled = "GuessMIMETypeEnabled"
        case invalidUserList = "InvalidUserList"
        case kMSEncrypted = "KMSEncrypted"
        case kMSKey = "KMSKey"
        case notificationPolicy = "NotificationPolicy"
        case objectACL = "ObjectACL"
        case oplocksEnabled = "OplocksEnabled"
        case readOnly = "ReadOnly"
        case requesterPays = "RequesterPays"
        case sMBACLEnabled = "SMBACLEnabled"
        case validUserList = "ValidUserList"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fileShareARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fileShareARN)
        fileShareARN = fileShareARNDecoded
        let kMSEncryptedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .kMSEncrypted)
        kMSEncrypted = kMSEncryptedDecoded
        let kMSKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kMSKey)
        kMSKey = kMSKeyDecoded
        let defaultStorageClassDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .defaultStorageClass)
        defaultStorageClass = defaultStorageClassDecoded
        let objectACLDecoded = try containerValues.decodeIfPresent(StorageGatewayClientTypes.ObjectACL.self, forKey: .objectACL)
        objectACL = objectACLDecoded
        let readOnlyDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .readOnly)
        readOnly = readOnlyDecoded
        let guessMIMETypeEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .guessMIMETypeEnabled)
        guessMIMETypeEnabled = guessMIMETypeEnabledDecoded
        let requesterPaysDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .requesterPays)
        requesterPays = requesterPaysDecoded
        let sMBACLEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .sMBACLEnabled)
        sMBACLEnabled = sMBACLEnabledDecoded
        let accessBasedEnumerationDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .accessBasedEnumeration)
        accessBasedEnumeration = accessBasedEnumerationDecoded
        let adminUserListContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .adminUserList)
        var adminUserListDecoded0:[Swift.String]? = nil
        if let adminUserListContainer = adminUserListContainer {
            adminUserListDecoded0 = [Swift.String]()
            for string0 in adminUserListContainer {
                if let string0 = string0 {
                    adminUserListDecoded0?.append(string0)
                }
            }
        }
        adminUserList = adminUserListDecoded0
        let validUserListContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .validUserList)
        var validUserListDecoded0:[Swift.String]? = nil
        if let validUserListContainer = validUserListContainer {
            validUserListDecoded0 = [Swift.String]()
            for string0 in validUserListContainer {
                if let string0 = string0 {
                    validUserListDecoded0?.append(string0)
                }
            }
        }
        validUserList = validUserListDecoded0
        let invalidUserListContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .invalidUserList)
        var invalidUserListDecoded0:[Swift.String]? = nil
        if let invalidUserListContainer = invalidUserListContainer {
            invalidUserListDecoded0 = [Swift.String]()
            for string0 in invalidUserListContainer {
                if let string0 = string0 {
                    invalidUserListDecoded0?.append(string0)
                }
            }
        }
        invalidUserList = invalidUserListDecoded0
        let auditDestinationARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .auditDestinationARN)
        auditDestinationARN = auditDestinationARNDecoded
        let caseSensitivityDecoded = try containerValues.decodeIfPresent(StorageGatewayClientTypes.CaseSensitivity.self, forKey: .caseSensitivity)
        caseSensitivity = caseSensitivityDecoded
        let fileShareNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fileShareName)
        fileShareName = fileShareNameDecoded
        let cacheAttributesDecoded = try containerValues.decodeIfPresent(StorageGatewayClientTypes.CacheAttributes.self, forKey: .cacheAttributes)
        cacheAttributes = cacheAttributesDecoded
        let notificationPolicyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .notificationPolicy)
        notificationPolicy = notificationPolicyDecoded
        let oplocksEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .oplocksEnabled)
        oplocksEnabled = oplocksEnabledDecoded
    }
}
