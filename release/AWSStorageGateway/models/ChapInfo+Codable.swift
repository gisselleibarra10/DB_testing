// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension StorageGatewayClientTypes.ChapInfo: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case initiatorName = "InitiatorName"
        case secretToAuthenticateInitiator = "SecretToAuthenticateInitiator"
        case secretToAuthenticateTarget = "SecretToAuthenticateTarget"
        case targetARN = "TargetARN"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let initiatorName = self.initiatorName {
            try encodeContainer.encode(initiatorName, forKey: .initiatorName)
        }
        if let secretToAuthenticateInitiator = self.secretToAuthenticateInitiator {
            try encodeContainer.encode(secretToAuthenticateInitiator, forKey: .secretToAuthenticateInitiator)
        }
        if let secretToAuthenticateTarget = self.secretToAuthenticateTarget {
            try encodeContainer.encode(secretToAuthenticateTarget, forKey: .secretToAuthenticateTarget)
        }
        if let targetARN = self.targetARN {
            try encodeContainer.encode(targetARN, forKey: .targetARN)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let targetARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .targetARN)
        targetARN = targetARNDecoded
        let secretToAuthenticateInitiatorDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .secretToAuthenticateInitiator)
        secretToAuthenticateInitiator = secretToAuthenticateInitiatorDecoded
        let initiatorNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .initiatorName)
        initiatorName = initiatorNameDecoded
        let secretToAuthenticateTargetDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .secretToAuthenticateTarget)
        secretToAuthenticateTarget = secretToAuthenticateTargetDecoded
    }
}
