// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeTapeArchivesInputBody: Swift.Equatable {
    let tapeARNs: [Swift.String]?
    let marker: Swift.String?
    let limit: Swift.Int?
}

extension DescribeTapeArchivesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case limit = "Limit"
        case marker = "Marker"
        case tapeARNs = "TapeARNs"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tapeARNsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .tapeARNs)
        var tapeARNsDecoded0:[Swift.String]? = nil
        if let tapeARNsContainer = tapeARNsContainer {
            tapeARNsDecoded0 = [Swift.String]()
            for string0 in tapeARNsContainer {
                if let string0 = string0 {
                    tapeARNsDecoded0?.append(string0)
                }
            }
        }
        tapeARNs = tapeARNsDecoded0
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
        let limitDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .limit)
        limit = limitDecoded
    }
}
