// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CreateTapesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientToken = "ClientToken"
        case gatewayARN = "GatewayARN"
        case kMSEncrypted = "KMSEncrypted"
        case kMSKey = "KMSKey"
        case numTapesToCreate = "NumTapesToCreate"
        case poolId = "PoolId"
        case tags = "Tags"
        case tapeBarcodePrefix = "TapeBarcodePrefix"
        case tapeSizeInBytes = "TapeSizeInBytes"
        case worm = "Worm"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientToken = self.clientToken {
            try encodeContainer.encode(clientToken, forKey: .clientToken)
        }
        if let gatewayARN = self.gatewayARN {
            try encodeContainer.encode(gatewayARN, forKey: .gatewayARN)
        }
        if let kMSEncrypted = self.kMSEncrypted {
            try encodeContainer.encode(kMSEncrypted, forKey: .kMSEncrypted)
        }
        if let kMSKey = self.kMSKey {
            try encodeContainer.encode(kMSKey, forKey: .kMSKey)
        }
        if let numTapesToCreate = self.numTapesToCreate {
            try encodeContainer.encode(numTapesToCreate, forKey: .numTapesToCreate)
        }
        if let poolId = self.poolId {
            try encodeContainer.encode(poolId, forKey: .poolId)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tags0 in tags {
                try tagsContainer.encode(tags0)
            }
        }
        if let tapeBarcodePrefix = self.tapeBarcodePrefix {
            try encodeContainer.encode(tapeBarcodePrefix, forKey: .tapeBarcodePrefix)
        }
        if let tapeSizeInBytes = self.tapeSizeInBytes {
            try encodeContainer.encode(tapeSizeInBytes, forKey: .tapeSizeInBytes)
        }
        if worm != false {
            try encodeContainer.encode(worm, forKey: .worm)
        }
    }
}
