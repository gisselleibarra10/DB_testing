// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeTapeRecoveryPointsOutputResponseBody: Swift.Equatable {
    let gatewayARN: Swift.String?
    let tapeRecoveryPointInfos: [StorageGatewayClientTypes.TapeRecoveryPointInfo]?
    let marker: Swift.String?
}

extension DescribeTapeRecoveryPointsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case gatewayARN = "GatewayARN"
        case marker = "Marker"
        case tapeRecoveryPointInfos = "TapeRecoveryPointInfos"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let gatewayARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .gatewayARN)
        gatewayARN = gatewayARNDecoded
        let tapeRecoveryPointInfosContainer = try containerValues.decodeIfPresent([StorageGatewayClientTypes.TapeRecoveryPointInfo?].self, forKey: .tapeRecoveryPointInfos)
        var tapeRecoveryPointInfosDecoded0:[StorageGatewayClientTypes.TapeRecoveryPointInfo]? = nil
        if let tapeRecoveryPointInfosContainer = tapeRecoveryPointInfosContainer {
            tapeRecoveryPointInfosDecoded0 = [StorageGatewayClientTypes.TapeRecoveryPointInfo]()
            for structure0 in tapeRecoveryPointInfosContainer {
                if let structure0 = structure0 {
                    tapeRecoveryPointInfosDecoded0?.append(structure0)
                }
            }
        }
        tapeRecoveryPointInfos = tapeRecoveryPointInfosDecoded0
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
    }
}
