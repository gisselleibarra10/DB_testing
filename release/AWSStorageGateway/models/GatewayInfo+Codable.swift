// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension StorageGatewayClientTypes.GatewayInfo: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case ec2InstanceId = "Ec2InstanceId"
        case ec2InstanceRegion = "Ec2InstanceRegion"
        case gatewayARN = "GatewayARN"
        case gatewayId = "GatewayId"
        case gatewayName = "GatewayName"
        case gatewayOperationalState = "GatewayOperationalState"
        case gatewayType = "GatewayType"
        case hostEnvironment = "HostEnvironment"
        case hostEnvironmentId = "HostEnvironmentId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let ec2InstanceId = self.ec2InstanceId {
            try encodeContainer.encode(ec2InstanceId, forKey: .ec2InstanceId)
        }
        if let ec2InstanceRegion = self.ec2InstanceRegion {
            try encodeContainer.encode(ec2InstanceRegion, forKey: .ec2InstanceRegion)
        }
        if let gatewayARN = self.gatewayARN {
            try encodeContainer.encode(gatewayARN, forKey: .gatewayARN)
        }
        if let gatewayId = self.gatewayId {
            try encodeContainer.encode(gatewayId, forKey: .gatewayId)
        }
        if let gatewayName = self.gatewayName {
            try encodeContainer.encode(gatewayName, forKey: .gatewayName)
        }
        if let gatewayOperationalState = self.gatewayOperationalState {
            try encodeContainer.encode(gatewayOperationalState, forKey: .gatewayOperationalState)
        }
        if let gatewayType = self.gatewayType {
            try encodeContainer.encode(gatewayType, forKey: .gatewayType)
        }
        if let hostEnvironment = self.hostEnvironment {
            try encodeContainer.encode(hostEnvironment.rawValue, forKey: .hostEnvironment)
        }
        if let hostEnvironmentId = self.hostEnvironmentId {
            try encodeContainer.encode(hostEnvironmentId, forKey: .hostEnvironmentId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let gatewayIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .gatewayId)
        gatewayId = gatewayIdDecoded
        let gatewayARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .gatewayARN)
        gatewayARN = gatewayARNDecoded
        let gatewayTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .gatewayType)
        gatewayType = gatewayTypeDecoded
        let gatewayOperationalStateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .gatewayOperationalState)
        gatewayOperationalState = gatewayOperationalStateDecoded
        let gatewayNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .gatewayName)
        gatewayName = gatewayNameDecoded
        let ec2InstanceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ec2InstanceId)
        ec2InstanceId = ec2InstanceIdDecoded
        let ec2InstanceRegionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ec2InstanceRegion)
        ec2InstanceRegion = ec2InstanceRegionDecoded
        let hostEnvironmentDecoded = try containerValues.decodeIfPresent(StorageGatewayClientTypes.HostEnvironment.self, forKey: .hostEnvironment)
        hostEnvironment = hostEnvironmentDecoded
        let hostEnvironmentIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .hostEnvironmentId)
        hostEnvironmentId = hostEnvironmentIdDecoded
    }
}
