// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension StorageGatewayClientTypes.StorediSCSIVolume: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createdDate = "CreatedDate"
        case kMSKey = "KMSKey"
        case preservedExistingData = "PreservedExistingData"
        case sourceSnapshotId = "SourceSnapshotId"
        case targetName = "TargetName"
        case volumeARN = "VolumeARN"
        case volumeAttachmentStatus = "VolumeAttachmentStatus"
        case volumeDiskId = "VolumeDiskId"
        case volumeId = "VolumeId"
        case volumeProgress = "VolumeProgress"
        case volumeSizeInBytes = "VolumeSizeInBytes"
        case volumeStatus = "VolumeStatus"
        case volumeType = "VolumeType"
        case volumeUsedInBytes = "VolumeUsedInBytes"
        case volumeiSCSIAttributes = "VolumeiSCSIAttributes"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let createdDate = self.createdDate {
            try encodeContainer.encode(createdDate.timeIntervalSince1970, forKey: .createdDate)
        }
        if let kMSKey = self.kMSKey {
            try encodeContainer.encode(kMSKey, forKey: .kMSKey)
        }
        if preservedExistingData != false {
            try encodeContainer.encode(preservedExistingData, forKey: .preservedExistingData)
        }
        if let sourceSnapshotId = self.sourceSnapshotId {
            try encodeContainer.encode(sourceSnapshotId, forKey: .sourceSnapshotId)
        }
        if let targetName = self.targetName {
            try encodeContainer.encode(targetName, forKey: .targetName)
        }
        if let volumeARN = self.volumeARN {
            try encodeContainer.encode(volumeARN, forKey: .volumeARN)
        }
        if let volumeAttachmentStatus = self.volumeAttachmentStatus {
            try encodeContainer.encode(volumeAttachmentStatus, forKey: .volumeAttachmentStatus)
        }
        if let volumeDiskId = self.volumeDiskId {
            try encodeContainer.encode(volumeDiskId, forKey: .volumeDiskId)
        }
        if let volumeId = self.volumeId {
            try encodeContainer.encode(volumeId, forKey: .volumeId)
        }
        if let volumeProgress = self.volumeProgress {
            try encodeContainer.encode(volumeProgress, forKey: .volumeProgress)
        }
        if volumeSizeInBytes != 0 {
            try encodeContainer.encode(volumeSizeInBytes, forKey: .volumeSizeInBytes)
        }
        if let volumeStatus = self.volumeStatus {
            try encodeContainer.encode(volumeStatus, forKey: .volumeStatus)
        }
        if let volumeType = self.volumeType {
            try encodeContainer.encode(volumeType, forKey: .volumeType)
        }
        if let volumeUsedInBytes = self.volumeUsedInBytes {
            try encodeContainer.encode(volumeUsedInBytes, forKey: .volumeUsedInBytes)
        }
        if let volumeiSCSIAttributes = self.volumeiSCSIAttributes {
            try encodeContainer.encode(volumeiSCSIAttributes, forKey: .volumeiSCSIAttributes)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let volumeARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .volumeARN)
        volumeARN = volumeARNDecoded
        let volumeIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .volumeId)
        volumeId = volumeIdDecoded
        let volumeTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .volumeType)
        volumeType = volumeTypeDecoded
        let volumeStatusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .volumeStatus)
        volumeStatus = volumeStatusDecoded
        let volumeAttachmentStatusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .volumeAttachmentStatus)
        volumeAttachmentStatus = volumeAttachmentStatusDecoded
        let volumeSizeInBytesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .volumeSizeInBytes) ?? 0
        volumeSizeInBytes = volumeSizeInBytesDecoded
        let volumeProgressDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .volumeProgress)
        volumeProgress = volumeProgressDecoded
        let volumeDiskIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .volumeDiskId)
        volumeDiskId = volumeDiskIdDecoded
        let sourceSnapshotIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceSnapshotId)
        sourceSnapshotId = sourceSnapshotIdDecoded
        let preservedExistingDataDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .preservedExistingData) ?? false
        preservedExistingData = preservedExistingDataDecoded
        let volumeiSCSIAttributesDecoded = try containerValues.decodeIfPresent(StorageGatewayClientTypes.VolumeiSCSIAttributes.self, forKey: .volumeiSCSIAttributes)
        volumeiSCSIAttributes = volumeiSCSIAttributesDecoded
        let createdDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdDate)
        createdDate = createdDateDecoded
        let volumeUsedInBytesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .volumeUsedInBytes)
        volumeUsedInBytes = volumeUsedInBytesDecoded
        let kMSKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kMSKey)
        kMSKey = kMSKeyDecoded
        let targetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .targetName)
        targetName = targetNameDecoded
    }
}
