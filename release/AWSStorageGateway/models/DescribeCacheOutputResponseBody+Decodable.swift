// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeCacheOutputResponseBody: Swift.Equatable {
    let gatewayARN: Swift.String?
    let diskIds: [Swift.String]?
    let cacheAllocatedInBytes: Swift.Int
    let cacheUsedPercentage: Swift.Double
    let cacheDirtyPercentage: Swift.Double
    let cacheHitPercentage: Swift.Double
    let cacheMissPercentage: Swift.Double
}

extension DescribeCacheOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cacheAllocatedInBytes = "CacheAllocatedInBytes"
        case cacheDirtyPercentage = "CacheDirtyPercentage"
        case cacheHitPercentage = "CacheHitPercentage"
        case cacheMissPercentage = "CacheMissPercentage"
        case cacheUsedPercentage = "CacheUsedPercentage"
        case diskIds = "DiskIds"
        case gatewayARN = "GatewayARN"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let gatewayARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .gatewayARN)
        gatewayARN = gatewayARNDecoded
        let diskIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .diskIds)
        var diskIdsDecoded0:[Swift.String]? = nil
        if let diskIdsContainer = diskIdsContainer {
            diskIdsDecoded0 = [Swift.String]()
            for string0 in diskIdsContainer {
                if let string0 = string0 {
                    diskIdsDecoded0?.append(string0)
                }
            }
        }
        diskIds = diskIdsDecoded0
        let cacheAllocatedInBytesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .cacheAllocatedInBytes) ?? 0
        cacheAllocatedInBytes = cacheAllocatedInBytesDecoded
        let cacheUsedPercentageDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .cacheUsedPercentage) ?? 0.0
        cacheUsedPercentage = cacheUsedPercentageDecoded
        let cacheDirtyPercentageDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .cacheDirtyPercentage) ?? 0.0
        cacheDirtyPercentage = cacheDirtyPercentageDecoded
        let cacheHitPercentageDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .cacheHitPercentage) ?? 0.0
        cacheHitPercentage = cacheHitPercentageDecoded
        let cacheMissPercentageDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .cacheMissPercentage) ?? 0.0
        cacheMissPercentage = cacheMissPercentageDecoded
    }
}
