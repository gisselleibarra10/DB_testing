// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeGatewayInformationOutputResponseBody: Swift.Equatable {
    let gatewayARN: Swift.String?
    let gatewayId: Swift.String?
    let gatewayName: Swift.String?
    let gatewayTimezone: Swift.String?
    let gatewayState: Swift.String?
    let gatewayNetworkInterfaces: [StorageGatewayClientTypes.NetworkInterface]?
    let gatewayType: Swift.String?
    let nextUpdateAvailabilityDate: Swift.String?
    let lastSoftwareUpdate: Swift.String?
    let ec2InstanceId: Swift.String?
    let ec2InstanceRegion: Swift.String?
    let tags: [StorageGatewayClientTypes.Tag]?
    let vPCEndpoint: Swift.String?
    let cloudWatchLogGroupARN: Swift.String?
    let hostEnvironment: StorageGatewayClientTypes.HostEnvironment?
    let endpointType: Swift.String?
    let softwareUpdatesEndDate: Swift.String?
    let deprecationDate: Swift.String?
    let gatewayCapacity: StorageGatewayClientTypes.GatewayCapacity?
    let supportedGatewayCapacities: [StorageGatewayClientTypes.GatewayCapacity]?
    let hostEnvironmentId: Swift.String?
}

extension DescribeGatewayInformationOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cloudWatchLogGroupARN = "CloudWatchLogGroupARN"
        case deprecationDate = "DeprecationDate"
        case ec2InstanceId = "Ec2InstanceId"
        case ec2InstanceRegion = "Ec2InstanceRegion"
        case endpointType = "EndpointType"
        case gatewayARN = "GatewayARN"
        case gatewayCapacity = "GatewayCapacity"
        case gatewayId = "GatewayId"
        case gatewayName = "GatewayName"
        case gatewayNetworkInterfaces = "GatewayNetworkInterfaces"
        case gatewayState = "GatewayState"
        case gatewayTimezone = "GatewayTimezone"
        case gatewayType = "GatewayType"
        case hostEnvironment = "HostEnvironment"
        case hostEnvironmentId = "HostEnvironmentId"
        case lastSoftwareUpdate = "LastSoftwareUpdate"
        case nextUpdateAvailabilityDate = "NextUpdateAvailabilityDate"
        case softwareUpdatesEndDate = "SoftwareUpdatesEndDate"
        case supportedGatewayCapacities = "SupportedGatewayCapacities"
        case tags = "Tags"
        case vPCEndpoint = "VPCEndpoint"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let gatewayARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .gatewayARN)
        gatewayARN = gatewayARNDecoded
        let gatewayIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .gatewayId)
        gatewayId = gatewayIdDecoded
        let gatewayNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .gatewayName)
        gatewayName = gatewayNameDecoded
        let gatewayTimezoneDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .gatewayTimezone)
        gatewayTimezone = gatewayTimezoneDecoded
        let gatewayStateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .gatewayState)
        gatewayState = gatewayStateDecoded
        let gatewayNetworkInterfacesContainer = try containerValues.decodeIfPresent([StorageGatewayClientTypes.NetworkInterface?].self, forKey: .gatewayNetworkInterfaces)
        var gatewayNetworkInterfacesDecoded0:[StorageGatewayClientTypes.NetworkInterface]? = nil
        if let gatewayNetworkInterfacesContainer = gatewayNetworkInterfacesContainer {
            gatewayNetworkInterfacesDecoded0 = [StorageGatewayClientTypes.NetworkInterface]()
            for structure0 in gatewayNetworkInterfacesContainer {
                if let structure0 = structure0 {
                    gatewayNetworkInterfacesDecoded0?.append(structure0)
                }
            }
        }
        gatewayNetworkInterfaces = gatewayNetworkInterfacesDecoded0
        let gatewayTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .gatewayType)
        gatewayType = gatewayTypeDecoded
        let nextUpdateAvailabilityDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextUpdateAvailabilityDate)
        nextUpdateAvailabilityDate = nextUpdateAvailabilityDateDecoded
        let lastSoftwareUpdateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastSoftwareUpdate)
        lastSoftwareUpdate = lastSoftwareUpdateDecoded
        let ec2InstanceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ec2InstanceId)
        ec2InstanceId = ec2InstanceIdDecoded
        let ec2InstanceRegionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ec2InstanceRegion)
        ec2InstanceRegion = ec2InstanceRegionDecoded
        let tagsContainer = try containerValues.decodeIfPresent([StorageGatewayClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[StorageGatewayClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [StorageGatewayClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let vPCEndpointDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vPCEndpoint)
        vPCEndpoint = vPCEndpointDecoded
        let cloudWatchLogGroupARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cloudWatchLogGroupARN)
        cloudWatchLogGroupARN = cloudWatchLogGroupARNDecoded
        let hostEnvironmentDecoded = try containerValues.decodeIfPresent(StorageGatewayClientTypes.HostEnvironment.self, forKey: .hostEnvironment)
        hostEnvironment = hostEnvironmentDecoded
        let endpointTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .endpointType)
        endpointType = endpointTypeDecoded
        let softwareUpdatesEndDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .softwareUpdatesEndDate)
        softwareUpdatesEndDate = softwareUpdatesEndDateDecoded
        let deprecationDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deprecationDate)
        deprecationDate = deprecationDateDecoded
        let gatewayCapacityDecoded = try containerValues.decodeIfPresent(StorageGatewayClientTypes.GatewayCapacity.self, forKey: .gatewayCapacity)
        gatewayCapacity = gatewayCapacityDecoded
        let supportedGatewayCapacitiesContainer = try containerValues.decodeIfPresent([StorageGatewayClientTypes.GatewayCapacity?].self, forKey: .supportedGatewayCapacities)
        var supportedGatewayCapacitiesDecoded0:[StorageGatewayClientTypes.GatewayCapacity]? = nil
        if let supportedGatewayCapacitiesContainer = supportedGatewayCapacitiesContainer {
            supportedGatewayCapacitiesDecoded0 = [StorageGatewayClientTypes.GatewayCapacity]()
            for string0 in supportedGatewayCapacitiesContainer {
                if let string0 = string0 {
                    supportedGatewayCapacitiesDecoded0?.append(string0)
                }
            }
        }
        supportedGatewayCapacities = supportedGatewayCapacitiesDecoded0
        let hostEnvironmentIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .hostEnvironmentId)
        hostEnvironmentId = hostEnvironmentIdDecoded
    }
}
