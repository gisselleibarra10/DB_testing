// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension StorageGatewayClientTypes.Disk: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case diskAllocationResource = "DiskAllocationResource"
        case diskAllocationType = "DiskAllocationType"
        case diskAttributeList = "DiskAttributeList"
        case diskId = "DiskId"
        case diskNode = "DiskNode"
        case diskPath = "DiskPath"
        case diskSizeInBytes = "DiskSizeInBytes"
        case diskStatus = "DiskStatus"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let diskAllocationResource = self.diskAllocationResource {
            try encodeContainer.encode(diskAllocationResource, forKey: .diskAllocationResource)
        }
        if let diskAllocationType = self.diskAllocationType {
            try encodeContainer.encode(diskAllocationType, forKey: .diskAllocationType)
        }
        if let diskAttributeList = diskAttributeList {
            var diskAttributeListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .diskAttributeList)
            for diskattributelist0 in diskAttributeList {
                try diskAttributeListContainer.encode(diskattributelist0)
            }
        }
        if let diskId = self.diskId {
            try encodeContainer.encode(diskId, forKey: .diskId)
        }
        if let diskNode = self.diskNode {
            try encodeContainer.encode(diskNode, forKey: .diskNode)
        }
        if let diskPath = self.diskPath {
            try encodeContainer.encode(diskPath, forKey: .diskPath)
        }
        if diskSizeInBytes != 0 {
            try encodeContainer.encode(diskSizeInBytes, forKey: .diskSizeInBytes)
        }
        if let diskStatus = self.diskStatus {
            try encodeContainer.encode(diskStatus, forKey: .diskStatus)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let diskIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .diskId)
        diskId = diskIdDecoded
        let diskPathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .diskPath)
        diskPath = diskPathDecoded
        let diskNodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .diskNode)
        diskNode = diskNodeDecoded
        let diskStatusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .diskStatus)
        diskStatus = diskStatusDecoded
        let diskSizeInBytesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .diskSizeInBytes) ?? 0
        diskSizeInBytes = diskSizeInBytesDecoded
        let diskAllocationTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .diskAllocationType)
        diskAllocationType = diskAllocationTypeDecoded
        let diskAllocationResourceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .diskAllocationResource)
        diskAllocationResource = diskAllocationResourceDecoded
        let diskAttributeListContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .diskAttributeList)
        var diskAttributeListDecoded0:[Swift.String]? = nil
        if let diskAttributeListContainer = diskAttributeListContainer {
            diskAttributeListDecoded0 = [Swift.String]()
            for string0 in diskAttributeListContainer {
                if let string0 = string0 {
                    diskAttributeListDecoded0?.append(string0)
                }
            }
        }
        diskAttributeList = diskAttributeListDecoded0
    }
}
