// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListTapePoolsInputBody: Swift.Equatable {
    let poolARNs: [Swift.String]?
    let marker: Swift.String?
    let limit: Swift.Int?
}

extension ListTapePoolsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case limit = "Limit"
        case marker = "Marker"
        case poolARNs = "PoolARNs"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let poolARNsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .poolARNs)
        var poolARNsDecoded0:[Swift.String]? = nil
        if let poolARNsContainer = poolARNsContainer {
            poolARNsDecoded0 = [Swift.String]()
            for string0 in poolARNsContainer {
                if let string0 = string0 {
                    poolARNsDecoded0?.append(string0)
                }
            }
        }
        poolARNs = poolARNsDecoded0
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
        let limitDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .limit)
        limit = limitDecoded
    }
}
