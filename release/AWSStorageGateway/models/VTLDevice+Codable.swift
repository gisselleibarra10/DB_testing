// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension StorageGatewayClientTypes.VTLDevice: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deviceiSCSIAttributes = "DeviceiSCSIAttributes"
        case vTLDeviceARN = "VTLDeviceARN"
        case vTLDeviceProductIdentifier = "VTLDeviceProductIdentifier"
        case vTLDeviceType = "VTLDeviceType"
        case vTLDeviceVendor = "VTLDeviceVendor"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let deviceiSCSIAttributes = self.deviceiSCSIAttributes {
            try encodeContainer.encode(deviceiSCSIAttributes, forKey: .deviceiSCSIAttributes)
        }
        if let vTLDeviceARN = self.vTLDeviceARN {
            try encodeContainer.encode(vTLDeviceARN, forKey: .vTLDeviceARN)
        }
        if let vTLDeviceProductIdentifier = self.vTLDeviceProductIdentifier {
            try encodeContainer.encode(vTLDeviceProductIdentifier, forKey: .vTLDeviceProductIdentifier)
        }
        if let vTLDeviceType = self.vTLDeviceType {
            try encodeContainer.encode(vTLDeviceType, forKey: .vTLDeviceType)
        }
        if let vTLDeviceVendor = self.vTLDeviceVendor {
            try encodeContainer.encode(vTLDeviceVendor, forKey: .vTLDeviceVendor)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let vTLDeviceARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vTLDeviceARN)
        vTLDeviceARN = vTLDeviceARNDecoded
        let vTLDeviceTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vTLDeviceType)
        vTLDeviceType = vTLDeviceTypeDecoded
        let vTLDeviceVendorDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vTLDeviceVendor)
        vTLDeviceVendor = vTLDeviceVendorDecoded
        let vTLDeviceProductIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vTLDeviceProductIdentifier)
        vTLDeviceProductIdentifier = vTLDeviceProductIdentifierDecoded
        let deviceiSCSIAttributesDecoded = try containerValues.decodeIfPresent(StorageGatewayClientTypes.DeviceiSCSIAttributes.self, forKey: .deviceiSCSIAttributes)
        deviceiSCSIAttributes = deviceiSCSIAttributesDecoded
    }
}
