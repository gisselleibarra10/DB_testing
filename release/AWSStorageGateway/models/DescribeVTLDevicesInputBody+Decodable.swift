// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeVTLDevicesInputBody: Swift.Equatable {
    let gatewayARN: Swift.String?
    let vTLDeviceARNs: [Swift.String]?
    let marker: Swift.String?
    let limit: Swift.Int?
}

extension DescribeVTLDevicesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case gatewayARN = "GatewayARN"
        case limit = "Limit"
        case marker = "Marker"
        case vTLDeviceARNs = "VTLDeviceARNs"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let gatewayARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .gatewayARN)
        gatewayARN = gatewayARNDecoded
        let vTLDeviceARNsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .vTLDeviceARNs)
        var vTLDeviceARNsDecoded0:[Swift.String]? = nil
        if let vTLDeviceARNsContainer = vTLDeviceARNsContainer {
            vTLDeviceARNsDecoded0 = [Swift.String]()
            for string0 in vTLDeviceARNsContainer {
                if let string0 = string0 {
                    vTLDeviceARNsDecoded0?.append(string0)
                }
            }
        }
        vTLDeviceARNs = vTLDeviceARNsDecoded0
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
        let limitDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .limit)
        limit = limitDecoded
    }
}
