// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension StorageGatewayClientTypes.TapeArchive: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case completionTime = "CompletionTime"
        case kMSKey = "KMSKey"
        case poolEntryDate = "PoolEntryDate"
        case poolId = "PoolId"
        case retentionStartDate = "RetentionStartDate"
        case retrievedTo = "RetrievedTo"
        case tapeARN = "TapeARN"
        case tapeBarcode = "TapeBarcode"
        case tapeCreatedDate = "TapeCreatedDate"
        case tapeSizeInBytes = "TapeSizeInBytes"
        case tapeStatus = "TapeStatus"
        case tapeUsedInBytes = "TapeUsedInBytes"
        case worm = "Worm"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let completionTime = self.completionTime {
            try encodeContainer.encode(completionTime.timeIntervalSince1970, forKey: .completionTime)
        }
        if let kMSKey = self.kMSKey {
            try encodeContainer.encode(kMSKey, forKey: .kMSKey)
        }
        if let poolEntryDate = self.poolEntryDate {
            try encodeContainer.encode(poolEntryDate.timeIntervalSince1970, forKey: .poolEntryDate)
        }
        if let poolId = self.poolId {
            try encodeContainer.encode(poolId, forKey: .poolId)
        }
        if let retentionStartDate = self.retentionStartDate {
            try encodeContainer.encode(retentionStartDate.timeIntervalSince1970, forKey: .retentionStartDate)
        }
        if let retrievedTo = self.retrievedTo {
            try encodeContainer.encode(retrievedTo, forKey: .retrievedTo)
        }
        if let tapeARN = self.tapeARN {
            try encodeContainer.encode(tapeARN, forKey: .tapeARN)
        }
        if let tapeBarcode = self.tapeBarcode {
            try encodeContainer.encode(tapeBarcode, forKey: .tapeBarcode)
        }
        if let tapeCreatedDate = self.tapeCreatedDate {
            try encodeContainer.encode(tapeCreatedDate.timeIntervalSince1970, forKey: .tapeCreatedDate)
        }
        if let tapeSizeInBytes = self.tapeSizeInBytes {
            try encodeContainer.encode(tapeSizeInBytes, forKey: .tapeSizeInBytes)
        }
        if let tapeStatus = self.tapeStatus {
            try encodeContainer.encode(tapeStatus, forKey: .tapeStatus)
        }
        if let tapeUsedInBytes = self.tapeUsedInBytes {
            try encodeContainer.encode(tapeUsedInBytes, forKey: .tapeUsedInBytes)
        }
        if worm != false {
            try encodeContainer.encode(worm, forKey: .worm)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tapeARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tapeARN)
        tapeARN = tapeARNDecoded
        let tapeBarcodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tapeBarcode)
        tapeBarcode = tapeBarcodeDecoded
        let tapeCreatedDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .tapeCreatedDate)
        tapeCreatedDate = tapeCreatedDateDecoded
        let tapeSizeInBytesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .tapeSizeInBytes)
        tapeSizeInBytes = tapeSizeInBytesDecoded
        let completionTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .completionTime)
        completionTime = completionTimeDecoded
        let retrievedToDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .retrievedTo)
        retrievedTo = retrievedToDecoded
        let tapeStatusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tapeStatus)
        tapeStatus = tapeStatusDecoded
        let tapeUsedInBytesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .tapeUsedInBytes)
        tapeUsedInBytes = tapeUsedInBytesDecoded
        let kMSKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kMSKey)
        kMSKey = kMSKeyDecoded
        let poolIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .poolId)
        poolId = poolIdDecoded
        let wormDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .worm) ?? false
        worm = wormDecoded
        let retentionStartDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .retentionStartDate)
        retentionStartDate = retentionStartDateDecoded
        let poolEntryDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .poolEntryDate)
        poolEntryDate = poolEntryDateDecoded
    }
}
