// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateNFSFileShareInputBody: Swift.Equatable {
    let clientToken: Swift.String?
    let nFSFileShareDefaults: StorageGatewayClientTypes.NFSFileShareDefaults?
    let gatewayARN: Swift.String?
    let kMSEncrypted: Swift.Bool?
    let kMSKey: Swift.String?
    let role: Swift.String?
    let locationARN: Swift.String?
    let defaultStorageClass: Swift.String?
    let objectACL: StorageGatewayClientTypes.ObjectACL?
    let clientList: [Swift.String]?
    let squash: Swift.String?
    let readOnly: Swift.Bool?
    let guessMIMETypeEnabled: Swift.Bool?
    let requesterPays: Swift.Bool?
    let tags: [StorageGatewayClientTypes.Tag]?
    let fileShareName: Swift.String?
    let cacheAttributes: StorageGatewayClientTypes.CacheAttributes?
    let notificationPolicy: Swift.String?
    let vPCEndpointDNSName: Swift.String?
    let bucketRegion: Swift.String?
    let auditDestinationARN: Swift.String?
}

extension CreateNFSFileShareInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case auditDestinationARN = "AuditDestinationARN"
        case bucketRegion = "BucketRegion"
        case cacheAttributes = "CacheAttributes"
        case clientList = "ClientList"
        case clientToken = "ClientToken"
        case defaultStorageClass = "DefaultStorageClass"
        case fileShareName = "FileShareName"
        case gatewayARN = "GatewayARN"
        case guessMIMETypeEnabled = "GuessMIMETypeEnabled"
        case kMSEncrypted = "KMSEncrypted"
        case kMSKey = "KMSKey"
        case locationARN = "LocationARN"
        case nFSFileShareDefaults = "NFSFileShareDefaults"
        case notificationPolicy = "NotificationPolicy"
        case objectACL = "ObjectACL"
        case readOnly = "ReadOnly"
        case requesterPays = "RequesterPays"
        case role = "Role"
        case squash = "Squash"
        case tags = "Tags"
        case vPCEndpointDNSName = "VPCEndpointDNSName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clientTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientToken)
        clientToken = clientTokenDecoded
        let nFSFileShareDefaultsDecoded = try containerValues.decodeIfPresent(StorageGatewayClientTypes.NFSFileShareDefaults.self, forKey: .nFSFileShareDefaults)
        nFSFileShareDefaults = nFSFileShareDefaultsDecoded
        let gatewayARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .gatewayARN)
        gatewayARN = gatewayARNDecoded
        let kMSEncryptedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .kMSEncrypted)
        kMSEncrypted = kMSEncryptedDecoded
        let kMSKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kMSKey)
        kMSKey = kMSKeyDecoded
        let roleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .role)
        role = roleDecoded
        let locationARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .locationARN)
        locationARN = locationARNDecoded
        let defaultStorageClassDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .defaultStorageClass)
        defaultStorageClass = defaultStorageClassDecoded
        let objectACLDecoded = try containerValues.decodeIfPresent(StorageGatewayClientTypes.ObjectACL.self, forKey: .objectACL)
        objectACL = objectACLDecoded
        let clientListContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .clientList)
        var clientListDecoded0:[Swift.String]? = nil
        if let clientListContainer = clientListContainer {
            clientListDecoded0 = [Swift.String]()
            for string0 in clientListContainer {
                if let string0 = string0 {
                    clientListDecoded0?.append(string0)
                }
            }
        }
        clientList = clientListDecoded0
        let squashDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .squash)
        squash = squashDecoded
        let readOnlyDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .readOnly)
        readOnly = readOnlyDecoded
        let guessMIMETypeEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .guessMIMETypeEnabled)
        guessMIMETypeEnabled = guessMIMETypeEnabledDecoded
        let requesterPaysDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .requesterPays)
        requesterPays = requesterPaysDecoded
        let tagsContainer = try containerValues.decodeIfPresent([StorageGatewayClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[StorageGatewayClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [StorageGatewayClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let fileShareNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fileShareName)
        fileShareName = fileShareNameDecoded
        let cacheAttributesDecoded = try containerValues.decodeIfPresent(StorageGatewayClientTypes.CacheAttributes.self, forKey: .cacheAttributes)
        cacheAttributes = cacheAttributesDecoded
        let notificationPolicyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .notificationPolicy)
        notificationPolicy = notificationPolicyDecoded
        let vPCEndpointDNSNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vPCEndpointDNSName)
        vPCEndpointDNSName = vPCEndpointDNSNameDecoded
        let bucketRegionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .bucketRegion)
        bucketRegion = bucketRegionDecoded
        let auditDestinationARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .auditDestinationARN)
        auditDestinationARN = auditDestinationARNDecoded
    }
}
