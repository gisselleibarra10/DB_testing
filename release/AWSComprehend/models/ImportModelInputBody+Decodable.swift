// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ImportModelInputBody: Swift.Equatable {
    let sourceModelArn: Swift.String?
    let modelName: Swift.String?
    let versionName: Swift.String?
    let modelKmsKeyId: Swift.String?
    let dataAccessRoleArn: Swift.String?
    let tags: [ComprehendClientTypes.Tag]?
}

extension ImportModelInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dataAccessRoleArn = "DataAccessRoleArn"
        case modelKmsKeyId = "ModelKmsKeyId"
        case modelName = "ModelName"
        case sourceModelArn = "SourceModelArn"
        case tags = "Tags"
        case versionName = "VersionName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sourceModelArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceModelArn)
        sourceModelArn = sourceModelArnDecoded
        let modelNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelName)
        modelName = modelNameDecoded
        let versionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .versionName)
        versionName = versionNameDecoded
        let modelKmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelKmsKeyId)
        modelKmsKeyId = modelKmsKeyIdDecoded
        let dataAccessRoleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataAccessRoleArn)
        dataAccessRoleArn = dataAccessRoleArnDecoded
        let tagsContainer = try containerValues.decodeIfPresent([ComprehendClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[ComprehendClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [ComprehendClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}
