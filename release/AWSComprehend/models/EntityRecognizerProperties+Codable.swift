// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ComprehendClientTypes.EntityRecognizerProperties: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dataAccessRoleArn = "DataAccessRoleArn"
        case endTime = "EndTime"
        case entityRecognizerArn = "EntityRecognizerArn"
        case inputDataConfig = "InputDataConfig"
        case languageCode = "LanguageCode"
        case message = "Message"
        case modelKmsKeyId = "ModelKmsKeyId"
        case recognizerMetadata = "RecognizerMetadata"
        case sourceModelArn = "SourceModelArn"
        case status = "Status"
        case submitTime = "SubmitTime"
        case trainingEndTime = "TrainingEndTime"
        case trainingStartTime = "TrainingStartTime"
        case versionName = "VersionName"
        case volumeKmsKeyId = "VolumeKmsKeyId"
        case vpcConfig = "VpcConfig"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dataAccessRoleArn = self.dataAccessRoleArn {
            try encodeContainer.encode(dataAccessRoleArn, forKey: .dataAccessRoleArn)
        }
        if let endTime = self.endTime {
            try encodeContainer.encode(endTime.timeIntervalSince1970, forKey: .endTime)
        }
        if let entityRecognizerArn = self.entityRecognizerArn {
            try encodeContainer.encode(entityRecognizerArn, forKey: .entityRecognizerArn)
        }
        if let inputDataConfig = self.inputDataConfig {
            try encodeContainer.encode(inputDataConfig, forKey: .inputDataConfig)
        }
        if let languageCode = self.languageCode {
            try encodeContainer.encode(languageCode.rawValue, forKey: .languageCode)
        }
        if let message = self.message {
            try encodeContainer.encode(message, forKey: .message)
        }
        if let modelKmsKeyId = self.modelKmsKeyId {
            try encodeContainer.encode(modelKmsKeyId, forKey: .modelKmsKeyId)
        }
        if let recognizerMetadata = self.recognizerMetadata {
            try encodeContainer.encode(recognizerMetadata, forKey: .recognizerMetadata)
        }
        if let sourceModelArn = self.sourceModelArn {
            try encodeContainer.encode(sourceModelArn, forKey: .sourceModelArn)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let submitTime = self.submitTime {
            try encodeContainer.encode(submitTime.timeIntervalSince1970, forKey: .submitTime)
        }
        if let trainingEndTime = self.trainingEndTime {
            try encodeContainer.encode(trainingEndTime.timeIntervalSince1970, forKey: .trainingEndTime)
        }
        if let trainingStartTime = self.trainingStartTime {
            try encodeContainer.encode(trainingStartTime.timeIntervalSince1970, forKey: .trainingStartTime)
        }
        if let versionName = self.versionName {
            try encodeContainer.encode(versionName, forKey: .versionName)
        }
        if let volumeKmsKeyId = self.volumeKmsKeyId {
            try encodeContainer.encode(volumeKmsKeyId, forKey: .volumeKmsKeyId)
        }
        if let vpcConfig = self.vpcConfig {
            try encodeContainer.encode(vpcConfig, forKey: .vpcConfig)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let entityRecognizerArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .entityRecognizerArn)
        entityRecognizerArn = entityRecognizerArnDecoded
        let languageCodeDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.LanguageCode.self, forKey: .languageCode)
        languageCode = languageCodeDecoded
        let statusDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.ModelStatus.self, forKey: .status)
        status = statusDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let submitTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .submitTime)
        submitTime = submitTimeDecoded
        let endTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .endTime)
        endTime = endTimeDecoded
        let trainingStartTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .trainingStartTime)
        trainingStartTime = trainingStartTimeDecoded
        let trainingEndTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .trainingEndTime)
        trainingEndTime = trainingEndTimeDecoded
        let inputDataConfigDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.EntityRecognizerInputDataConfig.self, forKey: .inputDataConfig)
        inputDataConfig = inputDataConfigDecoded
        let recognizerMetadataDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.EntityRecognizerMetadata.self, forKey: .recognizerMetadata)
        recognizerMetadata = recognizerMetadataDecoded
        let dataAccessRoleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataAccessRoleArn)
        dataAccessRoleArn = dataAccessRoleArnDecoded
        let volumeKmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .volumeKmsKeyId)
        volumeKmsKeyId = volumeKmsKeyIdDecoded
        let vpcConfigDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.VpcConfig.self, forKey: .vpcConfig)
        vpcConfig = vpcConfigDecoded
        let modelKmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelKmsKeyId)
        modelKmsKeyId = modelKmsKeyIdDecoded
        let versionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .versionName)
        versionName = versionNameDecoded
        let sourceModelArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceModelArn)
        sourceModelArn = sourceModelArnDecoded
    }
}
