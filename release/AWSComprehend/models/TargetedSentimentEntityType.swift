// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension ComprehendClientTypes {
    public enum TargetedSentimentEntityType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case attribute
        case book
        case brand
        case commercialItem
        case date
        case event
        case facility
        case game
        case location
        case movie
        case music
        case organization
        case other
        case person
        case personalTitle
        case quantity
        case software
        case sdkUnknown(Swift.String)

        public static var allCases: [TargetedSentimentEntityType] {
            return [
                .attribute,
                .book,
                .brand,
                .commercialItem,
                .date,
                .event,
                .facility,
                .game,
                .location,
                .movie,
                .music,
                .organization,
                .other,
                .person,
                .personalTitle,
                .quantity,
                .software,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .attribute: return "ATTRIBUTE"
            case .book: return "BOOK"
            case .brand: return "BRAND"
            case .commercialItem: return "COMMERCIAL_ITEM"
            case .date: return "DATE"
            case .event: return "EVENT"
            case .facility: return "FACILITY"
            case .game: return "GAME"
            case .location: return "LOCATION"
            case .movie: return "MOVIE"
            case .music: return "MUSIC"
            case .organization: return "ORGANIZATION"
            case .other: return "OTHER"
            case .person: return "PERSON"
            case .personalTitle: return "PERSONAL_TITLE"
            case .quantity: return "QUANTITY"
            case .software: return "SOFTWARE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = TargetedSentimentEntityType(rawValue: rawValue) ?? TargetedSentimentEntityType.sdkUnknown(rawValue)
        }
    }
}
