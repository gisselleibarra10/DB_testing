// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct StartEventsDetectionJobInputBody: Swift.Equatable {
    let inputDataConfig: ComprehendClientTypes.InputDataConfig?
    let outputDataConfig: ComprehendClientTypes.OutputDataConfig?
    let dataAccessRoleArn: Swift.String?
    let jobName: Swift.String?
    let languageCode: ComprehendClientTypes.LanguageCode?
    let clientRequestToken: Swift.String?
    let targetEventTypes: [Swift.String]?
    let tags: [ComprehendClientTypes.Tag]?
}

extension StartEventsDetectionJobInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientRequestToken = "ClientRequestToken"
        case dataAccessRoleArn = "DataAccessRoleArn"
        case inputDataConfig = "InputDataConfig"
        case jobName = "JobName"
        case languageCode = "LanguageCode"
        case outputDataConfig = "OutputDataConfig"
        case tags = "Tags"
        case targetEventTypes = "TargetEventTypes"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let inputDataConfigDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.InputDataConfig.self, forKey: .inputDataConfig)
        inputDataConfig = inputDataConfigDecoded
        let outputDataConfigDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.OutputDataConfig.self, forKey: .outputDataConfig)
        outputDataConfig = outputDataConfigDecoded
        let dataAccessRoleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataAccessRoleArn)
        dataAccessRoleArn = dataAccessRoleArnDecoded
        let jobNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobName)
        jobName = jobNameDecoded
        let languageCodeDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.LanguageCode.self, forKey: .languageCode)
        languageCode = languageCodeDecoded
        let clientRequestTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientRequestToken)
        clientRequestToken = clientRequestTokenDecoded
        let targetEventTypesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .targetEventTypes)
        var targetEventTypesDecoded0:[Swift.String]? = nil
        if let targetEventTypesContainer = targetEventTypesContainer {
            targetEventTypesDecoded0 = [Swift.String]()
            for string0 in targetEventTypesContainer {
                if let string0 = string0 {
                    targetEventTypesDecoded0?.append(string0)
                }
            }
        }
        targetEventTypes = targetEventTypesDecoded0
        let tagsContainer = try containerValues.decodeIfPresent([ComprehendClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[ComprehendClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [ComprehendClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}
