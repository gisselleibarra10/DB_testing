// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct BatchDetectEntitiesOutputResponseBody: Swift.Equatable {
    let resultList: [ComprehendClientTypes.BatchDetectEntitiesItemResult]?
    let errorList: [ComprehendClientTypes.BatchItemError]?
}

extension BatchDetectEntitiesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case errorList = "ErrorList"
        case resultList = "ResultList"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resultListContainer = try containerValues.decodeIfPresent([ComprehendClientTypes.BatchDetectEntitiesItemResult?].self, forKey: .resultList)
        var resultListDecoded0:[ComprehendClientTypes.BatchDetectEntitiesItemResult]? = nil
        if let resultListContainer = resultListContainer {
            resultListDecoded0 = [ComprehendClientTypes.BatchDetectEntitiesItemResult]()
            for structure0 in resultListContainer {
                if let structure0 = structure0 {
                    resultListDecoded0?.append(structure0)
                }
            }
        }
        resultList = resultListDecoded0
        let errorListContainer = try containerValues.decodeIfPresent([ComprehendClientTypes.BatchItemError?].self, forKey: .errorList)
        var errorListDecoded0:[ComprehendClientTypes.BatchItemError]? = nil
        if let errorListContainer = errorListContainer {
            errorListDecoded0 = [ComprehendClientTypes.BatchItemError]()
            for structure0 in errorListContainer {
                if let structure0 = structure0 {
                    errorListDecoded0?.append(structure0)
                }
            }
        }
        errorList = errorListDecoded0
    }
}
