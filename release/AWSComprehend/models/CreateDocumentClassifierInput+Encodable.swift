// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CreateDocumentClassifierInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientRequestToken = "ClientRequestToken"
        case dataAccessRoleArn = "DataAccessRoleArn"
        case documentClassifierName = "DocumentClassifierName"
        case inputDataConfig = "InputDataConfig"
        case languageCode = "LanguageCode"
        case mode = "Mode"
        case modelKmsKeyId = "ModelKmsKeyId"
        case modelPolicy = "ModelPolicy"
        case outputDataConfig = "OutputDataConfig"
        case tags = "Tags"
        case versionName = "VersionName"
        case volumeKmsKeyId = "VolumeKmsKeyId"
        case vpcConfig = "VpcConfig"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientRequestToken = self.clientRequestToken {
            try encodeContainer.encode(clientRequestToken, forKey: .clientRequestToken)
        }
        if let dataAccessRoleArn = self.dataAccessRoleArn {
            try encodeContainer.encode(dataAccessRoleArn, forKey: .dataAccessRoleArn)
        }
        if let documentClassifierName = self.documentClassifierName {
            try encodeContainer.encode(documentClassifierName, forKey: .documentClassifierName)
        }
        if let inputDataConfig = self.inputDataConfig {
            try encodeContainer.encode(inputDataConfig, forKey: .inputDataConfig)
        }
        if let languageCode = self.languageCode {
            try encodeContainer.encode(languageCode.rawValue, forKey: .languageCode)
        }
        if let mode = self.mode {
            try encodeContainer.encode(mode.rawValue, forKey: .mode)
        }
        if let modelKmsKeyId = self.modelKmsKeyId {
            try encodeContainer.encode(modelKmsKeyId, forKey: .modelKmsKeyId)
        }
        if let modelPolicy = self.modelPolicy {
            try encodeContainer.encode(modelPolicy, forKey: .modelPolicy)
        }
        if let outputDataConfig = self.outputDataConfig {
            try encodeContainer.encode(outputDataConfig, forKey: .outputDataConfig)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
        if let versionName = self.versionName {
            try encodeContainer.encode(versionName, forKey: .versionName)
        }
        if let volumeKmsKeyId = self.volumeKmsKeyId {
            try encodeContainer.encode(volumeKmsKeyId, forKey: .volumeKmsKeyId)
        }
        if let vpcConfig = self.vpcConfig {
            try encodeContainer.encode(vpcConfig, forKey: .vpcConfig)
        }
    }
}
