// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension ComprehendClientTypes {
    public enum EntityType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case commercialItem
        case date
        case event
        case location
        case organization
        case other
        case person
        case quantity
        case title
        case sdkUnknown(Swift.String)

        public static var allCases: [EntityType] {
            return [
                .commercialItem,
                .date,
                .event,
                .location,
                .organization,
                .other,
                .person,
                .quantity,
                .title,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .commercialItem: return "COMMERCIAL_ITEM"
            case .date: return "DATE"
            case .event: return "EVENT"
            case .location: return "LOCATION"
            case .organization: return "ORGANIZATION"
            case .other: return "OTHER"
            case .person: return "PERSON"
            case .quantity: return "QUANTITY"
            case .title: return "TITLE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = EntityType(rawValue: rawValue) ?? EntityType.sdkUnknown(rawValue)
        }
    }
}
