// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListEntityRecognizersOutputResponseBody: Swift.Equatable {
    let entityRecognizerPropertiesList: [ComprehendClientTypes.EntityRecognizerProperties]?
    let nextToken: Swift.String?
}

extension ListEntityRecognizersOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case entityRecognizerPropertiesList = "EntityRecognizerPropertiesList"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let entityRecognizerPropertiesListContainer = try containerValues.decodeIfPresent([ComprehendClientTypes.EntityRecognizerProperties?].self, forKey: .entityRecognizerPropertiesList)
        var entityRecognizerPropertiesListDecoded0:[ComprehendClientTypes.EntityRecognizerProperties]? = nil
        if let entityRecognizerPropertiesListContainer = entityRecognizerPropertiesListContainer {
            entityRecognizerPropertiesListDecoded0 = [ComprehendClientTypes.EntityRecognizerProperties]()
            for structure0 in entityRecognizerPropertiesListContainer {
                if let structure0 = structure0 {
                    entityRecognizerPropertiesListDecoded0?.append(structure0)
                }
            }
        }
        entityRecognizerPropertiesList = entityRecognizerPropertiesListDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
