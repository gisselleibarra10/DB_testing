// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ComprehendClientTypes.TargetedSentimentEntity: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case descriptiveMentionIndex = "DescriptiveMentionIndex"
        case mentions = "Mentions"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let descriptiveMentionIndex = descriptiveMentionIndex {
            var descriptiveMentionIndexContainer = encodeContainer.nestedUnkeyedContainer(forKey: .descriptiveMentionIndex)
            for listofdescriptivementionindices0 in descriptiveMentionIndex {
                try descriptiveMentionIndexContainer.encode(listofdescriptivementionindices0)
            }
        }
        if let mentions = mentions {
            var mentionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .mentions)
            for listofmentions0 in mentions {
                try mentionsContainer.encode(listofmentions0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let descriptiveMentionIndexContainer = try containerValues.decodeIfPresent([Swift.Int?].self, forKey: .descriptiveMentionIndex)
        var descriptiveMentionIndexDecoded0:[Swift.Int]? = nil
        if let descriptiveMentionIndexContainer = descriptiveMentionIndexContainer {
            descriptiveMentionIndexDecoded0 = [Swift.Int]()
            for integer0 in descriptiveMentionIndexContainer {
                if let integer0 = integer0 {
                    descriptiveMentionIndexDecoded0?.append(integer0)
                }
            }
        }
        descriptiveMentionIndex = descriptiveMentionIndexDecoded0
        let mentionsContainer = try containerValues.decodeIfPresent([ComprehendClientTypes.TargetedSentimentMention?].self, forKey: .mentions)
        var mentionsDecoded0:[ComprehendClientTypes.TargetedSentimentMention]? = nil
        if let mentionsContainer = mentionsContainer {
            mentionsDecoded0 = [ComprehendClientTypes.TargetedSentimentMention]()
            for structure0 in mentionsContainer {
                if let structure0 = structure0 {
                    mentionsDecoded0?.append(structure0)
                }
            }
        }
        mentions = mentionsDecoded0
    }
}
