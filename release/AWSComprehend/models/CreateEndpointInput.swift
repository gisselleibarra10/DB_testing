// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct CreateEndpointInput: Swift.Equatable {
    /// An idempotency token provided by the customer. If this token matches a previous endpoint creation request, Amazon Comprehend will not return a ResourceInUseException.
    public var clientRequestToken: Swift.String?
    /// The Amazon Resource Name (ARN) of the AWS identity and Access Management (IAM) role that grants Amazon Comprehend read access to trained custom models encrypted with a customer managed key (ModelKmsKeyId).
    public var dataAccessRoleArn: Swift.String?
    /// The desired number of inference units to be used by the model using this endpoint. Each inference unit represents of a throughput of 100 characters per second.
    /// This member is required.
    public var desiredInferenceUnits: Swift.Int?
    /// This is the descriptive suffix that becomes part of the EndpointArn used for all subsequent requests to this resource.
    /// This member is required.
    public var endpointName: Swift.String?
    /// The Amazon Resource Number (ARN) of the model to which the endpoint will be attached.
    /// This member is required.
    public var modelArn: Swift.String?
    /// Tags associated with the endpoint being created. A tag is a key-value pair that adds metadata to the endpoint. For example, a tag with "Sales" as the key might be added to an endpoint to indicate its use by the sales department.
    public var tags: [ComprehendClientTypes.Tag]?

    public init (
        clientRequestToken: Swift.String? = nil,
        dataAccessRoleArn: Swift.String? = nil,
        desiredInferenceUnits: Swift.Int? = nil,
        endpointName: Swift.String? = nil,
        modelArn: Swift.String? = nil,
        tags: [ComprehendClientTypes.Tag]? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.dataAccessRoleArn = dataAccessRoleArn
        self.desiredInferenceUnits = desiredInferenceUnits
        self.endpointName = endpointName
        self.modelArn = modelArn
        self.tags = tags
    }
}
