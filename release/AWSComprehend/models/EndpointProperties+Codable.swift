// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ComprehendClientTypes.EndpointProperties: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTime = "CreationTime"
        case currentInferenceUnits = "CurrentInferenceUnits"
        case dataAccessRoleArn = "DataAccessRoleArn"
        case desiredDataAccessRoleArn = "DesiredDataAccessRoleArn"
        case desiredInferenceUnits = "DesiredInferenceUnits"
        case desiredModelArn = "DesiredModelArn"
        case endpointArn = "EndpointArn"
        case lastModifiedTime = "LastModifiedTime"
        case message = "Message"
        case modelArn = "ModelArn"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationTime = self.creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let currentInferenceUnits = self.currentInferenceUnits {
            try encodeContainer.encode(currentInferenceUnits, forKey: .currentInferenceUnits)
        }
        if let dataAccessRoleArn = self.dataAccessRoleArn {
            try encodeContainer.encode(dataAccessRoleArn, forKey: .dataAccessRoleArn)
        }
        if let desiredDataAccessRoleArn = self.desiredDataAccessRoleArn {
            try encodeContainer.encode(desiredDataAccessRoleArn, forKey: .desiredDataAccessRoleArn)
        }
        if let desiredInferenceUnits = self.desiredInferenceUnits {
            try encodeContainer.encode(desiredInferenceUnits, forKey: .desiredInferenceUnits)
        }
        if let desiredModelArn = self.desiredModelArn {
            try encodeContainer.encode(desiredModelArn, forKey: .desiredModelArn)
        }
        if let endpointArn = self.endpointArn {
            try encodeContainer.encode(endpointArn, forKey: .endpointArn)
        }
        if let lastModifiedTime = self.lastModifiedTime {
            try encodeContainer.encode(lastModifiedTime.timeIntervalSince1970, forKey: .lastModifiedTime)
        }
        if let message = self.message {
            try encodeContainer.encode(message, forKey: .message)
        }
        if let modelArn = self.modelArn {
            try encodeContainer.encode(modelArn, forKey: .modelArn)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let endpointArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .endpointArn)
        endpointArn = endpointArnDecoded
        let statusDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.EndpointStatus.self, forKey: .status)
        status = statusDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let modelArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelArn)
        modelArn = modelArnDecoded
        let desiredModelArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .desiredModelArn)
        desiredModelArn = desiredModelArnDecoded
        let desiredInferenceUnitsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .desiredInferenceUnits)
        desiredInferenceUnits = desiredInferenceUnitsDecoded
        let currentInferenceUnitsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .currentInferenceUnits)
        currentInferenceUnits = currentInferenceUnitsDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let lastModifiedTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedTime)
        lastModifiedTime = lastModifiedTimeDecoded
        let dataAccessRoleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataAccessRoleArn)
        dataAccessRoleArn = dataAccessRoleArnDecoded
        let desiredDataAccessRoleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .desiredDataAccessRoleArn)
        desiredDataAccessRoleArn = desiredDataAccessRoleArnDecoded
    }
}
