// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ComprehendClientTypes.AugmentedManifestsListItem: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case annotationDataS3Uri = "AnnotationDataS3Uri"
        case attributeNames = "AttributeNames"
        case documentType = "DocumentType"
        case s3Uri = "S3Uri"
        case sourceDocumentsS3Uri = "SourceDocumentsS3Uri"
        case split = "Split"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let annotationDataS3Uri = self.annotationDataS3Uri {
            try encodeContainer.encode(annotationDataS3Uri, forKey: .annotationDataS3Uri)
        }
        if let attributeNames = attributeNames {
            var attributeNamesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .attributeNames)
            for attributenameslist0 in attributeNames {
                try attributeNamesContainer.encode(attributenameslist0)
            }
        }
        if let documentType = self.documentType {
            try encodeContainer.encode(documentType.rawValue, forKey: .documentType)
        }
        if let s3Uri = self.s3Uri {
            try encodeContainer.encode(s3Uri, forKey: .s3Uri)
        }
        if let sourceDocumentsS3Uri = self.sourceDocumentsS3Uri {
            try encodeContainer.encode(sourceDocumentsS3Uri, forKey: .sourceDocumentsS3Uri)
        }
        if let split = self.split {
            try encodeContainer.encode(split.rawValue, forKey: .split)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let s3UriDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .s3Uri)
        s3Uri = s3UriDecoded
        let splitDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.Split.self, forKey: .split)
        split = splitDecoded
        let attributeNamesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .attributeNames)
        var attributeNamesDecoded0:[Swift.String]? = nil
        if let attributeNamesContainer = attributeNamesContainer {
            attributeNamesDecoded0 = [Swift.String]()
            for string0 in attributeNamesContainer {
                if let string0 = string0 {
                    attributeNamesDecoded0?.append(string0)
                }
            }
        }
        attributeNames = attributeNamesDecoded0
        let annotationDataS3UriDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .annotationDataS3Uri)
        annotationDataS3Uri = annotationDataS3UriDecoded
        let sourceDocumentsS3UriDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceDocumentsS3Uri)
        sourceDocumentsS3Uri = sourceDocumentsS3UriDecoded
        let documentTypeDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.AugmentedManifestsDocumentTypeFormat.self, forKey: .documentType)
        documentType = documentTypeDecoded
    }
}
