// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ComprehendClientTypes.DocumentReaderConfig: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case documentReadAction = "DocumentReadAction"
        case documentReadMode = "DocumentReadMode"
        case featureTypes = "FeatureTypes"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let documentReadAction = self.documentReadAction {
            try encodeContainer.encode(documentReadAction.rawValue, forKey: .documentReadAction)
        }
        if let documentReadMode = self.documentReadMode {
            try encodeContainer.encode(documentReadMode.rawValue, forKey: .documentReadMode)
        }
        if let featureTypes = featureTypes {
            var featureTypesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .featureTypes)
            for listofdocumentreadfeaturetypes0 in featureTypes {
                try featureTypesContainer.encode(listofdocumentreadfeaturetypes0.rawValue)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let documentReadActionDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.DocumentReadAction.self, forKey: .documentReadAction)
        documentReadAction = documentReadActionDecoded
        let documentReadModeDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.DocumentReadMode.self, forKey: .documentReadMode)
        documentReadMode = documentReadModeDecoded
        let featureTypesContainer = try containerValues.decodeIfPresent([ComprehendClientTypes.DocumentReadFeatureTypes?].self, forKey: .featureTypes)
        var featureTypesDecoded0:[ComprehendClientTypes.DocumentReadFeatureTypes]? = nil
        if let featureTypesContainer = featureTypesContainer {
            featureTypesDecoded0 = [ComprehendClientTypes.DocumentReadFeatureTypes]()
            for string0 in featureTypesContainer {
                if let string0 = string0 {
                    featureTypesDecoded0?.append(string0)
                }
            }
        }
        featureTypes = featureTypesDecoded0
    }
}
