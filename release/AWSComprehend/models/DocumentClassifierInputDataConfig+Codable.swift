// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ComprehendClientTypes.DocumentClassifierInputDataConfig: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case augmentedManifests = "AugmentedManifests"
        case dataFormat = "DataFormat"
        case labelDelimiter = "LabelDelimiter"
        case s3Uri = "S3Uri"
        case testS3Uri = "TestS3Uri"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let augmentedManifests = augmentedManifests {
            var augmentedManifestsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .augmentedManifests)
            for documentclassifieraugmentedmanifestslist0 in augmentedManifests {
                try augmentedManifestsContainer.encode(documentclassifieraugmentedmanifestslist0)
            }
        }
        if let dataFormat = self.dataFormat {
            try encodeContainer.encode(dataFormat.rawValue, forKey: .dataFormat)
        }
        if let labelDelimiter = self.labelDelimiter {
            try encodeContainer.encode(labelDelimiter, forKey: .labelDelimiter)
        }
        if let s3Uri = self.s3Uri {
            try encodeContainer.encode(s3Uri, forKey: .s3Uri)
        }
        if let testS3Uri = self.testS3Uri {
            try encodeContainer.encode(testS3Uri, forKey: .testS3Uri)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dataFormatDecoded = try containerValues.decodeIfPresent(ComprehendClientTypes.DocumentClassifierDataFormat.self, forKey: .dataFormat)
        dataFormat = dataFormatDecoded
        let s3UriDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .s3Uri)
        s3Uri = s3UriDecoded
        let testS3UriDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .testS3Uri)
        testS3Uri = testS3UriDecoded
        let labelDelimiterDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .labelDelimiter)
        labelDelimiter = labelDelimiterDecoded
        let augmentedManifestsContainer = try containerValues.decodeIfPresent([ComprehendClientTypes.AugmentedManifestsListItem?].self, forKey: .augmentedManifests)
        var augmentedManifestsDecoded0:[ComprehendClientTypes.AugmentedManifestsListItem]? = nil
        if let augmentedManifestsContainer = augmentedManifestsContainer {
            augmentedManifestsDecoded0 = [ComprehendClientTypes.AugmentedManifestsListItem]()
            for structure0 in augmentedManifestsContainer {
                if let structure0 = structure0 {
                    augmentedManifestsDecoded0?.append(structure0)
                }
            }
        }
        augmentedManifests = augmentedManifestsDecoded0
    }
}
