// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ComprehendClientTypes {
    /// Specifies information about the specified endpoint. For information about endpoints, see [Managing endpoints](https://docs.aws.amazon.com/comprehend/latest/dg/manage-endpoints.html).
    public struct EndpointProperties: Swift.Equatable {
        /// The creation date and time of the endpoint.
        public var creationTime: ClientRuntime.Date?
        /// The number of inference units currently used by the model using this endpoint.
        public var currentInferenceUnits: Swift.Int?
        /// The Amazon Resource Name (ARN) of the AWS identity and Access Management (IAM) role that grants Amazon Comprehend read access to trained custom models encrypted with a customer managed key (ModelKmsKeyId).
        public var dataAccessRoleArn: Swift.String?
        /// Data access role ARN to use in case the new model is encrypted with a customer KMS key.
        public var desiredDataAccessRoleArn: Swift.String?
        /// The desired number of inference units to be used by the model using this endpoint. Each inference unit represents of a throughput of 100 characters per second.
        public var desiredInferenceUnits: Swift.Int?
        /// ARN of the new model to use for updating an existing endpoint. This ARN is going to be different from the model ARN when the update is in progress
        public var desiredModelArn: Swift.String?
        /// The Amazon Resource Number (ARN) of the endpoint.
        public var endpointArn: Swift.String?
        /// The date and time that the endpoint was last modified.
        public var lastModifiedTime: ClientRuntime.Date?
        /// Specifies a reason for failure in cases of Failed status.
        public var message: Swift.String?
        /// The Amazon Resource Number (ARN) of the model to which the endpoint is attached.
        public var modelArn: Swift.String?
        /// Specifies the status of the endpoint. Because the endpoint updates and creation are asynchronous, so customers will need to wait for the endpoint to be Ready status before making inference requests.
        public var status: ComprehendClientTypes.EndpointStatus?

        public init (
            creationTime: ClientRuntime.Date? = nil,
            currentInferenceUnits: Swift.Int? = nil,
            dataAccessRoleArn: Swift.String? = nil,
            desiredDataAccessRoleArn: Swift.String? = nil,
            desiredInferenceUnits: Swift.Int? = nil,
            desiredModelArn: Swift.String? = nil,
            endpointArn: Swift.String? = nil,
            lastModifiedTime: ClientRuntime.Date? = nil,
            message: Swift.String? = nil,
            modelArn: Swift.String? = nil,
            status: ComprehendClientTypes.EndpointStatus? = nil
        )
        {
            self.creationTime = creationTime
            self.currentInferenceUnits = currentInferenceUnits
            self.dataAccessRoleArn = dataAccessRoleArn
            self.desiredDataAccessRoleArn = desiredDataAccessRoleArn
            self.desiredInferenceUnits = desiredInferenceUnits
            self.desiredModelArn = desiredModelArn
            self.endpointArn = endpointArn
            self.lastModifiedTime = lastModifiedTime
            self.message = message
            self.modelArn = modelArn
            self.status = status
        }
    }

}
