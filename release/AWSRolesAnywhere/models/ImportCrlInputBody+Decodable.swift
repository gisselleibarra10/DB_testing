// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ImportCrlInputBody: Swift.Equatable {
    let name: Swift.String?
    let crlData: ClientRuntime.Data?
    let enabled: Swift.Bool?
    let tags: [RolesAnywhereClientTypes.Tag]?
    let trustAnchorArn: Swift.String?
}

extension ImportCrlInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case crlData
        case enabled
        case name
        case tags
        case trustAnchorArn
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let crlDataDecoded = try containerValues.decodeIfPresent(ClientRuntime.Data.self, forKey: .crlData)
        crlData = crlDataDecoded
        let enabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enabled)
        enabled = enabledDecoded
        let tagsContainer = try containerValues.decodeIfPresent([RolesAnywhereClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[RolesAnywhereClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [RolesAnywhereClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let trustAnchorArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .trustAnchorArn)
        trustAnchorArn = trustAnchorArnDecoded
    }
}
