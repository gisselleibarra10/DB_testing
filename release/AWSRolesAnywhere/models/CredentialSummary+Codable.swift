// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension RolesAnywhereClientTypes.CredentialSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case enabled
        case failed
        case issuer
        case seenAt
        case serialNumber
        case x509CertificateData
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let enabled = self.enabled {
            try encodeContainer.encode(enabled, forKey: .enabled)
        }
        if let failed = self.failed {
            try encodeContainer.encode(failed, forKey: .failed)
        }
        if let issuer = self.issuer {
            try encodeContainer.encode(issuer, forKey: .issuer)
        }
        if let seenAt = self.seenAt {
            try encodeContainer.encode(seenAt.iso8601WithoutFractionalSeconds(), forKey: .seenAt)
        }
        if let serialNumber = self.serialNumber {
            try encodeContainer.encode(serialNumber, forKey: .serialNumber)
        }
        if let x509CertificateData = self.x509CertificateData {
            try encodeContainer.encode(x509CertificateData, forKey: .x509CertificateData)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let seenAtDateString = try containerValues.decodeIfPresent(Swift.String.self, forKey: .seenAt)
        var seenAtDecoded: ClientRuntime.Date? = nil
        if let seenAtDateString = seenAtDateString {
            let seenAtFormatter = ClientRuntime.DateFormatter.iso8601DateFormatterWithoutFractionalSeconds
            seenAtDecoded = seenAtFormatter.date(from: seenAtDateString)
        }
        seenAt = seenAtDecoded
        let serialNumberDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serialNumber)
        serialNumber = serialNumberDecoded
        let issuerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .issuer)
        issuer = issuerDecoded
        let enabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enabled)
        enabled = enabledDecoded
        let x509CertificateDataDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .x509CertificateData)
        x509CertificateData = x509CertificateDataDecoded
        let failedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .failed)
        failed = failedDecoded
    }
}
