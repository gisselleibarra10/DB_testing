// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CreateProfileInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case durationSeconds
        case enabled
        case managedPolicyArns
        case name
        case requireInstanceProperties
        case roleArns
        case sessionPolicy
        case tags
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let durationSeconds = self.durationSeconds {
            try encodeContainer.encode(durationSeconds, forKey: .durationSeconds)
        }
        if let enabled = self.enabled {
            try encodeContainer.encode(enabled, forKey: .enabled)
        }
        if let managedPolicyArns = managedPolicyArns {
            var managedPolicyArnsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .managedPolicyArns)
            for managedpolicylist0 in managedPolicyArns {
                try managedPolicyArnsContainer.encode(managedpolicylist0)
            }
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let requireInstanceProperties = self.requireInstanceProperties {
            try encodeContainer.encode(requireInstanceProperties, forKey: .requireInstanceProperties)
        }
        if let roleArns = roleArns {
            var roleArnsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .roleArns)
            for rolearnlist0 in roleArns {
                try roleArnsContainer.encode(rolearnlist0)
            }
        }
        if let sessionPolicy = self.sessionPolicy {
            try encodeContainer.encode(sessionPolicy, forKey: .sessionPolicy)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }
}
