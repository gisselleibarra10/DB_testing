// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension RolesAnywhereClientTypes.InstanceProperty: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case failed
        case properties
        case seenAt
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let failed = self.failed {
            try encodeContainer.encode(failed, forKey: .failed)
        }
        if let properties = properties {
            var propertiesContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .properties)
            for (dictKey0, instancepropertymap0) in properties {
                try propertiesContainer.encode(instancepropertymap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let seenAt = self.seenAt {
            try encodeContainer.encode(seenAt.iso8601WithoutFractionalSeconds(), forKey: .seenAt)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let seenAtDateString = try containerValues.decodeIfPresent(Swift.String.self, forKey: .seenAt)
        var seenAtDecoded: ClientRuntime.Date? = nil
        if let seenAtDateString = seenAtDateString {
            let seenAtFormatter = ClientRuntime.DateFormatter.iso8601DateFormatterWithoutFractionalSeconds
            seenAtDecoded = seenAtFormatter.date(from: seenAtDateString)
        }
        seenAt = seenAtDecoded
        let propertiesContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .properties)
        var propertiesDecoded0: [Swift.String:Swift.String]? = nil
        if let propertiesContainer = propertiesContainer {
            propertiesDecoded0 = [Swift.String:Swift.String]()
            for (key0, string0) in propertiesContainer {
                if let string0 = string0 {
                    propertiesDecoded0?[key0] = string0
                }
            }
        }
        properties = propertiesDecoded0
        let failedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .failed)
        failed = failedDecoded
    }
}
