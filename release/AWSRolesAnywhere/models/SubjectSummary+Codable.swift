// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension RolesAnywhereClientTypes.SubjectSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createdAt
        case enabled
        case lastSeenAt
        case subjectArn
        case subjectId
        case updatedAt
        case x509Subject
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let createdAt = self.createdAt {
            try encodeContainer.encode(createdAt.iso8601WithoutFractionalSeconds(), forKey: .createdAt)
        }
        if let enabled = self.enabled {
            try encodeContainer.encode(enabled, forKey: .enabled)
        }
        if let lastSeenAt = self.lastSeenAt {
            try encodeContainer.encode(lastSeenAt.iso8601WithoutFractionalSeconds(), forKey: .lastSeenAt)
        }
        if let subjectArn = self.subjectArn {
            try encodeContainer.encode(subjectArn, forKey: .subjectArn)
        }
        if let subjectId = self.subjectId {
            try encodeContainer.encode(subjectId, forKey: .subjectId)
        }
        if let updatedAt = self.updatedAt {
            try encodeContainer.encode(updatedAt.iso8601WithoutFractionalSeconds(), forKey: .updatedAt)
        }
        if let x509Subject = self.x509Subject {
            try encodeContainer.encode(x509Subject, forKey: .x509Subject)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let subjectArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .subjectArn)
        subjectArn = subjectArnDecoded
        let subjectIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .subjectId)
        subjectId = subjectIdDecoded
        let enabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enabled)
        enabled = enabledDecoded
        let x509SubjectDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .x509Subject)
        x509Subject = x509SubjectDecoded
        let lastSeenAtDateString = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastSeenAt)
        var lastSeenAtDecoded: ClientRuntime.Date? = nil
        if let lastSeenAtDateString = lastSeenAtDateString {
            let lastSeenAtFormatter = ClientRuntime.DateFormatter.iso8601DateFormatterWithoutFractionalSeconds
            lastSeenAtDecoded = lastSeenAtFormatter.date(from: lastSeenAtDateString)
        }
        lastSeenAt = lastSeenAtDecoded
        let createdAtDateString = try containerValues.decodeIfPresent(Swift.String.self, forKey: .createdAt)
        var createdAtDecoded: ClientRuntime.Date? = nil
        if let createdAtDateString = createdAtDateString {
            let createdAtFormatter = ClientRuntime.DateFormatter.iso8601DateFormatterWithoutFractionalSeconds
            createdAtDecoded = createdAtFormatter.date(from: createdAtDateString)
        }
        createdAt = createdAtDecoded
        let updatedAtDateString = try containerValues.decodeIfPresent(Swift.String.self, forKey: .updatedAt)
        var updatedAtDecoded: ClientRuntime.Date? = nil
        if let updatedAtDateString = updatedAtDateString {
            let updatedAtFormatter = ClientRuntime.DateFormatter.iso8601DateFormatterWithoutFractionalSeconds
            updatedAtDecoded = updatedAtFormatter.date(from: updatedAtDateString)
        }
        updatedAt = updatedAtDecoded
    }
}
