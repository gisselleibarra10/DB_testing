// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateTrustAnchorInputBody: Swift.Equatable {
    let name: Swift.String?
    let source: RolesAnywhereClientTypes.Source?
    let enabled: Swift.Bool?
    let tags: [RolesAnywhereClientTypes.Tag]?
}

extension CreateTrustAnchorInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case enabled
        case name
        case source
        case tags
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let sourceDecoded = try containerValues.decodeIfPresent(RolesAnywhereClientTypes.Source.self, forKey: .source)
        source = sourceDecoded
        let enabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enabled)
        enabled = enabledDecoded
        let tagsContainer = try containerValues.decodeIfPresent([RolesAnywhereClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[RolesAnywhereClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [RolesAnywhereClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}
