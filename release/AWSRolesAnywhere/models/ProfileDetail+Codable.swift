// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension RolesAnywhereClientTypes.ProfileDetail: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createdAt
        case createdBy
        case durationSeconds
        case enabled
        case managedPolicyArns
        case name
        case profileArn
        case profileId
        case requireInstanceProperties
        case roleArns
        case sessionPolicy
        case updatedAt
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let createdAt = self.createdAt {
            try encodeContainer.encode(createdAt.iso8601WithoutFractionalSeconds(), forKey: .createdAt)
        }
        if let createdBy = self.createdBy {
            try encodeContainer.encode(createdBy, forKey: .createdBy)
        }
        if let durationSeconds = self.durationSeconds {
            try encodeContainer.encode(durationSeconds, forKey: .durationSeconds)
        }
        if let enabled = self.enabled {
            try encodeContainer.encode(enabled, forKey: .enabled)
        }
        if let managedPolicyArns = managedPolicyArns {
            var managedPolicyArnsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .managedPolicyArns)
            for managedpolicylist0 in managedPolicyArns {
                try managedPolicyArnsContainer.encode(managedpolicylist0)
            }
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let profileArn = self.profileArn {
            try encodeContainer.encode(profileArn, forKey: .profileArn)
        }
        if let profileId = self.profileId {
            try encodeContainer.encode(profileId, forKey: .profileId)
        }
        if let requireInstanceProperties = self.requireInstanceProperties {
            try encodeContainer.encode(requireInstanceProperties, forKey: .requireInstanceProperties)
        }
        if let roleArns = roleArns {
            var roleArnsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .roleArns)
            for rolearnlist0 in roleArns {
                try roleArnsContainer.encode(rolearnlist0)
            }
        }
        if let sessionPolicy = self.sessionPolicy {
            try encodeContainer.encode(sessionPolicy, forKey: .sessionPolicy)
        }
        if let updatedAt = self.updatedAt {
            try encodeContainer.encode(updatedAt.iso8601WithoutFractionalSeconds(), forKey: .updatedAt)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let profileIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .profileId)
        profileId = profileIdDecoded
        let profileArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .profileArn)
        profileArn = profileArnDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let requireInstancePropertiesDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .requireInstanceProperties)
        requireInstanceProperties = requireInstancePropertiesDecoded
        let enabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enabled)
        enabled = enabledDecoded
        let createdByDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .createdBy)
        createdBy = createdByDecoded
        let sessionPolicyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sessionPolicy)
        sessionPolicy = sessionPolicyDecoded
        let roleArnsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .roleArns)
        var roleArnsDecoded0:[Swift.String]? = nil
        if let roleArnsContainer = roleArnsContainer {
            roleArnsDecoded0 = [Swift.String]()
            for string0 in roleArnsContainer {
                if let string0 = string0 {
                    roleArnsDecoded0?.append(string0)
                }
            }
        }
        roleArns = roleArnsDecoded0
        let managedPolicyArnsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .managedPolicyArns)
        var managedPolicyArnsDecoded0:[Swift.String]? = nil
        if let managedPolicyArnsContainer = managedPolicyArnsContainer {
            managedPolicyArnsDecoded0 = [Swift.String]()
            for string0 in managedPolicyArnsContainer {
                if let string0 = string0 {
                    managedPolicyArnsDecoded0?.append(string0)
                }
            }
        }
        managedPolicyArns = managedPolicyArnsDecoded0
        let createdAtDateString = try containerValues.decodeIfPresent(Swift.String.self, forKey: .createdAt)
        var createdAtDecoded: ClientRuntime.Date? = nil
        if let createdAtDateString = createdAtDateString {
            let createdAtFormatter = ClientRuntime.DateFormatter.iso8601DateFormatterWithoutFractionalSeconds
            createdAtDecoded = createdAtFormatter.date(from: createdAtDateString)
        }
        createdAt = createdAtDecoded
        let updatedAtDateString = try containerValues.decodeIfPresent(Swift.String.self, forKey: .updatedAt)
        var updatedAtDecoded: ClientRuntime.Date? = nil
        if let updatedAtDateString = updatedAtDateString {
            let updatedAtFormatter = ClientRuntime.DateFormatter.iso8601DateFormatterWithoutFractionalSeconds
            updatedAtDecoded = updatedAtFormatter.date(from: updatedAtDateString)
        }
        updatedAt = updatedAtDecoded
        let durationSecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .durationSeconds)
        durationSeconds = durationSecondsDecoded
    }
}
