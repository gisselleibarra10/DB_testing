// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension AppRunnerClientTypes {
    /// Describes the settings for the health check that App Runner performs to monitor the health of a service.
    public struct HealthCheckConfiguration: Swift.Equatable {
        /// The number of consecutive checks that must succeed before App Runner decides that the service is healthy. Default: 1
        public var healthyThreshold: Swift.Int?
        /// The time interval, in seconds, between health checks. Default: 5
        public var interval: Swift.Int?
        /// The URL that health check requests are sent to. Path is only applicable when you set Protocol to HTTP. Default: "/"
        public var path: Swift.String?
        /// The IP protocol that App Runner uses to perform health checks for your service. If you set Protocol to HTTP, App Runner sends health check requests to the HTTP path specified by Path. Default: TCP
        public var `protocol`: AppRunnerClientTypes.HealthCheckProtocol?
        /// The time, in seconds, to wait for a health check response before deciding it failed. Default: 2
        public var timeout: Swift.Int?
        /// The number of consecutive checks that must fail before App Runner decides that the service is unhealthy. Default: 5
        public var unhealthyThreshold: Swift.Int?

        public init (
            healthyThreshold: Swift.Int? = nil,
            interval: Swift.Int? = nil,
            path: Swift.String? = nil,
            `protocol`: AppRunnerClientTypes.HealthCheckProtocol? = nil,
            timeout: Swift.Int? = nil,
            unhealthyThreshold: Swift.Int? = nil
        )
        {
            self.healthyThreshold = healthyThreshold
            self.interval = interval
            self.path = path
            self.`protocol` = `protocol`
            self.timeout = timeout
            self.unhealthyThreshold = unhealthyThreshold
        }
    }

}
