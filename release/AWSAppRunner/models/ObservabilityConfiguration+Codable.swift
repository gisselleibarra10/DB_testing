// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AppRunnerClientTypes.ObservabilityConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createdAt = "CreatedAt"
        case deletedAt = "DeletedAt"
        case latest = "Latest"
        case observabilityConfigurationArn = "ObservabilityConfigurationArn"
        case observabilityConfigurationName = "ObservabilityConfigurationName"
        case observabilityConfigurationRevision = "ObservabilityConfigurationRevision"
        case status = "Status"
        case traceConfiguration = "TraceConfiguration"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let createdAt = self.createdAt {
            try encodeContainer.encode(createdAt.timeIntervalSince1970, forKey: .createdAt)
        }
        if let deletedAt = self.deletedAt {
            try encodeContainer.encode(deletedAt.timeIntervalSince1970, forKey: .deletedAt)
        }
        if latest != false {
            try encodeContainer.encode(latest, forKey: .latest)
        }
        if let observabilityConfigurationArn = self.observabilityConfigurationArn {
            try encodeContainer.encode(observabilityConfigurationArn, forKey: .observabilityConfigurationArn)
        }
        if let observabilityConfigurationName = self.observabilityConfigurationName {
            try encodeContainer.encode(observabilityConfigurationName, forKey: .observabilityConfigurationName)
        }
        if observabilityConfigurationRevision != 0 {
            try encodeContainer.encode(observabilityConfigurationRevision, forKey: .observabilityConfigurationRevision)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let traceConfiguration = self.traceConfiguration {
            try encodeContainer.encode(traceConfiguration, forKey: .traceConfiguration)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let observabilityConfigurationArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .observabilityConfigurationArn)
        observabilityConfigurationArn = observabilityConfigurationArnDecoded
        let observabilityConfigurationNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .observabilityConfigurationName)
        observabilityConfigurationName = observabilityConfigurationNameDecoded
        let traceConfigurationDecoded = try containerValues.decodeIfPresent(AppRunnerClientTypes.TraceConfiguration.self, forKey: .traceConfiguration)
        traceConfiguration = traceConfigurationDecoded
        let observabilityConfigurationRevisionDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .observabilityConfigurationRevision) ?? 0
        observabilityConfigurationRevision = observabilityConfigurationRevisionDecoded
        let latestDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .latest) ?? false
        latest = latestDecoded
        let statusDecoded = try containerValues.decodeIfPresent(AppRunnerClientTypes.ObservabilityConfigurationStatus.self, forKey: .status)
        status = statusDecoded
        let createdAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdAt)
        createdAt = createdAtDecoded
        let deletedAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .deletedAt)
        deletedAt = deletedAtDecoded
    }
}
