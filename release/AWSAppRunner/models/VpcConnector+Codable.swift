// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AppRunnerClientTypes.VpcConnector: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createdAt = "CreatedAt"
        case deletedAt = "DeletedAt"
        case securityGroups = "SecurityGroups"
        case status = "Status"
        case subnets = "Subnets"
        case vpcConnectorArn = "VpcConnectorArn"
        case vpcConnectorName = "VpcConnectorName"
        case vpcConnectorRevision = "VpcConnectorRevision"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let createdAt = self.createdAt {
            try encodeContainer.encode(createdAt.timeIntervalSince1970, forKey: .createdAt)
        }
        if let deletedAt = self.deletedAt {
            try encodeContainer.encode(deletedAt.timeIntervalSince1970, forKey: .deletedAt)
        }
        if let securityGroups = securityGroups {
            var securityGroupsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .securityGroups)
            for stringlist0 in securityGroups {
                try securityGroupsContainer.encode(stringlist0)
            }
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let subnets = subnets {
            var subnetsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .subnets)
            for stringlist0 in subnets {
                try subnetsContainer.encode(stringlist0)
            }
        }
        if let vpcConnectorArn = self.vpcConnectorArn {
            try encodeContainer.encode(vpcConnectorArn, forKey: .vpcConnectorArn)
        }
        if let vpcConnectorName = self.vpcConnectorName {
            try encodeContainer.encode(vpcConnectorName, forKey: .vpcConnectorName)
        }
        if vpcConnectorRevision != 0 {
            try encodeContainer.encode(vpcConnectorRevision, forKey: .vpcConnectorRevision)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let vpcConnectorNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vpcConnectorName)
        vpcConnectorName = vpcConnectorNameDecoded
        let vpcConnectorArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vpcConnectorArn)
        vpcConnectorArn = vpcConnectorArnDecoded
        let vpcConnectorRevisionDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .vpcConnectorRevision) ?? 0
        vpcConnectorRevision = vpcConnectorRevisionDecoded
        let subnetsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .subnets)
        var subnetsDecoded0:[Swift.String]? = nil
        if let subnetsContainer = subnetsContainer {
            subnetsDecoded0 = [Swift.String]()
            for string0 in subnetsContainer {
                if let string0 = string0 {
                    subnetsDecoded0?.append(string0)
                }
            }
        }
        subnets = subnetsDecoded0
        let securityGroupsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .securityGroups)
        var securityGroupsDecoded0:[Swift.String]? = nil
        if let securityGroupsContainer = securityGroupsContainer {
            securityGroupsDecoded0 = [Swift.String]()
            for string0 in securityGroupsContainer {
                if let string0 = string0 {
                    securityGroupsDecoded0?.append(string0)
                }
            }
        }
        securityGroups = securityGroupsDecoded0
        let statusDecoded = try containerValues.decodeIfPresent(AppRunnerClientTypes.VpcConnectorStatus.self, forKey: .status)
        status = statusDecoded
        let createdAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdAt)
        createdAt = createdAtDecoded
        let deletedAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .deletedAt)
        deletedAt = deletedAtDecoded
    }
}
