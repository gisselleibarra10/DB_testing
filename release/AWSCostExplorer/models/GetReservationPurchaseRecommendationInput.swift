// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct GetReservationPurchaseRecommendationInput: Swift.Equatable {
    /// The account ID that's associated with the recommendation.
    public var accountId: Swift.String?
    /// The account scope that you want your recommendations for. Amazon Web Services calculates recommendations including the management account and member accounts if the value is set to PAYER. If the value is LINKED, recommendations are calculated for individual member accounts only.
    public var accountScope: CostExplorerClientTypes.AccountScope?
    /// Use Expression to filter by cost or by usage. There are two patterns:
    ///
    /// * Simple dimension values - You can set the dimension name and values for the filters that you plan to use. For example, you can filter for REGION==us-east-1 OR REGION==us-west-1. For GetRightsizingRecommendation, the Region is a full name (for example, REGION==US East (N. Virginia). The Expression example is as follows: { "Dimensions": { "Key": "REGION", "Values": [ "us-east-1", “us-west-1” ] } } The list of dimension values are OR'd together to retrieve cost or usage data. You can create Expression and DimensionValues objects using either with* methods or set* methods in multiple lines.
    ///
    /// * Compound dimension values with logical operations - You can use multiple Expression types and the logical operators AND/OR/NOT to create a list of one or more Expression objects. By doing this, you can filter on more advanced options. For example, you can filter on ((REGION == us-east-1 OR REGION == us-west-1) OR (TAG.Type == Type1)) AND (USAGE_TYPE != DataTransfer). The Expression for that is as follows: { "And": [ {"Or": [ {"Dimensions": { "Key": "REGION", "Values": [ "us-east-1", "us-west-1" ] }}, {"Tags": { "Key": "TagName", "Values": ["Value1"] } } ]}, {"Not": {"Dimensions": { "Key": "USAGE_TYPE", "Values": ["DataTransfer"] }}} ] }  Because each Expression can have only one operator, the service returns an error if more than one is specified. The following example shows an Expression object that creates an error.  { "And": [ ... ], "DimensionValues": { "Dimension": "USAGE_TYPE", "Values": [ "DataTransfer" ] } }
    ///
    ///
    /// For the GetRightsizingRecommendation action, a combination of OR and NOT isn't supported. OR isn't supported between different dimensions, or dimensions and tags. NOT operators aren't supported. Dimensions are also limited to LINKED_ACCOUNT, REGION, or RIGHTSIZING_TYPE. For the GetReservationPurchaseRecommendation action, only NOT is supported. AND and OR aren't supported. Dimensions are limited to LINKED_ACCOUNT.
    public var filter: CostExplorerClientTypes.Expression?
    /// The number of previous days that you want Amazon Web Services to consider when it calculates your recommendations.
    public var lookbackPeriodInDays: CostExplorerClientTypes.LookbackPeriodInDays?
    /// The pagination token that indicates the next set of results that you want to retrieve.
    public var nextPageToken: Swift.String?
    /// The number of recommendations that you want returned in a single response object.
    public var pageSize: Swift.Int
    /// The reservation purchase option that you want recommendations for.
    public var paymentOption: CostExplorerClientTypes.PaymentOption?
    /// The specific service that you want recommendations for.
    /// This member is required.
    public var service: Swift.String?
    /// The hardware specifications for the service instances that you want recommendations for, such as standard or convertible Amazon EC2 instances.
    public var serviceSpecification: CostExplorerClientTypes.ServiceSpecification?
    /// The reservation term that you want recommendations for.
    public var termInYears: CostExplorerClientTypes.TermInYears?

    public init (
        accountId: Swift.String? = nil,
        accountScope: CostExplorerClientTypes.AccountScope? = nil,
        filter: CostExplorerClientTypes.Expression? = nil,
        lookbackPeriodInDays: CostExplorerClientTypes.LookbackPeriodInDays? = nil,
        nextPageToken: Swift.String? = nil,
        pageSize: Swift.Int = 0,
        paymentOption: CostExplorerClientTypes.PaymentOption? = nil,
        service: Swift.String? = nil,
        serviceSpecification: CostExplorerClientTypes.ServiceSpecification? = nil,
        termInYears: CostExplorerClientTypes.TermInYears? = nil
    )
    {
        self.accountId = accountId
        self.accountScope = accountScope
        self.filter = filter
        self.lookbackPeriodInDays = lookbackPeriodInDays
        self.nextPageToken = nextPageToken
        self.pageSize = pageSize
        self.paymentOption = paymentOption
        self.service = service
        self.serviceSpecification = serviceSpecification
        self.termInYears = termInYears
    }
}
