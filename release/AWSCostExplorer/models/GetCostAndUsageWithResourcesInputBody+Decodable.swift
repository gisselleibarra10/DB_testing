// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetCostAndUsageWithResourcesInputBody: Swift.Equatable {
    let timePeriod: CostExplorerClientTypes.DateInterval?
    let granularity: CostExplorerClientTypes.Granularity?
    let filter: CostExplorerClientTypes.Expression?
    let metrics: [Swift.String]?
    let groupBy: [CostExplorerClientTypes.GroupDefinition]?
    let nextPageToken: Swift.String?
}

extension GetCostAndUsageWithResourcesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filter = "Filter"
        case granularity = "Granularity"
        case groupBy = "GroupBy"
        case metrics = "Metrics"
        case nextPageToken = "NextPageToken"
        case timePeriod = "TimePeriod"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let timePeriodDecoded = try containerValues.decodeIfPresent(CostExplorerClientTypes.DateInterval.self, forKey: .timePeriod)
        timePeriod = timePeriodDecoded
        let granularityDecoded = try containerValues.decodeIfPresent(CostExplorerClientTypes.Granularity.self, forKey: .granularity)
        granularity = granularityDecoded
        let filterDecoded = try containerValues.decodeIfPresent(CostExplorerClientTypes.Expression.self, forKey: .filter)
        filter = filterDecoded
        let metricsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .metrics)
        var metricsDecoded0:[Swift.String]? = nil
        if let metricsContainer = metricsContainer {
            metricsDecoded0 = [Swift.String]()
            for string0 in metricsContainer {
                if let string0 = string0 {
                    metricsDecoded0?.append(string0)
                }
            }
        }
        metrics = metricsDecoded0
        let groupByContainer = try containerValues.decodeIfPresent([CostExplorerClientTypes.GroupDefinition?].self, forKey: .groupBy)
        var groupByDecoded0:[CostExplorerClientTypes.GroupDefinition]? = nil
        if let groupByContainer = groupByContainer {
            groupByDecoded0 = [CostExplorerClientTypes.GroupDefinition]()
            for structure0 in groupByContainer {
                if let structure0 = structure0 {
                    groupByDecoded0?.append(structure0)
                }
            }
        }
        groupBy = groupByDecoded0
        let nextPageTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextPageToken)
        nextPageToken = nextPageTokenDecoded
    }
}
