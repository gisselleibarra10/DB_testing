// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct GetReservationUtilizationInput: Swift.Equatable {
    /// Filters utilization data by dimensions. You can filter by the following dimensions:
    ///
    /// * AZ
    ///
    /// * CACHE_ENGINE
    ///
    /// * DEPLOYMENT_OPTION
    ///
    /// * INSTANCE_TYPE
    ///
    /// * LINKED_ACCOUNT
    ///
    /// * OPERATING_SYSTEM
    ///
    /// * PLATFORM
    ///
    /// * REGION
    ///
    /// * SERVICE
    ///
    /// * SCOPE
    ///
    /// * TENANCY
    ///
    ///
    /// GetReservationUtilization uses the same [Expression](https://docs.aws.amazon.com/aws-cost-management/latest/APIReference/API_Expression.html) object as the other operations, but only AND is supported among each dimension, and nesting is supported up to only one level deep. If there are multiple values for a dimension, they are OR'd together.
    public var filter: CostExplorerClientTypes.Expression?
    /// If GroupBy is set, Granularity can't be set. If Granularity isn't set, the response object doesn't include Granularity, either MONTHLY or DAILY. If both GroupBy and Granularity aren't set, GetReservationUtilization defaults to DAILY. The GetReservationUtilization operation supports only DAILY and MONTHLY granularities.
    public var granularity: CostExplorerClientTypes.Granularity?
    /// Groups only by SUBSCRIPTION_ID. Metadata is included.
    public var groupBy: [CostExplorerClientTypes.GroupDefinition]?
    /// The maximum number of objects that you returned for this request. If more objects are available, in the response, Amazon Web Services provides a NextPageToken value that you can use in a subsequent call to get the next batch of objects.
    public var maxResults: Swift.Int?
    /// The token to retrieve the next set of results. Amazon Web Services provides the token when the response from a previous call has more results than the maximum page size.
    public var nextPageToken: Swift.String?
    /// The value that you want to sort the data by. The following values are supported for Key:
    ///
    /// * UtilizationPercentage
    ///
    /// * UtilizationPercentageInUnits
    ///
    /// * PurchasedHours
    ///
    /// * PurchasedUnits
    ///
    /// * TotalActualHours
    ///
    /// * TotalActualUnits
    ///
    /// * UnusedHours
    ///
    /// * UnusedUnits
    ///
    /// * OnDemandCostOfRIHoursUsed
    ///
    /// * NetRISavings
    ///
    /// * TotalPotentialRISavings
    ///
    /// * AmortizedUpfrontFee
    ///
    /// * AmortizedRecurringFee
    ///
    /// * TotalAmortizedFee
    ///
    /// * RICostForUnusedHours
    ///
    /// * RealizedSavings
    ///
    /// * UnrealizedSavings
    ///
    ///
    /// The supported values for SortOrder are ASCENDING and DESCENDING.
    public var sortBy: CostExplorerClientTypes.SortDefinition?
    /// Sets the start and end dates for retrieving Reserved Instance (RI) utilization. The start date is inclusive, but the end date is exclusive. For example, if start is 2017-01-01 and end is 2017-05-01, then the cost and usage data is retrieved from 2017-01-01 up to and including 2017-04-30 but not including 2017-05-01.
    /// This member is required.
    public var timePeriod: CostExplorerClientTypes.DateInterval?

    public init (
        filter: CostExplorerClientTypes.Expression? = nil,
        granularity: CostExplorerClientTypes.Granularity? = nil,
        groupBy: [CostExplorerClientTypes.GroupDefinition]? = nil,
        maxResults: Swift.Int? = nil,
        nextPageToken: Swift.String? = nil,
        sortBy: CostExplorerClientTypes.SortDefinition? = nil,
        timePeriod: CostExplorerClientTypes.DateInterval? = nil
    )
    {
        self.filter = filter
        self.granularity = granularity
        self.groupBy = groupBy
        self.maxResults = maxResults
        self.nextPageToken = nextPageToken
        self.sortBy = sortBy
        self.timePeriod = timePeriod
    }
}
