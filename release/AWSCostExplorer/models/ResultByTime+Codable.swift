// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CostExplorerClientTypes.ResultByTime: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case estimated = "Estimated"
        case groups = "Groups"
        case timePeriod = "TimePeriod"
        case total = "Total"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if estimated != false {
            try encodeContainer.encode(estimated, forKey: .estimated)
        }
        if let groups = groups {
            var groupsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .groups)
            for groups0 in groups {
                try groupsContainer.encode(groups0)
            }
        }
        if let timePeriod = self.timePeriod {
            try encodeContainer.encode(timePeriod, forKey: .timePeriod)
        }
        if let total = total {
            var totalContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .total)
            for (dictKey0, metrics0) in total {
                try totalContainer.encode(metrics0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let timePeriodDecoded = try containerValues.decodeIfPresent(CostExplorerClientTypes.DateInterval.self, forKey: .timePeriod)
        timePeriod = timePeriodDecoded
        let totalContainer = try containerValues.decodeIfPresent([Swift.String: CostExplorerClientTypes.MetricValue?].self, forKey: .total)
        var totalDecoded0: [Swift.String:CostExplorerClientTypes.MetricValue]? = nil
        if let totalContainer = totalContainer {
            totalDecoded0 = [Swift.String:CostExplorerClientTypes.MetricValue]()
            for (key0, metricvalue0) in totalContainer {
                if let metricvalue0 = metricvalue0 {
                    totalDecoded0?[key0] = metricvalue0
                }
            }
        }
        total = totalDecoded0
        let groupsContainer = try containerValues.decodeIfPresent([CostExplorerClientTypes.Group?].self, forKey: .groups)
        var groupsDecoded0:[CostExplorerClientTypes.Group]? = nil
        if let groupsContainer = groupsContainer {
            groupsDecoded0 = [CostExplorerClientTypes.Group]()
            for structure0 in groupsContainer {
                if let structure0 = structure0 {
                    groupsDecoded0?.append(structure0)
                }
            }
        }
        groups = groupsDecoded0
        let estimatedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .estimated) ?? false
        estimated = estimatedDecoded
    }
}
