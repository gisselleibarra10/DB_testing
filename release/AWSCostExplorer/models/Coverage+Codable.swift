// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CostExplorerClientTypes.Coverage: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case coverageCost = "CoverageCost"
        case coverageHours = "CoverageHours"
        case coverageNormalizedUnits = "CoverageNormalizedUnits"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let coverageCost = self.coverageCost {
            try encodeContainer.encode(coverageCost, forKey: .coverageCost)
        }
        if let coverageHours = self.coverageHours {
            try encodeContainer.encode(coverageHours, forKey: .coverageHours)
        }
        if let coverageNormalizedUnits = self.coverageNormalizedUnits {
            try encodeContainer.encode(coverageNormalizedUnits, forKey: .coverageNormalizedUnits)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let coverageHoursDecoded = try containerValues.decodeIfPresent(CostExplorerClientTypes.CoverageHours.self, forKey: .coverageHours)
        coverageHours = coverageHoursDecoded
        let coverageNormalizedUnitsDecoded = try containerValues.decodeIfPresent(CostExplorerClientTypes.CoverageNormalizedUnits.self, forKey: .coverageNormalizedUnits)
        coverageNormalizedUnits = coverageNormalizedUnitsDecoded
        let coverageCostDecoded = try containerValues.decodeIfPresent(CostExplorerClientTypes.CoverageCost.self, forKey: .coverageCost)
        coverageCost = coverageCostDecoded
    }
}
