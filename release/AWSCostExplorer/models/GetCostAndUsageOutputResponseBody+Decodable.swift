// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetCostAndUsageOutputResponseBody: Swift.Equatable {
    let nextPageToken: Swift.String?
    let groupDefinitions: [CostExplorerClientTypes.GroupDefinition]?
    let resultsByTime: [CostExplorerClientTypes.ResultByTime]?
    let dimensionValueAttributes: [CostExplorerClientTypes.DimensionValuesWithAttributes]?
}

extension GetCostAndUsageOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dimensionValueAttributes = "DimensionValueAttributes"
        case groupDefinitions = "GroupDefinitions"
        case nextPageToken = "NextPageToken"
        case resultsByTime = "ResultsByTime"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextPageTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextPageToken)
        nextPageToken = nextPageTokenDecoded
        let groupDefinitionsContainer = try containerValues.decodeIfPresent([CostExplorerClientTypes.GroupDefinition?].self, forKey: .groupDefinitions)
        var groupDefinitionsDecoded0:[CostExplorerClientTypes.GroupDefinition]? = nil
        if let groupDefinitionsContainer = groupDefinitionsContainer {
            groupDefinitionsDecoded0 = [CostExplorerClientTypes.GroupDefinition]()
            for structure0 in groupDefinitionsContainer {
                if let structure0 = structure0 {
                    groupDefinitionsDecoded0?.append(structure0)
                }
            }
        }
        groupDefinitions = groupDefinitionsDecoded0
        let resultsByTimeContainer = try containerValues.decodeIfPresent([CostExplorerClientTypes.ResultByTime?].self, forKey: .resultsByTime)
        var resultsByTimeDecoded0:[CostExplorerClientTypes.ResultByTime]? = nil
        if let resultsByTimeContainer = resultsByTimeContainer {
            resultsByTimeDecoded0 = [CostExplorerClientTypes.ResultByTime]()
            for structure0 in resultsByTimeContainer {
                if let structure0 = structure0 {
                    resultsByTimeDecoded0?.append(structure0)
                }
            }
        }
        resultsByTime = resultsByTimeDecoded0
        let dimensionValueAttributesContainer = try containerValues.decodeIfPresent([CostExplorerClientTypes.DimensionValuesWithAttributes?].self, forKey: .dimensionValueAttributes)
        var dimensionValueAttributesDecoded0:[CostExplorerClientTypes.DimensionValuesWithAttributes]? = nil
        if let dimensionValueAttributesContainer = dimensionValueAttributesContainer {
            dimensionValueAttributesDecoded0 = [CostExplorerClientTypes.DimensionValuesWithAttributes]()
            for structure0 in dimensionValueAttributesContainer {
                if let structure0 = structure0 {
                    dimensionValueAttributesDecoded0?.append(structure0)
                }
            }
        }
        dimensionValueAttributes = dimensionValueAttributesDecoded0
    }
}
