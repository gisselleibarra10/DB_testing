// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CostExplorerClientTypes.SavingsPlansPurchaseRecommendation: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountScope = "AccountScope"
        case lookbackPeriodInDays = "LookbackPeriodInDays"
        case paymentOption = "PaymentOption"
        case savingsPlansPurchaseRecommendationDetails = "SavingsPlansPurchaseRecommendationDetails"
        case savingsPlansPurchaseRecommendationSummary = "SavingsPlansPurchaseRecommendationSummary"
        case savingsPlansType = "SavingsPlansType"
        case termInYears = "TermInYears"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accountScope = self.accountScope {
            try encodeContainer.encode(accountScope.rawValue, forKey: .accountScope)
        }
        if let lookbackPeriodInDays = self.lookbackPeriodInDays {
            try encodeContainer.encode(lookbackPeriodInDays.rawValue, forKey: .lookbackPeriodInDays)
        }
        if let paymentOption = self.paymentOption {
            try encodeContainer.encode(paymentOption.rawValue, forKey: .paymentOption)
        }
        if let savingsPlansPurchaseRecommendationDetails = savingsPlansPurchaseRecommendationDetails {
            var savingsPlansPurchaseRecommendationDetailsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .savingsPlansPurchaseRecommendationDetails)
            for savingsplanspurchaserecommendationdetaillist0 in savingsPlansPurchaseRecommendationDetails {
                try savingsPlansPurchaseRecommendationDetailsContainer.encode(savingsplanspurchaserecommendationdetaillist0)
            }
        }
        if let savingsPlansPurchaseRecommendationSummary = self.savingsPlansPurchaseRecommendationSummary {
            try encodeContainer.encode(savingsPlansPurchaseRecommendationSummary, forKey: .savingsPlansPurchaseRecommendationSummary)
        }
        if let savingsPlansType = self.savingsPlansType {
            try encodeContainer.encode(savingsPlansType.rawValue, forKey: .savingsPlansType)
        }
        if let termInYears = self.termInYears {
            try encodeContainer.encode(termInYears.rawValue, forKey: .termInYears)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let accountScopeDecoded = try containerValues.decodeIfPresent(CostExplorerClientTypes.AccountScope.self, forKey: .accountScope)
        accountScope = accountScopeDecoded
        let savingsPlansTypeDecoded = try containerValues.decodeIfPresent(CostExplorerClientTypes.SupportedSavingsPlansType.self, forKey: .savingsPlansType)
        savingsPlansType = savingsPlansTypeDecoded
        let termInYearsDecoded = try containerValues.decodeIfPresent(CostExplorerClientTypes.TermInYears.self, forKey: .termInYears)
        termInYears = termInYearsDecoded
        let paymentOptionDecoded = try containerValues.decodeIfPresent(CostExplorerClientTypes.PaymentOption.self, forKey: .paymentOption)
        paymentOption = paymentOptionDecoded
        let lookbackPeriodInDaysDecoded = try containerValues.decodeIfPresent(CostExplorerClientTypes.LookbackPeriodInDays.self, forKey: .lookbackPeriodInDays)
        lookbackPeriodInDays = lookbackPeriodInDaysDecoded
        let savingsPlansPurchaseRecommendationDetailsContainer = try containerValues.decodeIfPresent([CostExplorerClientTypes.SavingsPlansPurchaseRecommendationDetail?].self, forKey: .savingsPlansPurchaseRecommendationDetails)
        var savingsPlansPurchaseRecommendationDetailsDecoded0:[CostExplorerClientTypes.SavingsPlansPurchaseRecommendationDetail]? = nil
        if let savingsPlansPurchaseRecommendationDetailsContainer = savingsPlansPurchaseRecommendationDetailsContainer {
            savingsPlansPurchaseRecommendationDetailsDecoded0 = [CostExplorerClientTypes.SavingsPlansPurchaseRecommendationDetail]()
            for structure0 in savingsPlansPurchaseRecommendationDetailsContainer {
                if let structure0 = structure0 {
                    savingsPlansPurchaseRecommendationDetailsDecoded0?.append(structure0)
                }
            }
        }
        savingsPlansPurchaseRecommendationDetails = savingsPlansPurchaseRecommendationDetailsDecoded0
        let savingsPlansPurchaseRecommendationSummaryDecoded = try containerValues.decodeIfPresent(CostExplorerClientTypes.SavingsPlansPurchaseRecommendationSummary.self, forKey: .savingsPlansPurchaseRecommendationSummary)
        savingsPlansPurchaseRecommendationSummary = savingsPlansPurchaseRecommendationSummaryDecoded
    }
}
