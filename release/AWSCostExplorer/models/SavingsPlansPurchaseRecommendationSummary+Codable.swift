// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CostExplorerClientTypes.SavingsPlansPurchaseRecommendationSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case currencyCode = "CurrencyCode"
        case currentOnDemandSpend = "CurrentOnDemandSpend"
        case dailyCommitmentToPurchase = "DailyCommitmentToPurchase"
        case estimatedMonthlySavingsAmount = "EstimatedMonthlySavingsAmount"
        case estimatedOnDemandCostWithCurrentCommitment = "EstimatedOnDemandCostWithCurrentCommitment"
        case estimatedROI = "EstimatedROI"
        case estimatedSavingsAmount = "EstimatedSavingsAmount"
        case estimatedSavingsPercentage = "EstimatedSavingsPercentage"
        case estimatedTotalCost = "EstimatedTotalCost"
        case hourlyCommitmentToPurchase = "HourlyCommitmentToPurchase"
        case totalRecommendationCount = "TotalRecommendationCount"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let currencyCode = self.currencyCode {
            try encodeContainer.encode(currencyCode, forKey: .currencyCode)
        }
        if let currentOnDemandSpend = self.currentOnDemandSpend {
            try encodeContainer.encode(currentOnDemandSpend, forKey: .currentOnDemandSpend)
        }
        if let dailyCommitmentToPurchase = self.dailyCommitmentToPurchase {
            try encodeContainer.encode(dailyCommitmentToPurchase, forKey: .dailyCommitmentToPurchase)
        }
        if let estimatedMonthlySavingsAmount = self.estimatedMonthlySavingsAmount {
            try encodeContainer.encode(estimatedMonthlySavingsAmount, forKey: .estimatedMonthlySavingsAmount)
        }
        if let estimatedOnDemandCostWithCurrentCommitment = self.estimatedOnDemandCostWithCurrentCommitment {
            try encodeContainer.encode(estimatedOnDemandCostWithCurrentCommitment, forKey: .estimatedOnDemandCostWithCurrentCommitment)
        }
        if let estimatedROI = self.estimatedROI {
            try encodeContainer.encode(estimatedROI, forKey: .estimatedROI)
        }
        if let estimatedSavingsAmount = self.estimatedSavingsAmount {
            try encodeContainer.encode(estimatedSavingsAmount, forKey: .estimatedSavingsAmount)
        }
        if let estimatedSavingsPercentage = self.estimatedSavingsPercentage {
            try encodeContainer.encode(estimatedSavingsPercentage, forKey: .estimatedSavingsPercentage)
        }
        if let estimatedTotalCost = self.estimatedTotalCost {
            try encodeContainer.encode(estimatedTotalCost, forKey: .estimatedTotalCost)
        }
        if let hourlyCommitmentToPurchase = self.hourlyCommitmentToPurchase {
            try encodeContainer.encode(hourlyCommitmentToPurchase, forKey: .hourlyCommitmentToPurchase)
        }
        if let totalRecommendationCount = self.totalRecommendationCount {
            try encodeContainer.encode(totalRecommendationCount, forKey: .totalRecommendationCount)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let estimatedROIDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .estimatedROI)
        estimatedROI = estimatedROIDecoded
        let currencyCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .currencyCode)
        currencyCode = currencyCodeDecoded
        let estimatedTotalCostDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .estimatedTotalCost)
        estimatedTotalCost = estimatedTotalCostDecoded
        let currentOnDemandSpendDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .currentOnDemandSpend)
        currentOnDemandSpend = currentOnDemandSpendDecoded
        let estimatedSavingsAmountDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .estimatedSavingsAmount)
        estimatedSavingsAmount = estimatedSavingsAmountDecoded
        let totalRecommendationCountDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .totalRecommendationCount)
        totalRecommendationCount = totalRecommendationCountDecoded
        let dailyCommitmentToPurchaseDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dailyCommitmentToPurchase)
        dailyCommitmentToPurchase = dailyCommitmentToPurchaseDecoded
        let hourlyCommitmentToPurchaseDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .hourlyCommitmentToPurchase)
        hourlyCommitmentToPurchase = hourlyCommitmentToPurchaseDecoded
        let estimatedSavingsPercentageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .estimatedSavingsPercentage)
        estimatedSavingsPercentage = estimatedSavingsPercentageDecoded
        let estimatedMonthlySavingsAmountDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .estimatedMonthlySavingsAmount)
        estimatedMonthlySavingsAmount = estimatedMonthlySavingsAmountDecoded
        let estimatedOnDemandCostWithCurrentCommitmentDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .estimatedOnDemandCostWithCurrentCommitment)
        estimatedOnDemandCostWithCurrentCommitment = estimatedOnDemandCostWithCurrentCommitmentDecoded
    }
}
