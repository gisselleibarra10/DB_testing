// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CostExplorerClientTypes.RightsizingRecommendation: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountId = "AccountId"
        case currentInstance = "CurrentInstance"
        case findingReasonCodes = "FindingReasonCodes"
        case modifyRecommendationDetail = "ModifyRecommendationDetail"
        case rightsizingType = "RightsizingType"
        case terminateRecommendationDetail = "TerminateRecommendationDetail"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accountId = self.accountId {
            try encodeContainer.encode(accountId, forKey: .accountId)
        }
        if let currentInstance = self.currentInstance {
            try encodeContainer.encode(currentInstance, forKey: .currentInstance)
        }
        if let findingReasonCodes = findingReasonCodes {
            var findingReasonCodesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .findingReasonCodes)
            for findingreasoncodes0 in findingReasonCodes {
                try findingReasonCodesContainer.encode(findingreasoncodes0.rawValue)
            }
        }
        if let modifyRecommendationDetail = self.modifyRecommendationDetail {
            try encodeContainer.encode(modifyRecommendationDetail, forKey: .modifyRecommendationDetail)
        }
        if let rightsizingType = self.rightsizingType {
            try encodeContainer.encode(rightsizingType.rawValue, forKey: .rightsizingType)
        }
        if let terminateRecommendationDetail = self.terminateRecommendationDetail {
            try encodeContainer.encode(terminateRecommendationDetail, forKey: .terminateRecommendationDetail)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let accountIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .accountId)
        accountId = accountIdDecoded
        let currentInstanceDecoded = try containerValues.decodeIfPresent(CostExplorerClientTypes.CurrentInstance.self, forKey: .currentInstance)
        currentInstance = currentInstanceDecoded
        let rightsizingTypeDecoded = try containerValues.decodeIfPresent(CostExplorerClientTypes.RightsizingType.self, forKey: .rightsizingType)
        rightsizingType = rightsizingTypeDecoded
        let modifyRecommendationDetailDecoded = try containerValues.decodeIfPresent(CostExplorerClientTypes.ModifyRecommendationDetail.self, forKey: .modifyRecommendationDetail)
        modifyRecommendationDetail = modifyRecommendationDetailDecoded
        let terminateRecommendationDetailDecoded = try containerValues.decodeIfPresent(CostExplorerClientTypes.TerminateRecommendationDetail.self, forKey: .terminateRecommendationDetail)
        terminateRecommendationDetail = terminateRecommendationDetailDecoded
        let findingReasonCodesContainer = try containerValues.decodeIfPresent([CostExplorerClientTypes.FindingReasonCode?].self, forKey: .findingReasonCodes)
        var findingReasonCodesDecoded0:[CostExplorerClientTypes.FindingReasonCode]? = nil
        if let findingReasonCodesContainer = findingReasonCodesContainer {
            findingReasonCodesDecoded0 = [CostExplorerClientTypes.FindingReasonCode]()
            for enum0 in findingReasonCodesContainer {
                if let enum0 = enum0 {
                    findingReasonCodesDecoded0?.append(enum0)
                }
            }
        }
        findingReasonCodes = findingReasonCodesDecoded0
    }
}
