// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension CostExplorerClientTypes {
    public enum Metric: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case amortizedCost
        case blendedCost
        case netAmortizedCost
        case netUnblendedCost
        case normalizedUsageAmount
        case unblendedCost
        case usageQuantity
        case sdkUnknown(Swift.String)

        public static var allCases: [Metric] {
            return [
                .amortizedCost,
                .blendedCost,
                .netAmortizedCost,
                .netUnblendedCost,
                .normalizedUsageAmount,
                .unblendedCost,
                .usageQuantity,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .amortizedCost: return "AMORTIZED_COST"
            case .blendedCost: return "BLENDED_COST"
            case .netAmortizedCost: return "NET_AMORTIZED_COST"
            case .netUnblendedCost: return "NET_UNBLENDED_COST"
            case .normalizedUsageAmount: return "NORMALIZED_USAGE_AMOUNT"
            case .unblendedCost: return "UNBLENDED_COST"
            case .usageQuantity: return "USAGE_QUANTITY"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = Metric(rawValue: rawValue) ?? Metric.sdkUnknown(rawValue)
        }
    }
}
