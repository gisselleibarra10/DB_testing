// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CostExplorerClientTypes.UtilizationByTime: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case groups = "Groups"
        case timePeriod = "TimePeriod"
        case total = "Total"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let groups = groups {
            var groupsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .groups)
            for reservationutilizationgroups0 in groups {
                try groupsContainer.encode(reservationutilizationgroups0)
            }
        }
        if let timePeriod = self.timePeriod {
            try encodeContainer.encode(timePeriod, forKey: .timePeriod)
        }
        if let total = self.total {
            try encodeContainer.encode(total, forKey: .total)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let timePeriodDecoded = try containerValues.decodeIfPresent(CostExplorerClientTypes.DateInterval.self, forKey: .timePeriod)
        timePeriod = timePeriodDecoded
        let groupsContainer = try containerValues.decodeIfPresent([CostExplorerClientTypes.ReservationUtilizationGroup?].self, forKey: .groups)
        var groupsDecoded0:[CostExplorerClientTypes.ReservationUtilizationGroup]? = nil
        if let groupsContainer = groupsContainer {
            groupsDecoded0 = [CostExplorerClientTypes.ReservationUtilizationGroup]()
            for structure0 in groupsContainer {
                if let structure0 = structure0 {
                    groupsDecoded0?.append(structure0)
                }
            }
        }
        groups = groupsDecoded0
        let totalDecoded = try containerValues.decodeIfPresent(CostExplorerClientTypes.ReservationAggregates.self, forKey: .total)
        total = totalDecoded
    }
}
