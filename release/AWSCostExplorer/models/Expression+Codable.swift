// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CostExplorerClientTypes.Expression: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case and = "And"
        case costCategories = "CostCategories"
        case dimensions = "Dimensions"
        case not = "Not"
        case or = "Or"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let and = and {
            var andContainer = encodeContainer.nestedUnkeyedContainer(forKey: .and)
            for expressions0 in and {
                try andContainer.encode(expressions0)
            }
        }
        if let costCategories = self.costCategories {
            try encodeContainer.encode(costCategories, forKey: .costCategories)
        }
        if let dimensions = self.dimensions {
            try encodeContainer.encode(dimensions, forKey: .dimensions)
        }
        if let not = self.not {
            try encodeContainer.encode(not.value, forKey: .not)
        }
        if let or = or {
            var orContainer = encodeContainer.nestedUnkeyedContainer(forKey: .or)
            for expressions0 in or {
                try orContainer.encode(expressions0)
            }
        }
        if let tags = self.tags {
            try encodeContainer.encode(tags, forKey: .tags)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let orContainer = try containerValues.decodeIfPresent([CostExplorerClientTypes.Expression?].self, forKey: .or)
        var orDecoded0:[CostExplorerClientTypes.Expression]? = nil
        if let orContainer = orContainer {
            orDecoded0 = [CostExplorerClientTypes.Expression]()
            for structure0 in orContainer {
                if let structure0 = structure0 {
                    orDecoded0?.append(structure0)
                }
            }
        }
        or = orDecoded0
        let andContainer = try containerValues.decodeIfPresent([CostExplorerClientTypes.Expression?].self, forKey: .and)
        var andDecoded0:[CostExplorerClientTypes.Expression]? = nil
        if let andContainer = andContainer {
            andDecoded0 = [CostExplorerClientTypes.Expression]()
            for structure0 in andContainer {
                if let structure0 = structure0 {
                    andDecoded0?.append(structure0)
                }
            }
        }
        and = andDecoded0
        let notDecoded = try containerValues.decodeIfPresent(Box<CostExplorerClientTypes.Expression>.self, forKey: .not)
        not = notDecoded
        let dimensionsDecoded = try containerValues.decodeIfPresent(CostExplorerClientTypes.DimensionValues.self, forKey: .dimensions)
        dimensions = dimensionsDecoded
        let tagsDecoded = try containerValues.decodeIfPresent(CostExplorerClientTypes.TagValues.self, forKey: .tags)
        tags = tagsDecoded
        let costCategoriesDecoded = try containerValues.decodeIfPresent(CostExplorerClientTypes.CostCategoryValues.self, forKey: .costCategories)
        costCategories = costCategoriesDecoded
    }
}
