// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CostExplorerClientTypes.CostCategorySplitChargeRule: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case method = "Method"
        case parameters = "Parameters"
        case source = "Source"
        case targets = "Targets"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let method = self.method {
            try encodeContainer.encode(method.rawValue, forKey: .method)
        }
        if let parameters = parameters {
            var parametersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .parameters)
            for costcategorysplitchargeruleparameterslist0 in parameters {
                try parametersContainer.encode(costcategorysplitchargeruleparameterslist0)
            }
        }
        if let source = self.source {
            try encodeContainer.encode(source, forKey: .source)
        }
        if let targets = targets {
            var targetsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .targets)
            for costcategorysplitchargeruletargetslist0 in targets {
                try targetsContainer.encode(costcategorysplitchargeruletargetslist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sourceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .source)
        source = sourceDecoded
        let targetsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .targets)
        var targetsDecoded0:[Swift.String]? = nil
        if let targetsContainer = targetsContainer {
            targetsDecoded0 = [Swift.String]()
            for string0 in targetsContainer {
                if let string0 = string0 {
                    targetsDecoded0?.append(string0)
                }
            }
        }
        targets = targetsDecoded0
        let methodDecoded = try containerValues.decodeIfPresent(CostExplorerClientTypes.CostCategorySplitChargeMethod.self, forKey: .method)
        method = methodDecoded
        let parametersContainer = try containerValues.decodeIfPresent([CostExplorerClientTypes.CostCategorySplitChargeRuleParameter?].self, forKey: .parameters)
        var parametersDecoded0:[CostExplorerClientTypes.CostCategorySplitChargeRuleParameter]? = nil
        if let parametersContainer = parametersContainer {
            parametersDecoded0 = [CostExplorerClientTypes.CostCategorySplitChargeRuleParameter]()
            for structure0 in parametersContainer {
                if let structure0 = structure0 {
                    parametersDecoded0?.append(structure0)
                }
            }
        }
        parameters = parametersDecoded0
    }
}
