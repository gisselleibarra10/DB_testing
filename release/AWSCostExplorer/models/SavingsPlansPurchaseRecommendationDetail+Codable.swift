// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CostExplorerClientTypes.SavingsPlansPurchaseRecommendationDetail: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountId = "AccountId"
        case currencyCode = "CurrencyCode"
        case currentAverageHourlyOnDemandSpend = "CurrentAverageHourlyOnDemandSpend"
        case currentMaximumHourlyOnDemandSpend = "CurrentMaximumHourlyOnDemandSpend"
        case currentMinimumHourlyOnDemandSpend = "CurrentMinimumHourlyOnDemandSpend"
        case estimatedAverageUtilization = "EstimatedAverageUtilization"
        case estimatedMonthlySavingsAmount = "EstimatedMonthlySavingsAmount"
        case estimatedOnDemandCost = "EstimatedOnDemandCost"
        case estimatedOnDemandCostWithCurrentCommitment = "EstimatedOnDemandCostWithCurrentCommitment"
        case estimatedROI = "EstimatedROI"
        case estimatedSPCost = "EstimatedSPCost"
        case estimatedSavingsAmount = "EstimatedSavingsAmount"
        case estimatedSavingsPercentage = "EstimatedSavingsPercentage"
        case hourlyCommitmentToPurchase = "HourlyCommitmentToPurchase"
        case savingsPlansDetails = "SavingsPlansDetails"
        case upfrontCost = "UpfrontCost"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accountId = self.accountId {
            try encodeContainer.encode(accountId, forKey: .accountId)
        }
        if let currencyCode = self.currencyCode {
            try encodeContainer.encode(currencyCode, forKey: .currencyCode)
        }
        if let currentAverageHourlyOnDemandSpend = self.currentAverageHourlyOnDemandSpend {
            try encodeContainer.encode(currentAverageHourlyOnDemandSpend, forKey: .currentAverageHourlyOnDemandSpend)
        }
        if let currentMaximumHourlyOnDemandSpend = self.currentMaximumHourlyOnDemandSpend {
            try encodeContainer.encode(currentMaximumHourlyOnDemandSpend, forKey: .currentMaximumHourlyOnDemandSpend)
        }
        if let currentMinimumHourlyOnDemandSpend = self.currentMinimumHourlyOnDemandSpend {
            try encodeContainer.encode(currentMinimumHourlyOnDemandSpend, forKey: .currentMinimumHourlyOnDemandSpend)
        }
        if let estimatedAverageUtilization = self.estimatedAverageUtilization {
            try encodeContainer.encode(estimatedAverageUtilization, forKey: .estimatedAverageUtilization)
        }
        if let estimatedMonthlySavingsAmount = self.estimatedMonthlySavingsAmount {
            try encodeContainer.encode(estimatedMonthlySavingsAmount, forKey: .estimatedMonthlySavingsAmount)
        }
        if let estimatedOnDemandCost = self.estimatedOnDemandCost {
            try encodeContainer.encode(estimatedOnDemandCost, forKey: .estimatedOnDemandCost)
        }
        if let estimatedOnDemandCostWithCurrentCommitment = self.estimatedOnDemandCostWithCurrentCommitment {
            try encodeContainer.encode(estimatedOnDemandCostWithCurrentCommitment, forKey: .estimatedOnDemandCostWithCurrentCommitment)
        }
        if let estimatedROI = self.estimatedROI {
            try encodeContainer.encode(estimatedROI, forKey: .estimatedROI)
        }
        if let estimatedSPCost = self.estimatedSPCost {
            try encodeContainer.encode(estimatedSPCost, forKey: .estimatedSPCost)
        }
        if let estimatedSavingsAmount = self.estimatedSavingsAmount {
            try encodeContainer.encode(estimatedSavingsAmount, forKey: .estimatedSavingsAmount)
        }
        if let estimatedSavingsPercentage = self.estimatedSavingsPercentage {
            try encodeContainer.encode(estimatedSavingsPercentage, forKey: .estimatedSavingsPercentage)
        }
        if let hourlyCommitmentToPurchase = self.hourlyCommitmentToPurchase {
            try encodeContainer.encode(hourlyCommitmentToPurchase, forKey: .hourlyCommitmentToPurchase)
        }
        if let savingsPlansDetails = self.savingsPlansDetails {
            try encodeContainer.encode(savingsPlansDetails, forKey: .savingsPlansDetails)
        }
        if let upfrontCost = self.upfrontCost {
            try encodeContainer.encode(upfrontCost, forKey: .upfrontCost)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let savingsPlansDetailsDecoded = try containerValues.decodeIfPresent(CostExplorerClientTypes.SavingsPlansDetails.self, forKey: .savingsPlansDetails)
        savingsPlansDetails = savingsPlansDetailsDecoded
        let accountIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .accountId)
        accountId = accountIdDecoded
        let upfrontCostDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .upfrontCost)
        upfrontCost = upfrontCostDecoded
        let estimatedROIDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .estimatedROI)
        estimatedROI = estimatedROIDecoded
        let currencyCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .currencyCode)
        currencyCode = currencyCodeDecoded
        let estimatedSPCostDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .estimatedSPCost)
        estimatedSPCost = estimatedSPCostDecoded
        let estimatedOnDemandCostDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .estimatedOnDemandCost)
        estimatedOnDemandCost = estimatedOnDemandCostDecoded
        let estimatedOnDemandCostWithCurrentCommitmentDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .estimatedOnDemandCostWithCurrentCommitment)
        estimatedOnDemandCostWithCurrentCommitment = estimatedOnDemandCostWithCurrentCommitmentDecoded
        let estimatedSavingsAmountDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .estimatedSavingsAmount)
        estimatedSavingsAmount = estimatedSavingsAmountDecoded
        let estimatedSavingsPercentageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .estimatedSavingsPercentage)
        estimatedSavingsPercentage = estimatedSavingsPercentageDecoded
        let hourlyCommitmentToPurchaseDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .hourlyCommitmentToPurchase)
        hourlyCommitmentToPurchase = hourlyCommitmentToPurchaseDecoded
        let estimatedAverageUtilizationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .estimatedAverageUtilization)
        estimatedAverageUtilization = estimatedAverageUtilizationDecoded
        let estimatedMonthlySavingsAmountDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .estimatedMonthlySavingsAmount)
        estimatedMonthlySavingsAmount = estimatedMonthlySavingsAmountDecoded
        let currentMinimumHourlyOnDemandSpendDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .currentMinimumHourlyOnDemandSpend)
        currentMinimumHourlyOnDemandSpend = currentMinimumHourlyOnDemandSpendDecoded
        let currentMaximumHourlyOnDemandSpendDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .currentMaximumHourlyOnDemandSpend)
        currentMaximumHourlyOnDemandSpend = currentMaximumHourlyOnDemandSpendDecoded
        let currentAverageHourlyOnDemandSpendDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .currentAverageHourlyOnDemandSpend)
        currentAverageHourlyOnDemandSpend = currentAverageHourlyOnDemandSpendDecoded
    }
}
