// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetCostCategoriesInputBody: Swift.Equatable {
    let searchString: Swift.String?
    let timePeriod: CostExplorerClientTypes.DateInterval?
    let costCategoryName: Swift.String?
    let filter: CostExplorerClientTypes.Expression?
    let sortBy: [CostExplorerClientTypes.SortDefinition]?
    let maxResults: Swift.Int
    let nextPageToken: Swift.String?
}

extension GetCostCategoriesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case costCategoryName = "CostCategoryName"
        case filter = "Filter"
        case maxResults = "MaxResults"
        case nextPageToken = "NextPageToken"
        case searchString = "SearchString"
        case sortBy = "SortBy"
        case timePeriod = "TimePeriod"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let searchStringDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .searchString)
        searchString = searchStringDecoded
        let timePeriodDecoded = try containerValues.decodeIfPresent(CostExplorerClientTypes.DateInterval.self, forKey: .timePeriod)
        timePeriod = timePeriodDecoded
        let costCategoryNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .costCategoryName)
        costCategoryName = costCategoryNameDecoded
        let filterDecoded = try containerValues.decodeIfPresent(CostExplorerClientTypes.Expression.self, forKey: .filter)
        filter = filterDecoded
        let sortByContainer = try containerValues.decodeIfPresent([CostExplorerClientTypes.SortDefinition?].self, forKey: .sortBy)
        var sortByDecoded0:[CostExplorerClientTypes.SortDefinition]? = nil
        if let sortByContainer = sortByContainer {
            sortByDecoded0 = [CostExplorerClientTypes.SortDefinition]()
            for structure0 in sortByContainer {
                if let structure0 = structure0 {
                    sortByDecoded0?.append(structure0)
                }
            }
        }
        sortBy = sortByDecoded0
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults) ?? 0
        maxResults = maxResultsDecoded
        let nextPageTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextPageToken)
        nextPageToken = nextPageTokenDecoded
    }
}
