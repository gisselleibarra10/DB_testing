// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetAnomaliesInputBody: Swift.Equatable {
    let monitorArn: Swift.String?
    let dateInterval: CostExplorerClientTypes.AnomalyDateInterval?
    let feedback: CostExplorerClientTypes.AnomalyFeedbackType?
    let totalImpact: CostExplorerClientTypes.TotalImpactFilter?
    let nextPageToken: Swift.String?
    let maxResults: Swift.Int?
}

extension GetAnomaliesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dateInterval = "DateInterval"
        case feedback = "Feedback"
        case maxResults = "MaxResults"
        case monitorArn = "MonitorArn"
        case nextPageToken = "NextPageToken"
        case totalImpact = "TotalImpact"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let monitorArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .monitorArn)
        monitorArn = monitorArnDecoded
        let dateIntervalDecoded = try containerValues.decodeIfPresent(CostExplorerClientTypes.AnomalyDateInterval.self, forKey: .dateInterval)
        dateInterval = dateIntervalDecoded
        let feedbackDecoded = try containerValues.decodeIfPresent(CostExplorerClientTypes.AnomalyFeedbackType.self, forKey: .feedback)
        feedback = feedbackDecoded
        let totalImpactDecoded = try containerValues.decodeIfPresent(CostExplorerClientTypes.TotalImpactFilter.self, forKey: .totalImpact)
        totalImpact = totalImpactDecoded
        let nextPageTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextPageToken)
        nextPageToken = nextPageTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
    }
}
