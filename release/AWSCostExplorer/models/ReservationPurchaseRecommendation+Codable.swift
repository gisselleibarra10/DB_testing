// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CostExplorerClientTypes.ReservationPurchaseRecommendation: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountScope = "AccountScope"
        case lookbackPeriodInDays = "LookbackPeriodInDays"
        case paymentOption = "PaymentOption"
        case recommendationDetails = "RecommendationDetails"
        case recommendationSummary = "RecommendationSummary"
        case serviceSpecification = "ServiceSpecification"
        case termInYears = "TermInYears"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accountScope = self.accountScope {
            try encodeContainer.encode(accountScope.rawValue, forKey: .accountScope)
        }
        if let lookbackPeriodInDays = self.lookbackPeriodInDays {
            try encodeContainer.encode(lookbackPeriodInDays.rawValue, forKey: .lookbackPeriodInDays)
        }
        if let paymentOption = self.paymentOption {
            try encodeContainer.encode(paymentOption.rawValue, forKey: .paymentOption)
        }
        if let recommendationDetails = recommendationDetails {
            var recommendationDetailsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .recommendationDetails)
            for reservationpurchaserecommendationdetails0 in recommendationDetails {
                try recommendationDetailsContainer.encode(reservationpurchaserecommendationdetails0)
            }
        }
        if let recommendationSummary = self.recommendationSummary {
            try encodeContainer.encode(recommendationSummary, forKey: .recommendationSummary)
        }
        if let serviceSpecification = self.serviceSpecification {
            try encodeContainer.encode(serviceSpecification, forKey: .serviceSpecification)
        }
        if let termInYears = self.termInYears {
            try encodeContainer.encode(termInYears.rawValue, forKey: .termInYears)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let accountScopeDecoded = try containerValues.decodeIfPresent(CostExplorerClientTypes.AccountScope.self, forKey: .accountScope)
        accountScope = accountScopeDecoded
        let lookbackPeriodInDaysDecoded = try containerValues.decodeIfPresent(CostExplorerClientTypes.LookbackPeriodInDays.self, forKey: .lookbackPeriodInDays)
        lookbackPeriodInDays = lookbackPeriodInDaysDecoded
        let termInYearsDecoded = try containerValues.decodeIfPresent(CostExplorerClientTypes.TermInYears.self, forKey: .termInYears)
        termInYears = termInYearsDecoded
        let paymentOptionDecoded = try containerValues.decodeIfPresent(CostExplorerClientTypes.PaymentOption.self, forKey: .paymentOption)
        paymentOption = paymentOptionDecoded
        let serviceSpecificationDecoded = try containerValues.decodeIfPresent(CostExplorerClientTypes.ServiceSpecification.self, forKey: .serviceSpecification)
        serviceSpecification = serviceSpecificationDecoded
        let recommendationDetailsContainer = try containerValues.decodeIfPresent([CostExplorerClientTypes.ReservationPurchaseRecommendationDetail?].self, forKey: .recommendationDetails)
        var recommendationDetailsDecoded0:[CostExplorerClientTypes.ReservationPurchaseRecommendationDetail]? = nil
        if let recommendationDetailsContainer = recommendationDetailsContainer {
            recommendationDetailsDecoded0 = [CostExplorerClientTypes.ReservationPurchaseRecommendationDetail]()
            for structure0 in recommendationDetailsContainer {
                if let structure0 = structure0 {
                    recommendationDetailsDecoded0?.append(structure0)
                }
            }
        }
        recommendationDetails = recommendationDetailsDecoded0
        let recommendationSummaryDecoded = try containerValues.decodeIfPresent(CostExplorerClientTypes.ReservationPurchaseRecommendationSummary.self, forKey: .recommendationSummary)
        recommendationSummary = recommendationSummaryDecoded
    }
}
