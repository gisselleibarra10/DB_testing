// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetSavingsPlansUtilizationOutputResponseBody: Swift.Equatable {
    let savingsPlansUtilizationsByTime: [CostExplorerClientTypes.SavingsPlansUtilizationByTime]?
    let total: CostExplorerClientTypes.SavingsPlansUtilizationAggregates?
}

extension GetSavingsPlansUtilizationOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case savingsPlansUtilizationsByTime = "SavingsPlansUtilizationsByTime"
        case total = "Total"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let savingsPlansUtilizationsByTimeContainer = try containerValues.decodeIfPresent([CostExplorerClientTypes.SavingsPlansUtilizationByTime?].self, forKey: .savingsPlansUtilizationsByTime)
        var savingsPlansUtilizationsByTimeDecoded0:[CostExplorerClientTypes.SavingsPlansUtilizationByTime]? = nil
        if let savingsPlansUtilizationsByTimeContainer = savingsPlansUtilizationsByTimeContainer {
            savingsPlansUtilizationsByTimeDecoded0 = [CostExplorerClientTypes.SavingsPlansUtilizationByTime]()
            for structure0 in savingsPlansUtilizationsByTimeContainer {
                if let structure0 = structure0 {
                    savingsPlansUtilizationsByTimeDecoded0?.append(structure0)
                }
            }
        }
        savingsPlansUtilizationsByTime = savingsPlansUtilizationsByTimeDecoded0
        let totalDecoded = try containerValues.decodeIfPresent(CostExplorerClientTypes.SavingsPlansUtilizationAggregates.self, forKey: .total)
        total = totalDecoded
    }
}
