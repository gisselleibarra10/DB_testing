// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension GetSavingsPlansPurchaseRecommendationInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountScope = "AccountScope"
        case filter = "Filter"
        case lookbackPeriodInDays = "LookbackPeriodInDays"
        case nextPageToken = "NextPageToken"
        case pageSize = "PageSize"
        case paymentOption = "PaymentOption"
        case savingsPlansType = "SavingsPlansType"
        case termInYears = "TermInYears"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accountScope = self.accountScope {
            try encodeContainer.encode(accountScope.rawValue, forKey: .accountScope)
        }
        if let filter = self.filter {
            try encodeContainer.encode(filter, forKey: .filter)
        }
        if let lookbackPeriodInDays = self.lookbackPeriodInDays {
            try encodeContainer.encode(lookbackPeriodInDays.rawValue, forKey: .lookbackPeriodInDays)
        }
        if let nextPageToken = self.nextPageToken {
            try encodeContainer.encode(nextPageToken, forKey: .nextPageToken)
        }
        if pageSize != 0 {
            try encodeContainer.encode(pageSize, forKey: .pageSize)
        }
        if let paymentOption = self.paymentOption {
            try encodeContainer.encode(paymentOption.rawValue, forKey: .paymentOption)
        }
        if let savingsPlansType = self.savingsPlansType {
            try encodeContainer.encode(savingsPlansType.rawValue, forKey: .savingsPlansType)
        }
        if let termInYears = self.termInYears {
            try encodeContainer.encode(termInYears.rawValue, forKey: .termInYears)
        }
    }
}
