// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct GetCostCategoriesInput: Swift.Equatable {
    /// The unique name of the Cost Category.
    public var costCategoryName: Swift.String?
    /// Use Expression to filter by cost or by usage. There are two patterns:
    ///
    /// * Simple dimension values - You can set the dimension name and values for the filters that you plan to use. For example, you can filter for REGION==us-east-1 OR REGION==us-west-1. For GetRightsizingRecommendation, the Region is a full name (for example, REGION==US East (N. Virginia). The Expression example is as follows: { "Dimensions": { "Key": "REGION", "Values": [ "us-east-1", “us-west-1” ] } } The list of dimension values are OR'd together to retrieve cost or usage data. You can create Expression and DimensionValues objects using either with* methods or set* methods in multiple lines.
    ///
    /// * Compound dimension values with logical operations - You can use multiple Expression types and the logical operators AND/OR/NOT to create a list of one or more Expression objects. By doing this, you can filter on more advanced options. For example, you can filter on ((REGION == us-east-1 OR REGION == us-west-1) OR (TAG.Type == Type1)) AND (USAGE_TYPE != DataTransfer). The Expression for that is as follows: { "And": [ {"Or": [ {"Dimensions": { "Key": "REGION", "Values": [ "us-east-1", "us-west-1" ] }}, {"Tags": { "Key": "TagName", "Values": ["Value1"] } } ]}, {"Not": {"Dimensions": { "Key": "USAGE_TYPE", "Values": ["DataTransfer"] }}} ] }  Because each Expression can have only one operator, the service returns an error if more than one is specified. The following example shows an Expression object that creates an error.  { "And": [ ... ], "DimensionValues": { "Dimension": "USAGE_TYPE", "Values": [ "DataTransfer" ] } }
    ///
    ///
    /// For the GetRightsizingRecommendation action, a combination of OR and NOT isn't supported. OR isn't supported between different dimensions, or dimensions and tags. NOT operators aren't supported. Dimensions are also limited to LINKED_ACCOUNT, REGION, or RIGHTSIZING_TYPE. For the GetReservationPurchaseRecommendation action, only NOT is supported. AND and OR aren't supported. Dimensions are limited to LINKED_ACCOUNT.
    public var filter: CostExplorerClientTypes.Expression?
    /// This field is only used when the SortBy value is provided in the request. The maximum number of objects that are returned for this request. If MaxResults isn't specified with the SortBy value, the request returns 1000 results as the default value for this parameter. For GetCostCategories, MaxResults has an upper quota of 1000.
    public var maxResults: Swift.Int
    /// If the number of objects that are still available for retrieval exceeds the quota, Amazon Web Services returns a NextPageToken value in the response. To retrieve the next batch of objects, provide the NextPageToken from the previous call in your next request.
    public var nextPageToken: Swift.String?
    /// The value that you want to search the filter values for. If you don't specify a CostCategoryName, SearchString is used to filter Cost Category names that match the SearchString pattern. If you specify a CostCategoryName, SearchString is used to filter Cost Category values that match the SearchString pattern.
    public var searchString: Swift.String?
    /// The value that you sort the data by. The key represents the cost and usage metrics. The following values are supported:
    ///
    /// * BlendedCost
    ///
    /// * UnblendedCost
    ///
    /// * AmortizedCost
    ///
    /// * NetAmortizedCost
    ///
    /// * NetUnblendedCost
    ///
    /// * UsageQuantity
    ///
    /// * NormalizedUsageAmount
    ///
    ///
    /// The supported key values for the SortOrder value are ASCENDING and DESCENDING. When you use the SortBy value, the NextPageToken and SearchString key values aren't supported.
    public var sortBy: [CostExplorerClientTypes.SortDefinition]?
    /// The time period of the request.
    /// This member is required.
    public var timePeriod: CostExplorerClientTypes.DateInterval?

    public init (
        costCategoryName: Swift.String? = nil,
        filter: CostExplorerClientTypes.Expression? = nil,
        maxResults: Swift.Int = 0,
        nextPageToken: Swift.String? = nil,
        searchString: Swift.String? = nil,
        sortBy: [CostExplorerClientTypes.SortDefinition]? = nil,
        timePeriod: CostExplorerClientTypes.DateInterval? = nil
    )
    {
        self.costCategoryName = costCategoryName
        self.filter = filter
        self.maxResults = maxResults
        self.nextPageToken = nextPageToken
        self.searchString = searchString
        self.sortBy = sortBy
        self.timePeriod = timePeriod
    }
}
