// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetReservationPurchaseRecommendationOutputResponseBody: Swift.Equatable {
    let metadata: CostExplorerClientTypes.ReservationPurchaseRecommendationMetadata?
    let recommendations: [CostExplorerClientTypes.ReservationPurchaseRecommendation]?
    let nextPageToken: Swift.String?
}

extension GetReservationPurchaseRecommendationOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case metadata = "Metadata"
        case nextPageToken = "NextPageToken"
        case recommendations = "Recommendations"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let metadataDecoded = try containerValues.decodeIfPresent(CostExplorerClientTypes.ReservationPurchaseRecommendationMetadata.self, forKey: .metadata)
        metadata = metadataDecoded
        let recommendationsContainer = try containerValues.decodeIfPresent([CostExplorerClientTypes.ReservationPurchaseRecommendation?].self, forKey: .recommendations)
        var recommendationsDecoded0:[CostExplorerClientTypes.ReservationPurchaseRecommendation]? = nil
        if let recommendationsContainer = recommendationsContainer {
            recommendationsDecoded0 = [CostExplorerClientTypes.ReservationPurchaseRecommendation]()
            for structure0 in recommendationsContainer {
                if let structure0 = structure0 {
                    recommendationsDecoded0?.append(structure0)
                }
            }
        }
        recommendations = recommendationsDecoded0
        let nextPageTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextPageToken)
        nextPageToken = nextPageTokenDecoded
    }
}
