// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CostExplorerClientTypes.CostCategoryReference: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case costCategoryArn = "CostCategoryArn"
        case defaultValue = "DefaultValue"
        case effectiveEnd = "EffectiveEnd"
        case effectiveStart = "EffectiveStart"
        case name = "Name"
        case numberOfRules = "NumberOfRules"
        case processingStatus = "ProcessingStatus"
        case values = "Values"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let costCategoryArn = self.costCategoryArn {
            try encodeContainer.encode(costCategoryArn, forKey: .costCategoryArn)
        }
        if let defaultValue = self.defaultValue {
            try encodeContainer.encode(defaultValue, forKey: .defaultValue)
        }
        if let effectiveEnd = self.effectiveEnd {
            try encodeContainer.encode(effectiveEnd, forKey: .effectiveEnd)
        }
        if let effectiveStart = self.effectiveStart {
            try encodeContainer.encode(effectiveStart, forKey: .effectiveStart)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if numberOfRules != 0 {
            try encodeContainer.encode(numberOfRules, forKey: .numberOfRules)
        }
        if let processingStatus = processingStatus {
            var processingStatusContainer = encodeContainer.nestedUnkeyedContainer(forKey: .processingStatus)
            for costcategoryprocessingstatuslist0 in processingStatus {
                try processingStatusContainer.encode(costcategoryprocessingstatuslist0)
            }
        }
        if let values = values {
            var valuesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .values)
            for costcategoryvalueslist0 in values {
                try valuesContainer.encode(costcategoryvalueslist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let costCategoryArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .costCategoryArn)
        costCategoryArn = costCategoryArnDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let effectiveStartDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .effectiveStart)
        effectiveStart = effectiveStartDecoded
        let effectiveEndDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .effectiveEnd)
        effectiveEnd = effectiveEndDecoded
        let numberOfRulesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .numberOfRules) ?? 0
        numberOfRules = numberOfRulesDecoded
        let processingStatusContainer = try containerValues.decodeIfPresent([CostExplorerClientTypes.CostCategoryProcessingStatus?].self, forKey: .processingStatus)
        var processingStatusDecoded0:[CostExplorerClientTypes.CostCategoryProcessingStatus]? = nil
        if let processingStatusContainer = processingStatusContainer {
            processingStatusDecoded0 = [CostExplorerClientTypes.CostCategoryProcessingStatus]()
            for structure0 in processingStatusContainer {
                if let structure0 = structure0 {
                    processingStatusDecoded0?.append(structure0)
                }
            }
        }
        processingStatus = processingStatusDecoded0
        let valuesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .values)
        var valuesDecoded0:[Swift.String]? = nil
        if let valuesContainer = valuesContainer {
            valuesDecoded0 = [Swift.String]()
            for string0 in valuesContainer {
                if let string0 = string0 {
                    valuesDecoded0?.append(string0)
                }
            }
        }
        values = valuesDecoded0
        let defaultValueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .defaultValue)
        defaultValue = defaultValueDecoded
    }
}
