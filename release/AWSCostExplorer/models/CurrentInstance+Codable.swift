// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CostExplorerClientTypes.CurrentInstance: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case currencyCode = "CurrencyCode"
        case instanceName = "InstanceName"
        case monthlyCost = "MonthlyCost"
        case onDemandHoursInLookbackPeriod = "OnDemandHoursInLookbackPeriod"
        case reservationCoveredHoursInLookbackPeriod = "ReservationCoveredHoursInLookbackPeriod"
        case resourceDetails = "ResourceDetails"
        case resourceId = "ResourceId"
        case resourceUtilization = "ResourceUtilization"
        case savingsPlansCoveredHoursInLookbackPeriod = "SavingsPlansCoveredHoursInLookbackPeriod"
        case tags = "Tags"
        case totalRunningHoursInLookbackPeriod = "TotalRunningHoursInLookbackPeriod"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let currencyCode = self.currencyCode {
            try encodeContainer.encode(currencyCode, forKey: .currencyCode)
        }
        if let instanceName = self.instanceName {
            try encodeContainer.encode(instanceName, forKey: .instanceName)
        }
        if let monthlyCost = self.monthlyCost {
            try encodeContainer.encode(monthlyCost, forKey: .monthlyCost)
        }
        if let onDemandHoursInLookbackPeriod = self.onDemandHoursInLookbackPeriod {
            try encodeContainer.encode(onDemandHoursInLookbackPeriod, forKey: .onDemandHoursInLookbackPeriod)
        }
        if let reservationCoveredHoursInLookbackPeriod = self.reservationCoveredHoursInLookbackPeriod {
            try encodeContainer.encode(reservationCoveredHoursInLookbackPeriod, forKey: .reservationCoveredHoursInLookbackPeriod)
        }
        if let resourceDetails = self.resourceDetails {
            try encodeContainer.encode(resourceDetails, forKey: .resourceDetails)
        }
        if let resourceId = self.resourceId {
            try encodeContainer.encode(resourceId, forKey: .resourceId)
        }
        if let resourceUtilization = self.resourceUtilization {
            try encodeContainer.encode(resourceUtilization, forKey: .resourceUtilization)
        }
        if let savingsPlansCoveredHoursInLookbackPeriod = self.savingsPlansCoveredHoursInLookbackPeriod {
            try encodeContainer.encode(savingsPlansCoveredHoursInLookbackPeriod, forKey: .savingsPlansCoveredHoursInLookbackPeriod)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tagvalueslist0 in tags {
                try tagsContainer.encode(tagvalueslist0)
            }
        }
        if let totalRunningHoursInLookbackPeriod = self.totalRunningHoursInLookbackPeriod {
            try encodeContainer.encode(totalRunningHoursInLookbackPeriod, forKey: .totalRunningHoursInLookbackPeriod)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceId)
        resourceId = resourceIdDecoded
        let instanceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceName)
        instanceName = instanceNameDecoded
        let tagsContainer = try containerValues.decodeIfPresent([CostExplorerClientTypes.TagValues?].self, forKey: .tags)
        var tagsDecoded0:[CostExplorerClientTypes.TagValues]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [CostExplorerClientTypes.TagValues]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let resourceDetailsDecoded = try containerValues.decodeIfPresent(CostExplorerClientTypes.ResourceDetails.self, forKey: .resourceDetails)
        resourceDetails = resourceDetailsDecoded
        let resourceUtilizationDecoded = try containerValues.decodeIfPresent(CostExplorerClientTypes.ResourceUtilization.self, forKey: .resourceUtilization)
        resourceUtilization = resourceUtilizationDecoded
        let reservationCoveredHoursInLookbackPeriodDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .reservationCoveredHoursInLookbackPeriod)
        reservationCoveredHoursInLookbackPeriod = reservationCoveredHoursInLookbackPeriodDecoded
        let savingsPlansCoveredHoursInLookbackPeriodDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .savingsPlansCoveredHoursInLookbackPeriod)
        savingsPlansCoveredHoursInLookbackPeriod = savingsPlansCoveredHoursInLookbackPeriodDecoded
        let onDemandHoursInLookbackPeriodDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .onDemandHoursInLookbackPeriod)
        onDemandHoursInLookbackPeriod = onDemandHoursInLookbackPeriodDecoded
        let totalRunningHoursInLookbackPeriodDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .totalRunningHoursInLookbackPeriod)
        totalRunningHoursInLookbackPeriod = totalRunningHoursInLookbackPeriodDecoded
        let monthlyCostDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .monthlyCost)
        monthlyCost = monthlyCostDecoded
        let currencyCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .currencyCode)
        currencyCode = currencyCodeDecoded
    }
}
