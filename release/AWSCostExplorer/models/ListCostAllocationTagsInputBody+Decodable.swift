// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListCostAllocationTagsInputBody: Swift.Equatable {
    let status: CostExplorerClientTypes.CostAllocationTagStatus?
    let tagKeys: [Swift.String]?
    let type: CostExplorerClientTypes.CostAllocationTagType?
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
}

extension ListCostAllocationTagsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case status = "Status"
        case tagKeys = "TagKeys"
        case type = "Type"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statusDecoded = try containerValues.decodeIfPresent(CostExplorerClientTypes.CostAllocationTagStatus.self, forKey: .status)
        status = statusDecoded
        let tagKeysContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .tagKeys)
        var tagKeysDecoded0:[Swift.String]? = nil
        if let tagKeysContainer = tagKeysContainer {
            tagKeysDecoded0 = [Swift.String]()
            for string0 in tagKeysContainer {
                if let string0 = string0 {
                    tagKeysDecoded0?.append(string0)
                }
            }
        }
        tagKeys = tagKeysDecoded0
        let typeDecoded = try containerValues.decodeIfPresent(CostExplorerClientTypes.CostAllocationTagType.self, forKey: .type)
        type = typeDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
    }
}
