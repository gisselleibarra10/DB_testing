// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct GetCostForecastInput: Swift.Equatable {
    /// The filters that you want to use to filter your forecast. The GetCostForecast API supports filtering by the following dimensions:
    ///
    /// * AZ
    ///
    /// * INSTANCE_TYPE
    ///
    /// * LINKED_ACCOUNT
    ///
    /// * LINKED_ACCOUNT_NAME
    ///
    /// * OPERATION
    ///
    /// * PURCHASE_TYPE
    ///
    /// * REGION
    ///
    /// * SERVICE
    ///
    /// * USAGE_TYPE
    ///
    /// * USAGE_TYPE_GROUP
    ///
    /// * RECORD_TYPE
    ///
    /// * OPERATING_SYSTEM
    ///
    /// * TENANCY
    ///
    /// * SCOPE
    ///
    /// * PLATFORM
    ///
    /// * SUBSCRIPTION_ID
    ///
    /// * LEGAL_ENTITY_NAME
    ///
    /// * DEPLOYMENT_OPTION
    ///
    /// * DATABASE_ENGINE
    ///
    /// * INSTANCE_TYPE_FAMILY
    ///
    /// * BILLING_ENTITY
    ///
    /// * RESERVATION_ID
    ///
    /// * SAVINGS_PLAN_ARN
    public var filter: CostExplorerClientTypes.Expression?
    /// How granular you want the forecast to be. You can get 3 months of DAILY forecasts or 12 months of MONTHLY forecasts. The GetCostForecast operation supports only DAILY and MONTHLY granularities.
    /// This member is required.
    public var granularity: CostExplorerClientTypes.Granularity?
    /// Which metric Cost Explorer uses to create your forecast. For more information about blended and unblended rates, see [Why does the "blended" annotation appear on some line items in my bill?](http://aws.amazon.com/premiumsupport/knowledge-center/blended-rates-intro/). Valid values for a GetCostForecast call are the following:
    ///
    /// * AMORTIZED_COST
    ///
    /// * BLENDED_COST
    ///
    /// * NET_AMORTIZED_COST
    ///
    /// * NET_UNBLENDED_COST
    ///
    /// * UNBLENDED_COST
    /// This member is required.
    public var metric: CostExplorerClientTypes.Metric?
    /// Cost Explorer always returns the mean forecast as a single point. You can request a prediction interval around the mean by specifying a confidence level. The higher the confidence level, the more confident Cost Explorer is about the actual value falling in the prediction interval. Higher confidence levels result in wider prediction intervals.
    public var predictionIntervalLevel: Swift.Int?
    /// The period of time that you want the forecast to cover. The start date must be equal to or no later than the current date to avoid a validation error.
    /// This member is required.
    public var timePeriod: CostExplorerClientTypes.DateInterval?

    public init (
        filter: CostExplorerClientTypes.Expression? = nil,
        granularity: CostExplorerClientTypes.Granularity? = nil,
        metric: CostExplorerClientTypes.Metric? = nil,
        predictionIntervalLevel: Swift.Int? = nil,
        timePeriod: CostExplorerClientTypes.DateInterval? = nil
    )
    {
        self.filter = filter
        self.granularity = granularity
        self.metric = metric
        self.predictionIntervalLevel = predictionIntervalLevel
        self.timePeriod = timePeriod
    }
}
