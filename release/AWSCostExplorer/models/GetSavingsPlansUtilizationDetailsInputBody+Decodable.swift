// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetSavingsPlansUtilizationDetailsInputBody: Swift.Equatable {
    let timePeriod: CostExplorerClientTypes.DateInterval?
    let filter: CostExplorerClientTypes.Expression?
    let dataType: [CostExplorerClientTypes.SavingsPlansDataType]?
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
    let sortBy: CostExplorerClientTypes.SortDefinition?
}

extension GetSavingsPlansUtilizationDetailsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dataType = "DataType"
        case filter = "Filter"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case sortBy = "SortBy"
        case timePeriod = "TimePeriod"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let timePeriodDecoded = try containerValues.decodeIfPresent(CostExplorerClientTypes.DateInterval.self, forKey: .timePeriod)
        timePeriod = timePeriodDecoded
        let filterDecoded = try containerValues.decodeIfPresent(CostExplorerClientTypes.Expression.self, forKey: .filter)
        filter = filterDecoded
        let dataTypeContainer = try containerValues.decodeIfPresent([CostExplorerClientTypes.SavingsPlansDataType?].self, forKey: .dataType)
        var dataTypeDecoded0:[CostExplorerClientTypes.SavingsPlansDataType]? = nil
        if let dataTypeContainer = dataTypeContainer {
            dataTypeDecoded0 = [CostExplorerClientTypes.SavingsPlansDataType]()
            for enum0 in dataTypeContainer {
                if let enum0 = enum0 {
                    dataTypeDecoded0?.append(enum0)
                }
            }
        }
        dataType = dataTypeDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let sortByDecoded = try containerValues.decodeIfPresent(CostExplorerClientTypes.SortDefinition.self, forKey: .sortBy)
        sortBy = sortByDecoded
    }
}
