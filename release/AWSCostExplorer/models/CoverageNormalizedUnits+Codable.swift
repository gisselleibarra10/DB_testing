// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CostExplorerClientTypes.CoverageNormalizedUnits: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case coverageNormalizedUnitsPercentage = "CoverageNormalizedUnitsPercentage"
        case onDemandNormalizedUnits = "OnDemandNormalizedUnits"
        case reservedNormalizedUnits = "ReservedNormalizedUnits"
        case totalRunningNormalizedUnits = "TotalRunningNormalizedUnits"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let coverageNormalizedUnitsPercentage = self.coverageNormalizedUnitsPercentage {
            try encodeContainer.encode(coverageNormalizedUnitsPercentage, forKey: .coverageNormalizedUnitsPercentage)
        }
        if let onDemandNormalizedUnits = self.onDemandNormalizedUnits {
            try encodeContainer.encode(onDemandNormalizedUnits, forKey: .onDemandNormalizedUnits)
        }
        if let reservedNormalizedUnits = self.reservedNormalizedUnits {
            try encodeContainer.encode(reservedNormalizedUnits, forKey: .reservedNormalizedUnits)
        }
        if let totalRunningNormalizedUnits = self.totalRunningNormalizedUnits {
            try encodeContainer.encode(totalRunningNormalizedUnits, forKey: .totalRunningNormalizedUnits)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let onDemandNormalizedUnitsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .onDemandNormalizedUnits)
        onDemandNormalizedUnits = onDemandNormalizedUnitsDecoded
        let reservedNormalizedUnitsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .reservedNormalizedUnits)
        reservedNormalizedUnits = reservedNormalizedUnitsDecoded
        let totalRunningNormalizedUnitsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .totalRunningNormalizedUnits)
        totalRunningNormalizedUnits = totalRunningNormalizedUnitsDecoded
        let coverageNormalizedUnitsPercentageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .coverageNormalizedUnitsPercentage)
        coverageNormalizedUnitsPercentage = coverageNormalizedUnitsPercentageDecoded
    }
}
