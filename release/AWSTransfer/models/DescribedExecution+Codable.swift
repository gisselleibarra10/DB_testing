// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension TransferClientTypes.DescribedExecution: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case executionId = "ExecutionId"
        case executionRole = "ExecutionRole"
        case initialFileLocation = "InitialFileLocation"
        case loggingConfiguration = "LoggingConfiguration"
        case posixProfile = "PosixProfile"
        case results = "Results"
        case serviceMetadata = "ServiceMetadata"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let executionId = self.executionId {
            try encodeContainer.encode(executionId, forKey: .executionId)
        }
        if let executionRole = self.executionRole {
            try encodeContainer.encode(executionRole, forKey: .executionRole)
        }
        if let initialFileLocation = self.initialFileLocation {
            try encodeContainer.encode(initialFileLocation, forKey: .initialFileLocation)
        }
        if let loggingConfiguration = self.loggingConfiguration {
            try encodeContainer.encode(loggingConfiguration, forKey: .loggingConfiguration)
        }
        if let posixProfile = self.posixProfile {
            try encodeContainer.encode(posixProfile, forKey: .posixProfile)
        }
        if let results = self.results {
            try encodeContainer.encode(results, forKey: .results)
        }
        if let serviceMetadata = self.serviceMetadata {
            try encodeContainer.encode(serviceMetadata, forKey: .serviceMetadata)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let executionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .executionId)
        executionId = executionIdDecoded
        let initialFileLocationDecoded = try containerValues.decodeIfPresent(TransferClientTypes.FileLocation.self, forKey: .initialFileLocation)
        initialFileLocation = initialFileLocationDecoded
        let serviceMetadataDecoded = try containerValues.decodeIfPresent(TransferClientTypes.ServiceMetadata.self, forKey: .serviceMetadata)
        serviceMetadata = serviceMetadataDecoded
        let executionRoleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .executionRole)
        executionRole = executionRoleDecoded
        let loggingConfigurationDecoded = try containerValues.decodeIfPresent(TransferClientTypes.LoggingConfiguration.self, forKey: .loggingConfiguration)
        loggingConfiguration = loggingConfigurationDecoded
        let posixProfileDecoded = try containerValues.decodeIfPresent(TransferClientTypes.PosixProfile.self, forKey: .posixProfile)
        posixProfile = posixProfileDecoded
        let statusDecoded = try containerValues.decodeIfPresent(TransferClientTypes.ExecutionStatus.self, forKey: .status)
        status = statusDecoded
        let resultsDecoded = try containerValues.decodeIfPresent(TransferClientTypes.ExecutionResults.self, forKey: .results)
        results = resultsDecoded
    }
}
