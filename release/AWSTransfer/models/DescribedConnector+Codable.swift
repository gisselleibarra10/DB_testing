// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension TransferClientTypes.DescribedConnector: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accessRole = "AccessRole"
        case arn = "Arn"
        case as2Config = "As2Config"
        case connectorId = "ConnectorId"
        case loggingRole = "LoggingRole"
        case tags = "Tags"
        case url = "Url"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accessRole = self.accessRole {
            try encodeContainer.encode(accessRole, forKey: .accessRole)
        }
        if let arn = self.arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let as2Config = self.as2Config {
            try encodeContainer.encode(as2Config, forKey: .as2Config)
        }
        if let connectorId = self.connectorId {
            try encodeContainer.encode(connectorId, forKey: .connectorId)
        }
        if let loggingRole = self.loggingRole {
            try encodeContainer.encode(loggingRole, forKey: .loggingRole)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tags0 in tags {
                try tagsContainer.encode(tags0)
            }
        }
        if let url = self.url {
            try encodeContainer.encode(url, forKey: .url)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let connectorIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .connectorId)
        connectorId = connectorIdDecoded
        let urlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .url)
        url = urlDecoded
        let as2ConfigDecoded = try containerValues.decodeIfPresent(TransferClientTypes.As2ConnectorConfig.self, forKey: .as2Config)
        as2Config = as2ConfigDecoded
        let accessRoleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .accessRole)
        accessRole = accessRoleDecoded
        let loggingRoleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .loggingRole)
        loggingRole = loggingRoleDecoded
        let tagsContainer = try containerValues.decodeIfPresent([TransferClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[TransferClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [TransferClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}
