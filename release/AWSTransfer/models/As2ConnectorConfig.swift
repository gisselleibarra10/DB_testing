// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension TransferClientTypes {
    /// Contains the details for a connector object. The connector object is used for AS2 outbound processes, to connect the Transfer Family customer with the trading partner.
    public struct As2ConnectorConfig: Swift.Equatable {
        /// Specifies whether the AS2 file is compressed.
        public var compression: TransferClientTypes.CompressionEnum?
        /// The algorithm that is used to encrypt the file.
        public var encryptionAlgorithm: TransferClientTypes.EncryptionAlg?
        /// A unique identifier for the AS2 local profile.
        public var localProfileId: Swift.String?
        /// Used for outbound requests (from an Transfer Family server to a partner AS2 server) to determine whether the partner response for transfers is synchronous or asynchronous. Specify either of the following values:
        ///
        /// * SYNC: The system expects a synchronous MDN response, confirming that the file was transferred successfully (or not).
        ///
        /// * NONE: Specifies that no MDN response is required.
        public var mdnResponse: TransferClientTypes.MdnResponse?
        /// The signing algorithm for the MDN response. If set to DEFAULT (or not set at all), the value for SigningAlogorithm is used.
        public var mdnSigningAlgorithm: TransferClientTypes.MdnSigningAlg?
        /// Used as the Subject HTTP header attribute in AS2 messages that are being sent with the connector.
        public var messageSubject: Swift.String?
        /// A unique identifier for the partner profile for the connector.
        public var partnerProfileId: Swift.String?
        /// The algorithm that is used to sign the AS2 messages sent with the connector.
        public var signingAlgorithm: TransferClientTypes.SigningAlg?

        public init (
            compression: TransferClientTypes.CompressionEnum? = nil,
            encryptionAlgorithm: TransferClientTypes.EncryptionAlg? = nil,
            localProfileId: Swift.String? = nil,
            mdnResponse: TransferClientTypes.MdnResponse? = nil,
            mdnSigningAlgorithm: TransferClientTypes.MdnSigningAlg? = nil,
            messageSubject: Swift.String? = nil,
            partnerProfileId: Swift.String? = nil,
            signingAlgorithm: TransferClientTypes.SigningAlg? = nil
        )
        {
            self.compression = compression
            self.encryptionAlgorithm = encryptionAlgorithm
            self.localProfileId = localProfileId
            self.mdnResponse = mdnResponse
            self.mdnSigningAlgorithm = mdnSigningAlgorithm
            self.messageSubject = messageSubject
            self.partnerProfileId = partnerProfileId
            self.signingAlgorithm = signingAlgorithm
        }
    }

}
