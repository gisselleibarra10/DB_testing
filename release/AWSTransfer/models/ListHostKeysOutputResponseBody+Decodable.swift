// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListHostKeysOutputResponseBody: Swift.Equatable {
    let nextToken: Swift.String?
    let serverId: Swift.String?
    let hostKeys: [TransferClientTypes.ListedHostKey]?
}

extension ListHostKeysOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case hostKeys = "HostKeys"
        case nextToken = "NextToken"
        case serverId = "ServerId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let serverIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serverId)
        serverId = serverIdDecoded
        let hostKeysContainer = try containerValues.decodeIfPresent([TransferClientTypes.ListedHostKey?].self, forKey: .hostKeys)
        var hostKeysDecoded0:[TransferClientTypes.ListedHostKey]? = nil
        if let hostKeysContainer = hostKeysContainer {
            hostKeysDecoded0 = [TransferClientTypes.ListedHostKey]()
            for structure0 in hostKeysContainer {
                if let structure0 = structure0 {
                    hostKeysDecoded0?.append(structure0)
                }
            }
        }
        hostKeys = hostKeysDecoded0
    }
}
