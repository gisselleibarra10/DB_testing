// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension TransferClientTypes {
    /// Describes the properties of an agreement.
    public struct DescribedAgreement: Swift.Equatable {
        /// With AS2, you can send files by calling StartFileTransfer and specifying the file paths in the request parameter, SendFilePaths. We use the fileâ€™s parent directory (for example, for --send-file-paths /bucket/dir/file.txt, parent directory is /bucket/dir/) to temporarily store a processed AS2 message file, store the MDN when we receive them from the partner, and write a final JSON file containing relevant metadata of the transmission. So, the AccessRole needs to provide read and write access to the parent directory of the file location used in the StartFileTransfer request. Additionally, you need to provide read and write access to the parent directory of the files that you intend to send with StartFileTransfer.
        public var accessRole: Swift.String?
        /// A unique identifier for the agreement. This identifier is returned when you create an agreement.
        public var agreementId: Swift.String?
        /// The unique Amazon Resource Name (ARN) for the agreement.
        /// This member is required.
        public var arn: Swift.String?
        /// The landing directory (folder) for files that are transferred by using the AS2 protocol.
        public var baseDirectory: Swift.String?
        /// The name or short description that's used to identify the agreement.
        public var description: Swift.String?
        /// A unique identifier for the AS2 local profile.
        public var localProfileId: Swift.String?
        /// A unique identifier for the partner profile used in the agreement.
        public var partnerProfileId: Swift.String?
        /// A system-assigned unique identifier for a server instance. This identifier indicates the specific server that the agreement uses.
        public var serverId: Swift.String?
        /// The current status of the agreement, either ACTIVE or INACTIVE.
        public var status: TransferClientTypes.AgreementStatusType?
        /// Key-value pairs that can be used to group and search for agreements.
        public var tags: [TransferClientTypes.Tag]?

        public init (
            accessRole: Swift.String? = nil,
            agreementId: Swift.String? = nil,
            arn: Swift.String? = nil,
            baseDirectory: Swift.String? = nil,
            description: Swift.String? = nil,
            localProfileId: Swift.String? = nil,
            partnerProfileId: Swift.String? = nil,
            serverId: Swift.String? = nil,
            status: TransferClientTypes.AgreementStatusType? = nil,
            tags: [TransferClientTypes.Tag]? = nil
        )
        {
            self.accessRole = accessRole
            self.agreementId = agreementId
            self.arn = arn
            self.baseDirectory = baseDirectory
            self.description = description
            self.localProfileId = localProfileId
            self.partnerProfileId = partnerProfileId
            self.serverId = serverId
            self.status = status
            self.tags = tags
        }
    }

}
