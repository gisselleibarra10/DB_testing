// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateProfileInputBody: Swift.Equatable {
    let as2Id: Swift.String?
    let profileType: TransferClientTypes.ProfileType?
    let certificateIds: [Swift.String]?
    let tags: [TransferClientTypes.Tag]?
}

extension CreateProfileInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case as2Id = "As2Id"
        case certificateIds = "CertificateIds"
        case profileType = "ProfileType"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let as2IdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .as2Id)
        as2Id = as2IdDecoded
        let profileTypeDecoded = try containerValues.decodeIfPresent(TransferClientTypes.ProfileType.self, forKey: .profileType)
        profileType = profileTypeDecoded
        let certificateIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .certificateIds)
        var certificateIdsDecoded0:[Swift.String]? = nil
        if let certificateIdsContainer = certificateIdsContainer {
            certificateIdsDecoded0 = [Swift.String]()
            for string0 in certificateIdsContainer {
                if let string0 = string0 {
                    certificateIdsDecoded0?.append(string0)
                }
            }
        }
        certificateIds = certificateIdsDecoded0
        let tagsContainer = try containerValues.decodeIfPresent([TransferClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[TransferClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [TransferClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}
