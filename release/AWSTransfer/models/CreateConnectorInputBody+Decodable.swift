// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateConnectorInputBody: Swift.Equatable {
    let url: Swift.String?
    let as2Config: TransferClientTypes.As2ConnectorConfig?
    let accessRole: Swift.String?
    let loggingRole: Swift.String?
    let tags: [TransferClientTypes.Tag]?
}

extension CreateConnectorInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accessRole = "AccessRole"
        case as2Config = "As2Config"
        case loggingRole = "LoggingRole"
        case tags = "Tags"
        case url = "Url"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let urlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .url)
        url = urlDecoded
        let as2ConfigDecoded = try containerValues.decodeIfPresent(TransferClientTypes.As2ConnectorConfig.self, forKey: .as2Config)
        as2Config = as2ConfigDecoded
        let accessRoleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .accessRole)
        accessRole = accessRoleDecoded
        let loggingRoleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .loggingRole)
        loggingRole = loggingRoleDecoded
        let tagsContainer = try containerValues.decodeIfPresent([TransferClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[TransferClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [TransferClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}
