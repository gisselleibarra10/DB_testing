// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension TransferClientTypes.DescribedProfile: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "Arn"
        case as2Id = "As2Id"
        case certificateIds = "CertificateIds"
        case profileId = "ProfileId"
        case profileType = "ProfileType"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = self.arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let as2Id = self.as2Id {
            try encodeContainer.encode(as2Id, forKey: .as2Id)
        }
        if let certificateIds = certificateIds {
            var certificateIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .certificateIds)
            for certificateids0 in certificateIds {
                try certificateIdsContainer.encode(certificateids0)
            }
        }
        if let profileId = self.profileId {
            try encodeContainer.encode(profileId, forKey: .profileId)
        }
        if let profileType = self.profileType {
            try encodeContainer.encode(profileType.rawValue, forKey: .profileType)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tags0 in tags {
                try tagsContainer.encode(tags0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let profileIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .profileId)
        profileId = profileIdDecoded
        let profileTypeDecoded = try containerValues.decodeIfPresent(TransferClientTypes.ProfileType.self, forKey: .profileType)
        profileType = profileTypeDecoded
        let as2IdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .as2Id)
        as2Id = as2IdDecoded
        let certificateIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .certificateIds)
        var certificateIdsDecoded0:[Swift.String]? = nil
        if let certificateIdsContainer = certificateIdsContainer {
            certificateIdsDecoded0 = [Swift.String]()
            for string0 in certificateIdsContainer {
                if let string0 = string0 {
                    certificateIdsDecoded0?.append(string0)
                }
            }
        }
        certificateIds = certificateIdsDecoded0
        let tagsContainer = try containerValues.decodeIfPresent([TransferClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[TransferClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [TransferClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}
