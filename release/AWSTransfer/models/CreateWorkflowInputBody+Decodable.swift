// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateWorkflowInputBody: Swift.Equatable {
    let description: Swift.String?
    let steps: [TransferClientTypes.WorkflowStep]?
    let onExceptionSteps: [TransferClientTypes.WorkflowStep]?
    let tags: [TransferClientTypes.Tag]?
}

extension CreateWorkflowInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description = "Description"
        case onExceptionSteps = "OnExceptionSteps"
        case steps = "Steps"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let stepsContainer = try containerValues.decodeIfPresent([TransferClientTypes.WorkflowStep?].self, forKey: .steps)
        var stepsDecoded0:[TransferClientTypes.WorkflowStep]? = nil
        if let stepsContainer = stepsContainer {
            stepsDecoded0 = [TransferClientTypes.WorkflowStep]()
            for structure0 in stepsContainer {
                if let structure0 = structure0 {
                    stepsDecoded0?.append(structure0)
                }
            }
        }
        steps = stepsDecoded0
        let onExceptionStepsContainer = try containerValues.decodeIfPresent([TransferClientTypes.WorkflowStep?].self, forKey: .onExceptionSteps)
        var onExceptionStepsDecoded0:[TransferClientTypes.WorkflowStep]? = nil
        if let onExceptionStepsContainer = onExceptionStepsContainer {
            onExceptionStepsDecoded0 = [TransferClientTypes.WorkflowStep]()
            for structure0 in onExceptionStepsContainer {
                if let structure0 = structure0 {
                    onExceptionStepsDecoded0?.append(structure0)
                }
            }
        }
        onExceptionSteps = onExceptionStepsDecoded0
        let tagsContainer = try containerValues.decodeIfPresent([TransferClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[TransferClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [TransferClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}
