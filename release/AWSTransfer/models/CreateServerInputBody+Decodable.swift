// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateServerInputBody: Swift.Equatable {
    let certificate: Swift.String?
    let domain: TransferClientTypes.Domain?
    let endpointDetails: TransferClientTypes.EndpointDetails?
    let endpointType: TransferClientTypes.EndpointType?
    let hostKey: Swift.String?
    let identityProviderDetails: TransferClientTypes.IdentityProviderDetails?
    let identityProviderType: TransferClientTypes.IdentityProviderType?
    let loggingRole: Swift.String?
    let postAuthenticationLoginBanner: Swift.String?
    let preAuthenticationLoginBanner: Swift.String?
    let protocols: [TransferClientTypes.ModelProtocol]?
    let protocolDetails: TransferClientTypes.ProtocolDetails?
    let securityPolicyName: Swift.String?
    let tags: [TransferClientTypes.Tag]?
    let workflowDetails: TransferClientTypes.WorkflowDetails?
}

extension CreateServerInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case certificate = "Certificate"
        case domain = "Domain"
        case endpointDetails = "EndpointDetails"
        case endpointType = "EndpointType"
        case hostKey = "HostKey"
        case identityProviderDetails = "IdentityProviderDetails"
        case identityProviderType = "IdentityProviderType"
        case loggingRole = "LoggingRole"
        case postAuthenticationLoginBanner = "PostAuthenticationLoginBanner"
        case preAuthenticationLoginBanner = "PreAuthenticationLoginBanner"
        case protocolDetails = "ProtocolDetails"
        case protocols = "Protocols"
        case securityPolicyName = "SecurityPolicyName"
        case tags = "Tags"
        case workflowDetails = "WorkflowDetails"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let certificateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .certificate)
        certificate = certificateDecoded
        let domainDecoded = try containerValues.decodeIfPresent(TransferClientTypes.Domain.self, forKey: .domain)
        domain = domainDecoded
        let endpointDetailsDecoded = try containerValues.decodeIfPresent(TransferClientTypes.EndpointDetails.self, forKey: .endpointDetails)
        endpointDetails = endpointDetailsDecoded
        let endpointTypeDecoded = try containerValues.decodeIfPresent(TransferClientTypes.EndpointType.self, forKey: .endpointType)
        endpointType = endpointTypeDecoded
        let hostKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .hostKey)
        hostKey = hostKeyDecoded
        let identityProviderDetailsDecoded = try containerValues.decodeIfPresent(TransferClientTypes.IdentityProviderDetails.self, forKey: .identityProviderDetails)
        identityProviderDetails = identityProviderDetailsDecoded
        let identityProviderTypeDecoded = try containerValues.decodeIfPresent(TransferClientTypes.IdentityProviderType.self, forKey: .identityProviderType)
        identityProviderType = identityProviderTypeDecoded
        let loggingRoleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .loggingRole)
        loggingRole = loggingRoleDecoded
        let postAuthenticationLoginBannerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .postAuthenticationLoginBanner)
        postAuthenticationLoginBanner = postAuthenticationLoginBannerDecoded
        let preAuthenticationLoginBannerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .preAuthenticationLoginBanner)
        preAuthenticationLoginBanner = preAuthenticationLoginBannerDecoded
        let protocolsContainer = try containerValues.decodeIfPresent([TransferClientTypes.ModelProtocol?].self, forKey: .protocols)
        var protocolsDecoded0:[TransferClientTypes.ModelProtocol]? = nil
        if let protocolsContainer = protocolsContainer {
            protocolsDecoded0 = [TransferClientTypes.ModelProtocol]()
            for string0 in protocolsContainer {
                if let string0 = string0 {
                    protocolsDecoded0?.append(string0)
                }
            }
        }
        protocols = protocolsDecoded0
        let protocolDetailsDecoded = try containerValues.decodeIfPresent(TransferClientTypes.ProtocolDetails.self, forKey: .protocolDetails)
        protocolDetails = protocolDetailsDecoded
        let securityPolicyNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .securityPolicyName)
        securityPolicyName = securityPolicyNameDecoded
        let tagsContainer = try containerValues.decodeIfPresent([TransferClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[TransferClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [TransferClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let workflowDetailsDecoded = try containerValues.decodeIfPresent(TransferClientTypes.WorkflowDetails.self, forKey: .workflowDetails)
        workflowDetails = workflowDetailsDecoded
    }
}
