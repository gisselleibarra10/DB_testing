// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ImportCertificateInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case activeDate = "ActiveDate"
        case certificate = "Certificate"
        case certificateChain = "CertificateChain"
        case description = "Description"
        case inactiveDate = "InactiveDate"
        case privateKey = "PrivateKey"
        case tags = "Tags"
        case usage = "Usage"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let activeDate = self.activeDate {
            try encodeContainer.encode(activeDate.timeIntervalSince1970, forKey: .activeDate)
        }
        if let certificate = self.certificate {
            try encodeContainer.encode(certificate, forKey: .certificate)
        }
        if let certificateChain = self.certificateChain {
            try encodeContainer.encode(certificateChain, forKey: .certificateChain)
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let inactiveDate = self.inactiveDate {
            try encodeContainer.encode(inactiveDate.timeIntervalSince1970, forKey: .inactiveDate)
        }
        if let privateKey = self.privateKey {
            try encodeContainer.encode(privateKey, forKey: .privateKey)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tags0 in tags {
                try tagsContainer.encode(tags0)
            }
        }
        if let usage = self.usage {
            try encodeContainer.encode(usage.rawValue, forKey: .usage)
        }
    }
}
