// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct TestIdentityProviderInputBody: Swift.Equatable {
    let serverId: Swift.String?
    let serverProtocol: TransferClientTypes.ModelProtocol?
    let sourceIp: Swift.String?
    let userName: Swift.String?
    let userPassword: Swift.String?
}

extension TestIdentityProviderInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case serverId = "ServerId"
        case serverProtocol = "ServerProtocol"
        case sourceIp = "SourceIp"
        case userName = "UserName"
        case userPassword = "UserPassword"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let serverIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serverId)
        serverId = serverIdDecoded
        let serverProtocolDecoded = try containerValues.decodeIfPresent(TransferClientTypes.ModelProtocol.self, forKey: .serverProtocol)
        serverProtocol = serverProtocolDecoded
        let sourceIpDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceIp)
        sourceIp = sourceIpDecoded
        let userNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userName)
        userName = userNameDecoded
        let userPasswordDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userPassword)
        userPassword = userPasswordDecoded
    }
}
