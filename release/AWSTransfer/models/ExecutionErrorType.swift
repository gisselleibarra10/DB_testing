// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension TransferClientTypes {
    public enum ExecutionErrorType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case alreadyExists
        case badRequest
        case customStepFailed
        case internalServerError
        case notFound
        case permissionDenied
        case throttled
        case timeout
        case sdkUnknown(Swift.String)

        public static var allCases: [ExecutionErrorType] {
            return [
                .alreadyExists,
                .badRequest,
                .customStepFailed,
                .internalServerError,
                .notFound,
                .permissionDenied,
                .throttled,
                .timeout,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .alreadyExists: return "ALREADY_EXISTS"
            case .badRequest: return "BAD_REQUEST"
            case .customStepFailed: return "CUSTOM_STEP_FAILED"
            case .internalServerError: return "INTERNAL_SERVER_ERROR"
            case .notFound: return "NOT_FOUND"
            case .permissionDenied: return "PERMISSION_DENIED"
            case .throttled: return "THROTTLED"
            case .timeout: return "TIMEOUT"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ExecutionErrorType(rawValue: rawValue) ?? ExecutionErrorType.sdkUnknown(rawValue)
        }
    }
}
