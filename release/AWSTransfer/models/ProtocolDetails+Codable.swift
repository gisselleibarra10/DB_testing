// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension TransferClientTypes.ProtocolDetails: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case as2Transports = "As2Transports"
        case passiveIp = "PassiveIp"
        case setStatOption = "SetStatOption"
        case tlsSessionResumptionMode = "TlsSessionResumptionMode"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let as2Transports = as2Transports {
            var as2TransportsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .as2Transports)
            for as2transports0 in as2Transports {
                try as2TransportsContainer.encode(as2transports0.rawValue)
            }
        }
        if let passiveIp = self.passiveIp {
            try encodeContainer.encode(passiveIp, forKey: .passiveIp)
        }
        if let setStatOption = self.setStatOption {
            try encodeContainer.encode(setStatOption.rawValue, forKey: .setStatOption)
        }
        if let tlsSessionResumptionMode = self.tlsSessionResumptionMode {
            try encodeContainer.encode(tlsSessionResumptionMode.rawValue, forKey: .tlsSessionResumptionMode)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let passiveIpDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .passiveIp)
        passiveIp = passiveIpDecoded
        let tlsSessionResumptionModeDecoded = try containerValues.decodeIfPresent(TransferClientTypes.TlsSessionResumptionMode.self, forKey: .tlsSessionResumptionMode)
        tlsSessionResumptionMode = tlsSessionResumptionModeDecoded
        let setStatOptionDecoded = try containerValues.decodeIfPresent(TransferClientTypes.SetStatOption.self, forKey: .setStatOption)
        setStatOption = setStatOptionDecoded
        let as2TransportsContainer = try containerValues.decodeIfPresent([TransferClientTypes.As2Transport?].self, forKey: .as2Transports)
        var as2TransportsDecoded0:[TransferClientTypes.As2Transport]? = nil
        if let as2TransportsContainer = as2TransportsContainer {
            as2TransportsDecoded0 = [TransferClientTypes.As2Transport]()
            for string0 in as2TransportsContainer {
                if let string0 = string0 {
                    as2TransportsDecoded0?.append(string0)
                }
            }
        }
        as2Transports = as2TransportsDecoded0
    }
}
