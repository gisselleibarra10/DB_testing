// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension TransferClientTypes.ListedCertificate: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case activeDate = "ActiveDate"
        case arn = "Arn"
        case certificateId = "CertificateId"
        case description = "Description"
        case inactiveDate = "InactiveDate"
        case status = "Status"
        case type = "Type"
        case usage = "Usage"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let activeDate = self.activeDate {
            try encodeContainer.encode(activeDate.timeIntervalSince1970, forKey: .activeDate)
        }
        if let arn = self.arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let certificateId = self.certificateId {
            try encodeContainer.encode(certificateId, forKey: .certificateId)
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let inactiveDate = self.inactiveDate {
            try encodeContainer.encode(inactiveDate.timeIntervalSince1970, forKey: .inactiveDate)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let type = self.type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
        if let usage = self.usage {
            try encodeContainer.encode(usage.rawValue, forKey: .usage)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let certificateIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .certificateId)
        certificateId = certificateIdDecoded
        let usageDecoded = try containerValues.decodeIfPresent(TransferClientTypes.CertificateUsageType.self, forKey: .usage)
        usage = usageDecoded
        let statusDecoded = try containerValues.decodeIfPresent(TransferClientTypes.CertificateStatusType.self, forKey: .status)
        status = statusDecoded
        let activeDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .activeDate)
        activeDate = activeDateDecoded
        let inactiveDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .inactiveDate)
        inactiveDate = inactiveDateDecoded
        let typeDecoded = try containerValues.decodeIfPresent(TransferClientTypes.CertificateType.self, forKey: .type)
        type = typeDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
    }
}
