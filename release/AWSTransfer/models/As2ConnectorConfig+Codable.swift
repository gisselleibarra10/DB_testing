// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension TransferClientTypes.As2ConnectorConfig: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case compression = "Compression"
        case encryptionAlgorithm = "EncryptionAlgorithm"
        case localProfileId = "LocalProfileId"
        case mdnResponse = "MdnResponse"
        case mdnSigningAlgorithm = "MdnSigningAlgorithm"
        case messageSubject = "MessageSubject"
        case partnerProfileId = "PartnerProfileId"
        case signingAlgorithm = "SigningAlgorithm"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let compression = self.compression {
            try encodeContainer.encode(compression.rawValue, forKey: .compression)
        }
        if let encryptionAlgorithm = self.encryptionAlgorithm {
            try encodeContainer.encode(encryptionAlgorithm.rawValue, forKey: .encryptionAlgorithm)
        }
        if let localProfileId = self.localProfileId {
            try encodeContainer.encode(localProfileId, forKey: .localProfileId)
        }
        if let mdnResponse = self.mdnResponse {
            try encodeContainer.encode(mdnResponse.rawValue, forKey: .mdnResponse)
        }
        if let mdnSigningAlgorithm = self.mdnSigningAlgorithm {
            try encodeContainer.encode(mdnSigningAlgorithm.rawValue, forKey: .mdnSigningAlgorithm)
        }
        if let messageSubject = self.messageSubject {
            try encodeContainer.encode(messageSubject, forKey: .messageSubject)
        }
        if let partnerProfileId = self.partnerProfileId {
            try encodeContainer.encode(partnerProfileId, forKey: .partnerProfileId)
        }
        if let signingAlgorithm = self.signingAlgorithm {
            try encodeContainer.encode(signingAlgorithm.rawValue, forKey: .signingAlgorithm)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let localProfileIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .localProfileId)
        localProfileId = localProfileIdDecoded
        let partnerProfileIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .partnerProfileId)
        partnerProfileId = partnerProfileIdDecoded
        let messageSubjectDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .messageSubject)
        messageSubject = messageSubjectDecoded
        let compressionDecoded = try containerValues.decodeIfPresent(TransferClientTypes.CompressionEnum.self, forKey: .compression)
        compression = compressionDecoded
        let encryptionAlgorithmDecoded = try containerValues.decodeIfPresent(TransferClientTypes.EncryptionAlg.self, forKey: .encryptionAlgorithm)
        encryptionAlgorithm = encryptionAlgorithmDecoded
        let signingAlgorithmDecoded = try containerValues.decodeIfPresent(TransferClientTypes.SigningAlg.self, forKey: .signingAlgorithm)
        signingAlgorithm = signingAlgorithmDecoded
        let mdnSigningAlgorithmDecoded = try containerValues.decodeIfPresent(TransferClientTypes.MdnSigningAlg.self, forKey: .mdnSigningAlgorithm)
        mdnSigningAlgorithm = mdnSigningAlgorithmDecoded
        let mdnResponseDecoded = try containerValues.decodeIfPresent(TransferClientTypes.MdnResponse.self, forKey: .mdnResponse)
        mdnResponse = mdnResponseDecoded
    }
}
