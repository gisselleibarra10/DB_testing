// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListExecutionsOutputResponseBody: Swift.Equatable {
    let nextToken: Swift.String?
    let workflowId: Swift.String?
    let executions: [TransferClientTypes.ListedExecution]?
}

extension ListExecutionsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case executions = "Executions"
        case nextToken = "NextToken"
        case workflowId = "WorkflowId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let workflowIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .workflowId)
        workflowId = workflowIdDecoded
        let executionsContainer = try containerValues.decodeIfPresent([TransferClientTypes.ListedExecution?].self, forKey: .executions)
        var executionsDecoded0:[TransferClientTypes.ListedExecution]? = nil
        if let executionsContainer = executionsContainer {
            executionsDecoded0 = [TransferClientTypes.ListedExecution]()
            for structure0 in executionsContainer {
                if let structure0 = structure0 {
                    executionsDecoded0?.append(structure0)
                }
            }
        }
        executions = executionsDecoded0
    }
}
