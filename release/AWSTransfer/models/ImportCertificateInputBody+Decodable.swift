// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ImportCertificateInputBody: Swift.Equatable {
    let usage: TransferClientTypes.CertificateUsageType?
    let certificate: Swift.String?
    let certificateChain: Swift.String?
    let privateKey: Swift.String?
    let activeDate: ClientRuntime.Date?
    let inactiveDate: ClientRuntime.Date?
    let description: Swift.String?
    let tags: [TransferClientTypes.Tag]?
}

extension ImportCertificateInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case activeDate = "ActiveDate"
        case certificate = "Certificate"
        case certificateChain = "CertificateChain"
        case description = "Description"
        case inactiveDate = "InactiveDate"
        case privateKey = "PrivateKey"
        case tags = "Tags"
        case usage = "Usage"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let usageDecoded = try containerValues.decodeIfPresent(TransferClientTypes.CertificateUsageType.self, forKey: .usage)
        usage = usageDecoded
        let certificateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .certificate)
        certificate = certificateDecoded
        let certificateChainDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .certificateChain)
        certificateChain = certificateChainDecoded
        let privateKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .privateKey)
        privateKey = privateKeyDecoded
        let activeDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .activeDate)
        activeDate = activeDateDecoded
        let inactiveDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .inactiveDate)
        inactiveDate = inactiveDateDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let tagsContainer = try containerValues.decodeIfPresent([TransferClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[TransferClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [TransferClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}
