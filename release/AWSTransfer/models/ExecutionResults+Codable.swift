// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension TransferClientTypes.ExecutionResults: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case onExceptionSteps = "OnExceptionSteps"
        case steps = "Steps"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let onExceptionSteps = onExceptionSteps {
            var onExceptionStepsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .onExceptionSteps)
            for executionstepresults0 in onExceptionSteps {
                try onExceptionStepsContainer.encode(executionstepresults0)
            }
        }
        if let steps = steps {
            var stepsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .steps)
            for executionstepresults0 in steps {
                try stepsContainer.encode(executionstepresults0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let stepsContainer = try containerValues.decodeIfPresent([TransferClientTypes.ExecutionStepResult?].self, forKey: .steps)
        var stepsDecoded0:[TransferClientTypes.ExecutionStepResult]? = nil
        if let stepsContainer = stepsContainer {
            stepsDecoded0 = [TransferClientTypes.ExecutionStepResult]()
            for structure0 in stepsContainer {
                if let structure0 = structure0 {
                    stepsDecoded0?.append(structure0)
                }
            }
        }
        steps = stepsDecoded0
        let onExceptionStepsContainer = try containerValues.decodeIfPresent([TransferClientTypes.ExecutionStepResult?].self, forKey: .onExceptionSteps)
        var onExceptionStepsDecoded0:[TransferClientTypes.ExecutionStepResult]? = nil
        if let onExceptionStepsContainer = onExceptionStepsContainer {
            onExceptionStepsDecoded0 = [TransferClientTypes.ExecutionStepResult]()
            for structure0 in onExceptionStepsContainer {
                if let structure0 = structure0 {
                    onExceptionStepsDecoded0?.append(structure0)
                }
            }
        }
        onExceptionSteps = onExceptionStepsDecoded0
    }
}
