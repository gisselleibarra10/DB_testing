// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension TransferClientTypes {
    /// Describes the parameters for the connector, as identified by the ConnectorId.
    public struct DescribedConnector: Swift.Equatable {
        /// With AS2, you can send files by calling StartFileTransfer and specifying the file paths in the request parameter, SendFilePaths. We use the fileâ€™s parent directory (for example, for --send-file-paths /bucket/dir/file.txt, parent directory is /bucket/dir/) to temporarily store a processed AS2 message file, store the MDN when we receive them from the partner, and write a final JSON file containing relevant metadata of the transmission. So, the AccessRole needs to provide read and write access to the parent directory of the file location used in the StartFileTransfer request. Additionally, you need to provide read and write access to the parent directory of the files that you intend to send with StartFileTransfer.
        public var accessRole: Swift.String?
        /// The unique Amazon Resource Name (ARN) for the connector.
        /// This member is required.
        public var arn: Swift.String?
        /// A structure that contains the parameters for a connector object.
        public var as2Config: TransferClientTypes.As2ConnectorConfig?
        /// The unique identifier for the connector.
        public var connectorId: Swift.String?
        /// The Amazon Resource Name (ARN) of the Identity and Access Management (IAM) role that allows a connector to turn on CloudWatch logging for Amazon S3 events. When set, you can view connector activity in your CloudWatch logs.
        public var loggingRole: Swift.String?
        /// Key-value pairs that can be used to group and search for connectors.
        public var tags: [TransferClientTypes.Tag]?
        /// The URL of the partner's AS2 endpoint.
        public var url: Swift.String?

        public init (
            accessRole: Swift.String? = nil,
            arn: Swift.String? = nil,
            as2Config: TransferClientTypes.As2ConnectorConfig? = nil,
            connectorId: Swift.String? = nil,
            loggingRole: Swift.String? = nil,
            tags: [TransferClientTypes.Tag]? = nil,
            url: Swift.String? = nil
        )
        {
            self.accessRole = accessRole
            self.arn = arn
            self.as2Config = as2Config
            self.connectorId = connectorId
            self.loggingRole = loggingRole
            self.tags = tags
            self.url = url
        }
    }

}
