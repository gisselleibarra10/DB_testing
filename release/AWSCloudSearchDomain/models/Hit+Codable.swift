// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CloudSearchDomainClientTypes.Hit: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case exprs
        case fields
        case highlights
        case id
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let exprs = exprs {
            var exprsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .exprs)
            for (dictKey0, exprs0) in exprs {
                try exprsContainer.encode(exprs0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let fields = fields {
            var fieldsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .fields)
            for (dictKey0, fields0) in fields {
                try fieldsContainer.encode(fields0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let highlights = highlights {
            var highlightsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .highlights)
            for (dictKey0, highlights0) in highlights {
                try highlightsContainer.encode(highlights0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let fieldsContainer = try containerValues.decodeIfPresent([Swift.String: [Swift.String?]?].self, forKey: .fields)
        var fieldsDecoded0: [Swift.String:[Swift.String]]? = nil
        if let fieldsContainer = fieldsContainer {
            fieldsDecoded0 = [Swift.String:[Swift.String]]()
            for (key0, fieldvalue0) in fieldsContainer {
                var fieldvalue0Decoded0: [Swift.String]? = nil
                if let fieldvalue0 = fieldvalue0 {
                    fieldvalue0Decoded0 = [Swift.String]()
                    for string1 in fieldvalue0 {
                        if let string1 = string1 {
                            fieldvalue0Decoded0?.append(string1)
                        }
                    }
                }
                fieldsDecoded0?[key0] = fieldvalue0Decoded0
            }
        }
        fields = fieldsDecoded0
        let exprsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .exprs)
        var exprsDecoded0: [Swift.String:Swift.String]? = nil
        if let exprsContainer = exprsContainer {
            exprsDecoded0 = [Swift.String:Swift.String]()
            for (key0, string0) in exprsContainer {
                if let string0 = string0 {
                    exprsDecoded0?[key0] = string0
                }
            }
        }
        exprs = exprsDecoded0
        let highlightsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .highlights)
        var highlightsDecoded0: [Swift.String:Swift.String]? = nil
        if let highlightsContainer = highlightsContainer {
            highlightsDecoded0 = [Swift.String:Swift.String]()
            for (key0, string0) in highlightsContainer {
                if let string0 = string0 {
                    highlightsDecoded0?[key0] = string0
                }
            }
        }
        highlights = highlightsDecoded0
    }
}
