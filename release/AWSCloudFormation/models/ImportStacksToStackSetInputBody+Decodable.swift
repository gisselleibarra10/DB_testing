// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ImportStacksToStackSetInputBody: Swift.Equatable {
    let stackSetName: Swift.String?
    let stackIds: [Swift.String]?
    let stackIdsUrl: Swift.String?
    let organizationalUnitIds: [Swift.String]?
    let operationPreferences: CloudFormationClientTypes.StackSetOperationPreferences?
    let operationId: Swift.String?
    let callAs: CloudFormationClientTypes.CallAs?
}

extension ImportStacksToStackSetInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case callAs = "CallAs"
        case operationId = "OperationId"
        case operationPreferences = "OperationPreferences"
        case organizationalUnitIds = "OrganizationalUnitIds"
        case stackIds = "StackIds"
        case stackIdsUrl = "StackIdsUrl"
        case stackSetName = "StackSetName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let stackSetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stackSetName)
        stackSetName = stackSetNameDecoded
        if containerValues.contains(.stackIds) {
            struct KeyVal0{struct member{}}
            let stackIdsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .stackIds)
            if let stackIdsWrappedContainer = stackIdsWrappedContainer {
                let stackIdsContainer = try stackIdsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var stackIdsBuffer:[Swift.String]? = nil
                if let stackIdsContainer = stackIdsContainer {
                    stackIdsBuffer = [Swift.String]()
                    for stringContainer0 in stackIdsContainer {
                        stackIdsBuffer?.append(stringContainer0)
                    }
                }
                stackIds = stackIdsBuffer
            } else {
                stackIds = []
            }
        } else {
            stackIds = nil
        }
        let stackIdsUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stackIdsUrl)
        stackIdsUrl = stackIdsUrlDecoded
        if containerValues.contains(.organizationalUnitIds) {
            struct KeyVal0{struct member{}}
            let organizationalUnitIdsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .organizationalUnitIds)
            if let organizationalUnitIdsWrappedContainer = organizationalUnitIdsWrappedContainer {
                let organizationalUnitIdsContainer = try organizationalUnitIdsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var organizationalUnitIdsBuffer:[Swift.String]? = nil
                if let organizationalUnitIdsContainer = organizationalUnitIdsContainer {
                    organizationalUnitIdsBuffer = [Swift.String]()
                    for stringContainer0 in organizationalUnitIdsContainer {
                        organizationalUnitIdsBuffer?.append(stringContainer0)
                    }
                }
                organizationalUnitIds = organizationalUnitIdsBuffer
            } else {
                organizationalUnitIds = []
            }
        } else {
            organizationalUnitIds = nil
        }
        let operationPreferencesDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.StackSetOperationPreferences.self, forKey: .operationPreferences)
        operationPreferences = operationPreferencesDecoded
        let operationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .operationId)
        operationId = operationIdDecoded
        let callAsDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.CallAs.self, forKey: .callAs)
        callAs = callAsDecoded
    }
}
