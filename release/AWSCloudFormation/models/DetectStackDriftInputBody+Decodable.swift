// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DetectStackDriftInputBody: Swift.Equatable {
    let stackName: Swift.String?
    let logicalResourceIds: [Swift.String]?
}

extension DetectStackDriftInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case logicalResourceIds = "LogicalResourceIds"
        case stackName = "StackName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let stackNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stackName)
        stackName = stackNameDecoded
        if containerValues.contains(.logicalResourceIds) {
            struct KeyVal0{struct member{}}
            let logicalResourceIdsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .logicalResourceIds)
            if let logicalResourceIdsWrappedContainer = logicalResourceIdsWrappedContainer {
                let logicalResourceIdsContainer = try logicalResourceIdsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var logicalResourceIdsBuffer:[Swift.String]? = nil
                if let logicalResourceIdsContainer = logicalResourceIdsContainer {
                    logicalResourceIdsBuffer = [Swift.String]()
                    for stringContainer0 in logicalResourceIdsContainer {
                        logicalResourceIdsBuffer?.append(stringContainer0)
                    }
                }
                logicalResourceIds = logicalResourceIdsBuffer
            } else {
                logicalResourceIds = []
            }
        } else {
            logicalResourceIds = nil
        }
    }
}
