// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeChangeSetOutputResponseBody: Swift.Equatable {
    let changeSetName: Swift.String?
    let changeSetId: Swift.String?
    let stackId: Swift.String?
    let stackName: Swift.String?
    let description: Swift.String?
    let parameters: [CloudFormationClientTypes.Parameter]?
    let creationTime: ClientRuntime.Date?
    let executionStatus: CloudFormationClientTypes.ExecutionStatus?
    let status: CloudFormationClientTypes.ChangeSetStatus?
    let statusReason: Swift.String?
    let notificationARNs: [Swift.String]?
    let rollbackConfiguration: CloudFormationClientTypes.RollbackConfiguration?
    let capabilities: [CloudFormationClientTypes.Capability]?
    let tags: [CloudFormationClientTypes.Tag]?
    let changes: [CloudFormationClientTypes.Change]?
    let nextToken: Swift.String?
    let includeNestedStacks: Swift.Bool?
    let parentChangeSetId: Swift.String?
    let rootChangeSetId: Swift.String?
}

extension DescribeChangeSetOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case capabilities = "Capabilities"
        case changeSetId = "ChangeSetId"
        case changeSetName = "ChangeSetName"
        case changes = "Changes"
        case creationTime = "CreationTime"
        case description = "Description"
        case executionStatus = "ExecutionStatus"
        case includeNestedStacks = "IncludeNestedStacks"
        case nextToken = "NextToken"
        case notificationARNs = "NotificationARNs"
        case parameters = "Parameters"
        case parentChangeSetId = "ParentChangeSetId"
        case rollbackConfiguration = "RollbackConfiguration"
        case rootChangeSetId = "RootChangeSetId"
        case stackId = "StackId"
        case stackName = "StackName"
        case status = "Status"
        case statusReason = "StatusReason"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeChangeSetResult"))
        let changeSetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .changeSetName)
        changeSetName = changeSetNameDecoded
        let changeSetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .changeSetId)
        changeSetId = changeSetIdDecoded
        let stackIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stackId)
        stackId = stackIdDecoded
        let stackNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stackName)
        stackName = stackNameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        if containerValues.contains(.parameters) {
            struct KeyVal0{struct member{}}
            let parametersWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .parameters)
            if let parametersWrappedContainer = parametersWrappedContainer {
                let parametersContainer = try parametersWrappedContainer.decodeIfPresent([CloudFormationClientTypes.Parameter].self, forKey: .member)
                var parametersBuffer:[CloudFormationClientTypes.Parameter]? = nil
                if let parametersContainer = parametersContainer {
                    parametersBuffer = [CloudFormationClientTypes.Parameter]()
                    for structureContainer0 in parametersContainer {
                        parametersBuffer?.append(structureContainer0)
                    }
                }
                parameters = parametersBuffer
            } else {
                parameters = []
            }
        } else {
            parameters = nil
        }
        let creationTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .creationTime)
        var creationTimeBuffer:ClientRuntime.Date? = nil
        if let creationTimeDecoded = creationTimeDecoded {
            creationTimeBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(creationTimeDecoded, format: .dateTime)
        }
        creationTime = creationTimeBuffer
        let executionStatusDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.ExecutionStatus.self, forKey: .executionStatus)
        executionStatus = executionStatusDecoded
        let statusDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.ChangeSetStatus.self, forKey: .status)
        status = statusDecoded
        let statusReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .statusReason)
        statusReason = statusReasonDecoded
        if containerValues.contains(.notificationARNs) {
            struct KeyVal0{struct member{}}
            let notificationARNsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .notificationARNs)
            if let notificationARNsWrappedContainer = notificationARNsWrappedContainer {
                let notificationARNsContainer = try notificationARNsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var notificationARNsBuffer:[Swift.String]? = nil
                if let notificationARNsContainer = notificationARNsContainer {
                    notificationARNsBuffer = [Swift.String]()
                    for stringContainer0 in notificationARNsContainer {
                        notificationARNsBuffer?.append(stringContainer0)
                    }
                }
                notificationARNs = notificationARNsBuffer
            } else {
                notificationARNs = []
            }
        } else {
            notificationARNs = nil
        }
        let rollbackConfigurationDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.RollbackConfiguration.self, forKey: .rollbackConfiguration)
        rollbackConfiguration = rollbackConfigurationDecoded
        if containerValues.contains(.capabilities) {
            struct KeyVal0{struct member{}}
            let capabilitiesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .capabilities)
            if let capabilitiesWrappedContainer = capabilitiesWrappedContainer {
                let capabilitiesContainer = try capabilitiesWrappedContainer.decodeIfPresent([CloudFormationClientTypes.Capability].self, forKey: .member)
                var capabilitiesBuffer:[CloudFormationClientTypes.Capability]? = nil
                if let capabilitiesContainer = capabilitiesContainer {
                    capabilitiesBuffer = [CloudFormationClientTypes.Capability]()
                    for stringContainer0 in capabilitiesContainer {
                        capabilitiesBuffer?.append(stringContainer0)
                    }
                }
                capabilities = capabilitiesBuffer
            } else {
                capabilities = []
            }
        } else {
            capabilities = nil
        }
        if containerValues.contains(.tags) {
            struct KeyVal0{struct member{}}
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .tags)
            if let tagsWrappedContainer = tagsWrappedContainer {
                let tagsContainer = try tagsWrappedContainer.decodeIfPresent([CloudFormationClientTypes.Tag].self, forKey: .member)
                var tagsBuffer:[CloudFormationClientTypes.Tag]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [CloudFormationClientTypes.Tag]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
        if containerValues.contains(.changes) {
            struct KeyVal0{struct member{}}
            let changesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .changes)
            if let changesWrappedContainer = changesWrappedContainer {
                let changesContainer = try changesWrappedContainer.decodeIfPresent([CloudFormationClientTypes.Change].self, forKey: .member)
                var changesBuffer:[CloudFormationClientTypes.Change]? = nil
                if let changesContainer = changesContainer {
                    changesBuffer = [CloudFormationClientTypes.Change]()
                    for structureContainer0 in changesContainer {
                        changesBuffer?.append(structureContainer0)
                    }
                }
                changes = changesBuffer
            } else {
                changes = []
            }
        } else {
            changes = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let includeNestedStacksDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .includeNestedStacks)
        includeNestedStacks = includeNestedStacksDecoded
        let parentChangeSetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .parentChangeSetId)
        parentChangeSetId = parentChangeSetIdDecoded
        let rootChangeSetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .rootChangeSetId)
        rootChangeSetId = rootChangeSetIdDecoded
    }
}
