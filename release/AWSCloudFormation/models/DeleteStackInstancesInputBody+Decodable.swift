// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DeleteStackInstancesInputBody: Swift.Equatable {
    let stackSetName: Swift.String?
    let accounts: [Swift.String]?
    let deploymentTargets: CloudFormationClientTypes.DeploymentTargets?
    let regions: [Swift.String]?
    let operationPreferences: CloudFormationClientTypes.StackSetOperationPreferences?
    let retainStacks: Swift.Bool
    let operationId: Swift.String?
    let callAs: CloudFormationClientTypes.CallAs?
}

extension DeleteStackInstancesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accounts = "Accounts"
        case callAs = "CallAs"
        case deploymentTargets = "DeploymentTargets"
        case operationId = "OperationId"
        case operationPreferences = "OperationPreferences"
        case regions = "Regions"
        case retainStacks = "RetainStacks"
        case stackSetName = "StackSetName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let stackSetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stackSetName)
        stackSetName = stackSetNameDecoded
        if containerValues.contains(.accounts) {
            struct KeyVal0{struct member{}}
            let accountsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .accounts)
            if let accountsWrappedContainer = accountsWrappedContainer {
                let accountsContainer = try accountsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var accountsBuffer:[Swift.String]? = nil
                if let accountsContainer = accountsContainer {
                    accountsBuffer = [Swift.String]()
                    for stringContainer0 in accountsContainer {
                        accountsBuffer?.append(stringContainer0)
                    }
                }
                accounts = accountsBuffer
            } else {
                accounts = []
            }
        } else {
            accounts = nil
        }
        let deploymentTargetsDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.DeploymentTargets.self, forKey: .deploymentTargets)
        deploymentTargets = deploymentTargetsDecoded
        if containerValues.contains(.regions) {
            struct KeyVal0{struct member{}}
            let regionsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .regions)
            if let regionsWrappedContainer = regionsWrappedContainer {
                let regionsContainer = try regionsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var regionsBuffer:[Swift.String]? = nil
                if let regionsContainer = regionsContainer {
                    regionsBuffer = [Swift.String]()
                    for stringContainer0 in regionsContainer {
                        regionsBuffer?.append(stringContainer0)
                    }
                }
                regions = regionsBuffer
            } else {
                regions = []
            }
        } else {
            regions = nil
        }
        let operationPreferencesDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.StackSetOperationPreferences.self, forKey: .operationPreferences)
        operationPreferences = operationPreferencesDecoded
        let retainStacksDecoded = try containerValues.decode(Swift.Bool.self, forKey: .retainStacks)
        retainStacks = retainStacksDecoded
        let operationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .operationId)
        operationId = operationIdDecoded
        let callAsDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.CallAs.self, forKey: .callAs)
        callAs = callAsDecoded
    }
}
