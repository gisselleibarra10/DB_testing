// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct BatchDescribeTypeConfigurationsOutputResponseBody: Swift.Equatable {
    let errors: [CloudFormationClientTypes.BatchDescribeTypeConfigurationsError]?
    let unprocessedTypeConfigurations: [CloudFormationClientTypes.TypeConfigurationIdentifier]?
    let typeConfigurations: [CloudFormationClientTypes.TypeConfigurationDetails]?
}

extension BatchDescribeTypeConfigurationsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case errors = "Errors"
        case typeConfigurations = "TypeConfigurations"
        case unprocessedTypeConfigurations = "UnprocessedTypeConfigurations"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("BatchDescribeTypeConfigurationsResult"))
        if containerValues.contains(.errors) {
            struct KeyVal0{struct member{}}
            let errorsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .errors)
            if let errorsWrappedContainer = errorsWrappedContainer {
                let errorsContainer = try errorsWrappedContainer.decodeIfPresent([CloudFormationClientTypes.BatchDescribeTypeConfigurationsError].self, forKey: .member)
                var errorsBuffer:[CloudFormationClientTypes.BatchDescribeTypeConfigurationsError]? = nil
                if let errorsContainer = errorsContainer {
                    errorsBuffer = [CloudFormationClientTypes.BatchDescribeTypeConfigurationsError]()
                    for structureContainer0 in errorsContainer {
                        errorsBuffer?.append(structureContainer0)
                    }
                }
                errors = errorsBuffer
            } else {
                errors = []
            }
        } else {
            errors = nil
        }
        if containerValues.contains(.unprocessedTypeConfigurations) {
            struct KeyVal0{struct member{}}
            let unprocessedTypeConfigurationsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .unprocessedTypeConfigurations)
            if let unprocessedTypeConfigurationsWrappedContainer = unprocessedTypeConfigurationsWrappedContainer {
                let unprocessedTypeConfigurationsContainer = try unprocessedTypeConfigurationsWrappedContainer.decodeIfPresent([CloudFormationClientTypes.TypeConfigurationIdentifier].self, forKey: .member)
                var unprocessedTypeConfigurationsBuffer:[CloudFormationClientTypes.TypeConfigurationIdentifier]? = nil
                if let unprocessedTypeConfigurationsContainer = unprocessedTypeConfigurationsContainer {
                    unprocessedTypeConfigurationsBuffer = [CloudFormationClientTypes.TypeConfigurationIdentifier]()
                    for structureContainer0 in unprocessedTypeConfigurationsContainer {
                        unprocessedTypeConfigurationsBuffer?.append(structureContainer0)
                    }
                }
                unprocessedTypeConfigurations = unprocessedTypeConfigurationsBuffer
            } else {
                unprocessedTypeConfigurations = []
            }
        } else {
            unprocessedTypeConfigurations = nil
        }
        if containerValues.contains(.typeConfigurations) {
            struct KeyVal0{struct member{}}
            let typeConfigurationsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .typeConfigurations)
            if let typeConfigurationsWrappedContainer = typeConfigurationsWrappedContainer {
                let typeConfigurationsContainer = try typeConfigurationsWrappedContainer.decodeIfPresent([CloudFormationClientTypes.TypeConfigurationDetails].self, forKey: .member)
                var typeConfigurationsBuffer:[CloudFormationClientTypes.TypeConfigurationDetails]? = nil
                if let typeConfigurationsContainer = typeConfigurationsContainer {
                    typeConfigurationsBuffer = [CloudFormationClientTypes.TypeConfigurationDetails]()
                    for structureContainer0 in typeConfigurationsContainer {
                        typeConfigurationsBuffer?.append(structureContainer0)
                    }
                }
                typeConfigurations = typeConfigurationsBuffer
            } else {
                typeConfigurations = []
            }
        } else {
            typeConfigurations = nil
        }
    }
}
