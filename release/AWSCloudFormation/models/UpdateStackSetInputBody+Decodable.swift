// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct UpdateStackSetInputBody: Swift.Equatable {
    let stackSetName: Swift.String?
    let description: Swift.String?
    let templateBody: Swift.String?
    let templateURL: Swift.String?
    let usePreviousTemplate: Swift.Bool?
    let parameters: [CloudFormationClientTypes.Parameter]?
    let capabilities: [CloudFormationClientTypes.Capability]?
    let tags: [CloudFormationClientTypes.Tag]?
    let operationPreferences: CloudFormationClientTypes.StackSetOperationPreferences?
    let administrationRoleARN: Swift.String?
    let executionRoleName: Swift.String?
    let deploymentTargets: CloudFormationClientTypes.DeploymentTargets?
    let permissionModel: CloudFormationClientTypes.PermissionModels?
    let autoDeployment: CloudFormationClientTypes.AutoDeployment?
    let operationId: Swift.String?
    let accounts: [Swift.String]?
    let regions: [Swift.String]?
    let callAs: CloudFormationClientTypes.CallAs?
    let managedExecution: CloudFormationClientTypes.ManagedExecution?
}

extension UpdateStackSetInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accounts = "Accounts"
        case administrationRoleARN = "AdministrationRoleARN"
        case autoDeployment = "AutoDeployment"
        case callAs = "CallAs"
        case capabilities = "Capabilities"
        case deploymentTargets = "DeploymentTargets"
        case description = "Description"
        case executionRoleName = "ExecutionRoleName"
        case managedExecution = "ManagedExecution"
        case operationId = "OperationId"
        case operationPreferences = "OperationPreferences"
        case parameters = "Parameters"
        case permissionModel = "PermissionModel"
        case regions = "Regions"
        case stackSetName = "StackSetName"
        case tags = "Tags"
        case templateBody = "TemplateBody"
        case templateURL = "TemplateURL"
        case usePreviousTemplate = "UsePreviousTemplate"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let stackSetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stackSetName)
        stackSetName = stackSetNameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let templateBodyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateBody)
        templateBody = templateBodyDecoded
        let templateURLDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateURL)
        templateURL = templateURLDecoded
        let usePreviousTemplateDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .usePreviousTemplate)
        usePreviousTemplate = usePreviousTemplateDecoded
        if containerValues.contains(.parameters) {
            struct KeyVal0{struct member{}}
            let parametersWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .parameters)
            if let parametersWrappedContainer = parametersWrappedContainer {
                let parametersContainer = try parametersWrappedContainer.decodeIfPresent([CloudFormationClientTypes.Parameter].self, forKey: .member)
                var parametersBuffer:[CloudFormationClientTypes.Parameter]? = nil
                if let parametersContainer = parametersContainer {
                    parametersBuffer = [CloudFormationClientTypes.Parameter]()
                    for structureContainer0 in parametersContainer {
                        parametersBuffer?.append(structureContainer0)
                    }
                }
                parameters = parametersBuffer
            } else {
                parameters = []
            }
        } else {
            parameters = nil
        }
        if containerValues.contains(.capabilities) {
            struct KeyVal0{struct member{}}
            let capabilitiesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .capabilities)
            if let capabilitiesWrappedContainer = capabilitiesWrappedContainer {
                let capabilitiesContainer = try capabilitiesWrappedContainer.decodeIfPresent([CloudFormationClientTypes.Capability].self, forKey: .member)
                var capabilitiesBuffer:[CloudFormationClientTypes.Capability]? = nil
                if let capabilitiesContainer = capabilitiesContainer {
                    capabilitiesBuffer = [CloudFormationClientTypes.Capability]()
                    for stringContainer0 in capabilitiesContainer {
                        capabilitiesBuffer?.append(stringContainer0)
                    }
                }
                capabilities = capabilitiesBuffer
            } else {
                capabilities = []
            }
        } else {
            capabilities = nil
        }
        if containerValues.contains(.tags) {
            struct KeyVal0{struct member{}}
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .tags)
            if let tagsWrappedContainer = tagsWrappedContainer {
                let tagsContainer = try tagsWrappedContainer.decodeIfPresent([CloudFormationClientTypes.Tag].self, forKey: .member)
                var tagsBuffer:[CloudFormationClientTypes.Tag]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [CloudFormationClientTypes.Tag]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
        let operationPreferencesDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.StackSetOperationPreferences.self, forKey: .operationPreferences)
        operationPreferences = operationPreferencesDecoded
        let administrationRoleARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .administrationRoleARN)
        administrationRoleARN = administrationRoleARNDecoded
        let executionRoleNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .executionRoleName)
        executionRoleName = executionRoleNameDecoded
        let deploymentTargetsDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.DeploymentTargets.self, forKey: .deploymentTargets)
        deploymentTargets = deploymentTargetsDecoded
        let permissionModelDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.PermissionModels.self, forKey: .permissionModel)
        permissionModel = permissionModelDecoded
        let autoDeploymentDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.AutoDeployment.self, forKey: .autoDeployment)
        autoDeployment = autoDeploymentDecoded
        let operationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .operationId)
        operationId = operationIdDecoded
        if containerValues.contains(.accounts) {
            struct KeyVal0{struct member{}}
            let accountsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .accounts)
            if let accountsWrappedContainer = accountsWrappedContainer {
                let accountsContainer = try accountsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var accountsBuffer:[Swift.String]? = nil
                if let accountsContainer = accountsContainer {
                    accountsBuffer = [Swift.String]()
                    for stringContainer0 in accountsContainer {
                        accountsBuffer?.append(stringContainer0)
                    }
                }
                accounts = accountsBuffer
            } else {
                accounts = []
            }
        } else {
            accounts = nil
        }
        if containerValues.contains(.regions) {
            struct KeyVal0{struct member{}}
            let regionsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .regions)
            if let regionsWrappedContainer = regionsWrappedContainer {
                let regionsContainer = try regionsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var regionsBuffer:[Swift.String]? = nil
                if let regionsContainer = regionsContainer {
                    regionsBuffer = [Swift.String]()
                    for stringContainer0 in regionsContainer {
                        regionsBuffer?.append(stringContainer0)
                    }
                }
                regions = regionsBuffer
            } else {
                regions = []
            }
        } else {
            regions = nil
        }
        let callAsDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.CallAs.self, forKey: .callAs)
        callAs = callAsDecoded
        let managedExecutionDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.ManagedExecution.self, forKey: .managedExecution)
        managedExecution = managedExecutionDecoded
    }
}
