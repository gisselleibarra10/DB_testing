// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CloudFormationClientTypes.TypeVersionSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "Arn"
        case description = "Description"
        case isDefaultVersion = "IsDefaultVersion"
        case publicVersionNumber = "PublicVersionNumber"
        case timeCreated = "TimeCreated"
        case type = "Type"
        case typeName = "TypeName"
        case versionId = "VersionId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let arn = arn {
            try container.encode(arn, forKey: ClientRuntime.Key("Arn"))
        }
        if let description = description {
            try container.encode(description, forKey: ClientRuntime.Key("Description"))
        }
        if let isDefaultVersion = isDefaultVersion {
            try container.encode(isDefaultVersion, forKey: ClientRuntime.Key("IsDefaultVersion"))
        }
        if let publicVersionNumber = publicVersionNumber {
            try container.encode(publicVersionNumber, forKey: ClientRuntime.Key("PublicVersionNumber"))
        }
        if let timeCreated = timeCreated {
            try container.encode(ClientRuntime.TimestampWrapper(timeCreated, format: .dateTime), forKey: ClientRuntime.Key("timeCreated"))
        }
        if let type = type {
            try container.encode(type, forKey: ClientRuntime.Key("Type"))
        }
        if let typeName = typeName {
            try container.encode(typeName, forKey: ClientRuntime.Key("TypeName"))
        }
        if let versionId = versionId {
            try container.encode(versionId, forKey: ClientRuntime.Key("VersionId"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let typeDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.RegistryType.self, forKey: .type)
        type = typeDecoded
        let typeNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .typeName)
        typeName = typeNameDecoded
        let versionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .versionId)
        versionId = versionIdDecoded
        let isDefaultVersionDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .isDefaultVersion)
        isDefaultVersion = isDefaultVersionDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let timeCreatedDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .timeCreated)
        var timeCreatedBuffer:ClientRuntime.Date? = nil
        if let timeCreatedDecoded = timeCreatedDecoded {
            timeCreatedBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(timeCreatedDecoded, format: .dateTime)
        }
        timeCreated = timeCreatedBuffer
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let publicVersionNumberDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .publicVersionNumber)
        publicVersionNumber = publicVersionNumberDecoded
    }
}
