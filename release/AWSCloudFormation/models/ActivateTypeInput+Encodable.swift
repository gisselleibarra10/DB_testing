// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ActivateTypeInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let autoUpdate = autoUpdate {
            try container.encode(autoUpdate, forKey: ClientRuntime.Key("AutoUpdate"))
        }
        if let executionRoleArn = executionRoleArn {
            try container.encode(executionRoleArn, forKey: ClientRuntime.Key("ExecutionRoleArn"))
        }
        if let loggingConfig = loggingConfig {
            try container.encode(loggingConfig, forKey: ClientRuntime.Key("LoggingConfig"))
        }
        if let majorVersion = majorVersion {
            try container.encode(majorVersion, forKey: ClientRuntime.Key("MajorVersion"))
        }
        if let publicTypeArn = publicTypeArn {
            try container.encode(publicTypeArn, forKey: ClientRuntime.Key("PublicTypeArn"))
        }
        if let publisherId = publisherId {
            try container.encode(publisherId, forKey: ClientRuntime.Key("PublisherId"))
        }
        if let type = type {
            try container.encode(type, forKey: ClientRuntime.Key("Type"))
        }
        if let typeName = typeName {
            try container.encode(typeName, forKey: ClientRuntime.Key("TypeName"))
        }
        if let typeNameAlias = typeNameAlias {
            try container.encode(typeNameAlias, forKey: ClientRuntime.Key("TypeNameAlias"))
        }
        if let versionBump = versionBump {
            try container.encode(versionBump, forKey: ClientRuntime.Key("VersionBump"))
        }
        try container.encode("ActivateType", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}
