// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateStackInputBody: Swift.Equatable {
    let stackName: Swift.String?
    let templateBody: Swift.String?
    let templateURL: Swift.String?
    let parameters: [CloudFormationClientTypes.Parameter]?
    let disableRollback: Swift.Bool?
    let rollbackConfiguration: CloudFormationClientTypes.RollbackConfiguration?
    let timeoutInMinutes: Swift.Int?
    let notificationARNs: [Swift.String]?
    let capabilities: [CloudFormationClientTypes.Capability]?
    let resourceTypes: [Swift.String]?
    let roleARN: Swift.String?
    let onFailure: CloudFormationClientTypes.OnFailure?
    let stackPolicyBody: Swift.String?
    let stackPolicyURL: Swift.String?
    let tags: [CloudFormationClientTypes.Tag]?
    let clientRequestToken: Swift.String?
    let enableTerminationProtection: Swift.Bool?
}

extension CreateStackInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case capabilities = "Capabilities"
        case clientRequestToken = "ClientRequestToken"
        case disableRollback = "DisableRollback"
        case enableTerminationProtection = "EnableTerminationProtection"
        case notificationARNs = "NotificationARNs"
        case onFailure = "OnFailure"
        case parameters = "Parameters"
        case resourceTypes = "ResourceTypes"
        case roleARN = "RoleARN"
        case rollbackConfiguration = "RollbackConfiguration"
        case stackName = "StackName"
        case stackPolicyBody = "StackPolicyBody"
        case stackPolicyURL = "StackPolicyURL"
        case tags = "Tags"
        case templateBody = "TemplateBody"
        case templateURL = "TemplateURL"
        case timeoutInMinutes = "TimeoutInMinutes"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let stackNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stackName)
        stackName = stackNameDecoded
        let templateBodyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateBody)
        templateBody = templateBodyDecoded
        let templateURLDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateURL)
        templateURL = templateURLDecoded
        if containerValues.contains(.parameters) {
            struct KeyVal0{struct member{}}
            let parametersWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .parameters)
            if let parametersWrappedContainer = parametersWrappedContainer {
                let parametersContainer = try parametersWrappedContainer.decodeIfPresent([CloudFormationClientTypes.Parameter].self, forKey: .member)
                var parametersBuffer:[CloudFormationClientTypes.Parameter]? = nil
                if let parametersContainer = parametersContainer {
                    parametersBuffer = [CloudFormationClientTypes.Parameter]()
                    for structureContainer0 in parametersContainer {
                        parametersBuffer?.append(structureContainer0)
                    }
                }
                parameters = parametersBuffer
            } else {
                parameters = []
            }
        } else {
            parameters = nil
        }
        let disableRollbackDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .disableRollback)
        disableRollback = disableRollbackDecoded
        let rollbackConfigurationDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.RollbackConfiguration.self, forKey: .rollbackConfiguration)
        rollbackConfiguration = rollbackConfigurationDecoded
        let timeoutInMinutesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .timeoutInMinutes)
        timeoutInMinutes = timeoutInMinutesDecoded
        if containerValues.contains(.notificationARNs) {
            struct KeyVal0{struct member{}}
            let notificationARNsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .notificationARNs)
            if let notificationARNsWrappedContainer = notificationARNsWrappedContainer {
                let notificationARNsContainer = try notificationARNsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var notificationARNsBuffer:[Swift.String]? = nil
                if let notificationARNsContainer = notificationARNsContainer {
                    notificationARNsBuffer = [Swift.String]()
                    for stringContainer0 in notificationARNsContainer {
                        notificationARNsBuffer?.append(stringContainer0)
                    }
                }
                notificationARNs = notificationARNsBuffer
            } else {
                notificationARNs = []
            }
        } else {
            notificationARNs = nil
        }
        if containerValues.contains(.capabilities) {
            struct KeyVal0{struct member{}}
            let capabilitiesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .capabilities)
            if let capabilitiesWrappedContainer = capabilitiesWrappedContainer {
                let capabilitiesContainer = try capabilitiesWrappedContainer.decodeIfPresent([CloudFormationClientTypes.Capability].self, forKey: .member)
                var capabilitiesBuffer:[CloudFormationClientTypes.Capability]? = nil
                if let capabilitiesContainer = capabilitiesContainer {
                    capabilitiesBuffer = [CloudFormationClientTypes.Capability]()
                    for stringContainer0 in capabilitiesContainer {
                        capabilitiesBuffer?.append(stringContainer0)
                    }
                }
                capabilities = capabilitiesBuffer
            } else {
                capabilities = []
            }
        } else {
            capabilities = nil
        }
        if containerValues.contains(.resourceTypes) {
            struct KeyVal0{struct member{}}
            let resourceTypesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .resourceTypes)
            if let resourceTypesWrappedContainer = resourceTypesWrappedContainer {
                let resourceTypesContainer = try resourceTypesWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var resourceTypesBuffer:[Swift.String]? = nil
                if let resourceTypesContainer = resourceTypesContainer {
                    resourceTypesBuffer = [Swift.String]()
                    for stringContainer0 in resourceTypesContainer {
                        resourceTypesBuffer?.append(stringContainer0)
                    }
                }
                resourceTypes = resourceTypesBuffer
            } else {
                resourceTypes = []
            }
        } else {
            resourceTypes = nil
        }
        let roleARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleARN)
        roleARN = roleARNDecoded
        let onFailureDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.OnFailure.self, forKey: .onFailure)
        onFailure = onFailureDecoded
        let stackPolicyBodyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stackPolicyBody)
        stackPolicyBody = stackPolicyBodyDecoded
        let stackPolicyURLDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stackPolicyURL)
        stackPolicyURL = stackPolicyURLDecoded
        if containerValues.contains(.tags) {
            struct KeyVal0{struct member{}}
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .tags)
            if let tagsWrappedContainer = tagsWrappedContainer {
                let tagsContainer = try tagsWrappedContainer.decodeIfPresent([CloudFormationClientTypes.Tag].self, forKey: .member)
                var tagsBuffer:[CloudFormationClientTypes.Tag]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [CloudFormationClientTypes.Tag]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
        let clientRequestTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientRequestToken)
        clientRequestToken = clientRequestTokenDecoded
        let enableTerminationProtectionDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enableTerminationProtection)
        enableTerminationProtection = enableTerminationProtectionDecoded
    }
}
