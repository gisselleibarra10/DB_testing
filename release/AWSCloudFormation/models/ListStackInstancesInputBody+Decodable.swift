// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListStackInstancesInputBody: Swift.Equatable {
    let stackSetName: Swift.String?
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
    let filters: [CloudFormationClientTypes.StackInstanceFilter]?
    let stackInstanceAccount: Swift.String?
    let stackInstanceRegion: Swift.String?
    let callAs: CloudFormationClientTypes.CallAs?
}

extension ListStackInstancesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case callAs = "CallAs"
        case filters = "Filters"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case stackInstanceAccount = "StackInstanceAccount"
        case stackInstanceRegion = "StackInstanceRegion"
        case stackSetName = "StackSetName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let stackSetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stackSetName)
        stackSetName = stackSetNameDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        if containerValues.contains(.filters) {
            struct KeyVal0{struct member{}}
            let filtersWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .filters)
            if let filtersWrappedContainer = filtersWrappedContainer {
                let filtersContainer = try filtersWrappedContainer.decodeIfPresent([CloudFormationClientTypes.StackInstanceFilter].self, forKey: .member)
                var filtersBuffer:[CloudFormationClientTypes.StackInstanceFilter]? = nil
                if let filtersContainer = filtersContainer {
                    filtersBuffer = [CloudFormationClientTypes.StackInstanceFilter]()
                    for structureContainer0 in filtersContainer {
                        filtersBuffer?.append(structureContainer0)
                    }
                }
                filters = filtersBuffer
            } else {
                filters = []
            }
        } else {
            filters = nil
        }
        let stackInstanceAccountDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stackInstanceAccount)
        stackInstanceAccount = stackInstanceAccountDecoded
        let stackInstanceRegionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stackInstanceRegion)
        stackInstanceRegion = stackInstanceRegionDecoded
        let callAsDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.CallAs.self, forKey: .callAs)
        callAs = callAsDecoded
    }
}
