// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeTypeOutputResponseBody: Swift.Equatable {
    let arn: Swift.String?
    let type: CloudFormationClientTypes.RegistryType?
    let typeName: Swift.String?
    let defaultVersionId: Swift.String?
    let isDefaultVersion: Swift.Bool?
    let typeTestsStatus: CloudFormationClientTypes.TypeTestsStatus?
    let typeTestsStatusDescription: Swift.String?
    let description: Swift.String?
    let schema: Swift.String?
    let provisioningType: CloudFormationClientTypes.ProvisioningType?
    let deprecatedStatus: CloudFormationClientTypes.DeprecatedStatus?
    let loggingConfig: CloudFormationClientTypes.LoggingConfig?
    let requiredActivatedTypes: [CloudFormationClientTypes.RequiredActivatedType]?
    let executionRoleArn: Swift.String?
    let visibility: CloudFormationClientTypes.Visibility?
    let sourceUrl: Swift.String?
    let documentationUrl: Swift.String?
    let lastUpdated: ClientRuntime.Date?
    let timeCreated: ClientRuntime.Date?
    let configurationSchema: Swift.String?
    let publisherId: Swift.String?
    let originalTypeName: Swift.String?
    let originalTypeArn: Swift.String?
    let publicVersionNumber: Swift.String?
    let latestPublicVersion: Swift.String?
    let isActivated: Swift.Bool?
    let autoUpdate: Swift.Bool?
}

extension DescribeTypeOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "Arn"
        case autoUpdate = "AutoUpdate"
        case configurationSchema = "ConfigurationSchema"
        case defaultVersionId = "DefaultVersionId"
        case deprecatedStatus = "DeprecatedStatus"
        case description = "Description"
        case documentationUrl = "DocumentationUrl"
        case executionRoleArn = "ExecutionRoleArn"
        case isActivated = "IsActivated"
        case isDefaultVersion = "IsDefaultVersion"
        case lastUpdated = "LastUpdated"
        case latestPublicVersion = "LatestPublicVersion"
        case loggingConfig = "LoggingConfig"
        case originalTypeArn = "OriginalTypeArn"
        case originalTypeName = "OriginalTypeName"
        case provisioningType = "ProvisioningType"
        case publicVersionNumber = "PublicVersionNumber"
        case publisherId = "PublisherId"
        case requiredActivatedTypes = "RequiredActivatedTypes"
        case schema = "Schema"
        case sourceUrl = "SourceUrl"
        case timeCreated = "TimeCreated"
        case type = "Type"
        case typeName = "TypeName"
        case typeTestsStatus = "TypeTestsStatus"
        case typeTestsStatusDescription = "TypeTestsStatusDescription"
        case visibility = "Visibility"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeTypeResult"))
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let typeDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.RegistryType.self, forKey: .type)
        type = typeDecoded
        let typeNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .typeName)
        typeName = typeNameDecoded
        let defaultVersionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .defaultVersionId)
        defaultVersionId = defaultVersionIdDecoded
        let isDefaultVersionDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .isDefaultVersion)
        isDefaultVersion = isDefaultVersionDecoded
        let typeTestsStatusDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.TypeTestsStatus.self, forKey: .typeTestsStatus)
        typeTestsStatus = typeTestsStatusDecoded
        let typeTestsStatusDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .typeTestsStatusDescription)
        typeTestsStatusDescription = typeTestsStatusDescriptionDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let schemaDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .schema)
        schema = schemaDecoded
        let provisioningTypeDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.ProvisioningType.self, forKey: .provisioningType)
        provisioningType = provisioningTypeDecoded
        let deprecatedStatusDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.DeprecatedStatus.self, forKey: .deprecatedStatus)
        deprecatedStatus = deprecatedStatusDecoded
        let loggingConfigDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.LoggingConfig.self, forKey: .loggingConfig)
        loggingConfig = loggingConfigDecoded
        if containerValues.contains(.requiredActivatedTypes) {
            struct KeyVal0{struct member{}}
            let requiredActivatedTypesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .requiredActivatedTypes)
            if let requiredActivatedTypesWrappedContainer = requiredActivatedTypesWrappedContainer {
                let requiredActivatedTypesContainer = try requiredActivatedTypesWrappedContainer.decodeIfPresent([CloudFormationClientTypes.RequiredActivatedType].self, forKey: .member)
                var requiredActivatedTypesBuffer:[CloudFormationClientTypes.RequiredActivatedType]? = nil
                if let requiredActivatedTypesContainer = requiredActivatedTypesContainer {
                    requiredActivatedTypesBuffer = [CloudFormationClientTypes.RequiredActivatedType]()
                    for structureContainer0 in requiredActivatedTypesContainer {
                        requiredActivatedTypesBuffer?.append(structureContainer0)
                    }
                }
                requiredActivatedTypes = requiredActivatedTypesBuffer
            } else {
                requiredActivatedTypes = []
            }
        } else {
            requiredActivatedTypes = nil
        }
        let executionRoleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .executionRoleArn)
        executionRoleArn = executionRoleArnDecoded
        let visibilityDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.Visibility.self, forKey: .visibility)
        visibility = visibilityDecoded
        let sourceUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceUrl)
        sourceUrl = sourceUrlDecoded
        let documentationUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .documentationUrl)
        documentationUrl = documentationUrlDecoded
        let lastUpdatedDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastUpdated)
        var lastUpdatedBuffer:ClientRuntime.Date? = nil
        if let lastUpdatedDecoded = lastUpdatedDecoded {
            lastUpdatedBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(lastUpdatedDecoded, format: .dateTime)
        }
        lastUpdated = lastUpdatedBuffer
        let timeCreatedDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .timeCreated)
        var timeCreatedBuffer:ClientRuntime.Date? = nil
        if let timeCreatedDecoded = timeCreatedDecoded {
            timeCreatedBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(timeCreatedDecoded, format: .dateTime)
        }
        timeCreated = timeCreatedBuffer
        let configurationSchemaDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .configurationSchema)
        configurationSchema = configurationSchemaDecoded
        let publisherIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .publisherId)
        publisherId = publisherIdDecoded
        let originalTypeNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .originalTypeName)
        originalTypeName = originalTypeNameDecoded
        let originalTypeArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .originalTypeArn)
        originalTypeArn = originalTypeArnDecoded
        let publicVersionNumberDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .publicVersionNumber)
        publicVersionNumber = publicVersionNumberDecoded
        let latestPublicVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .latestPublicVersion)
        latestPublicVersion = latestPublicVersionDecoded
        let isActivatedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .isActivated)
        isActivated = isActivatedDecoded
        let autoUpdateDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .autoUpdate)
        autoUpdate = autoUpdateDecoded
    }
}
