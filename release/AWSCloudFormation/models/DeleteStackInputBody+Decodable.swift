// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DeleteStackInputBody: Swift.Equatable {
    let stackName: Swift.String?
    let retainResources: [Swift.String]?
    let roleARN: Swift.String?
    let clientRequestToken: Swift.String?
}

extension DeleteStackInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientRequestToken = "ClientRequestToken"
        case retainResources = "RetainResources"
        case roleARN = "RoleARN"
        case stackName = "StackName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let stackNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stackName)
        stackName = stackNameDecoded
        if containerValues.contains(.retainResources) {
            struct KeyVal0{struct member{}}
            let retainResourcesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .retainResources)
            if let retainResourcesWrappedContainer = retainResourcesWrappedContainer {
                let retainResourcesContainer = try retainResourcesWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var retainResourcesBuffer:[Swift.String]? = nil
                if let retainResourcesContainer = retainResourcesContainer {
                    retainResourcesBuffer = [Swift.String]()
                    for stringContainer0 in retainResourcesContainer {
                        retainResourcesBuffer?.append(stringContainer0)
                    }
                }
                retainResources = retainResourcesBuffer
            } else {
                retainResources = []
            }
        } else {
            retainResources = nil
        }
        let roleARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleARN)
        roleARN = roleARNDecoded
        let clientRequestTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientRequestToken)
        clientRequestToken = clientRequestTokenDecoded
    }
}
