// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeAccountLimitsOutputResponseBody: Swift.Equatable {
    let accountLimits: [CloudFormationClientTypes.AccountLimit]?
    let nextToken: Swift.String?
}

extension DescribeAccountLimitsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountLimits = "AccountLimits"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeAccountLimitsResult"))
        if containerValues.contains(.accountLimits) {
            struct KeyVal0{struct member{}}
            let accountLimitsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .accountLimits)
            if let accountLimitsWrappedContainer = accountLimitsWrappedContainer {
                let accountLimitsContainer = try accountLimitsWrappedContainer.decodeIfPresent([CloudFormationClientTypes.AccountLimit].self, forKey: .member)
                var accountLimitsBuffer:[CloudFormationClientTypes.AccountLimit]? = nil
                if let accountLimitsContainer = accountLimitsContainer {
                    accountLimitsBuffer = [CloudFormationClientTypes.AccountLimit]()
                    for structureContainer0 in accountLimitsContainer {
                        accountLimitsBuffer?.append(structureContainer0)
                    }
                }
                accountLimits = accountLimitsBuffer
            } else {
                accountLimits = []
            }
        } else {
            accountLimits = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
