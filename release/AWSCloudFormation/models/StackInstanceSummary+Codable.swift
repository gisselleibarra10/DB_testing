// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CloudFormationClientTypes.StackInstanceSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case account = "Account"
        case driftStatus = "DriftStatus"
        case lastDriftCheckTimestamp = "LastDriftCheckTimestamp"
        case organizationalUnitId = "OrganizationalUnitId"
        case region = "Region"
        case stackId = "StackId"
        case stackInstanceStatus = "StackInstanceStatus"
        case stackSetId = "StackSetId"
        case status = "Status"
        case statusReason = "StatusReason"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let account = account {
            try container.encode(account, forKey: ClientRuntime.Key("Account"))
        }
        if let driftStatus = driftStatus {
            try container.encode(driftStatus, forKey: ClientRuntime.Key("DriftStatus"))
        }
        if let lastDriftCheckTimestamp = lastDriftCheckTimestamp {
            try container.encode(ClientRuntime.TimestampWrapper(lastDriftCheckTimestamp, format: .dateTime), forKey: ClientRuntime.Key("lastDriftCheckTimestamp"))
        }
        if let organizationalUnitId = organizationalUnitId {
            try container.encode(organizationalUnitId, forKey: ClientRuntime.Key("OrganizationalUnitId"))
        }
        if let region = region {
            try container.encode(region, forKey: ClientRuntime.Key("Region"))
        }
        if let stackId = stackId {
            try container.encode(stackId, forKey: ClientRuntime.Key("StackId"))
        }
        if let stackInstanceStatus = stackInstanceStatus {
            try container.encode(stackInstanceStatus, forKey: ClientRuntime.Key("StackInstanceStatus"))
        }
        if let stackSetId = stackSetId {
            try container.encode(stackSetId, forKey: ClientRuntime.Key("StackSetId"))
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
        if let statusReason = statusReason {
            try container.encode(statusReason, forKey: ClientRuntime.Key("StatusReason"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let stackSetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stackSetId)
        stackSetId = stackSetIdDecoded
        let regionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .region)
        region = regionDecoded
        let accountDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .account)
        account = accountDecoded
        let stackIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stackId)
        stackId = stackIdDecoded
        let statusDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.StackInstanceStatus.self, forKey: .status)
        status = statusDecoded
        let statusReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .statusReason)
        statusReason = statusReasonDecoded
        let stackInstanceStatusDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.StackInstanceComprehensiveStatus.self, forKey: .stackInstanceStatus)
        stackInstanceStatus = stackInstanceStatusDecoded
        let organizationalUnitIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .organizationalUnitId)
        organizationalUnitId = organizationalUnitIdDecoded
        let driftStatusDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.StackDriftStatus.self, forKey: .driftStatus)
        driftStatus = driftStatusDecoded
        let lastDriftCheckTimestampDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastDriftCheckTimestamp)
        var lastDriftCheckTimestampBuffer:ClientRuntime.Date? = nil
        if let lastDriftCheckTimestampDecoded = lastDriftCheckTimestampDecoded {
            lastDriftCheckTimestampBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(lastDriftCheckTimestampDecoded, format: .dateTime)
        }
        lastDriftCheckTimestamp = lastDriftCheckTimestampBuffer
    }
}
