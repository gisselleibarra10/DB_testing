// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListTypeRegistrationsOutputResponseBody: Swift.Equatable {
    let registrationTokenList: [Swift.String]?
    let nextToken: Swift.String?
}

extension ListTypeRegistrationsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case registrationTokenList = "RegistrationTokenList"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("ListTypeRegistrationsResult"))
        if containerValues.contains(.registrationTokenList) {
            struct KeyVal0{struct member{}}
            let registrationTokenListWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .registrationTokenList)
            if let registrationTokenListWrappedContainer = registrationTokenListWrappedContainer {
                let registrationTokenListContainer = try registrationTokenListWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var registrationTokenListBuffer:[Swift.String]? = nil
                if let registrationTokenListContainer = registrationTokenListContainer {
                    registrationTokenListBuffer = [Swift.String]()
                    for stringContainer0 in registrationTokenListContainer {
                        registrationTokenListBuffer?.append(stringContainer0)
                    }
                }
                registrationTokenList = registrationTokenListBuffer
            } else {
                registrationTokenList = []
            }
        } else {
            registrationTokenList = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
