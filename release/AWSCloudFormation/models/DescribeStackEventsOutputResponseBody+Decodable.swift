// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeStackEventsOutputResponseBody: Swift.Equatable {
    let stackEvents: [CloudFormationClientTypes.StackEvent]?
    let nextToken: Swift.String?
}

extension DescribeStackEventsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case stackEvents = "StackEvents"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeStackEventsResult"))
        if containerValues.contains(.stackEvents) {
            struct KeyVal0{struct member{}}
            let stackEventsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .stackEvents)
            if let stackEventsWrappedContainer = stackEventsWrappedContainer {
                let stackEventsContainer = try stackEventsWrappedContainer.decodeIfPresent([CloudFormationClientTypes.StackEvent].self, forKey: .member)
                var stackEventsBuffer:[CloudFormationClientTypes.StackEvent]? = nil
                if let stackEventsContainer = stackEventsContainer {
                    stackEventsBuffer = [CloudFormationClientTypes.StackEvent]()
                    for structureContainer0 in stackEventsContainer {
                        stackEventsBuffer?.append(structureContainer0)
                    }
                }
                stackEvents = stackEventsBuffer
            } else {
                stackEvents = []
            }
        } else {
            stackEvents = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
