// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListImportsOutputResponseBody: Swift.Equatable {
    let imports: [Swift.String]?
    let nextToken: Swift.String?
}

extension ListImportsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case imports = "Imports"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("ListImportsResult"))
        if containerValues.contains(.imports) {
            struct KeyVal0{struct member{}}
            let importsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .imports)
            if let importsWrappedContainer = importsWrappedContainer {
                let importsContainer = try importsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var importsBuffer:[Swift.String]? = nil
                if let importsContainer = importsContainer {
                    importsBuffer = [Swift.String]()
                    for stringContainer0 in importsContainer {
                        importsBuffer?.append(stringContainer0)
                    }
                }
                imports = importsBuffer
            } else {
                imports = []
            }
        } else {
            imports = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
