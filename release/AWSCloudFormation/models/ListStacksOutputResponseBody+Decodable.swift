// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListStacksOutputResponseBody: Swift.Equatable {
    let stackSummaries: [CloudFormationClientTypes.StackSummary]?
    let nextToken: Swift.String?
}

extension ListStacksOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case stackSummaries = "StackSummaries"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("ListStacksResult"))
        if containerValues.contains(.stackSummaries) {
            struct KeyVal0{struct member{}}
            let stackSummariesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .stackSummaries)
            if let stackSummariesWrappedContainer = stackSummariesWrappedContainer {
                let stackSummariesContainer = try stackSummariesWrappedContainer.decodeIfPresent([CloudFormationClientTypes.StackSummary].self, forKey: .member)
                var stackSummariesBuffer:[CloudFormationClientTypes.StackSummary]? = nil
                if let stackSummariesContainer = stackSummariesContainer {
                    stackSummariesBuffer = [CloudFormationClientTypes.StackSummary]()
                    for structureContainer0 in stackSummariesContainer {
                        stackSummariesBuffer?.append(structureContainer0)
                    }
                }
                stackSummaries = stackSummariesBuffer
            } else {
                stackSummaries = []
            }
        } else {
            stackSummaries = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
