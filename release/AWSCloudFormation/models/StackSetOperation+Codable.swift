// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CloudFormationClientTypes.StackSetOperation: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case action = "Action"
        case administrationRoleARN = "AdministrationRoleARN"
        case creationTimestamp = "CreationTimestamp"
        case deploymentTargets = "DeploymentTargets"
        case endTimestamp = "EndTimestamp"
        case executionRoleName = "ExecutionRoleName"
        case operationId = "OperationId"
        case operationPreferences = "OperationPreferences"
        case retainStacks = "RetainStacks"
        case stackSetDriftDetectionDetails = "StackSetDriftDetectionDetails"
        case stackSetId = "StackSetId"
        case status = "Status"
        case statusReason = "StatusReason"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let action = action {
            try container.encode(action, forKey: ClientRuntime.Key("Action"))
        }
        if let administrationRoleARN = administrationRoleARN {
            try container.encode(administrationRoleARN, forKey: ClientRuntime.Key("AdministrationRoleARN"))
        }
        if let creationTimestamp = creationTimestamp {
            try container.encode(ClientRuntime.TimestampWrapper(creationTimestamp, format: .dateTime), forKey: ClientRuntime.Key("creationTimestamp"))
        }
        if let deploymentTargets = deploymentTargets {
            try container.encode(deploymentTargets, forKey: ClientRuntime.Key("DeploymentTargets"))
        }
        if let endTimestamp = endTimestamp {
            try container.encode(ClientRuntime.TimestampWrapper(endTimestamp, format: .dateTime), forKey: ClientRuntime.Key("endTimestamp"))
        }
        if let executionRoleName = executionRoleName {
            try container.encode(executionRoleName, forKey: ClientRuntime.Key("ExecutionRoleName"))
        }
        if let operationId = operationId {
            try container.encode(operationId, forKey: ClientRuntime.Key("OperationId"))
        }
        if let operationPreferences = operationPreferences {
            try container.encode(operationPreferences, forKey: ClientRuntime.Key("OperationPreferences"))
        }
        if let retainStacks = retainStacks {
            try container.encode(retainStacks, forKey: ClientRuntime.Key("RetainStacks"))
        }
        if let stackSetDriftDetectionDetails = stackSetDriftDetectionDetails {
            try container.encode(stackSetDriftDetectionDetails, forKey: ClientRuntime.Key("StackSetDriftDetectionDetails"))
        }
        if let stackSetId = stackSetId {
            try container.encode(stackSetId, forKey: ClientRuntime.Key("StackSetId"))
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
        if let statusReason = statusReason {
            try container.encode(statusReason, forKey: ClientRuntime.Key("StatusReason"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let operationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .operationId)
        operationId = operationIdDecoded
        let stackSetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stackSetId)
        stackSetId = stackSetIdDecoded
        let actionDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.StackSetOperationAction.self, forKey: .action)
        action = actionDecoded
        let statusDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.StackSetOperationStatus.self, forKey: .status)
        status = statusDecoded
        let operationPreferencesDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.StackSetOperationPreferences.self, forKey: .operationPreferences)
        operationPreferences = operationPreferencesDecoded
        let retainStacksDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .retainStacks)
        retainStacks = retainStacksDecoded
        let administrationRoleARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .administrationRoleARN)
        administrationRoleARN = administrationRoleARNDecoded
        let executionRoleNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .executionRoleName)
        executionRoleName = executionRoleNameDecoded
        let creationTimestampDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .creationTimestamp)
        var creationTimestampBuffer:ClientRuntime.Date? = nil
        if let creationTimestampDecoded = creationTimestampDecoded {
            creationTimestampBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(creationTimestampDecoded, format: .dateTime)
        }
        creationTimestamp = creationTimestampBuffer
        let endTimestampDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .endTimestamp)
        var endTimestampBuffer:ClientRuntime.Date? = nil
        if let endTimestampDecoded = endTimestampDecoded {
            endTimestampBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(endTimestampDecoded, format: .dateTime)
        }
        endTimestamp = endTimestampBuffer
        let deploymentTargetsDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.DeploymentTargets.self, forKey: .deploymentTargets)
        deploymentTargets = deploymentTargetsDecoded
        let stackSetDriftDetectionDetailsDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.StackSetDriftDetectionDetails.self, forKey: .stackSetDriftDetectionDetails)
        stackSetDriftDetectionDetails = stackSetDriftDetectionDetailsDecoded
        let statusReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .statusReason)
        statusReason = statusReasonDecoded
    }
}
