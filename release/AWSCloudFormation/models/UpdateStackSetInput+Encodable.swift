// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension UpdateStackSetInput: Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let accounts = accounts {
            var accountsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Accounts"))
            for (index0, account0) in accounts.enumerated() {
                try accountsContainer.encode(account0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let administrationRoleARN = administrationRoleARN {
            try container.encode(administrationRoleARN, forKey: ClientRuntime.Key("AdministrationRoleARN"))
        }
        if let autoDeployment = autoDeployment {
            try container.encode(autoDeployment, forKey: ClientRuntime.Key("AutoDeployment"))
        }
        if let callAs = callAs {
            try container.encode(callAs, forKey: ClientRuntime.Key("CallAs"))
        }
        if let capabilities = capabilities {
            var capabilitiesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Capabilities"))
            for (index0, capability0) in capabilities.enumerated() {
                try capabilitiesContainer.encode(capability0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let deploymentTargets = deploymentTargets {
            try container.encode(deploymentTargets, forKey: ClientRuntime.Key("DeploymentTargets"))
        }
        if let description = description {
            try container.encode(description, forKey: ClientRuntime.Key("Description"))
        }
        if let executionRoleName = executionRoleName {
            try container.encode(executionRoleName, forKey: ClientRuntime.Key("ExecutionRoleName"))
        }
        if let managedExecution = managedExecution {
            try container.encode(managedExecution, forKey: ClientRuntime.Key("ManagedExecution"))
        }
        if let operationId = operationId {
            try container.encode(operationId, forKey: ClientRuntime.Key("OperationId"))
        }
        if let operationPreferences = operationPreferences {
            try container.encode(operationPreferences, forKey: ClientRuntime.Key("OperationPreferences"))
        }
        if let parameters = parameters {
            var parametersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Parameters"))
            for (index0, parameter0) in parameters.enumerated() {
                try parametersContainer.encode(parameter0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let permissionModel = permissionModel {
            try container.encode(permissionModel, forKey: ClientRuntime.Key("PermissionModel"))
        }
        if let regions = regions {
            var regionsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Regions"))
            for (index0, region0) in regions.enumerated() {
                try regionsContainer.encode(region0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let stackSetName = stackSetName {
            try container.encode(stackSetName, forKey: ClientRuntime.Key("StackSetName"))
        }
        if let tags = tags {
            var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
            for (index0, tag0) in tags.enumerated() {
                try tagsContainer.encode(tag0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let templateBody = templateBody {
            try container.encode(templateBody, forKey: ClientRuntime.Key("TemplateBody"))
        }
        if let templateURL = templateURL {
            try container.encode(templateURL, forKey: ClientRuntime.Key("TemplateURL"))
        }
        if let usePreviousTemplate = usePreviousTemplate {
            try container.encode(usePreviousTemplate, forKey: ClientRuntime.Key("UsePreviousTemplate"))
        }
        try container.encode("UpdateStackSet", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}
