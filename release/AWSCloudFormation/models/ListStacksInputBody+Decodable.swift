// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListStacksInputBody: Swift.Equatable {
    let nextToken: Swift.String?
    let stackStatusFilter: [CloudFormationClientTypes.StackStatus]?
}

extension ListStacksInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case stackStatusFilter = "StackStatusFilter"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        if containerValues.contains(.stackStatusFilter) {
            struct KeyVal0{struct member{}}
            let stackStatusFilterWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .stackStatusFilter)
            if let stackStatusFilterWrappedContainer = stackStatusFilterWrappedContainer {
                let stackStatusFilterContainer = try stackStatusFilterWrappedContainer.decodeIfPresent([CloudFormationClientTypes.StackStatus].self, forKey: .member)
                var stackStatusFilterBuffer:[CloudFormationClientTypes.StackStatus]? = nil
                if let stackStatusFilterContainer = stackStatusFilterContainer {
                    stackStatusFilterBuffer = [CloudFormationClientTypes.StackStatus]()
                    for stringContainer0 in stackStatusFilterContainer {
                        stackStatusFilterBuffer?.append(stringContainer0)
                    }
                }
                stackStatusFilter = stackStatusFilterBuffer
            } else {
                stackStatusFilter = []
            }
        } else {
            stackStatusFilter = nil
        }
    }
}
