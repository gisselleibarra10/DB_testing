// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CloudFormationClientTypes.DeploymentTargets: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountFilterType = "AccountFilterType"
        case accounts = "Accounts"
        case accountsUrl = "AccountsUrl"
        case organizationalUnitIds = "OrganizationalUnitIds"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let accountFilterType = accountFilterType {
            try container.encode(accountFilterType, forKey: ClientRuntime.Key("AccountFilterType"))
        }
        if let accounts = accounts {
            var accountsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Accounts"))
            for (index0, account0) in accounts.enumerated() {
                try accountsContainer.encode(account0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let accountsUrl = accountsUrl {
            try container.encode(accountsUrl, forKey: ClientRuntime.Key("AccountsUrl"))
        }
        if let organizationalUnitIds = organizationalUnitIds {
            var organizationalUnitIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("OrganizationalUnitIds"))
            for (index0, organizationalunitid0) in organizationalUnitIds.enumerated() {
                try organizationalUnitIdsContainer.encode(organizationalunitid0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.accounts) {
            struct KeyVal0{struct member{}}
            let accountsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .accounts)
            if let accountsWrappedContainer = accountsWrappedContainer {
                let accountsContainer = try accountsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var accountsBuffer:[Swift.String]? = nil
                if let accountsContainer = accountsContainer {
                    accountsBuffer = [Swift.String]()
                    for stringContainer0 in accountsContainer {
                        accountsBuffer?.append(stringContainer0)
                    }
                }
                accounts = accountsBuffer
            } else {
                accounts = []
            }
        } else {
            accounts = nil
        }
        let accountsUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .accountsUrl)
        accountsUrl = accountsUrlDecoded
        if containerValues.contains(.organizationalUnitIds) {
            struct KeyVal0{struct member{}}
            let organizationalUnitIdsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .organizationalUnitIds)
            if let organizationalUnitIdsWrappedContainer = organizationalUnitIdsWrappedContainer {
                let organizationalUnitIdsContainer = try organizationalUnitIdsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var organizationalUnitIdsBuffer:[Swift.String]? = nil
                if let organizationalUnitIdsContainer = organizationalUnitIdsContainer {
                    organizationalUnitIdsBuffer = [Swift.String]()
                    for stringContainer0 in organizationalUnitIdsContainer {
                        organizationalUnitIdsBuffer?.append(stringContainer0)
                    }
                }
                organizationalUnitIds = organizationalUnitIdsBuffer
            } else {
                organizationalUnitIds = []
            }
        } else {
            organizationalUnitIds = nil
        }
        let accountFilterTypeDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.AccountFilterType.self, forKey: .accountFilterType)
        accountFilterType = accountFilterTypeDecoded
    }
}
