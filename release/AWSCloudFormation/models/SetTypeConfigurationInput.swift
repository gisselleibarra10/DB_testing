// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct SetTypeConfigurationInput: Swift.Equatable {
    /// The configuration data for the extension, in this account and region. The configuration data must be formatted as JSON, and validate against the schema returned in the ConfigurationSchema response element of [API_DescribeType]. For more information, see [Defining account-level configuration data for an extension](https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/resource-type-model.html#resource-type-howto-configuration) in the CloudFormation CLI User Guide.
    /// This member is required.
    public var configuration: Swift.String?
    /// An alias by which to refer to this extension configuration data. Conditional: Specifying a configuration alias is required when setting a configuration for a resource type extension.
    public var configurationAlias: Swift.String?
    /// The type of extension. Conditional: You must specify ConfigurationArn, or Type and TypeName.
    public var type: CloudFormationClientTypes.ThirdPartyType?
    /// The Amazon Resource Name (ARN) for the extension, in this account and region. For public extensions, this will be the ARN assigned when you [activate the type](https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_ActivateType.html) in this account and region. For private extensions, this will be the ARN assigned when you [register the type](https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_RegisterType.html) in this account and region. Do not include the extension versions suffix at the end of the ARN. You can set the configuration for an extension, but not for a specific extension version.
    public var typeArn: Swift.String?
    /// The name of the extension. Conditional: You must specify ConfigurationArn, or Type and TypeName.
    public var typeName: Swift.String?

    public init (
        configuration: Swift.String? = nil,
        configurationAlias: Swift.String? = nil,
        type: CloudFormationClientTypes.ThirdPartyType? = nil,
        typeArn: Swift.String? = nil,
        typeName: Swift.String? = nil
    )
    {
        self.configuration = configuration
        self.configurationAlias = configurationAlias
        self.type = type
        self.typeArn = typeArn
        self.typeName = typeName
    }
}
