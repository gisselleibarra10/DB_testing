// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetTemplateOutputResponseBody: Swift.Equatable {
    let templateBody: Swift.String?
    let stagesAvailable: [CloudFormationClientTypes.TemplateStage]?
}

extension GetTemplateOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case stagesAvailable = "StagesAvailable"
        case templateBody = "TemplateBody"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("GetTemplateResult"))
        let templateBodyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateBody)
        templateBody = templateBodyDecoded
        if containerValues.contains(.stagesAvailable) {
            struct KeyVal0{struct member{}}
            let stagesAvailableWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .stagesAvailable)
            if let stagesAvailableWrappedContainer = stagesAvailableWrappedContainer {
                let stagesAvailableContainer = try stagesAvailableWrappedContainer.decodeIfPresent([CloudFormationClientTypes.TemplateStage].self, forKey: .member)
                var stagesAvailableBuffer:[CloudFormationClientTypes.TemplateStage]? = nil
                if let stagesAvailableContainer = stagesAvailableContainer {
                    stagesAvailableBuffer = [CloudFormationClientTypes.TemplateStage]()
                    for stringContainer0 in stagesAvailableContainer {
                        stagesAvailableBuffer?.append(stringContainer0)
                    }
                }
                stagesAvailable = stagesAvailableBuffer
            } else {
                stagesAvailable = []
            }
        } else {
            stagesAvailable = nil
        }
    }
}
