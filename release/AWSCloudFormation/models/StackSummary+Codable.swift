// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CloudFormationClientTypes.StackSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTime = "CreationTime"
        case deletionTime = "DeletionTime"
        case driftInformation = "DriftInformation"
        case lastUpdatedTime = "LastUpdatedTime"
        case parentId = "ParentId"
        case rootId = "RootId"
        case stackId = "StackId"
        case stackName = "StackName"
        case stackStatus = "StackStatus"
        case stackStatusReason = "StackStatusReason"
        case templateDescription = "TemplateDescription"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let creationTime = creationTime {
            try container.encode(ClientRuntime.TimestampWrapper(creationTime, format: .dateTime), forKey: ClientRuntime.Key("creationTime"))
        }
        if let deletionTime = deletionTime {
            try container.encode(ClientRuntime.TimestampWrapper(deletionTime, format: .dateTime), forKey: ClientRuntime.Key("deletionTime"))
        }
        if let driftInformation = driftInformation {
            try container.encode(driftInformation, forKey: ClientRuntime.Key("DriftInformation"))
        }
        if let lastUpdatedTime = lastUpdatedTime {
            try container.encode(ClientRuntime.TimestampWrapper(lastUpdatedTime, format: .dateTime), forKey: ClientRuntime.Key("lastUpdatedTime"))
        }
        if let parentId = parentId {
            try container.encode(parentId, forKey: ClientRuntime.Key("ParentId"))
        }
        if let rootId = rootId {
            try container.encode(rootId, forKey: ClientRuntime.Key("RootId"))
        }
        if let stackId = stackId {
            try container.encode(stackId, forKey: ClientRuntime.Key("StackId"))
        }
        if let stackName = stackName {
            try container.encode(stackName, forKey: ClientRuntime.Key("StackName"))
        }
        if let stackStatus = stackStatus {
            try container.encode(stackStatus, forKey: ClientRuntime.Key("StackStatus"))
        }
        if let stackStatusReason = stackStatusReason {
            try container.encode(stackStatusReason, forKey: ClientRuntime.Key("StackStatusReason"))
        }
        if let templateDescription = templateDescription {
            try container.encode(templateDescription, forKey: ClientRuntime.Key("TemplateDescription"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let stackIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stackId)
        stackId = stackIdDecoded
        let stackNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stackName)
        stackName = stackNameDecoded
        let templateDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateDescription)
        templateDescription = templateDescriptionDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .creationTime)
        var creationTimeBuffer:ClientRuntime.Date? = nil
        if let creationTimeDecoded = creationTimeDecoded {
            creationTimeBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(creationTimeDecoded, format: .dateTime)
        }
        creationTime = creationTimeBuffer
        let lastUpdatedTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastUpdatedTime)
        var lastUpdatedTimeBuffer:ClientRuntime.Date? = nil
        if let lastUpdatedTimeDecoded = lastUpdatedTimeDecoded {
            lastUpdatedTimeBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(lastUpdatedTimeDecoded, format: .dateTime)
        }
        lastUpdatedTime = lastUpdatedTimeBuffer
        let deletionTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deletionTime)
        var deletionTimeBuffer:ClientRuntime.Date? = nil
        if let deletionTimeDecoded = deletionTimeDecoded {
            deletionTimeBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(deletionTimeDecoded, format: .dateTime)
        }
        deletionTime = deletionTimeBuffer
        let stackStatusDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.StackStatus.self, forKey: .stackStatus)
        stackStatus = stackStatusDecoded
        let stackStatusReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stackStatusReason)
        stackStatusReason = stackStatusReasonDecoded
        let parentIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .parentId)
        parentId = parentIdDecoded
        let rootIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .rootId)
        rootId = rootIdDecoded
        let driftInformationDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.StackDriftInformationSummary.self, forKey: .driftInformation)
        driftInformation = driftInformationDecoded
    }
}
