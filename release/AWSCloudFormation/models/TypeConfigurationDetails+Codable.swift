// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CloudFormationClientTypes.TypeConfigurationDetails: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case alias = "Alias"
        case arn = "Arn"
        case configuration = "Configuration"
        case isDefaultConfiguration = "IsDefaultConfiguration"
        case lastUpdated = "LastUpdated"
        case typeArn = "TypeArn"
        case typeName = "TypeName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let alias = alias {
            try container.encode(alias, forKey: ClientRuntime.Key("Alias"))
        }
        if let arn = arn {
            try container.encode(arn, forKey: ClientRuntime.Key("Arn"))
        }
        if let configuration = configuration {
            try container.encode(configuration, forKey: ClientRuntime.Key("Configuration"))
        }
        if let isDefaultConfiguration = isDefaultConfiguration {
            try container.encode(isDefaultConfiguration, forKey: ClientRuntime.Key("IsDefaultConfiguration"))
        }
        if let lastUpdated = lastUpdated {
            try container.encode(ClientRuntime.TimestampWrapper(lastUpdated, format: .dateTime), forKey: ClientRuntime.Key("lastUpdated"))
        }
        if let typeArn = typeArn {
            try container.encode(typeArn, forKey: ClientRuntime.Key("TypeArn"))
        }
        if let typeName = typeName {
            try container.encode(typeName, forKey: ClientRuntime.Key("TypeName"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let aliasDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .alias)
        alias = aliasDecoded
        let configurationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .configuration)
        configuration = configurationDecoded
        let lastUpdatedDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastUpdated)
        var lastUpdatedBuffer:ClientRuntime.Date? = nil
        if let lastUpdatedDecoded = lastUpdatedDecoded {
            lastUpdatedBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(lastUpdatedDecoded, format: .dateTime)
        }
        lastUpdated = lastUpdatedBuffer
        let typeArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .typeArn)
        typeArn = typeArnDecoded
        let typeNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .typeName)
        typeName = typeNameDecoded
        let isDefaultConfigurationDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .isDefaultConfiguration)
        isDefaultConfiguration = isDefaultConfigurationDecoded
    }
}
