// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CloudFormationClientTypes.RequiredActivatedType: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case originalTypeName = "OriginalTypeName"
        case publisherId = "PublisherId"
        case supportedMajorVersions = "SupportedMajorVersions"
        case typeNameAlias = "TypeNameAlias"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let originalTypeName = originalTypeName {
            try container.encode(originalTypeName, forKey: ClientRuntime.Key("OriginalTypeName"))
        }
        if let publisherId = publisherId {
            try container.encode(publisherId, forKey: ClientRuntime.Key("PublisherId"))
        }
        if let supportedMajorVersions = supportedMajorVersions {
            var supportedMajorVersionsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("SupportedMajorVersions"))
            for (index0, supportedmajorversion0) in supportedMajorVersions.enumerated() {
                try supportedMajorVersionsContainer.encode(supportedmajorversion0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let typeNameAlias = typeNameAlias {
            try container.encode(typeNameAlias, forKey: ClientRuntime.Key("TypeNameAlias"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let typeNameAliasDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .typeNameAlias)
        typeNameAlias = typeNameAliasDecoded
        let originalTypeNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .originalTypeName)
        originalTypeName = originalTypeNameDecoded
        let publisherIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .publisherId)
        publisherId = publisherIdDecoded
        if containerValues.contains(.supportedMajorVersions) {
            struct KeyVal0{struct member{}}
            let supportedMajorVersionsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .supportedMajorVersions)
            if let supportedMajorVersionsWrappedContainer = supportedMajorVersionsWrappedContainer {
                let supportedMajorVersionsContainer = try supportedMajorVersionsWrappedContainer.decodeIfPresent([Swift.Int].self, forKey: .member)
                var supportedMajorVersionsBuffer:[Swift.Int]? = nil
                if let supportedMajorVersionsContainer = supportedMajorVersionsContainer {
                    supportedMajorVersionsBuffer = [Swift.Int]()
                    for integerContainer0 in supportedMajorVersionsContainer {
                        supportedMajorVersionsBuffer?.append(integerContainer0)
                    }
                }
                supportedMajorVersions = supportedMajorVersionsBuffer
            } else {
                supportedMajorVersions = []
            }
        } else {
            supportedMajorVersions = nil
        }
    }
}
