// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeChangeSetHooksOutputResponseBody: Swift.Equatable {
    let changeSetId: Swift.String?
    let changeSetName: Swift.String?
    let hooks: [CloudFormationClientTypes.ChangeSetHook]?
    let status: CloudFormationClientTypes.ChangeSetHooksStatus?
    let nextToken: Swift.String?
    let stackId: Swift.String?
    let stackName: Swift.String?
}

extension DescribeChangeSetHooksOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case changeSetId = "ChangeSetId"
        case changeSetName = "ChangeSetName"
        case hooks = "Hooks"
        case nextToken = "NextToken"
        case stackId = "StackId"
        case stackName = "StackName"
        case status = "Status"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeChangeSetHooksResult"))
        let changeSetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .changeSetId)
        changeSetId = changeSetIdDecoded
        let changeSetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .changeSetName)
        changeSetName = changeSetNameDecoded
        if containerValues.contains(.hooks) {
            struct KeyVal0{struct member{}}
            let hooksWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .hooks)
            if let hooksWrappedContainer = hooksWrappedContainer {
                let hooksContainer = try hooksWrappedContainer.decodeIfPresent([CloudFormationClientTypes.ChangeSetHook].self, forKey: .member)
                var hooksBuffer:[CloudFormationClientTypes.ChangeSetHook]? = nil
                if let hooksContainer = hooksContainer {
                    hooksBuffer = [CloudFormationClientTypes.ChangeSetHook]()
                    for structureContainer0 in hooksContainer {
                        hooksBuffer?.append(structureContainer0)
                    }
                }
                hooks = hooksBuffer
            } else {
                hooks = []
            }
        } else {
            hooks = nil
        }
        let statusDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.ChangeSetHooksStatus.self, forKey: .status)
        status = statusDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let stackIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stackId)
        stackId = stackIdDecoded
        let stackNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stackName)
        stackName = stackNameDecoded
    }
}
