// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CloudFormationClientTypes.TypeConfigurationIdentifier: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case type = "Type"
        case typeArn = "TypeArn"
        case typeConfigurationAlias = "TypeConfigurationAlias"
        case typeConfigurationArn = "TypeConfigurationArn"
        case typeName = "TypeName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let type = type {
            try container.encode(type, forKey: ClientRuntime.Key("Type"))
        }
        if let typeArn = typeArn {
            try container.encode(typeArn, forKey: ClientRuntime.Key("TypeArn"))
        }
        if let typeConfigurationAlias = typeConfigurationAlias {
            try container.encode(typeConfigurationAlias, forKey: ClientRuntime.Key("TypeConfigurationAlias"))
        }
        if let typeConfigurationArn = typeConfigurationArn {
            try container.encode(typeConfigurationArn, forKey: ClientRuntime.Key("TypeConfigurationArn"))
        }
        if let typeName = typeName {
            try container.encode(typeName, forKey: ClientRuntime.Key("TypeName"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let typeArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .typeArn)
        typeArn = typeArnDecoded
        let typeConfigurationAliasDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .typeConfigurationAlias)
        typeConfigurationAlias = typeConfigurationAliasDecoded
        let typeConfigurationArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .typeConfigurationArn)
        typeConfigurationArn = typeConfigurationArnDecoded
        let typeDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.ThirdPartyType.self, forKey: .type)
        type = typeDecoded
        let typeNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .typeName)
        typeName = typeNameDecoded
    }
}
