// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CloudFormationClientTypes.StackEvent: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientRequestToken = "ClientRequestToken"
        case eventId = "EventId"
        case hookFailureMode = "HookFailureMode"
        case hookInvocationPoint = "HookInvocationPoint"
        case hookStatus = "HookStatus"
        case hookStatusReason = "HookStatusReason"
        case hookType = "HookType"
        case logicalResourceId = "LogicalResourceId"
        case physicalResourceId = "PhysicalResourceId"
        case resourceProperties = "ResourceProperties"
        case resourceStatus = "ResourceStatus"
        case resourceStatusReason = "ResourceStatusReason"
        case resourceType = "ResourceType"
        case stackId = "StackId"
        case stackName = "StackName"
        case timestamp = "Timestamp"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let clientRequestToken = clientRequestToken {
            try container.encode(clientRequestToken, forKey: ClientRuntime.Key("ClientRequestToken"))
        }
        if let eventId = eventId {
            try container.encode(eventId, forKey: ClientRuntime.Key("EventId"))
        }
        if let hookFailureMode = hookFailureMode {
            try container.encode(hookFailureMode, forKey: ClientRuntime.Key("HookFailureMode"))
        }
        if let hookInvocationPoint = hookInvocationPoint {
            try container.encode(hookInvocationPoint, forKey: ClientRuntime.Key("HookInvocationPoint"))
        }
        if let hookStatus = hookStatus {
            try container.encode(hookStatus, forKey: ClientRuntime.Key("HookStatus"))
        }
        if let hookStatusReason = hookStatusReason {
            try container.encode(hookStatusReason, forKey: ClientRuntime.Key("HookStatusReason"))
        }
        if let hookType = hookType {
            try container.encode(hookType, forKey: ClientRuntime.Key("HookType"))
        }
        if let logicalResourceId = logicalResourceId {
            try container.encode(logicalResourceId, forKey: ClientRuntime.Key("LogicalResourceId"))
        }
        if let physicalResourceId = physicalResourceId {
            try container.encode(physicalResourceId, forKey: ClientRuntime.Key("PhysicalResourceId"))
        }
        if let resourceProperties = resourceProperties {
            try container.encode(resourceProperties, forKey: ClientRuntime.Key("ResourceProperties"))
        }
        if let resourceStatus = resourceStatus {
            try container.encode(resourceStatus, forKey: ClientRuntime.Key("ResourceStatus"))
        }
        if let resourceStatusReason = resourceStatusReason {
            try container.encode(resourceStatusReason, forKey: ClientRuntime.Key("ResourceStatusReason"))
        }
        if let resourceType = resourceType {
            try container.encode(resourceType, forKey: ClientRuntime.Key("ResourceType"))
        }
        if let stackId = stackId {
            try container.encode(stackId, forKey: ClientRuntime.Key("StackId"))
        }
        if let stackName = stackName {
            try container.encode(stackName, forKey: ClientRuntime.Key("StackName"))
        }
        if let timestamp = timestamp {
            try container.encode(ClientRuntime.TimestampWrapper(timestamp, format: .dateTime), forKey: ClientRuntime.Key("timestamp"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let stackIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stackId)
        stackId = stackIdDecoded
        let eventIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .eventId)
        eventId = eventIdDecoded
        let stackNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stackName)
        stackName = stackNameDecoded
        let logicalResourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logicalResourceId)
        logicalResourceId = logicalResourceIdDecoded
        let physicalResourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .physicalResourceId)
        physicalResourceId = physicalResourceIdDecoded
        let resourceTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let timestampDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .timestamp)
        var timestampBuffer:ClientRuntime.Date? = nil
        if let timestampDecoded = timestampDecoded {
            timestampBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(timestampDecoded, format: .dateTime)
        }
        timestamp = timestampBuffer
        let resourceStatusDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.ResourceStatus.self, forKey: .resourceStatus)
        resourceStatus = resourceStatusDecoded
        let resourceStatusReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceStatusReason)
        resourceStatusReason = resourceStatusReasonDecoded
        let resourcePropertiesDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceProperties)
        resourceProperties = resourcePropertiesDecoded
        let clientRequestTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientRequestToken)
        clientRequestToken = clientRequestTokenDecoded
        let hookTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .hookType)
        hookType = hookTypeDecoded
        let hookStatusDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.HookStatus.self, forKey: .hookStatus)
        hookStatus = hookStatusDecoded
        let hookStatusReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .hookStatusReason)
        hookStatusReason = hookStatusReasonDecoded
        let hookInvocationPointDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.HookInvocationPoint.self, forKey: .hookInvocationPoint)
        hookInvocationPoint = hookInvocationPointDecoded
        let hookFailureModeDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.HookFailureMode.self, forKey: .hookFailureMode)
        hookFailureMode = hookFailureModeDecoded
    }
}
