// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct SetTypeConfigurationInputBody: Swift.Equatable {
    let typeArn: Swift.String?
    let configuration: Swift.String?
    let configurationAlias: Swift.String?
    let typeName: Swift.String?
    let type: CloudFormationClientTypes.ThirdPartyType?
}

extension SetTypeConfigurationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configuration = "Configuration"
        case configurationAlias = "ConfigurationAlias"
        case type = "Type"
        case typeArn = "TypeArn"
        case typeName = "TypeName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let typeArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .typeArn)
        typeArn = typeArnDecoded
        let configurationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .configuration)
        configuration = configurationDecoded
        let configurationAliasDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .configurationAlias)
        configurationAlias = configurationAliasDecoded
        let typeNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .typeName)
        typeName = typeNameDecoded
        let typeDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.ThirdPartyType.self, forKey: .type)
        type = typeDecoded
    }
}
