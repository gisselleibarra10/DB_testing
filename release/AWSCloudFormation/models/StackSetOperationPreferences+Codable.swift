// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CloudFormationClientTypes.StackSetOperationPreferences: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case failureToleranceCount = "FailureToleranceCount"
        case failureTolerancePercentage = "FailureTolerancePercentage"
        case maxConcurrentCount = "MaxConcurrentCount"
        case maxConcurrentPercentage = "MaxConcurrentPercentage"
        case regionConcurrencyType = "RegionConcurrencyType"
        case regionOrder = "RegionOrder"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let failureToleranceCount = failureToleranceCount {
            try container.encode(failureToleranceCount, forKey: ClientRuntime.Key("FailureToleranceCount"))
        }
        if let failureTolerancePercentage = failureTolerancePercentage {
            try container.encode(failureTolerancePercentage, forKey: ClientRuntime.Key("FailureTolerancePercentage"))
        }
        if let maxConcurrentCount = maxConcurrentCount {
            try container.encode(maxConcurrentCount, forKey: ClientRuntime.Key("MaxConcurrentCount"))
        }
        if let maxConcurrentPercentage = maxConcurrentPercentage {
            try container.encode(maxConcurrentPercentage, forKey: ClientRuntime.Key("MaxConcurrentPercentage"))
        }
        if let regionConcurrencyType = regionConcurrencyType {
            try container.encode(regionConcurrencyType, forKey: ClientRuntime.Key("RegionConcurrencyType"))
        }
        if let regionOrder = regionOrder {
            var regionOrderContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("RegionOrder"))
            for (index0, region0) in regionOrder.enumerated() {
                try regionOrderContainer.encode(region0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let regionConcurrencyTypeDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.RegionConcurrencyType.self, forKey: .regionConcurrencyType)
        regionConcurrencyType = regionConcurrencyTypeDecoded
        if containerValues.contains(.regionOrder) {
            struct KeyVal0{struct member{}}
            let regionOrderWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .regionOrder)
            if let regionOrderWrappedContainer = regionOrderWrappedContainer {
                let regionOrderContainer = try regionOrderWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var regionOrderBuffer:[Swift.String]? = nil
                if let regionOrderContainer = regionOrderContainer {
                    regionOrderBuffer = [Swift.String]()
                    for stringContainer0 in regionOrderContainer {
                        regionOrderBuffer?.append(stringContainer0)
                    }
                }
                regionOrder = regionOrderBuffer
            } else {
                regionOrder = []
            }
        } else {
            regionOrder = nil
        }
        let failureToleranceCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .failureToleranceCount)
        failureToleranceCount = failureToleranceCountDecoded
        let failureTolerancePercentageDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .failureTolerancePercentage)
        failureTolerancePercentage = failureTolerancePercentageDecoded
        let maxConcurrentCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxConcurrentCount)
        maxConcurrentCount = maxConcurrentCountDecoded
        let maxConcurrentPercentageDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxConcurrentPercentage)
        maxConcurrentPercentage = maxConcurrentPercentageDecoded
    }
}
