// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CloudFormationClientTypes.StackResourceSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case driftInformation = "DriftInformation"
        case lastUpdatedTimestamp = "LastUpdatedTimestamp"
        case logicalResourceId = "LogicalResourceId"
        case moduleInfo = "ModuleInfo"
        case physicalResourceId = "PhysicalResourceId"
        case resourceStatus = "ResourceStatus"
        case resourceStatusReason = "ResourceStatusReason"
        case resourceType = "ResourceType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let driftInformation = driftInformation {
            try container.encode(driftInformation, forKey: ClientRuntime.Key("DriftInformation"))
        }
        if let lastUpdatedTimestamp = lastUpdatedTimestamp {
            try container.encode(ClientRuntime.TimestampWrapper(lastUpdatedTimestamp, format: .dateTime), forKey: ClientRuntime.Key("lastUpdatedTimestamp"))
        }
        if let logicalResourceId = logicalResourceId {
            try container.encode(logicalResourceId, forKey: ClientRuntime.Key("LogicalResourceId"))
        }
        if let moduleInfo = moduleInfo {
            try container.encode(moduleInfo, forKey: ClientRuntime.Key("ModuleInfo"))
        }
        if let physicalResourceId = physicalResourceId {
            try container.encode(physicalResourceId, forKey: ClientRuntime.Key("PhysicalResourceId"))
        }
        if let resourceStatus = resourceStatus {
            try container.encode(resourceStatus, forKey: ClientRuntime.Key("ResourceStatus"))
        }
        if let resourceStatusReason = resourceStatusReason {
            try container.encode(resourceStatusReason, forKey: ClientRuntime.Key("ResourceStatusReason"))
        }
        if let resourceType = resourceType {
            try container.encode(resourceType, forKey: ClientRuntime.Key("ResourceType"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let logicalResourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logicalResourceId)
        logicalResourceId = logicalResourceIdDecoded
        let physicalResourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .physicalResourceId)
        physicalResourceId = physicalResourceIdDecoded
        let resourceTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let lastUpdatedTimestampDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastUpdatedTimestamp)
        var lastUpdatedTimestampBuffer:ClientRuntime.Date? = nil
        if let lastUpdatedTimestampDecoded = lastUpdatedTimestampDecoded {
            lastUpdatedTimestampBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(lastUpdatedTimestampDecoded, format: .dateTime)
        }
        lastUpdatedTimestamp = lastUpdatedTimestampBuffer
        let resourceStatusDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.ResourceStatus.self, forKey: .resourceStatus)
        resourceStatus = resourceStatusDecoded
        let resourceStatusReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceStatusReason)
        resourceStatusReason = resourceStatusReasonDecoded
        let driftInformationDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.StackResourceDriftInformationSummary.self, forKey: .driftInformation)
        driftInformation = driftInformationDecoded
        let moduleInfoDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.ModuleInfo.self, forKey: .moduleInfo)
        moduleInfo = moduleInfoDecoded
    }
}
