// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct ActivateTypeInput: Swift.Equatable {
    /// Whether to automatically update the extension in this account and region when a new minor version is published by the extension publisher. Major versions released by the publisher must be manually updated. The default is true.
    public var autoUpdate: Swift.Bool?
    /// The name of the IAM execution role to use to activate the extension.
    public var executionRoleArn: Swift.String?
    /// Contains logging configuration information for an extension.
    public var loggingConfig: CloudFormationClientTypes.LoggingConfig?
    /// The major version of this extension you want to activate, if multiple major versions are available. The default is the latest major version. CloudFormation uses the latest available minor version of the major version selected. You can specify MajorVersion or VersionBump, but not both.
    public var majorVersion: Swift.Int?
    /// The Amazon Resource Name (ARN) of the public extension. Conditional: You must specify PublicTypeArn, or TypeName, Type, and PublisherId.
    public var publicTypeArn: Swift.String?
    /// The ID of the extension publisher. Conditional: You must specify PublicTypeArn, or TypeName, Type, and PublisherId.
    public var publisherId: Swift.String?
    /// The extension type. Conditional: You must specify PublicTypeArn, or TypeName, Type, and PublisherId.
    public var type: CloudFormationClientTypes.ThirdPartyType?
    /// The name of the extension. Conditional: You must specify PublicTypeArn, or TypeName, Type, and PublisherId.
    public var typeName: Swift.String?
    /// An alias to assign to the public extension, in this account and region. If you specify an alias for the extension, CloudFormation treats the alias as the extension type name within this account and region. You must use the alias to refer to the extension in your templates, API calls, and CloudFormation console. An extension alias must be unique within a given account and region. You can activate the same public resource multiple times in the same account and region, using different type name aliases.
    public var typeNameAlias: Swift.String?
    /// Manually updates a previously-activated type to a new major or minor version, if available. You can also use this parameter to update the value of AutoUpdate.
    ///
    /// * MAJOR: CloudFormation updates the extension to the newest major version, if one is available.
    ///
    /// * MINOR: CloudFormation updates the extension to the newest minor version, if one is available.
    public var versionBump: CloudFormationClientTypes.VersionBump?

    public init (
        autoUpdate: Swift.Bool? = nil,
        executionRoleArn: Swift.String? = nil,
        loggingConfig: CloudFormationClientTypes.LoggingConfig? = nil,
        majorVersion: Swift.Int? = nil,
        publicTypeArn: Swift.String? = nil,
        publisherId: Swift.String? = nil,
        type: CloudFormationClientTypes.ThirdPartyType? = nil,
        typeName: Swift.String? = nil,
        typeNameAlias: Swift.String? = nil,
        versionBump: CloudFormationClientTypes.VersionBump? = nil
    )
    {
        self.autoUpdate = autoUpdate
        self.executionRoleArn = executionRoleArn
        self.loggingConfig = loggingConfig
        self.majorVersion = majorVersion
        self.publicTypeArn = publicTypeArn
        self.publisherId = publisherId
        self.type = type
        self.typeName = typeName
        self.typeNameAlias = typeNameAlias
        self.versionBump = versionBump
    }
}
