// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SfnClientTypes.LoggingConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case destinations
        case includeExecutionData
        case level
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let destinations = destinations {
            var destinationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .destinations)
            for logdestinationlist0 in destinations {
                try destinationsContainer.encode(logdestinationlist0)
            }
        }
        if includeExecutionData != false {
            try encodeContainer.encode(includeExecutionData, forKey: .includeExecutionData)
        }
        if let level = self.level {
            try encodeContainer.encode(level.rawValue, forKey: .level)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let levelDecoded = try containerValues.decodeIfPresent(SfnClientTypes.LogLevel.self, forKey: .level)
        level = levelDecoded
        let includeExecutionDataDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .includeExecutionData) ?? false
        includeExecutionData = includeExecutionDataDecoded
        let destinationsContainer = try containerValues.decodeIfPresent([SfnClientTypes.LogDestination?].self, forKey: .destinations)
        var destinationsDecoded0:[SfnClientTypes.LogDestination]? = nil
        if let destinationsContainer = destinationsContainer {
            destinationsDecoded0 = [SfnClientTypes.LogDestination]()
            for structure0 in destinationsContainer {
                if let structure0 = structure0 {
                    destinationsDecoded0?.append(structure0)
                }
            }
        }
        destinations = destinationsDecoded0
    }
}
