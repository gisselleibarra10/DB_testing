// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateStateMachineInputBody: Swift.Equatable {
    let name: Swift.String?
    let definition: Swift.String?
    let roleArn: Swift.String?
    let type: SfnClientTypes.StateMachineType?
    let loggingConfiguration: SfnClientTypes.LoggingConfiguration?
    let tags: [SfnClientTypes.Tag]?
    let tracingConfiguration: SfnClientTypes.TracingConfiguration?
}

extension CreateStateMachineInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case definition
        case loggingConfiguration
        case name
        case roleArn
        case tags
        case tracingConfiguration
        case type
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let definitionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .definition)
        definition = definitionDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let typeDecoded = try containerValues.decodeIfPresent(SfnClientTypes.StateMachineType.self, forKey: .type)
        type = typeDecoded
        let loggingConfigurationDecoded = try containerValues.decodeIfPresent(SfnClientTypes.LoggingConfiguration.self, forKey: .loggingConfiguration)
        loggingConfiguration = loggingConfigurationDecoded
        let tagsContainer = try containerValues.decodeIfPresent([SfnClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[SfnClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [SfnClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let tracingConfigurationDecoded = try containerValues.decodeIfPresent(SfnClientTypes.TracingConfiguration.self, forKey: .tracingConfiguration)
        tracingConfiguration = tracingConfigurationDecoded
    }
}
