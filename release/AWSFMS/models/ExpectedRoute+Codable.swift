// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension FmsClientTypes.ExpectedRoute: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case allowedTargets = "AllowedTargets"
        case contributingSubnets = "ContributingSubnets"
        case ipV4Cidr = "IpV4Cidr"
        case ipV6Cidr = "IpV6Cidr"
        case prefixListId = "PrefixListId"
        case routeTableId = "RouteTableId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let allowedTargets = allowedTargets {
            var allowedTargetsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .allowedTargets)
            for lengthboundedstringlist0 in allowedTargets {
                try allowedTargetsContainer.encode(lengthboundedstringlist0)
            }
        }
        if let contributingSubnets = contributingSubnets {
            var contributingSubnetsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .contributingSubnets)
            for resourceidlist0 in contributingSubnets {
                try contributingSubnetsContainer.encode(resourceidlist0)
            }
        }
        if let ipV4Cidr = self.ipV4Cidr {
            try encodeContainer.encode(ipV4Cidr, forKey: .ipV4Cidr)
        }
        if let ipV6Cidr = self.ipV6Cidr {
            try encodeContainer.encode(ipV6Cidr, forKey: .ipV6Cidr)
        }
        if let prefixListId = self.prefixListId {
            try encodeContainer.encode(prefixListId, forKey: .prefixListId)
        }
        if let routeTableId = self.routeTableId {
            try encodeContainer.encode(routeTableId, forKey: .routeTableId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ipV4CidrDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ipV4Cidr)
        ipV4Cidr = ipV4CidrDecoded
        let prefixListIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .prefixListId)
        prefixListId = prefixListIdDecoded
        let ipV6CidrDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ipV6Cidr)
        ipV6Cidr = ipV6CidrDecoded
        let contributingSubnetsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .contributingSubnets)
        var contributingSubnetsDecoded0:[Swift.String]? = nil
        if let contributingSubnetsContainer = contributingSubnetsContainer {
            contributingSubnetsDecoded0 = [Swift.String]()
            for string0 in contributingSubnetsContainer {
                if let string0 = string0 {
                    contributingSubnetsDecoded0?.append(string0)
                }
            }
        }
        contributingSubnets = contributingSubnetsDecoded0
        let allowedTargetsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .allowedTargets)
        var allowedTargetsDecoded0:[Swift.String]? = nil
        if let allowedTargetsContainer = allowedTargetsContainer {
            allowedTargetsDecoded0 = [Swift.String]()
            for string0 in allowedTargetsContainer {
                if let string0 = string0 {
                    allowedTargetsDecoded0?.append(string0)
                }
            }
        }
        allowedTargets = allowedTargetsDecoded0
        let routeTableIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .routeTableId)
        routeTableId = routeTableIdDecoded
    }
}
