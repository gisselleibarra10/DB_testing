// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension FmsClientTypes.NetworkFirewallBlackHoleRouteDetectedViolation: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case routeTableId = "RouteTableId"
        case violatingRoutes = "ViolatingRoutes"
        case violationTarget = "ViolationTarget"
        case vpcId = "VpcId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let routeTableId = self.routeTableId {
            try encodeContainer.encode(routeTableId, forKey: .routeTableId)
        }
        if let violatingRoutes = violatingRoutes {
            var violatingRoutesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .violatingRoutes)
            for routes0 in violatingRoutes {
                try violatingRoutesContainer.encode(routes0)
            }
        }
        if let violationTarget = self.violationTarget {
            try encodeContainer.encode(violationTarget, forKey: .violationTarget)
        }
        if let vpcId = self.vpcId {
            try encodeContainer.encode(vpcId, forKey: .vpcId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let violationTargetDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .violationTarget)
        violationTarget = violationTargetDecoded
        let routeTableIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .routeTableId)
        routeTableId = routeTableIdDecoded
        let vpcIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vpcId)
        vpcId = vpcIdDecoded
        let violatingRoutesContainer = try containerValues.decodeIfPresent([FmsClientTypes.Route?].self, forKey: .violatingRoutes)
        var violatingRoutesDecoded0:[FmsClientTypes.Route]? = nil
        if let violatingRoutesContainer = violatingRoutesContainer {
            violatingRoutesDecoded0 = [FmsClientTypes.Route]()
            for structure0 in violatingRoutesContainer {
                if let structure0 = structure0 {
                    violatingRoutesDecoded0?.append(structure0)
                }
            }
        }
        violatingRoutes = violatingRoutesDecoded0
    }
}
