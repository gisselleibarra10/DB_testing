// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListThirdPartyFirewallFirewallPoliciesOutputResponseBody: Swift.Equatable {
    let thirdPartyFirewallFirewallPolicies: [FmsClientTypes.ThirdPartyFirewallFirewallPolicy]?
    let nextToken: Swift.String?
}

extension ListThirdPartyFirewallFirewallPoliciesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case thirdPartyFirewallFirewallPolicies = "ThirdPartyFirewallFirewallPolicies"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let thirdPartyFirewallFirewallPoliciesContainer = try containerValues.decodeIfPresent([FmsClientTypes.ThirdPartyFirewallFirewallPolicy?].self, forKey: .thirdPartyFirewallFirewallPolicies)
        var thirdPartyFirewallFirewallPoliciesDecoded0:[FmsClientTypes.ThirdPartyFirewallFirewallPolicy]? = nil
        if let thirdPartyFirewallFirewallPoliciesContainer = thirdPartyFirewallFirewallPoliciesContainer {
            thirdPartyFirewallFirewallPoliciesDecoded0 = [FmsClientTypes.ThirdPartyFirewallFirewallPolicy]()
            for structure0 in thirdPartyFirewallFirewallPoliciesContainer {
                if let structure0 = structure0 {
                    thirdPartyFirewallFirewallPoliciesDecoded0?.append(structure0)
                }
            }
        }
        thirdPartyFirewallFirewallPolicies = thirdPartyFirewallFirewallPoliciesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
