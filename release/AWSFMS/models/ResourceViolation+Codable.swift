// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension FmsClientTypes.ResourceViolation: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case awsEc2InstanceViolation = "AwsEc2InstanceViolation"
        case awsEc2NetworkInterfaceViolation = "AwsEc2NetworkInterfaceViolation"
        case awsVPCSecurityGroupViolation = "AwsVPCSecurityGroupViolation"
        case dnsDuplicateRuleGroupViolation = "DnsDuplicateRuleGroupViolation"
        case dnsRuleGroupLimitExceededViolation = "DnsRuleGroupLimitExceededViolation"
        case dnsRuleGroupPriorityConflictViolation = "DnsRuleGroupPriorityConflictViolation"
        case firewallSubnetIsOutOfScopeViolation = "FirewallSubnetIsOutOfScopeViolation"
        case firewallSubnetMissingVPCEndpointViolation = "FirewallSubnetMissingVPCEndpointViolation"
        case networkFirewallBlackHoleRouteDetectedViolation = "NetworkFirewallBlackHoleRouteDetectedViolation"
        case networkFirewallInternetTrafficNotInspectedViolation = "NetworkFirewallInternetTrafficNotInspectedViolation"
        case networkFirewallInvalidRouteConfigurationViolation = "NetworkFirewallInvalidRouteConfigurationViolation"
        case networkFirewallMissingExpectedRTViolation = "NetworkFirewallMissingExpectedRTViolation"
        case networkFirewallMissingExpectedRoutesViolation = "NetworkFirewallMissingExpectedRoutesViolation"
        case networkFirewallMissingFirewallViolation = "NetworkFirewallMissingFirewallViolation"
        case networkFirewallMissingSubnetViolation = "NetworkFirewallMissingSubnetViolation"
        case networkFirewallPolicyModifiedViolation = "NetworkFirewallPolicyModifiedViolation"
        case networkFirewallUnexpectedFirewallRoutesViolation = "NetworkFirewallUnexpectedFirewallRoutesViolation"
        case networkFirewallUnexpectedGatewayRoutesViolation = "NetworkFirewallUnexpectedGatewayRoutesViolation"
        case possibleRemediationActions = "PossibleRemediationActions"
        case routeHasOutOfScopeEndpointViolation = "RouteHasOutOfScopeEndpointViolation"
        case thirdPartyFirewallMissingExpectedRouteTableViolation = "ThirdPartyFirewallMissingExpectedRouteTableViolation"
        case thirdPartyFirewallMissingFirewallViolation = "ThirdPartyFirewallMissingFirewallViolation"
        case thirdPartyFirewallMissingSubnetViolation = "ThirdPartyFirewallMissingSubnetViolation"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let awsEc2InstanceViolation = self.awsEc2InstanceViolation {
            try encodeContainer.encode(awsEc2InstanceViolation, forKey: .awsEc2InstanceViolation)
        }
        if let awsEc2NetworkInterfaceViolation = self.awsEc2NetworkInterfaceViolation {
            try encodeContainer.encode(awsEc2NetworkInterfaceViolation, forKey: .awsEc2NetworkInterfaceViolation)
        }
        if let awsVPCSecurityGroupViolation = self.awsVPCSecurityGroupViolation {
            try encodeContainer.encode(awsVPCSecurityGroupViolation, forKey: .awsVPCSecurityGroupViolation)
        }
        if let dnsDuplicateRuleGroupViolation = self.dnsDuplicateRuleGroupViolation {
            try encodeContainer.encode(dnsDuplicateRuleGroupViolation, forKey: .dnsDuplicateRuleGroupViolation)
        }
        if let dnsRuleGroupLimitExceededViolation = self.dnsRuleGroupLimitExceededViolation {
            try encodeContainer.encode(dnsRuleGroupLimitExceededViolation, forKey: .dnsRuleGroupLimitExceededViolation)
        }
        if let dnsRuleGroupPriorityConflictViolation = self.dnsRuleGroupPriorityConflictViolation {
            try encodeContainer.encode(dnsRuleGroupPriorityConflictViolation, forKey: .dnsRuleGroupPriorityConflictViolation)
        }
        if let firewallSubnetIsOutOfScopeViolation = self.firewallSubnetIsOutOfScopeViolation {
            try encodeContainer.encode(firewallSubnetIsOutOfScopeViolation, forKey: .firewallSubnetIsOutOfScopeViolation)
        }
        if let firewallSubnetMissingVPCEndpointViolation = self.firewallSubnetMissingVPCEndpointViolation {
            try encodeContainer.encode(firewallSubnetMissingVPCEndpointViolation, forKey: .firewallSubnetMissingVPCEndpointViolation)
        }
        if let networkFirewallBlackHoleRouteDetectedViolation = self.networkFirewallBlackHoleRouteDetectedViolation {
            try encodeContainer.encode(networkFirewallBlackHoleRouteDetectedViolation, forKey: .networkFirewallBlackHoleRouteDetectedViolation)
        }
        if let networkFirewallInternetTrafficNotInspectedViolation = self.networkFirewallInternetTrafficNotInspectedViolation {
            try encodeContainer.encode(networkFirewallInternetTrafficNotInspectedViolation, forKey: .networkFirewallInternetTrafficNotInspectedViolation)
        }
        if let networkFirewallInvalidRouteConfigurationViolation = self.networkFirewallInvalidRouteConfigurationViolation {
            try encodeContainer.encode(networkFirewallInvalidRouteConfigurationViolation, forKey: .networkFirewallInvalidRouteConfigurationViolation)
        }
        if let networkFirewallMissingExpectedRTViolation = self.networkFirewallMissingExpectedRTViolation {
            try encodeContainer.encode(networkFirewallMissingExpectedRTViolation, forKey: .networkFirewallMissingExpectedRTViolation)
        }
        if let networkFirewallMissingExpectedRoutesViolation = self.networkFirewallMissingExpectedRoutesViolation {
            try encodeContainer.encode(networkFirewallMissingExpectedRoutesViolation, forKey: .networkFirewallMissingExpectedRoutesViolation)
        }
        if let networkFirewallMissingFirewallViolation = self.networkFirewallMissingFirewallViolation {
            try encodeContainer.encode(networkFirewallMissingFirewallViolation, forKey: .networkFirewallMissingFirewallViolation)
        }
        if let networkFirewallMissingSubnetViolation = self.networkFirewallMissingSubnetViolation {
            try encodeContainer.encode(networkFirewallMissingSubnetViolation, forKey: .networkFirewallMissingSubnetViolation)
        }
        if let networkFirewallPolicyModifiedViolation = self.networkFirewallPolicyModifiedViolation {
            try encodeContainer.encode(networkFirewallPolicyModifiedViolation, forKey: .networkFirewallPolicyModifiedViolation)
        }
        if let networkFirewallUnexpectedFirewallRoutesViolation = self.networkFirewallUnexpectedFirewallRoutesViolation {
            try encodeContainer.encode(networkFirewallUnexpectedFirewallRoutesViolation, forKey: .networkFirewallUnexpectedFirewallRoutesViolation)
        }
        if let networkFirewallUnexpectedGatewayRoutesViolation = self.networkFirewallUnexpectedGatewayRoutesViolation {
            try encodeContainer.encode(networkFirewallUnexpectedGatewayRoutesViolation, forKey: .networkFirewallUnexpectedGatewayRoutesViolation)
        }
        if let possibleRemediationActions = self.possibleRemediationActions {
            try encodeContainer.encode(possibleRemediationActions, forKey: .possibleRemediationActions)
        }
        if let routeHasOutOfScopeEndpointViolation = self.routeHasOutOfScopeEndpointViolation {
            try encodeContainer.encode(routeHasOutOfScopeEndpointViolation, forKey: .routeHasOutOfScopeEndpointViolation)
        }
        if let thirdPartyFirewallMissingExpectedRouteTableViolation = self.thirdPartyFirewallMissingExpectedRouteTableViolation {
            try encodeContainer.encode(thirdPartyFirewallMissingExpectedRouteTableViolation, forKey: .thirdPartyFirewallMissingExpectedRouteTableViolation)
        }
        if let thirdPartyFirewallMissingFirewallViolation = self.thirdPartyFirewallMissingFirewallViolation {
            try encodeContainer.encode(thirdPartyFirewallMissingFirewallViolation, forKey: .thirdPartyFirewallMissingFirewallViolation)
        }
        if let thirdPartyFirewallMissingSubnetViolation = self.thirdPartyFirewallMissingSubnetViolation {
            try encodeContainer.encode(thirdPartyFirewallMissingSubnetViolation, forKey: .thirdPartyFirewallMissingSubnetViolation)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let awsVPCSecurityGroupViolationDecoded = try containerValues.decodeIfPresent(FmsClientTypes.AwsVPCSecurityGroupViolation.self, forKey: .awsVPCSecurityGroupViolation)
        awsVPCSecurityGroupViolation = awsVPCSecurityGroupViolationDecoded
        let awsEc2NetworkInterfaceViolationDecoded = try containerValues.decodeIfPresent(FmsClientTypes.AwsEc2NetworkInterfaceViolation.self, forKey: .awsEc2NetworkInterfaceViolation)
        awsEc2NetworkInterfaceViolation = awsEc2NetworkInterfaceViolationDecoded
        let awsEc2InstanceViolationDecoded = try containerValues.decodeIfPresent(FmsClientTypes.AwsEc2InstanceViolation.self, forKey: .awsEc2InstanceViolation)
        awsEc2InstanceViolation = awsEc2InstanceViolationDecoded
        let networkFirewallMissingFirewallViolationDecoded = try containerValues.decodeIfPresent(FmsClientTypes.NetworkFirewallMissingFirewallViolation.self, forKey: .networkFirewallMissingFirewallViolation)
        networkFirewallMissingFirewallViolation = networkFirewallMissingFirewallViolationDecoded
        let networkFirewallMissingSubnetViolationDecoded = try containerValues.decodeIfPresent(FmsClientTypes.NetworkFirewallMissingSubnetViolation.self, forKey: .networkFirewallMissingSubnetViolation)
        networkFirewallMissingSubnetViolation = networkFirewallMissingSubnetViolationDecoded
        let networkFirewallMissingExpectedRTViolationDecoded = try containerValues.decodeIfPresent(FmsClientTypes.NetworkFirewallMissingExpectedRTViolation.self, forKey: .networkFirewallMissingExpectedRTViolation)
        networkFirewallMissingExpectedRTViolation = networkFirewallMissingExpectedRTViolationDecoded
        let networkFirewallPolicyModifiedViolationDecoded = try containerValues.decodeIfPresent(FmsClientTypes.NetworkFirewallPolicyModifiedViolation.self, forKey: .networkFirewallPolicyModifiedViolation)
        networkFirewallPolicyModifiedViolation = networkFirewallPolicyModifiedViolationDecoded
        let networkFirewallInternetTrafficNotInspectedViolationDecoded = try containerValues.decodeIfPresent(FmsClientTypes.NetworkFirewallInternetTrafficNotInspectedViolation.self, forKey: .networkFirewallInternetTrafficNotInspectedViolation)
        networkFirewallInternetTrafficNotInspectedViolation = networkFirewallInternetTrafficNotInspectedViolationDecoded
        let networkFirewallInvalidRouteConfigurationViolationDecoded = try containerValues.decodeIfPresent(FmsClientTypes.NetworkFirewallInvalidRouteConfigurationViolation.self, forKey: .networkFirewallInvalidRouteConfigurationViolation)
        networkFirewallInvalidRouteConfigurationViolation = networkFirewallInvalidRouteConfigurationViolationDecoded
        let networkFirewallBlackHoleRouteDetectedViolationDecoded = try containerValues.decodeIfPresent(FmsClientTypes.NetworkFirewallBlackHoleRouteDetectedViolation.self, forKey: .networkFirewallBlackHoleRouteDetectedViolation)
        networkFirewallBlackHoleRouteDetectedViolation = networkFirewallBlackHoleRouteDetectedViolationDecoded
        let networkFirewallUnexpectedFirewallRoutesViolationDecoded = try containerValues.decodeIfPresent(FmsClientTypes.NetworkFirewallUnexpectedFirewallRoutesViolation.self, forKey: .networkFirewallUnexpectedFirewallRoutesViolation)
        networkFirewallUnexpectedFirewallRoutesViolation = networkFirewallUnexpectedFirewallRoutesViolationDecoded
        let networkFirewallUnexpectedGatewayRoutesViolationDecoded = try containerValues.decodeIfPresent(FmsClientTypes.NetworkFirewallUnexpectedGatewayRoutesViolation.self, forKey: .networkFirewallUnexpectedGatewayRoutesViolation)
        networkFirewallUnexpectedGatewayRoutesViolation = networkFirewallUnexpectedGatewayRoutesViolationDecoded
        let networkFirewallMissingExpectedRoutesViolationDecoded = try containerValues.decodeIfPresent(FmsClientTypes.NetworkFirewallMissingExpectedRoutesViolation.self, forKey: .networkFirewallMissingExpectedRoutesViolation)
        networkFirewallMissingExpectedRoutesViolation = networkFirewallMissingExpectedRoutesViolationDecoded
        let dnsRuleGroupPriorityConflictViolationDecoded = try containerValues.decodeIfPresent(FmsClientTypes.DnsRuleGroupPriorityConflictViolation.self, forKey: .dnsRuleGroupPriorityConflictViolation)
        dnsRuleGroupPriorityConflictViolation = dnsRuleGroupPriorityConflictViolationDecoded
        let dnsDuplicateRuleGroupViolationDecoded = try containerValues.decodeIfPresent(FmsClientTypes.DnsDuplicateRuleGroupViolation.self, forKey: .dnsDuplicateRuleGroupViolation)
        dnsDuplicateRuleGroupViolation = dnsDuplicateRuleGroupViolationDecoded
        let dnsRuleGroupLimitExceededViolationDecoded = try containerValues.decodeIfPresent(FmsClientTypes.DnsRuleGroupLimitExceededViolation.self, forKey: .dnsRuleGroupLimitExceededViolation)
        dnsRuleGroupLimitExceededViolation = dnsRuleGroupLimitExceededViolationDecoded
        let possibleRemediationActionsDecoded = try containerValues.decodeIfPresent(FmsClientTypes.PossibleRemediationActions.self, forKey: .possibleRemediationActions)
        possibleRemediationActions = possibleRemediationActionsDecoded
        let firewallSubnetIsOutOfScopeViolationDecoded = try containerValues.decodeIfPresent(FmsClientTypes.FirewallSubnetIsOutOfScopeViolation.self, forKey: .firewallSubnetIsOutOfScopeViolation)
        firewallSubnetIsOutOfScopeViolation = firewallSubnetIsOutOfScopeViolationDecoded
        let routeHasOutOfScopeEndpointViolationDecoded = try containerValues.decodeIfPresent(FmsClientTypes.RouteHasOutOfScopeEndpointViolation.self, forKey: .routeHasOutOfScopeEndpointViolation)
        routeHasOutOfScopeEndpointViolation = routeHasOutOfScopeEndpointViolationDecoded
        let thirdPartyFirewallMissingFirewallViolationDecoded = try containerValues.decodeIfPresent(FmsClientTypes.ThirdPartyFirewallMissingFirewallViolation.self, forKey: .thirdPartyFirewallMissingFirewallViolation)
        thirdPartyFirewallMissingFirewallViolation = thirdPartyFirewallMissingFirewallViolationDecoded
        let thirdPartyFirewallMissingSubnetViolationDecoded = try containerValues.decodeIfPresent(FmsClientTypes.ThirdPartyFirewallMissingSubnetViolation.self, forKey: .thirdPartyFirewallMissingSubnetViolation)
        thirdPartyFirewallMissingSubnetViolation = thirdPartyFirewallMissingSubnetViolationDecoded
        let thirdPartyFirewallMissingExpectedRouteTableViolationDecoded = try containerValues.decodeIfPresent(FmsClientTypes.ThirdPartyFirewallMissingExpectedRouteTableViolation.self, forKey: .thirdPartyFirewallMissingExpectedRouteTableViolation)
        thirdPartyFirewallMissingExpectedRouteTableViolation = thirdPartyFirewallMissingExpectedRouteTableViolationDecoded
        let firewallSubnetMissingVPCEndpointViolationDecoded = try containerValues.decodeIfPresent(FmsClientTypes.FirewallSubnetMissingVPCEndpointViolation.self, forKey: .firewallSubnetMissingVPCEndpointViolation)
        firewallSubnetMissingVPCEndpointViolation = firewallSubnetMissingVPCEndpointViolationDecoded
    }
}
