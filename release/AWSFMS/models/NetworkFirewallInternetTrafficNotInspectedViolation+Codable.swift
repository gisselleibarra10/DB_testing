// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension FmsClientTypes.NetworkFirewallInternetTrafficNotInspectedViolation: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case actualFirewallSubnetRoutes = "ActualFirewallSubnetRoutes"
        case actualInternetGatewayRoutes = "ActualInternetGatewayRoutes"
        case currentFirewallSubnetRouteTable = "CurrentFirewallSubnetRouteTable"
        case currentInternetGatewayRouteTable = "CurrentInternetGatewayRouteTable"
        case expectedFirewallEndpoint = "ExpectedFirewallEndpoint"
        case expectedFirewallSubnetRoutes = "ExpectedFirewallSubnetRoutes"
        case expectedInternetGatewayRoutes = "ExpectedInternetGatewayRoutes"
        case firewallSubnetId = "FirewallSubnetId"
        case internetGatewayId = "InternetGatewayId"
        case isRouteTableUsedInDifferentAZ = "IsRouteTableUsedInDifferentAZ"
        case routeTableId = "RouteTableId"
        case subnetAvailabilityZone = "SubnetAvailabilityZone"
        case subnetId = "SubnetId"
        case violatingRoutes = "ViolatingRoutes"
        case vpcId = "VpcId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let actualFirewallSubnetRoutes = actualFirewallSubnetRoutes {
            var actualFirewallSubnetRoutesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .actualFirewallSubnetRoutes)
            for routes0 in actualFirewallSubnetRoutes {
                try actualFirewallSubnetRoutesContainer.encode(routes0)
            }
        }
        if let actualInternetGatewayRoutes = actualInternetGatewayRoutes {
            var actualInternetGatewayRoutesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .actualInternetGatewayRoutes)
            for routes0 in actualInternetGatewayRoutes {
                try actualInternetGatewayRoutesContainer.encode(routes0)
            }
        }
        if let currentFirewallSubnetRouteTable = self.currentFirewallSubnetRouteTable {
            try encodeContainer.encode(currentFirewallSubnetRouteTable, forKey: .currentFirewallSubnetRouteTable)
        }
        if let currentInternetGatewayRouteTable = self.currentInternetGatewayRouteTable {
            try encodeContainer.encode(currentInternetGatewayRouteTable, forKey: .currentInternetGatewayRouteTable)
        }
        if let expectedFirewallEndpoint = self.expectedFirewallEndpoint {
            try encodeContainer.encode(expectedFirewallEndpoint, forKey: .expectedFirewallEndpoint)
        }
        if let expectedFirewallSubnetRoutes = expectedFirewallSubnetRoutes {
            var expectedFirewallSubnetRoutesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .expectedFirewallSubnetRoutes)
            for expectedroutes0 in expectedFirewallSubnetRoutes {
                try expectedFirewallSubnetRoutesContainer.encode(expectedroutes0)
            }
        }
        if let expectedInternetGatewayRoutes = expectedInternetGatewayRoutes {
            var expectedInternetGatewayRoutesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .expectedInternetGatewayRoutes)
            for expectedroutes0 in expectedInternetGatewayRoutes {
                try expectedInternetGatewayRoutesContainer.encode(expectedroutes0)
            }
        }
        if let firewallSubnetId = self.firewallSubnetId {
            try encodeContainer.encode(firewallSubnetId, forKey: .firewallSubnetId)
        }
        if let internetGatewayId = self.internetGatewayId {
            try encodeContainer.encode(internetGatewayId, forKey: .internetGatewayId)
        }
        if isRouteTableUsedInDifferentAZ != false {
            try encodeContainer.encode(isRouteTableUsedInDifferentAZ, forKey: .isRouteTableUsedInDifferentAZ)
        }
        if let routeTableId = self.routeTableId {
            try encodeContainer.encode(routeTableId, forKey: .routeTableId)
        }
        if let subnetAvailabilityZone = self.subnetAvailabilityZone {
            try encodeContainer.encode(subnetAvailabilityZone, forKey: .subnetAvailabilityZone)
        }
        if let subnetId = self.subnetId {
            try encodeContainer.encode(subnetId, forKey: .subnetId)
        }
        if let violatingRoutes = violatingRoutes {
            var violatingRoutesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .violatingRoutes)
            for routes0 in violatingRoutes {
                try violatingRoutesContainer.encode(routes0)
            }
        }
        if let vpcId = self.vpcId {
            try encodeContainer.encode(vpcId, forKey: .vpcId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let subnetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .subnetId)
        subnetId = subnetIdDecoded
        let subnetAvailabilityZoneDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .subnetAvailabilityZone)
        subnetAvailabilityZone = subnetAvailabilityZoneDecoded
        let routeTableIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .routeTableId)
        routeTableId = routeTableIdDecoded
        let violatingRoutesContainer = try containerValues.decodeIfPresent([FmsClientTypes.Route?].self, forKey: .violatingRoutes)
        var violatingRoutesDecoded0:[FmsClientTypes.Route]? = nil
        if let violatingRoutesContainer = violatingRoutesContainer {
            violatingRoutesDecoded0 = [FmsClientTypes.Route]()
            for structure0 in violatingRoutesContainer {
                if let structure0 = structure0 {
                    violatingRoutesDecoded0?.append(structure0)
                }
            }
        }
        violatingRoutes = violatingRoutesDecoded0
        let isRouteTableUsedInDifferentAZDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .isRouteTableUsedInDifferentAZ) ?? false
        isRouteTableUsedInDifferentAZ = isRouteTableUsedInDifferentAZDecoded
        let currentFirewallSubnetRouteTableDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .currentFirewallSubnetRouteTable)
        currentFirewallSubnetRouteTable = currentFirewallSubnetRouteTableDecoded
        let expectedFirewallEndpointDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .expectedFirewallEndpoint)
        expectedFirewallEndpoint = expectedFirewallEndpointDecoded
        let firewallSubnetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .firewallSubnetId)
        firewallSubnetId = firewallSubnetIdDecoded
        let expectedFirewallSubnetRoutesContainer = try containerValues.decodeIfPresent([FmsClientTypes.ExpectedRoute?].self, forKey: .expectedFirewallSubnetRoutes)
        var expectedFirewallSubnetRoutesDecoded0:[FmsClientTypes.ExpectedRoute]? = nil
        if let expectedFirewallSubnetRoutesContainer = expectedFirewallSubnetRoutesContainer {
            expectedFirewallSubnetRoutesDecoded0 = [FmsClientTypes.ExpectedRoute]()
            for structure0 in expectedFirewallSubnetRoutesContainer {
                if let structure0 = structure0 {
                    expectedFirewallSubnetRoutesDecoded0?.append(structure0)
                }
            }
        }
        expectedFirewallSubnetRoutes = expectedFirewallSubnetRoutesDecoded0
        let actualFirewallSubnetRoutesContainer = try containerValues.decodeIfPresent([FmsClientTypes.Route?].self, forKey: .actualFirewallSubnetRoutes)
        var actualFirewallSubnetRoutesDecoded0:[FmsClientTypes.Route]? = nil
        if let actualFirewallSubnetRoutesContainer = actualFirewallSubnetRoutesContainer {
            actualFirewallSubnetRoutesDecoded0 = [FmsClientTypes.Route]()
            for structure0 in actualFirewallSubnetRoutesContainer {
                if let structure0 = structure0 {
                    actualFirewallSubnetRoutesDecoded0?.append(structure0)
                }
            }
        }
        actualFirewallSubnetRoutes = actualFirewallSubnetRoutesDecoded0
        let internetGatewayIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .internetGatewayId)
        internetGatewayId = internetGatewayIdDecoded
        let currentInternetGatewayRouteTableDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .currentInternetGatewayRouteTable)
        currentInternetGatewayRouteTable = currentInternetGatewayRouteTableDecoded
        let expectedInternetGatewayRoutesContainer = try containerValues.decodeIfPresent([FmsClientTypes.ExpectedRoute?].self, forKey: .expectedInternetGatewayRoutes)
        var expectedInternetGatewayRoutesDecoded0:[FmsClientTypes.ExpectedRoute]? = nil
        if let expectedInternetGatewayRoutesContainer = expectedInternetGatewayRoutesContainer {
            expectedInternetGatewayRoutesDecoded0 = [FmsClientTypes.ExpectedRoute]()
            for structure0 in expectedInternetGatewayRoutesContainer {
                if let structure0 = structure0 {
                    expectedInternetGatewayRoutesDecoded0?.append(structure0)
                }
            }
        }
        expectedInternetGatewayRoutes = expectedInternetGatewayRoutesDecoded0
        let actualInternetGatewayRoutesContainer = try containerValues.decodeIfPresent([FmsClientTypes.Route?].self, forKey: .actualInternetGatewayRoutes)
        var actualInternetGatewayRoutesDecoded0:[FmsClientTypes.Route]? = nil
        if let actualInternetGatewayRoutesContainer = actualInternetGatewayRoutesContainer {
            actualInternetGatewayRoutesDecoded0 = [FmsClientTypes.Route]()
            for structure0 in actualInternetGatewayRoutesContainer {
                if let structure0 = structure0 {
                    actualInternetGatewayRoutesDecoded0?.append(structure0)
                }
            }
        }
        actualInternetGatewayRoutes = actualInternetGatewayRoutesDecoded0
        let vpcIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vpcId)
        vpcId = vpcIdDecoded
    }
}
