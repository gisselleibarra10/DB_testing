// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension FmsClientTypes.NetworkFirewallMissingExpectedRoutesViolation: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case expectedRoutes = "ExpectedRoutes"
        case violationTarget = "ViolationTarget"
        case vpcId = "VpcId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let expectedRoutes = expectedRoutes {
            var expectedRoutesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .expectedRoutes)
            for expectedroutes0 in expectedRoutes {
                try expectedRoutesContainer.encode(expectedroutes0)
            }
        }
        if let violationTarget = self.violationTarget {
            try encodeContainer.encode(violationTarget, forKey: .violationTarget)
        }
        if let vpcId = self.vpcId {
            try encodeContainer.encode(vpcId, forKey: .vpcId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let violationTargetDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .violationTarget)
        violationTarget = violationTargetDecoded
        let expectedRoutesContainer = try containerValues.decodeIfPresent([FmsClientTypes.ExpectedRoute?].self, forKey: .expectedRoutes)
        var expectedRoutesDecoded0:[FmsClientTypes.ExpectedRoute]? = nil
        if let expectedRoutesContainer = expectedRoutesContainer {
            expectedRoutesDecoded0 = [FmsClientTypes.ExpectedRoute]()
            for structure0 in expectedRoutesContainer {
                if let structure0 = structure0 {
                    expectedRoutesDecoded0?.append(structure0)
                }
            }
        }
        expectedRoutes = expectedRoutesDecoded0
        let vpcIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vpcId)
        vpcId = vpcIdDecoded
    }
}
