// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension FmsClientTypes.RouteHasOutOfScopeEndpointViolation: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case currentFirewallSubnetRouteTable = "CurrentFirewallSubnetRouteTable"
        case currentInternetGatewayRouteTable = "CurrentInternetGatewayRouteTable"
        case firewallSubnetId = "FirewallSubnetId"
        case firewallSubnetRoutes = "FirewallSubnetRoutes"
        case internetGatewayId = "InternetGatewayId"
        case internetGatewayRoutes = "InternetGatewayRoutes"
        case routeTableId = "RouteTableId"
        case subnetAvailabilityZone = "SubnetAvailabilityZone"
        case subnetAvailabilityZoneId = "SubnetAvailabilityZoneId"
        case subnetId = "SubnetId"
        case violatingRoutes = "ViolatingRoutes"
        case vpcId = "VpcId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let currentFirewallSubnetRouteTable = self.currentFirewallSubnetRouteTable {
            try encodeContainer.encode(currentFirewallSubnetRouteTable, forKey: .currentFirewallSubnetRouteTable)
        }
        if let currentInternetGatewayRouteTable = self.currentInternetGatewayRouteTable {
            try encodeContainer.encode(currentInternetGatewayRouteTable, forKey: .currentInternetGatewayRouteTable)
        }
        if let firewallSubnetId = self.firewallSubnetId {
            try encodeContainer.encode(firewallSubnetId, forKey: .firewallSubnetId)
        }
        if let firewallSubnetRoutes = firewallSubnetRoutes {
            var firewallSubnetRoutesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .firewallSubnetRoutes)
            for routes0 in firewallSubnetRoutes {
                try firewallSubnetRoutesContainer.encode(routes0)
            }
        }
        if let internetGatewayId = self.internetGatewayId {
            try encodeContainer.encode(internetGatewayId, forKey: .internetGatewayId)
        }
        if let internetGatewayRoutes = internetGatewayRoutes {
            var internetGatewayRoutesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .internetGatewayRoutes)
            for routes0 in internetGatewayRoutes {
                try internetGatewayRoutesContainer.encode(routes0)
            }
        }
        if let routeTableId = self.routeTableId {
            try encodeContainer.encode(routeTableId, forKey: .routeTableId)
        }
        if let subnetAvailabilityZone = self.subnetAvailabilityZone {
            try encodeContainer.encode(subnetAvailabilityZone, forKey: .subnetAvailabilityZone)
        }
        if let subnetAvailabilityZoneId = self.subnetAvailabilityZoneId {
            try encodeContainer.encode(subnetAvailabilityZoneId, forKey: .subnetAvailabilityZoneId)
        }
        if let subnetId = self.subnetId {
            try encodeContainer.encode(subnetId, forKey: .subnetId)
        }
        if let violatingRoutes = violatingRoutes {
            var violatingRoutesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .violatingRoutes)
            for routes0 in violatingRoutes {
                try violatingRoutesContainer.encode(routes0)
            }
        }
        if let vpcId = self.vpcId {
            try encodeContainer.encode(vpcId, forKey: .vpcId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let subnetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .subnetId)
        subnetId = subnetIdDecoded
        let vpcIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vpcId)
        vpcId = vpcIdDecoded
        let routeTableIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .routeTableId)
        routeTableId = routeTableIdDecoded
        let violatingRoutesContainer = try containerValues.decodeIfPresent([FmsClientTypes.Route?].self, forKey: .violatingRoutes)
        var violatingRoutesDecoded0:[FmsClientTypes.Route]? = nil
        if let violatingRoutesContainer = violatingRoutesContainer {
            violatingRoutesDecoded0 = [FmsClientTypes.Route]()
            for structure0 in violatingRoutesContainer {
                if let structure0 = structure0 {
                    violatingRoutesDecoded0?.append(structure0)
                }
            }
        }
        violatingRoutes = violatingRoutesDecoded0
        let subnetAvailabilityZoneDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .subnetAvailabilityZone)
        subnetAvailabilityZone = subnetAvailabilityZoneDecoded
        let subnetAvailabilityZoneIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .subnetAvailabilityZoneId)
        subnetAvailabilityZoneId = subnetAvailabilityZoneIdDecoded
        let currentFirewallSubnetRouteTableDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .currentFirewallSubnetRouteTable)
        currentFirewallSubnetRouteTable = currentFirewallSubnetRouteTableDecoded
        let firewallSubnetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .firewallSubnetId)
        firewallSubnetId = firewallSubnetIdDecoded
        let firewallSubnetRoutesContainer = try containerValues.decodeIfPresent([FmsClientTypes.Route?].self, forKey: .firewallSubnetRoutes)
        var firewallSubnetRoutesDecoded0:[FmsClientTypes.Route]? = nil
        if let firewallSubnetRoutesContainer = firewallSubnetRoutesContainer {
            firewallSubnetRoutesDecoded0 = [FmsClientTypes.Route]()
            for structure0 in firewallSubnetRoutesContainer {
                if let structure0 = structure0 {
                    firewallSubnetRoutesDecoded0?.append(structure0)
                }
            }
        }
        firewallSubnetRoutes = firewallSubnetRoutesDecoded0
        let internetGatewayIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .internetGatewayId)
        internetGatewayId = internetGatewayIdDecoded
        let currentInternetGatewayRouteTableDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .currentInternetGatewayRouteTable)
        currentInternetGatewayRouteTable = currentInternetGatewayRouteTableDecoded
        let internetGatewayRoutesContainer = try containerValues.decodeIfPresent([FmsClientTypes.Route?].self, forKey: .internetGatewayRoutes)
        var internetGatewayRoutesDecoded0:[FmsClientTypes.Route]? = nil
        if let internetGatewayRoutesContainer = internetGatewayRoutesContainer {
            internetGatewayRoutesDecoded0 = [FmsClientTypes.Route]()
            for structure0 in internetGatewayRoutesContainer {
                if let structure0 = structure0 {
                    internetGatewayRoutesDecoded0?.append(structure0)
                }
            }
        }
        internetGatewayRoutes = internetGatewayRoutesDecoded0
    }
}
