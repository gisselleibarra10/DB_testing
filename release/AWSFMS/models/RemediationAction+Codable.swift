// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension FmsClientTypes.RemediationAction: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description = "Description"
        case eC2AssociateRouteTableAction = "EC2AssociateRouteTableAction"
        case eC2CopyRouteTableAction = "EC2CopyRouteTableAction"
        case eC2CreateRouteAction = "EC2CreateRouteAction"
        case eC2CreateRouteTableAction = "EC2CreateRouteTableAction"
        case eC2DeleteRouteAction = "EC2DeleteRouteAction"
        case eC2ReplaceRouteAction = "EC2ReplaceRouteAction"
        case eC2ReplaceRouteTableAssociationAction = "EC2ReplaceRouteTableAssociationAction"
        case fMSPolicyUpdateFirewallCreationConfigAction = "FMSPolicyUpdateFirewallCreationConfigAction"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let eC2AssociateRouteTableAction = self.eC2AssociateRouteTableAction {
            try encodeContainer.encode(eC2AssociateRouteTableAction, forKey: .eC2AssociateRouteTableAction)
        }
        if let eC2CopyRouteTableAction = self.eC2CopyRouteTableAction {
            try encodeContainer.encode(eC2CopyRouteTableAction, forKey: .eC2CopyRouteTableAction)
        }
        if let eC2CreateRouteAction = self.eC2CreateRouteAction {
            try encodeContainer.encode(eC2CreateRouteAction, forKey: .eC2CreateRouteAction)
        }
        if let eC2CreateRouteTableAction = self.eC2CreateRouteTableAction {
            try encodeContainer.encode(eC2CreateRouteTableAction, forKey: .eC2CreateRouteTableAction)
        }
        if let eC2DeleteRouteAction = self.eC2DeleteRouteAction {
            try encodeContainer.encode(eC2DeleteRouteAction, forKey: .eC2DeleteRouteAction)
        }
        if let eC2ReplaceRouteAction = self.eC2ReplaceRouteAction {
            try encodeContainer.encode(eC2ReplaceRouteAction, forKey: .eC2ReplaceRouteAction)
        }
        if let eC2ReplaceRouteTableAssociationAction = self.eC2ReplaceRouteTableAssociationAction {
            try encodeContainer.encode(eC2ReplaceRouteTableAssociationAction, forKey: .eC2ReplaceRouteTableAssociationAction)
        }
        if let fMSPolicyUpdateFirewallCreationConfigAction = self.fMSPolicyUpdateFirewallCreationConfigAction {
            try encodeContainer.encode(fMSPolicyUpdateFirewallCreationConfigAction, forKey: .fMSPolicyUpdateFirewallCreationConfigAction)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let eC2CreateRouteActionDecoded = try containerValues.decodeIfPresent(FmsClientTypes.EC2CreateRouteAction.self, forKey: .eC2CreateRouteAction)
        eC2CreateRouteAction = eC2CreateRouteActionDecoded
        let eC2ReplaceRouteActionDecoded = try containerValues.decodeIfPresent(FmsClientTypes.EC2ReplaceRouteAction.self, forKey: .eC2ReplaceRouteAction)
        eC2ReplaceRouteAction = eC2ReplaceRouteActionDecoded
        let eC2DeleteRouteActionDecoded = try containerValues.decodeIfPresent(FmsClientTypes.EC2DeleteRouteAction.self, forKey: .eC2DeleteRouteAction)
        eC2DeleteRouteAction = eC2DeleteRouteActionDecoded
        let eC2CopyRouteTableActionDecoded = try containerValues.decodeIfPresent(FmsClientTypes.EC2CopyRouteTableAction.self, forKey: .eC2CopyRouteTableAction)
        eC2CopyRouteTableAction = eC2CopyRouteTableActionDecoded
        let eC2ReplaceRouteTableAssociationActionDecoded = try containerValues.decodeIfPresent(FmsClientTypes.EC2ReplaceRouteTableAssociationAction.self, forKey: .eC2ReplaceRouteTableAssociationAction)
        eC2ReplaceRouteTableAssociationAction = eC2ReplaceRouteTableAssociationActionDecoded
        let eC2AssociateRouteTableActionDecoded = try containerValues.decodeIfPresent(FmsClientTypes.EC2AssociateRouteTableAction.self, forKey: .eC2AssociateRouteTableAction)
        eC2AssociateRouteTableAction = eC2AssociateRouteTableActionDecoded
        let eC2CreateRouteTableActionDecoded = try containerValues.decodeIfPresent(FmsClientTypes.EC2CreateRouteTableAction.self, forKey: .eC2CreateRouteTableAction)
        eC2CreateRouteTableAction = eC2CreateRouteTableActionDecoded
        let fMSPolicyUpdateFirewallCreationConfigActionDecoded = try containerValues.decodeIfPresent(FmsClientTypes.FMSPolicyUpdateFirewallCreationConfigAction.self, forKey: .fMSPolicyUpdateFirewallCreationConfigAction)
        fMSPolicyUpdateFirewallCreationConfigAction = fMSPolicyUpdateFirewallCreationConfigActionDecoded
    }
}
