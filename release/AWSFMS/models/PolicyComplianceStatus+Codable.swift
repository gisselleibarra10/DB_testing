// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension FmsClientTypes.PolicyComplianceStatus: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case evaluationResults = "EvaluationResults"
        case issueInfoMap = "IssueInfoMap"
        case lastUpdated = "LastUpdated"
        case memberAccount = "MemberAccount"
        case policyId = "PolicyId"
        case policyName = "PolicyName"
        case policyOwner = "PolicyOwner"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let evaluationResults = evaluationResults {
            var evaluationResultsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .evaluationResults)
            for evaluationresults0 in evaluationResults {
                try evaluationResultsContainer.encode(evaluationresults0)
            }
        }
        if let issueInfoMap = issueInfoMap {
            var issueInfoMapContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .issueInfoMap)
            for (dictKey0, issueinfomap0) in issueInfoMap {
                try issueInfoMapContainer.encode(issueinfomap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let lastUpdated = self.lastUpdated {
            try encodeContainer.encode(lastUpdated.timeIntervalSince1970, forKey: .lastUpdated)
        }
        if let memberAccount = self.memberAccount {
            try encodeContainer.encode(memberAccount, forKey: .memberAccount)
        }
        if let policyId = self.policyId {
            try encodeContainer.encode(policyId, forKey: .policyId)
        }
        if let policyName = self.policyName {
            try encodeContainer.encode(policyName, forKey: .policyName)
        }
        if let policyOwner = self.policyOwner {
            try encodeContainer.encode(policyOwner, forKey: .policyOwner)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let policyOwnerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policyOwner)
        policyOwner = policyOwnerDecoded
        let policyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policyId)
        policyId = policyIdDecoded
        let policyNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policyName)
        policyName = policyNameDecoded
        let memberAccountDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .memberAccount)
        memberAccount = memberAccountDecoded
        let evaluationResultsContainer = try containerValues.decodeIfPresent([FmsClientTypes.EvaluationResult?].self, forKey: .evaluationResults)
        var evaluationResultsDecoded0:[FmsClientTypes.EvaluationResult]? = nil
        if let evaluationResultsContainer = evaluationResultsContainer {
            evaluationResultsDecoded0 = [FmsClientTypes.EvaluationResult]()
            for structure0 in evaluationResultsContainer {
                if let structure0 = structure0 {
                    evaluationResultsDecoded0?.append(structure0)
                }
            }
        }
        evaluationResults = evaluationResultsDecoded0
        let lastUpdatedDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastUpdated)
        lastUpdated = lastUpdatedDecoded
        let issueInfoMapContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .issueInfoMap)
        var issueInfoMapDecoded0: [Swift.String:Swift.String]? = nil
        if let issueInfoMapContainer = issueInfoMapContainer {
            issueInfoMapDecoded0 = [Swift.String:Swift.String]()
            for (key0, detailedinfo0) in issueInfoMapContainer {
                if let detailedinfo0 = detailedinfo0 {
                    issueInfoMapDecoded0?[key0] = detailedinfo0
                }
            }
        }
        issueInfoMap = issueInfoMapDecoded0
    }
}
