// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension MediaPackageClientTypes {
    /// A configuration for accessing an external Secure Packager and Encoder Key Exchange (SPEKE) service that will provide encryption keys.
    public struct SpekeKeyProvider: Swift.Equatable {
        /// An Amazon Resource Name (ARN) of a Certificate Manager certificate that MediaPackage will use for enforcing secure end-to-end data transfer with the key provider service.
        public var certificateArn: Swift.String?
        /// Use encryptionContractConfiguration to configure one or more content encryption keys for your endpoints that use SPEKE 2.0. The encryption contract defines which content keys are used to encrypt the audio and video tracks in your stream. To configure the encryption contract, specify which audio and video encryption presets to use. Note the following considerations when using encryptionContractConfiguration: encryptionContractConfiguration can be used for DASH or CMAF endpoints that use SPEKE 2.0. SPEKE 2.0 relies on the CPIX 2.3 specification. You must disable key rotation for this endpoint by setting keyRotationIntervalSeconds to 0.
        public var encryptionContractConfiguration: MediaPackageClientTypes.EncryptionContractConfiguration?
        /// The resource ID to include in key requests.
        /// This member is required.
        public var resourceId: Swift.String?
        /// An Amazon Resource Name (ARN) of an IAM role that AWS Elemental MediaPackage will assume when accessing the key provider service.
        /// This member is required.
        public var roleArn: Swift.String?
        /// The system IDs to include in key requests.
        /// This member is required.
        public var systemIds: [Swift.String]?
        /// The URL of the external key provider service.
        /// This member is required.
        public var url: Swift.String?

        public init (
            certificateArn: Swift.String? = nil,
            encryptionContractConfiguration: MediaPackageClientTypes.EncryptionContractConfiguration? = nil,
            resourceId: Swift.String? = nil,
            roleArn: Swift.String? = nil,
            systemIds: [Swift.String]? = nil,
            url: Swift.String? = nil
        )
        {
            self.certificateArn = certificateArn
            self.encryptionContractConfiguration = encryptionContractConfiguration
            self.resourceId = resourceId
            self.roleArn = roleArn
            self.systemIds = systemIds
            self.url = url
        }
    }

}
