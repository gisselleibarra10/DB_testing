// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct DescribeOriginEndpointOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name (ARN) assigned to the OriginEndpoint.
    public var arn: Swift.String?
    /// CDN Authorization credentials
    public var authorization: MediaPackageClientTypes.Authorization?
    /// The ID of the Channel the OriginEndpoint is associated with.
    public var channelId: Swift.String?
    /// A Common Media Application Format (CMAF) packaging configuration.
    public var cmafPackage: MediaPackageClientTypes.CmafPackage?
    /// A Dynamic Adaptive Streaming over HTTP (DASH) packaging configuration.
    public var dashPackage: MediaPackageClientTypes.DashPackage?
    /// A short text description of the OriginEndpoint.
    public var description: Swift.String?
    /// An HTTP Live Streaming (HLS) packaging configuration.
    public var hlsPackage: MediaPackageClientTypes.HlsPackage?
    /// The ID of the OriginEndpoint.
    public var id: Swift.String?
    /// A short string appended to the end of the OriginEndpoint URL.
    public var manifestName: Swift.String?
    /// A Microsoft Smooth Streaming (MSS) packaging configuration.
    public var mssPackage: MediaPackageClientTypes.MssPackage?
    /// Control whether origination of video is allowed for this OriginEndpoint. If set to ALLOW, the OriginEndpoint may by requested, pursuant to any other form of access control. If set to DENY, the OriginEndpoint may not be requested. This can be helpful for Live to VOD harvesting, or for temporarily disabling origination
    public var origination: MediaPackageClientTypes.Origination?
    /// Maximum duration (seconds) of content to retain for startover playback. If not specified, startover playback will be disabled for the OriginEndpoint.
    public var startoverWindowSeconds: Swift.Int?
    /// A collection of tags associated with a resource
    public var tags: [Swift.String:Swift.String]?
    /// Amount of delay (seconds) to enforce on the playback of live content. If not specified, there will be no time delay in effect for the OriginEndpoint.
    public var timeDelaySeconds: Swift.Int?
    /// The URL of the packaged OriginEndpoint for consumption.
    public var url: Swift.String?
    /// A list of source IP CIDR blocks that will be allowed to access the OriginEndpoint.
    public var whitelist: [Swift.String]?

    public init (
        arn: Swift.String? = nil,
        authorization: MediaPackageClientTypes.Authorization? = nil,
        channelId: Swift.String? = nil,
        cmafPackage: MediaPackageClientTypes.CmafPackage? = nil,
        dashPackage: MediaPackageClientTypes.DashPackage? = nil,
        description: Swift.String? = nil,
        hlsPackage: MediaPackageClientTypes.HlsPackage? = nil,
        id: Swift.String? = nil,
        manifestName: Swift.String? = nil,
        mssPackage: MediaPackageClientTypes.MssPackage? = nil,
        origination: MediaPackageClientTypes.Origination? = nil,
        startoverWindowSeconds: Swift.Int? = nil,
        tags: [Swift.String:Swift.String]? = nil,
        timeDelaySeconds: Swift.Int? = nil,
        url: Swift.String? = nil,
        whitelist: [Swift.String]? = nil
    )
    {
        self.arn = arn
        self.authorization = authorization
        self.channelId = channelId
        self.cmafPackage = cmafPackage
        self.dashPackage = dashPackage
        self.description = description
        self.hlsPackage = hlsPackage
        self.id = id
        self.manifestName = manifestName
        self.mssPackage = mssPackage
        self.origination = origination
        self.startoverWindowSeconds = startoverWindowSeconds
        self.tags = tags
        self.timeDelaySeconds = timeDelaySeconds
        self.url = url
        self.whitelist = whitelist
    }
}
