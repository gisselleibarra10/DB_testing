// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension MediaPackageClientTypes.HlsPackage: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case adMarkers = "adMarkers"
        case adTriggers = "adTriggers"
        case adsOnDeliveryRestrictions = "adsOnDeliveryRestrictions"
        case encryption = "encryption"
        case includeDvbSubtitles = "includeDvbSubtitles"
        case includeIframeOnlyStream = "includeIframeOnlyStream"
        case playlistType = "playlistType"
        case playlistWindowSeconds = "playlistWindowSeconds"
        case programDateTimeIntervalSeconds = "programDateTimeIntervalSeconds"
        case segmentDurationSeconds = "segmentDurationSeconds"
        case streamSelection = "streamSelection"
        case useAudioRenditionGroup = "useAudioRenditionGroup"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let adMarkers = self.adMarkers {
            try encodeContainer.encode(adMarkers.rawValue, forKey: .adMarkers)
        }
        if let adTriggers = adTriggers {
            var adTriggersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .adTriggers)
            for adtriggers0 in adTriggers {
                try adTriggersContainer.encode(adtriggers0.rawValue)
            }
        }
        if let adsOnDeliveryRestrictions = self.adsOnDeliveryRestrictions {
            try encodeContainer.encode(adsOnDeliveryRestrictions.rawValue, forKey: .adsOnDeliveryRestrictions)
        }
        if let encryption = self.encryption {
            try encodeContainer.encode(encryption, forKey: .encryption)
        }
        if let includeDvbSubtitles = self.includeDvbSubtitles {
            try encodeContainer.encode(includeDvbSubtitles, forKey: .includeDvbSubtitles)
        }
        if let includeIframeOnlyStream = self.includeIframeOnlyStream {
            try encodeContainer.encode(includeIframeOnlyStream, forKey: .includeIframeOnlyStream)
        }
        if let playlistType = self.playlistType {
            try encodeContainer.encode(playlistType.rawValue, forKey: .playlistType)
        }
        if let playlistWindowSeconds = self.playlistWindowSeconds {
            try encodeContainer.encode(playlistWindowSeconds, forKey: .playlistWindowSeconds)
        }
        if let programDateTimeIntervalSeconds = self.programDateTimeIntervalSeconds {
            try encodeContainer.encode(programDateTimeIntervalSeconds, forKey: .programDateTimeIntervalSeconds)
        }
        if let segmentDurationSeconds = self.segmentDurationSeconds {
            try encodeContainer.encode(segmentDurationSeconds, forKey: .segmentDurationSeconds)
        }
        if let streamSelection = self.streamSelection {
            try encodeContainer.encode(streamSelection, forKey: .streamSelection)
        }
        if let useAudioRenditionGroup = self.useAudioRenditionGroup {
            try encodeContainer.encode(useAudioRenditionGroup, forKey: .useAudioRenditionGroup)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let adMarkersDecoded = try containerValues.decodeIfPresent(MediaPackageClientTypes.AdMarkers.self, forKey: .adMarkers)
        adMarkers = adMarkersDecoded
        let adTriggersContainer = try containerValues.decodeIfPresent([MediaPackageClientTypes.__AdTriggersElement?].self, forKey: .adTriggers)
        var adTriggersDecoded0:[MediaPackageClientTypes.__AdTriggersElement]? = nil
        if let adTriggersContainer = adTriggersContainer {
            adTriggersDecoded0 = [MediaPackageClientTypes.__AdTriggersElement]()
            for string0 in adTriggersContainer {
                if let string0 = string0 {
                    adTriggersDecoded0?.append(string0)
                }
            }
        }
        adTriggers = adTriggersDecoded0
        let adsOnDeliveryRestrictionsDecoded = try containerValues.decodeIfPresent(MediaPackageClientTypes.AdsOnDeliveryRestrictions.self, forKey: .adsOnDeliveryRestrictions)
        adsOnDeliveryRestrictions = adsOnDeliveryRestrictionsDecoded
        let encryptionDecoded = try containerValues.decodeIfPresent(MediaPackageClientTypes.HlsEncryption.self, forKey: .encryption)
        encryption = encryptionDecoded
        let includeDvbSubtitlesDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .includeDvbSubtitles)
        includeDvbSubtitles = includeDvbSubtitlesDecoded
        let includeIframeOnlyStreamDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .includeIframeOnlyStream)
        includeIframeOnlyStream = includeIframeOnlyStreamDecoded
        let playlistTypeDecoded = try containerValues.decodeIfPresent(MediaPackageClientTypes.PlaylistType.self, forKey: .playlistType)
        playlistType = playlistTypeDecoded
        let playlistWindowSecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .playlistWindowSeconds)
        playlistWindowSeconds = playlistWindowSecondsDecoded
        let programDateTimeIntervalSecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .programDateTimeIntervalSeconds)
        programDateTimeIntervalSeconds = programDateTimeIntervalSecondsDecoded
        let segmentDurationSecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .segmentDurationSeconds)
        segmentDurationSeconds = segmentDurationSecondsDecoded
        let streamSelectionDecoded = try containerValues.decodeIfPresent(MediaPackageClientTypes.StreamSelection.self, forKey: .streamSelection)
        streamSelection = streamSelectionDecoded
        let useAudioRenditionGroupDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .useAudioRenditionGroup)
        useAudioRenditionGroup = useAudioRenditionGroupDecoded
    }
}
