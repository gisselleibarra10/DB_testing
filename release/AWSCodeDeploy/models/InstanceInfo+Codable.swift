// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CodeDeployClientTypes.InstanceInfo: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deregisterTime
        case iamSessionArn
        case iamUserArn
        case instanceArn
        case instanceName
        case registerTime
        case tags
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let deregisterTime = self.deregisterTime {
            try encodeContainer.encode(deregisterTime.timeIntervalSince1970, forKey: .deregisterTime)
        }
        if let iamSessionArn = self.iamSessionArn {
            try encodeContainer.encode(iamSessionArn, forKey: .iamSessionArn)
        }
        if let iamUserArn = self.iamUserArn {
            try encodeContainer.encode(iamUserArn, forKey: .iamUserArn)
        }
        if let instanceArn = self.instanceArn {
            try encodeContainer.encode(instanceArn, forKey: .instanceArn)
        }
        if let instanceName = self.instanceName {
            try encodeContainer.encode(instanceName, forKey: .instanceName)
        }
        if let registerTime = self.registerTime {
            try encodeContainer.encode(registerTime.timeIntervalSince1970, forKey: .registerTime)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instanceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceName)
        instanceName = instanceNameDecoded
        let iamSessionArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .iamSessionArn)
        iamSessionArn = iamSessionArnDecoded
        let iamUserArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .iamUserArn)
        iamUserArn = iamUserArnDecoded
        let instanceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceArn)
        instanceArn = instanceArnDecoded
        let registerTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .registerTime)
        registerTime = registerTimeDecoded
        let deregisterTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .deregisterTime)
        deregisterTime = deregisterTimeDecoded
        let tagsContainer = try containerValues.decodeIfPresent([CodeDeployClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[CodeDeployClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [CodeDeployClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}
