// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateDeploymentInputBody: Swift.Equatable {
    let applicationName: Swift.String?
    let deploymentGroupName: Swift.String?
    let revision: CodeDeployClientTypes.RevisionLocation?
    let deploymentConfigName: Swift.String?
    let description: Swift.String?
    let ignoreApplicationStopFailures: Swift.Bool
    let targetInstances: CodeDeployClientTypes.TargetInstances?
    let autoRollbackConfiguration: CodeDeployClientTypes.AutoRollbackConfiguration?
    let updateOutdatedInstancesOnly: Swift.Bool
    let fileExistsBehavior: CodeDeployClientTypes.FileExistsBehavior?
}

extension CreateDeploymentInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applicationName
        case autoRollbackConfiguration
        case deploymentConfigName
        case deploymentGroupName
        case description
        case fileExistsBehavior
        case ignoreApplicationStopFailures
        case revision
        case targetInstances
        case updateOutdatedInstancesOnly
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let applicationNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .applicationName)
        applicationName = applicationNameDecoded
        let deploymentGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deploymentGroupName)
        deploymentGroupName = deploymentGroupNameDecoded
        let revisionDecoded = try containerValues.decodeIfPresent(CodeDeployClientTypes.RevisionLocation.self, forKey: .revision)
        revision = revisionDecoded
        let deploymentConfigNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deploymentConfigName)
        deploymentConfigName = deploymentConfigNameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let ignoreApplicationStopFailuresDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .ignoreApplicationStopFailures) ?? false
        ignoreApplicationStopFailures = ignoreApplicationStopFailuresDecoded
        let targetInstancesDecoded = try containerValues.decodeIfPresent(CodeDeployClientTypes.TargetInstances.self, forKey: .targetInstances)
        targetInstances = targetInstancesDecoded
        let autoRollbackConfigurationDecoded = try containerValues.decodeIfPresent(CodeDeployClientTypes.AutoRollbackConfiguration.self, forKey: .autoRollbackConfiguration)
        autoRollbackConfiguration = autoRollbackConfigurationDecoded
        let updateOutdatedInstancesOnlyDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .updateOutdatedInstancesOnly) ?? false
        updateOutdatedInstancesOnly = updateOutdatedInstancesOnlyDecoded
        let fileExistsBehaviorDecoded = try containerValues.decodeIfPresent(CodeDeployClientTypes.FileExistsBehavior.self, forKey: .fileExistsBehavior)
        fileExistsBehavior = fileExistsBehaviorDecoded
    }
}
