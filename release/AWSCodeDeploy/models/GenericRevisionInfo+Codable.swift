// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CodeDeployClientTypes.GenericRevisionInfo: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deploymentGroups
        case description
        case firstUsedTime
        case lastUsedTime
        case registerTime
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let deploymentGroups = deploymentGroups {
            var deploymentGroupsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .deploymentGroups)
            for deploymentgroupslist0 in deploymentGroups {
                try deploymentGroupsContainer.encode(deploymentgroupslist0)
            }
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let firstUsedTime = self.firstUsedTime {
            try encodeContainer.encode(firstUsedTime.timeIntervalSince1970, forKey: .firstUsedTime)
        }
        if let lastUsedTime = self.lastUsedTime {
            try encodeContainer.encode(lastUsedTime.timeIntervalSince1970, forKey: .lastUsedTime)
        }
        if let registerTime = self.registerTime {
            try encodeContainer.encode(registerTime.timeIntervalSince1970, forKey: .registerTime)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let deploymentGroupsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .deploymentGroups)
        var deploymentGroupsDecoded0:[Swift.String]? = nil
        if let deploymentGroupsContainer = deploymentGroupsContainer {
            deploymentGroupsDecoded0 = [Swift.String]()
            for string0 in deploymentGroupsContainer {
                if let string0 = string0 {
                    deploymentGroupsDecoded0?.append(string0)
                }
            }
        }
        deploymentGroups = deploymentGroupsDecoded0
        let firstUsedTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .firstUsedTime)
        firstUsedTime = firstUsedTimeDecoded
        let lastUsedTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastUsedTime)
        lastUsedTime = lastUsedTimeDecoded
        let registerTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .registerTime)
        registerTime = registerTimeDecoded
    }
}
