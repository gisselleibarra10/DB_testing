// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListDeploymentsInputBody: Swift.Equatable {
    let applicationName: Swift.String?
    let deploymentGroupName: Swift.String?
    let externalId: Swift.String?
    let includeOnlyStatuses: [CodeDeployClientTypes.DeploymentStatus]?
    let createTimeRange: CodeDeployClientTypes.TimeRange?
    let nextToken: Swift.String?
}

extension ListDeploymentsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applicationName
        case createTimeRange
        case deploymentGroupName
        case externalId
        case includeOnlyStatuses
        case nextToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let applicationNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .applicationName)
        applicationName = applicationNameDecoded
        let deploymentGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deploymentGroupName)
        deploymentGroupName = deploymentGroupNameDecoded
        let externalIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .externalId)
        externalId = externalIdDecoded
        let includeOnlyStatusesContainer = try containerValues.decodeIfPresent([CodeDeployClientTypes.DeploymentStatus?].self, forKey: .includeOnlyStatuses)
        var includeOnlyStatusesDecoded0:[CodeDeployClientTypes.DeploymentStatus]? = nil
        if let includeOnlyStatusesContainer = includeOnlyStatusesContainer {
            includeOnlyStatusesDecoded0 = [CodeDeployClientTypes.DeploymentStatus]()
            for string0 in includeOnlyStatusesContainer {
                if let string0 = string0 {
                    includeOnlyStatusesDecoded0?.append(string0)
                }
            }
        }
        includeOnlyStatuses = includeOnlyStatusesDecoded0
        let createTimeRangeDecoded = try containerValues.decodeIfPresent(CodeDeployClientTypes.TimeRange.self, forKey: .createTimeRange)
        createTimeRange = createTimeRangeDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
