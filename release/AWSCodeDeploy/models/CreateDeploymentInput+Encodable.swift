// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CreateDeploymentInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applicationName
        case autoRollbackConfiguration
        case deploymentConfigName
        case deploymentGroupName
        case description
        case fileExistsBehavior
        case ignoreApplicationStopFailures
        case revision
        case targetInstances
        case updateOutdatedInstancesOnly
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let applicationName = self.applicationName {
            try encodeContainer.encode(applicationName, forKey: .applicationName)
        }
        if let autoRollbackConfiguration = self.autoRollbackConfiguration {
            try encodeContainer.encode(autoRollbackConfiguration, forKey: .autoRollbackConfiguration)
        }
        if let deploymentConfigName = self.deploymentConfigName {
            try encodeContainer.encode(deploymentConfigName, forKey: .deploymentConfigName)
        }
        if let deploymentGroupName = self.deploymentGroupName {
            try encodeContainer.encode(deploymentGroupName, forKey: .deploymentGroupName)
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let fileExistsBehavior = self.fileExistsBehavior {
            try encodeContainer.encode(fileExistsBehavior.rawValue, forKey: .fileExistsBehavior)
        }
        if ignoreApplicationStopFailures != false {
            try encodeContainer.encode(ignoreApplicationStopFailures, forKey: .ignoreApplicationStopFailures)
        }
        if let revision = self.revision {
            try encodeContainer.encode(revision, forKey: .revision)
        }
        if let targetInstances = self.targetInstances {
            try encodeContainer.encode(targetInstances, forKey: .targetInstances)
        }
        if updateOutdatedInstancesOnly != false {
            try encodeContainer.encode(updateOutdatedInstancesOnly, forKey: .updateOutdatedInstancesOnly)
        }
    }
}
