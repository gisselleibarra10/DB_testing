// Code generated by smithy-swift-codegen. DO NOT EDIT!

import AWSClientRuntime
import ClientRuntime

extension RegisterOnPremisesInstanceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension RegisterOnPremisesInstanceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "IamArnRequiredException" : self = .iamArnRequiredException(try IamArnRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "IamSessionArnAlreadyRegisteredException" : self = .iamSessionArnAlreadyRegisteredException(try IamSessionArnAlreadyRegisteredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "IamUserArnAlreadyRegisteredException" : self = .iamUserArnAlreadyRegisteredException(try IamUserArnAlreadyRegisteredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "IamUserArnRequiredException" : self = .iamUserArnRequiredException(try IamUserArnRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InstanceNameAlreadyRegisteredException" : self = .instanceNameAlreadyRegisteredException(try InstanceNameAlreadyRegisteredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InstanceNameRequiredException" : self = .instanceNameRequiredException(try InstanceNameRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidIamSessionArnException" : self = .invalidIamSessionArnException(try InvalidIamSessionArnException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidIamUserArnException" : self = .invalidIamUserArnException(try InvalidIamUserArnException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInstanceNameException" : self = .invalidInstanceNameException(try InvalidInstanceNameException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MultipleIamArnsProvidedException" : self = .multipleIamArnsProvidedException(try MultipleIamArnsProvidedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}
