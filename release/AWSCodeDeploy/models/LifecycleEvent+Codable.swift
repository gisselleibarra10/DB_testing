// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CodeDeployClientTypes.LifecycleEvent: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case diagnostics
        case endTime
        case lifecycleEventName
        case startTime
        case status
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let diagnostics = self.diagnostics {
            try encodeContainer.encode(diagnostics, forKey: .diagnostics)
        }
        if let endTime = self.endTime {
            try encodeContainer.encode(endTime.timeIntervalSince1970, forKey: .endTime)
        }
        if let lifecycleEventName = self.lifecycleEventName {
            try encodeContainer.encode(lifecycleEventName, forKey: .lifecycleEventName)
        }
        if let startTime = self.startTime {
            try encodeContainer.encode(startTime.timeIntervalSince1970, forKey: .startTime)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let lifecycleEventNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lifecycleEventName)
        lifecycleEventName = lifecycleEventNameDecoded
        let diagnosticsDecoded = try containerValues.decodeIfPresent(CodeDeployClientTypes.Diagnostics.self, forKey: .diagnostics)
        diagnostics = diagnosticsDecoded
        let startTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .startTime)
        startTime = startTimeDecoded
        let endTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .endTime)
        endTime = endTimeDecoded
        let statusDecoded = try containerValues.decodeIfPresent(CodeDeployClientTypes.LifecycleEventStatus.self, forKey: .status)
        status = statusDecoded
    }
}
