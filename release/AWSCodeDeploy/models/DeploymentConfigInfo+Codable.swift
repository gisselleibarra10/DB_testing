// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CodeDeployClientTypes.DeploymentConfigInfo: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case computePlatform
        case createTime
        case deploymentConfigId
        case deploymentConfigName
        case minimumHealthyHosts
        case trafficRoutingConfig
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let computePlatform = self.computePlatform {
            try encodeContainer.encode(computePlatform.rawValue, forKey: .computePlatform)
        }
        if let createTime = self.createTime {
            try encodeContainer.encode(createTime.timeIntervalSince1970, forKey: .createTime)
        }
        if let deploymentConfigId = self.deploymentConfigId {
            try encodeContainer.encode(deploymentConfigId, forKey: .deploymentConfigId)
        }
        if let deploymentConfigName = self.deploymentConfigName {
            try encodeContainer.encode(deploymentConfigName, forKey: .deploymentConfigName)
        }
        if let minimumHealthyHosts = self.minimumHealthyHosts {
            try encodeContainer.encode(minimumHealthyHosts, forKey: .minimumHealthyHosts)
        }
        if let trafficRoutingConfig = self.trafficRoutingConfig {
            try encodeContainer.encode(trafficRoutingConfig, forKey: .trafficRoutingConfig)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deploymentConfigIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deploymentConfigId)
        deploymentConfigId = deploymentConfigIdDecoded
        let deploymentConfigNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deploymentConfigName)
        deploymentConfigName = deploymentConfigNameDecoded
        let minimumHealthyHostsDecoded = try containerValues.decodeIfPresent(CodeDeployClientTypes.MinimumHealthyHosts.self, forKey: .minimumHealthyHosts)
        minimumHealthyHosts = minimumHealthyHostsDecoded
        let createTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createTime)
        createTime = createTimeDecoded
        let computePlatformDecoded = try containerValues.decodeIfPresent(CodeDeployClientTypes.ComputePlatform.self, forKey: .computePlatform)
        computePlatform = computePlatformDecoded
        let trafficRoutingConfigDecoded = try containerValues.decodeIfPresent(CodeDeployClientTypes.TrafficRoutingConfig.self, forKey: .trafficRoutingConfig)
        trafficRoutingConfig = trafficRoutingConfigDecoded
    }
}
