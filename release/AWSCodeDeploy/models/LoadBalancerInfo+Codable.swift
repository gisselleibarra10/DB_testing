// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CodeDeployClientTypes.LoadBalancerInfo: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case elbInfoList
        case targetGroupInfoList
        case targetGroupPairInfoList
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let elbInfoList = elbInfoList {
            var elbInfoListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .elbInfoList)
            for elbinfolist0 in elbInfoList {
                try elbInfoListContainer.encode(elbinfolist0)
            }
        }
        if let targetGroupInfoList = targetGroupInfoList {
            var targetGroupInfoListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .targetGroupInfoList)
            for targetgroupinfolist0 in targetGroupInfoList {
                try targetGroupInfoListContainer.encode(targetgroupinfolist0)
            }
        }
        if let targetGroupPairInfoList = targetGroupPairInfoList {
            var targetGroupPairInfoListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .targetGroupPairInfoList)
            for targetgrouppairinfolist0 in targetGroupPairInfoList {
                try targetGroupPairInfoListContainer.encode(targetgrouppairinfolist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let elbInfoListContainer = try containerValues.decodeIfPresent([CodeDeployClientTypes.ELBInfo?].self, forKey: .elbInfoList)
        var elbInfoListDecoded0:[CodeDeployClientTypes.ELBInfo]? = nil
        if let elbInfoListContainer = elbInfoListContainer {
            elbInfoListDecoded0 = [CodeDeployClientTypes.ELBInfo]()
            for structure0 in elbInfoListContainer {
                if let structure0 = structure0 {
                    elbInfoListDecoded0?.append(structure0)
                }
            }
        }
        elbInfoList = elbInfoListDecoded0
        let targetGroupInfoListContainer = try containerValues.decodeIfPresent([CodeDeployClientTypes.TargetGroupInfo?].self, forKey: .targetGroupInfoList)
        var targetGroupInfoListDecoded0:[CodeDeployClientTypes.TargetGroupInfo]? = nil
        if let targetGroupInfoListContainer = targetGroupInfoListContainer {
            targetGroupInfoListDecoded0 = [CodeDeployClientTypes.TargetGroupInfo]()
            for structure0 in targetGroupInfoListContainer {
                if let structure0 = structure0 {
                    targetGroupInfoListDecoded0?.append(structure0)
                }
            }
        }
        targetGroupInfoList = targetGroupInfoListDecoded0
        let targetGroupPairInfoListContainer = try containerValues.decodeIfPresent([CodeDeployClientTypes.TargetGroupPairInfo?].self, forKey: .targetGroupPairInfoList)
        var targetGroupPairInfoListDecoded0:[CodeDeployClientTypes.TargetGroupPairInfo]? = nil
        if let targetGroupPairInfoListContainer = targetGroupPairInfoListContainer {
            targetGroupPairInfoListDecoded0 = [CodeDeployClientTypes.TargetGroupPairInfo]()
            for structure0 in targetGroupPairInfoListContainer {
                if let structure0 = structure0 {
                    targetGroupPairInfoListDecoded0?.append(structure0)
                }
            }
        }
        targetGroupPairInfoList = targetGroupPairInfoListDecoded0
    }
}
