// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// Represents the input of a CreateDeploymentGroup operation.
public struct CreateDeploymentGroupInput: Swift.Equatable {
    /// Information to add about Amazon CloudWatch alarms when the deployment group is created.
    public var alarmConfiguration: CodeDeployClientTypes.AlarmConfiguration?
    /// The name of an AWS CodeDeploy application associated with the IAM user or AWS account.
    /// This member is required.
    public var applicationName: Swift.String?
    /// Configuration information for an automatic rollback that is added when a deployment group is created.
    public var autoRollbackConfiguration: CodeDeployClientTypes.AutoRollbackConfiguration?
    /// A list of associated Amazon EC2 Auto Scaling groups.
    public var autoScalingGroups: [Swift.String]?
    /// Information about blue/green deployment options for a deployment group.
    public var blueGreenDeploymentConfiguration: CodeDeployClientTypes.BlueGreenDeploymentConfiguration?
    /// If specified, the deployment configuration name can be either one of the predefined configurations provided with AWS CodeDeploy or a custom deployment configuration that you create by calling the create deployment configuration operation. CodeDeployDefault.OneAtATime is the default deployment configuration. It is used if a configuration isn't specified for the deployment or deployment group. For more information about the predefined deployment configurations in AWS CodeDeploy, see [Working with Deployment Configurations in CodeDeploy](https://docs.aws.amazon.com/codedeploy/latest/userguide/deployment-configurations.html) in the AWS CodeDeploy User Guide.
    public var deploymentConfigName: Swift.String?
    /// The name of a new deployment group for the specified application.
    /// This member is required.
    public var deploymentGroupName: Swift.String?
    /// Information about the type of deployment, in-place or blue/green, that you want to run and whether to route deployment traffic behind a load balancer.
    public var deploymentStyle: CodeDeployClientTypes.DeploymentStyle?
    /// The Amazon EC2 tags on which to filter. The deployment group includes EC2 instances with any of the specified tags. Cannot be used in the same call as ec2TagSet.
    public var ec2TagFilters: [CodeDeployClientTypes.EC2TagFilter]?
    /// Information about groups of tags applied to EC2 instances. The deployment group includes only EC2 instances identified by all the tag groups. Cannot be used in the same call as ec2TagFilters.
    public var ec2TagSet: CodeDeployClientTypes.EC2TagSet?
    /// The target Amazon ECS services in the deployment group. This applies only to deployment groups that use the Amazon ECS compute platform. A target Amazon ECS service is specified as an Amazon ECS cluster and service name pair using the format :.
    public var ecsServices: [CodeDeployClientTypes.ECSService]?
    /// Information about the load balancer used in a deployment.
    public var loadBalancerInfo: CodeDeployClientTypes.LoadBalancerInfo?
    /// The on-premises instance tags on which to filter. The deployment group includes on-premises instances with any of the specified tags. Cannot be used in the same call as OnPremisesTagSet.
    public var onPremisesInstanceTagFilters: [CodeDeployClientTypes.TagFilter]?
    /// Information about groups of tags applied to on-premises instances. The deployment group includes only on-premises instances identified by all of the tag groups. Cannot be used in the same call as onPremisesInstanceTagFilters.
    public var onPremisesTagSet: CodeDeployClientTypes.OnPremisesTagSet?
    /// Indicates what happens when new EC2 instances are launched mid-deployment and do not receive the deployed application revision. If this option is set to UPDATE or is unspecified, CodeDeploy initiates one or more 'auto-update outdated instances' deployments to apply the deployed application revision to the new EC2 instances. If this option is set to IGNORE, CodeDeploy does not initiate a deployment to update the new EC2 instances. This may result in instances having different revisions.
    public var outdatedInstancesStrategy: CodeDeployClientTypes.OutdatedInstancesStrategy?
    /// A service role Amazon Resource Name (ARN) that allows AWS CodeDeploy to act on the user's behalf when interacting with AWS services.
    /// This member is required.
    public var serviceRoleArn: Swift.String?
    /// The metadata that you apply to CodeDeploy deployment groups to help you organize and categorize them. Each tag consists of a key and an optional value, both of which you define.
    public var tags: [CodeDeployClientTypes.Tag]?
    /// Information about triggers to create when the deployment group is created. For examples, see [Create a Trigger for an AWS CodeDeploy Event](https://docs.aws.amazon.com/codedeploy/latest/userguide/how-to-notify-sns.html) in the AWS CodeDeploy User Guide.
    public var triggerConfigurations: [CodeDeployClientTypes.TriggerConfig]?

    public init (
        alarmConfiguration: CodeDeployClientTypes.AlarmConfiguration? = nil,
        applicationName: Swift.String? = nil,
        autoRollbackConfiguration: CodeDeployClientTypes.AutoRollbackConfiguration? = nil,
        autoScalingGroups: [Swift.String]? = nil,
        blueGreenDeploymentConfiguration: CodeDeployClientTypes.BlueGreenDeploymentConfiguration? = nil,
        deploymentConfigName: Swift.String? = nil,
        deploymentGroupName: Swift.String? = nil,
        deploymentStyle: CodeDeployClientTypes.DeploymentStyle? = nil,
        ec2TagFilters: [CodeDeployClientTypes.EC2TagFilter]? = nil,
        ec2TagSet: CodeDeployClientTypes.EC2TagSet? = nil,
        ecsServices: [CodeDeployClientTypes.ECSService]? = nil,
        loadBalancerInfo: CodeDeployClientTypes.LoadBalancerInfo? = nil,
        onPremisesInstanceTagFilters: [CodeDeployClientTypes.TagFilter]? = nil,
        onPremisesTagSet: CodeDeployClientTypes.OnPremisesTagSet? = nil,
        outdatedInstancesStrategy: CodeDeployClientTypes.OutdatedInstancesStrategy? = nil,
        serviceRoleArn: Swift.String? = nil,
        tags: [CodeDeployClientTypes.Tag]? = nil,
        triggerConfigurations: [CodeDeployClientTypes.TriggerConfig]? = nil
    )
    {
        self.alarmConfiguration = alarmConfiguration
        self.applicationName = applicationName
        self.autoRollbackConfiguration = autoRollbackConfiguration
        self.autoScalingGroups = autoScalingGroups
        self.blueGreenDeploymentConfiguration = blueGreenDeploymentConfiguration
        self.deploymentConfigName = deploymentConfigName
        self.deploymentGroupName = deploymentGroupName
        self.deploymentStyle = deploymentStyle
        self.ec2TagFilters = ec2TagFilters
        self.ec2TagSet = ec2TagSet
        self.ecsServices = ecsServices
        self.loadBalancerInfo = loadBalancerInfo
        self.onPremisesInstanceTagFilters = onPremisesInstanceTagFilters
        self.onPremisesTagSet = onPremisesTagSet
        self.outdatedInstancesStrategy = outdatedInstancesStrategy
        self.serviceRoleArn = serviceRoleArn
        self.tags = tags
        self.triggerConfigurations = triggerConfigurations
    }
}
