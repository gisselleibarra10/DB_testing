// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// Represents the input of a CreateDeploymentConfig operation.
public struct CreateDeploymentConfigInput: Swift.Equatable {
    /// The destination platform type for the deployment (Lambda, Server, or ECS).
    public var computePlatform: CodeDeployClientTypes.ComputePlatform?
    /// The name of the deployment configuration to create.
    /// This member is required.
    public var deploymentConfigName: Swift.String?
    /// The minimum number of healthy instances that should be available at any time during the deployment. There are two parameters expected in the input: type and value. The type parameter takes either of the following values:
    ///
    /// * HOST_COUNT: The value parameter represents the minimum number of healthy instances as an absolute value.
    ///
    /// * FLEET_PERCENT: The value parameter represents the minimum number of healthy instances as a percentage of the total number of instances in the deployment. If you specify FLEET_PERCENT, at the start of the deployment, AWS CodeDeploy converts the percentage to the equivalent number of instances and rounds up fractional instances.
    ///
    ///
    /// The value parameter takes an integer. For example, to set a minimum of 95% healthy instance, specify a type of FLEET_PERCENT and a value of 95.
    public var minimumHealthyHosts: CodeDeployClientTypes.MinimumHealthyHosts?
    /// The configuration that specifies how the deployment traffic is routed.
    public var trafficRoutingConfig: CodeDeployClientTypes.TrafficRoutingConfig?

    public init (
        computePlatform: CodeDeployClientTypes.ComputePlatform? = nil,
        deploymentConfigName: Swift.String? = nil,
        minimumHealthyHosts: CodeDeployClientTypes.MinimumHealthyHosts? = nil,
        trafficRoutingConfig: CodeDeployClientTypes.TrafficRoutingConfig? = nil
    )
    {
        self.computePlatform = computePlatform
        self.deploymentConfigName = deploymentConfigName
        self.minimumHealthyHosts = minimumHealthyHosts
        self.trafficRoutingConfig = trafficRoutingConfig
    }
}
