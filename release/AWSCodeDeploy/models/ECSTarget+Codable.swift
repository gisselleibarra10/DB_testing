// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CodeDeployClientTypes.ECSTarget: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deploymentId
        case lastUpdatedAt
        case lifecycleEvents
        case status
        case targetArn
        case targetId
        case taskSetsInfo
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let deploymentId = self.deploymentId {
            try encodeContainer.encode(deploymentId, forKey: .deploymentId)
        }
        if let lastUpdatedAt = self.lastUpdatedAt {
            try encodeContainer.encode(lastUpdatedAt.timeIntervalSince1970, forKey: .lastUpdatedAt)
        }
        if let lifecycleEvents = lifecycleEvents {
            var lifecycleEventsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .lifecycleEvents)
            for lifecycleeventlist0 in lifecycleEvents {
                try lifecycleEventsContainer.encode(lifecycleeventlist0)
            }
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let targetArn = self.targetArn {
            try encodeContainer.encode(targetArn, forKey: .targetArn)
        }
        if let targetId = self.targetId {
            try encodeContainer.encode(targetId, forKey: .targetId)
        }
        if let taskSetsInfo = taskSetsInfo {
            var taskSetsInfoContainer = encodeContainer.nestedUnkeyedContainer(forKey: .taskSetsInfo)
            for ecstasksetlist0 in taskSetsInfo {
                try taskSetsInfoContainer.encode(ecstasksetlist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deploymentIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deploymentId)
        deploymentId = deploymentIdDecoded
        let targetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .targetId)
        targetId = targetIdDecoded
        let targetArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .targetArn)
        targetArn = targetArnDecoded
        let lastUpdatedAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastUpdatedAt)
        lastUpdatedAt = lastUpdatedAtDecoded
        let lifecycleEventsContainer = try containerValues.decodeIfPresent([CodeDeployClientTypes.LifecycleEvent?].self, forKey: .lifecycleEvents)
        var lifecycleEventsDecoded0:[CodeDeployClientTypes.LifecycleEvent]? = nil
        if let lifecycleEventsContainer = lifecycleEventsContainer {
            lifecycleEventsDecoded0 = [CodeDeployClientTypes.LifecycleEvent]()
            for structure0 in lifecycleEventsContainer {
                if let structure0 = structure0 {
                    lifecycleEventsDecoded0?.append(structure0)
                }
            }
        }
        lifecycleEvents = lifecycleEventsDecoded0
        let statusDecoded = try containerValues.decodeIfPresent(CodeDeployClientTypes.TargetStatus.self, forKey: .status)
        status = statusDecoded
        let taskSetsInfoContainer = try containerValues.decodeIfPresent([CodeDeployClientTypes.ECSTaskSet?].self, forKey: .taskSetsInfo)
        var taskSetsInfoDecoded0:[CodeDeployClientTypes.ECSTaskSet]? = nil
        if let taskSetsInfoContainer = taskSetsInfoContainer {
            taskSetsInfoDecoded0 = [CodeDeployClientTypes.ECSTaskSet]()
            for structure0 in taskSetsInfoContainer {
                if let structure0 = structure0 {
                    taskSetsInfoDecoded0?.append(structure0)
                }
            }
        }
        taskSetsInfo = taskSetsInfoDecoded0
    }
}
