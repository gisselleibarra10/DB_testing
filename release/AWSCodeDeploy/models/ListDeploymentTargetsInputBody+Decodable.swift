// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListDeploymentTargetsInputBody: Swift.Equatable {
    let deploymentId: Swift.String?
    let nextToken: Swift.String?
    let targetFilters: [Swift.String:[Swift.String]]?
}

extension ListDeploymentTargetsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deploymentId
        case nextToken
        case targetFilters
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deploymentIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deploymentId)
        deploymentId = deploymentIdDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let targetFiltersContainer = try containerValues.decodeIfPresent([Swift.String: [Swift.String?]?].self, forKey: .targetFilters)
        var targetFiltersDecoded0: [Swift.String:[Swift.String]]? = nil
        if let targetFiltersContainer = targetFiltersContainer {
            targetFiltersDecoded0 = [Swift.String:[Swift.String]]()
            for (key0, filtervaluelist0) in targetFiltersContainer {
                var filtervaluelist0Decoded0: [Swift.String]? = nil
                if let filtervaluelist0 = filtervaluelist0 {
                    filtervaluelist0Decoded0 = [Swift.String]()
                    for string1 in filtervaluelist0 {
                        if let string1 = string1 {
                            filtervaluelist0Decoded0?.append(string1)
                        }
                    }
                }
                targetFiltersDecoded0?[key0] = filtervaluelist0Decoded0
            }
        }
        targetFilters = targetFiltersDecoded0
    }
}
