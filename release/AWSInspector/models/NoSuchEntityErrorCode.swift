// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension InspectorClientTypes {
    public enum NoSuchEntityErrorCode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case assessmentRunDoesNotExist
        case assessmentTargetDoesNotExist
        case assessmentTemplateDoesNotExist
        case findingDoesNotExist
        case iamRoleDoesNotExist
        case resourceGroupDoesNotExist
        case rulesPackageDoesNotExist
        case snsTopicDoesNotExist
        case sdkUnknown(Swift.String)

        public static var allCases: [NoSuchEntityErrorCode] {
            return [
                .assessmentRunDoesNotExist,
                .assessmentTargetDoesNotExist,
                .assessmentTemplateDoesNotExist,
                .findingDoesNotExist,
                .iamRoleDoesNotExist,
                .resourceGroupDoesNotExist,
                .rulesPackageDoesNotExist,
                .snsTopicDoesNotExist,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .assessmentRunDoesNotExist: return "ASSESSMENT_RUN_DOES_NOT_EXIST"
            case .assessmentTargetDoesNotExist: return "ASSESSMENT_TARGET_DOES_NOT_EXIST"
            case .assessmentTemplateDoesNotExist: return "ASSESSMENT_TEMPLATE_DOES_NOT_EXIST"
            case .findingDoesNotExist: return "FINDING_DOES_NOT_EXIST"
            case .iamRoleDoesNotExist: return "IAM_ROLE_DOES_NOT_EXIST"
            case .resourceGroupDoesNotExist: return "RESOURCE_GROUP_DOES_NOT_EXIST"
            case .rulesPackageDoesNotExist: return "RULES_PACKAGE_DOES_NOT_EXIST"
            case .snsTopicDoesNotExist: return "SNS_TOPIC_DOES_NOT_EXIST"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = NoSuchEntityErrorCode(rawValue: rawValue) ?? NoSuchEntityErrorCode.sdkUnknown(rawValue)
        }
    }
}
