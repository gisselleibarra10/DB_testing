// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension InspectorClientTypes {
    public enum AccessDeniedErrorCode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case accessDeniedToAssessmentRun
        case accessDeniedToAssessmentTarget
        case accessDeniedToAssessmentTemplate
        case accessDeniedToFinding
        case accessDeniedToIamRole
        case accessDeniedToResourceGroup
        case accessDeniedToRulesPackage
        case accessDeniedToSnsTopic
        case sdkUnknown(Swift.String)

        public static var allCases: [AccessDeniedErrorCode] {
            return [
                .accessDeniedToAssessmentRun,
                .accessDeniedToAssessmentTarget,
                .accessDeniedToAssessmentTemplate,
                .accessDeniedToFinding,
                .accessDeniedToIamRole,
                .accessDeniedToResourceGroup,
                .accessDeniedToRulesPackage,
                .accessDeniedToSnsTopic,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .accessDeniedToAssessmentRun: return "ACCESS_DENIED_TO_ASSESSMENT_RUN"
            case .accessDeniedToAssessmentTarget: return "ACCESS_DENIED_TO_ASSESSMENT_TARGET"
            case .accessDeniedToAssessmentTemplate: return "ACCESS_DENIED_TO_ASSESSMENT_TEMPLATE"
            case .accessDeniedToFinding: return "ACCESS_DENIED_TO_FINDING"
            case .accessDeniedToIamRole: return "ACCESS_DENIED_TO_IAM_ROLE"
            case .accessDeniedToResourceGroup: return "ACCESS_DENIED_TO_RESOURCE_GROUP"
            case .accessDeniedToRulesPackage: return "ACCESS_DENIED_TO_RULES_PACKAGE"
            case .accessDeniedToSnsTopic: return "ACCESS_DENIED_TO_SNS_TOPIC"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = AccessDeniedErrorCode(rawValue: rawValue) ?? AccessDeniedErrorCode.sdkUnknown(rawValue)
        }
    }
}
