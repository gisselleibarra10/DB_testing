// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListAssessmentTemplatesInputBody: Swift.Equatable {
    let assessmentTargetArns: [Swift.String]?
    let filter: InspectorClientTypes.AssessmentTemplateFilter?
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
}

extension ListAssessmentTemplatesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case assessmentTargetArns
        case filter
        case maxResults
        case nextToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let assessmentTargetArnsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .assessmentTargetArns)
        var assessmentTargetArnsDecoded0:[Swift.String]? = nil
        if let assessmentTargetArnsContainer = assessmentTargetArnsContainer {
            assessmentTargetArnsDecoded0 = [Swift.String]()
            for string0 in assessmentTargetArnsContainer {
                if let string0 = string0 {
                    assessmentTargetArnsDecoded0?.append(string0)
                }
            }
        }
        assessmentTargetArns = assessmentTargetArnsDecoded0
        let filterDecoded = try containerValues.decodeIfPresent(InspectorClientTypes.AssessmentTemplateFilter.self, forKey: .filter)
        filter = filterDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
    }
}
