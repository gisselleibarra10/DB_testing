// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension FSxClientTypes {
    /// The configuration of an Amazon FSx for NetApp ONTAP volume.
    public struct OntapVolumeConfiguration: Swift.Equatable {
        /// Specifies the FlexCache endpoint type of the volume. Valid values are the following:
        ///
        /// * NONE specifies that the volume doesn't have a FlexCache configuration. NONE is the default.
        ///
        /// * ORIGIN specifies that the volume is the origin volume for a FlexCache volume.
        ///
        /// * CACHE specifies that the volume is a FlexCache volume.
        public var flexCacheEndpointType: FSxClientTypes.FlexCacheEndpointType?
        /// Specifies the directory that network-attached storage (NAS) clients use to mount the volume, along with the storage virtual machine (SVM) Domain Name System (DNS) name or IP address. You can create a JunctionPath directly below a parent volume junction or on a directory within a volume. A JunctionPath for a volume named vol3 might be /vol1/vol2/vol3, or /vol1/dir2/vol3, or even /dir1/dir2/vol3.
        public var junctionPath: Swift.String?
        /// Specifies the type of volume. Valid values are the following:
        ///
        /// * RW specifies a read/write volume. RW is the default.
        ///
        /// * DP specifies a data-protection volume. You can protect data by replicating it to data-protection mirror copies. If a disaster occurs, you can use these data-protection mirror copies to recover data.
        ///
        /// * LS specifies a load-sharing mirror volume. A load-sharing mirror reduces the network traffic to a FlexVol volume by providing additional read-only access to clients.
        public var ontapVolumeType: FSxClientTypes.OntapVolumeType?
        /// The security style for the volume, which can be UNIX, NTFS, or MIXED.
        public var securityStyle: FSxClientTypes.SecurityStyle?
        /// The configured size of the volume, in megabytes (MBs).
        public var sizeInMegabytes: Swift.Int?
        /// The volume's storage efficiency setting.
        public var storageEfficiencyEnabled: Swift.Bool?
        /// The ID of the volume's storage virtual machine.
        public var storageVirtualMachineId: Swift.String?
        /// A Boolean flag indicating whether this volume is the root volume for its storage virtual machine (SVM). Only one volume on an SVM can be the root volume. This value defaults to false. If this value is true, then this is the SVM root volume. This flag is useful when you're deleting an SVM, because you must first delete all non-root volumes. This flag, when set to false, helps you identify which volumes to delete before you can delete the SVM.
        public var storageVirtualMachineRoot: Swift.Bool?
        /// The volume's TieringPolicy setting.
        public var tieringPolicy: FSxClientTypes.TieringPolicy?
        /// The volume's universally unique identifier (UUID).
        public var uUID: Swift.String?

        public init (
            flexCacheEndpointType: FSxClientTypes.FlexCacheEndpointType? = nil,
            junctionPath: Swift.String? = nil,
            ontapVolumeType: FSxClientTypes.OntapVolumeType? = nil,
            securityStyle: FSxClientTypes.SecurityStyle? = nil,
            sizeInMegabytes: Swift.Int? = nil,
            storageEfficiencyEnabled: Swift.Bool? = nil,
            storageVirtualMachineId: Swift.String? = nil,
            storageVirtualMachineRoot: Swift.Bool? = nil,
            tieringPolicy: FSxClientTypes.TieringPolicy? = nil,
            uUID: Swift.String? = nil
        )
        {
            self.flexCacheEndpointType = flexCacheEndpointType
            self.junctionPath = junctionPath
            self.ontapVolumeType = ontapVolumeType
            self.securityStyle = securityStyle
            self.sizeInMegabytes = sizeInMegabytes
            self.storageEfficiencyEnabled = storageEfficiencyEnabled
            self.storageVirtualMachineId = storageVirtualMachineId
            self.storageVirtualMachineRoot = storageVirtualMachineRoot
            self.tieringPolicy = tieringPolicy
            self.uUID = uUID
        }
    }

}
