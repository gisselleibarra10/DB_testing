// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension FSxClientTypes.CreateOpenZFSVolumeConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case copyTagsToSnapshots = "CopyTagsToSnapshots"
        case dataCompressionType = "DataCompressionType"
        case nfsExports = "NfsExports"
        case originSnapshot = "OriginSnapshot"
        case parentVolumeId = "ParentVolumeId"
        case readOnly = "ReadOnly"
        case recordSizeKiB = "RecordSizeKiB"
        case storageCapacityQuotaGiB = "StorageCapacityQuotaGiB"
        case storageCapacityReservationGiB = "StorageCapacityReservationGiB"
        case userAndGroupQuotas = "UserAndGroupQuotas"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let copyTagsToSnapshots = self.copyTagsToSnapshots {
            try encodeContainer.encode(copyTagsToSnapshots, forKey: .copyTagsToSnapshots)
        }
        if let dataCompressionType = self.dataCompressionType {
            try encodeContainer.encode(dataCompressionType.rawValue, forKey: .dataCompressionType)
        }
        if let nfsExports = nfsExports {
            var nfsExportsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .nfsExports)
            for openzfsnfsexports0 in nfsExports {
                try nfsExportsContainer.encode(openzfsnfsexports0)
            }
        }
        if let originSnapshot = self.originSnapshot {
            try encodeContainer.encode(originSnapshot, forKey: .originSnapshot)
        }
        if let parentVolumeId = self.parentVolumeId {
            try encodeContainer.encode(parentVolumeId, forKey: .parentVolumeId)
        }
        if let readOnly = self.readOnly {
            try encodeContainer.encode(readOnly, forKey: .readOnly)
        }
        if let recordSizeKiB = self.recordSizeKiB {
            try encodeContainer.encode(recordSizeKiB, forKey: .recordSizeKiB)
        }
        if let storageCapacityQuotaGiB = self.storageCapacityQuotaGiB {
            try encodeContainer.encode(storageCapacityQuotaGiB, forKey: .storageCapacityQuotaGiB)
        }
        if let storageCapacityReservationGiB = self.storageCapacityReservationGiB {
            try encodeContainer.encode(storageCapacityReservationGiB, forKey: .storageCapacityReservationGiB)
        }
        if let userAndGroupQuotas = userAndGroupQuotas {
            var userAndGroupQuotasContainer = encodeContainer.nestedUnkeyedContainer(forKey: .userAndGroupQuotas)
            for openzfsuserandgroupquotas0 in userAndGroupQuotas {
                try userAndGroupQuotasContainer.encode(openzfsuserandgroupquotas0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let parentVolumeIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .parentVolumeId)
        parentVolumeId = parentVolumeIdDecoded
        let storageCapacityReservationGiBDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .storageCapacityReservationGiB)
        storageCapacityReservationGiB = storageCapacityReservationGiBDecoded
        let storageCapacityQuotaGiBDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .storageCapacityQuotaGiB)
        storageCapacityQuotaGiB = storageCapacityQuotaGiBDecoded
        let recordSizeKiBDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .recordSizeKiB)
        recordSizeKiB = recordSizeKiBDecoded
        let dataCompressionTypeDecoded = try containerValues.decodeIfPresent(FSxClientTypes.OpenZFSDataCompressionType.self, forKey: .dataCompressionType)
        dataCompressionType = dataCompressionTypeDecoded
        let copyTagsToSnapshotsDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .copyTagsToSnapshots)
        copyTagsToSnapshots = copyTagsToSnapshotsDecoded
        let originSnapshotDecoded = try containerValues.decodeIfPresent(FSxClientTypes.CreateOpenZFSOriginSnapshotConfiguration.self, forKey: .originSnapshot)
        originSnapshot = originSnapshotDecoded
        let readOnlyDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .readOnly)
        readOnly = readOnlyDecoded
        let nfsExportsContainer = try containerValues.decodeIfPresent([FSxClientTypes.OpenZFSNfsExport?].self, forKey: .nfsExports)
        var nfsExportsDecoded0:[FSxClientTypes.OpenZFSNfsExport]? = nil
        if let nfsExportsContainer = nfsExportsContainer {
            nfsExportsDecoded0 = [FSxClientTypes.OpenZFSNfsExport]()
            for structure0 in nfsExportsContainer {
                if let structure0 = structure0 {
                    nfsExportsDecoded0?.append(structure0)
                }
            }
        }
        nfsExports = nfsExportsDecoded0
        let userAndGroupQuotasContainer = try containerValues.decodeIfPresent([FSxClientTypes.OpenZFSUserOrGroupQuota?].self, forKey: .userAndGroupQuotas)
        var userAndGroupQuotasDecoded0:[FSxClientTypes.OpenZFSUserOrGroupQuota]? = nil
        if let userAndGroupQuotasContainer = userAndGroupQuotasContainer {
            userAndGroupQuotasDecoded0 = [FSxClientTypes.OpenZFSUserOrGroupQuota]()
            for structure0 in userAndGroupQuotasContainer {
                if let structure0 = structure0 {
                    userAndGroupQuotasDecoded0?.append(structure0)
                }
            }
        }
        userAndGroupQuotas = userAndGroupQuotasDecoded0
    }
}
