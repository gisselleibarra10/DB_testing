// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension FSxClientTypes {
    /// The data repository configuration object for Lustre file systems returned in the response of the CreateFileSystem operation. This data type is not supported for file systems with the Persistent_2 deployment type. Instead, use .
    public struct DataRepositoryConfiguration: Swift.Equatable {
        /// Describes the file system's linked S3 data repository's AutoImportPolicy. The AutoImportPolicy configures how Amazon FSx keeps your file and directory listings up to date as you add or modify objects in your linked S3 bucket. AutoImportPolicy can have the following values:
        ///
        /// * NONE - (Default) AutoImport is off. Amazon FSx only updates file and directory listings from the linked S3 bucket when the file system is created. FSx does not update file and directory listings for any new or changed objects after choosing this option.
        ///
        /// * NEW - AutoImport is on. Amazon FSx automatically imports directory listings of any new objects added to the linked S3 bucket that do not currently exist in the FSx file system.
        ///
        /// * NEW_CHANGED - AutoImport is on. Amazon FSx automatically imports file and directory listings of any new objects added to the S3 bucket and any existing objects that are changed in the S3 bucket after you choose this option.
        ///
        /// * NEW_CHANGED_DELETED - AutoImport is on. Amazon FSx automatically imports file and directory listings of any new objects added to the S3 bucket, any existing objects that are changed in the S3 bucket, and any objects that were deleted in the S3 bucket.
        public var autoImportPolicy: FSxClientTypes.AutoImportPolicyType?
        /// The export path to the Amazon S3 bucket (and prefix) that you are using to store new and changed Lustre file system files in S3.
        public var exportPath: Swift.String?
        /// Provides detailed information about the data respository if its Lifecycle is set to MISCONFIGURED or FAILED.
        public var failureDetails: FSxClientTypes.DataRepositoryFailureDetails?
        /// The import path to the Amazon S3 bucket (and optional prefix) that you're using as the data repository for your FSx for Lustre file system, for example s3://import-bucket/optional-prefix. If a prefix is specified after the Amazon S3 bucket name, only object keys with that prefix are loaded into the file system.
        public var importPath: Swift.String?
        /// For files imported from a data repository, this value determines the stripe count and maximum amount of data per file (in MiB) stored on a single physical disk. The maximum number of disks that a single file can be striped across is limited by the total number of disks that make up the file system. The default chunk size is 1,024 MiB (1 GiB) and can go as high as 512,000 MiB (500 GiB). Amazon S3 objects have a maximum size of 5 TB.
        public var importedFileChunkSize: Swift.Int?
        /// Describes the state of the file system's S3 durable data repository, if it is configured with an S3 repository. The lifecycle can have the following values:
        ///
        /// * CREATING - The data repository configuration between the FSx file system and the linked S3 data repository is being created. The data repository is unavailable.
        ///
        /// * AVAILABLE - The data repository is available for use.
        ///
        /// * MISCONFIGURED - Amazon FSx cannot automatically import updates from the S3 bucket until the data repository configuration is corrected. For more information, see [Troubleshooting a Misconfigured linked S3 bucket](https://docs.aws.amazon.com/fsx/latest/LustreGuide/troubleshooting.html#troubleshooting-misconfigured-data-repository).
        ///
        /// * UPDATING - The data repository is undergoing a customer initiated update and availability may be impacted.
        ///
        /// * FAILED - The data repository is in a terminal state that cannot be recovered.
        public var lifecycle: FSxClientTypes.DataRepositoryLifecycle?

        public init (
            autoImportPolicy: FSxClientTypes.AutoImportPolicyType? = nil,
            exportPath: Swift.String? = nil,
            failureDetails: FSxClientTypes.DataRepositoryFailureDetails? = nil,
            importPath: Swift.String? = nil,
            importedFileChunkSize: Swift.Int? = nil,
            lifecycle: FSxClientTypes.DataRepositoryLifecycle? = nil
        )
        {
            self.autoImportPolicy = autoImportPolicy
            self.exportPath = exportPath
            self.failureDetails = failureDetails
            self.importPath = importPath
            self.importedFileChunkSize = importedFileChunkSize
            self.lifecycle = lifecycle
        }
    }

}
