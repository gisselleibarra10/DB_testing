// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CreateVolumeInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientRequestToken = "ClientRequestToken"
        case name = "Name"
        case ontapConfiguration = "OntapConfiguration"
        case openZFSConfiguration = "OpenZFSConfiguration"
        case tags = "Tags"
        case volumeType = "VolumeType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientRequestToken = self.clientRequestToken {
            try encodeContainer.encode(clientRequestToken, forKey: .clientRequestToken)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let ontapConfiguration = self.ontapConfiguration {
            try encodeContainer.encode(ontapConfiguration, forKey: .ontapConfiguration)
        }
        if let openZFSConfiguration = self.openZFSConfiguration {
            try encodeContainer.encode(openZFSConfiguration, forKey: .openZFSConfiguration)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tags0 in tags {
                try tagsContainer.encode(tags0)
            }
        }
        if let volumeType = self.volumeType {
            try encodeContainer.encode(volumeType.rawValue, forKey: .volumeType)
        }
    }
}
