// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension FSxClientTypes {
    /// A description of a specific Amazon FSx file system.
    public struct FileSystem: Swift.Equatable {
        /// A list of administrative actions for the file system that are in process or waiting to be processed. Administrative actions describe changes to the Amazon FSx system that you have initiated using the UpdateFileSystem operation.
        public var administrativeActions: [FSxClientTypes.AdministrativeAction]?
        /// The time that the file system was created, in seconds (since 1970-01-01T00:00:00Z), also known as Unix time.
        public var creationTime: ClientRuntime.Date?
        /// The Domain Name System (DNS) name for the file system.
        public var dNSName: Swift.String?
        /// A structure providing details of any failures that occurred.
        public var failureDetails: FSxClientTypes.FileSystemFailureDetails?
        /// The system-generated, unique 17-digit ID of the file system.
        public var fileSystemId: Swift.String?
        /// The type of Amazon FSx file system, which can be LUSTRE, WINDOWS, ONTAP, or OPENZFS.
        public var fileSystemType: FSxClientTypes.FileSystemType?
        /// The Lustre version of the Amazon FSx for Lustre file system, either 2.10 or 2.12.
        public var fileSystemTypeVersion: Swift.String?
        /// The ID of the Key Management Service (KMS) key used to encrypt Amazon FSx file system data. Used as follows with Amazon FSx file system types:
        ///
        /// * Amazon FSx for Lustre PERSISTENT_1 and PERSISTENT_2 deployment types only. SCRATCH_1 and SCRATCH_2 types are encrypted using the Amazon FSx service KMS key for your account.
        ///
        /// * Amazon FSx for NetApp ONTAP
        ///
        /// * Amazon FSx for OpenZFS
        ///
        /// * Amazon FSx for Windows File Server
        public var kmsKeyId: Swift.String?
        /// The lifecycle status of the file system. The following are the possible values and what they mean:
        ///
        /// * AVAILABLE - The file system is in a healthy state, and is reachable and available for use.
        ///
        /// * CREATING - Amazon FSx is creating the new file system.
        ///
        /// * DELETING - Amazon FSx is deleting an existing file system.
        ///
        /// * FAILED - An existing file system has experienced an unrecoverable failure. When creating a new file system, Amazon FSx was unable to create the file system.
        ///
        /// * MISCONFIGURED - The file system is in a failed but recoverable state.
        ///
        /// * MISCONFIGURED_UNAVAILABLE - (Amazon FSx for Windows File Server only) The file system is currently unavailable due to a change in your Active Directory configuration.
        ///
        /// * UPDATING - The file system is undergoing a customer-initiated update.
        public var lifecycle: FSxClientTypes.FileSystemLifecycle?
        /// The configuration for the Amazon FSx for Lustre file system.
        public var lustreConfiguration: FSxClientTypes.LustreFileSystemConfiguration?
        /// The IDs of the elastic network interfaces from which a specific file system is accessible. The elastic network interface is automatically created in the same virtual private cloud (VPC) that the Amazon FSx file system was created in. For more information, see [Elastic Network Interfaces](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-eni.html) in the Amazon EC2 User Guide. For an Amazon FSx for Windows File Server file system, you can have one network interface ID. For an Amazon FSx for Lustre file system, you can have more than one.
        public var networkInterfaceIds: [Swift.String]?
        /// The configuration for this Amazon FSx for NetApp ONTAP file system.
        public var ontapConfiguration: FSxClientTypes.OntapFileSystemConfiguration?
        /// The configuration for this Amazon FSx for OpenZFS file system.
        public var openZFSConfiguration: FSxClientTypes.OpenZFSFileSystemConfiguration?
        /// The Amazon Web Services account that created the file system. If the file system was created by an Identity and Access Management (IAM) user, the Amazon Web Services account to which the IAM user belongs is the owner.
        public var ownerId: Swift.String?
        /// The Amazon Resource Name (ARN) of the file system resource.
        public var resourceARN: Swift.String?
        /// The storage capacity of the file system in gibibytes (GiB).
        public var storageCapacity: Swift.Int?
        /// The type of storage the file system is using. If set to SSD, the file system uses solid state drive storage. If set to HDD, the file system uses hard disk drive storage.
        public var storageType: FSxClientTypes.StorageType?
        /// Specifies the IDs of the subnets that the file system is accessible from. For the Amazon FSx Windows and ONTAP MULTI_AZ_1 file system deployment type, there are two subnet IDs, one for the preferred file server and one for the standby file server. The preferred file server subnet identified in the PreferredSubnetID property. All other file systems have only one subnet ID. For FSx for Lustre file systems, and Single-AZ Windows file systems, this is the ID of the subnet that contains the file system's endpoint. For MULTI_AZ_1 Windows and ONTAP file systems, the file system endpoint is available in the PreferredSubnetID.
        public var subnetIds: [Swift.String]?
        /// The tags to associate with the file system. For more information, see [Tagging your Amazon EC2 resources](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html) in the Amazon EC2 User Guide.
        public var tags: [FSxClientTypes.Tag]?
        /// The ID of the primary virtual private cloud (VPC) for the file system.
        public var vpcId: Swift.String?
        /// The configuration for this Amazon FSx for Windows File Server file system.
        public var windowsConfiguration: FSxClientTypes.WindowsFileSystemConfiguration?

        public init (
            administrativeActions: [FSxClientTypes.AdministrativeAction]? = nil,
            creationTime: ClientRuntime.Date? = nil,
            dNSName: Swift.String? = nil,
            failureDetails: FSxClientTypes.FileSystemFailureDetails? = nil,
            fileSystemId: Swift.String? = nil,
            fileSystemType: FSxClientTypes.FileSystemType? = nil,
            fileSystemTypeVersion: Swift.String? = nil,
            kmsKeyId: Swift.String? = nil,
            lifecycle: FSxClientTypes.FileSystemLifecycle? = nil,
            lustreConfiguration: FSxClientTypes.LustreFileSystemConfiguration? = nil,
            networkInterfaceIds: [Swift.String]? = nil,
            ontapConfiguration: FSxClientTypes.OntapFileSystemConfiguration? = nil,
            openZFSConfiguration: FSxClientTypes.OpenZFSFileSystemConfiguration? = nil,
            ownerId: Swift.String? = nil,
            resourceARN: Swift.String? = nil,
            storageCapacity: Swift.Int? = nil,
            storageType: FSxClientTypes.StorageType? = nil,
            subnetIds: [Swift.String]? = nil,
            tags: [FSxClientTypes.Tag]? = nil,
            vpcId: Swift.String? = nil,
            windowsConfiguration: FSxClientTypes.WindowsFileSystemConfiguration? = nil
        )
        {
            self.administrativeActions = administrativeActions
            self.creationTime = creationTime
            self.dNSName = dNSName
            self.failureDetails = failureDetails
            self.fileSystemId = fileSystemId
            self.fileSystemType = fileSystemType
            self.fileSystemTypeVersion = fileSystemTypeVersion
            self.kmsKeyId = kmsKeyId
            self.lifecycle = lifecycle
            self.lustreConfiguration = lustreConfiguration
            self.networkInterfaceIds = networkInterfaceIds
            self.ontapConfiguration = ontapConfiguration
            self.openZFSConfiguration = openZFSConfiguration
            self.ownerId = ownerId
            self.resourceARN = resourceARN
            self.storageCapacity = storageCapacity
            self.storageType = storageType
            self.subnetIds = subnetIds
            self.tags = tags
            self.vpcId = vpcId
            self.windowsConfiguration = windowsConfiguration
        }
    }

}
