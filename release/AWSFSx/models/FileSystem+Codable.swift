// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension FSxClientTypes.FileSystem: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case administrativeActions = "AdministrativeActions"
        case creationTime = "CreationTime"
        case dNSName = "DNSName"
        case failureDetails = "FailureDetails"
        case fileSystemId = "FileSystemId"
        case fileSystemType = "FileSystemType"
        case fileSystemTypeVersion = "FileSystemTypeVersion"
        case kmsKeyId = "KmsKeyId"
        case lifecycle = "Lifecycle"
        case lustreConfiguration = "LustreConfiguration"
        case networkInterfaceIds = "NetworkInterfaceIds"
        case ontapConfiguration = "OntapConfiguration"
        case openZFSConfiguration = "OpenZFSConfiguration"
        case ownerId = "OwnerId"
        case resourceARN = "ResourceARN"
        case storageCapacity = "StorageCapacity"
        case storageType = "StorageType"
        case subnetIds = "SubnetIds"
        case tags = "Tags"
        case vpcId = "VpcId"
        case windowsConfiguration = "WindowsConfiguration"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let administrativeActions = administrativeActions {
            var administrativeActionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .administrativeActions)
            for administrativeactions0 in administrativeActions {
                try administrativeActionsContainer.encode(administrativeactions0)
            }
        }
        if let creationTime = self.creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let dNSName = self.dNSName {
            try encodeContainer.encode(dNSName, forKey: .dNSName)
        }
        if let failureDetails = self.failureDetails {
            try encodeContainer.encode(failureDetails, forKey: .failureDetails)
        }
        if let fileSystemId = self.fileSystemId {
            try encodeContainer.encode(fileSystemId, forKey: .fileSystemId)
        }
        if let fileSystemType = self.fileSystemType {
            try encodeContainer.encode(fileSystemType.rawValue, forKey: .fileSystemType)
        }
        if let fileSystemTypeVersion = self.fileSystemTypeVersion {
            try encodeContainer.encode(fileSystemTypeVersion, forKey: .fileSystemTypeVersion)
        }
        if let kmsKeyId = self.kmsKeyId {
            try encodeContainer.encode(kmsKeyId, forKey: .kmsKeyId)
        }
        if let lifecycle = self.lifecycle {
            try encodeContainer.encode(lifecycle.rawValue, forKey: .lifecycle)
        }
        if let lustreConfiguration = self.lustreConfiguration {
            try encodeContainer.encode(lustreConfiguration, forKey: .lustreConfiguration)
        }
        if let networkInterfaceIds = networkInterfaceIds {
            var networkInterfaceIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .networkInterfaceIds)
            for networkinterfaceids0 in networkInterfaceIds {
                try networkInterfaceIdsContainer.encode(networkinterfaceids0)
            }
        }
        if let ontapConfiguration = self.ontapConfiguration {
            try encodeContainer.encode(ontapConfiguration, forKey: .ontapConfiguration)
        }
        if let openZFSConfiguration = self.openZFSConfiguration {
            try encodeContainer.encode(openZFSConfiguration, forKey: .openZFSConfiguration)
        }
        if let ownerId = self.ownerId {
            try encodeContainer.encode(ownerId, forKey: .ownerId)
        }
        if let resourceARN = self.resourceARN {
            try encodeContainer.encode(resourceARN, forKey: .resourceARN)
        }
        if let storageCapacity = self.storageCapacity {
            try encodeContainer.encode(storageCapacity, forKey: .storageCapacity)
        }
        if let storageType = self.storageType {
            try encodeContainer.encode(storageType.rawValue, forKey: .storageType)
        }
        if let subnetIds = subnetIds {
            var subnetIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .subnetIds)
            for subnetids0 in subnetIds {
                try subnetIdsContainer.encode(subnetids0)
            }
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tags0 in tags {
                try tagsContainer.encode(tags0)
            }
        }
        if let vpcId = self.vpcId {
            try encodeContainer.encode(vpcId, forKey: .vpcId)
        }
        if let windowsConfiguration = self.windowsConfiguration {
            try encodeContainer.encode(windowsConfiguration, forKey: .windowsConfiguration)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ownerIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ownerId)
        ownerId = ownerIdDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let fileSystemIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fileSystemId)
        fileSystemId = fileSystemIdDecoded
        let fileSystemTypeDecoded = try containerValues.decodeIfPresent(FSxClientTypes.FileSystemType.self, forKey: .fileSystemType)
        fileSystemType = fileSystemTypeDecoded
        let lifecycleDecoded = try containerValues.decodeIfPresent(FSxClientTypes.FileSystemLifecycle.self, forKey: .lifecycle)
        lifecycle = lifecycleDecoded
        let failureDetailsDecoded = try containerValues.decodeIfPresent(FSxClientTypes.FileSystemFailureDetails.self, forKey: .failureDetails)
        failureDetails = failureDetailsDecoded
        let storageCapacityDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .storageCapacity)
        storageCapacity = storageCapacityDecoded
        let storageTypeDecoded = try containerValues.decodeIfPresent(FSxClientTypes.StorageType.self, forKey: .storageType)
        storageType = storageTypeDecoded
        let vpcIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vpcId)
        vpcId = vpcIdDecoded
        let subnetIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .subnetIds)
        var subnetIdsDecoded0:[Swift.String]? = nil
        if let subnetIdsContainer = subnetIdsContainer {
            subnetIdsDecoded0 = [Swift.String]()
            for string0 in subnetIdsContainer {
                if let string0 = string0 {
                    subnetIdsDecoded0?.append(string0)
                }
            }
        }
        subnetIds = subnetIdsDecoded0
        let networkInterfaceIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .networkInterfaceIds)
        var networkInterfaceIdsDecoded0:[Swift.String]? = nil
        if let networkInterfaceIdsContainer = networkInterfaceIdsContainer {
            networkInterfaceIdsDecoded0 = [Swift.String]()
            for string0 in networkInterfaceIdsContainer {
                if let string0 = string0 {
                    networkInterfaceIdsDecoded0?.append(string0)
                }
            }
        }
        networkInterfaceIds = networkInterfaceIdsDecoded0
        let dNSNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dNSName)
        dNSName = dNSNameDecoded
        let kmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kmsKeyId)
        kmsKeyId = kmsKeyIdDecoded
        let resourceARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceARN)
        resourceARN = resourceARNDecoded
        let tagsContainer = try containerValues.decodeIfPresent([FSxClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[FSxClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [FSxClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let windowsConfigurationDecoded = try containerValues.decodeIfPresent(FSxClientTypes.WindowsFileSystemConfiguration.self, forKey: .windowsConfiguration)
        windowsConfiguration = windowsConfigurationDecoded
        let lustreConfigurationDecoded = try containerValues.decodeIfPresent(FSxClientTypes.LustreFileSystemConfiguration.self, forKey: .lustreConfiguration)
        lustreConfiguration = lustreConfigurationDecoded
        let administrativeActionsContainer = try containerValues.decodeIfPresent([FSxClientTypes.AdministrativeAction?].self, forKey: .administrativeActions)
        var administrativeActionsDecoded0:[FSxClientTypes.AdministrativeAction]? = nil
        if let administrativeActionsContainer = administrativeActionsContainer {
            administrativeActionsDecoded0 = [FSxClientTypes.AdministrativeAction]()
            for structure0 in administrativeActionsContainer {
                if let structure0 = structure0 {
                    administrativeActionsDecoded0?.append(structure0)
                }
            }
        }
        administrativeActions = administrativeActionsDecoded0
        let ontapConfigurationDecoded = try containerValues.decodeIfPresent(FSxClientTypes.OntapFileSystemConfiguration.self, forKey: .ontapConfiguration)
        ontapConfiguration = ontapConfigurationDecoded
        let fileSystemTypeVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fileSystemTypeVersion)
        fileSystemTypeVersion = fileSystemTypeVersionDecoded
        let openZFSConfigurationDecoded = try containerValues.decodeIfPresent(FSxClientTypes.OpenZFSFileSystemConfiguration.self, forKey: .openZFSConfiguration)
        openZFSConfiguration = openZFSConfigurationDecoded
    }
}
