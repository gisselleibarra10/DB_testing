// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateFileSystemInputBody: Swift.Equatable {
    let clientRequestToken: Swift.String?
    let fileSystemType: FSxClientTypes.FileSystemType?
    let storageCapacity: Swift.Int?
    let storageType: FSxClientTypes.StorageType?
    let subnetIds: [Swift.String]?
    let securityGroupIds: [Swift.String]?
    let tags: [FSxClientTypes.Tag]?
    let kmsKeyId: Swift.String?
    let windowsConfiguration: FSxClientTypes.CreateFileSystemWindowsConfiguration?
    let lustreConfiguration: FSxClientTypes.CreateFileSystemLustreConfiguration?
    let ontapConfiguration: FSxClientTypes.CreateFileSystemOntapConfiguration?
    let fileSystemTypeVersion: Swift.String?
    let openZFSConfiguration: FSxClientTypes.CreateFileSystemOpenZFSConfiguration?
}

extension CreateFileSystemInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientRequestToken = "ClientRequestToken"
        case fileSystemType = "FileSystemType"
        case fileSystemTypeVersion = "FileSystemTypeVersion"
        case kmsKeyId = "KmsKeyId"
        case lustreConfiguration = "LustreConfiguration"
        case ontapConfiguration = "OntapConfiguration"
        case openZFSConfiguration = "OpenZFSConfiguration"
        case securityGroupIds = "SecurityGroupIds"
        case storageCapacity = "StorageCapacity"
        case storageType = "StorageType"
        case subnetIds = "SubnetIds"
        case tags = "Tags"
        case windowsConfiguration = "WindowsConfiguration"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clientRequestTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientRequestToken)
        clientRequestToken = clientRequestTokenDecoded
        let fileSystemTypeDecoded = try containerValues.decodeIfPresent(FSxClientTypes.FileSystemType.self, forKey: .fileSystemType)
        fileSystemType = fileSystemTypeDecoded
        let storageCapacityDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .storageCapacity)
        storageCapacity = storageCapacityDecoded
        let storageTypeDecoded = try containerValues.decodeIfPresent(FSxClientTypes.StorageType.self, forKey: .storageType)
        storageType = storageTypeDecoded
        let subnetIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .subnetIds)
        var subnetIdsDecoded0:[Swift.String]? = nil
        if let subnetIdsContainer = subnetIdsContainer {
            subnetIdsDecoded0 = [Swift.String]()
            for string0 in subnetIdsContainer {
                if let string0 = string0 {
                    subnetIdsDecoded0?.append(string0)
                }
            }
        }
        subnetIds = subnetIdsDecoded0
        let securityGroupIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .securityGroupIds)
        var securityGroupIdsDecoded0:[Swift.String]? = nil
        if let securityGroupIdsContainer = securityGroupIdsContainer {
            securityGroupIdsDecoded0 = [Swift.String]()
            for string0 in securityGroupIdsContainer {
                if let string0 = string0 {
                    securityGroupIdsDecoded0?.append(string0)
                }
            }
        }
        securityGroupIds = securityGroupIdsDecoded0
        let tagsContainer = try containerValues.decodeIfPresent([FSxClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[FSxClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [FSxClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let kmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kmsKeyId)
        kmsKeyId = kmsKeyIdDecoded
        let windowsConfigurationDecoded = try containerValues.decodeIfPresent(FSxClientTypes.CreateFileSystemWindowsConfiguration.self, forKey: .windowsConfiguration)
        windowsConfiguration = windowsConfigurationDecoded
        let lustreConfigurationDecoded = try containerValues.decodeIfPresent(FSxClientTypes.CreateFileSystemLustreConfiguration.self, forKey: .lustreConfiguration)
        lustreConfiguration = lustreConfigurationDecoded
        let ontapConfigurationDecoded = try containerValues.decodeIfPresent(FSxClientTypes.CreateFileSystemOntapConfiguration.self, forKey: .ontapConfiguration)
        ontapConfiguration = ontapConfigurationDecoded
        let fileSystemTypeVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fileSystemTypeVersion)
        fileSystemTypeVersion = fileSystemTypeVersionDecoded
        let openZFSConfigurationDecoded = try containerValues.decodeIfPresent(FSxClientTypes.CreateFileSystemOpenZFSConfiguration.self, forKey: .openZFSConfiguration)
        openZFSConfiguration = openZFSConfigurationDecoded
    }
}
