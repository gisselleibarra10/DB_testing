// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension FSxClientTypes.DataRepositoryTask: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case capacityToRelease = "CapacityToRelease"
        case creationTime = "CreationTime"
        case endTime = "EndTime"
        case failureDetails = "FailureDetails"
        case fileCacheId = "FileCacheId"
        case fileSystemId = "FileSystemId"
        case lifecycle = "Lifecycle"
        case paths = "Paths"
        case report = "Report"
        case resourceARN = "ResourceARN"
        case startTime = "StartTime"
        case status = "Status"
        case tags = "Tags"
        case taskId = "TaskId"
        case type = "Type"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let capacityToRelease = self.capacityToRelease {
            try encodeContainer.encode(capacityToRelease, forKey: .capacityToRelease)
        }
        if let creationTime = self.creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let endTime = self.endTime {
            try encodeContainer.encode(endTime.timeIntervalSince1970, forKey: .endTime)
        }
        if let failureDetails = self.failureDetails {
            try encodeContainer.encode(failureDetails, forKey: .failureDetails)
        }
        if let fileCacheId = self.fileCacheId {
            try encodeContainer.encode(fileCacheId, forKey: .fileCacheId)
        }
        if let fileSystemId = self.fileSystemId {
            try encodeContainer.encode(fileSystemId, forKey: .fileSystemId)
        }
        if let lifecycle = self.lifecycle {
            try encodeContainer.encode(lifecycle.rawValue, forKey: .lifecycle)
        }
        if let paths = paths {
            var pathsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .paths)
            for datarepositorytaskpaths0 in paths {
                try pathsContainer.encode(datarepositorytaskpaths0)
            }
        }
        if let report = self.report {
            try encodeContainer.encode(report, forKey: .report)
        }
        if let resourceARN = self.resourceARN {
            try encodeContainer.encode(resourceARN, forKey: .resourceARN)
        }
        if let startTime = self.startTime {
            try encodeContainer.encode(startTime.timeIntervalSince1970, forKey: .startTime)
        }
        if let status = self.status {
            try encodeContainer.encode(status, forKey: .status)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tags0 in tags {
                try tagsContainer.encode(tags0)
            }
        }
        if let taskId = self.taskId {
            try encodeContainer.encode(taskId, forKey: .taskId)
        }
        if let type = self.type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let taskIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .taskId)
        taskId = taskIdDecoded
        let lifecycleDecoded = try containerValues.decodeIfPresent(FSxClientTypes.DataRepositoryTaskLifecycle.self, forKey: .lifecycle)
        lifecycle = lifecycleDecoded
        let typeDecoded = try containerValues.decodeIfPresent(FSxClientTypes.DataRepositoryTaskType.self, forKey: .type)
        type = typeDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let startTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .startTime)
        startTime = startTimeDecoded
        let endTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .endTime)
        endTime = endTimeDecoded
        let resourceARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceARN)
        resourceARN = resourceARNDecoded
        let tagsContainer = try containerValues.decodeIfPresent([FSxClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[FSxClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [FSxClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let fileSystemIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fileSystemId)
        fileSystemId = fileSystemIdDecoded
        let pathsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .paths)
        var pathsDecoded0:[Swift.String]? = nil
        if let pathsContainer = pathsContainer {
            pathsDecoded0 = [Swift.String]()
            for string0 in pathsContainer {
                if let string0 = string0 {
                    pathsDecoded0?.append(string0)
                }
            }
        }
        paths = pathsDecoded0
        let failureDetailsDecoded = try containerValues.decodeIfPresent(FSxClientTypes.DataRepositoryTaskFailureDetails.self, forKey: .failureDetails)
        failureDetails = failureDetailsDecoded
        let statusDecoded = try containerValues.decodeIfPresent(FSxClientTypes.DataRepositoryTaskStatus.self, forKey: .status)
        status = statusDecoded
        let reportDecoded = try containerValues.decodeIfPresent(FSxClientTypes.CompletionReport.self, forKey: .report)
        report = reportDecoded
        let capacityToReleaseDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .capacityToRelease)
        capacityToRelease = capacityToReleaseDecoded
        let fileCacheIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fileCacheId)
        fileCacheId = fileCacheIdDecoded
    }
}
