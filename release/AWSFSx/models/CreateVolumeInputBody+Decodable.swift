// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateVolumeInputBody: Swift.Equatable {
    let clientRequestToken: Swift.String?
    let volumeType: FSxClientTypes.VolumeType?
    let name: Swift.String?
    let ontapConfiguration: FSxClientTypes.CreateOntapVolumeConfiguration?
    let tags: [FSxClientTypes.Tag]?
    let openZFSConfiguration: FSxClientTypes.CreateOpenZFSVolumeConfiguration?
}

extension CreateVolumeInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientRequestToken = "ClientRequestToken"
        case name = "Name"
        case ontapConfiguration = "OntapConfiguration"
        case openZFSConfiguration = "OpenZFSConfiguration"
        case tags = "Tags"
        case volumeType = "VolumeType"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clientRequestTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientRequestToken)
        clientRequestToken = clientRequestTokenDecoded
        let volumeTypeDecoded = try containerValues.decodeIfPresent(FSxClientTypes.VolumeType.self, forKey: .volumeType)
        volumeType = volumeTypeDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let ontapConfigurationDecoded = try containerValues.decodeIfPresent(FSxClientTypes.CreateOntapVolumeConfiguration.self, forKey: .ontapConfiguration)
        ontapConfiguration = ontapConfigurationDecoded
        let tagsContainer = try containerValues.decodeIfPresent([FSxClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[FSxClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [FSxClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let openZFSConfigurationDecoded = try containerValues.decodeIfPresent(FSxClientTypes.CreateOpenZFSVolumeConfiguration.self, forKey: .openZFSConfiguration)
        openZFSConfiguration = openZFSConfigurationDecoded
    }
}
