// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct CreateFileCacheInput: Swift.Equatable {
    /// An idempotency token for resource creation, in a string of up to 64 ASCII characters. This token is automatically filled on your behalf when you use the Command Line Interface (CLI) or an Amazon Web Services SDK. By using the idempotent operation, you can retry a CreateFileCache operation without the risk of creating an extra cache. This approach can be useful when an initial call fails in a way that makes it unclear whether a cache was created. Examples are if a transport level timeout occurred, or your connection was reset. If you use the same client request token and the initial call created a cache, the client receives success as long as the parameters are the same.
    public var clientRequestToken: Swift.String?
    /// A boolean flag indicating whether tags for the cache should be copied to data repository associations. This value defaults to false.
    public var copyTagsToDataRepositoryAssociations: Swift.Bool?
    /// A list of up to 8 configurations for data repository associations (DRAs) to be created during the cache creation. The DRAs link the cache to either an Amazon S3 data repository or a Network File System (NFS) data repository that supports the NFSv3 protocol. The DRA configurations must meet the following requirements:
    ///
    /// * All configurations on the list must be of the same data repository type, either all S3 or all NFS. A cache can't link to different data repository types at the same time.
    ///
    /// * An NFS DRA must link to an NFS file system that supports the NFSv3 protocol.
    ///
    ///
    /// DRA automatic import and automatic export is not supported.
    public var dataRepositoryAssociations: [FSxClientTypes.FileCacheDataRepositoryAssociation]?
    /// The type of cache that you're creating, which must be LUSTRE.
    /// This member is required.
    public var fileCacheType: FSxClientTypes.FileCacheType?
    /// Sets the Lustre version for the cache that you're creating, which must be 2.12.
    /// This member is required.
    public var fileCacheTypeVersion: Swift.String?
    /// Specifies the ID of the Key Management Service (KMS) key to use for encrypting data on an Amazon File Cache. If a KmsKeyId isn't specified, the Amazon FSx-managed KMS key for your account is used. For more information, see [Encrypt](https://docs.aws.amazon.com/kms/latest/APIReference/API_Encrypt.html) in the Key Management Service API Reference.
    public var kmsKeyId: Swift.String?
    /// The configuration for the Amazon File Cache resource being created.
    public var lustreConfiguration: FSxClientTypes.CreateFileCacheLustreConfiguration?
    /// A list of IDs specifying the security groups to apply to all network interfaces created for Amazon File Cache access. This list isn't returned in later requests to describe the cache.
    public var securityGroupIds: [Swift.String]?
    /// The storage capacity of the cache in gibibytes (GiB). Valid values are 1200 GiB, 2400 GiB, and increments of 2400 GiB.
    /// This member is required.
    public var storageCapacity: Swift.Int?
    /// A list of subnet IDs that the cache will be accessible from. You can specify only one subnet ID in a call to the CreateFileCache operation.
    /// This member is required.
    public var subnetIds: [Swift.String]?
    /// A list of Tag values, with a maximum of 50 elements.
    public var tags: [FSxClientTypes.Tag]?

    public init (
        clientRequestToken: Swift.String? = nil,
        copyTagsToDataRepositoryAssociations: Swift.Bool? = nil,
        dataRepositoryAssociations: [FSxClientTypes.FileCacheDataRepositoryAssociation]? = nil,
        fileCacheType: FSxClientTypes.FileCacheType? = nil,
        fileCacheTypeVersion: Swift.String? = nil,
        kmsKeyId: Swift.String? = nil,
        lustreConfiguration: FSxClientTypes.CreateFileCacheLustreConfiguration? = nil,
        securityGroupIds: [Swift.String]? = nil,
        storageCapacity: Swift.Int? = nil,
        subnetIds: [Swift.String]? = nil,
        tags: [FSxClientTypes.Tag]? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.copyTagsToDataRepositoryAssociations = copyTagsToDataRepositoryAssociations
        self.dataRepositoryAssociations = dataRepositoryAssociations
        self.fileCacheType = fileCacheType
        self.fileCacheTypeVersion = fileCacheTypeVersion
        self.kmsKeyId = kmsKeyId
        self.lustreConfiguration = lustreConfiguration
        self.securityGroupIds = securityGroupIds
        self.storageCapacity = storageCapacity
        self.subnetIds = subnetIds
        self.tags = tags
    }
}
