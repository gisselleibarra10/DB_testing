// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension FSxClientTypes.FileCache: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTime = "CreationTime"
        case dNSName = "DNSName"
        case dataRepositoryAssociationIds = "DataRepositoryAssociationIds"
        case failureDetails = "FailureDetails"
        case fileCacheId = "FileCacheId"
        case fileCacheType = "FileCacheType"
        case fileCacheTypeVersion = "FileCacheTypeVersion"
        case kmsKeyId = "KmsKeyId"
        case lifecycle = "Lifecycle"
        case lustreConfiguration = "LustreConfiguration"
        case networkInterfaceIds = "NetworkInterfaceIds"
        case ownerId = "OwnerId"
        case resourceARN = "ResourceARN"
        case storageCapacity = "StorageCapacity"
        case subnetIds = "SubnetIds"
        case vpcId = "VpcId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationTime = self.creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let dNSName = self.dNSName {
            try encodeContainer.encode(dNSName, forKey: .dNSName)
        }
        if let dataRepositoryAssociationIds = dataRepositoryAssociationIds {
            var dataRepositoryAssociationIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .dataRepositoryAssociationIds)
            for datarepositoryassociationids0 in dataRepositoryAssociationIds {
                try dataRepositoryAssociationIdsContainer.encode(datarepositoryassociationids0)
            }
        }
        if let failureDetails = self.failureDetails {
            try encodeContainer.encode(failureDetails, forKey: .failureDetails)
        }
        if let fileCacheId = self.fileCacheId {
            try encodeContainer.encode(fileCacheId, forKey: .fileCacheId)
        }
        if let fileCacheType = self.fileCacheType {
            try encodeContainer.encode(fileCacheType.rawValue, forKey: .fileCacheType)
        }
        if let fileCacheTypeVersion = self.fileCacheTypeVersion {
            try encodeContainer.encode(fileCacheTypeVersion, forKey: .fileCacheTypeVersion)
        }
        if let kmsKeyId = self.kmsKeyId {
            try encodeContainer.encode(kmsKeyId, forKey: .kmsKeyId)
        }
        if let lifecycle = self.lifecycle {
            try encodeContainer.encode(lifecycle.rawValue, forKey: .lifecycle)
        }
        if let lustreConfiguration = self.lustreConfiguration {
            try encodeContainer.encode(lustreConfiguration, forKey: .lustreConfiguration)
        }
        if let networkInterfaceIds = networkInterfaceIds {
            var networkInterfaceIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .networkInterfaceIds)
            for networkinterfaceids0 in networkInterfaceIds {
                try networkInterfaceIdsContainer.encode(networkinterfaceids0)
            }
        }
        if let ownerId = self.ownerId {
            try encodeContainer.encode(ownerId, forKey: .ownerId)
        }
        if let resourceARN = self.resourceARN {
            try encodeContainer.encode(resourceARN, forKey: .resourceARN)
        }
        if let storageCapacity = self.storageCapacity {
            try encodeContainer.encode(storageCapacity, forKey: .storageCapacity)
        }
        if let subnetIds = subnetIds {
            var subnetIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .subnetIds)
            for subnetids0 in subnetIds {
                try subnetIdsContainer.encode(subnetids0)
            }
        }
        if let vpcId = self.vpcId {
            try encodeContainer.encode(vpcId, forKey: .vpcId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ownerIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ownerId)
        ownerId = ownerIdDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let fileCacheIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fileCacheId)
        fileCacheId = fileCacheIdDecoded
        let fileCacheTypeDecoded = try containerValues.decodeIfPresent(FSxClientTypes.FileCacheType.self, forKey: .fileCacheType)
        fileCacheType = fileCacheTypeDecoded
        let fileCacheTypeVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fileCacheTypeVersion)
        fileCacheTypeVersion = fileCacheTypeVersionDecoded
        let lifecycleDecoded = try containerValues.decodeIfPresent(FSxClientTypes.FileCacheLifecycle.self, forKey: .lifecycle)
        lifecycle = lifecycleDecoded
        let failureDetailsDecoded = try containerValues.decodeIfPresent(FSxClientTypes.FileCacheFailureDetails.self, forKey: .failureDetails)
        failureDetails = failureDetailsDecoded
        let storageCapacityDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .storageCapacity)
        storageCapacity = storageCapacityDecoded
        let vpcIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vpcId)
        vpcId = vpcIdDecoded
        let subnetIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .subnetIds)
        var subnetIdsDecoded0:[Swift.String]? = nil
        if let subnetIdsContainer = subnetIdsContainer {
            subnetIdsDecoded0 = [Swift.String]()
            for string0 in subnetIdsContainer {
                if let string0 = string0 {
                    subnetIdsDecoded0?.append(string0)
                }
            }
        }
        subnetIds = subnetIdsDecoded0
        let networkInterfaceIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .networkInterfaceIds)
        var networkInterfaceIdsDecoded0:[Swift.String]? = nil
        if let networkInterfaceIdsContainer = networkInterfaceIdsContainer {
            networkInterfaceIdsDecoded0 = [Swift.String]()
            for string0 in networkInterfaceIdsContainer {
                if let string0 = string0 {
                    networkInterfaceIdsDecoded0?.append(string0)
                }
            }
        }
        networkInterfaceIds = networkInterfaceIdsDecoded0
        let dNSNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dNSName)
        dNSName = dNSNameDecoded
        let kmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kmsKeyId)
        kmsKeyId = kmsKeyIdDecoded
        let resourceARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceARN)
        resourceARN = resourceARNDecoded
        let lustreConfigurationDecoded = try containerValues.decodeIfPresent(FSxClientTypes.FileCacheLustreConfiguration.self, forKey: .lustreConfiguration)
        lustreConfiguration = lustreConfigurationDecoded
        let dataRepositoryAssociationIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .dataRepositoryAssociationIds)
        var dataRepositoryAssociationIdsDecoded0:[Swift.String]? = nil
        if let dataRepositoryAssociationIdsContainer = dataRepositoryAssociationIdsContainer {
            dataRepositoryAssociationIdsDecoded0 = [Swift.String]()
            for string0 in dataRepositoryAssociationIdsContainer {
                if let string0 = string0 {
                    dataRepositoryAssociationIdsDecoded0?.append(string0)
                }
            }
        }
        dataRepositoryAssociationIds = dataRepositoryAssociationIdsDecoded0
    }
}
