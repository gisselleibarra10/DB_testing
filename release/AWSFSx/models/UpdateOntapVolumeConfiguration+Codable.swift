// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension FSxClientTypes.UpdateOntapVolumeConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case junctionPath = "JunctionPath"
        case securityStyle = "SecurityStyle"
        case sizeInMegabytes = "SizeInMegabytes"
        case storageEfficiencyEnabled = "StorageEfficiencyEnabled"
        case tieringPolicy = "TieringPolicy"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let junctionPath = self.junctionPath {
            try encodeContainer.encode(junctionPath, forKey: .junctionPath)
        }
        if let securityStyle = self.securityStyle {
            try encodeContainer.encode(securityStyle.rawValue, forKey: .securityStyle)
        }
        if let sizeInMegabytes = self.sizeInMegabytes {
            try encodeContainer.encode(sizeInMegabytes, forKey: .sizeInMegabytes)
        }
        if let storageEfficiencyEnabled = self.storageEfficiencyEnabled {
            try encodeContainer.encode(storageEfficiencyEnabled, forKey: .storageEfficiencyEnabled)
        }
        if let tieringPolicy = self.tieringPolicy {
            try encodeContainer.encode(tieringPolicy, forKey: .tieringPolicy)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let junctionPathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .junctionPath)
        junctionPath = junctionPathDecoded
        let securityStyleDecoded = try containerValues.decodeIfPresent(FSxClientTypes.SecurityStyle.self, forKey: .securityStyle)
        securityStyle = securityStyleDecoded
        let sizeInMegabytesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .sizeInMegabytes)
        sizeInMegabytes = sizeInMegabytesDecoded
        let storageEfficiencyEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .storageEfficiencyEnabled)
        storageEfficiencyEnabled = storageEfficiencyEnabledDecoded
        let tieringPolicyDecoded = try containerValues.decodeIfPresent(FSxClientTypes.TieringPolicy.self, forKey: .tieringPolicy)
        tieringPolicy = tieringPolicyDecoded
    }
}
