// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension FSxClientTypes.StorageVirtualMachine: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case activeDirectoryConfiguration = "ActiveDirectoryConfiguration"
        case creationTime = "CreationTime"
        case endpoints = "Endpoints"
        case fileSystemId = "FileSystemId"
        case lifecycle = "Lifecycle"
        case lifecycleTransitionReason = "LifecycleTransitionReason"
        case name = "Name"
        case resourceARN = "ResourceARN"
        case rootVolumeSecurityStyle = "RootVolumeSecurityStyle"
        case storageVirtualMachineId = "StorageVirtualMachineId"
        case subtype = "Subtype"
        case tags = "Tags"
        case uUID = "UUID"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let activeDirectoryConfiguration = self.activeDirectoryConfiguration {
            try encodeContainer.encode(activeDirectoryConfiguration, forKey: .activeDirectoryConfiguration)
        }
        if let creationTime = self.creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let endpoints = self.endpoints {
            try encodeContainer.encode(endpoints, forKey: .endpoints)
        }
        if let fileSystemId = self.fileSystemId {
            try encodeContainer.encode(fileSystemId, forKey: .fileSystemId)
        }
        if let lifecycle = self.lifecycle {
            try encodeContainer.encode(lifecycle.rawValue, forKey: .lifecycle)
        }
        if let lifecycleTransitionReason = self.lifecycleTransitionReason {
            try encodeContainer.encode(lifecycleTransitionReason, forKey: .lifecycleTransitionReason)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let resourceARN = self.resourceARN {
            try encodeContainer.encode(resourceARN, forKey: .resourceARN)
        }
        if let rootVolumeSecurityStyle = self.rootVolumeSecurityStyle {
            try encodeContainer.encode(rootVolumeSecurityStyle.rawValue, forKey: .rootVolumeSecurityStyle)
        }
        if let storageVirtualMachineId = self.storageVirtualMachineId {
            try encodeContainer.encode(storageVirtualMachineId, forKey: .storageVirtualMachineId)
        }
        if let subtype = self.subtype {
            try encodeContainer.encode(subtype.rawValue, forKey: .subtype)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tags0 in tags {
                try tagsContainer.encode(tags0)
            }
        }
        if let uUID = self.uUID {
            try encodeContainer.encode(uUID, forKey: .uUID)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let activeDirectoryConfigurationDecoded = try containerValues.decodeIfPresent(FSxClientTypes.SvmActiveDirectoryConfiguration.self, forKey: .activeDirectoryConfiguration)
        activeDirectoryConfiguration = activeDirectoryConfigurationDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let endpointsDecoded = try containerValues.decodeIfPresent(FSxClientTypes.SvmEndpoints.self, forKey: .endpoints)
        endpoints = endpointsDecoded
        let fileSystemIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fileSystemId)
        fileSystemId = fileSystemIdDecoded
        let lifecycleDecoded = try containerValues.decodeIfPresent(FSxClientTypes.StorageVirtualMachineLifecycle.self, forKey: .lifecycle)
        lifecycle = lifecycleDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let resourceARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceARN)
        resourceARN = resourceARNDecoded
        let storageVirtualMachineIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .storageVirtualMachineId)
        storageVirtualMachineId = storageVirtualMachineIdDecoded
        let subtypeDecoded = try containerValues.decodeIfPresent(FSxClientTypes.StorageVirtualMachineSubtype.self, forKey: .subtype)
        subtype = subtypeDecoded
        let uUIDDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .uUID)
        uUID = uUIDDecoded
        let tagsContainer = try containerValues.decodeIfPresent([FSxClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[FSxClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [FSxClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let lifecycleTransitionReasonDecoded = try containerValues.decodeIfPresent(FSxClientTypes.LifecycleTransitionReason.self, forKey: .lifecycleTransitionReason)
        lifecycleTransitionReason = lifecycleTransitionReasonDecoded
        let rootVolumeSecurityStyleDecoded = try containerValues.decodeIfPresent(FSxClientTypes.StorageVirtualMachineRootVolumeSecurityStyle.self, forKey: .rootVolumeSecurityStyle)
        rootVolumeSecurityStyle = rootVolumeSecurityStyleDecoded
    }
}
