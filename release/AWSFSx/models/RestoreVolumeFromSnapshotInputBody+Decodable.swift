// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct RestoreVolumeFromSnapshotInputBody: Swift.Equatable {
    let clientRequestToken: Swift.String?
    let volumeId: Swift.String?
    let snapshotId: Swift.String?
    let options: [FSxClientTypes.RestoreOpenZFSVolumeOption]?
}

extension RestoreVolumeFromSnapshotInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientRequestToken = "ClientRequestToken"
        case options = "Options"
        case snapshotId = "SnapshotId"
        case volumeId = "VolumeId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clientRequestTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientRequestToken)
        clientRequestToken = clientRequestTokenDecoded
        let volumeIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .volumeId)
        volumeId = volumeIdDecoded
        let snapshotIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .snapshotId)
        snapshotId = snapshotIdDecoded
        let optionsContainer = try containerValues.decodeIfPresent([FSxClientTypes.RestoreOpenZFSVolumeOption?].self, forKey: .options)
        var optionsDecoded0:[FSxClientTypes.RestoreOpenZFSVolumeOption]? = nil
        if let optionsContainer = optionsContainer {
            optionsDecoded0 = [FSxClientTypes.RestoreOpenZFSVolumeOption]()
            for enum0 in optionsContainer {
                if let enum0 = enum0 {
                    optionsDecoded0?.append(enum0)
                }
            }
        }
        options = optionsDecoded0
    }
}
