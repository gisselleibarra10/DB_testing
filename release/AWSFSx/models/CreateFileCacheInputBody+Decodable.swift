// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateFileCacheInputBody: Swift.Equatable {
    let clientRequestToken: Swift.String?
    let fileCacheType: FSxClientTypes.FileCacheType?
    let fileCacheTypeVersion: Swift.String?
    let storageCapacity: Swift.Int?
    let subnetIds: [Swift.String]?
    let securityGroupIds: [Swift.String]?
    let tags: [FSxClientTypes.Tag]?
    let copyTagsToDataRepositoryAssociations: Swift.Bool?
    let kmsKeyId: Swift.String?
    let lustreConfiguration: FSxClientTypes.CreateFileCacheLustreConfiguration?
    let dataRepositoryAssociations: [FSxClientTypes.FileCacheDataRepositoryAssociation]?
}

extension CreateFileCacheInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientRequestToken = "ClientRequestToken"
        case copyTagsToDataRepositoryAssociations = "CopyTagsToDataRepositoryAssociations"
        case dataRepositoryAssociations = "DataRepositoryAssociations"
        case fileCacheType = "FileCacheType"
        case fileCacheTypeVersion = "FileCacheTypeVersion"
        case kmsKeyId = "KmsKeyId"
        case lustreConfiguration = "LustreConfiguration"
        case securityGroupIds = "SecurityGroupIds"
        case storageCapacity = "StorageCapacity"
        case subnetIds = "SubnetIds"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clientRequestTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientRequestToken)
        clientRequestToken = clientRequestTokenDecoded
        let fileCacheTypeDecoded = try containerValues.decodeIfPresent(FSxClientTypes.FileCacheType.self, forKey: .fileCacheType)
        fileCacheType = fileCacheTypeDecoded
        let fileCacheTypeVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fileCacheTypeVersion)
        fileCacheTypeVersion = fileCacheTypeVersionDecoded
        let storageCapacityDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .storageCapacity)
        storageCapacity = storageCapacityDecoded
        let subnetIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .subnetIds)
        var subnetIdsDecoded0:[Swift.String]? = nil
        if let subnetIdsContainer = subnetIdsContainer {
            subnetIdsDecoded0 = [Swift.String]()
            for string0 in subnetIdsContainer {
                if let string0 = string0 {
                    subnetIdsDecoded0?.append(string0)
                }
            }
        }
        subnetIds = subnetIdsDecoded0
        let securityGroupIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .securityGroupIds)
        var securityGroupIdsDecoded0:[Swift.String]? = nil
        if let securityGroupIdsContainer = securityGroupIdsContainer {
            securityGroupIdsDecoded0 = [Swift.String]()
            for string0 in securityGroupIdsContainer {
                if let string0 = string0 {
                    securityGroupIdsDecoded0?.append(string0)
                }
            }
        }
        securityGroupIds = securityGroupIdsDecoded0
        let tagsContainer = try containerValues.decodeIfPresent([FSxClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[FSxClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [FSxClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let copyTagsToDataRepositoryAssociationsDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .copyTagsToDataRepositoryAssociations)
        copyTagsToDataRepositoryAssociations = copyTagsToDataRepositoryAssociationsDecoded
        let kmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kmsKeyId)
        kmsKeyId = kmsKeyIdDecoded
        let lustreConfigurationDecoded = try containerValues.decodeIfPresent(FSxClientTypes.CreateFileCacheLustreConfiguration.self, forKey: .lustreConfiguration)
        lustreConfiguration = lustreConfigurationDecoded
        let dataRepositoryAssociationsContainer = try containerValues.decodeIfPresent([FSxClientTypes.FileCacheDataRepositoryAssociation?].self, forKey: .dataRepositoryAssociations)
        var dataRepositoryAssociationsDecoded0:[FSxClientTypes.FileCacheDataRepositoryAssociation]? = nil
        if let dataRepositoryAssociationsContainer = dataRepositoryAssociationsContainer {
            dataRepositoryAssociationsDecoded0 = [FSxClientTypes.FileCacheDataRepositoryAssociation]()
            for structure0 in dataRepositoryAssociationsContainer {
                if let structure0 = structure0 {
                    dataRepositoryAssociationsDecoded0?.append(structure0)
                }
            }
        }
        dataRepositoryAssociations = dataRepositoryAssociationsDecoded0
    }
}
