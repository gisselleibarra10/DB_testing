// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// The request object for the CreateFileSystemFromBackup operation.
public struct CreateFileSystemFromBackupInput: Swift.Equatable {
    /// The ID of the source backup. Specifies the backup that you are copying.
    /// This member is required.
    public var backupId: Swift.String?
    /// A string of up to 64 ASCII characters that Amazon FSx uses to ensure idempotent creation. This string is automatically filled on your behalf when you use the Command Line Interface (CLI) or an Amazon Web Services SDK.
    public var clientRequestToken: Swift.String?
    /// Sets the version for the Amazon FSx for Lustre file system that you're creating from a backup. Valid values are 2.10 and 2.12. You don't need to specify FileSystemTypeVersion because it will be applied using the backup's FileSystemTypeVersion setting. If you choose to specify FileSystemTypeVersion when creating from backup, the value must match the backup's FileSystemTypeVersion setting.
    public var fileSystemTypeVersion: Swift.String?
    /// Specifies the ID of the Key Management Service (KMS) key to use for encrypting data on Amazon FSx file systems, as follows:
    ///
    /// * Amazon FSx for Lustre PERSISTENT_1 and PERSISTENT_2 deployment types only. SCRATCH_1 and SCRATCH_2 types are encrypted using the Amazon FSx service KMS key for your account.
    ///
    /// * Amazon FSx for NetApp ONTAP
    ///
    /// * Amazon FSx for OpenZFS
    ///
    /// * Amazon FSx for Windows File Server
    ///
    ///
    /// If a KmsKeyId isn't specified, the Amazon FSx-managed KMS key for your account is used. For more information, see [Encrypt](https://docs.aws.amazon.com/kms/latest/APIReference/API_Encrypt.html) in the Key Management Service API Reference.
    public var kmsKeyId: Swift.String?
    /// The Lustre configuration for the file system being created. The following parameters are not supported for file systems with the Persistent_2 deployment type. Instead, use CreateDataRepositoryAssociation to create a data repository association to link your Lustre file system to a data repository.
    ///
    /// * AutoImportPolicy
    ///
    /// * ExportPath
    ///
    /// * ImportedChunkSize
    ///
    /// * ImportPath
    public var lustreConfiguration: FSxClientTypes.CreateFileSystemLustreConfiguration?
    /// The OpenZFS configuration for the file system that's being created.
    public var openZFSConfiguration: FSxClientTypes.CreateFileSystemOpenZFSConfiguration?
    /// A list of IDs for the security groups that apply to the specified network interfaces created for file system access. These security groups apply to all network interfaces. This value isn't returned in later DescribeFileSystem requests.
    public var securityGroupIds: [Swift.String]?
    /// Sets the storage capacity of the OpenZFS file system that you're creating from a backup, in gibibytes (GiB). Valid values are from 64 GiB up to 524,288 GiB (512 TiB). However, the value that you specify must be equal to or greater than the backup's storage capacity value. If you don't use the StorageCapacity parameter, the default is the backup's StorageCapacity value. If used to create a file system other than OpenZFS, you must provide a value that matches the backup's StorageCapacity value. If you provide any other value, Amazon FSx responds with a 400 Bad Request.
    public var storageCapacity: Swift.Int?
    /// Sets the storage type for the Windows or OpenZFS file system that you're creating from a backup. Valid values are SSD and HDD.
    ///
    /// * Set to SSD to use solid state drive storage. SSD is supported on all Windows and OpenZFS deployment types.
    ///
    /// * Set to HDD to use hard disk drive storage. HDD is supported on SINGLE_AZ_2 and MULTI_AZ_1 FSx for Windows File Server file system deployment types.
    ///
    ///
    /// The default value is SSD. HDD and SSD storage types have different minimum storage capacity requirements. A restored file system's storage capacity is tied to the file system that was backed up. You can create a file system that uses HDD storage from a backup of a file system that used SSD storage if the original SSD file system had a storage capacity of at least 2000 GiB.
    public var storageType: FSxClientTypes.StorageType?
    /// Specifies the IDs of the subnets that the file system will be accessible from. For Windows MULTI_AZ_1 file system deployment types, provide exactly two subnet IDs, one for the preferred file server and one for the standby file server. You specify one of these subnets as the preferred subnet using the WindowsConfiguration > PreferredSubnetID property. Windows SINGLE_AZ_1 and SINGLE_AZ_2 file system deployment types, Lustre file systems, and OpenZFS file systems provide exactly one subnet ID. The file server is launched in that subnet's Availability Zone.
    /// This member is required.
    public var subnetIds: [Swift.String]?
    /// The tags to be applied to the file system at file system creation. The key value of the Name tag appears in the console as the file system name.
    public var tags: [FSxClientTypes.Tag]?
    /// The configuration for this Microsoft Windows file system.
    public var windowsConfiguration: FSxClientTypes.CreateFileSystemWindowsConfiguration?

    public init (
        backupId: Swift.String? = nil,
        clientRequestToken: Swift.String? = nil,
        fileSystemTypeVersion: Swift.String? = nil,
        kmsKeyId: Swift.String? = nil,
        lustreConfiguration: FSxClientTypes.CreateFileSystemLustreConfiguration? = nil,
        openZFSConfiguration: FSxClientTypes.CreateFileSystemOpenZFSConfiguration? = nil,
        securityGroupIds: [Swift.String]? = nil,
        storageCapacity: Swift.Int? = nil,
        storageType: FSxClientTypes.StorageType? = nil,
        subnetIds: [Swift.String]? = nil,
        tags: [FSxClientTypes.Tag]? = nil,
        windowsConfiguration: FSxClientTypes.CreateFileSystemWindowsConfiguration? = nil
    )
    {
        self.backupId = backupId
        self.clientRequestToken = clientRequestToken
        self.fileSystemTypeVersion = fileSystemTypeVersion
        self.kmsKeyId = kmsKeyId
        self.lustreConfiguration = lustreConfiguration
        self.openZFSConfiguration = openZFSConfiguration
        self.securityGroupIds = securityGroupIds
        self.storageCapacity = storageCapacity
        self.storageType = storageType
        self.subnetIds = subnetIds
        self.tags = tags
        self.windowsConfiguration = windowsConfiguration
    }
}
