// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension FSxClientTypes {
    /// The response object for the Amazon File Cache resource being created in the CreateFileCache operation.
    public struct FileCacheCreating: Swift.Equatable {
        /// A boolean flag indicating whether tags for the cache should be copied to data repository associations.
        public var copyTagsToDataRepositoryAssociations: Swift.Bool?
        /// The time that the resource was created, in seconds (since 1970-01-01T00:00:00Z), also known as Unix time.
        public var creationTime: ClientRuntime.Date?
        /// The Domain Name System (DNS) name for the cache.
        public var dNSName: Swift.String?
        /// A list of IDs of data repository associations that are associated with this cache.
        public var dataRepositoryAssociationIds: [Swift.String]?
        /// A structure providing details of any failures that occurred.
        public var failureDetails: FSxClientTypes.FileCacheFailureDetails?
        /// The system-generated, unique ID of the cache.
        public var fileCacheId: Swift.String?
        /// The type of cache, which must be LUSTRE.
        public var fileCacheType: FSxClientTypes.FileCacheType?
        /// The Lustre version of the cache, which must be 2.12.
        public var fileCacheTypeVersion: Swift.String?
        /// Specifies the ID of the Key Management Service (KMS) key to use for encrypting data on an Amazon File Cache. If a KmsKeyId isn't specified, the Amazon FSx-managed KMS key for your account is used. For more information, see [Encrypt](https://docs.aws.amazon.com/kms/latest/APIReference/API_Encrypt.html) in the Key Management Service API Reference.
        public var kmsKeyId: Swift.String?
        /// The lifecycle status of the cache. The following are the possible values and what they mean:
        ///
        /// * AVAILABLE - The cache is in a healthy state, and is reachable and available for use.
        ///
        /// * CREATING - The new cache is being created.
        ///
        /// * DELETING - An existing cache is being deleted.
        ///
        /// * UPDATING - The cache is undergoing a customer-initiated update.
        ///
        /// * FAILED - An existing cache has experienced an unrecoverable failure. When creating a new cache, the cache was unable to be created.
        public var lifecycle: FSxClientTypes.FileCacheLifecycle?
        /// The configuration for the Amazon File Cache resource.
        public var lustreConfiguration: FSxClientTypes.FileCacheLustreConfiguration?
        /// A list of network interface IDs.
        public var networkInterfaceIds: [Swift.String]?
        /// An Amazon Web Services account ID. This ID is a 12-digit number that you use to construct Amazon Resource Names (ARNs) for resources.
        public var ownerId: Swift.String?
        /// The Amazon Resource Name (ARN) for a given resource. ARNs uniquely identify Amazon Web Services resources. We require an ARN when you need to specify a resource unambiguously across all of Amazon Web Services. For more information, see [Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the Amazon Web Services General Reference.
        public var resourceARN: Swift.String?
        /// The storage capacity of the cache in gibibytes (GiB).
        public var storageCapacity: Swift.Int?
        /// A list of subnet IDs that the cache will be accessible from. You can specify only one subnet ID in a call to the CreateFileCache operation.
        public var subnetIds: [Swift.String]?
        /// A list of Tag values, with a maximum of 50 elements.
        public var tags: [FSxClientTypes.Tag]?
        /// The ID of your virtual private cloud (VPC). For more information, see [VPC and subnets](https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_Subnets.html) in the Amazon VPC User Guide.
        public var vpcId: Swift.String?

        public init (
            copyTagsToDataRepositoryAssociations: Swift.Bool? = nil,
            creationTime: ClientRuntime.Date? = nil,
            dNSName: Swift.String? = nil,
            dataRepositoryAssociationIds: [Swift.String]? = nil,
            failureDetails: FSxClientTypes.FileCacheFailureDetails? = nil,
            fileCacheId: Swift.String? = nil,
            fileCacheType: FSxClientTypes.FileCacheType? = nil,
            fileCacheTypeVersion: Swift.String? = nil,
            kmsKeyId: Swift.String? = nil,
            lifecycle: FSxClientTypes.FileCacheLifecycle? = nil,
            lustreConfiguration: FSxClientTypes.FileCacheLustreConfiguration? = nil,
            networkInterfaceIds: [Swift.String]? = nil,
            ownerId: Swift.String? = nil,
            resourceARN: Swift.String? = nil,
            storageCapacity: Swift.Int? = nil,
            subnetIds: [Swift.String]? = nil,
            tags: [FSxClientTypes.Tag]? = nil,
            vpcId: Swift.String? = nil
        )
        {
            self.copyTagsToDataRepositoryAssociations = copyTagsToDataRepositoryAssociations
            self.creationTime = creationTime
            self.dNSName = dNSName
            self.dataRepositoryAssociationIds = dataRepositoryAssociationIds
            self.failureDetails = failureDetails
            self.fileCacheId = fileCacheId
            self.fileCacheType = fileCacheType
            self.fileCacheTypeVersion = fileCacheTypeVersion
            self.kmsKeyId = kmsKeyId
            self.lifecycle = lifecycle
            self.lustreConfiguration = lustreConfiguration
            self.networkInterfaceIds = networkInterfaceIds
            self.ownerId = ownerId
            self.resourceARN = resourceARN
            self.storageCapacity = storageCapacity
            self.subnetIds = subnetIds
            self.tags = tags
            self.vpcId = vpcId
        }
    }

}
