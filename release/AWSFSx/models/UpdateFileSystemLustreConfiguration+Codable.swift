// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension FSxClientTypes.UpdateFileSystemLustreConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case autoImportPolicy = "AutoImportPolicy"
        case automaticBackupRetentionDays = "AutomaticBackupRetentionDays"
        case dailyAutomaticBackupStartTime = "DailyAutomaticBackupStartTime"
        case dataCompressionType = "DataCompressionType"
        case logConfiguration = "LogConfiguration"
        case rootSquashConfiguration = "RootSquashConfiguration"
        case weeklyMaintenanceStartTime = "WeeklyMaintenanceStartTime"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let autoImportPolicy = self.autoImportPolicy {
            try encodeContainer.encode(autoImportPolicy.rawValue, forKey: .autoImportPolicy)
        }
        if let automaticBackupRetentionDays = self.automaticBackupRetentionDays {
            try encodeContainer.encode(automaticBackupRetentionDays, forKey: .automaticBackupRetentionDays)
        }
        if let dailyAutomaticBackupStartTime = self.dailyAutomaticBackupStartTime {
            try encodeContainer.encode(dailyAutomaticBackupStartTime, forKey: .dailyAutomaticBackupStartTime)
        }
        if let dataCompressionType = self.dataCompressionType {
            try encodeContainer.encode(dataCompressionType.rawValue, forKey: .dataCompressionType)
        }
        if let logConfiguration = self.logConfiguration {
            try encodeContainer.encode(logConfiguration, forKey: .logConfiguration)
        }
        if let rootSquashConfiguration = self.rootSquashConfiguration {
            try encodeContainer.encode(rootSquashConfiguration, forKey: .rootSquashConfiguration)
        }
        if let weeklyMaintenanceStartTime = self.weeklyMaintenanceStartTime {
            try encodeContainer.encode(weeklyMaintenanceStartTime, forKey: .weeklyMaintenanceStartTime)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let weeklyMaintenanceStartTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .weeklyMaintenanceStartTime)
        weeklyMaintenanceStartTime = weeklyMaintenanceStartTimeDecoded
        let dailyAutomaticBackupStartTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dailyAutomaticBackupStartTime)
        dailyAutomaticBackupStartTime = dailyAutomaticBackupStartTimeDecoded
        let automaticBackupRetentionDaysDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .automaticBackupRetentionDays)
        automaticBackupRetentionDays = automaticBackupRetentionDaysDecoded
        let autoImportPolicyDecoded = try containerValues.decodeIfPresent(FSxClientTypes.AutoImportPolicyType.self, forKey: .autoImportPolicy)
        autoImportPolicy = autoImportPolicyDecoded
        let dataCompressionTypeDecoded = try containerValues.decodeIfPresent(FSxClientTypes.DataCompressionType.self, forKey: .dataCompressionType)
        dataCompressionType = dataCompressionTypeDecoded
        let logConfigurationDecoded = try containerValues.decodeIfPresent(FSxClientTypes.LustreLogCreateConfiguration.self, forKey: .logConfiguration)
        logConfiguration = logConfigurationDecoded
        let rootSquashConfigurationDecoded = try containerValues.decodeIfPresent(FSxClientTypes.LustreRootSquashConfiguration.self, forKey: .rootSquashConfiguration)
        rootSquashConfiguration = rootSquashConfigurationDecoded
    }
}
