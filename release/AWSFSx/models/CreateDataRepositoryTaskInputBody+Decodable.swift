// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateDataRepositoryTaskInputBody: Swift.Equatable {
    let type: FSxClientTypes.DataRepositoryTaskType?
    let paths: [Swift.String]?
    let fileSystemId: Swift.String?
    let report: FSxClientTypes.CompletionReport?
    let clientRequestToken: Swift.String?
    let tags: [FSxClientTypes.Tag]?
    let capacityToRelease: Swift.Int?
}

extension CreateDataRepositoryTaskInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case capacityToRelease = "CapacityToRelease"
        case clientRequestToken = "ClientRequestToken"
        case fileSystemId = "FileSystemId"
        case paths = "Paths"
        case report = "Report"
        case tags = "Tags"
        case type = "Type"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let typeDecoded = try containerValues.decodeIfPresent(FSxClientTypes.DataRepositoryTaskType.self, forKey: .type)
        type = typeDecoded
        let pathsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .paths)
        var pathsDecoded0:[Swift.String]? = nil
        if let pathsContainer = pathsContainer {
            pathsDecoded0 = [Swift.String]()
            for string0 in pathsContainer {
                if let string0 = string0 {
                    pathsDecoded0?.append(string0)
                }
            }
        }
        paths = pathsDecoded0
        let fileSystemIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fileSystemId)
        fileSystemId = fileSystemIdDecoded
        let reportDecoded = try containerValues.decodeIfPresent(FSxClientTypes.CompletionReport.self, forKey: .report)
        report = reportDecoded
        let clientRequestTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientRequestToken)
        clientRequestToken = clientRequestTokenDecoded
        let tagsContainer = try containerValues.decodeIfPresent([FSxClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[FSxClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [FSxClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let capacityToReleaseDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .capacityToRelease)
        capacityToRelease = capacityToReleaseDecoded
    }
}
