// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension FSxClientTypes.CreateFileSystemOntapConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case automaticBackupRetentionDays = "AutomaticBackupRetentionDays"
        case dailyAutomaticBackupStartTime = "DailyAutomaticBackupStartTime"
        case deploymentType = "DeploymentType"
        case diskIopsConfiguration = "DiskIopsConfiguration"
        case endpointIpAddressRange = "EndpointIpAddressRange"
        case fsxAdminPassword = "FsxAdminPassword"
        case preferredSubnetId = "PreferredSubnetId"
        case routeTableIds = "RouteTableIds"
        case throughputCapacity = "ThroughputCapacity"
        case weeklyMaintenanceStartTime = "WeeklyMaintenanceStartTime"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let automaticBackupRetentionDays = self.automaticBackupRetentionDays {
            try encodeContainer.encode(automaticBackupRetentionDays, forKey: .automaticBackupRetentionDays)
        }
        if let dailyAutomaticBackupStartTime = self.dailyAutomaticBackupStartTime {
            try encodeContainer.encode(dailyAutomaticBackupStartTime, forKey: .dailyAutomaticBackupStartTime)
        }
        if let deploymentType = self.deploymentType {
            try encodeContainer.encode(deploymentType.rawValue, forKey: .deploymentType)
        }
        if let diskIopsConfiguration = self.diskIopsConfiguration {
            try encodeContainer.encode(diskIopsConfiguration, forKey: .diskIopsConfiguration)
        }
        if let endpointIpAddressRange = self.endpointIpAddressRange {
            try encodeContainer.encode(endpointIpAddressRange, forKey: .endpointIpAddressRange)
        }
        if let fsxAdminPassword = self.fsxAdminPassword {
            try encodeContainer.encode(fsxAdminPassword, forKey: .fsxAdminPassword)
        }
        if let preferredSubnetId = self.preferredSubnetId {
            try encodeContainer.encode(preferredSubnetId, forKey: .preferredSubnetId)
        }
        if let routeTableIds = routeTableIds {
            var routeTableIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .routeTableIds)
            for routetableids0 in routeTableIds {
                try routeTableIdsContainer.encode(routetableids0)
            }
        }
        if let throughputCapacity = self.throughputCapacity {
            try encodeContainer.encode(throughputCapacity, forKey: .throughputCapacity)
        }
        if let weeklyMaintenanceStartTime = self.weeklyMaintenanceStartTime {
            try encodeContainer.encode(weeklyMaintenanceStartTime, forKey: .weeklyMaintenanceStartTime)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let automaticBackupRetentionDaysDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .automaticBackupRetentionDays)
        automaticBackupRetentionDays = automaticBackupRetentionDaysDecoded
        let dailyAutomaticBackupStartTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dailyAutomaticBackupStartTime)
        dailyAutomaticBackupStartTime = dailyAutomaticBackupStartTimeDecoded
        let deploymentTypeDecoded = try containerValues.decodeIfPresent(FSxClientTypes.OntapDeploymentType.self, forKey: .deploymentType)
        deploymentType = deploymentTypeDecoded
        let endpointIpAddressRangeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .endpointIpAddressRange)
        endpointIpAddressRange = endpointIpAddressRangeDecoded
        let fsxAdminPasswordDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fsxAdminPassword)
        fsxAdminPassword = fsxAdminPasswordDecoded
        let diskIopsConfigurationDecoded = try containerValues.decodeIfPresent(FSxClientTypes.DiskIopsConfiguration.self, forKey: .diskIopsConfiguration)
        diskIopsConfiguration = diskIopsConfigurationDecoded
        let preferredSubnetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .preferredSubnetId)
        preferredSubnetId = preferredSubnetIdDecoded
        let routeTableIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .routeTableIds)
        var routeTableIdsDecoded0:[Swift.String]? = nil
        if let routeTableIdsContainer = routeTableIdsContainer {
            routeTableIdsDecoded0 = [Swift.String]()
            for string0 in routeTableIdsContainer {
                if let string0 = string0 {
                    routeTableIdsDecoded0?.append(string0)
                }
            }
        }
        routeTableIds = routeTableIdsDecoded0
        let throughputCapacityDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .throughputCapacity)
        throughputCapacity = throughputCapacityDecoded
        let weeklyMaintenanceStartTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .weeklyMaintenanceStartTime)
        weeklyMaintenanceStartTime = weeklyMaintenanceStartTimeDecoded
    }
}
