// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension FSxClientTypes {
    /// The configuration for the Amazon FSx for Lustre file system.
    public struct LustreFileSystemConfiguration: Swift.Equatable {
        /// The number of days to retain automatic backups. Setting this property to 0 disables automatic backups. You can retain automatic backups for a maximum of 90 days. The default is 0.
        public var automaticBackupRetentionDays: Swift.Int?
        /// A boolean flag indicating whether tags on the file system are copied to backups. If it's set to true, all tags on the file system are copied to all automatic backups and any user-initiated backups where the user doesn't specify any tags. If this value is true, and you specify one or more tags, only the specified tags are copied to backups. If you specify one or more tags when creating a user-initiated backup, no tags are copied from the file system, regardless of this value. (Default = false)
        public var copyTagsToBackups: Swift.Bool?
        /// A recurring daily time, in the format HH:MM. HH is the zero-padded hour of the day (0-23), and MM is the zero-padded minute of the hour. For example, 05:00 specifies 5 AM daily.
        public var dailyAutomaticBackupStartTime: Swift.String?
        /// The data compression configuration for the file system. DataCompressionType can have the following values:
        ///
        /// * NONE - Data compression is turned off for the file system.
        ///
        /// * LZ4 - Data compression is turned on with the LZ4 algorithm.
        ///
        ///
        /// For more information, see [Lustre data compression](https://docs.aws.amazon.com/fsx/latest/LustreGuide/data-compression.html).
        public var dataCompressionType: FSxClientTypes.DataCompressionType?
        /// The data repository configuration object for Lustre file systems returned in the response of the CreateFileSystem operation. This data type is not supported for file systems with the Persistent_2 deployment type. Instead, use .
        public var dataRepositoryConfiguration: FSxClientTypes.DataRepositoryConfiguration?
        /// The deployment type of the FSx for Lustre file system. Scratch deployment type is designed for temporary storage and shorter-term processing of data. SCRATCH_1 and SCRATCH_2 deployment types are best suited for when you need temporary storage and shorter-term processing of data. The SCRATCH_2 deployment type provides in-transit encryption of data and higher burst throughput capacity than SCRATCH_1. The PERSISTENT_1 and PERSISTENT_2 deployment type is used for longer-term storage and workloads and encryption of data in transit. PERSISTENT_2 is built on Lustre v2.12 and offers higher PerUnitStorageThroughput (up to 1000 MB/s/TiB) along with a lower minimum storage capacity requirement (600 GiB). To learn more about FSx for Lustre deployment types, see [ FSx for Lustre deployment options](https://docs.aws.amazon.com/fsx/latest/LustreGuide/lustre-deployment-types.html). The default is SCRATCH_1.
        public var deploymentType: FSxClientTypes.LustreDeploymentType?
        /// The type of drive cache used by PERSISTENT_1 file systems that are provisioned with HDD storage devices. This parameter is required when StorageType is HDD. When set to READ the file system has an SSD storage cache that is sized to 20% of the file system's storage capacity. This improves the performance for frequently accessed files by caching up to 20% of the total storage capacity. This parameter is required when StorageType is set to HDD.
        public var driveCacheType: FSxClientTypes.DriveCacheType?
        /// The Lustre logging configuration. Lustre logging writes the enabled log events for your file system to Amazon CloudWatch Logs.
        public var logConfiguration: FSxClientTypes.LustreLogConfiguration?
        /// You use the MountName value when mounting the file system. For the SCRATCH_1 deployment type, this value is always "fsx". For SCRATCH_2, PERSISTENT_1, and PERSISTENT_2 deployment types, this value is a string that is unique within an Amazon Web Services Region.
        public var mountName: Swift.String?
        /// Per unit storage throughput represents the megabytes per second of read or write throughput per 1 tebibyte of storage provisioned. File system throughput capacity is equal to Storage capacity (TiB) * PerUnitStorageThroughput (MB/s/TiB). This option is only valid for PERSISTENT_1 and PERSISTENT_2 deployment types. Valid values:
        ///
        /// * For PERSISTENT_1 SSD storage: 50, 100, 200.
        ///
        /// * For PERSISTENT_1 HDD storage: 12, 40.
        ///
        /// * For PERSISTENT_2 SSD storage: 125, 250, 500, 1000.
        public var perUnitStorageThroughput: Swift.Int?
        /// The Lustre root squash configuration for an Amazon FSx for Lustre file system. When enabled, root squash restricts root-level access from clients that try to access your file system as a root user.
        public var rootSquashConfiguration: FSxClientTypes.LustreRootSquashConfiguration?
        /// The preferred start time to perform weekly maintenance, formatted d:HH:MM in the UTC time zone. Here, d is the weekday number, from 1 through 7, beginning with Monday and ending with Sunday.
        public var weeklyMaintenanceStartTime: Swift.String?

        public init (
            automaticBackupRetentionDays: Swift.Int? = nil,
            copyTagsToBackups: Swift.Bool? = nil,
            dailyAutomaticBackupStartTime: Swift.String? = nil,
            dataCompressionType: FSxClientTypes.DataCompressionType? = nil,
            dataRepositoryConfiguration: FSxClientTypes.DataRepositoryConfiguration? = nil,
            deploymentType: FSxClientTypes.LustreDeploymentType? = nil,
            driveCacheType: FSxClientTypes.DriveCacheType? = nil,
            logConfiguration: FSxClientTypes.LustreLogConfiguration? = nil,
            mountName: Swift.String? = nil,
            perUnitStorageThroughput: Swift.Int? = nil,
            rootSquashConfiguration: FSxClientTypes.LustreRootSquashConfiguration? = nil,
            weeklyMaintenanceStartTime: Swift.String? = nil
        )
        {
            self.automaticBackupRetentionDays = automaticBackupRetentionDays
            self.copyTagsToBackups = copyTagsToBackups
            self.dailyAutomaticBackupStartTime = dailyAutomaticBackupStartTime
            self.dataCompressionType = dataCompressionType
            self.dataRepositoryConfiguration = dataRepositoryConfiguration
            self.deploymentType = deploymentType
            self.driveCacheType = driveCacheType
            self.logConfiguration = logConfiguration
            self.mountName = mountName
            self.perUnitStorageThroughput = perUnitStorageThroughput
            self.rootSquashConfiguration = rootSquashConfiguration
            self.weeklyMaintenanceStartTime = weeklyMaintenanceStartTime
        }
    }

}
