// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension FSxClientTypes.Backup: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case backupId = "BackupId"
        case creationTime = "CreationTime"
        case directoryInformation = "DirectoryInformation"
        case failureDetails = "FailureDetails"
        case fileSystem = "FileSystem"
        case kmsKeyId = "KmsKeyId"
        case lifecycle = "Lifecycle"
        case ownerId = "OwnerId"
        case progressPercent = "ProgressPercent"
        case resourceARN = "ResourceARN"
        case resourceType = "ResourceType"
        case sourceBackupId = "SourceBackupId"
        case sourceBackupRegion = "SourceBackupRegion"
        case tags = "Tags"
        case type = "Type"
        case volume = "Volume"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let backupId = self.backupId {
            try encodeContainer.encode(backupId, forKey: .backupId)
        }
        if let creationTime = self.creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let directoryInformation = self.directoryInformation {
            try encodeContainer.encode(directoryInformation, forKey: .directoryInformation)
        }
        if let failureDetails = self.failureDetails {
            try encodeContainer.encode(failureDetails, forKey: .failureDetails)
        }
        if let fileSystem = self.fileSystem {
            try encodeContainer.encode(fileSystem, forKey: .fileSystem)
        }
        if let kmsKeyId = self.kmsKeyId {
            try encodeContainer.encode(kmsKeyId, forKey: .kmsKeyId)
        }
        if let lifecycle = self.lifecycle {
            try encodeContainer.encode(lifecycle.rawValue, forKey: .lifecycle)
        }
        if let ownerId = self.ownerId {
            try encodeContainer.encode(ownerId, forKey: .ownerId)
        }
        if let progressPercent = self.progressPercent {
            try encodeContainer.encode(progressPercent, forKey: .progressPercent)
        }
        if let resourceARN = self.resourceARN {
            try encodeContainer.encode(resourceARN, forKey: .resourceARN)
        }
        if let resourceType = self.resourceType {
            try encodeContainer.encode(resourceType.rawValue, forKey: .resourceType)
        }
        if let sourceBackupId = self.sourceBackupId {
            try encodeContainer.encode(sourceBackupId, forKey: .sourceBackupId)
        }
        if let sourceBackupRegion = self.sourceBackupRegion {
            try encodeContainer.encode(sourceBackupRegion, forKey: .sourceBackupRegion)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tags0 in tags {
                try tagsContainer.encode(tags0)
            }
        }
        if let type = self.type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
        if let volume = self.volume {
            try encodeContainer.encode(volume, forKey: .volume)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let backupIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .backupId)
        backupId = backupIdDecoded
        let lifecycleDecoded = try containerValues.decodeIfPresent(FSxClientTypes.BackupLifecycle.self, forKey: .lifecycle)
        lifecycle = lifecycleDecoded
        let failureDetailsDecoded = try containerValues.decodeIfPresent(FSxClientTypes.BackupFailureDetails.self, forKey: .failureDetails)
        failureDetails = failureDetailsDecoded
        let typeDecoded = try containerValues.decodeIfPresent(FSxClientTypes.BackupType.self, forKey: .type)
        type = typeDecoded
        let progressPercentDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .progressPercent)
        progressPercent = progressPercentDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let kmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kmsKeyId)
        kmsKeyId = kmsKeyIdDecoded
        let resourceARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceARN)
        resourceARN = resourceARNDecoded
        let tagsContainer = try containerValues.decodeIfPresent([FSxClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[FSxClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [FSxClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let fileSystemDecoded = try containerValues.decodeIfPresent(FSxClientTypes.FileSystem.self, forKey: .fileSystem)
        fileSystem = fileSystemDecoded
        let directoryInformationDecoded = try containerValues.decodeIfPresent(FSxClientTypes.ActiveDirectoryBackupAttributes.self, forKey: .directoryInformation)
        directoryInformation = directoryInformationDecoded
        let ownerIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ownerId)
        ownerId = ownerIdDecoded
        let sourceBackupIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceBackupId)
        sourceBackupId = sourceBackupIdDecoded
        let sourceBackupRegionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceBackupRegion)
        sourceBackupRegion = sourceBackupRegionDecoded
        let resourceTypeDecoded = try containerValues.decodeIfPresent(FSxClientTypes.ResourceType.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let volumeDecoded = try containerValues.decodeIfPresent(FSxClientTypes.Volume.self, forKey: .volume)
        volume = volumeDecoded
    }
}
