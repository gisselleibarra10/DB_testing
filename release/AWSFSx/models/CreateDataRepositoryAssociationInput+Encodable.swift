// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CreateDataRepositoryAssociationInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case batchImportMetaDataOnCreate = "BatchImportMetaDataOnCreate"
        case clientRequestToken = "ClientRequestToken"
        case dataRepositoryPath = "DataRepositoryPath"
        case fileSystemId = "FileSystemId"
        case fileSystemPath = "FileSystemPath"
        case importedFileChunkSize = "ImportedFileChunkSize"
        case s3 = "S3"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let batchImportMetaDataOnCreate = self.batchImportMetaDataOnCreate {
            try encodeContainer.encode(batchImportMetaDataOnCreate, forKey: .batchImportMetaDataOnCreate)
        }
        if let clientRequestToken = self.clientRequestToken {
            try encodeContainer.encode(clientRequestToken, forKey: .clientRequestToken)
        }
        if let dataRepositoryPath = self.dataRepositoryPath {
            try encodeContainer.encode(dataRepositoryPath, forKey: .dataRepositoryPath)
        }
        if let fileSystemId = self.fileSystemId {
            try encodeContainer.encode(fileSystemId, forKey: .fileSystemId)
        }
        if let fileSystemPath = self.fileSystemPath {
            try encodeContainer.encode(fileSystemPath, forKey: .fileSystemPath)
        }
        if let importedFileChunkSize = self.importedFileChunkSize {
            try encodeContainer.encode(importedFileChunkSize, forKey: .importedFileChunkSize)
        }
        if let s3 = self.s3 {
            try encodeContainer.encode(s3, forKey: .s3)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tags0 in tags {
                try tagsContainer.encode(tags0)
            }
        }
    }
}
