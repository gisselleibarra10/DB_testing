// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension FSxClientTypes {
    /// The lifecycle status of the backup.
    ///
    /// * AVAILABLE - The backup is fully available.
    ///
    /// * PENDING - For user-initiated backups on Lustre file systems only; Amazon FSx hasn't started creating the backup.
    ///
    /// * CREATING - Amazon FSx is creating the new user-initiated backup.
    ///
    /// * TRANSFERRING - For user-initiated backups on Lustre file systems only; Amazon FSx is backing up the file system.
    ///
    /// * COPYING - Amazon FSx is copying the backup.
    ///
    /// * DELETED - Amazon FSx deleted the backup and it's no longer available.
    ///
    /// * FAILED - Amazon FSx couldn't finish the backup.
    public enum BackupLifecycle: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case available
        case copying
        case creating
        case deleted
        case failed
        case pending
        case transferring
        case sdkUnknown(Swift.String)

        public static var allCases: [BackupLifecycle] {
            return [
                .available,
                .copying,
                .creating,
                .deleted,
                .failed,
                .pending,
                .transferring,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .available: return "AVAILABLE"
            case .copying: return "COPYING"
            case .creating: return "CREATING"
            case .deleted: return "DELETED"
            case .failed: return "FAILED"
            case .pending: return "PENDING"
            case .transferring: return "TRANSFERRING"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = BackupLifecycle(rawValue: rawValue) ?? BackupLifecycle.sdkUnknown(rawValue)
        }
    }
}
