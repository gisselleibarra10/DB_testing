// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension FSxClientTypes.Volume: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case administrativeActions = "AdministrativeActions"
        case creationTime = "CreationTime"
        case fileSystemId = "FileSystemId"
        case lifecycle = "Lifecycle"
        case lifecycleTransitionReason = "LifecycleTransitionReason"
        case name = "Name"
        case ontapConfiguration = "OntapConfiguration"
        case openZFSConfiguration = "OpenZFSConfiguration"
        case resourceARN = "ResourceARN"
        case tags = "Tags"
        case volumeId = "VolumeId"
        case volumeType = "VolumeType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let administrativeActions = administrativeActions {
            var administrativeActionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .administrativeActions)
            for administrativeactions0 in administrativeActions {
                try administrativeActionsContainer.encode(administrativeactions0)
            }
        }
        if let creationTime = self.creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let fileSystemId = self.fileSystemId {
            try encodeContainer.encode(fileSystemId, forKey: .fileSystemId)
        }
        if let lifecycle = self.lifecycle {
            try encodeContainer.encode(lifecycle.rawValue, forKey: .lifecycle)
        }
        if let lifecycleTransitionReason = self.lifecycleTransitionReason {
            try encodeContainer.encode(lifecycleTransitionReason, forKey: .lifecycleTransitionReason)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let ontapConfiguration = self.ontapConfiguration {
            try encodeContainer.encode(ontapConfiguration, forKey: .ontapConfiguration)
        }
        if let openZFSConfiguration = self.openZFSConfiguration {
            try encodeContainer.encode(openZFSConfiguration, forKey: .openZFSConfiguration)
        }
        if let resourceARN = self.resourceARN {
            try encodeContainer.encode(resourceARN, forKey: .resourceARN)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tags0 in tags {
                try tagsContainer.encode(tags0)
            }
        }
        if let volumeId = self.volumeId {
            try encodeContainer.encode(volumeId, forKey: .volumeId)
        }
        if let volumeType = self.volumeType {
            try encodeContainer.encode(volumeType.rawValue, forKey: .volumeType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let fileSystemIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fileSystemId)
        fileSystemId = fileSystemIdDecoded
        let lifecycleDecoded = try containerValues.decodeIfPresent(FSxClientTypes.VolumeLifecycle.self, forKey: .lifecycle)
        lifecycle = lifecycleDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let ontapConfigurationDecoded = try containerValues.decodeIfPresent(FSxClientTypes.OntapVolumeConfiguration.self, forKey: .ontapConfiguration)
        ontapConfiguration = ontapConfigurationDecoded
        let resourceARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceARN)
        resourceARN = resourceARNDecoded
        let tagsContainer = try containerValues.decodeIfPresent([FSxClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[FSxClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [FSxClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let volumeIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .volumeId)
        volumeId = volumeIdDecoded
        let volumeTypeDecoded = try containerValues.decodeIfPresent(FSxClientTypes.VolumeType.self, forKey: .volumeType)
        volumeType = volumeTypeDecoded
        let lifecycleTransitionReasonDecoded = try containerValues.decodeIfPresent(FSxClientTypes.LifecycleTransitionReason.self, forKey: .lifecycleTransitionReason)
        lifecycleTransitionReason = lifecycleTransitionReasonDecoded
        let administrativeActionsContainer = try containerValues.decodeIfPresent([FSxClientTypes.AdministrativeAction?].self, forKey: .administrativeActions)
        var administrativeActionsDecoded0:[FSxClientTypes.AdministrativeAction]? = nil
        if let administrativeActionsContainer = administrativeActionsContainer {
            administrativeActionsDecoded0 = [FSxClientTypes.AdministrativeAction]()
            for structure0 in administrativeActionsContainer {
                if let structure0 = structure0 {
                    administrativeActionsDecoded0?.append(structure0)
                }
            }
        }
        administrativeActions = administrativeActionsDecoded0
        let openZFSConfigurationDecoded = try containerValues.decodeIfPresent(FSxClientTypes.OpenZFSVolumeConfiguration.self, forKey: .openZFSConfiguration)
        openZFSConfiguration = openZFSConfigurationDecoded
    }
}
