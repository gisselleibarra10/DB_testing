// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension FSxClientTypes {
    /// A description of the data repository task. You use data repository tasks to perform bulk transfer operations between an Amazon FSx for Lustre file system and a linked data repository. An Amazon File Cache resource uses a task to automatically release files from the cache.
    public struct DataRepositoryTask: Swift.Equatable {
        /// Specifies the amount of data to release, in GiB, by an Amazon File Cache AUTO_RELEASE_DATA task that automatically releases files from the cache.
        public var capacityToRelease: Swift.Int?
        /// The time that the resource was created, in seconds (since 1970-01-01T00:00:00Z), also known as Unix time.
        /// This member is required.
        public var creationTime: ClientRuntime.Date?
        /// The time the system completed processing the task, populated after the task is complete.
        public var endTime: ClientRuntime.Date?
        /// Failure message describing why the task failed, it is populated only when Lifecycle is set to FAILED.
        public var failureDetails: FSxClientTypes.DataRepositoryTaskFailureDetails?
        /// The system-generated, unique ID of the cache.
        public var fileCacheId: Swift.String?
        /// The globally unique ID of the file system.
        public var fileSystemId: Swift.String?
        /// The lifecycle status of the data repository task, as follows:
        ///
        /// * PENDING - The task has not started.
        ///
        /// * EXECUTING - The task is in process.
        ///
        /// * FAILED - The task was not able to be completed. For example, there may be files the task failed to process. The [DataRepositoryTaskFailureDetails] property provides more information about task failures.
        ///
        /// * SUCCEEDED - The task has completed successfully.
        ///
        /// * CANCELED - The task was canceled and it did not complete.
        ///
        /// * CANCELING - The task is in process of being canceled.
        ///
        ///
        /// You cannot delete an FSx for Lustre file system if there are data repository tasks for the file system in the PENDING or EXECUTING states. Please retry when the data repository task is finished (with a status of CANCELED, SUCCEEDED, or FAILED). You can use the DescribeDataRepositoryTask action to monitor the task status. Contact the FSx team if you need to delete your file system immediately.
        /// This member is required.
        public var lifecycle: FSxClientTypes.DataRepositoryTaskLifecycle?
        /// An array of paths that specify the data for the data repository task to process. For example, in an EXPORT_TO_REPOSITORY task, the paths specify which data to export to the linked data repository. (Default) If Paths is not specified, Amazon FSx uses the file system root directory.
        public var paths: [Swift.String]?
        /// Provides a report detailing the data repository task results of the files processed that match the criteria specified in the report Scope parameter. FSx delivers the report to the file system's linked data repository in Amazon S3, using the path specified in the report Path parameter. You can specify whether or not a report gets generated for a task using the Enabled parameter.
        public var report: FSxClientTypes.CompletionReport?
        /// The Amazon Resource Name (ARN) for a given resource. ARNs uniquely identify Amazon Web Services resources. We require an ARN when you need to specify a resource unambiguously across all of Amazon Web Services. For more information, see [Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the Amazon Web Services General Reference.
        public var resourceARN: Swift.String?
        /// The time the system began processing the task.
        public var startTime: ClientRuntime.Date?
        /// Provides the status of the number of files that the task has processed successfully and failed to process.
        public var status: FSxClientTypes.DataRepositoryTaskStatus?
        /// A list of Tag values, with a maximum of 50 elements.
        public var tags: [FSxClientTypes.Tag]?
        /// The system-generated, unique 17-digit ID of the data repository task.
        /// This member is required.
        public var taskId: Swift.String?
        /// The type of data repository task.
        ///
        /// * EXPORT_TO_REPOSITORY tasks export from your Amazon FSx for Lustre file system to a linked data repository.
        ///
        /// * IMPORT_METADATA_FROM_REPOSITORY tasks import metadata changes from a linked S3 bucket to your Amazon FSx for Lustre file system.
        ///
        /// * AUTO_RELEASE_DATA tasks automatically release files from an Amazon File Cache resource.
        /// This member is required.
        public var type: FSxClientTypes.DataRepositoryTaskType?

        public init (
            capacityToRelease: Swift.Int? = nil,
            creationTime: ClientRuntime.Date? = nil,
            endTime: ClientRuntime.Date? = nil,
            failureDetails: FSxClientTypes.DataRepositoryTaskFailureDetails? = nil,
            fileCacheId: Swift.String? = nil,
            fileSystemId: Swift.String? = nil,
            lifecycle: FSxClientTypes.DataRepositoryTaskLifecycle? = nil,
            paths: [Swift.String]? = nil,
            report: FSxClientTypes.CompletionReport? = nil,
            resourceARN: Swift.String? = nil,
            startTime: ClientRuntime.Date? = nil,
            status: FSxClientTypes.DataRepositoryTaskStatus? = nil,
            tags: [FSxClientTypes.Tag]? = nil,
            taskId: Swift.String? = nil,
            type: FSxClientTypes.DataRepositoryTaskType? = nil
        )
        {
            self.capacityToRelease = capacityToRelease
            self.creationTime = creationTime
            self.endTime = endTime
            self.failureDetails = failureDetails
            self.fileCacheId = fileCacheId
            self.fileSystemId = fileSystemId
            self.lifecycle = lifecycle
            self.paths = paths
            self.report = report
            self.resourceARN = resourceARN
            self.startTime = startTime
            self.status = status
            self.tags = tags
            self.taskId = taskId
            self.type = type
        }
    }

}
