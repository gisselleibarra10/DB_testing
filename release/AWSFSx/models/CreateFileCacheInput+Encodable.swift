// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CreateFileCacheInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientRequestToken = "ClientRequestToken"
        case copyTagsToDataRepositoryAssociations = "CopyTagsToDataRepositoryAssociations"
        case dataRepositoryAssociations = "DataRepositoryAssociations"
        case fileCacheType = "FileCacheType"
        case fileCacheTypeVersion = "FileCacheTypeVersion"
        case kmsKeyId = "KmsKeyId"
        case lustreConfiguration = "LustreConfiguration"
        case securityGroupIds = "SecurityGroupIds"
        case storageCapacity = "StorageCapacity"
        case subnetIds = "SubnetIds"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientRequestToken = self.clientRequestToken {
            try encodeContainer.encode(clientRequestToken, forKey: .clientRequestToken)
        }
        if let copyTagsToDataRepositoryAssociations = self.copyTagsToDataRepositoryAssociations {
            try encodeContainer.encode(copyTagsToDataRepositoryAssociations, forKey: .copyTagsToDataRepositoryAssociations)
        }
        if let dataRepositoryAssociations = dataRepositoryAssociations {
            var dataRepositoryAssociationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .dataRepositoryAssociations)
            for createfilecachedatarepositoryassociations0 in dataRepositoryAssociations {
                try dataRepositoryAssociationsContainer.encode(createfilecachedatarepositoryassociations0)
            }
        }
        if let fileCacheType = self.fileCacheType {
            try encodeContainer.encode(fileCacheType.rawValue, forKey: .fileCacheType)
        }
        if let fileCacheTypeVersion = self.fileCacheTypeVersion {
            try encodeContainer.encode(fileCacheTypeVersion, forKey: .fileCacheTypeVersion)
        }
        if let kmsKeyId = self.kmsKeyId {
            try encodeContainer.encode(kmsKeyId, forKey: .kmsKeyId)
        }
        if let lustreConfiguration = self.lustreConfiguration {
            try encodeContainer.encode(lustreConfiguration, forKey: .lustreConfiguration)
        }
        if let securityGroupIds = securityGroupIds {
            var securityGroupIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .securityGroupIds)
            for securitygroupids0 in securityGroupIds {
                try securityGroupIdsContainer.encode(securitygroupids0)
            }
        }
        if let storageCapacity = self.storageCapacity {
            try encodeContainer.encode(storageCapacity, forKey: .storageCapacity)
        }
        if let subnetIds = subnetIds {
            var subnetIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .subnetIds)
            for subnetids0 in subnetIds {
                try subnetIdsContainer.encode(subnetids0)
            }
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tags0 in tags {
                try tagsContainer.encode(tags0)
            }
        }
    }
}
