// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension FirehoseClientTypes.SplunkDestinationUpdate: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cloudWatchLoggingOptions = "CloudWatchLoggingOptions"
        case hECAcknowledgmentTimeoutInSeconds = "HECAcknowledgmentTimeoutInSeconds"
        case hECEndpoint = "HECEndpoint"
        case hECEndpointType = "HECEndpointType"
        case hECToken = "HECToken"
        case processingConfiguration = "ProcessingConfiguration"
        case retryOptions = "RetryOptions"
        case s3BackupMode = "S3BackupMode"
        case s3Update = "S3Update"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cloudWatchLoggingOptions = self.cloudWatchLoggingOptions {
            try encodeContainer.encode(cloudWatchLoggingOptions, forKey: .cloudWatchLoggingOptions)
        }
        if let hECAcknowledgmentTimeoutInSeconds = self.hECAcknowledgmentTimeoutInSeconds {
            try encodeContainer.encode(hECAcknowledgmentTimeoutInSeconds, forKey: .hECAcknowledgmentTimeoutInSeconds)
        }
        if let hECEndpoint = self.hECEndpoint {
            try encodeContainer.encode(hECEndpoint, forKey: .hECEndpoint)
        }
        if let hECEndpointType = self.hECEndpointType {
            try encodeContainer.encode(hECEndpointType.rawValue, forKey: .hECEndpointType)
        }
        if let hECToken = self.hECToken {
            try encodeContainer.encode(hECToken, forKey: .hECToken)
        }
        if let processingConfiguration = self.processingConfiguration {
            try encodeContainer.encode(processingConfiguration, forKey: .processingConfiguration)
        }
        if let retryOptions = self.retryOptions {
            try encodeContainer.encode(retryOptions, forKey: .retryOptions)
        }
        if let s3BackupMode = self.s3BackupMode {
            try encodeContainer.encode(s3BackupMode.rawValue, forKey: .s3BackupMode)
        }
        if let s3Update = self.s3Update {
            try encodeContainer.encode(s3Update, forKey: .s3Update)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let hECEndpointDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .hECEndpoint)
        hECEndpoint = hECEndpointDecoded
        let hECEndpointTypeDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.HECEndpointType.self, forKey: .hECEndpointType)
        hECEndpointType = hECEndpointTypeDecoded
        let hECTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .hECToken)
        hECToken = hECTokenDecoded
        let hECAcknowledgmentTimeoutInSecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .hECAcknowledgmentTimeoutInSeconds)
        hECAcknowledgmentTimeoutInSeconds = hECAcknowledgmentTimeoutInSecondsDecoded
        let retryOptionsDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.SplunkRetryOptions.self, forKey: .retryOptions)
        retryOptions = retryOptionsDecoded
        let s3BackupModeDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.SplunkS3BackupMode.self, forKey: .s3BackupMode)
        s3BackupMode = s3BackupModeDecoded
        let s3UpdateDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.S3DestinationUpdate.self, forKey: .s3Update)
        s3Update = s3UpdateDecoded
        let processingConfigurationDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.ProcessingConfiguration.self, forKey: .processingConfiguration)
        processingConfiguration = processingConfigurationDecoded
        let cloudWatchLoggingOptionsDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.CloudWatchLoggingOptions.self, forKey: .cloudWatchLoggingOptions)
        cloudWatchLoggingOptions = cloudWatchLoggingOptionsDecoded
    }
}
