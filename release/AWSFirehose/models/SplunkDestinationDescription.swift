// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension FirehoseClientTypes {
    /// Describes a destination in Splunk.
    public struct SplunkDestinationDescription: Swift.Equatable {
        /// The Amazon CloudWatch logging options for your delivery stream.
        public var cloudWatchLoggingOptions: FirehoseClientTypes.CloudWatchLoggingOptions?
        /// The amount of time that Kinesis Data Firehose waits to receive an acknowledgment from Splunk after it sends it data. At the end of the timeout period, Kinesis Data Firehose either tries to send the data again or considers it an error, based on your retry settings.
        public var hECAcknowledgmentTimeoutInSeconds: Swift.Int?
        /// The HTTP Event Collector (HEC) endpoint to which Kinesis Data Firehose sends your data.
        public var hECEndpoint: Swift.String?
        /// This type can be either "Raw" or "Event."
        public var hECEndpointType: FirehoseClientTypes.HECEndpointType?
        /// A GUID you obtain from your Splunk cluster when you create a new HEC endpoint.
        public var hECToken: Swift.String?
        /// The data processing configuration.
        public var processingConfiguration: FirehoseClientTypes.ProcessingConfiguration?
        /// The retry behavior in case Kinesis Data Firehose is unable to deliver data to Splunk or if it doesn't receive an acknowledgment of receipt from Splunk.
        public var retryOptions: FirehoseClientTypes.SplunkRetryOptions?
        /// Defines how documents should be delivered to Amazon S3. When set to FailedDocumentsOnly, Kinesis Data Firehose writes any data that could not be indexed to the configured Amazon S3 destination. When set to AllDocuments, Kinesis Data Firehose delivers all incoming records to Amazon S3, and also writes failed documents to Amazon S3. Default value is FailedDocumentsOnly.
        public var s3BackupMode: FirehoseClientTypes.SplunkS3BackupMode?
        /// The Amazon S3 destination.>
        public var s3DestinationDescription: FirehoseClientTypes.S3DestinationDescription?

        public init (
            cloudWatchLoggingOptions: FirehoseClientTypes.CloudWatchLoggingOptions? = nil,
            hECAcknowledgmentTimeoutInSeconds: Swift.Int? = nil,
            hECEndpoint: Swift.String? = nil,
            hECEndpointType: FirehoseClientTypes.HECEndpointType? = nil,
            hECToken: Swift.String? = nil,
            processingConfiguration: FirehoseClientTypes.ProcessingConfiguration? = nil,
            retryOptions: FirehoseClientTypes.SplunkRetryOptions? = nil,
            s3BackupMode: FirehoseClientTypes.SplunkS3BackupMode? = nil,
            s3DestinationDescription: FirehoseClientTypes.S3DestinationDescription? = nil
        )
        {
            self.cloudWatchLoggingOptions = cloudWatchLoggingOptions
            self.hECAcknowledgmentTimeoutInSeconds = hECAcknowledgmentTimeoutInSeconds
            self.hECEndpoint = hECEndpoint
            self.hECEndpointType = hECEndpointType
            self.hECToken = hECToken
            self.processingConfiguration = processingConfiguration
            self.retryOptions = retryOptions
            self.s3BackupMode = s3BackupMode
            self.s3DestinationDescription = s3DestinationDescription
        }
    }

}
