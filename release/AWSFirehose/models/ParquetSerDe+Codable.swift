// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension FirehoseClientTypes.ParquetSerDe: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case blockSizeBytes = "BlockSizeBytes"
        case compression = "Compression"
        case enableDictionaryCompression = "EnableDictionaryCompression"
        case maxPaddingBytes = "MaxPaddingBytes"
        case pageSizeBytes = "PageSizeBytes"
        case writerVersion = "WriterVersion"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let blockSizeBytes = self.blockSizeBytes {
            try encodeContainer.encode(blockSizeBytes, forKey: .blockSizeBytes)
        }
        if let compression = self.compression {
            try encodeContainer.encode(compression.rawValue, forKey: .compression)
        }
        if let enableDictionaryCompression = self.enableDictionaryCompression {
            try encodeContainer.encode(enableDictionaryCompression, forKey: .enableDictionaryCompression)
        }
        if let maxPaddingBytes = self.maxPaddingBytes {
            try encodeContainer.encode(maxPaddingBytes, forKey: .maxPaddingBytes)
        }
        if let pageSizeBytes = self.pageSizeBytes {
            try encodeContainer.encode(pageSizeBytes, forKey: .pageSizeBytes)
        }
        if let writerVersion = self.writerVersion {
            try encodeContainer.encode(writerVersion.rawValue, forKey: .writerVersion)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let blockSizeBytesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .blockSizeBytes)
        blockSizeBytes = blockSizeBytesDecoded
        let pageSizeBytesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .pageSizeBytes)
        pageSizeBytes = pageSizeBytesDecoded
        let compressionDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.ParquetCompression.self, forKey: .compression)
        compression = compressionDecoded
        let enableDictionaryCompressionDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enableDictionaryCompression)
        enableDictionaryCompression = enableDictionaryCompressionDecoded
        let maxPaddingBytesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxPaddingBytes)
        maxPaddingBytes = maxPaddingBytesDecoded
        let writerVersionDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.ParquetWriterVersion.self, forKey: .writerVersion)
        writerVersion = writerVersionDecoded
    }
}
