// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension FirehoseClientTypes.DeliveryStreamEncryptionConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case failureDescription = "FailureDescription"
        case keyARN = "KeyARN"
        case keyType = "KeyType"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let failureDescription = self.failureDescription {
            try encodeContainer.encode(failureDescription, forKey: .failureDescription)
        }
        if let keyARN = self.keyARN {
            try encodeContainer.encode(keyARN, forKey: .keyARN)
        }
        if let keyType = self.keyType {
            try encodeContainer.encode(keyType.rawValue, forKey: .keyType)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyARN)
        keyARN = keyARNDecoded
        let keyTypeDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.KeyType.self, forKey: .keyType)
        keyType = keyTypeDecoded
        let statusDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.DeliveryStreamEncryptionStatus.self, forKey: .status)
        status = statusDecoded
        let failureDescriptionDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.FailureDescription.self, forKey: .failureDescription)
        failureDescription = failureDescriptionDecoded
    }
}
