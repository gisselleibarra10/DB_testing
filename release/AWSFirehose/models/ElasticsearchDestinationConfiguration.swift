// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension FirehoseClientTypes {
    /// Describes the configuration of a destination in Amazon ES.
    public struct ElasticsearchDestinationConfiguration: Swift.Equatable {
        /// The buffering options. If no value is specified, the default values for ElasticsearchBufferingHints are used.
        public var bufferingHints: FirehoseClientTypes.ElasticsearchBufferingHints?
        /// The Amazon CloudWatch logging options for your delivery stream.
        public var cloudWatchLoggingOptions: FirehoseClientTypes.CloudWatchLoggingOptions?
        /// The endpoint to use when communicating with the cluster. Specify either this ClusterEndpoint or the DomainARN field.
        public var clusterEndpoint: Swift.String?
        /// The ARN of the Amazon ES domain. The IAM role must have permissions for DescribeElasticsearchDomain, DescribeElasticsearchDomains, and DescribeElasticsearchDomainConfig after assuming the role specified in RoleARN. For more information, see [Amazon Resource Names (ARNs) and AWS Service Namespaces](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html). Specify either ClusterEndpoint or DomainARN.
        public var domainARN: Swift.String?
        /// The Elasticsearch index name.
        /// This member is required.
        public var indexName: Swift.String?
        /// The Elasticsearch index rotation period. Index rotation appends a timestamp to the IndexName to facilitate the expiration of old data. For more information, see [Index Rotation for the Amazon ES Destination](https://docs.aws.amazon.com/firehose/latest/dev/basic-deliver.html#es-index-rotation). The default value is OneDay.
        public var indexRotationPeriod: FirehoseClientTypes.ElasticsearchIndexRotationPeriod?
        /// The data processing configuration.
        public var processingConfiguration: FirehoseClientTypes.ProcessingConfiguration?
        /// The retry behavior in case Kinesis Data Firehose is unable to deliver documents to Amazon ES. The default value is 300 (5 minutes).
        public var retryOptions: FirehoseClientTypes.ElasticsearchRetryOptions?
        /// The Amazon Resource Name (ARN) of the IAM role to be assumed by Kinesis Data Firehose for calling the Amazon ES Configuration API and for indexing documents. For more information, see [Grant Kinesis Data Firehose Access to an Amazon S3 Destination](https://docs.aws.amazon.com/firehose/latest/dev/controlling-access.html#using-iam-s3) and [Amazon Resource Names (ARNs) and AWS Service Namespaces](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html).
        /// This member is required.
        public var roleARN: Swift.String?
        /// Defines how documents should be delivered to Amazon S3. When it is set to FailedDocumentsOnly, Kinesis Data Firehose writes any documents that could not be indexed to the configured Amazon S3 destination, with elasticsearch-failed/ appended to the key prefix. When set to AllDocuments, Kinesis Data Firehose delivers all incoming records to Amazon S3, and also writes failed documents with elasticsearch-failed/ appended to the prefix. For more information, see [Amazon S3 Backup for the Amazon ES Destination](https://docs.aws.amazon.com/firehose/latest/dev/basic-deliver.html#es-s3-backup). Default value is FailedDocumentsOnly. You can't change this backup mode after you create the delivery stream.
        public var s3BackupMode: FirehoseClientTypes.ElasticsearchS3BackupMode?
        /// The configuration for the backup Amazon S3 location.
        /// This member is required.
        public var s3Configuration: FirehoseClientTypes.S3DestinationConfiguration?
        /// The Elasticsearch type name. For Elasticsearch 6.x, there can be only one type per index. If you try to specify a new type for an existing index that already has another type, Kinesis Data Firehose returns an error during run time. For Elasticsearch 7.x, don't specify a TypeName.
        public var typeName: Swift.String?
        /// The details of the VPC of the Amazon ES destination.
        public var vpcConfiguration: FirehoseClientTypes.VpcConfiguration?

        public init (
            bufferingHints: FirehoseClientTypes.ElasticsearchBufferingHints? = nil,
            cloudWatchLoggingOptions: FirehoseClientTypes.CloudWatchLoggingOptions? = nil,
            clusterEndpoint: Swift.String? = nil,
            domainARN: Swift.String? = nil,
            indexName: Swift.String? = nil,
            indexRotationPeriod: FirehoseClientTypes.ElasticsearchIndexRotationPeriod? = nil,
            processingConfiguration: FirehoseClientTypes.ProcessingConfiguration? = nil,
            retryOptions: FirehoseClientTypes.ElasticsearchRetryOptions? = nil,
            roleARN: Swift.String? = nil,
            s3BackupMode: FirehoseClientTypes.ElasticsearchS3BackupMode? = nil,
            s3Configuration: FirehoseClientTypes.S3DestinationConfiguration? = nil,
            typeName: Swift.String? = nil,
            vpcConfiguration: FirehoseClientTypes.VpcConfiguration? = nil
        )
        {
            self.bufferingHints = bufferingHints
            self.cloudWatchLoggingOptions = cloudWatchLoggingOptions
            self.clusterEndpoint = clusterEndpoint
            self.domainARN = domainARN
            self.indexName = indexName
            self.indexRotationPeriod = indexRotationPeriod
            self.processingConfiguration = processingConfiguration
            self.retryOptions = retryOptions
            self.roleARN = roleARN
            self.s3BackupMode = s3BackupMode
            self.s3Configuration = s3Configuration
            self.typeName = typeName
            self.vpcConfiguration = vpcConfiguration
        }
    }

}
