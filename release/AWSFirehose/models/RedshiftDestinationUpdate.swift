// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension FirehoseClientTypes {
    /// Describes an update for a destination in Amazon Redshift.
    public struct RedshiftDestinationUpdate: Swift.Equatable {
        /// The Amazon CloudWatch logging options for your delivery stream.
        public var cloudWatchLoggingOptions: FirehoseClientTypes.CloudWatchLoggingOptions?
        /// The database connection string.
        public var clusterJDBCURL: Swift.String?
        /// The COPY command.
        public var copyCommand: FirehoseClientTypes.CopyCommand?
        /// The user password.
        public var password: Swift.String?
        /// The data processing configuration.
        public var processingConfiguration: FirehoseClientTypes.ProcessingConfiguration?
        /// The retry behavior in case Kinesis Data Firehose is unable to deliver documents to Amazon Redshift. Default value is 3600 (60 minutes).
        public var retryOptions: FirehoseClientTypes.RedshiftRetryOptions?
        /// The Amazon Resource Name (ARN) of the AWS credentials. For more information, see [Amazon Resource Names (ARNs) and AWS Service Namespaces](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html).
        public var roleARN: Swift.String?
        /// You can update a delivery stream to enable Amazon S3 backup if it is disabled. If backup is enabled, you can't update the delivery stream to disable it.
        public var s3BackupMode: FirehoseClientTypes.RedshiftS3BackupMode?
        /// The Amazon S3 destination for backup.
        public var s3BackupUpdate: FirehoseClientTypes.S3DestinationUpdate?
        /// The Amazon S3 destination. The compression formats SNAPPY or ZIP cannot be specified in RedshiftDestinationUpdate.S3Update because the Amazon Redshift COPY operation that reads from the S3 bucket doesn't support these compression formats.
        public var s3Update: FirehoseClientTypes.S3DestinationUpdate?
        /// The name of the user.
        public var username: Swift.String?

        public init (
            cloudWatchLoggingOptions: FirehoseClientTypes.CloudWatchLoggingOptions? = nil,
            clusterJDBCURL: Swift.String? = nil,
            copyCommand: FirehoseClientTypes.CopyCommand? = nil,
            password: Swift.String? = nil,
            processingConfiguration: FirehoseClientTypes.ProcessingConfiguration? = nil,
            retryOptions: FirehoseClientTypes.RedshiftRetryOptions? = nil,
            roleARN: Swift.String? = nil,
            s3BackupMode: FirehoseClientTypes.RedshiftS3BackupMode? = nil,
            s3BackupUpdate: FirehoseClientTypes.S3DestinationUpdate? = nil,
            s3Update: FirehoseClientTypes.S3DestinationUpdate? = nil,
            username: Swift.String? = nil
        )
        {
            self.cloudWatchLoggingOptions = cloudWatchLoggingOptions
            self.clusterJDBCURL = clusterJDBCURL
            self.copyCommand = copyCommand
            self.password = password
            self.processingConfiguration = processingConfiguration
            self.retryOptions = retryOptions
            self.roleARN = roleARN
            self.s3BackupMode = s3BackupMode
            self.s3BackupUpdate = s3BackupUpdate
            self.s3Update = s3Update
            self.username = username
        }
    }

}
