// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension FirehoseClientTypes.ExtendedS3DestinationUpdate: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bucketARN = "BucketARN"
        case bufferingHints = "BufferingHints"
        case cloudWatchLoggingOptions = "CloudWatchLoggingOptions"
        case compressionFormat = "CompressionFormat"
        case dataFormatConversionConfiguration = "DataFormatConversionConfiguration"
        case dynamicPartitioningConfiguration = "DynamicPartitioningConfiguration"
        case encryptionConfiguration = "EncryptionConfiguration"
        case errorOutputPrefix = "ErrorOutputPrefix"
        case `prefix` = "Prefix"
        case processingConfiguration = "ProcessingConfiguration"
        case roleARN = "RoleARN"
        case s3BackupMode = "S3BackupMode"
        case s3BackupUpdate = "S3BackupUpdate"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let bucketARN = self.bucketARN {
            try encodeContainer.encode(bucketARN, forKey: .bucketARN)
        }
        if let bufferingHints = self.bufferingHints {
            try encodeContainer.encode(bufferingHints, forKey: .bufferingHints)
        }
        if let cloudWatchLoggingOptions = self.cloudWatchLoggingOptions {
            try encodeContainer.encode(cloudWatchLoggingOptions, forKey: .cloudWatchLoggingOptions)
        }
        if let compressionFormat = self.compressionFormat {
            try encodeContainer.encode(compressionFormat.rawValue, forKey: .compressionFormat)
        }
        if let dataFormatConversionConfiguration = self.dataFormatConversionConfiguration {
            try encodeContainer.encode(dataFormatConversionConfiguration, forKey: .dataFormatConversionConfiguration)
        }
        if let dynamicPartitioningConfiguration = self.dynamicPartitioningConfiguration {
            try encodeContainer.encode(dynamicPartitioningConfiguration, forKey: .dynamicPartitioningConfiguration)
        }
        if let encryptionConfiguration = self.encryptionConfiguration {
            try encodeContainer.encode(encryptionConfiguration, forKey: .encryptionConfiguration)
        }
        if let errorOutputPrefix = self.errorOutputPrefix {
            try encodeContainer.encode(errorOutputPrefix, forKey: .errorOutputPrefix)
        }
        if let `prefix` = self.`prefix` {
            try encodeContainer.encode(`prefix`, forKey: .`prefix`)
        }
        if let processingConfiguration = self.processingConfiguration {
            try encodeContainer.encode(processingConfiguration, forKey: .processingConfiguration)
        }
        if let roleARN = self.roleARN {
            try encodeContainer.encode(roleARN, forKey: .roleARN)
        }
        if let s3BackupMode = self.s3BackupMode {
            try encodeContainer.encode(s3BackupMode.rawValue, forKey: .s3BackupMode)
        }
        if let s3BackupUpdate = self.s3BackupUpdate {
            try encodeContainer.encode(s3BackupUpdate, forKey: .s3BackupUpdate)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let roleARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleARN)
        roleARN = roleARNDecoded
        let bucketARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .bucketARN)
        bucketARN = bucketARNDecoded
        let prefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .prefix)
        `prefix` = prefixDecoded
        let errorOutputPrefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .errorOutputPrefix)
        errorOutputPrefix = errorOutputPrefixDecoded
        let bufferingHintsDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.BufferingHints.self, forKey: .bufferingHints)
        bufferingHints = bufferingHintsDecoded
        let compressionFormatDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.CompressionFormat.self, forKey: .compressionFormat)
        compressionFormat = compressionFormatDecoded
        let encryptionConfigurationDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.EncryptionConfiguration.self, forKey: .encryptionConfiguration)
        encryptionConfiguration = encryptionConfigurationDecoded
        let cloudWatchLoggingOptionsDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.CloudWatchLoggingOptions.self, forKey: .cloudWatchLoggingOptions)
        cloudWatchLoggingOptions = cloudWatchLoggingOptionsDecoded
        let processingConfigurationDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.ProcessingConfiguration.self, forKey: .processingConfiguration)
        processingConfiguration = processingConfigurationDecoded
        let s3BackupModeDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.S3BackupMode.self, forKey: .s3BackupMode)
        s3BackupMode = s3BackupModeDecoded
        let s3BackupUpdateDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.S3DestinationUpdate.self, forKey: .s3BackupUpdate)
        s3BackupUpdate = s3BackupUpdateDecoded
        let dataFormatConversionConfigurationDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.DataFormatConversionConfiguration.self, forKey: .dataFormatConversionConfiguration)
        dataFormatConversionConfiguration = dataFormatConversionConfigurationDecoded
        let dynamicPartitioningConfigurationDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.DynamicPartitioningConfiguration.self, forKey: .dynamicPartitioningConfiguration)
        dynamicPartitioningConfiguration = dynamicPartitioningConfigurationDecoded
    }
}
