// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateDeliveryStreamInputBody: Swift.Equatable {
    let deliveryStreamName: Swift.String?
    let deliveryStreamType: FirehoseClientTypes.DeliveryStreamType?
    let kinesisStreamSourceConfiguration: FirehoseClientTypes.KinesisStreamSourceConfiguration?
    let deliveryStreamEncryptionConfigurationInput: FirehoseClientTypes.DeliveryStreamEncryptionConfigurationInput?
    let s3DestinationConfiguration: FirehoseClientTypes.S3DestinationConfiguration?
    let extendedS3DestinationConfiguration: FirehoseClientTypes.ExtendedS3DestinationConfiguration?
    let redshiftDestinationConfiguration: FirehoseClientTypes.RedshiftDestinationConfiguration?
    let elasticsearchDestinationConfiguration: FirehoseClientTypes.ElasticsearchDestinationConfiguration?
    let amazonopensearchserviceDestinationConfiguration: FirehoseClientTypes.AmazonopensearchserviceDestinationConfiguration?
    let splunkDestinationConfiguration: FirehoseClientTypes.SplunkDestinationConfiguration?
    let httpEndpointDestinationConfiguration: FirehoseClientTypes.HttpEndpointDestinationConfiguration?
    let tags: [FirehoseClientTypes.Tag]?
}

extension CreateDeliveryStreamInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case amazonopensearchserviceDestinationConfiguration = "AmazonopensearchserviceDestinationConfiguration"
        case deliveryStreamEncryptionConfigurationInput = "DeliveryStreamEncryptionConfigurationInput"
        case deliveryStreamName = "DeliveryStreamName"
        case deliveryStreamType = "DeliveryStreamType"
        case elasticsearchDestinationConfiguration = "ElasticsearchDestinationConfiguration"
        case extendedS3DestinationConfiguration = "ExtendedS3DestinationConfiguration"
        case httpEndpointDestinationConfiguration = "HttpEndpointDestinationConfiguration"
        case kinesisStreamSourceConfiguration = "KinesisStreamSourceConfiguration"
        case redshiftDestinationConfiguration = "RedshiftDestinationConfiguration"
        case s3DestinationConfiguration = "S3DestinationConfiguration"
        case splunkDestinationConfiguration = "SplunkDestinationConfiguration"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deliveryStreamNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deliveryStreamName)
        deliveryStreamName = deliveryStreamNameDecoded
        let deliveryStreamTypeDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.DeliveryStreamType.self, forKey: .deliveryStreamType)
        deliveryStreamType = deliveryStreamTypeDecoded
        let kinesisStreamSourceConfigurationDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.KinesisStreamSourceConfiguration.self, forKey: .kinesisStreamSourceConfiguration)
        kinesisStreamSourceConfiguration = kinesisStreamSourceConfigurationDecoded
        let deliveryStreamEncryptionConfigurationInputDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.DeliveryStreamEncryptionConfigurationInput.self, forKey: .deliveryStreamEncryptionConfigurationInput)
        deliveryStreamEncryptionConfigurationInput = deliveryStreamEncryptionConfigurationInputDecoded
        let s3DestinationConfigurationDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.S3DestinationConfiguration.self, forKey: .s3DestinationConfiguration)
        s3DestinationConfiguration = s3DestinationConfigurationDecoded
        let extendedS3DestinationConfigurationDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.ExtendedS3DestinationConfiguration.self, forKey: .extendedS3DestinationConfiguration)
        extendedS3DestinationConfiguration = extendedS3DestinationConfigurationDecoded
        let redshiftDestinationConfigurationDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.RedshiftDestinationConfiguration.self, forKey: .redshiftDestinationConfiguration)
        redshiftDestinationConfiguration = redshiftDestinationConfigurationDecoded
        let elasticsearchDestinationConfigurationDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.ElasticsearchDestinationConfiguration.self, forKey: .elasticsearchDestinationConfiguration)
        elasticsearchDestinationConfiguration = elasticsearchDestinationConfigurationDecoded
        let amazonopensearchserviceDestinationConfigurationDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.AmazonopensearchserviceDestinationConfiguration.self, forKey: .amazonopensearchserviceDestinationConfiguration)
        amazonopensearchserviceDestinationConfiguration = amazonopensearchserviceDestinationConfigurationDecoded
        let splunkDestinationConfigurationDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.SplunkDestinationConfiguration.self, forKey: .splunkDestinationConfiguration)
        splunkDestinationConfiguration = splunkDestinationConfigurationDecoded
        let httpEndpointDestinationConfigurationDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.HttpEndpointDestinationConfiguration.self, forKey: .httpEndpointDestinationConfiguration)
        httpEndpointDestinationConfiguration = httpEndpointDestinationConfigurationDecoded
        let tagsContainer = try containerValues.decodeIfPresent([FirehoseClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[FirehoseClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [FirehoseClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}
