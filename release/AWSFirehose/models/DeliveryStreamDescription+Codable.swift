// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension FirehoseClientTypes.DeliveryStreamDescription: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createTimestamp = "CreateTimestamp"
        case deliveryStreamARN = "DeliveryStreamARN"
        case deliveryStreamEncryptionConfiguration = "DeliveryStreamEncryptionConfiguration"
        case deliveryStreamName = "DeliveryStreamName"
        case deliveryStreamStatus = "DeliveryStreamStatus"
        case deliveryStreamType = "DeliveryStreamType"
        case destinations = "Destinations"
        case failureDescription = "FailureDescription"
        case hasMoreDestinations = "HasMoreDestinations"
        case lastUpdateTimestamp = "LastUpdateTimestamp"
        case source = "Source"
        case versionId = "VersionId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let createTimestamp = self.createTimestamp {
            try encodeContainer.encode(createTimestamp.timeIntervalSince1970, forKey: .createTimestamp)
        }
        if let deliveryStreamARN = self.deliveryStreamARN {
            try encodeContainer.encode(deliveryStreamARN, forKey: .deliveryStreamARN)
        }
        if let deliveryStreamEncryptionConfiguration = self.deliveryStreamEncryptionConfiguration {
            try encodeContainer.encode(deliveryStreamEncryptionConfiguration, forKey: .deliveryStreamEncryptionConfiguration)
        }
        if let deliveryStreamName = self.deliveryStreamName {
            try encodeContainer.encode(deliveryStreamName, forKey: .deliveryStreamName)
        }
        if let deliveryStreamStatus = self.deliveryStreamStatus {
            try encodeContainer.encode(deliveryStreamStatus.rawValue, forKey: .deliveryStreamStatus)
        }
        if let deliveryStreamType = self.deliveryStreamType {
            try encodeContainer.encode(deliveryStreamType.rawValue, forKey: .deliveryStreamType)
        }
        if let destinations = destinations {
            var destinationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .destinations)
            for destinationdescriptionlist0 in destinations {
                try destinationsContainer.encode(destinationdescriptionlist0)
            }
        }
        if let failureDescription = self.failureDescription {
            try encodeContainer.encode(failureDescription, forKey: .failureDescription)
        }
        if let hasMoreDestinations = self.hasMoreDestinations {
            try encodeContainer.encode(hasMoreDestinations, forKey: .hasMoreDestinations)
        }
        if let lastUpdateTimestamp = self.lastUpdateTimestamp {
            try encodeContainer.encode(lastUpdateTimestamp.timeIntervalSince1970, forKey: .lastUpdateTimestamp)
        }
        if let source = self.source {
            try encodeContainer.encode(source, forKey: .source)
        }
        if let versionId = self.versionId {
            try encodeContainer.encode(versionId, forKey: .versionId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deliveryStreamNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deliveryStreamName)
        deliveryStreamName = deliveryStreamNameDecoded
        let deliveryStreamARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deliveryStreamARN)
        deliveryStreamARN = deliveryStreamARNDecoded
        let deliveryStreamStatusDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.DeliveryStreamStatus.self, forKey: .deliveryStreamStatus)
        deliveryStreamStatus = deliveryStreamStatusDecoded
        let failureDescriptionDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.FailureDescription.self, forKey: .failureDescription)
        failureDescription = failureDescriptionDecoded
        let deliveryStreamEncryptionConfigurationDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.DeliveryStreamEncryptionConfiguration.self, forKey: .deliveryStreamEncryptionConfiguration)
        deliveryStreamEncryptionConfiguration = deliveryStreamEncryptionConfigurationDecoded
        let deliveryStreamTypeDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.DeliveryStreamType.self, forKey: .deliveryStreamType)
        deliveryStreamType = deliveryStreamTypeDecoded
        let versionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .versionId)
        versionId = versionIdDecoded
        let createTimestampDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createTimestamp)
        createTimestamp = createTimestampDecoded
        let lastUpdateTimestampDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastUpdateTimestamp)
        lastUpdateTimestamp = lastUpdateTimestampDecoded
        let sourceDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.SourceDescription.self, forKey: .source)
        source = sourceDecoded
        let destinationsContainer = try containerValues.decodeIfPresent([FirehoseClientTypes.DestinationDescription?].self, forKey: .destinations)
        var destinationsDecoded0:[FirehoseClientTypes.DestinationDescription]? = nil
        if let destinationsContainer = destinationsContainer {
            destinationsDecoded0 = [FirehoseClientTypes.DestinationDescription]()
            for structure0 in destinationsContainer {
                if let structure0 = structure0 {
                    destinationsDecoded0?.append(structure0)
                }
            }
        }
        destinations = destinationsDecoded0
        let hasMoreDestinationsDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .hasMoreDestinations)
        hasMoreDestinations = hasMoreDestinationsDecoded
    }
}
