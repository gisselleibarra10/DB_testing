// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct PutRecordBatchOutputResponseBody: Swift.Equatable {
    let failedPutCount: Swift.Int?
    let encrypted: Swift.Bool?
    let requestResponses: [FirehoseClientTypes.PutRecordBatchResponseEntry]?
}

extension PutRecordBatchOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case encrypted = "Encrypted"
        case failedPutCount = "FailedPutCount"
        case requestResponses = "RequestResponses"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let failedPutCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .failedPutCount)
        failedPutCount = failedPutCountDecoded
        let encryptedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .encrypted)
        encrypted = encryptedDecoded
        let requestResponsesContainer = try containerValues.decodeIfPresent([FirehoseClientTypes.PutRecordBatchResponseEntry?].self, forKey: .requestResponses)
        var requestResponsesDecoded0:[FirehoseClientTypes.PutRecordBatchResponseEntry]? = nil
        if let requestResponsesContainer = requestResponsesContainer {
            requestResponsesDecoded0 = [FirehoseClientTypes.PutRecordBatchResponseEntry]()
            for structure0 in requestResponsesContainer {
                if let structure0 = structure0 {
                    requestResponsesDecoded0?.append(structure0)
                }
            }
        }
        requestResponses = requestResponsesDecoded0
    }
}
