// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension FirehoseClientTypes.RedshiftDestinationUpdate: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cloudWatchLoggingOptions = "CloudWatchLoggingOptions"
        case clusterJDBCURL = "ClusterJDBCURL"
        case copyCommand = "CopyCommand"
        case password = "Password"
        case processingConfiguration = "ProcessingConfiguration"
        case retryOptions = "RetryOptions"
        case roleARN = "RoleARN"
        case s3BackupMode = "S3BackupMode"
        case s3BackupUpdate = "S3BackupUpdate"
        case s3Update = "S3Update"
        case username = "Username"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cloudWatchLoggingOptions = self.cloudWatchLoggingOptions {
            try encodeContainer.encode(cloudWatchLoggingOptions, forKey: .cloudWatchLoggingOptions)
        }
        if let clusterJDBCURL = self.clusterJDBCURL {
            try encodeContainer.encode(clusterJDBCURL, forKey: .clusterJDBCURL)
        }
        if let copyCommand = self.copyCommand {
            try encodeContainer.encode(copyCommand, forKey: .copyCommand)
        }
        if let password = self.password {
            try encodeContainer.encode(password, forKey: .password)
        }
        if let processingConfiguration = self.processingConfiguration {
            try encodeContainer.encode(processingConfiguration, forKey: .processingConfiguration)
        }
        if let retryOptions = self.retryOptions {
            try encodeContainer.encode(retryOptions, forKey: .retryOptions)
        }
        if let roleARN = self.roleARN {
            try encodeContainer.encode(roleARN, forKey: .roleARN)
        }
        if let s3BackupMode = self.s3BackupMode {
            try encodeContainer.encode(s3BackupMode.rawValue, forKey: .s3BackupMode)
        }
        if let s3BackupUpdate = self.s3BackupUpdate {
            try encodeContainer.encode(s3BackupUpdate, forKey: .s3BackupUpdate)
        }
        if let s3Update = self.s3Update {
            try encodeContainer.encode(s3Update, forKey: .s3Update)
        }
        if let username = self.username {
            try encodeContainer.encode(username, forKey: .username)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let roleARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleARN)
        roleARN = roleARNDecoded
        let clusterJDBCURLDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterJDBCURL)
        clusterJDBCURL = clusterJDBCURLDecoded
        let copyCommandDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.CopyCommand.self, forKey: .copyCommand)
        copyCommand = copyCommandDecoded
        let usernameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .username)
        username = usernameDecoded
        let passwordDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .password)
        password = passwordDecoded
        let retryOptionsDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.RedshiftRetryOptions.self, forKey: .retryOptions)
        retryOptions = retryOptionsDecoded
        let s3UpdateDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.S3DestinationUpdate.self, forKey: .s3Update)
        s3Update = s3UpdateDecoded
        let processingConfigurationDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.ProcessingConfiguration.self, forKey: .processingConfiguration)
        processingConfiguration = processingConfigurationDecoded
        let s3BackupModeDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.RedshiftS3BackupMode.self, forKey: .s3BackupMode)
        s3BackupMode = s3BackupModeDecoded
        let s3BackupUpdateDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.S3DestinationUpdate.self, forKey: .s3BackupUpdate)
        s3BackupUpdate = s3BackupUpdateDecoded
        let cloudWatchLoggingOptionsDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.CloudWatchLoggingOptions.self, forKey: .cloudWatchLoggingOptions)
        cloudWatchLoggingOptions = cloudWatchLoggingOptionsDecoded
    }
}
