// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension FirehoseClientTypes.DestinationDescription: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case amazonopensearchserviceDestinationDescription = "AmazonopensearchserviceDestinationDescription"
        case destinationId = "DestinationId"
        case elasticsearchDestinationDescription = "ElasticsearchDestinationDescription"
        case extendedS3DestinationDescription = "ExtendedS3DestinationDescription"
        case httpEndpointDestinationDescription = "HttpEndpointDestinationDescription"
        case redshiftDestinationDescription = "RedshiftDestinationDescription"
        case s3DestinationDescription = "S3DestinationDescription"
        case splunkDestinationDescription = "SplunkDestinationDescription"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let amazonopensearchserviceDestinationDescription = self.amazonopensearchserviceDestinationDescription {
            try encodeContainer.encode(amazonopensearchserviceDestinationDescription, forKey: .amazonopensearchserviceDestinationDescription)
        }
        if let destinationId = self.destinationId {
            try encodeContainer.encode(destinationId, forKey: .destinationId)
        }
        if let elasticsearchDestinationDescription = self.elasticsearchDestinationDescription {
            try encodeContainer.encode(elasticsearchDestinationDescription, forKey: .elasticsearchDestinationDescription)
        }
        if let extendedS3DestinationDescription = self.extendedS3DestinationDescription {
            try encodeContainer.encode(extendedS3DestinationDescription, forKey: .extendedS3DestinationDescription)
        }
        if let httpEndpointDestinationDescription = self.httpEndpointDestinationDescription {
            try encodeContainer.encode(httpEndpointDestinationDescription, forKey: .httpEndpointDestinationDescription)
        }
        if let redshiftDestinationDescription = self.redshiftDestinationDescription {
            try encodeContainer.encode(redshiftDestinationDescription, forKey: .redshiftDestinationDescription)
        }
        if let s3DestinationDescription = self.s3DestinationDescription {
            try encodeContainer.encode(s3DestinationDescription, forKey: .s3DestinationDescription)
        }
        if let splunkDestinationDescription = self.splunkDestinationDescription {
            try encodeContainer.encode(splunkDestinationDescription, forKey: .splunkDestinationDescription)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let destinationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .destinationId)
        destinationId = destinationIdDecoded
        let s3DestinationDescriptionDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.S3DestinationDescription.self, forKey: .s3DestinationDescription)
        s3DestinationDescription = s3DestinationDescriptionDecoded
        let extendedS3DestinationDescriptionDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.ExtendedS3DestinationDescription.self, forKey: .extendedS3DestinationDescription)
        extendedS3DestinationDescription = extendedS3DestinationDescriptionDecoded
        let redshiftDestinationDescriptionDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.RedshiftDestinationDescription.self, forKey: .redshiftDestinationDescription)
        redshiftDestinationDescription = redshiftDestinationDescriptionDecoded
        let elasticsearchDestinationDescriptionDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.ElasticsearchDestinationDescription.self, forKey: .elasticsearchDestinationDescription)
        elasticsearchDestinationDescription = elasticsearchDestinationDescriptionDecoded
        let amazonopensearchserviceDestinationDescriptionDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.AmazonopensearchserviceDestinationDescription.self, forKey: .amazonopensearchserviceDestinationDescription)
        amazonopensearchserviceDestinationDescription = amazonopensearchserviceDestinationDescriptionDecoded
        let splunkDestinationDescriptionDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.SplunkDestinationDescription.self, forKey: .splunkDestinationDescription)
        splunkDestinationDescription = splunkDestinationDescriptionDecoded
        let httpEndpointDestinationDescriptionDecoded = try containerValues.decodeIfPresent(FirehoseClientTypes.HttpEndpointDestinationDescription.self, forKey: .httpEndpointDestinationDescription)
        httpEndpointDestinationDescription = httpEndpointDestinationDescriptionDecoded
    }
}
