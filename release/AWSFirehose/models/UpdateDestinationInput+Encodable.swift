// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension UpdateDestinationInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case amazonopensearchserviceDestinationUpdate = "AmazonopensearchserviceDestinationUpdate"
        case currentDeliveryStreamVersionId = "CurrentDeliveryStreamVersionId"
        case deliveryStreamName = "DeliveryStreamName"
        case destinationId = "DestinationId"
        case elasticsearchDestinationUpdate = "ElasticsearchDestinationUpdate"
        case extendedS3DestinationUpdate = "ExtendedS3DestinationUpdate"
        case httpEndpointDestinationUpdate = "HttpEndpointDestinationUpdate"
        case redshiftDestinationUpdate = "RedshiftDestinationUpdate"
        case s3DestinationUpdate = "S3DestinationUpdate"
        case splunkDestinationUpdate = "SplunkDestinationUpdate"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let amazonopensearchserviceDestinationUpdate = self.amazonopensearchserviceDestinationUpdate {
            try encodeContainer.encode(amazonopensearchserviceDestinationUpdate, forKey: .amazonopensearchserviceDestinationUpdate)
        }
        if let currentDeliveryStreamVersionId = self.currentDeliveryStreamVersionId {
            try encodeContainer.encode(currentDeliveryStreamVersionId, forKey: .currentDeliveryStreamVersionId)
        }
        if let deliveryStreamName = self.deliveryStreamName {
            try encodeContainer.encode(deliveryStreamName, forKey: .deliveryStreamName)
        }
        if let destinationId = self.destinationId {
            try encodeContainer.encode(destinationId, forKey: .destinationId)
        }
        if let elasticsearchDestinationUpdate = self.elasticsearchDestinationUpdate {
            try encodeContainer.encode(elasticsearchDestinationUpdate, forKey: .elasticsearchDestinationUpdate)
        }
        if let extendedS3DestinationUpdate = self.extendedS3DestinationUpdate {
            try encodeContainer.encode(extendedS3DestinationUpdate, forKey: .extendedS3DestinationUpdate)
        }
        if let httpEndpointDestinationUpdate = self.httpEndpointDestinationUpdate {
            try encodeContainer.encode(httpEndpointDestinationUpdate, forKey: .httpEndpointDestinationUpdate)
        }
        if let redshiftDestinationUpdate = self.redshiftDestinationUpdate {
            try encodeContainer.encode(redshiftDestinationUpdate, forKey: .redshiftDestinationUpdate)
        }
        if let s3DestinationUpdate = self.s3DestinationUpdate {
            try encodeContainer.encode(s3DestinationUpdate, forKey: .s3DestinationUpdate)
        }
        if let splunkDestinationUpdate = self.splunkDestinationUpdate {
            try encodeContainer.encode(splunkDestinationUpdate, forKey: .splunkDestinationUpdate)
        }
    }
}
