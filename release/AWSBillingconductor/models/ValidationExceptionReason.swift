// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension BillingconductorClientTypes {
    public enum ValidationExceptionReason: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case accountsAlreadyAssociated
        case accountsNotAssociated
        case cannotParse
        case duplicateAccount
        case duplicatePricingruleArns
        case fieldValidationFailed
        case illegalAccounts
        case illegalBillingPeriod
        case illegalBillingPeriodRange
        case illegalChargeDetails
        case illegalCustomlineitem
        case illegalCustomlineitemModification
        case illegalCustomlineitemUpdate
        case illegalExpression
        case illegalPrimaryAccount
        case illegalResourceArns
        case illegalScope
        case illegalService
        case illegalUpdateChargeDetails
        case invalidArn
        case invalidBillingviewArn
        case invalidBillingGroupStatus
        case invalidTimeRange
        case mismatchedBillinggroupArn
        case mismatchedBillingviewArn
        case mismatchedCustomlineitemArn
        case mismatchedPricingplanArn
        case mismatchedPricingruleArn
        case missingBillinggroup
        case missingCustomlineitem
        case missingLinkedAccountIds
        case missingPricingplan
        case missingPricingPlanArn
        case multipleLinkedAccountIds
        case multiplePricingPlanArn
        case other
        case pricingrulesAlreadyAssociated
        case pricingrulesNotAssociated
        case pricingrulesNotExist
        case primaryCannotDisassociate
        case primaryNotAssociated
        case tooManyAccountsInRequest
        case tooManyCustomlineitemsInRequest
        case unknownOperation
        case sdkUnknown(Swift.String)

        public static var allCases: [ValidationExceptionReason] {
            return [
                .accountsAlreadyAssociated,
                .accountsNotAssociated,
                .cannotParse,
                .duplicateAccount,
                .duplicatePricingruleArns,
                .fieldValidationFailed,
                .illegalAccounts,
                .illegalBillingPeriod,
                .illegalBillingPeriodRange,
                .illegalChargeDetails,
                .illegalCustomlineitem,
                .illegalCustomlineitemModification,
                .illegalCustomlineitemUpdate,
                .illegalExpression,
                .illegalPrimaryAccount,
                .illegalResourceArns,
                .illegalScope,
                .illegalService,
                .illegalUpdateChargeDetails,
                .invalidArn,
                .invalidBillingviewArn,
                .invalidBillingGroupStatus,
                .invalidTimeRange,
                .mismatchedBillinggroupArn,
                .mismatchedBillingviewArn,
                .mismatchedCustomlineitemArn,
                .mismatchedPricingplanArn,
                .mismatchedPricingruleArn,
                .missingBillinggroup,
                .missingCustomlineitem,
                .missingLinkedAccountIds,
                .missingPricingplan,
                .missingPricingPlanArn,
                .multipleLinkedAccountIds,
                .multiplePricingPlanArn,
                .other,
                .pricingrulesAlreadyAssociated,
                .pricingrulesNotAssociated,
                .pricingrulesNotExist,
                .primaryCannotDisassociate,
                .primaryNotAssociated,
                .tooManyAccountsInRequest,
                .tooManyCustomlineitemsInRequest,
                .unknownOperation,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .accountsAlreadyAssociated: return "ACCOUNTS_ALREADY_ASSOCIATED"
            case .accountsNotAssociated: return "ACCOUNTS_NOT_ASSOCIATED"
            case .cannotParse: return "CANNOT_PARSE"
            case .duplicateAccount: return "DUPLICATE_ACCOUNT"
            case .duplicatePricingruleArns: return "DUPLICATE_PRICINGRULE_ARNS"
            case .fieldValidationFailed: return "FIELD_VALIDATION_FAILED"
            case .illegalAccounts: return "ILLEGAL_ACCOUNTS"
            case .illegalBillingPeriod: return "ILLEGAL_BILLING_PERIOD"
            case .illegalBillingPeriodRange: return "ILLEGAL_BILLING_PERIOD_RANGE"
            case .illegalChargeDetails: return "ILLEGAL_CHARGE_DETAILS"
            case .illegalCustomlineitem: return "ILLEGAL_CUSTOMLINEITEM"
            case .illegalCustomlineitemModification: return "ILLEGAL_CUSTOMLINEITEM_MODIFICATION"
            case .illegalCustomlineitemUpdate: return "ILLEGAL_CUSTOMLINEITEM_UPDATE"
            case .illegalExpression: return "ILLEGAL_EXPRESSION"
            case .illegalPrimaryAccount: return "ILLEGAL_PRIMARY_ACCOUNT"
            case .illegalResourceArns: return "ILLEGAL_RESOURCE_ARNS"
            case .illegalScope: return "ILLEGAL_SCOPE"
            case .illegalService: return "ILLEGAL_SERVICE"
            case .illegalUpdateChargeDetails: return "ILLEGAL_UPDATE_CHARGE_DETAILS"
            case .invalidArn: return "INVALID_ARN"
            case .invalidBillingviewArn: return "INVALID_BILLINGVIEW_ARN"
            case .invalidBillingGroupStatus: return "INVALID_BILLING_GROUP_STATUS"
            case .invalidTimeRange: return "INVALID_TIME_RANGE"
            case .mismatchedBillinggroupArn: return "MISMATCHED_BILLINGGROUP_ARN"
            case .mismatchedBillingviewArn: return "MISMATCHED_BILLINGVIEW_ARN"
            case .mismatchedCustomlineitemArn: return "MISMATCHED_CUSTOMLINEITEM_ARN"
            case .mismatchedPricingplanArn: return "MISMATCHED_PRICINGPLAN_ARN"
            case .mismatchedPricingruleArn: return "MISMATCHED_PRICINGRULE_ARN"
            case .missingBillinggroup: return "MISSING_BILLINGGROUP"
            case .missingCustomlineitem: return "MISSING_CUSTOMLINEITEM"
            case .missingLinkedAccountIds: return "MISSING_LINKED_ACCOUNT_IDS"
            case .missingPricingplan: return "MISSING_PRICINGPLAN"
            case .missingPricingPlanArn: return "MISSING_PRICING_PLAN_ARN"
            case .multipleLinkedAccountIds: return "MULTIPLE_LINKED_ACCOUNT_IDS"
            case .multiplePricingPlanArn: return "MULTIPLE_PRICING_PLAN_ARN"
            case .other: return "OTHER"
            case .pricingrulesAlreadyAssociated: return "PRICINGRULES_ALREADY_ASSOCIATED"
            case .pricingrulesNotAssociated: return "PRICINGRULES_NOT_ASSOCIATED"
            case .pricingrulesNotExist: return "PRICINGRULES_NOT_EXIST"
            case .primaryCannotDisassociate: return "PRIMARY_CANNOT_DISASSOCIATE"
            case .primaryNotAssociated: return "PRIMARY_NOT_ASSOCIATED"
            case .tooManyAccountsInRequest: return "TOO_MANY_ACCOUNTS_IN_REQUEST"
            case .tooManyCustomlineitemsInRequest: return "TOO_MANY_CUSTOMLINEITEMS_IN_REQUEST"
            case .unknownOperation: return "UNKNOWN_OPERATION"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ValidationExceptionReason(rawValue: rawValue) ?? ValidationExceptionReason.sdkUnknown(rawValue)
        }
    }
}
