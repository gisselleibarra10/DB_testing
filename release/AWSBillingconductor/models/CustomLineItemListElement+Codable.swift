// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension BillingconductorClientTypes.CustomLineItemListElement: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "Arn"
        case associationSize = "AssociationSize"
        case billingGroupArn = "BillingGroupArn"
        case chargeDetails = "ChargeDetails"
        case creationTime = "CreationTime"
        case currencyCode = "CurrencyCode"
        case description = "Description"
        case lastModifiedTime = "LastModifiedTime"
        case name = "Name"
        case productCode = "ProductCode"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = self.arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if associationSize != 0 {
            try encodeContainer.encode(associationSize, forKey: .associationSize)
        }
        if let billingGroupArn = self.billingGroupArn {
            try encodeContainer.encode(billingGroupArn, forKey: .billingGroupArn)
        }
        if let chargeDetails = self.chargeDetails {
            try encodeContainer.encode(chargeDetails, forKey: .chargeDetails)
        }
        if creationTime != 0 {
            try encodeContainer.encode(creationTime, forKey: .creationTime)
        }
        if let currencyCode = self.currencyCode {
            try encodeContainer.encode(currencyCode.rawValue, forKey: .currencyCode)
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if lastModifiedTime != 0 {
            try encodeContainer.encode(lastModifiedTime, forKey: .lastModifiedTime)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let productCode = self.productCode {
            try encodeContainer.encode(productCode, forKey: .productCode)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let chargeDetailsDecoded = try containerValues.decodeIfPresent(BillingconductorClientTypes.ListCustomLineItemChargeDetails.self, forKey: .chargeDetails)
        chargeDetails = chargeDetailsDecoded
        let currencyCodeDecoded = try containerValues.decodeIfPresent(BillingconductorClientTypes.CurrencyCode.self, forKey: .currencyCode)
        currencyCode = currencyCodeDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let productCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .productCode)
        productCode = productCodeDecoded
        let billingGroupArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .billingGroupArn)
        billingGroupArn = billingGroupArnDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .creationTime) ?? 0
        creationTime = creationTimeDecoded
        let lastModifiedTimeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .lastModifiedTime) ?? 0
        lastModifiedTime = lastModifiedTimeDecoded
        let associationSizeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .associationSize) ?? 0
        associationSize = associationSizeDecoded
    }
}
