// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CreateBillingGroupInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountGrouping = "AccountGrouping"
        case computationPreference = "ComputationPreference"
        case description = "Description"
        case name = "Name"
        case primaryAccountId = "PrimaryAccountId"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accountGrouping = self.accountGrouping {
            try encodeContainer.encode(accountGrouping, forKey: .accountGrouping)
        }
        if let computationPreference = self.computationPreference {
            try encodeContainer.encode(computationPreference, forKey: .computationPreference)
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let primaryAccountId = self.primaryAccountId {
            try encodeContainer.encode(primaryAccountId, forKey: .primaryAccountId)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, tagmap0) in tags {
                try tagsContainer.encode(tagmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }
}
