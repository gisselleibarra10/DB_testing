// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct CreatePricingRuleInput: Swift.Equatable {
    /// The token that is needed to support idempotency. Idempotency isn't currently supported, but will be implemented in a future update.
    public var clientToken: Swift.String?
    /// The pricing rule description.
    public var description: Swift.String?
    /// A percentage modifier applied on the public pricing rates.
    /// This member is required.
    public var modifierPercentage: Swift.Double?
    /// The pricing rule name. The names must be unique to each pricing rule.
    /// This member is required.
    public var name: Swift.String?
    /// The scope of pricing rule that indicates if it is globally applicable, or is service-specific.
    /// This member is required.
    public var scope: BillingconductorClientTypes.PricingRuleScope?
    /// If the Scope attribute is set to SERVICE, the attribute indicates which service the PricingRule is applicable for.
    public var service: Swift.String?
    /// A map that contains tag keys and tag values that are attached to a pricing rule.
    public var tags: [Swift.String:Swift.String]?
    /// The type of pricing rule.
    /// This member is required.
    public var type: BillingconductorClientTypes.PricingRuleType?

    public init (
        clientToken: Swift.String? = nil,
        description: Swift.String? = nil,
        modifierPercentage: Swift.Double? = nil,
        name: Swift.String? = nil,
        scope: BillingconductorClientTypes.PricingRuleScope? = nil,
        service: Swift.String? = nil,
        tags: [Swift.String:Swift.String]? = nil,
        type: BillingconductorClientTypes.PricingRuleType? = nil
    )
    {
        self.clientToken = clientToken
        self.description = description
        self.modifierPercentage = modifierPercentage
        self.name = name
        self.scope = scope
        self.service = service
        self.tags = tags
        self.type = type
    }
}
