// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension BillingconductorClientTypes.ListCustomLineItemsFilter: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arns = "Arns"
        case billingGroups = "BillingGroups"
        case names = "Names"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arns = arns {
            var arnsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .arns)
            for customlineitemarns0 in arns {
                try arnsContainer.encode(customlineitemarns0)
            }
        }
        if let billingGroups = billingGroups {
            var billingGroupsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .billingGroups)
            for billinggrouparnlist0 in billingGroups {
                try billingGroupsContainer.encode(billinggrouparnlist0)
            }
        }
        if let names = names {
            var namesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .names)
            for customlineitemnamelist0 in names {
                try namesContainer.encode(customlineitemnamelist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let namesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .names)
        var namesDecoded0:[Swift.String]? = nil
        if let namesContainer = namesContainer {
            namesDecoded0 = [Swift.String]()
            for string0 in namesContainer {
                if let string0 = string0 {
                    namesDecoded0?.append(string0)
                }
            }
        }
        names = namesDecoded0
        let billingGroupsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .billingGroups)
        var billingGroupsDecoded0:[Swift.String]? = nil
        if let billingGroupsContainer = billingGroupsContainer {
            billingGroupsDecoded0 = [Swift.String]()
            for string0 in billingGroupsContainer {
                if let string0 = string0 {
                    billingGroupsDecoded0?.append(string0)
                }
            }
        }
        billingGroups = billingGroupsDecoded0
        let arnsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .arns)
        var arnsDecoded0:[Swift.String]? = nil
        if let arnsContainer = arnsContainer {
            arnsDecoded0 = [Swift.String]()
            for string0 in arnsContainer {
                if let string0 = string0 {
                    arnsDecoded0?.append(string0)
                }
            }
        }
        arns = arnsDecoded0
    }
}
