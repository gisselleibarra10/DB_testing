// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListPricingRulesOutputResponseBody: Swift.Equatable {
    let billingPeriod: Swift.String?
    let pricingRules: [BillingconductorClientTypes.PricingRuleListElement]?
    let nextToken: Swift.String?
}

extension ListPricingRulesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case billingPeriod = "BillingPeriod"
        case nextToken = "NextToken"
        case pricingRules = "PricingRules"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let billingPeriodDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .billingPeriod)
        billingPeriod = billingPeriodDecoded
        let pricingRulesContainer = try containerValues.decodeIfPresent([BillingconductorClientTypes.PricingRuleListElement?].self, forKey: .pricingRules)
        var pricingRulesDecoded0:[BillingconductorClientTypes.PricingRuleListElement]? = nil
        if let pricingRulesContainer = pricingRulesContainer {
            pricingRulesDecoded0 = [BillingconductorClientTypes.PricingRuleListElement]()
            for structure0 in pricingRulesContainer {
                if let structure0 = structure0 {
                    pricingRulesDecoded0?.append(structure0)
                }
            }
        }
        pricingRules = pricingRulesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
