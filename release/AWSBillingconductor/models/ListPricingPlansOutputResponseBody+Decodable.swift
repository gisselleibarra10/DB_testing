// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListPricingPlansOutputResponseBody: Swift.Equatable {
    let billingPeriod: Swift.String?
    let pricingPlans: [BillingconductorClientTypes.PricingPlanListElement]?
    let nextToken: Swift.String?
}

extension ListPricingPlansOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case billingPeriod = "BillingPeriod"
        case nextToken = "NextToken"
        case pricingPlans = "PricingPlans"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let billingPeriodDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .billingPeriod)
        billingPeriod = billingPeriodDecoded
        let pricingPlansContainer = try containerValues.decodeIfPresent([BillingconductorClientTypes.PricingPlanListElement?].self, forKey: .pricingPlans)
        var pricingPlansDecoded0:[BillingconductorClientTypes.PricingPlanListElement]? = nil
        if let pricingPlansContainer = pricingPlansContainer {
            pricingPlansDecoded0 = [BillingconductorClientTypes.PricingPlanListElement]()
            for structure0 in pricingPlansContainer {
                if let structure0 = structure0 {
                    pricingPlansDecoded0?.append(structure0)
                }
            }
        }
        pricingPlans = pricingPlansDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
