// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreatePricingRuleInputBody: Swift.Equatable {
    let name: Swift.String?
    let description: Swift.String?
    let scope: BillingconductorClientTypes.PricingRuleScope?
    let type: BillingconductorClientTypes.PricingRuleType?
    let modifierPercentage: Swift.Double?
    let service: Swift.String?
    let tags: [Swift.String:Swift.String]?
}

extension CreatePricingRuleInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description = "Description"
        case modifierPercentage = "ModifierPercentage"
        case name = "Name"
        case scope = "Scope"
        case service = "Service"
        case tags = "Tags"
        case type = "Type"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let scopeDecoded = try containerValues.decodeIfPresent(BillingconductorClientTypes.PricingRuleScope.self, forKey: .scope)
        scope = scopeDecoded
        let typeDecoded = try containerValues.decodeIfPresent(BillingconductorClientTypes.PricingRuleType.self, forKey: .type)
        type = typeDecoded
        let modifierPercentageDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .modifierPercentage)
        modifierPercentage = modifierPercentageDecoded
        let serviceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .service)
        service = serviceDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
    }
}
