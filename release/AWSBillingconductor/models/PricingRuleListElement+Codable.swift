// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension BillingconductorClientTypes.PricingRuleListElement: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "Arn"
        case associatedPricingPlanCount = "AssociatedPricingPlanCount"
        case creationTime = "CreationTime"
        case description = "Description"
        case lastModifiedTime = "LastModifiedTime"
        case modifierPercentage = "ModifierPercentage"
        case name = "Name"
        case scope = "Scope"
        case service = "Service"
        case type = "Type"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = self.arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if associatedPricingPlanCount != 0 {
            try encodeContainer.encode(associatedPricingPlanCount, forKey: .associatedPricingPlanCount)
        }
        if creationTime != 0 {
            try encodeContainer.encode(creationTime, forKey: .creationTime)
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if lastModifiedTime != 0 {
            try encodeContainer.encode(lastModifiedTime, forKey: .lastModifiedTime)
        }
        if let modifierPercentage = self.modifierPercentage {
            try encodeContainer.encode(modifierPercentage, forKey: .modifierPercentage)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let scope = self.scope {
            try encodeContainer.encode(scope.rawValue, forKey: .scope)
        }
        if let service = self.service {
            try encodeContainer.encode(service, forKey: .service)
        }
        if let type = self.type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let scopeDecoded = try containerValues.decodeIfPresent(BillingconductorClientTypes.PricingRuleScope.self, forKey: .scope)
        scope = scopeDecoded
        let typeDecoded = try containerValues.decodeIfPresent(BillingconductorClientTypes.PricingRuleType.self, forKey: .type)
        type = typeDecoded
        let modifierPercentageDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .modifierPercentage)
        modifierPercentage = modifierPercentageDecoded
        let serviceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .service)
        service = serviceDecoded
        let associatedPricingPlanCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .associatedPricingPlanCount) ?? 0
        associatedPricingPlanCount = associatedPricingPlanCountDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .creationTime) ?? 0
        creationTime = creationTimeDecoded
        let lastModifiedTimeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .lastModifiedTime) ?? 0
        lastModifiedTime = lastModifiedTimeDecoded
    }
}
