// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension VoiceIdClientTypes {
    public enum ConflictType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case anotherActiveStream
        case cannotChangeSpeakerAfterEnrollment
        case concurrentChanges
        case domainLockedFromEncryptionUpdates
        case domainNotActive
        case enrollmentAlreadyExists
        case speakerNotSet
        case speakerOptedOut
        case sdkUnknown(Swift.String)

        public static var allCases: [ConflictType] {
            return [
                .anotherActiveStream,
                .cannotChangeSpeakerAfterEnrollment,
                .concurrentChanges,
                .domainLockedFromEncryptionUpdates,
                .domainNotActive,
                .enrollmentAlreadyExists,
                .speakerNotSet,
                .speakerOptedOut,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .anotherActiveStream: return "ANOTHER_ACTIVE_STREAM"
            case .cannotChangeSpeakerAfterEnrollment: return "CANNOT_CHANGE_SPEAKER_AFTER_ENROLLMENT"
            case .concurrentChanges: return "CONCURRENT_CHANGES"
            case .domainLockedFromEncryptionUpdates: return "DOMAIN_LOCKED_FROM_ENCRYPTION_UPDATES"
            case .domainNotActive: return "DOMAIN_NOT_ACTIVE"
            case .enrollmentAlreadyExists: return "ENROLLMENT_ALREADY_EXISTS"
            case .speakerNotSet: return "SPEAKER_NOT_SET"
            case .speakerOptedOut: return "SPEAKER_OPTED_OUT"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ConflictType(rawValue: rawValue) ?? ConflictType.sdkUnknown(rawValue)
        }
    }
}
