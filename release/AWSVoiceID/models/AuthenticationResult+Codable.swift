// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension VoiceIdClientTypes.AuthenticationResult: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case audioAggregationEndedAt = "AudioAggregationEndedAt"
        case audioAggregationStartedAt = "AudioAggregationStartedAt"
        case authenticationResultId = "AuthenticationResultId"
        case configuration = "Configuration"
        case customerSpeakerId = "CustomerSpeakerId"
        case decision = "Decision"
        case generatedSpeakerId = "GeneratedSpeakerId"
        case score = "Score"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let audioAggregationEndedAt = self.audioAggregationEndedAt {
            try encodeContainer.encode(audioAggregationEndedAt.timeIntervalSince1970, forKey: .audioAggregationEndedAt)
        }
        if let audioAggregationStartedAt = self.audioAggregationStartedAt {
            try encodeContainer.encode(audioAggregationStartedAt.timeIntervalSince1970, forKey: .audioAggregationStartedAt)
        }
        if let authenticationResultId = self.authenticationResultId {
            try encodeContainer.encode(authenticationResultId, forKey: .authenticationResultId)
        }
        if let configuration = self.configuration {
            try encodeContainer.encode(configuration, forKey: .configuration)
        }
        if let customerSpeakerId = self.customerSpeakerId {
            try encodeContainer.encode(customerSpeakerId, forKey: .customerSpeakerId)
        }
        if let decision = self.decision {
            try encodeContainer.encode(decision.rawValue, forKey: .decision)
        }
        if let generatedSpeakerId = self.generatedSpeakerId {
            try encodeContainer.encode(generatedSpeakerId, forKey: .generatedSpeakerId)
        }
        if let score = self.score {
            try encodeContainer.encode(score, forKey: .score)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let authenticationResultIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .authenticationResultId)
        authenticationResultId = authenticationResultIdDecoded
        let audioAggregationStartedAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .audioAggregationStartedAt)
        audioAggregationStartedAt = audioAggregationStartedAtDecoded
        let audioAggregationEndedAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .audioAggregationEndedAt)
        audioAggregationEndedAt = audioAggregationEndedAtDecoded
        let customerSpeakerIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .customerSpeakerId)
        customerSpeakerId = customerSpeakerIdDecoded
        let generatedSpeakerIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .generatedSpeakerId)
        generatedSpeakerId = generatedSpeakerIdDecoded
        let decisionDecoded = try containerValues.decodeIfPresent(VoiceIdClientTypes.AuthenticationDecision.self, forKey: .decision)
        decision = decisionDecoded
        let scoreDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .score)
        score = scoreDecoded
        let configurationDecoded = try containerValues.decodeIfPresent(VoiceIdClientTypes.AuthenticationConfiguration.self, forKey: .configuration)
        configuration = configurationDecoded
    }
}
