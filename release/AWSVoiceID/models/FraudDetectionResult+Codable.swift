// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension VoiceIdClientTypes.FraudDetectionResult: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case audioAggregationEndedAt = "AudioAggregationEndedAt"
        case audioAggregationStartedAt = "AudioAggregationStartedAt"
        case configuration = "Configuration"
        case decision = "Decision"
        case fraudDetectionResultId = "FraudDetectionResultId"
        case reasons = "Reasons"
        case riskDetails = "RiskDetails"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let audioAggregationEndedAt = self.audioAggregationEndedAt {
            try encodeContainer.encode(audioAggregationEndedAt.timeIntervalSince1970, forKey: .audioAggregationEndedAt)
        }
        if let audioAggregationStartedAt = self.audioAggregationStartedAt {
            try encodeContainer.encode(audioAggregationStartedAt.timeIntervalSince1970, forKey: .audioAggregationStartedAt)
        }
        if let configuration = self.configuration {
            try encodeContainer.encode(configuration, forKey: .configuration)
        }
        if let decision = self.decision {
            try encodeContainer.encode(decision.rawValue, forKey: .decision)
        }
        if let fraudDetectionResultId = self.fraudDetectionResultId {
            try encodeContainer.encode(fraudDetectionResultId, forKey: .fraudDetectionResultId)
        }
        if let reasons = reasons {
            var reasonsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .reasons)
            for frauddetectionreasons0 in reasons {
                try reasonsContainer.encode(frauddetectionreasons0.rawValue)
            }
        }
        if let riskDetails = self.riskDetails {
            try encodeContainer.encode(riskDetails, forKey: .riskDetails)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fraudDetectionResultIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fraudDetectionResultId)
        fraudDetectionResultId = fraudDetectionResultIdDecoded
        let audioAggregationStartedAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .audioAggregationStartedAt)
        audioAggregationStartedAt = audioAggregationStartedAtDecoded
        let audioAggregationEndedAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .audioAggregationEndedAt)
        audioAggregationEndedAt = audioAggregationEndedAtDecoded
        let configurationDecoded = try containerValues.decodeIfPresent(VoiceIdClientTypes.FraudDetectionConfiguration.self, forKey: .configuration)
        configuration = configurationDecoded
        let decisionDecoded = try containerValues.decodeIfPresent(VoiceIdClientTypes.FraudDetectionDecision.self, forKey: .decision)
        decision = decisionDecoded
        let reasonsContainer = try containerValues.decodeIfPresent([VoiceIdClientTypes.FraudDetectionReason?].self, forKey: .reasons)
        var reasonsDecoded0:[VoiceIdClientTypes.FraudDetectionReason]? = nil
        if let reasonsContainer = reasonsContainer {
            reasonsDecoded0 = [VoiceIdClientTypes.FraudDetectionReason]()
            for string0 in reasonsContainer {
                if let string0 = string0 {
                    reasonsDecoded0?.append(string0)
                }
            }
        }
        reasons = reasonsDecoded0
        let riskDetailsDecoded = try containerValues.decodeIfPresent(VoiceIdClientTypes.FraudRiskDetails.self, forKey: .riskDetails)
        riskDetails = riskDetailsDecoded
    }
}
