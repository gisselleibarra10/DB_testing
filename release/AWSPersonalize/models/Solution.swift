// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension PersonalizeClientTypes {
    /// An object that provides information about a solution. A solution is a trained model that can be deployed as a campaign.
    public struct Solution: Swift.Equatable {
        /// When performAutoML is true, specifies the best recipe found.
        public var autoMLResult: PersonalizeClientTypes.AutoMLResult?
        /// The creation date and time (in Unix time) of the solution.
        public var creationDateTime: ClientRuntime.Date?
        /// The Amazon Resource Name (ARN) of the dataset group that provides the training data.
        public var datasetGroupArn: Swift.String?
        /// The event type (for example, 'click' or 'like') that is used for training the model. If no eventType is provided, Amazon Personalize uses all interactions for training with equal weight regardless of type.
        public var eventType: Swift.String?
        /// The date and time (in Unix time) that the solution was last updated.
        public var lastUpdatedDateTime: ClientRuntime.Date?
        /// Describes the latest version of the solution, including the status and the ARN.
        public var latestSolutionVersion: PersonalizeClientTypes.SolutionVersionSummary?
        /// The name of the solution.
        public var name: Swift.String?
        /// When true, Amazon Personalize performs a search for the best USER_PERSONALIZATION recipe from the list specified in the solution configuration (recipeArn must not be specified). When false (the default), Amazon Personalize uses recipeArn for training.
        public var performAutoML: Swift.Bool
        /// Whether to perform hyperparameter optimization (HPO) on the chosen recipe. The default is false.
        public var performHPO: Swift.Bool
        /// The ARN of the recipe used to create the solution.
        public var recipeArn: Swift.String?
        /// The ARN of the solution.
        public var solutionArn: Swift.String?
        /// Describes the configuration properties for the solution.
        public var solutionConfig: PersonalizeClientTypes.SolutionConfig?
        /// The status of the solution. A solution can be in one of the following states:
        ///
        /// * CREATE PENDING > CREATE IN_PROGRESS > ACTIVE -or- CREATE FAILED
        ///
        /// * DELETE PENDING > DELETE IN_PROGRESS
        public var status: Swift.String?

        public init (
            autoMLResult: PersonalizeClientTypes.AutoMLResult? = nil,
            creationDateTime: ClientRuntime.Date? = nil,
            datasetGroupArn: Swift.String? = nil,
            eventType: Swift.String? = nil,
            lastUpdatedDateTime: ClientRuntime.Date? = nil,
            latestSolutionVersion: PersonalizeClientTypes.SolutionVersionSummary? = nil,
            name: Swift.String? = nil,
            performAutoML: Swift.Bool = false,
            performHPO: Swift.Bool = false,
            recipeArn: Swift.String? = nil,
            solutionArn: Swift.String? = nil,
            solutionConfig: PersonalizeClientTypes.SolutionConfig? = nil,
            status: Swift.String? = nil
        )
        {
            self.autoMLResult = autoMLResult
            self.creationDateTime = creationDateTime
            self.datasetGroupArn = datasetGroupArn
            self.eventType = eventType
            self.lastUpdatedDateTime = lastUpdatedDateTime
            self.latestSolutionVersion = latestSolutionVersion
            self.name = name
            self.performAutoML = performAutoML
            self.performHPO = performHPO
            self.recipeArn = recipeArn
            self.solutionArn = solutionArn
            self.solutionConfig = solutionConfig
            self.status = status
        }
    }

}
