// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension PersonalizeClientTypes.SolutionConfig: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case algorithmHyperParameters
        case autoMLConfig
        case eventValueThreshold
        case featureTransformationParameters
        case hpoConfig
        case optimizationObjective
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let algorithmHyperParameters = algorithmHyperParameters {
            var algorithmHyperParametersContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .algorithmHyperParameters)
            for (dictKey0, hyperparameters0) in algorithmHyperParameters {
                try algorithmHyperParametersContainer.encode(hyperparameters0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let autoMLConfig = self.autoMLConfig {
            try encodeContainer.encode(autoMLConfig, forKey: .autoMLConfig)
        }
        if let eventValueThreshold = self.eventValueThreshold {
            try encodeContainer.encode(eventValueThreshold, forKey: .eventValueThreshold)
        }
        if let featureTransformationParameters = featureTransformationParameters {
            var featureTransformationParametersContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .featureTransformationParameters)
            for (dictKey0, featuretransformationparameters0) in featureTransformationParameters {
                try featureTransformationParametersContainer.encode(featuretransformationparameters0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let hpoConfig = self.hpoConfig {
            try encodeContainer.encode(hpoConfig, forKey: .hpoConfig)
        }
        if let optimizationObjective = self.optimizationObjective {
            try encodeContainer.encode(optimizationObjective, forKey: .optimizationObjective)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let eventValueThresholdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .eventValueThreshold)
        eventValueThreshold = eventValueThresholdDecoded
        let hpoConfigDecoded = try containerValues.decodeIfPresent(PersonalizeClientTypes.HPOConfig.self, forKey: .hpoConfig)
        hpoConfig = hpoConfigDecoded
        let algorithmHyperParametersContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .algorithmHyperParameters)
        var algorithmHyperParametersDecoded0: [Swift.String:Swift.String]? = nil
        if let algorithmHyperParametersContainer = algorithmHyperParametersContainer {
            algorithmHyperParametersDecoded0 = [Swift.String:Swift.String]()
            for (key0, parametervalue0) in algorithmHyperParametersContainer {
                if let parametervalue0 = parametervalue0 {
                    algorithmHyperParametersDecoded0?[key0] = parametervalue0
                }
            }
        }
        algorithmHyperParameters = algorithmHyperParametersDecoded0
        let featureTransformationParametersContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .featureTransformationParameters)
        var featureTransformationParametersDecoded0: [Swift.String:Swift.String]? = nil
        if let featureTransformationParametersContainer = featureTransformationParametersContainer {
            featureTransformationParametersDecoded0 = [Swift.String:Swift.String]()
            for (key0, parametervalue0) in featureTransformationParametersContainer {
                if let parametervalue0 = parametervalue0 {
                    featureTransformationParametersDecoded0?[key0] = parametervalue0
                }
            }
        }
        featureTransformationParameters = featureTransformationParametersDecoded0
        let autoMLConfigDecoded = try containerValues.decodeIfPresent(PersonalizeClientTypes.AutoMLConfig.self, forKey: .autoMLConfig)
        autoMLConfig = autoMLConfigDecoded
        let optimizationObjectiveDecoded = try containerValues.decodeIfPresent(PersonalizeClientTypes.OptimizationObjective.self, forKey: .optimizationObjective)
        optimizationObjective = optimizationObjectiveDecoded
    }
}
