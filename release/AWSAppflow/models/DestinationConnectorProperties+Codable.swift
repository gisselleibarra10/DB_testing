// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AppflowClientTypes.DestinationConnectorProperties: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case customConnector = "CustomConnector"
        case customerProfiles = "CustomerProfiles"
        case eventBridge = "EventBridge"
        case honeycode = "Honeycode"
        case lookoutMetrics = "LookoutMetrics"
        case marketo = "Marketo"
        case redshift = "Redshift"
        case s3 = "S3"
        case sAPOData = "SAPOData"
        case salesforce = "Salesforce"
        case snowflake = "Snowflake"
        case upsolver = "Upsolver"
        case zendesk = "Zendesk"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let customConnector = self.customConnector {
            try encodeContainer.encode(customConnector, forKey: .customConnector)
        }
        if let customerProfiles = self.customerProfiles {
            try encodeContainer.encode(customerProfiles, forKey: .customerProfiles)
        }
        if let eventBridge = self.eventBridge {
            try encodeContainer.encode(eventBridge, forKey: .eventBridge)
        }
        if let honeycode = self.honeycode {
            try encodeContainer.encode(honeycode, forKey: .honeycode)
        }
        if let lookoutMetrics = self.lookoutMetrics {
            try encodeContainer.encode(lookoutMetrics, forKey: .lookoutMetrics)
        }
        if let marketo = self.marketo {
            try encodeContainer.encode(marketo, forKey: .marketo)
        }
        if let redshift = self.redshift {
            try encodeContainer.encode(redshift, forKey: .redshift)
        }
        if let s3 = self.s3 {
            try encodeContainer.encode(s3, forKey: .s3)
        }
        if let sAPOData = self.sAPOData {
            try encodeContainer.encode(sAPOData, forKey: .sAPOData)
        }
        if let salesforce = self.salesforce {
            try encodeContainer.encode(salesforce, forKey: .salesforce)
        }
        if let snowflake = self.snowflake {
            try encodeContainer.encode(snowflake, forKey: .snowflake)
        }
        if let upsolver = self.upsolver {
            try encodeContainer.encode(upsolver, forKey: .upsolver)
        }
        if let zendesk = self.zendesk {
            try encodeContainer.encode(zendesk, forKey: .zendesk)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let redshiftDecoded = try containerValues.decodeIfPresent(AppflowClientTypes.RedshiftDestinationProperties.self, forKey: .redshift)
        redshift = redshiftDecoded
        let s3Decoded = try containerValues.decodeIfPresent(AppflowClientTypes.S3DestinationProperties.self, forKey: .s3)
        s3 = s3Decoded
        let salesforceDecoded = try containerValues.decodeIfPresent(AppflowClientTypes.SalesforceDestinationProperties.self, forKey: .salesforce)
        salesforce = salesforceDecoded
        let snowflakeDecoded = try containerValues.decodeIfPresent(AppflowClientTypes.SnowflakeDestinationProperties.self, forKey: .snowflake)
        snowflake = snowflakeDecoded
        let eventBridgeDecoded = try containerValues.decodeIfPresent(AppflowClientTypes.EventBridgeDestinationProperties.self, forKey: .eventBridge)
        eventBridge = eventBridgeDecoded
        let lookoutMetricsDecoded = try containerValues.decodeIfPresent(AppflowClientTypes.LookoutMetricsDestinationProperties.self, forKey: .lookoutMetrics)
        lookoutMetrics = lookoutMetricsDecoded
        let upsolverDecoded = try containerValues.decodeIfPresent(AppflowClientTypes.UpsolverDestinationProperties.self, forKey: .upsolver)
        upsolver = upsolverDecoded
        let honeycodeDecoded = try containerValues.decodeIfPresent(AppflowClientTypes.HoneycodeDestinationProperties.self, forKey: .honeycode)
        honeycode = honeycodeDecoded
        let customerProfilesDecoded = try containerValues.decodeIfPresent(AppflowClientTypes.CustomerProfilesDestinationProperties.self, forKey: .customerProfiles)
        customerProfiles = customerProfilesDecoded
        let zendeskDecoded = try containerValues.decodeIfPresent(AppflowClientTypes.ZendeskDestinationProperties.self, forKey: .zendesk)
        zendesk = zendeskDecoded
        let marketoDecoded = try containerValues.decodeIfPresent(AppflowClientTypes.MarketoDestinationProperties.self, forKey: .marketo)
        marketo = marketoDecoded
        let customConnectorDecoded = try containerValues.decodeIfPresent(AppflowClientTypes.CustomConnectorDestinationProperties.self, forKey: .customConnector)
        customConnector = customConnectorDecoded
        let sAPODataDecoded = try containerValues.decodeIfPresent(AppflowClientTypes.SAPODataDestinationProperties.self, forKey: .sAPOData)
        sAPOData = sAPODataDecoded
    }
}
