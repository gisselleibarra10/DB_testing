// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AppflowClientTypes.OAuth2Properties: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case oAuth2GrantType
        case tokenUrl
        case tokenUrlCustomProperties
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let oAuth2GrantType = self.oAuth2GrantType {
            try encodeContainer.encode(oAuth2GrantType.rawValue, forKey: .oAuth2GrantType)
        }
        if let tokenUrl = self.tokenUrl {
            try encodeContainer.encode(tokenUrl, forKey: .tokenUrl)
        }
        if let tokenUrlCustomProperties = tokenUrlCustomProperties {
            var tokenUrlCustomPropertiesContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tokenUrlCustomProperties)
            for (dictKey0, tokenurlcustomproperties0) in tokenUrlCustomProperties {
                try tokenUrlCustomPropertiesContainer.encode(tokenurlcustomproperties0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tokenUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tokenUrl)
        tokenUrl = tokenUrlDecoded
        let oAuth2GrantTypeDecoded = try containerValues.decodeIfPresent(AppflowClientTypes.OAuth2GrantType.self, forKey: .oAuth2GrantType)
        oAuth2GrantType = oAuth2GrantTypeDecoded
        let tokenUrlCustomPropertiesContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tokenUrlCustomProperties)
        var tokenUrlCustomPropertiesDecoded0: [Swift.String:Swift.String]? = nil
        if let tokenUrlCustomPropertiesContainer = tokenUrlCustomPropertiesContainer {
            tokenUrlCustomPropertiesDecoded0 = [Swift.String:Swift.String]()
            for (key0, custompropertyvalue0) in tokenUrlCustomPropertiesContainer {
                if let custompropertyvalue0 = custompropertyvalue0 {
                    tokenUrlCustomPropertiesDecoded0?[key0] = custompropertyvalue0
                }
            }
        }
        tokenUrlCustomProperties = tokenUrlCustomPropertiesDecoded0
    }
}
