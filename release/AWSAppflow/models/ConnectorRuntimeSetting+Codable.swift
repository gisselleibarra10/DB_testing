// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AppflowClientTypes.ConnectorRuntimeSetting: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case connectorSuppliedValueOptions
        case dataType
        case description
        case isRequired
        case key
        case label
        case scope
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let connectorSuppliedValueOptions = connectorSuppliedValueOptions {
            var connectorSuppliedValueOptionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .connectorSuppliedValueOptions)
            for connectorsuppliedvalueoptionlist0 in connectorSuppliedValueOptions {
                try connectorSuppliedValueOptionsContainer.encode(connectorsuppliedvalueoptionlist0)
            }
        }
        if let dataType = self.dataType {
            try encodeContainer.encode(dataType, forKey: .dataType)
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if isRequired != false {
            try encodeContainer.encode(isRequired, forKey: .isRequired)
        }
        if let key = self.key {
            try encodeContainer.encode(key, forKey: .key)
        }
        if let label = self.label {
            try encodeContainer.encode(label, forKey: .label)
        }
        if let scope = self.scope {
            try encodeContainer.encode(scope, forKey: .scope)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .key)
        key = keyDecoded
        let dataTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataType)
        dataType = dataTypeDecoded
        let isRequiredDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .isRequired) ?? false
        isRequired = isRequiredDecoded
        let labelDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .label)
        label = labelDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let scopeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .scope)
        scope = scopeDecoded
        let connectorSuppliedValueOptionsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .connectorSuppliedValueOptions)
        var connectorSuppliedValueOptionsDecoded0:[Swift.String]? = nil
        if let connectorSuppliedValueOptionsContainer = connectorSuppliedValueOptionsContainer {
            connectorSuppliedValueOptionsDecoded0 = [Swift.String]()
            for string0 in connectorSuppliedValueOptionsContainer {
                if let string0 = string0 {
                    connectorSuppliedValueOptionsDecoded0?.append(string0)
                }
            }
        }
        connectorSuppliedValueOptions = connectorSuppliedValueOptionsDecoded0
    }
}
