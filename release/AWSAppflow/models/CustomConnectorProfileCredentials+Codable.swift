// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AppflowClientTypes.CustomConnectorProfileCredentials: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case apiKey
        case authenticationType
        case basic
        case custom
        case oauth2
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let apiKey = self.apiKey {
            try encodeContainer.encode(apiKey, forKey: .apiKey)
        }
        if let authenticationType = self.authenticationType {
            try encodeContainer.encode(authenticationType.rawValue, forKey: .authenticationType)
        }
        if let basic = self.basic {
            try encodeContainer.encode(basic, forKey: .basic)
        }
        if let custom = self.custom {
            try encodeContainer.encode(custom, forKey: .custom)
        }
        if let oauth2 = self.oauth2 {
            try encodeContainer.encode(oauth2, forKey: .oauth2)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let authenticationTypeDecoded = try containerValues.decodeIfPresent(AppflowClientTypes.AuthenticationType.self, forKey: .authenticationType)
        authenticationType = authenticationTypeDecoded
        let basicDecoded = try containerValues.decodeIfPresent(AppflowClientTypes.BasicAuthCredentials.self, forKey: .basic)
        basic = basicDecoded
        let oauth2Decoded = try containerValues.decodeIfPresent(AppflowClientTypes.OAuth2Credentials.self, forKey: .oauth2)
        oauth2 = oauth2Decoded
        let apiKeyDecoded = try containerValues.decodeIfPresent(AppflowClientTypes.ApiKeyCredentials.self, forKey: .apiKey)
        apiKey = apiKeyDecoded
        let customDecoded = try containerValues.decodeIfPresent(AppflowClientTypes.CustomAuthCredentials.self, forKey: .custom)
        custom = customDecoded
    }
}
