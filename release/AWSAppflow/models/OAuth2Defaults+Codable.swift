// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AppflowClientTypes.OAuth2Defaults: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case authCodeUrls
        case oauth2CustomProperties
        case oauth2GrantTypesSupported
        case oauthScopes
        case tokenUrls
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let authCodeUrls = authCodeUrls {
            var authCodeUrlsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .authCodeUrls)
            for authcodeurllist0 in authCodeUrls {
                try authCodeUrlsContainer.encode(authcodeurllist0)
            }
        }
        if let oauth2CustomProperties = oauth2CustomProperties {
            var oauth2CustomPropertiesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .oauth2CustomProperties)
            for oauth2custompropertieslist0 in oauth2CustomProperties {
                try oauth2CustomPropertiesContainer.encode(oauth2custompropertieslist0)
            }
        }
        if let oauth2GrantTypesSupported = oauth2GrantTypesSupported {
            var oauth2GrantTypesSupportedContainer = encodeContainer.nestedUnkeyedContainer(forKey: .oauth2GrantTypesSupported)
            for oauth2granttypesupportedlist0 in oauth2GrantTypesSupported {
                try oauth2GrantTypesSupportedContainer.encode(oauth2granttypesupportedlist0.rawValue)
            }
        }
        if let oauthScopes = oauthScopes {
            var oauthScopesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .oauthScopes)
            for oauthscopelist0 in oauthScopes {
                try oauthScopesContainer.encode(oauthscopelist0)
            }
        }
        if let tokenUrls = tokenUrls {
            var tokenUrlsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tokenUrls)
            for tokenurllist0 in tokenUrls {
                try tokenUrlsContainer.encode(tokenurllist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let oauthScopesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .oauthScopes)
        var oauthScopesDecoded0:[Swift.String]? = nil
        if let oauthScopesContainer = oauthScopesContainer {
            oauthScopesDecoded0 = [Swift.String]()
            for string0 in oauthScopesContainer {
                if let string0 = string0 {
                    oauthScopesDecoded0?.append(string0)
                }
            }
        }
        oauthScopes = oauthScopesDecoded0
        let tokenUrlsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .tokenUrls)
        var tokenUrlsDecoded0:[Swift.String]? = nil
        if let tokenUrlsContainer = tokenUrlsContainer {
            tokenUrlsDecoded0 = [Swift.String]()
            for string0 in tokenUrlsContainer {
                if let string0 = string0 {
                    tokenUrlsDecoded0?.append(string0)
                }
            }
        }
        tokenUrls = tokenUrlsDecoded0
        let authCodeUrlsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .authCodeUrls)
        var authCodeUrlsDecoded0:[Swift.String]? = nil
        if let authCodeUrlsContainer = authCodeUrlsContainer {
            authCodeUrlsDecoded0 = [Swift.String]()
            for string0 in authCodeUrlsContainer {
                if let string0 = string0 {
                    authCodeUrlsDecoded0?.append(string0)
                }
            }
        }
        authCodeUrls = authCodeUrlsDecoded0
        let oauth2GrantTypesSupportedContainer = try containerValues.decodeIfPresent([AppflowClientTypes.OAuth2GrantType?].self, forKey: .oauth2GrantTypesSupported)
        var oauth2GrantTypesSupportedDecoded0:[AppflowClientTypes.OAuth2GrantType]? = nil
        if let oauth2GrantTypesSupportedContainer = oauth2GrantTypesSupportedContainer {
            oauth2GrantTypesSupportedDecoded0 = [AppflowClientTypes.OAuth2GrantType]()
            for string0 in oauth2GrantTypesSupportedContainer {
                if let string0 = string0 {
                    oauth2GrantTypesSupportedDecoded0?.append(string0)
                }
            }
        }
        oauth2GrantTypesSupported = oauth2GrantTypesSupportedDecoded0
        let oauth2CustomPropertiesContainer = try containerValues.decodeIfPresent([AppflowClientTypes.OAuth2CustomParameter?].self, forKey: .oauth2CustomProperties)
        var oauth2CustomPropertiesDecoded0:[AppflowClientTypes.OAuth2CustomParameter]? = nil
        if let oauth2CustomPropertiesContainer = oauth2CustomPropertiesContainer {
            oauth2CustomPropertiesDecoded0 = [AppflowClientTypes.OAuth2CustomParameter]()
            for structure0 in oauth2CustomPropertiesContainer {
                if let structure0 = structure0 {
                    oauth2CustomPropertiesDecoded0?.append(structure0)
                }
            }
        }
        oauth2CustomProperties = oauth2CustomPropertiesDecoded0
    }
}
