// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AppflowClientTypes.ConnectorDetail: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applicationType
        case connectorDescription
        case connectorLabel
        case connectorModes
        case connectorName
        case connectorOwner
        case connectorProvisioningType
        case connectorType
        case connectorVersion
        case registeredAt
        case registeredBy
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let applicationType = self.applicationType {
            try encodeContainer.encode(applicationType, forKey: .applicationType)
        }
        if let connectorDescription = self.connectorDescription {
            try encodeContainer.encode(connectorDescription, forKey: .connectorDescription)
        }
        if let connectorLabel = self.connectorLabel {
            try encodeContainer.encode(connectorLabel, forKey: .connectorLabel)
        }
        if let connectorModes = connectorModes {
            var connectorModesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .connectorModes)
            for connectormodelist0 in connectorModes {
                try connectorModesContainer.encode(connectormodelist0)
            }
        }
        if let connectorName = self.connectorName {
            try encodeContainer.encode(connectorName, forKey: .connectorName)
        }
        if let connectorOwner = self.connectorOwner {
            try encodeContainer.encode(connectorOwner, forKey: .connectorOwner)
        }
        if let connectorProvisioningType = self.connectorProvisioningType {
            try encodeContainer.encode(connectorProvisioningType.rawValue, forKey: .connectorProvisioningType)
        }
        if let connectorType = self.connectorType {
            try encodeContainer.encode(connectorType.rawValue, forKey: .connectorType)
        }
        if let connectorVersion = self.connectorVersion {
            try encodeContainer.encode(connectorVersion, forKey: .connectorVersion)
        }
        if let registeredAt = self.registeredAt {
            try encodeContainer.encode(registeredAt.timeIntervalSince1970, forKey: .registeredAt)
        }
        if let registeredBy = self.registeredBy {
            try encodeContainer.encode(registeredBy, forKey: .registeredBy)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let connectorDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .connectorDescription)
        connectorDescription = connectorDescriptionDecoded
        let connectorNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .connectorName)
        connectorName = connectorNameDecoded
        let connectorOwnerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .connectorOwner)
        connectorOwner = connectorOwnerDecoded
        let connectorVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .connectorVersion)
        connectorVersion = connectorVersionDecoded
        let applicationTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .applicationType)
        applicationType = applicationTypeDecoded
        let connectorTypeDecoded = try containerValues.decodeIfPresent(AppflowClientTypes.ConnectorType.self, forKey: .connectorType)
        connectorType = connectorTypeDecoded
        let connectorLabelDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .connectorLabel)
        connectorLabel = connectorLabelDecoded
        let registeredAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .registeredAt)
        registeredAt = registeredAtDecoded
        let registeredByDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .registeredBy)
        registeredBy = registeredByDecoded
        let connectorProvisioningTypeDecoded = try containerValues.decodeIfPresent(AppflowClientTypes.ConnectorProvisioningType.self, forKey: .connectorProvisioningType)
        connectorProvisioningType = connectorProvisioningTypeDecoded
        let connectorModesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .connectorModes)
        var connectorModesDecoded0:[Swift.String]? = nil
        if let connectorModesContainer = connectorModesContainer {
            connectorModesDecoded0 = [Swift.String]()
            for string0 in connectorModesContainer {
                if let string0 = string0 {
                    connectorModesDecoded0?.append(string0)
                }
            }
        }
        connectorModes = connectorModesDecoded0
    }
}
