// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AppflowClientTypes.ConnectorMetadata: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case amplitude = "Amplitude"
        case customerProfiles = "CustomerProfiles"
        case datadog = "Datadog"
        case dynatrace = "Dynatrace"
        case eventBridge = "EventBridge"
        case googleAnalytics = "GoogleAnalytics"
        case honeycode = "Honeycode"
        case inforNexus = "InforNexus"
        case marketo = "Marketo"
        case redshift = "Redshift"
        case s3 = "S3"
        case sAPOData = "SAPOData"
        case salesforce = "Salesforce"
        case serviceNow = "ServiceNow"
        case singular = "Singular"
        case slack = "Slack"
        case snowflake = "Snowflake"
        case trendmicro = "Trendmicro"
        case upsolver = "Upsolver"
        case veeva = "Veeva"
        case zendesk = "Zendesk"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let amplitude = self.amplitude {
            try encodeContainer.encode(amplitude, forKey: .amplitude)
        }
        if let customerProfiles = self.customerProfiles {
            try encodeContainer.encode(customerProfiles, forKey: .customerProfiles)
        }
        if let datadog = self.datadog {
            try encodeContainer.encode(datadog, forKey: .datadog)
        }
        if let dynatrace = self.dynatrace {
            try encodeContainer.encode(dynatrace, forKey: .dynatrace)
        }
        if let eventBridge = self.eventBridge {
            try encodeContainer.encode(eventBridge, forKey: .eventBridge)
        }
        if let googleAnalytics = self.googleAnalytics {
            try encodeContainer.encode(googleAnalytics, forKey: .googleAnalytics)
        }
        if let honeycode = self.honeycode {
            try encodeContainer.encode(honeycode, forKey: .honeycode)
        }
        if let inforNexus = self.inforNexus {
            try encodeContainer.encode(inforNexus, forKey: .inforNexus)
        }
        if let marketo = self.marketo {
            try encodeContainer.encode(marketo, forKey: .marketo)
        }
        if let redshift = self.redshift {
            try encodeContainer.encode(redshift, forKey: .redshift)
        }
        if let s3 = self.s3 {
            try encodeContainer.encode(s3, forKey: .s3)
        }
        if let sAPOData = self.sAPOData {
            try encodeContainer.encode(sAPOData, forKey: .sAPOData)
        }
        if let salesforce = self.salesforce {
            try encodeContainer.encode(salesforce, forKey: .salesforce)
        }
        if let serviceNow = self.serviceNow {
            try encodeContainer.encode(serviceNow, forKey: .serviceNow)
        }
        if let singular = self.singular {
            try encodeContainer.encode(singular, forKey: .singular)
        }
        if let slack = self.slack {
            try encodeContainer.encode(slack, forKey: .slack)
        }
        if let snowflake = self.snowflake {
            try encodeContainer.encode(snowflake, forKey: .snowflake)
        }
        if let trendmicro = self.trendmicro {
            try encodeContainer.encode(trendmicro, forKey: .trendmicro)
        }
        if let upsolver = self.upsolver {
            try encodeContainer.encode(upsolver, forKey: .upsolver)
        }
        if let veeva = self.veeva {
            try encodeContainer.encode(veeva, forKey: .veeva)
        }
        if let zendesk = self.zendesk {
            try encodeContainer.encode(zendesk, forKey: .zendesk)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let amplitudeDecoded = try containerValues.decodeIfPresent(AppflowClientTypes.AmplitudeMetadata.self, forKey: .amplitude)
        amplitude = amplitudeDecoded
        let datadogDecoded = try containerValues.decodeIfPresent(AppflowClientTypes.DatadogMetadata.self, forKey: .datadog)
        datadog = datadogDecoded
        let dynatraceDecoded = try containerValues.decodeIfPresent(AppflowClientTypes.DynatraceMetadata.self, forKey: .dynatrace)
        dynatrace = dynatraceDecoded
        let googleAnalyticsDecoded = try containerValues.decodeIfPresent(AppflowClientTypes.GoogleAnalyticsMetadata.self, forKey: .googleAnalytics)
        googleAnalytics = googleAnalyticsDecoded
        let inforNexusDecoded = try containerValues.decodeIfPresent(AppflowClientTypes.InforNexusMetadata.self, forKey: .inforNexus)
        inforNexus = inforNexusDecoded
        let marketoDecoded = try containerValues.decodeIfPresent(AppflowClientTypes.MarketoMetadata.self, forKey: .marketo)
        marketo = marketoDecoded
        let redshiftDecoded = try containerValues.decodeIfPresent(AppflowClientTypes.RedshiftMetadata.self, forKey: .redshift)
        redshift = redshiftDecoded
        let s3Decoded = try containerValues.decodeIfPresent(AppflowClientTypes.S3Metadata.self, forKey: .s3)
        s3 = s3Decoded
        let salesforceDecoded = try containerValues.decodeIfPresent(AppflowClientTypes.SalesforceMetadata.self, forKey: .salesforce)
        salesforce = salesforceDecoded
        let serviceNowDecoded = try containerValues.decodeIfPresent(AppflowClientTypes.ServiceNowMetadata.self, forKey: .serviceNow)
        serviceNow = serviceNowDecoded
        let singularDecoded = try containerValues.decodeIfPresent(AppflowClientTypes.SingularMetadata.self, forKey: .singular)
        singular = singularDecoded
        let slackDecoded = try containerValues.decodeIfPresent(AppflowClientTypes.SlackMetadata.self, forKey: .slack)
        slack = slackDecoded
        let snowflakeDecoded = try containerValues.decodeIfPresent(AppflowClientTypes.SnowflakeMetadata.self, forKey: .snowflake)
        snowflake = snowflakeDecoded
        let trendmicroDecoded = try containerValues.decodeIfPresent(AppflowClientTypes.TrendmicroMetadata.self, forKey: .trendmicro)
        trendmicro = trendmicroDecoded
        let veevaDecoded = try containerValues.decodeIfPresent(AppflowClientTypes.VeevaMetadata.self, forKey: .veeva)
        veeva = veevaDecoded
        let zendeskDecoded = try containerValues.decodeIfPresent(AppflowClientTypes.ZendeskMetadata.self, forKey: .zendesk)
        zendesk = zendeskDecoded
        let eventBridgeDecoded = try containerValues.decodeIfPresent(AppflowClientTypes.EventBridgeMetadata.self, forKey: .eventBridge)
        eventBridge = eventBridgeDecoded
        let upsolverDecoded = try containerValues.decodeIfPresent(AppflowClientTypes.UpsolverMetadata.self, forKey: .upsolver)
        upsolver = upsolverDecoded
        let customerProfilesDecoded = try containerValues.decodeIfPresent(AppflowClientTypes.CustomerProfilesMetadata.self, forKey: .customerProfiles)
        customerProfiles = customerProfilesDecoded
        let honeycodeDecoded = try containerValues.decodeIfPresent(AppflowClientTypes.HoneycodeMetadata.self, forKey: .honeycode)
        honeycode = honeycodeDecoded
        let sAPODataDecoded = try containerValues.decodeIfPresent(AppflowClientTypes.SAPODataMetadata.self, forKey: .sAPOData)
        sAPOData = sAPODataDecoded
    }
}
