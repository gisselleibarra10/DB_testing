// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AppflowClientTypes.ConnectorProfile: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case connectionMode
        case connectorLabel
        case connectorProfileArn
        case connectorProfileName
        case connectorProfileProperties
        case connectorType
        case createdAt
        case credentialsArn
        case lastUpdatedAt
        case privateConnectionProvisioningState
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let connectionMode = self.connectionMode {
            try encodeContainer.encode(connectionMode.rawValue, forKey: .connectionMode)
        }
        if let connectorLabel = self.connectorLabel {
            try encodeContainer.encode(connectorLabel, forKey: .connectorLabel)
        }
        if let connectorProfileArn = self.connectorProfileArn {
            try encodeContainer.encode(connectorProfileArn, forKey: .connectorProfileArn)
        }
        if let connectorProfileName = self.connectorProfileName {
            try encodeContainer.encode(connectorProfileName, forKey: .connectorProfileName)
        }
        if let connectorProfileProperties = self.connectorProfileProperties {
            try encodeContainer.encode(connectorProfileProperties, forKey: .connectorProfileProperties)
        }
        if let connectorType = self.connectorType {
            try encodeContainer.encode(connectorType.rawValue, forKey: .connectorType)
        }
        if let createdAt = self.createdAt {
            try encodeContainer.encode(createdAt.timeIntervalSince1970, forKey: .createdAt)
        }
        if let credentialsArn = self.credentialsArn {
            try encodeContainer.encode(credentialsArn, forKey: .credentialsArn)
        }
        if let lastUpdatedAt = self.lastUpdatedAt {
            try encodeContainer.encode(lastUpdatedAt.timeIntervalSince1970, forKey: .lastUpdatedAt)
        }
        if let privateConnectionProvisioningState = self.privateConnectionProvisioningState {
            try encodeContainer.encode(privateConnectionProvisioningState, forKey: .privateConnectionProvisioningState)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let connectorProfileArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .connectorProfileArn)
        connectorProfileArn = connectorProfileArnDecoded
        let connectorProfileNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .connectorProfileName)
        connectorProfileName = connectorProfileNameDecoded
        let connectorTypeDecoded = try containerValues.decodeIfPresent(AppflowClientTypes.ConnectorType.self, forKey: .connectorType)
        connectorType = connectorTypeDecoded
        let connectorLabelDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .connectorLabel)
        connectorLabel = connectorLabelDecoded
        let connectionModeDecoded = try containerValues.decodeIfPresent(AppflowClientTypes.ConnectionMode.self, forKey: .connectionMode)
        connectionMode = connectionModeDecoded
        let credentialsArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .credentialsArn)
        credentialsArn = credentialsArnDecoded
        let connectorProfilePropertiesDecoded = try containerValues.decodeIfPresent(AppflowClientTypes.ConnectorProfileProperties.self, forKey: .connectorProfileProperties)
        connectorProfileProperties = connectorProfilePropertiesDecoded
        let createdAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdAt)
        createdAt = createdAtDecoded
        let lastUpdatedAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastUpdatedAt)
        lastUpdatedAt = lastUpdatedAtDecoded
        let privateConnectionProvisioningStateDecoded = try containerValues.decodeIfPresent(AppflowClientTypes.PrivateConnectionProvisioningState.self, forKey: .privateConnectionProvisioningState)
        privateConnectionProvisioningState = privateConnectionProvisioningStateDecoded
    }
}
