// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AppflowClientTypes.OAuth2CustomParameter: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case connectorSuppliedValues
        case description
        case isRequired
        case isSensitiveField
        case key
        case label
        case type
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let connectorSuppliedValues = connectorSuppliedValues {
            var connectorSuppliedValuesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .connectorSuppliedValues)
            for connectorsuppliedvaluelist0 in connectorSuppliedValues {
                try connectorSuppliedValuesContainer.encode(connectorsuppliedvaluelist0)
            }
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if isRequired != false {
            try encodeContainer.encode(isRequired, forKey: .isRequired)
        }
        if isSensitiveField != false {
            try encodeContainer.encode(isSensitiveField, forKey: .isSensitiveField)
        }
        if let key = self.key {
            try encodeContainer.encode(key, forKey: .key)
        }
        if let label = self.label {
            try encodeContainer.encode(label, forKey: .label)
        }
        if let type = self.type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .key)
        key = keyDecoded
        let isRequiredDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .isRequired) ?? false
        isRequired = isRequiredDecoded
        let labelDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .label)
        label = labelDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let isSensitiveFieldDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .isSensitiveField) ?? false
        isSensitiveField = isSensitiveFieldDecoded
        let connectorSuppliedValuesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .connectorSuppliedValues)
        var connectorSuppliedValuesDecoded0:[Swift.String]? = nil
        if let connectorSuppliedValuesContainer = connectorSuppliedValuesContainer {
            connectorSuppliedValuesDecoded0 = [Swift.String]()
            for string0 in connectorSuppliedValuesContainer {
                if let string0 = string0 {
                    connectorSuppliedValuesDecoded0?.append(string0)
                }
            }
        }
        connectorSuppliedValues = connectorSuppliedValuesDecoded0
        let typeDecoded = try containerValues.decodeIfPresent(AppflowClientTypes.OAuth2CustomPropType.self, forKey: .type)
        type = typeDecoded
    }
}
