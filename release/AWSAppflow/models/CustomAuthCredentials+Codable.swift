// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AppflowClientTypes.CustomAuthCredentials: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case credentialsMap
        case customAuthenticationType
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let credentialsMap = credentialsMap {
            var credentialsMapContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .credentialsMap)
            for (dictKey0, credentialsmap0) in credentialsMap {
                try credentialsMapContainer.encode(credentialsmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let customAuthenticationType = self.customAuthenticationType {
            try encodeContainer.encode(customAuthenticationType, forKey: .customAuthenticationType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let customAuthenticationTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .customAuthenticationType)
        customAuthenticationType = customAuthenticationTypeDecoded
        let credentialsMapContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .credentialsMap)
        var credentialsMapDecoded0: [Swift.String:Swift.String]? = nil
        if let credentialsMapContainer = credentialsMapContainer {
            credentialsMapDecoded0 = [Swift.String:Swift.String]()
            for (key0, credentialsmapvalue0) in credentialsMapContainer {
                if let credentialsmapvalue0 = credentialsmapvalue0 {
                    credentialsMapDecoded0?[key0] = credentialsmapvalue0
                }
            }
        }
        credentialsMap = credentialsMapDecoded0
    }
}
