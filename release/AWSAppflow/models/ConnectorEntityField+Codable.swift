// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AppflowClientTypes.ConnectorEntityField: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case customProperties
        case defaultValue
        case description
        case destinationProperties
        case identifier
        case isDeprecated
        case isPrimaryKey
        case label
        case parentIdentifier
        case sourceProperties
        case supportedFieldTypeDetails
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let customProperties = customProperties {
            var customPropertiesContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .customProperties)
            for (dictKey0, customproperties0) in customProperties {
                try customPropertiesContainer.encode(customproperties0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let defaultValue = self.defaultValue {
            try encodeContainer.encode(defaultValue, forKey: .defaultValue)
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let destinationProperties = self.destinationProperties {
            try encodeContainer.encode(destinationProperties, forKey: .destinationProperties)
        }
        if let identifier = self.identifier {
            try encodeContainer.encode(identifier, forKey: .identifier)
        }
        if isDeprecated != false {
            try encodeContainer.encode(isDeprecated, forKey: .isDeprecated)
        }
        if isPrimaryKey != false {
            try encodeContainer.encode(isPrimaryKey, forKey: .isPrimaryKey)
        }
        if let label = self.label {
            try encodeContainer.encode(label, forKey: .label)
        }
        if let parentIdentifier = self.parentIdentifier {
            try encodeContainer.encode(parentIdentifier, forKey: .parentIdentifier)
        }
        if let sourceProperties = self.sourceProperties {
            try encodeContainer.encode(sourceProperties, forKey: .sourceProperties)
        }
        if let supportedFieldTypeDetails = self.supportedFieldTypeDetails {
            try encodeContainer.encode(supportedFieldTypeDetails, forKey: .supportedFieldTypeDetails)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let identifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .identifier)
        identifier = identifierDecoded
        let parentIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .parentIdentifier)
        parentIdentifier = parentIdentifierDecoded
        let labelDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .label)
        label = labelDecoded
        let isPrimaryKeyDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .isPrimaryKey) ?? false
        isPrimaryKey = isPrimaryKeyDecoded
        let defaultValueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .defaultValue)
        defaultValue = defaultValueDecoded
        let isDeprecatedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .isDeprecated) ?? false
        isDeprecated = isDeprecatedDecoded
        let supportedFieldTypeDetailsDecoded = try containerValues.decodeIfPresent(AppflowClientTypes.SupportedFieldTypeDetails.self, forKey: .supportedFieldTypeDetails)
        supportedFieldTypeDetails = supportedFieldTypeDetailsDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let sourcePropertiesDecoded = try containerValues.decodeIfPresent(AppflowClientTypes.SourceFieldProperties.self, forKey: .sourceProperties)
        sourceProperties = sourcePropertiesDecoded
        let destinationPropertiesDecoded = try containerValues.decodeIfPresent(AppflowClientTypes.DestinationFieldProperties.self, forKey: .destinationProperties)
        destinationProperties = destinationPropertiesDecoded
        let customPropertiesContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .customProperties)
        var customPropertiesDecoded0: [Swift.String:Swift.String]? = nil
        if let customPropertiesContainer = customPropertiesContainer {
            customPropertiesDecoded0 = [Swift.String:Swift.String]()
            for (key0, custompropertyvalue0) in customPropertiesContainer {
                if let custompropertyvalue0 = custompropertyvalue0 {
                    customPropertiesDecoded0?[key0] = custompropertyvalue0
                }
            }
        }
        customProperties = customPropertiesDecoded0
    }
}
