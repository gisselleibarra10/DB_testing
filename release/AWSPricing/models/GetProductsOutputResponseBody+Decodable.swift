// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetProductsOutputResponseBody: Swift.Equatable {
    let formatVersion: Swift.String?
    let priceList: [Swift.String]?
    let nextToken: Swift.String?
}

extension GetProductsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case formatVersion = "FormatVersion"
        case nextToken = "NextToken"
        case priceList = "PriceList"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let formatVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .formatVersion)
        formatVersion = formatVersionDecoded
        let priceListContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .priceList)
        var priceListDecoded0:[Swift.String]? = nil
        if let priceListContainer = priceListContainer {
            priceListDecoded0 = [Swift.String]()
            for string0 in priceListContainer {
                if let string0 = string0 {
                    priceListDecoded0?.append(string0)
                }
            }
        }
        priceList = priceListDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
