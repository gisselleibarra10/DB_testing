// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CreateWorkgroupInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case baseCapacity
        case configParameters
        case enhancedVpcRouting
        case namespaceName
        case publiclyAccessible
        case securityGroupIds
        case subnetIds
        case tags
        case workgroupName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let baseCapacity = self.baseCapacity {
            try encodeContainer.encode(baseCapacity, forKey: .baseCapacity)
        }
        if let configParameters = configParameters {
            var configParametersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .configParameters)
            for configparameterlist0 in configParameters {
                try configParametersContainer.encode(configparameterlist0)
            }
        }
        if let enhancedVpcRouting = self.enhancedVpcRouting {
            try encodeContainer.encode(enhancedVpcRouting, forKey: .enhancedVpcRouting)
        }
        if let namespaceName = self.namespaceName {
            try encodeContainer.encode(namespaceName, forKey: .namespaceName)
        }
        if let publiclyAccessible = self.publiclyAccessible {
            try encodeContainer.encode(publiclyAccessible, forKey: .publiclyAccessible)
        }
        if let securityGroupIds = securityGroupIds {
            var securityGroupIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .securityGroupIds)
            for securitygroupidlist0 in securityGroupIds {
                try securityGroupIdsContainer.encode(securitygroupidlist0)
            }
        }
        if let subnetIds = subnetIds {
            var subnetIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .subnetIds)
            for subnetidlist0 in subnetIds {
                try subnetIdsContainer.encode(subnetidlist0)
            }
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
        if let workgroupName = self.workgroupName {
            try encodeContainer.encode(workgroupName, forKey: .workgroupName)
        }
    }
}
