// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListWorkgroupsOutputResponseBody: Swift.Equatable {
    let nextToken: Swift.String?
    let workgroups: [RedshiftServerlessClientTypes.Workgroup]?
}

extension ListWorkgroupsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken
        case workgroups
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let workgroupsContainer = try containerValues.decodeIfPresent([RedshiftServerlessClientTypes.Workgroup?].self, forKey: .workgroups)
        var workgroupsDecoded0:[RedshiftServerlessClientTypes.Workgroup]? = nil
        if let workgroupsContainer = workgroupsContainer {
            workgroupsDecoded0 = [RedshiftServerlessClientTypes.Workgroup]()
            for structure0 in workgroupsContainer {
                if let structure0 = structure0 {
                    workgroupsDecoded0?.append(structure0)
                }
            }
        }
        workgroups = workgroupsDecoded0
    }
}
