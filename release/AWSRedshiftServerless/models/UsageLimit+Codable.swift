// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension RedshiftServerlessClientTypes.UsageLimit: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case amount
        case breachAction
        case period
        case resourceArn
        case usageLimitArn
        case usageLimitId
        case usageType
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let amount = self.amount {
            try encodeContainer.encode(amount, forKey: .amount)
        }
        if let breachAction = self.breachAction {
            try encodeContainer.encode(breachAction.rawValue, forKey: .breachAction)
        }
        if let period = self.period {
            try encodeContainer.encode(period.rawValue, forKey: .period)
        }
        if let resourceArn = self.resourceArn {
            try encodeContainer.encode(resourceArn, forKey: .resourceArn)
        }
        if let usageLimitArn = self.usageLimitArn {
            try encodeContainer.encode(usageLimitArn, forKey: .usageLimitArn)
        }
        if let usageLimitId = self.usageLimitId {
            try encodeContainer.encode(usageLimitId, forKey: .usageLimitId)
        }
        if let usageType = self.usageType {
            try encodeContainer.encode(usageType.rawValue, forKey: .usageType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let usageLimitIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .usageLimitId)
        usageLimitId = usageLimitIdDecoded
        let usageLimitArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .usageLimitArn)
        usageLimitArn = usageLimitArnDecoded
        let resourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceArn)
        resourceArn = resourceArnDecoded
        let usageTypeDecoded = try containerValues.decodeIfPresent(RedshiftServerlessClientTypes.UsageLimitUsageType.self, forKey: .usageType)
        usageType = usageTypeDecoded
        let amountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .amount)
        amount = amountDecoded
        let periodDecoded = try containerValues.decodeIfPresent(RedshiftServerlessClientTypes.UsageLimitPeriod.self, forKey: .period)
        period = periodDecoded
        let breachActionDecoded = try containerValues.decodeIfPresent(RedshiftServerlessClientTypes.UsageLimitBreachAction.self, forKey: .breachAction)
        breachAction = breachActionDecoded
    }
}
