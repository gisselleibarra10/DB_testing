// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateNamespaceInputBody: Swift.Equatable {
    let namespaceName: Swift.String?
    let adminUsername: Swift.String?
    let adminUserPassword: Swift.String?
    let dbName: Swift.String?
    let kmsKeyId: Swift.String?
    let defaultIamRoleArn: Swift.String?
    let iamRoles: [Swift.String]?
    let logExports: [RedshiftServerlessClientTypes.LogExport]?
    let tags: [RedshiftServerlessClientTypes.Tag]?
}

extension CreateNamespaceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case adminUserPassword
        case adminUsername
        case dbName
        case defaultIamRoleArn
        case iamRoles
        case kmsKeyId
        case logExports
        case namespaceName
        case tags
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let namespaceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .namespaceName)
        namespaceName = namespaceNameDecoded
        let adminUsernameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .adminUsername)
        adminUsername = adminUsernameDecoded
        let adminUserPasswordDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .adminUserPassword)
        adminUserPassword = adminUserPasswordDecoded
        let dbNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dbName)
        dbName = dbNameDecoded
        let kmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kmsKeyId)
        kmsKeyId = kmsKeyIdDecoded
        let defaultIamRoleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .defaultIamRoleArn)
        defaultIamRoleArn = defaultIamRoleArnDecoded
        let iamRolesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .iamRoles)
        var iamRolesDecoded0:[Swift.String]? = nil
        if let iamRolesContainer = iamRolesContainer {
            iamRolesDecoded0 = [Swift.String]()
            for string0 in iamRolesContainer {
                if let string0 = string0 {
                    iamRolesDecoded0?.append(string0)
                }
            }
        }
        iamRoles = iamRolesDecoded0
        let logExportsContainer = try containerValues.decodeIfPresent([RedshiftServerlessClientTypes.LogExport?].self, forKey: .logExports)
        var logExportsDecoded0:[RedshiftServerlessClientTypes.LogExport]? = nil
        if let logExportsContainer = logExportsContainer {
            logExportsDecoded0 = [RedshiftServerlessClientTypes.LogExport]()
            for string0 in logExportsContainer {
                if let string0 = string0 {
                    logExportsDecoded0?.append(string0)
                }
            }
        }
        logExports = logExportsDecoded0
        let tagsContainer = try containerValues.decodeIfPresent([RedshiftServerlessClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[RedshiftServerlessClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [RedshiftServerlessClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}
