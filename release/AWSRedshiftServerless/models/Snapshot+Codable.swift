// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension RedshiftServerlessClientTypes.Snapshot: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountsWithProvisionedRestoreAccess
        case accountsWithRestoreAccess
        case actualIncrementalBackupSizeInMegaBytes
        case adminUsername
        case backupProgressInMegaBytes
        case currentBackupRateInMegaBytesPerSecond
        case elapsedTimeInSeconds
        case estimatedSecondsToCompletion
        case kmsKeyId
        case namespaceArn
        case namespaceName
        case ownerAccount
        case snapshotArn
        case snapshotCreateTime
        case snapshotName
        case snapshotRemainingDays
        case snapshotRetentionPeriod
        case snapshotRetentionStartTime
        case status
        case totalBackupSizeInMegaBytes
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accountsWithProvisionedRestoreAccess = accountsWithProvisionedRestoreAccess {
            var accountsWithProvisionedRestoreAccessContainer = encodeContainer.nestedUnkeyedContainer(forKey: .accountsWithProvisionedRestoreAccess)
            for accountidlist0 in accountsWithProvisionedRestoreAccess {
                try accountsWithProvisionedRestoreAccessContainer.encode(accountidlist0)
            }
        }
        if let accountsWithRestoreAccess = accountsWithRestoreAccess {
            var accountsWithRestoreAccessContainer = encodeContainer.nestedUnkeyedContainer(forKey: .accountsWithRestoreAccess)
            for accountidlist0 in accountsWithRestoreAccess {
                try accountsWithRestoreAccessContainer.encode(accountidlist0)
            }
        }
        if let actualIncrementalBackupSizeInMegaBytes = self.actualIncrementalBackupSizeInMegaBytes {
            try encodeContainer.encode(actualIncrementalBackupSizeInMegaBytes, forKey: .actualIncrementalBackupSizeInMegaBytes)
        }
        if let adminUsername = self.adminUsername {
            try encodeContainer.encode(adminUsername, forKey: .adminUsername)
        }
        if let backupProgressInMegaBytes = self.backupProgressInMegaBytes {
            try encodeContainer.encode(backupProgressInMegaBytes, forKey: .backupProgressInMegaBytes)
        }
        if let currentBackupRateInMegaBytesPerSecond = self.currentBackupRateInMegaBytesPerSecond {
            try encodeContainer.encode(currentBackupRateInMegaBytesPerSecond, forKey: .currentBackupRateInMegaBytesPerSecond)
        }
        if let elapsedTimeInSeconds = self.elapsedTimeInSeconds {
            try encodeContainer.encode(elapsedTimeInSeconds, forKey: .elapsedTimeInSeconds)
        }
        if let estimatedSecondsToCompletion = self.estimatedSecondsToCompletion {
            try encodeContainer.encode(estimatedSecondsToCompletion, forKey: .estimatedSecondsToCompletion)
        }
        if let kmsKeyId = self.kmsKeyId {
            try encodeContainer.encode(kmsKeyId, forKey: .kmsKeyId)
        }
        if let namespaceArn = self.namespaceArn {
            try encodeContainer.encode(namespaceArn, forKey: .namespaceArn)
        }
        if let namespaceName = self.namespaceName {
            try encodeContainer.encode(namespaceName, forKey: .namespaceName)
        }
        if let ownerAccount = self.ownerAccount {
            try encodeContainer.encode(ownerAccount, forKey: .ownerAccount)
        }
        if let snapshotArn = self.snapshotArn {
            try encodeContainer.encode(snapshotArn, forKey: .snapshotArn)
        }
        if let snapshotCreateTime = self.snapshotCreateTime {
            try encodeContainer.encode(snapshotCreateTime.iso8601WithoutFractionalSeconds(), forKey: .snapshotCreateTime)
        }
        if let snapshotName = self.snapshotName {
            try encodeContainer.encode(snapshotName, forKey: .snapshotName)
        }
        if let snapshotRemainingDays = self.snapshotRemainingDays {
            try encodeContainer.encode(snapshotRemainingDays, forKey: .snapshotRemainingDays)
        }
        if let snapshotRetentionPeriod = self.snapshotRetentionPeriod {
            try encodeContainer.encode(snapshotRetentionPeriod, forKey: .snapshotRetentionPeriod)
        }
        if let snapshotRetentionStartTime = self.snapshotRetentionStartTime {
            try encodeContainer.encode(snapshotRetentionStartTime.iso8601WithoutFractionalSeconds(), forKey: .snapshotRetentionStartTime)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let totalBackupSizeInMegaBytes = self.totalBackupSizeInMegaBytes {
            try encodeContainer.encode(totalBackupSizeInMegaBytes, forKey: .totalBackupSizeInMegaBytes)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let namespaceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .namespaceName)
        namespaceName = namespaceNameDecoded
        let namespaceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .namespaceArn)
        namespaceArn = namespaceArnDecoded
        let snapshotNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .snapshotName)
        snapshotName = snapshotNameDecoded
        let snapshotCreateTimeDateString = try containerValues.decodeIfPresent(Swift.String.self, forKey: .snapshotCreateTime)
        var snapshotCreateTimeDecoded: ClientRuntime.Date? = nil
        if let snapshotCreateTimeDateString = snapshotCreateTimeDateString {
            let snapshotCreateTimeFormatter = ClientRuntime.DateFormatter.iso8601DateFormatterWithoutFractionalSeconds
            snapshotCreateTimeDecoded = snapshotCreateTimeFormatter.date(from: snapshotCreateTimeDateString)
        }
        snapshotCreateTime = snapshotCreateTimeDecoded
        let adminUsernameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .adminUsername)
        adminUsername = adminUsernameDecoded
        let statusDecoded = try containerValues.decodeIfPresent(RedshiftServerlessClientTypes.SnapshotStatus.self, forKey: .status)
        status = statusDecoded
        let kmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kmsKeyId)
        kmsKeyId = kmsKeyIdDecoded
        let ownerAccountDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ownerAccount)
        ownerAccount = ownerAccountDecoded
        let totalBackupSizeInMegaBytesDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .totalBackupSizeInMegaBytes)
        totalBackupSizeInMegaBytes = totalBackupSizeInMegaBytesDecoded
        let actualIncrementalBackupSizeInMegaBytesDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .actualIncrementalBackupSizeInMegaBytes)
        actualIncrementalBackupSizeInMegaBytes = actualIncrementalBackupSizeInMegaBytesDecoded
        let backupProgressInMegaBytesDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .backupProgressInMegaBytes)
        backupProgressInMegaBytes = backupProgressInMegaBytesDecoded
        let currentBackupRateInMegaBytesPerSecondDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .currentBackupRateInMegaBytesPerSecond)
        currentBackupRateInMegaBytesPerSecond = currentBackupRateInMegaBytesPerSecondDecoded
        let estimatedSecondsToCompletionDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .estimatedSecondsToCompletion)
        estimatedSecondsToCompletion = estimatedSecondsToCompletionDecoded
        let elapsedTimeInSecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .elapsedTimeInSeconds)
        elapsedTimeInSeconds = elapsedTimeInSecondsDecoded
        let snapshotRetentionPeriodDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .snapshotRetentionPeriod)
        snapshotRetentionPeriod = snapshotRetentionPeriodDecoded
        let snapshotRemainingDaysDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .snapshotRemainingDays)
        snapshotRemainingDays = snapshotRemainingDaysDecoded
        let snapshotRetentionStartTimeDateString = try containerValues.decodeIfPresent(Swift.String.self, forKey: .snapshotRetentionStartTime)
        var snapshotRetentionStartTimeDecoded: ClientRuntime.Date? = nil
        if let snapshotRetentionStartTimeDateString = snapshotRetentionStartTimeDateString {
            let snapshotRetentionStartTimeFormatter = ClientRuntime.DateFormatter.iso8601DateFormatterWithoutFractionalSeconds
            snapshotRetentionStartTimeDecoded = snapshotRetentionStartTimeFormatter.date(from: snapshotRetentionStartTimeDateString)
        }
        snapshotRetentionStartTime = snapshotRetentionStartTimeDecoded
        let snapshotArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .snapshotArn)
        snapshotArn = snapshotArnDecoded
        let accountsWithRestoreAccessContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .accountsWithRestoreAccess)
        var accountsWithRestoreAccessDecoded0:[Swift.String]? = nil
        if let accountsWithRestoreAccessContainer = accountsWithRestoreAccessContainer {
            accountsWithRestoreAccessDecoded0 = [Swift.String]()
            for string0 in accountsWithRestoreAccessContainer {
                if let string0 = string0 {
                    accountsWithRestoreAccessDecoded0?.append(string0)
                }
            }
        }
        accountsWithRestoreAccess = accountsWithRestoreAccessDecoded0
        let accountsWithProvisionedRestoreAccessContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .accountsWithProvisionedRestoreAccess)
        var accountsWithProvisionedRestoreAccessDecoded0:[Swift.String]? = nil
        if let accountsWithProvisionedRestoreAccessContainer = accountsWithProvisionedRestoreAccessContainer {
            accountsWithProvisionedRestoreAccessDecoded0 = [Swift.String]()
            for string0 in accountsWithProvisionedRestoreAccessContainer {
                if let string0 = string0 {
                    accountsWithProvisionedRestoreAccessDecoded0?.append(string0)
                }
            }
        }
        accountsWithProvisionedRestoreAccess = accountsWithProvisionedRestoreAccessDecoded0
    }
}
