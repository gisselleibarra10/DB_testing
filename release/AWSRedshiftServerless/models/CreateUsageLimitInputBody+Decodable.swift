// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateUsageLimitInputBody: Swift.Equatable {
    let resourceArn: Swift.String?
    let usageType: RedshiftServerlessClientTypes.UsageLimitUsageType?
    let amount: Swift.Int?
    let period: RedshiftServerlessClientTypes.UsageLimitPeriod?
    let breachAction: RedshiftServerlessClientTypes.UsageLimitBreachAction?
}

extension CreateUsageLimitInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case amount
        case breachAction
        case period
        case resourceArn
        case usageType
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceArn)
        resourceArn = resourceArnDecoded
        let usageTypeDecoded = try containerValues.decodeIfPresent(RedshiftServerlessClientTypes.UsageLimitUsageType.self, forKey: .usageType)
        usageType = usageTypeDecoded
        let amountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .amount)
        amount = amountDecoded
        let periodDecoded = try containerValues.decodeIfPresent(RedshiftServerlessClientTypes.UsageLimitPeriod.self, forKey: .period)
        period = periodDecoded
        let breachActionDecoded = try containerValues.decodeIfPresent(RedshiftServerlessClientTypes.UsageLimitBreachAction.self, forKey: .breachAction)
        breachAction = breachActionDecoded
    }
}
