// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListNamespacesOutputResponseBody: Swift.Equatable {
    let nextToken: Swift.String?
    let namespaces: [RedshiftServerlessClientTypes.Namespace]?
}

extension ListNamespacesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case namespaces
        case nextToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let namespacesContainer = try containerValues.decodeIfPresent([RedshiftServerlessClientTypes.Namespace?].self, forKey: .namespaces)
        var namespacesDecoded0:[RedshiftServerlessClientTypes.Namespace]? = nil
        if let namespacesContainer = namespacesContainer {
            namespacesDecoded0 = [RedshiftServerlessClientTypes.Namespace]()
            for structure0 in namespacesContainer {
                if let structure0 = structure0 {
                    namespacesDecoded0?.append(structure0)
                }
            }
        }
        namespaces = namespacesDecoded0
    }
}
