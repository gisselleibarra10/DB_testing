// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct UpdateWorkgroupInputBody: Swift.Equatable {
    let workgroupName: Swift.String?
    let baseCapacity: Swift.Int?
    let enhancedVpcRouting: Swift.Bool?
    let configParameters: [RedshiftServerlessClientTypes.ConfigParameter]?
    let publiclyAccessible: Swift.Bool?
    let subnetIds: [Swift.String]?
    let securityGroupIds: [Swift.String]?
}

extension UpdateWorkgroupInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case baseCapacity
        case configParameters
        case enhancedVpcRouting
        case publiclyAccessible
        case securityGroupIds
        case subnetIds
        case workgroupName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let workgroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .workgroupName)
        workgroupName = workgroupNameDecoded
        let baseCapacityDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .baseCapacity)
        baseCapacity = baseCapacityDecoded
        let enhancedVpcRoutingDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enhancedVpcRouting)
        enhancedVpcRouting = enhancedVpcRoutingDecoded
        let configParametersContainer = try containerValues.decodeIfPresent([RedshiftServerlessClientTypes.ConfigParameter?].self, forKey: .configParameters)
        var configParametersDecoded0:[RedshiftServerlessClientTypes.ConfigParameter]? = nil
        if let configParametersContainer = configParametersContainer {
            configParametersDecoded0 = [RedshiftServerlessClientTypes.ConfigParameter]()
            for structure0 in configParametersContainer {
                if let structure0 = structure0 {
                    configParametersDecoded0?.append(structure0)
                }
            }
        }
        configParameters = configParametersDecoded0
        let publiclyAccessibleDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .publiclyAccessible)
        publiclyAccessible = publiclyAccessibleDecoded
        let subnetIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .subnetIds)
        var subnetIdsDecoded0:[Swift.String]? = nil
        if let subnetIdsContainer = subnetIdsContainer {
            subnetIdsDecoded0 = [Swift.String]()
            for string0 in subnetIdsContainer {
                if let string0 = string0 {
                    subnetIdsDecoded0?.append(string0)
                }
            }
        }
        subnetIds = subnetIdsDecoded0
        let securityGroupIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .securityGroupIds)
        var securityGroupIdsDecoded0:[Swift.String]? = nil
        if let securityGroupIdsContainer = securityGroupIdsContainer {
            securityGroupIdsDecoded0 = [Swift.String]()
            for string0 in securityGroupIdsContainer {
                if let string0 = string0 {
                    securityGroupIdsDecoded0?.append(string0)
                }
            }
        }
        securityGroupIds = securityGroupIdsDecoded0
    }
}
