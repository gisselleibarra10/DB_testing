// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension RedshiftServerlessClientTypes.Workgroup: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case baseCapacity
        case configParameters
        case creationDate
        case endpoint
        case enhancedVpcRouting
        case namespaceName
        case publiclyAccessible
        case securityGroupIds
        case status
        case subnetIds
        case workgroupArn
        case workgroupId
        case workgroupName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let baseCapacity = self.baseCapacity {
            try encodeContainer.encode(baseCapacity, forKey: .baseCapacity)
        }
        if let configParameters = configParameters {
            var configParametersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .configParameters)
            for configparameterlist0 in configParameters {
                try configParametersContainer.encode(configparameterlist0)
            }
        }
        if let creationDate = self.creationDate {
            try encodeContainer.encode(creationDate.iso8601WithoutFractionalSeconds(), forKey: .creationDate)
        }
        if let endpoint = self.endpoint {
            try encodeContainer.encode(endpoint, forKey: .endpoint)
        }
        if let enhancedVpcRouting = self.enhancedVpcRouting {
            try encodeContainer.encode(enhancedVpcRouting, forKey: .enhancedVpcRouting)
        }
        if let namespaceName = self.namespaceName {
            try encodeContainer.encode(namespaceName, forKey: .namespaceName)
        }
        if let publiclyAccessible = self.publiclyAccessible {
            try encodeContainer.encode(publiclyAccessible, forKey: .publiclyAccessible)
        }
        if let securityGroupIds = securityGroupIds {
            var securityGroupIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .securityGroupIds)
            for securitygroupidlist0 in securityGroupIds {
                try securityGroupIdsContainer.encode(securitygroupidlist0)
            }
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let subnetIds = subnetIds {
            var subnetIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .subnetIds)
            for subnetidlist0 in subnetIds {
                try subnetIdsContainer.encode(subnetidlist0)
            }
        }
        if let workgroupArn = self.workgroupArn {
            try encodeContainer.encode(workgroupArn, forKey: .workgroupArn)
        }
        if let workgroupId = self.workgroupId {
            try encodeContainer.encode(workgroupId, forKey: .workgroupId)
        }
        if let workgroupName = self.workgroupName {
            try encodeContainer.encode(workgroupName, forKey: .workgroupName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let workgroupIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .workgroupId)
        workgroupId = workgroupIdDecoded
        let workgroupArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .workgroupArn)
        workgroupArn = workgroupArnDecoded
        let workgroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .workgroupName)
        workgroupName = workgroupNameDecoded
        let namespaceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .namespaceName)
        namespaceName = namespaceNameDecoded
        let baseCapacityDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .baseCapacity)
        baseCapacity = baseCapacityDecoded
        let enhancedVpcRoutingDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enhancedVpcRouting)
        enhancedVpcRouting = enhancedVpcRoutingDecoded
        let configParametersContainer = try containerValues.decodeIfPresent([RedshiftServerlessClientTypes.ConfigParameter?].self, forKey: .configParameters)
        var configParametersDecoded0:[RedshiftServerlessClientTypes.ConfigParameter]? = nil
        if let configParametersContainer = configParametersContainer {
            configParametersDecoded0 = [RedshiftServerlessClientTypes.ConfigParameter]()
            for structure0 in configParametersContainer {
                if let structure0 = structure0 {
                    configParametersDecoded0?.append(structure0)
                }
            }
        }
        configParameters = configParametersDecoded0
        let securityGroupIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .securityGroupIds)
        var securityGroupIdsDecoded0:[Swift.String]? = nil
        if let securityGroupIdsContainer = securityGroupIdsContainer {
            securityGroupIdsDecoded0 = [Swift.String]()
            for string0 in securityGroupIdsContainer {
                if let string0 = string0 {
                    securityGroupIdsDecoded0?.append(string0)
                }
            }
        }
        securityGroupIds = securityGroupIdsDecoded0
        let subnetIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .subnetIds)
        var subnetIdsDecoded0:[Swift.String]? = nil
        if let subnetIdsContainer = subnetIdsContainer {
            subnetIdsDecoded0 = [Swift.String]()
            for string0 in subnetIdsContainer {
                if let string0 = string0 {
                    subnetIdsDecoded0?.append(string0)
                }
            }
        }
        subnetIds = subnetIdsDecoded0
        let statusDecoded = try containerValues.decodeIfPresent(RedshiftServerlessClientTypes.WorkgroupStatus.self, forKey: .status)
        status = statusDecoded
        let endpointDecoded = try containerValues.decodeIfPresent(RedshiftServerlessClientTypes.Endpoint.self, forKey: .endpoint)
        endpoint = endpointDecoded
        let publiclyAccessibleDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .publiclyAccessible)
        publiclyAccessible = publiclyAccessibleDecoded
        let creationDateDateString = try containerValues.decodeIfPresent(Swift.String.self, forKey: .creationDate)
        var creationDateDecoded: ClientRuntime.Date? = nil
        if let creationDateDateString = creationDateDateString {
            let creationDateFormatter = ClientRuntime.DateFormatter.iso8601DateFormatterWithoutFractionalSeconds
            creationDateDecoded = creationDateFormatter.date(from: creationDateDateString)
        }
        creationDate = creationDateDecoded
    }
}
