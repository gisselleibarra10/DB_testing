// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension RedshiftServerlessClientTypes.Namespace: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case adminUsername
        case creationDate
        case dbName
        case defaultIamRoleArn
        case iamRoles
        case kmsKeyId
        case logExports
        case namespaceArn
        case namespaceId
        case namespaceName
        case status
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let adminUsername = self.adminUsername {
            try encodeContainer.encode(adminUsername, forKey: .adminUsername)
        }
        if let creationDate = self.creationDate {
            try encodeContainer.encode(creationDate.iso8601WithoutFractionalSeconds(), forKey: .creationDate)
        }
        if let dbName = self.dbName {
            try encodeContainer.encode(dbName, forKey: .dbName)
        }
        if let defaultIamRoleArn = self.defaultIamRoleArn {
            try encodeContainer.encode(defaultIamRoleArn, forKey: .defaultIamRoleArn)
        }
        if let iamRoles = iamRoles {
            var iamRolesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .iamRoles)
            for iamrolearnlist0 in iamRoles {
                try iamRolesContainer.encode(iamrolearnlist0)
            }
        }
        if let kmsKeyId = self.kmsKeyId {
            try encodeContainer.encode(kmsKeyId, forKey: .kmsKeyId)
        }
        if let logExports = logExports {
            var logExportsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .logExports)
            for logexportlist0 in logExports {
                try logExportsContainer.encode(logexportlist0.rawValue)
            }
        }
        if let namespaceArn = self.namespaceArn {
            try encodeContainer.encode(namespaceArn, forKey: .namespaceArn)
        }
        if let namespaceId = self.namespaceId {
            try encodeContainer.encode(namespaceId, forKey: .namespaceId)
        }
        if let namespaceName = self.namespaceName {
            try encodeContainer.encode(namespaceName, forKey: .namespaceName)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let namespaceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .namespaceArn)
        namespaceArn = namespaceArnDecoded
        let namespaceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .namespaceId)
        namespaceId = namespaceIdDecoded
        let namespaceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .namespaceName)
        namespaceName = namespaceNameDecoded
        let adminUsernameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .adminUsername)
        adminUsername = adminUsernameDecoded
        let dbNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dbName)
        dbName = dbNameDecoded
        let kmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kmsKeyId)
        kmsKeyId = kmsKeyIdDecoded
        let defaultIamRoleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .defaultIamRoleArn)
        defaultIamRoleArn = defaultIamRoleArnDecoded
        let iamRolesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .iamRoles)
        var iamRolesDecoded0:[Swift.String]? = nil
        if let iamRolesContainer = iamRolesContainer {
            iamRolesDecoded0 = [Swift.String]()
            for string0 in iamRolesContainer {
                if let string0 = string0 {
                    iamRolesDecoded0?.append(string0)
                }
            }
        }
        iamRoles = iamRolesDecoded0
        let logExportsContainer = try containerValues.decodeIfPresent([RedshiftServerlessClientTypes.LogExport?].self, forKey: .logExports)
        var logExportsDecoded0:[RedshiftServerlessClientTypes.LogExport]? = nil
        if let logExportsContainer = logExportsContainer {
            logExportsDecoded0 = [RedshiftServerlessClientTypes.LogExport]()
            for string0 in logExportsContainer {
                if let string0 = string0 {
                    logExportsDecoded0?.append(string0)
                }
            }
        }
        logExports = logExportsDecoded0
        let statusDecoded = try containerValues.decodeIfPresent(RedshiftServerlessClientTypes.NamespaceStatus.self, forKey: .status)
        status = statusDecoded
        let creationDateDateString = try containerValues.decodeIfPresent(Swift.String.self, forKey: .creationDate)
        var creationDateDecoded: ClientRuntime.Date? = nil
        if let creationDateDateString = creationDateDateString {
            let creationDateFormatter = ClientRuntime.DateFormatter.iso8601DateFormatterWithoutFractionalSeconds
            creationDateDecoded = creationDateFormatter.date(from: creationDateDateString)
        }
        creationDate = creationDateDecoded
    }
}
