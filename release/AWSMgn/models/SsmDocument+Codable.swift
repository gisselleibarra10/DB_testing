// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension MgnClientTypes.SsmDocument: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case actionName
        case mustSucceedForCutover
        case parameters
        case ssmDocumentName
        case timeoutSeconds
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let actionName = self.actionName {
            try encodeContainer.encode(actionName, forKey: .actionName)
        }
        if let mustSucceedForCutover = self.mustSucceedForCutover {
            try encodeContainer.encode(mustSucceedForCutover, forKey: .mustSucceedForCutover)
        }
        if let parameters = parameters {
            var parametersContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .parameters)
            for (dictKey0, ssmdocumentparameters0) in parameters {
                try parametersContainer.encode(ssmdocumentparameters0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let ssmDocumentName = self.ssmDocumentName {
            try encodeContainer.encode(ssmDocumentName, forKey: .ssmDocumentName)
        }
        if timeoutSeconds != 0 {
            try encodeContainer.encode(timeoutSeconds, forKey: .timeoutSeconds)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let actionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .actionName)
        actionName = actionNameDecoded
        let ssmDocumentNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ssmDocumentName)
        ssmDocumentName = ssmDocumentNameDecoded
        let timeoutSecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .timeoutSeconds) ?? 0
        timeoutSeconds = timeoutSecondsDecoded
        let mustSucceedForCutoverDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .mustSucceedForCutover)
        mustSucceedForCutover = mustSucceedForCutoverDecoded
        let parametersContainer = try containerValues.decodeIfPresent([Swift.String: [MgnClientTypes.SsmParameterStoreParameter?]?].self, forKey: .parameters)
        var parametersDecoded0: [Swift.String:[MgnClientTypes.SsmParameterStoreParameter]]? = nil
        if let parametersContainer = parametersContainer {
            parametersDecoded0 = [Swift.String:[MgnClientTypes.SsmParameterStoreParameter]]()
            for (key0, ssmparameterstoreparameters0) in parametersContainer {
                var ssmparameterstoreparameters0Decoded0: [MgnClientTypes.SsmParameterStoreParameter]? = nil
                if let ssmparameterstoreparameters0 = ssmparameterstoreparameters0 {
                    ssmparameterstoreparameters0Decoded0 = [MgnClientTypes.SsmParameterStoreParameter]()
                    for structure1 in ssmparameterstoreparameters0 {
                        if let structure1 = structure1 {
                            ssmparameterstoreparameters0Decoded0?.append(structure1)
                        }
                    }
                }
                parametersDecoded0?[key0] = ssmparameterstoreparameters0Decoded0
            }
        }
        parameters = parametersDecoded0
    }
}
