// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension MgnClientTypes.JobPostLaunchActionsLaunchStatus: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case executionID
        case executionStatus
        case failureReason
        case ssmDocument
        case ssmDocumentType
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let executionID = self.executionID {
            try encodeContainer.encode(executionID, forKey: .executionID)
        }
        if let executionStatus = self.executionStatus {
            try encodeContainer.encode(executionStatus.rawValue, forKey: .executionStatus)
        }
        if let failureReason = self.failureReason {
            try encodeContainer.encode(failureReason, forKey: .failureReason)
        }
        if let ssmDocument = self.ssmDocument {
            try encodeContainer.encode(ssmDocument, forKey: .ssmDocument)
        }
        if let ssmDocumentType = self.ssmDocumentType {
            try encodeContainer.encode(ssmDocumentType.rawValue, forKey: .ssmDocumentType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ssmDocumentDecoded = try containerValues.decodeIfPresent(MgnClientTypes.SsmDocument.self, forKey: .ssmDocument)
        ssmDocument = ssmDocumentDecoded
        let ssmDocumentTypeDecoded = try containerValues.decodeIfPresent(MgnClientTypes.SsmDocumentType.self, forKey: .ssmDocumentType)
        ssmDocumentType = ssmDocumentTypeDecoded
        let executionIDDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .executionID)
        executionID = executionIDDecoded
        let executionStatusDecoded = try containerValues.decodeIfPresent(MgnClientTypes.PostLaunchActionExecutionStatus.self, forKey: .executionStatus)
        executionStatus = executionStatusDecoded
        let failureReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .failureReason)
        failureReason = failureReasonDecoded
    }
}
