// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension MgnClientTypes.VcenterClient: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn
        case datacenterName
        case hostname
        case lastSeenDatetime
        case sourceServerTags
        case tags
        case vcenterClientID
        case vcenterUUID
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = self.arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let datacenterName = self.datacenterName {
            try encodeContainer.encode(datacenterName, forKey: .datacenterName)
        }
        if let hostname = self.hostname {
            try encodeContainer.encode(hostname, forKey: .hostname)
        }
        if let lastSeenDatetime = self.lastSeenDatetime {
            try encodeContainer.encode(lastSeenDatetime, forKey: .lastSeenDatetime)
        }
        if let sourceServerTags = sourceServerTags {
            var sourceServerTagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .sourceServerTags)
            for (dictKey0, tagsmap0) in sourceServerTags {
                try sourceServerTagsContainer.encode(tagsmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, tagsmap0) in tags {
                try tagsContainer.encode(tagsmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let vcenterClientID = self.vcenterClientID {
            try encodeContainer.encode(vcenterClientID, forKey: .vcenterClientID)
        }
        if let vcenterUUID = self.vcenterUUID {
            try encodeContainer.encode(vcenterUUID, forKey: .vcenterUUID)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let vcenterClientIDDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vcenterClientID)
        vcenterClientID = vcenterClientIDDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let hostnameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .hostname)
        hostname = hostnameDecoded
        let vcenterUUIDDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vcenterUUID)
        vcenterUUID = vcenterUUIDDecoded
        let datacenterNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .datacenterName)
        datacenterName = datacenterNameDecoded
        let lastSeenDatetimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastSeenDatetime)
        lastSeenDatetime = lastSeenDatetimeDecoded
        let sourceServerTagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .sourceServerTags)
        var sourceServerTagsDecoded0: [Swift.String:Swift.String]? = nil
        if let sourceServerTagsContainer = sourceServerTagsContainer {
            sourceServerTagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in sourceServerTagsContainer {
                if let tagvalue0 = tagvalue0 {
                    sourceServerTagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        sourceServerTags = sourceServerTagsDecoded0
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
    }
}
