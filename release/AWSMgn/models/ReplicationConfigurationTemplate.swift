// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension MgnClientTypes {
    public struct ReplicationConfigurationTemplate: Swift.Equatable {
        /// Replication Configuration template ARN.
        public var arn: Swift.String?
        /// Replication Configuration template associate default Application Migration Service Security group.
        public var associateDefaultSecurityGroup: Swift.Bool?
        /// Replication Configuration template bandwidth throttling.
        public var bandwidthThrottling: Swift.Int
        /// Replication Configuration template create Public IP.
        public var createPublicIP: Swift.Bool?
        /// Replication Configuration template data plane routing.
        public var dataPlaneRouting: MgnClientTypes.ReplicationConfigurationDataPlaneRouting?
        /// Replication Configuration template use default large Staging Disk type.
        public var defaultLargeStagingDiskType: MgnClientTypes.ReplicationConfigurationDefaultLargeStagingDiskType?
        /// Replication Configuration template EBS encryption.
        public var ebsEncryption: MgnClientTypes.ReplicationConfigurationEbsEncryption?
        /// Replication Configuration template EBS encryption key ARN.
        public var ebsEncryptionKeyArn: Swift.String?
        /// Replication Configuration template ID.
        /// This member is required.
        public var replicationConfigurationTemplateID: Swift.String?
        /// Replication Configuration template server instance type.
        public var replicationServerInstanceType: Swift.String?
        /// Replication Configuration template server Security Groups IDs.
        public var replicationServersSecurityGroupsIDs: [Swift.String]?
        /// Replication Configuration template Staging Area subnet ID.
        public var stagingAreaSubnetId: Swift.String?
        /// Replication Configuration template Staging Area Tags.
        public var stagingAreaTags: [Swift.String:Swift.String]?
        /// Replication Configuration template Tags.
        public var tags: [Swift.String:Swift.String]?
        /// Replication Configuration template use Dedicated Replication Server.
        public var useDedicatedReplicationServer: Swift.Bool?

        public init (
            arn: Swift.String? = nil,
            associateDefaultSecurityGroup: Swift.Bool? = nil,
            bandwidthThrottling: Swift.Int = 0,
            createPublicIP: Swift.Bool? = nil,
            dataPlaneRouting: MgnClientTypes.ReplicationConfigurationDataPlaneRouting? = nil,
            defaultLargeStagingDiskType: MgnClientTypes.ReplicationConfigurationDefaultLargeStagingDiskType? = nil,
            ebsEncryption: MgnClientTypes.ReplicationConfigurationEbsEncryption? = nil,
            ebsEncryptionKeyArn: Swift.String? = nil,
            replicationConfigurationTemplateID: Swift.String? = nil,
            replicationServerInstanceType: Swift.String? = nil,
            replicationServersSecurityGroupsIDs: [Swift.String]? = nil,
            stagingAreaSubnetId: Swift.String? = nil,
            stagingAreaTags: [Swift.String:Swift.String]? = nil,
            tags: [Swift.String:Swift.String]? = nil,
            useDedicatedReplicationServer: Swift.Bool? = nil
        )
        {
            self.arn = arn
            self.associateDefaultSecurityGroup = associateDefaultSecurityGroup
            self.bandwidthThrottling = bandwidthThrottling
            self.createPublicIP = createPublicIP
            self.dataPlaneRouting = dataPlaneRouting
            self.defaultLargeStagingDiskType = defaultLargeStagingDiskType
            self.ebsEncryption = ebsEncryption
            self.ebsEncryptionKeyArn = ebsEncryptionKeyArn
            self.replicationConfigurationTemplateID = replicationConfigurationTemplateID
            self.replicationServerInstanceType = replicationServerInstanceType
            self.replicationServersSecurityGroupsIDs = replicationServersSecurityGroupsIDs
            self.stagingAreaSubnetId = stagingAreaSubnetId
            self.stagingAreaTags = stagingAreaTags
            self.tags = tags
            self.useDedicatedReplicationServer = useDedicatedReplicationServer
        }
    }

}
