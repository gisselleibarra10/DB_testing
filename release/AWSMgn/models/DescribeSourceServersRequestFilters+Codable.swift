// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension MgnClientTypes.DescribeSourceServersRequestFilters: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case isArchived
        case lifeCycleStates
        case replicationTypes
        case sourceServerIDs
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let isArchived = self.isArchived {
            try encodeContainer.encode(isArchived, forKey: .isArchived)
        }
        if let lifeCycleStates = lifeCycleStates {
            var lifeCycleStatesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .lifeCycleStates)
            for lifecyclestates0 in lifeCycleStates {
                try lifeCycleStatesContainer.encode(lifecyclestates0.rawValue)
            }
        }
        if let replicationTypes = replicationTypes {
            var replicationTypesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .replicationTypes)
            for replicationtypes0 in replicationTypes {
                try replicationTypesContainer.encode(replicationtypes0.rawValue)
            }
        }
        if let sourceServerIDs = sourceServerIDs {
            var sourceServerIDsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .sourceServerIDs)
            for describesourceserversrequestfiltersids0 in sourceServerIDs {
                try sourceServerIDsContainer.encode(describesourceserversrequestfiltersids0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sourceServerIDsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .sourceServerIDs)
        var sourceServerIDsDecoded0:[Swift.String]? = nil
        if let sourceServerIDsContainer = sourceServerIDsContainer {
            sourceServerIDsDecoded0 = [Swift.String]()
            for string0 in sourceServerIDsContainer {
                if let string0 = string0 {
                    sourceServerIDsDecoded0?.append(string0)
                }
            }
        }
        sourceServerIDs = sourceServerIDsDecoded0
        let isArchivedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .isArchived)
        isArchived = isArchivedDecoded
        let replicationTypesContainer = try containerValues.decodeIfPresent([MgnClientTypes.ReplicationType?].self, forKey: .replicationTypes)
        var replicationTypesDecoded0:[MgnClientTypes.ReplicationType]? = nil
        if let replicationTypesContainer = replicationTypesContainer {
            replicationTypesDecoded0 = [MgnClientTypes.ReplicationType]()
            for string0 in replicationTypesContainer {
                if let string0 = string0 {
                    replicationTypesDecoded0?.append(string0)
                }
            }
        }
        replicationTypes = replicationTypesDecoded0
        let lifeCycleStatesContainer = try containerValues.decodeIfPresent([MgnClientTypes.LifeCycleState?].self, forKey: .lifeCycleStates)
        var lifeCycleStatesDecoded0:[MgnClientTypes.LifeCycleState]? = nil
        if let lifeCycleStatesContainer = lifeCycleStatesContainer {
            lifeCycleStatesDecoded0 = [MgnClientTypes.LifeCycleState]()
            for string0 in lifeCycleStatesContainer {
                if let string0 = string0 {
                    lifeCycleStatesDecoded0?.append(string0)
                }
            }
        }
        lifeCycleStates = lifeCycleStatesDecoded0
    }
}
