// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension MgnClientTypes.LifeCycle: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case addedToServiceDateTime
        case elapsedReplicationDuration
        case firstByteDateTime
        case lastCutover
        case lastSeenByServiceDateTime
        case lastTest
        case state
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let addedToServiceDateTime = self.addedToServiceDateTime {
            try encodeContainer.encode(addedToServiceDateTime, forKey: .addedToServiceDateTime)
        }
        if let elapsedReplicationDuration = self.elapsedReplicationDuration {
            try encodeContainer.encode(elapsedReplicationDuration, forKey: .elapsedReplicationDuration)
        }
        if let firstByteDateTime = self.firstByteDateTime {
            try encodeContainer.encode(firstByteDateTime, forKey: .firstByteDateTime)
        }
        if let lastCutover = self.lastCutover {
            try encodeContainer.encode(lastCutover, forKey: .lastCutover)
        }
        if let lastSeenByServiceDateTime = self.lastSeenByServiceDateTime {
            try encodeContainer.encode(lastSeenByServiceDateTime, forKey: .lastSeenByServiceDateTime)
        }
        if let lastTest = self.lastTest {
            try encodeContainer.encode(lastTest, forKey: .lastTest)
        }
        if let state = self.state {
            try encodeContainer.encode(state.rawValue, forKey: .state)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let addedToServiceDateTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .addedToServiceDateTime)
        addedToServiceDateTime = addedToServiceDateTimeDecoded
        let firstByteDateTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .firstByteDateTime)
        firstByteDateTime = firstByteDateTimeDecoded
        let elapsedReplicationDurationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .elapsedReplicationDuration)
        elapsedReplicationDuration = elapsedReplicationDurationDecoded
        let lastSeenByServiceDateTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastSeenByServiceDateTime)
        lastSeenByServiceDateTime = lastSeenByServiceDateTimeDecoded
        let lastTestDecoded = try containerValues.decodeIfPresent(MgnClientTypes.LifeCycleLastTest.self, forKey: .lastTest)
        lastTest = lastTestDecoded
        let lastCutoverDecoded = try containerValues.decodeIfPresent(MgnClientTypes.LifeCycleLastCutover.self, forKey: .lastCutover)
        lastCutover = lastCutoverDecoded
        let stateDecoded = try containerValues.decodeIfPresent(MgnClientTypes.LifeCycleState.self, forKey: .state)
        state = stateDecoded
    }
}
