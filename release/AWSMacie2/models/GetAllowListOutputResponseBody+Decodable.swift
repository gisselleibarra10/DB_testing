// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetAllowListOutputResponseBody: Swift.Equatable {
    let arn: Swift.String?
    let createdAt: ClientRuntime.Date?
    let criteria: Macie2ClientTypes.AllowListCriteria?
    let description: Swift.String?
    let id: Swift.String?
    let name: Swift.String?
    let status: Macie2ClientTypes.AllowListStatus?
    let tags: [Swift.String:Swift.String]?
    let updatedAt: ClientRuntime.Date?
}

extension GetAllowListOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "arn"
        case createdAt = "createdAt"
        case criteria = "criteria"
        case description = "description"
        case id = "id"
        case name = "name"
        case status = "status"
        case tags = "tags"
        case updatedAt = "updatedAt"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let createdAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdAt)
        createdAt = createdAtDecoded
        let criteriaDecoded = try containerValues.decodeIfPresent(Macie2ClientTypes.AllowListCriteria.self, forKey: .criteria)
        criteria = criteriaDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let statusDecoded = try containerValues.decodeIfPresent(Macie2ClientTypes.AllowListStatus.self, forKey: .status)
        status = statusDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, __string0) in tagsContainer {
                if let __string0 = __string0 {
                    tagsDecoded0?[key0] = __string0
                }
            }
        }
        tags = tagsDecoded0
        let updatedAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .updatedAt)
        updatedAt = updatedAtDecoded
    }
}
