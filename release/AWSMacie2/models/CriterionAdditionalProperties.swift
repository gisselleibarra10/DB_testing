// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension Macie2ClientTypes {
    /// Specifies the operator to use in a property-based condition that filters the results of a query for findings. For detailed information and examples of each operator, see [Fundamentals of filtering findings](https://docs.aws.amazon.com/macie/latest/user/findings-filter-basics.html) in the Amazon Macie User Guide.
    public struct CriterionAdditionalProperties: Swift.Equatable {
        /// The value for the property matches (equals) the specified value. If you specify multiple values, Macie uses OR logic to join the values.
        public var eq: [Swift.String]?
        /// The value for the property exclusively matches (equals an exact match for) all the specified values. If you specify multiple values, Amazon Macie uses AND logic to join the values. You can use this operator with the following properties: customDataIdentifiers.detections.arn, customDataIdentifiers.detections.name, resourcesAffected.s3Bucket.tags.key, resourcesAffected.s3Bucket.tags.value, resourcesAffected.s3Object.tags.key, resourcesAffected.s3Object.tags.value, sensitiveData.category, and sensitiveData.detections.type.
        public var eqExactMatch: [Swift.String]?
        /// The value for the property is greater than the specified value.
        public var gt: Swift.Int?
        /// The value for the property is greater than or equal to the specified value.
        public var gte: Swift.Int?
        /// The value for the property is less than the specified value.
        public var lt: Swift.Int?
        /// The value for the property is less than or equal to the specified value.
        public var lte: Swift.Int?
        /// The value for the property doesn't match (doesn't equal) the specified value. If you specify multiple values, Macie uses OR logic to join the values.
        public var neq: [Swift.String]?

        public init (
            eq: [Swift.String]? = nil,
            eqExactMatch: [Swift.String]? = nil,
            gt: Swift.Int? = nil,
            gte: Swift.Int? = nil,
            lt: Swift.Int? = nil,
            lte: Swift.Int? = nil,
            neq: [Swift.String]? = nil
        )
        {
            self.eq = eq
            self.eqExactMatch = eqExactMatch
            self.gt = gt
            self.gte = gte
            self.lt = lt
            self.lte = lte
            self.neq = neq
        }
    }

}
