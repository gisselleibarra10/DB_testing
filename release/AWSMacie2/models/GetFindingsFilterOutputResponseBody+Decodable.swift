// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetFindingsFilterOutputResponseBody: Swift.Equatable {
    let action: Macie2ClientTypes.FindingsFilterAction?
    let arn: Swift.String?
    let description: Swift.String?
    let findingCriteria: Macie2ClientTypes.FindingCriteria?
    let id: Swift.String?
    let name: Swift.String?
    let position: Swift.Int?
    let tags: [Swift.String:Swift.String]?
}

extension GetFindingsFilterOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case action = "action"
        case arn = "arn"
        case description = "description"
        case findingCriteria = "findingCriteria"
        case id = "id"
        case name = "name"
        case position = "position"
        case tags = "tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let actionDecoded = try containerValues.decodeIfPresent(Macie2ClientTypes.FindingsFilterAction.self, forKey: .action)
        action = actionDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let findingCriteriaDecoded = try containerValues.decodeIfPresent(Macie2ClientTypes.FindingCriteria.self, forKey: .findingCriteria)
        findingCriteria = findingCriteriaDecoded
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let positionDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .position)
        position = positionDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, __string0) in tagsContainer {
                if let __string0 = __string0 {
                    tagsDecoded0?[key0] = __string0
                }
            }
        }
        tags = tagsDecoded0
    }
}
