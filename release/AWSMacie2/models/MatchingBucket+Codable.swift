// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Macie2ClientTypes.MatchingBucket: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountId = "accountId"
        case bucketName = "bucketName"
        case classifiableObjectCount = "classifiableObjectCount"
        case classifiableSizeInBytes = "classifiableSizeInBytes"
        case errorCode = "errorCode"
        case errorMessage = "errorMessage"
        case jobDetails = "jobDetails"
        case objectCount = "objectCount"
        case objectCountByEncryptionType = "objectCountByEncryptionType"
        case sizeInBytes = "sizeInBytes"
        case sizeInBytesCompressed = "sizeInBytesCompressed"
        case unclassifiableObjectCount = "unclassifiableObjectCount"
        case unclassifiableObjectSizeInBytes = "unclassifiableObjectSizeInBytes"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accountId = self.accountId {
            try encodeContainer.encode(accountId, forKey: .accountId)
        }
        if let bucketName = self.bucketName {
            try encodeContainer.encode(bucketName, forKey: .bucketName)
        }
        if let classifiableObjectCount = self.classifiableObjectCount {
            try encodeContainer.encode(classifiableObjectCount, forKey: .classifiableObjectCount)
        }
        if let classifiableSizeInBytes = self.classifiableSizeInBytes {
            try encodeContainer.encode(classifiableSizeInBytes, forKey: .classifiableSizeInBytes)
        }
        if let errorCode = self.errorCode {
            try encodeContainer.encode(errorCode.rawValue, forKey: .errorCode)
        }
        if let errorMessage = self.errorMessage {
            try encodeContainer.encode(errorMessage, forKey: .errorMessage)
        }
        if let jobDetails = self.jobDetails {
            try encodeContainer.encode(jobDetails, forKey: .jobDetails)
        }
        if let objectCount = self.objectCount {
            try encodeContainer.encode(objectCount, forKey: .objectCount)
        }
        if let objectCountByEncryptionType = self.objectCountByEncryptionType {
            try encodeContainer.encode(objectCountByEncryptionType, forKey: .objectCountByEncryptionType)
        }
        if let sizeInBytes = self.sizeInBytes {
            try encodeContainer.encode(sizeInBytes, forKey: .sizeInBytes)
        }
        if let sizeInBytesCompressed = self.sizeInBytesCompressed {
            try encodeContainer.encode(sizeInBytesCompressed, forKey: .sizeInBytesCompressed)
        }
        if let unclassifiableObjectCount = self.unclassifiableObjectCount {
            try encodeContainer.encode(unclassifiableObjectCount, forKey: .unclassifiableObjectCount)
        }
        if let unclassifiableObjectSizeInBytes = self.unclassifiableObjectSizeInBytes {
            try encodeContainer.encode(unclassifiableObjectSizeInBytes, forKey: .unclassifiableObjectSizeInBytes)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let accountIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .accountId)
        accountId = accountIdDecoded
        let bucketNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .bucketName)
        bucketName = bucketNameDecoded
        let classifiableObjectCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .classifiableObjectCount)
        classifiableObjectCount = classifiableObjectCountDecoded
        let classifiableSizeInBytesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .classifiableSizeInBytes)
        classifiableSizeInBytes = classifiableSizeInBytesDecoded
        let errorCodeDecoded = try containerValues.decodeIfPresent(Macie2ClientTypes.BucketMetadataErrorCode.self, forKey: .errorCode)
        errorCode = errorCodeDecoded
        let errorMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .errorMessage)
        errorMessage = errorMessageDecoded
        let jobDetailsDecoded = try containerValues.decodeIfPresent(Macie2ClientTypes.JobDetails.self, forKey: .jobDetails)
        jobDetails = jobDetailsDecoded
        let objectCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .objectCount)
        objectCount = objectCountDecoded
        let objectCountByEncryptionTypeDecoded = try containerValues.decodeIfPresent(Macie2ClientTypes.ObjectCountByEncryptionType.self, forKey: .objectCountByEncryptionType)
        objectCountByEncryptionType = objectCountByEncryptionTypeDecoded
        let sizeInBytesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .sizeInBytes)
        sizeInBytes = sizeInBytesDecoded
        let sizeInBytesCompressedDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .sizeInBytesCompressed)
        sizeInBytesCompressed = sizeInBytesCompressedDecoded
        let unclassifiableObjectCountDecoded = try containerValues.decodeIfPresent(Macie2ClientTypes.ObjectLevelStatistics.self, forKey: .unclassifiableObjectCount)
        unclassifiableObjectCount = unclassifiableObjectCountDecoded
        let unclassifiableObjectSizeInBytesDecoded = try containerValues.decodeIfPresent(Macie2ClientTypes.ObjectLevelStatistics.self, forKey: .unclassifiableObjectSizeInBytes)
        unclassifiableObjectSizeInBytes = unclassifiableObjectSizeInBytesDecoded
    }
}
