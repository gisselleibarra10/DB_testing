// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetBucketStatisticsOutputResponseBody: Swift.Equatable {
    let bucketCount: Swift.Int?
    let bucketCountByEffectivePermission: Macie2ClientTypes.BucketCountByEffectivePermission?
    let bucketCountByEncryptionType: Macie2ClientTypes.BucketCountByEncryptionType?
    let bucketCountByObjectEncryptionRequirement: Macie2ClientTypes.BucketCountPolicyAllowsUnencryptedObjectUploads?
    let bucketCountBySharedAccessType: Macie2ClientTypes.BucketCountBySharedAccessType?
    let classifiableObjectCount: Swift.Int?
    let classifiableSizeInBytes: Swift.Int?
    let lastUpdated: ClientRuntime.Date?
    let objectCount: Swift.Int?
    let sizeInBytes: Swift.Int?
    let sizeInBytesCompressed: Swift.Int?
    let unclassifiableObjectCount: Macie2ClientTypes.ObjectLevelStatistics?
    let unclassifiableObjectSizeInBytes: Macie2ClientTypes.ObjectLevelStatistics?
}

extension GetBucketStatisticsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bucketCount = "bucketCount"
        case bucketCountByEffectivePermission = "bucketCountByEffectivePermission"
        case bucketCountByEncryptionType = "bucketCountByEncryptionType"
        case bucketCountByObjectEncryptionRequirement = "bucketCountByObjectEncryptionRequirement"
        case bucketCountBySharedAccessType = "bucketCountBySharedAccessType"
        case classifiableObjectCount = "classifiableObjectCount"
        case classifiableSizeInBytes = "classifiableSizeInBytes"
        case lastUpdated = "lastUpdated"
        case objectCount = "objectCount"
        case sizeInBytes = "sizeInBytes"
        case sizeInBytesCompressed = "sizeInBytesCompressed"
        case unclassifiableObjectCount = "unclassifiableObjectCount"
        case unclassifiableObjectSizeInBytes = "unclassifiableObjectSizeInBytes"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let bucketCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .bucketCount)
        bucketCount = bucketCountDecoded
        let bucketCountByEffectivePermissionDecoded = try containerValues.decodeIfPresent(Macie2ClientTypes.BucketCountByEffectivePermission.self, forKey: .bucketCountByEffectivePermission)
        bucketCountByEffectivePermission = bucketCountByEffectivePermissionDecoded
        let bucketCountByEncryptionTypeDecoded = try containerValues.decodeIfPresent(Macie2ClientTypes.BucketCountByEncryptionType.self, forKey: .bucketCountByEncryptionType)
        bucketCountByEncryptionType = bucketCountByEncryptionTypeDecoded
        let bucketCountByObjectEncryptionRequirementDecoded = try containerValues.decodeIfPresent(Macie2ClientTypes.BucketCountPolicyAllowsUnencryptedObjectUploads.self, forKey: .bucketCountByObjectEncryptionRequirement)
        bucketCountByObjectEncryptionRequirement = bucketCountByObjectEncryptionRequirementDecoded
        let bucketCountBySharedAccessTypeDecoded = try containerValues.decodeIfPresent(Macie2ClientTypes.BucketCountBySharedAccessType.self, forKey: .bucketCountBySharedAccessType)
        bucketCountBySharedAccessType = bucketCountBySharedAccessTypeDecoded
        let classifiableObjectCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .classifiableObjectCount)
        classifiableObjectCount = classifiableObjectCountDecoded
        let classifiableSizeInBytesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .classifiableSizeInBytes)
        classifiableSizeInBytes = classifiableSizeInBytesDecoded
        let lastUpdatedDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastUpdated)
        lastUpdated = lastUpdatedDecoded
        let objectCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .objectCount)
        objectCount = objectCountDecoded
        let sizeInBytesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .sizeInBytes)
        sizeInBytes = sizeInBytesDecoded
        let sizeInBytesCompressedDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .sizeInBytesCompressed)
        sizeInBytesCompressed = sizeInBytesCompressedDecoded
        let unclassifiableObjectCountDecoded = try containerValues.decodeIfPresent(Macie2ClientTypes.ObjectLevelStatistics.self, forKey: .unclassifiableObjectCount)
        unclassifiableObjectCount = unclassifiableObjectCountDecoded
        let unclassifiableObjectSizeInBytesDecoded = try containerValues.decodeIfPresent(Macie2ClientTypes.ObjectLevelStatistics.self, forKey: .unclassifiableObjectSizeInBytes)
        unclassifiableObjectSizeInBytes = unclassifiableObjectSizeInBytesDecoded
    }
}
