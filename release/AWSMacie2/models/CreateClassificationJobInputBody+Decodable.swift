// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateClassificationJobInputBody: Swift.Equatable {
    let allowListIds: [Swift.String]?
    let clientToken: Swift.String?
    let customDataIdentifierIds: [Swift.String]?
    let description: Swift.String?
    let initialRun: Swift.Bool?
    let jobType: Macie2ClientTypes.JobType?
    let managedDataIdentifierIds: [Swift.String]?
    let managedDataIdentifierSelector: Macie2ClientTypes.ManagedDataIdentifierSelector?
    let name: Swift.String?
    let s3JobDefinition: Macie2ClientTypes.S3JobDefinition?
    let samplingPercentage: Swift.Int?
    let scheduleFrequency: Macie2ClientTypes.JobScheduleFrequency?
    let tags: [Swift.String:Swift.String]?
}

extension CreateClassificationJobInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case allowListIds = "allowListIds"
        case clientToken = "clientToken"
        case customDataIdentifierIds = "customDataIdentifierIds"
        case description = "description"
        case initialRun = "initialRun"
        case jobType = "jobType"
        case managedDataIdentifierIds = "managedDataIdentifierIds"
        case managedDataIdentifierSelector = "managedDataIdentifierSelector"
        case name = "name"
        case s3JobDefinition = "s3JobDefinition"
        case samplingPercentage = "samplingPercentage"
        case scheduleFrequency = "scheduleFrequency"
        case tags = "tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let allowListIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .allowListIds)
        var allowListIdsDecoded0:[Swift.String]? = nil
        if let allowListIdsContainer = allowListIdsContainer {
            allowListIdsDecoded0 = [Swift.String]()
            for string0 in allowListIdsContainer {
                if let string0 = string0 {
                    allowListIdsDecoded0?.append(string0)
                }
            }
        }
        allowListIds = allowListIdsDecoded0
        let clientTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientToken)
        clientToken = clientTokenDecoded
        let customDataIdentifierIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .customDataIdentifierIds)
        var customDataIdentifierIdsDecoded0:[Swift.String]? = nil
        if let customDataIdentifierIdsContainer = customDataIdentifierIdsContainer {
            customDataIdentifierIdsDecoded0 = [Swift.String]()
            for string0 in customDataIdentifierIdsContainer {
                if let string0 = string0 {
                    customDataIdentifierIdsDecoded0?.append(string0)
                }
            }
        }
        customDataIdentifierIds = customDataIdentifierIdsDecoded0
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let initialRunDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .initialRun)
        initialRun = initialRunDecoded
        let jobTypeDecoded = try containerValues.decodeIfPresent(Macie2ClientTypes.JobType.self, forKey: .jobType)
        jobType = jobTypeDecoded
        let managedDataIdentifierIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .managedDataIdentifierIds)
        var managedDataIdentifierIdsDecoded0:[Swift.String]? = nil
        if let managedDataIdentifierIdsContainer = managedDataIdentifierIdsContainer {
            managedDataIdentifierIdsDecoded0 = [Swift.String]()
            for string0 in managedDataIdentifierIdsContainer {
                if let string0 = string0 {
                    managedDataIdentifierIdsDecoded0?.append(string0)
                }
            }
        }
        managedDataIdentifierIds = managedDataIdentifierIdsDecoded0
        let managedDataIdentifierSelectorDecoded = try containerValues.decodeIfPresent(Macie2ClientTypes.ManagedDataIdentifierSelector.self, forKey: .managedDataIdentifierSelector)
        managedDataIdentifierSelector = managedDataIdentifierSelectorDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let s3JobDefinitionDecoded = try containerValues.decodeIfPresent(Macie2ClientTypes.S3JobDefinition.self, forKey: .s3JobDefinition)
        s3JobDefinition = s3JobDefinitionDecoded
        let samplingPercentageDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .samplingPercentage)
        samplingPercentage = samplingPercentageDecoded
        let scheduleFrequencyDecoded = try containerValues.decodeIfPresent(Macie2ClientTypes.JobScheduleFrequency.self, forKey: .scheduleFrequency)
        scheduleFrequency = scheduleFrequencyDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, __string0) in tagsContainer {
                if let __string0 = __string0 {
                    tagsDecoded0?[key0] = __string0
                }
            }
        }
        tags = tagsDecoded0
    }
}
