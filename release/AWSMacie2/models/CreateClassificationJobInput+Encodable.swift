// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CreateClassificationJobInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case allowListIds = "allowListIds"
        case clientToken = "clientToken"
        case customDataIdentifierIds = "customDataIdentifierIds"
        case description = "description"
        case initialRun = "initialRun"
        case jobType = "jobType"
        case managedDataIdentifierIds = "managedDataIdentifierIds"
        case managedDataIdentifierSelector = "managedDataIdentifierSelector"
        case name = "name"
        case s3JobDefinition = "s3JobDefinition"
        case samplingPercentage = "samplingPercentage"
        case scheduleFrequency = "scheduleFrequency"
        case tags = "tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let allowListIds = allowListIds {
            var allowListIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .allowListIds)
            for __listof__string0 in allowListIds {
                try allowListIdsContainer.encode(__listof__string0)
            }
        }
        if let clientToken = self.clientToken {
            try encodeContainer.encode(clientToken, forKey: .clientToken)
        }
        if let customDataIdentifierIds = customDataIdentifierIds {
            var customDataIdentifierIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .customDataIdentifierIds)
            for __listof__string0 in customDataIdentifierIds {
                try customDataIdentifierIdsContainer.encode(__listof__string0)
            }
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let initialRun = self.initialRun {
            try encodeContainer.encode(initialRun, forKey: .initialRun)
        }
        if let jobType = self.jobType {
            try encodeContainer.encode(jobType.rawValue, forKey: .jobType)
        }
        if let managedDataIdentifierIds = managedDataIdentifierIds {
            var managedDataIdentifierIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .managedDataIdentifierIds)
            for __listof__string0 in managedDataIdentifierIds {
                try managedDataIdentifierIdsContainer.encode(__listof__string0)
            }
        }
        if let managedDataIdentifierSelector = self.managedDataIdentifierSelector {
            try encodeContainer.encode(managedDataIdentifierSelector.rawValue, forKey: .managedDataIdentifierSelector)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let s3JobDefinition = self.s3JobDefinition {
            try encodeContainer.encode(s3JobDefinition, forKey: .s3JobDefinition)
        }
        if let samplingPercentage = self.samplingPercentage {
            try encodeContainer.encode(samplingPercentage, forKey: .samplingPercentage)
        }
        if let scheduleFrequency = self.scheduleFrequency {
            try encodeContainer.encode(scheduleFrequency, forKey: .scheduleFrequency)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, tagmap0) in tags {
                try tagsContainer.encode(tagmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }
}
