// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension AcmPcaClientTypes {
    public enum SigningAlgorithm: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case sha256withecdsa
        case sha256withrsa
        case sha384withecdsa
        case sha384withrsa
        case sha512withecdsa
        case sha512withrsa
        case sdkUnknown(Swift.String)

        public static var allCases: [SigningAlgorithm] {
            return [
                .sha256withecdsa,
                .sha256withrsa,
                .sha384withecdsa,
                .sha384withrsa,
                .sha512withecdsa,
                .sha512withrsa,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .sha256withecdsa: return "SHA256WITHECDSA"
            case .sha256withrsa: return "SHA256WITHRSA"
            case .sha384withecdsa: return "SHA384WITHECDSA"
            case .sha384withrsa: return "SHA384WITHRSA"
            case .sha512withecdsa: return "SHA512WITHECDSA"
            case .sha512withrsa: return "SHA512WITHRSA"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = SigningAlgorithm(rawValue: rawValue) ?? SigningAlgorithm.sdkUnknown(rawValue)
        }
    }
}
