// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct IssueCertificateInputBody: Swift.Equatable {
    let apiPassthrough: AcmPcaClientTypes.ApiPassthrough?
    let certificateAuthorityArn: Swift.String?
    let csr: ClientRuntime.Data?
    let signingAlgorithm: AcmPcaClientTypes.SigningAlgorithm?
    let templateArn: Swift.String?
    let validity: AcmPcaClientTypes.Validity?
    let validityNotBefore: AcmPcaClientTypes.Validity?
    let idempotencyToken: Swift.String?
}

extension IssueCertificateInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case apiPassthrough = "ApiPassthrough"
        case certificateAuthorityArn = "CertificateAuthorityArn"
        case csr = "Csr"
        case idempotencyToken = "IdempotencyToken"
        case signingAlgorithm = "SigningAlgorithm"
        case templateArn = "TemplateArn"
        case validity = "Validity"
        case validityNotBefore = "ValidityNotBefore"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let apiPassthroughDecoded = try containerValues.decodeIfPresent(AcmPcaClientTypes.ApiPassthrough.self, forKey: .apiPassthrough)
        apiPassthrough = apiPassthroughDecoded
        let certificateAuthorityArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .certificateAuthorityArn)
        certificateAuthorityArn = certificateAuthorityArnDecoded
        let csrDecoded = try containerValues.decodeIfPresent(ClientRuntime.Data.self, forKey: .csr)
        csr = csrDecoded
        let signingAlgorithmDecoded = try containerValues.decodeIfPresent(AcmPcaClientTypes.SigningAlgorithm.self, forKey: .signingAlgorithm)
        signingAlgorithm = signingAlgorithmDecoded
        let templateArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateArn)
        templateArn = templateArnDecoded
        let validityDecoded = try containerValues.decodeIfPresent(AcmPcaClientTypes.Validity.self, forKey: .validity)
        validity = validityDecoded
        let validityNotBeforeDecoded = try containerValues.decodeIfPresent(AcmPcaClientTypes.Validity.self, forKey: .validityNotBefore)
        validityNotBefore = validityNotBeforeDecoded
        let idempotencyTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .idempotencyToken)
        idempotencyToken = idempotencyTokenDecoded
    }
}
