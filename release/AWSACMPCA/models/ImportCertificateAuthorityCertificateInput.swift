// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct ImportCertificateAuthorityCertificateInput: Swift.Equatable {
    /// The PEM-encoded certificate for a private CA. This may be a self-signed certificate in the case of a root CA, or it may be signed by another CA that you control.
    /// This member is required.
    public var certificate: ClientRuntime.Data?
    /// The Amazon Resource Name (ARN) that was returned when you called [CreateCertificateAuthority](https://docs.aws.amazon.com/acm-pca/latest/APIReference/API_CreateCertificateAuthority.html). This must be of the form: arn:aws:acm-pca:region:account:certificate-authority/12345678-1234-1234-1234-123456789012
    /// This member is required.
    public var certificateAuthorityArn: Swift.String?
    /// A PEM-encoded file that contains all of your certificates, other than the certificate you're importing, chaining up to your root CA. Your ACM Private CA-hosted or on-premises root certificate is the last in the chain, and each certificate in the chain signs the one preceding. This parameter must be supplied when you import a subordinate CA. When you import a root CA, there is no chain.
    public var certificateChain: ClientRuntime.Data?

    public init (
        certificate: ClientRuntime.Data? = nil,
        certificateAuthorityArn: Swift.String? = nil,
        certificateChain: ClientRuntime.Data? = nil
    )
    {
        self.certificate = certificate
        self.certificateAuthorityArn = certificateAuthorityArn
        self.certificateChain = certificateChain
    }
}
