// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct CreateCertificateAuthorityInput: Swift.Equatable {
    /// Name and bit size of the private key algorithm, the name of the signing algorithm, and X.500 certificate subject information.
    /// This member is required.
    public var certificateAuthorityConfiguration: AcmPcaClientTypes.CertificateAuthorityConfiguration?
    /// The type of the certificate authority.
    /// This member is required.
    public var certificateAuthorityType: AcmPcaClientTypes.CertificateAuthorityType?
    /// Custom string that can be used to distinguish between calls to the CreateCertificateAuthority action. Idempotency tokens for CreateCertificateAuthority time out after five minutes. Therefore, if you call CreateCertificateAuthority multiple times with the same idempotency token within five minutes, ACM Private CA recognizes that you are requesting only certificate authority and will issue only one. If you change the idempotency token for each call, PCA recognizes that you are requesting multiple certificate authorities.
    public var idempotencyToken: Swift.String?
    /// Specifies a cryptographic key management compliance standard used for handling CA keys. Default: FIPS_140_2_LEVEL_3_OR_HIGHER Note: FIPS_140_2_LEVEL_3_OR_HIGHER is not supported in the following Regions:
    ///
    /// * ap-northeast-3
    ///
    /// * ap-southeast-3
    ///
    ///
    /// When creating a CA in these Regions, you must provide FIPS_140_2_LEVEL_2_OR_HIGHER as the argument for KeyStorageSecurityStandard. Failure to do this results in an InvalidArgsException with the message, "A certificate authority cannot be created in this region with the specified security standard."
    public var keyStorageSecurityStandard: AcmPcaClientTypes.KeyStorageSecurityStandard?
    /// Contains information to enable Online Certificate Status Protocol (OCSP) support, to enable a certificate revocation list (CRL), to enable both, or to enable neither. The default is for both certificate validation mechanisms to be disabled. For more information, see the [OcspConfiguration](https://docs.aws.amazon.com/acm-pca/latest/APIReference/API_OcspConfiguration.html) and [CrlConfiguration](https://docs.aws.amazon.com/acm-pca/latest/APIReference/API_CrlConfiguration.html) types.
    public var revocationConfiguration: AcmPcaClientTypes.RevocationConfiguration?
    /// Key-value pairs that will be attached to the new private CA. You can associate up to 50 tags with a private CA. For information using tags with IAM to manage permissions, see [Controlling Access Using IAM Tags](https://docs.aws.amazon.com/IAM/latest/UserGuide/access_iam-tags.html).
    public var tags: [AcmPcaClientTypes.Tag]?

    public init (
        certificateAuthorityConfiguration: AcmPcaClientTypes.CertificateAuthorityConfiguration? = nil,
        certificateAuthorityType: AcmPcaClientTypes.CertificateAuthorityType? = nil,
        idempotencyToken: Swift.String? = nil,
        keyStorageSecurityStandard: AcmPcaClientTypes.KeyStorageSecurityStandard? = nil,
        revocationConfiguration: AcmPcaClientTypes.RevocationConfiguration? = nil,
        tags: [AcmPcaClientTypes.Tag]? = nil
    )
    {
        self.certificateAuthorityConfiguration = certificateAuthorityConfiguration
        self.certificateAuthorityType = certificateAuthorityType
        self.idempotencyToken = idempotencyToken
        self.keyStorageSecurityStandard = keyStorageSecurityStandard
        self.revocationConfiguration = revocationConfiguration
        self.tags = tags
    }
}
