// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AcmPcaClientTypes {
    /// Contains information about your private certificate authority (CA). Your private CA can issue and revoke X.509 digital certificates. Digital certificates verify that the entity named in the certificate Subject field owns or controls the public key contained in the Subject Public Key Info field. Call the [CreateCertificateAuthority](https://docs.aws.amazon.com/acm-pca/latest/APIReference/API_CreateCertificateAuthority.html) action to create your private CA. You must then call the [GetCertificateAuthorityCertificate](https://docs.aws.amazon.com/acm-pca/latest/APIReference/API_GetCertificateAuthorityCertificate.html) action to retrieve a private CA certificate signing request (CSR). Sign the CSR with your ACM Private CA-hosted or on-premises root or subordinate CA certificate. Call the [ImportCertificateAuthorityCertificate](https://docs.aws.amazon.com/acm-pca/latest/APIReference/API_ImportCertificateAuthorityCertificate.html) action to import the signed certificate into Certificate Manager (ACM).
    public struct CertificateAuthority: Swift.Equatable {
        /// Amazon Resource Name (ARN) for your private certificate authority (CA). The format is  12345678-1234-1234-1234-123456789012 .
        public var arn: Swift.String?
        /// Your private CA configuration.
        public var certificateAuthorityConfiguration: AcmPcaClientTypes.CertificateAuthorityConfiguration?
        /// Date and time at which your private CA was created.
        public var createdAt: ClientRuntime.Date?
        /// Reason the request to create your private CA failed.
        public var failureReason: AcmPcaClientTypes.FailureReason?
        /// Defines a cryptographic key management compliance standard used for handling CA keys. Default: FIPS_140_2_LEVEL_3_OR_HIGHER Note: Amazon Web Services Region ap-northeast-3 supports only FIPS_140_2_LEVEL_2_OR_HIGHER. You must explicitly specify this parameter and value when creating a CA in that Region. Specifying a different value (or no value) results in an InvalidArgsException with the message "A certificate authority cannot be created in this region with the specified security standard."
        public var keyStorageSecurityStandard: AcmPcaClientTypes.KeyStorageSecurityStandard?
        /// Date and time at which your private CA was last updated.
        public var lastStateChangeAt: ClientRuntime.Date?
        /// Date and time after which your private CA certificate is not valid.
        public var notAfter: ClientRuntime.Date?
        /// Date and time before which your private CA certificate is not valid.
        public var notBefore: ClientRuntime.Date?
        /// The Amazon Web Services account ID that owns the certificate authority.
        public var ownerAccount: Swift.String?
        /// The period during which a deleted CA can be restored. For more information, see the PermanentDeletionTimeInDays parameter of the [DeleteCertificateAuthorityRequest](https://docs.aws.amazon.com/acm-pca/latest/APIReference/API_DeleteCertificateAuthorityRequest.html) action.
        public var restorableUntil: ClientRuntime.Date?
        /// Information about the Online Certificate Status Protocol (OCSP) configuration or certificate revocation list (CRL) created and maintained by your private CA.
        public var revocationConfiguration: AcmPcaClientTypes.RevocationConfiguration?
        /// Serial number of your private CA.
        public var serial: Swift.String?
        /// Status of your private CA.
        public var status: AcmPcaClientTypes.CertificateAuthorityStatus?
        /// Type of your private CA.
        public var type: AcmPcaClientTypes.CertificateAuthorityType?

        public init (
            arn: Swift.String? = nil,
            certificateAuthorityConfiguration: AcmPcaClientTypes.CertificateAuthorityConfiguration? = nil,
            createdAt: ClientRuntime.Date? = nil,
            failureReason: AcmPcaClientTypes.FailureReason? = nil,
            keyStorageSecurityStandard: AcmPcaClientTypes.KeyStorageSecurityStandard? = nil,
            lastStateChangeAt: ClientRuntime.Date? = nil,
            notAfter: ClientRuntime.Date? = nil,
            notBefore: ClientRuntime.Date? = nil,
            ownerAccount: Swift.String? = nil,
            restorableUntil: ClientRuntime.Date? = nil,
            revocationConfiguration: AcmPcaClientTypes.RevocationConfiguration? = nil,
            serial: Swift.String? = nil,
            status: AcmPcaClientTypes.CertificateAuthorityStatus? = nil,
            type: AcmPcaClientTypes.CertificateAuthorityType? = nil
        )
        {
            self.arn = arn
            self.certificateAuthorityConfiguration = certificateAuthorityConfiguration
            self.createdAt = createdAt
            self.failureReason = failureReason
            self.keyStorageSecurityStandard = keyStorageSecurityStandard
            self.lastStateChangeAt = lastStateChangeAt
            self.notAfter = notAfter
            self.notBefore = notBefore
            self.ownerAccount = ownerAccount
            self.restorableUntil = restorableUntil
            self.revocationConfiguration = revocationConfiguration
            self.serial = serial
            self.status = status
            self.type = type
        }
    }

}
