// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AcmPcaClientTypes.CrlConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case customCname = "CustomCname"
        case enabled = "Enabled"
        case expirationInDays = "ExpirationInDays"
        case s3BucketName = "S3BucketName"
        case s3ObjectAcl = "S3ObjectAcl"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let customCname = self.customCname {
            try encodeContainer.encode(customCname, forKey: .customCname)
        }
        if let enabled = self.enabled {
            try encodeContainer.encode(enabled, forKey: .enabled)
        }
        if let expirationInDays = self.expirationInDays {
            try encodeContainer.encode(expirationInDays, forKey: .expirationInDays)
        }
        if let s3BucketName = self.s3BucketName {
            try encodeContainer.encode(s3BucketName, forKey: .s3BucketName)
        }
        if let s3ObjectAcl = self.s3ObjectAcl {
            try encodeContainer.encode(s3ObjectAcl.rawValue, forKey: .s3ObjectAcl)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let enabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enabled)
        enabled = enabledDecoded
        let expirationInDaysDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .expirationInDays)
        expirationInDays = expirationInDaysDecoded
        let customCnameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .customCname)
        customCname = customCnameDecoded
        let s3BucketNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .s3BucketName)
        s3BucketName = s3BucketNameDecoded
        let s3ObjectAclDecoded = try containerValues.decodeIfPresent(AcmPcaClientTypes.S3ObjectAcl.self, forKey: .s3ObjectAcl)
        s3ObjectAcl = s3ObjectAclDecoded
    }
}
