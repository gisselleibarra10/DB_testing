// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AcmPcaClientTypes.Extensions: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case certificatePolicies = "CertificatePolicies"
        case customExtensions = "CustomExtensions"
        case extendedKeyUsage = "ExtendedKeyUsage"
        case keyUsage = "KeyUsage"
        case subjectAlternativeNames = "SubjectAlternativeNames"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let certificatePolicies = certificatePolicies {
            var certificatePoliciesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .certificatePolicies)
            for certificatepolicylist0 in certificatePolicies {
                try certificatePoliciesContainer.encode(certificatepolicylist0)
            }
        }
        if let customExtensions = customExtensions {
            var customExtensionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .customExtensions)
            for customextensionlist0 in customExtensions {
                try customExtensionsContainer.encode(customextensionlist0)
            }
        }
        if let extendedKeyUsage = extendedKeyUsage {
            var extendedKeyUsageContainer = encodeContainer.nestedUnkeyedContainer(forKey: .extendedKeyUsage)
            for extendedkeyusagelist0 in extendedKeyUsage {
                try extendedKeyUsageContainer.encode(extendedkeyusagelist0)
            }
        }
        if let keyUsage = self.keyUsage {
            try encodeContainer.encode(keyUsage, forKey: .keyUsage)
        }
        if let subjectAlternativeNames = subjectAlternativeNames {
            var subjectAlternativeNamesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .subjectAlternativeNames)
            for generalnamelist0 in subjectAlternativeNames {
                try subjectAlternativeNamesContainer.encode(generalnamelist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let certificatePoliciesContainer = try containerValues.decodeIfPresent([AcmPcaClientTypes.PolicyInformation?].self, forKey: .certificatePolicies)
        var certificatePoliciesDecoded0:[AcmPcaClientTypes.PolicyInformation]? = nil
        if let certificatePoliciesContainer = certificatePoliciesContainer {
            certificatePoliciesDecoded0 = [AcmPcaClientTypes.PolicyInformation]()
            for structure0 in certificatePoliciesContainer {
                if let structure0 = structure0 {
                    certificatePoliciesDecoded0?.append(structure0)
                }
            }
        }
        certificatePolicies = certificatePoliciesDecoded0
        let extendedKeyUsageContainer = try containerValues.decodeIfPresent([AcmPcaClientTypes.ExtendedKeyUsage?].self, forKey: .extendedKeyUsage)
        var extendedKeyUsageDecoded0:[AcmPcaClientTypes.ExtendedKeyUsage]? = nil
        if let extendedKeyUsageContainer = extendedKeyUsageContainer {
            extendedKeyUsageDecoded0 = [AcmPcaClientTypes.ExtendedKeyUsage]()
            for structure0 in extendedKeyUsageContainer {
                if let structure0 = structure0 {
                    extendedKeyUsageDecoded0?.append(structure0)
                }
            }
        }
        extendedKeyUsage = extendedKeyUsageDecoded0
        let keyUsageDecoded = try containerValues.decodeIfPresent(AcmPcaClientTypes.KeyUsage.self, forKey: .keyUsage)
        keyUsage = keyUsageDecoded
        let subjectAlternativeNamesContainer = try containerValues.decodeIfPresent([AcmPcaClientTypes.GeneralName?].self, forKey: .subjectAlternativeNames)
        var subjectAlternativeNamesDecoded0:[AcmPcaClientTypes.GeneralName]? = nil
        if let subjectAlternativeNamesContainer = subjectAlternativeNamesContainer {
            subjectAlternativeNamesDecoded0 = [AcmPcaClientTypes.GeneralName]()
            for structure0 in subjectAlternativeNamesContainer {
                if let structure0 = structure0 {
                    subjectAlternativeNamesDecoded0?.append(structure0)
                }
            }
        }
        subjectAlternativeNames = subjectAlternativeNamesDecoded0
        let customExtensionsContainer = try containerValues.decodeIfPresent([AcmPcaClientTypes.CustomExtension?].self, forKey: .customExtensions)
        var customExtensionsDecoded0:[AcmPcaClientTypes.CustomExtension]? = nil
        if let customExtensionsContainer = customExtensionsContainer {
            customExtensionsDecoded0 = [AcmPcaClientTypes.CustomExtension]()
            for structure0 in customExtensionsContainer {
                if let structure0 = structure0 {
                    customExtensionsDecoded0?.append(structure0)
                }
            }
        }
        customExtensions = customExtensionsDecoded0
    }
}
