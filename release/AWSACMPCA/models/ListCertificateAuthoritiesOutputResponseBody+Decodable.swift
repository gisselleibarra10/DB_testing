// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListCertificateAuthoritiesOutputResponseBody: Swift.Equatable {
    let certificateAuthorities: [AcmPcaClientTypes.CertificateAuthority]?
    let nextToken: Swift.String?
}

extension ListCertificateAuthoritiesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case certificateAuthorities = "CertificateAuthorities"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let certificateAuthoritiesContainer = try containerValues.decodeIfPresent([AcmPcaClientTypes.CertificateAuthority?].self, forKey: .certificateAuthorities)
        var certificateAuthoritiesDecoded0:[AcmPcaClientTypes.CertificateAuthority]? = nil
        if let certificateAuthoritiesContainer = certificateAuthoritiesContainer {
            certificateAuthoritiesDecoded0 = [AcmPcaClientTypes.CertificateAuthority]()
            for structure0 in certificateAuthoritiesContainer {
                if let structure0 = structure0 {
                    certificateAuthoritiesDecoded0?.append(structure0)
                }
            }
        }
        certificateAuthorities = certificateAuthoritiesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
