// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AcmPcaClientTypes.ASN1Subject: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case commonName = "CommonName"
        case country = "Country"
        case customAttributes = "CustomAttributes"
        case distinguishedNameQualifier = "DistinguishedNameQualifier"
        case generationQualifier = "GenerationQualifier"
        case givenName = "GivenName"
        case initials = "Initials"
        case locality = "Locality"
        case organization = "Organization"
        case organizationalUnit = "OrganizationalUnit"
        case pseudonym = "Pseudonym"
        case serialNumber = "SerialNumber"
        case state = "State"
        case surname = "Surname"
        case title = "Title"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let commonName = self.commonName {
            try encodeContainer.encode(commonName, forKey: .commonName)
        }
        if let country = self.country {
            try encodeContainer.encode(country, forKey: .country)
        }
        if let customAttributes = customAttributes {
            var customAttributesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .customAttributes)
            for customattributelist0 in customAttributes {
                try customAttributesContainer.encode(customattributelist0)
            }
        }
        if let distinguishedNameQualifier = self.distinguishedNameQualifier {
            try encodeContainer.encode(distinguishedNameQualifier, forKey: .distinguishedNameQualifier)
        }
        if let generationQualifier = self.generationQualifier {
            try encodeContainer.encode(generationQualifier, forKey: .generationQualifier)
        }
        if let givenName = self.givenName {
            try encodeContainer.encode(givenName, forKey: .givenName)
        }
        if let initials = self.initials {
            try encodeContainer.encode(initials, forKey: .initials)
        }
        if let locality = self.locality {
            try encodeContainer.encode(locality, forKey: .locality)
        }
        if let organization = self.organization {
            try encodeContainer.encode(organization, forKey: .organization)
        }
        if let organizationalUnit = self.organizationalUnit {
            try encodeContainer.encode(organizationalUnit, forKey: .organizationalUnit)
        }
        if let pseudonym = self.pseudonym {
            try encodeContainer.encode(pseudonym, forKey: .pseudonym)
        }
        if let serialNumber = self.serialNumber {
            try encodeContainer.encode(serialNumber, forKey: .serialNumber)
        }
        if let state = self.state {
            try encodeContainer.encode(state, forKey: .state)
        }
        if let surname = self.surname {
            try encodeContainer.encode(surname, forKey: .surname)
        }
        if let title = self.title {
            try encodeContainer.encode(title, forKey: .title)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let countryDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .country)
        country = countryDecoded
        let organizationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .organization)
        organization = organizationDecoded
        let organizationalUnitDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .organizationalUnit)
        organizationalUnit = organizationalUnitDecoded
        let distinguishedNameQualifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .distinguishedNameQualifier)
        distinguishedNameQualifier = distinguishedNameQualifierDecoded
        let stateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .state)
        state = stateDecoded
        let commonNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .commonName)
        commonName = commonNameDecoded
        let serialNumberDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serialNumber)
        serialNumber = serialNumberDecoded
        let localityDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .locality)
        locality = localityDecoded
        let titleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .title)
        title = titleDecoded
        let surnameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .surname)
        surname = surnameDecoded
        let givenNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .givenName)
        givenName = givenNameDecoded
        let initialsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .initials)
        initials = initialsDecoded
        let pseudonymDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pseudonym)
        pseudonym = pseudonymDecoded
        let generationQualifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .generationQualifier)
        generationQualifier = generationQualifierDecoded
        let customAttributesContainer = try containerValues.decodeIfPresent([AcmPcaClientTypes.CustomAttribute?].self, forKey: .customAttributes)
        var customAttributesDecoded0:[AcmPcaClientTypes.CustomAttribute]? = nil
        if let customAttributesContainer = customAttributesContainer {
            customAttributesDecoded0 = [AcmPcaClientTypes.CustomAttribute]()
            for structure0 in customAttributesContainer {
                if let structure0 = structure0 {
                    customAttributesDecoded0?.append(structure0)
                }
            }
        }
        customAttributes = customAttributesDecoded0
    }
}
