// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension AcmPcaClientTypes {
    public enum ExtendedKeyUsageType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case certificateTransparency
        case clientAuth
        case codeSigning
        case documentSigning
        case emailProtection
        case ocspSigning
        case serverAuth
        case smartCardLogin
        case timeStamping
        case sdkUnknown(Swift.String)

        public static var allCases: [ExtendedKeyUsageType] {
            return [
                .certificateTransparency,
                .clientAuth,
                .codeSigning,
                .documentSigning,
                .emailProtection,
                .ocspSigning,
                .serverAuth,
                .smartCardLogin,
                .timeStamping,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .certificateTransparency: return "CERTIFICATE_TRANSPARENCY"
            case .clientAuth: return "CLIENT_AUTH"
            case .codeSigning: return "CODE_SIGNING"
            case .documentSigning: return "DOCUMENT_SIGNING"
            case .emailProtection: return "EMAIL_PROTECTION"
            case .ocspSigning: return "OCSP_SIGNING"
            case .serverAuth: return "SERVER_AUTH"
            case .smartCardLogin: return "SMART_CARD_LOGIN"
            case .timeStamping: return "TIME_STAMPING"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ExtendedKeyUsageType(rawValue: rawValue) ?? ExtendedKeyUsageType.sdkUnknown(rawValue)
        }
    }
}
