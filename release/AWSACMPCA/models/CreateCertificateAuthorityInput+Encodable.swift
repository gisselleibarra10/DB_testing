// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CreateCertificateAuthorityInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case certificateAuthorityConfiguration = "CertificateAuthorityConfiguration"
        case certificateAuthorityType = "CertificateAuthorityType"
        case idempotencyToken = "IdempotencyToken"
        case keyStorageSecurityStandard = "KeyStorageSecurityStandard"
        case revocationConfiguration = "RevocationConfiguration"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let certificateAuthorityConfiguration = self.certificateAuthorityConfiguration {
            try encodeContainer.encode(certificateAuthorityConfiguration, forKey: .certificateAuthorityConfiguration)
        }
        if let certificateAuthorityType = self.certificateAuthorityType {
            try encodeContainer.encode(certificateAuthorityType.rawValue, forKey: .certificateAuthorityType)
        }
        if let idempotencyToken = self.idempotencyToken {
            try encodeContainer.encode(idempotencyToken, forKey: .idempotencyToken)
        }
        if let keyStorageSecurityStandard = self.keyStorageSecurityStandard {
            try encodeContainer.encode(keyStorageSecurityStandard.rawValue, forKey: .keyStorageSecurityStandard)
        }
        if let revocationConfiguration = self.revocationConfiguration {
            try encodeContainer.encode(revocationConfiguration, forKey: .revocationConfiguration)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }
}
