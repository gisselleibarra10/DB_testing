// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreatePermissionInputBody: Swift.Equatable {
    let certificateAuthorityArn: Swift.String?
    let principal: Swift.String?
    let sourceAccount: Swift.String?
    let actions: [AcmPcaClientTypes.ActionType]?
}

extension CreatePermissionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case actions = "Actions"
        case certificateAuthorityArn = "CertificateAuthorityArn"
        case principal = "Principal"
        case sourceAccount = "SourceAccount"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let certificateAuthorityArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .certificateAuthorityArn)
        certificateAuthorityArn = certificateAuthorityArnDecoded
        let principalDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .principal)
        principal = principalDecoded
        let sourceAccountDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceAccount)
        sourceAccount = sourceAccountDecoded
        let actionsContainer = try containerValues.decodeIfPresent([AcmPcaClientTypes.ActionType?].self, forKey: .actions)
        var actionsDecoded0:[AcmPcaClientTypes.ActionType]? = nil
        if let actionsContainer = actionsContainer {
            actionsDecoded0 = [AcmPcaClientTypes.ActionType]()
            for string0 in actionsContainer {
                if let string0 = string0 {
                    actionsDecoded0?.append(string0)
                }
            }
        }
        actions = actionsDecoded0
    }
}
