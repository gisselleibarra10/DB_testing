// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension AcmPcaClientTypes {
    /// Defines one or more purposes for which the key contained in the certificate can be used. Default value for each option is false.
    public struct KeyUsage: Swift.Equatable {
        /// Key can be used to sign CRLs.
        public var cRLSign: Swift.Bool
        /// Key can be used to decipher data.
        public var dataEncipherment: Swift.Bool
        /// Key can be used only to decipher data.
        public var decipherOnly: Swift.Bool
        /// Key can be used for digital signing.
        public var digitalSignature: Swift.Bool
        /// Key can be used only to encipher data.
        public var encipherOnly: Swift.Bool
        /// Key can be used in a key-agreement protocol.
        public var keyAgreement: Swift.Bool
        /// Key can be used to sign certificates.
        public var keyCertSign: Swift.Bool
        /// Key can be used to encipher data.
        public var keyEncipherment: Swift.Bool
        /// Key can be used for non-repudiation.
        public var nonRepudiation: Swift.Bool

        public init (
            cRLSign: Swift.Bool = false,
            dataEncipherment: Swift.Bool = false,
            decipherOnly: Swift.Bool = false,
            digitalSignature: Swift.Bool = false,
            encipherOnly: Swift.Bool = false,
            keyAgreement: Swift.Bool = false,
            keyCertSign: Swift.Bool = false,
            keyEncipherment: Swift.Bool = false,
            nonRepudiation: Swift.Bool = false
        )
        {
            self.cRLSign = cRLSign
            self.dataEncipherment = dataEncipherment
            self.decipherOnly = decipherOnly
            self.digitalSignature = digitalSignature
            self.encipherOnly = encipherOnly
            self.keyAgreement = keyAgreement
            self.keyCertSign = keyCertSign
            self.keyEncipherment = keyEncipherment
            self.nonRepudiation = nonRepudiation
        }
    }

}
