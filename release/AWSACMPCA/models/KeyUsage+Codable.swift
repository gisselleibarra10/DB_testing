// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AcmPcaClientTypes.KeyUsage: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cRLSign = "CRLSign"
        case dataEncipherment = "DataEncipherment"
        case decipherOnly = "DecipherOnly"
        case digitalSignature = "DigitalSignature"
        case encipherOnly = "EncipherOnly"
        case keyAgreement = "KeyAgreement"
        case keyCertSign = "KeyCertSign"
        case keyEncipherment = "KeyEncipherment"
        case nonRepudiation = "NonRepudiation"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if cRLSign != false {
            try encodeContainer.encode(cRLSign, forKey: .cRLSign)
        }
        if dataEncipherment != false {
            try encodeContainer.encode(dataEncipherment, forKey: .dataEncipherment)
        }
        if decipherOnly != false {
            try encodeContainer.encode(decipherOnly, forKey: .decipherOnly)
        }
        if digitalSignature != false {
            try encodeContainer.encode(digitalSignature, forKey: .digitalSignature)
        }
        if encipherOnly != false {
            try encodeContainer.encode(encipherOnly, forKey: .encipherOnly)
        }
        if keyAgreement != false {
            try encodeContainer.encode(keyAgreement, forKey: .keyAgreement)
        }
        if keyCertSign != false {
            try encodeContainer.encode(keyCertSign, forKey: .keyCertSign)
        }
        if keyEncipherment != false {
            try encodeContainer.encode(keyEncipherment, forKey: .keyEncipherment)
        }
        if nonRepudiation != false {
            try encodeContainer.encode(nonRepudiation, forKey: .nonRepudiation)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let digitalSignatureDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .digitalSignature) ?? false
        digitalSignature = digitalSignatureDecoded
        let nonRepudiationDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .nonRepudiation) ?? false
        nonRepudiation = nonRepudiationDecoded
        let keyEnciphermentDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .keyEncipherment) ?? false
        keyEncipherment = keyEnciphermentDecoded
        let dataEnciphermentDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .dataEncipherment) ?? false
        dataEncipherment = dataEnciphermentDecoded
        let keyAgreementDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .keyAgreement) ?? false
        keyAgreement = keyAgreementDecoded
        let keyCertSignDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .keyCertSign) ?? false
        keyCertSign = keyCertSignDecoded
        let cRLSignDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .cRLSign) ?? false
        cRLSign = cRLSignDecoded
        let encipherOnlyDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .encipherOnly) ?? false
        encipherOnly = encipherOnlyDecoded
        let decipherOnlyDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .decipherOnly) ?? false
        decipherOnly = decipherOnlyDecoded
    }
}
