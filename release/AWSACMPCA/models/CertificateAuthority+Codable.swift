// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AcmPcaClientTypes.CertificateAuthority: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "Arn"
        case certificateAuthorityConfiguration = "CertificateAuthorityConfiguration"
        case createdAt = "CreatedAt"
        case failureReason = "FailureReason"
        case keyStorageSecurityStandard = "KeyStorageSecurityStandard"
        case lastStateChangeAt = "LastStateChangeAt"
        case notAfter = "NotAfter"
        case notBefore = "NotBefore"
        case ownerAccount = "OwnerAccount"
        case restorableUntil = "RestorableUntil"
        case revocationConfiguration = "RevocationConfiguration"
        case serial = "Serial"
        case status = "Status"
        case type = "Type"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = self.arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let certificateAuthorityConfiguration = self.certificateAuthorityConfiguration {
            try encodeContainer.encode(certificateAuthorityConfiguration, forKey: .certificateAuthorityConfiguration)
        }
        if let createdAt = self.createdAt {
            try encodeContainer.encode(createdAt.timeIntervalSince1970, forKey: .createdAt)
        }
        if let failureReason = self.failureReason {
            try encodeContainer.encode(failureReason.rawValue, forKey: .failureReason)
        }
        if let keyStorageSecurityStandard = self.keyStorageSecurityStandard {
            try encodeContainer.encode(keyStorageSecurityStandard.rawValue, forKey: .keyStorageSecurityStandard)
        }
        if let lastStateChangeAt = self.lastStateChangeAt {
            try encodeContainer.encode(lastStateChangeAt.timeIntervalSince1970, forKey: .lastStateChangeAt)
        }
        if let notAfter = self.notAfter {
            try encodeContainer.encode(notAfter.timeIntervalSince1970, forKey: .notAfter)
        }
        if let notBefore = self.notBefore {
            try encodeContainer.encode(notBefore.timeIntervalSince1970, forKey: .notBefore)
        }
        if let ownerAccount = self.ownerAccount {
            try encodeContainer.encode(ownerAccount, forKey: .ownerAccount)
        }
        if let restorableUntil = self.restorableUntil {
            try encodeContainer.encode(restorableUntil.timeIntervalSince1970, forKey: .restorableUntil)
        }
        if let revocationConfiguration = self.revocationConfiguration {
            try encodeContainer.encode(revocationConfiguration, forKey: .revocationConfiguration)
        }
        if let serial = self.serial {
            try encodeContainer.encode(serial, forKey: .serial)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let type = self.type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let ownerAccountDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ownerAccount)
        ownerAccount = ownerAccountDecoded
        let createdAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdAt)
        createdAt = createdAtDecoded
        let lastStateChangeAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastStateChangeAt)
        lastStateChangeAt = lastStateChangeAtDecoded
        let typeDecoded = try containerValues.decodeIfPresent(AcmPcaClientTypes.CertificateAuthorityType.self, forKey: .type)
        type = typeDecoded
        let serialDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serial)
        serial = serialDecoded
        let statusDecoded = try containerValues.decodeIfPresent(AcmPcaClientTypes.CertificateAuthorityStatus.self, forKey: .status)
        status = statusDecoded
        let notBeforeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .notBefore)
        notBefore = notBeforeDecoded
        let notAfterDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .notAfter)
        notAfter = notAfterDecoded
        let failureReasonDecoded = try containerValues.decodeIfPresent(AcmPcaClientTypes.FailureReason.self, forKey: .failureReason)
        failureReason = failureReasonDecoded
        let certificateAuthorityConfigurationDecoded = try containerValues.decodeIfPresent(AcmPcaClientTypes.CertificateAuthorityConfiguration.self, forKey: .certificateAuthorityConfiguration)
        certificateAuthorityConfiguration = certificateAuthorityConfigurationDecoded
        let revocationConfigurationDecoded = try containerValues.decodeIfPresent(AcmPcaClientTypes.RevocationConfiguration.self, forKey: .revocationConfiguration)
        revocationConfiguration = revocationConfigurationDecoded
        let restorableUntilDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .restorableUntil)
        restorableUntil = restorableUntilDecoded
        let keyStorageSecurityStandardDecoded = try containerValues.decodeIfPresent(AcmPcaClientTypes.KeyStorageSecurityStandard.self, forKey: .keyStorageSecurityStandard)
        keyStorageSecurityStandard = keyStorageSecurityStandardDecoded
    }
}
