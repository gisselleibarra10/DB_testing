// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetTemporaryGlueTableCredentialsInputBody: Swift.Equatable {
    let tableArn: Swift.String?
    let permissions: [LakeFormationClientTypes.Permission]?
    let durationSeconds: Swift.Int?
    let auditContext: LakeFormationClientTypes.AuditContext?
    let supportedPermissionTypes: [LakeFormationClientTypes.PermissionType]?
}

extension GetTemporaryGlueTableCredentialsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case auditContext = "AuditContext"
        case durationSeconds = "DurationSeconds"
        case permissions = "Permissions"
        case supportedPermissionTypes = "SupportedPermissionTypes"
        case tableArn = "TableArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tableArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tableArn)
        tableArn = tableArnDecoded
        let permissionsContainer = try containerValues.decodeIfPresent([LakeFormationClientTypes.Permission?].self, forKey: .permissions)
        var permissionsDecoded0:[LakeFormationClientTypes.Permission]? = nil
        if let permissionsContainer = permissionsContainer {
            permissionsDecoded0 = [LakeFormationClientTypes.Permission]()
            for string0 in permissionsContainer {
                if let string0 = string0 {
                    permissionsDecoded0?.append(string0)
                }
            }
        }
        permissions = permissionsDecoded0
        let durationSecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .durationSeconds)
        durationSeconds = durationSecondsDecoded
        let auditContextDecoded = try containerValues.decodeIfPresent(LakeFormationClientTypes.AuditContext.self, forKey: .auditContext)
        auditContext = auditContextDecoded
        let supportedPermissionTypesContainer = try containerValues.decodeIfPresent([LakeFormationClientTypes.PermissionType?].self, forKey: .supportedPermissionTypes)
        var supportedPermissionTypesDecoded0:[LakeFormationClientTypes.PermissionType]? = nil
        if let supportedPermissionTypesContainer = supportedPermissionTypesContainer {
            supportedPermissionTypesDecoded0 = [LakeFormationClientTypes.PermissionType]()
            for string0 in supportedPermissionTypesContainer {
                if let string0 = string0 {
                    supportedPermissionTypesDecoded0?.append(string0)
                }
            }
        }
        supportedPermissionTypes = supportedPermissionTypesDecoded0
    }
}
