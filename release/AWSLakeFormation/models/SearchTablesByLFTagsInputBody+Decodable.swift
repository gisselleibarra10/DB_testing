// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct SearchTablesByLFTagsInputBody: Swift.Equatable {
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
    let catalogId: Swift.String?
    let expression: [LakeFormationClientTypes.LFTag]?
}

extension SearchTablesByLFTagsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case catalogId = "CatalogId"
        case expression = "Expression"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let catalogIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .catalogId)
        catalogId = catalogIdDecoded
        let expressionContainer = try containerValues.decodeIfPresent([LakeFormationClientTypes.LFTag?].self, forKey: .expression)
        var expressionDecoded0:[LakeFormationClientTypes.LFTag]? = nil
        if let expressionContainer = expressionContainer {
            expressionDecoded0 = [LakeFormationClientTypes.LFTag]()
            for structure0 in expressionContainer {
                if let structure0 = structure0 {
                    expressionDecoded0?.append(structure0)
                }
            }
        }
        expression = expressionDecoded0
    }
}
