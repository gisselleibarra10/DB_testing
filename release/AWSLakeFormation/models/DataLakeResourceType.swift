// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension LakeFormationClientTypes {
    public enum DataLakeResourceType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case catalog
        case database
        case dataLocation
        case lfTag
        case lfTagPolicy
        case lfTagPolicyDatabase
        case lfTagPolicyTable
        case table
        case sdkUnknown(Swift.String)

        public static var allCases: [DataLakeResourceType] {
            return [
                .catalog,
                .database,
                .dataLocation,
                .lfTag,
                .lfTagPolicy,
                .lfTagPolicyDatabase,
                .lfTagPolicyTable,
                .table,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .catalog: return "CATALOG"
            case .database: return "DATABASE"
            case .dataLocation: return "DATA_LOCATION"
            case .lfTag: return "LF_TAG"
            case .lfTagPolicy: return "LF_TAG_POLICY"
            case .lfTagPolicyDatabase: return "LF_TAG_POLICY_DATABASE"
            case .lfTagPolicyTable: return "LF_TAG_POLICY_TABLE"
            case .table: return "TABLE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DataLakeResourceType(rawValue: rawValue) ?? DataLakeResourceType.sdkUnknown(rawValue)
        }
    }
}
