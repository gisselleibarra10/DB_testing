// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension GetTemporaryGluePartitionCredentialsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case auditContext = "AuditContext"
        case durationSeconds = "DurationSeconds"
        case partition = "Partition"
        case permissions = "Permissions"
        case supportedPermissionTypes = "SupportedPermissionTypes"
        case tableArn = "TableArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let auditContext = self.auditContext {
            try encodeContainer.encode(auditContext, forKey: .auditContext)
        }
        if let durationSeconds = self.durationSeconds {
            try encodeContainer.encode(durationSeconds, forKey: .durationSeconds)
        }
        if let partition = self.partition {
            try encodeContainer.encode(partition, forKey: .partition)
        }
        if let permissions = permissions {
            var permissionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .permissions)
            for permissionlist0 in permissions {
                try permissionsContainer.encode(permissionlist0.rawValue)
            }
        }
        if let supportedPermissionTypes = supportedPermissionTypes {
            var supportedPermissionTypesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .supportedPermissionTypes)
            for permissiontypelist0 in supportedPermissionTypes {
                try supportedPermissionTypesContainer.encode(permissiontypelist0.rawValue)
            }
        }
        if let tableArn = self.tableArn {
            try encodeContainer.encode(tableArn, forKey: .tableArn)
        }
    }
}
