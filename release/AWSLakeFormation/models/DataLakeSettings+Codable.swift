// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension LakeFormationClientTypes.DataLakeSettings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case allowExternalDataFiltering = "AllowExternalDataFiltering"
        case authorizedSessionTagValueList = "AuthorizedSessionTagValueList"
        case createDatabaseDefaultPermissions = "CreateDatabaseDefaultPermissions"
        case createTableDefaultPermissions = "CreateTableDefaultPermissions"
        case dataLakeAdmins = "DataLakeAdmins"
        case externalDataFilteringAllowList = "ExternalDataFilteringAllowList"
        case trustedResourceOwners = "TrustedResourceOwners"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let allowExternalDataFiltering = self.allowExternalDataFiltering {
            try encodeContainer.encode(allowExternalDataFiltering, forKey: .allowExternalDataFiltering)
        }
        if let authorizedSessionTagValueList = authorizedSessionTagValueList {
            var authorizedSessionTagValueListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .authorizedSessionTagValueList)
            for authorizedsessiontagvaluelist0 in authorizedSessionTagValueList {
                try authorizedSessionTagValueListContainer.encode(authorizedsessiontagvaluelist0)
            }
        }
        if let createDatabaseDefaultPermissions = createDatabaseDefaultPermissions {
            var createDatabaseDefaultPermissionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .createDatabaseDefaultPermissions)
            for principalpermissionslist0 in createDatabaseDefaultPermissions {
                try createDatabaseDefaultPermissionsContainer.encode(principalpermissionslist0)
            }
        }
        if let createTableDefaultPermissions = createTableDefaultPermissions {
            var createTableDefaultPermissionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .createTableDefaultPermissions)
            for principalpermissionslist0 in createTableDefaultPermissions {
                try createTableDefaultPermissionsContainer.encode(principalpermissionslist0)
            }
        }
        if let dataLakeAdmins = dataLakeAdmins {
            var dataLakeAdminsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .dataLakeAdmins)
            for datalakeprincipallist0 in dataLakeAdmins {
                try dataLakeAdminsContainer.encode(datalakeprincipallist0)
            }
        }
        if let externalDataFilteringAllowList = externalDataFilteringAllowList {
            var externalDataFilteringAllowListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .externalDataFilteringAllowList)
            for datalakeprincipallist0 in externalDataFilteringAllowList {
                try externalDataFilteringAllowListContainer.encode(datalakeprincipallist0)
            }
        }
        if let trustedResourceOwners = trustedResourceOwners {
            var trustedResourceOwnersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .trustedResourceOwners)
            for trustedresourceowners0 in trustedResourceOwners {
                try trustedResourceOwnersContainer.encode(trustedresourceowners0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dataLakeAdminsContainer = try containerValues.decodeIfPresent([LakeFormationClientTypes.DataLakePrincipal?].self, forKey: .dataLakeAdmins)
        var dataLakeAdminsDecoded0:[LakeFormationClientTypes.DataLakePrincipal]? = nil
        if let dataLakeAdminsContainer = dataLakeAdminsContainer {
            dataLakeAdminsDecoded0 = [LakeFormationClientTypes.DataLakePrincipal]()
            for structure0 in dataLakeAdminsContainer {
                if let structure0 = structure0 {
                    dataLakeAdminsDecoded0?.append(structure0)
                }
            }
        }
        dataLakeAdmins = dataLakeAdminsDecoded0
        let createDatabaseDefaultPermissionsContainer = try containerValues.decodeIfPresent([LakeFormationClientTypes.PrincipalPermissions?].self, forKey: .createDatabaseDefaultPermissions)
        var createDatabaseDefaultPermissionsDecoded0:[LakeFormationClientTypes.PrincipalPermissions]? = nil
        if let createDatabaseDefaultPermissionsContainer = createDatabaseDefaultPermissionsContainer {
            createDatabaseDefaultPermissionsDecoded0 = [LakeFormationClientTypes.PrincipalPermissions]()
            for structure0 in createDatabaseDefaultPermissionsContainer {
                if let structure0 = structure0 {
                    createDatabaseDefaultPermissionsDecoded0?.append(structure0)
                }
            }
        }
        createDatabaseDefaultPermissions = createDatabaseDefaultPermissionsDecoded0
        let createTableDefaultPermissionsContainer = try containerValues.decodeIfPresent([LakeFormationClientTypes.PrincipalPermissions?].self, forKey: .createTableDefaultPermissions)
        var createTableDefaultPermissionsDecoded0:[LakeFormationClientTypes.PrincipalPermissions]? = nil
        if let createTableDefaultPermissionsContainer = createTableDefaultPermissionsContainer {
            createTableDefaultPermissionsDecoded0 = [LakeFormationClientTypes.PrincipalPermissions]()
            for structure0 in createTableDefaultPermissionsContainer {
                if let structure0 = structure0 {
                    createTableDefaultPermissionsDecoded0?.append(structure0)
                }
            }
        }
        createTableDefaultPermissions = createTableDefaultPermissionsDecoded0
        let trustedResourceOwnersContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .trustedResourceOwners)
        var trustedResourceOwnersDecoded0:[Swift.String]? = nil
        if let trustedResourceOwnersContainer = trustedResourceOwnersContainer {
            trustedResourceOwnersDecoded0 = [Swift.String]()
            for string0 in trustedResourceOwnersContainer {
                if let string0 = string0 {
                    trustedResourceOwnersDecoded0?.append(string0)
                }
            }
        }
        trustedResourceOwners = trustedResourceOwnersDecoded0
        let allowExternalDataFilteringDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .allowExternalDataFiltering)
        allowExternalDataFiltering = allowExternalDataFilteringDecoded
        let externalDataFilteringAllowListContainer = try containerValues.decodeIfPresent([LakeFormationClientTypes.DataLakePrincipal?].self, forKey: .externalDataFilteringAllowList)
        var externalDataFilteringAllowListDecoded0:[LakeFormationClientTypes.DataLakePrincipal]? = nil
        if let externalDataFilteringAllowListContainer = externalDataFilteringAllowListContainer {
            externalDataFilteringAllowListDecoded0 = [LakeFormationClientTypes.DataLakePrincipal]()
            for structure0 in externalDataFilteringAllowListContainer {
                if let structure0 = structure0 {
                    externalDataFilteringAllowListDecoded0?.append(structure0)
                }
            }
        }
        externalDataFilteringAllowList = externalDataFilteringAllowListDecoded0
        let authorizedSessionTagValueListContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .authorizedSessionTagValueList)
        var authorizedSessionTagValueListDecoded0:[Swift.String]? = nil
        if let authorizedSessionTagValueListContainer = authorizedSessionTagValueListContainer {
            authorizedSessionTagValueListDecoded0 = [Swift.String]()
            for string0 in authorizedSessionTagValueListContainer {
                if let string0 = string0 {
                    authorizedSessionTagValueListDecoded0?.append(string0)
                }
            }
        }
        authorizedSessionTagValueList = authorizedSessionTagValueListDecoded0
    }
}
