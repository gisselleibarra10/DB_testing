// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension LakeFormationClientTypes.QueryPlanningContext: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case catalogId = "CatalogId"
        case databaseName = "DatabaseName"
        case queryAsOfTime = "QueryAsOfTime"
        case queryParameters = "QueryParameters"
        case transactionId = "TransactionId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let catalogId = self.catalogId {
            try encodeContainer.encode(catalogId, forKey: .catalogId)
        }
        if let databaseName = self.databaseName {
            try encodeContainer.encode(databaseName, forKey: .databaseName)
        }
        if let queryAsOfTime = self.queryAsOfTime {
            try encodeContainer.encode(queryAsOfTime.timeIntervalSince1970, forKey: .queryAsOfTime)
        }
        if let queryParameters = queryParameters {
            var queryParametersContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .queryParameters)
            for (dictKey0, queryparametermap0) in queryParameters {
                try queryParametersContainer.encode(queryparametermap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let transactionId = self.transactionId {
            try encodeContainer.encode(transactionId, forKey: .transactionId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let catalogIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .catalogId)
        catalogId = catalogIdDecoded
        let databaseNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .databaseName)
        databaseName = databaseNameDecoded
        let queryAsOfTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .queryAsOfTime)
        queryAsOfTime = queryAsOfTimeDecoded
        let queryParametersContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .queryParameters)
        var queryParametersDecoded0: [Swift.String:Swift.String]? = nil
        if let queryParametersContainer = queryParametersContainer {
            queryParametersDecoded0 = [Swift.String:Swift.String]()
            for (key0, string0) in queryParametersContainer {
                if let string0 = string0 {
                    queryParametersDecoded0?[key0] = string0
                }
            }
        }
        queryParameters = queryParametersDecoded0
        let transactionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .transactionId)
        transactionId = transactionIdDecoded
    }
}
