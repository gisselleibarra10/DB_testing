// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct RevokePermissionsInputBody: Swift.Equatable {
    let catalogId: Swift.String?
    let principal: LakeFormationClientTypes.DataLakePrincipal?
    let resource: LakeFormationClientTypes.Resource?
    let permissions: [LakeFormationClientTypes.Permission]?
    let permissionsWithGrantOption: [LakeFormationClientTypes.Permission]?
}

extension RevokePermissionsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case catalogId = "CatalogId"
        case permissions = "Permissions"
        case permissionsWithGrantOption = "PermissionsWithGrantOption"
        case principal = "Principal"
        case resource = "Resource"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let catalogIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .catalogId)
        catalogId = catalogIdDecoded
        let principalDecoded = try containerValues.decodeIfPresent(LakeFormationClientTypes.DataLakePrincipal.self, forKey: .principal)
        principal = principalDecoded
        let resourceDecoded = try containerValues.decodeIfPresent(LakeFormationClientTypes.Resource.self, forKey: .resource)
        resource = resourceDecoded
        let permissionsContainer = try containerValues.decodeIfPresent([LakeFormationClientTypes.Permission?].self, forKey: .permissions)
        var permissionsDecoded0:[LakeFormationClientTypes.Permission]? = nil
        if let permissionsContainer = permissionsContainer {
            permissionsDecoded0 = [LakeFormationClientTypes.Permission]()
            for string0 in permissionsContainer {
                if let string0 = string0 {
                    permissionsDecoded0?.append(string0)
                }
            }
        }
        permissions = permissionsDecoded0
        let permissionsWithGrantOptionContainer = try containerValues.decodeIfPresent([LakeFormationClientTypes.Permission?].self, forKey: .permissionsWithGrantOption)
        var permissionsWithGrantOptionDecoded0:[LakeFormationClientTypes.Permission]? = nil
        if let permissionsWithGrantOptionContainer = permissionsWithGrantOptionContainer {
            permissionsWithGrantOptionDecoded0 = [LakeFormationClientTypes.Permission]()
            for string0 in permissionsWithGrantOptionContainer {
                if let string0 = string0 {
                    permissionsWithGrantOptionDecoded0?.append(string0)
                }
            }
        }
        permissionsWithGrantOption = permissionsWithGrantOptionDecoded0
    }
}
