// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetWorkUnitsOutputResponseBody: Swift.Equatable {
    let nextToken: Swift.String?
    let queryId: Swift.String?
    let workUnitRanges: [LakeFormationClientTypes.WorkUnitRange]?
}

extension GetWorkUnitsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case queryId = "QueryId"
        case workUnitRanges = "WorkUnitRanges"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let queryIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .queryId)
        queryId = queryIdDecoded
        let workUnitRangesContainer = try containerValues.decodeIfPresent([LakeFormationClientTypes.WorkUnitRange?].self, forKey: .workUnitRanges)
        var workUnitRangesDecoded0:[LakeFormationClientTypes.WorkUnitRange]? = nil
        if let workUnitRangesContainer = workUnitRangesContainer {
            workUnitRangesDecoded0 = [LakeFormationClientTypes.WorkUnitRange]()
            for structure0 in workUnitRangesContainer {
                if let structure0 = structure0 {
                    workUnitRangesDecoded0?.append(structure0)
                }
            }
        }
        workUnitRanges = workUnitRangesDecoded0
    }
}
