// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension LakeFormationClientTypes {
    /// A structure for the resource.
    public struct Resource: Swift.Equatable {
        /// The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment.
        public var catalog: LakeFormationClientTypes.CatalogResource?
        /// A data cell filter.
        public var dataCellsFilter: LakeFormationClientTypes.DataCellsFilterResource?
        /// The location of an Amazon S3 path where permissions are granted or revoked.
        public var dataLocation: LakeFormationClientTypes.DataLocationResource?
        /// The database for the resource. Unique to the Data Catalog. A database is a set of associated table definitions organized into a logical group. You can Grant and Revoke database permissions to a principal.
        public var database: LakeFormationClientTypes.DatabaseResource?
        /// The LF-tag key and values attached to a resource.
        public var lFTag: LakeFormationClientTypes.LFTagKeyResource?
        /// A list of LF-tag conditions that define a resource's LF-tag policy.
        public var lFTagPolicy: LakeFormationClientTypes.LFTagPolicyResource?
        /// The table for the resource. A table is a metadata definition that represents your data. You can Grant and Revoke table privileges to a principal.
        public var table: LakeFormationClientTypes.TableResource?
        /// The table with columns for the resource. A principal with permissions to this resource can select metadata from the columns of a table in the Data Catalog and the underlying data in Amazon S3.
        public var tableWithColumns: LakeFormationClientTypes.TableWithColumnsResource?

        public init (
            catalog: LakeFormationClientTypes.CatalogResource? = nil,
            dataCellsFilter: LakeFormationClientTypes.DataCellsFilterResource? = nil,
            dataLocation: LakeFormationClientTypes.DataLocationResource? = nil,
            database: LakeFormationClientTypes.DatabaseResource? = nil,
            lFTag: LakeFormationClientTypes.LFTagKeyResource? = nil,
            lFTagPolicy: LakeFormationClientTypes.LFTagPolicyResource? = nil,
            table: LakeFormationClientTypes.TableResource? = nil,
            tableWithColumns: LakeFormationClientTypes.TableWithColumnsResource? = nil
        )
        {
            self.catalog = catalog
            self.dataCellsFilter = dataCellsFilter
            self.dataLocation = dataLocation
            self.database = database
            self.lFTag = lFTag
            self.lFTagPolicy = lFTagPolicy
            self.table = table
            self.tableWithColumns = tableWithColumns
        }
    }

}
