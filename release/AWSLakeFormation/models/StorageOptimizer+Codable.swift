// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension LakeFormationClientTypes.StorageOptimizer: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case config = "Config"
        case errorMessage = "ErrorMessage"
        case lastRunDetails = "LastRunDetails"
        case storageOptimizerType = "StorageOptimizerType"
        case warnings = "Warnings"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let config = config {
            var configContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .config)
            for (dictKey0, storageoptimizerconfig0) in config {
                try configContainer.encode(storageoptimizerconfig0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let errorMessage = self.errorMessage {
            try encodeContainer.encode(errorMessage, forKey: .errorMessage)
        }
        if let lastRunDetails = self.lastRunDetails {
            try encodeContainer.encode(lastRunDetails, forKey: .lastRunDetails)
        }
        if let storageOptimizerType = self.storageOptimizerType {
            try encodeContainer.encode(storageOptimizerType.rawValue, forKey: .storageOptimizerType)
        }
        if let warnings = self.warnings {
            try encodeContainer.encode(warnings, forKey: .warnings)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let storageOptimizerTypeDecoded = try containerValues.decodeIfPresent(LakeFormationClientTypes.OptimizerType.self, forKey: .storageOptimizerType)
        storageOptimizerType = storageOptimizerTypeDecoded
        let configContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .config)
        var configDecoded0: [Swift.String:Swift.String]? = nil
        if let configContainer = configContainer {
            configDecoded0 = [Swift.String:Swift.String]()
            for (key0, storageoptimizerconfigvalue0) in configContainer {
                if let storageoptimizerconfigvalue0 = storageoptimizerconfigvalue0 {
                    configDecoded0?[key0] = storageoptimizerconfigvalue0
                }
            }
        }
        config = configDecoded0
        let errorMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .errorMessage)
        errorMessage = errorMessageDecoded
        let warningsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .warnings)
        warnings = warningsDecoded
        let lastRunDetailsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastRunDetails)
        lastRunDetails = lastRunDetailsDecoded
    }
}
