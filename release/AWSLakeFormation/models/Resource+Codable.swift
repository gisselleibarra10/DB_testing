// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension LakeFormationClientTypes.Resource: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case catalog = "Catalog"
        case dataCellsFilter = "DataCellsFilter"
        case dataLocation = "DataLocation"
        case database = "Database"
        case lFTag = "LFTag"
        case lFTagPolicy = "LFTagPolicy"
        case table = "Table"
        case tableWithColumns = "TableWithColumns"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let catalog = self.catalog {
            try encodeContainer.encode(catalog, forKey: .catalog)
        }
        if let dataCellsFilter = self.dataCellsFilter {
            try encodeContainer.encode(dataCellsFilter, forKey: .dataCellsFilter)
        }
        if let dataLocation = self.dataLocation {
            try encodeContainer.encode(dataLocation, forKey: .dataLocation)
        }
        if let database = self.database {
            try encodeContainer.encode(database, forKey: .database)
        }
        if let lFTag = self.lFTag {
            try encodeContainer.encode(lFTag, forKey: .lFTag)
        }
        if let lFTagPolicy = self.lFTagPolicy {
            try encodeContainer.encode(lFTagPolicy, forKey: .lFTagPolicy)
        }
        if let table = self.table {
            try encodeContainer.encode(table, forKey: .table)
        }
        if let tableWithColumns = self.tableWithColumns {
            try encodeContainer.encode(tableWithColumns, forKey: .tableWithColumns)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let catalogDecoded = try containerValues.decodeIfPresent(LakeFormationClientTypes.CatalogResource.self, forKey: .catalog)
        catalog = catalogDecoded
        let databaseDecoded = try containerValues.decodeIfPresent(LakeFormationClientTypes.DatabaseResource.self, forKey: .database)
        database = databaseDecoded
        let tableDecoded = try containerValues.decodeIfPresent(LakeFormationClientTypes.TableResource.self, forKey: .table)
        table = tableDecoded
        let tableWithColumnsDecoded = try containerValues.decodeIfPresent(LakeFormationClientTypes.TableWithColumnsResource.self, forKey: .tableWithColumns)
        tableWithColumns = tableWithColumnsDecoded
        let dataLocationDecoded = try containerValues.decodeIfPresent(LakeFormationClientTypes.DataLocationResource.self, forKey: .dataLocation)
        dataLocation = dataLocationDecoded
        let dataCellsFilterDecoded = try containerValues.decodeIfPresent(LakeFormationClientTypes.DataCellsFilterResource.self, forKey: .dataCellsFilter)
        dataCellsFilter = dataCellsFilterDecoded
        let lFTagDecoded = try containerValues.decodeIfPresent(LakeFormationClientTypes.LFTagKeyResource.self, forKey: .lFTag)
        lFTag = lFTagDecoded
        let lFTagPolicyDecoded = try containerValues.decodeIfPresent(LakeFormationClientTypes.LFTagPolicyResource.self, forKey: .lFTagPolicy)
        lFTagPolicy = lFTagPolicyDecoded
    }
}
