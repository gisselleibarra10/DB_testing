// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListDataCellsFilterOutputResponseBody: Swift.Equatable {
    let dataCellsFilters: [LakeFormationClientTypes.DataCellsFilter]?
    let nextToken: Swift.String?
}

extension ListDataCellsFilterOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dataCellsFilters = "DataCellsFilters"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dataCellsFiltersContainer = try containerValues.decodeIfPresent([LakeFormationClientTypes.DataCellsFilter?].self, forKey: .dataCellsFilters)
        var dataCellsFiltersDecoded0:[LakeFormationClientTypes.DataCellsFilter]? = nil
        if let dataCellsFiltersContainer = dataCellsFiltersContainer {
            dataCellsFiltersDecoded0 = [LakeFormationClientTypes.DataCellsFilter]()
            for structure0 in dataCellsFiltersContainer {
                if let structure0 = structure0 {
                    dataCellsFiltersDecoded0?.append(structure0)
                }
            }
        }
        dataCellsFilters = dataCellsFiltersDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
