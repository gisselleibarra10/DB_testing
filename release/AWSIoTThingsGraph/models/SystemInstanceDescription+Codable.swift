// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension IoTThingsGraphClientTypes.SystemInstanceDescription: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case definition
        case flowActionsRoleArn
        case metricsConfiguration
        case s3BucketName
        case summary
        case validatedDependencyRevisions
        case validatedNamespaceVersion
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let definition = self.definition {
            try encodeContainer.encode(definition, forKey: .definition)
        }
        if let flowActionsRoleArn = self.flowActionsRoleArn {
            try encodeContainer.encode(flowActionsRoleArn, forKey: .flowActionsRoleArn)
        }
        if let metricsConfiguration = self.metricsConfiguration {
            try encodeContainer.encode(metricsConfiguration, forKey: .metricsConfiguration)
        }
        if let s3BucketName = self.s3BucketName {
            try encodeContainer.encode(s3BucketName, forKey: .s3BucketName)
        }
        if let summary = self.summary {
            try encodeContainer.encode(summary, forKey: .summary)
        }
        if let validatedDependencyRevisions = validatedDependencyRevisions {
            var validatedDependencyRevisionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .validatedDependencyRevisions)
            for dependencyrevisions0 in validatedDependencyRevisions {
                try validatedDependencyRevisionsContainer.encode(dependencyrevisions0)
            }
        }
        if let validatedNamespaceVersion = self.validatedNamespaceVersion {
            try encodeContainer.encode(validatedNamespaceVersion, forKey: .validatedNamespaceVersion)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let summaryDecoded = try containerValues.decodeIfPresent(IoTThingsGraphClientTypes.SystemInstanceSummary.self, forKey: .summary)
        summary = summaryDecoded
        let definitionDecoded = try containerValues.decodeIfPresent(IoTThingsGraphClientTypes.DefinitionDocument.self, forKey: .definition)
        definition = definitionDecoded
        let s3BucketNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .s3BucketName)
        s3BucketName = s3BucketNameDecoded
        let metricsConfigurationDecoded = try containerValues.decodeIfPresent(IoTThingsGraphClientTypes.MetricsConfiguration.self, forKey: .metricsConfiguration)
        metricsConfiguration = metricsConfigurationDecoded
        let validatedNamespaceVersionDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .validatedNamespaceVersion)
        validatedNamespaceVersion = validatedNamespaceVersionDecoded
        let validatedDependencyRevisionsContainer = try containerValues.decodeIfPresent([IoTThingsGraphClientTypes.DependencyRevision?].self, forKey: .validatedDependencyRevisions)
        var validatedDependencyRevisionsDecoded0:[IoTThingsGraphClientTypes.DependencyRevision]? = nil
        if let validatedDependencyRevisionsContainer = validatedDependencyRevisionsContainer {
            validatedDependencyRevisionsDecoded0 = [IoTThingsGraphClientTypes.DependencyRevision]()
            for structure0 in validatedDependencyRevisionsContainer {
                if let structure0 = structure0 {
                    validatedDependencyRevisionsDecoded0?.append(structure0)
                }
            }
        }
        validatedDependencyRevisions = validatedDependencyRevisionsDecoded0
        let flowActionsRoleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .flowActionsRoleArn)
        flowActionsRoleArn = flowActionsRoleArnDecoded
    }
}
