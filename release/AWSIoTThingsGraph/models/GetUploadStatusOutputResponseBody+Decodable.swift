// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetUploadStatusOutputResponseBody: Swift.Equatable {
    let uploadId: Swift.String?
    let uploadStatus: IoTThingsGraphClientTypes.UploadStatus?
    let namespaceArn: Swift.String?
    let namespaceName: Swift.String?
    let namespaceVersion: Swift.Int?
    let failureReason: [Swift.String]?
    let createdDate: ClientRuntime.Date?
}

extension GetUploadStatusOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createdDate
        case failureReason
        case namespaceArn
        case namespaceName
        case namespaceVersion
        case uploadId
        case uploadStatus
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let uploadIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .uploadId)
        uploadId = uploadIdDecoded
        let uploadStatusDecoded = try containerValues.decodeIfPresent(IoTThingsGraphClientTypes.UploadStatus.self, forKey: .uploadStatus)
        uploadStatus = uploadStatusDecoded
        let namespaceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .namespaceArn)
        namespaceArn = namespaceArnDecoded
        let namespaceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .namespaceName)
        namespaceName = namespaceNameDecoded
        let namespaceVersionDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .namespaceVersion)
        namespaceVersion = namespaceVersionDecoded
        let failureReasonContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .failureReason)
        var failureReasonDecoded0:[Swift.String]? = nil
        if let failureReasonContainer = failureReasonContainer {
            failureReasonDecoded0 = [Swift.String]()
            for string0 in failureReasonContainer {
                if let string0 = string0 {
                    failureReasonDecoded0?.append(string0)
                }
            }
        }
        failureReason = failureReasonDecoded0
        let createdDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdDate)
        createdDate = createdDateDecoded
    }
}
