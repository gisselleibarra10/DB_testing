// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct SearchEntitiesInputBody: Swift.Equatable {
    let entityTypes: [IoTThingsGraphClientTypes.EntityType]?
    let filters: [IoTThingsGraphClientTypes.EntityFilter]?
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
    let namespaceVersion: Swift.Int?
}

extension SearchEntitiesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case entityTypes
        case filters
        case maxResults
        case namespaceVersion
        case nextToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let entityTypesContainer = try containerValues.decodeIfPresent([IoTThingsGraphClientTypes.EntityType?].self, forKey: .entityTypes)
        var entityTypesDecoded0:[IoTThingsGraphClientTypes.EntityType]? = nil
        if let entityTypesContainer = entityTypesContainer {
            entityTypesDecoded0 = [IoTThingsGraphClientTypes.EntityType]()
            for string0 in entityTypesContainer {
                if let string0 = string0 {
                    entityTypesDecoded0?.append(string0)
                }
            }
        }
        entityTypes = entityTypesDecoded0
        let filtersContainer = try containerValues.decodeIfPresent([IoTThingsGraphClientTypes.EntityFilter?].self, forKey: .filters)
        var filtersDecoded0:[IoTThingsGraphClientTypes.EntityFilter]? = nil
        if let filtersContainer = filtersContainer {
            filtersDecoded0 = [IoTThingsGraphClientTypes.EntityFilter]()
            for structure0 in filtersContainer {
                if let structure0 = structure0 {
                    filtersDecoded0?.append(structure0)
                }
            }
        }
        filters = filtersDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let namespaceVersionDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .namespaceVersion)
        namespaceVersion = namespaceVersionDecoded
    }
}
