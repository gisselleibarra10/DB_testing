// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension GlacierClientTypes.JobParameters: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case archiveId = "ArchiveId"
        case description = "Description"
        case format = "Format"
        case inventoryRetrievalParameters = "InventoryRetrievalParameters"
        case outputLocation = "OutputLocation"
        case retrievalByteRange = "RetrievalByteRange"
        case sNSTopic = "SNSTopic"
        case selectParameters = "SelectParameters"
        case tier = "Tier"
        case type = "Type"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let archiveId = self.archiveId {
            try encodeContainer.encode(archiveId, forKey: .archiveId)
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let format = self.format {
            try encodeContainer.encode(format, forKey: .format)
        }
        if let inventoryRetrievalParameters = self.inventoryRetrievalParameters {
            try encodeContainer.encode(inventoryRetrievalParameters, forKey: .inventoryRetrievalParameters)
        }
        if let outputLocation = self.outputLocation {
            try encodeContainer.encode(outputLocation, forKey: .outputLocation)
        }
        if let retrievalByteRange = self.retrievalByteRange {
            try encodeContainer.encode(retrievalByteRange, forKey: .retrievalByteRange)
        }
        if let sNSTopic = self.sNSTopic {
            try encodeContainer.encode(sNSTopic, forKey: .sNSTopic)
        }
        if let selectParameters = self.selectParameters {
            try encodeContainer.encode(selectParameters, forKey: .selectParameters)
        }
        if let tier = self.tier {
            try encodeContainer.encode(tier, forKey: .tier)
        }
        if let type = self.type {
            try encodeContainer.encode(type, forKey: .type)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let formatDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .format)
        format = formatDecoded
        let typeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .type)
        type = typeDecoded
        let archiveIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .archiveId)
        archiveId = archiveIdDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let sNSTopicDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sNSTopic)
        sNSTopic = sNSTopicDecoded
        let retrievalByteRangeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .retrievalByteRange)
        retrievalByteRange = retrievalByteRangeDecoded
        let tierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tier)
        tier = tierDecoded
        let inventoryRetrievalParametersDecoded = try containerValues.decodeIfPresent(GlacierClientTypes.InventoryRetrievalJobInput.self, forKey: .inventoryRetrievalParameters)
        inventoryRetrievalParameters = inventoryRetrievalParametersDecoded
        let selectParametersDecoded = try containerValues.decodeIfPresent(GlacierClientTypes.SelectParameters.self, forKey: .selectParameters)
        selectParameters = selectParametersDecoded
        let outputLocationDecoded = try containerValues.decodeIfPresent(GlacierClientTypes.OutputLocation.self, forKey: .outputLocation)
        outputLocation = outputLocationDecoded
    }
}
