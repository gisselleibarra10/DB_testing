// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension GlacierClientTypes.VaultNotificationConfig: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case events = "Events"
        case sNSTopic = "SNSTopic"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let events = events {
            var eventsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .events)
            for notificationeventlist0 in events {
                try eventsContainer.encode(notificationeventlist0)
            }
        }
        if let sNSTopic = self.sNSTopic {
            try encodeContainer.encode(sNSTopic, forKey: .sNSTopic)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sNSTopicDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sNSTopic)
        sNSTopic = sNSTopicDecoded
        let eventsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .events)
        var eventsDecoded0:[Swift.String]? = nil
        if let eventsContainer = eventsContainer {
            eventsDecoded0 = [Swift.String]()
            for string0 in eventsContainer {
                if let string0 = string0 {
                    eventsDecoded0?.append(string0)
                }
            }
        }
        events = eventsDecoded0
    }
}
