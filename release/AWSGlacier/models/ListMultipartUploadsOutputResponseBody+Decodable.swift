// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListMultipartUploadsOutputResponseBody: Swift.Equatable {
    let uploadsList: [GlacierClientTypes.UploadListElement]?
    let marker: Swift.String?
}

extension ListMultipartUploadsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case marker = "Marker"
        case uploadsList = "UploadsList"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let uploadsListContainer = try containerValues.decodeIfPresent([GlacierClientTypes.UploadListElement?].self, forKey: .uploadsList)
        var uploadsListDecoded0:[GlacierClientTypes.UploadListElement]? = nil
        if let uploadsListContainer = uploadsListContainer {
            uploadsListDecoded0 = [GlacierClientTypes.UploadListElement]()
            for structure0 in uploadsListContainer {
                if let structure0 = structure0 {
                    uploadsListDecoded0?.append(structure0)
                }
            }
        }
        uploadsList = uploadsListDecoded0
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
    }
}
