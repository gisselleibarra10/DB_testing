// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListPartsOutputResponseBody: Swift.Equatable {
    let multipartUploadId: Swift.String?
    let vaultARN: Swift.String?
    let archiveDescription: Swift.String?
    let partSizeInBytes: Swift.Int
    let creationDate: Swift.String?
    let parts: [GlacierClientTypes.PartListElement]?
    let marker: Swift.String?
}

extension ListPartsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case archiveDescription = "ArchiveDescription"
        case creationDate = "CreationDate"
        case marker = "Marker"
        case multipartUploadId = "MultipartUploadId"
        case partSizeInBytes = "PartSizeInBytes"
        case parts = "Parts"
        case vaultARN = "VaultARN"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let multipartUploadIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .multipartUploadId)
        multipartUploadId = multipartUploadIdDecoded
        let vaultARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vaultARN)
        vaultARN = vaultARNDecoded
        let archiveDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .archiveDescription)
        archiveDescription = archiveDescriptionDecoded
        let partSizeInBytesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .partSizeInBytes) ?? 0
        partSizeInBytes = partSizeInBytesDecoded
        let creationDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .creationDate)
        creationDate = creationDateDecoded
        let partsContainer = try containerValues.decodeIfPresent([GlacierClientTypes.PartListElement?].self, forKey: .parts)
        var partsDecoded0:[GlacierClientTypes.PartListElement]? = nil
        if let partsContainer = partsContainer {
            partsDecoded0 = [GlacierClientTypes.PartListElement]()
            for structure0 in partsContainer {
                if let structure0 = structure0 {
                    partsDecoded0?.append(structure0)
                }
            }
        }
        parts = partsDecoded0
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
    }
}
