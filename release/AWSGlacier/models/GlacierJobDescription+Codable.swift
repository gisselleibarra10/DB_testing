// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension GlacierClientTypes.GlacierJobDescription: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case action = "Action"
        case archiveId = "ArchiveId"
        case archiveSHA256TreeHash = "ArchiveSHA256TreeHash"
        case archiveSizeInBytes = "ArchiveSizeInBytes"
        case completed = "Completed"
        case completionDate = "CompletionDate"
        case creationDate = "CreationDate"
        case inventoryRetrievalParameters = "InventoryRetrievalParameters"
        case inventorySizeInBytes = "InventorySizeInBytes"
        case jobDescription = "JobDescription"
        case jobId = "JobId"
        case jobOutputPath = "JobOutputPath"
        case outputLocation = "OutputLocation"
        case retrievalByteRange = "RetrievalByteRange"
        case sHA256TreeHash = "SHA256TreeHash"
        case sNSTopic = "SNSTopic"
        case selectParameters = "SelectParameters"
        case statusCode = "StatusCode"
        case statusMessage = "StatusMessage"
        case tier = "Tier"
        case vaultARN = "VaultARN"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let action = self.action {
            try encodeContainer.encode(action.rawValue, forKey: .action)
        }
        if let archiveId = self.archiveId {
            try encodeContainer.encode(archiveId, forKey: .archiveId)
        }
        if let archiveSHA256TreeHash = self.archiveSHA256TreeHash {
            try encodeContainer.encode(archiveSHA256TreeHash, forKey: .archiveSHA256TreeHash)
        }
        if let archiveSizeInBytes = self.archiveSizeInBytes {
            try encodeContainer.encode(archiveSizeInBytes, forKey: .archiveSizeInBytes)
        }
        if completed != false {
            try encodeContainer.encode(completed, forKey: .completed)
        }
        if let completionDate = self.completionDate {
            try encodeContainer.encode(completionDate, forKey: .completionDate)
        }
        if let creationDate = self.creationDate {
            try encodeContainer.encode(creationDate, forKey: .creationDate)
        }
        if let inventoryRetrievalParameters = self.inventoryRetrievalParameters {
            try encodeContainer.encode(inventoryRetrievalParameters, forKey: .inventoryRetrievalParameters)
        }
        if let inventorySizeInBytes = self.inventorySizeInBytes {
            try encodeContainer.encode(inventorySizeInBytes, forKey: .inventorySizeInBytes)
        }
        if let jobDescription = self.jobDescription {
            try encodeContainer.encode(jobDescription, forKey: .jobDescription)
        }
        if let jobId = self.jobId {
            try encodeContainer.encode(jobId, forKey: .jobId)
        }
        if let jobOutputPath = self.jobOutputPath {
            try encodeContainer.encode(jobOutputPath, forKey: .jobOutputPath)
        }
        if let outputLocation = self.outputLocation {
            try encodeContainer.encode(outputLocation, forKey: .outputLocation)
        }
        if let retrievalByteRange = self.retrievalByteRange {
            try encodeContainer.encode(retrievalByteRange, forKey: .retrievalByteRange)
        }
        if let sHA256TreeHash = self.sHA256TreeHash {
            try encodeContainer.encode(sHA256TreeHash, forKey: .sHA256TreeHash)
        }
        if let sNSTopic = self.sNSTopic {
            try encodeContainer.encode(sNSTopic, forKey: .sNSTopic)
        }
        if let selectParameters = self.selectParameters {
            try encodeContainer.encode(selectParameters, forKey: .selectParameters)
        }
        if let statusCode = self.statusCode {
            try encodeContainer.encode(statusCode.rawValue, forKey: .statusCode)
        }
        if let statusMessage = self.statusMessage {
            try encodeContainer.encode(statusMessage, forKey: .statusMessage)
        }
        if let tier = self.tier {
            try encodeContainer.encode(tier, forKey: .tier)
        }
        if let vaultARN = self.vaultARN {
            try encodeContainer.encode(vaultARN, forKey: .vaultARN)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobId)
        jobId = jobIdDecoded
        let jobDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobDescription)
        jobDescription = jobDescriptionDecoded
        let actionDecoded = try containerValues.decodeIfPresent(GlacierClientTypes.ActionCode.self, forKey: .action)
        action = actionDecoded
        let archiveIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .archiveId)
        archiveId = archiveIdDecoded
        let vaultARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vaultARN)
        vaultARN = vaultARNDecoded
        let creationDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .creationDate)
        creationDate = creationDateDecoded
        let completedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .completed) ?? false
        completed = completedDecoded
        let statusCodeDecoded = try containerValues.decodeIfPresent(GlacierClientTypes.StatusCode.self, forKey: .statusCode)
        statusCode = statusCodeDecoded
        let statusMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .statusMessage)
        statusMessage = statusMessageDecoded
        let archiveSizeInBytesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .archiveSizeInBytes)
        archiveSizeInBytes = archiveSizeInBytesDecoded
        let inventorySizeInBytesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .inventorySizeInBytes)
        inventorySizeInBytes = inventorySizeInBytesDecoded
        let sNSTopicDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sNSTopic)
        sNSTopic = sNSTopicDecoded
        let completionDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .completionDate)
        completionDate = completionDateDecoded
        let sHA256TreeHashDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sHA256TreeHash)
        sHA256TreeHash = sHA256TreeHashDecoded
        let archiveSHA256TreeHashDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .archiveSHA256TreeHash)
        archiveSHA256TreeHash = archiveSHA256TreeHashDecoded
        let retrievalByteRangeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .retrievalByteRange)
        retrievalByteRange = retrievalByteRangeDecoded
        let tierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tier)
        tier = tierDecoded
        let inventoryRetrievalParametersDecoded = try containerValues.decodeIfPresent(GlacierClientTypes.InventoryRetrievalJobDescription.self, forKey: .inventoryRetrievalParameters)
        inventoryRetrievalParameters = inventoryRetrievalParametersDecoded
        let jobOutputPathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobOutputPath)
        jobOutputPath = jobOutputPathDecoded
        let selectParametersDecoded = try containerValues.decodeIfPresent(GlacierClientTypes.SelectParameters.self, forKey: .selectParameters)
        selectParameters = selectParametersDecoded
        let outputLocationDecoded = try containerValues.decodeIfPresent(GlacierClientTypes.OutputLocation.self, forKey: .outputLocation)
        outputLocation = outputLocationDecoded
    }
}
