// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListRuleGroupsNamespacesOutputResponseBody: Swift.Equatable {
    let ruleGroupsNamespaces: [AmpClientTypes.RuleGroupsNamespaceSummary]?
    let nextToken: Swift.String?
}

extension ListRuleGroupsNamespacesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken
        case ruleGroupsNamespaces
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ruleGroupsNamespacesContainer = try containerValues.decodeIfPresent([AmpClientTypes.RuleGroupsNamespaceSummary?].self, forKey: .ruleGroupsNamespaces)
        var ruleGroupsNamespacesDecoded0:[AmpClientTypes.RuleGroupsNamespaceSummary]? = nil
        if let ruleGroupsNamespacesContainer = ruleGroupsNamespacesContainer {
            ruleGroupsNamespacesDecoded0 = [AmpClientTypes.RuleGroupsNamespaceSummary]()
            for structure0 in ruleGroupsNamespacesContainer {
                if let structure0 = structure0 {
                    ruleGroupsNamespacesDecoded0?.append(structure0)
                }
            }
        }
        ruleGroupsNamespaces = ruleGroupsNamespacesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
