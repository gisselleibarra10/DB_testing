// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeEndpointOutputResponseBody: Swift.Equatable {
    let name: Swift.String?
    let description: Swift.String?
    let arn: Swift.String?
    let routingConfig: EventBridgeClientTypes.RoutingConfig?
    let replicationConfig: EventBridgeClientTypes.ReplicationConfig?
    let eventBuses: [EventBridgeClientTypes.EndpointEventBus]?
    let roleArn: Swift.String?
    let endpointId: Swift.String?
    let endpointUrl: Swift.String?
    let state: EventBridgeClientTypes.EndpointState?
    let stateReason: Swift.String?
    let creationTime: ClientRuntime.Date?
    let lastModifiedTime: ClientRuntime.Date?
}

extension DescribeEndpointOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "Arn"
        case creationTime = "CreationTime"
        case description = "Description"
        case endpointId = "EndpointId"
        case endpointUrl = "EndpointUrl"
        case eventBuses = "EventBuses"
        case lastModifiedTime = "LastModifiedTime"
        case name = "Name"
        case replicationConfig = "ReplicationConfig"
        case roleArn = "RoleArn"
        case routingConfig = "RoutingConfig"
        case state = "State"
        case stateReason = "StateReason"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let routingConfigDecoded = try containerValues.decodeIfPresent(EventBridgeClientTypes.RoutingConfig.self, forKey: .routingConfig)
        routingConfig = routingConfigDecoded
        let replicationConfigDecoded = try containerValues.decodeIfPresent(EventBridgeClientTypes.ReplicationConfig.self, forKey: .replicationConfig)
        replicationConfig = replicationConfigDecoded
        let eventBusesContainer = try containerValues.decodeIfPresent([EventBridgeClientTypes.EndpointEventBus?].self, forKey: .eventBuses)
        var eventBusesDecoded0:[EventBridgeClientTypes.EndpointEventBus]? = nil
        if let eventBusesContainer = eventBusesContainer {
            eventBusesDecoded0 = [EventBridgeClientTypes.EndpointEventBus]()
            for structure0 in eventBusesContainer {
                if let structure0 = structure0 {
                    eventBusesDecoded0?.append(structure0)
                }
            }
        }
        eventBuses = eventBusesDecoded0
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let endpointIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .endpointId)
        endpointId = endpointIdDecoded
        let endpointUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .endpointUrl)
        endpointUrl = endpointUrlDecoded
        let stateDecoded = try containerValues.decodeIfPresent(EventBridgeClientTypes.EndpointState.self, forKey: .state)
        state = stateDecoded
        let stateReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stateReason)
        stateReason = stateReasonDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let lastModifiedTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedTime)
        lastModifiedTime = lastModifiedTimeDecoded
    }
}
