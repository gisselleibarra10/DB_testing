// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListEventSourcesOutputResponseBody: Swift.Equatable {
    let eventSources: [EventBridgeClientTypes.EventSource]?
    let nextToken: Swift.String?
}

extension ListEventSourcesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case eventSources = "EventSources"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let eventSourcesContainer = try containerValues.decodeIfPresent([EventBridgeClientTypes.EventSource?].self, forKey: .eventSources)
        var eventSourcesDecoded0:[EventBridgeClientTypes.EventSource]? = nil
        if let eventSourcesContainer = eventSourcesContainer {
            eventSourcesDecoded0 = [EventBridgeClientTypes.EventSource]()
            for structure0 in eventSourcesContainer {
                if let structure0 = structure0 {
                    eventSourcesDecoded0?.append(structure0)
                }
            }
        }
        eventSources = eventSourcesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
