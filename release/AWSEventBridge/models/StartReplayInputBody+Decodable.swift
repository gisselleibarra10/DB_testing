// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct StartReplayInputBody: Swift.Equatable {
    let replayName: Swift.String?
    let description: Swift.String?
    let eventSourceArn: Swift.String?
    let eventStartTime: ClientRuntime.Date?
    let eventEndTime: ClientRuntime.Date?
    let destination: EventBridgeClientTypes.ReplayDestination?
}

extension StartReplayInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description = "Description"
        case destination = "Destination"
        case eventEndTime = "EventEndTime"
        case eventSourceArn = "EventSourceArn"
        case eventStartTime = "EventStartTime"
        case replayName = "ReplayName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let replayNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .replayName)
        replayName = replayNameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let eventSourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .eventSourceArn)
        eventSourceArn = eventSourceArnDecoded
        let eventStartTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .eventStartTime)
        eventStartTime = eventStartTimeDecoded
        let eventEndTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .eventEndTime)
        eventEndTime = eventEndTimeDecoded
        let destinationDecoded = try containerValues.decodeIfPresent(EventBridgeClientTypes.ReplayDestination.self, forKey: .destination)
        destination = destinationDecoded
    }
}
