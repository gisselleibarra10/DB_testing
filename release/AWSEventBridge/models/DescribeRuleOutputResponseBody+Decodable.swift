// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeRuleOutputResponseBody: Swift.Equatable {
    let name: Swift.String?
    let arn: Swift.String?
    let eventPattern: Swift.String?
    let scheduleExpression: Swift.String?
    let state: EventBridgeClientTypes.RuleState?
    let description: Swift.String?
    let roleArn: Swift.String?
    let managedBy: Swift.String?
    let eventBusName: Swift.String?
    let createdBy: Swift.String?
}

extension DescribeRuleOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "Arn"
        case createdBy = "CreatedBy"
        case description = "Description"
        case eventBusName = "EventBusName"
        case eventPattern = "EventPattern"
        case managedBy = "ManagedBy"
        case name = "Name"
        case roleArn = "RoleArn"
        case scheduleExpression = "ScheduleExpression"
        case state = "State"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let eventPatternDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .eventPattern)
        eventPattern = eventPatternDecoded
        let scheduleExpressionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .scheduleExpression)
        scheduleExpression = scheduleExpressionDecoded
        let stateDecoded = try containerValues.decodeIfPresent(EventBridgeClientTypes.RuleState.self, forKey: .state)
        state = stateDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let managedByDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .managedBy)
        managedBy = managedByDecoded
        let eventBusNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .eventBusName)
        eventBusName = eventBusNameDecoded
        let createdByDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .createdBy)
        createdBy = createdByDecoded
    }
}
