// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension EventBridgeClientTypes.UpdateConnectionOAuthRequestParameters: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case authorizationEndpoint = "AuthorizationEndpoint"
        case clientParameters = "ClientParameters"
        case httpMethod = "HttpMethod"
        case oAuthHttpParameters = "OAuthHttpParameters"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let authorizationEndpoint = self.authorizationEndpoint {
            try encodeContainer.encode(authorizationEndpoint, forKey: .authorizationEndpoint)
        }
        if let clientParameters = self.clientParameters {
            try encodeContainer.encode(clientParameters, forKey: .clientParameters)
        }
        if let httpMethod = self.httpMethod {
            try encodeContainer.encode(httpMethod.rawValue, forKey: .httpMethod)
        }
        if let oAuthHttpParameters = self.oAuthHttpParameters {
            try encodeContainer.encode(oAuthHttpParameters, forKey: .oAuthHttpParameters)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clientParametersDecoded = try containerValues.decodeIfPresent(EventBridgeClientTypes.UpdateConnectionOAuthClientRequestParameters.self, forKey: .clientParameters)
        clientParameters = clientParametersDecoded
        let authorizationEndpointDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .authorizationEndpoint)
        authorizationEndpoint = authorizationEndpointDecoded
        let httpMethodDecoded = try containerValues.decodeIfPresent(EventBridgeClientTypes.ConnectionOAuthHttpMethod.self, forKey: .httpMethod)
        httpMethod = httpMethodDecoded
        let oAuthHttpParametersDecoded = try containerValues.decodeIfPresent(EventBridgeClientTypes.ConnectionHttpParameters.self, forKey: .oAuthHttpParameters)
        oAuthHttpParameters = oAuthHttpParametersDecoded
    }
}
