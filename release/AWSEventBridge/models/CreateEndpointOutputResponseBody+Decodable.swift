// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateEndpointOutputResponseBody: Swift.Equatable {
    let name: Swift.String?
    let arn: Swift.String?
    let routingConfig: EventBridgeClientTypes.RoutingConfig?
    let replicationConfig: EventBridgeClientTypes.ReplicationConfig?
    let eventBuses: [EventBridgeClientTypes.EndpointEventBus]?
    let roleArn: Swift.String?
    let state: EventBridgeClientTypes.EndpointState?
}

extension CreateEndpointOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "Arn"
        case eventBuses = "EventBuses"
        case name = "Name"
        case replicationConfig = "ReplicationConfig"
        case roleArn = "RoleArn"
        case routingConfig = "RoutingConfig"
        case state = "State"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let routingConfigDecoded = try containerValues.decodeIfPresent(EventBridgeClientTypes.RoutingConfig.self, forKey: .routingConfig)
        routingConfig = routingConfigDecoded
        let replicationConfigDecoded = try containerValues.decodeIfPresent(EventBridgeClientTypes.ReplicationConfig.self, forKey: .replicationConfig)
        replicationConfig = replicationConfigDecoded
        let eventBusesContainer = try containerValues.decodeIfPresent([EventBridgeClientTypes.EndpointEventBus?].self, forKey: .eventBuses)
        var eventBusesDecoded0:[EventBridgeClientTypes.EndpointEventBus]? = nil
        if let eventBusesContainer = eventBusesContainer {
            eventBusesDecoded0 = [EventBridgeClientTypes.EndpointEventBus]()
            for structure0 in eventBusesContainer {
                if let structure0 = structure0 {
                    eventBusesDecoded0?.append(structure0)
                }
            }
        }
        eventBuses = eventBusesDecoded0
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let stateDecoded = try containerValues.decodeIfPresent(EventBridgeClientTypes.EndpointState.self, forKey: .state)
        state = stateDecoded
    }
}
