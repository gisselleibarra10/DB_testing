// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension EventBridgeClientTypes {
    /// Targets are the resources to be invoked when a rule is triggered. For a complete list of services and resources that can be set as a target, see [PutTargets](https://docs.aws.amazon.com/eventbridge/latest/APIReference/API_PutTargets.html). If you are setting the event bus of another account as the target, and that account granted permission to your account through an organization instead of directly by the account ID, then you must specify a RoleArn with proper permissions in the Target structure. For more information, see [Sending and Receiving Events Between Amazon Web Services Accounts](https://docs.aws.amazon.com/eventbridge/latest/userguide/eventbridge-cross-account-event-delivery.html) in the Amazon EventBridge User Guide.
    public struct Target: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the target.
        /// This member is required.
        public var arn: Swift.String?
        /// If the event target is an Batch job, this contains the job definition, job name, and other parameters. For more information, see [Jobs](https://docs.aws.amazon.com/batch/latest/userguide/jobs.html) in the Batch User Guide.
        public var batchParameters: EventBridgeClientTypes.BatchParameters?
        /// The DeadLetterConfig that defines the target queue to send dead-letter queue events to.
        public var deadLetterConfig: EventBridgeClientTypes.DeadLetterConfig?
        /// Contains the Amazon ECS task definition and task count to be used, if the event target is an Amazon ECS task. For more information about Amazon ECS tasks, see [Task Definitions ](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_defintions.html) in the Amazon EC2 Container Service Developer Guide.
        public var ecsParameters: EventBridgeClientTypes.EcsParameters?
        /// Contains the HTTP parameters to use when the target is a API Gateway REST endpoint or EventBridge ApiDestination. If you specify an API Gateway REST API or EventBridge ApiDestination as a target, you can use this parameter to specify headers, path parameters, and query string keys/values as part of your target invoking request. If you're using ApiDestinations, the corresponding Connection can also have these values configured. In case of any conflicting keys, values from the Connection take precedence.
        public var httpParameters: EventBridgeClientTypes.HttpParameters?
        /// The ID of the target within the specified rule. Use this ID to reference the target when updating the rule. We recommend using a memorable and unique string.
        /// This member is required.
        public var id: Swift.String?
        /// Valid JSON text passed to the target. In this case, nothing from the event itself is passed to the target. For more information, see [The JavaScript Object Notation (JSON) Data Interchange Format](http://www.rfc-editor.org/rfc/rfc7159.txt).
        public var input: Swift.String?
        /// The value of the JSONPath that is used for extracting part of the matched event when passing it to the target. You must use JSON dot notation, not bracket notation. For more information about JSON paths, see [JSONPath](http://goessner.net/articles/JsonPath/).
        public var inputPath: Swift.String?
        /// Settings to enable you to provide custom input to a target based on certain event data. You can extract one or more key-value pairs from the event and then use that data to send customized input to the target.
        public var inputTransformer: EventBridgeClientTypes.InputTransformer?
        /// The custom parameter you can use to control the shard assignment, when the target is a Kinesis data stream. If you do not include this parameter, the default is to use the eventId as the partition key.
        public var kinesisParameters: EventBridgeClientTypes.KinesisParameters?
        /// Contains the Amazon Redshift Data API parameters to use when the target is a Amazon Redshift cluster. If you specify a Amazon Redshift Cluster as a Target, you can use this to specify parameters to invoke the Amazon Redshift Data API ExecuteStatement based on EventBridge events.
        public var redshiftDataParameters: EventBridgeClientTypes.RedshiftDataParameters?
        /// The RetryPolicy object that contains the retry policy configuration to use for the dead-letter queue.
        public var retryPolicy: EventBridgeClientTypes.RetryPolicy?
        /// The Amazon Resource Name (ARN) of the IAM role to be used for this target when the rule is triggered. If one rule triggers multiple targets, you can use a different IAM role for each target.
        public var roleArn: Swift.String?
        /// Parameters used when you are using the rule to invoke Amazon EC2 Run Command.
        public var runCommandParameters: EventBridgeClientTypes.RunCommandParameters?
        /// Contains the SageMaker Model Building Pipeline parameters to start execution of a SageMaker Model Building Pipeline. If you specify a SageMaker Model Building Pipeline as a target, you can use this to specify parameters to start a pipeline execution based on EventBridge events.
        public var sageMakerPipelineParameters: EventBridgeClientTypes.SageMakerPipelineParameters?
        /// Contains the message group ID to use when the target is a FIFO queue. If you specify an SQS FIFO queue as a target, the queue must have content-based deduplication enabled.
        public var sqsParameters: EventBridgeClientTypes.SqsParameters?

        public init (
            arn: Swift.String? = nil,
            batchParameters: EventBridgeClientTypes.BatchParameters? = nil,
            deadLetterConfig: EventBridgeClientTypes.DeadLetterConfig? = nil,
            ecsParameters: EventBridgeClientTypes.EcsParameters? = nil,
            httpParameters: EventBridgeClientTypes.HttpParameters? = nil,
            id: Swift.String? = nil,
            input: Swift.String? = nil,
            inputPath: Swift.String? = nil,
            inputTransformer: EventBridgeClientTypes.InputTransformer? = nil,
            kinesisParameters: EventBridgeClientTypes.KinesisParameters? = nil,
            redshiftDataParameters: EventBridgeClientTypes.RedshiftDataParameters? = nil,
            retryPolicy: EventBridgeClientTypes.RetryPolicy? = nil,
            roleArn: Swift.String? = nil,
            runCommandParameters: EventBridgeClientTypes.RunCommandParameters? = nil,
            sageMakerPipelineParameters: EventBridgeClientTypes.SageMakerPipelineParameters? = nil,
            sqsParameters: EventBridgeClientTypes.SqsParameters? = nil
        )
        {
            self.arn = arn
            self.batchParameters = batchParameters
            self.deadLetterConfig = deadLetterConfig
            self.ecsParameters = ecsParameters
            self.httpParameters = httpParameters
            self.id = id
            self.input = input
            self.inputPath = inputPath
            self.inputTransformer = inputTransformer
            self.kinesisParameters = kinesisParameters
            self.redshiftDataParameters = redshiftDataParameters
            self.retryPolicy = retryPolicy
            self.roleArn = roleArn
            self.runCommandParameters = runCommandParameters
            self.sageMakerPipelineParameters = sageMakerPipelineParameters
            self.sqsParameters = sqsParameters
        }
    }

}
