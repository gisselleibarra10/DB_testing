// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeTaskOutputResponseBody: Swift.Equatable {
    let taskArn: Swift.String?
    let status: DataSyncClientTypes.TaskStatus?
    let name: Swift.String?
    let currentTaskExecutionArn: Swift.String?
    let sourceLocationArn: Swift.String?
    let destinationLocationArn: Swift.String?
    let cloudWatchLogGroupArn: Swift.String?
    let sourceNetworkInterfaceArns: [Swift.String]?
    let destinationNetworkInterfaceArns: [Swift.String]?
    let options: DataSyncClientTypes.Options?
    let excludes: [DataSyncClientTypes.FilterRule]?
    let schedule: DataSyncClientTypes.TaskSchedule?
    let errorCode: Swift.String?
    let errorDetail: Swift.String?
    let creationTime: ClientRuntime.Date?
    let includes: [DataSyncClientTypes.FilterRule]?
}

extension DescribeTaskOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cloudWatchLogGroupArn = "CloudWatchLogGroupArn"
        case creationTime = "CreationTime"
        case currentTaskExecutionArn = "CurrentTaskExecutionArn"
        case destinationLocationArn = "DestinationLocationArn"
        case destinationNetworkInterfaceArns = "DestinationNetworkInterfaceArns"
        case errorCode = "ErrorCode"
        case errorDetail = "ErrorDetail"
        case excludes = "Excludes"
        case includes = "Includes"
        case name = "Name"
        case options = "Options"
        case schedule = "Schedule"
        case sourceLocationArn = "SourceLocationArn"
        case sourceNetworkInterfaceArns = "SourceNetworkInterfaceArns"
        case status = "Status"
        case taskArn = "TaskArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let taskArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .taskArn)
        taskArn = taskArnDecoded
        let statusDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.TaskStatus.self, forKey: .status)
        status = statusDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let currentTaskExecutionArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .currentTaskExecutionArn)
        currentTaskExecutionArn = currentTaskExecutionArnDecoded
        let sourceLocationArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceLocationArn)
        sourceLocationArn = sourceLocationArnDecoded
        let destinationLocationArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .destinationLocationArn)
        destinationLocationArn = destinationLocationArnDecoded
        let cloudWatchLogGroupArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cloudWatchLogGroupArn)
        cloudWatchLogGroupArn = cloudWatchLogGroupArnDecoded
        let sourceNetworkInterfaceArnsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .sourceNetworkInterfaceArns)
        var sourceNetworkInterfaceArnsDecoded0:[Swift.String]? = nil
        if let sourceNetworkInterfaceArnsContainer = sourceNetworkInterfaceArnsContainer {
            sourceNetworkInterfaceArnsDecoded0 = [Swift.String]()
            for string0 in sourceNetworkInterfaceArnsContainer {
                if let string0 = string0 {
                    sourceNetworkInterfaceArnsDecoded0?.append(string0)
                }
            }
        }
        sourceNetworkInterfaceArns = sourceNetworkInterfaceArnsDecoded0
        let destinationNetworkInterfaceArnsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .destinationNetworkInterfaceArns)
        var destinationNetworkInterfaceArnsDecoded0:[Swift.String]? = nil
        if let destinationNetworkInterfaceArnsContainer = destinationNetworkInterfaceArnsContainer {
            destinationNetworkInterfaceArnsDecoded0 = [Swift.String]()
            for string0 in destinationNetworkInterfaceArnsContainer {
                if let string0 = string0 {
                    destinationNetworkInterfaceArnsDecoded0?.append(string0)
                }
            }
        }
        destinationNetworkInterfaceArns = destinationNetworkInterfaceArnsDecoded0
        let optionsDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.Options.self, forKey: .options)
        options = optionsDecoded
        let excludesContainer = try containerValues.decodeIfPresent([DataSyncClientTypes.FilterRule?].self, forKey: .excludes)
        var excludesDecoded0:[DataSyncClientTypes.FilterRule]? = nil
        if let excludesContainer = excludesContainer {
            excludesDecoded0 = [DataSyncClientTypes.FilterRule]()
            for structure0 in excludesContainer {
                if let structure0 = structure0 {
                    excludesDecoded0?.append(structure0)
                }
            }
        }
        excludes = excludesDecoded0
        let scheduleDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.TaskSchedule.self, forKey: .schedule)
        schedule = scheduleDecoded
        let errorCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .errorCode)
        errorCode = errorCodeDecoded
        let errorDetailDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .errorDetail)
        errorDetail = errorDetailDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let includesContainer = try containerValues.decodeIfPresent([DataSyncClientTypes.FilterRule?].self, forKey: .includes)
        var includesDecoded0:[DataSyncClientTypes.FilterRule]? = nil
        if let includesContainer = includesContainer {
            includesDecoded0 = [DataSyncClientTypes.FilterRule]()
            for structure0 in includesContainer {
                if let structure0 = structure0 {
                    includesDecoded0?.append(structure0)
                }
            }
        }
        includes = includesDecoded0
    }
}
