// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateTaskInputBody: Swift.Equatable {
    let sourceLocationArn: Swift.String?
    let destinationLocationArn: Swift.String?
    let cloudWatchLogGroupArn: Swift.String?
    let name: Swift.String?
    let options: DataSyncClientTypes.Options?
    let excludes: [DataSyncClientTypes.FilterRule]?
    let schedule: DataSyncClientTypes.TaskSchedule?
    let tags: [DataSyncClientTypes.TagListEntry]?
    let includes: [DataSyncClientTypes.FilterRule]?
}

extension CreateTaskInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cloudWatchLogGroupArn = "CloudWatchLogGroupArn"
        case destinationLocationArn = "DestinationLocationArn"
        case excludes = "Excludes"
        case includes = "Includes"
        case name = "Name"
        case options = "Options"
        case schedule = "Schedule"
        case sourceLocationArn = "SourceLocationArn"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sourceLocationArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceLocationArn)
        sourceLocationArn = sourceLocationArnDecoded
        let destinationLocationArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .destinationLocationArn)
        destinationLocationArn = destinationLocationArnDecoded
        let cloudWatchLogGroupArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cloudWatchLogGroupArn)
        cloudWatchLogGroupArn = cloudWatchLogGroupArnDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let optionsDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.Options.self, forKey: .options)
        options = optionsDecoded
        let excludesContainer = try containerValues.decodeIfPresent([DataSyncClientTypes.FilterRule?].self, forKey: .excludes)
        var excludesDecoded0:[DataSyncClientTypes.FilterRule]? = nil
        if let excludesContainer = excludesContainer {
            excludesDecoded0 = [DataSyncClientTypes.FilterRule]()
            for structure0 in excludesContainer {
                if let structure0 = structure0 {
                    excludesDecoded0?.append(structure0)
                }
            }
        }
        excludes = excludesDecoded0
        let scheduleDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.TaskSchedule.self, forKey: .schedule)
        schedule = scheduleDecoded
        let tagsContainer = try containerValues.decodeIfPresent([DataSyncClientTypes.TagListEntry?].self, forKey: .tags)
        var tagsDecoded0:[DataSyncClientTypes.TagListEntry]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [DataSyncClientTypes.TagListEntry]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let includesContainer = try containerValues.decodeIfPresent([DataSyncClientTypes.FilterRule?].self, forKey: .includes)
        var includesDecoded0:[DataSyncClientTypes.FilterRule]? = nil
        if let includesContainer = includesContainer {
            includesDecoded0 = [DataSyncClientTypes.FilterRule]()
            for structure0 in includesContainer {
                if let structure0 = structure0 {
                    includesDecoded0?.append(structure0)
                }
            }
        }
        includes = includesDecoded0
    }
}
