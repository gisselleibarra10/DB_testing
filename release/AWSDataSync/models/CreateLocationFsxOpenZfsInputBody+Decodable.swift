// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateLocationFsxOpenZfsInputBody: Swift.Equatable {
    let fsxFilesystemArn: Swift.String?
    let `protocol`: DataSyncClientTypes.FsxProtocol?
    let securityGroupArns: [Swift.String]?
    let subdirectory: Swift.String?
    let tags: [DataSyncClientTypes.TagListEntry]?
}

extension CreateLocationFsxOpenZfsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case fsxFilesystemArn = "FsxFilesystemArn"
        case `protocol` = "Protocol"
        case securityGroupArns = "SecurityGroupArns"
        case subdirectory = "Subdirectory"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fsxFilesystemArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fsxFilesystemArn)
        fsxFilesystemArn = fsxFilesystemArnDecoded
        let protocolDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.FsxProtocol.self, forKey: .protocol)
        `protocol` = protocolDecoded
        let securityGroupArnsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .securityGroupArns)
        var securityGroupArnsDecoded0:[Swift.String]? = nil
        if let securityGroupArnsContainer = securityGroupArnsContainer {
            securityGroupArnsDecoded0 = [Swift.String]()
            for string0 in securityGroupArnsContainer {
                if let string0 = string0 {
                    securityGroupArnsDecoded0?.append(string0)
                }
            }
        }
        securityGroupArns = securityGroupArnsDecoded0
        let subdirectoryDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .subdirectory)
        subdirectory = subdirectoryDecoded
        let tagsContainer = try containerValues.decodeIfPresent([DataSyncClientTypes.TagListEntry?].self, forKey: .tags)
        var tagsDecoded0:[DataSyncClientTypes.TagListEntry]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [DataSyncClientTypes.TagListEntry]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}
