// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateLocationObjectStorageInputBody: Swift.Equatable {
    let serverHostname: Swift.String?
    let serverPort: Swift.Int?
    let serverProtocol: DataSyncClientTypes.ObjectStorageServerProtocol?
    let subdirectory: Swift.String?
    let bucketName: Swift.String?
    let accessKey: Swift.String?
    let secretKey: Swift.String?
    let agentArns: [Swift.String]?
    let tags: [DataSyncClientTypes.TagListEntry]?
}

extension CreateLocationObjectStorageInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accessKey = "AccessKey"
        case agentArns = "AgentArns"
        case bucketName = "BucketName"
        case secretKey = "SecretKey"
        case serverHostname = "ServerHostname"
        case serverPort = "ServerPort"
        case serverProtocol = "ServerProtocol"
        case subdirectory = "Subdirectory"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let serverHostnameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serverHostname)
        serverHostname = serverHostnameDecoded
        let serverPortDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .serverPort)
        serverPort = serverPortDecoded
        let serverProtocolDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.ObjectStorageServerProtocol.self, forKey: .serverProtocol)
        serverProtocol = serverProtocolDecoded
        let subdirectoryDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .subdirectory)
        subdirectory = subdirectoryDecoded
        let bucketNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .bucketName)
        bucketName = bucketNameDecoded
        let accessKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .accessKey)
        accessKey = accessKeyDecoded
        let secretKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .secretKey)
        secretKey = secretKeyDecoded
        let agentArnsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .agentArns)
        var agentArnsDecoded0:[Swift.String]? = nil
        if let agentArnsContainer = agentArnsContainer {
            agentArnsDecoded0 = [Swift.String]()
            for string0 in agentArnsContainer {
                if let string0 = string0 {
                    agentArnsDecoded0?.append(string0)
                }
            }
        }
        agentArns = agentArnsDecoded0
        let tagsContainer = try containerValues.decodeIfPresent([DataSyncClientTypes.TagListEntry?].self, forKey: .tags)
        var tagsDecoded0:[DataSyncClientTypes.TagListEntry]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [DataSyncClientTypes.TagListEntry]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}
