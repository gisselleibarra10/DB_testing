// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct UpdateLocationHdfsInputBody: Swift.Equatable {
    let locationArn: Swift.String?
    let subdirectory: Swift.String?
    let nameNodes: [DataSyncClientTypes.HdfsNameNode]?
    let blockSize: Swift.Int?
    let replicationFactor: Swift.Int?
    let kmsKeyProviderUri: Swift.String?
    let qopConfiguration: DataSyncClientTypes.QopConfiguration?
    let authenticationType: DataSyncClientTypes.HdfsAuthenticationType?
    let simpleUser: Swift.String?
    let kerberosPrincipal: Swift.String?
    let kerberosKeytab: ClientRuntime.Data?
    let kerberosKrb5Conf: ClientRuntime.Data?
    let agentArns: [Swift.String]?
}

extension UpdateLocationHdfsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case agentArns = "AgentArns"
        case authenticationType = "AuthenticationType"
        case blockSize = "BlockSize"
        case kerberosKeytab = "KerberosKeytab"
        case kerberosKrb5Conf = "KerberosKrb5Conf"
        case kerberosPrincipal = "KerberosPrincipal"
        case kmsKeyProviderUri = "KmsKeyProviderUri"
        case locationArn = "LocationArn"
        case nameNodes = "NameNodes"
        case qopConfiguration = "QopConfiguration"
        case replicationFactor = "ReplicationFactor"
        case simpleUser = "SimpleUser"
        case subdirectory = "Subdirectory"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let locationArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .locationArn)
        locationArn = locationArnDecoded
        let subdirectoryDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .subdirectory)
        subdirectory = subdirectoryDecoded
        let nameNodesContainer = try containerValues.decodeIfPresent([DataSyncClientTypes.HdfsNameNode?].self, forKey: .nameNodes)
        var nameNodesDecoded0:[DataSyncClientTypes.HdfsNameNode]? = nil
        if let nameNodesContainer = nameNodesContainer {
            nameNodesDecoded0 = [DataSyncClientTypes.HdfsNameNode]()
            for structure0 in nameNodesContainer {
                if let structure0 = structure0 {
                    nameNodesDecoded0?.append(structure0)
                }
            }
        }
        nameNodes = nameNodesDecoded0
        let blockSizeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .blockSize)
        blockSize = blockSizeDecoded
        let replicationFactorDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .replicationFactor)
        replicationFactor = replicationFactorDecoded
        let kmsKeyProviderUriDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kmsKeyProviderUri)
        kmsKeyProviderUri = kmsKeyProviderUriDecoded
        let qopConfigurationDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.QopConfiguration.self, forKey: .qopConfiguration)
        qopConfiguration = qopConfigurationDecoded
        let authenticationTypeDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.HdfsAuthenticationType.self, forKey: .authenticationType)
        authenticationType = authenticationTypeDecoded
        let simpleUserDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .simpleUser)
        simpleUser = simpleUserDecoded
        let kerberosPrincipalDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kerberosPrincipal)
        kerberosPrincipal = kerberosPrincipalDecoded
        let kerberosKeytabDecoded = try containerValues.decodeIfPresent(ClientRuntime.Data.self, forKey: .kerberosKeytab)
        kerberosKeytab = kerberosKeytabDecoded
        let kerberosKrb5ConfDecoded = try containerValues.decodeIfPresent(ClientRuntime.Data.self, forKey: .kerberosKrb5Conf)
        kerberosKrb5Conf = kerberosKrb5ConfDecoded
        let agentArnsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .agentArns)
        var agentArnsDecoded0:[Swift.String]? = nil
        if let agentArnsContainer = agentArnsContainer {
            agentArnsDecoded0 = [Swift.String]()
            for string0 in agentArnsContainer {
                if let string0 = string0 {
                    agentArnsDecoded0?.append(string0)
                }
            }
        }
        agentArns = agentArnsDecoded0
    }
}
