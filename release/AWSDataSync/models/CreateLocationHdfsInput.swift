// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct CreateLocationHdfsInput: Swift.Equatable {
    /// The Amazon Resource Names (ARNs) of the agents that are used to connect to the HDFS cluster.
    /// This member is required.
    public var agentArns: [Swift.String]?
    /// The type of authentication used to determine the identity of the user.
    /// This member is required.
    public var authenticationType: DataSyncClientTypes.HdfsAuthenticationType?
    /// The size of data blocks to write into the HDFS cluster. The block size must be a multiple of 512 bytes. The default block size is 128 mebibytes (MiB).
    public var blockSize: Swift.Int?
    /// The Kerberos key table (keytab) that contains mappings between the defined Kerberos principal and the encrypted keys. You can load the keytab from a file by providing the file's address. If you're using the CLI, it performs base64 encoding for you. Otherwise, provide the base64-encoded text. If KERBEROS is specified for AuthenticationType, this parameter is required.
    public var kerberosKeytab: ClientRuntime.Data?
    /// The krb5.conf file that contains the Kerberos configuration information. You can load the krb5.conf file by providing the file's address. If you're using the CLI, it performs the base64 encoding for you. Otherwise, provide the base64-encoded text. If KERBEROS is specified for AuthenticationType, this parameter is required.
    public var kerberosKrb5Conf: ClientRuntime.Data?
    /// The Kerberos principal with access to the files and folders on the HDFS cluster. If KERBEROS is specified for AuthenticationType, this parameter is required.
    public var kerberosPrincipal: Swift.String?
    /// The URI of the HDFS cluster's Key Management Server (KMS).
    public var kmsKeyProviderUri: Swift.String?
    /// The NameNode that manages the HDFS namespace. The NameNode performs operations such as opening, closing, and renaming files and directories. The NameNode contains the information to map blocks of data to the DataNodes. You can use only one NameNode.
    /// This member is required.
    public var nameNodes: [DataSyncClientTypes.HdfsNameNode]?
    /// The Quality of Protection (QOP) configuration specifies the Remote Procedure Call (RPC) and data transfer protection settings configured on the Hadoop Distributed File System (HDFS) cluster. If QopConfiguration isn't specified, RpcProtection and DataTransferProtection default to PRIVACY. If you set RpcProtection or DataTransferProtection, the other parameter assumes the same value.
    public var qopConfiguration: DataSyncClientTypes.QopConfiguration?
    /// The number of DataNodes to replicate the data to when writing to the HDFS cluster. By default, data is replicated to three DataNodes.
    public var replicationFactor: Swift.Int?
    /// The user name used to identify the client on the host operating system. If SIMPLE is specified for AuthenticationType, this parameter is required.
    public var simpleUser: Swift.String?
    /// A subdirectory in the HDFS cluster. This subdirectory is used to read data from or write data to the HDFS cluster. If the subdirectory isn't specified, it will default to /.
    public var subdirectory: Swift.String?
    /// The key-value pair that represents the tag that you want to add to the location. The value can be an empty string. We recommend using tags to name your resources.
    public var tags: [DataSyncClientTypes.TagListEntry]?

    public init (
        agentArns: [Swift.String]? = nil,
        authenticationType: DataSyncClientTypes.HdfsAuthenticationType? = nil,
        blockSize: Swift.Int? = nil,
        kerberosKeytab: ClientRuntime.Data? = nil,
        kerberosKrb5Conf: ClientRuntime.Data? = nil,
        kerberosPrincipal: Swift.String? = nil,
        kmsKeyProviderUri: Swift.String? = nil,
        nameNodes: [DataSyncClientTypes.HdfsNameNode]? = nil,
        qopConfiguration: DataSyncClientTypes.QopConfiguration? = nil,
        replicationFactor: Swift.Int? = nil,
        simpleUser: Swift.String? = nil,
        subdirectory: Swift.String? = nil,
        tags: [DataSyncClientTypes.TagListEntry]? = nil
    )
    {
        self.agentArns = agentArns
        self.authenticationType = authenticationType
        self.blockSize = blockSize
        self.kerberosKeytab = kerberosKeytab
        self.kerberosKrb5Conf = kerberosKrb5Conf
        self.kerberosPrincipal = kerberosPrincipal
        self.kmsKeyProviderUri = kmsKeyProviderUri
        self.nameNodes = nameNodes
        self.qopConfiguration = qopConfiguration
        self.replicationFactor = replicationFactor
        self.simpleUser = simpleUser
        self.subdirectory = subdirectory
        self.tags = tags
    }
}
