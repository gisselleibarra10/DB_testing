// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeAgentOutputResponseBody: Swift.Equatable {
    let agentArn: Swift.String?
    let name: Swift.String?
    let status: DataSyncClientTypes.AgentStatus?
    let lastConnectionTime: ClientRuntime.Date?
    let creationTime: ClientRuntime.Date?
    let endpointType: DataSyncClientTypes.EndpointType?
    let privateLinkConfig: DataSyncClientTypes.PrivateLinkConfig?
}

extension DescribeAgentOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case agentArn = "AgentArn"
        case creationTime = "CreationTime"
        case endpointType = "EndpointType"
        case lastConnectionTime = "LastConnectionTime"
        case name = "Name"
        case privateLinkConfig = "PrivateLinkConfig"
        case status = "Status"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let agentArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .agentArn)
        agentArn = agentArnDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let statusDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.AgentStatus.self, forKey: .status)
        status = statusDecoded
        let lastConnectionTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastConnectionTime)
        lastConnectionTime = lastConnectionTimeDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let endpointTypeDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.EndpointType.self, forKey: .endpointType)
        endpointType = endpointTypeDecoded
        let privateLinkConfigDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.PrivateLinkConfig.self, forKey: .privateLinkConfig)
        privateLinkConfig = privateLinkConfigDecoded
    }
}
