// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SageMakerClientTypes.LambdaStepMetadata: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "Arn"
        case outputParameters = "OutputParameters"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = self.arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let outputParameters = outputParameters {
            var outputParametersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .outputParameters)
            for outputparameterlist0 in outputParameters {
                try outputParametersContainer.encode(outputparameterlist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let outputParametersContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.OutputParameter?].self, forKey: .outputParameters)
        var outputParametersDecoded0:[SageMakerClientTypes.OutputParameter]? = nil
        if let outputParametersContainer = outputParametersContainer {
            outputParametersDecoded0 = [SageMakerClientTypes.OutputParameter]()
            for structure0 in outputParametersContainer {
                if let structure0 = structure0 {
                    outputParametersDecoded0?.append(structure0)
                }
            }
        }
        outputParameters = outputParametersDecoded0
    }
}
