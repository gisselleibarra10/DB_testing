// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateEdgeDeploymentPlanInputBody: Swift.Equatable {
    let edgeDeploymentPlanName: Swift.String?
    let modelConfigs: [SageMakerClientTypes.EdgeDeploymentModelConfig]?
    let deviceFleetName: Swift.String?
    let stages: [SageMakerClientTypes.DeploymentStage]?
    let tags: [SageMakerClientTypes.Tag]?
}

extension CreateEdgeDeploymentPlanInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deviceFleetName = "DeviceFleetName"
        case edgeDeploymentPlanName = "EdgeDeploymentPlanName"
        case modelConfigs = "ModelConfigs"
        case stages = "Stages"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let edgeDeploymentPlanNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .edgeDeploymentPlanName)
        edgeDeploymentPlanName = edgeDeploymentPlanNameDecoded
        let modelConfigsContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.EdgeDeploymentModelConfig?].self, forKey: .modelConfigs)
        var modelConfigsDecoded0:[SageMakerClientTypes.EdgeDeploymentModelConfig]? = nil
        if let modelConfigsContainer = modelConfigsContainer {
            modelConfigsDecoded0 = [SageMakerClientTypes.EdgeDeploymentModelConfig]()
            for structure0 in modelConfigsContainer {
                if let structure0 = structure0 {
                    modelConfigsDecoded0?.append(structure0)
                }
            }
        }
        modelConfigs = modelConfigsDecoded0
        let deviceFleetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deviceFleetName)
        deviceFleetName = deviceFleetNameDecoded
        let stagesContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.DeploymentStage?].self, forKey: .stages)
        var stagesDecoded0:[SageMakerClientTypes.DeploymentStage]? = nil
        if let stagesContainer = stagesContainer {
            stagesDecoded0 = [SageMakerClientTypes.DeploymentStage]()
            for structure0 in stagesContainer {
                if let structure0 = structure0 {
                    stagesDecoded0?.append(structure0)
                }
            }
        }
        stages = stagesDecoded0
        let tagsContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[SageMakerClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [SageMakerClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}
