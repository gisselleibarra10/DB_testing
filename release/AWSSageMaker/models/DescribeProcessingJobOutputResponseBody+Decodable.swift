// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeProcessingJobOutputResponseBody: Swift.Equatable {
    let processingInputs: [SageMakerClientTypes.ProcessingInput]?
    let processingOutputConfig: SageMakerClientTypes.ProcessingOutputConfig?
    let processingJobName: Swift.String?
    let processingResources: SageMakerClientTypes.ProcessingResources?
    let stoppingCondition: SageMakerClientTypes.ProcessingStoppingCondition?
    let appSpecification: SageMakerClientTypes.AppSpecification?
    let environment: [Swift.String:Swift.String]?
    let networkConfig: SageMakerClientTypes.NetworkConfig?
    let roleArn: Swift.String?
    let experimentConfig: SageMakerClientTypes.ExperimentConfig?
    let processingJobArn: Swift.String?
    let processingJobStatus: SageMakerClientTypes.ProcessingJobStatus?
    let exitMessage: Swift.String?
    let failureReason: Swift.String?
    let processingEndTime: ClientRuntime.Date?
    let processingStartTime: ClientRuntime.Date?
    let lastModifiedTime: ClientRuntime.Date?
    let creationTime: ClientRuntime.Date?
    let monitoringScheduleArn: Swift.String?
    let autoMLJobArn: Swift.String?
    let trainingJobArn: Swift.String?
}

extension DescribeProcessingJobOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case appSpecification = "AppSpecification"
        case autoMLJobArn = "AutoMLJobArn"
        case creationTime = "CreationTime"
        case environment = "Environment"
        case exitMessage = "ExitMessage"
        case experimentConfig = "ExperimentConfig"
        case failureReason = "FailureReason"
        case lastModifiedTime = "LastModifiedTime"
        case monitoringScheduleArn = "MonitoringScheduleArn"
        case networkConfig = "NetworkConfig"
        case processingEndTime = "ProcessingEndTime"
        case processingInputs = "ProcessingInputs"
        case processingJobArn = "ProcessingJobArn"
        case processingJobName = "ProcessingJobName"
        case processingJobStatus = "ProcessingJobStatus"
        case processingOutputConfig = "ProcessingOutputConfig"
        case processingResources = "ProcessingResources"
        case processingStartTime = "ProcessingStartTime"
        case roleArn = "RoleArn"
        case stoppingCondition = "StoppingCondition"
        case trainingJobArn = "TrainingJobArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let processingInputsContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.ProcessingInput?].self, forKey: .processingInputs)
        var processingInputsDecoded0:[SageMakerClientTypes.ProcessingInput]? = nil
        if let processingInputsContainer = processingInputsContainer {
            processingInputsDecoded0 = [SageMakerClientTypes.ProcessingInput]()
            for structure0 in processingInputsContainer {
                if let structure0 = structure0 {
                    processingInputsDecoded0?.append(structure0)
                }
            }
        }
        processingInputs = processingInputsDecoded0
        let processingOutputConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ProcessingOutputConfig.self, forKey: .processingOutputConfig)
        processingOutputConfig = processingOutputConfigDecoded
        let processingJobNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .processingJobName)
        processingJobName = processingJobNameDecoded
        let processingResourcesDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ProcessingResources.self, forKey: .processingResources)
        processingResources = processingResourcesDecoded
        let stoppingConditionDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ProcessingStoppingCondition.self, forKey: .stoppingCondition)
        stoppingCondition = stoppingConditionDecoded
        let appSpecificationDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.AppSpecification.self, forKey: .appSpecification)
        appSpecification = appSpecificationDecoded
        let environmentContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .environment)
        var environmentDecoded0: [Swift.String:Swift.String]? = nil
        if let environmentContainer = environmentContainer {
            environmentDecoded0 = [Swift.String:Swift.String]()
            for (key0, processingenvironmentvalue0) in environmentContainer {
                if let processingenvironmentvalue0 = processingenvironmentvalue0 {
                    environmentDecoded0?[key0] = processingenvironmentvalue0
                }
            }
        }
        environment = environmentDecoded0
        let networkConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.NetworkConfig.self, forKey: .networkConfig)
        networkConfig = networkConfigDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let experimentConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ExperimentConfig.self, forKey: .experimentConfig)
        experimentConfig = experimentConfigDecoded
        let processingJobArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .processingJobArn)
        processingJobArn = processingJobArnDecoded
        let processingJobStatusDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ProcessingJobStatus.self, forKey: .processingJobStatus)
        processingJobStatus = processingJobStatusDecoded
        let exitMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .exitMessage)
        exitMessage = exitMessageDecoded
        let failureReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .failureReason)
        failureReason = failureReasonDecoded
        let processingEndTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .processingEndTime)
        processingEndTime = processingEndTimeDecoded
        let processingStartTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .processingStartTime)
        processingStartTime = processingStartTimeDecoded
        let lastModifiedTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedTime)
        lastModifiedTime = lastModifiedTimeDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let monitoringScheduleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .monitoringScheduleArn)
        monitoringScheduleArn = monitoringScheduleArnDecoded
        let autoMLJobArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .autoMLJobArn)
        autoMLJobArn = autoMLJobArnDecoded
        let trainingJobArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .trainingJobArn)
        trainingJobArn = trainingJobArnDecoded
    }
}
