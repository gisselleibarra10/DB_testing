// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreatePipelineInputBody: Swift.Equatable {
    let pipelineName: Swift.String?
    let pipelineDisplayName: Swift.String?
    let pipelineDefinition: Swift.String?
    let pipelineDefinitionS3Location: SageMakerClientTypes.PipelineDefinitionS3Location?
    let pipelineDescription: Swift.String?
    let clientRequestToken: Swift.String?
    let roleArn: Swift.String?
    let tags: [SageMakerClientTypes.Tag]?
    let parallelismConfiguration: SageMakerClientTypes.ParallelismConfiguration?
}

extension CreatePipelineInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientRequestToken = "ClientRequestToken"
        case parallelismConfiguration = "ParallelismConfiguration"
        case pipelineDefinition = "PipelineDefinition"
        case pipelineDefinitionS3Location = "PipelineDefinitionS3Location"
        case pipelineDescription = "PipelineDescription"
        case pipelineDisplayName = "PipelineDisplayName"
        case pipelineName = "PipelineName"
        case roleArn = "RoleArn"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pipelineNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pipelineName)
        pipelineName = pipelineNameDecoded
        let pipelineDisplayNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pipelineDisplayName)
        pipelineDisplayName = pipelineDisplayNameDecoded
        let pipelineDefinitionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pipelineDefinition)
        pipelineDefinition = pipelineDefinitionDecoded
        let pipelineDefinitionS3LocationDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.PipelineDefinitionS3Location.self, forKey: .pipelineDefinitionS3Location)
        pipelineDefinitionS3Location = pipelineDefinitionS3LocationDecoded
        let pipelineDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pipelineDescription)
        pipelineDescription = pipelineDescriptionDecoded
        let clientRequestTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientRequestToken)
        clientRequestToken = clientRequestTokenDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let tagsContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[SageMakerClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [SageMakerClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let parallelismConfigurationDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ParallelismConfiguration.self, forKey: .parallelismConfiguration)
        parallelismConfiguration = parallelismConfigurationDecoded
    }
}
