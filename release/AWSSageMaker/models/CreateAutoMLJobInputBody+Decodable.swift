// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateAutoMLJobInputBody: Swift.Equatable {
    let autoMLJobName: Swift.String?
    let inputDataConfig: [SageMakerClientTypes.AutoMLChannel]?
    let outputDataConfig: SageMakerClientTypes.AutoMLOutputDataConfig?
    let problemType: SageMakerClientTypes.ProblemType?
    let autoMLJobObjective: SageMakerClientTypes.AutoMLJobObjective?
    let autoMLJobConfig: SageMakerClientTypes.AutoMLJobConfig?
    let roleArn: Swift.String?
    let generateCandidateDefinitionsOnly: Swift.Bool
    let tags: [SageMakerClientTypes.Tag]?
    let modelDeployConfig: SageMakerClientTypes.ModelDeployConfig?
}

extension CreateAutoMLJobInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case autoMLJobConfig = "AutoMLJobConfig"
        case autoMLJobName = "AutoMLJobName"
        case autoMLJobObjective = "AutoMLJobObjective"
        case generateCandidateDefinitionsOnly = "GenerateCandidateDefinitionsOnly"
        case inputDataConfig = "InputDataConfig"
        case modelDeployConfig = "ModelDeployConfig"
        case outputDataConfig = "OutputDataConfig"
        case problemType = "ProblemType"
        case roleArn = "RoleArn"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let autoMLJobNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .autoMLJobName)
        autoMLJobName = autoMLJobNameDecoded
        let inputDataConfigContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.AutoMLChannel?].self, forKey: .inputDataConfig)
        var inputDataConfigDecoded0:[SageMakerClientTypes.AutoMLChannel]? = nil
        if let inputDataConfigContainer = inputDataConfigContainer {
            inputDataConfigDecoded0 = [SageMakerClientTypes.AutoMLChannel]()
            for structure0 in inputDataConfigContainer {
                if let structure0 = structure0 {
                    inputDataConfigDecoded0?.append(structure0)
                }
            }
        }
        inputDataConfig = inputDataConfigDecoded0
        let outputDataConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.AutoMLOutputDataConfig.self, forKey: .outputDataConfig)
        outputDataConfig = outputDataConfigDecoded
        let problemTypeDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ProblemType.self, forKey: .problemType)
        problemType = problemTypeDecoded
        let autoMLJobObjectiveDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.AutoMLJobObjective.self, forKey: .autoMLJobObjective)
        autoMLJobObjective = autoMLJobObjectiveDecoded
        let autoMLJobConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.AutoMLJobConfig.self, forKey: .autoMLJobConfig)
        autoMLJobConfig = autoMLJobConfigDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let generateCandidateDefinitionsOnlyDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .generateCandidateDefinitionsOnly) ?? false
        generateCandidateDefinitionsOnly = generateCandidateDefinitionsOnlyDecoded
        let tagsContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[SageMakerClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [SageMakerClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let modelDeployConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ModelDeployConfig.self, forKey: .modelDeployConfig)
        modelDeployConfig = modelDeployConfigDecoded
    }
}
