// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct ListNotebookInstancesInput: Swift.Equatable {
    /// A filter that returns only notebook instances with associated with the specified git repository.
    public var additionalCodeRepositoryEquals: Swift.String?
    /// A filter that returns only notebook instances that were created after the specified time (timestamp).
    public var creationTimeAfter: ClientRuntime.Date?
    /// A filter that returns only notebook instances that were created before the specified time (timestamp).
    public var creationTimeBefore: ClientRuntime.Date?
    /// A string in the name or URL of a Git repository associated with this notebook instance. This filter returns only notebook instances associated with a git repository with a name that contains the specified string.
    public var defaultCodeRepositoryContains: Swift.String?
    /// A filter that returns only notebook instances that were modified after the specified time (timestamp).
    public var lastModifiedTimeAfter: ClientRuntime.Date?
    /// A filter that returns only notebook instances that were modified before the specified time (timestamp).
    public var lastModifiedTimeBefore: ClientRuntime.Date?
    /// The maximum number of notebook instances to return.
    public var maxResults: Swift.Int?
    /// A string in the notebook instances' name. This filter returns only notebook instances whose name contains the specified string.
    public var nameContains: Swift.String?
    /// If the previous call to the ListNotebookInstances is truncated, the response includes a NextToken. You can use this token in your subsequent ListNotebookInstances request to fetch the next set of notebook instances. You might specify a filter or a sort order in your request. When response is truncated, you must use the same values for the filer and sort order in the next request.
    public var nextToken: Swift.String?
    /// A string in the name of a notebook instances lifecycle configuration associated with this notebook instance. This filter returns only notebook instances associated with a lifecycle configuration with a name that contains the specified string.
    public var notebookInstanceLifecycleConfigNameContains: Swift.String?
    /// The field to sort results by. The default is Name.
    public var sortBy: SageMakerClientTypes.NotebookInstanceSortKey?
    /// The sort order for results.
    public var sortOrder: SageMakerClientTypes.NotebookInstanceSortOrder?
    /// A filter that returns only notebook instances with the specified status.
    public var statusEquals: SageMakerClientTypes.NotebookInstanceStatus?

    public init (
        additionalCodeRepositoryEquals: Swift.String? = nil,
        creationTimeAfter: ClientRuntime.Date? = nil,
        creationTimeBefore: ClientRuntime.Date? = nil,
        defaultCodeRepositoryContains: Swift.String? = nil,
        lastModifiedTimeAfter: ClientRuntime.Date? = nil,
        lastModifiedTimeBefore: ClientRuntime.Date? = nil,
        maxResults: Swift.Int? = nil,
        nameContains: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        notebookInstanceLifecycleConfigNameContains: Swift.String? = nil,
        sortBy: SageMakerClientTypes.NotebookInstanceSortKey? = nil,
        sortOrder: SageMakerClientTypes.NotebookInstanceSortOrder? = nil,
        statusEquals: SageMakerClientTypes.NotebookInstanceStatus? = nil
    )
    {
        self.additionalCodeRepositoryEquals = additionalCodeRepositoryEquals
        self.creationTimeAfter = creationTimeAfter
        self.creationTimeBefore = creationTimeBefore
        self.defaultCodeRepositoryContains = defaultCodeRepositoryContains
        self.lastModifiedTimeAfter = lastModifiedTimeAfter
        self.lastModifiedTimeBefore = lastModifiedTimeBefore
        self.maxResults = maxResults
        self.nameContains = nameContains
        self.nextToken = nextToken
        self.notebookInstanceLifecycleConfigNameContains = notebookInstanceLifecycleConfigNameContains
        self.sortBy = sortBy
        self.sortOrder = sortOrder
        self.statusEquals = statusEquals
    }
}
