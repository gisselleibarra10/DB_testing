// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeHyperParameterTuningJobOutputResponseBody: Swift.Equatable {
    let hyperParameterTuningJobName: Swift.String?
    let hyperParameterTuningJobArn: Swift.String?
    let hyperParameterTuningJobConfig: SageMakerClientTypes.HyperParameterTuningJobConfig?
    let trainingJobDefinition: SageMakerClientTypes.HyperParameterTrainingJobDefinition?
    let trainingJobDefinitions: [SageMakerClientTypes.HyperParameterTrainingJobDefinition]?
    let hyperParameterTuningJobStatus: SageMakerClientTypes.HyperParameterTuningJobStatus?
    let creationTime: ClientRuntime.Date?
    let hyperParameterTuningEndTime: ClientRuntime.Date?
    let lastModifiedTime: ClientRuntime.Date?
    let trainingJobStatusCounters: SageMakerClientTypes.TrainingJobStatusCounters?
    let objectiveStatusCounters: SageMakerClientTypes.ObjectiveStatusCounters?
    let bestTrainingJob: SageMakerClientTypes.HyperParameterTrainingJobSummary?
    let overallBestTrainingJob: SageMakerClientTypes.HyperParameterTrainingJobSummary?
    let warmStartConfig: SageMakerClientTypes.HyperParameterTuningJobWarmStartConfig?
    let failureReason: Swift.String?
}

extension DescribeHyperParameterTuningJobOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bestTrainingJob = "BestTrainingJob"
        case creationTime = "CreationTime"
        case failureReason = "FailureReason"
        case hyperParameterTuningEndTime = "HyperParameterTuningEndTime"
        case hyperParameterTuningJobArn = "HyperParameterTuningJobArn"
        case hyperParameterTuningJobConfig = "HyperParameterTuningJobConfig"
        case hyperParameterTuningJobName = "HyperParameterTuningJobName"
        case hyperParameterTuningJobStatus = "HyperParameterTuningJobStatus"
        case lastModifiedTime = "LastModifiedTime"
        case objectiveStatusCounters = "ObjectiveStatusCounters"
        case overallBestTrainingJob = "OverallBestTrainingJob"
        case trainingJobDefinition = "TrainingJobDefinition"
        case trainingJobDefinitions = "TrainingJobDefinitions"
        case trainingJobStatusCounters = "TrainingJobStatusCounters"
        case warmStartConfig = "WarmStartConfig"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let hyperParameterTuningJobNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .hyperParameterTuningJobName)
        hyperParameterTuningJobName = hyperParameterTuningJobNameDecoded
        let hyperParameterTuningJobArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .hyperParameterTuningJobArn)
        hyperParameterTuningJobArn = hyperParameterTuningJobArnDecoded
        let hyperParameterTuningJobConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.HyperParameterTuningJobConfig.self, forKey: .hyperParameterTuningJobConfig)
        hyperParameterTuningJobConfig = hyperParameterTuningJobConfigDecoded
        let trainingJobDefinitionDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.HyperParameterTrainingJobDefinition.self, forKey: .trainingJobDefinition)
        trainingJobDefinition = trainingJobDefinitionDecoded
        let trainingJobDefinitionsContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.HyperParameterTrainingJobDefinition?].self, forKey: .trainingJobDefinitions)
        var trainingJobDefinitionsDecoded0:[SageMakerClientTypes.HyperParameterTrainingJobDefinition]? = nil
        if let trainingJobDefinitionsContainer = trainingJobDefinitionsContainer {
            trainingJobDefinitionsDecoded0 = [SageMakerClientTypes.HyperParameterTrainingJobDefinition]()
            for structure0 in trainingJobDefinitionsContainer {
                if let structure0 = structure0 {
                    trainingJobDefinitionsDecoded0?.append(structure0)
                }
            }
        }
        trainingJobDefinitions = trainingJobDefinitionsDecoded0
        let hyperParameterTuningJobStatusDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.HyperParameterTuningJobStatus.self, forKey: .hyperParameterTuningJobStatus)
        hyperParameterTuningJobStatus = hyperParameterTuningJobStatusDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let hyperParameterTuningEndTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .hyperParameterTuningEndTime)
        hyperParameterTuningEndTime = hyperParameterTuningEndTimeDecoded
        let lastModifiedTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedTime)
        lastModifiedTime = lastModifiedTimeDecoded
        let trainingJobStatusCountersDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.TrainingJobStatusCounters.self, forKey: .trainingJobStatusCounters)
        trainingJobStatusCounters = trainingJobStatusCountersDecoded
        let objectiveStatusCountersDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ObjectiveStatusCounters.self, forKey: .objectiveStatusCounters)
        objectiveStatusCounters = objectiveStatusCountersDecoded
        let bestTrainingJobDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.HyperParameterTrainingJobSummary.self, forKey: .bestTrainingJob)
        bestTrainingJob = bestTrainingJobDecoded
        let overallBestTrainingJobDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.HyperParameterTrainingJobSummary.self, forKey: .overallBestTrainingJob)
        overallBestTrainingJob = overallBestTrainingJobDecoded
        let warmStartConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.HyperParameterTuningJobWarmStartConfig.self, forKey: .warmStartConfig)
        warmStartConfig = warmStartConfigDecoded
        let failureReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .failureReason)
        failureReason = failureReasonDecoded
    }
}
