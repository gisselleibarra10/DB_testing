// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeModelExplainabilityJobDefinitionOutputResponseBody: Swift.Equatable {
    let jobDefinitionArn: Swift.String?
    let jobDefinitionName: Swift.String?
    let creationTime: ClientRuntime.Date?
    let modelExplainabilityBaselineConfig: SageMakerClientTypes.ModelExplainabilityBaselineConfig?
    let modelExplainabilityAppSpecification: SageMakerClientTypes.ModelExplainabilityAppSpecification?
    let modelExplainabilityJobInput: SageMakerClientTypes.ModelExplainabilityJobInput?
    let modelExplainabilityJobOutputConfig: SageMakerClientTypes.MonitoringOutputConfig?
    let jobResources: SageMakerClientTypes.MonitoringResources?
    let networkConfig: SageMakerClientTypes.MonitoringNetworkConfig?
    let roleArn: Swift.String?
    let stoppingCondition: SageMakerClientTypes.MonitoringStoppingCondition?
}

extension DescribeModelExplainabilityJobDefinitionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTime = "CreationTime"
        case jobDefinitionArn = "JobDefinitionArn"
        case jobDefinitionName = "JobDefinitionName"
        case jobResources = "JobResources"
        case modelExplainabilityAppSpecification = "ModelExplainabilityAppSpecification"
        case modelExplainabilityBaselineConfig = "ModelExplainabilityBaselineConfig"
        case modelExplainabilityJobInput = "ModelExplainabilityJobInput"
        case modelExplainabilityJobOutputConfig = "ModelExplainabilityJobOutputConfig"
        case networkConfig = "NetworkConfig"
        case roleArn = "RoleArn"
        case stoppingCondition = "StoppingCondition"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobDefinitionArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobDefinitionArn)
        jobDefinitionArn = jobDefinitionArnDecoded
        let jobDefinitionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobDefinitionName)
        jobDefinitionName = jobDefinitionNameDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let modelExplainabilityBaselineConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ModelExplainabilityBaselineConfig.self, forKey: .modelExplainabilityBaselineConfig)
        modelExplainabilityBaselineConfig = modelExplainabilityBaselineConfigDecoded
        let modelExplainabilityAppSpecificationDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ModelExplainabilityAppSpecification.self, forKey: .modelExplainabilityAppSpecification)
        modelExplainabilityAppSpecification = modelExplainabilityAppSpecificationDecoded
        let modelExplainabilityJobInputDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ModelExplainabilityJobInput.self, forKey: .modelExplainabilityJobInput)
        modelExplainabilityJobInput = modelExplainabilityJobInputDecoded
        let modelExplainabilityJobOutputConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.MonitoringOutputConfig.self, forKey: .modelExplainabilityJobOutputConfig)
        modelExplainabilityJobOutputConfig = modelExplainabilityJobOutputConfigDecoded
        let jobResourcesDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.MonitoringResources.self, forKey: .jobResources)
        jobResources = jobResourcesDecoded
        let networkConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.MonitoringNetworkConfig.self, forKey: .networkConfig)
        networkConfig = networkConfigDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let stoppingConditionDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.MonitoringStoppingCondition.self, forKey: .stoppingCondition)
        stoppingCondition = stoppingConditionDecoded
    }
}
