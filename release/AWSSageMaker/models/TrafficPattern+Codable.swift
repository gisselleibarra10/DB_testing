// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SageMakerClientTypes.TrafficPattern: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case phases = "Phases"
        case trafficType = "TrafficType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let phases = phases {
            var phasesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .phases)
            for phases0 in phases {
                try phasesContainer.encode(phases0)
            }
        }
        if let trafficType = self.trafficType {
            try encodeContainer.encode(trafficType.rawValue, forKey: .trafficType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let trafficTypeDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.TrafficType.self, forKey: .trafficType)
        trafficType = trafficTypeDecoded
        let phasesContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.Phase?].self, forKey: .phases)
        var phasesDecoded0:[SageMakerClientTypes.Phase]? = nil
        if let phasesContainer = phasesContainer {
            phasesDecoded0 = [SageMakerClientTypes.Phase]()
            for structure0 in phasesContainer {
                if let structure0 = structure0 {
                    phasesDecoded0?.append(structure0)
                }
            }
        }
        phases = phasesDecoded0
    }
}
