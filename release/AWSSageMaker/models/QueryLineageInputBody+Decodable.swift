// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct QueryLineageInputBody: Swift.Equatable {
    let startArns: [Swift.String]?
    let direction: SageMakerClientTypes.Direction?
    let includeEdges: Swift.Bool
    let filters: SageMakerClientTypes.QueryFilters?
    let maxDepth: Swift.Int?
    let maxResults: Swift.Int?
    let nextToken: Swift.String?
}

extension QueryLineageInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case direction = "Direction"
        case filters = "Filters"
        case includeEdges = "IncludeEdges"
        case maxDepth = "MaxDepth"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case startArns = "StartArns"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let startArnsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .startArns)
        var startArnsDecoded0:[Swift.String]? = nil
        if let startArnsContainer = startArnsContainer {
            startArnsDecoded0 = [Swift.String]()
            for string0 in startArnsContainer {
                if let string0 = string0 {
                    startArnsDecoded0?.append(string0)
                }
            }
        }
        startArns = startArnsDecoded0
        let directionDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.Direction.self, forKey: .direction)
        direction = directionDecoded
        let includeEdgesDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .includeEdges) ?? false
        includeEdges = includeEdgesDecoded
        let filtersDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.QueryFilters.self, forKey: .filters)
        filters = filtersDecoded
        let maxDepthDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxDepth)
        maxDepth = maxDepthDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
