// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateAlgorithmInputBody: Swift.Equatable {
    let algorithmName: Swift.String?
    let algorithmDescription: Swift.String?
    let trainingSpecification: SageMakerClientTypes.TrainingSpecification?
    let inferenceSpecification: SageMakerClientTypes.InferenceSpecification?
    let validationSpecification: SageMakerClientTypes.AlgorithmValidationSpecification?
    let certifyForMarketplace: Swift.Bool
    let tags: [SageMakerClientTypes.Tag]?
}

extension CreateAlgorithmInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case algorithmDescription = "AlgorithmDescription"
        case algorithmName = "AlgorithmName"
        case certifyForMarketplace = "CertifyForMarketplace"
        case inferenceSpecification = "InferenceSpecification"
        case tags = "Tags"
        case trainingSpecification = "TrainingSpecification"
        case validationSpecification = "ValidationSpecification"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let algorithmNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .algorithmName)
        algorithmName = algorithmNameDecoded
        let algorithmDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .algorithmDescription)
        algorithmDescription = algorithmDescriptionDecoded
        let trainingSpecificationDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.TrainingSpecification.self, forKey: .trainingSpecification)
        trainingSpecification = trainingSpecificationDecoded
        let inferenceSpecificationDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.InferenceSpecification.self, forKey: .inferenceSpecification)
        inferenceSpecification = inferenceSpecificationDecoded
        let validationSpecificationDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.AlgorithmValidationSpecification.self, forKey: .validationSpecification)
        validationSpecification = validationSpecificationDecoded
        let certifyForMarketplaceDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .certifyForMarketplace) ?? false
        certifyForMarketplace = certifyForMarketplaceDecoded
        let tagsContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[SageMakerClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [SageMakerClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}
