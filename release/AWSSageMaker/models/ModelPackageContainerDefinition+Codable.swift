// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SageMakerClientTypes.ModelPackageContainerDefinition: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case containerHostname = "ContainerHostname"
        case environment = "Environment"
        case framework = "Framework"
        case frameworkVersion = "FrameworkVersion"
        case image = "Image"
        case imageDigest = "ImageDigest"
        case modelDataUrl = "ModelDataUrl"
        case modelInput = "ModelInput"
        case nearestModelName = "NearestModelName"
        case productId = "ProductId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let containerHostname = self.containerHostname {
            try encodeContainer.encode(containerHostname, forKey: .containerHostname)
        }
        if let environment = environment {
            var environmentContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .environment)
            for (dictKey0, environmentmap0) in environment {
                try environmentContainer.encode(environmentmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let framework = self.framework {
            try encodeContainer.encode(framework, forKey: .framework)
        }
        if let frameworkVersion = self.frameworkVersion {
            try encodeContainer.encode(frameworkVersion, forKey: .frameworkVersion)
        }
        if let image = self.image {
            try encodeContainer.encode(image, forKey: .image)
        }
        if let imageDigest = self.imageDigest {
            try encodeContainer.encode(imageDigest, forKey: .imageDigest)
        }
        if let modelDataUrl = self.modelDataUrl {
            try encodeContainer.encode(modelDataUrl, forKey: .modelDataUrl)
        }
        if let modelInput = self.modelInput {
            try encodeContainer.encode(modelInput, forKey: .modelInput)
        }
        if let nearestModelName = self.nearestModelName {
            try encodeContainer.encode(nearestModelName, forKey: .nearestModelName)
        }
        if let productId = self.productId {
            try encodeContainer.encode(productId, forKey: .productId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let containerHostnameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .containerHostname)
        containerHostname = containerHostnameDecoded
        let imageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .image)
        image = imageDecoded
        let imageDigestDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .imageDigest)
        imageDigest = imageDigestDecoded
        let modelDataUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelDataUrl)
        modelDataUrl = modelDataUrlDecoded
        let productIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .productId)
        productId = productIdDecoded
        let environmentContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .environment)
        var environmentDecoded0: [Swift.String:Swift.String]? = nil
        if let environmentContainer = environmentContainer {
            environmentDecoded0 = [Swift.String:Swift.String]()
            for (key0, environmentvalue0) in environmentContainer {
                if let environmentvalue0 = environmentvalue0 {
                    environmentDecoded0?[key0] = environmentvalue0
                }
            }
        }
        environment = environmentDecoded0
        let modelInputDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ModelInput.self, forKey: .modelInput)
        modelInput = modelInputDecoded
        let frameworkDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .framework)
        framework = frameworkDecoded
        let frameworkVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .frameworkVersion)
        frameworkVersion = frameworkVersionDecoded
        let nearestModelNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nearestModelName)
        nearestModelName = nearestModelNameDecoded
    }
}
