// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SageMakerClientTypes.PipelineExecution: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createdBy = "CreatedBy"
        case creationTime = "CreationTime"
        case failureReason = "FailureReason"
        case lastModifiedBy = "LastModifiedBy"
        case lastModifiedTime = "LastModifiedTime"
        case parallelismConfiguration = "ParallelismConfiguration"
        case pipelineArn = "PipelineArn"
        case pipelineExecutionArn = "PipelineExecutionArn"
        case pipelineExecutionDescription = "PipelineExecutionDescription"
        case pipelineExecutionDisplayName = "PipelineExecutionDisplayName"
        case pipelineExecutionStatus = "PipelineExecutionStatus"
        case pipelineExperimentConfig = "PipelineExperimentConfig"
        case pipelineParameters = "PipelineParameters"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let createdBy = self.createdBy {
            try encodeContainer.encode(createdBy, forKey: .createdBy)
        }
        if let creationTime = self.creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let failureReason = self.failureReason {
            try encodeContainer.encode(failureReason, forKey: .failureReason)
        }
        if let lastModifiedBy = self.lastModifiedBy {
            try encodeContainer.encode(lastModifiedBy, forKey: .lastModifiedBy)
        }
        if let lastModifiedTime = self.lastModifiedTime {
            try encodeContainer.encode(lastModifiedTime.timeIntervalSince1970, forKey: .lastModifiedTime)
        }
        if let parallelismConfiguration = self.parallelismConfiguration {
            try encodeContainer.encode(parallelismConfiguration, forKey: .parallelismConfiguration)
        }
        if let pipelineArn = self.pipelineArn {
            try encodeContainer.encode(pipelineArn, forKey: .pipelineArn)
        }
        if let pipelineExecutionArn = self.pipelineExecutionArn {
            try encodeContainer.encode(pipelineExecutionArn, forKey: .pipelineExecutionArn)
        }
        if let pipelineExecutionDescription = self.pipelineExecutionDescription {
            try encodeContainer.encode(pipelineExecutionDescription, forKey: .pipelineExecutionDescription)
        }
        if let pipelineExecutionDisplayName = self.pipelineExecutionDisplayName {
            try encodeContainer.encode(pipelineExecutionDisplayName, forKey: .pipelineExecutionDisplayName)
        }
        if let pipelineExecutionStatus = self.pipelineExecutionStatus {
            try encodeContainer.encode(pipelineExecutionStatus.rawValue, forKey: .pipelineExecutionStatus)
        }
        if let pipelineExperimentConfig = self.pipelineExperimentConfig {
            try encodeContainer.encode(pipelineExperimentConfig, forKey: .pipelineExperimentConfig)
        }
        if let pipelineParameters = pipelineParameters {
            var pipelineParametersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .pipelineParameters)
            for parameterlist0 in pipelineParameters {
                try pipelineParametersContainer.encode(parameterlist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pipelineArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pipelineArn)
        pipelineArn = pipelineArnDecoded
        let pipelineExecutionArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pipelineExecutionArn)
        pipelineExecutionArn = pipelineExecutionArnDecoded
        let pipelineExecutionDisplayNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pipelineExecutionDisplayName)
        pipelineExecutionDisplayName = pipelineExecutionDisplayNameDecoded
        let pipelineExecutionStatusDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.PipelineExecutionStatus.self, forKey: .pipelineExecutionStatus)
        pipelineExecutionStatus = pipelineExecutionStatusDecoded
        let pipelineExecutionDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pipelineExecutionDescription)
        pipelineExecutionDescription = pipelineExecutionDescriptionDecoded
        let pipelineExperimentConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.PipelineExperimentConfig.self, forKey: .pipelineExperimentConfig)
        pipelineExperimentConfig = pipelineExperimentConfigDecoded
        let failureReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .failureReason)
        failureReason = failureReasonDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let lastModifiedTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedTime)
        lastModifiedTime = lastModifiedTimeDecoded
        let createdByDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.UserContext.self, forKey: .createdBy)
        createdBy = createdByDecoded
        let lastModifiedByDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.UserContext.self, forKey: .lastModifiedBy)
        lastModifiedBy = lastModifiedByDecoded
        let parallelismConfigurationDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ParallelismConfiguration.self, forKey: .parallelismConfiguration)
        parallelismConfiguration = parallelismConfigurationDecoded
        let pipelineParametersContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.Parameter?].self, forKey: .pipelineParameters)
        var pipelineParametersDecoded0:[SageMakerClientTypes.Parameter]? = nil
        if let pipelineParametersContainer = pipelineParametersContainer {
            pipelineParametersDecoded0 = [SageMakerClientTypes.Parameter]()
            for structure0 in pipelineParametersContainer {
                if let structure0 = structure0 {
                    pipelineParametersDecoded0?.append(structure0)
                }
            }
        }
        pipelineParameters = pipelineParametersDecoded0
    }
}
