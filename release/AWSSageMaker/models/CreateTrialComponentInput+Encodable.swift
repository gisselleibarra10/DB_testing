// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CreateTrialComponentInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case displayName = "DisplayName"
        case endTime = "EndTime"
        case inputArtifacts = "InputArtifacts"
        case metadataProperties = "MetadataProperties"
        case outputArtifacts = "OutputArtifacts"
        case parameters = "Parameters"
        case startTime = "StartTime"
        case status = "Status"
        case tags = "Tags"
        case trialComponentName = "TrialComponentName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let displayName = self.displayName {
            try encodeContainer.encode(displayName, forKey: .displayName)
        }
        if let endTime = self.endTime {
            try encodeContainer.encode(endTime.timeIntervalSince1970, forKey: .endTime)
        }
        if let inputArtifacts = inputArtifacts {
            var inputArtifactsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .inputArtifacts)
            for (dictKey0, trialcomponentartifacts0) in inputArtifacts {
                try inputArtifactsContainer.encode(trialcomponentartifacts0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let metadataProperties = self.metadataProperties {
            try encodeContainer.encode(metadataProperties, forKey: .metadataProperties)
        }
        if let outputArtifacts = outputArtifacts {
            var outputArtifactsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .outputArtifacts)
            for (dictKey0, trialcomponentartifacts0) in outputArtifacts {
                try outputArtifactsContainer.encode(trialcomponentartifacts0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let parameters = parameters {
            var parametersContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .parameters)
            for (dictKey0, trialcomponentparameters0) in parameters {
                try parametersContainer.encode(trialcomponentparameters0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let startTime = self.startTime {
            try encodeContainer.encode(startTime.timeIntervalSince1970, forKey: .startTime)
        }
        if let status = self.status {
            try encodeContainer.encode(status, forKey: .status)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
        if let trialComponentName = self.trialComponentName {
            try encodeContainer.encode(trialComponentName, forKey: .trialComponentName)
        }
    }
}
