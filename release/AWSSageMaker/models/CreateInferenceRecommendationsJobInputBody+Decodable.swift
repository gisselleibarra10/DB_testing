// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateInferenceRecommendationsJobInputBody: Swift.Equatable {
    let jobName: Swift.String?
    let jobType: SageMakerClientTypes.RecommendationJobType?
    let roleArn: Swift.String?
    let inputConfig: SageMakerClientTypes.RecommendationJobInputConfig?
    let jobDescription: Swift.String?
    let stoppingConditions: SageMakerClientTypes.RecommendationJobStoppingConditions?
    let outputConfig: SageMakerClientTypes.RecommendationJobOutputConfig?
    let tags: [SageMakerClientTypes.Tag]?
}

extension CreateInferenceRecommendationsJobInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case inputConfig = "InputConfig"
        case jobDescription = "JobDescription"
        case jobName = "JobName"
        case jobType = "JobType"
        case outputConfig = "OutputConfig"
        case roleArn = "RoleArn"
        case stoppingConditions = "StoppingConditions"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobName)
        jobName = jobNameDecoded
        let jobTypeDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.RecommendationJobType.self, forKey: .jobType)
        jobType = jobTypeDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let inputConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.RecommendationJobInputConfig.self, forKey: .inputConfig)
        inputConfig = inputConfigDecoded
        let jobDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobDescription)
        jobDescription = jobDescriptionDecoded
        let stoppingConditionsDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.RecommendationJobStoppingConditions.self, forKey: .stoppingConditions)
        stoppingConditions = stoppingConditionsDecoded
        let outputConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.RecommendationJobOutputConfig.self, forKey: .outputConfig)
        outputConfig = outputConfigDecoded
        let tagsContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[SageMakerClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [SageMakerClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}
