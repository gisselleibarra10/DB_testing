// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SageMakerClientTypes.AppSpecification: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case containerArguments = "ContainerArguments"
        case containerEntrypoint = "ContainerEntrypoint"
        case imageUri = "ImageUri"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let containerArguments = containerArguments {
            var containerArgumentsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .containerArguments)
            for containerarguments0 in containerArguments {
                try containerArgumentsContainer.encode(containerarguments0)
            }
        }
        if let containerEntrypoint = containerEntrypoint {
            var containerEntrypointContainer = encodeContainer.nestedUnkeyedContainer(forKey: .containerEntrypoint)
            for containerentrypoint0 in containerEntrypoint {
                try containerEntrypointContainer.encode(containerentrypoint0)
            }
        }
        if let imageUri = self.imageUri {
            try encodeContainer.encode(imageUri, forKey: .imageUri)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let imageUriDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .imageUri)
        imageUri = imageUriDecoded
        let containerEntrypointContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .containerEntrypoint)
        var containerEntrypointDecoded0:[Swift.String]? = nil
        if let containerEntrypointContainer = containerEntrypointContainer {
            containerEntrypointDecoded0 = [Swift.String]()
            for string0 in containerEntrypointContainer {
                if let string0 = string0 {
                    containerEntrypointDecoded0?.append(string0)
                }
            }
        }
        containerEntrypoint = containerEntrypointDecoded0
        let containerArgumentsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .containerArguments)
        var containerArgumentsDecoded0:[Swift.String]? = nil
        if let containerArgumentsContainer = containerArgumentsContainer {
            containerArgumentsDecoded0 = [Swift.String]()
            for string0 in containerArgumentsContainer {
                if let string0 = string0 {
                    containerArgumentsDecoded0?.append(string0)
                }
            }
        }
        containerArguments = containerArgumentsDecoded0
    }
}
