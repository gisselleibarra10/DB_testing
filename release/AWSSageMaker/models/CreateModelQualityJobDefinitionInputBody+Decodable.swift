// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateModelQualityJobDefinitionInputBody: Swift.Equatable {
    let jobDefinitionName: Swift.String?
    let modelQualityBaselineConfig: SageMakerClientTypes.ModelQualityBaselineConfig?
    let modelQualityAppSpecification: SageMakerClientTypes.ModelQualityAppSpecification?
    let modelQualityJobInput: SageMakerClientTypes.ModelQualityJobInput?
    let modelQualityJobOutputConfig: SageMakerClientTypes.MonitoringOutputConfig?
    let jobResources: SageMakerClientTypes.MonitoringResources?
    let networkConfig: SageMakerClientTypes.MonitoringNetworkConfig?
    let roleArn: Swift.String?
    let stoppingCondition: SageMakerClientTypes.MonitoringStoppingCondition?
    let tags: [SageMakerClientTypes.Tag]?
}

extension CreateModelQualityJobDefinitionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobDefinitionName = "JobDefinitionName"
        case jobResources = "JobResources"
        case modelQualityAppSpecification = "ModelQualityAppSpecification"
        case modelQualityBaselineConfig = "ModelQualityBaselineConfig"
        case modelQualityJobInput = "ModelQualityJobInput"
        case modelQualityJobOutputConfig = "ModelQualityJobOutputConfig"
        case networkConfig = "NetworkConfig"
        case roleArn = "RoleArn"
        case stoppingCondition = "StoppingCondition"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobDefinitionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobDefinitionName)
        jobDefinitionName = jobDefinitionNameDecoded
        let modelQualityBaselineConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ModelQualityBaselineConfig.self, forKey: .modelQualityBaselineConfig)
        modelQualityBaselineConfig = modelQualityBaselineConfigDecoded
        let modelQualityAppSpecificationDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ModelQualityAppSpecification.self, forKey: .modelQualityAppSpecification)
        modelQualityAppSpecification = modelQualityAppSpecificationDecoded
        let modelQualityJobInputDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ModelQualityJobInput.self, forKey: .modelQualityJobInput)
        modelQualityJobInput = modelQualityJobInputDecoded
        let modelQualityJobOutputConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.MonitoringOutputConfig.self, forKey: .modelQualityJobOutputConfig)
        modelQualityJobOutputConfig = modelQualityJobOutputConfigDecoded
        let jobResourcesDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.MonitoringResources.self, forKey: .jobResources)
        jobResources = jobResourcesDecoded
        let networkConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.MonitoringNetworkConfig.self, forKey: .networkConfig)
        networkConfig = networkConfigDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let stoppingConditionDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.MonitoringStoppingCondition.self, forKey: .stoppingCondition)
        stoppingCondition = stoppingConditionDecoded
        let tagsContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[SageMakerClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [SageMakerClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}
