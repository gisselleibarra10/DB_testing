// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension SageMakerClientTypes {
    /// Specifies the training algorithm to use in a [CreateTrainingJob] request. For more information about algorithms provided by SageMaker, see [Algorithms](https://docs.aws.amazon.com/sagemaker/latest/dg/algos.html). For information about using your own algorithms, see [Using Your Own Algorithms with Amazon SageMaker](https://docs.aws.amazon.com/sagemaker/latest/dg/your-algorithms.html).
    public struct AlgorithmSpecification: Swift.Equatable {
        /// The name of the algorithm resource to use for the training job. This must be an algorithm resource that you created or subscribe to on Amazon Web Services Marketplace. You must specify either the algorithm name to the AlgorithmName parameter or the image URI of the algorithm container to the TrainingImage parameter. Note that the AlgorithmName parameter is mutually exclusive with the TrainingImage parameter. If you specify a value for the AlgorithmName parameter, you can't specify a value for TrainingImage, and vice versa. If you specify values for both parameters, the training job might break; if you don't specify any value for both parameters, the training job might raise a null error.
        public var algorithmName: Swift.String?
        /// To generate and save time-series metrics during training, set to true. The default is false and time-series metrics aren't generated except in the following cases:
        ///
        /// * You use one of the SageMaker built-in algorithms
        ///
        /// * You use one of the following [Prebuilt SageMaker Docker Images](https://docs.aws.amazon.com/sagemaker/latest/dg/pre-built-containers-frameworks-deep-learning.html):
        ///
        /// * Tensorflow (version >= 1.15)
        ///
        /// * MXNet (version >= 1.6)
        ///
        /// * PyTorch (version >= 1.3)
        ///
        ///
        ///
        ///
        /// * You specify at least one [MetricDefinition]
        public var enableSageMakerMetricsTimeSeries: Swift.Bool
        /// A list of metric definition objects. Each object specifies the metric name and regular expressions used to parse algorithm logs. SageMaker publishes each metric to Amazon CloudWatch.
        public var metricDefinitions: [SageMakerClientTypes.MetricDefinition]?
        /// The registry path of the Docker image that contains the training algorithm. For information about docker registry paths for SageMaker built-in algorithms, see [Docker Registry Paths and Example Code](https://docs.aws.amazon.com/sagemaker/latest/dg/sagemaker-algo-docker-registry-paths.html) in the Amazon SageMaker developer guide. SageMaker supports both registry/repository[:tag] and registry/repository[@digest] image path formats. For more information about using your custom training container, see [Using Your Own Algorithms with Amazon SageMaker](https://docs.aws.amazon.com/sagemaker/latest/dg/your-algorithms.html). You must specify either the algorithm name to the AlgorithmName parameter or the image URI of the algorithm container to the TrainingImage parameter. For more information, see the note in the AlgorithmName parameter description.
        public var trainingImage: Swift.String?
        /// The training input mode that the algorithm supports. For more information about input modes, see [Algorithms](https://docs.aws.amazon.com/sagemaker/latest/dg/algos.html). Pipe mode If an algorithm supports Pipe mode, Amazon SageMaker streams data directly from Amazon S3 to the container. File mode If an algorithm supports File mode, SageMaker downloads the training data from S3 to the provisioned ML storage volume, and mounts the directory to the Docker volume for the training container. You must provision the ML storage volume with sufficient capacity to accommodate the data downloaded from S3. In addition to the training data, the ML storage volume also stores the output model. The algorithm container uses the ML storage volume to also store intermediate information, if any. For distributed algorithms, training data is distributed uniformly. Your training duration is predictable if the input data objects sizes are approximately the same. SageMaker does not split the files any further for model training. If the object sizes are skewed, training won't be optimal as the data distribution is also skewed when one host in a training cluster is overloaded, thus becoming a bottleneck in training. FastFile mode If an algorithm supports FastFile mode, SageMaker streams data directly from S3 to the container with no code changes, and provides file system access to the data. Users can author their training script to interact with these files as if they were stored on disk. FastFile mode works best when the data is read sequentially. Augmented manifest files aren't supported. The startup time is lower when there are fewer files in the S3 bucket provided.
        /// This member is required.
        public var trainingInputMode: SageMakerClientTypes.TrainingInputMode?

        public init (
            algorithmName: Swift.String? = nil,
            enableSageMakerMetricsTimeSeries: Swift.Bool = false,
            metricDefinitions: [SageMakerClientTypes.MetricDefinition]? = nil,
            trainingImage: Swift.String? = nil,
            trainingInputMode: SageMakerClientTypes.TrainingInputMode? = nil
        )
        {
            self.algorithmName = algorithmName
            self.enableSageMakerMetricsTimeSeries = enableSageMakerMetricsTimeSeries
            self.metricDefinitions = metricDefinitions
            self.trainingImage = trainingImage
            self.trainingInputMode = trainingInputMode
        }
    }

}
