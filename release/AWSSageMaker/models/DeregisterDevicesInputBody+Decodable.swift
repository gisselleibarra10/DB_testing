// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DeregisterDevicesInputBody: Swift.Equatable {
    let deviceFleetName: Swift.String?
    let deviceNames: [Swift.String]?
}

extension DeregisterDevicesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deviceFleetName = "DeviceFleetName"
        case deviceNames = "DeviceNames"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deviceFleetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deviceFleetName)
        deviceFleetName = deviceFleetNameDecoded
        let deviceNamesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .deviceNames)
        var deviceNamesDecoded0:[Swift.String]? = nil
        if let deviceNamesContainer = deviceNamesContainer {
            deviceNamesDecoded0 = [Swift.String]()
            for string0 in deviceNamesContainer {
                if let string0 = string0 {
                    deviceNamesDecoded0?.append(string0)
                }
            }
        }
        deviceNames = deviceNamesDecoded0
    }
}
