// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeCompilationJobOutputResponseBody: Swift.Equatable {
    let compilationJobName: Swift.String?
    let compilationJobArn: Swift.String?
    let compilationJobStatus: SageMakerClientTypes.CompilationJobStatus?
    let compilationStartTime: ClientRuntime.Date?
    let compilationEndTime: ClientRuntime.Date?
    let stoppingCondition: SageMakerClientTypes.StoppingCondition?
    let inferenceImage: Swift.String?
    let modelPackageVersionArn: Swift.String?
    let creationTime: ClientRuntime.Date?
    let lastModifiedTime: ClientRuntime.Date?
    let failureReason: Swift.String?
    let modelArtifacts: SageMakerClientTypes.ModelArtifacts?
    let modelDigests: SageMakerClientTypes.ModelDigests?
    let roleArn: Swift.String?
    let inputConfig: SageMakerClientTypes.InputConfig?
    let outputConfig: SageMakerClientTypes.OutputConfig?
    let vpcConfig: SageMakerClientTypes.NeoVpcConfig?
}

extension DescribeCompilationJobOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case compilationEndTime = "CompilationEndTime"
        case compilationJobArn = "CompilationJobArn"
        case compilationJobName = "CompilationJobName"
        case compilationJobStatus = "CompilationJobStatus"
        case compilationStartTime = "CompilationStartTime"
        case creationTime = "CreationTime"
        case failureReason = "FailureReason"
        case inferenceImage = "InferenceImage"
        case inputConfig = "InputConfig"
        case lastModifiedTime = "LastModifiedTime"
        case modelArtifacts = "ModelArtifacts"
        case modelDigests = "ModelDigests"
        case modelPackageVersionArn = "ModelPackageVersionArn"
        case outputConfig = "OutputConfig"
        case roleArn = "RoleArn"
        case stoppingCondition = "StoppingCondition"
        case vpcConfig = "VpcConfig"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let compilationJobNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .compilationJobName)
        compilationJobName = compilationJobNameDecoded
        let compilationJobArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .compilationJobArn)
        compilationJobArn = compilationJobArnDecoded
        let compilationJobStatusDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.CompilationJobStatus.self, forKey: .compilationJobStatus)
        compilationJobStatus = compilationJobStatusDecoded
        let compilationStartTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .compilationStartTime)
        compilationStartTime = compilationStartTimeDecoded
        let compilationEndTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .compilationEndTime)
        compilationEndTime = compilationEndTimeDecoded
        let stoppingConditionDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.StoppingCondition.self, forKey: .stoppingCondition)
        stoppingCondition = stoppingConditionDecoded
        let inferenceImageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .inferenceImage)
        inferenceImage = inferenceImageDecoded
        let modelPackageVersionArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelPackageVersionArn)
        modelPackageVersionArn = modelPackageVersionArnDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let lastModifiedTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedTime)
        lastModifiedTime = lastModifiedTimeDecoded
        let failureReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .failureReason)
        failureReason = failureReasonDecoded
        let modelArtifactsDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ModelArtifacts.self, forKey: .modelArtifacts)
        modelArtifacts = modelArtifactsDecoded
        let modelDigestsDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ModelDigests.self, forKey: .modelDigests)
        modelDigests = modelDigestsDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let inputConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.InputConfig.self, forKey: .inputConfig)
        inputConfig = inputConfigDecoded
        let outputConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.OutputConfig.self, forKey: .outputConfig)
        outputConfig = outputConfigDecoded
        let vpcConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.NeoVpcConfig.self, forKey: .vpcConfig)
        vpcConfig = vpcConfigDecoded
    }
}
