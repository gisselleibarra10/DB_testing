// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SageMakerClientTypes.TransformJob: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case autoMLJobArn = "AutoMLJobArn"
        case batchStrategy = "BatchStrategy"
        case creationTime = "CreationTime"
        case dataProcessing = "DataProcessing"
        case environment = "Environment"
        case experimentConfig = "ExperimentConfig"
        case failureReason = "FailureReason"
        case labelingJobArn = "LabelingJobArn"
        case maxConcurrentTransforms = "MaxConcurrentTransforms"
        case maxPayloadInMB = "MaxPayloadInMB"
        case modelClientConfig = "ModelClientConfig"
        case modelName = "ModelName"
        case tags = "Tags"
        case transformEndTime = "TransformEndTime"
        case transformInput = "TransformInput"
        case transformJobArn = "TransformJobArn"
        case transformJobName = "TransformJobName"
        case transformJobStatus = "TransformJobStatus"
        case transformOutput = "TransformOutput"
        case transformResources = "TransformResources"
        case transformStartTime = "TransformStartTime"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let autoMLJobArn = self.autoMLJobArn {
            try encodeContainer.encode(autoMLJobArn, forKey: .autoMLJobArn)
        }
        if let batchStrategy = self.batchStrategy {
            try encodeContainer.encode(batchStrategy.rawValue, forKey: .batchStrategy)
        }
        if let creationTime = self.creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let dataProcessing = self.dataProcessing {
            try encodeContainer.encode(dataProcessing, forKey: .dataProcessing)
        }
        if let environment = environment {
            var environmentContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .environment)
            for (dictKey0, transformenvironmentmap0) in environment {
                try environmentContainer.encode(transformenvironmentmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let experimentConfig = self.experimentConfig {
            try encodeContainer.encode(experimentConfig, forKey: .experimentConfig)
        }
        if let failureReason = self.failureReason {
            try encodeContainer.encode(failureReason, forKey: .failureReason)
        }
        if let labelingJobArn = self.labelingJobArn {
            try encodeContainer.encode(labelingJobArn, forKey: .labelingJobArn)
        }
        if let maxConcurrentTransforms = self.maxConcurrentTransforms {
            try encodeContainer.encode(maxConcurrentTransforms, forKey: .maxConcurrentTransforms)
        }
        if let maxPayloadInMB = self.maxPayloadInMB {
            try encodeContainer.encode(maxPayloadInMB, forKey: .maxPayloadInMB)
        }
        if let modelClientConfig = self.modelClientConfig {
            try encodeContainer.encode(modelClientConfig, forKey: .modelClientConfig)
        }
        if let modelName = self.modelName {
            try encodeContainer.encode(modelName, forKey: .modelName)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
        if let transformEndTime = self.transformEndTime {
            try encodeContainer.encode(transformEndTime.timeIntervalSince1970, forKey: .transformEndTime)
        }
        if let transformInput = self.transformInput {
            try encodeContainer.encode(transformInput, forKey: .transformInput)
        }
        if let transformJobArn = self.transformJobArn {
            try encodeContainer.encode(transformJobArn, forKey: .transformJobArn)
        }
        if let transformJobName = self.transformJobName {
            try encodeContainer.encode(transformJobName, forKey: .transformJobName)
        }
        if let transformJobStatus = self.transformJobStatus {
            try encodeContainer.encode(transformJobStatus.rawValue, forKey: .transformJobStatus)
        }
        if let transformOutput = self.transformOutput {
            try encodeContainer.encode(transformOutput, forKey: .transformOutput)
        }
        if let transformResources = self.transformResources {
            try encodeContainer.encode(transformResources, forKey: .transformResources)
        }
        if let transformStartTime = self.transformStartTime {
            try encodeContainer.encode(transformStartTime.timeIntervalSince1970, forKey: .transformStartTime)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let transformJobNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .transformJobName)
        transformJobName = transformJobNameDecoded
        let transformJobArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .transformJobArn)
        transformJobArn = transformJobArnDecoded
        let transformJobStatusDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.TransformJobStatus.self, forKey: .transformJobStatus)
        transformJobStatus = transformJobStatusDecoded
        let failureReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .failureReason)
        failureReason = failureReasonDecoded
        let modelNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelName)
        modelName = modelNameDecoded
        let maxConcurrentTransformsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxConcurrentTransforms)
        maxConcurrentTransforms = maxConcurrentTransformsDecoded
        let modelClientConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ModelClientConfig.self, forKey: .modelClientConfig)
        modelClientConfig = modelClientConfigDecoded
        let maxPayloadInMBDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxPayloadInMB)
        maxPayloadInMB = maxPayloadInMBDecoded
        let batchStrategyDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.BatchStrategy.self, forKey: .batchStrategy)
        batchStrategy = batchStrategyDecoded
        let environmentContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .environment)
        var environmentDecoded0: [Swift.String:Swift.String]? = nil
        if let environmentContainer = environmentContainer {
            environmentDecoded0 = [Swift.String:Swift.String]()
            for (key0, transformenvironmentvalue0) in environmentContainer {
                if let transformenvironmentvalue0 = transformenvironmentvalue0 {
                    environmentDecoded0?[key0] = transformenvironmentvalue0
                }
            }
        }
        environment = environmentDecoded0
        let transformInputDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.TransformInput.self, forKey: .transformInput)
        transformInput = transformInputDecoded
        let transformOutputDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.TransformOutput.self, forKey: .transformOutput)
        transformOutput = transformOutputDecoded
        let transformResourcesDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.TransformResources.self, forKey: .transformResources)
        transformResources = transformResourcesDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let transformStartTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .transformStartTime)
        transformStartTime = transformStartTimeDecoded
        let transformEndTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .transformEndTime)
        transformEndTime = transformEndTimeDecoded
        let labelingJobArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .labelingJobArn)
        labelingJobArn = labelingJobArnDecoded
        let autoMLJobArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .autoMLJobArn)
        autoMLJobArn = autoMLJobArnDecoded
        let dataProcessingDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.DataProcessing.self, forKey: .dataProcessing)
        dataProcessing = dataProcessingDecoded
        let experimentConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ExperimentConfig.self, forKey: .experimentConfig)
        experimentConfig = experimentConfigDecoded
        let tagsContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[SageMakerClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [SageMakerClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}
