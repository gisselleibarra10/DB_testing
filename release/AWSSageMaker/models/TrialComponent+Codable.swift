// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SageMakerClientTypes.TrialComponent: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createdBy = "CreatedBy"
        case creationTime = "CreationTime"
        case displayName = "DisplayName"
        case endTime = "EndTime"
        case inputArtifacts = "InputArtifacts"
        case lastModifiedBy = "LastModifiedBy"
        case lastModifiedTime = "LastModifiedTime"
        case lineageGroupArn = "LineageGroupArn"
        case metadataProperties = "MetadataProperties"
        case metrics = "Metrics"
        case outputArtifacts = "OutputArtifacts"
        case parameters = "Parameters"
        case parents = "Parents"
        case source = "Source"
        case sourceDetail = "SourceDetail"
        case startTime = "StartTime"
        case status = "Status"
        case tags = "Tags"
        case trialComponentArn = "TrialComponentArn"
        case trialComponentName = "TrialComponentName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let createdBy = self.createdBy {
            try encodeContainer.encode(createdBy, forKey: .createdBy)
        }
        if let creationTime = self.creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let displayName = self.displayName {
            try encodeContainer.encode(displayName, forKey: .displayName)
        }
        if let endTime = self.endTime {
            try encodeContainer.encode(endTime.timeIntervalSince1970, forKey: .endTime)
        }
        if let inputArtifacts = inputArtifacts {
            var inputArtifactsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .inputArtifacts)
            for (dictKey0, trialcomponentartifacts0) in inputArtifacts {
                try inputArtifactsContainer.encode(trialcomponentartifacts0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let lastModifiedBy = self.lastModifiedBy {
            try encodeContainer.encode(lastModifiedBy, forKey: .lastModifiedBy)
        }
        if let lastModifiedTime = self.lastModifiedTime {
            try encodeContainer.encode(lastModifiedTime.timeIntervalSince1970, forKey: .lastModifiedTime)
        }
        if let lineageGroupArn = self.lineageGroupArn {
            try encodeContainer.encode(lineageGroupArn, forKey: .lineageGroupArn)
        }
        if let metadataProperties = self.metadataProperties {
            try encodeContainer.encode(metadataProperties, forKey: .metadataProperties)
        }
        if let metrics = metrics {
            var metricsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .metrics)
            for trialcomponentmetricsummaries0 in metrics {
                try metricsContainer.encode(trialcomponentmetricsummaries0)
            }
        }
        if let outputArtifacts = outputArtifacts {
            var outputArtifactsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .outputArtifacts)
            for (dictKey0, trialcomponentartifacts0) in outputArtifacts {
                try outputArtifactsContainer.encode(trialcomponentartifacts0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let parameters = parameters {
            var parametersContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .parameters)
            for (dictKey0, trialcomponentparameters0) in parameters {
                try parametersContainer.encode(trialcomponentparameters0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let parents = parents {
            var parentsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .parents)
            for parents0 in parents {
                try parentsContainer.encode(parents0)
            }
        }
        if let source = self.source {
            try encodeContainer.encode(source, forKey: .source)
        }
        if let sourceDetail = self.sourceDetail {
            try encodeContainer.encode(sourceDetail, forKey: .sourceDetail)
        }
        if let startTime = self.startTime {
            try encodeContainer.encode(startTime.timeIntervalSince1970, forKey: .startTime)
        }
        if let status = self.status {
            try encodeContainer.encode(status, forKey: .status)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
        if let trialComponentArn = self.trialComponentArn {
            try encodeContainer.encode(trialComponentArn, forKey: .trialComponentArn)
        }
        if let trialComponentName = self.trialComponentName {
            try encodeContainer.encode(trialComponentName, forKey: .trialComponentName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let trialComponentNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .trialComponentName)
        trialComponentName = trialComponentNameDecoded
        let displayNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .displayName)
        displayName = displayNameDecoded
        let trialComponentArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .trialComponentArn)
        trialComponentArn = trialComponentArnDecoded
        let sourceDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.TrialComponentSource.self, forKey: .source)
        source = sourceDecoded
        let statusDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.TrialComponentStatus.self, forKey: .status)
        status = statusDecoded
        let startTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .startTime)
        startTime = startTimeDecoded
        let endTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .endTime)
        endTime = endTimeDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let createdByDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.UserContext.self, forKey: .createdBy)
        createdBy = createdByDecoded
        let lastModifiedTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedTime)
        lastModifiedTime = lastModifiedTimeDecoded
        let lastModifiedByDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.UserContext.self, forKey: .lastModifiedBy)
        lastModifiedBy = lastModifiedByDecoded
        let parametersContainer = try containerValues.decodeIfPresent([Swift.String: SageMakerClientTypes.TrialComponentParameterValue?].self, forKey: .parameters)
        var parametersDecoded0: [Swift.String:SageMakerClientTypes.TrialComponentParameterValue]? = nil
        if let parametersContainer = parametersContainer {
            parametersDecoded0 = [Swift.String:SageMakerClientTypes.TrialComponentParameterValue]()
            for (key0, trialcomponentparametervalue0) in parametersContainer {
                if let trialcomponentparametervalue0 = trialcomponentparametervalue0 {
                    parametersDecoded0?[key0] = trialcomponentparametervalue0
                }
            }
        }
        parameters = parametersDecoded0
        let inputArtifactsContainer = try containerValues.decodeIfPresent([Swift.String: SageMakerClientTypes.TrialComponentArtifact?].self, forKey: .inputArtifacts)
        var inputArtifactsDecoded0: [Swift.String:SageMakerClientTypes.TrialComponentArtifact]? = nil
        if let inputArtifactsContainer = inputArtifactsContainer {
            inputArtifactsDecoded0 = [Swift.String:SageMakerClientTypes.TrialComponentArtifact]()
            for (key0, trialcomponentartifact0) in inputArtifactsContainer {
                if let trialcomponentartifact0 = trialcomponentartifact0 {
                    inputArtifactsDecoded0?[key0] = trialcomponentartifact0
                }
            }
        }
        inputArtifacts = inputArtifactsDecoded0
        let outputArtifactsContainer = try containerValues.decodeIfPresent([Swift.String: SageMakerClientTypes.TrialComponentArtifact?].self, forKey: .outputArtifacts)
        var outputArtifactsDecoded0: [Swift.String:SageMakerClientTypes.TrialComponentArtifact]? = nil
        if let outputArtifactsContainer = outputArtifactsContainer {
            outputArtifactsDecoded0 = [Swift.String:SageMakerClientTypes.TrialComponentArtifact]()
            for (key0, trialcomponentartifact0) in outputArtifactsContainer {
                if let trialcomponentartifact0 = trialcomponentartifact0 {
                    outputArtifactsDecoded0?[key0] = trialcomponentartifact0
                }
            }
        }
        outputArtifacts = outputArtifactsDecoded0
        let metricsContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.TrialComponentMetricSummary?].self, forKey: .metrics)
        var metricsDecoded0:[SageMakerClientTypes.TrialComponentMetricSummary]? = nil
        if let metricsContainer = metricsContainer {
            metricsDecoded0 = [SageMakerClientTypes.TrialComponentMetricSummary]()
            for structure0 in metricsContainer {
                if let structure0 = structure0 {
                    metricsDecoded0?.append(structure0)
                }
            }
        }
        metrics = metricsDecoded0
        let metadataPropertiesDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.MetadataProperties.self, forKey: .metadataProperties)
        metadataProperties = metadataPropertiesDecoded
        let sourceDetailDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.TrialComponentSourceDetail.self, forKey: .sourceDetail)
        sourceDetail = sourceDetailDecoded
        let lineageGroupArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lineageGroupArn)
        lineageGroupArn = lineageGroupArnDecoded
        let tagsContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[SageMakerClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [SageMakerClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let parentsContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.Parent?].self, forKey: .parents)
        var parentsDecoded0:[SageMakerClientTypes.Parent]? = nil
        if let parentsContainer = parentsContainer {
            parentsDecoded0 = [SageMakerClientTypes.Parent]()
            for structure0 in parentsContainer {
                if let structure0 = structure0 {
                    parentsDecoded0?.append(structure0)
                }
            }
        }
        parents = parentsDecoded0
    }
}
