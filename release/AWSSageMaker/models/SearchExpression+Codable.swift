// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SageMakerClientTypes.SearchExpression: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filters = "Filters"
        case nestedFilters = "NestedFilters"
        case `operator` = "Operator"
        case subExpressions = "SubExpressions"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let filters = filters {
            var filtersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .filters)
            for filterlist0 in filters {
                try filtersContainer.encode(filterlist0)
            }
        }
        if let nestedFilters = nestedFilters {
            var nestedFiltersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .nestedFilters)
            for nestedfilterslist0 in nestedFilters {
                try nestedFiltersContainer.encode(nestedfilterslist0)
            }
        }
        if let `operator` = self.`operator` {
            try encodeContainer.encode(`operator`.rawValue, forKey: .`operator`)
        }
        if let subExpressions = subExpressions {
            var subExpressionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .subExpressions)
            for searchexpressionlist0 in subExpressions {
                try subExpressionsContainer.encode(searchexpressionlist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let filtersContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.Filter?].self, forKey: .filters)
        var filtersDecoded0:[SageMakerClientTypes.Filter]? = nil
        if let filtersContainer = filtersContainer {
            filtersDecoded0 = [SageMakerClientTypes.Filter]()
            for structure0 in filtersContainer {
                if let structure0 = structure0 {
                    filtersDecoded0?.append(structure0)
                }
            }
        }
        filters = filtersDecoded0
        let nestedFiltersContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.NestedFilters?].self, forKey: .nestedFilters)
        var nestedFiltersDecoded0:[SageMakerClientTypes.NestedFilters]? = nil
        if let nestedFiltersContainer = nestedFiltersContainer {
            nestedFiltersDecoded0 = [SageMakerClientTypes.NestedFilters]()
            for structure0 in nestedFiltersContainer {
                if let structure0 = structure0 {
                    nestedFiltersDecoded0?.append(structure0)
                }
            }
        }
        nestedFilters = nestedFiltersDecoded0
        let subExpressionsContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.SearchExpression?].self, forKey: .subExpressions)
        var subExpressionsDecoded0:[SageMakerClientTypes.SearchExpression]? = nil
        if let subExpressionsContainer = subExpressionsContainer {
            subExpressionsDecoded0 = [SageMakerClientTypes.SearchExpression]()
            for structure0 in subExpressionsContainer {
                if let structure0 = structure0 {
                    subExpressionsDecoded0?.append(structure0)
                }
            }
        }
        subExpressions = subExpressionsDecoded0
        let operatorDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.BooleanOperator.self, forKey: .operator)
        `operator` = operatorDecoded
    }
}
