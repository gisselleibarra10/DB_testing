// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension SageMakerClientTypes {
    /// Defines the training jobs launched by a hyperparameter tuning job.
    public struct HyperParameterTrainingJobDefinition: Swift.Equatable {
        /// The [HyperParameterAlgorithmSpecification] object that specifies the resource algorithm to use for the training jobs that the tuning job launches.
        /// This member is required.
        public var algorithmSpecification: SageMakerClientTypes.HyperParameterAlgorithmSpecification?
        /// Contains information about the output location for managed spot training checkpoint data.
        public var checkpointConfig: SageMakerClientTypes.CheckpointConfig?
        /// The job definition name.
        public var definitionName: Swift.String?
        /// To encrypt all communications between ML compute instances in distributed training, choose True. Encryption provides greater security for distributed training, but training might take longer. How long it takes depends on the amount of communication between compute instances, especially if you use a deep learning algorithm in distributed training.
        public var enableInterContainerTrafficEncryption: Swift.Bool
        /// A Boolean indicating whether managed spot training is enabled (True) or not (False).
        public var enableManagedSpotTraining: Swift.Bool
        /// Isolates the training container. No inbound or outbound network calls can be made, except for calls between peers within a training cluster for distributed training. If network isolation is used for training jobs that are configured to use a VPC, SageMaker downloads and uploads customer data and model artifacts through the specified VPC, but the training container does not have network access.
        public var enableNetworkIsolation: Swift.Bool
        /// Specifies ranges of integer, continuous, and categorical hyperparameters that a hyperparameter tuning job searches. The hyperparameter tuning job launches training jobs with hyperparameter values within these ranges to find the combination of values that result in the training job with the best performance as measured by the objective metric of the hyperparameter tuning job. The maximum number of items specified for Array Members refers to the maximum number of hyperparameters for each range and also the maximum for the hyperparameter tuning job itself. That is, the sum of the number of hyperparameters for all the ranges can't exceed the maximum number specified.
        public var hyperParameterRanges: SageMakerClientTypes.ParameterRanges?
        /// The configuration for the hyperparameter tuning resources, including the compute instances and storage volumes, used for training jobs launched by the tuning job. By default, storage volumes hold model artifacts and incremental states. Choose File for TrainingInputMode in the AlgorithmSpecification parameter to additionally store training data in the storage volume (optional).
        public var hyperParameterTuningResourceConfig: SageMakerClientTypes.HyperParameterTuningResourceConfig?
        /// An array of [Channel] objects that specify the input for the training jobs that the tuning job launches.
        public var inputDataConfig: [SageMakerClientTypes.Channel]?
        /// Specifies the path to the Amazon S3 bucket where you store model artifacts from the training jobs that the tuning job launches.
        /// This member is required.
        public var outputDataConfig: SageMakerClientTypes.OutputDataConfig?
        /// The resources, including the compute instances and storage volumes, to use for the training jobs that the tuning job launches. Storage volumes store model artifacts and incremental states. Training algorithms might also use storage volumes for scratch space. If you want SageMaker to use the storage volume to store the training data, choose File as the TrainingInputMode in the algorithm specification. For distributed training algorithms, specify an instance count greater than 1. If you want to use hyperparameter optimization with instance type flexibility, use HyperParameterTuningResourceConfig instead.
        public var resourceConfig: SageMakerClientTypes.ResourceConfig?
        /// The number of times to retry the job when the job fails due to an InternalServerError.
        public var retryStrategy: SageMakerClientTypes.RetryStrategy?
        /// The Amazon Resource Name (ARN) of the IAM role associated with the training jobs that the tuning job launches.
        /// This member is required.
        public var roleArn: Swift.String?
        /// Specifies the values of hyperparameters that do not change for the tuning job.
        public var staticHyperParameters: [Swift.String:Swift.String]?
        /// Specifies a limit to how long a model hyperparameter training job can run. It also specifies how long a managed spot training job has to complete. When the job reaches the time limit, SageMaker ends the training job. Use this API to cap model training costs.
        /// This member is required.
        public var stoppingCondition: SageMakerClientTypes.StoppingCondition?
        /// Defines the objective metric for a hyperparameter tuning job. Hyperparameter tuning uses the value of this metric to evaluate the training jobs it launches, and returns the training job that results in either the highest or lowest value for this metric, depending on the value you specify for the Type parameter.
        public var tuningObjective: SageMakerClientTypes.HyperParameterTuningJobObjective?
        /// The [VpcConfig] object that specifies the VPC that you want the training jobs that this hyperparameter tuning job launches to connect to. Control access to and from your training container by configuring the VPC. For more information, see [Protect Training Jobs by Using an Amazon Virtual Private Cloud](https://docs.aws.amazon.com/sagemaker/latest/dg/train-vpc.html).
        public var vpcConfig: SageMakerClientTypes.VpcConfig?

        public init (
            algorithmSpecification: SageMakerClientTypes.HyperParameterAlgorithmSpecification? = nil,
            checkpointConfig: SageMakerClientTypes.CheckpointConfig? = nil,
            definitionName: Swift.String? = nil,
            enableInterContainerTrafficEncryption: Swift.Bool = false,
            enableManagedSpotTraining: Swift.Bool = false,
            enableNetworkIsolation: Swift.Bool = false,
            hyperParameterRanges: SageMakerClientTypes.ParameterRanges? = nil,
            hyperParameterTuningResourceConfig: SageMakerClientTypes.HyperParameterTuningResourceConfig? = nil,
            inputDataConfig: [SageMakerClientTypes.Channel]? = nil,
            outputDataConfig: SageMakerClientTypes.OutputDataConfig? = nil,
            resourceConfig: SageMakerClientTypes.ResourceConfig? = nil,
            retryStrategy: SageMakerClientTypes.RetryStrategy? = nil,
            roleArn: Swift.String? = nil,
            staticHyperParameters: [Swift.String:Swift.String]? = nil,
            stoppingCondition: SageMakerClientTypes.StoppingCondition? = nil,
            tuningObjective: SageMakerClientTypes.HyperParameterTuningJobObjective? = nil,
            vpcConfig: SageMakerClientTypes.VpcConfig? = nil
        )
        {
            self.algorithmSpecification = algorithmSpecification
            self.checkpointConfig = checkpointConfig
            self.definitionName = definitionName
            self.enableInterContainerTrafficEncryption = enableInterContainerTrafficEncryption
            self.enableManagedSpotTraining = enableManagedSpotTraining
            self.enableNetworkIsolation = enableNetworkIsolation
            self.hyperParameterRanges = hyperParameterRanges
            self.hyperParameterTuningResourceConfig = hyperParameterTuningResourceConfig
            self.inputDataConfig = inputDataConfig
            self.outputDataConfig = outputDataConfig
            self.resourceConfig = resourceConfig
            self.retryStrategy = retryStrategy
            self.roleArn = roleArn
            self.staticHyperParameters = staticHyperParameters
            self.stoppingCondition = stoppingCondition
            self.tuningObjective = tuningObjective
            self.vpcConfig = vpcConfig
        }
    }

}
