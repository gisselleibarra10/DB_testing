// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CreateTrainingJobInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case algorithmSpecification = "AlgorithmSpecification"
        case checkpointConfig = "CheckpointConfig"
        case debugHookConfig = "DebugHookConfig"
        case debugRuleConfigurations = "DebugRuleConfigurations"
        case enableInterContainerTrafficEncryption = "EnableInterContainerTrafficEncryption"
        case enableManagedSpotTraining = "EnableManagedSpotTraining"
        case enableNetworkIsolation = "EnableNetworkIsolation"
        case environment = "Environment"
        case experimentConfig = "ExperimentConfig"
        case hyperParameters = "HyperParameters"
        case inputDataConfig = "InputDataConfig"
        case outputDataConfig = "OutputDataConfig"
        case profilerConfig = "ProfilerConfig"
        case profilerRuleConfigurations = "ProfilerRuleConfigurations"
        case resourceConfig = "ResourceConfig"
        case retryStrategy = "RetryStrategy"
        case roleArn = "RoleArn"
        case stoppingCondition = "StoppingCondition"
        case tags = "Tags"
        case tensorBoardOutputConfig = "TensorBoardOutputConfig"
        case trainingJobName = "TrainingJobName"
        case vpcConfig = "VpcConfig"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let algorithmSpecification = self.algorithmSpecification {
            try encodeContainer.encode(algorithmSpecification, forKey: .algorithmSpecification)
        }
        if let checkpointConfig = self.checkpointConfig {
            try encodeContainer.encode(checkpointConfig, forKey: .checkpointConfig)
        }
        if let debugHookConfig = self.debugHookConfig {
            try encodeContainer.encode(debugHookConfig, forKey: .debugHookConfig)
        }
        if let debugRuleConfigurations = debugRuleConfigurations {
            var debugRuleConfigurationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .debugRuleConfigurations)
            for debugruleconfigurations0 in debugRuleConfigurations {
                try debugRuleConfigurationsContainer.encode(debugruleconfigurations0)
            }
        }
        if enableInterContainerTrafficEncryption != false {
            try encodeContainer.encode(enableInterContainerTrafficEncryption, forKey: .enableInterContainerTrafficEncryption)
        }
        if enableManagedSpotTraining != false {
            try encodeContainer.encode(enableManagedSpotTraining, forKey: .enableManagedSpotTraining)
        }
        if enableNetworkIsolation != false {
            try encodeContainer.encode(enableNetworkIsolation, forKey: .enableNetworkIsolation)
        }
        if let environment = environment {
            var environmentContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .environment)
            for (dictKey0, trainingenvironmentmap0) in environment {
                try environmentContainer.encode(trainingenvironmentmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let experimentConfig = self.experimentConfig {
            try encodeContainer.encode(experimentConfig, forKey: .experimentConfig)
        }
        if let hyperParameters = hyperParameters {
            var hyperParametersContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .hyperParameters)
            for (dictKey0, hyperparameters0) in hyperParameters {
                try hyperParametersContainer.encode(hyperparameters0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let inputDataConfig = inputDataConfig {
            var inputDataConfigContainer = encodeContainer.nestedUnkeyedContainer(forKey: .inputDataConfig)
            for inputdataconfig0 in inputDataConfig {
                try inputDataConfigContainer.encode(inputdataconfig0)
            }
        }
        if let outputDataConfig = self.outputDataConfig {
            try encodeContainer.encode(outputDataConfig, forKey: .outputDataConfig)
        }
        if let profilerConfig = self.profilerConfig {
            try encodeContainer.encode(profilerConfig, forKey: .profilerConfig)
        }
        if let profilerRuleConfigurations = profilerRuleConfigurations {
            var profilerRuleConfigurationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .profilerRuleConfigurations)
            for profilerruleconfigurations0 in profilerRuleConfigurations {
                try profilerRuleConfigurationsContainer.encode(profilerruleconfigurations0)
            }
        }
        if let resourceConfig = self.resourceConfig {
            try encodeContainer.encode(resourceConfig, forKey: .resourceConfig)
        }
        if let retryStrategy = self.retryStrategy {
            try encodeContainer.encode(retryStrategy, forKey: .retryStrategy)
        }
        if let roleArn = self.roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let stoppingCondition = self.stoppingCondition {
            try encodeContainer.encode(stoppingCondition, forKey: .stoppingCondition)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
        if let tensorBoardOutputConfig = self.tensorBoardOutputConfig {
            try encodeContainer.encode(tensorBoardOutputConfig, forKey: .tensorBoardOutputConfig)
        }
        if let trainingJobName = self.trainingJobName {
            try encodeContainer.encode(trainingJobName, forKey: .trainingJobName)
        }
        if let vpcConfig = self.vpcConfig {
            try encodeContainer.encode(vpcConfig, forKey: .vpcConfig)
        }
    }
}
