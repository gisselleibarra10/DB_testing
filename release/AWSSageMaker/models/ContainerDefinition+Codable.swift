// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SageMakerClientTypes.ContainerDefinition: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case containerHostname = "ContainerHostname"
        case environment = "Environment"
        case image = "Image"
        case imageConfig = "ImageConfig"
        case inferenceSpecificationName = "InferenceSpecificationName"
        case mode = "Mode"
        case modelDataUrl = "ModelDataUrl"
        case modelPackageName = "ModelPackageName"
        case multiModelConfig = "MultiModelConfig"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let containerHostname = self.containerHostname {
            try encodeContainer.encode(containerHostname, forKey: .containerHostname)
        }
        if let environment = environment {
            var environmentContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .environment)
            for (dictKey0, environmentmap0) in environment {
                try environmentContainer.encode(environmentmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let image = self.image {
            try encodeContainer.encode(image, forKey: .image)
        }
        if let imageConfig = self.imageConfig {
            try encodeContainer.encode(imageConfig, forKey: .imageConfig)
        }
        if let inferenceSpecificationName = self.inferenceSpecificationName {
            try encodeContainer.encode(inferenceSpecificationName, forKey: .inferenceSpecificationName)
        }
        if let mode = self.mode {
            try encodeContainer.encode(mode.rawValue, forKey: .mode)
        }
        if let modelDataUrl = self.modelDataUrl {
            try encodeContainer.encode(modelDataUrl, forKey: .modelDataUrl)
        }
        if let modelPackageName = self.modelPackageName {
            try encodeContainer.encode(modelPackageName, forKey: .modelPackageName)
        }
        if let multiModelConfig = self.multiModelConfig {
            try encodeContainer.encode(multiModelConfig, forKey: .multiModelConfig)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let containerHostnameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .containerHostname)
        containerHostname = containerHostnameDecoded
        let imageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .image)
        image = imageDecoded
        let imageConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ImageConfig.self, forKey: .imageConfig)
        imageConfig = imageConfigDecoded
        let modeDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ContainerMode.self, forKey: .mode)
        mode = modeDecoded
        let modelDataUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelDataUrl)
        modelDataUrl = modelDataUrlDecoded
        let environmentContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .environment)
        var environmentDecoded0: [Swift.String:Swift.String]? = nil
        if let environmentContainer = environmentContainer {
            environmentDecoded0 = [Swift.String:Swift.String]()
            for (key0, environmentvalue0) in environmentContainer {
                if let environmentvalue0 = environmentvalue0 {
                    environmentDecoded0?[key0] = environmentvalue0
                }
            }
        }
        environment = environmentDecoded0
        let modelPackageNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelPackageName)
        modelPackageName = modelPackageNameDecoded
        let inferenceSpecificationNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .inferenceSpecificationName)
        inferenceSpecificationName = inferenceSpecificationNameDecoded
        let multiModelConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.MultiModelConfig.self, forKey: .multiModelConfig)
        multiModelConfig = multiModelConfigDecoded
    }
}
