// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SageMakerClientTypes.MonitoringNetworkConfig: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case enableInterContainerTrafficEncryption = "EnableInterContainerTrafficEncryption"
        case enableNetworkIsolation = "EnableNetworkIsolation"
        case vpcConfig = "VpcConfig"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if enableInterContainerTrafficEncryption != false {
            try encodeContainer.encode(enableInterContainerTrafficEncryption, forKey: .enableInterContainerTrafficEncryption)
        }
        if enableNetworkIsolation != false {
            try encodeContainer.encode(enableNetworkIsolation, forKey: .enableNetworkIsolation)
        }
        if let vpcConfig = self.vpcConfig {
            try encodeContainer.encode(vpcConfig, forKey: .vpcConfig)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let enableInterContainerTrafficEncryptionDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enableInterContainerTrafficEncryption) ?? false
        enableInterContainerTrafficEncryption = enableInterContainerTrafficEncryptionDecoded
        let enableNetworkIsolationDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enableNetworkIsolation) ?? false
        enableNetworkIsolation = enableNetworkIsolationDecoded
        let vpcConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.VpcConfig.self, forKey: .vpcConfig)
        vpcConfig = vpcConfigDecoded
    }
}
