// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CreateArtifactInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case artifactName = "ArtifactName"
        case artifactType = "ArtifactType"
        case metadataProperties = "MetadataProperties"
        case properties = "Properties"
        case source = "Source"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let artifactName = self.artifactName {
            try encodeContainer.encode(artifactName, forKey: .artifactName)
        }
        if let artifactType = self.artifactType {
            try encodeContainer.encode(artifactType, forKey: .artifactType)
        }
        if let metadataProperties = self.metadataProperties {
            try encodeContainer.encode(metadataProperties, forKey: .metadataProperties)
        }
        if let properties = properties {
            var propertiesContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .properties)
            for (dictKey0, lineageentityparameters0) in properties {
                try propertiesContainer.encode(lineageentityparameters0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let source = self.source {
            try encodeContainer.encode(source, forKey: .source)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }
}
