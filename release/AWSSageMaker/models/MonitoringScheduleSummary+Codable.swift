// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SageMakerClientTypes.MonitoringScheduleSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTime = "CreationTime"
        case endpointName = "EndpointName"
        case lastModifiedTime = "LastModifiedTime"
        case monitoringJobDefinitionName = "MonitoringJobDefinitionName"
        case monitoringScheduleArn = "MonitoringScheduleArn"
        case monitoringScheduleName = "MonitoringScheduleName"
        case monitoringScheduleStatus = "MonitoringScheduleStatus"
        case monitoringType = "MonitoringType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationTime = self.creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let endpointName = self.endpointName {
            try encodeContainer.encode(endpointName, forKey: .endpointName)
        }
        if let lastModifiedTime = self.lastModifiedTime {
            try encodeContainer.encode(lastModifiedTime.timeIntervalSince1970, forKey: .lastModifiedTime)
        }
        if let monitoringJobDefinitionName = self.monitoringJobDefinitionName {
            try encodeContainer.encode(monitoringJobDefinitionName, forKey: .monitoringJobDefinitionName)
        }
        if let monitoringScheduleArn = self.monitoringScheduleArn {
            try encodeContainer.encode(monitoringScheduleArn, forKey: .monitoringScheduleArn)
        }
        if let monitoringScheduleName = self.monitoringScheduleName {
            try encodeContainer.encode(monitoringScheduleName, forKey: .monitoringScheduleName)
        }
        if let monitoringScheduleStatus = self.monitoringScheduleStatus {
            try encodeContainer.encode(monitoringScheduleStatus.rawValue, forKey: .monitoringScheduleStatus)
        }
        if let monitoringType = self.monitoringType {
            try encodeContainer.encode(monitoringType.rawValue, forKey: .monitoringType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let monitoringScheduleNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .monitoringScheduleName)
        monitoringScheduleName = monitoringScheduleNameDecoded
        let monitoringScheduleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .monitoringScheduleArn)
        monitoringScheduleArn = monitoringScheduleArnDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let lastModifiedTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedTime)
        lastModifiedTime = lastModifiedTimeDecoded
        let monitoringScheduleStatusDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ScheduleStatus.self, forKey: .monitoringScheduleStatus)
        monitoringScheduleStatus = monitoringScheduleStatusDecoded
        let endpointNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .endpointName)
        endpointName = endpointNameDecoded
        let monitoringJobDefinitionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .monitoringJobDefinitionName)
        monitoringJobDefinitionName = monitoringJobDefinitionNameDecoded
        let monitoringTypeDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.MonitoringType.self, forKey: .monitoringType)
        monitoringType = monitoringTypeDecoded
    }
}
