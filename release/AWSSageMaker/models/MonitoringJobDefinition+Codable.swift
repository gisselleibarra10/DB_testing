// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SageMakerClientTypes.MonitoringJobDefinition: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case baselineConfig = "BaselineConfig"
        case environment = "Environment"
        case monitoringAppSpecification = "MonitoringAppSpecification"
        case monitoringInputs = "MonitoringInputs"
        case monitoringOutputConfig = "MonitoringOutputConfig"
        case monitoringResources = "MonitoringResources"
        case networkConfig = "NetworkConfig"
        case roleArn = "RoleArn"
        case stoppingCondition = "StoppingCondition"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let baselineConfig = self.baselineConfig {
            try encodeContainer.encode(baselineConfig, forKey: .baselineConfig)
        }
        if let environment = environment {
            var environmentContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .environment)
            for (dictKey0, monitoringenvironmentmap0) in environment {
                try environmentContainer.encode(monitoringenvironmentmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let monitoringAppSpecification = self.monitoringAppSpecification {
            try encodeContainer.encode(monitoringAppSpecification, forKey: .monitoringAppSpecification)
        }
        if let monitoringInputs = monitoringInputs {
            var monitoringInputsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .monitoringInputs)
            for monitoringinputs0 in monitoringInputs {
                try monitoringInputsContainer.encode(monitoringinputs0)
            }
        }
        if let monitoringOutputConfig = self.monitoringOutputConfig {
            try encodeContainer.encode(monitoringOutputConfig, forKey: .monitoringOutputConfig)
        }
        if let monitoringResources = self.monitoringResources {
            try encodeContainer.encode(monitoringResources, forKey: .monitoringResources)
        }
        if let networkConfig = self.networkConfig {
            try encodeContainer.encode(networkConfig, forKey: .networkConfig)
        }
        if let roleArn = self.roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let stoppingCondition = self.stoppingCondition {
            try encodeContainer.encode(stoppingCondition, forKey: .stoppingCondition)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let baselineConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.MonitoringBaselineConfig.self, forKey: .baselineConfig)
        baselineConfig = baselineConfigDecoded
        let monitoringInputsContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.MonitoringInput?].self, forKey: .monitoringInputs)
        var monitoringInputsDecoded0:[SageMakerClientTypes.MonitoringInput]? = nil
        if let monitoringInputsContainer = monitoringInputsContainer {
            monitoringInputsDecoded0 = [SageMakerClientTypes.MonitoringInput]()
            for structure0 in monitoringInputsContainer {
                if let structure0 = structure0 {
                    monitoringInputsDecoded0?.append(structure0)
                }
            }
        }
        monitoringInputs = monitoringInputsDecoded0
        let monitoringOutputConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.MonitoringOutputConfig.self, forKey: .monitoringOutputConfig)
        monitoringOutputConfig = monitoringOutputConfigDecoded
        let monitoringResourcesDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.MonitoringResources.self, forKey: .monitoringResources)
        monitoringResources = monitoringResourcesDecoded
        let monitoringAppSpecificationDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.MonitoringAppSpecification.self, forKey: .monitoringAppSpecification)
        monitoringAppSpecification = monitoringAppSpecificationDecoded
        let stoppingConditionDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.MonitoringStoppingCondition.self, forKey: .stoppingCondition)
        stoppingCondition = stoppingConditionDecoded
        let environmentContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .environment)
        var environmentDecoded0: [Swift.String:Swift.String]? = nil
        if let environmentContainer = environmentContainer {
            environmentDecoded0 = [Swift.String:Swift.String]()
            for (key0, processingenvironmentvalue0) in environmentContainer {
                if let processingenvironmentvalue0 = processingenvironmentvalue0 {
                    environmentDecoded0?[key0] = processingenvironmentvalue0
                }
            }
        }
        environment = environmentDecoded0
        let networkConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.NetworkConfig.self, forKey: .networkConfig)
        networkConfig = networkConfigDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
    }
}
