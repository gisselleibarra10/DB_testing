// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension SageMakerClientTypes {
    public enum AutoMLMetricExtendedEnum: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case accuracy
        case auc
        case balancedAccuracy
        case f1
        case f1Macro
        case logloss
        case mae
        case mse
        case precision
        case precisionMacro
        case r2
        case recall
        case recallMacro
        case rmse
        case sdkUnknown(Swift.String)

        public static var allCases: [AutoMLMetricExtendedEnum] {
            return [
                .accuracy,
                .auc,
                .balancedAccuracy,
                .f1,
                .f1Macro,
                .logloss,
                .mae,
                .mse,
                .precision,
                .precisionMacro,
                .r2,
                .recall,
                .recallMacro,
                .rmse,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .accuracy: return "Accuracy"
            case .auc: return "AUC"
            case .balancedAccuracy: return "BalancedAccuracy"
            case .f1: return "F1"
            case .f1Macro: return "F1macro"
            case .logloss: return "LogLoss"
            case .mae: return "MAE"
            case .mse: return "MSE"
            case .precision: return "Precision"
            case .precisionMacro: return "PrecisionMacro"
            case .r2: return "R2"
            case .recall: return "Recall"
            case .recallMacro: return "RecallMacro"
            case .rmse: return "RMSE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = AutoMLMetricExtendedEnum(rawValue: rawValue) ?? AutoMLMetricExtendedEnum.sdkUnknown(rawValue)
        }
    }
}
