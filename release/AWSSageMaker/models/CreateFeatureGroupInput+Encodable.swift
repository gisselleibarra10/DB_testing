// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CreateFeatureGroupInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description = "Description"
        case eventTimeFeatureName = "EventTimeFeatureName"
        case featureDefinitions = "FeatureDefinitions"
        case featureGroupName = "FeatureGroupName"
        case offlineStoreConfig = "OfflineStoreConfig"
        case onlineStoreConfig = "OnlineStoreConfig"
        case recordIdentifierFeatureName = "RecordIdentifierFeatureName"
        case roleArn = "RoleArn"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let eventTimeFeatureName = self.eventTimeFeatureName {
            try encodeContainer.encode(eventTimeFeatureName, forKey: .eventTimeFeatureName)
        }
        if let featureDefinitions = featureDefinitions {
            var featureDefinitionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .featureDefinitions)
            for featuredefinitions0 in featureDefinitions {
                try featureDefinitionsContainer.encode(featuredefinitions0)
            }
        }
        if let featureGroupName = self.featureGroupName {
            try encodeContainer.encode(featureGroupName, forKey: .featureGroupName)
        }
        if let offlineStoreConfig = self.offlineStoreConfig {
            try encodeContainer.encode(offlineStoreConfig, forKey: .offlineStoreConfig)
        }
        if let onlineStoreConfig = self.onlineStoreConfig {
            try encodeContainer.encode(onlineStoreConfig, forKey: .onlineStoreConfig)
        }
        if let recordIdentifierFeatureName = self.recordIdentifierFeatureName {
            try encodeContainer.encode(recordIdentifierFeatureName, forKey: .recordIdentifierFeatureName)
        }
        if let roleArn = self.roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }
}
