// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SageMakerClientTypes.DeviceSelectionConfig: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deviceNameContains = "DeviceNameContains"
        case deviceNames = "DeviceNames"
        case deviceSubsetType = "DeviceSubsetType"
        case percentage = "Percentage"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let deviceNameContains = self.deviceNameContains {
            try encodeContainer.encode(deviceNameContains, forKey: .deviceNameContains)
        }
        if let deviceNames = deviceNames {
            var deviceNamesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .deviceNames)
            for devicenames0 in deviceNames {
                try deviceNamesContainer.encode(devicenames0)
            }
        }
        if let deviceSubsetType = self.deviceSubsetType {
            try encodeContainer.encode(deviceSubsetType.rawValue, forKey: .deviceSubsetType)
        }
        if percentage != 0 {
            try encodeContainer.encode(percentage, forKey: .percentage)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deviceSubsetTypeDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.DeviceSubsetType.self, forKey: .deviceSubsetType)
        deviceSubsetType = deviceSubsetTypeDecoded
        let percentageDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .percentage) ?? 0
        percentage = percentageDecoded
        let deviceNamesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .deviceNames)
        var deviceNamesDecoded0:[Swift.String]? = nil
        if let deviceNamesContainer = deviceNamesContainer {
            deviceNamesDecoded0 = [Swift.String]()
            for string0 in deviceNamesContainer {
                if let string0 = string0 {
                    deviceNamesDecoded0?.append(string0)
                }
            }
        }
        deviceNames = deviceNamesDecoded0
        let deviceNameContainsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deviceNameContains)
        deviceNameContains = deviceNameContainsDecoded
    }
}
