// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateTrainingJobInputBody: Swift.Equatable {
    let trainingJobName: Swift.String?
    let hyperParameters: [Swift.String:Swift.String]?
    let algorithmSpecification: SageMakerClientTypes.AlgorithmSpecification?
    let roleArn: Swift.String?
    let inputDataConfig: [SageMakerClientTypes.Channel]?
    let outputDataConfig: SageMakerClientTypes.OutputDataConfig?
    let resourceConfig: SageMakerClientTypes.ResourceConfig?
    let vpcConfig: SageMakerClientTypes.VpcConfig?
    let stoppingCondition: SageMakerClientTypes.StoppingCondition?
    let tags: [SageMakerClientTypes.Tag]?
    let enableNetworkIsolation: Swift.Bool
    let enableInterContainerTrafficEncryption: Swift.Bool
    let enableManagedSpotTraining: Swift.Bool
    let checkpointConfig: SageMakerClientTypes.CheckpointConfig?
    let debugHookConfig: SageMakerClientTypes.DebugHookConfig?
    let debugRuleConfigurations: [SageMakerClientTypes.DebugRuleConfiguration]?
    let tensorBoardOutputConfig: SageMakerClientTypes.TensorBoardOutputConfig?
    let experimentConfig: SageMakerClientTypes.ExperimentConfig?
    let profilerConfig: SageMakerClientTypes.ProfilerConfig?
    let profilerRuleConfigurations: [SageMakerClientTypes.ProfilerRuleConfiguration]?
    let environment: [Swift.String:Swift.String]?
    let retryStrategy: SageMakerClientTypes.RetryStrategy?
}

extension CreateTrainingJobInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case algorithmSpecification = "AlgorithmSpecification"
        case checkpointConfig = "CheckpointConfig"
        case debugHookConfig = "DebugHookConfig"
        case debugRuleConfigurations = "DebugRuleConfigurations"
        case enableInterContainerTrafficEncryption = "EnableInterContainerTrafficEncryption"
        case enableManagedSpotTraining = "EnableManagedSpotTraining"
        case enableNetworkIsolation = "EnableNetworkIsolation"
        case environment = "Environment"
        case experimentConfig = "ExperimentConfig"
        case hyperParameters = "HyperParameters"
        case inputDataConfig = "InputDataConfig"
        case outputDataConfig = "OutputDataConfig"
        case profilerConfig = "ProfilerConfig"
        case profilerRuleConfigurations = "ProfilerRuleConfigurations"
        case resourceConfig = "ResourceConfig"
        case retryStrategy = "RetryStrategy"
        case roleArn = "RoleArn"
        case stoppingCondition = "StoppingCondition"
        case tags = "Tags"
        case tensorBoardOutputConfig = "TensorBoardOutputConfig"
        case trainingJobName = "TrainingJobName"
        case vpcConfig = "VpcConfig"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let trainingJobNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .trainingJobName)
        trainingJobName = trainingJobNameDecoded
        let hyperParametersContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .hyperParameters)
        var hyperParametersDecoded0: [Swift.String:Swift.String]? = nil
        if let hyperParametersContainer = hyperParametersContainer {
            hyperParametersDecoded0 = [Swift.String:Swift.String]()
            for (key0, hyperparametervalue0) in hyperParametersContainer {
                if let hyperparametervalue0 = hyperparametervalue0 {
                    hyperParametersDecoded0?[key0] = hyperparametervalue0
                }
            }
        }
        hyperParameters = hyperParametersDecoded0
        let algorithmSpecificationDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.AlgorithmSpecification.self, forKey: .algorithmSpecification)
        algorithmSpecification = algorithmSpecificationDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let inputDataConfigContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.Channel?].self, forKey: .inputDataConfig)
        var inputDataConfigDecoded0:[SageMakerClientTypes.Channel]? = nil
        if let inputDataConfigContainer = inputDataConfigContainer {
            inputDataConfigDecoded0 = [SageMakerClientTypes.Channel]()
            for structure0 in inputDataConfigContainer {
                if let structure0 = structure0 {
                    inputDataConfigDecoded0?.append(structure0)
                }
            }
        }
        inputDataConfig = inputDataConfigDecoded0
        let outputDataConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.OutputDataConfig.self, forKey: .outputDataConfig)
        outputDataConfig = outputDataConfigDecoded
        let resourceConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ResourceConfig.self, forKey: .resourceConfig)
        resourceConfig = resourceConfigDecoded
        let vpcConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.VpcConfig.self, forKey: .vpcConfig)
        vpcConfig = vpcConfigDecoded
        let stoppingConditionDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.StoppingCondition.self, forKey: .stoppingCondition)
        stoppingCondition = stoppingConditionDecoded
        let tagsContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[SageMakerClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [SageMakerClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let enableNetworkIsolationDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enableNetworkIsolation) ?? false
        enableNetworkIsolation = enableNetworkIsolationDecoded
        let enableInterContainerTrafficEncryptionDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enableInterContainerTrafficEncryption) ?? false
        enableInterContainerTrafficEncryption = enableInterContainerTrafficEncryptionDecoded
        let enableManagedSpotTrainingDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enableManagedSpotTraining) ?? false
        enableManagedSpotTraining = enableManagedSpotTrainingDecoded
        let checkpointConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.CheckpointConfig.self, forKey: .checkpointConfig)
        checkpointConfig = checkpointConfigDecoded
        let debugHookConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.DebugHookConfig.self, forKey: .debugHookConfig)
        debugHookConfig = debugHookConfigDecoded
        let debugRuleConfigurationsContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.DebugRuleConfiguration?].self, forKey: .debugRuleConfigurations)
        var debugRuleConfigurationsDecoded0:[SageMakerClientTypes.DebugRuleConfiguration]? = nil
        if let debugRuleConfigurationsContainer = debugRuleConfigurationsContainer {
            debugRuleConfigurationsDecoded0 = [SageMakerClientTypes.DebugRuleConfiguration]()
            for structure0 in debugRuleConfigurationsContainer {
                if let structure0 = structure0 {
                    debugRuleConfigurationsDecoded0?.append(structure0)
                }
            }
        }
        debugRuleConfigurations = debugRuleConfigurationsDecoded0
        let tensorBoardOutputConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.TensorBoardOutputConfig.self, forKey: .tensorBoardOutputConfig)
        tensorBoardOutputConfig = tensorBoardOutputConfigDecoded
        let experimentConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ExperimentConfig.self, forKey: .experimentConfig)
        experimentConfig = experimentConfigDecoded
        let profilerConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ProfilerConfig.self, forKey: .profilerConfig)
        profilerConfig = profilerConfigDecoded
        let profilerRuleConfigurationsContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.ProfilerRuleConfiguration?].self, forKey: .profilerRuleConfigurations)
        var profilerRuleConfigurationsDecoded0:[SageMakerClientTypes.ProfilerRuleConfiguration]? = nil
        if let profilerRuleConfigurationsContainer = profilerRuleConfigurationsContainer {
            profilerRuleConfigurationsDecoded0 = [SageMakerClientTypes.ProfilerRuleConfiguration]()
            for structure0 in profilerRuleConfigurationsContainer {
                if let structure0 = structure0 {
                    profilerRuleConfigurationsDecoded0?.append(structure0)
                }
            }
        }
        profilerRuleConfigurations = profilerRuleConfigurationsDecoded0
        let environmentContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .environment)
        var environmentDecoded0: [Swift.String:Swift.String]? = nil
        if let environmentContainer = environmentContainer {
            environmentDecoded0 = [Swift.String:Swift.String]()
            for (key0, trainingenvironmentvalue0) in environmentContainer {
                if let trainingenvironmentvalue0 = trainingenvironmentvalue0 {
                    environmentDecoded0?[key0] = trainingenvironmentvalue0
                }
            }
        }
        environment = environmentDecoded0
        let retryStrategyDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.RetryStrategy.self, forKey: .retryStrategy)
        retryStrategy = retryStrategyDecoded
    }
}
