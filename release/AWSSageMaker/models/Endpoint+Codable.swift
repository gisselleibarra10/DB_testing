// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SageMakerClientTypes.Endpoint: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTime = "CreationTime"
        case dataCaptureConfig = "DataCaptureConfig"
        case endpointArn = "EndpointArn"
        case endpointConfigName = "EndpointConfigName"
        case endpointName = "EndpointName"
        case endpointStatus = "EndpointStatus"
        case failureReason = "FailureReason"
        case lastModifiedTime = "LastModifiedTime"
        case monitoringSchedules = "MonitoringSchedules"
        case productionVariants = "ProductionVariants"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationTime = self.creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let dataCaptureConfig = self.dataCaptureConfig {
            try encodeContainer.encode(dataCaptureConfig, forKey: .dataCaptureConfig)
        }
        if let endpointArn = self.endpointArn {
            try encodeContainer.encode(endpointArn, forKey: .endpointArn)
        }
        if let endpointConfigName = self.endpointConfigName {
            try encodeContainer.encode(endpointConfigName, forKey: .endpointConfigName)
        }
        if let endpointName = self.endpointName {
            try encodeContainer.encode(endpointName, forKey: .endpointName)
        }
        if let endpointStatus = self.endpointStatus {
            try encodeContainer.encode(endpointStatus.rawValue, forKey: .endpointStatus)
        }
        if let failureReason = self.failureReason {
            try encodeContainer.encode(failureReason, forKey: .failureReason)
        }
        if let lastModifiedTime = self.lastModifiedTime {
            try encodeContainer.encode(lastModifiedTime.timeIntervalSince1970, forKey: .lastModifiedTime)
        }
        if let monitoringSchedules = monitoringSchedules {
            var monitoringSchedulesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .monitoringSchedules)
            for monitoringschedulelist0 in monitoringSchedules {
                try monitoringSchedulesContainer.encode(monitoringschedulelist0)
            }
        }
        if let productionVariants = productionVariants {
            var productionVariantsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .productionVariants)
            for productionvariantsummarylist0 in productionVariants {
                try productionVariantsContainer.encode(productionvariantsummarylist0)
            }
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let endpointNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .endpointName)
        endpointName = endpointNameDecoded
        let endpointArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .endpointArn)
        endpointArn = endpointArnDecoded
        let endpointConfigNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .endpointConfigName)
        endpointConfigName = endpointConfigNameDecoded
        let productionVariantsContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.ProductionVariantSummary?].self, forKey: .productionVariants)
        var productionVariantsDecoded0:[SageMakerClientTypes.ProductionVariantSummary]? = nil
        if let productionVariantsContainer = productionVariantsContainer {
            productionVariantsDecoded0 = [SageMakerClientTypes.ProductionVariantSummary]()
            for structure0 in productionVariantsContainer {
                if let structure0 = structure0 {
                    productionVariantsDecoded0?.append(structure0)
                }
            }
        }
        productionVariants = productionVariantsDecoded0
        let dataCaptureConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.DataCaptureConfigSummary.self, forKey: .dataCaptureConfig)
        dataCaptureConfig = dataCaptureConfigDecoded
        let endpointStatusDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.EndpointStatus.self, forKey: .endpointStatus)
        endpointStatus = endpointStatusDecoded
        let failureReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .failureReason)
        failureReason = failureReasonDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let lastModifiedTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedTime)
        lastModifiedTime = lastModifiedTimeDecoded
        let monitoringSchedulesContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.MonitoringSchedule?].self, forKey: .monitoringSchedules)
        var monitoringSchedulesDecoded0:[SageMakerClientTypes.MonitoringSchedule]? = nil
        if let monitoringSchedulesContainer = monitoringSchedulesContainer {
            monitoringSchedulesDecoded0 = [SageMakerClientTypes.MonitoringSchedule]()
            for structure0 in monitoringSchedulesContainer {
                if let structure0 = structure0 {
                    monitoringSchedulesDecoded0?.append(structure0)
                }
            }
        }
        monitoringSchedules = monitoringSchedulesDecoded0
        let tagsContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[SageMakerClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [SageMakerClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}
