// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SageMakerClientTypes.UserSettings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case canvasAppSettings = "CanvasAppSettings"
        case executionRole = "ExecutionRole"
        case jupyterServerAppSettings = "JupyterServerAppSettings"
        case kernelGatewayAppSettings = "KernelGatewayAppSettings"
        case rSessionAppSettings = "RSessionAppSettings"
        case rStudioServerProAppSettings = "RStudioServerProAppSettings"
        case securityGroups = "SecurityGroups"
        case sharingSettings = "SharingSettings"
        case tensorBoardAppSettings = "TensorBoardAppSettings"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let canvasAppSettings = self.canvasAppSettings {
            try encodeContainer.encode(canvasAppSettings, forKey: .canvasAppSettings)
        }
        if let executionRole = self.executionRole {
            try encodeContainer.encode(executionRole, forKey: .executionRole)
        }
        if let jupyterServerAppSettings = self.jupyterServerAppSettings {
            try encodeContainer.encode(jupyterServerAppSettings, forKey: .jupyterServerAppSettings)
        }
        if let kernelGatewayAppSettings = self.kernelGatewayAppSettings {
            try encodeContainer.encode(kernelGatewayAppSettings, forKey: .kernelGatewayAppSettings)
        }
        if let rSessionAppSettings = self.rSessionAppSettings {
            try encodeContainer.encode(rSessionAppSettings, forKey: .rSessionAppSettings)
        }
        if let rStudioServerProAppSettings = self.rStudioServerProAppSettings {
            try encodeContainer.encode(rStudioServerProAppSettings, forKey: .rStudioServerProAppSettings)
        }
        if let securityGroups = securityGroups {
            var securityGroupsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .securityGroups)
            for securitygroupids0 in securityGroups {
                try securityGroupsContainer.encode(securitygroupids0)
            }
        }
        if let sharingSettings = self.sharingSettings {
            try encodeContainer.encode(sharingSettings, forKey: .sharingSettings)
        }
        if let tensorBoardAppSettings = self.tensorBoardAppSettings {
            try encodeContainer.encode(tensorBoardAppSettings, forKey: .tensorBoardAppSettings)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let executionRoleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .executionRole)
        executionRole = executionRoleDecoded
        let securityGroupsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .securityGroups)
        var securityGroupsDecoded0:[Swift.String]? = nil
        if let securityGroupsContainer = securityGroupsContainer {
            securityGroupsDecoded0 = [Swift.String]()
            for string0 in securityGroupsContainer {
                if let string0 = string0 {
                    securityGroupsDecoded0?.append(string0)
                }
            }
        }
        securityGroups = securityGroupsDecoded0
        let sharingSettingsDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.SharingSettings.self, forKey: .sharingSettings)
        sharingSettings = sharingSettingsDecoded
        let jupyterServerAppSettingsDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.JupyterServerAppSettings.self, forKey: .jupyterServerAppSettings)
        jupyterServerAppSettings = jupyterServerAppSettingsDecoded
        let kernelGatewayAppSettingsDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.KernelGatewayAppSettings.self, forKey: .kernelGatewayAppSettings)
        kernelGatewayAppSettings = kernelGatewayAppSettingsDecoded
        let tensorBoardAppSettingsDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.TensorBoardAppSettings.self, forKey: .tensorBoardAppSettings)
        tensorBoardAppSettings = tensorBoardAppSettingsDecoded
        let rStudioServerProAppSettingsDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.RStudioServerProAppSettings.self, forKey: .rStudioServerProAppSettings)
        rStudioServerProAppSettings = rStudioServerProAppSettingsDecoded
        let rSessionAppSettingsDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.RSessionAppSettings.self, forKey: .rSessionAppSettings)
        rSessionAppSettings = rSessionAppSettingsDecoded
        let canvasAppSettingsDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.CanvasAppSettings.self, forKey: .canvasAppSettings)
        canvasAppSettings = canvasAppSettingsDecoded
    }
}
