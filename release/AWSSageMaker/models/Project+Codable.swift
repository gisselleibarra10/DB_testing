// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SageMakerClientTypes.Project: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createdBy = "CreatedBy"
        case creationTime = "CreationTime"
        case lastModifiedBy = "LastModifiedBy"
        case lastModifiedTime = "LastModifiedTime"
        case projectArn = "ProjectArn"
        case projectDescription = "ProjectDescription"
        case projectId = "ProjectId"
        case projectName = "ProjectName"
        case projectStatus = "ProjectStatus"
        case serviceCatalogProvisionedProductDetails = "ServiceCatalogProvisionedProductDetails"
        case serviceCatalogProvisioningDetails = "ServiceCatalogProvisioningDetails"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let createdBy = self.createdBy {
            try encodeContainer.encode(createdBy, forKey: .createdBy)
        }
        if let creationTime = self.creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let lastModifiedBy = self.lastModifiedBy {
            try encodeContainer.encode(lastModifiedBy, forKey: .lastModifiedBy)
        }
        if let lastModifiedTime = self.lastModifiedTime {
            try encodeContainer.encode(lastModifiedTime.timeIntervalSince1970, forKey: .lastModifiedTime)
        }
        if let projectArn = self.projectArn {
            try encodeContainer.encode(projectArn, forKey: .projectArn)
        }
        if let projectDescription = self.projectDescription {
            try encodeContainer.encode(projectDescription, forKey: .projectDescription)
        }
        if let projectId = self.projectId {
            try encodeContainer.encode(projectId, forKey: .projectId)
        }
        if let projectName = self.projectName {
            try encodeContainer.encode(projectName, forKey: .projectName)
        }
        if let projectStatus = self.projectStatus {
            try encodeContainer.encode(projectStatus.rawValue, forKey: .projectStatus)
        }
        if let serviceCatalogProvisionedProductDetails = self.serviceCatalogProvisionedProductDetails {
            try encodeContainer.encode(serviceCatalogProvisionedProductDetails, forKey: .serviceCatalogProvisionedProductDetails)
        }
        if let serviceCatalogProvisioningDetails = self.serviceCatalogProvisioningDetails {
            try encodeContainer.encode(serviceCatalogProvisioningDetails, forKey: .serviceCatalogProvisioningDetails)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let projectArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .projectArn)
        projectArn = projectArnDecoded
        let projectNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .projectName)
        projectName = projectNameDecoded
        let projectIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .projectId)
        projectId = projectIdDecoded
        let projectDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .projectDescription)
        projectDescription = projectDescriptionDecoded
        let serviceCatalogProvisioningDetailsDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ServiceCatalogProvisioningDetails.self, forKey: .serviceCatalogProvisioningDetails)
        serviceCatalogProvisioningDetails = serviceCatalogProvisioningDetailsDecoded
        let serviceCatalogProvisionedProductDetailsDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ServiceCatalogProvisionedProductDetails.self, forKey: .serviceCatalogProvisionedProductDetails)
        serviceCatalogProvisionedProductDetails = serviceCatalogProvisionedProductDetailsDecoded
        let projectStatusDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ProjectStatus.self, forKey: .projectStatus)
        projectStatus = projectStatusDecoded
        let createdByDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.UserContext.self, forKey: .createdBy)
        createdBy = createdByDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let tagsContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[SageMakerClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [SageMakerClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let lastModifiedTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedTime)
        lastModifiedTime = lastModifiedTimeDecoded
        let lastModifiedByDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.UserContext.self, forKey: .lastModifiedBy)
        lastModifiedBy = lastModifiedByDecoded
    }
}
