// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SageMakerClientTypes.MonitoringOutputConfig: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case kmsKeyId = "KmsKeyId"
        case monitoringOutputs = "MonitoringOutputs"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let kmsKeyId = self.kmsKeyId {
            try encodeContainer.encode(kmsKeyId, forKey: .kmsKeyId)
        }
        if let monitoringOutputs = monitoringOutputs {
            var monitoringOutputsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .monitoringOutputs)
            for monitoringoutputs0 in monitoringOutputs {
                try monitoringOutputsContainer.encode(monitoringoutputs0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let monitoringOutputsContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.MonitoringOutput?].self, forKey: .monitoringOutputs)
        var monitoringOutputsDecoded0:[SageMakerClientTypes.MonitoringOutput]? = nil
        if let monitoringOutputsContainer = monitoringOutputsContainer {
            monitoringOutputsDecoded0 = [SageMakerClientTypes.MonitoringOutput]()
            for structure0 in monitoringOutputsContainer {
                if let structure0 = structure0 {
                    monitoringOutputsDecoded0?.append(structure0)
                }
            }
        }
        monitoringOutputs = monitoringOutputsDecoded0
        let kmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kmsKeyId)
        kmsKeyId = kmsKeyIdDecoded
    }
}
