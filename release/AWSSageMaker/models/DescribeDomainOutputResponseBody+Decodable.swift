// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeDomainOutputResponseBody: Swift.Equatable {
    let domainArn: Swift.String?
    let domainId: Swift.String?
    let domainName: Swift.String?
    let homeEfsFileSystemId: Swift.String?
    let singleSignOnManagedApplicationInstanceId: Swift.String?
    let status: SageMakerClientTypes.DomainStatus?
    let creationTime: ClientRuntime.Date?
    let lastModifiedTime: ClientRuntime.Date?
    let failureReason: Swift.String?
    let authMode: SageMakerClientTypes.AuthMode?
    let defaultUserSettings: SageMakerClientTypes.UserSettings?
    let appNetworkAccessType: SageMakerClientTypes.AppNetworkAccessType?
    let homeEfsFileSystemKmsKeyId: Swift.String?
    let subnetIds: [Swift.String]?
    let url: Swift.String?
    let vpcId: Swift.String?
    let kmsKeyId: Swift.String?
    let domainSettings: SageMakerClientTypes.DomainSettings?
    let appSecurityGroupManagement: SageMakerClientTypes.AppSecurityGroupManagement?
    let securityGroupIdForDomainBoundary: Swift.String?
}

extension DescribeDomainOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case appNetworkAccessType = "AppNetworkAccessType"
        case appSecurityGroupManagement = "AppSecurityGroupManagement"
        case authMode = "AuthMode"
        case creationTime = "CreationTime"
        case defaultUserSettings = "DefaultUserSettings"
        case domainArn = "DomainArn"
        case domainId = "DomainId"
        case domainName = "DomainName"
        case domainSettings = "DomainSettings"
        case failureReason = "FailureReason"
        case homeEfsFileSystemId = "HomeEfsFileSystemId"
        case homeEfsFileSystemKmsKeyId = "HomeEfsFileSystemKmsKeyId"
        case kmsKeyId = "KmsKeyId"
        case lastModifiedTime = "LastModifiedTime"
        case securityGroupIdForDomainBoundary = "SecurityGroupIdForDomainBoundary"
        case singleSignOnManagedApplicationInstanceId = "SingleSignOnManagedApplicationInstanceId"
        case status = "Status"
        case subnetIds = "SubnetIds"
        case url = "Url"
        case vpcId = "VpcId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domainArn)
        domainArn = domainArnDecoded
        let domainIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domainId)
        domainId = domainIdDecoded
        let domainNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domainName)
        domainName = domainNameDecoded
        let homeEfsFileSystemIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .homeEfsFileSystemId)
        homeEfsFileSystemId = homeEfsFileSystemIdDecoded
        let singleSignOnManagedApplicationInstanceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .singleSignOnManagedApplicationInstanceId)
        singleSignOnManagedApplicationInstanceId = singleSignOnManagedApplicationInstanceIdDecoded
        let statusDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.DomainStatus.self, forKey: .status)
        status = statusDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let lastModifiedTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedTime)
        lastModifiedTime = lastModifiedTimeDecoded
        let failureReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .failureReason)
        failureReason = failureReasonDecoded
        let authModeDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.AuthMode.self, forKey: .authMode)
        authMode = authModeDecoded
        let defaultUserSettingsDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.UserSettings.self, forKey: .defaultUserSettings)
        defaultUserSettings = defaultUserSettingsDecoded
        let appNetworkAccessTypeDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.AppNetworkAccessType.self, forKey: .appNetworkAccessType)
        appNetworkAccessType = appNetworkAccessTypeDecoded
        let homeEfsFileSystemKmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .homeEfsFileSystemKmsKeyId)
        homeEfsFileSystemKmsKeyId = homeEfsFileSystemKmsKeyIdDecoded
        let subnetIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .subnetIds)
        var subnetIdsDecoded0:[Swift.String]? = nil
        if let subnetIdsContainer = subnetIdsContainer {
            subnetIdsDecoded0 = [Swift.String]()
            for string0 in subnetIdsContainer {
                if let string0 = string0 {
                    subnetIdsDecoded0?.append(string0)
                }
            }
        }
        subnetIds = subnetIdsDecoded0
        let urlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .url)
        url = urlDecoded
        let vpcIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vpcId)
        vpcId = vpcIdDecoded
        let kmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kmsKeyId)
        kmsKeyId = kmsKeyIdDecoded
        let domainSettingsDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.DomainSettings.self, forKey: .domainSettings)
        domainSettings = domainSettingsDecoded
        let appSecurityGroupManagementDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.AppSecurityGroupManagement.self, forKey: .appSecurityGroupManagement)
        appSecurityGroupManagement = appSecurityGroupManagementDecoded
        let securityGroupIdForDomainBoundaryDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .securityGroupIdForDomainBoundary)
        securityGroupIdForDomainBoundary = securityGroupIdForDomainBoundaryDecoded
    }
}
