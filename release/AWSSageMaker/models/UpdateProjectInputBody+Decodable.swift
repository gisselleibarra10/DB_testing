// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct UpdateProjectInputBody: Swift.Equatable {
    let projectName: Swift.String?
    let projectDescription: Swift.String?
    let serviceCatalogProvisioningUpdateDetails: SageMakerClientTypes.ServiceCatalogProvisioningUpdateDetails?
    let tags: [SageMakerClientTypes.Tag]?
}

extension UpdateProjectInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case projectDescription = "ProjectDescription"
        case projectName = "ProjectName"
        case serviceCatalogProvisioningUpdateDetails = "ServiceCatalogProvisioningUpdateDetails"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let projectNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .projectName)
        projectName = projectNameDecoded
        let projectDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .projectDescription)
        projectDescription = projectDescriptionDecoded
        let serviceCatalogProvisioningUpdateDetailsDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ServiceCatalogProvisioningUpdateDetails.self, forKey: .serviceCatalogProvisioningUpdateDetails)
        serviceCatalogProvisioningUpdateDetails = serviceCatalogProvisioningUpdateDetailsDecoded
        let tagsContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[SageMakerClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [SageMakerClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}
