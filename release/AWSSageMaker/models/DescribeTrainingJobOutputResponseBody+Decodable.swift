// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeTrainingJobOutputResponseBody: Swift.Equatable {
    let trainingJobName: Swift.String?
    let trainingJobArn: Swift.String?
    let tuningJobArn: Swift.String?
    let labelingJobArn: Swift.String?
    let autoMLJobArn: Swift.String?
    let modelArtifacts: SageMakerClientTypes.ModelArtifacts?
    let trainingJobStatus: SageMakerClientTypes.TrainingJobStatus?
    let secondaryStatus: SageMakerClientTypes.SecondaryStatus?
    let failureReason: Swift.String?
    let hyperParameters: [Swift.String:Swift.String]?
    let algorithmSpecification: SageMakerClientTypes.AlgorithmSpecification?
    let roleArn: Swift.String?
    let inputDataConfig: [SageMakerClientTypes.Channel]?
    let outputDataConfig: SageMakerClientTypes.OutputDataConfig?
    let resourceConfig: SageMakerClientTypes.ResourceConfig?
    let vpcConfig: SageMakerClientTypes.VpcConfig?
    let stoppingCondition: SageMakerClientTypes.StoppingCondition?
    let creationTime: ClientRuntime.Date?
    let trainingStartTime: ClientRuntime.Date?
    let trainingEndTime: ClientRuntime.Date?
    let lastModifiedTime: ClientRuntime.Date?
    let secondaryStatusTransitions: [SageMakerClientTypes.SecondaryStatusTransition]?
    let finalMetricDataList: [SageMakerClientTypes.MetricData]?
    let enableNetworkIsolation: Swift.Bool
    let enableInterContainerTrafficEncryption: Swift.Bool
    let enableManagedSpotTraining: Swift.Bool
    let checkpointConfig: SageMakerClientTypes.CheckpointConfig?
    let trainingTimeInSeconds: Swift.Int?
    let billableTimeInSeconds: Swift.Int?
    let debugHookConfig: SageMakerClientTypes.DebugHookConfig?
    let experimentConfig: SageMakerClientTypes.ExperimentConfig?
    let debugRuleConfigurations: [SageMakerClientTypes.DebugRuleConfiguration]?
    let tensorBoardOutputConfig: SageMakerClientTypes.TensorBoardOutputConfig?
    let debugRuleEvaluationStatuses: [SageMakerClientTypes.DebugRuleEvaluationStatus]?
    let profilerConfig: SageMakerClientTypes.ProfilerConfig?
    let profilerRuleConfigurations: [SageMakerClientTypes.ProfilerRuleConfiguration]?
    let profilerRuleEvaluationStatuses: [SageMakerClientTypes.ProfilerRuleEvaluationStatus]?
    let profilingStatus: SageMakerClientTypes.ProfilingStatus?
    let retryStrategy: SageMakerClientTypes.RetryStrategy?
    let environment: [Swift.String:Swift.String]?
    let warmPoolStatus: SageMakerClientTypes.WarmPoolStatus?
}

extension DescribeTrainingJobOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case algorithmSpecification = "AlgorithmSpecification"
        case autoMLJobArn = "AutoMLJobArn"
        case billableTimeInSeconds = "BillableTimeInSeconds"
        case checkpointConfig = "CheckpointConfig"
        case creationTime = "CreationTime"
        case debugHookConfig = "DebugHookConfig"
        case debugRuleConfigurations = "DebugRuleConfigurations"
        case debugRuleEvaluationStatuses = "DebugRuleEvaluationStatuses"
        case enableInterContainerTrafficEncryption = "EnableInterContainerTrafficEncryption"
        case enableManagedSpotTraining = "EnableManagedSpotTraining"
        case enableNetworkIsolation = "EnableNetworkIsolation"
        case environment = "Environment"
        case experimentConfig = "ExperimentConfig"
        case failureReason = "FailureReason"
        case finalMetricDataList = "FinalMetricDataList"
        case hyperParameters = "HyperParameters"
        case inputDataConfig = "InputDataConfig"
        case labelingJobArn = "LabelingJobArn"
        case lastModifiedTime = "LastModifiedTime"
        case modelArtifacts = "ModelArtifacts"
        case outputDataConfig = "OutputDataConfig"
        case profilerConfig = "ProfilerConfig"
        case profilerRuleConfigurations = "ProfilerRuleConfigurations"
        case profilerRuleEvaluationStatuses = "ProfilerRuleEvaluationStatuses"
        case profilingStatus = "ProfilingStatus"
        case resourceConfig = "ResourceConfig"
        case retryStrategy = "RetryStrategy"
        case roleArn = "RoleArn"
        case secondaryStatus = "SecondaryStatus"
        case secondaryStatusTransitions = "SecondaryStatusTransitions"
        case stoppingCondition = "StoppingCondition"
        case tensorBoardOutputConfig = "TensorBoardOutputConfig"
        case trainingEndTime = "TrainingEndTime"
        case trainingJobArn = "TrainingJobArn"
        case trainingJobName = "TrainingJobName"
        case trainingJobStatus = "TrainingJobStatus"
        case trainingStartTime = "TrainingStartTime"
        case trainingTimeInSeconds = "TrainingTimeInSeconds"
        case tuningJobArn = "TuningJobArn"
        case vpcConfig = "VpcConfig"
        case warmPoolStatus = "WarmPoolStatus"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let trainingJobNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .trainingJobName)
        trainingJobName = trainingJobNameDecoded
        let trainingJobArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .trainingJobArn)
        trainingJobArn = trainingJobArnDecoded
        let tuningJobArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tuningJobArn)
        tuningJobArn = tuningJobArnDecoded
        let labelingJobArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .labelingJobArn)
        labelingJobArn = labelingJobArnDecoded
        let autoMLJobArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .autoMLJobArn)
        autoMLJobArn = autoMLJobArnDecoded
        let modelArtifactsDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ModelArtifacts.self, forKey: .modelArtifacts)
        modelArtifacts = modelArtifactsDecoded
        let trainingJobStatusDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.TrainingJobStatus.self, forKey: .trainingJobStatus)
        trainingJobStatus = trainingJobStatusDecoded
        let secondaryStatusDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.SecondaryStatus.self, forKey: .secondaryStatus)
        secondaryStatus = secondaryStatusDecoded
        let failureReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .failureReason)
        failureReason = failureReasonDecoded
        let hyperParametersContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .hyperParameters)
        var hyperParametersDecoded0: [Swift.String:Swift.String]? = nil
        if let hyperParametersContainer = hyperParametersContainer {
            hyperParametersDecoded0 = [Swift.String:Swift.String]()
            for (key0, hyperparametervalue0) in hyperParametersContainer {
                if let hyperparametervalue0 = hyperparametervalue0 {
                    hyperParametersDecoded0?[key0] = hyperparametervalue0
                }
            }
        }
        hyperParameters = hyperParametersDecoded0
        let algorithmSpecificationDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.AlgorithmSpecification.self, forKey: .algorithmSpecification)
        algorithmSpecification = algorithmSpecificationDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let inputDataConfigContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.Channel?].self, forKey: .inputDataConfig)
        var inputDataConfigDecoded0:[SageMakerClientTypes.Channel]? = nil
        if let inputDataConfigContainer = inputDataConfigContainer {
            inputDataConfigDecoded0 = [SageMakerClientTypes.Channel]()
            for structure0 in inputDataConfigContainer {
                if let structure0 = structure0 {
                    inputDataConfigDecoded0?.append(structure0)
                }
            }
        }
        inputDataConfig = inputDataConfigDecoded0
        let outputDataConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.OutputDataConfig.self, forKey: .outputDataConfig)
        outputDataConfig = outputDataConfigDecoded
        let resourceConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ResourceConfig.self, forKey: .resourceConfig)
        resourceConfig = resourceConfigDecoded
        let vpcConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.VpcConfig.self, forKey: .vpcConfig)
        vpcConfig = vpcConfigDecoded
        let stoppingConditionDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.StoppingCondition.self, forKey: .stoppingCondition)
        stoppingCondition = stoppingConditionDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let trainingStartTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .trainingStartTime)
        trainingStartTime = trainingStartTimeDecoded
        let trainingEndTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .trainingEndTime)
        trainingEndTime = trainingEndTimeDecoded
        let lastModifiedTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedTime)
        lastModifiedTime = lastModifiedTimeDecoded
        let secondaryStatusTransitionsContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.SecondaryStatusTransition?].self, forKey: .secondaryStatusTransitions)
        var secondaryStatusTransitionsDecoded0:[SageMakerClientTypes.SecondaryStatusTransition]? = nil
        if let secondaryStatusTransitionsContainer = secondaryStatusTransitionsContainer {
            secondaryStatusTransitionsDecoded0 = [SageMakerClientTypes.SecondaryStatusTransition]()
            for structure0 in secondaryStatusTransitionsContainer {
                if let structure0 = structure0 {
                    secondaryStatusTransitionsDecoded0?.append(structure0)
                }
            }
        }
        secondaryStatusTransitions = secondaryStatusTransitionsDecoded0
        let finalMetricDataListContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.MetricData?].self, forKey: .finalMetricDataList)
        var finalMetricDataListDecoded0:[SageMakerClientTypes.MetricData]? = nil
        if let finalMetricDataListContainer = finalMetricDataListContainer {
            finalMetricDataListDecoded0 = [SageMakerClientTypes.MetricData]()
            for structure0 in finalMetricDataListContainer {
                if let structure0 = structure0 {
                    finalMetricDataListDecoded0?.append(structure0)
                }
            }
        }
        finalMetricDataList = finalMetricDataListDecoded0
        let enableNetworkIsolationDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enableNetworkIsolation) ?? false
        enableNetworkIsolation = enableNetworkIsolationDecoded
        let enableInterContainerTrafficEncryptionDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enableInterContainerTrafficEncryption) ?? false
        enableInterContainerTrafficEncryption = enableInterContainerTrafficEncryptionDecoded
        let enableManagedSpotTrainingDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enableManagedSpotTraining) ?? false
        enableManagedSpotTraining = enableManagedSpotTrainingDecoded
        let checkpointConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.CheckpointConfig.self, forKey: .checkpointConfig)
        checkpointConfig = checkpointConfigDecoded
        let trainingTimeInSecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .trainingTimeInSeconds)
        trainingTimeInSeconds = trainingTimeInSecondsDecoded
        let billableTimeInSecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .billableTimeInSeconds)
        billableTimeInSeconds = billableTimeInSecondsDecoded
        let debugHookConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.DebugHookConfig.self, forKey: .debugHookConfig)
        debugHookConfig = debugHookConfigDecoded
        let experimentConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ExperimentConfig.self, forKey: .experimentConfig)
        experimentConfig = experimentConfigDecoded
        let debugRuleConfigurationsContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.DebugRuleConfiguration?].self, forKey: .debugRuleConfigurations)
        var debugRuleConfigurationsDecoded0:[SageMakerClientTypes.DebugRuleConfiguration]? = nil
        if let debugRuleConfigurationsContainer = debugRuleConfigurationsContainer {
            debugRuleConfigurationsDecoded0 = [SageMakerClientTypes.DebugRuleConfiguration]()
            for structure0 in debugRuleConfigurationsContainer {
                if let structure0 = structure0 {
                    debugRuleConfigurationsDecoded0?.append(structure0)
                }
            }
        }
        debugRuleConfigurations = debugRuleConfigurationsDecoded0
        let tensorBoardOutputConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.TensorBoardOutputConfig.self, forKey: .tensorBoardOutputConfig)
        tensorBoardOutputConfig = tensorBoardOutputConfigDecoded
        let debugRuleEvaluationStatusesContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.DebugRuleEvaluationStatus?].self, forKey: .debugRuleEvaluationStatuses)
        var debugRuleEvaluationStatusesDecoded0:[SageMakerClientTypes.DebugRuleEvaluationStatus]? = nil
        if let debugRuleEvaluationStatusesContainer = debugRuleEvaluationStatusesContainer {
            debugRuleEvaluationStatusesDecoded0 = [SageMakerClientTypes.DebugRuleEvaluationStatus]()
            for structure0 in debugRuleEvaluationStatusesContainer {
                if let structure0 = structure0 {
                    debugRuleEvaluationStatusesDecoded0?.append(structure0)
                }
            }
        }
        debugRuleEvaluationStatuses = debugRuleEvaluationStatusesDecoded0
        let profilerConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ProfilerConfig.self, forKey: .profilerConfig)
        profilerConfig = profilerConfigDecoded
        let profilerRuleConfigurationsContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.ProfilerRuleConfiguration?].self, forKey: .profilerRuleConfigurations)
        var profilerRuleConfigurationsDecoded0:[SageMakerClientTypes.ProfilerRuleConfiguration]? = nil
        if let profilerRuleConfigurationsContainer = profilerRuleConfigurationsContainer {
            profilerRuleConfigurationsDecoded0 = [SageMakerClientTypes.ProfilerRuleConfiguration]()
            for structure0 in profilerRuleConfigurationsContainer {
                if let structure0 = structure0 {
                    profilerRuleConfigurationsDecoded0?.append(structure0)
                }
            }
        }
        profilerRuleConfigurations = profilerRuleConfigurationsDecoded0
        let profilerRuleEvaluationStatusesContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.ProfilerRuleEvaluationStatus?].self, forKey: .profilerRuleEvaluationStatuses)
        var profilerRuleEvaluationStatusesDecoded0:[SageMakerClientTypes.ProfilerRuleEvaluationStatus]? = nil
        if let profilerRuleEvaluationStatusesContainer = profilerRuleEvaluationStatusesContainer {
            profilerRuleEvaluationStatusesDecoded0 = [SageMakerClientTypes.ProfilerRuleEvaluationStatus]()
            for structure0 in profilerRuleEvaluationStatusesContainer {
                if let structure0 = structure0 {
                    profilerRuleEvaluationStatusesDecoded0?.append(structure0)
                }
            }
        }
        profilerRuleEvaluationStatuses = profilerRuleEvaluationStatusesDecoded0
        let profilingStatusDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ProfilingStatus.self, forKey: .profilingStatus)
        profilingStatus = profilingStatusDecoded
        let retryStrategyDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.RetryStrategy.self, forKey: .retryStrategy)
        retryStrategy = retryStrategyDecoded
        let environmentContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .environment)
        var environmentDecoded0: [Swift.String:Swift.String]? = nil
        if let environmentContainer = environmentContainer {
            environmentDecoded0 = [Swift.String:Swift.String]()
            for (key0, trainingenvironmentvalue0) in environmentContainer {
                if let trainingenvironmentvalue0 = trainingenvironmentvalue0 {
                    environmentDecoded0?[key0] = trainingenvironmentvalue0
                }
            }
        }
        environment = environmentDecoded0
        let warmPoolStatusDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.WarmPoolStatus.self, forKey: .warmPoolStatus)
        warmPoolStatus = warmPoolStatusDecoded
    }
}
