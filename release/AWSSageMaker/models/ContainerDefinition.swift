// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension SageMakerClientTypes {
    /// Describes the container, as part of model definition.
    public struct ContainerDefinition: Swift.Equatable {
        /// This parameter is ignored for models that contain only a PrimaryContainer. When a ContainerDefinition is part of an inference pipeline, the value of the parameter uniquely identifies the container for the purposes of logging and metrics. For information, see [Use Logs and Metrics to Monitor an Inference Pipeline](https://docs.aws.amazon.com/sagemaker/latest/dg/inference-pipeline-logs-metrics.html). If you don't specify a value for this parameter for a ContainerDefinition that is part of an inference pipeline, a unique name is automatically assigned based on the position of the ContainerDefinition in the pipeline. If you specify a value for the ContainerHostName for any ContainerDefinition that is part of an inference pipeline, you must specify a value for the ContainerHostName parameter of every ContainerDefinition in that pipeline.
        public var containerHostname: Swift.String?
        /// The environment variables to set in the Docker container. Each key and value in the Environment string to string map can have length of up to 1024. We support up to 16 entries in the map.
        public var environment: [Swift.String:Swift.String]?
        /// The path where inference code is stored. This can be either in Amazon EC2 Container Registry or in a Docker registry that is accessible from the same VPC that you configure for your endpoint. If you are using your own custom algorithm instead of an algorithm provided by SageMaker, the inference code must meet SageMaker requirements. SageMaker supports both registry/repository[:tag] and registry/repository[@digest] image path formats. For more information, see [Using Your Own Algorithms with Amazon SageMaker](https://docs.aws.amazon.com/sagemaker/latest/dg/your-algorithms.html)
        public var image: Swift.String?
        /// Specifies whether the model container is in Amazon ECR or a private Docker registry accessible from your Amazon Virtual Private Cloud (VPC). For information about storing containers in a private Docker registry, see [Use a Private Docker Registry for Real-Time Inference Containers](https://docs.aws.amazon.com/sagemaker/latest/dg/your-algorithms-containers-inference-private.html)
        public var imageConfig: SageMakerClientTypes.ImageConfig?
        /// The inference specification name in the model package version.
        public var inferenceSpecificationName: Swift.String?
        /// Whether the container hosts a single model or multiple models.
        public var mode: SageMakerClientTypes.ContainerMode?
        /// The S3 path where the model artifacts, which result from model training, are stored. This path must point to a single gzip compressed tar archive (.tar.gz suffix). The S3 path is required for SageMaker built-in algorithms, but not if you use your own algorithms. For more information on built-in algorithms, see [Common Parameters](https://docs.aws.amazon.com/sagemaker/latest/dg/sagemaker-algo-docker-registry-paths.html). The model artifacts must be in an S3 bucket that is in the same region as the model or endpoint you are creating. If you provide a value for this parameter, SageMaker uses Amazon Web Services Security Token Service to download model artifacts from the S3 path you provide. Amazon Web Services STS is activated in your IAM user account by default. If you previously deactivated Amazon Web Services STS for a region, you need to reactivate Amazon Web Services STS for that region. For more information, see [Activating and Deactivating Amazon Web Services STS in an Amazon Web Services Region](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_enable-regions.html) in the Amazon Web Services Identity and Access Management User Guide. If you use a built-in algorithm to create a model, SageMaker requires that you provide a S3 path to the model artifacts in ModelDataUrl.
        public var modelDataUrl: Swift.String?
        /// The name or Amazon Resource Name (ARN) of the model package to use to create the model.
        public var modelPackageName: Swift.String?
        /// Specifies additional configuration for multi-model endpoints.
        public var multiModelConfig: SageMakerClientTypes.MultiModelConfig?

        public init (
            containerHostname: Swift.String? = nil,
            environment: [Swift.String:Swift.String]? = nil,
            image: Swift.String? = nil,
            imageConfig: SageMakerClientTypes.ImageConfig? = nil,
            inferenceSpecificationName: Swift.String? = nil,
            mode: SageMakerClientTypes.ContainerMode? = nil,
            modelDataUrl: Swift.String? = nil,
            modelPackageName: Swift.String? = nil,
            multiModelConfig: SageMakerClientTypes.MultiModelConfig? = nil
        )
        {
            self.containerHostname = containerHostname
            self.environment = environment
            self.image = image
            self.imageConfig = imageConfig
            self.inferenceSpecificationName = inferenceSpecificationName
            self.mode = mode
            self.modelDataUrl = modelDataUrl
            self.modelPackageName = modelPackageName
            self.multiModelConfig = multiModelConfig
        }
    }

}
