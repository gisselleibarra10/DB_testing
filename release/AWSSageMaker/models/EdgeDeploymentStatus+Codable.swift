// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SageMakerClientTypes.EdgeDeploymentStatus: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case edgeDeploymentFailedInStage = "EdgeDeploymentFailedInStage"
        case edgeDeploymentPendingInStage = "EdgeDeploymentPendingInStage"
        case edgeDeploymentStageStartTime = "EdgeDeploymentStageStartTime"
        case edgeDeploymentStatusMessage = "EdgeDeploymentStatusMessage"
        case edgeDeploymentSuccessInStage = "EdgeDeploymentSuccessInStage"
        case stageStatus = "StageStatus"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if edgeDeploymentFailedInStage != 0 {
            try encodeContainer.encode(edgeDeploymentFailedInStage, forKey: .edgeDeploymentFailedInStage)
        }
        if edgeDeploymentPendingInStage != 0 {
            try encodeContainer.encode(edgeDeploymentPendingInStage, forKey: .edgeDeploymentPendingInStage)
        }
        if let edgeDeploymentStageStartTime = self.edgeDeploymentStageStartTime {
            try encodeContainer.encode(edgeDeploymentStageStartTime.timeIntervalSince1970, forKey: .edgeDeploymentStageStartTime)
        }
        if let edgeDeploymentStatusMessage = self.edgeDeploymentStatusMessage {
            try encodeContainer.encode(edgeDeploymentStatusMessage, forKey: .edgeDeploymentStatusMessage)
        }
        if edgeDeploymentSuccessInStage != 0 {
            try encodeContainer.encode(edgeDeploymentSuccessInStage, forKey: .edgeDeploymentSuccessInStage)
        }
        if let stageStatus = self.stageStatus {
            try encodeContainer.encode(stageStatus.rawValue, forKey: .stageStatus)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let stageStatusDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.StageStatus.self, forKey: .stageStatus)
        stageStatus = stageStatusDecoded
        let edgeDeploymentSuccessInStageDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .edgeDeploymentSuccessInStage) ?? 0
        edgeDeploymentSuccessInStage = edgeDeploymentSuccessInStageDecoded
        let edgeDeploymentPendingInStageDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .edgeDeploymentPendingInStage) ?? 0
        edgeDeploymentPendingInStage = edgeDeploymentPendingInStageDecoded
        let edgeDeploymentFailedInStageDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .edgeDeploymentFailedInStage) ?? 0
        edgeDeploymentFailedInStage = edgeDeploymentFailedInStageDecoded
        let edgeDeploymentStatusMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .edgeDeploymentStatusMessage)
        edgeDeploymentStatusMessage = edgeDeploymentStatusMessageDecoded
        let edgeDeploymentStageStartTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .edgeDeploymentStageStartTime)
        edgeDeploymentStageStartTime = edgeDeploymentStageStartTimeDecoded
    }
}
