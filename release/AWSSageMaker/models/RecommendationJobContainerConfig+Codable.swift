// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SageMakerClientTypes.RecommendationJobContainerConfig: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domain = "Domain"
        case framework = "Framework"
        case frameworkVersion = "FrameworkVersion"
        case nearestModelName = "NearestModelName"
        case payloadConfig = "PayloadConfig"
        case supportedInstanceTypes = "SupportedInstanceTypes"
        case task = "Task"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let domain = self.domain {
            try encodeContainer.encode(domain, forKey: .domain)
        }
        if let framework = self.framework {
            try encodeContainer.encode(framework, forKey: .framework)
        }
        if let frameworkVersion = self.frameworkVersion {
            try encodeContainer.encode(frameworkVersion, forKey: .frameworkVersion)
        }
        if let nearestModelName = self.nearestModelName {
            try encodeContainer.encode(nearestModelName, forKey: .nearestModelName)
        }
        if let payloadConfig = self.payloadConfig {
            try encodeContainer.encode(payloadConfig, forKey: .payloadConfig)
        }
        if let supportedInstanceTypes = supportedInstanceTypes {
            var supportedInstanceTypesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .supportedInstanceTypes)
            for recommendationjobsupportedinstancetypes0 in supportedInstanceTypes {
                try supportedInstanceTypesContainer.encode(recommendationjobsupportedinstancetypes0)
            }
        }
        if let task = self.task {
            try encodeContainer.encode(task, forKey: .task)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domain)
        domain = domainDecoded
        let taskDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .task)
        task = taskDecoded
        let frameworkDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .framework)
        framework = frameworkDecoded
        let frameworkVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .frameworkVersion)
        frameworkVersion = frameworkVersionDecoded
        let payloadConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.RecommendationJobPayloadConfig.self, forKey: .payloadConfig)
        payloadConfig = payloadConfigDecoded
        let nearestModelNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nearestModelName)
        nearestModelName = nearestModelNameDecoded
        let supportedInstanceTypesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .supportedInstanceTypes)
        var supportedInstanceTypesDecoded0:[Swift.String]? = nil
        if let supportedInstanceTypesContainer = supportedInstanceTypesContainer {
            supportedInstanceTypesDecoded0 = [Swift.String]()
            for string0 in supportedInstanceTypesContainer {
                if let string0 = string0 {
                    supportedInstanceTypesDecoded0?.append(string0)
                }
            }
        }
        supportedInstanceTypes = supportedInstanceTypesDecoded0
    }
}
