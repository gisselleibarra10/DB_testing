// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SageMakerClientTypes.HyperParameterTrainingJobSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTime = "CreationTime"
        case failureReason = "FailureReason"
        case finalHyperParameterTuningJobObjectiveMetric = "FinalHyperParameterTuningJobObjectiveMetric"
        case objectiveStatus = "ObjectiveStatus"
        case trainingEndTime = "TrainingEndTime"
        case trainingJobArn = "TrainingJobArn"
        case trainingJobDefinitionName = "TrainingJobDefinitionName"
        case trainingJobName = "TrainingJobName"
        case trainingJobStatus = "TrainingJobStatus"
        case trainingStartTime = "TrainingStartTime"
        case tunedHyperParameters = "TunedHyperParameters"
        case tuningJobName = "TuningJobName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationTime = self.creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let failureReason = self.failureReason {
            try encodeContainer.encode(failureReason, forKey: .failureReason)
        }
        if let finalHyperParameterTuningJobObjectiveMetric = self.finalHyperParameterTuningJobObjectiveMetric {
            try encodeContainer.encode(finalHyperParameterTuningJobObjectiveMetric, forKey: .finalHyperParameterTuningJobObjectiveMetric)
        }
        if let objectiveStatus = self.objectiveStatus {
            try encodeContainer.encode(objectiveStatus.rawValue, forKey: .objectiveStatus)
        }
        if let trainingEndTime = self.trainingEndTime {
            try encodeContainer.encode(trainingEndTime.timeIntervalSince1970, forKey: .trainingEndTime)
        }
        if let trainingJobArn = self.trainingJobArn {
            try encodeContainer.encode(trainingJobArn, forKey: .trainingJobArn)
        }
        if let trainingJobDefinitionName = self.trainingJobDefinitionName {
            try encodeContainer.encode(trainingJobDefinitionName, forKey: .trainingJobDefinitionName)
        }
        if let trainingJobName = self.trainingJobName {
            try encodeContainer.encode(trainingJobName, forKey: .trainingJobName)
        }
        if let trainingJobStatus = self.trainingJobStatus {
            try encodeContainer.encode(trainingJobStatus.rawValue, forKey: .trainingJobStatus)
        }
        if let trainingStartTime = self.trainingStartTime {
            try encodeContainer.encode(trainingStartTime.timeIntervalSince1970, forKey: .trainingStartTime)
        }
        if let tunedHyperParameters = tunedHyperParameters {
            var tunedHyperParametersContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tunedHyperParameters)
            for (dictKey0, hyperparameters0) in tunedHyperParameters {
                try tunedHyperParametersContainer.encode(hyperparameters0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let tuningJobName = self.tuningJobName {
            try encodeContainer.encode(tuningJobName, forKey: .tuningJobName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let trainingJobDefinitionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .trainingJobDefinitionName)
        trainingJobDefinitionName = trainingJobDefinitionNameDecoded
        let trainingJobNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .trainingJobName)
        trainingJobName = trainingJobNameDecoded
        let trainingJobArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .trainingJobArn)
        trainingJobArn = trainingJobArnDecoded
        let tuningJobNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tuningJobName)
        tuningJobName = tuningJobNameDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let trainingStartTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .trainingStartTime)
        trainingStartTime = trainingStartTimeDecoded
        let trainingEndTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .trainingEndTime)
        trainingEndTime = trainingEndTimeDecoded
        let trainingJobStatusDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.TrainingJobStatus.self, forKey: .trainingJobStatus)
        trainingJobStatus = trainingJobStatusDecoded
        let tunedHyperParametersContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tunedHyperParameters)
        var tunedHyperParametersDecoded0: [Swift.String:Swift.String]? = nil
        if let tunedHyperParametersContainer = tunedHyperParametersContainer {
            tunedHyperParametersDecoded0 = [Swift.String:Swift.String]()
            for (key0, hyperparametervalue0) in tunedHyperParametersContainer {
                if let hyperparametervalue0 = hyperparametervalue0 {
                    tunedHyperParametersDecoded0?[key0] = hyperparametervalue0
                }
            }
        }
        tunedHyperParameters = tunedHyperParametersDecoded0
        let failureReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .failureReason)
        failureReason = failureReasonDecoded
        let finalHyperParameterTuningJobObjectiveMetricDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.FinalHyperParameterTuningJobObjectiveMetric.self, forKey: .finalHyperParameterTuningJobObjectiveMetric)
        finalHyperParameterTuningJobObjectiveMetric = finalHyperParameterTuningJobObjectiveMetricDecoded
        let objectiveStatusDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ObjectiveStatus.self, forKey: .objectiveStatus)
        objectiveStatus = objectiveStatusDecoded
    }
}
