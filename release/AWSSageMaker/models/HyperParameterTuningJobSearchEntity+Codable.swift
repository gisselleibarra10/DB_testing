// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SageMakerClientTypes.HyperParameterTuningJobSearchEntity: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bestTrainingJob = "BestTrainingJob"
        case creationTime = "CreationTime"
        case failureReason = "FailureReason"
        case hyperParameterTuningEndTime = "HyperParameterTuningEndTime"
        case hyperParameterTuningJobArn = "HyperParameterTuningJobArn"
        case hyperParameterTuningJobConfig = "HyperParameterTuningJobConfig"
        case hyperParameterTuningJobName = "HyperParameterTuningJobName"
        case hyperParameterTuningJobStatus = "HyperParameterTuningJobStatus"
        case lastModifiedTime = "LastModifiedTime"
        case objectiveStatusCounters = "ObjectiveStatusCounters"
        case overallBestTrainingJob = "OverallBestTrainingJob"
        case tags = "Tags"
        case trainingJobDefinition = "TrainingJobDefinition"
        case trainingJobDefinitions = "TrainingJobDefinitions"
        case trainingJobStatusCounters = "TrainingJobStatusCounters"
        case warmStartConfig = "WarmStartConfig"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let bestTrainingJob = self.bestTrainingJob {
            try encodeContainer.encode(bestTrainingJob, forKey: .bestTrainingJob)
        }
        if let creationTime = self.creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let failureReason = self.failureReason {
            try encodeContainer.encode(failureReason, forKey: .failureReason)
        }
        if let hyperParameterTuningEndTime = self.hyperParameterTuningEndTime {
            try encodeContainer.encode(hyperParameterTuningEndTime.timeIntervalSince1970, forKey: .hyperParameterTuningEndTime)
        }
        if let hyperParameterTuningJobArn = self.hyperParameterTuningJobArn {
            try encodeContainer.encode(hyperParameterTuningJobArn, forKey: .hyperParameterTuningJobArn)
        }
        if let hyperParameterTuningJobConfig = self.hyperParameterTuningJobConfig {
            try encodeContainer.encode(hyperParameterTuningJobConfig, forKey: .hyperParameterTuningJobConfig)
        }
        if let hyperParameterTuningJobName = self.hyperParameterTuningJobName {
            try encodeContainer.encode(hyperParameterTuningJobName, forKey: .hyperParameterTuningJobName)
        }
        if let hyperParameterTuningJobStatus = self.hyperParameterTuningJobStatus {
            try encodeContainer.encode(hyperParameterTuningJobStatus.rawValue, forKey: .hyperParameterTuningJobStatus)
        }
        if let lastModifiedTime = self.lastModifiedTime {
            try encodeContainer.encode(lastModifiedTime.timeIntervalSince1970, forKey: .lastModifiedTime)
        }
        if let objectiveStatusCounters = self.objectiveStatusCounters {
            try encodeContainer.encode(objectiveStatusCounters, forKey: .objectiveStatusCounters)
        }
        if let overallBestTrainingJob = self.overallBestTrainingJob {
            try encodeContainer.encode(overallBestTrainingJob, forKey: .overallBestTrainingJob)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
        if let trainingJobDefinition = self.trainingJobDefinition {
            try encodeContainer.encode(trainingJobDefinition, forKey: .trainingJobDefinition)
        }
        if let trainingJobDefinitions = trainingJobDefinitions {
            var trainingJobDefinitionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .trainingJobDefinitions)
            for hyperparametertrainingjobdefinitions0 in trainingJobDefinitions {
                try trainingJobDefinitionsContainer.encode(hyperparametertrainingjobdefinitions0)
            }
        }
        if let trainingJobStatusCounters = self.trainingJobStatusCounters {
            try encodeContainer.encode(trainingJobStatusCounters, forKey: .trainingJobStatusCounters)
        }
        if let warmStartConfig = self.warmStartConfig {
            try encodeContainer.encode(warmStartConfig, forKey: .warmStartConfig)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let hyperParameterTuningJobNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .hyperParameterTuningJobName)
        hyperParameterTuningJobName = hyperParameterTuningJobNameDecoded
        let hyperParameterTuningJobArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .hyperParameterTuningJobArn)
        hyperParameterTuningJobArn = hyperParameterTuningJobArnDecoded
        let hyperParameterTuningJobConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.HyperParameterTuningJobConfig.self, forKey: .hyperParameterTuningJobConfig)
        hyperParameterTuningJobConfig = hyperParameterTuningJobConfigDecoded
        let trainingJobDefinitionDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.HyperParameterTrainingJobDefinition.self, forKey: .trainingJobDefinition)
        trainingJobDefinition = trainingJobDefinitionDecoded
        let trainingJobDefinitionsContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.HyperParameterTrainingJobDefinition?].self, forKey: .trainingJobDefinitions)
        var trainingJobDefinitionsDecoded0:[SageMakerClientTypes.HyperParameterTrainingJobDefinition]? = nil
        if let trainingJobDefinitionsContainer = trainingJobDefinitionsContainer {
            trainingJobDefinitionsDecoded0 = [SageMakerClientTypes.HyperParameterTrainingJobDefinition]()
            for structure0 in trainingJobDefinitionsContainer {
                if let structure0 = structure0 {
                    trainingJobDefinitionsDecoded0?.append(structure0)
                }
            }
        }
        trainingJobDefinitions = trainingJobDefinitionsDecoded0
        let hyperParameterTuningJobStatusDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.HyperParameterTuningJobStatus.self, forKey: .hyperParameterTuningJobStatus)
        hyperParameterTuningJobStatus = hyperParameterTuningJobStatusDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let hyperParameterTuningEndTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .hyperParameterTuningEndTime)
        hyperParameterTuningEndTime = hyperParameterTuningEndTimeDecoded
        let lastModifiedTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedTime)
        lastModifiedTime = lastModifiedTimeDecoded
        let trainingJobStatusCountersDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.TrainingJobStatusCounters.self, forKey: .trainingJobStatusCounters)
        trainingJobStatusCounters = trainingJobStatusCountersDecoded
        let objectiveStatusCountersDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ObjectiveStatusCounters.self, forKey: .objectiveStatusCounters)
        objectiveStatusCounters = objectiveStatusCountersDecoded
        let bestTrainingJobDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.HyperParameterTrainingJobSummary.self, forKey: .bestTrainingJob)
        bestTrainingJob = bestTrainingJobDecoded
        let overallBestTrainingJobDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.HyperParameterTrainingJobSummary.self, forKey: .overallBestTrainingJob)
        overallBestTrainingJob = overallBestTrainingJobDecoded
        let warmStartConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.HyperParameterTuningJobWarmStartConfig.self, forKey: .warmStartConfig)
        warmStartConfig = warmStartConfigDecoded
        let failureReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .failureReason)
        failureReason = failureReasonDecoded
        let tagsContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[SageMakerClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [SageMakerClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}
