// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SageMakerClientTypes {
    /// An execution of a step in a pipeline.
    public struct PipelineExecutionStep: Swift.Equatable {
        /// The current attempt of the execution step. For more information, see [Retry Policy for SageMaker Pipelines steps](https://docs.aws.amazon.com/sagemaker/latest/dg/pipelines-retry-policy.html).
        public var attemptCount: Swift.Int
        /// If this pipeline execution step was cached, details on the cache hit.
        public var cacheHitResult: SageMakerClientTypes.CacheHitResult?
        /// The time that the step stopped executing.
        public var endTime: ClientRuntime.Date?
        /// The reason why the step failed execution. This is only returned if the step failed its execution.
        public var failureReason: Swift.String?
        /// Metadata for the step execution.
        public var metadata: SageMakerClientTypes.PipelineExecutionStepMetadata?
        /// The time that the step started executing.
        public var startTime: ClientRuntime.Date?
        /// The description of the step.
        public var stepDescription: Swift.String?
        /// The display name of the step.
        public var stepDisplayName: Swift.String?
        /// The name of the step that is executed.
        public var stepName: Swift.String?
        /// The status of the step execution.
        public var stepStatus: SageMakerClientTypes.StepStatus?

        public init (
            attemptCount: Swift.Int = 0,
            cacheHitResult: SageMakerClientTypes.CacheHitResult? = nil,
            endTime: ClientRuntime.Date? = nil,
            failureReason: Swift.String? = nil,
            metadata: SageMakerClientTypes.PipelineExecutionStepMetadata? = nil,
            startTime: ClientRuntime.Date? = nil,
            stepDescription: Swift.String? = nil,
            stepDisplayName: Swift.String? = nil,
            stepName: Swift.String? = nil,
            stepStatus: SageMakerClientTypes.StepStatus? = nil
        )
        {
            self.attemptCount = attemptCount
            self.cacheHitResult = cacheHitResult
            self.endTime = endTime
            self.failureReason = failureReason
            self.metadata = metadata
            self.startTime = startTime
            self.stepDescription = stepDescription
            self.stepDisplayName = stepDisplayName
            self.stepName = stepName
            self.stepStatus = stepStatus
        }
    }

}
