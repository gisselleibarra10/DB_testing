// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CreateModelPackageInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case additionalInferenceSpecifications = "AdditionalInferenceSpecifications"
        case certifyForMarketplace = "CertifyForMarketplace"
        case clientToken = "ClientToken"
        case customerMetadataProperties = "CustomerMetadataProperties"
        case domain = "Domain"
        case driftCheckBaselines = "DriftCheckBaselines"
        case inferenceSpecification = "InferenceSpecification"
        case metadataProperties = "MetadataProperties"
        case modelApprovalStatus = "ModelApprovalStatus"
        case modelMetrics = "ModelMetrics"
        case modelPackageDescription = "ModelPackageDescription"
        case modelPackageGroupName = "ModelPackageGroupName"
        case modelPackageName = "ModelPackageName"
        case samplePayloadUrl = "SamplePayloadUrl"
        case sourceAlgorithmSpecification = "SourceAlgorithmSpecification"
        case tags = "Tags"
        case task = "Task"
        case validationSpecification = "ValidationSpecification"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let additionalInferenceSpecifications = additionalInferenceSpecifications {
            var additionalInferenceSpecificationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .additionalInferenceSpecifications)
            for additionalinferencespecifications0 in additionalInferenceSpecifications {
                try additionalInferenceSpecificationsContainer.encode(additionalinferencespecifications0)
            }
        }
        if certifyForMarketplace != false {
            try encodeContainer.encode(certifyForMarketplace, forKey: .certifyForMarketplace)
        }
        if let clientToken = self.clientToken {
            try encodeContainer.encode(clientToken, forKey: .clientToken)
        }
        if let customerMetadataProperties = customerMetadataProperties {
            var customerMetadataPropertiesContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .customerMetadataProperties)
            for (dictKey0, customermetadatamap0) in customerMetadataProperties {
                try customerMetadataPropertiesContainer.encode(customermetadatamap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let domain = self.domain {
            try encodeContainer.encode(domain, forKey: .domain)
        }
        if let driftCheckBaselines = self.driftCheckBaselines {
            try encodeContainer.encode(driftCheckBaselines, forKey: .driftCheckBaselines)
        }
        if let inferenceSpecification = self.inferenceSpecification {
            try encodeContainer.encode(inferenceSpecification, forKey: .inferenceSpecification)
        }
        if let metadataProperties = self.metadataProperties {
            try encodeContainer.encode(metadataProperties, forKey: .metadataProperties)
        }
        if let modelApprovalStatus = self.modelApprovalStatus {
            try encodeContainer.encode(modelApprovalStatus.rawValue, forKey: .modelApprovalStatus)
        }
        if let modelMetrics = self.modelMetrics {
            try encodeContainer.encode(modelMetrics, forKey: .modelMetrics)
        }
        if let modelPackageDescription = self.modelPackageDescription {
            try encodeContainer.encode(modelPackageDescription, forKey: .modelPackageDescription)
        }
        if let modelPackageGroupName = self.modelPackageGroupName {
            try encodeContainer.encode(modelPackageGroupName, forKey: .modelPackageGroupName)
        }
        if let modelPackageName = self.modelPackageName {
            try encodeContainer.encode(modelPackageName, forKey: .modelPackageName)
        }
        if let samplePayloadUrl = self.samplePayloadUrl {
            try encodeContainer.encode(samplePayloadUrl, forKey: .samplePayloadUrl)
        }
        if let sourceAlgorithmSpecification = self.sourceAlgorithmSpecification {
            try encodeContainer.encode(sourceAlgorithmSpecification, forKey: .sourceAlgorithmSpecification)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
        if let task = self.task {
            try encodeContainer.encode(task, forKey: .task)
        }
        if let validationSpecification = self.validationSpecification {
            try encodeContainer.encode(validationSpecification, forKey: .validationSpecification)
        }
    }
}
