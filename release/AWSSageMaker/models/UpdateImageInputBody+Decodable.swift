// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct UpdateImageInputBody: Swift.Equatable {
    let deleteProperties: [Swift.String]?
    let description: Swift.String?
    let displayName: Swift.String?
    let imageName: Swift.String?
    let roleArn: Swift.String?
}

extension UpdateImageInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deleteProperties = "DeleteProperties"
        case description = "Description"
        case displayName = "DisplayName"
        case imageName = "ImageName"
        case roleArn = "RoleArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deletePropertiesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .deleteProperties)
        var deletePropertiesDecoded0:[Swift.String]? = nil
        if let deletePropertiesContainer = deletePropertiesContainer {
            deletePropertiesDecoded0 = [Swift.String]()
            for string0 in deletePropertiesContainer {
                if let string0 = string0 {
                    deletePropertiesDecoded0?.append(string0)
                }
            }
        }
        deleteProperties = deletePropertiesDecoded0
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let displayNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .displayName)
        displayName = displayNameDecoded
        let imageNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .imageName)
        imageName = imageNameDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
    }
}
