// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeInferenceRecommendationsJobOutputResponseBody: Swift.Equatable {
    let jobName: Swift.String?
    let jobDescription: Swift.String?
    let jobType: SageMakerClientTypes.RecommendationJobType?
    let jobArn: Swift.String?
    let roleArn: Swift.String?
    let status: SageMakerClientTypes.RecommendationJobStatus?
    let creationTime: ClientRuntime.Date?
    let completionTime: ClientRuntime.Date?
    let lastModifiedTime: ClientRuntime.Date?
    let failureReason: Swift.String?
    let inputConfig: SageMakerClientTypes.RecommendationJobInputConfig?
    let stoppingConditions: SageMakerClientTypes.RecommendationJobStoppingConditions?
    let inferenceRecommendations: [SageMakerClientTypes.InferenceRecommendation]?
}

extension DescribeInferenceRecommendationsJobOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case completionTime = "CompletionTime"
        case creationTime = "CreationTime"
        case failureReason = "FailureReason"
        case inferenceRecommendations = "InferenceRecommendations"
        case inputConfig = "InputConfig"
        case jobArn = "JobArn"
        case jobDescription = "JobDescription"
        case jobName = "JobName"
        case jobType = "JobType"
        case lastModifiedTime = "LastModifiedTime"
        case roleArn = "RoleArn"
        case status = "Status"
        case stoppingConditions = "StoppingConditions"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobName)
        jobName = jobNameDecoded
        let jobDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobDescription)
        jobDescription = jobDescriptionDecoded
        let jobTypeDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.RecommendationJobType.self, forKey: .jobType)
        jobType = jobTypeDecoded
        let jobArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobArn)
        jobArn = jobArnDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let statusDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.RecommendationJobStatus.self, forKey: .status)
        status = statusDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let completionTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .completionTime)
        completionTime = completionTimeDecoded
        let lastModifiedTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedTime)
        lastModifiedTime = lastModifiedTimeDecoded
        let failureReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .failureReason)
        failureReason = failureReasonDecoded
        let inputConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.RecommendationJobInputConfig.self, forKey: .inputConfig)
        inputConfig = inputConfigDecoded
        let stoppingConditionsDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.RecommendationJobStoppingConditions.self, forKey: .stoppingConditions)
        stoppingConditions = stoppingConditionsDecoded
        let inferenceRecommendationsContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.InferenceRecommendation?].self, forKey: .inferenceRecommendations)
        var inferenceRecommendationsDecoded0:[SageMakerClientTypes.InferenceRecommendation]? = nil
        if let inferenceRecommendationsContainer = inferenceRecommendationsContainer {
            inferenceRecommendationsDecoded0 = [SageMakerClientTypes.InferenceRecommendation]()
            for structure0 in inferenceRecommendationsContainer {
                if let structure0 = structure0 {
                    inferenceRecommendationsDecoded0?.append(structure0)
                }
            }
        }
        inferenceRecommendations = inferenceRecommendationsDecoded0
    }
}
