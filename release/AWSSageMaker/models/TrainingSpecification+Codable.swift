// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SageMakerClientTypes.TrainingSpecification: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case metricDefinitions = "MetricDefinitions"
        case supportedHyperParameters = "SupportedHyperParameters"
        case supportedTrainingInstanceTypes = "SupportedTrainingInstanceTypes"
        case supportedTuningJobObjectiveMetrics = "SupportedTuningJobObjectiveMetrics"
        case supportsDistributedTraining = "SupportsDistributedTraining"
        case trainingChannels = "TrainingChannels"
        case trainingImage = "TrainingImage"
        case trainingImageDigest = "TrainingImageDigest"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let metricDefinitions = metricDefinitions {
            var metricDefinitionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .metricDefinitions)
            for metricdefinitionlist0 in metricDefinitions {
                try metricDefinitionsContainer.encode(metricdefinitionlist0)
            }
        }
        if let supportedHyperParameters = supportedHyperParameters {
            var supportedHyperParametersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .supportedHyperParameters)
            for hyperparameterspecifications0 in supportedHyperParameters {
                try supportedHyperParametersContainer.encode(hyperparameterspecifications0)
            }
        }
        if let supportedTrainingInstanceTypes = supportedTrainingInstanceTypes {
            var supportedTrainingInstanceTypesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .supportedTrainingInstanceTypes)
            for traininginstancetypes0 in supportedTrainingInstanceTypes {
                try supportedTrainingInstanceTypesContainer.encode(traininginstancetypes0.rawValue)
            }
        }
        if let supportedTuningJobObjectiveMetrics = supportedTuningJobObjectiveMetrics {
            var supportedTuningJobObjectiveMetricsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .supportedTuningJobObjectiveMetrics)
            for hyperparametertuningjobobjectives0 in supportedTuningJobObjectiveMetrics {
                try supportedTuningJobObjectiveMetricsContainer.encode(hyperparametertuningjobobjectives0)
            }
        }
        if supportsDistributedTraining != false {
            try encodeContainer.encode(supportsDistributedTraining, forKey: .supportsDistributedTraining)
        }
        if let trainingChannels = trainingChannels {
            var trainingChannelsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .trainingChannels)
            for channelspecifications0 in trainingChannels {
                try trainingChannelsContainer.encode(channelspecifications0)
            }
        }
        if let trainingImage = self.trainingImage {
            try encodeContainer.encode(trainingImage, forKey: .trainingImage)
        }
        if let trainingImageDigest = self.trainingImageDigest {
            try encodeContainer.encode(trainingImageDigest, forKey: .trainingImageDigest)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let trainingImageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .trainingImage)
        trainingImage = trainingImageDecoded
        let trainingImageDigestDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .trainingImageDigest)
        trainingImageDigest = trainingImageDigestDecoded
        let supportedHyperParametersContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.HyperParameterSpecification?].self, forKey: .supportedHyperParameters)
        var supportedHyperParametersDecoded0:[SageMakerClientTypes.HyperParameterSpecification]? = nil
        if let supportedHyperParametersContainer = supportedHyperParametersContainer {
            supportedHyperParametersDecoded0 = [SageMakerClientTypes.HyperParameterSpecification]()
            for structure0 in supportedHyperParametersContainer {
                if let structure0 = structure0 {
                    supportedHyperParametersDecoded0?.append(structure0)
                }
            }
        }
        supportedHyperParameters = supportedHyperParametersDecoded0
        let supportedTrainingInstanceTypesContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.TrainingInstanceType?].self, forKey: .supportedTrainingInstanceTypes)
        var supportedTrainingInstanceTypesDecoded0:[SageMakerClientTypes.TrainingInstanceType]? = nil
        if let supportedTrainingInstanceTypesContainer = supportedTrainingInstanceTypesContainer {
            supportedTrainingInstanceTypesDecoded0 = [SageMakerClientTypes.TrainingInstanceType]()
            for enum0 in supportedTrainingInstanceTypesContainer {
                if let enum0 = enum0 {
                    supportedTrainingInstanceTypesDecoded0?.append(enum0)
                }
            }
        }
        supportedTrainingInstanceTypes = supportedTrainingInstanceTypesDecoded0
        let supportsDistributedTrainingDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .supportsDistributedTraining) ?? false
        supportsDistributedTraining = supportsDistributedTrainingDecoded
        let metricDefinitionsContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.MetricDefinition?].self, forKey: .metricDefinitions)
        var metricDefinitionsDecoded0:[SageMakerClientTypes.MetricDefinition]? = nil
        if let metricDefinitionsContainer = metricDefinitionsContainer {
            metricDefinitionsDecoded0 = [SageMakerClientTypes.MetricDefinition]()
            for structure0 in metricDefinitionsContainer {
                if let structure0 = structure0 {
                    metricDefinitionsDecoded0?.append(structure0)
                }
            }
        }
        metricDefinitions = metricDefinitionsDecoded0
        let trainingChannelsContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.ChannelSpecification?].self, forKey: .trainingChannels)
        var trainingChannelsDecoded0:[SageMakerClientTypes.ChannelSpecification]? = nil
        if let trainingChannelsContainer = trainingChannelsContainer {
            trainingChannelsDecoded0 = [SageMakerClientTypes.ChannelSpecification]()
            for structure0 in trainingChannelsContainer {
                if let structure0 = structure0 {
                    trainingChannelsDecoded0?.append(structure0)
                }
            }
        }
        trainingChannels = trainingChannelsDecoded0
        let supportedTuningJobObjectiveMetricsContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.HyperParameterTuningJobObjective?].self, forKey: .supportedTuningJobObjectiveMetrics)
        var supportedTuningJobObjectiveMetricsDecoded0:[SageMakerClientTypes.HyperParameterTuningJobObjective]? = nil
        if let supportedTuningJobObjectiveMetricsContainer = supportedTuningJobObjectiveMetricsContainer {
            supportedTuningJobObjectiveMetricsDecoded0 = [SageMakerClientTypes.HyperParameterTuningJobObjective]()
            for structure0 in supportedTuningJobObjectiveMetricsContainer {
                if let structure0 = structure0 {
                    supportedTuningJobObjectiveMetricsDecoded0?.append(structure0)
                }
            }
        }
        supportedTuningJobObjectiveMetrics = supportedTuningJobObjectiveMetricsDecoded0
    }
}
