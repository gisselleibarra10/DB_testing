// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SageMakerClientTypes.EndpointInputConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case environmentParameterRanges = "EnvironmentParameterRanges"
        case inferenceSpecificationName = "InferenceSpecificationName"
        case instanceType = "InstanceType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let environmentParameterRanges = self.environmentParameterRanges {
            try encodeContainer.encode(environmentParameterRanges, forKey: .environmentParameterRanges)
        }
        if let inferenceSpecificationName = self.inferenceSpecificationName {
            try encodeContainer.encode(inferenceSpecificationName, forKey: .inferenceSpecificationName)
        }
        if let instanceType = self.instanceType {
            try encodeContainer.encode(instanceType.rawValue, forKey: .instanceType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instanceTypeDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ProductionVariantInstanceType.self, forKey: .instanceType)
        instanceType = instanceTypeDecoded
        let inferenceSpecificationNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .inferenceSpecificationName)
        inferenceSpecificationName = inferenceSpecificationNameDecoded
        let environmentParameterRangesDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.EnvironmentParameterRanges.self, forKey: .environmentParameterRanges)
        environmentParameterRanges = environmentParameterRangesDecoded
    }
}
