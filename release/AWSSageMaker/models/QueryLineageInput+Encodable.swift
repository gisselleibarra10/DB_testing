// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension QueryLineageInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case direction = "Direction"
        case filters = "Filters"
        case includeEdges = "IncludeEdges"
        case maxDepth = "MaxDepth"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case startArns = "StartArns"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let direction = self.direction {
            try encodeContainer.encode(direction.rawValue, forKey: .direction)
        }
        if let filters = self.filters {
            try encodeContainer.encode(filters, forKey: .filters)
        }
        if includeEdges != false {
            try encodeContainer.encode(includeEdges, forKey: .includeEdges)
        }
        if let maxDepth = self.maxDepth {
            try encodeContainer.encode(maxDepth, forKey: .maxDepth)
        }
        if let maxResults = self.maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let startArns = startArns {
            var startArnsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .startArns)
            for querylineagestartarns0 in startArns {
                try startArnsContainer.encode(querylineagestartarns0)
            }
        }
    }
}
