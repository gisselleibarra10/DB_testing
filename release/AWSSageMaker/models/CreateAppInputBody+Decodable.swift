// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateAppInputBody: Swift.Equatable {
    let domainId: Swift.String?
    let userProfileName: Swift.String?
    let appType: SageMakerClientTypes.AppType?
    let appName: Swift.String?
    let tags: [SageMakerClientTypes.Tag]?
    let resourceSpec: SageMakerClientTypes.ResourceSpec?
}

extension CreateAppInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case appName = "AppName"
        case appType = "AppType"
        case domainId = "DomainId"
        case resourceSpec = "ResourceSpec"
        case tags = "Tags"
        case userProfileName = "UserProfileName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domainId)
        domainId = domainIdDecoded
        let userProfileNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userProfileName)
        userProfileName = userProfileNameDecoded
        let appTypeDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.AppType.self, forKey: .appType)
        appType = appTypeDecoded
        let appNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .appName)
        appName = appNameDecoded
        let tagsContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[SageMakerClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [SageMakerClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let resourceSpecDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ResourceSpec.self, forKey: .resourceSpec)
        resourceSpec = resourceSpecDecoded
    }
}
