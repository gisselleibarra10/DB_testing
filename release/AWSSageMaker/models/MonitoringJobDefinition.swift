// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension SageMakerClientTypes {
    /// Defines the monitoring job.
    public struct MonitoringJobDefinition: Swift.Equatable {
        /// Baseline configuration used to validate that the data conforms to the specified constraints and statistics
        public var baselineConfig: SageMakerClientTypes.MonitoringBaselineConfig?
        /// Sets the environment variables in the Docker container.
        public var environment: [Swift.String:Swift.String]?
        /// Configures the monitoring job to run a specified Docker container image.
        /// This member is required.
        public var monitoringAppSpecification: SageMakerClientTypes.MonitoringAppSpecification?
        /// The array of inputs for the monitoring job. Currently we support monitoring an Amazon SageMaker Endpoint.
        /// This member is required.
        public var monitoringInputs: [SageMakerClientTypes.MonitoringInput]?
        /// The array of outputs from the monitoring job to be uploaded to Amazon Simple Storage Service (Amazon S3).
        /// This member is required.
        public var monitoringOutputConfig: SageMakerClientTypes.MonitoringOutputConfig?
        /// Identifies the resources, ML compute instances, and ML storage volumes to deploy for a monitoring job. In distributed processing, you specify more than one instance.
        /// This member is required.
        public var monitoringResources: SageMakerClientTypes.MonitoringResources?
        /// Specifies networking options for an monitoring job.
        public var networkConfig: SageMakerClientTypes.NetworkConfig?
        /// The Amazon Resource Name (ARN) of an IAM role that Amazon SageMaker can assume to perform tasks on your behalf.
        /// This member is required.
        public var roleArn: Swift.String?
        /// Specifies a time limit for how long the monitoring job is allowed to run.
        public var stoppingCondition: SageMakerClientTypes.MonitoringStoppingCondition?

        public init (
            baselineConfig: SageMakerClientTypes.MonitoringBaselineConfig? = nil,
            environment: [Swift.String:Swift.String]? = nil,
            monitoringAppSpecification: SageMakerClientTypes.MonitoringAppSpecification? = nil,
            monitoringInputs: [SageMakerClientTypes.MonitoringInput]? = nil,
            monitoringOutputConfig: SageMakerClientTypes.MonitoringOutputConfig? = nil,
            monitoringResources: SageMakerClientTypes.MonitoringResources? = nil,
            networkConfig: SageMakerClientTypes.NetworkConfig? = nil,
            roleArn: Swift.String? = nil,
            stoppingCondition: SageMakerClientTypes.MonitoringStoppingCondition? = nil
        )
        {
            self.baselineConfig = baselineConfig
            self.environment = environment
            self.monitoringAppSpecification = monitoringAppSpecification
            self.monitoringInputs = monitoringInputs
            self.monitoringOutputConfig = monitoringOutputConfig
            self.monitoringResources = monitoringResources
            self.networkConfig = networkConfig
            self.roleArn = roleArn
            self.stoppingCondition = stoppingCondition
        }
    }

}
