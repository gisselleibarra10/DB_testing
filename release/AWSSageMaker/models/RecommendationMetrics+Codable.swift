// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SageMakerClientTypes.RecommendationMetrics: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case costPerHour = "CostPerHour"
        case costPerInference = "CostPerInference"
        case maxInvocations = "MaxInvocations"
        case modelLatency = "ModelLatency"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if costPerHour != 0.0 {
            try encodeContainer.encode(costPerHour, forKey: .costPerHour)
        }
        if costPerInference != 0.0 {
            try encodeContainer.encode(costPerInference, forKey: .costPerInference)
        }
        if maxInvocations != 0 {
            try encodeContainer.encode(maxInvocations, forKey: .maxInvocations)
        }
        if modelLatency != 0 {
            try encodeContainer.encode(modelLatency, forKey: .modelLatency)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let costPerHourDecoded = try containerValues.decodeIfPresent(Swift.Float.self, forKey: .costPerHour) ?? 0.0
        costPerHour = costPerHourDecoded
        let costPerInferenceDecoded = try containerValues.decodeIfPresent(Swift.Float.self, forKey: .costPerInference) ?? 0.0
        costPerInference = costPerInferenceDecoded
        let maxInvocationsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxInvocations) ?? 0
        maxInvocations = maxInvocationsDecoded
        let modelLatencyDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .modelLatency) ?? 0
        modelLatency = modelLatencyDecoded
    }
}
