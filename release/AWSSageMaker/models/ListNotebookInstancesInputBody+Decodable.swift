// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListNotebookInstancesInputBody: Swift.Equatable {
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
    let sortBy: SageMakerClientTypes.NotebookInstanceSortKey?
    let sortOrder: SageMakerClientTypes.NotebookInstanceSortOrder?
    let nameContains: Swift.String?
    let creationTimeBefore: ClientRuntime.Date?
    let creationTimeAfter: ClientRuntime.Date?
    let lastModifiedTimeBefore: ClientRuntime.Date?
    let lastModifiedTimeAfter: ClientRuntime.Date?
    let statusEquals: SageMakerClientTypes.NotebookInstanceStatus?
    let notebookInstanceLifecycleConfigNameContains: Swift.String?
    let defaultCodeRepositoryContains: Swift.String?
    let additionalCodeRepositoryEquals: Swift.String?
}

extension ListNotebookInstancesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case additionalCodeRepositoryEquals = "AdditionalCodeRepositoryEquals"
        case creationTimeAfter = "CreationTimeAfter"
        case creationTimeBefore = "CreationTimeBefore"
        case defaultCodeRepositoryContains = "DefaultCodeRepositoryContains"
        case lastModifiedTimeAfter = "LastModifiedTimeAfter"
        case lastModifiedTimeBefore = "LastModifiedTimeBefore"
        case maxResults = "MaxResults"
        case nameContains = "NameContains"
        case nextToken = "NextToken"
        case notebookInstanceLifecycleConfigNameContains = "NotebookInstanceLifecycleConfigNameContains"
        case sortBy = "SortBy"
        case sortOrder = "SortOrder"
        case statusEquals = "StatusEquals"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let sortByDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.NotebookInstanceSortKey.self, forKey: .sortBy)
        sortBy = sortByDecoded
        let sortOrderDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.NotebookInstanceSortOrder.self, forKey: .sortOrder)
        sortOrder = sortOrderDecoded
        let nameContainsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nameContains)
        nameContains = nameContainsDecoded
        let creationTimeBeforeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTimeBefore)
        creationTimeBefore = creationTimeBeforeDecoded
        let creationTimeAfterDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTimeAfter)
        creationTimeAfter = creationTimeAfterDecoded
        let lastModifiedTimeBeforeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedTimeBefore)
        lastModifiedTimeBefore = lastModifiedTimeBeforeDecoded
        let lastModifiedTimeAfterDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedTimeAfter)
        lastModifiedTimeAfter = lastModifiedTimeAfterDecoded
        let statusEqualsDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.NotebookInstanceStatus.self, forKey: .statusEquals)
        statusEquals = statusEqualsDecoded
        let notebookInstanceLifecycleConfigNameContainsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .notebookInstanceLifecycleConfigNameContains)
        notebookInstanceLifecycleConfigNameContains = notebookInstanceLifecycleConfigNameContainsDecoded
        let defaultCodeRepositoryContainsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .defaultCodeRepositoryContains)
        defaultCodeRepositoryContains = defaultCodeRepositoryContainsDecoded
        let additionalCodeRepositoryEqualsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .additionalCodeRepositoryEquals)
        additionalCodeRepositoryEquals = additionalCodeRepositoryEqualsDecoded
    }
}
