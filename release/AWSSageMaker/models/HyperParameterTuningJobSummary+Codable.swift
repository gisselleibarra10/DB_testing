// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SageMakerClientTypes.HyperParameterTuningJobSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTime = "CreationTime"
        case hyperParameterTuningEndTime = "HyperParameterTuningEndTime"
        case hyperParameterTuningJobArn = "HyperParameterTuningJobArn"
        case hyperParameterTuningJobName = "HyperParameterTuningJobName"
        case hyperParameterTuningJobStatus = "HyperParameterTuningJobStatus"
        case lastModifiedTime = "LastModifiedTime"
        case objectiveStatusCounters = "ObjectiveStatusCounters"
        case resourceLimits = "ResourceLimits"
        case strategy = "Strategy"
        case trainingJobStatusCounters = "TrainingJobStatusCounters"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationTime = self.creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let hyperParameterTuningEndTime = self.hyperParameterTuningEndTime {
            try encodeContainer.encode(hyperParameterTuningEndTime.timeIntervalSince1970, forKey: .hyperParameterTuningEndTime)
        }
        if let hyperParameterTuningJobArn = self.hyperParameterTuningJobArn {
            try encodeContainer.encode(hyperParameterTuningJobArn, forKey: .hyperParameterTuningJobArn)
        }
        if let hyperParameterTuningJobName = self.hyperParameterTuningJobName {
            try encodeContainer.encode(hyperParameterTuningJobName, forKey: .hyperParameterTuningJobName)
        }
        if let hyperParameterTuningJobStatus = self.hyperParameterTuningJobStatus {
            try encodeContainer.encode(hyperParameterTuningJobStatus.rawValue, forKey: .hyperParameterTuningJobStatus)
        }
        if let lastModifiedTime = self.lastModifiedTime {
            try encodeContainer.encode(lastModifiedTime.timeIntervalSince1970, forKey: .lastModifiedTime)
        }
        if let objectiveStatusCounters = self.objectiveStatusCounters {
            try encodeContainer.encode(objectiveStatusCounters, forKey: .objectiveStatusCounters)
        }
        if let resourceLimits = self.resourceLimits {
            try encodeContainer.encode(resourceLimits, forKey: .resourceLimits)
        }
        if let strategy = self.strategy {
            try encodeContainer.encode(strategy.rawValue, forKey: .strategy)
        }
        if let trainingJobStatusCounters = self.trainingJobStatusCounters {
            try encodeContainer.encode(trainingJobStatusCounters, forKey: .trainingJobStatusCounters)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let hyperParameterTuningJobNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .hyperParameterTuningJobName)
        hyperParameterTuningJobName = hyperParameterTuningJobNameDecoded
        let hyperParameterTuningJobArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .hyperParameterTuningJobArn)
        hyperParameterTuningJobArn = hyperParameterTuningJobArnDecoded
        let hyperParameterTuningJobStatusDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.HyperParameterTuningJobStatus.self, forKey: .hyperParameterTuningJobStatus)
        hyperParameterTuningJobStatus = hyperParameterTuningJobStatusDecoded
        let strategyDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.HyperParameterTuningJobStrategyType.self, forKey: .strategy)
        strategy = strategyDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let hyperParameterTuningEndTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .hyperParameterTuningEndTime)
        hyperParameterTuningEndTime = hyperParameterTuningEndTimeDecoded
        let lastModifiedTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedTime)
        lastModifiedTime = lastModifiedTimeDecoded
        let trainingJobStatusCountersDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.TrainingJobStatusCounters.self, forKey: .trainingJobStatusCounters)
        trainingJobStatusCounters = trainingJobStatusCountersDecoded
        let objectiveStatusCountersDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ObjectiveStatusCounters.self, forKey: .objectiveStatusCounters)
        objectiveStatusCounters = objectiveStatusCountersDecoded
        let resourceLimitsDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ResourceLimits.self, forKey: .resourceLimits)
        resourceLimits = resourceLimitsDecoded
    }
}
