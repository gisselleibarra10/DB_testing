// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeEdgeDeploymentPlanOutputResponseBody: Swift.Equatable {
    let edgeDeploymentPlanArn: Swift.String?
    let edgeDeploymentPlanName: Swift.String?
    let modelConfigs: [SageMakerClientTypes.EdgeDeploymentModelConfig]?
    let deviceFleetName: Swift.String?
    let edgeDeploymentSuccess: Swift.Int
    let edgeDeploymentPending: Swift.Int
    let edgeDeploymentFailed: Swift.Int
    let stages: [SageMakerClientTypes.DeploymentStageStatusSummary]?
    let nextToken: Swift.String?
    let creationTime: ClientRuntime.Date?
    let lastModifiedTime: ClientRuntime.Date?
}

extension DescribeEdgeDeploymentPlanOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTime = "CreationTime"
        case deviceFleetName = "DeviceFleetName"
        case edgeDeploymentFailed = "EdgeDeploymentFailed"
        case edgeDeploymentPending = "EdgeDeploymentPending"
        case edgeDeploymentPlanArn = "EdgeDeploymentPlanArn"
        case edgeDeploymentPlanName = "EdgeDeploymentPlanName"
        case edgeDeploymentSuccess = "EdgeDeploymentSuccess"
        case lastModifiedTime = "LastModifiedTime"
        case modelConfigs = "ModelConfigs"
        case nextToken = "NextToken"
        case stages = "Stages"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let edgeDeploymentPlanArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .edgeDeploymentPlanArn)
        edgeDeploymentPlanArn = edgeDeploymentPlanArnDecoded
        let edgeDeploymentPlanNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .edgeDeploymentPlanName)
        edgeDeploymentPlanName = edgeDeploymentPlanNameDecoded
        let modelConfigsContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.EdgeDeploymentModelConfig?].self, forKey: .modelConfigs)
        var modelConfigsDecoded0:[SageMakerClientTypes.EdgeDeploymentModelConfig]? = nil
        if let modelConfigsContainer = modelConfigsContainer {
            modelConfigsDecoded0 = [SageMakerClientTypes.EdgeDeploymentModelConfig]()
            for structure0 in modelConfigsContainer {
                if let structure0 = structure0 {
                    modelConfigsDecoded0?.append(structure0)
                }
            }
        }
        modelConfigs = modelConfigsDecoded0
        let deviceFleetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deviceFleetName)
        deviceFleetName = deviceFleetNameDecoded
        let edgeDeploymentSuccessDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .edgeDeploymentSuccess) ?? 0
        edgeDeploymentSuccess = edgeDeploymentSuccessDecoded
        let edgeDeploymentPendingDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .edgeDeploymentPending) ?? 0
        edgeDeploymentPending = edgeDeploymentPendingDecoded
        let edgeDeploymentFailedDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .edgeDeploymentFailed) ?? 0
        edgeDeploymentFailed = edgeDeploymentFailedDecoded
        let stagesContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.DeploymentStageStatusSummary?].self, forKey: .stages)
        var stagesDecoded0:[SageMakerClientTypes.DeploymentStageStatusSummary]? = nil
        if let stagesContainer = stagesContainer {
            stagesDecoded0 = [SageMakerClientTypes.DeploymentStageStatusSummary]()
            for structure0 in stagesContainer {
                if let structure0 = structure0 {
                    stagesDecoded0?.append(structure0)
                }
            }
        }
        stages = stagesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let lastModifiedTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedTime)
        lastModifiedTime = lastModifiedTimeDecoded
    }
}
