// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateWorkteamInputBody: Swift.Equatable {
    let workteamName: Swift.String?
    let workforceName: Swift.String?
    let memberDefinitions: [SageMakerClientTypes.MemberDefinition]?
    let description: Swift.String?
    let notificationConfiguration: SageMakerClientTypes.NotificationConfiguration?
    let tags: [SageMakerClientTypes.Tag]?
}

extension CreateWorkteamInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description = "Description"
        case memberDefinitions = "MemberDefinitions"
        case notificationConfiguration = "NotificationConfiguration"
        case tags = "Tags"
        case workforceName = "WorkforceName"
        case workteamName = "WorkteamName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let workteamNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .workteamName)
        workteamName = workteamNameDecoded
        let workforceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .workforceName)
        workforceName = workforceNameDecoded
        let memberDefinitionsContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.MemberDefinition?].self, forKey: .memberDefinitions)
        var memberDefinitionsDecoded0:[SageMakerClientTypes.MemberDefinition]? = nil
        if let memberDefinitionsContainer = memberDefinitionsContainer {
            memberDefinitionsDecoded0 = [SageMakerClientTypes.MemberDefinition]()
            for structure0 in memberDefinitionsContainer {
                if let structure0 = structure0 {
                    memberDefinitionsDecoded0?.append(structure0)
                }
            }
        }
        memberDefinitions = memberDefinitionsDecoded0
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let notificationConfigurationDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.NotificationConfiguration.self, forKey: .notificationConfiguration)
        notificationConfiguration = notificationConfigurationDecoded
        let tagsContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[SageMakerClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [SageMakerClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}
