// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SageMakerClientTypes.ModelMetrics: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bias = "Bias"
        case explainability = "Explainability"
        case modelDataQuality = "ModelDataQuality"
        case modelQuality = "ModelQuality"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let bias = self.bias {
            try encodeContainer.encode(bias, forKey: .bias)
        }
        if let explainability = self.explainability {
            try encodeContainer.encode(explainability, forKey: .explainability)
        }
        if let modelDataQuality = self.modelDataQuality {
            try encodeContainer.encode(modelDataQuality, forKey: .modelDataQuality)
        }
        if let modelQuality = self.modelQuality {
            try encodeContainer.encode(modelQuality, forKey: .modelQuality)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let modelQualityDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ModelQuality.self, forKey: .modelQuality)
        modelQuality = modelQualityDecoded
        let modelDataQualityDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ModelDataQuality.self, forKey: .modelDataQuality)
        modelDataQuality = modelDataQualityDecoded
        let biasDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.Bias.self, forKey: .bias)
        bias = biasDecoded
        let explainabilityDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.Explainability.self, forKey: .explainability)
        explainability = explainabilityDecoded
    }
}
