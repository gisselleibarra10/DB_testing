// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CreateInferenceRecommendationsJobInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case inputConfig = "InputConfig"
        case jobDescription = "JobDescription"
        case jobName = "JobName"
        case jobType = "JobType"
        case outputConfig = "OutputConfig"
        case roleArn = "RoleArn"
        case stoppingConditions = "StoppingConditions"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let inputConfig = self.inputConfig {
            try encodeContainer.encode(inputConfig, forKey: .inputConfig)
        }
        if let jobDescription = self.jobDescription {
            try encodeContainer.encode(jobDescription, forKey: .jobDescription)
        }
        if let jobName = self.jobName {
            try encodeContainer.encode(jobName, forKey: .jobName)
        }
        if let jobType = self.jobType {
            try encodeContainer.encode(jobType.rawValue, forKey: .jobType)
        }
        if let outputConfig = self.outputConfig {
            try encodeContainer.encode(outputConfig, forKey: .outputConfig)
        }
        if let roleArn = self.roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let stoppingConditions = self.stoppingConditions {
            try encodeContainer.encode(stoppingConditions, forKey: .stoppingConditions)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }
}
