// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeDeviceOutputResponseBody: Swift.Equatable {
    let deviceArn: Swift.String?
    let deviceName: Swift.String?
    let description: Swift.String?
    let deviceFleetName: Swift.String?
    let iotThingName: Swift.String?
    let registrationTime: ClientRuntime.Date?
    let latestHeartbeat: ClientRuntime.Date?
    let models: [SageMakerClientTypes.EdgeModel]?
    let maxModels: Swift.Int
    let nextToken: Swift.String?
    let agentVersion: Swift.String?
}

extension DescribeDeviceOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case agentVersion = "AgentVersion"
        case description = "Description"
        case deviceArn = "DeviceArn"
        case deviceFleetName = "DeviceFleetName"
        case deviceName = "DeviceName"
        case iotThingName = "IotThingName"
        case latestHeartbeat = "LatestHeartbeat"
        case maxModels = "MaxModels"
        case models = "Models"
        case nextToken = "NextToken"
        case registrationTime = "RegistrationTime"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deviceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deviceArn)
        deviceArn = deviceArnDecoded
        let deviceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deviceName)
        deviceName = deviceNameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let deviceFleetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deviceFleetName)
        deviceFleetName = deviceFleetNameDecoded
        let iotThingNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .iotThingName)
        iotThingName = iotThingNameDecoded
        let registrationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .registrationTime)
        registrationTime = registrationTimeDecoded
        let latestHeartbeatDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .latestHeartbeat)
        latestHeartbeat = latestHeartbeatDecoded
        let modelsContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.EdgeModel?].self, forKey: .models)
        var modelsDecoded0:[SageMakerClientTypes.EdgeModel]? = nil
        if let modelsContainer = modelsContainer {
            modelsDecoded0 = [SageMakerClientTypes.EdgeModel]()
            for structure0 in modelsContainer {
                if let structure0 = structure0 {
                    modelsDecoded0?.append(structure0)
                }
            }
        }
        models = modelsDecoded0
        let maxModelsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxModels) ?? 0
        maxModels = maxModelsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let agentVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .agentVersion)
        agentVersion = agentVersionDecoded
    }
}
