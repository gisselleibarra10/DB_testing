// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeTrialComponentOutputResponseBody: Swift.Equatable {
    let trialComponentName: Swift.String?
    let trialComponentArn: Swift.String?
    let displayName: Swift.String?
    let source: SageMakerClientTypes.TrialComponentSource?
    let status: SageMakerClientTypes.TrialComponentStatus?
    let startTime: ClientRuntime.Date?
    let endTime: ClientRuntime.Date?
    let creationTime: ClientRuntime.Date?
    let createdBy: SageMakerClientTypes.UserContext?
    let lastModifiedTime: ClientRuntime.Date?
    let lastModifiedBy: SageMakerClientTypes.UserContext?
    let parameters: [Swift.String:SageMakerClientTypes.TrialComponentParameterValue]?
    let inputArtifacts: [Swift.String:SageMakerClientTypes.TrialComponentArtifact]?
    let outputArtifacts: [Swift.String:SageMakerClientTypes.TrialComponentArtifact]?
    let metadataProperties: SageMakerClientTypes.MetadataProperties?
    let metrics: [SageMakerClientTypes.TrialComponentMetricSummary]?
    let lineageGroupArn: Swift.String?
}

extension DescribeTrialComponentOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createdBy = "CreatedBy"
        case creationTime = "CreationTime"
        case displayName = "DisplayName"
        case endTime = "EndTime"
        case inputArtifacts = "InputArtifacts"
        case lastModifiedBy = "LastModifiedBy"
        case lastModifiedTime = "LastModifiedTime"
        case lineageGroupArn = "LineageGroupArn"
        case metadataProperties = "MetadataProperties"
        case metrics = "Metrics"
        case outputArtifacts = "OutputArtifacts"
        case parameters = "Parameters"
        case source = "Source"
        case startTime = "StartTime"
        case status = "Status"
        case trialComponentArn = "TrialComponentArn"
        case trialComponentName = "TrialComponentName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let trialComponentNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .trialComponentName)
        trialComponentName = trialComponentNameDecoded
        let trialComponentArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .trialComponentArn)
        trialComponentArn = trialComponentArnDecoded
        let displayNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .displayName)
        displayName = displayNameDecoded
        let sourceDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.TrialComponentSource.self, forKey: .source)
        source = sourceDecoded
        let statusDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.TrialComponentStatus.self, forKey: .status)
        status = statusDecoded
        let startTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .startTime)
        startTime = startTimeDecoded
        let endTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .endTime)
        endTime = endTimeDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let createdByDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.UserContext.self, forKey: .createdBy)
        createdBy = createdByDecoded
        let lastModifiedTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedTime)
        lastModifiedTime = lastModifiedTimeDecoded
        let lastModifiedByDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.UserContext.self, forKey: .lastModifiedBy)
        lastModifiedBy = lastModifiedByDecoded
        let parametersContainer = try containerValues.decodeIfPresent([Swift.String: SageMakerClientTypes.TrialComponentParameterValue?].self, forKey: .parameters)
        var parametersDecoded0: [Swift.String:SageMakerClientTypes.TrialComponentParameterValue]? = nil
        if let parametersContainer = parametersContainer {
            parametersDecoded0 = [Swift.String:SageMakerClientTypes.TrialComponentParameterValue]()
            for (key0, trialcomponentparametervalue0) in parametersContainer {
                if let trialcomponentparametervalue0 = trialcomponentparametervalue0 {
                    parametersDecoded0?[key0] = trialcomponentparametervalue0
                }
            }
        }
        parameters = parametersDecoded0
        let inputArtifactsContainer = try containerValues.decodeIfPresent([Swift.String: SageMakerClientTypes.TrialComponentArtifact?].self, forKey: .inputArtifacts)
        var inputArtifactsDecoded0: [Swift.String:SageMakerClientTypes.TrialComponentArtifact]? = nil
        if let inputArtifactsContainer = inputArtifactsContainer {
            inputArtifactsDecoded0 = [Swift.String:SageMakerClientTypes.TrialComponentArtifact]()
            for (key0, trialcomponentartifact0) in inputArtifactsContainer {
                if let trialcomponentartifact0 = trialcomponentartifact0 {
                    inputArtifactsDecoded0?[key0] = trialcomponentartifact0
                }
            }
        }
        inputArtifacts = inputArtifactsDecoded0
        let outputArtifactsContainer = try containerValues.decodeIfPresent([Swift.String: SageMakerClientTypes.TrialComponentArtifact?].self, forKey: .outputArtifacts)
        var outputArtifactsDecoded0: [Swift.String:SageMakerClientTypes.TrialComponentArtifact]? = nil
        if let outputArtifactsContainer = outputArtifactsContainer {
            outputArtifactsDecoded0 = [Swift.String:SageMakerClientTypes.TrialComponentArtifact]()
            for (key0, trialcomponentartifact0) in outputArtifactsContainer {
                if let trialcomponentartifact0 = trialcomponentartifact0 {
                    outputArtifactsDecoded0?[key0] = trialcomponentartifact0
                }
            }
        }
        outputArtifacts = outputArtifactsDecoded0
        let metadataPropertiesDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.MetadataProperties.self, forKey: .metadataProperties)
        metadataProperties = metadataPropertiesDecoded
        let metricsContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.TrialComponentMetricSummary?].self, forKey: .metrics)
        var metricsDecoded0:[SageMakerClientTypes.TrialComponentMetricSummary]? = nil
        if let metricsContainer = metricsContainer {
            metricsDecoded0 = [SageMakerClientTypes.TrialComponentMetricSummary]()
            for structure0 in metricsContainer {
                if let structure0 = structure0 {
                    metricsDecoded0?.append(structure0)
                }
            }
        }
        metrics = metricsDecoded0
        let lineageGroupArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lineageGroupArn)
        lineageGroupArn = lineageGroupArnDecoded
    }
}
