// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateModelInputBody: Swift.Equatable {
    let modelName: Swift.String?
    let primaryContainer: SageMakerClientTypes.ContainerDefinition?
    let containers: [SageMakerClientTypes.ContainerDefinition]?
    let inferenceExecutionConfig: SageMakerClientTypes.InferenceExecutionConfig?
    let executionRoleArn: Swift.String?
    let tags: [SageMakerClientTypes.Tag]?
    let vpcConfig: SageMakerClientTypes.VpcConfig?
    let enableNetworkIsolation: Swift.Bool
}

extension CreateModelInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case containers = "Containers"
        case enableNetworkIsolation = "EnableNetworkIsolation"
        case executionRoleArn = "ExecutionRoleArn"
        case inferenceExecutionConfig = "InferenceExecutionConfig"
        case modelName = "ModelName"
        case primaryContainer = "PrimaryContainer"
        case tags = "Tags"
        case vpcConfig = "VpcConfig"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let modelNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelName)
        modelName = modelNameDecoded
        let primaryContainerDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ContainerDefinition.self, forKey: .primaryContainer)
        primaryContainer = primaryContainerDecoded
        let containersContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.ContainerDefinition?].self, forKey: .containers)
        var containersDecoded0:[SageMakerClientTypes.ContainerDefinition]? = nil
        if let containersContainer = containersContainer {
            containersDecoded0 = [SageMakerClientTypes.ContainerDefinition]()
            for structure0 in containersContainer {
                if let structure0 = structure0 {
                    containersDecoded0?.append(structure0)
                }
            }
        }
        containers = containersDecoded0
        let inferenceExecutionConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.InferenceExecutionConfig.self, forKey: .inferenceExecutionConfig)
        inferenceExecutionConfig = inferenceExecutionConfigDecoded
        let executionRoleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .executionRoleArn)
        executionRoleArn = executionRoleArnDecoded
        let tagsContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[SageMakerClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [SageMakerClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let vpcConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.VpcConfig.self, forKey: .vpcConfig)
        vpcConfig = vpcConfigDecoded
        let enableNetworkIsolationDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enableNetworkIsolation) ?? false
        enableNetworkIsolation = enableNetworkIsolationDecoded
    }
}
