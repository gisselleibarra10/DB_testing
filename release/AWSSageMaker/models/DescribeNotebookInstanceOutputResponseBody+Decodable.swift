// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeNotebookInstanceOutputResponseBody: Swift.Equatable {
    let notebookInstanceArn: Swift.String?
    let notebookInstanceName: Swift.String?
    let notebookInstanceStatus: SageMakerClientTypes.NotebookInstanceStatus?
    let failureReason: Swift.String?
    let url: Swift.String?
    let instanceType: SageMakerClientTypes.InstanceType?
    let subnetId: Swift.String?
    let securityGroups: [Swift.String]?
    let roleArn: Swift.String?
    let kmsKeyId: Swift.String?
    let networkInterfaceId: Swift.String?
    let lastModifiedTime: ClientRuntime.Date?
    let creationTime: ClientRuntime.Date?
    let notebookInstanceLifecycleConfigName: Swift.String?
    let directInternetAccess: SageMakerClientTypes.DirectInternetAccess?
    let volumeSizeInGB: Swift.Int?
    let acceleratorTypes: [SageMakerClientTypes.NotebookInstanceAcceleratorType]?
    let defaultCodeRepository: Swift.String?
    let additionalCodeRepositories: [Swift.String]?
    let rootAccess: SageMakerClientTypes.RootAccess?
    let platformIdentifier: Swift.String?
    let instanceMetadataServiceConfiguration: SageMakerClientTypes.InstanceMetadataServiceConfiguration?
}

extension DescribeNotebookInstanceOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case acceleratorTypes = "AcceleratorTypes"
        case additionalCodeRepositories = "AdditionalCodeRepositories"
        case creationTime = "CreationTime"
        case defaultCodeRepository = "DefaultCodeRepository"
        case directInternetAccess = "DirectInternetAccess"
        case failureReason = "FailureReason"
        case instanceMetadataServiceConfiguration = "InstanceMetadataServiceConfiguration"
        case instanceType = "InstanceType"
        case kmsKeyId = "KmsKeyId"
        case lastModifiedTime = "LastModifiedTime"
        case networkInterfaceId = "NetworkInterfaceId"
        case notebookInstanceArn = "NotebookInstanceArn"
        case notebookInstanceLifecycleConfigName = "NotebookInstanceLifecycleConfigName"
        case notebookInstanceName = "NotebookInstanceName"
        case notebookInstanceStatus = "NotebookInstanceStatus"
        case platformIdentifier = "PlatformIdentifier"
        case roleArn = "RoleArn"
        case rootAccess = "RootAccess"
        case securityGroups = "SecurityGroups"
        case subnetId = "SubnetId"
        case url = "Url"
        case volumeSizeInGB = "VolumeSizeInGB"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let notebookInstanceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .notebookInstanceArn)
        notebookInstanceArn = notebookInstanceArnDecoded
        let notebookInstanceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .notebookInstanceName)
        notebookInstanceName = notebookInstanceNameDecoded
        let notebookInstanceStatusDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.NotebookInstanceStatus.self, forKey: .notebookInstanceStatus)
        notebookInstanceStatus = notebookInstanceStatusDecoded
        let failureReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .failureReason)
        failureReason = failureReasonDecoded
        let urlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .url)
        url = urlDecoded
        let instanceTypeDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.InstanceType.self, forKey: .instanceType)
        instanceType = instanceTypeDecoded
        let subnetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .subnetId)
        subnetId = subnetIdDecoded
        let securityGroupsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .securityGroups)
        var securityGroupsDecoded0:[Swift.String]? = nil
        if let securityGroupsContainer = securityGroupsContainer {
            securityGroupsDecoded0 = [Swift.String]()
            for string0 in securityGroupsContainer {
                if let string0 = string0 {
                    securityGroupsDecoded0?.append(string0)
                }
            }
        }
        securityGroups = securityGroupsDecoded0
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let kmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kmsKeyId)
        kmsKeyId = kmsKeyIdDecoded
        let networkInterfaceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .networkInterfaceId)
        networkInterfaceId = networkInterfaceIdDecoded
        let lastModifiedTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedTime)
        lastModifiedTime = lastModifiedTimeDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let notebookInstanceLifecycleConfigNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .notebookInstanceLifecycleConfigName)
        notebookInstanceLifecycleConfigName = notebookInstanceLifecycleConfigNameDecoded
        let directInternetAccessDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.DirectInternetAccess.self, forKey: .directInternetAccess)
        directInternetAccess = directInternetAccessDecoded
        let volumeSizeInGBDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .volumeSizeInGB)
        volumeSizeInGB = volumeSizeInGBDecoded
        let acceleratorTypesContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.NotebookInstanceAcceleratorType?].self, forKey: .acceleratorTypes)
        var acceleratorTypesDecoded0:[SageMakerClientTypes.NotebookInstanceAcceleratorType]? = nil
        if let acceleratorTypesContainer = acceleratorTypesContainer {
            acceleratorTypesDecoded0 = [SageMakerClientTypes.NotebookInstanceAcceleratorType]()
            for enum0 in acceleratorTypesContainer {
                if let enum0 = enum0 {
                    acceleratorTypesDecoded0?.append(enum0)
                }
            }
        }
        acceleratorTypes = acceleratorTypesDecoded0
        let defaultCodeRepositoryDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .defaultCodeRepository)
        defaultCodeRepository = defaultCodeRepositoryDecoded
        let additionalCodeRepositoriesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .additionalCodeRepositories)
        var additionalCodeRepositoriesDecoded0:[Swift.String]? = nil
        if let additionalCodeRepositoriesContainer = additionalCodeRepositoriesContainer {
            additionalCodeRepositoriesDecoded0 = [Swift.String]()
            for string0 in additionalCodeRepositoriesContainer {
                if let string0 = string0 {
                    additionalCodeRepositoriesDecoded0?.append(string0)
                }
            }
        }
        additionalCodeRepositories = additionalCodeRepositoriesDecoded0
        let rootAccessDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.RootAccess.self, forKey: .rootAccess)
        rootAccess = rootAccessDecoded
        let platformIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .platformIdentifier)
        platformIdentifier = platformIdentifierDecoded
        let instanceMetadataServiceConfigurationDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.InstanceMetadataServiceConfiguration.self, forKey: .instanceMetadataServiceConfiguration)
        instanceMetadataServiceConfiguration = instanceMetadataServiceConfigurationDecoded
    }
}
