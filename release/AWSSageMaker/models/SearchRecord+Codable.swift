// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SageMakerClientTypes.SearchRecord: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case endpoint = "Endpoint"
        case experiment = "Experiment"
        case featureGroup = "FeatureGroup"
        case featureMetadata = "FeatureMetadata"
        case hyperParameterTuningJob = "HyperParameterTuningJob"
        case modelPackage = "ModelPackage"
        case modelPackageGroup = "ModelPackageGroup"
        case pipeline = "Pipeline"
        case pipelineExecution = "PipelineExecution"
        case project = "Project"
        case trainingJob = "TrainingJob"
        case trial = "Trial"
        case trialComponent = "TrialComponent"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let endpoint = self.endpoint {
            try encodeContainer.encode(endpoint, forKey: .endpoint)
        }
        if let experiment = self.experiment {
            try encodeContainer.encode(experiment, forKey: .experiment)
        }
        if let featureGroup = self.featureGroup {
            try encodeContainer.encode(featureGroup, forKey: .featureGroup)
        }
        if let featureMetadata = self.featureMetadata {
            try encodeContainer.encode(featureMetadata, forKey: .featureMetadata)
        }
        if let hyperParameterTuningJob = self.hyperParameterTuningJob {
            try encodeContainer.encode(hyperParameterTuningJob, forKey: .hyperParameterTuningJob)
        }
        if let modelPackage = self.modelPackage {
            try encodeContainer.encode(modelPackage, forKey: .modelPackage)
        }
        if let modelPackageGroup = self.modelPackageGroup {
            try encodeContainer.encode(modelPackageGroup, forKey: .modelPackageGroup)
        }
        if let pipeline = self.pipeline {
            try encodeContainer.encode(pipeline, forKey: .pipeline)
        }
        if let pipelineExecution = self.pipelineExecution {
            try encodeContainer.encode(pipelineExecution, forKey: .pipelineExecution)
        }
        if let project = self.project {
            try encodeContainer.encode(project, forKey: .project)
        }
        if let trainingJob = self.trainingJob {
            try encodeContainer.encode(trainingJob, forKey: .trainingJob)
        }
        if let trial = self.trial {
            try encodeContainer.encode(trial, forKey: .trial)
        }
        if let trialComponent = self.trialComponent {
            try encodeContainer.encode(trialComponent, forKey: .trialComponent)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let trainingJobDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.TrainingJob.self, forKey: .trainingJob)
        trainingJob = trainingJobDecoded
        let experimentDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.Experiment.self, forKey: .experiment)
        experiment = experimentDecoded
        let trialDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.Trial.self, forKey: .trial)
        trial = trialDecoded
        let trialComponentDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.TrialComponent.self, forKey: .trialComponent)
        trialComponent = trialComponentDecoded
        let endpointDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.Endpoint.self, forKey: .endpoint)
        endpoint = endpointDecoded
        let modelPackageDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ModelPackage.self, forKey: .modelPackage)
        modelPackage = modelPackageDecoded
        let modelPackageGroupDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ModelPackageGroup.self, forKey: .modelPackageGroup)
        modelPackageGroup = modelPackageGroupDecoded
        let pipelineDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.Pipeline.self, forKey: .pipeline)
        pipeline = pipelineDecoded
        let pipelineExecutionDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.PipelineExecution.self, forKey: .pipelineExecution)
        pipelineExecution = pipelineExecutionDecoded
        let featureGroupDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.FeatureGroup.self, forKey: .featureGroup)
        featureGroup = featureGroupDecoded
        let projectDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.Project.self, forKey: .project)
        project = projectDecoded
        let featureMetadataDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.FeatureMetadata.self, forKey: .featureMetadata)
        featureMetadata = featureMetadataDecoded
        let hyperParameterTuningJobDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.HyperParameterTuningJobSearchEntity.self, forKey: .hyperParameterTuningJob)
        hyperParameterTuningJob = hyperParameterTuningJobDecoded
    }
}
