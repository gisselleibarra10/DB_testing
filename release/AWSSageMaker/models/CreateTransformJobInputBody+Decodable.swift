// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateTransformJobInputBody: Swift.Equatable {
    let transformJobName: Swift.String?
    let modelName: Swift.String?
    let maxConcurrentTransforms: Swift.Int?
    let modelClientConfig: SageMakerClientTypes.ModelClientConfig?
    let maxPayloadInMB: Swift.Int?
    let batchStrategy: SageMakerClientTypes.BatchStrategy?
    let environment: [Swift.String:Swift.String]?
    let transformInput: SageMakerClientTypes.TransformInput?
    let transformOutput: SageMakerClientTypes.TransformOutput?
    let transformResources: SageMakerClientTypes.TransformResources?
    let dataProcessing: SageMakerClientTypes.DataProcessing?
    let tags: [SageMakerClientTypes.Tag]?
    let experimentConfig: SageMakerClientTypes.ExperimentConfig?
}

extension CreateTransformJobInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case batchStrategy = "BatchStrategy"
        case dataProcessing = "DataProcessing"
        case environment = "Environment"
        case experimentConfig = "ExperimentConfig"
        case maxConcurrentTransforms = "MaxConcurrentTransforms"
        case maxPayloadInMB = "MaxPayloadInMB"
        case modelClientConfig = "ModelClientConfig"
        case modelName = "ModelName"
        case tags = "Tags"
        case transformInput = "TransformInput"
        case transformJobName = "TransformJobName"
        case transformOutput = "TransformOutput"
        case transformResources = "TransformResources"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let transformJobNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .transformJobName)
        transformJobName = transformJobNameDecoded
        let modelNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelName)
        modelName = modelNameDecoded
        let maxConcurrentTransformsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxConcurrentTransforms)
        maxConcurrentTransforms = maxConcurrentTransformsDecoded
        let modelClientConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ModelClientConfig.self, forKey: .modelClientConfig)
        modelClientConfig = modelClientConfigDecoded
        let maxPayloadInMBDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxPayloadInMB)
        maxPayloadInMB = maxPayloadInMBDecoded
        let batchStrategyDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.BatchStrategy.self, forKey: .batchStrategy)
        batchStrategy = batchStrategyDecoded
        let environmentContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .environment)
        var environmentDecoded0: [Swift.String:Swift.String]? = nil
        if let environmentContainer = environmentContainer {
            environmentDecoded0 = [Swift.String:Swift.String]()
            for (key0, transformenvironmentvalue0) in environmentContainer {
                if let transformenvironmentvalue0 = transformenvironmentvalue0 {
                    environmentDecoded0?[key0] = transformenvironmentvalue0
                }
            }
        }
        environment = environmentDecoded0
        let transformInputDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.TransformInput.self, forKey: .transformInput)
        transformInput = transformInputDecoded
        let transformOutputDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.TransformOutput.self, forKey: .transformOutput)
        transformOutput = transformOutputDecoded
        let transformResourcesDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.TransformResources.self, forKey: .transformResources)
        transformResources = transformResourcesDecoded
        let dataProcessingDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.DataProcessing.self, forKey: .dataProcessing)
        dataProcessing = dataProcessingDecoded
        let tagsContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[SageMakerClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [SageMakerClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let experimentConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ExperimentConfig.self, forKey: .experimentConfig)
        experimentConfig = experimentConfigDecoded
    }
}
