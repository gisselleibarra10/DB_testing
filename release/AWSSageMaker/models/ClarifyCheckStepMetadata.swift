// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension SageMakerClientTypes {
    /// The container for the metadata for the ClarifyCheck step. For more information, see the topic on [ClarifyCheck step](https://docs.aws.amazon.com/sagemaker/latest/dg/build-and-manage-steps.html#step-type-clarify-check) in the Amazon SageMaker Developer Guide.
    public struct ClarifyCheckStepMetadata: Swift.Equatable {
        /// The Amazon S3 URI of baseline constraints file to be used for the drift check.
        public var baselineUsedForDriftCheckConstraints: Swift.String?
        /// The Amazon S3 URI of the newly calculated baseline constraints file.
        public var calculatedBaselineConstraints: Swift.String?
        /// The Amazon Resource Name (ARN) of the check processing job that was run by this step's execution.
        public var checkJobArn: Swift.String?
        /// The type of the Clarify Check step
        public var checkType: Swift.String?
        /// The model package group name.
        public var modelPackageGroupName: Swift.String?
        /// This flag indicates if a newly calculated baseline can be accessed through step properties BaselineUsedForDriftCheckConstraints and BaselineUsedForDriftCheckStatistics. If it is set to False, the previous baseline of the configured check type must also be available. These can be accessed through the BaselineUsedForDriftCheckConstraints property.
        public var registerNewBaseline: Swift.Bool
        /// This flag indicates if the drift check against the previous baseline will be skipped or not. If it is set to False, the previous baseline of the configured check type must be available.
        public var skipCheck: Swift.Bool
        /// The Amazon S3 URI of the violation report if violations are detected.
        public var violationReport: Swift.String?

        public init (
            baselineUsedForDriftCheckConstraints: Swift.String? = nil,
            calculatedBaselineConstraints: Swift.String? = nil,
            checkJobArn: Swift.String? = nil,
            checkType: Swift.String? = nil,
            modelPackageGroupName: Swift.String? = nil,
            registerNewBaseline: Swift.Bool = false,
            skipCheck: Swift.Bool = false,
            violationReport: Swift.String? = nil
        )
        {
            self.baselineUsedForDriftCheckConstraints = baselineUsedForDriftCheckConstraints
            self.calculatedBaselineConstraints = calculatedBaselineConstraints
            self.checkJobArn = checkJobArn
            self.checkType = checkType
            self.modelPackageGroupName = modelPackageGroupName
            self.registerNewBaseline = registerNewBaseline
            self.skipCheck = skipCheck
            self.violationReport = violationReport
        }
    }

}
