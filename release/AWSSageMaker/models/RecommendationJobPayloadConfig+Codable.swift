// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SageMakerClientTypes.RecommendationJobPayloadConfig: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case samplePayloadUrl = "SamplePayloadUrl"
        case supportedContentTypes = "SupportedContentTypes"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let samplePayloadUrl = self.samplePayloadUrl {
            try encodeContainer.encode(samplePayloadUrl, forKey: .samplePayloadUrl)
        }
        if let supportedContentTypes = supportedContentTypes {
            var supportedContentTypesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .supportedContentTypes)
            for recommendationjobsupportedcontenttypes0 in supportedContentTypes {
                try supportedContentTypesContainer.encode(recommendationjobsupportedcontenttypes0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let samplePayloadUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .samplePayloadUrl)
        samplePayloadUrl = samplePayloadUrlDecoded
        let supportedContentTypesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .supportedContentTypes)
        var supportedContentTypesDecoded0:[Swift.String]? = nil
        if let supportedContentTypesContainer = supportedContentTypesContainer {
            supportedContentTypesDecoded0 = [Swift.String]()
            for string0 in supportedContentTypesContainer {
                if let string0 = string0 {
                    supportedContentTypesDecoded0?.append(string0)
                }
            }
        }
        supportedContentTypes = supportedContentTypesDecoded0
    }
}
