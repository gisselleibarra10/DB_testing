// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateModelBiasJobDefinitionInputBody: Swift.Equatable {
    let jobDefinitionName: Swift.String?
    let modelBiasBaselineConfig: SageMakerClientTypes.ModelBiasBaselineConfig?
    let modelBiasAppSpecification: SageMakerClientTypes.ModelBiasAppSpecification?
    let modelBiasJobInput: SageMakerClientTypes.ModelBiasJobInput?
    let modelBiasJobOutputConfig: SageMakerClientTypes.MonitoringOutputConfig?
    let jobResources: SageMakerClientTypes.MonitoringResources?
    let networkConfig: SageMakerClientTypes.MonitoringNetworkConfig?
    let roleArn: Swift.String?
    let stoppingCondition: SageMakerClientTypes.MonitoringStoppingCondition?
    let tags: [SageMakerClientTypes.Tag]?
}

extension CreateModelBiasJobDefinitionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobDefinitionName = "JobDefinitionName"
        case jobResources = "JobResources"
        case modelBiasAppSpecification = "ModelBiasAppSpecification"
        case modelBiasBaselineConfig = "ModelBiasBaselineConfig"
        case modelBiasJobInput = "ModelBiasJobInput"
        case modelBiasJobOutputConfig = "ModelBiasJobOutputConfig"
        case networkConfig = "NetworkConfig"
        case roleArn = "RoleArn"
        case stoppingCondition = "StoppingCondition"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobDefinitionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobDefinitionName)
        jobDefinitionName = jobDefinitionNameDecoded
        let modelBiasBaselineConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ModelBiasBaselineConfig.self, forKey: .modelBiasBaselineConfig)
        modelBiasBaselineConfig = modelBiasBaselineConfigDecoded
        let modelBiasAppSpecificationDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ModelBiasAppSpecification.self, forKey: .modelBiasAppSpecification)
        modelBiasAppSpecification = modelBiasAppSpecificationDecoded
        let modelBiasJobInputDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ModelBiasJobInput.self, forKey: .modelBiasJobInput)
        modelBiasJobInput = modelBiasJobInputDecoded
        let modelBiasJobOutputConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.MonitoringOutputConfig.self, forKey: .modelBiasJobOutputConfig)
        modelBiasJobOutputConfig = modelBiasJobOutputConfigDecoded
        let jobResourcesDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.MonitoringResources.self, forKey: .jobResources)
        jobResources = jobResourcesDecoded
        let networkConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.MonitoringNetworkConfig.self, forKey: .networkConfig)
        networkConfig = networkConfigDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let stoppingConditionDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.MonitoringStoppingCondition.self, forKey: .stoppingCondition)
        stoppingCondition = stoppingConditionDecoded
        let tagsContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[SageMakerClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [SageMakerClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}
