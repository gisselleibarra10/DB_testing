// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SageMakerClientTypes.DeviceSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case agentVersion = "AgentVersion"
        case description = "Description"
        case deviceArn = "DeviceArn"
        case deviceFleetName = "DeviceFleetName"
        case deviceName = "DeviceName"
        case iotThingName = "IotThingName"
        case latestHeartbeat = "LatestHeartbeat"
        case models = "Models"
        case registrationTime = "RegistrationTime"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let agentVersion = self.agentVersion {
            try encodeContainer.encode(agentVersion, forKey: .agentVersion)
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let deviceArn = self.deviceArn {
            try encodeContainer.encode(deviceArn, forKey: .deviceArn)
        }
        if let deviceFleetName = self.deviceFleetName {
            try encodeContainer.encode(deviceFleetName, forKey: .deviceFleetName)
        }
        if let deviceName = self.deviceName {
            try encodeContainer.encode(deviceName, forKey: .deviceName)
        }
        if let iotThingName = self.iotThingName {
            try encodeContainer.encode(iotThingName, forKey: .iotThingName)
        }
        if let latestHeartbeat = self.latestHeartbeat {
            try encodeContainer.encode(latestHeartbeat.timeIntervalSince1970, forKey: .latestHeartbeat)
        }
        if let models = models {
            var modelsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .models)
            for edgemodelsummaries0 in models {
                try modelsContainer.encode(edgemodelsummaries0)
            }
        }
        if let registrationTime = self.registrationTime {
            try encodeContainer.encode(registrationTime.timeIntervalSince1970, forKey: .registrationTime)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deviceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deviceName)
        deviceName = deviceNameDecoded
        let deviceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deviceArn)
        deviceArn = deviceArnDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let deviceFleetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deviceFleetName)
        deviceFleetName = deviceFleetNameDecoded
        let iotThingNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .iotThingName)
        iotThingName = iotThingNameDecoded
        let registrationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .registrationTime)
        registrationTime = registrationTimeDecoded
        let latestHeartbeatDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .latestHeartbeat)
        latestHeartbeat = latestHeartbeatDecoded
        let modelsContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.EdgeModelSummary?].self, forKey: .models)
        var modelsDecoded0:[SageMakerClientTypes.EdgeModelSummary]? = nil
        if let modelsContainer = modelsContainer {
            modelsDecoded0 = [SageMakerClientTypes.EdgeModelSummary]()
            for structure0 in modelsContainer {
                if let structure0 = structure0 {
                    modelsDecoded0?.append(structure0)
                }
            }
        }
        models = modelsDecoded0
        let agentVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .agentVersion)
        agentVersion = agentVersionDecoded
    }
}
