// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SageMakerClientTypes.ProcessingJobSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTime = "CreationTime"
        case exitMessage = "ExitMessage"
        case failureReason = "FailureReason"
        case lastModifiedTime = "LastModifiedTime"
        case processingEndTime = "ProcessingEndTime"
        case processingJobArn = "ProcessingJobArn"
        case processingJobName = "ProcessingJobName"
        case processingJobStatus = "ProcessingJobStatus"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationTime = self.creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let exitMessage = self.exitMessage {
            try encodeContainer.encode(exitMessage, forKey: .exitMessage)
        }
        if let failureReason = self.failureReason {
            try encodeContainer.encode(failureReason, forKey: .failureReason)
        }
        if let lastModifiedTime = self.lastModifiedTime {
            try encodeContainer.encode(lastModifiedTime.timeIntervalSince1970, forKey: .lastModifiedTime)
        }
        if let processingEndTime = self.processingEndTime {
            try encodeContainer.encode(processingEndTime.timeIntervalSince1970, forKey: .processingEndTime)
        }
        if let processingJobArn = self.processingJobArn {
            try encodeContainer.encode(processingJobArn, forKey: .processingJobArn)
        }
        if let processingJobName = self.processingJobName {
            try encodeContainer.encode(processingJobName, forKey: .processingJobName)
        }
        if let processingJobStatus = self.processingJobStatus {
            try encodeContainer.encode(processingJobStatus.rawValue, forKey: .processingJobStatus)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let processingJobNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .processingJobName)
        processingJobName = processingJobNameDecoded
        let processingJobArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .processingJobArn)
        processingJobArn = processingJobArnDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let processingEndTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .processingEndTime)
        processingEndTime = processingEndTimeDecoded
        let lastModifiedTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedTime)
        lastModifiedTime = lastModifiedTimeDecoded
        let processingJobStatusDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ProcessingJobStatus.self, forKey: .processingJobStatus)
        processingJobStatus = processingJobStatusDecoded
        let failureReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .failureReason)
        failureReason = failureReasonDecoded
        let exitMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .exitMessage)
        exitMessage = exitMessageDecoded
    }
}
