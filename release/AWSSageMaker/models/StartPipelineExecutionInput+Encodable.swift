// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension StartPipelineExecutionInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientRequestToken = "ClientRequestToken"
        case parallelismConfiguration = "ParallelismConfiguration"
        case pipelineExecutionDescription = "PipelineExecutionDescription"
        case pipelineExecutionDisplayName = "PipelineExecutionDisplayName"
        case pipelineName = "PipelineName"
        case pipelineParameters = "PipelineParameters"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientRequestToken = self.clientRequestToken {
            try encodeContainer.encode(clientRequestToken, forKey: .clientRequestToken)
        }
        if let parallelismConfiguration = self.parallelismConfiguration {
            try encodeContainer.encode(parallelismConfiguration, forKey: .parallelismConfiguration)
        }
        if let pipelineExecutionDescription = self.pipelineExecutionDescription {
            try encodeContainer.encode(pipelineExecutionDescription, forKey: .pipelineExecutionDescription)
        }
        if let pipelineExecutionDisplayName = self.pipelineExecutionDisplayName {
            try encodeContainer.encode(pipelineExecutionDisplayName, forKey: .pipelineExecutionDisplayName)
        }
        if let pipelineName = self.pipelineName {
            try encodeContainer.encode(pipelineName, forKey: .pipelineName)
        }
        if let pipelineParameters = pipelineParameters {
            var pipelineParametersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .pipelineParameters)
            for parameterlist0 in pipelineParameters {
                try pipelineParametersContainer.encode(parameterlist0)
            }
        }
    }
}
