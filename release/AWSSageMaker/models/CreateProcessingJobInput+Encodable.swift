// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CreateProcessingJobInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case appSpecification = "AppSpecification"
        case environment = "Environment"
        case experimentConfig = "ExperimentConfig"
        case networkConfig = "NetworkConfig"
        case processingInputs = "ProcessingInputs"
        case processingJobName = "ProcessingJobName"
        case processingOutputConfig = "ProcessingOutputConfig"
        case processingResources = "ProcessingResources"
        case roleArn = "RoleArn"
        case stoppingCondition = "StoppingCondition"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let appSpecification = self.appSpecification {
            try encodeContainer.encode(appSpecification, forKey: .appSpecification)
        }
        if let environment = environment {
            var environmentContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .environment)
            for (dictKey0, processingenvironmentmap0) in environment {
                try environmentContainer.encode(processingenvironmentmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let experimentConfig = self.experimentConfig {
            try encodeContainer.encode(experimentConfig, forKey: .experimentConfig)
        }
        if let networkConfig = self.networkConfig {
            try encodeContainer.encode(networkConfig, forKey: .networkConfig)
        }
        if let processingInputs = processingInputs {
            var processingInputsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .processingInputs)
            for processinginputs0 in processingInputs {
                try processingInputsContainer.encode(processinginputs0)
            }
        }
        if let processingJobName = self.processingJobName {
            try encodeContainer.encode(processingJobName, forKey: .processingJobName)
        }
        if let processingOutputConfig = self.processingOutputConfig {
            try encodeContainer.encode(processingOutputConfig, forKey: .processingOutputConfig)
        }
        if let processingResources = self.processingResources {
            try encodeContainer.encode(processingResources, forKey: .processingResources)
        }
        if let roleArn = self.roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let stoppingCondition = self.stoppingCondition {
            try encodeContainer.encode(stoppingCondition, forKey: .stoppingCondition)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }
}
