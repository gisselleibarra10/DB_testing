// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SageMakerClientTypes {
    /// Contains information about a training job.
    public struct TrainingJob: Swift.Equatable {
        /// Information about the algorithm used for training, and algorithm metadata.
        public var algorithmSpecification: SageMakerClientTypes.AlgorithmSpecification?
        /// The Amazon Resource Name (ARN) of the job.
        public var autoMLJobArn: Swift.String?
        /// The billable time in seconds.
        public var billableTimeInSeconds: Swift.Int?
        /// Contains information about the output location for managed spot training checkpoint data.
        public var checkpointConfig: SageMakerClientTypes.CheckpointConfig?
        /// A timestamp that indicates when the training job was created.
        public var creationTime: ClientRuntime.Date?
        /// Configuration information for the Debugger hook parameters, metric and tensor collections, and storage paths. To learn more about how to configure the DebugHookConfig parameter, see [Use the SageMaker and Debugger Configuration API Operations to Create, Update, and Debug Your Training Job](https://docs.aws.amazon.com/sagemaker/latest/dg/debugger-createtrainingjob-api.html).
        public var debugHookConfig: SageMakerClientTypes.DebugHookConfig?
        /// Information about the debug rule configuration.
        public var debugRuleConfigurations: [SageMakerClientTypes.DebugRuleConfiguration]?
        /// Information about the evaluation status of the rules for the training job.
        public var debugRuleEvaluationStatuses: [SageMakerClientTypes.DebugRuleEvaluationStatus]?
        /// To encrypt all communications between ML compute instances in distributed training, choose True. Encryption provides greater security for distributed training, but training might take longer. How long it takes depends on the amount of communication between compute instances, especially if you use a deep learning algorithm in distributed training.
        public var enableInterContainerTrafficEncryption: Swift.Bool
        /// When true, enables managed spot training using Amazon EC2 Spot instances to run training jobs instead of on-demand instances. For more information, see [Managed Spot Training](https://docs.aws.amazon.com/sagemaker/latest/dg/model-managed-spot-training.html).
        public var enableManagedSpotTraining: Swift.Bool
        /// If the TrainingJob was created with network isolation, the value is set to true. If network isolation is enabled, nodes can't communicate beyond the VPC they run in.
        public var enableNetworkIsolation: Swift.Bool
        /// The environment variables to set in the Docker container.
        public var environment: [Swift.String:Swift.String]?
        /// Associates a SageMaker job as a trial component with an experiment and trial. Specified when you call the following APIs:
        ///
        /// * [CreateProcessingJob]
        ///
        /// * [CreateTrainingJob]
        ///
        /// * [CreateTransformJob]
        public var experimentConfig: SageMakerClientTypes.ExperimentConfig?
        /// If the training job failed, the reason it failed.
        public var failureReason: Swift.String?
        /// A list of final metric values that are set when the training job completes. Used only if the training job was configured to use metrics.
        public var finalMetricDataList: [SageMakerClientTypes.MetricData]?
        /// Algorithm-specific parameters.
        public var hyperParameters: [Swift.String:Swift.String]?
        /// An array of Channel objects that describes each data input channel.
        public var inputDataConfig: [SageMakerClientTypes.Channel]?
        /// The Amazon Resource Name (ARN) of the labeling job.
        public var labelingJobArn: Swift.String?
        /// A timestamp that indicates when the status of the training job was last modified.
        public var lastModifiedTime: ClientRuntime.Date?
        /// Information about the Amazon S3 location that is configured for storing model artifacts.
        public var modelArtifacts: SageMakerClientTypes.ModelArtifacts?
        /// The S3 path where model artifacts that you configured when creating the job are stored. SageMaker creates subfolders for model artifacts.
        public var outputDataConfig: SageMakerClientTypes.OutputDataConfig?
        /// Resources, including ML compute instances and ML storage volumes, that are configured for model training.
        public var resourceConfig: SageMakerClientTypes.ResourceConfig?
        /// The number of times to retry the job when the job fails due to an InternalServerError.
        public var retryStrategy: SageMakerClientTypes.RetryStrategy?
        /// The Amazon Web Services Identity and Access Management (IAM) role configured for the training job.
        public var roleArn: Swift.String?
        /// Provides detailed information about the state of the training job. For detailed information about the secondary status of the training job, see StatusMessage under [SecondaryStatusTransition]. SageMaker provides primary statuses and secondary statuses that apply to each of them: InProgress
        ///
        /// * Starting - Starting the training job.
        ///
        /// * Downloading - An optional stage for algorithms that support File training input mode. It indicates that data is being downloaded to the ML storage volumes.
        ///
        /// * Training - Training is in progress.
        ///
        /// * Uploading - Training is complete and the model artifacts are being uploaded to the S3 location.
        ///
        ///
        /// Completed
        ///
        /// * Completed - The training job has completed.
        ///
        ///
        /// Failed
        ///
        /// * Failed - The training job has failed. The reason for the failure is returned in the FailureReason field of DescribeTrainingJobResponse.
        ///
        ///
        /// Stopped
        ///
        /// * MaxRuntimeExceeded - The job stopped because it exceeded the maximum allowed runtime.
        ///
        /// * Stopped - The training job has stopped.
        ///
        ///
        /// Stopping
        ///
        /// * Stopping - Stopping the training job.
        ///
        ///
        /// Valid values for SecondaryStatus are subject to change. We no longer support the following secondary statuses:
        ///
        /// * LaunchingMLInstances
        ///
        /// * PreparingTrainingStack
        ///
        /// * DownloadingTrainingImage
        public var secondaryStatus: SageMakerClientTypes.SecondaryStatus?
        /// A history of all of the secondary statuses that the training job has transitioned through.
        public var secondaryStatusTransitions: [SageMakerClientTypes.SecondaryStatusTransition]?
        /// Specifies a limit to how long a model training job can run. It also specifies how long a managed Spot training job has to complete. When the job reaches the time limit, SageMaker ends the training job. Use this API to cap model training costs. To stop a job, SageMaker sends the algorithm the SIGTERM signal, which delays job termination for 120 seconds. Algorithms can use this 120-second window to save the model artifacts, so the results of training are not lost.
        public var stoppingCondition: SageMakerClientTypes.StoppingCondition?
        /// An array of key-value pairs. You can use tags to categorize your Amazon Web Services resources in different ways, for example, by purpose, owner, or environment. For more information, see [Tagging Amazon Web Services Resources](https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html).
        public var tags: [SageMakerClientTypes.Tag]?
        /// Configuration of storage locations for the Debugger TensorBoard output data.
        public var tensorBoardOutputConfig: SageMakerClientTypes.TensorBoardOutputConfig?
        /// Indicates the time when the training job ends on training instances. You are billed for the time interval between the value of TrainingStartTime and this time. For successful jobs and stopped jobs, this is the time after model artifacts are uploaded. For failed jobs, this is the time when SageMaker detects a job failure.
        public var trainingEndTime: ClientRuntime.Date?
        /// The Amazon Resource Name (ARN) of the training job.
        public var trainingJobArn: Swift.String?
        /// The name of the training job.
        public var trainingJobName: Swift.String?
        /// The status of the training job. Training job statuses are:
        ///
        /// * InProgress - The training is in progress.
        ///
        /// * Completed - The training job has completed.
        ///
        /// * Failed - The training job has failed. To see the reason for the failure, see the FailureReason field in the response to a DescribeTrainingJobResponse call.
        ///
        /// * Stopping - The training job is stopping.
        ///
        /// * Stopped - The training job has stopped.
        ///
        ///
        /// For more detailed information, see SecondaryStatus.
        public var trainingJobStatus: SageMakerClientTypes.TrainingJobStatus?
        /// Indicates the time when the training job starts on training instances. You are billed for the time interval between this time and the value of TrainingEndTime. The start time in CloudWatch Logs might be later than this time. The difference is due to the time it takes to download the training data and to the size of the training container.
        public var trainingStartTime: ClientRuntime.Date?
        /// The training time in seconds.
        public var trainingTimeInSeconds: Swift.Int?
        /// The Amazon Resource Name (ARN) of the associated hyperparameter tuning job if the training job was launched by a hyperparameter tuning job.
        public var tuningJobArn: Swift.String?
        /// A [VpcConfig] object that specifies the VPC that this training job has access to. For more information, see [Protect Training Jobs by Using an Amazon Virtual Private Cloud](https://docs.aws.amazon.com/sagemaker/latest/dg/train-vpc.html).
        public var vpcConfig: SageMakerClientTypes.VpcConfig?

        public init (
            algorithmSpecification: SageMakerClientTypes.AlgorithmSpecification? = nil,
            autoMLJobArn: Swift.String? = nil,
            billableTimeInSeconds: Swift.Int? = nil,
            checkpointConfig: SageMakerClientTypes.CheckpointConfig? = nil,
            creationTime: ClientRuntime.Date? = nil,
            debugHookConfig: SageMakerClientTypes.DebugHookConfig? = nil,
            debugRuleConfigurations: [SageMakerClientTypes.DebugRuleConfiguration]? = nil,
            debugRuleEvaluationStatuses: [SageMakerClientTypes.DebugRuleEvaluationStatus]? = nil,
            enableInterContainerTrafficEncryption: Swift.Bool = false,
            enableManagedSpotTraining: Swift.Bool = false,
            enableNetworkIsolation: Swift.Bool = false,
            environment: [Swift.String:Swift.String]? = nil,
            experimentConfig: SageMakerClientTypes.ExperimentConfig? = nil,
            failureReason: Swift.String? = nil,
            finalMetricDataList: [SageMakerClientTypes.MetricData]? = nil,
            hyperParameters: [Swift.String:Swift.String]? = nil,
            inputDataConfig: [SageMakerClientTypes.Channel]? = nil,
            labelingJobArn: Swift.String? = nil,
            lastModifiedTime: ClientRuntime.Date? = nil,
            modelArtifacts: SageMakerClientTypes.ModelArtifacts? = nil,
            outputDataConfig: SageMakerClientTypes.OutputDataConfig? = nil,
            resourceConfig: SageMakerClientTypes.ResourceConfig? = nil,
            retryStrategy: SageMakerClientTypes.RetryStrategy? = nil,
            roleArn: Swift.String? = nil,
            secondaryStatus: SageMakerClientTypes.SecondaryStatus? = nil,
            secondaryStatusTransitions: [SageMakerClientTypes.SecondaryStatusTransition]? = nil,
            stoppingCondition: SageMakerClientTypes.StoppingCondition? = nil,
            tags: [SageMakerClientTypes.Tag]? = nil,
            tensorBoardOutputConfig: SageMakerClientTypes.TensorBoardOutputConfig? = nil,
            trainingEndTime: ClientRuntime.Date? = nil,
            trainingJobArn: Swift.String? = nil,
            trainingJobName: Swift.String? = nil,
            trainingJobStatus: SageMakerClientTypes.TrainingJobStatus? = nil,
            trainingStartTime: ClientRuntime.Date? = nil,
            trainingTimeInSeconds: Swift.Int? = nil,
            tuningJobArn: Swift.String? = nil,
            vpcConfig: SageMakerClientTypes.VpcConfig? = nil
        )
        {
            self.algorithmSpecification = algorithmSpecification
            self.autoMLJobArn = autoMLJobArn
            self.billableTimeInSeconds = billableTimeInSeconds
            self.checkpointConfig = checkpointConfig
            self.creationTime = creationTime
            self.debugHookConfig = debugHookConfig
            self.debugRuleConfigurations = debugRuleConfigurations
            self.debugRuleEvaluationStatuses = debugRuleEvaluationStatuses
            self.enableInterContainerTrafficEncryption = enableInterContainerTrafficEncryption
            self.enableManagedSpotTraining = enableManagedSpotTraining
            self.enableNetworkIsolation = enableNetworkIsolation
            self.environment = environment
            self.experimentConfig = experimentConfig
            self.failureReason = failureReason
            self.finalMetricDataList = finalMetricDataList
            self.hyperParameters = hyperParameters
            self.inputDataConfig = inputDataConfig
            self.labelingJobArn = labelingJobArn
            self.lastModifiedTime = lastModifiedTime
            self.modelArtifacts = modelArtifacts
            self.outputDataConfig = outputDataConfig
            self.resourceConfig = resourceConfig
            self.retryStrategy = retryStrategy
            self.roleArn = roleArn
            self.secondaryStatus = secondaryStatus
            self.secondaryStatusTransitions = secondaryStatusTransitions
            self.stoppingCondition = stoppingCondition
            self.tags = tags
            self.tensorBoardOutputConfig = tensorBoardOutputConfig
            self.trainingEndTime = trainingEndTime
            self.trainingJobArn = trainingJobArn
            self.trainingJobName = trainingJobName
            self.trainingJobStatus = trainingJobStatus
            self.trainingStartTime = trainingStartTime
            self.trainingTimeInSeconds = trainingTimeInSeconds
            self.tuningJobArn = tuningJobArn
            self.vpcConfig = vpcConfig
        }
    }

}
