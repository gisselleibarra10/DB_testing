// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeModelPackageOutputResponseBody: Swift.Equatable {
    let modelPackageName: Swift.String?
    let modelPackageGroupName: Swift.String?
    let modelPackageVersion: Swift.Int?
    let modelPackageArn: Swift.String?
    let modelPackageDescription: Swift.String?
    let creationTime: ClientRuntime.Date?
    let inferenceSpecification: SageMakerClientTypes.InferenceSpecification?
    let sourceAlgorithmSpecification: SageMakerClientTypes.SourceAlgorithmSpecification?
    let validationSpecification: SageMakerClientTypes.ModelPackageValidationSpecification?
    let modelPackageStatus: SageMakerClientTypes.ModelPackageStatus?
    let modelPackageStatusDetails: SageMakerClientTypes.ModelPackageStatusDetails?
    let certifyForMarketplace: Swift.Bool
    let modelApprovalStatus: SageMakerClientTypes.ModelApprovalStatus?
    let createdBy: SageMakerClientTypes.UserContext?
    let metadataProperties: SageMakerClientTypes.MetadataProperties?
    let modelMetrics: SageMakerClientTypes.ModelMetrics?
    let lastModifiedTime: ClientRuntime.Date?
    let lastModifiedBy: SageMakerClientTypes.UserContext?
    let approvalDescription: Swift.String?
    let customerMetadataProperties: [Swift.String:Swift.String]?
    let driftCheckBaselines: SageMakerClientTypes.DriftCheckBaselines?
    let domain: Swift.String?
    let task: Swift.String?
    let samplePayloadUrl: Swift.String?
    let additionalInferenceSpecifications: [SageMakerClientTypes.AdditionalInferenceSpecificationDefinition]?
}

extension DescribeModelPackageOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case additionalInferenceSpecifications = "AdditionalInferenceSpecifications"
        case approvalDescription = "ApprovalDescription"
        case certifyForMarketplace = "CertifyForMarketplace"
        case createdBy = "CreatedBy"
        case creationTime = "CreationTime"
        case customerMetadataProperties = "CustomerMetadataProperties"
        case domain = "Domain"
        case driftCheckBaselines = "DriftCheckBaselines"
        case inferenceSpecification = "InferenceSpecification"
        case lastModifiedBy = "LastModifiedBy"
        case lastModifiedTime = "LastModifiedTime"
        case metadataProperties = "MetadataProperties"
        case modelApprovalStatus = "ModelApprovalStatus"
        case modelMetrics = "ModelMetrics"
        case modelPackageArn = "ModelPackageArn"
        case modelPackageDescription = "ModelPackageDescription"
        case modelPackageGroupName = "ModelPackageGroupName"
        case modelPackageName = "ModelPackageName"
        case modelPackageStatus = "ModelPackageStatus"
        case modelPackageStatusDetails = "ModelPackageStatusDetails"
        case modelPackageVersion = "ModelPackageVersion"
        case samplePayloadUrl = "SamplePayloadUrl"
        case sourceAlgorithmSpecification = "SourceAlgorithmSpecification"
        case task = "Task"
        case validationSpecification = "ValidationSpecification"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let modelPackageNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelPackageName)
        modelPackageName = modelPackageNameDecoded
        let modelPackageGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelPackageGroupName)
        modelPackageGroupName = modelPackageGroupNameDecoded
        let modelPackageVersionDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .modelPackageVersion)
        modelPackageVersion = modelPackageVersionDecoded
        let modelPackageArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelPackageArn)
        modelPackageArn = modelPackageArnDecoded
        let modelPackageDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelPackageDescription)
        modelPackageDescription = modelPackageDescriptionDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let inferenceSpecificationDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.InferenceSpecification.self, forKey: .inferenceSpecification)
        inferenceSpecification = inferenceSpecificationDecoded
        let sourceAlgorithmSpecificationDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.SourceAlgorithmSpecification.self, forKey: .sourceAlgorithmSpecification)
        sourceAlgorithmSpecification = sourceAlgorithmSpecificationDecoded
        let validationSpecificationDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ModelPackageValidationSpecification.self, forKey: .validationSpecification)
        validationSpecification = validationSpecificationDecoded
        let modelPackageStatusDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ModelPackageStatus.self, forKey: .modelPackageStatus)
        modelPackageStatus = modelPackageStatusDecoded
        let modelPackageStatusDetailsDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ModelPackageStatusDetails.self, forKey: .modelPackageStatusDetails)
        modelPackageStatusDetails = modelPackageStatusDetailsDecoded
        let certifyForMarketplaceDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .certifyForMarketplace) ?? false
        certifyForMarketplace = certifyForMarketplaceDecoded
        let modelApprovalStatusDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ModelApprovalStatus.self, forKey: .modelApprovalStatus)
        modelApprovalStatus = modelApprovalStatusDecoded
        let createdByDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.UserContext.self, forKey: .createdBy)
        createdBy = createdByDecoded
        let metadataPropertiesDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.MetadataProperties.self, forKey: .metadataProperties)
        metadataProperties = metadataPropertiesDecoded
        let modelMetricsDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ModelMetrics.self, forKey: .modelMetrics)
        modelMetrics = modelMetricsDecoded
        let lastModifiedTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedTime)
        lastModifiedTime = lastModifiedTimeDecoded
        let lastModifiedByDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.UserContext.self, forKey: .lastModifiedBy)
        lastModifiedBy = lastModifiedByDecoded
        let approvalDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .approvalDescription)
        approvalDescription = approvalDescriptionDecoded
        let customerMetadataPropertiesContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .customerMetadataProperties)
        var customerMetadataPropertiesDecoded0: [Swift.String:Swift.String]? = nil
        if let customerMetadataPropertiesContainer = customerMetadataPropertiesContainer {
            customerMetadataPropertiesDecoded0 = [Swift.String:Swift.String]()
            for (key0, customermetadatavalue0) in customerMetadataPropertiesContainer {
                if let customermetadatavalue0 = customermetadatavalue0 {
                    customerMetadataPropertiesDecoded0?[key0] = customermetadatavalue0
                }
            }
        }
        customerMetadataProperties = customerMetadataPropertiesDecoded0
        let driftCheckBaselinesDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.DriftCheckBaselines.self, forKey: .driftCheckBaselines)
        driftCheckBaselines = driftCheckBaselinesDecoded
        let domainDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domain)
        domain = domainDecoded
        let taskDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .task)
        task = taskDecoded
        let samplePayloadUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .samplePayloadUrl)
        samplePayloadUrl = samplePayloadUrlDecoded
        let additionalInferenceSpecificationsContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.AdditionalInferenceSpecificationDefinition?].self, forKey: .additionalInferenceSpecifications)
        var additionalInferenceSpecificationsDecoded0:[SageMakerClientTypes.AdditionalInferenceSpecificationDefinition]? = nil
        if let additionalInferenceSpecificationsContainer = additionalInferenceSpecificationsContainer {
            additionalInferenceSpecificationsDecoded0 = [SageMakerClientTypes.AdditionalInferenceSpecificationDefinition]()
            for structure0 in additionalInferenceSpecificationsContainer {
                if let structure0 = structure0 {
                    additionalInferenceSpecificationsDecoded0?.append(structure0)
                }
            }
        }
        additionalInferenceSpecifications = additionalInferenceSpecificationsDecoded0
    }
}
