// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SageMakerClientTypes.MonitoringSchedule: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTime = "CreationTime"
        case endpointName = "EndpointName"
        case failureReason = "FailureReason"
        case lastModifiedTime = "LastModifiedTime"
        case lastMonitoringExecutionSummary = "LastMonitoringExecutionSummary"
        case monitoringScheduleArn = "MonitoringScheduleArn"
        case monitoringScheduleConfig = "MonitoringScheduleConfig"
        case monitoringScheduleName = "MonitoringScheduleName"
        case monitoringScheduleStatus = "MonitoringScheduleStatus"
        case monitoringType = "MonitoringType"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationTime = self.creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let endpointName = self.endpointName {
            try encodeContainer.encode(endpointName, forKey: .endpointName)
        }
        if let failureReason = self.failureReason {
            try encodeContainer.encode(failureReason, forKey: .failureReason)
        }
        if let lastModifiedTime = self.lastModifiedTime {
            try encodeContainer.encode(lastModifiedTime.timeIntervalSince1970, forKey: .lastModifiedTime)
        }
        if let lastMonitoringExecutionSummary = self.lastMonitoringExecutionSummary {
            try encodeContainer.encode(lastMonitoringExecutionSummary, forKey: .lastMonitoringExecutionSummary)
        }
        if let monitoringScheduleArn = self.monitoringScheduleArn {
            try encodeContainer.encode(monitoringScheduleArn, forKey: .monitoringScheduleArn)
        }
        if let monitoringScheduleConfig = self.monitoringScheduleConfig {
            try encodeContainer.encode(monitoringScheduleConfig, forKey: .monitoringScheduleConfig)
        }
        if let monitoringScheduleName = self.monitoringScheduleName {
            try encodeContainer.encode(monitoringScheduleName, forKey: .monitoringScheduleName)
        }
        if let monitoringScheduleStatus = self.monitoringScheduleStatus {
            try encodeContainer.encode(monitoringScheduleStatus.rawValue, forKey: .monitoringScheduleStatus)
        }
        if let monitoringType = self.monitoringType {
            try encodeContainer.encode(monitoringType.rawValue, forKey: .monitoringType)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let monitoringScheduleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .monitoringScheduleArn)
        monitoringScheduleArn = monitoringScheduleArnDecoded
        let monitoringScheduleNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .monitoringScheduleName)
        monitoringScheduleName = monitoringScheduleNameDecoded
        let monitoringScheduleStatusDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ScheduleStatus.self, forKey: .monitoringScheduleStatus)
        monitoringScheduleStatus = monitoringScheduleStatusDecoded
        let monitoringTypeDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.MonitoringType.self, forKey: .monitoringType)
        monitoringType = monitoringTypeDecoded
        let failureReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .failureReason)
        failureReason = failureReasonDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let lastModifiedTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedTime)
        lastModifiedTime = lastModifiedTimeDecoded
        let monitoringScheduleConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.MonitoringScheduleConfig.self, forKey: .monitoringScheduleConfig)
        monitoringScheduleConfig = monitoringScheduleConfigDecoded
        let endpointNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .endpointName)
        endpointName = endpointNameDecoded
        let lastMonitoringExecutionSummaryDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.MonitoringExecutionSummary.self, forKey: .lastMonitoringExecutionSummary)
        lastMonitoringExecutionSummary = lastMonitoringExecutionSummaryDecoded
        let tagsContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[SageMakerClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [SageMakerClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}
