// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct UpdateNotebookInstanceInputBody: Swift.Equatable {
    let notebookInstanceName: Swift.String?
    let instanceType: SageMakerClientTypes.InstanceType?
    let roleArn: Swift.String?
    let lifecycleConfigName: Swift.String?
    let disassociateLifecycleConfig: Swift.Bool
    let volumeSizeInGB: Swift.Int?
    let defaultCodeRepository: Swift.String?
    let additionalCodeRepositories: [Swift.String]?
    let acceleratorTypes: [SageMakerClientTypes.NotebookInstanceAcceleratorType]?
    let disassociateAcceleratorTypes: Swift.Bool
    let disassociateDefaultCodeRepository: Swift.Bool
    let disassociateAdditionalCodeRepositories: Swift.Bool
    let rootAccess: SageMakerClientTypes.RootAccess?
    let instanceMetadataServiceConfiguration: SageMakerClientTypes.InstanceMetadataServiceConfiguration?
}

extension UpdateNotebookInstanceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case acceleratorTypes = "AcceleratorTypes"
        case additionalCodeRepositories = "AdditionalCodeRepositories"
        case defaultCodeRepository = "DefaultCodeRepository"
        case disassociateAcceleratorTypes = "DisassociateAcceleratorTypes"
        case disassociateAdditionalCodeRepositories = "DisassociateAdditionalCodeRepositories"
        case disassociateDefaultCodeRepository = "DisassociateDefaultCodeRepository"
        case disassociateLifecycleConfig = "DisassociateLifecycleConfig"
        case instanceMetadataServiceConfiguration = "InstanceMetadataServiceConfiguration"
        case instanceType = "InstanceType"
        case lifecycleConfigName = "LifecycleConfigName"
        case notebookInstanceName = "NotebookInstanceName"
        case roleArn = "RoleArn"
        case rootAccess = "RootAccess"
        case volumeSizeInGB = "VolumeSizeInGB"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let notebookInstanceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .notebookInstanceName)
        notebookInstanceName = notebookInstanceNameDecoded
        let instanceTypeDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.InstanceType.self, forKey: .instanceType)
        instanceType = instanceTypeDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let lifecycleConfigNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lifecycleConfigName)
        lifecycleConfigName = lifecycleConfigNameDecoded
        let disassociateLifecycleConfigDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .disassociateLifecycleConfig) ?? false
        disassociateLifecycleConfig = disassociateLifecycleConfigDecoded
        let volumeSizeInGBDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .volumeSizeInGB)
        volumeSizeInGB = volumeSizeInGBDecoded
        let defaultCodeRepositoryDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .defaultCodeRepository)
        defaultCodeRepository = defaultCodeRepositoryDecoded
        let additionalCodeRepositoriesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .additionalCodeRepositories)
        var additionalCodeRepositoriesDecoded0:[Swift.String]? = nil
        if let additionalCodeRepositoriesContainer = additionalCodeRepositoriesContainer {
            additionalCodeRepositoriesDecoded0 = [Swift.String]()
            for string0 in additionalCodeRepositoriesContainer {
                if let string0 = string0 {
                    additionalCodeRepositoriesDecoded0?.append(string0)
                }
            }
        }
        additionalCodeRepositories = additionalCodeRepositoriesDecoded0
        let acceleratorTypesContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.NotebookInstanceAcceleratorType?].self, forKey: .acceleratorTypes)
        var acceleratorTypesDecoded0:[SageMakerClientTypes.NotebookInstanceAcceleratorType]? = nil
        if let acceleratorTypesContainer = acceleratorTypesContainer {
            acceleratorTypesDecoded0 = [SageMakerClientTypes.NotebookInstanceAcceleratorType]()
            for enum0 in acceleratorTypesContainer {
                if let enum0 = enum0 {
                    acceleratorTypesDecoded0?.append(enum0)
                }
            }
        }
        acceleratorTypes = acceleratorTypesDecoded0
        let disassociateAcceleratorTypesDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .disassociateAcceleratorTypes) ?? false
        disassociateAcceleratorTypes = disassociateAcceleratorTypesDecoded
        let disassociateDefaultCodeRepositoryDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .disassociateDefaultCodeRepository) ?? false
        disassociateDefaultCodeRepository = disassociateDefaultCodeRepositoryDecoded
        let disassociateAdditionalCodeRepositoriesDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .disassociateAdditionalCodeRepositories) ?? false
        disassociateAdditionalCodeRepositories = disassociateAdditionalCodeRepositoriesDecoded
        let rootAccessDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.RootAccess.self, forKey: .rootAccess)
        rootAccess = rootAccessDecoded
        let instanceMetadataServiceConfigurationDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.InstanceMetadataServiceConfiguration.self, forKey: .instanceMetadataServiceConfiguration)
        instanceMetadataServiceConfiguration = instanceMetadataServiceConfigurationDecoded
    }
}
