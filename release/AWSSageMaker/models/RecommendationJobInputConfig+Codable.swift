// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SageMakerClientTypes.RecommendationJobInputConfig: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case containerConfig = "ContainerConfig"
        case endpointConfigurations = "EndpointConfigurations"
        case jobDurationInSeconds = "JobDurationInSeconds"
        case modelPackageVersionArn = "ModelPackageVersionArn"
        case resourceLimit = "ResourceLimit"
        case trafficPattern = "TrafficPattern"
        case volumeKmsKeyId = "VolumeKmsKeyId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let containerConfig = self.containerConfig {
            try encodeContainer.encode(containerConfig, forKey: .containerConfig)
        }
        if let endpointConfigurations = endpointConfigurations {
            var endpointConfigurationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .endpointConfigurations)
            for endpointinputconfigurations0 in endpointConfigurations {
                try endpointConfigurationsContainer.encode(endpointinputconfigurations0)
            }
        }
        if let jobDurationInSeconds = self.jobDurationInSeconds {
            try encodeContainer.encode(jobDurationInSeconds, forKey: .jobDurationInSeconds)
        }
        if let modelPackageVersionArn = self.modelPackageVersionArn {
            try encodeContainer.encode(modelPackageVersionArn, forKey: .modelPackageVersionArn)
        }
        if let resourceLimit = self.resourceLimit {
            try encodeContainer.encode(resourceLimit, forKey: .resourceLimit)
        }
        if let trafficPattern = self.trafficPattern {
            try encodeContainer.encode(trafficPattern, forKey: .trafficPattern)
        }
        if let volumeKmsKeyId = self.volumeKmsKeyId {
            try encodeContainer.encode(volumeKmsKeyId, forKey: .volumeKmsKeyId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let modelPackageVersionArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelPackageVersionArn)
        modelPackageVersionArn = modelPackageVersionArnDecoded
        let jobDurationInSecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .jobDurationInSeconds)
        jobDurationInSeconds = jobDurationInSecondsDecoded
        let trafficPatternDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.TrafficPattern.self, forKey: .trafficPattern)
        trafficPattern = trafficPatternDecoded
        let resourceLimitDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.RecommendationJobResourceLimit.self, forKey: .resourceLimit)
        resourceLimit = resourceLimitDecoded
        let endpointConfigurationsContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.EndpointInputConfiguration?].self, forKey: .endpointConfigurations)
        var endpointConfigurationsDecoded0:[SageMakerClientTypes.EndpointInputConfiguration]? = nil
        if let endpointConfigurationsContainer = endpointConfigurationsContainer {
            endpointConfigurationsDecoded0 = [SageMakerClientTypes.EndpointInputConfiguration]()
            for structure0 in endpointConfigurationsContainer {
                if let structure0 = structure0 {
                    endpointConfigurationsDecoded0?.append(structure0)
                }
            }
        }
        endpointConfigurations = endpointConfigurationsDecoded0
        let volumeKmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .volumeKmsKeyId)
        volumeKmsKeyId = volumeKmsKeyIdDecoded
        let containerConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.RecommendationJobContainerConfig.self, forKey: .containerConfig)
        containerConfig = containerConfigDecoded
    }
}
