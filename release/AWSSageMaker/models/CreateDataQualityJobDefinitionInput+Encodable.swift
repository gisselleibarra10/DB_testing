// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CreateDataQualityJobDefinitionInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dataQualityAppSpecification = "DataQualityAppSpecification"
        case dataQualityBaselineConfig = "DataQualityBaselineConfig"
        case dataQualityJobInput = "DataQualityJobInput"
        case dataQualityJobOutputConfig = "DataQualityJobOutputConfig"
        case jobDefinitionName = "JobDefinitionName"
        case jobResources = "JobResources"
        case networkConfig = "NetworkConfig"
        case roleArn = "RoleArn"
        case stoppingCondition = "StoppingCondition"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dataQualityAppSpecification = self.dataQualityAppSpecification {
            try encodeContainer.encode(dataQualityAppSpecification, forKey: .dataQualityAppSpecification)
        }
        if let dataQualityBaselineConfig = self.dataQualityBaselineConfig {
            try encodeContainer.encode(dataQualityBaselineConfig, forKey: .dataQualityBaselineConfig)
        }
        if let dataQualityJobInput = self.dataQualityJobInput {
            try encodeContainer.encode(dataQualityJobInput, forKey: .dataQualityJobInput)
        }
        if let dataQualityJobOutputConfig = self.dataQualityJobOutputConfig {
            try encodeContainer.encode(dataQualityJobOutputConfig, forKey: .dataQualityJobOutputConfig)
        }
        if let jobDefinitionName = self.jobDefinitionName {
            try encodeContainer.encode(jobDefinitionName, forKey: .jobDefinitionName)
        }
        if let jobResources = self.jobResources {
            try encodeContainer.encode(jobResources, forKey: .jobResources)
        }
        if let networkConfig = self.networkConfig {
            try encodeContainer.encode(networkConfig, forKey: .networkConfig)
        }
        if let roleArn = self.roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let stoppingCondition = self.stoppingCondition {
            try encodeContainer.encode(stoppingCondition, forKey: .stoppingCondition)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }
}
