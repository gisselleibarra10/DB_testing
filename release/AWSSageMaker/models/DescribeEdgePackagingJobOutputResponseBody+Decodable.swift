// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeEdgePackagingJobOutputResponseBody: Swift.Equatable {
    let edgePackagingJobArn: Swift.String?
    let edgePackagingJobName: Swift.String?
    let compilationJobName: Swift.String?
    let modelName: Swift.String?
    let modelVersion: Swift.String?
    let roleArn: Swift.String?
    let outputConfig: SageMakerClientTypes.EdgeOutputConfig?
    let resourceKey: Swift.String?
    let edgePackagingJobStatus: SageMakerClientTypes.EdgePackagingJobStatus?
    let edgePackagingJobStatusMessage: Swift.String?
    let creationTime: ClientRuntime.Date?
    let lastModifiedTime: ClientRuntime.Date?
    let modelArtifact: Swift.String?
    let modelSignature: Swift.String?
    let presetDeploymentOutput: SageMakerClientTypes.EdgePresetDeploymentOutput?
}

extension DescribeEdgePackagingJobOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case compilationJobName = "CompilationJobName"
        case creationTime = "CreationTime"
        case edgePackagingJobArn = "EdgePackagingJobArn"
        case edgePackagingJobName = "EdgePackagingJobName"
        case edgePackagingJobStatus = "EdgePackagingJobStatus"
        case edgePackagingJobStatusMessage = "EdgePackagingJobStatusMessage"
        case lastModifiedTime = "LastModifiedTime"
        case modelArtifact = "ModelArtifact"
        case modelName = "ModelName"
        case modelSignature = "ModelSignature"
        case modelVersion = "ModelVersion"
        case outputConfig = "OutputConfig"
        case presetDeploymentOutput = "PresetDeploymentOutput"
        case resourceKey = "ResourceKey"
        case roleArn = "RoleArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let edgePackagingJobArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .edgePackagingJobArn)
        edgePackagingJobArn = edgePackagingJobArnDecoded
        let edgePackagingJobNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .edgePackagingJobName)
        edgePackagingJobName = edgePackagingJobNameDecoded
        let compilationJobNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .compilationJobName)
        compilationJobName = compilationJobNameDecoded
        let modelNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelName)
        modelName = modelNameDecoded
        let modelVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelVersion)
        modelVersion = modelVersionDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let outputConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.EdgeOutputConfig.self, forKey: .outputConfig)
        outputConfig = outputConfigDecoded
        let resourceKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceKey)
        resourceKey = resourceKeyDecoded
        let edgePackagingJobStatusDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.EdgePackagingJobStatus.self, forKey: .edgePackagingJobStatus)
        edgePackagingJobStatus = edgePackagingJobStatusDecoded
        let edgePackagingJobStatusMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .edgePackagingJobStatusMessage)
        edgePackagingJobStatusMessage = edgePackagingJobStatusMessageDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let lastModifiedTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedTime)
        lastModifiedTime = lastModifiedTimeDecoded
        let modelArtifactDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelArtifact)
        modelArtifact = modelArtifactDecoded
        let modelSignatureDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelSignature)
        modelSignature = modelSignatureDecoded
        let presetDeploymentOutputDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.EdgePresetDeploymentOutput.self, forKey: .presetDeploymentOutput)
        presetDeploymentOutput = presetDeploymentOutputDecoded
    }
}
