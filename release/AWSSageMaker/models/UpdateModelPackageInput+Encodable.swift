// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension UpdateModelPackageInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case additionalInferenceSpecificationsToAdd = "AdditionalInferenceSpecificationsToAdd"
        case approvalDescription = "ApprovalDescription"
        case customerMetadataProperties = "CustomerMetadataProperties"
        case customerMetadataPropertiesToRemove = "CustomerMetadataPropertiesToRemove"
        case modelApprovalStatus = "ModelApprovalStatus"
        case modelPackageArn = "ModelPackageArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let additionalInferenceSpecificationsToAdd = additionalInferenceSpecificationsToAdd {
            var additionalInferenceSpecificationsToAddContainer = encodeContainer.nestedUnkeyedContainer(forKey: .additionalInferenceSpecificationsToAdd)
            for additionalinferencespecifications0 in additionalInferenceSpecificationsToAdd {
                try additionalInferenceSpecificationsToAddContainer.encode(additionalinferencespecifications0)
            }
        }
        if let approvalDescription = self.approvalDescription {
            try encodeContainer.encode(approvalDescription, forKey: .approvalDescription)
        }
        if let customerMetadataProperties = customerMetadataProperties {
            var customerMetadataPropertiesContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .customerMetadataProperties)
            for (dictKey0, customermetadatamap0) in customerMetadataProperties {
                try customerMetadataPropertiesContainer.encode(customermetadatamap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let customerMetadataPropertiesToRemove = customerMetadataPropertiesToRemove {
            var customerMetadataPropertiesToRemoveContainer = encodeContainer.nestedUnkeyedContainer(forKey: .customerMetadataPropertiesToRemove)
            for customermetadatakeylist0 in customerMetadataPropertiesToRemove {
                try customerMetadataPropertiesToRemoveContainer.encode(customermetadatakeylist0)
            }
        }
        if let modelApprovalStatus = self.modelApprovalStatus {
            try encodeContainer.encode(modelApprovalStatus.rawValue, forKey: .modelApprovalStatus)
        }
        if let modelPackageArn = self.modelPackageArn {
            try encodeContainer.encode(modelPackageArn, forKey: .modelPackageArn)
        }
    }
}
