// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SageMakerClientTypes.QualityCheckStepMetadata: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case baselineUsedForDriftCheckConstraints = "BaselineUsedForDriftCheckConstraints"
        case baselineUsedForDriftCheckStatistics = "BaselineUsedForDriftCheckStatistics"
        case calculatedBaselineConstraints = "CalculatedBaselineConstraints"
        case calculatedBaselineStatistics = "CalculatedBaselineStatistics"
        case checkJobArn = "CheckJobArn"
        case checkType = "CheckType"
        case modelPackageGroupName = "ModelPackageGroupName"
        case registerNewBaseline = "RegisterNewBaseline"
        case skipCheck = "SkipCheck"
        case violationReport = "ViolationReport"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let baselineUsedForDriftCheckConstraints = self.baselineUsedForDriftCheckConstraints {
            try encodeContainer.encode(baselineUsedForDriftCheckConstraints, forKey: .baselineUsedForDriftCheckConstraints)
        }
        if let baselineUsedForDriftCheckStatistics = self.baselineUsedForDriftCheckStatistics {
            try encodeContainer.encode(baselineUsedForDriftCheckStatistics, forKey: .baselineUsedForDriftCheckStatistics)
        }
        if let calculatedBaselineConstraints = self.calculatedBaselineConstraints {
            try encodeContainer.encode(calculatedBaselineConstraints, forKey: .calculatedBaselineConstraints)
        }
        if let calculatedBaselineStatistics = self.calculatedBaselineStatistics {
            try encodeContainer.encode(calculatedBaselineStatistics, forKey: .calculatedBaselineStatistics)
        }
        if let checkJobArn = self.checkJobArn {
            try encodeContainer.encode(checkJobArn, forKey: .checkJobArn)
        }
        if let checkType = self.checkType {
            try encodeContainer.encode(checkType, forKey: .checkType)
        }
        if let modelPackageGroupName = self.modelPackageGroupName {
            try encodeContainer.encode(modelPackageGroupName, forKey: .modelPackageGroupName)
        }
        if registerNewBaseline != false {
            try encodeContainer.encode(registerNewBaseline, forKey: .registerNewBaseline)
        }
        if skipCheck != false {
            try encodeContainer.encode(skipCheck, forKey: .skipCheck)
        }
        if let violationReport = self.violationReport {
            try encodeContainer.encode(violationReport, forKey: .violationReport)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let checkTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .checkType)
        checkType = checkTypeDecoded
        let baselineUsedForDriftCheckStatisticsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .baselineUsedForDriftCheckStatistics)
        baselineUsedForDriftCheckStatistics = baselineUsedForDriftCheckStatisticsDecoded
        let baselineUsedForDriftCheckConstraintsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .baselineUsedForDriftCheckConstraints)
        baselineUsedForDriftCheckConstraints = baselineUsedForDriftCheckConstraintsDecoded
        let calculatedBaselineStatisticsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .calculatedBaselineStatistics)
        calculatedBaselineStatistics = calculatedBaselineStatisticsDecoded
        let calculatedBaselineConstraintsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .calculatedBaselineConstraints)
        calculatedBaselineConstraints = calculatedBaselineConstraintsDecoded
        let modelPackageGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelPackageGroupName)
        modelPackageGroupName = modelPackageGroupNameDecoded
        let violationReportDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .violationReport)
        violationReport = violationReportDecoded
        let checkJobArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .checkJobArn)
        checkJobArn = checkJobArnDecoded
        let skipCheckDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .skipCheck) ?? false
        skipCheck = skipCheckDecoded
        let registerNewBaselineDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .registerNewBaseline) ?? false
        registerNewBaseline = registerNewBaselineDecoded
    }
}
