// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateDomainInputBody: Swift.Equatable {
    let domainName: Swift.String?
    let authMode: SageMakerClientTypes.AuthMode?
    let defaultUserSettings: SageMakerClientTypes.UserSettings?
    let subnetIds: [Swift.String]?
    let vpcId: Swift.String?
    let tags: [SageMakerClientTypes.Tag]?
    let appNetworkAccessType: SageMakerClientTypes.AppNetworkAccessType?
    let homeEfsFileSystemKmsKeyId: Swift.String?
    let kmsKeyId: Swift.String?
    let appSecurityGroupManagement: SageMakerClientTypes.AppSecurityGroupManagement?
    let domainSettings: SageMakerClientTypes.DomainSettings?
}

extension CreateDomainInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case appNetworkAccessType = "AppNetworkAccessType"
        case appSecurityGroupManagement = "AppSecurityGroupManagement"
        case authMode = "AuthMode"
        case defaultUserSettings = "DefaultUserSettings"
        case domainName = "DomainName"
        case domainSettings = "DomainSettings"
        case homeEfsFileSystemKmsKeyId = "HomeEfsFileSystemKmsKeyId"
        case kmsKeyId = "KmsKeyId"
        case subnetIds = "SubnetIds"
        case tags = "Tags"
        case vpcId = "VpcId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domainName)
        domainName = domainNameDecoded
        let authModeDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.AuthMode.self, forKey: .authMode)
        authMode = authModeDecoded
        let defaultUserSettingsDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.UserSettings.self, forKey: .defaultUserSettings)
        defaultUserSettings = defaultUserSettingsDecoded
        let subnetIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .subnetIds)
        var subnetIdsDecoded0:[Swift.String]? = nil
        if let subnetIdsContainer = subnetIdsContainer {
            subnetIdsDecoded0 = [Swift.String]()
            for string0 in subnetIdsContainer {
                if let string0 = string0 {
                    subnetIdsDecoded0?.append(string0)
                }
            }
        }
        subnetIds = subnetIdsDecoded0
        let vpcIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vpcId)
        vpcId = vpcIdDecoded
        let tagsContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[SageMakerClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [SageMakerClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let appNetworkAccessTypeDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.AppNetworkAccessType.self, forKey: .appNetworkAccessType)
        appNetworkAccessType = appNetworkAccessTypeDecoded
        let homeEfsFileSystemKmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .homeEfsFileSystemKmsKeyId)
        homeEfsFileSystemKmsKeyId = homeEfsFileSystemKmsKeyIdDecoded
        let kmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kmsKeyId)
        kmsKeyId = kmsKeyIdDecoded
        let appSecurityGroupManagementDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.AppSecurityGroupManagement.self, forKey: .appSecurityGroupManagement)
        appSecurityGroupManagement = appSecurityGroupManagementDecoded
        let domainSettingsDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.DomainSettings.self, forKey: .domainSettings)
        domainSettings = domainSettingsDecoded
    }
}
