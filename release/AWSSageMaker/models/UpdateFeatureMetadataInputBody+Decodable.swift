// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct UpdateFeatureMetadataInputBody: Swift.Equatable {
    let featureGroupName: Swift.String?
    let featureName: Swift.String?
    let description: Swift.String?
    let parameterAdditions: [SageMakerClientTypes.FeatureParameter]?
    let parameterRemovals: [Swift.String]?
}

extension UpdateFeatureMetadataInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description = "Description"
        case featureGroupName = "FeatureGroupName"
        case featureName = "FeatureName"
        case parameterAdditions = "ParameterAdditions"
        case parameterRemovals = "ParameterRemovals"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let featureGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .featureGroupName)
        featureGroupName = featureGroupNameDecoded
        let featureNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .featureName)
        featureName = featureNameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let parameterAdditionsContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.FeatureParameter?].self, forKey: .parameterAdditions)
        var parameterAdditionsDecoded0:[SageMakerClientTypes.FeatureParameter]? = nil
        if let parameterAdditionsContainer = parameterAdditionsContainer {
            parameterAdditionsDecoded0 = [SageMakerClientTypes.FeatureParameter]()
            for structure0 in parameterAdditionsContainer {
                if let structure0 = structure0 {
                    parameterAdditionsDecoded0?.append(structure0)
                }
            }
        }
        parameterAdditions = parameterAdditionsDecoded0
        let parameterRemovalsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .parameterRemovals)
        var parameterRemovalsDecoded0:[Swift.String]? = nil
        if let parameterRemovalsContainer = parameterRemovalsContainer {
            parameterRemovalsDecoded0 = [Swift.String]()
            for string0 in parameterRemovalsContainer {
                if let string0 = string0 {
                    parameterRemovalsDecoded0?.append(string0)
                }
            }
        }
        parameterRemovals = parameterRemovalsDecoded0
    }
}
