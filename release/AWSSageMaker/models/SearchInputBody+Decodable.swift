// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct SearchInputBody: Swift.Equatable {
    let resource: SageMakerClientTypes.ResourceType?
    let searchExpression: SageMakerClientTypes.SearchExpression?
    let sortBy: Swift.String?
    let sortOrder: SageMakerClientTypes.SearchSortOrder?
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
}

extension SearchInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case resource = "Resource"
        case searchExpression = "SearchExpression"
        case sortBy = "SortBy"
        case sortOrder = "SortOrder"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ResourceType.self, forKey: .resource)
        resource = resourceDecoded
        let searchExpressionDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.SearchExpression.self, forKey: .searchExpression)
        searchExpression = searchExpressionDecoded
        let sortByDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sortBy)
        sortBy = sortByDecoded
        let sortOrderDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.SearchSortOrder.self, forKey: .sortOrder)
        sortOrder = sortOrderDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
    }
}
