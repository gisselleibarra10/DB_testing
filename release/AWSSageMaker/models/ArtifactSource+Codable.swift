// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SageMakerClientTypes.ArtifactSource: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case sourceTypes = "SourceTypes"
        case sourceUri = "SourceUri"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let sourceTypes = sourceTypes {
            var sourceTypesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .sourceTypes)
            for artifactsourcetypes0 in sourceTypes {
                try sourceTypesContainer.encode(artifactsourcetypes0)
            }
        }
        if let sourceUri = self.sourceUri {
            try encodeContainer.encode(sourceUri, forKey: .sourceUri)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sourceUriDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceUri)
        sourceUri = sourceUriDecoded
        let sourceTypesContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.ArtifactSourceType?].self, forKey: .sourceTypes)
        var sourceTypesDecoded0:[SageMakerClientTypes.ArtifactSourceType]? = nil
        if let sourceTypesContainer = sourceTypesContainer {
            sourceTypesDecoded0 = [SageMakerClientTypes.ArtifactSourceType]()
            for structure0 in sourceTypesContainer {
                if let structure0 = structure0 {
                    sourceTypesDecoded0?.append(structure0)
                }
            }
        }
        sourceTypes = sourceTypesDecoded0
    }
}
