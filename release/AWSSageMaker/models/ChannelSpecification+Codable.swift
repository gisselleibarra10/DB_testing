// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SageMakerClientTypes.ChannelSpecification: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description = "Description"
        case isRequired = "IsRequired"
        case name = "Name"
        case supportedCompressionTypes = "SupportedCompressionTypes"
        case supportedContentTypes = "SupportedContentTypes"
        case supportedInputModes = "SupportedInputModes"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if isRequired != false {
            try encodeContainer.encode(isRequired, forKey: .isRequired)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let supportedCompressionTypes = supportedCompressionTypes {
            var supportedCompressionTypesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .supportedCompressionTypes)
            for compressiontypes0 in supportedCompressionTypes {
                try supportedCompressionTypesContainer.encode(compressiontypes0.rawValue)
            }
        }
        if let supportedContentTypes = supportedContentTypes {
            var supportedContentTypesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .supportedContentTypes)
            for contenttypes0 in supportedContentTypes {
                try supportedContentTypesContainer.encode(contenttypes0)
            }
        }
        if let supportedInputModes = supportedInputModes {
            var supportedInputModesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .supportedInputModes)
            for inputmodes0 in supportedInputModes {
                try supportedInputModesContainer.encode(inputmodes0.rawValue)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let isRequiredDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .isRequired) ?? false
        isRequired = isRequiredDecoded
        let supportedContentTypesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .supportedContentTypes)
        var supportedContentTypesDecoded0:[Swift.String]? = nil
        if let supportedContentTypesContainer = supportedContentTypesContainer {
            supportedContentTypesDecoded0 = [Swift.String]()
            for string0 in supportedContentTypesContainer {
                if let string0 = string0 {
                    supportedContentTypesDecoded0?.append(string0)
                }
            }
        }
        supportedContentTypes = supportedContentTypesDecoded0
        let supportedCompressionTypesContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.CompressionType?].self, forKey: .supportedCompressionTypes)
        var supportedCompressionTypesDecoded0:[SageMakerClientTypes.CompressionType]? = nil
        if let supportedCompressionTypesContainer = supportedCompressionTypesContainer {
            supportedCompressionTypesDecoded0 = [SageMakerClientTypes.CompressionType]()
            for enum0 in supportedCompressionTypesContainer {
                if let enum0 = enum0 {
                    supportedCompressionTypesDecoded0?.append(enum0)
                }
            }
        }
        supportedCompressionTypes = supportedCompressionTypesDecoded0
        let supportedInputModesContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.TrainingInputMode?].self, forKey: .supportedInputModes)
        var supportedInputModesDecoded0:[SageMakerClientTypes.TrainingInputMode]? = nil
        if let supportedInputModesContainer = supportedInputModesContainer {
            supportedInputModesDecoded0 = [SageMakerClientTypes.TrainingInputMode]()
            for enum0 in supportedInputModesContainer {
                if let enum0 = enum0 {
                    supportedInputModesDecoded0?.append(enum0)
                }
            }
        }
        supportedInputModes = supportedInputModesDecoded0
    }
}
