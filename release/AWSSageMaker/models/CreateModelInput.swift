// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct CreateModelInput: Swift.Equatable {
    /// Specifies the containers in the inference pipeline.
    public var containers: [SageMakerClientTypes.ContainerDefinition]?
    /// Isolates the model container. No inbound or outbound network calls can be made to or from the model container.
    public var enableNetworkIsolation: Swift.Bool
    /// The Amazon Resource Name (ARN) of the IAM role that SageMaker can assume to access model artifacts and docker image for deployment on ML compute instances or for batch transform jobs. Deploying on ML compute instances is part of model hosting. For more information, see [SageMaker Roles](https://docs.aws.amazon.com/sagemaker/latest/dg/sagemaker-roles.html). To be able to pass this role to SageMaker, the caller of this API must have the iam:PassRole permission.
    /// This member is required.
    public var executionRoleArn: Swift.String?
    /// Specifies details of how containers in a multi-container endpoint are called.
    public var inferenceExecutionConfig: SageMakerClientTypes.InferenceExecutionConfig?
    /// The name of the new model.
    /// This member is required.
    public var modelName: Swift.String?
    /// The location of the primary docker image containing inference code, associated artifacts, and custom environment map that the inference code uses when the model is deployed for predictions.
    public var primaryContainer: SageMakerClientTypes.ContainerDefinition?
    /// An array of key-value pairs. You can use tags to categorize your Amazon Web Services resources in different ways, for example, by purpose, owner, or environment. For more information, see [Tagging Amazon Web Services Resources](https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html).
    public var tags: [SageMakerClientTypes.Tag]?
    /// A [VpcConfig] object that specifies the VPC that you want your model to connect to. Control access to and from your model container by configuring the VPC. VpcConfig is used in hosting services and in batch transform. For more information, see [Protect Endpoints by Using an Amazon Virtual Private Cloud](https://docs.aws.amazon.com/sagemaker/latest/dg/host-vpc.html) and [Protect Data in Batch Transform Jobs by Using an Amazon Virtual Private Cloud](https://docs.aws.amazon.com/sagemaker/latest/dg/batch-vpc.html).
    public var vpcConfig: SageMakerClientTypes.VpcConfig?

    public init (
        containers: [SageMakerClientTypes.ContainerDefinition]? = nil,
        enableNetworkIsolation: Swift.Bool = false,
        executionRoleArn: Swift.String? = nil,
        inferenceExecutionConfig: SageMakerClientTypes.InferenceExecutionConfig? = nil,
        modelName: Swift.String? = nil,
        primaryContainer: SageMakerClientTypes.ContainerDefinition? = nil,
        tags: [SageMakerClientTypes.Tag]? = nil,
        vpcConfig: SageMakerClientTypes.VpcConfig? = nil
    )
    {
        self.containers = containers
        self.enableNetworkIsolation = enableNetworkIsolation
        self.executionRoleArn = executionRoleArn
        self.inferenceExecutionConfig = inferenceExecutionConfig
        self.modelName = modelName
        self.primaryContainer = primaryContainer
        self.tags = tags
        self.vpcConfig = vpcConfig
    }
}
