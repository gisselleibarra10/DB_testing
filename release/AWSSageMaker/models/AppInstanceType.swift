// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension SageMakerClientTypes {
    public enum AppInstanceType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case mlC512xlarge
        case mlC518xlarge
        case mlC524xlarge
        case mlC52xlarge
        case mlC54xlarge
        case mlC59xlarge
        case mlC5Large
        case mlC5Xlarge
        case mlG4dn12xlarge
        case mlG4dn16xlarge
        case mlG4dn2xlarge
        case mlG4dn4xlarge
        case mlG4dn8xlarge
        case mlG4dnXlarge
        case mlG512xlarge
        case mlG516xlarge
        case mlG524xlarge
        case mlG52xlarge
        case mlG548xlarge
        case mlG54xlarge
        case mlG58xlarge
        case mlG5Xlarge
        case mlM5d12xlarge
        case mlM5d16xlarge
        case mlM5d24xlarge
        case mlM5d2xlarge
        case mlM5d4xlarge
        case mlM5d8xlarge
        case mlM5dLarge
        case mlM5dXlarge
        case mlM512xlarge
        case mlM516xlarge
        case mlM524xlarge
        case mlM52xlarge
        case mlM54xlarge
        case mlM58xlarge
        case mlM5Large
        case mlM5Xlarge
        case mlP3dn24xlarge
        case mlP316xlarge
        case mlP32xlarge
        case mlP38xlarge
        case mlR512xlarge
        case mlR516xlarge
        case mlR524xlarge
        case mlR52xlarge
        case mlR54xlarge
        case mlR58xlarge
        case mlR5Large
        case mlR5Xlarge
        case mlT32xlarge
        case mlT3Large
        case mlT3Medium
        case mlT3Micro
        case mlT3Small
        case mlT3Xlarge
        case system
        case sdkUnknown(Swift.String)

        public static var allCases: [AppInstanceType] {
            return [
                .mlC512xlarge,
                .mlC518xlarge,
                .mlC524xlarge,
                .mlC52xlarge,
                .mlC54xlarge,
                .mlC59xlarge,
                .mlC5Large,
                .mlC5Xlarge,
                .mlG4dn12xlarge,
                .mlG4dn16xlarge,
                .mlG4dn2xlarge,
                .mlG4dn4xlarge,
                .mlG4dn8xlarge,
                .mlG4dnXlarge,
                .mlG512xlarge,
                .mlG516xlarge,
                .mlG524xlarge,
                .mlG52xlarge,
                .mlG548xlarge,
                .mlG54xlarge,
                .mlG58xlarge,
                .mlG5Xlarge,
                .mlM5d12xlarge,
                .mlM5d16xlarge,
                .mlM5d24xlarge,
                .mlM5d2xlarge,
                .mlM5d4xlarge,
                .mlM5d8xlarge,
                .mlM5dLarge,
                .mlM5dXlarge,
                .mlM512xlarge,
                .mlM516xlarge,
                .mlM524xlarge,
                .mlM52xlarge,
                .mlM54xlarge,
                .mlM58xlarge,
                .mlM5Large,
                .mlM5Xlarge,
                .mlP3dn24xlarge,
                .mlP316xlarge,
                .mlP32xlarge,
                .mlP38xlarge,
                .mlR512xlarge,
                .mlR516xlarge,
                .mlR524xlarge,
                .mlR52xlarge,
                .mlR54xlarge,
                .mlR58xlarge,
                .mlR5Large,
                .mlR5Xlarge,
                .mlT32xlarge,
                .mlT3Large,
                .mlT3Medium,
                .mlT3Micro,
                .mlT3Small,
                .mlT3Xlarge,
                .system,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .mlC512xlarge: return "ml.c5.12xlarge"
            case .mlC518xlarge: return "ml.c5.18xlarge"
            case .mlC524xlarge: return "ml.c5.24xlarge"
            case .mlC52xlarge: return "ml.c5.2xlarge"
            case .mlC54xlarge: return "ml.c5.4xlarge"
            case .mlC59xlarge: return "ml.c5.9xlarge"
            case .mlC5Large: return "ml.c5.large"
            case .mlC5Xlarge: return "ml.c5.xlarge"
            case .mlG4dn12xlarge: return "ml.g4dn.12xlarge"
            case .mlG4dn16xlarge: return "ml.g4dn.16xlarge"
            case .mlG4dn2xlarge: return "ml.g4dn.2xlarge"
            case .mlG4dn4xlarge: return "ml.g4dn.4xlarge"
            case .mlG4dn8xlarge: return "ml.g4dn.8xlarge"
            case .mlG4dnXlarge: return "ml.g4dn.xlarge"
            case .mlG512xlarge: return "ml.g5.12xlarge"
            case .mlG516xlarge: return "ml.g5.16xlarge"
            case .mlG524xlarge: return "ml.g5.24xlarge"
            case .mlG52xlarge: return "ml.g5.2xlarge"
            case .mlG548xlarge: return "ml.g5.48xlarge"
            case .mlG54xlarge: return "ml.g5.4xlarge"
            case .mlG58xlarge: return "ml.g5.8xlarge"
            case .mlG5Xlarge: return "ml.g5.xlarge"
            case .mlM5d12xlarge: return "ml.m5d.12xlarge"
            case .mlM5d16xlarge: return "ml.m5d.16xlarge"
            case .mlM5d24xlarge: return "ml.m5d.24xlarge"
            case .mlM5d2xlarge: return "ml.m5d.2xlarge"
            case .mlM5d4xlarge: return "ml.m5d.4xlarge"
            case .mlM5d8xlarge: return "ml.m5d.8xlarge"
            case .mlM5dLarge: return "ml.m5d.large"
            case .mlM5dXlarge: return "ml.m5d.xlarge"
            case .mlM512xlarge: return "ml.m5.12xlarge"
            case .mlM516xlarge: return "ml.m5.16xlarge"
            case .mlM524xlarge: return "ml.m5.24xlarge"
            case .mlM52xlarge: return "ml.m5.2xlarge"
            case .mlM54xlarge: return "ml.m5.4xlarge"
            case .mlM58xlarge: return "ml.m5.8xlarge"
            case .mlM5Large: return "ml.m5.large"
            case .mlM5Xlarge: return "ml.m5.xlarge"
            case .mlP3dn24xlarge: return "ml.p3dn.24xlarge"
            case .mlP316xlarge: return "ml.p3.16xlarge"
            case .mlP32xlarge: return "ml.p3.2xlarge"
            case .mlP38xlarge: return "ml.p3.8xlarge"
            case .mlR512xlarge: return "ml.r5.12xlarge"
            case .mlR516xlarge: return "ml.r5.16xlarge"
            case .mlR524xlarge: return "ml.r5.24xlarge"
            case .mlR52xlarge: return "ml.r5.2xlarge"
            case .mlR54xlarge: return "ml.r5.4xlarge"
            case .mlR58xlarge: return "ml.r5.8xlarge"
            case .mlR5Large: return "ml.r5.large"
            case .mlR5Xlarge: return "ml.r5.xlarge"
            case .mlT32xlarge: return "ml.t3.2xlarge"
            case .mlT3Large: return "ml.t3.large"
            case .mlT3Medium: return "ml.t3.medium"
            case .mlT3Micro: return "ml.t3.micro"
            case .mlT3Small: return "ml.t3.small"
            case .mlT3Xlarge: return "ml.t3.xlarge"
            case .system: return "system"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = AppInstanceType(rawValue: rawValue) ?? AppInstanceType.sdkUnknown(rawValue)
        }
    }
}
