// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SageMakerClientTypes.DatasetDefinition: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case athenaDatasetDefinition = "AthenaDatasetDefinition"
        case dataDistributionType = "DataDistributionType"
        case inputMode = "InputMode"
        case localPath = "LocalPath"
        case redshiftDatasetDefinition = "RedshiftDatasetDefinition"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let athenaDatasetDefinition = self.athenaDatasetDefinition {
            try encodeContainer.encode(athenaDatasetDefinition, forKey: .athenaDatasetDefinition)
        }
        if let dataDistributionType = self.dataDistributionType {
            try encodeContainer.encode(dataDistributionType.rawValue, forKey: .dataDistributionType)
        }
        if let inputMode = self.inputMode {
            try encodeContainer.encode(inputMode.rawValue, forKey: .inputMode)
        }
        if let localPath = self.localPath {
            try encodeContainer.encode(localPath, forKey: .localPath)
        }
        if let redshiftDatasetDefinition = self.redshiftDatasetDefinition {
            try encodeContainer.encode(redshiftDatasetDefinition, forKey: .redshiftDatasetDefinition)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let athenaDatasetDefinitionDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.AthenaDatasetDefinition.self, forKey: .athenaDatasetDefinition)
        athenaDatasetDefinition = athenaDatasetDefinitionDecoded
        let redshiftDatasetDefinitionDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.RedshiftDatasetDefinition.self, forKey: .redshiftDatasetDefinition)
        redshiftDatasetDefinition = redshiftDatasetDefinitionDecoded
        let localPathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .localPath)
        localPath = localPathDecoded
        let dataDistributionTypeDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.DataDistributionType.self, forKey: .dataDistributionType)
        dataDistributionType = dataDistributionTypeDecoded
        let inputModeDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.InputMode.self, forKey: .inputMode)
        inputMode = inputModeDecoded
    }
}
