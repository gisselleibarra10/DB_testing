// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SageMakerClientTypes.DomainSettings: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case executionRoleIdentityConfig = "ExecutionRoleIdentityConfig"
        case rStudioServerProDomainSettings = "RStudioServerProDomainSettings"
        case securityGroupIds = "SecurityGroupIds"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let executionRoleIdentityConfig = self.executionRoleIdentityConfig {
            try encodeContainer.encode(executionRoleIdentityConfig.rawValue, forKey: .executionRoleIdentityConfig)
        }
        if let rStudioServerProDomainSettings = self.rStudioServerProDomainSettings {
            try encodeContainer.encode(rStudioServerProDomainSettings, forKey: .rStudioServerProDomainSettings)
        }
        if let securityGroupIds = securityGroupIds {
            var securityGroupIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .securityGroupIds)
            for domainsecuritygroupids0 in securityGroupIds {
                try securityGroupIdsContainer.encode(domainsecuritygroupids0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let securityGroupIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .securityGroupIds)
        var securityGroupIdsDecoded0:[Swift.String]? = nil
        if let securityGroupIdsContainer = securityGroupIdsContainer {
            securityGroupIdsDecoded0 = [Swift.String]()
            for string0 in securityGroupIdsContainer {
                if let string0 = string0 {
                    securityGroupIdsDecoded0?.append(string0)
                }
            }
        }
        securityGroupIds = securityGroupIdsDecoded0
        let rStudioServerProDomainSettingsDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.RStudioServerProDomainSettings.self, forKey: .rStudioServerProDomainSettings)
        rStudioServerProDomainSettings = rStudioServerProDomainSettingsDecoded
        let executionRoleIdentityConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ExecutionRoleIdentityConfig.self, forKey: .executionRoleIdentityConfig)
        executionRoleIdentityConfig = executionRoleIdentityConfigDecoded
    }
}
