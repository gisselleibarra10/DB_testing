// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension SageMakerClientTypes {
    public enum ResourceType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case endpoint
        case experiment
        case experimentTrial
        case experimentTrialComponent
        case featureGroup
        case featureMetadata
        case hyperParameterTuningJob
        case modelPackage
        case modelPackageGroup
        case pipeline
        case pipelineExecution
        case project
        case trainingJob
        case sdkUnknown(Swift.String)

        public static var allCases: [ResourceType] {
            return [
                .endpoint,
                .experiment,
                .experimentTrial,
                .experimentTrialComponent,
                .featureGroup,
                .featureMetadata,
                .hyperParameterTuningJob,
                .modelPackage,
                .modelPackageGroup,
                .pipeline,
                .pipelineExecution,
                .project,
                .trainingJob,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .endpoint: return "Endpoint"
            case .experiment: return "Experiment"
            case .experimentTrial: return "ExperimentTrial"
            case .experimentTrialComponent: return "ExperimentTrialComponent"
            case .featureGroup: return "FeatureGroup"
            case .featureMetadata: return "FeatureMetadata"
            case .hyperParameterTuningJob: return "HyperParameterTuningJob"
            case .modelPackage: return "ModelPackage"
            case .modelPackageGroup: return "ModelPackageGroup"
            case .pipeline: return "Pipeline"
            case .pipelineExecution: return "PipelineExecution"
            case .project: return "Project"
            case .trainingJob: return "TrainingJob"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ResourceType(rawValue: rawValue) ?? ResourceType.sdkUnknown(rawValue)
        }
    }
}
