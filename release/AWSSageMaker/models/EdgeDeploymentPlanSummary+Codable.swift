// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SageMakerClientTypes.EdgeDeploymentPlanSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTime = "CreationTime"
        case deviceFleetName = "DeviceFleetName"
        case edgeDeploymentFailed = "EdgeDeploymentFailed"
        case edgeDeploymentPending = "EdgeDeploymentPending"
        case edgeDeploymentPlanArn = "EdgeDeploymentPlanArn"
        case edgeDeploymentPlanName = "EdgeDeploymentPlanName"
        case edgeDeploymentSuccess = "EdgeDeploymentSuccess"
        case lastModifiedTime = "LastModifiedTime"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationTime = self.creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let deviceFleetName = self.deviceFleetName {
            try encodeContainer.encode(deviceFleetName, forKey: .deviceFleetName)
        }
        if edgeDeploymentFailed != 0 {
            try encodeContainer.encode(edgeDeploymentFailed, forKey: .edgeDeploymentFailed)
        }
        if edgeDeploymentPending != 0 {
            try encodeContainer.encode(edgeDeploymentPending, forKey: .edgeDeploymentPending)
        }
        if let edgeDeploymentPlanArn = self.edgeDeploymentPlanArn {
            try encodeContainer.encode(edgeDeploymentPlanArn, forKey: .edgeDeploymentPlanArn)
        }
        if let edgeDeploymentPlanName = self.edgeDeploymentPlanName {
            try encodeContainer.encode(edgeDeploymentPlanName, forKey: .edgeDeploymentPlanName)
        }
        if edgeDeploymentSuccess != 0 {
            try encodeContainer.encode(edgeDeploymentSuccess, forKey: .edgeDeploymentSuccess)
        }
        if let lastModifiedTime = self.lastModifiedTime {
            try encodeContainer.encode(lastModifiedTime.timeIntervalSince1970, forKey: .lastModifiedTime)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let edgeDeploymentPlanArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .edgeDeploymentPlanArn)
        edgeDeploymentPlanArn = edgeDeploymentPlanArnDecoded
        let edgeDeploymentPlanNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .edgeDeploymentPlanName)
        edgeDeploymentPlanName = edgeDeploymentPlanNameDecoded
        let deviceFleetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deviceFleetName)
        deviceFleetName = deviceFleetNameDecoded
        let edgeDeploymentSuccessDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .edgeDeploymentSuccess) ?? 0
        edgeDeploymentSuccess = edgeDeploymentSuccessDecoded
        let edgeDeploymentPendingDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .edgeDeploymentPending) ?? 0
        edgeDeploymentPending = edgeDeploymentPendingDecoded
        let edgeDeploymentFailedDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .edgeDeploymentFailed) ?? 0
        edgeDeploymentFailed = edgeDeploymentFailedDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let lastModifiedTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedTime)
        lastModifiedTime = lastModifiedTimeDecoded
    }
}
