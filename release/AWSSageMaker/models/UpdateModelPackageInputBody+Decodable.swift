// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct UpdateModelPackageInputBody: Swift.Equatable {
    let modelPackageArn: Swift.String?
    let modelApprovalStatus: SageMakerClientTypes.ModelApprovalStatus?
    let approvalDescription: Swift.String?
    let customerMetadataProperties: [Swift.String:Swift.String]?
    let customerMetadataPropertiesToRemove: [Swift.String]?
    let additionalInferenceSpecificationsToAdd: [SageMakerClientTypes.AdditionalInferenceSpecificationDefinition]?
}

extension UpdateModelPackageInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case additionalInferenceSpecificationsToAdd = "AdditionalInferenceSpecificationsToAdd"
        case approvalDescription = "ApprovalDescription"
        case customerMetadataProperties = "CustomerMetadataProperties"
        case customerMetadataPropertiesToRemove = "CustomerMetadataPropertiesToRemove"
        case modelApprovalStatus = "ModelApprovalStatus"
        case modelPackageArn = "ModelPackageArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let modelPackageArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelPackageArn)
        modelPackageArn = modelPackageArnDecoded
        let modelApprovalStatusDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ModelApprovalStatus.self, forKey: .modelApprovalStatus)
        modelApprovalStatus = modelApprovalStatusDecoded
        let approvalDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .approvalDescription)
        approvalDescription = approvalDescriptionDecoded
        let customerMetadataPropertiesContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .customerMetadataProperties)
        var customerMetadataPropertiesDecoded0: [Swift.String:Swift.String]? = nil
        if let customerMetadataPropertiesContainer = customerMetadataPropertiesContainer {
            customerMetadataPropertiesDecoded0 = [Swift.String:Swift.String]()
            for (key0, customermetadatavalue0) in customerMetadataPropertiesContainer {
                if let customermetadatavalue0 = customermetadatavalue0 {
                    customerMetadataPropertiesDecoded0?[key0] = customermetadatavalue0
                }
            }
        }
        customerMetadataProperties = customerMetadataPropertiesDecoded0
        let customerMetadataPropertiesToRemoveContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .customerMetadataPropertiesToRemove)
        var customerMetadataPropertiesToRemoveDecoded0:[Swift.String]? = nil
        if let customerMetadataPropertiesToRemoveContainer = customerMetadataPropertiesToRemoveContainer {
            customerMetadataPropertiesToRemoveDecoded0 = [Swift.String]()
            for string0 in customerMetadataPropertiesToRemoveContainer {
                if let string0 = string0 {
                    customerMetadataPropertiesToRemoveDecoded0?.append(string0)
                }
            }
        }
        customerMetadataPropertiesToRemove = customerMetadataPropertiesToRemoveDecoded0
        let additionalInferenceSpecificationsToAddContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.AdditionalInferenceSpecificationDefinition?].self, forKey: .additionalInferenceSpecificationsToAdd)
        var additionalInferenceSpecificationsToAddDecoded0:[SageMakerClientTypes.AdditionalInferenceSpecificationDefinition]? = nil
        if let additionalInferenceSpecificationsToAddContainer = additionalInferenceSpecificationsToAddContainer {
            additionalInferenceSpecificationsToAddDecoded0 = [SageMakerClientTypes.AdditionalInferenceSpecificationDefinition]()
            for structure0 in additionalInferenceSpecificationsToAddContainer {
                if let structure0 = structure0 {
                    additionalInferenceSpecificationsToAddDecoded0?.append(structure0)
                }
            }
        }
        additionalInferenceSpecificationsToAdd = additionalInferenceSpecificationsToAddDecoded0
    }
}
