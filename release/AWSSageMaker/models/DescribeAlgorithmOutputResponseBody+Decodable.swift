// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeAlgorithmOutputResponseBody: Swift.Equatable {
    let algorithmName: Swift.String?
    let algorithmArn: Swift.String?
    let algorithmDescription: Swift.String?
    let creationTime: ClientRuntime.Date?
    let trainingSpecification: SageMakerClientTypes.TrainingSpecification?
    let inferenceSpecification: SageMakerClientTypes.InferenceSpecification?
    let validationSpecification: SageMakerClientTypes.AlgorithmValidationSpecification?
    let algorithmStatus: SageMakerClientTypes.AlgorithmStatus?
    let algorithmStatusDetails: SageMakerClientTypes.AlgorithmStatusDetails?
    let productId: Swift.String?
    let certifyForMarketplace: Swift.Bool
}

extension DescribeAlgorithmOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case algorithmArn = "AlgorithmArn"
        case algorithmDescription = "AlgorithmDescription"
        case algorithmName = "AlgorithmName"
        case algorithmStatus = "AlgorithmStatus"
        case algorithmStatusDetails = "AlgorithmStatusDetails"
        case certifyForMarketplace = "CertifyForMarketplace"
        case creationTime = "CreationTime"
        case inferenceSpecification = "InferenceSpecification"
        case productId = "ProductId"
        case trainingSpecification = "TrainingSpecification"
        case validationSpecification = "ValidationSpecification"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let algorithmNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .algorithmName)
        algorithmName = algorithmNameDecoded
        let algorithmArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .algorithmArn)
        algorithmArn = algorithmArnDecoded
        let algorithmDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .algorithmDescription)
        algorithmDescription = algorithmDescriptionDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let trainingSpecificationDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.TrainingSpecification.self, forKey: .trainingSpecification)
        trainingSpecification = trainingSpecificationDecoded
        let inferenceSpecificationDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.InferenceSpecification.self, forKey: .inferenceSpecification)
        inferenceSpecification = inferenceSpecificationDecoded
        let validationSpecificationDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.AlgorithmValidationSpecification.self, forKey: .validationSpecification)
        validationSpecification = validationSpecificationDecoded
        let algorithmStatusDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.AlgorithmStatus.self, forKey: .algorithmStatus)
        algorithmStatus = algorithmStatusDecoded
        let algorithmStatusDetailsDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.AlgorithmStatusDetails.self, forKey: .algorithmStatusDetails)
        algorithmStatusDetails = algorithmStatusDetailsDecoded
        let productIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .productId)
        productId = productIdDecoded
        let certifyForMarketplaceDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .certifyForMarketplace) ?? false
        certifyForMarketplace = certifyForMarketplaceDecoded
    }
}
