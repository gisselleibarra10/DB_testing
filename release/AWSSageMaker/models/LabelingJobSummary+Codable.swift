// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SageMakerClientTypes.LabelingJobSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case annotationConsolidationLambdaArn = "AnnotationConsolidationLambdaArn"
        case creationTime = "CreationTime"
        case failureReason = "FailureReason"
        case inputConfig = "InputConfig"
        case labelCounters = "LabelCounters"
        case labelingJobArn = "LabelingJobArn"
        case labelingJobName = "LabelingJobName"
        case labelingJobOutput = "LabelingJobOutput"
        case labelingJobStatus = "LabelingJobStatus"
        case lastModifiedTime = "LastModifiedTime"
        case preHumanTaskLambdaArn = "PreHumanTaskLambdaArn"
        case workteamArn = "WorkteamArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let annotationConsolidationLambdaArn = self.annotationConsolidationLambdaArn {
            try encodeContainer.encode(annotationConsolidationLambdaArn, forKey: .annotationConsolidationLambdaArn)
        }
        if let creationTime = self.creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let failureReason = self.failureReason {
            try encodeContainer.encode(failureReason, forKey: .failureReason)
        }
        if let inputConfig = self.inputConfig {
            try encodeContainer.encode(inputConfig, forKey: .inputConfig)
        }
        if let labelCounters = self.labelCounters {
            try encodeContainer.encode(labelCounters, forKey: .labelCounters)
        }
        if let labelingJobArn = self.labelingJobArn {
            try encodeContainer.encode(labelingJobArn, forKey: .labelingJobArn)
        }
        if let labelingJobName = self.labelingJobName {
            try encodeContainer.encode(labelingJobName, forKey: .labelingJobName)
        }
        if let labelingJobOutput = self.labelingJobOutput {
            try encodeContainer.encode(labelingJobOutput, forKey: .labelingJobOutput)
        }
        if let labelingJobStatus = self.labelingJobStatus {
            try encodeContainer.encode(labelingJobStatus.rawValue, forKey: .labelingJobStatus)
        }
        if let lastModifiedTime = self.lastModifiedTime {
            try encodeContainer.encode(lastModifiedTime.timeIntervalSince1970, forKey: .lastModifiedTime)
        }
        if let preHumanTaskLambdaArn = self.preHumanTaskLambdaArn {
            try encodeContainer.encode(preHumanTaskLambdaArn, forKey: .preHumanTaskLambdaArn)
        }
        if let workteamArn = self.workteamArn {
            try encodeContainer.encode(workteamArn, forKey: .workteamArn)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let labelingJobNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .labelingJobName)
        labelingJobName = labelingJobNameDecoded
        let labelingJobArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .labelingJobArn)
        labelingJobArn = labelingJobArnDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let lastModifiedTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedTime)
        lastModifiedTime = lastModifiedTimeDecoded
        let labelingJobStatusDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.LabelingJobStatus.self, forKey: .labelingJobStatus)
        labelingJobStatus = labelingJobStatusDecoded
        let labelCountersDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.LabelCounters.self, forKey: .labelCounters)
        labelCounters = labelCountersDecoded
        let workteamArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .workteamArn)
        workteamArn = workteamArnDecoded
        let preHumanTaskLambdaArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .preHumanTaskLambdaArn)
        preHumanTaskLambdaArn = preHumanTaskLambdaArnDecoded
        let annotationConsolidationLambdaArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .annotationConsolidationLambdaArn)
        annotationConsolidationLambdaArn = annotationConsolidationLambdaArnDecoded
        let failureReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .failureReason)
        failureReason = failureReasonDecoded
        let labelingJobOutputDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.LabelingJobOutput.self, forKey: .labelingJobOutput)
        labelingJobOutput = labelingJobOutputDecoded
        let inputConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.LabelingJobInputConfig.self, forKey: .inputConfig)
        inputConfig = inputConfigDecoded
    }
}
