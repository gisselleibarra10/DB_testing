// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateNotebookInstanceLifecycleConfigInputBody: Swift.Equatable {
    let notebookInstanceLifecycleConfigName: Swift.String?
    let onCreate: [SageMakerClientTypes.NotebookInstanceLifecycleHook]?
    let onStart: [SageMakerClientTypes.NotebookInstanceLifecycleHook]?
}

extension CreateNotebookInstanceLifecycleConfigInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case notebookInstanceLifecycleConfigName = "NotebookInstanceLifecycleConfigName"
        case onCreate = "OnCreate"
        case onStart = "OnStart"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let notebookInstanceLifecycleConfigNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .notebookInstanceLifecycleConfigName)
        notebookInstanceLifecycleConfigName = notebookInstanceLifecycleConfigNameDecoded
        let onCreateContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.NotebookInstanceLifecycleHook?].self, forKey: .onCreate)
        var onCreateDecoded0:[SageMakerClientTypes.NotebookInstanceLifecycleHook]? = nil
        if let onCreateContainer = onCreateContainer {
            onCreateDecoded0 = [SageMakerClientTypes.NotebookInstanceLifecycleHook]()
            for structure0 in onCreateContainer {
                if let structure0 = structure0 {
                    onCreateDecoded0?.append(structure0)
                }
            }
        }
        onCreate = onCreateDecoded0
        let onStartContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.NotebookInstanceLifecycleHook?].self, forKey: .onStart)
        var onStartDecoded0:[SageMakerClientTypes.NotebookInstanceLifecycleHook]? = nil
        if let onStartContainer = onStartContainer {
            onStartDecoded0 = [SageMakerClientTypes.NotebookInstanceLifecycleHook]()
            for structure0 in onStartContainer {
                if let structure0 = structure0 {
                    onStartDecoded0?.append(structure0)
                }
            }
        }
        onStart = onStartDecoded0
    }
}
