// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension SageMakerClientTypes {
    /// A collection of settings that apply to users of Amazon SageMaker Studio. These settings are specified when the CreateUserProfile API is called, and as DefaultUserSettings when the CreateDomain API is called. SecurityGroups is aggregated when specified in both calls. For all other settings in UserSettings, the values specified in CreateUserProfile take precedence over those specified in CreateDomain.
    public struct UserSettings: Swift.Equatable {
        /// The Canvas app settings.
        public var canvasAppSettings: SageMakerClientTypes.CanvasAppSettings?
        /// The execution role for the user.
        public var executionRole: Swift.String?
        /// The Jupyter server's app settings.
        public var jupyterServerAppSettings: SageMakerClientTypes.JupyterServerAppSettings?
        /// The kernel gateway app settings.
        public var kernelGatewayAppSettings: SageMakerClientTypes.KernelGatewayAppSettings?
        /// A collection of settings that configure the RSessionGateway app.
        public var rSessionAppSettings: SageMakerClientTypes.RSessionAppSettings?
        /// A collection of settings that configure user interaction with the RStudioServerPro app.
        public var rStudioServerProAppSettings: SageMakerClientTypes.RStudioServerProAppSettings?
        /// The security groups for the Amazon Virtual Private Cloud (VPC) that Studio uses for communication. Optional when the CreateDomain.AppNetworkAccessType parameter is set to PublicInternetOnly. Required when the CreateDomain.AppNetworkAccessType parameter is set to VpcOnly. Amazon SageMaker adds a security group to allow NFS traffic from SageMaker Studio. Therefore, the number of security groups that you can specify is one less than the maximum number shown.
        public var securityGroups: [Swift.String]?
        /// Specifies options for sharing SageMaker Studio notebooks.
        public var sharingSettings: SageMakerClientTypes.SharingSettings?
        /// The TensorBoard app settings.
        public var tensorBoardAppSettings: SageMakerClientTypes.TensorBoardAppSettings?

        public init (
            canvasAppSettings: SageMakerClientTypes.CanvasAppSettings? = nil,
            executionRole: Swift.String? = nil,
            jupyterServerAppSettings: SageMakerClientTypes.JupyterServerAppSettings? = nil,
            kernelGatewayAppSettings: SageMakerClientTypes.KernelGatewayAppSettings? = nil,
            rSessionAppSettings: SageMakerClientTypes.RSessionAppSettings? = nil,
            rStudioServerProAppSettings: SageMakerClientTypes.RStudioServerProAppSettings? = nil,
            securityGroups: [Swift.String]? = nil,
            sharingSettings: SageMakerClientTypes.SharingSettings? = nil,
            tensorBoardAppSettings: SageMakerClientTypes.TensorBoardAppSettings? = nil
        )
        {
            self.canvasAppSettings = canvasAppSettings
            self.executionRole = executionRole
            self.jupyterServerAppSettings = jupyterServerAppSettings
            self.kernelGatewayAppSettings = kernelGatewayAppSettings
            self.rSessionAppSettings = rSessionAppSettings
            self.rStudioServerProAppSettings = rStudioServerProAppSettings
            self.securityGroups = securityGroups
            self.sharingSettings = sharingSettings
            self.tensorBoardAppSettings = tensorBoardAppSettings
        }
    }

}
