// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension SageMakerClientTypes {
    /// Defines the input needed to run a transform job using the inference specification specified in the algorithm.
    public struct TransformJobDefinition: Swift.Equatable {
        /// A string that determines the number of records included in a single mini-batch. SingleRecord means only one record is used per mini-batch. MultiRecord means a mini-batch is set to contain as many records that can fit within the MaxPayloadInMB limit.
        public var batchStrategy: SageMakerClientTypes.BatchStrategy?
        /// The environment variables to set in the Docker container. We support up to 16 key and values entries in the map.
        public var environment: [Swift.String:Swift.String]?
        /// The maximum number of parallel requests that can be sent to each instance in a transform job. The default value is 1.
        public var maxConcurrentTransforms: Swift.Int?
        /// The maximum payload size allowed, in MB. A payload is the data portion of a record (without metadata).
        public var maxPayloadInMB: Swift.Int?
        /// A description of the input source and the way the transform job consumes it.
        /// This member is required.
        public var transformInput: SageMakerClientTypes.TransformInput?
        /// Identifies the Amazon S3 location where you want Amazon SageMaker to save the results from the transform job.
        /// This member is required.
        public var transformOutput: SageMakerClientTypes.TransformOutput?
        /// Identifies the ML compute instances for the transform job.
        /// This member is required.
        public var transformResources: SageMakerClientTypes.TransformResources?

        public init (
            batchStrategy: SageMakerClientTypes.BatchStrategy? = nil,
            environment: [Swift.String:Swift.String]? = nil,
            maxConcurrentTransforms: Swift.Int? = nil,
            maxPayloadInMB: Swift.Int? = nil,
            transformInput: SageMakerClientTypes.TransformInput? = nil,
            transformOutput: SageMakerClientTypes.TransformOutput? = nil,
            transformResources: SageMakerClientTypes.TransformResources? = nil
        )
        {
            self.batchStrategy = batchStrategy
            self.environment = environment
            self.maxConcurrentTransforms = maxConcurrentTransforms
            self.maxPayloadInMB = maxPayloadInMB
            self.transformInput = transformInput
            self.transformOutput = transformOutput
            self.transformResources = transformResources
        }
    }

}
