// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListModelPackagesOutputResponseBody: Swift.Equatable {
    let modelPackageSummaryList: [SageMakerClientTypes.ModelPackageSummary]?
    let nextToken: Swift.String?
}

extension ListModelPackagesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case modelPackageSummaryList = "ModelPackageSummaryList"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let modelPackageSummaryListContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.ModelPackageSummary?].self, forKey: .modelPackageSummaryList)
        var modelPackageSummaryListDecoded0:[SageMakerClientTypes.ModelPackageSummary]? = nil
        if let modelPackageSummaryListContainer = modelPackageSummaryListContainer {
            modelPackageSummaryListDecoded0 = [SageMakerClientTypes.ModelPackageSummary]()
            for structure0 in modelPackageSummaryListContainer {
                if let structure0 = structure0 {
                    modelPackageSummaryListDecoded0?.append(structure0)
                }
            }
        }
        modelPackageSummaryList = modelPackageSummaryListDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
