// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CreateHyperParameterTuningJobInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case hyperParameterTuningJobConfig = "HyperParameterTuningJobConfig"
        case hyperParameterTuningJobName = "HyperParameterTuningJobName"
        case tags = "Tags"
        case trainingJobDefinition = "TrainingJobDefinition"
        case trainingJobDefinitions = "TrainingJobDefinitions"
        case warmStartConfig = "WarmStartConfig"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let hyperParameterTuningJobConfig = self.hyperParameterTuningJobConfig {
            try encodeContainer.encode(hyperParameterTuningJobConfig, forKey: .hyperParameterTuningJobConfig)
        }
        if let hyperParameterTuningJobName = self.hyperParameterTuningJobName {
            try encodeContainer.encode(hyperParameterTuningJobName, forKey: .hyperParameterTuningJobName)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
        if let trainingJobDefinition = self.trainingJobDefinition {
            try encodeContainer.encode(trainingJobDefinition, forKey: .trainingJobDefinition)
        }
        if let trainingJobDefinitions = trainingJobDefinitions {
            var trainingJobDefinitionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .trainingJobDefinitions)
            for hyperparametertrainingjobdefinitions0 in trainingJobDefinitions {
                try trainingJobDefinitionsContainer.encode(hyperparametertrainingjobdefinitions0)
            }
        }
        if let warmStartConfig = self.warmStartConfig {
            try encodeContainer.encode(warmStartConfig, forKey: .warmStartConfig)
        }
    }
}
