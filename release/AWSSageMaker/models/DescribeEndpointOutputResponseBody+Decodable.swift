// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeEndpointOutputResponseBody: Swift.Equatable {
    let endpointName: Swift.String?
    let endpointArn: Swift.String?
    let endpointConfigName: Swift.String?
    let productionVariants: [SageMakerClientTypes.ProductionVariantSummary]?
    let dataCaptureConfig: SageMakerClientTypes.DataCaptureConfigSummary?
    let endpointStatus: SageMakerClientTypes.EndpointStatus?
    let failureReason: Swift.String?
    let creationTime: ClientRuntime.Date?
    let lastModifiedTime: ClientRuntime.Date?
    let lastDeploymentConfig: SageMakerClientTypes.DeploymentConfig?
    let asyncInferenceConfig: SageMakerClientTypes.AsyncInferenceConfig?
    let pendingDeploymentSummary: SageMakerClientTypes.PendingDeploymentSummary?
}

extension DescribeEndpointOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case asyncInferenceConfig = "AsyncInferenceConfig"
        case creationTime = "CreationTime"
        case dataCaptureConfig = "DataCaptureConfig"
        case endpointArn = "EndpointArn"
        case endpointConfigName = "EndpointConfigName"
        case endpointName = "EndpointName"
        case endpointStatus = "EndpointStatus"
        case failureReason = "FailureReason"
        case lastDeploymentConfig = "LastDeploymentConfig"
        case lastModifiedTime = "LastModifiedTime"
        case pendingDeploymentSummary = "PendingDeploymentSummary"
        case productionVariants = "ProductionVariants"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let endpointNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .endpointName)
        endpointName = endpointNameDecoded
        let endpointArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .endpointArn)
        endpointArn = endpointArnDecoded
        let endpointConfigNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .endpointConfigName)
        endpointConfigName = endpointConfigNameDecoded
        let productionVariantsContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.ProductionVariantSummary?].self, forKey: .productionVariants)
        var productionVariantsDecoded0:[SageMakerClientTypes.ProductionVariantSummary]? = nil
        if let productionVariantsContainer = productionVariantsContainer {
            productionVariantsDecoded0 = [SageMakerClientTypes.ProductionVariantSummary]()
            for structure0 in productionVariantsContainer {
                if let structure0 = structure0 {
                    productionVariantsDecoded0?.append(structure0)
                }
            }
        }
        productionVariants = productionVariantsDecoded0
        let dataCaptureConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.DataCaptureConfigSummary.self, forKey: .dataCaptureConfig)
        dataCaptureConfig = dataCaptureConfigDecoded
        let endpointStatusDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.EndpointStatus.self, forKey: .endpointStatus)
        endpointStatus = endpointStatusDecoded
        let failureReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .failureReason)
        failureReason = failureReasonDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let lastModifiedTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedTime)
        lastModifiedTime = lastModifiedTimeDecoded
        let lastDeploymentConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.DeploymentConfig.self, forKey: .lastDeploymentConfig)
        lastDeploymentConfig = lastDeploymentConfigDecoded
        let asyncInferenceConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.AsyncInferenceConfig.self, forKey: .asyncInferenceConfig)
        asyncInferenceConfig = asyncInferenceConfigDecoded
        let pendingDeploymentSummaryDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.PendingDeploymentSummary.self, forKey: .pendingDeploymentSummary)
        pendingDeploymentSummary = pendingDeploymentSummaryDecoded
    }
}
