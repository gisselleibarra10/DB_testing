// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CreateAutoMLJobInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case autoMLJobConfig = "AutoMLJobConfig"
        case autoMLJobName = "AutoMLJobName"
        case autoMLJobObjective = "AutoMLJobObjective"
        case generateCandidateDefinitionsOnly = "GenerateCandidateDefinitionsOnly"
        case inputDataConfig = "InputDataConfig"
        case modelDeployConfig = "ModelDeployConfig"
        case outputDataConfig = "OutputDataConfig"
        case problemType = "ProblemType"
        case roleArn = "RoleArn"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let autoMLJobConfig = self.autoMLJobConfig {
            try encodeContainer.encode(autoMLJobConfig, forKey: .autoMLJobConfig)
        }
        if let autoMLJobName = self.autoMLJobName {
            try encodeContainer.encode(autoMLJobName, forKey: .autoMLJobName)
        }
        if let autoMLJobObjective = self.autoMLJobObjective {
            try encodeContainer.encode(autoMLJobObjective, forKey: .autoMLJobObjective)
        }
        if generateCandidateDefinitionsOnly != false {
            try encodeContainer.encode(generateCandidateDefinitionsOnly, forKey: .generateCandidateDefinitionsOnly)
        }
        if let inputDataConfig = inputDataConfig {
            var inputDataConfigContainer = encodeContainer.nestedUnkeyedContainer(forKey: .inputDataConfig)
            for automlinputdataconfig0 in inputDataConfig {
                try inputDataConfigContainer.encode(automlinputdataconfig0)
            }
        }
        if let modelDeployConfig = self.modelDeployConfig {
            try encodeContainer.encode(modelDeployConfig, forKey: .modelDeployConfig)
        }
        if let outputDataConfig = self.outputDataConfig {
            try encodeContainer.encode(outputDataConfig, forKey: .outputDataConfig)
        }
        if let problemType = self.problemType {
            try encodeContainer.encode(problemType.rawValue, forKey: .problemType)
        }
        if let roleArn = self.roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }
}
