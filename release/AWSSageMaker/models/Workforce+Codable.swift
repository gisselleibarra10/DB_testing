// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SageMakerClientTypes.Workforce: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cognitoConfig = "CognitoConfig"
        case createDate = "CreateDate"
        case failureReason = "FailureReason"
        case lastUpdatedDate = "LastUpdatedDate"
        case oidcConfig = "OidcConfig"
        case sourceIpConfig = "SourceIpConfig"
        case status = "Status"
        case subDomain = "SubDomain"
        case workforceArn = "WorkforceArn"
        case workforceName = "WorkforceName"
        case workforceVpcConfig = "WorkforceVpcConfig"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cognitoConfig = self.cognitoConfig {
            try encodeContainer.encode(cognitoConfig, forKey: .cognitoConfig)
        }
        if let createDate = self.createDate {
            try encodeContainer.encode(createDate.timeIntervalSince1970, forKey: .createDate)
        }
        if let failureReason = self.failureReason {
            try encodeContainer.encode(failureReason, forKey: .failureReason)
        }
        if let lastUpdatedDate = self.lastUpdatedDate {
            try encodeContainer.encode(lastUpdatedDate.timeIntervalSince1970, forKey: .lastUpdatedDate)
        }
        if let oidcConfig = self.oidcConfig {
            try encodeContainer.encode(oidcConfig, forKey: .oidcConfig)
        }
        if let sourceIpConfig = self.sourceIpConfig {
            try encodeContainer.encode(sourceIpConfig, forKey: .sourceIpConfig)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let subDomain = self.subDomain {
            try encodeContainer.encode(subDomain, forKey: .subDomain)
        }
        if let workforceArn = self.workforceArn {
            try encodeContainer.encode(workforceArn, forKey: .workforceArn)
        }
        if let workforceName = self.workforceName {
            try encodeContainer.encode(workforceName, forKey: .workforceName)
        }
        if let workforceVpcConfig = self.workforceVpcConfig {
            try encodeContainer.encode(workforceVpcConfig, forKey: .workforceVpcConfig)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let workforceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .workforceName)
        workforceName = workforceNameDecoded
        let workforceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .workforceArn)
        workforceArn = workforceArnDecoded
        let lastUpdatedDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastUpdatedDate)
        lastUpdatedDate = lastUpdatedDateDecoded
        let sourceIpConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.SourceIpConfig.self, forKey: .sourceIpConfig)
        sourceIpConfig = sourceIpConfigDecoded
        let subDomainDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .subDomain)
        subDomain = subDomainDecoded
        let cognitoConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.CognitoConfig.self, forKey: .cognitoConfig)
        cognitoConfig = cognitoConfigDecoded
        let oidcConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.OidcConfigForResponse.self, forKey: .oidcConfig)
        oidcConfig = oidcConfigDecoded
        let createDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createDate)
        createDate = createDateDecoded
        let workforceVpcConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.WorkforceVpcConfigResponse.self, forKey: .workforceVpcConfig)
        workforceVpcConfig = workforceVpcConfigDecoded
        let statusDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.WorkforceStatus.self, forKey: .status)
        status = statusDecoded
        let failureReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .failureReason)
        failureReason = failureReasonDecoded
    }
}
