// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SageMakerClientTypes.LineageGroupSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTime = "CreationTime"
        case displayName = "DisplayName"
        case lastModifiedTime = "LastModifiedTime"
        case lineageGroupArn = "LineageGroupArn"
        case lineageGroupName = "LineageGroupName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationTime = self.creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let displayName = self.displayName {
            try encodeContainer.encode(displayName, forKey: .displayName)
        }
        if let lastModifiedTime = self.lastModifiedTime {
            try encodeContainer.encode(lastModifiedTime.timeIntervalSince1970, forKey: .lastModifiedTime)
        }
        if let lineageGroupArn = self.lineageGroupArn {
            try encodeContainer.encode(lineageGroupArn, forKey: .lineageGroupArn)
        }
        if let lineageGroupName = self.lineageGroupName {
            try encodeContainer.encode(lineageGroupName, forKey: .lineageGroupName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let lineageGroupArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lineageGroupArn)
        lineageGroupArn = lineageGroupArnDecoded
        let lineageGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lineageGroupName)
        lineageGroupName = lineageGroupNameDecoded
        let displayNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .displayName)
        displayName = displayNameDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let lastModifiedTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedTime)
        lastModifiedTime = lastModifiedTimeDecoded
    }
}
