// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SageMakerClientTypes.TransformInput: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case compressionType = "CompressionType"
        case contentType = "ContentType"
        case dataSource = "DataSource"
        case splitType = "SplitType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let compressionType = self.compressionType {
            try encodeContainer.encode(compressionType.rawValue, forKey: .compressionType)
        }
        if let contentType = self.contentType {
            try encodeContainer.encode(contentType, forKey: .contentType)
        }
        if let dataSource = self.dataSource {
            try encodeContainer.encode(dataSource, forKey: .dataSource)
        }
        if let splitType = self.splitType {
            try encodeContainer.encode(splitType.rawValue, forKey: .splitType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dataSourceDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.TransformDataSource.self, forKey: .dataSource)
        dataSource = dataSourceDecoded
        let contentTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .contentType)
        contentType = contentTypeDecoded
        let compressionTypeDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.CompressionType.self, forKey: .compressionType)
        compressionType = compressionTypeDecoded
        let splitTypeDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.SplitType.self, forKey: .splitType)
        splitType = splitTypeDecoded
    }
}
