// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SageMakerClientTypes.DeviceDeploymentSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deployedStageName = "DeployedStageName"
        case deploymentStartTime = "DeploymentStartTime"
        case description = "Description"
        case deviceArn = "DeviceArn"
        case deviceDeploymentStatus = "DeviceDeploymentStatus"
        case deviceDeploymentStatusMessage = "DeviceDeploymentStatusMessage"
        case deviceFleetName = "DeviceFleetName"
        case deviceName = "DeviceName"
        case edgeDeploymentPlanArn = "EdgeDeploymentPlanArn"
        case edgeDeploymentPlanName = "EdgeDeploymentPlanName"
        case stageName = "StageName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let deployedStageName = self.deployedStageName {
            try encodeContainer.encode(deployedStageName, forKey: .deployedStageName)
        }
        if let deploymentStartTime = self.deploymentStartTime {
            try encodeContainer.encode(deploymentStartTime.timeIntervalSince1970, forKey: .deploymentStartTime)
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let deviceArn = self.deviceArn {
            try encodeContainer.encode(deviceArn, forKey: .deviceArn)
        }
        if let deviceDeploymentStatus = self.deviceDeploymentStatus {
            try encodeContainer.encode(deviceDeploymentStatus.rawValue, forKey: .deviceDeploymentStatus)
        }
        if let deviceDeploymentStatusMessage = self.deviceDeploymentStatusMessage {
            try encodeContainer.encode(deviceDeploymentStatusMessage, forKey: .deviceDeploymentStatusMessage)
        }
        if let deviceFleetName = self.deviceFleetName {
            try encodeContainer.encode(deviceFleetName, forKey: .deviceFleetName)
        }
        if let deviceName = self.deviceName {
            try encodeContainer.encode(deviceName, forKey: .deviceName)
        }
        if let edgeDeploymentPlanArn = self.edgeDeploymentPlanArn {
            try encodeContainer.encode(edgeDeploymentPlanArn, forKey: .edgeDeploymentPlanArn)
        }
        if let edgeDeploymentPlanName = self.edgeDeploymentPlanName {
            try encodeContainer.encode(edgeDeploymentPlanName, forKey: .edgeDeploymentPlanName)
        }
        if let stageName = self.stageName {
            try encodeContainer.encode(stageName, forKey: .stageName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let edgeDeploymentPlanArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .edgeDeploymentPlanArn)
        edgeDeploymentPlanArn = edgeDeploymentPlanArnDecoded
        let edgeDeploymentPlanNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .edgeDeploymentPlanName)
        edgeDeploymentPlanName = edgeDeploymentPlanNameDecoded
        let stageNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stageName)
        stageName = stageNameDecoded
        let deployedStageNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deployedStageName)
        deployedStageName = deployedStageNameDecoded
        let deviceFleetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deviceFleetName)
        deviceFleetName = deviceFleetNameDecoded
        let deviceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deviceName)
        deviceName = deviceNameDecoded
        let deviceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deviceArn)
        deviceArn = deviceArnDecoded
        let deviceDeploymentStatusDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.DeviceDeploymentStatus.self, forKey: .deviceDeploymentStatus)
        deviceDeploymentStatus = deviceDeploymentStatusDecoded
        let deviceDeploymentStatusMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deviceDeploymentStatusMessage)
        deviceDeploymentStatusMessage = deviceDeploymentStatusMessageDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let deploymentStartTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .deploymentStartTime)
        deploymentStartTime = deploymentStartTimeDecoded
    }
}
