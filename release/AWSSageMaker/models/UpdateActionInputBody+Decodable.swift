// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct UpdateActionInputBody: Swift.Equatable {
    let actionName: Swift.String?
    let description: Swift.String?
    let status: SageMakerClientTypes.ActionStatus?
    let properties: [Swift.String:Swift.String]?
    let propertiesToRemove: [Swift.String]?
}

extension UpdateActionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case actionName = "ActionName"
        case description = "Description"
        case properties = "Properties"
        case propertiesToRemove = "PropertiesToRemove"
        case status = "Status"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let actionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .actionName)
        actionName = actionNameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let statusDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ActionStatus.self, forKey: .status)
        status = statusDecoded
        let propertiesContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .properties)
        var propertiesDecoded0: [Swift.String:Swift.String]? = nil
        if let propertiesContainer = propertiesContainer {
            propertiesDecoded0 = [Swift.String:Swift.String]()
            for (key0, stringparametervalue0) in propertiesContainer {
                if let stringparametervalue0 = stringparametervalue0 {
                    propertiesDecoded0?[key0] = stringparametervalue0
                }
            }
        }
        properties = propertiesDecoded0
        let propertiesToRemoveContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .propertiesToRemove)
        var propertiesToRemoveDecoded0:[Swift.String]? = nil
        if let propertiesToRemoveContainer = propertiesToRemoveContainer {
            propertiesToRemoveDecoded0 = [Swift.String]()
            for string0 in propertiesToRemoveContainer {
                if let string0 = string0 {
                    propertiesToRemoveDecoded0?.append(string0)
                }
            }
        }
        propertiesToRemove = propertiesToRemoveDecoded0
    }
}
