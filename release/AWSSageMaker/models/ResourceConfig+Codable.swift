// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SageMakerClientTypes.ResourceConfig: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case instanceCount = "InstanceCount"
        case instanceGroups = "InstanceGroups"
        case instanceType = "InstanceType"
        case keepAlivePeriodInSeconds = "KeepAlivePeriodInSeconds"
        case volumeKmsKeyId = "VolumeKmsKeyId"
        case volumeSizeInGB = "VolumeSizeInGB"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if instanceCount != 0 {
            try encodeContainer.encode(instanceCount, forKey: .instanceCount)
        }
        if let instanceGroups = instanceGroups {
            var instanceGroupsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .instanceGroups)
            for instancegroups0 in instanceGroups {
                try instanceGroupsContainer.encode(instancegroups0)
            }
        }
        if let instanceType = self.instanceType {
            try encodeContainer.encode(instanceType.rawValue, forKey: .instanceType)
        }
        if let keepAlivePeriodInSeconds = self.keepAlivePeriodInSeconds {
            try encodeContainer.encode(keepAlivePeriodInSeconds, forKey: .keepAlivePeriodInSeconds)
        }
        if let volumeKmsKeyId = self.volumeKmsKeyId {
            try encodeContainer.encode(volumeKmsKeyId, forKey: .volumeKmsKeyId)
        }
        if volumeSizeInGB != 0 {
            try encodeContainer.encode(volumeSizeInGB, forKey: .volumeSizeInGB)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instanceTypeDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.TrainingInstanceType.self, forKey: .instanceType)
        instanceType = instanceTypeDecoded
        let instanceCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .instanceCount) ?? 0
        instanceCount = instanceCountDecoded
        let volumeSizeInGBDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .volumeSizeInGB) ?? 0
        volumeSizeInGB = volumeSizeInGBDecoded
        let volumeKmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .volumeKmsKeyId)
        volumeKmsKeyId = volumeKmsKeyIdDecoded
        let instanceGroupsContainer = try containerValues.decodeIfPresent([SageMakerClientTypes.InstanceGroup?].self, forKey: .instanceGroups)
        var instanceGroupsDecoded0:[SageMakerClientTypes.InstanceGroup]? = nil
        if let instanceGroupsContainer = instanceGroupsContainer {
            instanceGroupsDecoded0 = [SageMakerClientTypes.InstanceGroup]()
            for structure0 in instanceGroupsContainer {
                if let structure0 = structure0 {
                    instanceGroupsDecoded0?.append(structure0)
                }
            }
        }
        instanceGroups = instanceGroupsDecoded0
        let keepAlivePeriodInSecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .keepAlivePeriodInSeconds)
        keepAlivePeriodInSeconds = keepAlivePeriodInSecondsDecoded
    }
}
