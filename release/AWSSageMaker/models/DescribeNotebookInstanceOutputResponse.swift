// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct DescribeNotebookInstanceOutputResponse: Swift.Equatable {
    /// A list of the Elastic Inference (EI) instance types associated with this notebook instance. Currently only one EI instance type can be associated with a notebook instance. For more information, see [Using Elastic Inference in Amazon SageMaker](https://docs.aws.amazon.com/sagemaker/latest/dg/ei.html).
    public var acceleratorTypes: [SageMakerClientTypes.NotebookInstanceAcceleratorType]?
    /// An array of up to three Git repositories associated with the notebook instance. These can be either the names of Git repositories stored as resources in your account, or the URL of Git repositories in [Amazon Web Services CodeCommit](https://docs.aws.amazon.com/codecommit/latest/userguide/welcome.html) or in any other Git repository. These repositories are cloned at the same level as the default repository of your notebook instance. For more information, see [Associating Git Repositories with SageMaker Notebook Instances](https://docs.aws.amazon.com/sagemaker/latest/dg/nbi-git-repo.html).
    public var additionalCodeRepositories: [Swift.String]?
    /// A timestamp. Use this parameter to return the time when the notebook instance was created
    public var creationTime: ClientRuntime.Date?
    /// The Git repository associated with the notebook instance as its default code repository. This can be either the name of a Git repository stored as a resource in your account, or the URL of a Git repository in [Amazon Web Services CodeCommit](https://docs.aws.amazon.com/codecommit/latest/userguide/welcome.html) or in any other Git repository. When you open a notebook instance, it opens in the directory that contains this repository. For more information, see [Associating Git Repositories with SageMaker Notebook Instances](https://docs.aws.amazon.com/sagemaker/latest/dg/nbi-git-repo.html).
    public var defaultCodeRepository: Swift.String?
    /// Describes whether SageMaker provides internet access to the notebook instance. If this value is set to Disabled, the notebook instance does not have internet access, and cannot connect to SageMaker training and endpoint services. For more information, see [Notebook Instances Are Internet-Enabled by Default](https://docs.aws.amazon.com/sagemaker/latest/dg/appendix-additional-considerations.html#appendix-notebook-and-internet-access).
    public var directInternetAccess: SageMakerClientTypes.DirectInternetAccess?
    /// If status is Failed, the reason it failed.
    public var failureReason: Swift.String?
    /// Information on the IMDS configuration of the notebook instance
    public var instanceMetadataServiceConfiguration: SageMakerClientTypes.InstanceMetadataServiceConfiguration?
    /// The type of ML compute instance running on the notebook instance.
    public var instanceType: SageMakerClientTypes.InstanceType?
    /// The Amazon Web Services KMS key ID SageMaker uses to encrypt data when storing it on the ML storage volume attached to the instance.
    public var kmsKeyId: Swift.String?
    /// A timestamp. Use this parameter to retrieve the time when the notebook instance was last modified.
    public var lastModifiedTime: ClientRuntime.Date?
    /// The network interface IDs that SageMaker created at the time of creating the instance.
    public var networkInterfaceId: Swift.String?
    /// The Amazon Resource Name (ARN) of the notebook instance.
    public var notebookInstanceArn: Swift.String?
    /// Returns the name of a notebook instance lifecycle configuration. For information about notebook instance lifestyle configurations, see [Step 2.1: (Optional) Customize a Notebook Instance](https://docs.aws.amazon.com/sagemaker/latest/dg/notebook-lifecycle-config.html)
    public var notebookInstanceLifecycleConfigName: Swift.String?
    /// The name of the SageMaker notebook instance.
    public var notebookInstanceName: Swift.String?
    /// The status of the notebook instance.
    public var notebookInstanceStatus: SageMakerClientTypes.NotebookInstanceStatus?
    /// The platform identifier of the notebook instance runtime environment.
    public var platformIdentifier: Swift.String?
    /// The Amazon Resource Name (ARN) of the IAM role associated with the instance.
    public var roleArn: Swift.String?
    /// Whether root access is enabled or disabled for users of the notebook instance. Lifecycle configurations need root access to be able to set up a notebook instance. Because of this, lifecycle configurations associated with a notebook instance always run with root access even if you disable root access for users.
    public var rootAccess: SageMakerClientTypes.RootAccess?
    /// The IDs of the VPC security groups.
    public var securityGroups: [Swift.String]?
    /// The ID of the VPC subnet.
    public var subnetId: Swift.String?
    /// The URL that you use to connect to the Jupyter notebook that is running in your notebook instance.
    public var url: Swift.String?
    /// The size, in GB, of the ML storage volume attached to the notebook instance.
    public var volumeSizeInGB: Swift.Int?

    public init (
        acceleratorTypes: [SageMakerClientTypes.NotebookInstanceAcceleratorType]? = nil,
        additionalCodeRepositories: [Swift.String]? = nil,
        creationTime: ClientRuntime.Date? = nil,
        defaultCodeRepository: Swift.String? = nil,
        directInternetAccess: SageMakerClientTypes.DirectInternetAccess? = nil,
        failureReason: Swift.String? = nil,
        instanceMetadataServiceConfiguration: SageMakerClientTypes.InstanceMetadataServiceConfiguration? = nil,
        instanceType: SageMakerClientTypes.InstanceType? = nil,
        kmsKeyId: Swift.String? = nil,
        lastModifiedTime: ClientRuntime.Date? = nil,
        networkInterfaceId: Swift.String? = nil,
        notebookInstanceArn: Swift.String? = nil,
        notebookInstanceLifecycleConfigName: Swift.String? = nil,
        notebookInstanceName: Swift.String? = nil,
        notebookInstanceStatus: SageMakerClientTypes.NotebookInstanceStatus? = nil,
        platformIdentifier: Swift.String? = nil,
        roleArn: Swift.String? = nil,
        rootAccess: SageMakerClientTypes.RootAccess? = nil,
        securityGroups: [Swift.String]? = nil,
        subnetId: Swift.String? = nil,
        url: Swift.String? = nil,
        volumeSizeInGB: Swift.Int? = nil
    )
    {
        self.acceleratorTypes = acceleratorTypes
        self.additionalCodeRepositories = additionalCodeRepositories
        self.creationTime = creationTime
        self.defaultCodeRepository = defaultCodeRepository
        self.directInternetAccess = directInternetAccess
        self.failureReason = failureReason
        self.instanceMetadataServiceConfiguration = instanceMetadataServiceConfiguration
        self.instanceType = instanceType
        self.kmsKeyId = kmsKeyId
        self.lastModifiedTime = lastModifiedTime
        self.networkInterfaceId = networkInterfaceId
        self.notebookInstanceArn = notebookInstanceArn
        self.notebookInstanceLifecycleConfigName = notebookInstanceLifecycleConfigName
        self.notebookInstanceName = notebookInstanceName
        self.notebookInstanceStatus = notebookInstanceStatus
        self.platformIdentifier = platformIdentifier
        self.roleArn = roleArn
        self.rootAccess = rootAccess
        self.securityGroups = securityGroups
        self.subnetId = subnetId
        self.url = url
        self.volumeSizeInGB = volumeSizeInGB
    }
}
