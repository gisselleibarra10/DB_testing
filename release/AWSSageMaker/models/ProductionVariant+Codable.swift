// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SageMakerClientTypes.ProductionVariant: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case acceleratorType = "AcceleratorType"
        case containerStartupHealthCheckTimeoutInSeconds = "ContainerStartupHealthCheckTimeoutInSeconds"
        case coreDumpConfig = "CoreDumpConfig"
        case initialInstanceCount = "InitialInstanceCount"
        case initialVariantWeight = "InitialVariantWeight"
        case instanceType = "InstanceType"
        case modelDataDownloadTimeoutInSeconds = "ModelDataDownloadTimeoutInSeconds"
        case modelName = "ModelName"
        case serverlessConfig = "ServerlessConfig"
        case variantName = "VariantName"
        case volumeSizeInGB = "VolumeSizeInGB"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let acceleratorType = self.acceleratorType {
            try encodeContainer.encode(acceleratorType.rawValue, forKey: .acceleratorType)
        }
        if let containerStartupHealthCheckTimeoutInSeconds = self.containerStartupHealthCheckTimeoutInSeconds {
            try encodeContainer.encode(containerStartupHealthCheckTimeoutInSeconds, forKey: .containerStartupHealthCheckTimeoutInSeconds)
        }
        if let coreDumpConfig = self.coreDumpConfig {
            try encodeContainer.encode(coreDumpConfig, forKey: .coreDumpConfig)
        }
        if let initialInstanceCount = self.initialInstanceCount {
            try encodeContainer.encode(initialInstanceCount, forKey: .initialInstanceCount)
        }
        if let initialVariantWeight = self.initialVariantWeight {
            try encodeContainer.encode(initialVariantWeight, forKey: .initialVariantWeight)
        }
        if let instanceType = self.instanceType {
            try encodeContainer.encode(instanceType.rawValue, forKey: .instanceType)
        }
        if let modelDataDownloadTimeoutInSeconds = self.modelDataDownloadTimeoutInSeconds {
            try encodeContainer.encode(modelDataDownloadTimeoutInSeconds, forKey: .modelDataDownloadTimeoutInSeconds)
        }
        if let modelName = self.modelName {
            try encodeContainer.encode(modelName, forKey: .modelName)
        }
        if let serverlessConfig = self.serverlessConfig {
            try encodeContainer.encode(serverlessConfig, forKey: .serverlessConfig)
        }
        if let variantName = self.variantName {
            try encodeContainer.encode(variantName, forKey: .variantName)
        }
        if let volumeSizeInGB = self.volumeSizeInGB {
            try encodeContainer.encode(volumeSizeInGB, forKey: .volumeSizeInGB)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let variantNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .variantName)
        variantName = variantNameDecoded
        let modelNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelName)
        modelName = modelNameDecoded
        let initialInstanceCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .initialInstanceCount)
        initialInstanceCount = initialInstanceCountDecoded
        let instanceTypeDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ProductionVariantInstanceType.self, forKey: .instanceType)
        instanceType = instanceTypeDecoded
        let initialVariantWeightDecoded = try containerValues.decodeIfPresent(Swift.Float.self, forKey: .initialVariantWeight)
        initialVariantWeight = initialVariantWeightDecoded
        let acceleratorTypeDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ProductionVariantAcceleratorType.self, forKey: .acceleratorType)
        acceleratorType = acceleratorTypeDecoded
        let coreDumpConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ProductionVariantCoreDumpConfig.self, forKey: .coreDumpConfig)
        coreDumpConfig = coreDumpConfigDecoded
        let serverlessConfigDecoded = try containerValues.decodeIfPresent(SageMakerClientTypes.ProductionVariantServerlessConfig.self, forKey: .serverlessConfig)
        serverlessConfig = serverlessConfigDecoded
        let volumeSizeInGBDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .volumeSizeInGB)
        volumeSizeInGB = volumeSizeInGBDecoded
        let modelDataDownloadTimeoutInSecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .modelDataDownloadTimeoutInSeconds)
        modelDataDownloadTimeoutInSeconds = modelDataDownloadTimeoutInSecondsDecoded
        let containerStartupHealthCheckTimeoutInSecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .containerStartupHealthCheckTimeoutInSeconds)
        containerStartupHealthCheckTimeoutInSeconds = containerStartupHealthCheckTimeoutInSecondsDecoded
    }
}
