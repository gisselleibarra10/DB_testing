// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SageMakerClientTypes.OidcConfig: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case authorizationEndpoint = "AuthorizationEndpoint"
        case clientId = "ClientId"
        case clientSecret = "ClientSecret"
        case issuer = "Issuer"
        case jwksUri = "JwksUri"
        case logoutEndpoint = "LogoutEndpoint"
        case tokenEndpoint = "TokenEndpoint"
        case userInfoEndpoint = "UserInfoEndpoint"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let authorizationEndpoint = self.authorizationEndpoint {
            try encodeContainer.encode(authorizationEndpoint, forKey: .authorizationEndpoint)
        }
        if let clientId = self.clientId {
            try encodeContainer.encode(clientId, forKey: .clientId)
        }
        if let clientSecret = self.clientSecret {
            try encodeContainer.encode(clientSecret, forKey: .clientSecret)
        }
        if let issuer = self.issuer {
            try encodeContainer.encode(issuer, forKey: .issuer)
        }
        if let jwksUri = self.jwksUri {
            try encodeContainer.encode(jwksUri, forKey: .jwksUri)
        }
        if let logoutEndpoint = self.logoutEndpoint {
            try encodeContainer.encode(logoutEndpoint, forKey: .logoutEndpoint)
        }
        if let tokenEndpoint = self.tokenEndpoint {
            try encodeContainer.encode(tokenEndpoint, forKey: .tokenEndpoint)
        }
        if let userInfoEndpoint = self.userInfoEndpoint {
            try encodeContainer.encode(userInfoEndpoint, forKey: .userInfoEndpoint)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clientIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientId)
        clientId = clientIdDecoded
        let clientSecretDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientSecret)
        clientSecret = clientSecretDecoded
        let issuerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .issuer)
        issuer = issuerDecoded
        let authorizationEndpointDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .authorizationEndpoint)
        authorizationEndpoint = authorizationEndpointDecoded
        let tokenEndpointDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tokenEndpoint)
        tokenEndpoint = tokenEndpointDecoded
        let userInfoEndpointDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userInfoEndpoint)
        userInfoEndpoint = userInfoEndpointDecoded
        let logoutEndpointDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logoutEndpoint)
        logoutEndpoint = logoutEndpointDecoded
        let jwksUriDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jwksUri)
        jwksUri = jwksUriDecoded
    }
}
