// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension SageMakerClientTypes {
    /// Describes the Docker container for the model package.
    public struct ModelPackageContainerDefinition: Swift.Equatable {
        /// The DNS host name for the Docker container.
        public var containerHostname: Swift.String?
        /// The environment variables to set in the Docker container. Each key and value in the Environment string to string map can have length of up to 1024. We support up to 16 entries in the map.
        public var environment: [Swift.String:Swift.String]?
        /// The machine learning framework of the model package container image.
        public var framework: Swift.String?
        /// The framework version of the Model Package Container Image.
        public var frameworkVersion: Swift.String?
        /// The Amazon EC2 Container Registry (Amazon ECR) path where inference code is stored. If you are using your own custom algorithm instead of an algorithm provided by SageMaker, the inference code must meet SageMaker requirements. SageMaker supports both registry/repository[:tag] and registry/repository[@digest] image path formats. For more information, see [Using Your Own Algorithms with Amazon SageMaker](https://docs.aws.amazon.com/sagemaker/latest/dg/your-algorithms.html).
        /// This member is required.
        public var image: Swift.String?
        /// An MD5 hash of the training algorithm that identifies the Docker image used for training.
        public var imageDigest: Swift.String?
        /// The Amazon S3 path where the model artifacts, which result from model training, are stored. This path must point to a single gzip compressed tar archive (.tar.gz suffix). The model artifacts must be in an S3 bucket that is in the same region as the model package.
        public var modelDataUrl: Swift.String?
        /// A structure with Model Input details.
        public var modelInput: SageMakerClientTypes.ModelInput?
        /// The name of a pre-trained machine learning benchmarked by Amazon SageMaker Inference Recommender model that matches your model. You can find a list of benchmarked models by calling ListModelMetadata.
        public var nearestModelName: Swift.String?
        /// The Amazon Web Services Marketplace product ID of the model package.
        public var productId: Swift.String?

        public init (
            containerHostname: Swift.String? = nil,
            environment: [Swift.String:Swift.String]? = nil,
            framework: Swift.String? = nil,
            frameworkVersion: Swift.String? = nil,
            image: Swift.String? = nil,
            imageDigest: Swift.String? = nil,
            modelDataUrl: Swift.String? = nil,
            modelInput: SageMakerClientTypes.ModelInput? = nil,
            nearestModelName: Swift.String? = nil,
            productId: Swift.String? = nil
        )
        {
            self.containerHostname = containerHostname
            self.environment = environment
            self.framework = framework
            self.frameworkVersion = frameworkVersion
            self.image = image
            self.imageDigest = imageDigest
            self.modelDataUrl = modelDataUrl
            self.modelInput = modelInput
            self.nearestModelName = nearestModelName
            self.productId = productId
        }
    }

}
