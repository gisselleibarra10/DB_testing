// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension LicenseManagerClientTypes {
    public enum AllowedOperation: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case checkoutBorrowLicense
        case checkoutLicense
        case checkInLicense
        case createGrant
        case createToken
        case extendConsumptionLicense
        case listPurchasedLicenses
        case sdkUnknown(Swift.String)

        public static var allCases: [AllowedOperation] {
            return [
                .checkoutBorrowLicense,
                .checkoutLicense,
                .checkInLicense,
                .createGrant,
                .createToken,
                .extendConsumptionLicense,
                .listPurchasedLicenses,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .checkoutBorrowLicense: return "CheckoutBorrowLicense"
            case .checkoutLicense: return "CheckoutLicense"
            case .checkInLicense: return "CheckInLicense"
            case .createGrant: return "CreateGrant"
            case .createToken: return "CreateToken"
            case .extendConsumptionLicense: return "ExtendConsumptionLicense"
            case .listPurchasedLicenses: return "ListPurchasedLicenses"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = AllowedOperation(rawValue: rawValue) ?? AllowedOperation.sdkUnknown(rawValue)
        }
    }
}
