// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListLicenseManagerReportGeneratorsOutputResponseBody: Swift.Equatable {
    let reportGenerators: [LicenseManagerClientTypes.ReportGenerator]?
    let nextToken: Swift.String?
}

extension ListLicenseManagerReportGeneratorsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case reportGenerators = "ReportGenerators"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let reportGeneratorsContainer = try containerValues.decodeIfPresent([LicenseManagerClientTypes.ReportGenerator?].self, forKey: .reportGenerators)
        var reportGeneratorsDecoded0:[LicenseManagerClientTypes.ReportGenerator]? = nil
        if let reportGeneratorsContainer = reportGeneratorsContainer {
            reportGeneratorsDecoded0 = [LicenseManagerClientTypes.ReportGenerator]()
            for structure0 in reportGeneratorsContainer {
                if let structure0 = structure0 {
                    reportGeneratorsDecoded0?.append(structure0)
                }
            }
        }
        reportGenerators = reportGeneratorsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
