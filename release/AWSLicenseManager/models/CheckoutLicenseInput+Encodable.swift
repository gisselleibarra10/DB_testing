// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CheckoutLicenseInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case beneficiary = "Beneficiary"
        case checkoutType = "CheckoutType"
        case clientToken = "ClientToken"
        case entitlements = "Entitlements"
        case keyFingerprint = "KeyFingerprint"
        case nodeId = "NodeId"
        case productSKU = "ProductSKU"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let beneficiary = self.beneficiary {
            try encodeContainer.encode(beneficiary, forKey: .beneficiary)
        }
        if let checkoutType = self.checkoutType {
            try encodeContainer.encode(checkoutType.rawValue, forKey: .checkoutType)
        }
        if let clientToken = self.clientToken {
            try encodeContainer.encode(clientToken, forKey: .clientToken)
        }
        if let entitlements = entitlements {
            var entitlementsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .entitlements)
            for entitlementdatalist0 in entitlements {
                try entitlementsContainer.encode(entitlementdatalist0)
            }
        }
        if let keyFingerprint = self.keyFingerprint {
            try encodeContainer.encode(keyFingerprint, forKey: .keyFingerprint)
        }
        if let nodeId = self.nodeId {
            try encodeContainer.encode(nodeId, forKey: .nodeId)
        }
        if let productSKU = self.productSKU {
            try encodeContainer.encode(productSKU, forKey: .productSKU)
        }
    }
}
