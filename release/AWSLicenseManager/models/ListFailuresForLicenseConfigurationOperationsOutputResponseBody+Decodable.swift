// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListFailuresForLicenseConfigurationOperationsOutputResponseBody: Swift.Equatable {
    let licenseOperationFailureList: [LicenseManagerClientTypes.LicenseOperationFailure]?
    let nextToken: Swift.String?
}

extension ListFailuresForLicenseConfigurationOperationsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case licenseOperationFailureList = "LicenseOperationFailureList"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let licenseOperationFailureListContainer = try containerValues.decodeIfPresent([LicenseManagerClientTypes.LicenseOperationFailure?].self, forKey: .licenseOperationFailureList)
        var licenseOperationFailureListDecoded0:[LicenseManagerClientTypes.LicenseOperationFailure]? = nil
        if let licenseOperationFailureListContainer = licenseOperationFailureListContainer {
            licenseOperationFailureListDecoded0 = [LicenseManagerClientTypes.LicenseOperationFailure]()
            for structure0 in licenseOperationFailureListContainer {
                if let structure0 = structure0 {
                    licenseOperationFailureListDecoded0?.append(structure0)
                }
            }
        }
        licenseOperationFailureList = licenseOperationFailureListDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
