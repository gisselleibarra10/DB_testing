// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CheckoutBorrowLicenseOutputResponseBody: Swift.Equatable {
    let licenseArn: Swift.String?
    let licenseConsumptionToken: Swift.String?
    let entitlementsAllowed: [LicenseManagerClientTypes.EntitlementData]?
    let nodeId: Swift.String?
    let signedToken: Swift.String?
    let issuedAt: Swift.String?
    let expiration: Swift.String?
    let checkoutMetadata: [LicenseManagerClientTypes.Metadata]?
}

extension CheckoutBorrowLicenseOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case checkoutMetadata = "CheckoutMetadata"
        case entitlementsAllowed = "EntitlementsAllowed"
        case expiration = "Expiration"
        case issuedAt = "IssuedAt"
        case licenseArn = "LicenseArn"
        case licenseConsumptionToken = "LicenseConsumptionToken"
        case nodeId = "NodeId"
        case signedToken = "SignedToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let licenseArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .licenseArn)
        licenseArn = licenseArnDecoded
        let licenseConsumptionTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .licenseConsumptionToken)
        licenseConsumptionToken = licenseConsumptionTokenDecoded
        let entitlementsAllowedContainer = try containerValues.decodeIfPresent([LicenseManagerClientTypes.EntitlementData?].self, forKey: .entitlementsAllowed)
        var entitlementsAllowedDecoded0:[LicenseManagerClientTypes.EntitlementData]? = nil
        if let entitlementsAllowedContainer = entitlementsAllowedContainer {
            entitlementsAllowedDecoded0 = [LicenseManagerClientTypes.EntitlementData]()
            for structure0 in entitlementsAllowedContainer {
                if let structure0 = structure0 {
                    entitlementsAllowedDecoded0?.append(structure0)
                }
            }
        }
        entitlementsAllowed = entitlementsAllowedDecoded0
        let nodeIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nodeId)
        nodeId = nodeIdDecoded
        let signedTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .signedToken)
        signedToken = signedTokenDecoded
        let issuedAtDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .issuedAt)
        issuedAt = issuedAtDecoded
        let expirationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .expiration)
        expiration = expirationDecoded
        let checkoutMetadataContainer = try containerValues.decodeIfPresent([LicenseManagerClientTypes.Metadata?].self, forKey: .checkoutMetadata)
        var checkoutMetadataDecoded0:[LicenseManagerClientTypes.Metadata]? = nil
        if let checkoutMetadataContainer = checkoutMetadataContainer {
            checkoutMetadataDecoded0 = [LicenseManagerClientTypes.Metadata]()
            for structure0 in checkoutMetadataContainer {
                if let structure0 = structure0 {
                    checkoutMetadataDecoded0?.append(structure0)
                }
            }
        }
        checkoutMetadata = checkoutMetadataDecoded0
    }
}
