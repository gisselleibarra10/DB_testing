// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct CheckoutBorrowLicenseInput: Swift.Equatable {
    /// Information about constraints.
    public var checkoutMetadata: [LicenseManagerClientTypes.Metadata]?
    /// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.
    /// This member is required.
    public var clientToken: Swift.String?
    /// Digital signature method. The possible value is JSON Web Signature (JWS) algorithm PS384. For more information, see [RFC 7518 Digital Signature with RSASSA-PSS](https://tools.ietf.org/html/rfc7518#section-3.5).
    /// This member is required.
    public var digitalSignatureMethod: LicenseManagerClientTypes.DigitalSignatureMethod?
    /// License entitlements. Partial checkouts are not supported.
    /// This member is required.
    public var entitlements: [LicenseManagerClientTypes.EntitlementData]?
    /// Amazon Resource Name (ARN) of the license. The license must use the borrow consumption configuration.
    /// This member is required.
    public var licenseArn: Swift.String?
    /// Node ID.
    public var nodeId: Swift.String?

    public init (
        checkoutMetadata: [LicenseManagerClientTypes.Metadata]? = nil,
        clientToken: Swift.String? = nil,
        digitalSignatureMethod: LicenseManagerClientTypes.DigitalSignatureMethod? = nil,
        entitlements: [LicenseManagerClientTypes.EntitlementData]? = nil,
        licenseArn: Swift.String? = nil,
        nodeId: Swift.String? = nil
    )
    {
        self.checkoutMetadata = checkoutMetadata
        self.clientToken = clientToken
        self.digitalSignatureMethod = digitalSignatureMethod
        self.entitlements = entitlements
        self.licenseArn = licenseArn
        self.nodeId = nodeId
    }
}
