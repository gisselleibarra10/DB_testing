// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListLicenseConfigurationsOutputResponseBody: Swift.Equatable {
    let licenseConfigurations: [LicenseManagerClientTypes.LicenseConfiguration]?
    let nextToken: Swift.String?
}

extension ListLicenseConfigurationsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case licenseConfigurations = "LicenseConfigurations"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let licenseConfigurationsContainer = try containerValues.decodeIfPresent([LicenseManagerClientTypes.LicenseConfiguration?].self, forKey: .licenseConfigurations)
        var licenseConfigurationsDecoded0:[LicenseManagerClientTypes.LicenseConfiguration]? = nil
        if let licenseConfigurationsContainer = licenseConfigurationsContainer {
            licenseConfigurationsDecoded0 = [LicenseManagerClientTypes.LicenseConfiguration]()
            for structure0 in licenseConfigurationsContainer {
                if let structure0 = structure0 {
                    licenseConfigurationsDecoded0?.append(structure0)
                }
            }
        }
        licenseConfigurations = licenseConfigurationsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
