// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension LicenseManagerClientTypes.ReceivedMetadata: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case allowedOperations = "AllowedOperations"
        case receivedStatus = "ReceivedStatus"
        case receivedStatusReason = "ReceivedStatusReason"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let allowedOperations = allowedOperations {
            var allowedOperationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .allowedOperations)
            for allowedoperationlist0 in allowedOperations {
                try allowedOperationsContainer.encode(allowedoperationlist0.rawValue)
            }
        }
        if let receivedStatus = self.receivedStatus {
            try encodeContainer.encode(receivedStatus.rawValue, forKey: .receivedStatus)
        }
        if let receivedStatusReason = self.receivedStatusReason {
            try encodeContainer.encode(receivedStatusReason, forKey: .receivedStatusReason)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let receivedStatusDecoded = try containerValues.decodeIfPresent(LicenseManagerClientTypes.ReceivedStatus.self, forKey: .receivedStatus)
        receivedStatus = receivedStatusDecoded
        let receivedStatusReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .receivedStatusReason)
        receivedStatusReason = receivedStatusReasonDecoded
        let allowedOperationsContainer = try containerValues.decodeIfPresent([LicenseManagerClientTypes.AllowedOperation?].self, forKey: .allowedOperations)
        var allowedOperationsDecoded0:[LicenseManagerClientTypes.AllowedOperation]? = nil
        if let allowedOperationsContainer = allowedOperationsContainer {
            allowedOperationsDecoded0 = [LicenseManagerClientTypes.AllowedOperation]()
            for string0 in allowedOperationsContainer {
                if let string0 = string0 {
                    allowedOperationsDecoded0?.append(string0)
                }
            }
        }
        allowedOperations = allowedOperationsDecoded0
    }
}
