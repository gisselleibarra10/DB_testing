// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CreateLicenseVersionInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientToken = "ClientToken"
        case consumptionConfiguration = "ConsumptionConfiguration"
        case entitlements = "Entitlements"
        case homeRegion = "HomeRegion"
        case issuer = "Issuer"
        case licenseArn = "LicenseArn"
        case licenseMetadata = "LicenseMetadata"
        case licenseName = "LicenseName"
        case productName = "ProductName"
        case sourceVersion = "SourceVersion"
        case status = "Status"
        case validity = "Validity"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientToken = self.clientToken {
            try encodeContainer.encode(clientToken, forKey: .clientToken)
        }
        if let consumptionConfiguration = self.consumptionConfiguration {
            try encodeContainer.encode(consumptionConfiguration, forKey: .consumptionConfiguration)
        }
        if let entitlements = entitlements {
            var entitlementsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .entitlements)
            for entitlementlist0 in entitlements {
                try entitlementsContainer.encode(entitlementlist0)
            }
        }
        if let homeRegion = self.homeRegion {
            try encodeContainer.encode(homeRegion, forKey: .homeRegion)
        }
        if let issuer = self.issuer {
            try encodeContainer.encode(issuer, forKey: .issuer)
        }
        if let licenseArn = self.licenseArn {
            try encodeContainer.encode(licenseArn, forKey: .licenseArn)
        }
        if let licenseMetadata = licenseMetadata {
            var licenseMetadataContainer = encodeContainer.nestedUnkeyedContainer(forKey: .licenseMetadata)
            for metadatalist0 in licenseMetadata {
                try licenseMetadataContainer.encode(metadatalist0)
            }
        }
        if let licenseName = self.licenseName {
            try encodeContainer.encode(licenseName, forKey: .licenseName)
        }
        if let productName = self.productName {
            try encodeContainer.encode(productName, forKey: .productName)
        }
        if let sourceVersion = self.sourceVersion {
            try encodeContainer.encode(sourceVersion, forKey: .sourceVersion)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let validity = self.validity {
            try encodeContainer.encode(validity, forKey: .validity)
        }
    }
}
