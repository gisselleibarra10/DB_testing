// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateGrantInputBody: Swift.Equatable {
    let clientToken: Swift.String?
    let grantName: Swift.String?
    let licenseArn: Swift.String?
    let principals: [Swift.String]?
    let homeRegion: Swift.String?
    let allowedOperations: [LicenseManagerClientTypes.AllowedOperation]?
}

extension CreateGrantInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case allowedOperations = "AllowedOperations"
        case clientToken = "ClientToken"
        case grantName = "GrantName"
        case homeRegion = "HomeRegion"
        case licenseArn = "LicenseArn"
        case principals = "Principals"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clientTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientToken)
        clientToken = clientTokenDecoded
        let grantNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .grantName)
        grantName = grantNameDecoded
        let licenseArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .licenseArn)
        licenseArn = licenseArnDecoded
        let principalsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .principals)
        var principalsDecoded0:[Swift.String]? = nil
        if let principalsContainer = principalsContainer {
            principalsDecoded0 = [Swift.String]()
            for string0 in principalsContainer {
                if let string0 = string0 {
                    principalsDecoded0?.append(string0)
                }
            }
        }
        principals = principalsDecoded0
        let homeRegionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .homeRegion)
        homeRegion = homeRegionDecoded
        let allowedOperationsContainer = try containerValues.decodeIfPresent([LicenseManagerClientTypes.AllowedOperation?].self, forKey: .allowedOperations)
        var allowedOperationsDecoded0:[LicenseManagerClientTypes.AllowedOperation]? = nil
        if let allowedOperationsContainer = allowedOperationsContainer {
            allowedOperationsDecoded0 = [LicenseManagerClientTypes.AllowedOperation]()
            for string0 in allowedOperationsContainer {
                if let string0 = string0 {
                    allowedOperationsDecoded0?.append(string0)
                }
            }
        }
        allowedOperations = allowedOperationsDecoded0
    }
}
