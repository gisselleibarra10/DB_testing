// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateTokenOutputResponseBody: Swift.Equatable {
    let tokenId: Swift.String?
    let tokenType: LicenseManagerClientTypes.TokenType?
    let token: Swift.String?
}

extension CreateTokenOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case token = "Token"
        case tokenId = "TokenId"
        case tokenType = "TokenType"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tokenIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tokenId)
        tokenId = tokenIdDecoded
        let tokenTypeDecoded = try containerValues.decodeIfPresent(LicenseManagerClientTypes.TokenType.self, forKey: .tokenType)
        tokenType = tokenTypeDecoded
        let tokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .token)
        token = tokenDecoded
    }
}
