// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CheckoutBorrowLicenseInputBody: Swift.Equatable {
    let licenseArn: Swift.String?
    let entitlements: [LicenseManagerClientTypes.EntitlementData]?
    let digitalSignatureMethod: LicenseManagerClientTypes.DigitalSignatureMethod?
    let nodeId: Swift.String?
    let checkoutMetadata: [LicenseManagerClientTypes.Metadata]?
    let clientToken: Swift.String?
}

extension CheckoutBorrowLicenseInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case checkoutMetadata = "CheckoutMetadata"
        case clientToken = "ClientToken"
        case digitalSignatureMethod = "DigitalSignatureMethod"
        case entitlements = "Entitlements"
        case licenseArn = "LicenseArn"
        case nodeId = "NodeId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let licenseArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .licenseArn)
        licenseArn = licenseArnDecoded
        let entitlementsContainer = try containerValues.decodeIfPresent([LicenseManagerClientTypes.EntitlementData?].self, forKey: .entitlements)
        var entitlementsDecoded0:[LicenseManagerClientTypes.EntitlementData]? = nil
        if let entitlementsContainer = entitlementsContainer {
            entitlementsDecoded0 = [LicenseManagerClientTypes.EntitlementData]()
            for structure0 in entitlementsContainer {
                if let structure0 = structure0 {
                    entitlementsDecoded0?.append(structure0)
                }
            }
        }
        entitlements = entitlementsDecoded0
        let digitalSignatureMethodDecoded = try containerValues.decodeIfPresent(LicenseManagerClientTypes.DigitalSignatureMethod.self, forKey: .digitalSignatureMethod)
        digitalSignatureMethod = digitalSignatureMethodDecoded
        let nodeIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nodeId)
        nodeId = nodeIdDecoded
        let checkoutMetadataContainer = try containerValues.decodeIfPresent([LicenseManagerClientTypes.Metadata?].self, forKey: .checkoutMetadata)
        var checkoutMetadataDecoded0:[LicenseManagerClientTypes.Metadata]? = nil
        if let checkoutMetadataContainer = checkoutMetadataContainer {
            checkoutMetadataDecoded0 = [LicenseManagerClientTypes.Metadata]()
            for structure0 in checkoutMetadataContainer {
                if let structure0 = structure0 {
                    checkoutMetadataDecoded0?.append(structure0)
                }
            }
        }
        checkoutMetadata = checkoutMetadataDecoded0
        let clientTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientToken)
        clientToken = clientTokenDecoded
    }
}
