// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension LicenseManagerClientTypes.LicenseConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case automatedDiscoveryInformation = "AutomatedDiscoveryInformation"
        case consumedLicenseSummaryList = "ConsumedLicenseSummaryList"
        case consumedLicenses = "ConsumedLicenses"
        case description = "Description"
        case disassociateWhenNotFound = "DisassociateWhenNotFound"
        case licenseConfigurationArn = "LicenseConfigurationArn"
        case licenseConfigurationId = "LicenseConfigurationId"
        case licenseCount = "LicenseCount"
        case licenseCountHardLimit = "LicenseCountHardLimit"
        case licenseCountingType = "LicenseCountingType"
        case licenseRules = "LicenseRules"
        case managedResourceSummaryList = "ManagedResourceSummaryList"
        case name = "Name"
        case ownerAccountId = "OwnerAccountId"
        case productInformationList = "ProductInformationList"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let automatedDiscoveryInformation = self.automatedDiscoveryInformation {
            try encodeContainer.encode(automatedDiscoveryInformation, forKey: .automatedDiscoveryInformation)
        }
        if let consumedLicenseSummaryList = consumedLicenseSummaryList {
            var consumedLicenseSummaryListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .consumedLicenseSummaryList)
            for consumedlicensesummarylist0 in consumedLicenseSummaryList {
                try consumedLicenseSummaryListContainer.encode(consumedlicensesummarylist0)
            }
        }
        if let consumedLicenses = self.consumedLicenses {
            try encodeContainer.encode(consumedLicenses, forKey: .consumedLicenses)
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let disassociateWhenNotFound = self.disassociateWhenNotFound {
            try encodeContainer.encode(disassociateWhenNotFound, forKey: .disassociateWhenNotFound)
        }
        if let licenseConfigurationArn = self.licenseConfigurationArn {
            try encodeContainer.encode(licenseConfigurationArn, forKey: .licenseConfigurationArn)
        }
        if let licenseConfigurationId = self.licenseConfigurationId {
            try encodeContainer.encode(licenseConfigurationId, forKey: .licenseConfigurationId)
        }
        if let licenseCount = self.licenseCount {
            try encodeContainer.encode(licenseCount, forKey: .licenseCount)
        }
        if let licenseCountHardLimit = self.licenseCountHardLimit {
            try encodeContainer.encode(licenseCountHardLimit, forKey: .licenseCountHardLimit)
        }
        if let licenseCountingType = self.licenseCountingType {
            try encodeContainer.encode(licenseCountingType.rawValue, forKey: .licenseCountingType)
        }
        if let licenseRules = licenseRules {
            var licenseRulesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .licenseRules)
            for stringlist0 in licenseRules {
                try licenseRulesContainer.encode(stringlist0)
            }
        }
        if let managedResourceSummaryList = managedResourceSummaryList {
            var managedResourceSummaryListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .managedResourceSummaryList)
            for managedresourcesummarylist0 in managedResourceSummaryList {
                try managedResourceSummaryListContainer.encode(managedresourcesummarylist0)
            }
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let ownerAccountId = self.ownerAccountId {
            try encodeContainer.encode(ownerAccountId, forKey: .ownerAccountId)
        }
        if let productInformationList = productInformationList {
            var productInformationListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .productInformationList)
            for productinformationlist0 in productInformationList {
                try productInformationListContainer.encode(productinformationlist0)
            }
        }
        if let status = self.status {
            try encodeContainer.encode(status, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let licenseConfigurationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .licenseConfigurationId)
        licenseConfigurationId = licenseConfigurationIdDecoded
        let licenseConfigurationArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .licenseConfigurationArn)
        licenseConfigurationArn = licenseConfigurationArnDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let licenseCountingTypeDecoded = try containerValues.decodeIfPresent(LicenseManagerClientTypes.LicenseCountingType.self, forKey: .licenseCountingType)
        licenseCountingType = licenseCountingTypeDecoded
        let licenseRulesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .licenseRules)
        var licenseRulesDecoded0:[Swift.String]? = nil
        if let licenseRulesContainer = licenseRulesContainer {
            licenseRulesDecoded0 = [Swift.String]()
            for string0 in licenseRulesContainer {
                if let string0 = string0 {
                    licenseRulesDecoded0?.append(string0)
                }
            }
        }
        licenseRules = licenseRulesDecoded0
        let licenseCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .licenseCount)
        licenseCount = licenseCountDecoded
        let licenseCountHardLimitDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .licenseCountHardLimit)
        licenseCountHardLimit = licenseCountHardLimitDecoded
        let disassociateWhenNotFoundDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .disassociateWhenNotFound)
        disassociateWhenNotFound = disassociateWhenNotFoundDecoded
        let consumedLicensesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .consumedLicenses)
        consumedLicenses = consumedLicensesDecoded
        let statusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .status)
        status = statusDecoded
        let ownerAccountIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ownerAccountId)
        ownerAccountId = ownerAccountIdDecoded
        let consumedLicenseSummaryListContainer = try containerValues.decodeIfPresent([LicenseManagerClientTypes.ConsumedLicenseSummary?].self, forKey: .consumedLicenseSummaryList)
        var consumedLicenseSummaryListDecoded0:[LicenseManagerClientTypes.ConsumedLicenseSummary]? = nil
        if let consumedLicenseSummaryListContainer = consumedLicenseSummaryListContainer {
            consumedLicenseSummaryListDecoded0 = [LicenseManagerClientTypes.ConsumedLicenseSummary]()
            for structure0 in consumedLicenseSummaryListContainer {
                if let structure0 = structure0 {
                    consumedLicenseSummaryListDecoded0?.append(structure0)
                }
            }
        }
        consumedLicenseSummaryList = consumedLicenseSummaryListDecoded0
        let managedResourceSummaryListContainer = try containerValues.decodeIfPresent([LicenseManagerClientTypes.ManagedResourceSummary?].self, forKey: .managedResourceSummaryList)
        var managedResourceSummaryListDecoded0:[LicenseManagerClientTypes.ManagedResourceSummary]? = nil
        if let managedResourceSummaryListContainer = managedResourceSummaryListContainer {
            managedResourceSummaryListDecoded0 = [LicenseManagerClientTypes.ManagedResourceSummary]()
            for structure0 in managedResourceSummaryListContainer {
                if let structure0 = structure0 {
                    managedResourceSummaryListDecoded0?.append(structure0)
                }
            }
        }
        managedResourceSummaryList = managedResourceSummaryListDecoded0
        let productInformationListContainer = try containerValues.decodeIfPresent([LicenseManagerClientTypes.ProductInformation?].self, forKey: .productInformationList)
        var productInformationListDecoded0:[LicenseManagerClientTypes.ProductInformation]? = nil
        if let productInformationListContainer = productInformationListContainer {
            productInformationListDecoded0 = [LicenseManagerClientTypes.ProductInformation]()
            for structure0 in productInformationListContainer {
                if let structure0 = structure0 {
                    productInformationListDecoded0?.append(structure0)
                }
            }
        }
        productInformationList = productInformationListDecoded0
        let automatedDiscoveryInformationDecoded = try containerValues.decodeIfPresent(LicenseManagerClientTypes.AutomatedDiscoveryInformation.self, forKey: .automatedDiscoveryInformation)
        automatedDiscoveryInformation = automatedDiscoveryInformationDecoded
    }
}
