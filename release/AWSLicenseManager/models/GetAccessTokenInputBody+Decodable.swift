// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetAccessTokenInputBody: Swift.Equatable {
    let token: Swift.String?
    let tokenProperties: [Swift.String]?
}

extension GetAccessTokenInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case token = "Token"
        case tokenProperties = "TokenProperties"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .token)
        token = tokenDecoded
        let tokenPropertiesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .tokenProperties)
        var tokenPropertiesDecoded0:[Swift.String]? = nil
        if let tokenPropertiesContainer = tokenPropertiesContainer {
            tokenPropertiesDecoded0 = [Swift.String]()
            for string0 in tokenPropertiesContainer {
                if let string0 = string0 {
                    tokenPropertiesDecoded0?.append(string0)
                }
            }
        }
        tokenProperties = tokenPropertiesDecoded0
    }
}
