// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct GetLicenseConfigurationOutputResponse: Swift.Equatable {
    /// Automated discovery information.
    public var automatedDiscoveryInformation: LicenseManagerClientTypes.AutomatedDiscoveryInformation?
    /// Summaries of the licenses consumed by resources.
    public var consumedLicenseSummaryList: [LicenseManagerClientTypes.ConsumedLicenseSummary]?
    /// Number of licenses assigned to resources.
    public var consumedLicenses: Swift.Int?
    /// Description of the license configuration.
    public var description: Swift.String?
    /// When true, disassociates a resource when software is uninstalled.
    public var disassociateWhenNotFound: Swift.Bool?
    /// Amazon Resource Name (ARN) of the license configuration.
    public var licenseConfigurationArn: Swift.String?
    /// Unique ID for the license configuration.
    public var licenseConfigurationId: Swift.String?
    /// Number of available licenses.
    public var licenseCount: Swift.Int?
    /// Sets the number of available licenses as a hard limit.
    public var licenseCountHardLimit: Swift.Bool?
    /// Dimension for which the licenses are counted.
    public var licenseCountingType: LicenseManagerClientTypes.LicenseCountingType?
    /// License rules.
    public var licenseRules: [Swift.String]?
    /// Summaries of the managed resources.
    public var managedResourceSummaryList: [LicenseManagerClientTypes.ManagedResourceSummary]?
    /// Name of the license configuration.
    public var name: Swift.String?
    /// Account ID of the owner of the license configuration.
    public var ownerAccountId: Swift.String?
    /// Product information.
    public var productInformationList: [LicenseManagerClientTypes.ProductInformation]?
    /// License configuration status.
    public var status: Swift.String?
    /// Tags for the license configuration.
    public var tags: [LicenseManagerClientTypes.Tag]?

    public init (
        automatedDiscoveryInformation: LicenseManagerClientTypes.AutomatedDiscoveryInformation? = nil,
        consumedLicenseSummaryList: [LicenseManagerClientTypes.ConsumedLicenseSummary]? = nil,
        consumedLicenses: Swift.Int? = nil,
        description: Swift.String? = nil,
        disassociateWhenNotFound: Swift.Bool? = nil,
        licenseConfigurationArn: Swift.String? = nil,
        licenseConfigurationId: Swift.String? = nil,
        licenseCount: Swift.Int? = nil,
        licenseCountHardLimit: Swift.Bool? = nil,
        licenseCountingType: LicenseManagerClientTypes.LicenseCountingType? = nil,
        licenseRules: [Swift.String]? = nil,
        managedResourceSummaryList: [LicenseManagerClientTypes.ManagedResourceSummary]? = nil,
        name: Swift.String? = nil,
        ownerAccountId: Swift.String? = nil,
        productInformationList: [LicenseManagerClientTypes.ProductInformation]? = nil,
        status: Swift.String? = nil,
        tags: [LicenseManagerClientTypes.Tag]? = nil
    )
    {
        self.automatedDiscoveryInformation = automatedDiscoveryInformation
        self.consumedLicenseSummaryList = consumedLicenseSummaryList
        self.consumedLicenses = consumedLicenses
        self.description = description
        self.disassociateWhenNotFound = disassociateWhenNotFound
        self.licenseConfigurationArn = licenseConfigurationArn
        self.licenseConfigurationId = licenseConfigurationId
        self.licenseCount = licenseCount
        self.licenseCountHardLimit = licenseCountHardLimit
        self.licenseCountingType = licenseCountingType
        self.licenseRules = licenseRules
        self.managedResourceSummaryList = managedResourceSummaryList
        self.name = name
        self.ownerAccountId = ownerAccountId
        self.productInformationList = productInformationList
        self.status = status
        self.tags = tags
    }
}
