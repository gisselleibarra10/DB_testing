// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListLicenseVersionsOutputResponseBody: Swift.Equatable {
    let licenses: [LicenseManagerClientTypes.License]?
    let nextToken: Swift.String?
}

extension ListLicenseVersionsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case licenses = "Licenses"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let licensesContainer = try containerValues.decodeIfPresent([LicenseManagerClientTypes.License?].self, forKey: .licenses)
        var licensesDecoded0:[LicenseManagerClientTypes.License]? = nil
        if let licensesContainer = licensesContainer {
            licensesDecoded0 = [LicenseManagerClientTypes.License]()
            for structure0 in licensesContainer {
                if let structure0 = structure0 {
                    licensesDecoded0?.append(structure0)
                }
            }
        }
        licenses = licensesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
