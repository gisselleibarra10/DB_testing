// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateLicenseInputBody: Swift.Equatable {
    let licenseName: Swift.String?
    let productName: Swift.String?
    let productSKU: Swift.String?
    let issuer: LicenseManagerClientTypes.Issuer?
    let homeRegion: Swift.String?
    let validity: LicenseManagerClientTypes.DatetimeRange?
    let entitlements: [LicenseManagerClientTypes.Entitlement]?
    let beneficiary: Swift.String?
    let consumptionConfiguration: LicenseManagerClientTypes.ConsumptionConfiguration?
    let licenseMetadata: [LicenseManagerClientTypes.Metadata]?
    let clientToken: Swift.String?
}

extension CreateLicenseInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case beneficiary = "Beneficiary"
        case clientToken = "ClientToken"
        case consumptionConfiguration = "ConsumptionConfiguration"
        case entitlements = "Entitlements"
        case homeRegion = "HomeRegion"
        case issuer = "Issuer"
        case licenseMetadata = "LicenseMetadata"
        case licenseName = "LicenseName"
        case productName = "ProductName"
        case productSKU = "ProductSKU"
        case validity = "Validity"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let licenseNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .licenseName)
        licenseName = licenseNameDecoded
        let productNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .productName)
        productName = productNameDecoded
        let productSKUDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .productSKU)
        productSKU = productSKUDecoded
        let issuerDecoded = try containerValues.decodeIfPresent(LicenseManagerClientTypes.Issuer.self, forKey: .issuer)
        issuer = issuerDecoded
        let homeRegionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .homeRegion)
        homeRegion = homeRegionDecoded
        let validityDecoded = try containerValues.decodeIfPresent(LicenseManagerClientTypes.DatetimeRange.self, forKey: .validity)
        validity = validityDecoded
        let entitlementsContainer = try containerValues.decodeIfPresent([LicenseManagerClientTypes.Entitlement?].self, forKey: .entitlements)
        var entitlementsDecoded0:[LicenseManagerClientTypes.Entitlement]? = nil
        if let entitlementsContainer = entitlementsContainer {
            entitlementsDecoded0 = [LicenseManagerClientTypes.Entitlement]()
            for structure0 in entitlementsContainer {
                if let structure0 = structure0 {
                    entitlementsDecoded0?.append(structure0)
                }
            }
        }
        entitlements = entitlementsDecoded0
        let beneficiaryDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .beneficiary)
        beneficiary = beneficiaryDecoded
        let consumptionConfigurationDecoded = try containerValues.decodeIfPresent(LicenseManagerClientTypes.ConsumptionConfiguration.self, forKey: .consumptionConfiguration)
        consumptionConfiguration = consumptionConfigurationDecoded
        let licenseMetadataContainer = try containerValues.decodeIfPresent([LicenseManagerClientTypes.Metadata?].self, forKey: .licenseMetadata)
        var licenseMetadataDecoded0:[LicenseManagerClientTypes.Metadata]? = nil
        if let licenseMetadataContainer = licenseMetadataContainer {
            licenseMetadataDecoded0 = [LicenseManagerClientTypes.Metadata]()
            for structure0 in licenseMetadataContainer {
                if let structure0 = structure0 {
                    licenseMetadataDecoded0?.append(structure0)
                }
            }
        }
        licenseMetadata = licenseMetadataDecoded0
        let clientTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientToken)
        clientToken = clientTokenDecoded
    }
}
