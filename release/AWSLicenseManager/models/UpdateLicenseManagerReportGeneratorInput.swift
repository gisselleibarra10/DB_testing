// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct UpdateLicenseManagerReportGeneratorInput: Swift.Equatable {
    /// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.
    /// This member is required.
    public var clientToken: Swift.String?
    /// Description of the report generator.
    public var description: Swift.String?
    /// Amazon Resource Name (ARN) of the report generator to update.
    /// This member is required.
    public var licenseManagerReportGeneratorArn: Swift.String?
    /// The report context.
    /// This member is required.
    public var reportContext: LicenseManagerClientTypes.ReportContext?
    /// Frequency by which reports are generated.
    /// This member is required.
    public var reportFrequency: LicenseManagerClientTypes.ReportFrequency?
    /// Name of the report generator.
    /// This member is required.
    public var reportGeneratorName: Swift.String?
    /// Type of reports to generate. The following report types are supported:
    ///
    /// * License configuration report - Reports the number and details of consumed licenses for a license configuration.
    ///
    /// * Resource report - Reports the tracked licenses and resource consumption for a license configuration.
    /// This member is required.
    public var type: [LicenseManagerClientTypes.ReportType]?

    public init (
        clientToken: Swift.String? = nil,
        description: Swift.String? = nil,
        licenseManagerReportGeneratorArn: Swift.String? = nil,
        reportContext: LicenseManagerClientTypes.ReportContext? = nil,
        reportFrequency: LicenseManagerClientTypes.ReportFrequency? = nil,
        reportGeneratorName: Swift.String? = nil,
        type: [LicenseManagerClientTypes.ReportType]? = nil
    )
    {
        self.clientToken = clientToken
        self.description = description
        self.licenseManagerReportGeneratorArn = licenseManagerReportGeneratorArn
        self.reportContext = reportContext
        self.reportFrequency = reportFrequency
        self.reportGeneratorName = reportGeneratorName
        self.type = type
    }
}
