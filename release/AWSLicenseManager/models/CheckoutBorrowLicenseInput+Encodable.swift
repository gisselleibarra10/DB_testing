// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CheckoutBorrowLicenseInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case checkoutMetadata = "CheckoutMetadata"
        case clientToken = "ClientToken"
        case digitalSignatureMethod = "DigitalSignatureMethod"
        case entitlements = "Entitlements"
        case licenseArn = "LicenseArn"
        case nodeId = "NodeId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let checkoutMetadata = checkoutMetadata {
            var checkoutMetadataContainer = encodeContainer.nestedUnkeyedContainer(forKey: .checkoutMetadata)
            for metadatalist0 in checkoutMetadata {
                try checkoutMetadataContainer.encode(metadatalist0)
            }
        }
        if let clientToken = self.clientToken {
            try encodeContainer.encode(clientToken, forKey: .clientToken)
        }
        if let digitalSignatureMethod = self.digitalSignatureMethod {
            try encodeContainer.encode(digitalSignatureMethod.rawValue, forKey: .digitalSignatureMethod)
        }
        if let entitlements = entitlements {
            var entitlementsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .entitlements)
            for entitlementdatalist0 in entitlements {
                try entitlementsContainer.encode(entitlementdatalist0)
            }
        }
        if let licenseArn = self.licenseArn {
            try encodeContainer.encode(licenseArn, forKey: .licenseArn)
        }
        if let nodeId = self.nodeId {
            try encodeContainer.encode(nodeId, forKey: .nodeId)
        }
    }
}
