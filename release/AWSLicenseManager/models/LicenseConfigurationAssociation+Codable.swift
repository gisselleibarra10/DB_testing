// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension LicenseManagerClientTypes.LicenseConfigurationAssociation: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case amiAssociationScope = "AmiAssociationScope"
        case associationTime = "AssociationTime"
        case resourceArn = "ResourceArn"
        case resourceOwnerId = "ResourceOwnerId"
        case resourceType = "ResourceType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let amiAssociationScope = self.amiAssociationScope {
            try encodeContainer.encode(amiAssociationScope, forKey: .amiAssociationScope)
        }
        if let associationTime = self.associationTime {
            try encodeContainer.encode(associationTime.timeIntervalSince1970, forKey: .associationTime)
        }
        if let resourceArn = self.resourceArn {
            try encodeContainer.encode(resourceArn, forKey: .resourceArn)
        }
        if let resourceOwnerId = self.resourceOwnerId {
            try encodeContainer.encode(resourceOwnerId, forKey: .resourceOwnerId)
        }
        if let resourceType = self.resourceType {
            try encodeContainer.encode(resourceType.rawValue, forKey: .resourceType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceArn)
        resourceArn = resourceArnDecoded
        let resourceTypeDecoded = try containerValues.decodeIfPresent(LicenseManagerClientTypes.ResourceType.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let resourceOwnerIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceOwnerId)
        resourceOwnerId = resourceOwnerIdDecoded
        let associationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .associationTime)
        associationTime = associationTimeDecoded
        let amiAssociationScopeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .amiAssociationScope)
        amiAssociationScope = amiAssociationScopeDecoded
    }
}
