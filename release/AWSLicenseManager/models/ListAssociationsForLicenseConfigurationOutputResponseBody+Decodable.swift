// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListAssociationsForLicenseConfigurationOutputResponseBody: Swift.Equatable {
    let licenseConfigurationAssociations: [LicenseManagerClientTypes.LicenseConfigurationAssociation]?
    let nextToken: Swift.String?
}

extension ListAssociationsForLicenseConfigurationOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case licenseConfigurationAssociations = "LicenseConfigurationAssociations"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let licenseConfigurationAssociationsContainer = try containerValues.decodeIfPresent([LicenseManagerClientTypes.LicenseConfigurationAssociation?].self, forKey: .licenseConfigurationAssociations)
        var licenseConfigurationAssociationsDecoded0:[LicenseManagerClientTypes.LicenseConfigurationAssociation]? = nil
        if let licenseConfigurationAssociationsContainer = licenseConfigurationAssociationsContainer {
            licenseConfigurationAssociationsDecoded0 = [LicenseManagerClientTypes.LicenseConfigurationAssociation]()
            for structure0 in licenseConfigurationAssociationsContainer {
                if let structure0 = structure0 {
                    licenseConfigurationAssociationsDecoded0?.append(structure0)
                }
            }
        }
        licenseConfigurationAssociations = licenseConfigurationAssociationsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
