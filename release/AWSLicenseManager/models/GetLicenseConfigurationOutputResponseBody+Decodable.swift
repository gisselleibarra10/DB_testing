// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetLicenseConfigurationOutputResponseBody: Swift.Equatable {
    let licenseConfigurationId: Swift.String?
    let licenseConfigurationArn: Swift.String?
    let name: Swift.String?
    let description: Swift.String?
    let licenseCountingType: LicenseManagerClientTypes.LicenseCountingType?
    let licenseRules: [Swift.String]?
    let licenseCount: Swift.Int?
    let licenseCountHardLimit: Swift.Bool?
    let consumedLicenses: Swift.Int?
    let status: Swift.String?
    let ownerAccountId: Swift.String?
    let consumedLicenseSummaryList: [LicenseManagerClientTypes.ConsumedLicenseSummary]?
    let managedResourceSummaryList: [LicenseManagerClientTypes.ManagedResourceSummary]?
    let tags: [LicenseManagerClientTypes.Tag]?
    let productInformationList: [LicenseManagerClientTypes.ProductInformation]?
    let automatedDiscoveryInformation: LicenseManagerClientTypes.AutomatedDiscoveryInformation?
    let disassociateWhenNotFound: Swift.Bool?
}

extension GetLicenseConfigurationOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case automatedDiscoveryInformation = "AutomatedDiscoveryInformation"
        case consumedLicenseSummaryList = "ConsumedLicenseSummaryList"
        case consumedLicenses = "ConsumedLicenses"
        case description = "Description"
        case disassociateWhenNotFound = "DisassociateWhenNotFound"
        case licenseConfigurationArn = "LicenseConfigurationArn"
        case licenseConfigurationId = "LicenseConfigurationId"
        case licenseCount = "LicenseCount"
        case licenseCountHardLimit = "LicenseCountHardLimit"
        case licenseCountingType = "LicenseCountingType"
        case licenseRules = "LicenseRules"
        case managedResourceSummaryList = "ManagedResourceSummaryList"
        case name = "Name"
        case ownerAccountId = "OwnerAccountId"
        case productInformationList = "ProductInformationList"
        case status = "Status"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let licenseConfigurationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .licenseConfigurationId)
        licenseConfigurationId = licenseConfigurationIdDecoded
        let licenseConfigurationArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .licenseConfigurationArn)
        licenseConfigurationArn = licenseConfigurationArnDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let licenseCountingTypeDecoded = try containerValues.decodeIfPresent(LicenseManagerClientTypes.LicenseCountingType.self, forKey: .licenseCountingType)
        licenseCountingType = licenseCountingTypeDecoded
        let licenseRulesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .licenseRules)
        var licenseRulesDecoded0:[Swift.String]? = nil
        if let licenseRulesContainer = licenseRulesContainer {
            licenseRulesDecoded0 = [Swift.String]()
            for string0 in licenseRulesContainer {
                if let string0 = string0 {
                    licenseRulesDecoded0?.append(string0)
                }
            }
        }
        licenseRules = licenseRulesDecoded0
        let licenseCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .licenseCount)
        licenseCount = licenseCountDecoded
        let licenseCountHardLimitDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .licenseCountHardLimit)
        licenseCountHardLimit = licenseCountHardLimitDecoded
        let consumedLicensesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .consumedLicenses)
        consumedLicenses = consumedLicensesDecoded
        let statusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .status)
        status = statusDecoded
        let ownerAccountIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ownerAccountId)
        ownerAccountId = ownerAccountIdDecoded
        let consumedLicenseSummaryListContainer = try containerValues.decodeIfPresent([LicenseManagerClientTypes.ConsumedLicenseSummary?].self, forKey: .consumedLicenseSummaryList)
        var consumedLicenseSummaryListDecoded0:[LicenseManagerClientTypes.ConsumedLicenseSummary]? = nil
        if let consumedLicenseSummaryListContainer = consumedLicenseSummaryListContainer {
            consumedLicenseSummaryListDecoded0 = [LicenseManagerClientTypes.ConsumedLicenseSummary]()
            for structure0 in consumedLicenseSummaryListContainer {
                if let structure0 = structure0 {
                    consumedLicenseSummaryListDecoded0?.append(structure0)
                }
            }
        }
        consumedLicenseSummaryList = consumedLicenseSummaryListDecoded0
        let managedResourceSummaryListContainer = try containerValues.decodeIfPresent([LicenseManagerClientTypes.ManagedResourceSummary?].self, forKey: .managedResourceSummaryList)
        var managedResourceSummaryListDecoded0:[LicenseManagerClientTypes.ManagedResourceSummary]? = nil
        if let managedResourceSummaryListContainer = managedResourceSummaryListContainer {
            managedResourceSummaryListDecoded0 = [LicenseManagerClientTypes.ManagedResourceSummary]()
            for structure0 in managedResourceSummaryListContainer {
                if let structure0 = structure0 {
                    managedResourceSummaryListDecoded0?.append(structure0)
                }
            }
        }
        managedResourceSummaryList = managedResourceSummaryListDecoded0
        let tagsContainer = try containerValues.decodeIfPresent([LicenseManagerClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[LicenseManagerClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [LicenseManagerClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let productInformationListContainer = try containerValues.decodeIfPresent([LicenseManagerClientTypes.ProductInformation?].self, forKey: .productInformationList)
        var productInformationListDecoded0:[LicenseManagerClientTypes.ProductInformation]? = nil
        if let productInformationListContainer = productInformationListContainer {
            productInformationListDecoded0 = [LicenseManagerClientTypes.ProductInformation]()
            for structure0 in productInformationListContainer {
                if let structure0 = structure0 {
                    productInformationListDecoded0?.append(structure0)
                }
            }
        }
        productInformationList = productInformationListDecoded0
        let automatedDiscoveryInformationDecoded = try containerValues.decodeIfPresent(LicenseManagerClientTypes.AutomatedDiscoveryInformation.self, forKey: .automatedDiscoveryInformation)
        automatedDiscoveryInformation = automatedDiscoveryInformationDecoded
        let disassociateWhenNotFoundDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .disassociateWhenNotFound)
        disassociateWhenNotFound = disassociateWhenNotFoundDecoded
    }
}
