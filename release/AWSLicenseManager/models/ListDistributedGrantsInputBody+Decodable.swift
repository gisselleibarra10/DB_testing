// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListDistributedGrantsInputBody: Swift.Equatable {
    let grantArns: [Swift.String]?
    let filters: [LicenseManagerClientTypes.Filter]?
    let nextToken: Swift.String?
    let maxResults: Swift.Int?
}

extension ListDistributedGrantsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filters = "Filters"
        case grantArns = "GrantArns"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let grantArnsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .grantArns)
        var grantArnsDecoded0:[Swift.String]? = nil
        if let grantArnsContainer = grantArnsContainer {
            grantArnsDecoded0 = [Swift.String]()
            for string0 in grantArnsContainer {
                if let string0 = string0 {
                    grantArnsDecoded0?.append(string0)
                }
            }
        }
        grantArns = grantArnsDecoded0
        let filtersContainer = try containerValues.decodeIfPresent([LicenseManagerClientTypes.Filter?].self, forKey: .filters)
        var filtersDecoded0:[LicenseManagerClientTypes.Filter]? = nil
        if let filtersContainer = filtersContainer {
            filtersDecoded0 = [LicenseManagerClientTypes.Filter]()
            for structure0 in filtersContainer {
                if let structure0 = structure0 {
                    filtersDecoded0?.append(structure0)
                }
            }
        }
        filters = filtersDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
    }
}
