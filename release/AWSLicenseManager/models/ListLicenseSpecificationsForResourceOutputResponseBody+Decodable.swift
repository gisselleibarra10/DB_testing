// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListLicenseSpecificationsForResourceOutputResponseBody: Swift.Equatable {
    let licenseSpecifications: [LicenseManagerClientTypes.LicenseSpecification]?
    let nextToken: Swift.String?
}

extension ListLicenseSpecificationsForResourceOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case licenseSpecifications = "LicenseSpecifications"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let licenseSpecificationsContainer = try containerValues.decodeIfPresent([LicenseManagerClientTypes.LicenseSpecification?].self, forKey: .licenseSpecifications)
        var licenseSpecificationsDecoded0:[LicenseManagerClientTypes.LicenseSpecification]? = nil
        if let licenseSpecificationsContainer = licenseSpecificationsContainer {
            licenseSpecificationsDecoded0 = [LicenseManagerClientTypes.LicenseSpecification]()
            for structure0 in licenseSpecificationsContainer {
                if let structure0 = structure0 {
                    licenseSpecificationsDecoded0?.append(structure0)
                }
            }
        }
        licenseSpecifications = licenseSpecificationsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
