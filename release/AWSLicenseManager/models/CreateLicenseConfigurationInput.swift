// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct CreateLicenseConfigurationInput: Swift.Equatable {
    /// Description of the license configuration.
    public var description: Swift.String?
    /// When true, disassociates a resource when software is uninstalled.
    public var disassociateWhenNotFound: Swift.Bool?
    /// Number of licenses managed by the license configuration.
    public var licenseCount: Swift.Int?
    /// Indicates whether hard or soft license enforcement is used. Exceeding a hard limit blocks the launch of new instances.
    public var licenseCountHardLimit: Swift.Bool?
    /// Dimension used to track the license inventory.
    /// This member is required.
    public var licenseCountingType: LicenseManagerClientTypes.LicenseCountingType?
    /// License rules. The syntax is #name=value (for example, #allowedTenancy=EC2-DedicatedHost). The available rules vary by dimension, as follows.
    ///
    /// * Cores dimension: allowedTenancy | licenseAffinityToHost | maximumCores | minimumCores
    ///
    /// * Instances dimension: allowedTenancy | maximumCores | minimumCores | maximumSockets | minimumSockets | maximumVcpus | minimumVcpus
    ///
    /// * Sockets dimension: allowedTenancy | licenseAffinityToHost | maximumSockets | minimumSockets
    ///
    /// * vCPUs dimension: allowedTenancy | honorVcpuOptimization | maximumVcpus | minimumVcpus
    ///
    ///
    /// The unit for licenseAffinityToHost is days and the range is 1 to 180. The possible values for allowedTenancy are EC2-Default, EC2-DedicatedHost, and EC2-DedicatedInstance. The possible values for honorVcpuOptimization are True and False.
    public var licenseRules: [Swift.String]?
    /// Name of the license configuration.
    /// This member is required.
    public var name: Swift.String?
    /// Product information.
    public var productInformationList: [LicenseManagerClientTypes.ProductInformation]?
    /// Tags to add to the license configuration.
    public var tags: [LicenseManagerClientTypes.Tag]?

    public init (
        description: Swift.String? = nil,
        disassociateWhenNotFound: Swift.Bool? = nil,
        licenseCount: Swift.Int? = nil,
        licenseCountHardLimit: Swift.Bool? = nil,
        licenseCountingType: LicenseManagerClientTypes.LicenseCountingType? = nil,
        licenseRules: [Swift.String]? = nil,
        name: Swift.String? = nil,
        productInformationList: [LicenseManagerClientTypes.ProductInformation]? = nil,
        tags: [LicenseManagerClientTypes.Tag]? = nil
    )
    {
        self.description = description
        self.disassociateWhenNotFound = disassociateWhenNotFound
        self.licenseCount = licenseCount
        self.licenseCountHardLimit = licenseCountHardLimit
        self.licenseCountingType = licenseCountingType
        self.licenseRules = licenseRules
        self.name = name
        self.productInformationList = productInformationList
        self.tags = tags
    }
}
