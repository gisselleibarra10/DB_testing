// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateLicenseConfigurationInputBody: Swift.Equatable {
    let name: Swift.String?
    let description: Swift.String?
    let licenseCountingType: LicenseManagerClientTypes.LicenseCountingType?
    let licenseCount: Swift.Int?
    let licenseCountHardLimit: Swift.Bool?
    let licenseRules: [Swift.String]?
    let tags: [LicenseManagerClientTypes.Tag]?
    let disassociateWhenNotFound: Swift.Bool?
    let productInformationList: [LicenseManagerClientTypes.ProductInformation]?
}

extension CreateLicenseConfigurationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description = "Description"
        case disassociateWhenNotFound = "DisassociateWhenNotFound"
        case licenseCount = "LicenseCount"
        case licenseCountHardLimit = "LicenseCountHardLimit"
        case licenseCountingType = "LicenseCountingType"
        case licenseRules = "LicenseRules"
        case name = "Name"
        case productInformationList = "ProductInformationList"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let licenseCountingTypeDecoded = try containerValues.decodeIfPresent(LicenseManagerClientTypes.LicenseCountingType.self, forKey: .licenseCountingType)
        licenseCountingType = licenseCountingTypeDecoded
        let licenseCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .licenseCount)
        licenseCount = licenseCountDecoded
        let licenseCountHardLimitDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .licenseCountHardLimit)
        licenseCountHardLimit = licenseCountHardLimitDecoded
        let licenseRulesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .licenseRules)
        var licenseRulesDecoded0:[Swift.String]? = nil
        if let licenseRulesContainer = licenseRulesContainer {
            licenseRulesDecoded0 = [Swift.String]()
            for string0 in licenseRulesContainer {
                if let string0 = string0 {
                    licenseRulesDecoded0?.append(string0)
                }
            }
        }
        licenseRules = licenseRulesDecoded0
        let tagsContainer = try containerValues.decodeIfPresent([LicenseManagerClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[LicenseManagerClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [LicenseManagerClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let disassociateWhenNotFoundDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .disassociateWhenNotFound)
        disassociateWhenNotFound = disassociateWhenNotFoundDecoded
        let productInformationListContainer = try containerValues.decodeIfPresent([LicenseManagerClientTypes.ProductInformation?].self, forKey: .productInformationList)
        var productInformationListDecoded0:[LicenseManagerClientTypes.ProductInformation]? = nil
        if let productInformationListContainer = productInformationListContainer {
            productInformationListDecoded0 = [LicenseManagerClientTypes.ProductInformation]()
            for structure0 in productInformationListContainer {
                if let structure0 = structure0 {
                    productInformationListDecoded0?.append(structure0)
                }
            }
        }
        productInformationList = productInformationListDecoded0
    }
}
