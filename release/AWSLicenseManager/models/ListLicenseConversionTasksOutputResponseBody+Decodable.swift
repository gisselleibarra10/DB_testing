// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListLicenseConversionTasksOutputResponseBody: Swift.Equatable {
    let licenseConversionTasks: [LicenseManagerClientTypes.LicenseConversionTask]?
    let nextToken: Swift.String?
}

extension ListLicenseConversionTasksOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case licenseConversionTasks = "LicenseConversionTasks"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let licenseConversionTasksContainer = try containerValues.decodeIfPresent([LicenseManagerClientTypes.LicenseConversionTask?].self, forKey: .licenseConversionTasks)
        var licenseConversionTasksDecoded0:[LicenseManagerClientTypes.LicenseConversionTask]? = nil
        if let licenseConversionTasksContainer = licenseConversionTasksContainer {
            licenseConversionTasksDecoded0 = [LicenseManagerClientTypes.LicenseConversionTask]()
            for structure0 in licenseConversionTasksContainer {
                if let structure0 = structure0 {
                    licenseConversionTasksDecoded0?.append(structure0)
                }
            }
        }
        licenseConversionTasks = licenseConversionTasksDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
