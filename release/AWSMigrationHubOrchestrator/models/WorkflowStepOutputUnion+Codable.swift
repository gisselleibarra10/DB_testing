// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension MigrationHubOrchestratorClientTypes.WorkflowStepOutputUnion: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case integervalue = "integerValue"
        case listofstringvalue = "listOfStringValue"
        case sdkUnknown
        case stringvalue = "stringValue"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        switch self {
            case let .integervalue(integervalue):
                try container.encode(integervalue, forKey: .integervalue)
            case let .listofstringvalue(listofstringvalue):
                var listofstringvalueContainer = container.nestedUnkeyedContainer(forKey: .listofstringvalue)
                for stringlist0 in listofstringvalue {
                    try listofstringvalueContainer.encode(stringlist0)
                }
            case let .stringvalue(stringvalue):
                try container.encode(stringvalue, forKey: .stringvalue)
            case let .sdkUnknown(sdkUnknown):
                try container.encode(sdkUnknown, forKey: .sdkUnknown)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let values = try decoder.container(keyedBy: CodingKeys.self)
        let integervalueDecoded = try values.decodeIfPresent(Swift.Int.self, forKey: .integervalue)
        if let integervalue = integervalueDecoded {
            self = .integervalue(integervalue)
            return
        }
        let stringvalueDecoded = try values.decodeIfPresent(Swift.String.self, forKey: .stringvalue)
        if let stringvalue = stringvalueDecoded {
            self = .stringvalue(stringvalue)
            return
        }
        let listofstringvalueContainer = try values.decodeIfPresent([Swift.String?].self, forKey: .listofstringvalue)
        var listofstringvalueDecoded0:[Swift.String]? = nil
        if let listofstringvalueContainer = listofstringvalueContainer {
            listofstringvalueDecoded0 = [Swift.String]()
            for string0 in listofstringvalueContainer {
                if let string0 = string0 {
                    listofstringvalueDecoded0?.append(string0)
                }
            }
        }
        if let listofstringvalue = listofstringvalueDecoded0 {
            self = .listofstringvalue(listofstringvalue)
            return
        }
        self = .sdkUnknown("")
    }
}
