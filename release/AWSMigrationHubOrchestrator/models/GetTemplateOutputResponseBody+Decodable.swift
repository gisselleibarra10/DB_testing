// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetTemplateOutputResponseBody: Swift.Equatable {
    let id: Swift.String?
    let name: Swift.String?
    let description: Swift.String?
    let inputs: [MigrationHubOrchestratorClientTypes.TemplateInput]?
    let tools: [MigrationHubOrchestratorClientTypes.Tool]?
    let status: MigrationHubOrchestratorClientTypes.TemplateStatus?
    let creationTime: ClientRuntime.Date?
}

extension GetTemplateOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTime
        case description
        case id
        case inputs
        case name
        case status
        case tools
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let inputsContainer = try containerValues.decodeIfPresent([MigrationHubOrchestratorClientTypes.TemplateInput?].self, forKey: .inputs)
        var inputsDecoded0:[MigrationHubOrchestratorClientTypes.TemplateInput]? = nil
        if let inputsContainer = inputsContainer {
            inputsDecoded0 = [MigrationHubOrchestratorClientTypes.TemplateInput]()
            for structure0 in inputsContainer {
                if let structure0 = structure0 {
                    inputsDecoded0?.append(structure0)
                }
            }
        }
        inputs = inputsDecoded0
        let toolsContainer = try containerValues.decodeIfPresent([MigrationHubOrchestratorClientTypes.Tool?].self, forKey: .tools)
        var toolsDecoded0:[MigrationHubOrchestratorClientTypes.Tool]? = nil
        if let toolsContainer = toolsContainer {
            toolsDecoded0 = [MigrationHubOrchestratorClientTypes.Tool]()
            for structure0 in toolsContainer {
                if let structure0 = structure0 {
                    toolsDecoded0?.append(structure0)
                }
            }
        }
        tools = toolsDecoded0
        let statusDecoded = try containerValues.decodeIfPresent(MigrationHubOrchestratorClientTypes.TemplateStatus.self, forKey: .status)
        status = statusDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
    }
}
