// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct UpdateWorkflowStepInputBody: Swift.Equatable {
    let stepGroupId: Swift.String?
    let workflowId: Swift.String?
    let name: Swift.String?
    let description: Swift.String?
    let stepActionType: MigrationHubOrchestratorClientTypes.StepActionType?
    let workflowStepAutomationConfiguration: MigrationHubOrchestratorClientTypes.WorkflowStepAutomationConfiguration?
    let stepTarget: [Swift.String]?
    let outputs: [MigrationHubOrchestratorClientTypes.WorkflowStepOutput]?
    let previous: [Swift.String]?
    let next: [Swift.String]?
    let status: MigrationHubOrchestratorClientTypes.StepStatus?
}

extension UpdateWorkflowStepInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description
        case name
        case next
        case outputs
        case previous
        case status
        case stepActionType
        case stepGroupId
        case stepTarget
        case workflowId
        case workflowStepAutomationConfiguration
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let stepGroupIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stepGroupId)
        stepGroupId = stepGroupIdDecoded
        let workflowIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .workflowId)
        workflowId = workflowIdDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let stepActionTypeDecoded = try containerValues.decodeIfPresent(MigrationHubOrchestratorClientTypes.StepActionType.self, forKey: .stepActionType)
        stepActionType = stepActionTypeDecoded
        let workflowStepAutomationConfigurationDecoded = try containerValues.decodeIfPresent(MigrationHubOrchestratorClientTypes.WorkflowStepAutomationConfiguration.self, forKey: .workflowStepAutomationConfiguration)
        workflowStepAutomationConfiguration = workflowStepAutomationConfigurationDecoded
        let stepTargetContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .stepTarget)
        var stepTargetDecoded0:[Swift.String]? = nil
        if let stepTargetContainer = stepTargetContainer {
            stepTargetDecoded0 = [Swift.String]()
            for string0 in stepTargetContainer {
                if let string0 = string0 {
                    stepTargetDecoded0?.append(string0)
                }
            }
        }
        stepTarget = stepTargetDecoded0
        let outputsContainer = try containerValues.decodeIfPresent([MigrationHubOrchestratorClientTypes.WorkflowStepOutput?].self, forKey: .outputs)
        var outputsDecoded0:[MigrationHubOrchestratorClientTypes.WorkflowStepOutput]? = nil
        if let outputsContainer = outputsContainer {
            outputsDecoded0 = [MigrationHubOrchestratorClientTypes.WorkflowStepOutput]()
            for structure0 in outputsContainer {
                if let structure0 = structure0 {
                    outputsDecoded0?.append(structure0)
                }
            }
        }
        outputs = outputsDecoded0
        let previousContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .previous)
        var previousDecoded0:[Swift.String]? = nil
        if let previousContainer = previousContainer {
            previousDecoded0 = [Swift.String]()
            for string0 in previousContainer {
                if let string0 = string0 {
                    previousDecoded0?.append(string0)
                }
            }
        }
        previous = previousDecoded0
        let nextContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .next)
        var nextDecoded0:[Swift.String]? = nil
        if let nextContainer = nextContainer {
            nextDecoded0 = [Swift.String]()
            for string0 in nextContainer {
                if let string0 = string0 {
                    nextDecoded0?.append(string0)
                }
            }
        }
        next = nextDecoded0
        let statusDecoded = try containerValues.decodeIfPresent(MigrationHubOrchestratorClientTypes.StepStatus.self, forKey: .status)
        status = statusDecoded
    }
}
