// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension MigrationHubOrchestratorClientTypes.WorkflowStepSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description
        case name
        case next
        case noOfSrvCompleted
        case noOfSrvFailed
        case owner
        case previous
        case scriptLocation
        case status
        case statusMessage
        case stepActionType
        case stepId
        case totalNoOfSrv
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let next = next {
            var nextContainer = encodeContainer.nestedUnkeyedContainer(forKey: .next)
            for stringlist0 in next {
                try nextContainer.encode(stringlist0)
            }
        }
        if let noOfSrvCompleted = self.noOfSrvCompleted {
            try encodeContainer.encode(noOfSrvCompleted, forKey: .noOfSrvCompleted)
        }
        if let noOfSrvFailed = self.noOfSrvFailed {
            try encodeContainer.encode(noOfSrvFailed, forKey: .noOfSrvFailed)
        }
        if let owner = self.owner {
            try encodeContainer.encode(owner.rawValue, forKey: .owner)
        }
        if let previous = previous {
            var previousContainer = encodeContainer.nestedUnkeyedContainer(forKey: .previous)
            for stringlist0 in previous {
                try previousContainer.encode(stringlist0)
            }
        }
        if let scriptLocation = self.scriptLocation {
            try encodeContainer.encode(scriptLocation, forKey: .scriptLocation)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let statusMessage = self.statusMessage {
            try encodeContainer.encode(statusMessage, forKey: .statusMessage)
        }
        if let stepActionType = self.stepActionType {
            try encodeContainer.encode(stepActionType.rawValue, forKey: .stepActionType)
        }
        if let stepId = self.stepId {
            try encodeContainer.encode(stepId, forKey: .stepId)
        }
        if let totalNoOfSrv = self.totalNoOfSrv {
            try encodeContainer.encode(totalNoOfSrv, forKey: .totalNoOfSrv)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let stepIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stepId)
        stepId = stepIdDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let stepActionTypeDecoded = try containerValues.decodeIfPresent(MigrationHubOrchestratorClientTypes.StepActionType.self, forKey: .stepActionType)
        stepActionType = stepActionTypeDecoded
        let ownerDecoded = try containerValues.decodeIfPresent(MigrationHubOrchestratorClientTypes.Owner.self, forKey: .owner)
        owner = ownerDecoded
        let previousContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .previous)
        var previousDecoded0:[Swift.String]? = nil
        if let previousContainer = previousContainer {
            previousDecoded0 = [Swift.String]()
            for string0 in previousContainer {
                if let string0 = string0 {
                    previousDecoded0?.append(string0)
                }
            }
        }
        previous = previousDecoded0
        let nextContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .next)
        var nextDecoded0:[Swift.String]? = nil
        if let nextContainer = nextContainer {
            nextDecoded0 = [Swift.String]()
            for string0 in nextContainer {
                if let string0 = string0 {
                    nextDecoded0?.append(string0)
                }
            }
        }
        next = nextDecoded0
        let statusDecoded = try containerValues.decodeIfPresent(MigrationHubOrchestratorClientTypes.StepStatus.self, forKey: .status)
        status = statusDecoded
        let statusMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .statusMessage)
        statusMessage = statusMessageDecoded
        let noOfSrvCompletedDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .noOfSrvCompleted)
        noOfSrvCompleted = noOfSrvCompletedDecoded
        let noOfSrvFailedDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .noOfSrvFailed)
        noOfSrvFailed = noOfSrvFailedDecoded
        let totalNoOfSrvDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .totalNoOfSrv)
        totalNoOfSrv = totalNoOfSrvDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let scriptLocationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .scriptLocation)
        scriptLocation = scriptLocationDecoded
    }
}
