// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetWorkflowStepOutputResponseBody: Swift.Equatable {
    let name: Swift.String?
    let stepGroupId: Swift.String?
    let workflowId: Swift.String?
    let stepId: Swift.String?
    let description: Swift.String?
    let stepActionType: MigrationHubOrchestratorClientTypes.StepActionType?
    let owner: MigrationHubOrchestratorClientTypes.Owner?
    let workflowStepAutomationConfiguration: MigrationHubOrchestratorClientTypes.WorkflowStepAutomationConfiguration?
    let stepTarget: [Swift.String]?
    let outputs: [MigrationHubOrchestratorClientTypes.WorkflowStepOutput]?
    let previous: [Swift.String]?
    let next: [Swift.String]?
    let status: MigrationHubOrchestratorClientTypes.StepStatus?
    let statusMessage: Swift.String?
    let scriptOutputLocation: Swift.String?
    let creationTime: ClientRuntime.Date?
    let lastStartTime: ClientRuntime.Date?
    let endTime: ClientRuntime.Date?
    let noOfSrvCompleted: Swift.Int?
    let noOfSrvFailed: Swift.Int?
    let totalNoOfSrv: Swift.Int?
}

extension GetWorkflowStepOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTime
        case description
        case endTime
        case lastStartTime
        case name
        case next
        case noOfSrvCompleted
        case noOfSrvFailed
        case outputs
        case owner
        case previous
        case scriptOutputLocation
        case status
        case statusMessage
        case stepActionType
        case stepGroupId
        case stepId
        case stepTarget
        case totalNoOfSrv
        case workflowId
        case workflowStepAutomationConfiguration
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let stepGroupIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stepGroupId)
        stepGroupId = stepGroupIdDecoded
        let workflowIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .workflowId)
        workflowId = workflowIdDecoded
        let stepIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stepId)
        stepId = stepIdDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let stepActionTypeDecoded = try containerValues.decodeIfPresent(MigrationHubOrchestratorClientTypes.StepActionType.self, forKey: .stepActionType)
        stepActionType = stepActionTypeDecoded
        let ownerDecoded = try containerValues.decodeIfPresent(MigrationHubOrchestratorClientTypes.Owner.self, forKey: .owner)
        owner = ownerDecoded
        let workflowStepAutomationConfigurationDecoded = try containerValues.decodeIfPresent(MigrationHubOrchestratorClientTypes.WorkflowStepAutomationConfiguration.self, forKey: .workflowStepAutomationConfiguration)
        workflowStepAutomationConfiguration = workflowStepAutomationConfigurationDecoded
        let stepTargetContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .stepTarget)
        var stepTargetDecoded0:[Swift.String]? = nil
        if let stepTargetContainer = stepTargetContainer {
            stepTargetDecoded0 = [Swift.String]()
            for string0 in stepTargetContainer {
                if let string0 = string0 {
                    stepTargetDecoded0?.append(string0)
                }
            }
        }
        stepTarget = stepTargetDecoded0
        let outputsContainer = try containerValues.decodeIfPresent([MigrationHubOrchestratorClientTypes.WorkflowStepOutput?].self, forKey: .outputs)
        var outputsDecoded0:[MigrationHubOrchestratorClientTypes.WorkflowStepOutput]? = nil
        if let outputsContainer = outputsContainer {
            outputsDecoded0 = [MigrationHubOrchestratorClientTypes.WorkflowStepOutput]()
            for structure0 in outputsContainer {
                if let structure0 = structure0 {
                    outputsDecoded0?.append(structure0)
                }
            }
        }
        outputs = outputsDecoded0
        let previousContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .previous)
        var previousDecoded0:[Swift.String]? = nil
        if let previousContainer = previousContainer {
            previousDecoded0 = [Swift.String]()
            for string0 in previousContainer {
                if let string0 = string0 {
                    previousDecoded0?.append(string0)
                }
            }
        }
        previous = previousDecoded0
        let nextContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .next)
        var nextDecoded0:[Swift.String]? = nil
        if let nextContainer = nextContainer {
            nextDecoded0 = [Swift.String]()
            for string0 in nextContainer {
                if let string0 = string0 {
                    nextDecoded0?.append(string0)
                }
            }
        }
        next = nextDecoded0
        let statusDecoded = try containerValues.decodeIfPresent(MigrationHubOrchestratorClientTypes.StepStatus.self, forKey: .status)
        status = statusDecoded
        let statusMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .statusMessage)
        statusMessage = statusMessageDecoded
        let scriptOutputLocationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .scriptOutputLocation)
        scriptOutputLocation = scriptOutputLocationDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let lastStartTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastStartTime)
        lastStartTime = lastStartTimeDecoded
        let endTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .endTime)
        endTime = endTimeDecoded
        let noOfSrvCompletedDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .noOfSrvCompleted)
        noOfSrvCompleted = noOfSrvCompletedDecoded
        let noOfSrvFailedDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .noOfSrvFailed)
        noOfSrvFailed = noOfSrvFailedDecoded
        let totalNoOfSrvDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .totalNoOfSrv)
        totalNoOfSrv = totalNoOfSrvDecoded
    }
}
