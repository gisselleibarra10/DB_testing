// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension MigrationHubOrchestratorClientTypes.TemplateStepSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case id
        case name
        case next
        case owner
        case previous
        case stepActionType
        case stepGroupId
        case targetType
        case templateId
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let next = next {
            var nextContainer = encodeContainer.nestedUnkeyedContainer(forKey: .next)
            for stringlist0 in next {
                try nextContainer.encode(stringlist0)
            }
        }
        if let owner = self.owner {
            try encodeContainer.encode(owner.rawValue, forKey: .owner)
        }
        if let previous = previous {
            var previousContainer = encodeContainer.nestedUnkeyedContainer(forKey: .previous)
            for stringlist0 in previous {
                try previousContainer.encode(stringlist0)
            }
        }
        if let stepActionType = self.stepActionType {
            try encodeContainer.encode(stepActionType.rawValue, forKey: .stepActionType)
        }
        if let stepGroupId = self.stepGroupId {
            try encodeContainer.encode(stepGroupId, forKey: .stepGroupId)
        }
        if let targetType = self.targetType {
            try encodeContainer.encode(targetType.rawValue, forKey: .targetType)
        }
        if let templateId = self.templateId {
            try encodeContainer.encode(templateId, forKey: .templateId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let stepGroupIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stepGroupId)
        stepGroupId = stepGroupIdDecoded
        let templateIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateId)
        templateId = templateIdDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let stepActionTypeDecoded = try containerValues.decodeIfPresent(MigrationHubOrchestratorClientTypes.StepActionType.self, forKey: .stepActionType)
        stepActionType = stepActionTypeDecoded
        let targetTypeDecoded = try containerValues.decodeIfPresent(MigrationHubOrchestratorClientTypes.TargetType.self, forKey: .targetType)
        targetType = targetTypeDecoded
        let ownerDecoded = try containerValues.decodeIfPresent(MigrationHubOrchestratorClientTypes.Owner.self, forKey: .owner)
        owner = ownerDecoded
        let previousContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .previous)
        var previousDecoded0:[Swift.String]? = nil
        if let previousContainer = previousContainer {
            previousDecoded0 = [Swift.String]()
            for string0 in previousContainer {
                if let string0 = string0 {
                    previousDecoded0?.append(string0)
                }
            }
        }
        previous = previousDecoded0
        let nextContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .next)
        var nextDecoded0:[Swift.String]? = nil
        if let nextContainer = nextContainer {
            nextDecoded0 = [Swift.String]()
            for string0 in nextContainer {
                if let string0 = string0 {
                    nextDecoded0?.append(string0)
                }
            }
        }
        next = nextDecoded0
    }
}
