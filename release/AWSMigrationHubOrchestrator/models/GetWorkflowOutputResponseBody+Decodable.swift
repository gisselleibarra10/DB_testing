// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetWorkflowOutputResponseBody: Swift.Equatable {
    let id: Swift.String?
    let arn: Swift.String?
    let name: Swift.String?
    let description: Swift.String?
    let templateId: Swift.String?
    let adsApplicationConfigurationId: Swift.String?
    let adsApplicationName: Swift.String?
    let status: MigrationHubOrchestratorClientTypes.MigrationWorkflowStatusEnum?
    let statusMessage: Swift.String?
    let creationTime: ClientRuntime.Date?
    let lastStartTime: ClientRuntime.Date?
    let lastStopTime: ClientRuntime.Date?
    let lastModifiedTime: ClientRuntime.Date?
    let endTime: ClientRuntime.Date?
    let tools: [MigrationHubOrchestratorClientTypes.Tool]?
    let totalSteps: Swift.Int?
    let completedSteps: Swift.Int?
    let workflowInputs: [Swift.String:MigrationHubOrchestratorClientTypes.StepInput]?
    let tags: [Swift.String:Swift.String]?
    let workflowBucket: Swift.String?
}

extension GetWorkflowOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case adsApplicationConfigurationId
        case adsApplicationName
        case arn
        case completedSteps
        case creationTime
        case description
        case endTime
        case id
        case lastModifiedTime
        case lastStartTime
        case lastStopTime
        case name
        case status
        case statusMessage
        case tags
        case templateId
        case tools
        case totalSteps
        case workflowBucket
        case workflowInputs
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let templateIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateId)
        templateId = templateIdDecoded
        let adsApplicationConfigurationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .adsApplicationConfigurationId)
        adsApplicationConfigurationId = adsApplicationConfigurationIdDecoded
        let adsApplicationNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .adsApplicationName)
        adsApplicationName = adsApplicationNameDecoded
        let statusDecoded = try containerValues.decodeIfPresent(MigrationHubOrchestratorClientTypes.MigrationWorkflowStatusEnum.self, forKey: .status)
        status = statusDecoded
        let statusMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .statusMessage)
        statusMessage = statusMessageDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let lastStartTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastStartTime)
        lastStartTime = lastStartTimeDecoded
        let lastStopTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastStopTime)
        lastStopTime = lastStopTimeDecoded
        let lastModifiedTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedTime)
        lastModifiedTime = lastModifiedTimeDecoded
        let endTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .endTime)
        endTime = endTimeDecoded
        let toolsContainer = try containerValues.decodeIfPresent([MigrationHubOrchestratorClientTypes.Tool?].self, forKey: .tools)
        var toolsDecoded0:[MigrationHubOrchestratorClientTypes.Tool]? = nil
        if let toolsContainer = toolsContainer {
            toolsDecoded0 = [MigrationHubOrchestratorClientTypes.Tool]()
            for structure0 in toolsContainer {
                if let structure0 = structure0 {
                    toolsDecoded0?.append(structure0)
                }
            }
        }
        tools = toolsDecoded0
        let totalStepsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .totalSteps)
        totalSteps = totalStepsDecoded
        let completedStepsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .completedSteps)
        completedSteps = completedStepsDecoded
        let workflowInputsContainer = try containerValues.decodeIfPresent([Swift.String: MigrationHubOrchestratorClientTypes.StepInput?].self, forKey: .workflowInputs)
        var workflowInputsDecoded0: [Swift.String:MigrationHubOrchestratorClientTypes.StepInput]? = nil
        if let workflowInputsContainer = workflowInputsContainer {
            workflowInputsDecoded0 = [Swift.String:MigrationHubOrchestratorClientTypes.StepInput]()
            for (key0, stepinput0) in workflowInputsContainer {
                if let stepinput0 = stepinput0 {
                    workflowInputsDecoded0?[key0] = stepinput0
                }
            }
        }
        workflowInputs = workflowInputsDecoded0
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, stringmapvalue0) in tagsContainer {
                if let stringmapvalue0 = stringmapvalue0 {
                    tagsDecoded0?[key0] = stringmapvalue0
                }
            }
        }
        tags = tagsDecoded0
        let workflowBucketDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .workflowBucket)
        workflowBucket = workflowBucketDecoded
    }
}
