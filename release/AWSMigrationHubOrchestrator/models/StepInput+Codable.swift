// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension MigrationHubOrchestratorClientTypes.StepInput: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case integervalue = "integerValue"
        case listofstringsvalue = "listOfStringsValue"
        case mapofstringvalue = "mapOfStringValue"
        case sdkUnknown
        case stringvalue = "stringValue"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        switch self {
            case let .integervalue(integervalue):
                try container.encode(integervalue, forKey: .integervalue)
            case let .listofstringsvalue(listofstringsvalue):
                var listofstringsvalueContainer = container.nestedUnkeyedContainer(forKey: .listofstringsvalue)
                for stringlist0 in listofstringsvalue {
                    try listofstringsvalueContainer.encode(stringlist0)
                }
            case let .mapofstringvalue(mapofstringvalue):
                var mapofstringvalueContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .mapofstringvalue)
                for (dictKey0, stringmap0) in mapofstringvalue {
                    try mapofstringvalueContainer.encode(stringmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
                }
            case let .stringvalue(stringvalue):
                try container.encode(stringvalue, forKey: .stringvalue)
            case let .sdkUnknown(sdkUnknown):
                try container.encode(sdkUnknown, forKey: .sdkUnknown)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let values = try decoder.container(keyedBy: CodingKeys.self)
        let integervalueDecoded = try values.decodeIfPresent(Swift.Int.self, forKey: .integervalue)
        if let integervalue = integervalueDecoded {
            self = .integervalue(integervalue)
            return
        }
        let stringvalueDecoded = try values.decodeIfPresent(Swift.String.self, forKey: .stringvalue)
        if let stringvalue = stringvalueDecoded {
            self = .stringvalue(stringvalue)
            return
        }
        let listofstringsvalueContainer = try values.decodeIfPresent([Swift.String?].self, forKey: .listofstringsvalue)
        var listofstringsvalueDecoded0:[Swift.String]? = nil
        if let listofstringsvalueContainer = listofstringsvalueContainer {
            listofstringsvalueDecoded0 = [Swift.String]()
            for string0 in listofstringsvalueContainer {
                if let string0 = string0 {
                    listofstringsvalueDecoded0?.append(string0)
                }
            }
        }
        if let listofstringsvalue = listofstringsvalueDecoded0 {
            self = .listofstringsvalue(listofstringsvalue)
            return
        }
        let mapofstringvalueContainer = try values.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .mapofstringvalue)
        var mapofstringvalueDecoded0: [Swift.String:Swift.String]? = nil
        if let mapofstringvalueContainer = mapofstringvalueContainer {
            mapofstringvalueDecoded0 = [Swift.String:Swift.String]()
            for (key0, stringmapvalue0) in mapofstringvalueContainer {
                if let stringmapvalue0 = stringmapvalue0 {
                    mapofstringvalueDecoded0?[key0] = stringmapvalue0
                }
            }
        }
        if let mapofstringvalue = mapofstringvalueDecoded0 {
            self = .mapofstringvalue(mapofstringvalue)
            return
        }
        self = .sdkUnknown("")
    }
}
