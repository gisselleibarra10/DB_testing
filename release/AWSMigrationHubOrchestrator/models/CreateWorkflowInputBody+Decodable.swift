// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateWorkflowInputBody: Swift.Equatable {
    let name: Swift.String?
    let description: Swift.String?
    let templateId: Swift.String?
    let applicationConfigurationId: Swift.String?
    let inputParameters: [Swift.String:MigrationHubOrchestratorClientTypes.StepInput]?
    let stepTargets: [Swift.String]?
    let tags: [Swift.String:Swift.String]?
}

extension CreateWorkflowInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applicationConfigurationId
        case description
        case inputParameters
        case name
        case stepTargets
        case tags
        case templateId
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let templateIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateId)
        templateId = templateIdDecoded
        let applicationConfigurationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .applicationConfigurationId)
        applicationConfigurationId = applicationConfigurationIdDecoded
        let inputParametersContainer = try containerValues.decodeIfPresent([Swift.String: MigrationHubOrchestratorClientTypes.StepInput?].self, forKey: .inputParameters)
        var inputParametersDecoded0: [Swift.String:MigrationHubOrchestratorClientTypes.StepInput]? = nil
        if let inputParametersContainer = inputParametersContainer {
            inputParametersDecoded0 = [Swift.String:MigrationHubOrchestratorClientTypes.StepInput]()
            for (key0, stepinput0) in inputParametersContainer {
                if let stepinput0 = stepinput0 {
                    inputParametersDecoded0?[key0] = stepinput0
                }
            }
        }
        inputParameters = inputParametersDecoded0
        let stepTargetsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .stepTargets)
        var stepTargetsDecoded0:[Swift.String]? = nil
        if let stepTargetsContainer = stepTargetsContainer {
            stepTargetsDecoded0 = [Swift.String]()
            for string0 in stepTargetsContainer {
                if let string0 = string0 {
                    stepTargetsDecoded0?.append(string0)
                }
            }
        }
        stepTargets = stepTargetsDecoded0
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, stringmapvalue0) in tagsContainer {
                if let stringmapvalue0 = stringmapvalue0 {
                    tagsDecoded0?[key0] = stringmapvalue0
                }
            }
        }
        tags = tagsDecoded0
    }
}
