// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension IotClientTypes.TransferData: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case acceptDate
        case rejectDate
        case rejectReason
        case transferDate
        case transferMessage
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let acceptDate = self.acceptDate {
            try encodeContainer.encode(acceptDate.timeIntervalSince1970, forKey: .acceptDate)
        }
        if let rejectDate = self.rejectDate {
            try encodeContainer.encode(rejectDate.timeIntervalSince1970, forKey: .rejectDate)
        }
        if let rejectReason = self.rejectReason {
            try encodeContainer.encode(rejectReason, forKey: .rejectReason)
        }
        if let transferDate = self.transferDate {
            try encodeContainer.encode(transferDate.timeIntervalSince1970, forKey: .transferDate)
        }
        if let transferMessage = self.transferMessage {
            try encodeContainer.encode(transferMessage, forKey: .transferMessage)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let transferMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .transferMessage)
        transferMessage = transferMessageDecoded
        let rejectReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .rejectReason)
        rejectReason = rejectReasonDecoded
        let transferDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .transferDate)
        transferDate = transferDateDecoded
        let acceptDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .acceptDate)
        acceptDate = acceptDateDecoded
        let rejectDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .rejectDate)
        rejectDate = rejectDateDecoded
    }
}
