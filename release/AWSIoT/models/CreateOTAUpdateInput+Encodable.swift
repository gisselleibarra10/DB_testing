// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CreateOTAUpdateInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case additionalParameters
        case awsJobAbortConfig
        case awsJobExecutionsRolloutConfig
        case awsJobPresignedUrlConfig
        case awsJobTimeoutConfig
        case description
        case files
        case protocols
        case roleArn
        case tags
        case targetSelection
        case targets
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let additionalParameters = additionalParameters {
            var additionalParametersContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .additionalParameters)
            for (dictKey0, additionalparametermap0) in additionalParameters {
                try additionalParametersContainer.encode(additionalparametermap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let awsJobAbortConfig = self.awsJobAbortConfig {
            try encodeContainer.encode(awsJobAbortConfig, forKey: .awsJobAbortConfig)
        }
        if let awsJobExecutionsRolloutConfig = self.awsJobExecutionsRolloutConfig {
            try encodeContainer.encode(awsJobExecutionsRolloutConfig, forKey: .awsJobExecutionsRolloutConfig)
        }
        if let awsJobPresignedUrlConfig = self.awsJobPresignedUrlConfig {
            try encodeContainer.encode(awsJobPresignedUrlConfig, forKey: .awsJobPresignedUrlConfig)
        }
        if let awsJobTimeoutConfig = self.awsJobTimeoutConfig {
            try encodeContainer.encode(awsJobTimeoutConfig, forKey: .awsJobTimeoutConfig)
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let files = files {
            var filesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .files)
            for otaupdatefiles0 in files {
                try filesContainer.encode(otaupdatefiles0)
            }
        }
        if let protocols = protocols {
            var protocolsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .protocols)
            for protocols0 in protocols {
                try protocolsContainer.encode(protocols0.rawValue)
            }
        }
        if let roleArn = self.roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
        if let targetSelection = self.targetSelection {
            try encodeContainer.encode(targetSelection.rawValue, forKey: .targetSelection)
        }
        if let targets = targets {
            var targetsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .targets)
            for targets0 in targets {
                try targetsContainer.encode(targets0)
            }
        }
    }
}
