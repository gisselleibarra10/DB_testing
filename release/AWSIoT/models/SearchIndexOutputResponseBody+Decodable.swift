// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct SearchIndexOutputResponseBody: Swift.Equatable {
    let nextToken: Swift.String?
    let things: [IotClientTypes.ThingDocument]?
    let thingGroups: [IotClientTypes.ThingGroupDocument]?
}

extension SearchIndexOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken
        case thingGroups
        case things
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let thingsContainer = try containerValues.decodeIfPresent([IotClientTypes.ThingDocument?].self, forKey: .things)
        var thingsDecoded0:[IotClientTypes.ThingDocument]? = nil
        if let thingsContainer = thingsContainer {
            thingsDecoded0 = [IotClientTypes.ThingDocument]()
            for structure0 in thingsContainer {
                if let structure0 = structure0 {
                    thingsDecoded0?.append(structure0)
                }
            }
        }
        things = thingsDecoded0
        let thingGroupsContainer = try containerValues.decodeIfPresent([IotClientTypes.ThingGroupDocument?].self, forKey: .thingGroups)
        var thingGroupsDecoded0:[IotClientTypes.ThingGroupDocument]? = nil
        if let thingGroupsContainer = thingGroupsContainer {
            thingGroupsDecoded0 = [IotClientTypes.ThingGroupDocument]()
            for structure0 in thingGroupsContainer {
                if let structure0 = structure0 {
                    thingGroupsDecoded0?.append(structure0)
                }
            }
        }
        thingGroups = thingGroupsDecoded0
    }
}
