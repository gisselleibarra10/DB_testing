// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct CreateAuthorizerInput: Swift.Equatable {
    /// The ARN of the authorizer's Lambda function.
    /// This member is required.
    public var authorizerFunctionArn: Swift.String?
    /// The authorizer name.
    /// This member is required.
    public var authorizerName: Swift.String?
    /// When true, the result from the authorizerâ€™s Lambda function is cached for clients that use persistent HTTP connections. The results are cached for the time specified by the Lambda function in refreshAfterInSeconds. This value does not affect authorization of clients that use MQTT connections. The default value is false.
    public var enableCachingForHttp: Swift.Bool?
    /// Specifies whether IoT validates the token signature in an authorization request.
    public var signingDisabled: Swift.Bool?
    /// The status of the create authorizer request.
    public var status: IotClientTypes.AuthorizerStatus?
    /// Metadata which can be used to manage the custom authorizer. For URI Request parameters use format: ...key1=value1&key2=value2... For the CLI command-line parameter use format: &&tags "key1=value1&key2=value2..." For the cli-input-json file use format: "tags": "key1=value1&key2=value2..."
    public var tags: [IotClientTypes.Tag]?
    /// The name of the token key used to extract the token from the HTTP headers.
    public var tokenKeyName: Swift.String?
    /// The public keys used to verify the digital signature returned by your custom authentication service.
    public var tokenSigningPublicKeys: [Swift.String:Swift.String]?

    public init (
        authorizerFunctionArn: Swift.String? = nil,
        authorizerName: Swift.String? = nil,
        enableCachingForHttp: Swift.Bool? = nil,
        signingDisabled: Swift.Bool? = nil,
        status: IotClientTypes.AuthorizerStatus? = nil,
        tags: [IotClientTypes.Tag]? = nil,
        tokenKeyName: Swift.String? = nil,
        tokenSigningPublicKeys: [Swift.String:Swift.String]? = nil
    )
    {
        self.authorizerFunctionArn = authorizerFunctionArn
        self.authorizerName = authorizerName
        self.enableCachingForHttp = enableCachingForHttp
        self.signingDisabled = signingDisabled
        self.status = status
        self.tags = tags
        self.tokenKeyName = tokenKeyName
        self.tokenSigningPublicKeys = tokenSigningPublicKeys
    }
}
