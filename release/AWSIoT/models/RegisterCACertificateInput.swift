// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// The input to the RegisterCACertificate operation.
public struct RegisterCACertificateInput: Swift.Equatable {
    /// Allows this CA certificate to be used for auto registration of device certificates.
    public var allowAutoRegistration: Swift.Bool
    /// The CA certificate.
    /// This member is required.
    public var caCertificate: Swift.String?
    /// Describes the certificate mode in which the Certificate Authority (CA) will be registered. If the verificationCertificate field is not provided, set certificateMode to be SNI_ONLY. If the verificationCertificate field is provided, set certificateMode to be DEFAULT. When certificateMode is not provided, it defaults to DEFAULT. All the device certificates that are registered using this CA will be registered in the same certificate mode as the CA. For more information about certificate mode for device certificates, see [ certificate mode](https://docs.aws.amazon.com/iot/latest/apireference/API_CertificateDescription.html#iot-Type-CertificateDescription-certificateMode).
    public var certificateMode: IotClientTypes.CertificateMode?
    /// Information about the registration configuration.
    public var registrationConfig: IotClientTypes.RegistrationConfig?
    /// A boolean value that specifies if the CA certificate is set to active. Valid values: ACTIVE | INACTIVE
    public var setAsActive: Swift.Bool
    /// Metadata which can be used to manage the CA certificate. For URI Request parameters use format: ...key1=value1&key2=value2... For the CLI command-line parameter use format: &&tags "key1=value1&key2=value2..." For the cli-input-json file use format: "tags": "key1=value1&key2=value2..."
    public var tags: [IotClientTypes.Tag]?
    /// The private key verification certificate. If certificateMode is SNI_ONLY, the verificationCertificate field must be empty. If certificateMode is DEFAULT or not provided, the verificationCertificate field must not be empty.
    public var verificationCertificate: Swift.String?

    public init (
        allowAutoRegistration: Swift.Bool = false,
        caCertificate: Swift.String? = nil,
        certificateMode: IotClientTypes.CertificateMode? = nil,
        registrationConfig: IotClientTypes.RegistrationConfig? = nil,
        setAsActive: Swift.Bool = false,
        tags: [IotClientTypes.Tag]? = nil,
        verificationCertificate: Swift.String? = nil
    )
    {
        self.allowAutoRegistration = allowAutoRegistration
        self.caCertificate = caCertificate
        self.certificateMode = certificateMode
        self.registrationConfig = registrationConfig
        self.setAsActive = setAsActive
        self.tags = tags
        self.verificationCertificate = verificationCertificate
    }
}
