// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct CreateOTAUpdateInput: Swift.Equatable {
    /// A list of additional OTA update parameters which are name-value pairs.
    public var additionalParameters: [Swift.String:Swift.String]?
    /// The criteria that determine when and how a job abort takes place.
    public var awsJobAbortConfig: IotClientTypes.AwsJobAbortConfig?
    /// Configuration for the rollout of OTA updates.
    public var awsJobExecutionsRolloutConfig: IotClientTypes.AwsJobExecutionsRolloutConfig?
    /// Configuration information for pre-signed URLs.
    public var awsJobPresignedUrlConfig: IotClientTypes.AwsJobPresignedUrlConfig?
    /// Specifies the amount of time each device has to finish its execution of the job. A timer is started when the job execution status is set to IN_PROGRESS. If the job execution status is not set to another terminal state before the timer expires, it will be automatically set to TIMED_OUT.
    public var awsJobTimeoutConfig: IotClientTypes.AwsJobTimeoutConfig?
    /// The description of the OTA update.
    public var description: Swift.String?
    /// The files to be streamed by the OTA update.
    /// This member is required.
    public var files: [IotClientTypes.OTAUpdateFile]?
    /// The ID of the OTA update to be created.
    /// This member is required.
    public var otaUpdateId: Swift.String?
    /// The protocol used to transfer the OTA update image. Valid values are [HTTP], [MQTT], [HTTP, MQTT]. When both HTTP and MQTT are specified, the target device can choose the protocol.
    public var protocols: [IotClientTypes.ModelProtocol]?
    /// The IAM role that grants Amazon Web Services IoT Core access to the Amazon S3, IoT jobs and Amazon Web Services Code Signing resources to create an OTA update job.
    /// This member is required.
    public var roleArn: Swift.String?
    /// Metadata which can be used to manage updates.
    public var tags: [IotClientTypes.Tag]?
    /// Specifies whether the update will continue to run (CONTINUOUS), or will be complete after all the things specified as targets have completed the update (SNAPSHOT). If continuous, the update may also be run on a thing when a change is detected in a target. For example, an update will run on a thing when the thing is added to a target group, even after the update was completed by all things originally in the group. Valid values: CONTINUOUS | SNAPSHOT.
    public var targetSelection: IotClientTypes.TargetSelection?
    /// The devices targeted to receive OTA updates.
    /// This member is required.
    public var targets: [Swift.String]?

    public init (
        additionalParameters: [Swift.String:Swift.String]? = nil,
        awsJobAbortConfig: IotClientTypes.AwsJobAbortConfig? = nil,
        awsJobExecutionsRolloutConfig: IotClientTypes.AwsJobExecutionsRolloutConfig? = nil,
        awsJobPresignedUrlConfig: IotClientTypes.AwsJobPresignedUrlConfig? = nil,
        awsJobTimeoutConfig: IotClientTypes.AwsJobTimeoutConfig? = nil,
        description: Swift.String? = nil,
        files: [IotClientTypes.OTAUpdateFile]? = nil,
        otaUpdateId: Swift.String? = nil,
        protocols: [IotClientTypes.ModelProtocol]? = nil,
        roleArn: Swift.String? = nil,
        tags: [IotClientTypes.Tag]? = nil,
        targetSelection: IotClientTypes.TargetSelection? = nil,
        targets: [Swift.String]? = nil
    )
    {
        self.additionalParameters = additionalParameters
        self.awsJobAbortConfig = awsJobAbortConfig
        self.awsJobExecutionsRolloutConfig = awsJobExecutionsRolloutConfig
        self.awsJobPresignedUrlConfig = awsJobPresignedUrlConfig
        self.awsJobTimeoutConfig = awsJobTimeoutConfig
        self.description = description
        self.files = files
        self.otaUpdateId = otaUpdateId
        self.protocols = protocols
        self.roleArn = roleArn
        self.tags = tags
        self.targetSelection = targetSelection
        self.targets = targets
    }
}
