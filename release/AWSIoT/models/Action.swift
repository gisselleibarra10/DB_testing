// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension IotClientTypes {
    /// Describes the actions associated with a rule.
    public struct Action: Swift.Equatable {
        /// Change the state of a CloudWatch alarm.
        public var cloudwatchAlarm: IotClientTypes.CloudwatchAlarmAction?
        /// Send data to CloudWatch Logs.
        public var cloudwatchLogs: IotClientTypes.CloudwatchLogsAction?
        /// Capture a CloudWatch metric.
        public var cloudwatchMetric: IotClientTypes.CloudwatchMetricAction?
        /// Write to a DynamoDB table.
        public var dynamoDB: IotClientTypes.DynamoDBAction?
        /// Write to a DynamoDB table. This is a new version of the DynamoDB action. It allows you to write each attribute in an MQTT message payload into a separate DynamoDB column.
        public var dynamoDBv2: IotClientTypes.DynamoDBv2Action?
        /// Write data to an Amazon OpenSearch Service domain. The Elasticsearch action can only be used by existing rule actions. To create a new rule action or to update an existing rule action, use the OpenSearch rule action instead. For more information, see [OpenSearchAction](https://docs.aws.amazon.com/iot/latest/apireference/API_OpenSearchAction.html).
        public var elasticsearch: IotClientTypes.ElasticsearchAction?
        /// Write to an Amazon Kinesis Firehose stream.
        public var firehose: IotClientTypes.FirehoseAction?
        /// Send data to an HTTPS endpoint.
        public var http: IotClientTypes.HttpAction?
        /// Sends message data to an IoT Analytics channel.
        public var iotAnalytics: IotClientTypes.IotAnalyticsAction?
        /// Sends an input to an IoT Events detector.
        public var iotEvents: IotClientTypes.IotEventsAction?
        /// Sends data from the MQTT message that triggered the rule to IoT SiteWise asset properties.
        public var iotSiteWise: IotClientTypes.IotSiteWiseAction?
        /// Send messages to an Amazon Managed Streaming for Apache Kafka (Amazon MSK) or self-managed Apache Kafka cluster.
        public var kafka: IotClientTypes.KafkaAction?
        /// Write data to an Amazon Kinesis stream.
        public var kinesis: IotClientTypes.KinesisAction?
        /// Invoke a Lambda function.
        public var lambda: IotClientTypes.LambdaAction?
        /// Write data to an Amazon OpenSearch Service domain.
        public var openSearch: IotClientTypes.OpenSearchAction?
        /// Publish to another MQTT topic.
        public var republish: IotClientTypes.RepublishAction?
        /// Write to an Amazon S3 bucket.
        public var s3: IotClientTypes.S3Action?
        /// Send a message to a Salesforce IoT Cloud Input Stream.
        public var salesforce: IotClientTypes.SalesforceAction?
        /// Publish to an Amazon SNS topic.
        public var sns: IotClientTypes.SnsAction?
        /// Publish to an Amazon SQS queue.
        public var sqs: IotClientTypes.SqsAction?
        /// Starts execution of a Step Functions state machine.
        public var stepFunctions: IotClientTypes.StepFunctionsAction?
        /// The Timestream rule action writes attributes (measures) from an MQTT message into an Amazon Timestream table. For more information, see the [Timestream](https://docs.aws.amazon.com/iot/latest/developerguide/timestream-rule-action.html) topic rule action documentation.
        public var timestream: IotClientTypes.TimestreamAction?

        public init (
            cloudwatchAlarm: IotClientTypes.CloudwatchAlarmAction? = nil,
            cloudwatchLogs: IotClientTypes.CloudwatchLogsAction? = nil,
            cloudwatchMetric: IotClientTypes.CloudwatchMetricAction? = nil,
            dynamoDB: IotClientTypes.DynamoDBAction? = nil,
            dynamoDBv2: IotClientTypes.DynamoDBv2Action? = nil,
            elasticsearch: IotClientTypes.ElasticsearchAction? = nil,
            firehose: IotClientTypes.FirehoseAction? = nil,
            http: IotClientTypes.HttpAction? = nil,
            iotAnalytics: IotClientTypes.IotAnalyticsAction? = nil,
            iotEvents: IotClientTypes.IotEventsAction? = nil,
            iotSiteWise: IotClientTypes.IotSiteWiseAction? = nil,
            kafka: IotClientTypes.KafkaAction? = nil,
            kinesis: IotClientTypes.KinesisAction? = nil,
            lambda: IotClientTypes.LambdaAction? = nil,
            openSearch: IotClientTypes.OpenSearchAction? = nil,
            republish: IotClientTypes.RepublishAction? = nil,
            s3: IotClientTypes.S3Action? = nil,
            salesforce: IotClientTypes.SalesforceAction? = nil,
            sns: IotClientTypes.SnsAction? = nil,
            sqs: IotClientTypes.SqsAction? = nil,
            stepFunctions: IotClientTypes.StepFunctionsAction? = nil,
            timestream: IotClientTypes.TimestreamAction? = nil
        )
        {
            self.cloudwatchAlarm = cloudwatchAlarm
            self.cloudwatchLogs = cloudwatchLogs
            self.cloudwatchMetric = cloudwatchMetric
            self.dynamoDB = dynamoDB
            self.dynamoDBv2 = dynamoDBv2
            self.elasticsearch = elasticsearch
            self.firehose = firehose
            self.http = http
            self.iotAnalytics = iotAnalytics
            self.iotEvents = iotEvents
            self.iotSiteWise = iotSiteWise
            self.kafka = kafka
            self.kinesis = kinesis
            self.lambda = lambda
            self.openSearch = openSearch
            self.republish = republish
            self.s3 = s3
            self.salesforce = salesforce
            self.sns = sns
            self.sqs = sqs
            self.stepFunctions = stepFunctions
            self.timestream = timestream
        }
    }

}
