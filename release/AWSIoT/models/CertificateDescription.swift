// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension IotClientTypes {
    /// Describes a certificate.
    public struct CertificateDescription: Swift.Equatable {
        /// The certificate ID of the CA certificate used to sign this certificate.
        public var caCertificateId: Swift.String?
        /// The ARN of the certificate.
        public var certificateArn: Swift.String?
        /// The ID of the certificate.
        public var certificateId: Swift.String?
        /// The mode of the certificate. DEFAULT: A certificate in DEFAULT mode is either generated by Amazon Web Services IoT Core or registered with an issuer certificate authority (CA) in DEFAULT mode. Devices with certificates in DEFAULT mode aren't required to send the Server Name Indication (SNI) extension when connecting to Amazon Web Services IoT Core. However, to use features such as custom domains and VPC endpoints, we recommend that you use the SNI extension when connecting to Amazon Web Services IoT Core. SNI_ONLY: A certificate in SNI_ONLY mode is registered without an issuer CA. Devices with certificates in SNI_ONLY mode must send the SNI extension when connecting to Amazon Web Services IoT Core. For more information about the value for SNI extension, see [Transport security in IoT](https://docs.aws.amazon.com/iot/latest/developerguide/transport-security.html).
        public var certificateMode: IotClientTypes.CertificateMode?
        /// The certificate data, in PEM format.
        public var certificatePem: Swift.String?
        /// The date and time the certificate was created.
        public var creationDate: ClientRuntime.Date?
        /// The customer version of the certificate.
        public var customerVersion: Swift.Int?
        /// The generation ID of the certificate.
        public var generationId: Swift.String?
        /// The date and time the certificate was last modified.
        public var lastModifiedDate: ClientRuntime.Date?
        /// The ID of the Amazon Web Services account that owns the certificate.
        public var ownedBy: Swift.String?
        /// The ID of the Amazon Web Services account of the previous owner of the certificate.
        public var previousOwnedBy: Swift.String?
        /// The status of the certificate.
        public var status: IotClientTypes.CertificateStatus?
        /// The transfer data.
        public var transferData: IotClientTypes.TransferData?
        /// When the certificate is valid.
        public var validity: IotClientTypes.CertificateValidity?

        public init (
            caCertificateId: Swift.String? = nil,
            certificateArn: Swift.String? = nil,
            certificateId: Swift.String? = nil,
            certificateMode: IotClientTypes.CertificateMode? = nil,
            certificatePem: Swift.String? = nil,
            creationDate: ClientRuntime.Date? = nil,
            customerVersion: Swift.Int? = nil,
            generationId: Swift.String? = nil,
            lastModifiedDate: ClientRuntime.Date? = nil,
            ownedBy: Swift.String? = nil,
            previousOwnedBy: Swift.String? = nil,
            status: IotClientTypes.CertificateStatus? = nil,
            transferData: IotClientTypes.TransferData? = nil,
            validity: IotClientTypes.CertificateValidity? = nil
        )
        {
            self.caCertificateId = caCertificateId
            self.certificateArn = certificateArn
            self.certificateId = certificateId
            self.certificateMode = certificateMode
            self.certificatePem = certificatePem
            self.creationDate = creationDate
            self.customerVersion = customerVersion
            self.generationId = generationId
            self.lastModifiedDate = lastModifiedDate
            self.ownedBy = ownedBy
            self.previousOwnedBy = previousOwnedBy
            self.status = status
            self.transferData = transferData
            self.validity = validity
        }
    }

}
