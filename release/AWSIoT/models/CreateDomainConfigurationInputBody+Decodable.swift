// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateDomainConfigurationInputBody: Swift.Equatable {
    let domainName: Swift.String?
    let serverCertificateArns: [Swift.String]?
    let validationCertificateArn: Swift.String?
    let authorizerConfig: IotClientTypes.AuthorizerConfig?
    let serviceType: IotClientTypes.ServiceType?
    let tags: [IotClientTypes.Tag]?
}

extension CreateDomainConfigurationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case authorizerConfig
        case domainName
        case serverCertificateArns
        case serviceType
        case tags
        case validationCertificateArn
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domainName)
        domainName = domainNameDecoded
        let serverCertificateArnsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .serverCertificateArns)
        var serverCertificateArnsDecoded0:[Swift.String]? = nil
        if let serverCertificateArnsContainer = serverCertificateArnsContainer {
            serverCertificateArnsDecoded0 = [Swift.String]()
            for string0 in serverCertificateArnsContainer {
                if let string0 = string0 {
                    serverCertificateArnsDecoded0?.append(string0)
                }
            }
        }
        serverCertificateArns = serverCertificateArnsDecoded0
        let validationCertificateArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .validationCertificateArn)
        validationCertificateArn = validationCertificateArnDecoded
        let authorizerConfigDecoded = try containerValues.decodeIfPresent(IotClientTypes.AuthorizerConfig.self, forKey: .authorizerConfig)
        authorizerConfig = authorizerConfigDecoded
        let serviceTypeDecoded = try containerValues.decodeIfPresent(IotClientTypes.ServiceType.self, forKey: .serviceType)
        serviceType = serviceTypeDecoded
        let tagsContainer = try containerValues.decodeIfPresent([IotClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[IotClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [IotClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}
