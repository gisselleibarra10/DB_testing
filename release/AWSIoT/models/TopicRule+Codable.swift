// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension IotClientTypes.TopicRule: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case actions
        case awsIotSqlVersion
        case createdAt
        case description
        case errorAction
        case ruleDisabled
        case ruleName
        case sql
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let actions = actions {
            var actionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .actions)
            for actionlist0 in actions {
                try actionsContainer.encode(actionlist0)
            }
        }
        if let awsIotSqlVersion = self.awsIotSqlVersion {
            try encodeContainer.encode(awsIotSqlVersion, forKey: .awsIotSqlVersion)
        }
        if let createdAt = self.createdAt {
            try encodeContainer.encode(createdAt.timeIntervalSince1970, forKey: .createdAt)
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let errorAction = self.errorAction {
            try encodeContainer.encode(errorAction, forKey: .errorAction)
        }
        if let ruleDisabled = self.ruleDisabled {
            try encodeContainer.encode(ruleDisabled, forKey: .ruleDisabled)
        }
        if let ruleName = self.ruleName {
            try encodeContainer.encode(ruleName, forKey: .ruleName)
        }
        if let sql = self.sql {
            try encodeContainer.encode(sql, forKey: .sql)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ruleNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ruleName)
        ruleName = ruleNameDecoded
        let sqlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sql)
        sql = sqlDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let createdAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdAt)
        createdAt = createdAtDecoded
        let actionsContainer = try containerValues.decodeIfPresent([IotClientTypes.Action?].self, forKey: .actions)
        var actionsDecoded0:[IotClientTypes.Action]? = nil
        if let actionsContainer = actionsContainer {
            actionsDecoded0 = [IotClientTypes.Action]()
            for structure0 in actionsContainer {
                if let structure0 = structure0 {
                    actionsDecoded0?.append(structure0)
                }
            }
        }
        actions = actionsDecoded0
        let ruleDisabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .ruleDisabled)
        ruleDisabled = ruleDisabledDecoded
        let awsIotSqlVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .awsIotSqlVersion)
        awsIotSqlVersion = awsIotSqlVersionDecoded
        let errorActionDecoded = try containerValues.decodeIfPresent(IotClientTypes.Action.self, forKey: .errorAction)
        errorAction = errorActionDecoded
    }
}
