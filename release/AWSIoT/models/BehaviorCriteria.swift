// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension IotClientTypes {
    /// The criteria by which the behavior is determined to be normal.
    public struct BehaviorCriteria: Swift.Equatable {
        /// The operator that relates the thing measured (metric) to the criteria (containing a value or statisticalThreshold). Valid operators include:
        ///
        /// * string-list: in-set and not-in-set
        ///
        /// * number-list: in-set and not-in-set
        ///
        /// * ip-address-list: in-cidr-set and not-in-cidr-set
        ///
        /// * number: less-than, less-than-equals, greater-than, and greater-than-equals
        public var comparisonOperator: IotClientTypes.ComparisonOperator?
        /// If a device is in violation of the behavior for the specified number of consecutive datapoints, an alarm occurs. If not specified, the default is 1.
        public var consecutiveDatapointsToAlarm: Swift.Int?
        /// If an alarm has occurred and the offending device is no longer in violation of the behavior for the specified number of consecutive datapoints, the alarm is cleared. If not specified, the default is 1.
        public var consecutiveDatapointsToClear: Swift.Int?
        /// Use this to specify the time duration over which the behavior is evaluated, for those criteria that have a time dimension (for example, NUM_MESSAGES_SENT). For a statisticalThreshhold metric comparison, measurements from all devices are accumulated over this time duration before being used to calculate percentiles, and later, measurements from an individual device are also accumulated over this time duration before being given a percentile rank. Cannot be used with list-based metric datatypes.
        public var durationSeconds: Swift.Int?
        /// The configuration of an ML Detect
        public var mlDetectionConfig: IotClientTypes.MachineLearningDetectionConfig?
        /// A statistical ranking (percentile)that indicates a threshold value by which a behavior is determined to be in compliance or in violation of the behavior.
        public var statisticalThreshold: IotClientTypes.StatisticalThreshold?
        /// The value to be compared with the metric.
        public var value: IotClientTypes.MetricValue?

        public init (
            comparisonOperator: IotClientTypes.ComparisonOperator? = nil,
            consecutiveDatapointsToAlarm: Swift.Int? = nil,
            consecutiveDatapointsToClear: Swift.Int? = nil,
            durationSeconds: Swift.Int? = nil,
            mlDetectionConfig: IotClientTypes.MachineLearningDetectionConfig? = nil,
            statisticalThreshold: IotClientTypes.StatisticalThreshold? = nil,
            value: IotClientTypes.MetricValue? = nil
        )
        {
            self.comparisonOperator = comparisonOperator
            self.consecutiveDatapointsToAlarm = consecutiveDatapointsToAlarm
            self.consecutiveDatapointsToClear = consecutiveDatapointsToClear
            self.durationSeconds = durationSeconds
            self.mlDetectionConfig = mlDetectionConfig
            self.statisticalThreshold = statisticalThreshold
            self.value = value
        }
    }

}
