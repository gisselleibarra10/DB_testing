// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension IotClientTypes.ThingGroupMetadata: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationDate
        case parentGroupName
        case rootToParentThingGroups
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationDate = self.creationDate {
            try encodeContainer.encode(creationDate.timeIntervalSince1970, forKey: .creationDate)
        }
        if let parentGroupName = self.parentGroupName {
            try encodeContainer.encode(parentGroupName, forKey: .parentGroupName)
        }
        if let rootToParentThingGroups = rootToParentThingGroups {
            var rootToParentThingGroupsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .rootToParentThingGroups)
            for thinggroupnameandarnlist0 in rootToParentThingGroups {
                try rootToParentThingGroupsContainer.encode(thinggroupnameandarnlist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let parentGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .parentGroupName)
        parentGroupName = parentGroupNameDecoded
        let rootToParentThingGroupsContainer = try containerValues.decodeIfPresent([IotClientTypes.GroupNameAndArn?].self, forKey: .rootToParentThingGroups)
        var rootToParentThingGroupsDecoded0:[IotClientTypes.GroupNameAndArn]? = nil
        if let rootToParentThingGroupsContainer = rootToParentThingGroupsContainer {
            rootToParentThingGroupsDecoded0 = [IotClientTypes.GroupNameAndArn]()
            for structure0 in rootToParentThingGroupsContainer {
                if let structure0 = structure0 {
                    rootToParentThingGroupsDecoded0?.append(structure0)
                }
            }
        }
        rootToParentThingGroups = rootToParentThingGroupsDecoded0
        let creationDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationDate)
        creationDate = creationDateDecoded
    }
}
