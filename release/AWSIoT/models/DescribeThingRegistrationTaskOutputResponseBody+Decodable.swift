// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeThingRegistrationTaskOutputResponseBody: Swift.Equatable {
    let taskId: Swift.String?
    let creationDate: ClientRuntime.Date?
    let lastModifiedDate: ClientRuntime.Date?
    let templateBody: Swift.String?
    let inputFileBucket: Swift.String?
    let inputFileKey: Swift.String?
    let roleArn: Swift.String?
    let status: IotClientTypes.Status?
    let message: Swift.String?
    let successCount: Swift.Int
    let failureCount: Swift.Int
    let percentageProgress: Swift.Int
}

extension DescribeThingRegistrationTaskOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationDate
        case failureCount
        case inputFileBucket
        case inputFileKey
        case lastModifiedDate
        case message
        case percentageProgress
        case roleArn
        case status
        case successCount
        case taskId
        case templateBody
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let taskIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .taskId)
        taskId = taskIdDecoded
        let creationDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationDate)
        creationDate = creationDateDecoded
        let lastModifiedDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedDate)
        lastModifiedDate = lastModifiedDateDecoded
        let templateBodyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateBody)
        templateBody = templateBodyDecoded
        let inputFileBucketDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .inputFileBucket)
        inputFileBucket = inputFileBucketDecoded
        let inputFileKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .inputFileKey)
        inputFileKey = inputFileKeyDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let statusDecoded = try containerValues.decodeIfPresent(IotClientTypes.Status.self, forKey: .status)
        status = statusDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let successCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .successCount) ?? 0
        successCount = successCountDecoded
        let failureCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .failureCount) ?? 0
        failureCount = failureCountDecoded
        let percentageProgressDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .percentageProgress) ?? 0
        percentageProgress = percentageProgressDecoded
    }
}
