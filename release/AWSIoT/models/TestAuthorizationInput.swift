// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct TestAuthorizationInput: Swift.Equatable {
    /// A list of authorization info objects. Simulating authorization will create a response for each authInfo object in the list.
    /// This member is required.
    public var authInfos: [IotClientTypes.AuthInfo]?
    /// The MQTT client ID.
    public var clientId: Swift.String?
    /// The Cognito identity pool ID.
    public var cognitoIdentityPoolId: Swift.String?
    /// When testing custom authorization, the policies specified here are treated as if they are attached to the principal being authorized.
    public var policyNamesToAdd: [Swift.String]?
    /// When testing custom authorization, the policies specified here are treated as if they are not attached to the principal being authorized.
    public var policyNamesToSkip: [Swift.String]?
    /// The principal. Valid principals are CertificateArn (arn:aws:iot:region:accountId:cert/certificateId), thingGroupArn (arn:aws:iot:region:accountId:thinggroup/groupName) and CognitoId (region:id).
    public var principal: Swift.String?

    public init (
        authInfos: [IotClientTypes.AuthInfo]? = nil,
        clientId: Swift.String? = nil,
        cognitoIdentityPoolId: Swift.String? = nil,
        policyNamesToAdd: [Swift.String]? = nil,
        policyNamesToSkip: [Swift.String]? = nil,
        principal: Swift.String? = nil
    )
    {
        self.authInfos = authInfos
        self.clientId = clientId
        self.cognitoIdentityPoolId = cognitoIdentityPoolId
        self.policyNamesToAdd = policyNamesToAdd
        self.policyNamesToSkip = policyNamesToSkip
        self.principal = principal
    }
}
