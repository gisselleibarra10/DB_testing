// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct CreateDomainConfigurationInput: Swift.Equatable {
    /// An object that specifies the authorization service for a domain.
    public var authorizerConfig: IotClientTypes.AuthorizerConfig?
    /// The name of the domain configuration. This value must be unique to a region.
    /// This member is required.
    public var domainConfigurationName: Swift.String?
    /// The name of the domain.
    public var domainName: Swift.String?
    /// The ARNs of the certificates that IoT passes to the device during the TLS handshake. Currently you can specify only one certificate ARN. This value is not required for Amazon Web Services-managed domains.
    public var serverCertificateArns: [Swift.String]?
    /// The type of service delivered by the endpoint. Amazon Web Services IoT Core currently supports only the DATA service type.
    public var serviceType: IotClientTypes.ServiceType?
    /// Metadata which can be used to manage the domain configuration. For URI Request parameters use format: ...key1=value1&key2=value2... For the CLI command-line parameter use format: &&tags "key1=value1&key2=value2..." For the cli-input-json file use format: "tags": "key1=value1&key2=value2..."
    public var tags: [IotClientTypes.Tag]?
    /// The certificate used to validate the server certificate and prove domain name ownership. This certificate must be signed by a public certificate authority. This value is not required for Amazon Web Services-managed domains.
    public var validationCertificateArn: Swift.String?

    public init (
        authorizerConfig: IotClientTypes.AuthorizerConfig? = nil,
        domainConfigurationName: Swift.String? = nil,
        domainName: Swift.String? = nil,
        serverCertificateArns: [Swift.String]? = nil,
        serviceType: IotClientTypes.ServiceType? = nil,
        tags: [IotClientTypes.Tag]? = nil,
        validationCertificateArn: Swift.String? = nil
    )
    {
        self.authorizerConfig = authorizerConfig
        self.domainConfigurationName = domainConfigurationName
        self.domainName = domainName
        self.serverCertificateArns = serverCertificateArns
        self.serviceType = serviceType
        self.tags = tags
        self.validationCertificateArn = validationCertificateArn
    }
}
