// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension IotClientTypes {
    /// Information about a certificate.
    public struct Certificate: Swift.Equatable {
        /// The ARN of the certificate.
        public var certificateArn: Swift.String?
        /// The ID of the certificate. (The last part of the certificate ARN contains the certificate ID.)
        public var certificateId: Swift.String?
        /// The mode of the certificate. DEFAULT: A certificate in DEFAULT mode is either generated by Amazon Web Services IoT Core or registered with an issuer certificate authority (CA) in DEFAULT mode. Devices with certificates in DEFAULT mode aren't required to send the Server Name Indication (SNI) extension when connecting to Amazon Web Services IoT Core. However, to use features such as custom domains and VPC endpoints, we recommend that you use the SNI extension when connecting to Amazon Web Services IoT Core. SNI_ONLY: A certificate in SNI_ONLY mode is registered without an issuer CA. Devices with certificates in SNI_ONLY mode must send the SNI extension when connecting to Amazon Web Services IoT Core.
        public var certificateMode: IotClientTypes.CertificateMode?
        /// The date and time the certificate was created.
        public var creationDate: ClientRuntime.Date?
        /// The status of the certificate. The status value REGISTER_INACTIVE is deprecated and should not be used.
        public var status: IotClientTypes.CertificateStatus?

        public init (
            certificateArn: Swift.String? = nil,
            certificateId: Swift.String? = nil,
            certificateMode: IotClientTypes.CertificateMode? = nil,
            creationDate: ClientRuntime.Date? = nil,
            status: IotClientTypes.CertificateStatus? = nil
        )
        {
            self.certificateArn = certificateArn
            self.certificateId = certificateId
            self.certificateMode = certificateMode
            self.creationDate = creationDate
            self.status = status
        }
    }

}
