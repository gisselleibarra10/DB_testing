// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension IotClientTypes.TaskStatistics: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case canceledChecks
        case compliantChecks
        case failedChecks
        case inProgressChecks
        case nonCompliantChecks
        case totalChecks
        case waitingForDataCollectionChecks
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let canceledChecks = self.canceledChecks {
            try encodeContainer.encode(canceledChecks, forKey: .canceledChecks)
        }
        if let compliantChecks = self.compliantChecks {
            try encodeContainer.encode(compliantChecks, forKey: .compliantChecks)
        }
        if let failedChecks = self.failedChecks {
            try encodeContainer.encode(failedChecks, forKey: .failedChecks)
        }
        if let inProgressChecks = self.inProgressChecks {
            try encodeContainer.encode(inProgressChecks, forKey: .inProgressChecks)
        }
        if let nonCompliantChecks = self.nonCompliantChecks {
            try encodeContainer.encode(nonCompliantChecks, forKey: .nonCompliantChecks)
        }
        if let totalChecks = self.totalChecks {
            try encodeContainer.encode(totalChecks, forKey: .totalChecks)
        }
        if let waitingForDataCollectionChecks = self.waitingForDataCollectionChecks {
            try encodeContainer.encode(waitingForDataCollectionChecks, forKey: .waitingForDataCollectionChecks)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let totalChecksDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .totalChecks)
        totalChecks = totalChecksDecoded
        let inProgressChecksDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .inProgressChecks)
        inProgressChecks = inProgressChecksDecoded
        let waitingForDataCollectionChecksDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .waitingForDataCollectionChecks)
        waitingForDataCollectionChecks = waitingForDataCollectionChecksDecoded
        let compliantChecksDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .compliantChecks)
        compliantChecks = compliantChecksDecoded
        let nonCompliantChecksDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .nonCompliantChecks)
        nonCompliantChecks = nonCompliantChecksDecoded
        let failedChecksDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .failedChecks)
        failedChecks = failedChecksDecoded
        let canceledChecksDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .canceledChecks)
        canceledChecks = canceledChecksDecoded
    }
}
