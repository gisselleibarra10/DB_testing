// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension IotClientTypes.AuditFinding: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case checkName
        case findingId
        case findingTime
        case isSuppressed
        case nonCompliantResource
        case reasonForNonCompliance
        case reasonForNonComplianceCode
        case relatedResources
        case severity
        case taskId
        case taskStartTime
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let checkName = self.checkName {
            try encodeContainer.encode(checkName, forKey: .checkName)
        }
        if let findingId = self.findingId {
            try encodeContainer.encode(findingId, forKey: .findingId)
        }
        if let findingTime = self.findingTime {
            try encodeContainer.encode(findingTime.timeIntervalSince1970, forKey: .findingTime)
        }
        if let isSuppressed = self.isSuppressed {
            try encodeContainer.encode(isSuppressed, forKey: .isSuppressed)
        }
        if let nonCompliantResource = self.nonCompliantResource {
            try encodeContainer.encode(nonCompliantResource, forKey: .nonCompliantResource)
        }
        if let reasonForNonCompliance = self.reasonForNonCompliance {
            try encodeContainer.encode(reasonForNonCompliance, forKey: .reasonForNonCompliance)
        }
        if let reasonForNonComplianceCode = self.reasonForNonComplianceCode {
            try encodeContainer.encode(reasonForNonComplianceCode, forKey: .reasonForNonComplianceCode)
        }
        if let relatedResources = relatedResources {
            var relatedResourcesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .relatedResources)
            for relatedresources0 in relatedResources {
                try relatedResourcesContainer.encode(relatedresources0)
            }
        }
        if let severity = self.severity {
            try encodeContainer.encode(severity.rawValue, forKey: .severity)
        }
        if let taskId = self.taskId {
            try encodeContainer.encode(taskId, forKey: .taskId)
        }
        if let taskStartTime = self.taskStartTime {
            try encodeContainer.encode(taskStartTime.timeIntervalSince1970, forKey: .taskStartTime)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let findingIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .findingId)
        findingId = findingIdDecoded
        let taskIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .taskId)
        taskId = taskIdDecoded
        let checkNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .checkName)
        checkName = checkNameDecoded
        let taskStartTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .taskStartTime)
        taskStartTime = taskStartTimeDecoded
        let findingTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .findingTime)
        findingTime = findingTimeDecoded
        let severityDecoded = try containerValues.decodeIfPresent(IotClientTypes.AuditFindingSeverity.self, forKey: .severity)
        severity = severityDecoded
        let nonCompliantResourceDecoded = try containerValues.decodeIfPresent(IotClientTypes.NonCompliantResource.self, forKey: .nonCompliantResource)
        nonCompliantResource = nonCompliantResourceDecoded
        let relatedResourcesContainer = try containerValues.decodeIfPresent([IotClientTypes.RelatedResource?].self, forKey: .relatedResources)
        var relatedResourcesDecoded0:[IotClientTypes.RelatedResource]? = nil
        if let relatedResourcesContainer = relatedResourcesContainer {
            relatedResourcesDecoded0 = [IotClientTypes.RelatedResource]()
            for structure0 in relatedResourcesContainer {
                if let structure0 = structure0 {
                    relatedResourcesDecoded0?.append(structure0)
                }
            }
        }
        relatedResources = relatedResourcesDecoded0
        let reasonForNonComplianceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .reasonForNonCompliance)
        reasonForNonCompliance = reasonForNonComplianceDecoded
        let reasonForNonComplianceCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .reasonForNonComplianceCode)
        reasonForNonComplianceCode = reasonForNonComplianceCodeDecoded
        let isSuppressedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .isSuppressed)
        isSuppressed = isSuppressedDecoded
    }
}
