// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension IotClientTypes.DetectMitigationActionsTaskSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case actionsDefinition
        case onlyActiveViolationsIncluded
        case suppressedAlertsIncluded
        case target
        case taskEndTime
        case taskId
        case taskStartTime
        case taskStatistics
        case taskStatus
        case violationEventOccurrenceRange
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let actionsDefinition = actionsDefinition {
            var actionsDefinitionContainer = encodeContainer.nestedUnkeyedContainer(forKey: .actionsDefinition)
            for mitigationactionlist0 in actionsDefinition {
                try actionsDefinitionContainer.encode(mitigationactionlist0)
            }
        }
        if onlyActiveViolationsIncluded != false {
            try encodeContainer.encode(onlyActiveViolationsIncluded, forKey: .onlyActiveViolationsIncluded)
        }
        if suppressedAlertsIncluded != false {
            try encodeContainer.encode(suppressedAlertsIncluded, forKey: .suppressedAlertsIncluded)
        }
        if let target = self.target {
            try encodeContainer.encode(target, forKey: .target)
        }
        if let taskEndTime = self.taskEndTime {
            try encodeContainer.encode(taskEndTime.timeIntervalSince1970, forKey: .taskEndTime)
        }
        if let taskId = self.taskId {
            try encodeContainer.encode(taskId, forKey: .taskId)
        }
        if let taskStartTime = self.taskStartTime {
            try encodeContainer.encode(taskStartTime.timeIntervalSince1970, forKey: .taskStartTime)
        }
        if let taskStatistics = self.taskStatistics {
            try encodeContainer.encode(taskStatistics, forKey: .taskStatistics)
        }
        if let taskStatus = self.taskStatus {
            try encodeContainer.encode(taskStatus.rawValue, forKey: .taskStatus)
        }
        if let violationEventOccurrenceRange = self.violationEventOccurrenceRange {
            try encodeContainer.encode(violationEventOccurrenceRange, forKey: .violationEventOccurrenceRange)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let taskIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .taskId)
        taskId = taskIdDecoded
        let taskStatusDecoded = try containerValues.decodeIfPresent(IotClientTypes.DetectMitigationActionsTaskStatus.self, forKey: .taskStatus)
        taskStatus = taskStatusDecoded
        let taskStartTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .taskStartTime)
        taskStartTime = taskStartTimeDecoded
        let taskEndTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .taskEndTime)
        taskEndTime = taskEndTimeDecoded
        let targetDecoded = try containerValues.decodeIfPresent(IotClientTypes.DetectMitigationActionsTaskTarget.self, forKey: .target)
        target = targetDecoded
        let violationEventOccurrenceRangeDecoded = try containerValues.decodeIfPresent(IotClientTypes.ViolationEventOccurrenceRange.self, forKey: .violationEventOccurrenceRange)
        violationEventOccurrenceRange = violationEventOccurrenceRangeDecoded
        let onlyActiveViolationsIncludedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .onlyActiveViolationsIncluded) ?? false
        onlyActiveViolationsIncluded = onlyActiveViolationsIncludedDecoded
        let suppressedAlertsIncludedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .suppressedAlertsIncluded) ?? false
        suppressedAlertsIncluded = suppressedAlertsIncludedDecoded
        let actionsDefinitionContainer = try containerValues.decodeIfPresent([IotClientTypes.MitigationAction?].self, forKey: .actionsDefinition)
        var actionsDefinitionDecoded0:[IotClientTypes.MitigationAction]? = nil
        if let actionsDefinitionContainer = actionsDefinitionContainer {
            actionsDefinitionDecoded0 = [IotClientTypes.MitigationAction]()
            for structure0 in actionsDefinitionContainer {
                if let structure0 = structure0 {
                    actionsDefinitionDecoded0?.append(structure0)
                }
            }
        }
        actionsDefinition = actionsDefinitionDecoded0
        let taskStatisticsDecoded = try containerValues.decodeIfPresent(IotClientTypes.DetectMitigationActionsTaskStatistics.self, forKey: .taskStatistics)
        taskStatistics = taskStatisticsDecoded
    }
}
