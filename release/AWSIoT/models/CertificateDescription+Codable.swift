// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension IotClientTypes.CertificateDescription: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case caCertificateId
        case certificateArn
        case certificateId
        case certificateMode
        case certificatePem
        case creationDate
        case customerVersion
        case generationId
        case lastModifiedDate
        case ownedBy
        case previousOwnedBy
        case status
        case transferData
        case validity
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let caCertificateId = self.caCertificateId {
            try encodeContainer.encode(caCertificateId, forKey: .caCertificateId)
        }
        if let certificateArn = self.certificateArn {
            try encodeContainer.encode(certificateArn, forKey: .certificateArn)
        }
        if let certificateId = self.certificateId {
            try encodeContainer.encode(certificateId, forKey: .certificateId)
        }
        if let certificateMode = self.certificateMode {
            try encodeContainer.encode(certificateMode.rawValue, forKey: .certificateMode)
        }
        if let certificatePem = self.certificatePem {
            try encodeContainer.encode(certificatePem, forKey: .certificatePem)
        }
        if let creationDate = self.creationDate {
            try encodeContainer.encode(creationDate.timeIntervalSince1970, forKey: .creationDate)
        }
        if let customerVersion = self.customerVersion {
            try encodeContainer.encode(customerVersion, forKey: .customerVersion)
        }
        if let generationId = self.generationId {
            try encodeContainer.encode(generationId, forKey: .generationId)
        }
        if let lastModifiedDate = self.lastModifiedDate {
            try encodeContainer.encode(lastModifiedDate.timeIntervalSince1970, forKey: .lastModifiedDate)
        }
        if let ownedBy = self.ownedBy {
            try encodeContainer.encode(ownedBy, forKey: .ownedBy)
        }
        if let previousOwnedBy = self.previousOwnedBy {
            try encodeContainer.encode(previousOwnedBy, forKey: .previousOwnedBy)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let transferData = self.transferData {
            try encodeContainer.encode(transferData, forKey: .transferData)
        }
        if let validity = self.validity {
            try encodeContainer.encode(validity, forKey: .validity)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let certificateArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .certificateArn)
        certificateArn = certificateArnDecoded
        let certificateIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .certificateId)
        certificateId = certificateIdDecoded
        let caCertificateIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .caCertificateId)
        caCertificateId = caCertificateIdDecoded
        let statusDecoded = try containerValues.decodeIfPresent(IotClientTypes.CertificateStatus.self, forKey: .status)
        status = statusDecoded
        let certificatePemDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .certificatePem)
        certificatePem = certificatePemDecoded
        let ownedByDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ownedBy)
        ownedBy = ownedByDecoded
        let previousOwnedByDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .previousOwnedBy)
        previousOwnedBy = previousOwnedByDecoded
        let creationDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationDate)
        creationDate = creationDateDecoded
        let lastModifiedDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedDate)
        lastModifiedDate = lastModifiedDateDecoded
        let customerVersionDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .customerVersion)
        customerVersion = customerVersionDecoded
        let transferDataDecoded = try containerValues.decodeIfPresent(IotClientTypes.TransferData.self, forKey: .transferData)
        transferData = transferDataDecoded
        let generationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .generationId)
        generationId = generationIdDecoded
        let validityDecoded = try containerValues.decodeIfPresent(IotClientTypes.CertificateValidity.self, forKey: .validity)
        validity = validityDecoded
        let certificateModeDecoded = try containerValues.decodeIfPresent(IotClientTypes.CertificateMode.self, forKey: .certificateMode)
        certificateMode = certificateModeDecoded
    }
}
