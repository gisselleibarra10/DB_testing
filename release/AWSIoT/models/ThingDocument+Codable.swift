// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension IotClientTypes.ThingDocument: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attributes
        case connectivity
        case deviceDefender
        case shadow
        case thingGroupNames
        case thingId
        case thingName
        case thingTypeName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let attributes = attributes {
            var attributesContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .attributes)
            for (dictKey0, attributes0) in attributes {
                try attributesContainer.encode(attributes0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let connectivity = self.connectivity {
            try encodeContainer.encode(connectivity, forKey: .connectivity)
        }
        if let deviceDefender = self.deviceDefender {
            try encodeContainer.encode(deviceDefender, forKey: .deviceDefender)
        }
        if let shadow = self.shadow {
            try encodeContainer.encode(shadow, forKey: .shadow)
        }
        if let thingGroupNames = thingGroupNames {
            var thingGroupNamesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .thingGroupNames)
            for thinggroupnamelist0 in thingGroupNames {
                try thingGroupNamesContainer.encode(thinggroupnamelist0)
            }
        }
        if let thingId = self.thingId {
            try encodeContainer.encode(thingId, forKey: .thingId)
        }
        if let thingName = self.thingName {
            try encodeContainer.encode(thingName, forKey: .thingName)
        }
        if let thingTypeName = self.thingTypeName {
            try encodeContainer.encode(thingTypeName, forKey: .thingTypeName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let thingNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .thingName)
        thingName = thingNameDecoded
        let thingIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .thingId)
        thingId = thingIdDecoded
        let thingTypeNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .thingTypeName)
        thingTypeName = thingTypeNameDecoded
        let thingGroupNamesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .thingGroupNames)
        var thingGroupNamesDecoded0:[Swift.String]? = nil
        if let thingGroupNamesContainer = thingGroupNamesContainer {
            thingGroupNamesDecoded0 = [Swift.String]()
            for string0 in thingGroupNamesContainer {
                if let string0 = string0 {
                    thingGroupNamesDecoded0?.append(string0)
                }
            }
        }
        thingGroupNames = thingGroupNamesDecoded0
        let attributesContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .attributes)
        var attributesDecoded0: [Swift.String:Swift.String]? = nil
        if let attributesContainer = attributesContainer {
            attributesDecoded0 = [Swift.String:Swift.String]()
            for (key0, attributevalue0) in attributesContainer {
                if let attributevalue0 = attributevalue0 {
                    attributesDecoded0?[key0] = attributevalue0
                }
            }
        }
        attributes = attributesDecoded0
        let shadowDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .shadow)
        shadow = shadowDecoded
        let deviceDefenderDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deviceDefender)
        deviceDefender = deviceDefenderDecoded
        let connectivityDecoded = try containerValues.decodeIfPresent(IotClientTypes.ThingConnectivity.self, forKey: .connectivity)
        connectivity = connectivityDecoded
    }
}
