// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// The input to the RegisterCertificate operation.
public struct RegisterCertificateInput: Swift.Equatable {
    /// The CA certificate used to sign the device certificate being registered.
    public var caCertificatePem: Swift.String?
    /// The certificate data, in PEM format.
    /// This member is required.
    public var certificatePem: Swift.String?
    /// A boolean value that specifies if the certificate is set to active. Valid values: ACTIVE | INACTIVE
    @available(*, deprecated)
    public var setAsActive: Swift.Bool?
    /// The status of the register certificate request. Valid values that you can use include ACTIVE, INACTIVE, and REVOKED.
    public var status: IotClientTypes.CertificateStatus?

    public init (
        caCertificatePem: Swift.String? = nil,
        certificatePem: Swift.String? = nil,
        setAsActive: Swift.Bool? = nil,
        status: IotClientTypes.CertificateStatus? = nil
    )
    {
        self.caCertificatePem = caCertificatePem
        self.certificatePem = certificatePem
        self.setAsActive = setAsActive
        self.status = status
    }
}
