// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension IotClientTypes.MetricValue: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cidrs
        case count
        case number
        case numbers
        case ports
        case strings
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cidrs = cidrs {
            var cidrsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .cidrs)
            for cidrs0 in cidrs {
                try cidrsContainer.encode(cidrs0)
            }
        }
        if let count = self.count {
            try encodeContainer.encode(count, forKey: .count)
        }
        if let number = self.number {
            try encodeContainer.encode(number, forKey: .number)
        }
        if let numbers = numbers {
            var numbersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .numbers)
            for numberlist0 in numbers {
                try numbersContainer.encode(numberlist0)
            }
        }
        if let ports = ports {
            var portsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .ports)
            for ports0 in ports {
                try portsContainer.encode(ports0)
            }
        }
        if let strings = strings {
            var stringsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .strings)
            for stringlist0 in strings {
                try stringsContainer.encode(stringlist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let countDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .count)
        count = countDecoded
        let cidrsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .cidrs)
        var cidrsDecoded0:[Swift.String]? = nil
        if let cidrsContainer = cidrsContainer {
            cidrsDecoded0 = [Swift.String]()
            for string0 in cidrsContainer {
                if let string0 = string0 {
                    cidrsDecoded0?.append(string0)
                }
            }
        }
        cidrs = cidrsDecoded0
        let portsContainer = try containerValues.decodeIfPresent([Swift.Int?].self, forKey: .ports)
        var portsDecoded0:[Swift.Int]? = nil
        if let portsContainer = portsContainer {
            portsDecoded0 = [Swift.Int]()
            for integer0 in portsContainer {
                if let integer0 = integer0 {
                    portsDecoded0?.append(integer0)
                }
            }
        }
        ports = portsDecoded0
        let numberDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .number)
        number = numberDecoded
        let numbersContainer = try containerValues.decodeIfPresent([Swift.Double?].self, forKey: .numbers)
        var numbersDecoded0:[Swift.Double]? = nil
        if let numbersContainer = numbersContainer {
            numbersDecoded0 = [Swift.Double]()
            for double0 in numbersContainer {
                if let double0 = double0 {
                    numbersDecoded0?.append(double0)
                }
            }
        }
        numbers = numbersDecoded0
        let stringsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .strings)
        var stringsDecoded0:[Swift.String]? = nil
        if let stringsContainer = stringsContainer {
            stringsDecoded0 = [Swift.String]()
            for string0 in stringsContainer {
                if let string0 = string0 {
                    stringsDecoded0?.append(string0)
                }
            }
        }
        strings = stringsDecoded0
    }
}
