// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension IotClientTypes.Statistics: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case average
        case count
        case maximum
        case minimum
        case stdDeviation
        case sum
        case sumOfSquares
        case variance
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let average = self.average {
            try encodeContainer.encode(average, forKey: .average)
        }
        if count != 0 {
            try encodeContainer.encode(count, forKey: .count)
        }
        if let maximum = self.maximum {
            try encodeContainer.encode(maximum, forKey: .maximum)
        }
        if let minimum = self.minimum {
            try encodeContainer.encode(minimum, forKey: .minimum)
        }
        if let stdDeviation = self.stdDeviation {
            try encodeContainer.encode(stdDeviation, forKey: .stdDeviation)
        }
        if let sum = self.sum {
            try encodeContainer.encode(sum, forKey: .sum)
        }
        if let sumOfSquares = self.sumOfSquares {
            try encodeContainer.encode(sumOfSquares, forKey: .sumOfSquares)
        }
        if let variance = self.variance {
            try encodeContainer.encode(variance, forKey: .variance)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let countDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .count) ?? 0
        count = countDecoded
        let averageDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .average)
        average = averageDecoded
        let sumDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .sum)
        sum = sumDecoded
        let minimumDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .minimum)
        minimum = minimumDecoded
        let maximumDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .maximum)
        maximum = maximumDecoded
        let sumOfSquaresDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .sumOfSquares)
        sumOfSquares = sumOfSquaresDecoded
        let varianceDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .variance)
        variance = varianceDecoded
        let stdDeviationDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .stdDeviation)
        stdDeviation = stdDeviationDecoded
    }
}
