// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeDomainConfigurationOutputResponseBody: Swift.Equatable {
    let domainConfigurationName: Swift.String?
    let domainConfigurationArn: Swift.String?
    let domainName: Swift.String?
    let serverCertificates: [IotClientTypes.ServerCertificateSummary]?
    let authorizerConfig: IotClientTypes.AuthorizerConfig?
    let domainConfigurationStatus: IotClientTypes.DomainConfigurationStatus?
    let serviceType: IotClientTypes.ServiceType?
    let domainType: IotClientTypes.DomainType?
    let lastStatusChangeDate: ClientRuntime.Date?
}

extension DescribeDomainConfigurationOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case authorizerConfig
        case domainConfigurationArn
        case domainConfigurationName
        case domainConfigurationStatus
        case domainName
        case domainType
        case lastStatusChangeDate
        case serverCertificates
        case serviceType
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainConfigurationNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domainConfigurationName)
        domainConfigurationName = domainConfigurationNameDecoded
        let domainConfigurationArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domainConfigurationArn)
        domainConfigurationArn = domainConfigurationArnDecoded
        let domainNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domainName)
        domainName = domainNameDecoded
        let serverCertificatesContainer = try containerValues.decodeIfPresent([IotClientTypes.ServerCertificateSummary?].self, forKey: .serverCertificates)
        var serverCertificatesDecoded0:[IotClientTypes.ServerCertificateSummary]? = nil
        if let serverCertificatesContainer = serverCertificatesContainer {
            serverCertificatesDecoded0 = [IotClientTypes.ServerCertificateSummary]()
            for structure0 in serverCertificatesContainer {
                if let structure0 = structure0 {
                    serverCertificatesDecoded0?.append(structure0)
                }
            }
        }
        serverCertificates = serverCertificatesDecoded0
        let authorizerConfigDecoded = try containerValues.decodeIfPresent(IotClientTypes.AuthorizerConfig.self, forKey: .authorizerConfig)
        authorizerConfig = authorizerConfigDecoded
        let domainConfigurationStatusDecoded = try containerValues.decodeIfPresent(IotClientTypes.DomainConfigurationStatus.self, forKey: .domainConfigurationStatus)
        domainConfigurationStatus = domainConfigurationStatusDecoded
        let serviceTypeDecoded = try containerValues.decodeIfPresent(IotClientTypes.ServiceType.self, forKey: .serviceType)
        serviceType = serviceTypeDecoded
        let domainTypeDecoded = try containerValues.decodeIfPresent(IotClientTypes.DomainType.self, forKey: .domainType)
        domainType = domainTypeDecoded
        let lastStatusChangeDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastStatusChangeDate)
        lastStatusChangeDate = lastStatusChangeDateDecoded
    }
}
