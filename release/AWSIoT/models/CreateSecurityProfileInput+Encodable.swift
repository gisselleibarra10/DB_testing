// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CreateSecurityProfileInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case additionalMetricsToRetain
        case additionalMetricsToRetainV2
        case alertTargets
        case behaviors
        case securityProfileDescription
        case tags
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let additionalMetricsToRetain = additionalMetricsToRetain {
            var additionalMetricsToRetainContainer = encodeContainer.nestedUnkeyedContainer(forKey: .additionalMetricsToRetain)
            for additionalmetricstoretainlist0 in additionalMetricsToRetain {
                try additionalMetricsToRetainContainer.encode(additionalmetricstoretainlist0)
            }
        }
        if let additionalMetricsToRetainV2 = additionalMetricsToRetainV2 {
            var additionalMetricsToRetainV2Container = encodeContainer.nestedUnkeyedContainer(forKey: .additionalMetricsToRetainV2)
            for additionalmetricstoretainv2list0 in additionalMetricsToRetainV2 {
                try additionalMetricsToRetainV2Container.encode(additionalmetricstoretainv2list0)
            }
        }
        if let alertTargets = alertTargets {
            var alertTargetsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .alertTargets)
            for (dictKey0, alerttargets0) in alertTargets {
                try alertTargetsContainer.encode(alerttargets0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let behaviors = behaviors {
            var behaviorsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .behaviors)
            for behaviors0 in behaviors {
                try behaviorsContainer.encode(behaviors0)
            }
        }
        if let securityProfileDescription = self.securityProfileDescription {
            try encodeContainer.encode(securityProfileDescription, forKey: .securityProfileDescription)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }
}
