// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateJobInputBody: Swift.Equatable {
    let targets: [Swift.String]?
    let documentSource: Swift.String?
    let document: Swift.String?
    let description: Swift.String?
    let presignedUrlConfig: IotClientTypes.PresignedUrlConfig?
    let targetSelection: IotClientTypes.TargetSelection?
    let jobExecutionsRolloutConfig: IotClientTypes.JobExecutionsRolloutConfig?
    let abortConfig: IotClientTypes.AbortConfig?
    let timeoutConfig: IotClientTypes.TimeoutConfig?
    let tags: [IotClientTypes.Tag]?
    let namespaceId: Swift.String?
    let jobTemplateArn: Swift.String?
    let jobExecutionsRetryConfig: IotClientTypes.JobExecutionsRetryConfig?
    let documentParameters: [Swift.String:Swift.String]?
}

extension CreateJobInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case abortConfig
        case description
        case document
        case documentParameters
        case documentSource
        case jobExecutionsRetryConfig
        case jobExecutionsRolloutConfig
        case jobTemplateArn
        case namespaceId
        case presignedUrlConfig
        case tags
        case targetSelection
        case targets
        case timeoutConfig
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let targetsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .targets)
        var targetsDecoded0:[Swift.String]? = nil
        if let targetsContainer = targetsContainer {
            targetsDecoded0 = [Swift.String]()
            for string0 in targetsContainer {
                if let string0 = string0 {
                    targetsDecoded0?.append(string0)
                }
            }
        }
        targets = targetsDecoded0
        let documentSourceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .documentSource)
        documentSource = documentSourceDecoded
        let documentDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .document)
        document = documentDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let presignedUrlConfigDecoded = try containerValues.decodeIfPresent(IotClientTypes.PresignedUrlConfig.self, forKey: .presignedUrlConfig)
        presignedUrlConfig = presignedUrlConfigDecoded
        let targetSelectionDecoded = try containerValues.decodeIfPresent(IotClientTypes.TargetSelection.self, forKey: .targetSelection)
        targetSelection = targetSelectionDecoded
        let jobExecutionsRolloutConfigDecoded = try containerValues.decodeIfPresent(IotClientTypes.JobExecutionsRolloutConfig.self, forKey: .jobExecutionsRolloutConfig)
        jobExecutionsRolloutConfig = jobExecutionsRolloutConfigDecoded
        let abortConfigDecoded = try containerValues.decodeIfPresent(IotClientTypes.AbortConfig.self, forKey: .abortConfig)
        abortConfig = abortConfigDecoded
        let timeoutConfigDecoded = try containerValues.decodeIfPresent(IotClientTypes.TimeoutConfig.self, forKey: .timeoutConfig)
        timeoutConfig = timeoutConfigDecoded
        let tagsContainer = try containerValues.decodeIfPresent([IotClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[IotClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [IotClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let namespaceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .namespaceId)
        namespaceId = namespaceIdDecoded
        let jobTemplateArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobTemplateArn)
        jobTemplateArn = jobTemplateArnDecoded
        let jobExecutionsRetryConfigDecoded = try containerValues.decodeIfPresent(IotClientTypes.JobExecutionsRetryConfig.self, forKey: .jobExecutionsRetryConfig)
        jobExecutionsRetryConfig = jobExecutionsRetryConfigDecoded
        let documentParametersContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .documentParameters)
        var documentParametersDecoded0: [Swift.String:Swift.String]? = nil
        if let documentParametersContainer = documentParametersContainer {
            documentParametersDecoded0 = [Swift.String:Swift.String]()
            for (key0, parametervalue0) in documentParametersContainer {
                if let parametervalue0 = parametervalue0 {
                    documentParametersDecoded0?[key0] = parametervalue0
                }
            }
        }
        documentParameters = documentParametersDecoded0
    }
}
