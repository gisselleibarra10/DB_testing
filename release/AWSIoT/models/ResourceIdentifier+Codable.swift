// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension IotClientTypes.ResourceIdentifier: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case account
        case caCertificateId
        case clientId
        case cognitoIdentityPoolId
        case deviceCertificateId
        case iamRoleArn
        case policyVersionIdentifier
        case roleAliasArn
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let account = self.account {
            try encodeContainer.encode(account, forKey: .account)
        }
        if let caCertificateId = self.caCertificateId {
            try encodeContainer.encode(caCertificateId, forKey: .caCertificateId)
        }
        if let clientId = self.clientId {
            try encodeContainer.encode(clientId, forKey: .clientId)
        }
        if let cognitoIdentityPoolId = self.cognitoIdentityPoolId {
            try encodeContainer.encode(cognitoIdentityPoolId, forKey: .cognitoIdentityPoolId)
        }
        if let deviceCertificateId = self.deviceCertificateId {
            try encodeContainer.encode(deviceCertificateId, forKey: .deviceCertificateId)
        }
        if let iamRoleArn = self.iamRoleArn {
            try encodeContainer.encode(iamRoleArn, forKey: .iamRoleArn)
        }
        if let policyVersionIdentifier = self.policyVersionIdentifier {
            try encodeContainer.encode(policyVersionIdentifier, forKey: .policyVersionIdentifier)
        }
        if let roleAliasArn = self.roleAliasArn {
            try encodeContainer.encode(roleAliasArn, forKey: .roleAliasArn)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deviceCertificateIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deviceCertificateId)
        deviceCertificateId = deviceCertificateIdDecoded
        let caCertificateIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .caCertificateId)
        caCertificateId = caCertificateIdDecoded
        let cognitoIdentityPoolIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cognitoIdentityPoolId)
        cognitoIdentityPoolId = cognitoIdentityPoolIdDecoded
        let clientIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientId)
        clientId = clientIdDecoded
        let policyVersionIdentifierDecoded = try containerValues.decodeIfPresent(IotClientTypes.PolicyVersionIdentifier.self, forKey: .policyVersionIdentifier)
        policyVersionIdentifier = policyVersionIdentifierDecoded
        let accountDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .account)
        account = accountDecoded
        let iamRoleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .iamRoleArn)
        iamRoleArn = iamRoleArnDecoded
        let roleAliasArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleAliasArn)
        roleAliasArn = roleAliasArnDecoded
    }
}
