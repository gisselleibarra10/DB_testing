// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension IotClientTypes.OTAUpdateInfo: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case additionalParameters
        case awsIotJobArn
        case awsIotJobId
        case awsJobExecutionsRolloutConfig
        case awsJobPresignedUrlConfig
        case creationDate
        case description
        case errorInfo
        case lastModifiedDate
        case otaUpdateArn
        case otaUpdateFiles
        case otaUpdateId
        case otaUpdateStatus
        case protocols
        case targetSelection
        case targets
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let additionalParameters = additionalParameters {
            var additionalParametersContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .additionalParameters)
            for (dictKey0, additionalparametermap0) in additionalParameters {
                try additionalParametersContainer.encode(additionalparametermap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let awsIotJobArn = self.awsIotJobArn {
            try encodeContainer.encode(awsIotJobArn, forKey: .awsIotJobArn)
        }
        if let awsIotJobId = self.awsIotJobId {
            try encodeContainer.encode(awsIotJobId, forKey: .awsIotJobId)
        }
        if let awsJobExecutionsRolloutConfig = self.awsJobExecutionsRolloutConfig {
            try encodeContainer.encode(awsJobExecutionsRolloutConfig, forKey: .awsJobExecutionsRolloutConfig)
        }
        if let awsJobPresignedUrlConfig = self.awsJobPresignedUrlConfig {
            try encodeContainer.encode(awsJobPresignedUrlConfig, forKey: .awsJobPresignedUrlConfig)
        }
        if let creationDate = self.creationDate {
            try encodeContainer.encode(creationDate.timeIntervalSince1970, forKey: .creationDate)
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let errorInfo = self.errorInfo {
            try encodeContainer.encode(errorInfo, forKey: .errorInfo)
        }
        if let lastModifiedDate = self.lastModifiedDate {
            try encodeContainer.encode(lastModifiedDate.timeIntervalSince1970, forKey: .lastModifiedDate)
        }
        if let otaUpdateArn = self.otaUpdateArn {
            try encodeContainer.encode(otaUpdateArn, forKey: .otaUpdateArn)
        }
        if let otaUpdateFiles = otaUpdateFiles {
            var otaUpdateFilesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .otaUpdateFiles)
            for otaupdatefiles0 in otaUpdateFiles {
                try otaUpdateFilesContainer.encode(otaupdatefiles0)
            }
        }
        if let otaUpdateId = self.otaUpdateId {
            try encodeContainer.encode(otaUpdateId, forKey: .otaUpdateId)
        }
        if let otaUpdateStatus = self.otaUpdateStatus {
            try encodeContainer.encode(otaUpdateStatus.rawValue, forKey: .otaUpdateStatus)
        }
        if let protocols = protocols {
            var protocolsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .protocols)
            for protocols0 in protocols {
                try protocolsContainer.encode(protocols0.rawValue)
            }
        }
        if let targetSelection = self.targetSelection {
            try encodeContainer.encode(targetSelection.rawValue, forKey: .targetSelection)
        }
        if let targets = targets {
            var targetsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .targets)
            for targets0 in targets {
                try targetsContainer.encode(targets0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let otaUpdateIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .otaUpdateId)
        otaUpdateId = otaUpdateIdDecoded
        let otaUpdateArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .otaUpdateArn)
        otaUpdateArn = otaUpdateArnDecoded
        let creationDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationDate)
        creationDate = creationDateDecoded
        let lastModifiedDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedDate)
        lastModifiedDate = lastModifiedDateDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let targetsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .targets)
        var targetsDecoded0:[Swift.String]? = nil
        if let targetsContainer = targetsContainer {
            targetsDecoded0 = [Swift.String]()
            for string0 in targetsContainer {
                if let string0 = string0 {
                    targetsDecoded0?.append(string0)
                }
            }
        }
        targets = targetsDecoded0
        let protocolsContainer = try containerValues.decodeIfPresent([IotClientTypes.ModelProtocol?].self, forKey: .protocols)
        var protocolsDecoded0:[IotClientTypes.ModelProtocol]? = nil
        if let protocolsContainer = protocolsContainer {
            protocolsDecoded0 = [IotClientTypes.ModelProtocol]()
            for string0 in protocolsContainer {
                if let string0 = string0 {
                    protocolsDecoded0?.append(string0)
                }
            }
        }
        protocols = protocolsDecoded0
        let awsJobExecutionsRolloutConfigDecoded = try containerValues.decodeIfPresent(IotClientTypes.AwsJobExecutionsRolloutConfig.self, forKey: .awsJobExecutionsRolloutConfig)
        awsJobExecutionsRolloutConfig = awsJobExecutionsRolloutConfigDecoded
        let awsJobPresignedUrlConfigDecoded = try containerValues.decodeIfPresent(IotClientTypes.AwsJobPresignedUrlConfig.self, forKey: .awsJobPresignedUrlConfig)
        awsJobPresignedUrlConfig = awsJobPresignedUrlConfigDecoded
        let targetSelectionDecoded = try containerValues.decodeIfPresent(IotClientTypes.TargetSelection.self, forKey: .targetSelection)
        targetSelection = targetSelectionDecoded
        let otaUpdateFilesContainer = try containerValues.decodeIfPresent([IotClientTypes.OTAUpdateFile?].self, forKey: .otaUpdateFiles)
        var otaUpdateFilesDecoded0:[IotClientTypes.OTAUpdateFile]? = nil
        if let otaUpdateFilesContainer = otaUpdateFilesContainer {
            otaUpdateFilesDecoded0 = [IotClientTypes.OTAUpdateFile]()
            for structure0 in otaUpdateFilesContainer {
                if let structure0 = structure0 {
                    otaUpdateFilesDecoded0?.append(structure0)
                }
            }
        }
        otaUpdateFiles = otaUpdateFilesDecoded0
        let otaUpdateStatusDecoded = try containerValues.decodeIfPresent(IotClientTypes.OTAUpdateStatus.self, forKey: .otaUpdateStatus)
        otaUpdateStatus = otaUpdateStatusDecoded
        let awsIotJobIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .awsIotJobId)
        awsIotJobId = awsIotJobIdDecoded
        let awsIotJobArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .awsIotJobArn)
        awsIotJobArn = awsIotJobArnDecoded
        let errorInfoDecoded = try containerValues.decodeIfPresent(IotClientTypes.ErrorInfo.self, forKey: .errorInfo)
        errorInfo = errorInfoDecoded
        let additionalParametersContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .additionalParameters)
        var additionalParametersDecoded0: [Swift.String:Swift.String]? = nil
        if let additionalParametersContainer = additionalParametersContainer {
            additionalParametersDecoded0 = [Swift.String:Swift.String]()
            for (key0, value0) in additionalParametersContainer {
                if let value0 = value0 {
                    additionalParametersDecoded0?[key0] = value0
                }
            }
        }
        additionalParameters = additionalParametersDecoded0
    }
}
