// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension IotClientTypes.AuthResult: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case allowed
        case authDecision
        case authInfo
        case denied
        case missingContextValues
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let allowed = self.allowed {
            try encodeContainer.encode(allowed, forKey: .allowed)
        }
        if let authDecision = self.authDecision {
            try encodeContainer.encode(authDecision.rawValue, forKey: .authDecision)
        }
        if let authInfo = self.authInfo {
            try encodeContainer.encode(authInfo, forKey: .authInfo)
        }
        if let denied = self.denied {
            try encodeContainer.encode(denied, forKey: .denied)
        }
        if let missingContextValues = missingContextValues {
            var missingContextValuesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .missingContextValues)
            for missingcontextvalues0 in missingContextValues {
                try missingContextValuesContainer.encode(missingcontextvalues0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let authInfoDecoded = try containerValues.decodeIfPresent(IotClientTypes.AuthInfo.self, forKey: .authInfo)
        authInfo = authInfoDecoded
        let allowedDecoded = try containerValues.decodeIfPresent(IotClientTypes.Allowed.self, forKey: .allowed)
        allowed = allowedDecoded
        let deniedDecoded = try containerValues.decodeIfPresent(IotClientTypes.Denied.self, forKey: .denied)
        denied = deniedDecoded
        let authDecisionDecoded = try containerValues.decodeIfPresent(IotClientTypes.AuthDecision.self, forKey: .authDecision)
        authDecision = authDecisionDecoded
        let missingContextValuesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .missingContextValues)
        var missingContextValuesDecoded0:[Swift.String]? = nil
        if let missingContextValuesContainer = missingContextValuesContainer {
            missingContextValuesDecoded0 = [Swift.String]()
            for string0 in missingContextValuesContainer {
                if let string0 = string0 {
                    missingContextValuesDecoded0?.append(string0)
                }
            }
        }
        missingContextValues = missingContextValuesDecoded0
    }
}
