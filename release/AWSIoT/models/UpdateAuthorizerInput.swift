// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct UpdateAuthorizerInput: Swift.Equatable {
    /// The ARN of the authorizer's Lambda function.
    public var authorizerFunctionArn: Swift.String?
    /// The authorizer name.
    /// This member is required.
    public var authorizerName: Swift.String?
    /// When true, the result from the authorizerâ€™s Lambda function is cached for the time specified in refreshAfterInSeconds. The cached result is used while the device reuses the same HTTP connection.
    public var enableCachingForHttp: Swift.Bool?
    /// The status of the update authorizer request.
    public var status: IotClientTypes.AuthorizerStatus?
    /// The key used to extract the token from the HTTP headers.
    public var tokenKeyName: Swift.String?
    /// The public keys used to verify the token signature.
    public var tokenSigningPublicKeys: [Swift.String:Swift.String]?

    public init (
        authorizerFunctionArn: Swift.String? = nil,
        authorizerName: Swift.String? = nil,
        enableCachingForHttp: Swift.Bool? = nil,
        status: IotClientTypes.AuthorizerStatus? = nil,
        tokenKeyName: Swift.String? = nil,
        tokenSigningPublicKeys: [Swift.String:Swift.String]? = nil
    )
    {
        self.authorizerFunctionArn = authorizerFunctionArn
        self.authorizerName = authorizerName
        self.enableCachingForHttp = enableCachingForHttp
        self.status = status
        self.tokenKeyName = tokenKeyName
        self.tokenSigningPublicKeys = tokenSigningPublicKeys
    }
}
