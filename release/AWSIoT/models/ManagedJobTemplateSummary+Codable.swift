// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension IotClientTypes.ManagedJobTemplateSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description
        case environments
        case templateArn
        case templateName
        case templateVersion
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let environments = environments {
            var environmentsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .environments)
            for environments0 in environments {
                try environmentsContainer.encode(environments0)
            }
        }
        if let templateArn = self.templateArn {
            try encodeContainer.encode(templateArn, forKey: .templateArn)
        }
        if let templateName = self.templateName {
            try encodeContainer.encode(templateName, forKey: .templateName)
        }
        if let templateVersion = self.templateVersion {
            try encodeContainer.encode(templateVersion, forKey: .templateVersion)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let templateArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateArn)
        templateArn = templateArnDecoded
        let templateNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateName)
        templateName = templateNameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let environmentsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .environments)
        var environmentsDecoded0:[Swift.String]? = nil
        if let environmentsContainer = environmentsContainer {
            environmentsDecoded0 = [Swift.String]()
            for string0 in environmentsContainer {
                if let string0 = string0 {
                    environmentsDecoded0?.append(string0)
                }
            }
        }
        environments = environmentsDecoded0
        let templateVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateVersion)
        templateVersion = templateVersionDecoded
    }
}
