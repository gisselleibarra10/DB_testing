// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension IotClientTypes {
    /// The authorizer description.
    public struct AuthorizerDescription: Swift.Equatable {
        /// The authorizer ARN.
        public var authorizerArn: Swift.String?
        /// The authorizer's Lambda function ARN.
        public var authorizerFunctionArn: Swift.String?
        /// The authorizer name.
        public var authorizerName: Swift.String?
        /// The UNIX timestamp of when the authorizer was created.
        public var creationDate: ClientRuntime.Date?
        /// When true, the result from the authorizerâ€™s Lambda function is cached for the time specified in refreshAfterInSeconds. The cached result is used while the device reuses the same HTTP connection.
        public var enableCachingForHttp: Swift.Bool?
        /// The UNIX timestamp of when the authorizer was last updated.
        public var lastModifiedDate: ClientRuntime.Date?
        /// Specifies whether IoT validates the token signature in an authorization request.
        public var signingDisabled: Swift.Bool?
        /// The status of the authorizer.
        public var status: IotClientTypes.AuthorizerStatus?
        /// The key used to extract the token from the HTTP headers.
        public var tokenKeyName: Swift.String?
        /// The public keys used to validate the token signature returned by your custom authentication service.
        public var tokenSigningPublicKeys: [Swift.String:Swift.String]?

        public init (
            authorizerArn: Swift.String? = nil,
            authorizerFunctionArn: Swift.String? = nil,
            authorizerName: Swift.String? = nil,
            creationDate: ClientRuntime.Date? = nil,
            enableCachingForHttp: Swift.Bool? = nil,
            lastModifiedDate: ClientRuntime.Date? = nil,
            signingDisabled: Swift.Bool? = nil,
            status: IotClientTypes.AuthorizerStatus? = nil,
            tokenKeyName: Swift.String? = nil,
            tokenSigningPublicKeys: [Swift.String:Swift.String]? = nil
        )
        {
            self.authorizerArn = authorizerArn
            self.authorizerFunctionArn = authorizerFunctionArn
            self.authorizerName = authorizerName
            self.creationDate = creationDate
            self.enableCachingForHttp = enableCachingForHttp
            self.lastModifiedDate = lastModifiedDate
            self.signingDisabled = signingDisabled
            self.status = status
            self.tokenKeyName = tokenKeyName
            self.tokenSigningPublicKeys = tokenSigningPublicKeys
        }
    }

}
