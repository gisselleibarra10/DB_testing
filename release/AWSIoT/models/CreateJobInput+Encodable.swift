// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CreateJobInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case abortConfig
        case description
        case document
        case documentParameters
        case documentSource
        case jobExecutionsRetryConfig
        case jobExecutionsRolloutConfig
        case jobTemplateArn
        case namespaceId
        case presignedUrlConfig
        case tags
        case targetSelection
        case targets
        case timeoutConfig
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let abortConfig = self.abortConfig {
            try encodeContainer.encode(abortConfig, forKey: .abortConfig)
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let document = self.document {
            try encodeContainer.encode(document, forKey: .document)
        }
        if let documentParameters = documentParameters {
            var documentParametersContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .documentParameters)
            for (dictKey0, parametermap0) in documentParameters {
                try documentParametersContainer.encode(parametermap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let documentSource = self.documentSource {
            try encodeContainer.encode(documentSource, forKey: .documentSource)
        }
        if let jobExecutionsRetryConfig = self.jobExecutionsRetryConfig {
            try encodeContainer.encode(jobExecutionsRetryConfig, forKey: .jobExecutionsRetryConfig)
        }
        if let jobExecutionsRolloutConfig = self.jobExecutionsRolloutConfig {
            try encodeContainer.encode(jobExecutionsRolloutConfig, forKey: .jobExecutionsRolloutConfig)
        }
        if let jobTemplateArn = self.jobTemplateArn {
            try encodeContainer.encode(jobTemplateArn, forKey: .jobTemplateArn)
        }
        if let namespaceId = self.namespaceId {
            try encodeContainer.encode(namespaceId, forKey: .namespaceId)
        }
        if let presignedUrlConfig = self.presignedUrlConfig {
            try encodeContainer.encode(presignedUrlConfig, forKey: .presignedUrlConfig)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
        if let targetSelection = self.targetSelection {
            try encodeContainer.encode(targetSelection.rawValue, forKey: .targetSelection)
        }
        if let targets = targets {
            var targetsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .targets)
            for jobtargets0 in targets {
                try targetsContainer.encode(jobtargets0)
            }
        }
        if let timeoutConfig = self.timeoutConfig {
            try encodeContainer.encode(timeoutConfig, forKey: .timeoutConfig)
        }
    }
}
