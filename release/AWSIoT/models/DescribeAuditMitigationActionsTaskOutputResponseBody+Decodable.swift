// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeAuditMitigationActionsTaskOutputResponseBody: Swift.Equatable {
    let taskStatus: IotClientTypes.AuditMitigationActionsTaskStatus?
    let startTime: ClientRuntime.Date?
    let endTime: ClientRuntime.Date?
    let taskStatistics: [Swift.String:IotClientTypes.TaskStatisticsForAuditCheck]?
    let target: IotClientTypes.AuditMitigationActionsTaskTarget?
    let auditCheckToActionsMapping: [Swift.String:[Swift.String]]?
    let actionsDefinition: [IotClientTypes.MitigationAction]?
}

extension DescribeAuditMitigationActionsTaskOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case actionsDefinition
        case auditCheckToActionsMapping
        case endTime
        case startTime
        case target
        case taskStatistics
        case taskStatus
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let taskStatusDecoded = try containerValues.decodeIfPresent(IotClientTypes.AuditMitigationActionsTaskStatus.self, forKey: .taskStatus)
        taskStatus = taskStatusDecoded
        let startTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .startTime)
        startTime = startTimeDecoded
        let endTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .endTime)
        endTime = endTimeDecoded
        let taskStatisticsContainer = try containerValues.decodeIfPresent([Swift.String: IotClientTypes.TaskStatisticsForAuditCheck?].self, forKey: .taskStatistics)
        var taskStatisticsDecoded0: [Swift.String:IotClientTypes.TaskStatisticsForAuditCheck]? = nil
        if let taskStatisticsContainer = taskStatisticsContainer {
            taskStatisticsDecoded0 = [Swift.String:IotClientTypes.TaskStatisticsForAuditCheck]()
            for (key0, taskstatisticsforauditcheck0) in taskStatisticsContainer {
                if let taskstatisticsforauditcheck0 = taskstatisticsforauditcheck0 {
                    taskStatisticsDecoded0?[key0] = taskstatisticsforauditcheck0
                }
            }
        }
        taskStatistics = taskStatisticsDecoded0
        let targetDecoded = try containerValues.decodeIfPresent(IotClientTypes.AuditMitigationActionsTaskTarget.self, forKey: .target)
        target = targetDecoded
        let auditCheckToActionsMappingContainer = try containerValues.decodeIfPresent([Swift.String: [Swift.String?]?].self, forKey: .auditCheckToActionsMapping)
        var auditCheckToActionsMappingDecoded0: [Swift.String:[Swift.String]]? = nil
        if let auditCheckToActionsMappingContainer = auditCheckToActionsMappingContainer {
            auditCheckToActionsMappingDecoded0 = [Swift.String:[Swift.String]]()
            for (key0, mitigationactionnamelist0) in auditCheckToActionsMappingContainer {
                var mitigationactionnamelist0Decoded0: [Swift.String]? = nil
                if let mitigationactionnamelist0 = mitigationactionnamelist0 {
                    mitigationactionnamelist0Decoded0 = [Swift.String]()
                    for string1 in mitigationactionnamelist0 {
                        if let string1 = string1 {
                            mitigationactionnamelist0Decoded0?.append(string1)
                        }
                    }
                }
                auditCheckToActionsMappingDecoded0?[key0] = mitigationactionnamelist0Decoded0
            }
        }
        auditCheckToActionsMapping = auditCheckToActionsMappingDecoded0
        let actionsDefinitionContainer = try containerValues.decodeIfPresent([IotClientTypes.MitigationAction?].self, forKey: .actionsDefinition)
        var actionsDefinitionDecoded0:[IotClientTypes.MitigationAction]? = nil
        if let actionsDefinitionContainer = actionsDefinitionContainer {
            actionsDefinitionDecoded0 = [IotClientTypes.MitigationAction]()
            for structure0 in actionsDefinitionContainer {
                if let structure0 = structure0 {
                    actionsDefinitionDecoded0?.append(structure0)
                }
            }
        }
        actionsDefinition = actionsDefinitionDecoded0
    }
}
