// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension IotClientTypes.AuthorizerDescription: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case authorizerArn
        case authorizerFunctionArn
        case authorizerName
        case creationDate
        case enableCachingForHttp
        case lastModifiedDate
        case signingDisabled
        case status
        case tokenKeyName
        case tokenSigningPublicKeys
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let authorizerArn = self.authorizerArn {
            try encodeContainer.encode(authorizerArn, forKey: .authorizerArn)
        }
        if let authorizerFunctionArn = self.authorizerFunctionArn {
            try encodeContainer.encode(authorizerFunctionArn, forKey: .authorizerFunctionArn)
        }
        if let authorizerName = self.authorizerName {
            try encodeContainer.encode(authorizerName, forKey: .authorizerName)
        }
        if let creationDate = self.creationDate {
            try encodeContainer.encode(creationDate.timeIntervalSince1970, forKey: .creationDate)
        }
        if let enableCachingForHttp = self.enableCachingForHttp {
            try encodeContainer.encode(enableCachingForHttp, forKey: .enableCachingForHttp)
        }
        if let lastModifiedDate = self.lastModifiedDate {
            try encodeContainer.encode(lastModifiedDate.timeIntervalSince1970, forKey: .lastModifiedDate)
        }
        if let signingDisabled = self.signingDisabled {
            try encodeContainer.encode(signingDisabled, forKey: .signingDisabled)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let tokenKeyName = self.tokenKeyName {
            try encodeContainer.encode(tokenKeyName, forKey: .tokenKeyName)
        }
        if let tokenSigningPublicKeys = tokenSigningPublicKeys {
            var tokenSigningPublicKeysContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tokenSigningPublicKeys)
            for (dictKey0, publickeymap0) in tokenSigningPublicKeys {
                try tokenSigningPublicKeysContainer.encode(publickeymap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let authorizerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .authorizerName)
        authorizerName = authorizerNameDecoded
        let authorizerArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .authorizerArn)
        authorizerArn = authorizerArnDecoded
        let authorizerFunctionArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .authorizerFunctionArn)
        authorizerFunctionArn = authorizerFunctionArnDecoded
        let tokenKeyNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tokenKeyName)
        tokenKeyName = tokenKeyNameDecoded
        let tokenSigningPublicKeysContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tokenSigningPublicKeys)
        var tokenSigningPublicKeysDecoded0: [Swift.String:Swift.String]? = nil
        if let tokenSigningPublicKeysContainer = tokenSigningPublicKeysContainer {
            tokenSigningPublicKeysDecoded0 = [Swift.String:Swift.String]()
            for (key0, keyvalue0) in tokenSigningPublicKeysContainer {
                if let keyvalue0 = keyvalue0 {
                    tokenSigningPublicKeysDecoded0?[key0] = keyvalue0
                }
            }
        }
        tokenSigningPublicKeys = tokenSigningPublicKeysDecoded0
        let statusDecoded = try containerValues.decodeIfPresent(IotClientTypes.AuthorizerStatus.self, forKey: .status)
        status = statusDecoded
        let creationDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationDate)
        creationDate = creationDateDecoded
        let lastModifiedDateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedDate)
        lastModifiedDate = lastModifiedDateDecoded
        let signingDisabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .signingDisabled)
        signingDisabled = signingDisabledDecoded
        let enableCachingForHttpDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enableCachingForHttp)
        enableCachingForHttp = enableCachingForHttpDecoded
    }
}
