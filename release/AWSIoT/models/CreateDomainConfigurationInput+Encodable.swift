// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CreateDomainConfigurationInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case authorizerConfig
        case domainName
        case serverCertificateArns
        case serviceType
        case tags
        case validationCertificateArn
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let authorizerConfig = self.authorizerConfig {
            try encodeContainer.encode(authorizerConfig, forKey: .authorizerConfig)
        }
        if let domainName = self.domainName {
            try encodeContainer.encode(domainName, forKey: .domainName)
        }
        if let serverCertificateArns = serverCertificateArns {
            var serverCertificateArnsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .serverCertificateArns)
            for servercertificatearns0 in serverCertificateArns {
                try serverCertificateArnsContainer.encode(servercertificatearns0)
            }
        }
        if let serviceType = self.serviceType {
            try encodeContainer.encode(serviceType.rawValue, forKey: .serviceType)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
        if let validationCertificateArn = self.validationCertificateArn {
            try encodeContainer.encode(validationCertificateArn, forKey: .validationCertificateArn)
        }
    }
}
