// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension IotClientTypes.CustomCodeSigning: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case certificateChain
        case hashAlgorithm
        case signature
        case signatureAlgorithm
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let certificateChain = self.certificateChain {
            try encodeContainer.encode(certificateChain, forKey: .certificateChain)
        }
        if let hashAlgorithm = self.hashAlgorithm {
            try encodeContainer.encode(hashAlgorithm, forKey: .hashAlgorithm)
        }
        if let signature = self.signature {
            try encodeContainer.encode(signature, forKey: .signature)
        }
        if let signatureAlgorithm = self.signatureAlgorithm {
            try encodeContainer.encode(signatureAlgorithm, forKey: .signatureAlgorithm)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let signatureDecoded = try containerValues.decodeIfPresent(IotClientTypes.CodeSigningSignature.self, forKey: .signature)
        signature = signatureDecoded
        let certificateChainDecoded = try containerValues.decodeIfPresent(IotClientTypes.CodeSigningCertificateChain.self, forKey: .certificateChain)
        certificateChain = certificateChainDecoded
        let hashAlgorithmDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .hashAlgorithm)
        hashAlgorithm = hashAlgorithmDecoded
        let signatureAlgorithmDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .signatureAlgorithm)
        signatureAlgorithm = signatureAlgorithmDecoded
    }
}
