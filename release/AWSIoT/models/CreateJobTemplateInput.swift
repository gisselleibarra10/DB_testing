// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct CreateJobTemplateInput: Swift.Equatable {
    /// The criteria that determine when and how a job abort takes place.
    public var abortConfig: IotClientTypes.AbortConfig?
    /// A description of the job document.
    /// This member is required.
    public var description: Swift.String?
    /// The job document. Required if you don't specify a value for documentSource.
    public var document: Swift.String?
    /// An S3 link to the job document to use in the template. Required if you don't specify a value for document. If the job document resides in an S3 bucket, you must use a placeholder link when specifying the document. The placeholder link is of the following form: ${aws:iot:s3-presigned-url:https://s3.amazonaws.com/bucket/key} where bucket is your bucket name and key is the object in the bucket to which you are linking.
    public var documentSource: Swift.String?
    /// The ARN of the job to use as the basis for the job template.
    public var jobArn: Swift.String?
    /// Allows you to create the criteria to retry a job.
    public var jobExecutionsRetryConfig: IotClientTypes.JobExecutionsRetryConfig?
    /// Allows you to create a staged rollout of a job.
    public var jobExecutionsRolloutConfig: IotClientTypes.JobExecutionsRolloutConfig?
    /// A unique identifier for the job template. We recommend using a UUID. Alpha-numeric characters, "-", and "_" are valid for use here.
    /// This member is required.
    public var jobTemplateId: Swift.String?
    /// Configuration for pre-signed S3 URLs.
    public var presignedUrlConfig: IotClientTypes.PresignedUrlConfig?
    /// Metadata that can be used to manage the job template.
    public var tags: [IotClientTypes.Tag]?
    /// Specifies the amount of time each device has to finish its execution of the job. A timer is started when the job execution status is set to IN_PROGRESS. If the job execution status is not set to another terminal state before the timer expires, it will be automatically set to TIMED_OUT.
    public var timeoutConfig: IotClientTypes.TimeoutConfig?

    public init (
        abortConfig: IotClientTypes.AbortConfig? = nil,
        description: Swift.String? = nil,
        document: Swift.String? = nil,
        documentSource: Swift.String? = nil,
        jobArn: Swift.String? = nil,
        jobExecutionsRetryConfig: IotClientTypes.JobExecutionsRetryConfig? = nil,
        jobExecutionsRolloutConfig: IotClientTypes.JobExecutionsRolloutConfig? = nil,
        jobTemplateId: Swift.String? = nil,
        presignedUrlConfig: IotClientTypes.PresignedUrlConfig? = nil,
        tags: [IotClientTypes.Tag]? = nil,
        timeoutConfig: IotClientTypes.TimeoutConfig? = nil
    )
    {
        self.abortConfig = abortConfig
        self.description = description
        self.document = document
        self.documentSource = documentSource
        self.jobArn = jobArn
        self.jobExecutionsRetryConfig = jobExecutionsRetryConfig
        self.jobExecutionsRolloutConfig = jobExecutionsRolloutConfig
        self.jobTemplateId = jobTemplateId
        self.presignedUrlConfig = presignedUrlConfig
        self.tags = tags
        self.timeoutConfig = timeoutConfig
    }
}
