// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension IotClientTypes.Action: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cloudwatchAlarm
        case cloudwatchLogs
        case cloudwatchMetric
        case dynamoDB
        case dynamoDBv2
        case elasticsearch
        case firehose
        case http
        case iotAnalytics
        case iotEvents
        case iotSiteWise
        case kafka
        case kinesis
        case lambda
        case openSearch
        case republish
        case s3
        case salesforce
        case sns
        case sqs
        case stepFunctions
        case timestream
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cloudwatchAlarm = self.cloudwatchAlarm {
            try encodeContainer.encode(cloudwatchAlarm, forKey: .cloudwatchAlarm)
        }
        if let cloudwatchLogs = self.cloudwatchLogs {
            try encodeContainer.encode(cloudwatchLogs, forKey: .cloudwatchLogs)
        }
        if let cloudwatchMetric = self.cloudwatchMetric {
            try encodeContainer.encode(cloudwatchMetric, forKey: .cloudwatchMetric)
        }
        if let dynamoDB = self.dynamoDB {
            try encodeContainer.encode(dynamoDB, forKey: .dynamoDB)
        }
        if let dynamoDBv2 = self.dynamoDBv2 {
            try encodeContainer.encode(dynamoDBv2, forKey: .dynamoDBv2)
        }
        if let elasticsearch = self.elasticsearch {
            try encodeContainer.encode(elasticsearch, forKey: .elasticsearch)
        }
        if let firehose = self.firehose {
            try encodeContainer.encode(firehose, forKey: .firehose)
        }
        if let http = self.http {
            try encodeContainer.encode(http, forKey: .http)
        }
        if let iotAnalytics = self.iotAnalytics {
            try encodeContainer.encode(iotAnalytics, forKey: .iotAnalytics)
        }
        if let iotEvents = self.iotEvents {
            try encodeContainer.encode(iotEvents, forKey: .iotEvents)
        }
        if let iotSiteWise = self.iotSiteWise {
            try encodeContainer.encode(iotSiteWise, forKey: .iotSiteWise)
        }
        if let kafka = self.kafka {
            try encodeContainer.encode(kafka, forKey: .kafka)
        }
        if let kinesis = self.kinesis {
            try encodeContainer.encode(kinesis, forKey: .kinesis)
        }
        if let lambda = self.lambda {
            try encodeContainer.encode(lambda, forKey: .lambda)
        }
        if let openSearch = self.openSearch {
            try encodeContainer.encode(openSearch, forKey: .openSearch)
        }
        if let republish = self.republish {
            try encodeContainer.encode(republish, forKey: .republish)
        }
        if let s3 = self.s3 {
            try encodeContainer.encode(s3, forKey: .s3)
        }
        if let salesforce = self.salesforce {
            try encodeContainer.encode(salesforce, forKey: .salesforce)
        }
        if let sns = self.sns {
            try encodeContainer.encode(sns, forKey: .sns)
        }
        if let sqs = self.sqs {
            try encodeContainer.encode(sqs, forKey: .sqs)
        }
        if let stepFunctions = self.stepFunctions {
            try encodeContainer.encode(stepFunctions, forKey: .stepFunctions)
        }
        if let timestream = self.timestream {
            try encodeContainer.encode(timestream, forKey: .timestream)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dynamoDBDecoded = try containerValues.decodeIfPresent(IotClientTypes.DynamoDBAction.self, forKey: .dynamoDB)
        dynamoDB = dynamoDBDecoded
        let dynamoDBv2Decoded = try containerValues.decodeIfPresent(IotClientTypes.DynamoDBv2Action.self, forKey: .dynamoDBv2)
        dynamoDBv2 = dynamoDBv2Decoded
        let lambdaDecoded = try containerValues.decodeIfPresent(IotClientTypes.LambdaAction.self, forKey: .lambda)
        lambda = lambdaDecoded
        let snsDecoded = try containerValues.decodeIfPresent(IotClientTypes.SnsAction.self, forKey: .sns)
        sns = snsDecoded
        let sqsDecoded = try containerValues.decodeIfPresent(IotClientTypes.SqsAction.self, forKey: .sqs)
        sqs = sqsDecoded
        let kinesisDecoded = try containerValues.decodeIfPresent(IotClientTypes.KinesisAction.self, forKey: .kinesis)
        kinesis = kinesisDecoded
        let republishDecoded = try containerValues.decodeIfPresent(IotClientTypes.RepublishAction.self, forKey: .republish)
        republish = republishDecoded
        let s3Decoded = try containerValues.decodeIfPresent(IotClientTypes.S3Action.self, forKey: .s3)
        s3 = s3Decoded
        let firehoseDecoded = try containerValues.decodeIfPresent(IotClientTypes.FirehoseAction.self, forKey: .firehose)
        firehose = firehoseDecoded
        let cloudwatchMetricDecoded = try containerValues.decodeIfPresent(IotClientTypes.CloudwatchMetricAction.self, forKey: .cloudwatchMetric)
        cloudwatchMetric = cloudwatchMetricDecoded
        let cloudwatchAlarmDecoded = try containerValues.decodeIfPresent(IotClientTypes.CloudwatchAlarmAction.self, forKey: .cloudwatchAlarm)
        cloudwatchAlarm = cloudwatchAlarmDecoded
        let cloudwatchLogsDecoded = try containerValues.decodeIfPresent(IotClientTypes.CloudwatchLogsAction.self, forKey: .cloudwatchLogs)
        cloudwatchLogs = cloudwatchLogsDecoded
        let elasticsearchDecoded = try containerValues.decodeIfPresent(IotClientTypes.ElasticsearchAction.self, forKey: .elasticsearch)
        elasticsearch = elasticsearchDecoded
        let salesforceDecoded = try containerValues.decodeIfPresent(IotClientTypes.SalesforceAction.self, forKey: .salesforce)
        salesforce = salesforceDecoded
        let iotAnalyticsDecoded = try containerValues.decodeIfPresent(IotClientTypes.IotAnalyticsAction.self, forKey: .iotAnalytics)
        iotAnalytics = iotAnalyticsDecoded
        let iotEventsDecoded = try containerValues.decodeIfPresent(IotClientTypes.IotEventsAction.self, forKey: .iotEvents)
        iotEvents = iotEventsDecoded
        let iotSiteWiseDecoded = try containerValues.decodeIfPresent(IotClientTypes.IotSiteWiseAction.self, forKey: .iotSiteWise)
        iotSiteWise = iotSiteWiseDecoded
        let stepFunctionsDecoded = try containerValues.decodeIfPresent(IotClientTypes.StepFunctionsAction.self, forKey: .stepFunctions)
        stepFunctions = stepFunctionsDecoded
        let timestreamDecoded = try containerValues.decodeIfPresent(IotClientTypes.TimestreamAction.self, forKey: .timestream)
        timestream = timestreamDecoded
        let httpDecoded = try containerValues.decodeIfPresent(IotClientTypes.HttpAction.self, forKey: .http)
        http = httpDecoded
        let kafkaDecoded = try containerValues.decodeIfPresent(IotClientTypes.KafkaAction.self, forKey: .kafka)
        kafka = kafkaDecoded
        let openSearchDecoded = try containerValues.decodeIfPresent(IotClientTypes.OpenSearchAction.self, forKey: .openSearch)
        openSearch = openSearchDecoded
    }
}
