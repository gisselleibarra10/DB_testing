// Code generated by smithy-swift-codegen. DO NOT EDIT!



extension IotClientTypes {
    public enum MitigationActionType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case addThingsToThingGroup
        case enableIotLogging
        case publishFindingToSns
        case replaceDefaultPolicyVersion
        case updateCaCertificate
        case updateDeviceCertificate
        case sdkUnknown(Swift.String)

        public static var allCases: [MitigationActionType] {
            return [
                .addThingsToThingGroup,
                .enableIotLogging,
                .publishFindingToSns,
                .replaceDefaultPolicyVersion,
                .updateCaCertificate,
                .updateDeviceCertificate,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .addThingsToThingGroup: return "ADD_THINGS_TO_THING_GROUP"
            case .enableIotLogging: return "ENABLE_IOT_LOGGING"
            case .publishFindingToSns: return "PUBLISH_FINDING_TO_SNS"
            case .replaceDefaultPolicyVersion: return "REPLACE_DEFAULT_POLICY_VERSION"
            case .updateCaCertificate: return "UPDATE_CA_CERTIFICATE"
            case .updateDeviceCertificate: return "UPDATE_DEVICE_CERTIFICATE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = MitigationActionType(rawValue: rawValue) ?? MitigationActionType.sdkUnknown(rawValue)
        }
    }
}
