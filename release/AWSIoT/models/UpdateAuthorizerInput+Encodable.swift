// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension UpdateAuthorizerInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case authorizerFunctionArn
        case enableCachingForHttp
        case status
        case tokenKeyName
        case tokenSigningPublicKeys
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let authorizerFunctionArn = self.authorizerFunctionArn {
            try encodeContainer.encode(authorizerFunctionArn, forKey: .authorizerFunctionArn)
        }
        if let enableCachingForHttp = self.enableCachingForHttp {
            try encodeContainer.encode(enableCachingForHttp, forKey: .enableCachingForHttp)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let tokenKeyName = self.tokenKeyName {
            try encodeContainer.encode(tokenKeyName, forKey: .tokenKeyName)
        }
        if let tokenSigningPublicKeys = tokenSigningPublicKeys {
            var tokenSigningPublicKeysContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tokenSigningPublicKeys)
            for (dictKey0, publickeymap0) in tokenSigningPublicKeys {
                try tokenSigningPublicKeysContainer.encode(publickeymap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }
}
