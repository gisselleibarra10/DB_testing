// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeThingOutputResponseBody: Swift.Equatable {
    let defaultClientId: Swift.String?
    let thingName: Swift.String?
    let thingId: Swift.String?
    let thingArn: Swift.String?
    let thingTypeName: Swift.String?
    let attributes: [Swift.String:Swift.String]?
    let version: Swift.Int
    let billingGroupName: Swift.String?
}

extension DescribeThingOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attributes
        case billingGroupName
        case defaultClientId
        case thingArn
        case thingId
        case thingName
        case thingTypeName
        case version
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let defaultClientIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .defaultClientId)
        defaultClientId = defaultClientIdDecoded
        let thingNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .thingName)
        thingName = thingNameDecoded
        let thingIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .thingId)
        thingId = thingIdDecoded
        let thingArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .thingArn)
        thingArn = thingArnDecoded
        let thingTypeNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .thingTypeName)
        thingTypeName = thingTypeNameDecoded
        let attributesContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .attributes)
        var attributesDecoded0: [Swift.String:Swift.String]? = nil
        if let attributesContainer = attributesContainer {
            attributesDecoded0 = [Swift.String:Swift.String]()
            for (key0, attributevalue0) in attributesContainer {
                if let attributevalue0 = attributevalue0 {
                    attributesDecoded0?[key0] = attributevalue0
                }
            }
        }
        attributes = attributesDecoded0
        let versionDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .version) ?? 0
        version = versionDecoded
        let billingGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .billingGroupName)
        billingGroupName = billingGroupNameDecoded
    }
}
