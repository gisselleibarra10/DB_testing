// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct RegisterCACertificateInputBody: Swift.Equatable {
    let caCertificate: Swift.String?
    let verificationCertificate: Swift.String?
    let registrationConfig: IotClientTypes.RegistrationConfig?
    let tags: [IotClientTypes.Tag]?
    let certificateMode: IotClientTypes.CertificateMode?
}

extension RegisterCACertificateInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case caCertificate
        case certificateMode
        case registrationConfig
        case tags
        case verificationCertificate
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let caCertificateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .caCertificate)
        caCertificate = caCertificateDecoded
        let verificationCertificateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .verificationCertificate)
        verificationCertificate = verificationCertificateDecoded
        let registrationConfigDecoded = try containerValues.decodeIfPresent(IotClientTypes.RegistrationConfig.self, forKey: .registrationConfig)
        registrationConfig = registrationConfigDecoded
        let tagsContainer = try containerValues.decodeIfPresent([IotClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[IotClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [IotClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let certificateModeDecoded = try containerValues.decodeIfPresent(IotClientTypes.CertificateMode.self, forKey: .certificateMode)
        certificateMode = certificateModeDecoded
    }
}
