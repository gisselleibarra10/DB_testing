// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension IotClientTypes.JobProcessDetails: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case numberOfCanceledThings
        case numberOfFailedThings
        case numberOfInProgressThings
        case numberOfQueuedThings
        case numberOfRejectedThings
        case numberOfRemovedThings
        case numberOfSucceededThings
        case numberOfTimedOutThings
        case processingTargets
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let numberOfCanceledThings = self.numberOfCanceledThings {
            try encodeContainer.encode(numberOfCanceledThings, forKey: .numberOfCanceledThings)
        }
        if let numberOfFailedThings = self.numberOfFailedThings {
            try encodeContainer.encode(numberOfFailedThings, forKey: .numberOfFailedThings)
        }
        if let numberOfInProgressThings = self.numberOfInProgressThings {
            try encodeContainer.encode(numberOfInProgressThings, forKey: .numberOfInProgressThings)
        }
        if let numberOfQueuedThings = self.numberOfQueuedThings {
            try encodeContainer.encode(numberOfQueuedThings, forKey: .numberOfQueuedThings)
        }
        if let numberOfRejectedThings = self.numberOfRejectedThings {
            try encodeContainer.encode(numberOfRejectedThings, forKey: .numberOfRejectedThings)
        }
        if let numberOfRemovedThings = self.numberOfRemovedThings {
            try encodeContainer.encode(numberOfRemovedThings, forKey: .numberOfRemovedThings)
        }
        if let numberOfSucceededThings = self.numberOfSucceededThings {
            try encodeContainer.encode(numberOfSucceededThings, forKey: .numberOfSucceededThings)
        }
        if let numberOfTimedOutThings = self.numberOfTimedOutThings {
            try encodeContainer.encode(numberOfTimedOutThings, forKey: .numberOfTimedOutThings)
        }
        if let processingTargets = processingTargets {
            var processingTargetsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .processingTargets)
            for processingtargetnamelist0 in processingTargets {
                try processingTargetsContainer.encode(processingtargetnamelist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let processingTargetsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .processingTargets)
        var processingTargetsDecoded0:[Swift.String]? = nil
        if let processingTargetsContainer = processingTargetsContainer {
            processingTargetsDecoded0 = [Swift.String]()
            for string0 in processingTargetsContainer {
                if let string0 = string0 {
                    processingTargetsDecoded0?.append(string0)
                }
            }
        }
        processingTargets = processingTargetsDecoded0
        let numberOfCanceledThingsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .numberOfCanceledThings)
        numberOfCanceledThings = numberOfCanceledThingsDecoded
        let numberOfSucceededThingsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .numberOfSucceededThings)
        numberOfSucceededThings = numberOfSucceededThingsDecoded
        let numberOfFailedThingsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .numberOfFailedThings)
        numberOfFailedThings = numberOfFailedThingsDecoded
        let numberOfRejectedThingsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .numberOfRejectedThings)
        numberOfRejectedThings = numberOfRejectedThingsDecoded
        let numberOfQueuedThingsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .numberOfQueuedThings)
        numberOfQueuedThings = numberOfQueuedThingsDecoded
        let numberOfInProgressThingsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .numberOfInProgressThings)
        numberOfInProgressThings = numberOfInProgressThingsDecoded
        let numberOfRemovedThingsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .numberOfRemovedThings)
        numberOfRemovedThings = numberOfRemovedThingsDecoded
        let numberOfTimedOutThingsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .numberOfTimedOutThings)
        numberOfTimedOutThings = numberOfTimedOutThingsDecoded
    }
}
