// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension StartDetectMitigationActionsTaskInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case actions
        case clientRequestToken
        case includeOnlyActiveViolations
        case includeSuppressedAlerts
        case target
        case violationEventOccurrenceRange
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let actions = actions {
            var actionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .actions)
            for detectmitigationactionstoexecutelist0 in actions {
                try actionsContainer.encode(detectmitigationactionstoexecutelist0)
            }
        }
        if let clientRequestToken = self.clientRequestToken {
            try encodeContainer.encode(clientRequestToken, forKey: .clientRequestToken)
        }
        if let includeOnlyActiveViolations = self.includeOnlyActiveViolations {
            try encodeContainer.encode(includeOnlyActiveViolations, forKey: .includeOnlyActiveViolations)
        }
        if let includeSuppressedAlerts = self.includeSuppressedAlerts {
            try encodeContainer.encode(includeSuppressedAlerts, forKey: .includeSuppressedAlerts)
        }
        if let target = self.target {
            try encodeContainer.encode(target, forKey: .target)
        }
        if let violationEventOccurrenceRange = self.violationEventOccurrenceRange {
            try encodeContainer.encode(violationEventOccurrenceRange, forKey: .violationEventOccurrenceRange)
        }
    }
}
