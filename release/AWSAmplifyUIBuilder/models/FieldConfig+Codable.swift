// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AmplifyUiBuilderClientTypes.FieldConfig: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case excluded
        case inputType
        case label
        case position
        case validations
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let excluded = self.excluded {
            try encodeContainer.encode(excluded, forKey: .excluded)
        }
        if let inputType = self.inputType {
            try encodeContainer.encode(inputType, forKey: .inputType)
        }
        if let label = self.label {
            try encodeContainer.encode(label, forKey: .label)
        }
        if let position = self.position {
            try encodeContainer.encode(position, forKey: .position)
        }
        if let validations = validations {
            var validationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .validations)
            for validationslist0 in validations {
                try validationsContainer.encode(validationslist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let labelDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .label)
        label = labelDecoded
        let positionDecoded = try containerValues.decodeIfPresent(AmplifyUiBuilderClientTypes.FieldPosition.self, forKey: .position)
        position = positionDecoded
        let excludedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .excluded)
        excluded = excludedDecoded
        let inputTypeDecoded = try containerValues.decodeIfPresent(AmplifyUiBuilderClientTypes.FieldInputConfig.self, forKey: .inputType)
        inputType = inputTypeDecoded
        let validationsContainer = try containerValues.decodeIfPresent([AmplifyUiBuilderClientTypes.FieldValidationConfiguration?].self, forKey: .validations)
        var validationsDecoded0:[AmplifyUiBuilderClientTypes.FieldValidationConfiguration]? = nil
        if let validationsContainer = validationsContainer {
            validationsDecoded0 = [AmplifyUiBuilderClientTypes.FieldValidationConfiguration]()
            for structure0 in validationsContainer {
                if let structure0 = structure0 {
                    validationsDecoded0?.append(structure0)
                }
            }
        }
        validations = validationsDecoded0
    }
}
