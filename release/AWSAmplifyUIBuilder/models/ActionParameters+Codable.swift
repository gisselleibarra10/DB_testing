// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AmplifyUiBuilderClientTypes.ActionParameters: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case anchor
        case fields
        case global
        case id
        case model
        case state
        case target
        case type
        case url
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let anchor = self.anchor {
            try encodeContainer.encode(anchor, forKey: .anchor)
        }
        if let fields = fields {
            var fieldsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .fields)
            for (dictKey0, componentproperties0) in fields {
                try fieldsContainer.encode(componentproperties0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let global = self.global {
            try encodeContainer.encode(global, forKey: .global)
        }
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let model = self.model {
            try encodeContainer.encode(model, forKey: .model)
        }
        if let state = self.state {
            try encodeContainer.encode(state, forKey: .state)
        }
        if let target = self.target {
            try encodeContainer.encode(target, forKey: .target)
        }
        if let type = self.type {
            try encodeContainer.encode(type, forKey: .type)
        }
        if let url = self.url {
            try encodeContainer.encode(url, forKey: .url)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let typeDecoded = try containerValues.decodeIfPresent(AmplifyUiBuilderClientTypes.ComponentProperty.self, forKey: .type)
        type = typeDecoded
        let urlDecoded = try containerValues.decodeIfPresent(AmplifyUiBuilderClientTypes.ComponentProperty.self, forKey: .url)
        url = urlDecoded
        let anchorDecoded = try containerValues.decodeIfPresent(AmplifyUiBuilderClientTypes.ComponentProperty.self, forKey: .anchor)
        anchor = anchorDecoded
        let targetDecoded = try containerValues.decodeIfPresent(AmplifyUiBuilderClientTypes.ComponentProperty.self, forKey: .target)
        target = targetDecoded
        let globalDecoded = try containerValues.decodeIfPresent(AmplifyUiBuilderClientTypes.ComponentProperty.self, forKey: .global)
        global = globalDecoded
        let modelDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .model)
        model = modelDecoded
        let idDecoded = try containerValues.decodeIfPresent(AmplifyUiBuilderClientTypes.ComponentProperty.self, forKey: .id)
        id = idDecoded
        let fieldsContainer = try containerValues.decodeIfPresent([Swift.String: AmplifyUiBuilderClientTypes.ComponentProperty?].self, forKey: .fields)
        var fieldsDecoded0: [Swift.String:AmplifyUiBuilderClientTypes.ComponentProperty]? = nil
        if let fieldsContainer = fieldsContainer {
            fieldsDecoded0 = [Swift.String:AmplifyUiBuilderClientTypes.ComponentProperty]()
            for (key0, componentproperty0) in fieldsContainer {
                if let componentproperty0 = componentproperty0 {
                    fieldsDecoded0?[key0] = componentproperty0
                }
            }
        }
        fields = fieldsDecoded0
        let stateDecoded = try containerValues.decodeIfPresent(AmplifyUiBuilderClientTypes.MutationActionSetStateParameter.self, forKey: .state)
        state = stateDecoded
    }
}
