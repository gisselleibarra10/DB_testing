// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AmplifyUiBuilderClientTypes.CreateComponentData: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bindingProperties
        case children
        case collectionProperties
        case componentType
        case events
        case name
        case overrides
        case properties
        case schemaVersion
        case sourceId
        case tags
        case variants
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let bindingProperties = bindingProperties {
            var bindingPropertiesContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .bindingProperties)
            for (dictKey0, componentbindingproperties0) in bindingProperties {
                try bindingPropertiesContainer.encode(componentbindingproperties0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let children = children {
            var childrenContainer = encodeContainer.nestedUnkeyedContainer(forKey: .children)
            for componentchildlist0 in children {
                try childrenContainer.encode(componentchildlist0)
            }
        }
        if let collectionProperties = collectionProperties {
            var collectionPropertiesContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .collectionProperties)
            for (dictKey0, componentcollectionproperties0) in collectionProperties {
                try collectionPropertiesContainer.encode(componentcollectionproperties0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let componentType = self.componentType {
            try encodeContainer.encode(componentType, forKey: .componentType)
        }
        if let events = events {
            var eventsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .events)
            for (dictKey0, componentevents0) in events {
                try eventsContainer.encode(componentevents0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let overrides = overrides {
            var overridesContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .overrides)
            for (dictKey0, componentoverrides0) in overrides {
                try overridesContainer.encode(componentoverrides0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let properties = properties {
            var propertiesContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .properties)
            for (dictKey0, componentproperties0) in properties {
                try propertiesContainer.encode(componentproperties0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let schemaVersion = self.schemaVersion {
            try encodeContainer.encode(schemaVersion, forKey: .schemaVersion)
        }
        if let sourceId = self.sourceId {
            try encodeContainer.encode(sourceId, forKey: .sourceId)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, tags0) in tags {
                try tagsContainer.encode(tags0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let variants = variants {
            var variantsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .variants)
            for componentvariants0 in variants {
                try variantsContainer.encode(componentvariants0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let sourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceId)
        sourceId = sourceIdDecoded
        let componentTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .componentType)
        componentType = componentTypeDecoded
        let propertiesContainer = try containerValues.decodeIfPresent([Swift.String: AmplifyUiBuilderClientTypes.ComponentProperty?].self, forKey: .properties)
        var propertiesDecoded0: [Swift.String:AmplifyUiBuilderClientTypes.ComponentProperty]? = nil
        if let propertiesContainer = propertiesContainer {
            propertiesDecoded0 = [Swift.String:AmplifyUiBuilderClientTypes.ComponentProperty]()
            for (key0, componentproperty0) in propertiesContainer {
                if let componentproperty0 = componentproperty0 {
                    propertiesDecoded0?[key0] = componentproperty0
                }
            }
        }
        properties = propertiesDecoded0
        let childrenContainer = try containerValues.decodeIfPresent([AmplifyUiBuilderClientTypes.ComponentChild?].self, forKey: .children)
        var childrenDecoded0:[AmplifyUiBuilderClientTypes.ComponentChild]? = nil
        if let childrenContainer = childrenContainer {
            childrenDecoded0 = [AmplifyUiBuilderClientTypes.ComponentChild]()
            for structure0 in childrenContainer {
                if let structure0 = structure0 {
                    childrenDecoded0?.append(structure0)
                }
            }
        }
        children = childrenDecoded0
        let variantsContainer = try containerValues.decodeIfPresent([AmplifyUiBuilderClientTypes.ComponentVariant?].self, forKey: .variants)
        var variantsDecoded0:[AmplifyUiBuilderClientTypes.ComponentVariant]? = nil
        if let variantsContainer = variantsContainer {
            variantsDecoded0 = [AmplifyUiBuilderClientTypes.ComponentVariant]()
            for structure0 in variantsContainer {
                if let structure0 = structure0 {
                    variantsDecoded0?.append(structure0)
                }
            }
        }
        variants = variantsDecoded0
        let overridesContainer = try containerValues.decodeIfPresent([Swift.String: [Swift.String: Swift.String?]?].self, forKey: .overrides)
        var overridesDecoded0: [Swift.String:[Swift.String:Swift.String]]? = nil
        if let overridesContainer = overridesContainer {
            overridesDecoded0 = [Swift.String:[Swift.String:Swift.String]]()
            for (key0, componentoverridesvalue0) in overridesContainer {
                var componentoverridesvalue0Decoded0: [Swift.String: Swift.String]? = nil
                if let componentoverridesvalue0 = componentoverridesvalue0 {
                    componentoverridesvalue0Decoded0 = [Swift.String: Swift.String]()
                    for (key1, string1) in componentoverridesvalue0 {
                        if let string1 = string1 {
                            componentoverridesvalue0Decoded0?[key1] = string1
                        }
                    }
                }
                overridesDecoded0?[key0] = componentoverridesvalue0Decoded0
            }
        }
        overrides = overridesDecoded0
        let bindingPropertiesContainer = try containerValues.decodeIfPresent([Swift.String: AmplifyUiBuilderClientTypes.ComponentBindingPropertiesValue?].self, forKey: .bindingProperties)
        var bindingPropertiesDecoded0: [Swift.String:AmplifyUiBuilderClientTypes.ComponentBindingPropertiesValue]? = nil
        if let bindingPropertiesContainer = bindingPropertiesContainer {
            bindingPropertiesDecoded0 = [Swift.String:AmplifyUiBuilderClientTypes.ComponentBindingPropertiesValue]()
            for (key0, componentbindingpropertiesvalue0) in bindingPropertiesContainer {
                if let componentbindingpropertiesvalue0 = componentbindingpropertiesvalue0 {
                    bindingPropertiesDecoded0?[key0] = componentbindingpropertiesvalue0
                }
            }
        }
        bindingProperties = bindingPropertiesDecoded0
        let collectionPropertiesContainer = try containerValues.decodeIfPresent([Swift.String: AmplifyUiBuilderClientTypes.ComponentDataConfiguration?].self, forKey: .collectionProperties)
        var collectionPropertiesDecoded0: [Swift.String:AmplifyUiBuilderClientTypes.ComponentDataConfiguration]? = nil
        if let collectionPropertiesContainer = collectionPropertiesContainer {
            collectionPropertiesDecoded0 = [Swift.String:AmplifyUiBuilderClientTypes.ComponentDataConfiguration]()
            for (key0, componentdataconfiguration0) in collectionPropertiesContainer {
                if let componentdataconfiguration0 = componentdataconfiguration0 {
                    collectionPropertiesDecoded0?[key0] = componentdataconfiguration0
                }
            }
        }
        collectionProperties = collectionPropertiesDecoded0
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
        let eventsContainer = try containerValues.decodeIfPresent([Swift.String: AmplifyUiBuilderClientTypes.ComponentEvent?].self, forKey: .events)
        var eventsDecoded0: [Swift.String:AmplifyUiBuilderClientTypes.ComponentEvent]? = nil
        if let eventsContainer = eventsContainer {
            eventsDecoded0 = [Swift.String:AmplifyUiBuilderClientTypes.ComponentEvent]()
            for (key0, componentevent0) in eventsContainer {
                if let componentevent0 = componentevent0 {
                    eventsDecoded0?[key0] = componentevent0
                }
            }
        }
        events = eventsDecoded0
        let schemaVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .schemaVersion)
        schemaVersion = schemaVersionDecoded
    }
}
