// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AmplifyUiBuilderClientTypes {
    /// Represents a conditional expression to set a component property. Use ComponentConditionProperty to set a property to different values conditionally, based on the value of another property.
    public struct ComponentConditionProperty: Swift.Equatable {
        /// The value to assign to the property if the condition is not met.
        public var `else`: Box<AmplifyUiBuilderClientTypes.ComponentProperty>?
        /// The name of a field. Specify this when the property is a data model.
        public var field: Swift.String?
        /// The value of the property to evaluate.
        public var operand: Swift.String?
        /// The type of the property to evaluate.
        public var operandType: Swift.String?
        /// The operator to use to perform the evaluation, such as eq to represent equals.
        public var `operator`: Swift.String?
        /// The name of the conditional property.
        public var property: Swift.String?
        /// The value to assign to the property if the condition is met.
        public var then: Box<AmplifyUiBuilderClientTypes.ComponentProperty>?

        public init (
            `else`: Box<AmplifyUiBuilderClientTypes.ComponentProperty>? = nil,
            field: Swift.String? = nil,
            operand: Swift.String? = nil,
            operandType: Swift.String? = nil,
            `operator`: Swift.String? = nil,
            property: Swift.String? = nil,
            then: Box<AmplifyUiBuilderClientTypes.ComponentProperty>? = nil
        )
        {
            self.`else` = `else`
            self.field = field
            self.operand = operand
            self.operandType = operandType
            self.`operator` = `operator`
            self.property = property
            self.then = then
        }
    }

}
