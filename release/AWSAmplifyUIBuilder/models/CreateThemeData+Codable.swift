// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AmplifyUiBuilderClientTypes.CreateThemeData: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name
        case overrides
        case tags
        case values
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let overrides = overrides {
            var overridesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .overrides)
            for themevalueslist0 in overrides {
                try overridesContainer.encode(themevalueslist0)
            }
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, tags0) in tags {
                try tagsContainer.encode(tags0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let values = values {
            var valuesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .values)
            for themevalueslist0 in values {
                try valuesContainer.encode(themevalueslist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let valuesContainer = try containerValues.decodeIfPresent([AmplifyUiBuilderClientTypes.ThemeValues?].self, forKey: .values)
        var valuesDecoded0:[AmplifyUiBuilderClientTypes.ThemeValues]? = nil
        if let valuesContainer = valuesContainer {
            valuesDecoded0 = [AmplifyUiBuilderClientTypes.ThemeValues]()
            for structure0 in valuesContainer {
                if let structure0 = structure0 {
                    valuesDecoded0?.append(structure0)
                }
            }
        }
        values = valuesDecoded0
        let overridesContainer = try containerValues.decodeIfPresent([AmplifyUiBuilderClientTypes.ThemeValues?].self, forKey: .overrides)
        var overridesDecoded0:[AmplifyUiBuilderClientTypes.ThemeValues]? = nil
        if let overridesContainer = overridesContainer {
            overridesDecoded0 = [AmplifyUiBuilderClientTypes.ThemeValues]()
            for structure0 in overridesContainer {
                if let structure0 = structure0 {
                    overridesDecoded0?.append(structure0)
                }
            }
        }
        overrides = overridesDecoded0
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
    }
}
