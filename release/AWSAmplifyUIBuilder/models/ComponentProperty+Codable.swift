// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AmplifyUiBuilderClientTypes.ComponentProperty: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bindingProperties
        case bindings
        case collectionBindingProperties
        case componentName
        case concat
        case condition
        case configured
        case defaultValue
        case event
        case importedValue
        case model
        case property
        case type
        case userAttribute
        case value
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let bindingProperties = self.bindingProperties {
            try encodeContainer.encode(bindingProperties, forKey: .bindingProperties)
        }
        if let bindings = bindings {
            var bindingsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .bindings)
            for (dictKey0, formbindings0) in bindings {
                try bindingsContainer.encode(formbindings0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let collectionBindingProperties = self.collectionBindingProperties {
            try encodeContainer.encode(collectionBindingProperties, forKey: .collectionBindingProperties)
        }
        if let componentName = self.componentName {
            try encodeContainer.encode(componentName, forKey: .componentName)
        }
        if let concat = concat {
            var concatContainer = encodeContainer.nestedUnkeyedContainer(forKey: .concat)
            for componentpropertylist0 in concat {
                try concatContainer.encode(componentpropertylist0)
            }
        }
        if let condition = self.condition {
            try encodeContainer.encode(condition, forKey: .condition)
        }
        if let configured = self.configured {
            try encodeContainer.encode(configured, forKey: .configured)
        }
        if let defaultValue = self.defaultValue {
            try encodeContainer.encode(defaultValue, forKey: .defaultValue)
        }
        if let event = self.event {
            try encodeContainer.encode(event, forKey: .event)
        }
        if let importedValue = self.importedValue {
            try encodeContainer.encode(importedValue, forKey: .importedValue)
        }
        if let model = self.model {
            try encodeContainer.encode(model, forKey: .model)
        }
        if let property = self.property {
            try encodeContainer.encode(property, forKey: .property)
        }
        if let type = self.type {
            try encodeContainer.encode(type, forKey: .type)
        }
        if let userAttribute = self.userAttribute {
            try encodeContainer.encode(userAttribute, forKey: .userAttribute)
        }
        if let value = self.value {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let valueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .value)
        value = valueDecoded
        let bindingPropertiesDecoded = try containerValues.decodeIfPresent(AmplifyUiBuilderClientTypes.ComponentPropertyBindingProperties.self, forKey: .bindingProperties)
        bindingProperties = bindingPropertiesDecoded
        let collectionBindingPropertiesDecoded = try containerValues.decodeIfPresent(AmplifyUiBuilderClientTypes.ComponentPropertyBindingProperties.self, forKey: .collectionBindingProperties)
        collectionBindingProperties = collectionBindingPropertiesDecoded
        let defaultValueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .defaultValue)
        defaultValue = defaultValueDecoded
        let modelDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .model)
        model = modelDecoded
        let bindingsContainer = try containerValues.decodeIfPresent([Swift.String: AmplifyUiBuilderClientTypes.FormBindingElement?].self, forKey: .bindings)
        var bindingsDecoded0: [Swift.String:AmplifyUiBuilderClientTypes.FormBindingElement]? = nil
        if let bindingsContainer = bindingsContainer {
            bindingsDecoded0 = [Swift.String:AmplifyUiBuilderClientTypes.FormBindingElement]()
            for (key0, formbindingelement0) in bindingsContainer {
                if let formbindingelement0 = formbindingelement0 {
                    bindingsDecoded0?[key0] = formbindingelement0
                }
            }
        }
        bindings = bindingsDecoded0
        let eventDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .event)
        event = eventDecoded
        let userAttributeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userAttribute)
        userAttribute = userAttributeDecoded
        let concatContainer = try containerValues.decodeIfPresent([AmplifyUiBuilderClientTypes.ComponentProperty?].self, forKey: .concat)
        var concatDecoded0:[AmplifyUiBuilderClientTypes.ComponentProperty]? = nil
        if let concatContainer = concatContainer {
            concatDecoded0 = [AmplifyUiBuilderClientTypes.ComponentProperty]()
            for structure0 in concatContainer {
                if let structure0 = structure0 {
                    concatDecoded0?.append(structure0)
                }
            }
        }
        concat = concatDecoded0
        let conditionDecoded = try containerValues.decodeIfPresent(AmplifyUiBuilderClientTypes.ComponentConditionProperty.self, forKey: .condition)
        condition = conditionDecoded
        let configuredDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .configured)
        configured = configuredDecoded
        let typeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .type)
        type = typeDecoded
        let importedValueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .importedValue)
        importedValue = importedValueDecoded
        let componentNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .componentName)
        componentName = componentNameDecoded
        let propertyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .property)
        property = propertyDecoded
    }
}
