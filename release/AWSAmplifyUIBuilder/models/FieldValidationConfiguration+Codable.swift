// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AmplifyUiBuilderClientTypes.FieldValidationConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case numValues
        case strValues
        case type
        case validationMessage
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let numValues = numValues {
            var numValuesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .numValues)
            for numvalues0 in numValues {
                try numValuesContainer.encode(numvalues0)
            }
        }
        if let strValues = strValues {
            var strValuesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .strValues)
            for strvalues0 in strValues {
                try strValuesContainer.encode(strvalues0)
            }
        }
        if let type = self.type {
            try encodeContainer.encode(type, forKey: .type)
        }
        if let validationMessage = self.validationMessage {
            try encodeContainer.encode(validationMessage, forKey: .validationMessage)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let typeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .type)
        type = typeDecoded
        let strValuesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .strValues)
        var strValuesDecoded0:[Swift.String]? = nil
        if let strValuesContainer = strValuesContainer {
            strValuesDecoded0 = [Swift.String]()
            for string0 in strValuesContainer {
                if let string0 = string0 {
                    strValuesDecoded0?.append(string0)
                }
            }
        }
        strValues = strValuesDecoded0
        let numValuesContainer = try containerValues.decodeIfPresent([Swift.Int?].self, forKey: .numValues)
        var numValuesDecoded0:[Swift.Int]? = nil
        if let numValuesContainer = numValuesContainer {
            numValuesDecoded0 = [Swift.Int]()
            for integer0 in numValuesContainer {
                if let integer0 = integer0 {
                    numValuesDecoded0?.append(integer0)
                }
            }
        }
        numValues = numValuesDecoded0
        let validationMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .validationMessage)
        validationMessage = validationMessageDecoded
    }
}
