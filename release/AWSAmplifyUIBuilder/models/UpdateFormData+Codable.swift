// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AmplifyUiBuilderClientTypes.UpdateFormData: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cta
        case dataType
        case fields
        case formActionType
        case name
        case schemaVersion
        case sectionalElements
        case style
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cta = self.cta {
            try encodeContainer.encode(cta, forKey: .cta)
        }
        if let dataType = self.dataType {
            try encodeContainer.encode(dataType, forKey: .dataType)
        }
        if let fields = fields {
            var fieldsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .fields)
            for (dictKey0, fieldsmap0) in fields {
                try fieldsContainer.encode(fieldsmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let formActionType = self.formActionType {
            try encodeContainer.encode(formActionType.rawValue, forKey: .formActionType)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let schemaVersion = self.schemaVersion {
            try encodeContainer.encode(schemaVersion, forKey: .schemaVersion)
        }
        if let sectionalElements = sectionalElements {
            var sectionalElementsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .sectionalElements)
            for (dictKey0, sectionalelementmap0) in sectionalElements {
                try sectionalElementsContainer.encode(sectionalelementmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let style = self.style {
            try encodeContainer.encode(style, forKey: .style)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let dataTypeDecoded = try containerValues.decodeIfPresent(AmplifyUiBuilderClientTypes.FormDataTypeConfig.self, forKey: .dataType)
        dataType = dataTypeDecoded
        let formActionTypeDecoded = try containerValues.decodeIfPresent(AmplifyUiBuilderClientTypes.FormActionType.self, forKey: .formActionType)
        formActionType = formActionTypeDecoded
        let fieldsContainer = try containerValues.decodeIfPresent([Swift.String: AmplifyUiBuilderClientTypes.FieldConfig?].self, forKey: .fields)
        var fieldsDecoded0: [Swift.String:AmplifyUiBuilderClientTypes.FieldConfig]? = nil
        if let fieldsContainer = fieldsContainer {
            fieldsDecoded0 = [Swift.String:AmplifyUiBuilderClientTypes.FieldConfig]()
            for (key0, fieldconfig0) in fieldsContainer {
                if let fieldconfig0 = fieldconfig0 {
                    fieldsDecoded0?[key0] = fieldconfig0
                }
            }
        }
        fields = fieldsDecoded0
        let styleDecoded = try containerValues.decodeIfPresent(AmplifyUiBuilderClientTypes.FormStyle.self, forKey: .style)
        style = styleDecoded
        let sectionalElementsContainer = try containerValues.decodeIfPresent([Swift.String: AmplifyUiBuilderClientTypes.SectionalElement?].self, forKey: .sectionalElements)
        var sectionalElementsDecoded0: [Swift.String:AmplifyUiBuilderClientTypes.SectionalElement]? = nil
        if let sectionalElementsContainer = sectionalElementsContainer {
            sectionalElementsDecoded0 = [Swift.String:AmplifyUiBuilderClientTypes.SectionalElement]()
            for (key0, sectionalelement0) in sectionalElementsContainer {
                if let sectionalelement0 = sectionalelement0 {
                    sectionalElementsDecoded0?[key0] = sectionalelement0
                }
            }
        }
        sectionalElements = sectionalElementsDecoded0
        let schemaVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .schemaVersion)
        schemaVersion = schemaVersionDecoded
        let ctaDecoded = try containerValues.decodeIfPresent(AmplifyUiBuilderClientTypes.FormCTA.self, forKey: .cta)
        cta = ctaDecoded
    }
}
