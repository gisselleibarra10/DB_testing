// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AmplifyUiBuilderClientTypes.Predicate: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case and
        case field
        case operand
        case `operator` = "operator"
        case or
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let and = and {
            var andContainer = encodeContainer.nestedUnkeyedContainer(forKey: .and)
            for predicatelist0 in and {
                try andContainer.encode(predicatelist0)
            }
        }
        if let field = self.field {
            try encodeContainer.encode(field, forKey: .field)
        }
        if let operand = self.operand {
            try encodeContainer.encode(operand, forKey: .operand)
        }
        if let `operator` = self.`operator` {
            try encodeContainer.encode(`operator`, forKey: .`operator`)
        }
        if let or = or {
            var orContainer = encodeContainer.nestedUnkeyedContainer(forKey: .or)
            for predicatelist0 in or {
                try orContainer.encode(predicatelist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let orContainer = try containerValues.decodeIfPresent([AmplifyUiBuilderClientTypes.Predicate?].self, forKey: .or)
        var orDecoded0:[AmplifyUiBuilderClientTypes.Predicate]? = nil
        if let orContainer = orContainer {
            orDecoded0 = [AmplifyUiBuilderClientTypes.Predicate]()
            for structure0 in orContainer {
                if let structure0 = structure0 {
                    orDecoded0?.append(structure0)
                }
            }
        }
        or = orDecoded0
        let andContainer = try containerValues.decodeIfPresent([AmplifyUiBuilderClientTypes.Predicate?].self, forKey: .and)
        var andDecoded0:[AmplifyUiBuilderClientTypes.Predicate]? = nil
        if let andContainer = andContainer {
            andDecoded0 = [AmplifyUiBuilderClientTypes.Predicate]()
            for structure0 in andContainer {
                if let structure0 = structure0 {
                    andDecoded0?.append(structure0)
                }
            }
        }
        and = andDecoded0
        let fieldDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .field)
        field = fieldDecoded
        let operatorDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .operator)
        `operator` = operatorDecoded
        let operandDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .operand)
        operand = operandDecoded
    }
}
