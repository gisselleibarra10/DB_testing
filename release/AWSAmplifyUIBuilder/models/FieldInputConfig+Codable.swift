// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AmplifyUiBuilderClientTypes.FieldInputConfig: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case defaultChecked
        case defaultCountryCode
        case defaultValue
        case descriptiveText
        case maxValue
        case minValue
        case name
        case placeholder
        case readOnly
        case `required` = "required"
        case step
        case type
        case value
        case valueMappings
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let defaultChecked = self.defaultChecked {
            try encodeContainer.encode(defaultChecked, forKey: .defaultChecked)
        }
        if let defaultCountryCode = self.defaultCountryCode {
            try encodeContainer.encode(defaultCountryCode, forKey: .defaultCountryCode)
        }
        if let defaultValue = self.defaultValue {
            try encodeContainer.encode(defaultValue, forKey: .defaultValue)
        }
        if let descriptiveText = self.descriptiveText {
            try encodeContainer.encode(descriptiveText, forKey: .descriptiveText)
        }
        if let maxValue = self.maxValue {
            try encodeContainer.encode(maxValue, forKey: .maxValue)
        }
        if let minValue = self.minValue {
            try encodeContainer.encode(minValue, forKey: .minValue)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let placeholder = self.placeholder {
            try encodeContainer.encode(placeholder, forKey: .placeholder)
        }
        if let readOnly = self.readOnly {
            try encodeContainer.encode(readOnly, forKey: .readOnly)
        }
        if let `required` = self.`required` {
            try encodeContainer.encode(`required`, forKey: .`required`)
        }
        if let step = self.step {
            try encodeContainer.encode(step, forKey: .step)
        }
        if let type = self.type {
            try encodeContainer.encode(type, forKey: .type)
        }
        if let value = self.value {
            try encodeContainer.encode(value, forKey: .value)
        }
        if let valueMappings = self.valueMappings {
            try encodeContainer.encode(valueMappings, forKey: .valueMappings)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let typeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .type)
        type = typeDecoded
        let requiredDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .required)
        `required` = requiredDecoded
        let readOnlyDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .readOnly)
        readOnly = readOnlyDecoded
        let placeholderDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .placeholder)
        placeholder = placeholderDecoded
        let defaultValueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .defaultValue)
        defaultValue = defaultValueDecoded
        let descriptiveTextDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .descriptiveText)
        descriptiveText = descriptiveTextDecoded
        let defaultCheckedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .defaultChecked)
        defaultChecked = defaultCheckedDecoded
        let defaultCountryCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .defaultCountryCode)
        defaultCountryCode = defaultCountryCodeDecoded
        let valueMappingsDecoded = try containerValues.decodeIfPresent(AmplifyUiBuilderClientTypes.ValueMappings.self, forKey: .valueMappings)
        valueMappings = valueMappingsDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let minValueDecoded = try containerValues.decodeIfPresent(Swift.Float.self, forKey: .minValue)
        minValue = minValueDecoded
        let maxValueDecoded = try containerValues.decodeIfPresent(Swift.Float.self, forKey: .maxValue)
        maxValue = maxValueDecoded
        let stepDecoded = try containerValues.decodeIfPresent(Swift.Float.self, forKey: .step)
        step = stepDecoded
        let valueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .value)
        value = valueDecoded
    }
}
