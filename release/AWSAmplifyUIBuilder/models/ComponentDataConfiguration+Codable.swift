// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AmplifyUiBuilderClientTypes.ComponentDataConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case identifiers
        case model
        case predicate
        case sort
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let identifiers = identifiers {
            var identifiersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .identifiers)
            for identifierlist0 in identifiers {
                try identifiersContainer.encode(identifierlist0)
            }
        }
        if let model = self.model {
            try encodeContainer.encode(model, forKey: .model)
        }
        if let predicate = self.predicate {
            try encodeContainer.encode(predicate, forKey: .predicate)
        }
        if let sort = sort {
            var sortContainer = encodeContainer.nestedUnkeyedContainer(forKey: .sort)
            for sortpropertylist0 in sort {
                try sortContainer.encode(sortpropertylist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let modelDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .model)
        model = modelDecoded
        let sortContainer = try containerValues.decodeIfPresent([AmplifyUiBuilderClientTypes.SortProperty?].self, forKey: .sort)
        var sortDecoded0:[AmplifyUiBuilderClientTypes.SortProperty]? = nil
        if let sortContainer = sortContainer {
            sortDecoded0 = [AmplifyUiBuilderClientTypes.SortProperty]()
            for structure0 in sortContainer {
                if let structure0 = structure0 {
                    sortDecoded0?.append(structure0)
                }
            }
        }
        sort = sortDecoded0
        let predicateDecoded = try containerValues.decodeIfPresent(AmplifyUiBuilderClientTypes.Predicate.self, forKey: .predicate)
        predicate = predicateDecoded
        let identifiersContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .identifiers)
        var identifiersDecoded0:[Swift.String]? = nil
        if let identifiersContainer = identifiersContainer {
            identifiersDecoded0 = [Swift.String]()
            for string0 in identifiersContainer {
                if let string0 = string0 {
                    identifiersDecoded0?.append(string0)
                }
            }
        }
        identifiers = identifiersDecoded0
    }
}
