// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SendBulkEmailInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bulkEmailEntries = "BulkEmailEntries"
        case configurationSetName = "ConfigurationSetName"
        case defaultContent = "DefaultContent"
        case defaultEmailTags = "DefaultEmailTags"
        case feedbackForwardingEmailAddress = "FeedbackForwardingEmailAddress"
        case feedbackForwardingEmailAddressIdentityArn = "FeedbackForwardingEmailAddressIdentityArn"
        case fromEmailAddress = "FromEmailAddress"
        case fromEmailAddressIdentityArn = "FromEmailAddressIdentityArn"
        case replyToAddresses = "ReplyToAddresses"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let bulkEmailEntries = bulkEmailEntries {
            var bulkEmailEntriesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .bulkEmailEntries)
            for bulkemailentrylist0 in bulkEmailEntries {
                try bulkEmailEntriesContainer.encode(bulkemailentrylist0)
            }
        }
        if let configurationSetName = self.configurationSetName {
            try encodeContainer.encode(configurationSetName, forKey: .configurationSetName)
        }
        if let defaultContent = self.defaultContent {
            try encodeContainer.encode(defaultContent, forKey: .defaultContent)
        }
        if let defaultEmailTags = defaultEmailTags {
            var defaultEmailTagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .defaultEmailTags)
            for messagetaglist0 in defaultEmailTags {
                try defaultEmailTagsContainer.encode(messagetaglist0)
            }
        }
        if let feedbackForwardingEmailAddress = self.feedbackForwardingEmailAddress {
            try encodeContainer.encode(feedbackForwardingEmailAddress, forKey: .feedbackForwardingEmailAddress)
        }
        if let feedbackForwardingEmailAddressIdentityArn = self.feedbackForwardingEmailAddressIdentityArn {
            try encodeContainer.encode(feedbackForwardingEmailAddressIdentityArn, forKey: .feedbackForwardingEmailAddressIdentityArn)
        }
        if let fromEmailAddress = self.fromEmailAddress {
            try encodeContainer.encode(fromEmailAddress, forKey: .fromEmailAddress)
        }
        if let fromEmailAddressIdentityArn = self.fromEmailAddressIdentityArn {
            try encodeContainer.encode(fromEmailAddressIdentityArn, forKey: .fromEmailAddressIdentityArn)
        }
        if let replyToAddresses = replyToAddresses {
            var replyToAddressesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .replyToAddresses)
            for emailaddresslist0 in replyToAddresses {
                try replyToAddressesContainer.encode(emailaddresslist0)
            }
        }
    }
}
