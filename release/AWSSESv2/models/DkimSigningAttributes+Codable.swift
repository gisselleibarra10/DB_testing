// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SesV2ClientTypes.DkimSigningAttributes: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domainSigningPrivateKey = "DomainSigningPrivateKey"
        case domainSigningSelector = "DomainSigningSelector"
        case nextSigningKeyLength = "NextSigningKeyLength"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let domainSigningPrivateKey = self.domainSigningPrivateKey {
            try encodeContainer.encode(domainSigningPrivateKey, forKey: .domainSigningPrivateKey)
        }
        if let domainSigningSelector = self.domainSigningSelector {
            try encodeContainer.encode(domainSigningSelector, forKey: .domainSigningSelector)
        }
        if let nextSigningKeyLength = self.nextSigningKeyLength {
            try encodeContainer.encode(nextSigningKeyLength.rawValue, forKey: .nextSigningKeyLength)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainSigningSelectorDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domainSigningSelector)
        domainSigningSelector = domainSigningSelectorDecoded
        let domainSigningPrivateKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domainSigningPrivateKey)
        domainSigningPrivateKey = domainSigningPrivateKeyDecoded
        let nextSigningKeyLengthDecoded = try containerValues.decodeIfPresent(SesV2ClientTypes.DkimSigningKeyLength.self, forKey: .nextSigningKeyLength)
        nextSigningKeyLength = nextSigningKeyLengthDecoded
    }
}
