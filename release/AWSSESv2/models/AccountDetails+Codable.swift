// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SesV2ClientTypes.AccountDetails: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case additionalContactEmailAddresses = "AdditionalContactEmailAddresses"
        case contactLanguage = "ContactLanguage"
        case mailType = "MailType"
        case reviewDetails = "ReviewDetails"
        case useCaseDescription = "UseCaseDescription"
        case websiteURL = "WebsiteURL"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let additionalContactEmailAddresses = additionalContactEmailAddresses {
            var additionalContactEmailAddressesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .additionalContactEmailAddresses)
            for additionalcontactemailaddresses0 in additionalContactEmailAddresses {
                try additionalContactEmailAddressesContainer.encode(additionalcontactemailaddresses0)
            }
        }
        if let contactLanguage = self.contactLanguage {
            try encodeContainer.encode(contactLanguage.rawValue, forKey: .contactLanguage)
        }
        if let mailType = self.mailType {
            try encodeContainer.encode(mailType.rawValue, forKey: .mailType)
        }
        if let reviewDetails = self.reviewDetails {
            try encodeContainer.encode(reviewDetails, forKey: .reviewDetails)
        }
        if let useCaseDescription = self.useCaseDescription {
            try encodeContainer.encode(useCaseDescription, forKey: .useCaseDescription)
        }
        if let websiteURL = self.websiteURL {
            try encodeContainer.encode(websiteURL, forKey: .websiteURL)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let mailTypeDecoded = try containerValues.decodeIfPresent(SesV2ClientTypes.MailType.self, forKey: .mailType)
        mailType = mailTypeDecoded
        let websiteURLDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .websiteURL)
        websiteURL = websiteURLDecoded
        let contactLanguageDecoded = try containerValues.decodeIfPresent(SesV2ClientTypes.ContactLanguage.self, forKey: .contactLanguage)
        contactLanguage = contactLanguageDecoded
        let useCaseDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .useCaseDescription)
        useCaseDescription = useCaseDescriptionDecoded
        let additionalContactEmailAddressesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .additionalContactEmailAddresses)
        var additionalContactEmailAddressesDecoded0:[Swift.String]? = nil
        if let additionalContactEmailAddressesContainer = additionalContactEmailAddressesContainer {
            additionalContactEmailAddressesDecoded0 = [Swift.String]()
            for string0 in additionalContactEmailAddressesContainer {
                if let string0 = string0 {
                    additionalContactEmailAddressesDecoded0?.append(string0)
                }
            }
        }
        additionalContactEmailAddresses = additionalContactEmailAddressesDecoded0
        let reviewDetailsDecoded = try containerValues.decodeIfPresent(SesV2ClientTypes.ReviewDetails.self, forKey: .reviewDetails)
        reviewDetails = reviewDetailsDecoded
    }
}
