// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct PutAccountDetailsInputBody: Swift.Equatable {
    let mailType: SesV2ClientTypes.MailType?
    let websiteURL: Swift.String?
    let contactLanguage: SesV2ClientTypes.ContactLanguage?
    let useCaseDescription: Swift.String?
    let additionalContactEmailAddresses: [Swift.String]?
    let productionAccessEnabled: Swift.Bool?
}

extension PutAccountDetailsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case additionalContactEmailAddresses = "AdditionalContactEmailAddresses"
        case contactLanguage = "ContactLanguage"
        case mailType = "MailType"
        case productionAccessEnabled = "ProductionAccessEnabled"
        case useCaseDescription = "UseCaseDescription"
        case websiteURL = "WebsiteURL"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let mailTypeDecoded = try containerValues.decodeIfPresent(SesV2ClientTypes.MailType.self, forKey: .mailType)
        mailType = mailTypeDecoded
        let websiteURLDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .websiteURL)
        websiteURL = websiteURLDecoded
        let contactLanguageDecoded = try containerValues.decodeIfPresent(SesV2ClientTypes.ContactLanguage.self, forKey: .contactLanguage)
        contactLanguage = contactLanguageDecoded
        let useCaseDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .useCaseDescription)
        useCaseDescription = useCaseDescriptionDecoded
        let additionalContactEmailAddressesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .additionalContactEmailAddresses)
        var additionalContactEmailAddressesDecoded0:[Swift.String]? = nil
        if let additionalContactEmailAddressesContainer = additionalContactEmailAddressesContainer {
            additionalContactEmailAddressesDecoded0 = [Swift.String]()
            for string0 in additionalContactEmailAddressesContainer {
                if let string0 = string0 {
                    additionalContactEmailAddressesDecoded0?.append(string0)
                }
            }
        }
        additionalContactEmailAddresses = additionalContactEmailAddressesDecoded0
        let productionAccessEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .productionAccessEnabled)
        productionAccessEnabled = productionAccessEnabledDecoded
    }
}
