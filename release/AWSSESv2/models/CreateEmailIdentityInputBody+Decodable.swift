// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateEmailIdentityInputBody: Swift.Equatable {
    let emailIdentity: Swift.String?
    let tags: [SesV2ClientTypes.Tag]?
    let dkimSigningAttributes: SesV2ClientTypes.DkimSigningAttributes?
    let configurationSetName: Swift.String?
}

extension CreateEmailIdentityInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configurationSetName = "ConfigurationSetName"
        case dkimSigningAttributes = "DkimSigningAttributes"
        case emailIdentity = "EmailIdentity"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let emailIdentityDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .emailIdentity)
        emailIdentity = emailIdentityDecoded
        let tagsContainer = try containerValues.decodeIfPresent([SesV2ClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[SesV2ClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [SesV2ClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let dkimSigningAttributesDecoded = try containerValues.decodeIfPresent(SesV2ClientTypes.DkimSigningAttributes.self, forKey: .dkimSigningAttributes)
        dkimSigningAttributes = dkimSigningAttributesDecoded
        let configurationSetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .configurationSetName)
        configurationSetName = configurationSetNameDecoded
    }
}
