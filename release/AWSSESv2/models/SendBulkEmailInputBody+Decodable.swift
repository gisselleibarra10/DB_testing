// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct SendBulkEmailInputBody: Swift.Equatable {
    let fromEmailAddress: Swift.String?
    let fromEmailAddressIdentityArn: Swift.String?
    let replyToAddresses: [Swift.String]?
    let feedbackForwardingEmailAddress: Swift.String?
    let feedbackForwardingEmailAddressIdentityArn: Swift.String?
    let defaultEmailTags: [SesV2ClientTypes.MessageTag]?
    let defaultContent: SesV2ClientTypes.BulkEmailContent?
    let bulkEmailEntries: [SesV2ClientTypes.BulkEmailEntry]?
    let configurationSetName: Swift.String?
}

extension SendBulkEmailInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bulkEmailEntries = "BulkEmailEntries"
        case configurationSetName = "ConfigurationSetName"
        case defaultContent = "DefaultContent"
        case defaultEmailTags = "DefaultEmailTags"
        case feedbackForwardingEmailAddress = "FeedbackForwardingEmailAddress"
        case feedbackForwardingEmailAddressIdentityArn = "FeedbackForwardingEmailAddressIdentityArn"
        case fromEmailAddress = "FromEmailAddress"
        case fromEmailAddressIdentityArn = "FromEmailAddressIdentityArn"
        case replyToAddresses = "ReplyToAddresses"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fromEmailAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fromEmailAddress)
        fromEmailAddress = fromEmailAddressDecoded
        let fromEmailAddressIdentityArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fromEmailAddressIdentityArn)
        fromEmailAddressIdentityArn = fromEmailAddressIdentityArnDecoded
        let replyToAddressesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .replyToAddresses)
        var replyToAddressesDecoded0:[Swift.String]? = nil
        if let replyToAddressesContainer = replyToAddressesContainer {
            replyToAddressesDecoded0 = [Swift.String]()
            for string0 in replyToAddressesContainer {
                if let string0 = string0 {
                    replyToAddressesDecoded0?.append(string0)
                }
            }
        }
        replyToAddresses = replyToAddressesDecoded0
        let feedbackForwardingEmailAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .feedbackForwardingEmailAddress)
        feedbackForwardingEmailAddress = feedbackForwardingEmailAddressDecoded
        let feedbackForwardingEmailAddressIdentityArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .feedbackForwardingEmailAddressIdentityArn)
        feedbackForwardingEmailAddressIdentityArn = feedbackForwardingEmailAddressIdentityArnDecoded
        let defaultEmailTagsContainer = try containerValues.decodeIfPresent([SesV2ClientTypes.MessageTag?].self, forKey: .defaultEmailTags)
        var defaultEmailTagsDecoded0:[SesV2ClientTypes.MessageTag]? = nil
        if let defaultEmailTagsContainer = defaultEmailTagsContainer {
            defaultEmailTagsDecoded0 = [SesV2ClientTypes.MessageTag]()
            for structure0 in defaultEmailTagsContainer {
                if let structure0 = structure0 {
                    defaultEmailTagsDecoded0?.append(structure0)
                }
            }
        }
        defaultEmailTags = defaultEmailTagsDecoded0
        let defaultContentDecoded = try containerValues.decodeIfPresent(SesV2ClientTypes.BulkEmailContent.self, forKey: .defaultContent)
        defaultContent = defaultContentDecoded
        let bulkEmailEntriesContainer = try containerValues.decodeIfPresent([SesV2ClientTypes.BulkEmailEntry?].self, forKey: .bulkEmailEntries)
        var bulkEmailEntriesDecoded0:[SesV2ClientTypes.BulkEmailEntry]? = nil
        if let bulkEmailEntriesContainer = bulkEmailEntriesContainer {
            bulkEmailEntriesDecoded0 = [SesV2ClientTypes.BulkEmailEntry]()
            for structure0 in bulkEmailEntriesContainer {
                if let structure0 = structure0 {
                    bulkEmailEntriesDecoded0?.append(structure0)
                }
            }
        }
        bulkEmailEntries = bulkEmailEntriesDecoded0
        let configurationSetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .configurationSetName)
        configurationSetName = configurationSetNameDecoded
    }
}
