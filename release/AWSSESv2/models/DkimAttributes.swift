// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SesV2ClientTypes {
    /// An object that contains information about the DKIM authentication status for an email identity. Amazon SES determines the authentication status by searching for specific records in the DNS configuration for the domain. If you used [Easy DKIM](https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim.html) to set up DKIM authentication, Amazon SES tries to find three unique CNAME records in the DNS configuration for your domain. If you provided a public key to perform DKIM authentication, Amazon SES tries to find a TXT record that uses the selector that you specified. The value of the TXT record must be a public key that's paired with the private key that you specified in the process of creating the identity
    public struct DkimAttributes: Swift.Equatable {
        /// [Easy DKIM] The key length of the DKIM key pair in use.
        public var currentSigningKeyLength: SesV2ClientTypes.DkimSigningKeyLength?
        /// [Easy DKIM] The last time a key pair was generated for this identity.
        public var lastKeyGenerationTimestamp: ClientRuntime.Date?
        /// [Easy DKIM] The key length of the future DKIM key pair to be generated. This can be changed at most once per day.
        public var nextSigningKeyLength: SesV2ClientTypes.DkimSigningKeyLength?
        /// A string that indicates how DKIM was configured for the identity. These are the possible values:
        ///
        /// * AWS_SES – Indicates that DKIM was configured for the identity by using [Easy DKIM](https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim.html).
        ///
        /// * EXTERNAL – Indicates that DKIM was configured for the identity by using Bring Your Own DKIM (BYODKIM).
        public var signingAttributesOrigin: SesV2ClientTypes.DkimSigningAttributesOrigin?
        /// If the value is true, then the messages that you send from the identity are signed using DKIM. If the value is false, then the messages that you send from the identity aren't DKIM-signed.
        public var signingEnabled: Swift.Bool
        /// Describes whether or not Amazon SES has successfully located the DKIM records in the DNS records for the domain. The status can be one of the following:
        ///
        /// * PENDING – The verification process was initiated, but Amazon SES hasn't yet detected the DKIM records in the DNS configuration for the domain.
        ///
        /// * SUCCESS – The verification process completed successfully.
        ///
        /// * FAILED – The verification process failed. This typically occurs when Amazon SES fails to find the DKIM records in the DNS configuration of the domain.
        ///
        /// * TEMPORARY_FAILURE – A temporary issue is preventing Amazon SES from determining the DKIM authentication status of the domain.
        ///
        /// * NOT_STARTED – The DKIM verification process hasn't been initiated for the domain.
        public var status: SesV2ClientTypes.DkimStatus?
        /// If you used [Easy DKIM](https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim.html) to configure DKIM authentication for the domain, then this object contains a set of unique strings that you use to create a set of CNAME records that you add to the DNS configuration for your domain. When Amazon SES detects these records in the DNS configuration for your domain, the DKIM authentication process is complete. If you configured DKIM authentication for the domain by providing your own public-private key pair, then this object contains the selector for the public key. Regardless of the DKIM authentication method you use, Amazon SES searches for the appropriate records in the DNS configuration of the domain for up to 72 hours.
        public var tokens: [Swift.String]?

        public init (
            currentSigningKeyLength: SesV2ClientTypes.DkimSigningKeyLength? = nil,
            lastKeyGenerationTimestamp: ClientRuntime.Date? = nil,
            nextSigningKeyLength: SesV2ClientTypes.DkimSigningKeyLength? = nil,
            signingAttributesOrigin: SesV2ClientTypes.DkimSigningAttributesOrigin? = nil,
            signingEnabled: Swift.Bool = false,
            status: SesV2ClientTypes.DkimStatus? = nil,
            tokens: [Swift.String]? = nil
        )
        {
            self.currentSigningKeyLength = currentSigningKeyLength
            self.lastKeyGenerationTimestamp = lastKeyGenerationTimestamp
            self.nextSigningKeyLength = nextSigningKeyLength
            self.signingAttributesOrigin = signingAttributesOrigin
            self.signingEnabled = signingEnabled
            self.status = status
            self.tokens = tokens
        }
    }

}
