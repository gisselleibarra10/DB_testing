// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension SesV2ClientTypes.DkimAttributes: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case currentSigningKeyLength = "CurrentSigningKeyLength"
        case lastKeyGenerationTimestamp = "LastKeyGenerationTimestamp"
        case nextSigningKeyLength = "NextSigningKeyLength"
        case signingAttributesOrigin = "SigningAttributesOrigin"
        case signingEnabled = "SigningEnabled"
        case status = "Status"
        case tokens = "Tokens"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let currentSigningKeyLength = self.currentSigningKeyLength {
            try encodeContainer.encode(currentSigningKeyLength.rawValue, forKey: .currentSigningKeyLength)
        }
        if let lastKeyGenerationTimestamp = self.lastKeyGenerationTimestamp {
            try encodeContainer.encode(lastKeyGenerationTimestamp.timeIntervalSince1970, forKey: .lastKeyGenerationTimestamp)
        }
        if let nextSigningKeyLength = self.nextSigningKeyLength {
            try encodeContainer.encode(nextSigningKeyLength.rawValue, forKey: .nextSigningKeyLength)
        }
        if let signingAttributesOrigin = self.signingAttributesOrigin {
            try encodeContainer.encode(signingAttributesOrigin.rawValue, forKey: .signingAttributesOrigin)
        }
        if signingEnabled != false {
            try encodeContainer.encode(signingEnabled, forKey: .signingEnabled)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let tokens = tokens {
            var tokensContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tokens)
            for dnstokenlist0 in tokens {
                try tokensContainer.encode(dnstokenlist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let signingEnabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .signingEnabled) ?? false
        signingEnabled = signingEnabledDecoded
        let statusDecoded = try containerValues.decodeIfPresent(SesV2ClientTypes.DkimStatus.self, forKey: .status)
        status = statusDecoded
        let tokensContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .tokens)
        var tokensDecoded0:[Swift.String]? = nil
        if let tokensContainer = tokensContainer {
            tokensDecoded0 = [Swift.String]()
            for string0 in tokensContainer {
                if let string0 = string0 {
                    tokensDecoded0?.append(string0)
                }
            }
        }
        tokens = tokensDecoded0
        let signingAttributesOriginDecoded = try containerValues.decodeIfPresent(SesV2ClientTypes.DkimSigningAttributesOrigin.self, forKey: .signingAttributesOrigin)
        signingAttributesOrigin = signingAttributesOriginDecoded
        let nextSigningKeyLengthDecoded = try containerValues.decodeIfPresent(SesV2ClientTypes.DkimSigningKeyLength.self, forKey: .nextSigningKeyLength)
        nextSigningKeyLength = nextSigningKeyLengthDecoded
        let currentSigningKeyLengthDecoded = try containerValues.decodeIfPresent(SesV2ClientTypes.DkimSigningKeyLength.self, forKey: .currentSigningKeyLength)
        currentSigningKeyLength = currentSigningKeyLengthDecoded
        let lastKeyGenerationTimestampDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastKeyGenerationTimestamp)
        lastKeyGenerationTimestamp = lastKeyGenerationTimestampDecoded
    }
}
