// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension DevOpsGuruClientTypes.AnomalousLogGroup: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case impactEndTime = "ImpactEndTime"
        case impactStartTime = "ImpactStartTime"
        case logAnomalyShowcases = "LogAnomalyShowcases"
        case logGroupName = "LogGroupName"
        case numberOfLogLinesScanned = "NumberOfLogLinesScanned"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let impactEndTime = self.impactEndTime {
            try encodeContainer.encode(impactEndTime.timeIntervalSince1970, forKey: .impactEndTime)
        }
        if let impactStartTime = self.impactStartTime {
            try encodeContainer.encode(impactStartTime.timeIntervalSince1970, forKey: .impactStartTime)
        }
        if let logAnomalyShowcases = logAnomalyShowcases {
            var logAnomalyShowcasesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .logAnomalyShowcases)
            for loganomalyshowcases0 in logAnomalyShowcases {
                try logAnomalyShowcasesContainer.encode(loganomalyshowcases0)
            }
        }
        if let logGroupName = self.logGroupName {
            try encodeContainer.encode(logGroupName, forKey: .logGroupName)
        }
        if numberOfLogLinesScanned != 0 {
            try encodeContainer.encode(numberOfLogLinesScanned, forKey: .numberOfLogLinesScanned)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let logGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logGroupName)
        logGroupName = logGroupNameDecoded
        let impactStartTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .impactStartTime)
        impactStartTime = impactStartTimeDecoded
        let impactEndTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .impactEndTime)
        impactEndTime = impactEndTimeDecoded
        let numberOfLogLinesScannedDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .numberOfLogLinesScanned) ?? 0
        numberOfLogLinesScanned = numberOfLogLinesScannedDecoded
        let logAnomalyShowcasesContainer = try containerValues.decodeIfPresent([DevOpsGuruClientTypes.LogAnomalyShowcase?].self, forKey: .logAnomalyShowcases)
        var logAnomalyShowcasesDecoded0:[DevOpsGuruClientTypes.LogAnomalyShowcase]? = nil
        if let logAnomalyShowcasesContainer = logAnomalyShowcasesContainer {
            logAnomalyShowcasesDecoded0 = [DevOpsGuruClientTypes.LogAnomalyShowcase]()
            for structure0 in logAnomalyShowcasesContainer {
                if let structure0 = structure0 {
                    logAnomalyShowcasesDecoded0?.append(structure0)
                }
            }
        }
        logAnomalyShowcases = logAnomalyShowcasesDecoded0
    }
}
