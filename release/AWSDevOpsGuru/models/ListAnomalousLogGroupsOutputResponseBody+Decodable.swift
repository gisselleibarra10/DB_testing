// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListAnomalousLogGroupsOutputResponseBody: Swift.Equatable {
    let insightId: Swift.String?
    let anomalousLogGroups: [DevOpsGuruClientTypes.AnomalousLogGroup]?
    let nextToken: Swift.String?
}

extension ListAnomalousLogGroupsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case anomalousLogGroups = "AnomalousLogGroups"
        case insightId = "InsightId"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let insightIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .insightId)
        insightId = insightIdDecoded
        let anomalousLogGroupsContainer = try containerValues.decodeIfPresent([DevOpsGuruClientTypes.AnomalousLogGroup?].self, forKey: .anomalousLogGroups)
        var anomalousLogGroupsDecoded0:[DevOpsGuruClientTypes.AnomalousLogGroup]? = nil
        if let anomalousLogGroupsContainer = anomalousLogGroupsContainer {
            anomalousLogGroupsDecoded0 = [DevOpsGuruClientTypes.AnomalousLogGroup]()
            for structure0 in anomalousLogGroupsContainer {
                if let structure0 = structure0 {
                    anomalousLogGroupsDecoded0?.append(structure0)
                }
            }
        }
        anomalousLogGroups = anomalousLogGroupsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
