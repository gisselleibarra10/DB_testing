// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension DevOpsGuruClientTypes.CloudWatchMetricsDetail: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dimensions = "Dimensions"
        case metricDataSummary = "MetricDataSummary"
        case metricName = "MetricName"
        case namespace = "Namespace"
        case period = "Period"
        case stat = "Stat"
        case unit = "Unit"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dimensions = dimensions {
            var dimensionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .dimensions)
            for cloudwatchmetricsdimensions0 in dimensions {
                try dimensionsContainer.encode(cloudwatchmetricsdimensions0)
            }
        }
        if let metricDataSummary = self.metricDataSummary {
            try encodeContainer.encode(metricDataSummary, forKey: .metricDataSummary)
        }
        if let metricName = self.metricName {
            try encodeContainer.encode(metricName, forKey: .metricName)
        }
        if let namespace = self.namespace {
            try encodeContainer.encode(namespace, forKey: .namespace)
        }
        if period != 0 {
            try encodeContainer.encode(period, forKey: .period)
        }
        if let stat = self.stat {
            try encodeContainer.encode(stat.rawValue, forKey: .stat)
        }
        if let unit = self.unit {
            try encodeContainer.encode(unit, forKey: .unit)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let metricNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .metricName)
        metricName = metricNameDecoded
        let namespaceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .namespace)
        namespace = namespaceDecoded
        let dimensionsContainer = try containerValues.decodeIfPresent([DevOpsGuruClientTypes.CloudWatchMetricsDimension?].self, forKey: .dimensions)
        var dimensionsDecoded0:[DevOpsGuruClientTypes.CloudWatchMetricsDimension]? = nil
        if let dimensionsContainer = dimensionsContainer {
            dimensionsDecoded0 = [DevOpsGuruClientTypes.CloudWatchMetricsDimension]()
            for structure0 in dimensionsContainer {
                if let structure0 = structure0 {
                    dimensionsDecoded0?.append(structure0)
                }
            }
        }
        dimensions = dimensionsDecoded0
        let statDecoded = try containerValues.decodeIfPresent(DevOpsGuruClientTypes.CloudWatchMetricsStat.self, forKey: .stat)
        stat = statDecoded
        let unitDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .unit)
        unit = unitDecoded
        let periodDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .period) ?? 0
        period = periodDecoded
        let metricDataSummaryDecoded = try containerValues.decodeIfPresent(DevOpsGuruClientTypes.CloudWatchMetricsDataSummary.self, forKey: .metricDataSummary)
        metricDataSummary = metricDataSummaryDecoded
    }
}
