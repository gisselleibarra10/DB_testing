// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension DevOpsGuruClientTypes.ListEventsFilters: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dataSource = "DataSource"
        case eventClass = "EventClass"
        case eventSource = "EventSource"
        case eventTimeRange = "EventTimeRange"
        case insightId = "InsightId"
        case resourceCollection = "ResourceCollection"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dataSource = self.dataSource {
            try encodeContainer.encode(dataSource.rawValue, forKey: .dataSource)
        }
        if let eventClass = self.eventClass {
            try encodeContainer.encode(eventClass.rawValue, forKey: .eventClass)
        }
        if let eventSource = self.eventSource {
            try encodeContainer.encode(eventSource, forKey: .eventSource)
        }
        if let eventTimeRange = self.eventTimeRange {
            try encodeContainer.encode(eventTimeRange, forKey: .eventTimeRange)
        }
        if let insightId = self.insightId {
            try encodeContainer.encode(insightId, forKey: .insightId)
        }
        if let resourceCollection = self.resourceCollection {
            try encodeContainer.encode(resourceCollection, forKey: .resourceCollection)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let insightIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .insightId)
        insightId = insightIdDecoded
        let eventTimeRangeDecoded = try containerValues.decodeIfPresent(DevOpsGuruClientTypes.EventTimeRange.self, forKey: .eventTimeRange)
        eventTimeRange = eventTimeRangeDecoded
        let eventClassDecoded = try containerValues.decodeIfPresent(DevOpsGuruClientTypes.EventClass.self, forKey: .eventClass)
        eventClass = eventClassDecoded
        let eventSourceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .eventSource)
        eventSource = eventSourceDecoded
        let dataSourceDecoded = try containerValues.decodeIfPresent(DevOpsGuruClientTypes.EventDataSource.self, forKey: .dataSource)
        dataSource = dataSourceDecoded
        let resourceCollectionDecoded = try containerValues.decodeIfPresent(DevOpsGuruClientTypes.ResourceCollection.self, forKey: .resourceCollection)
        resourceCollection = resourceCollectionDecoded
    }
}
